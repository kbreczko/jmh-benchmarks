# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 0.00% complete, ETA 07:40:00
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 0.72% complete, ETA 08:17:20
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 1.45% complete, ETA 08:12:57
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 2.17% complete, ETA 08:09:03
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 2.90% complete, ETA 08:05:03
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 3.62% complete, ETA 08:01:41
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 4.35% complete, ETA 07:58:33
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 5.07% complete, ETA 07:56:48
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 5.80% complete, ETA 07:52:49
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 6.52% complete, ETA 07:49:53
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 7.25% complete, ETA 07:46:05
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 7.97% complete, ETA 07:42:30
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 8.70% complete, ETA 07:39:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ops/us
# Warmup Iteration   2: 0.003 ops/us
# Warmup Iteration   3: 0.003 ops/us
# Warmup Iteration   4: 0.003 ops/us
# Warmup Iteration   5: 0.003 ops/us
Iteration   1: 0.003 ops/us
Iteration   2: 0.003 ops/us
Iteration   3: 0.003 ops/us
Iteration   4: 0.003 ops/us
Iteration   5: 0.003 ops/us
Iteration   6: 0.003 ops/us
Iteration   7: 0.003 ops/us
Iteration   8: 0.003 ops/us
Iteration   9: 0.003 ops/us
Iteration  10: 0.003 ops/us
Iteration  11: 0.003 ops/us
Iteration  12: 0.003 ops/us
Iteration  13: 0.003 ops/us
Iteration  14: 0.003 ops/us
Iteration  15: 0.003 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  0.003 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 9.42% complete, ETA 07:35:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ops/us
# Warmup Iteration   2: 0.006 ops/us
# Warmup Iteration   3: 0.006 ops/us
# Warmup Iteration   4: 0.006 ops/us
# Warmup Iteration   5: 0.006 ops/us
Iteration   1: 0.006 ops/us
Iteration   2: 0.006 ops/us
Iteration   3: 0.006 ops/us
Iteration   4: 0.006 ops/us
Iteration   5: 0.006 ops/us
Iteration   6: 0.006 ops/us
Iteration   7: 0.006 ops/us
Iteration   8: 0.006 ops/us
Iteration   9: 0.006 ops/us
Iteration  10: 0.006 ops/us
Iteration  11: 0.006 ops/us
Iteration  12: 0.006 ops/us
Iteration  13: 0.006 ops/us
Iteration  14: 0.006 ops/us
Iteration  15: 0.006 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  0.006 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.006] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 10.14% complete, ETA 07:31:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ops/us
# Warmup Iteration   2: 0.003 ops/us
# Warmup Iteration   3: 0.003 ops/us
# Warmup Iteration   4: 0.003 ops/us
# Warmup Iteration   5: 0.003 ops/us
Iteration   1: 0.003 ops/us
Iteration   2: 0.003 ops/us
Iteration   3: 0.003 ops/us
Iteration   4: 0.003 ops/us
Iteration   5: 0.003 ops/us
Iteration   6: 0.003 ops/us
Iteration   7: 0.003 ops/us
Iteration   8: 0.003 ops/us
Iteration   9: 0.003 ops/us
Iteration  10: 0.003 ops/us
Iteration  11: 0.003 ops/us
Iteration  12: 0.003 ops/us
Iteration  13: 0.003 ops/us
Iteration  14: 0.003 ops/us
Iteration  15: 0.003 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  0.003 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 10.87% complete, ETA 07:27:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ops/us
# Warmup Iteration   2: 0.006 ops/us
# Warmup Iteration   3: 0.006 ops/us
# Warmup Iteration   4: 0.006 ops/us
# Warmup Iteration   5: 0.006 ops/us
Iteration   1: 0.006 ops/us
Iteration   2: 0.006 ops/us
Iteration   3: 0.006 ops/us
Iteration   4: 0.006 ops/us
Iteration   5: 0.006 ops/us
Iteration   6: 0.006 ops/us
Iteration   7: 0.006 ops/us
Iteration   8: 0.006 ops/us
Iteration   9: 0.006 ops/us
Iteration  10: 0.006 ops/us
Iteration  11: 0.006 ops/us
Iteration  12: 0.006 ops/us
Iteration  13: 0.006 ops/us
Iteration  14: 0.006 ops/us
Iteration  15: 0.006 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  0.006 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.006] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 11.59% complete, ETA 07:23:43
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 12.32% complete, ETA 07:20:17
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 13.04% complete, ETA 07:16:31
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁷ ops/us
# Warmup Iteration   2: ≈ 10⁻⁷ ops/us
# Warmup Iteration   3: ≈ 10⁻⁷ ops/us
# Warmup Iteration   4: ≈ 10⁻⁷ ops/us
# Warmup Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   1: ≈ 10⁻⁷ ops/us
Iteration   2: ≈ 10⁻⁷ ops/us
Iteration   3: ≈ 10⁻⁷ ops/us
Iteration   4: ≈ 10⁻⁷ ops/us
Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   6: ≈ 10⁻⁷ ops/us
Iteration   7: ≈ 10⁻⁷ ops/us
Iteration   8: ≈ 10⁻⁷ ops/us
Iteration   9: ≈ 10⁻⁷ ops/us
Iteration  10: ≈ 10⁻⁷ ops/us
Iteration  11: ≈ 10⁻⁷ ops/us
Iteration  12: ≈ 10⁻⁷ ops/us
Iteration  13: ≈ 10⁻⁷ ops/us
Iteration  14: ≈ 10⁻⁷ ops/us
Iteration  15: ≈ 10⁻⁷ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  ≈ 10⁻⁷ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 13.77% complete, ETA 07:15:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.541 ops/us
# Warmup Iteration   2: 0.542 ops/us
# Warmup Iteration   3: 0.542 ops/us
# Warmup Iteration   4: 0.541 ops/us
# Warmup Iteration   5: 0.542 ops/us
Iteration   1: 0.542 ops/us
Iteration   2: 0.542 ops/us
Iteration   3: 0.542 ops/us
Iteration   4: 0.542 ops/us
Iteration   5: 0.542 ops/us
Iteration   6: 0.542 ops/us
Iteration   7: 0.542 ops/us
Iteration   8: 0.542 ops/us
Iteration   9: 0.542 ops/us
Iteration  10: 0.542 ops/us
Iteration  11: 0.542 ops/us
Iteration  12: 0.542 ops/us
Iteration  13: 0.542 ops/us
Iteration  14: 0.542 ops/us
Iteration  15: 0.542 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.542 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.542, 0.542, 0.542), stdev = 0.001
  CI (99.9%): [0.542, 0.542] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 14.49% complete, ETA 07:11:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.192 ops/us
# Warmup Iteration   2: 0.192 ops/us
# Warmup Iteration   3: 0.193 ops/us
# Warmup Iteration   4: 0.192 ops/us
# Warmup Iteration   5: 0.193 ops/us
Iteration   1: 0.193 ops/us
Iteration   2: 0.193 ops/us
Iteration   3: 0.193 ops/us
Iteration   4: 0.192 ops/us
Iteration   5: 0.193 ops/us
Iteration   6: 0.193 ops/us
Iteration   7: 0.193 ops/us
Iteration   8: 0.193 ops/us
Iteration   9: 0.192 ops/us
Iteration  10: 0.193 ops/us
Iteration  11: 0.192 ops/us
Iteration  12: 0.195 ops/us
Iteration  13: 0.195 ops/us
Iteration  14: 0.194 ops/us
Iteration  15: 0.194 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.193 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.192, 0.193, 0.195), stdev = 0.001
  CI (99.9%): [0.192, 0.194] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 15.22% complete, ETA 07:07:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.113 ops/us
# Warmup Iteration   2: 0.113 ops/us
# Warmup Iteration   3: 0.113 ops/us
# Warmup Iteration   4: 0.114 ops/us
# Warmup Iteration   5: 0.114 ops/us
Iteration   1: 0.113 ops/us
Iteration   2: 0.113 ops/us
Iteration   3: 0.113 ops/us
Iteration   4: 0.113 ops/us
Iteration   5: 0.113 ops/us
Iteration   6: 0.114 ops/us
Iteration   7: 0.113 ops/us
Iteration   8: 0.114 ops/us
Iteration   9: 0.113 ops/us
Iteration  10: 0.113 ops/us
Iteration  11: 0.113 ops/us
Iteration  12: 0.113 ops/us
Iteration  13: 0.113 ops/us
Iteration  14: 0.113 ops/us
Iteration  15: 0.113 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.113 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.113, 0.113, 0.114), stdev = 0.001
  CI (99.9%): [0.113, 0.113] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 15.94% complete, ETA 07:03:46
# Fork: 1 of 1
# Warmup Iteration   1: 14.763 ops/us
# Warmup Iteration   2: 15.635 ops/us
# Warmup Iteration   3: 14.786 ops/us
# Warmup Iteration   4: 14.777 ops/us
# Warmup Iteration   5: 14.777 ops/us
Iteration   1: 14.794 ops/us
Iteration   2: 14.464 ops/us
Iteration   3: 14.547 ops/us
Iteration   4: 14.540 ops/us
Iteration   5: 14.554 ops/us
Iteration   6: 14.780 ops/us
Iteration   7: 14.788 ops/us
Iteration   8: 14.786 ops/us
Iteration   9: 14.792 ops/us
Iteration  10: 14.782 ops/us
Iteration  11: 14.787 ops/us
Iteration  12: 14.536 ops/us
Iteration  13: 14.788 ops/us
Iteration  14: 14.764 ops/us
Iteration  15: 14.301 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  14.667 ±(99.9%) 0.172 ops/us [Average]
  (min, avg, max) = (14.301, 14.667, 14.794), stdev = 0.160
  CI (99.9%): [14.495, 14.838] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 16.67% complete, ETA 06:59:50
# Fork: 1 of 1
# Warmup Iteration   1: 1.534 ops/us
# Warmup Iteration   2: 1.654 ops/us
# Warmup Iteration   3: 1.380 ops/us
# Warmup Iteration   4: 1.397 ops/us
# Warmup Iteration   5: 1.401 ops/us
Iteration   1: 1.397 ops/us
Iteration   2: 1.395 ops/us
Iteration   3: 1.399 ops/us
Iteration   4: 1.379 ops/us
Iteration   5: 1.398 ops/us
Iteration   6: 1.380 ops/us
Iteration   7: 1.397 ops/us
Iteration   8: 1.397 ops/us
Iteration   9: 1.396 ops/us
Iteration  10: 1.378 ops/us
Iteration  11: 1.398 ops/us
Iteration  12: 1.397 ops/us
Iteration  13: 1.398 ops/us
Iteration  14: 1.400 ops/us
Iteration  15: 1.399 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  1.394 ±(99.9%) 0.009 ops/us [Average]
  (min, avg, max) = (1.378, 1.394, 1.400), stdev = 0.008
  CI (99.9%): [1.385, 1.402] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 17.39% complete, ETA 06:55:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.152 ops/us
# Warmup Iteration   2: 0.162 ops/us
# Warmup Iteration   3: 0.160 ops/us
# Warmup Iteration   4: 0.160 ops/us
# Warmup Iteration   5: 0.161 ops/us
Iteration   1: 0.163 ops/us
Iteration   2: 0.161 ops/us
Iteration   3: 0.159 ops/us
Iteration   4: 0.162 ops/us
Iteration   5: 0.159 ops/us
Iteration   6: 0.162 ops/us
Iteration   7: 0.160 ops/us
Iteration   8: 0.160 ops/us
Iteration   9: 0.159 ops/us
Iteration  10: 0.160 ops/us
Iteration  11: 0.159 ops/us
Iteration  12: 0.161 ops/us
Iteration  13: 0.160 ops/us
Iteration  14: 0.159 ops/us
Iteration  15: 0.161 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.160 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.159, 0.160, 0.163), stdev = 0.001
  CI (99.9%): [0.159, 0.162] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 18.12% complete, ETA 06:52:03
# Fork: 1 of 1
# Warmup Iteration   1: 16.270 ops/us
# Warmup Iteration   2: 15.382 ops/us
# Warmup Iteration   3: 17.902 ops/us
# Warmup Iteration   4: 18.246 ops/us
# Warmup Iteration   5: 18.054 ops/us
Iteration   1: 18.139 ops/us
Iteration   2: 18.238 ops/us
Iteration   3: 18.253 ops/us
Iteration   4: 18.047 ops/us
Iteration   5: 18.235 ops/us
Iteration   6: 18.240 ops/us
Iteration   7: 18.238 ops/us
Iteration   8: 18.038 ops/us
Iteration   9: 18.234 ops/us
Iteration  10: 18.244 ops/us
Iteration  11: 18.256 ops/us
Iteration  12: 18.245 ops/us
Iteration  13: 18.228 ops/us
Iteration  14: 18.244 ops/us
Iteration  15: 18.230 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  18.207 ±(99.9%) 0.077 ops/us [Average]
  (min, avg, max) = (18.038, 18.207, 18.256), stdev = 0.072
  CI (99.9%): [18.130, 18.284] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 18.84% complete, ETA 06:48:12
# Fork: 1 of 1
# Warmup Iteration   1: 1.734 ops/us
# Warmup Iteration   2: 1.652 ops/us
# Warmup Iteration   3: 1.336 ops/us
# Warmup Iteration   4: 1.477 ops/us
# Warmup Iteration   5: 1.473 ops/us
Iteration   1: 1.473 ops/us
Iteration   2: 1.475 ops/us
Iteration   3: 1.474 ops/us
Iteration   4: 1.477 ops/us
Iteration   5: 1.475 ops/us
Iteration   6: 1.478 ops/us
Iteration   7: 1.454 ops/us
Iteration   8: 1.476 ops/us
Iteration   9: 1.476 ops/us
Iteration  10: 1.477 ops/us
Iteration  11: 1.477 ops/us
Iteration  12: 1.477 ops/us
Iteration  13: 1.477 ops/us
Iteration  14: 1.458 ops/us
Iteration  15: 1.477 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  1.473 ±(99.9%) 0.008 ops/us [Average]
  (min, avg, max) = (1.454, 1.473, 1.478), stdev = 0.007
  CI (99.9%): [1.466, 1.481] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 19.56% complete, ETA 06:44:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.157 ops/us
# Warmup Iteration   2: 0.130 ops/us
# Warmup Iteration   3: 0.138 ops/us
# Warmup Iteration   4: 0.136 ops/us
# Warmup Iteration   5: 0.136 ops/us
Iteration   1: 0.136 ops/us
Iteration   2: 0.136 ops/us
Iteration   3: 0.137 ops/us
Iteration   4: 0.136 ops/us
Iteration   5: 0.137 ops/us
Iteration   6: 0.136 ops/us
Iteration   7: 0.137 ops/us
Iteration   8: 0.137 ops/us
Iteration   9: 0.137 ops/us
Iteration  10: 0.136 ops/us
Iteration  11: 0.136 ops/us
Iteration  12: 0.137 ops/us
Iteration  13: 0.137 ops/us
Iteration  14: 0.137 ops/us
Iteration  15: 0.136 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.137 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.136, 0.137, 0.137), stdev = 0.001
  CI (99.9%): [0.136, 0.137] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 20.29% complete, ETA 06:40:32
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 21.01% complete, ETA 06:36:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ops/us
# Warmup Iteration   2: 0.003 ops/us
# Warmup Iteration   3: 0.003 ops/us
# Warmup Iteration   4: 0.003 ops/us
# Warmup Iteration   5: 0.003 ops/us
Iteration   1: 0.003 ops/us
Iteration   2: 0.003 ops/us
Iteration   3: 0.003 ops/us
Iteration   4: 0.003 ops/us
Iteration   5: 0.003 ops/us
Iteration   6: 0.003 ops/us
Iteration   7: 0.003 ops/us
Iteration   8: 0.003 ops/us
Iteration   9: 0.003 ops/us
Iteration  10: 0.003 ops/us
Iteration  11: 0.003 ops/us
Iteration  12: 0.003 ops/us
Iteration  13: 0.003 ops/us
Iteration  14: 0.003 ops/us
Iteration  15: 0.003 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  0.003 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 21.74% complete, ETA 06:32:57
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 22.46% complete, ETA 06:29:11
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁷ ops/us
# Warmup Iteration   2: ≈ 10⁻⁷ ops/us
# Warmup Iteration   3: ≈ 10⁻⁷ ops/us
# Warmup Iteration   4: ≈ 10⁻⁷ ops/us
# Warmup Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   1: ≈ 10⁻⁷ ops/us
Iteration   2: ≈ 10⁻⁷ ops/us
Iteration   3: ≈ 10⁻⁷ ops/us
Iteration   4: ≈ 10⁻⁷ ops/us
Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   6: ≈ 10⁻⁷ ops/us
Iteration   7: ≈ 10⁻⁷ ops/us
Iteration   8: ≈ 10⁻⁷ ops/us
Iteration   9: ≈ 10⁻⁷ ops/us
Iteration  10: ≈ 10⁻⁷ ops/us
Iteration  11: ≈ 10⁻⁷ ops/us
Iteration  12: ≈ 10⁻⁷ ops/us
Iteration  13: ≈ 10⁻⁷ ops/us
Iteration  14: ≈ 10⁻⁷ ops/us
Iteration  15: ≈ 10⁻⁷ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  ≈ 10⁻⁷ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 23.19% complete, ETA 06:27:23
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻³ ops/us
# Warmup Iteration   2: ≈ 10⁻³ ops/us
# Warmup Iteration   3: ≈ 10⁻³ ops/us
# Warmup Iteration   4: ≈ 10⁻³ ops/us
# Warmup Iteration   5: ≈ 10⁻³ ops/us
Iteration   1: ≈ 10⁻³ ops/us
Iteration   2: ≈ 10⁻³ ops/us
Iteration   3: ≈ 10⁻³ ops/us
Iteration   4: ≈ 10⁻³ ops/us
Iteration   5: ≈ 10⁻³ ops/us
Iteration   6: ≈ 10⁻³ ops/us
Iteration   7: ≈ 10⁻³ ops/us
Iteration   8: ≈ 10⁻³ ops/us
Iteration   9: ≈ 10⁻³ ops/us
Iteration  10: ≈ 10⁻³ ops/us
Iteration  11: ≈ 10⁻³ ops/us
Iteration  12: ≈ 10⁻³ ops/us
Iteration  13: ≈ 10⁻³ ops/us
Iteration  14: ≈ 10⁻³ ops/us
Iteration  15: ≈ 10⁻³ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  ≈ 10⁻³ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 23.91% complete, ETA 06:23:35
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 24.64% complete, ETA 06:19:51
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 25.36% complete, ETA 06:16:17
# Fork: 1 of 1
# Warmup Iteration   1: 1.792 ops/us
# Warmup Iteration   2: 1.798 ops/us
# Warmup Iteration   3: 1.807 ops/us
# Warmup Iteration   4: 1.804 ops/us
# Warmup Iteration   5: 1.795 ops/us
Iteration   1: 1.804 ops/us
Iteration   2: 1.809 ops/us
Iteration   3: 1.804 ops/us
Iteration   4: 1.805 ops/us
Iteration   5: 1.808 ops/us
Iteration   6: 1.795 ops/us
Iteration   7: 1.808 ops/us
Iteration   8: 1.808 ops/us
Iteration   9: 1.809 ops/us
Iteration  10: 1.808 ops/us
Iteration  11: 1.810 ops/us
Iteration  12: 1.797 ops/us
Iteration  13: 1.798 ops/us
Iteration  14: 1.797 ops/us
Iteration  15: 1.797 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  1.804 ±(99.9%) 0.006 ops/us [Average]
  (min, avg, max) = (1.795, 1.804, 1.810), stdev = 0.005
  CI (99.9%): [1.798, 1.810] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 26.09% complete, ETA 06:12:29
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 26.81% complete, ETA 06:08:43
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 27.54% complete, ETA 06:04:59
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: <failure>

java.lang.IllegalArgumentException: duplicate element: -1525486777
	at java.base/java.util.ImmutableCollections$SetN.<init>(ImmutableCollections.java:604)
	at java.base/java.util.Set.of(Set.java:660)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.toSet(SplittingListBenchmark.java:44)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split(SplittingListBenchmark.java:37)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.split.jmh_generated.SplittingListBenchmark_split_jmhTest.split_thrpt_jmhStub(SplittingListBenchmark_split_jmhTest.java:161)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.split.jmh_generated.SplittingListBenchmark_split_jmhTest.split_Throughput(SplittingListBenchmark_split_jmhTest.java:104)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)




# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 28.26% complete, ETA 05:54:03
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 28.98% complete, ETA 05:50:33
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 29.71% complete, ETA 05:47:02
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 30.43% complete, ETA 05:43:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ops/us
# Warmup Iteration   2: 0.002 ops/us
# Warmup Iteration   3: 0.002 ops/us
# Warmup Iteration   4: 0.002 ops/us
# Warmup Iteration   5: 0.002 ops/us
Iteration   1: 0.002 ops/us
Iteration   2: 0.002 ops/us
Iteration   3: 0.002 ops/us
Iteration   4: 0.002 ops/us
Iteration   5: 0.002 ops/us
Iteration   6: 0.002 ops/us
Iteration   7: 0.002 ops/us
Iteration   8: 0.002 ops/us
Iteration   9: 0.002 ops/us
Iteration  10: 0.002 ops/us
Iteration  11: 0.002 ops/us
Iteration  12: 0.002 ops/us
Iteration  13: 0.002 ops/us
Iteration  14: 0.002 ops/us
Iteration  15: 0.002 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  0.002 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 31.16% complete, ETA 05:40:00
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 31.88% complete, ETA 05:36:28
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 32.61% complete, ETA 05:32:59
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 33.33% complete, ETA 05:29:44
# Fork: 1 of 1
# Warmup Iteration   1: 222652.598 us/op
# Warmup Iteration   2: 222272.252 us/op
# Warmup Iteration   3: 223433.968 us/op
# Warmup Iteration   4: 222159.111 us/op
# Warmup Iteration   5: 223704.912 us/op
Iteration   1: 222444.011 us/op
Iteration   2: 222093.485 us/op
Iteration   3: 223789.012 us/op
Iteration   4: 222919.202 us/op
Iteration   5: 221559.944 us/op
Iteration   6: 223714.039 us/op
Iteration   7: 222816.693 us/op
Iteration   8: 221661.743 us/op
Iteration   9: 223734.633 us/op
Iteration  10: 223443.933 us/op
Iteration  11: 222852.337 us/op
Iteration  12: 227022.745 us/op
Iteration  13: 225161.328 us/op
Iteration  14: 225731.750 us/op
Iteration  15: 225702.874 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  223643.182 ±(99.9%) 1722.464 us/op [Average]
  (min, avg, max) = (221559.944, 223643.182, 227022.745), stdev = 1611.194
  CI (99.9%): [221920.718, 225365.646] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 34.06% complete, ETA 05:26:14
# Fork: 1 of 1
# Warmup Iteration   1: 223006.753 us/op
# Warmup Iteration   2: 223592.921 us/op
# Warmup Iteration   3: 224099.320 us/op
# Warmup Iteration   4: 223432.967 us/op
# Warmup Iteration   5: 224361.745 us/op
Iteration   1: 223619.386 us/op
Iteration   2: 223776.127 us/op
Iteration   3: 224255.725 us/op
Iteration   4: 223404.282 us/op
Iteration   5: 223793.899 us/op
Iteration   6: 223816.261 us/op
Iteration   7: 223406.785 us/op
Iteration   8: 223414.061 us/op
Iteration   9: 223264.527 us/op
Iteration  10: 223108.166 us/op
Iteration  11: 223953.852 us/op
Iteration  12: 223682.154 us/op
Iteration  13: 224222.394 us/op
Iteration  14: 224230.771 us/op
Iteration  15: 224341.326 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  223752.648 ±(99.9%) 416.761 us/op [Average]
  (min, avg, max) = (223108.166, 223752.648, 224341.326), stdev = 389.839
  CI (99.9%): [223335.886, 224169.409] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 34.78% complete, ETA 05:22:43
# Fork: 1 of 1
# Warmup Iteration   1: 206011.687 us/op
# Warmup Iteration   2: 205469.273 us/op
# Warmup Iteration   3: 205486.801 us/op
# Warmup Iteration   4: 204932.161 us/op
# Warmup Iteration   5: 205838.735 us/op
Iteration   1: 205427.957 us/op
Iteration   2: 204870.836 us/op
Iteration   3: 205256.419 us/op
Iteration   4: 205207.460 us/op
Iteration   5: 205028.000 us/op
Iteration   6: 205541.229 us/op
Iteration   7: 205610.586 us/op
Iteration   8: 204961.987 us/op
Iteration   9: 205009.487 us/op
Iteration  10: 205662.311 us/op
Iteration  11: 204738.427 us/op
Iteration  12: 205208.552 us/op
Iteration  13: 205137.814 us/op
Iteration  14: 205024.700 us/op
Iteration  15: 205136.892 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  205188.177 ±(99.9%) 290.596 us/op [Average]
  (min, avg, max) = (204738.427, 205188.177, 205662.311), stdev = 271.824
  CI (99.9%): [204897.581, 205478.774] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 35.51% complete, ETA 05:19:11
# Fork: 1 of 1
# Warmup Iteration   1: 200683.998 us/op
# Warmup Iteration   2: 201214.559 us/op
# Warmup Iteration   3: 199876.950 us/op
# Warmup Iteration   4: 200528.225 us/op
# Warmup Iteration   5: 200190.868 us/op
Iteration   1: 200672.461 us/op
Iteration   2: 200392.096 us/op
Iteration   3: 200694.855 us/op
Iteration   4: 200585.901 us/op
Iteration   5: 200558.534 us/op
Iteration   6: 200680.293 us/op
Iteration   7: 200431.574 us/op
Iteration   8: 200834.213 us/op
Iteration   9: 200825.613 us/op
Iteration  10: 200672.019 us/op
Iteration  11: 200415.820 us/op
Iteration  12: 200980.701 us/op
Iteration  13: 199893.015 us/op
Iteration  14: 200739.132 us/op
Iteration  15: 200883.642 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  200617.325 ±(99.9%) 282.723 us/op [Average]
  (min, avg, max) = (199893.015, 200617.325, 200980.701), stdev = 264.459
  CI (99.9%): [200334.602, 200900.047] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 36.23% complete, ETA 05:15:39
# Fork: 1 of 1
# Warmup Iteration   1: 200030.437 us/op
# Warmup Iteration   2: 200013.305 us/op
# Warmup Iteration   3: 199975.797 us/op
# Warmup Iteration   4: 200494.750 us/op
# Warmup Iteration   5: 199984.737 us/op
Iteration   1: 200343.277 us/op
Iteration   2: 200580.709 us/op
Iteration   3: 200084.956 us/op
Iteration   4: 199794.302 us/op
Iteration   5: 200577.772 us/op
Iteration   6: 199514.811 us/op
Iteration   7: 199760.610 us/op
Iteration   8: 199712.101 us/op
Iteration   9: 200250.079 us/op
Iteration  10: 200079.803 us/op
Iteration  11: 200543.218 us/op
Iteration  12: 199467.513 us/op
Iteration  13: 200030.511 us/op
Iteration  14: 200067.467 us/op
Iteration  15: 200056.599 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  200057.582 ±(99.9%) 385.508 us/op [Average]
  (min, avg, max) = (199467.513, 200057.582, 200580.709), stdev = 360.605
  CI (99.9%): [199672.073, 200443.090] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 36.96% complete, ETA 05:12:08
# Fork: 1 of 1
# Warmup Iteration   1: 196091.937 us/op
# Warmup Iteration   2: 196135.476 us/op
# Warmup Iteration   3: 195983.384 us/op
# Warmup Iteration   4: 195809.790 us/op
# Warmup Iteration   5: 196081.309 us/op
Iteration   1: 196426.798 us/op
Iteration   2: 195446.471 us/op
Iteration   3: 195391.263 us/op
Iteration   4: 196311.045 us/op
Iteration   5: 195739.900 us/op
Iteration   6: 196078.357 us/op
Iteration   7: 195422.091 us/op
Iteration   8: 196817.782 us/op
Iteration   9: 195876.219 us/op
Iteration  10: 195746.750 us/op
Iteration  11: 195426.979 us/op
Iteration  12: 195362.280 us/op
Iteration  13: 195839.526 us/op
Iteration  14: 196397.636 us/op
Iteration  15: 195982.062 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  195884.344 ±(99.9%) 480.690 us/op [Average]
  (min, avg, max) = (195362.280, 195884.344, 196817.782), stdev = 449.638
  CI (99.9%): [195403.654, 196365.034] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 37.68% complete, ETA 05:08:38
# Fork: 1 of 1
# Warmup Iteration   1: 500818.514 us/op
# Warmup Iteration   2: 497983.517 us/op
# Warmup Iteration   3: 493069.350 us/op
# Warmup Iteration   4: 495357.319 us/op
# Warmup Iteration   5: 496792.609 us/op
Iteration   1: 493463.864 us/op
Iteration   2: 498459.787 us/op
Iteration   3: 495647.028 us/op
Iteration   4: 498693.247 us/op
Iteration   5: 497308.446 us/op
Iteration   6: 490743.351 us/op
Iteration   7: 499234.620 us/op
Iteration   8: 498603.096 us/op
Iteration   9: 496634.621 us/op
Iteration  10: 497375.278 us/op
Iteration  11: 498135.145 us/op
Iteration  12: 498344.870 us/op
Iteration  13: 498229.961 us/op
Iteration  14: 490758.766 us/op
Iteration  15: 494219.865 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  496390.130 ±(99.9%) 3025.440 us/op [Average]
  (min, avg, max) = (490743.351, 496390.130, 499234.620), stdev = 2829.999
  CI (99.9%): [493364.690, 499415.570] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 38.40% complete, ETA 05:05:18
# Fork: 1 of 1
# Warmup Iteration   1: 458765.684 us/op
# Warmup Iteration   2: 456987.954 us/op
# Warmup Iteration   3: 456027.898 us/op
# Warmup Iteration   4: 458274.811 us/op
# Warmup Iteration   5: 458569.125 us/op
Iteration   1: 459099.360 us/op
Iteration   2: 461299.281 us/op
Iteration   3: 456318.806 us/op
Iteration   4: 458446.989 us/op
Iteration   5: 458387.279 us/op
Iteration   6: 457421.200 us/op
Iteration   7: 456926.798 us/op
Iteration   8: 457159.933 us/op
Iteration   9: 456895.050 us/op
Iteration  10: 457736.694 us/op
Iteration  11: 455872.753 us/op
Iteration  12: 459645.328 us/op
Iteration  13: 456708.497 us/op
Iteration  14: 457618.185 us/op
Iteration  15: 458361.354 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  457859.834 ±(99.9%) 1501.985 us/op [Average]
  (min, avg, max) = (455872.753, 457859.834, 461299.281), stdev = 1404.958
  CI (99.9%): [456357.848, 459361.819] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 39.13% complete, ETA 05:01:46
# Fork: 1 of 1
# Warmup Iteration   1: 411584.439 us/op
# Warmup Iteration   2: 412045.123 us/op
# Warmup Iteration   3: 412251.998 us/op
# Warmup Iteration   4: 412031.160 us/op
# Warmup Iteration   5: 411338.901 us/op
Iteration   1: 411829.535 us/op
Iteration   2: 411619.938 us/op
Iteration   3: 410516.966 us/op
Iteration   4: 411078.167 us/op
Iteration   5: 410661.797 us/op
Iteration   6: 411096.557 us/op
Iteration   7: 410416.098 us/op
Iteration   8: 410857.459 us/op
Iteration   9: 410540.544 us/op
Iteration  10: 410926.903 us/op
Iteration  11: 409679.061 us/op
Iteration  12: 411332.466 us/op
Iteration  13: 412003.919 us/op
Iteration  14: 411557.853 us/op
Iteration  15: 411952.447 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  411071.314 ±(99.9%) 700.950 us/op [Average]
  (min, avg, max) = (409679.061, 411071.314, 412003.919), stdev = 655.669
  CI (99.9%): [410370.364, 411772.264] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 39.85% complete, ETA 04:58:19
# Fork: 1 of 1
# Warmup Iteration   1: 403453.376 us/op
# Warmup Iteration   2: 403524.854 us/op
# Warmup Iteration   3: 403055.771 us/op
# Warmup Iteration   4: 404648.851 us/op
# Warmup Iteration   5: 402466.962 us/op
Iteration   1: 402584.363 us/op
Iteration   2: 400848.920 us/op
Iteration   3: 402226.601 us/op
Iteration   4: 401821.898 us/op
Iteration   5: 401157.432 us/op
Iteration   6: 402268.783 us/op
Iteration   7: 401095.576 us/op
Iteration   8: 403531.593 us/op
Iteration   9: 406035.638 us/op
Iteration  10: 402811.273 us/op
Iteration  11: 401476.646 us/op
Iteration  12: 402484.984 us/op
Iteration  13: 403061.032 us/op
Iteration  14: 402961.818 us/op
Iteration  15: 404319.085 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  402579.043 ±(99.9%) 1444.187 us/op [Average]
  (min, avg, max) = (400848.920, 402579.043, 406035.638), stdev = 1350.894
  CI (99.9%): [401134.856, 404023.230] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 40.58% complete, ETA 04:54:45
# Fork: 1 of 1
# Warmup Iteration   1: 401151.887 us/op
# Warmup Iteration   2: 403032.379 us/op
# Warmup Iteration   3: 407429.423 us/op
# Warmup Iteration   4: 403658.368 us/op
# Warmup Iteration   5: 402497.136 us/op
Iteration   1: 406897.671 us/op
Iteration   2: 408276.805 us/op
Iteration   3: 406196.681 us/op
Iteration   4: 407498.705 us/op
Iteration   5: 403386.223 us/op
Iteration   6: 403504.098 us/op
Iteration   7: 406965.192 us/op
Iteration   8: 404187.973 us/op
Iteration   9: 402440.140 us/op
Iteration  10: 403336.524 us/op
Iteration  11: 407126.897 us/op
Iteration  12: 408075.699 us/op
Iteration  13: 403112.379 us/op
Iteration  14: 406768.612 us/op
Iteration  15: 411007.002 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  405918.707 ±(99.9%) 2631.032 us/op [Average]
  (min, avg, max) = (402440.140, 405918.707, 411007.002), stdev = 2461.069
  CI (99.9%): [403287.675, 408549.739] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 41.30% complete, ETA 04:51:13
# Fork: 1 of 1
# Warmup Iteration   1: 398643.657 us/op
# Warmup Iteration   2: 399087.487 us/op
# Warmup Iteration   3: 399071.012 us/op
# Warmup Iteration   4: 399332.488 us/op
# Warmup Iteration   5: 399130.112 us/op
Iteration   1: 399366.210 us/op
Iteration   2: 399112.899 us/op
Iteration   3: 399369.184 us/op
Iteration   4: 399133.398 us/op
Iteration   5: 399386.145 us/op
Iteration   6: 399112.185 us/op
Iteration   7: 399417.591 us/op
Iteration   8: 399233.659 us/op
Iteration   9: 399275.549 us/op
Iteration  10: 399118.923 us/op
Iteration  11: 395790.244 us/op
Iteration  12: 398841.012 us/op
Iteration  13: 399286.953 us/op
Iteration  14: 399192.576 us/op
Iteration  15: 399235.132 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  398991.444 ±(99.9%) 959.738 us/op [Average]
  (min, avg, max) = (395790.244, 398991.444, 399417.591), stdev = 897.740
  CI (99.9%): [398031.706, 399951.182] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 42.03% complete, ETA 04:47:48
# Fork: 1 of 1
# Warmup Iteration   1: 376.112 us/op
# Warmup Iteration   2: 376.494 us/op
# Warmup Iteration   3: 375.996 us/op
# Warmup Iteration   4: 375.710 us/op
# Warmup Iteration   5: 375.696 us/op
Iteration   1: 375.454 us/op
Iteration   2: 375.590 us/op
Iteration   3: 375.411 us/op
Iteration   4: 376.043 us/op
Iteration   5: 375.355 us/op
Iteration   6: 375.499 us/op
Iteration   7: 375.546 us/op
Iteration   8: 375.520 us/op
Iteration   9: 375.444 us/op
Iteration  10: 375.634 us/op
Iteration  11: 375.413 us/op
Iteration  12: 375.692 us/op
Iteration  13: 375.536 us/op
Iteration  14: 375.709 us/op
Iteration  15: 375.601 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  375.563 ±(99.9%) 0.180 us/op [Average]
  (min, avg, max) = (375.355, 375.563, 376.043), stdev = 0.168
  CI (99.9%): [375.383, 375.743] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 42.75% complete, ETA 04:44:13
# Fork: 1 of 1
# Warmup Iteration   1: 165.794 us/op
# Warmup Iteration   2: 165.705 us/op
# Warmup Iteration   3: 166.910 us/op
# Warmup Iteration   4: 165.566 us/op
# Warmup Iteration   5: 164.837 us/op
Iteration   1: 165.696 us/op
Iteration   2: 164.739 us/op
Iteration   3: 165.320 us/op
Iteration   4: 164.675 us/op
Iteration   5: 164.760 us/op
Iteration   6: 165.669 us/op
Iteration   7: 165.154 us/op
Iteration   8: 164.400 us/op
Iteration   9: 166.135 us/op
Iteration  10: 164.862 us/op
Iteration  11: 165.348 us/op
Iteration  12: 166.015 us/op
Iteration  13: 164.566 us/op
Iteration  14: 164.469 us/op
Iteration  15: 164.734 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  165.103 ±(99.9%) 0.606 us/op [Average]
  (min, avg, max) = (164.400, 165.103, 166.135), stdev = 0.566
  CI (99.9%): [164.497, 165.708] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 43.48% complete, ETA 04:40:37
# Fork: 1 of 1
# Warmup Iteration   1: 203.038 us/op
# Warmup Iteration   2: 202.767 us/op
# Warmup Iteration   3: 239.648 us/op
# Warmup Iteration   4: 202.227 us/op
# Warmup Iteration   5: 202.196 us/op
Iteration   1: 202.107 us/op
Iteration   2: 202.210 us/op
Iteration   3: 202.587 us/op
Iteration   4: 202.294 us/op
Iteration   5: 202.294 us/op
Iteration   6: 202.235 us/op
Iteration   7: 202.420 us/op
Iteration   8: 202.219 us/op
Iteration   9: 202.206 us/op
Iteration  10: 202.236 us/op
Iteration  11: 202.421 us/op
Iteration  12: 202.534 us/op
Iteration  13: 202.532 us/op
Iteration  14: 202.491 us/op
Iteration  15: 202.463 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  202.350 ±(99.9%) 0.160 us/op [Average]
  (min, avg, max) = (202.107, 202.350, 202.587), stdev = 0.150
  CI (99.9%): [202.190, 202.510] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 44.20% complete, ETA 04:37:02
# Fork: 1 of 1
# Warmup Iteration   1: 171.715 us/op
# Warmup Iteration   2: 171.509 us/op
# Warmup Iteration   3: 171.483 us/op
# Warmup Iteration   4: 171.532 us/op
# Warmup Iteration   5: 172.984 us/op
Iteration   1: 172.719 us/op
Iteration   2: 171.077 us/op
Iteration   3: 172.067 us/op
Iteration   4: 171.548 us/op
Iteration   5: 172.092 us/op
Iteration   6: 174.013 us/op
Iteration   7: 172.163 us/op
Iteration   8: 172.323 us/op
Iteration   9: 171.847 us/op
Iteration  10: 172.403 us/op
Iteration  11: 170.912 us/op
Iteration  12: 171.252 us/op
Iteration  13: 173.189 us/op
Iteration  14: 171.104 us/op
Iteration  15: 171.079 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  171.986 ±(99.9%) 0.937 us/op [Average]
  (min, avg, max) = (170.912, 171.986, 174.013), stdev = 0.877
  CI (99.9%): [171.049, 172.923] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 44.93% complete, ETA 04:33:26
# Fork: 1 of 1
# Warmup Iteration   1: 804048.284 us/op
# Warmup Iteration   2: 791456.878 us/op
# Warmup Iteration   3: 789276.355 us/op
# Warmup Iteration   4: 793317.504 us/op
# Warmup Iteration   5: 794976.372 us/op
Iteration   1: 787310.252 us/op
Iteration   2: 793092.122 us/op
Iteration   3: 796741.650 us/op
Iteration   4: 788600.873 us/op
Iteration   5: 790729.526 us/op
Iteration   6: 788379.287 us/op
Iteration   7: 791194.636 us/op
Iteration   8: 793205.922 us/op
Iteration   9: 787620.333 us/op
Iteration  10: 792546.701 us/op
Iteration  11: 783005.569 us/op
Iteration  12: 793979.543 us/op
Iteration  13: 789628.882 us/op
Iteration  14: 792681.690 us/op
Iteration  15: 796004.564 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  790981.437 ±(99.9%) 3885.250 us/op [Average]
  (min, avg, max) = (783005.569, 790981.437, 796741.650), stdev = 3634.266
  CI (99.9%): [787096.186, 794866.687] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 45.65% complete, ETA 04:29:57
# Fork: 1 of 1
# Warmup Iteration   1: 141719.615 us/op
# Warmup Iteration   2: 140476.873 us/op
# Warmup Iteration   3: 141529.057 us/op
# Warmup Iteration   4: 139594.037 us/op
# Warmup Iteration   5: 138936.636 us/op
Iteration   1: 140446.680 us/op
Iteration   2: 138528.411 us/op
Iteration   3: 141006.204 us/op
Iteration   4: 136562.576 us/op
Iteration   5: 138290.729 us/op
Iteration   6: 139265.474 us/op
Iteration   7: 138595.708 us/op
Iteration   8: 137443.211 us/op
Iteration   9: 138953.633 us/op
Iteration  10: 139464.136 us/op
Iteration  11: 140021.921 us/op
Iteration  12: 138883.673 us/op
Iteration  13: 138171.327 us/op
Iteration  14: 138403.993 us/op
Iteration  15: 137316.283 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  138756.931 ±(99.9%) 1268.402 us/op [Average]
  (min, avg, max) = (136562.576, 138756.931, 141006.204), stdev = 1186.464
  CI (99.9%): [137488.528, 140025.333] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 46.38% complete, ETA 04:26:23
# Fork: 1 of 1
# Warmup Iteration   1: 6397588.211 us/op
# Warmup Iteration   2: 4138423.636 us/op
# Warmup Iteration   3: 4197837.461 us/op
# Warmup Iteration   4: 4262755.644 us/op
# Warmup Iteration   5: 4332232.190 us/op
Iteration   1: 4158127.052 us/op
Iteration   2: 4060145.063 us/op
Iteration   3: 4153619.566 us/op
Iteration   4: 4355206.239 us/op
Iteration   5: 4136857.160 us/op
Iteration   6: 4109826.458 us/op
Iteration   7: 4308679.317 us/op
Iteration   8: 4199726.860 us/op
Iteration   9: 4215025.860 us/op
Iteration  10: 4145535.984 us/op
Iteration  11: 4134199.040 us/op
Iteration  12: 4148230.702 us/op
Iteration  13: 4287849.241 us/op
Iteration  14: 4221088.063 us/op
Iteration  15: 4167830.026 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  4186796.442 ±(99.9%) 84886.017 us/op [Average]
  (min, avg, max) = (4060145.063, 4186796.442, 4355206.239), stdev = 79402.433
  CI (99.9%): [4101910.425, 4271682.459] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 47.10% complete, ETA 04:23:45
# Fork: 1 of 1
# Warmup Iteration   1: 1.850 us/op
# Warmup Iteration   2: 1.847 us/op
# Warmup Iteration   3: 1.847 us/op
# Warmup Iteration   4: 1.845 us/op
# Warmup Iteration   5: 1.848 us/op
Iteration   1: 1.845 us/op
Iteration   2: 1.845 us/op
Iteration   3: 1.844 us/op
Iteration   4: 1.845 us/op
Iteration   5: 1.845 us/op
Iteration   6: 1.846 us/op
Iteration   7: 1.845 us/op
Iteration   8: 1.845 us/op
Iteration   9: 1.846 us/op
Iteration  10: 1.844 us/op
Iteration  11: 1.845 us/op
Iteration  12: 1.849 us/op
Iteration  13: 1.848 us/op
Iteration  14: 1.848 us/op
Iteration  15: 1.845 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  1.846 ±(99.9%) 0.002 us/op [Average]
  (min, avg, max) = (1.844, 1.846, 1.849), stdev = 0.002
  CI (99.9%): [1.844, 1.847] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 47.82% complete, ETA 04:20:07
# Fork: 1 of 1
# Warmup Iteration   1: 4.916 us/op
# Warmup Iteration   2: 4.930 us/op
# Warmup Iteration   3: 4.908 us/op
# Warmup Iteration   4: 4.916 us/op
# Warmup Iteration   5: 4.907 us/op
Iteration   1: 4.910 us/op
Iteration   2: 4.921 us/op
Iteration   3: 4.909 us/op
Iteration   4: 4.909 us/op
Iteration   5: 4.906 us/op
Iteration   6: 4.905 us/op
Iteration   7: 4.910 us/op
Iteration   8: 4.909 us/op
Iteration   9: 4.910 us/op
Iteration  10: 4.909 us/op
Iteration  11: 4.925 us/op
Iteration  12: 4.912 us/op
Iteration  13: 4.913 us/op
Iteration  14: 4.917 us/op
Iteration  15: 4.934 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  4.913 ±(99.9%) 0.008 us/op [Average]
  (min, avg, max) = (4.905, 4.913, 4.934), stdev = 0.008
  CI (99.9%): [4.905, 4.922] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 48.55% complete, ETA 04:16:29
# Fork: 1 of 1
# Warmup Iteration   1: 9.376 us/op
# Warmup Iteration   2: 9.338 us/op
# Warmup Iteration   3: 9.310 us/op
# Warmup Iteration   4: 9.340 us/op
# Warmup Iteration   5: 9.334 us/op
Iteration   1: 9.316 us/op
Iteration   2: 9.388 us/op
Iteration   3: 9.311 us/op
Iteration   4: 9.309 us/op
Iteration   5: 9.309 us/op
Iteration   6: 9.330 us/op
Iteration   7: 9.308 us/op
Iteration   8: 9.329 us/op
Iteration   9: 9.317 us/op
Iteration  10: 9.312 us/op
Iteration  11: 9.337 us/op
Iteration  12: 9.333 us/op
Iteration  13: 9.372 us/op
Iteration  14: 9.335 us/op
Iteration  15: 9.388 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  9.333 ±(99.9%) 0.030 us/op [Average]
  (min, avg, max) = (9.308, 9.333, 9.388), stdev = 0.028
  CI (99.9%): [9.303, 9.363] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 49.27% complete, ETA 04:12:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.068 us/op
# Warmup Iteration   2: 0.064 us/op
# Warmup Iteration   3: 0.074 us/op
# Warmup Iteration   4: 0.074 us/op
# Warmup Iteration   5: 0.075 us/op
Iteration   1: 0.074 us/op
Iteration   2: 0.074 us/op
Iteration   3: 0.074 us/op
Iteration   4: 0.074 us/op
Iteration   5: 0.074 us/op
Iteration   6: 0.074 us/op
Iteration   7: 0.074 us/op
Iteration   8: 0.075 us/op
Iteration   9: 0.074 us/op
Iteration  10: 0.074 us/op
Iteration  11: 0.074 us/op
Iteration  12: 0.074 us/op
Iteration  13: 0.075 us/op
Iteration  14: 0.074 us/op
Iteration  15: 0.074 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.074 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.074, 0.074, 0.075), stdev = 0.001
  CI (99.9%): [0.074, 0.075] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 50.00% complete, ETA 04:09:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.651 us/op
# Warmup Iteration   2: 0.615 us/op
# Warmup Iteration   3: 0.642 us/op
# Warmup Iteration   4: 0.651 us/op
# Warmup Iteration   5: 0.641 us/op
Iteration   1: 0.642 us/op
Iteration   2: 0.644 us/op
Iteration   3: 0.644 us/op
Iteration   4: 0.642 us/op
Iteration   5: 0.650 us/op
Iteration   6: 0.650 us/op
Iteration   7: 0.644 us/op
Iteration   8: 0.651 us/op
Iteration   9: 0.644 us/op
Iteration  10: 0.640 us/op
Iteration  11: 0.646 us/op
Iteration  12: 0.651 us/op
Iteration  13: 0.644 us/op
Iteration  14: 0.644 us/op
Iteration  15: 0.653 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.646 ±(99.9%) 0.004 us/op [Average]
  (min, avg, max) = (0.640, 0.646, 0.653), stdev = 0.004
  CI (99.9%): [0.642, 0.650] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 50.72% complete, ETA 04:05:37
# Fork: 1 of 1
# Warmup Iteration   1: 6.662 us/op
# Warmup Iteration   2: 6.236 us/op
# Warmup Iteration   3: 6.351 us/op
# Warmup Iteration   4: 6.332 us/op
# Warmup Iteration   5: 6.303 us/op
Iteration   1: 6.332 us/op
Iteration   2: 6.287 us/op
Iteration   3: 6.314 us/op
Iteration   4: 6.280 us/op
Iteration   5: 6.166 us/op
Iteration   6: 6.246 us/op
Iteration   7: 6.317 us/op
Iteration   8: 6.274 us/op
Iteration   9: 6.291 us/op
Iteration  10: 6.251 us/op
Iteration  11: 6.331 us/op
Iteration  12: 6.231 us/op
Iteration  13: 6.260 us/op
Iteration  14: 6.229 us/op
Iteration  15: 6.343 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  6.277 ±(99.9%) 0.051 us/op [Average]
  (min, avg, max) = (6.166, 6.277, 6.343), stdev = 0.048
  CI (99.9%): [6.225, 6.328] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 51.45% complete, ETA 04:01:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.062 us/op
# Warmup Iteration   2: 0.066 us/op
# Warmup Iteration   3: 0.055 us/op
# Warmup Iteration   4: 0.055 us/op
# Warmup Iteration   5: 0.055 us/op
Iteration   1: 0.055 us/op
Iteration   2: 0.055 us/op
Iteration   3: 0.055 us/op
Iteration   4: 0.055 us/op
Iteration   5: 0.058 us/op
Iteration   6: 0.055 us/op
Iteration   7: 0.058 us/op
Iteration   8: 0.056 us/op
Iteration   9: 0.055 us/op
Iteration  10: 0.055 us/op
Iteration  11: 0.055 us/op
Iteration  12: 0.055 us/op
Iteration  13: 0.055 us/op
Iteration  14: 0.055 us/op
Iteration  15: 0.055 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.055 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.055, 0.055, 0.058), stdev = 0.001
  CI (99.9%): [0.054, 0.057] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 52.17% complete, ETA 03:58:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.576 us/op
# Warmup Iteration   2: 0.615 us/op
# Warmup Iteration   3: 0.725 us/op
# Warmup Iteration   4: 0.727 us/op
# Warmup Iteration   5: 0.750 us/op
Iteration   1: 0.726 us/op
Iteration   2: 0.726 us/op
Iteration   3: 0.724 us/op
Iteration   4: 0.739 us/op
Iteration   5: 0.724 us/op
Iteration   6: 0.725 us/op
Iteration   7: 0.738 us/op
Iteration   8: 0.728 us/op
Iteration   9: 0.746 us/op
Iteration  10: 0.724 us/op
Iteration  11: 0.736 us/op
Iteration  12: 0.737 us/op
Iteration  13: 0.727 us/op
Iteration  14: 0.741 us/op
Iteration  15: 0.737 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.732 ±(99.9%) 0.008 us/op [Average]
  (min, avg, max) = (0.724, 0.732, 0.746), stdev = 0.008
  CI (99.9%): [0.724, 0.740] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 52.90% complete, ETA 03:54:44
# Fork: 1 of 1
# Warmup Iteration   1: 6.377 us/op
# Warmup Iteration   2: 7.658 us/op
# Warmup Iteration   3: 7.262 us/op
# Warmup Iteration   4: 7.240 us/op
# Warmup Iteration   5: 7.283 us/op
Iteration   1: 7.272 us/op
Iteration   2: 7.296 us/op
Iteration   3: 7.238 us/op
Iteration   4: 7.295 us/op
Iteration   5: 7.253 us/op
Iteration   6: 7.294 us/op
Iteration   7: 7.240 us/op
Iteration   8: 7.296 us/op
Iteration   9: 7.281 us/op
Iteration  10: 7.262 us/op
Iteration  11: 7.309 us/op
Iteration  12: 7.347 us/op
Iteration  13: 7.273 us/op
Iteration  14: 7.302 us/op
Iteration  15: 7.244 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  7.280 ±(99.9%) 0.032 us/op [Average]
  (min, avg, max) = (7.238, 7.280, 7.347), stdev = 0.030
  CI (99.9%): [7.248, 7.312] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 53.62% complete, ETA 03:51:07
# Fork: 1 of 1
# Warmup Iteration   1: 14456.058 us/op
# Warmup Iteration   2: 14338.065 us/op
# Warmup Iteration   3: 14352.886 us/op
# Warmup Iteration   4: 14347.396 us/op
# Warmup Iteration   5: 14346.137 us/op
Iteration   1: 14345.374 us/op
Iteration   2: 14355.239 us/op
Iteration   3: 14352.583 us/op
Iteration   4: 14342.946 us/op
Iteration   5: 14354.529 us/op
Iteration   6: 14349.764 us/op
Iteration   7: 14368.045 us/op
Iteration   8: 14344.244 us/op
Iteration   9: 14357.321 us/op
Iteration  10: 14352.667 us/op
Iteration  11: 14347.422 us/op
Iteration  12: 14343.626 us/op
Iteration  13: 14362.991 us/op
Iteration  14: 14345.953 us/op
Iteration  15: 14346.083 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  14351.252 ±(99.9%) 7.926 us/op [Average]
  (min, avg, max) = (14342.946, 14351.252, 14368.045), stdev = 7.414
  CI (99.9%): [14343.326, 14359.178] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 54.35% complete, ETA 03:47:30
# Fork: 1 of 1
# Warmup Iteration   1: 350.289 us/op
# Warmup Iteration   2: 346.408 us/op
# Warmup Iteration   3: 348.209 us/op
# Warmup Iteration   4: 345.620 us/op
# Warmup Iteration   5: 346.920 us/op
Iteration   1: 344.700 us/op
Iteration   2: 346.165 us/op
Iteration   3: 344.843 us/op
Iteration   4: 344.387 us/op
Iteration   5: 344.716 us/op
Iteration   6: 344.339 us/op
Iteration   7: 344.639 us/op
Iteration   8: 344.651 us/op
Iteration   9: 347.124 us/op
Iteration  10: 345.200 us/op
Iteration  11: 345.437 us/op
Iteration  12: 345.856 us/op
Iteration  13: 345.274 us/op
Iteration  14: 345.671 us/op
Iteration  15: 345.915 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  345.261 ±(99.9%) 0.830 us/op [Average]
  (min, avg, max) = (344.339, 345.261, 347.124), stdev = 0.776
  CI (99.9%): [344.432, 346.091] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 55.07% complete, ETA 03:43:52
# Fork: 1 of 1
# Warmup Iteration   1: 34467.014 us/op
# Warmup Iteration   2: 34236.097 us/op
# Warmup Iteration   3: 34236.556 us/op
# Warmup Iteration   4: 34239.735 us/op
# Warmup Iteration   5: 34388.824 us/op
Iteration   1: 34234.448 us/op
Iteration   2: 34297.183 us/op
Iteration   3: 34257.386 us/op
Iteration   4: 34244.850 us/op
Iteration   5: 34250.977 us/op
Iteration   6: 34166.012 us/op
Iteration   7: 34229.995 us/op
Iteration   8: 34209.968 us/op
Iteration   9: 34163.384 us/op
Iteration  10: 34195.041 us/op
Iteration  11: 34393.651 us/op
Iteration  12: 34202.542 us/op
Iteration  13: 34151.750 us/op
Iteration  14: 34250.309 us/op
Iteration  15: 34397.726 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  34243.015 ±(99.9%) 78.644 us/op [Average]
  (min, avg, max) = (34151.750, 34243.015, 34397.726), stdev = 73.563
  CI (99.9%): [34164.371, 34321.658] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 55.80% complete, ETA 03:40:15
# Fork: 1 of 1
# Warmup Iteration   1: 3295497.710 us/op
# Warmup Iteration   2: 5958716.937 us/op
# Warmup Iteration   3: 11456410.596 us/op
# Warmup Iteration   4: 11450520.795 us/op
# Warmup Iteration   5: 11441458.966 us/op
Iteration   1: 11509784.443 us/op
Iteration   2: 11481511.181 us/op
Iteration   3: 11462836.581 us/op
Iteration   4: 11438705.192 us/op
Iteration   5: 11447457.379 us/op
Iteration   6: 11458605.018 us/op
Iteration   7: 11463325.114 us/op
Iteration   8: 11475883.121 us/op
Iteration   9: 11460844.328 us/op
Iteration  10: 11444570.281 us/op
Iteration  11: 11494179.531 us/op
Iteration  12: 11455112.812 us/op
Iteration  13: 11504883.527 us/op
Iteration  14: 11444539.533 us/op
Iteration  15: 11438711.835 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  11465396.658 ±(99.9%) 24787.010 us/op [Average]
  (min, avg, max) = (11438705.192, 11465396.658, 11509784.443), stdev = 23185.784
  CI (99.9%): [11440609.649, 11490183.668] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 56.52% complete, ETA 03:37:07
# Fork: 1 of 1
# Warmup Iteration   1: 2265.390 us/op
# Warmup Iteration   2: 2256.792 us/op
# Warmup Iteration   3: 2257.730 us/op
# Warmup Iteration   4: 2256.994 us/op
# Warmup Iteration   5: 2256.532 us/op
Iteration   1: 2257.660 us/op
Iteration   2: 2253.730 us/op
Iteration   3: 2253.683 us/op
Iteration   4: 2255.671 us/op
Iteration   5: 2257.061 us/op
Iteration   6: 2255.294 us/op
Iteration   7: 2256.712 us/op
Iteration   8: 2256.957 us/op
Iteration   9: 2256.032 us/op
Iteration  10: 2253.120 us/op
Iteration  11: 2257.261 us/op
Iteration  12: 2255.642 us/op
Iteration  13: 2255.104 us/op
Iteration  14: 2260.598 us/op
Iteration  15: 2257.365 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  2256.126 ±(99.9%) 2.021 us/op [Average]
  (min, avg, max) = (2253.120, 2256.126, 2260.598), stdev = 1.890
  CI (99.9%): [2254.105, 2258.146] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 57.24% complete, ETA 03:33:29
# Fork: 1 of 1
# Warmup Iteration   1: 62259.765 us/op
# Warmup Iteration   2: 62198.719 us/op
# Warmup Iteration   3: 62176.036 us/op
# Warmup Iteration   4: 62154.563 us/op
# Warmup Iteration   5: 62197.461 us/op
Iteration   1: 62107.945 us/op
Iteration   2: 62156.031 us/op
Iteration   3: 62120.844 us/op
Iteration   4: 62098.924 us/op
Iteration   5: 62135.663 us/op
Iteration   6: 62125.174 us/op
Iteration   7: 62164.346 us/op
Iteration   8: 62125.900 us/op
Iteration   9: 62143.903 us/op
Iteration  10: 62090.839 us/op
Iteration  11: 62200.163 us/op
Iteration  12: 62165.607 us/op
Iteration  13: 62220.747 us/op
Iteration  14: 62147.869 us/op
Iteration  15: 62176.749 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  62145.380 ±(99.9%) 38.940 us/op [Average]
  (min, avg, max) = (62090.839, 62145.380, 62220.747), stdev = 36.425
  CI (99.9%): [62106.440, 62184.320] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 57.97% complete, ETA 03:29:52
# Fork: 1 of 1
# Warmup Iteration   1: 1708396.820 us/op
# Warmup Iteration   2: 1703960.498 us/op
# Warmup Iteration   3: 1703846.151 us/op
# Warmup Iteration   4: 1702996.445 us/op
# Warmup Iteration   5: 1704603.708 us/op
Iteration   1: 1703156.232 us/op
Iteration   2: 1703281.669 us/op
Iteration   3: 1703849.781 us/op
Iteration   4: 1703481.742 us/op
Iteration   5: 1704210.103 us/op
Iteration   6: 1704461.921 us/op
Iteration   7: 1704061.617 us/op
Iteration   8: 1703473.466 us/op
Iteration   9: 1704316.836 us/op
Iteration  10: 1704394.692 us/op
Iteration  11: 1703710.770 us/op
Iteration  12: 1704339.550 us/op
Iteration  13: 1705527.668 us/op
Iteration  14: 1702902.326 us/op
Iteration  15: 1703531.429 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  1703913.320 ±(99.9%) 709.036 us/op [Average]
  (min, avg, max) = (1702902.326, 1703913.320, 1705527.668), stdev = 663.232
  CI (99.9%): [1703204.284, 1704622.356] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 58.69% complete, ETA 03:26:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.562 us/op
# Warmup Iteration   2: 0.562 us/op
# Warmup Iteration   3: 0.561 us/op
# Warmup Iteration   4: 0.562 us/op
# Warmup Iteration   5: 0.561 us/op
Iteration   1: 0.561 us/op
Iteration   2: 0.562 us/op
Iteration   3: 0.561 us/op
Iteration   4: 0.561 us/op
Iteration   5: 0.561 us/op
Iteration   6: 0.561 us/op
Iteration   7: 0.561 us/op
Iteration   8: 0.561 us/op
Iteration   9: 0.561 us/op
Iteration  10: 0.562 us/op
Iteration  11: 0.566 us/op
Iteration  12: 0.584 us/op
Iteration  13: 0.563 us/op
Iteration  14: 0.563 us/op
Iteration  15: 0.564 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  0.564 ±(99.9%) 0.006 us/op [Average]
  (min, avg, max) = (0.561, 0.564, 0.584), stdev = 0.006
  CI (99.9%): [0.557, 0.570] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 59.42% complete, ETA 03:22:40
# Fork: 1 of 1
# Warmup Iteration   1: 7721.892 us/op
# Warmup Iteration   2: 7848.978 us/op
# Warmup Iteration   3: 7847.833 us/op
# Warmup Iteration   4: 7857.807 us/op
# Warmup Iteration   5: 7839.905 us/op
Iteration   1: 7844.688 us/op
Iteration   2: 7848.292 us/op
Iteration   3: 7847.952 us/op
Iteration   4: 7845.695 us/op
Iteration   5: 7850.705 us/op
Iteration   6: 7849.765 us/op
Iteration   7: 7844.145 us/op
Iteration   8: 7847.407 us/op
Iteration   9: 7846.854 us/op
Iteration  10: 7842.527 us/op
Iteration  11: 7845.547 us/op
Iteration  12: 7854.600 us/op
Iteration  13: 7844.044 us/op
Iteration  14: 7844.950 us/op
Iteration  15: 7843.412 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  7846.705 ±(99.9%) 3.425 us/op [Average]
  (min, avg, max) = (7842.527, 7846.705, 7854.600), stdev = 3.204
  CI (99.9%): [7843.280, 7850.131] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 60.14% complete, ETA 03:19:03
# Fork: 1 of 1
# Warmup Iteration   1: 37783.037 us/op
# Warmup Iteration   2: 45042.278 us/op
# Warmup Iteration   3: 33963.664 us/op
# Warmup Iteration   4: 35412.358 us/op
# Warmup Iteration   5: 38117.531 us/op
Iteration   1: 38105.420 us/op
Iteration   2: 34168.642 us/op
Iteration   3: 33268.111 us/op
Iteration   4: 37431.801 us/op
Iteration   5: 33917.307 us/op
Iteration   6: 41216.594 us/op
Iteration   7: 33095.051 us/op
Iteration   8: 38387.533 us/op
Iteration   9: 41470.756 us/op
Iteration  10: 39846.920 us/op
Iteration  11: 33104.346 us/op
Iteration  12: 41823.989 us/op
Iteration  13: 34774.494 us/op
Iteration  14: 38339.544 us/op
Iteration  15: 36133.735 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  37005.616 ±(99.9%) 3402.874 us/op [Average]
  (min, avg, max) = (33095.051, 37005.616, 41823.989), stdev = 3183.050
  CI (99.9%): [33602.742, 40408.490] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 60.87% complete, ETA 03:15:25
# Fork: 1 of 1
# Warmup Iteration   1: 34100.731 us/op
# Warmup Iteration   2: 33946.124 us/op
# Warmup Iteration   3: 33971.624 us/op
# Warmup Iteration   4: 33849.084 us/op
# Warmup Iteration   5: 33876.415 us/op
Iteration   1: 33893.244 us/op
Iteration   2: 33975.956 us/op
Iteration   3: 34114.099 us/op
Iteration   4: 33924.699 us/op
Iteration   5: 33885.815 us/op
Iteration   6: 33983.399 us/op
Iteration   7: 33912.064 us/op
Iteration   8: 33852.940 us/op
Iteration   9: 33869.492 us/op
Iteration  10: 33955.477 us/op
Iteration  11: 33853.522 us/op
Iteration  12: 33927.154 us/op
Iteration  13: 33831.456 us/op
Iteration  14: 34130.562 us/op
Iteration  15: 33912.700 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  33934.838 ±(99.9%) 94.113 us/op [Average]
  (min, avg, max) = (33831.456, 33934.838, 34130.562), stdev = 88.034
  CI (99.9%): [33840.725, 34028.952] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 61.59% complete, ETA 03:11:48
# Fork: 1 of 1
# Warmup Iteration   1: 27861.030 us/op
# Warmup Iteration   2: 27707.356 us/op
# Warmup Iteration   3: 27716.615 us/op
# Warmup Iteration   4: 27879.771 us/op
# Warmup Iteration   5: 27604.472 us/op
Iteration   1: 27736.038 us/op
Iteration   2: 27624.460 us/op
Iteration   3: 27726.711 us/op
Iteration   4: 27607.731 us/op
Iteration   5: 27563.142 us/op
Iteration   6: 27375.527 us/op
Iteration   7: 27770.749 us/op
Iteration   8: 27572.284 us/op
Iteration   9: 27766.716 us/op
Iteration  10: 28064.234 us/op
Iteration  11: 27455.375 us/op
Iteration  12: 27496.472 us/op
Iteration  13: 27399.815 us/op
Iteration  14: 27881.855 us/op
Iteration  15: 27477.661 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  27634.585 ±(99.9%) 203.718 us/op [Average]
  (min, avg, max) = (27375.527, 27634.585, 28064.234), stdev = 190.558
  CI (99.9%): [27430.867, 27838.303] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 62.32% complete, ETA 03:08:10
# Fork: 1 of 1
# Warmup Iteration   1: 22151.126 us/op
# Warmup Iteration   2: 22099.861 us/op
# Warmup Iteration   3: 21970.039 us/op
# Warmup Iteration   4: 21923.863 us/op
# Warmup Iteration   5: 22026.123 us/op
Iteration   1: 22064.750 us/op
Iteration   2: 22153.353 us/op
Iteration   3: 22069.535 us/op
Iteration   4: 22097.619 us/op
Iteration   5: 22050.470 us/op
Iteration   6: 21987.770 us/op
Iteration   7: 22183.121 us/op
Iteration   8: 21988.643 us/op
Iteration   9: 21866.474 us/op
Iteration  10: 21997.959 us/op
Iteration  11: 21898.593 us/op
Iteration  12: 22010.947 us/op
Iteration  13: 21854.728 us/op
Iteration  14: 21896.805 us/op
Iteration  15: 21946.187 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  22004.464 ±(99.9%) 107.295 us/op [Average]
  (min, avg, max) = (21854.728, 22004.464, 22183.121), stdev = 100.363
  CI (99.9%): [21897.169, 22111.758] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 63.04% complete, ETA 03:04:33
# Fork: 1 of 1
# Warmup Iteration   1: 40515.851 us/op
# Warmup Iteration   2: 40788.249 us/op
# Warmup Iteration   3: 38388.289 us/op
# Warmup Iteration   4: 38723.828 us/op
# Warmup Iteration   5: 37956.467 us/op
Iteration   1: 39139.190 us/op
Iteration   2: 38599.202 us/op
Iteration   3: 39141.698 us/op
Iteration   4: 40000.641 us/op
Iteration   5: 41162.918 us/op
Iteration   6: 40216.877 us/op
Iteration   7: 39710.074 us/op
Iteration   8: 38559.083 us/op
Iteration   9: 39731.413 us/op
Iteration  10: 41036.085 us/op
Iteration  11: 38542.549 us/op
Iteration  12: 38818.151 us/op
Iteration  13: 39153.818 us/op
Iteration  14: 41422.595 us/op
Iteration  15: 38632.416 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  39591.114 ±(99.9%) 1060.182 us/op [Average]
  (min, avg, max) = (38542.549, 39591.114, 41422.595), stdev = 991.695
  CI (99.9%): [38530.932, 40651.297] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 63.77% complete, ETA 03:00:55
# Fork: 1 of 1
# Warmup Iteration   1: 664.275 us/op
# Warmup Iteration   2: 660.515 us/op
# Warmup Iteration   3: 661.020 us/op
# Warmup Iteration   4: 660.899 us/op
# Warmup Iteration   5: 659.917 us/op
Iteration   1: 660.953 us/op
Iteration   2: 661.401 us/op
Iteration   3: 660.220 us/op
Iteration   4: 658.584 us/op
Iteration   5: 656.817 us/op
Iteration   6: 661.294 us/op
Iteration   7: 659.472 us/op
Iteration   8: 659.095 us/op
Iteration   9: 660.195 us/op
Iteration  10: 658.650 us/op
Iteration  11: 660.810 us/op
Iteration  12: 661.730 us/op
Iteration  13: 662.750 us/op
Iteration  14: 662.714 us/op
Iteration  15: 661.082 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  660.384 ±(99.9%) 1.743 us/op [Average]
  (min, avg, max) = (656.817, 660.384, 662.750), stdev = 1.631
  CI (99.9%): [658.641, 662.128] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 64.49% complete, ETA 02:57:17
# Fork: 1 of 1
# Warmup Iteration   1: 10037.176 us/op
# Warmup Iteration   2: 10006.162 us/op
# Warmup Iteration   3: 10012.756 us/op
# Warmup Iteration   4: 9999.908 us/op
# Warmup Iteration   5: 10023.937 us/op
Iteration   1: 10045.090 us/op
Iteration   2: 10068.610 us/op
Iteration   3: 10043.493 us/op
Iteration   4: 10047.361 us/op
Iteration   5: 10040.508 us/op
Iteration   6: 10036.294 us/op
Iteration   7: 10032.767 us/op
Iteration   8: 10028.971 us/op
Iteration   9: 10022.957 us/op
Iteration  10: 10040.029 us/op
Iteration  11: 10050.067 us/op
Iteration  12: 10019.046 us/op
Iteration  13: 10019.827 us/op
Iteration  14: 10025.982 us/op
Iteration  15: 10002.547 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  10034.903 ±(99.9%) 17.014 us/op [Average]
  (min, avg, max) = (10002.547, 10034.903, 10068.610), stdev = 15.915
  CI (99.9%): [10017.889, 10051.918] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 65.22% complete, ETA 02:53:40
# Fork: 1 of 1
# Warmup Iteration   1: 110708.340 us/op
# Warmup Iteration   2: 110180.427 us/op
# Warmup Iteration   3: 109992.068 us/op
# Warmup Iteration   4: 110035.221 us/op
# Warmup Iteration   5: 109937.253 us/op
Iteration   1: 109805.880 us/op
Iteration   2: 109902.450 us/op
Iteration   3: 110359.820 us/op
Iteration   4: 110132.555 us/op
Iteration   5: 110190.815 us/op
Iteration   6: 110095.951 us/op
Iteration   7: 110239.900 us/op
Iteration   8: 110057.735 us/op
Iteration   9: 110071.176 us/op
Iteration  10: 109607.225 us/op
Iteration  11: 109923.714 us/op
Iteration  12: 109781.076 us/op
Iteration  13: 109992.612 us/op
Iteration  14: 109424.733 us/op
Iteration  15: 109982.781 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  109971.228 ±(99.9%) 260.724 us/op [Average]
  (min, avg, max) = (109424.733, 109971.228, 110359.820), stdev = 243.881
  CI (99.9%): [109710.504, 110231.952] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 65.94% complete, ETA 02:50:03
# Fork: 1 of 1
# Warmup Iteration   1: 613788.336 us/op
# Warmup Iteration   2: 618886.769 us/op
# Warmup Iteration   3: 667973.187 us/op
# Warmup Iteration   4: 621458.865 us/op
# Warmup Iteration   5: 565945.958 us/op
Iteration   1: 605591.947 us/op
Iteration   2: 581047.672 us/op
Iteration   3: 596052.395 us/op
Iteration   4: 562699.659 us/op
Iteration   5: 566867.591 us/op
Iteration   6: 627474.954 us/op
Iteration   7: 561034.850 us/op
Iteration   8: 571284.068 us/op
Iteration   9: 609022.065 us/op
Iteration  10: 625849.524 us/op
Iteration  11: 588172.460 us/op
Iteration  12: 614891.729 us/op
Iteration  13: 568164.240 us/op
Iteration  14: 628988.429 us/op
Iteration  15: 597127.653 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  593617.949 ±(99.9%) 26116.706 us/op [Average]
  (min, avg, max) = (561034.850, 593617.949, 628988.429), stdev = 24429.583
  CI (99.9%): [567501.243, 619734.655] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 66.66% complete, ETA 02:46:30
# Fork: 1 of 1
# Warmup Iteration   1: 221870.703 ±(99.9%) 2534.681 us/op
# Warmup Iteration   2: 224546.725 ±(99.9%) 2404.727 us/op
# Warmup Iteration   3: 222612.685 ±(99.9%) 2435.943 us/op
# Warmup Iteration   4: 222391.319 ±(99.9%) 2412.728 us/op
# Warmup Iteration   5: 222204.905 ±(99.9%) 2073.011 us/op
Iteration   1: 222536.954 ±(99.9%) 2214.236 us/op
                 createNewObjects·p0.00:   211812.352 us/op
                 createNewObjects·p0.50:   223084.544 us/op
                 createNewObjects·p0.90:   228012.851 us/op
                 createNewObjects·p0.95:   228327.424 us/op
                 createNewObjects·p0.99:   228589.568 us/op
                 createNewObjects·p0.999:  228589.568 us/op
                 createNewObjects·p0.9999: 228589.568 us/op
                 createNewObjects·p1.00:   228589.568 us/op

Iteration   2: 222822.400 ±(99.9%) 2332.691 us/op
                 createNewObjects·p0.00:   211288.064 us/op
                 createNewObjects·p0.50:   223608.832 us/op
                 createNewObjects·p0.90:   228432.282 us/op
                 createNewObjects·p0.95:   229926.502 us/op
                 createNewObjects·p0.99:   230162.432 us/op
                 createNewObjects·p0.999:  230162.432 us/op
                 createNewObjects·p0.9999: 230162.432 us/op
                 createNewObjects·p1.00:   230162.432 us/op

Iteration   3: 222583.558 ±(99.9%) 2446.762 us/op
                 createNewObjects·p0.00:   207355.904 us/op
                 createNewObjects·p0.50:   223084.544 us/op
                 createNewObjects·p0.90:   227488.563 us/op
                 createNewObjects·p0.95:   228956.570 us/op
                 createNewObjects·p0.99:   231473.152 us/op
                 createNewObjects·p0.999:  231473.152 us/op
                 createNewObjects·p0.9999: 231473.152 us/op
                 createNewObjects·p1.00:   231473.152 us/op

Iteration   4: 222711.717 ±(99.9%) 2061.183 us/op
                 createNewObjects·p0.00:   214433.792 us/op
                 createNewObjects·p0.50:   222822.400 us/op
                 createNewObjects·p0.90:   227960.422 us/op
                 createNewObjects·p0.95:   229952.717 us/op
                 createNewObjects·p0.99:   230686.720 us/op
                 createNewObjects·p0.999:  230686.720 us/op
                 createNewObjects·p0.9999: 230686.720 us/op
                 createNewObjects·p1.00:   230686.720 us/op

Iteration   5: 222577.732 ±(99.9%) 2444.394 us/op
                 createNewObjects·p0.00:   211288.064 us/op
                 createNewObjects·p0.50:   222298.112 us/op
                 createNewObjects·p0.90:   228537.139 us/op
                 createNewObjects·p0.95:   229480.858 us/op
                 createNewObjects·p0.99:   231211.008 us/op
                 createNewObjects·p0.999:  231211.008 us/op
                 createNewObjects·p0.9999: 231211.008 us/op
                 createNewObjects·p1.00:   231211.008 us/op

Iteration   6: 222641.812 ±(99.9%) 2024.931 us/op
                 createNewObjects·p0.00:   214695.936 us/op
                 createNewObjects·p0.50:   222822.400 us/op
                 createNewObjects·p0.90:   227803.136 us/op
                 createNewObjects·p0.95:   230136.218 us/op
                 createNewObjects·p0.99:   231211.008 us/op
                 createNewObjects·p0.999:  231211.008 us/op
                 createNewObjects·p0.9999: 231211.008 us/op
                 createNewObjects·p1.00:   231211.008 us/op

Iteration   7: 224220.501 ±(99.9%) 2636.737 us/op
                 createNewObjects·p0.00:   211025.920 us/op
                 createNewObjects·p0.50:   225181.696 us/op
                 createNewObjects·p0.90:   230162.432 us/op
                 createNewObjects·p0.95:   231892.582 us/op
                 createNewObjects·p0.99:   233570.304 us/op
                 createNewObjects·p0.999:  233570.304 us/op
                 createNewObjects·p0.9999: 233570.304 us/op
                 createNewObjects·p1.00:   233570.304 us/op

Iteration   8: 223276.783 ±(99.9%) 2343.099 us/op
                 createNewObjects·p0.00:   212336.640 us/op
                 createNewObjects·p0.50:   224395.264 us/op
                 createNewObjects·p0.90:   228641.997 us/op
                 createNewObjects·p0.95:   229559.501 us/op
                 createNewObjects·p0.99:   230162.432 us/op
                 createNewObjects·p0.999:  230162.432 us/op
                 createNewObjects·p0.9999: 230162.432 us/op
                 createNewObjects·p1.00:   230162.432 us/op

Iteration   9: 222560.256 ±(99.9%) 2420.912 us/op
                 createNewObjects·p0.00:   212598.784 us/op
                 createNewObjects·p0.50:   223870.976 us/op
                 createNewObjects·p0.90:   228274.995 us/op
                 createNewObjects·p0.95:   228773.069 us/op
                 createNewObjects·p0.99:   229638.144 us/op
                 createNewObjects·p0.999:  229638.144 us/op
                 createNewObjects·p0.9999: 229638.144 us/op
                 createNewObjects·p1.00:   229638.144 us/op

Iteration  10: 222775.797 ±(99.9%) 2372.176 us/op
                 createNewObjects·p0.00:   212598.784 us/op
                 createNewObjects·p0.50:   223608.832 us/op
                 createNewObjects·p0.90:   227907.994 us/op
                 createNewObjects·p0.95:   228327.424 us/op
                 createNewObjects·p0.99:   230162.432 us/op
                 createNewObjects·p0.999:  230162.432 us/op
                 createNewObjects·p0.9999: 230162.432 us/op
                 createNewObjects·p1.00:   230162.432 us/op

Iteration  11: 222880.654 ±(99.9%) 2309.061 us/op
                 createNewObjects·p0.00:   212074.496 us/op
                 createNewObjects·p0.50:   223084.544 us/op
                 createNewObjects·p0.90:   228222.566 us/op
                 createNewObjects·p0.95:   229585.715 us/op
                 createNewObjects·p0.99:   229900.288 us/op
                 createNewObjects·p0.999:  229900.288 us/op
                 createNewObjects·p0.9999: 229900.288 us/op
                 createNewObjects·p1.00:   229900.288 us/op

Iteration  12: 223451.546 ±(99.9%) 2126.079 us/op
                 createNewObjects·p0.00:   213647.360 us/op
                 createNewObjects·p0.50:   223870.976 us/op
                 createNewObjects·p0.90:   228694.426 us/op
                 createNewObjects·p0.95:   228851.712 us/op
                 createNewObjects·p0.99:   229900.288 us/op
                 createNewObjects·p0.999:  229900.288 us/op
                 createNewObjects·p0.9999: 229900.288 us/op
                 createNewObjects·p1.00:   229900.288 us/op

Iteration  13: 222007.474 ±(99.9%) 2387.217 us/op
                 createNewObjects·p0.00:   211550.208 us/op
                 createNewObjects·p0.50:   222035.968 us/op
                 createNewObjects·p0.90:   228406.067 us/op
                 createNewObjects·p0.95:   229271.142 us/op
                 createNewObjects·p0.99:   230686.720 us/op
                 createNewObjects·p0.999:  230686.720 us/op
                 createNewObjects·p0.9999: 230686.720 us/op
                 createNewObjects·p1.00:   230686.720 us/op

Iteration  14: 221751.029 ±(99.9%) 2466.316 us/op
                 createNewObjects·p0.00:   211288.064 us/op
                 createNewObjects·p0.50:   221511.680 us/op
                 createNewObjects·p0.90:   227331.277 us/op
                 createNewObjects·p0.95:   228930.355 us/op
                 createNewObjects·p0.99:   230686.720 us/op
                 createNewObjects·p0.999:  230686.720 us/op
                 createNewObjects·p0.9999: 230686.720 us/op
                 createNewObjects·p1.00:   230686.720 us/op

Iteration  15: 222711.717 ±(99.9%) 2055.944 us/op
                 createNewObjects·p0.00:   214958.080 us/op
                 createNewObjects·p0.50:   221511.680 us/op
                 createNewObjects·p0.90:   227907.994 us/op
                 createNewObjects·p0.95:   229218.714 us/op
                 createNewObjects·p0.99:   230948.864 us/op
                 createNewObjects·p0.999:  230948.864 us/op
                 createNewObjects·p0.9999: 230948.864 us/op
                 createNewObjects·p1.00:   230948.864 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 677
  mean = 222764.705 ±(99.9%) 559.492 us/op

  Histogram, us/op:
    [200000.000, 202500.000) = 0 
    [202500.000, 205000.000) = 0 
    [205000.000, 207500.000) = 1 
    [207500.000, 210000.000) = 0 
    [210000.000, 212500.000) = 11 
    [212500.000, 215000.000) = 20 
    [215000.000, 217500.000) = 51 
    [217500.000, 220000.000) = 100 
    [220000.000, 222500.000) = 120 
    [222500.000, 225000.000) = 146 
    [225000.000, 227500.000) = 121 
    [227500.000, 230000.000) = 89 
    [230000.000, 232500.000) = 16 
    [232500.000, 235000.000) = 2 
    [235000.000, 237500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 207355.904 us/op
     p(50.0000) = 223084.544 us/op
     p(90.0000) = 228327.424 us/op
     p(95.0000) = 229113.856 us/op
     p(99.0000) = 230744.392 us/op
     p(99.9000) = 233570.304 us/op
     p(99.9900) = 233570.304 us/op
     p(99.9990) = 233570.304 us/op
     p(99.9999) = 233570.304 us/op
    p(100.0000) = 233570.304 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 67.39% complete, ETA 02:42:53
# Fork: 1 of 1
# Warmup Iteration   1: 223177.751 ±(99.9%) 1821.060 us/op
# Warmup Iteration   2: 223550.578 ±(99.9%) 812.949 us/op
# Warmup Iteration   3: 223346.688 ±(99.9%) 745.458 us/op
# Warmup Iteration   4: 224039.913 ±(99.9%) 781.156 us/op
# Warmup Iteration   5: 224296.232 ±(99.9%) 671.329 us/op
Iteration   1: 223777.769 ±(99.9%) 747.859 us/op
                 createNewObjects·p0.00:   221511.680 us/op
                 createNewObjects·p0.50:   223870.976 us/op
                 createNewObjects·p0.90:   225968.128 us/op
                 createNewObjects·p0.95:   226151.629 us/op
                 createNewObjects·p0.99:   226754.560 us/op
                 createNewObjects·p0.999:  226754.560 us/op
                 createNewObjects·p0.9999: 226754.560 us/op
                 createNewObjects·p1.00:   226754.560 us/op

Iteration   2: 223480.673 ±(99.9%) 680.479 us/op
                 createNewObjects·p0.00:   220987.392 us/op
                 createNewObjects·p0.50:   223346.688 us/op
                 createNewObjects·p0.90:   225286.554 us/op
                 createNewObjects·p0.95:   225968.128 us/op
                 createNewObjects·p0.99:   225968.128 us/op
                 createNewObjects·p0.999:  225968.128 us/op
                 createNewObjects·p0.9999: 225968.128 us/op
                 createNewObjects·p1.00:   225968.128 us/op

Iteration   3: 223678.737 ±(99.9%) 556.114 us/op
                 createNewObjects·p0.00:   222035.968 us/op
                 createNewObjects·p0.50:   223608.832 us/op
                 createNewObjects·p0.90:   225286.554 us/op
                 createNewObjects·p0.95:   225627.341 us/op
                 createNewObjects·p0.99:   225705.984 us/op
                 createNewObjects·p0.999:  225705.984 us/op
                 createNewObjects·p0.9999: 225705.984 us/op
                 createNewObjects·p1.00:   225705.984 us/op

Iteration   4: 223812.722 ±(99.9%) 705.547 us/op
                 createNewObjects·p0.00:   221511.680 us/op
                 createNewObjects·p0.50:   223870.976 us/op
                 createNewObjects·p0.90:   225391.411 us/op
                 createNewObjects·p0.95:   226256.486 us/op
                 createNewObjects·p0.99:   226492.416 us/op
                 createNewObjects·p0.999:  226492.416 us/op
                 createNewObjects·p0.9999: 226492.416 us/op
                 createNewObjects·p1.00:   226492.416 us/op

Iteration   5: 224034.088 ±(99.9%) 610.048 us/op
                 createNewObjects·p0.00:   221511.680 us/op
                 createNewObjects·p0.50:   224133.120 us/op
                 createNewObjects·p0.90:   225181.696 us/op
                 createNewObjects·p0.95:   225889.485 us/op
                 createNewObjects·p0.99:   227540.992 us/op
                 createNewObjects·p0.999:  227540.992 us/op
                 createNewObjects·p0.9999: 227540.992 us/op
                 createNewObjects·p1.00:   227540.992 us/op

Iteration   6: 223905.929 ±(99.9%) 722.891 us/op
                 createNewObjects·p0.00:   221249.536 us/op
                 createNewObjects·p0.50:   223870.976 us/op
                 createNewObjects·p0.90:   225705.984 us/op
                 createNewObjects·p0.95:   226938.061 us/op
                 createNewObjects·p0.99:   227540.992 us/op
                 createNewObjects·p0.999:  227540.992 us/op
                 createNewObjects·p0.9999: 227540.992 us/op
                 createNewObjects·p1.00:   227540.992 us/op

Iteration   7: 224022.437 ±(99.9%) 761.768 us/op
                 createNewObjects·p0.00:   220725.248 us/op
                 createNewObjects·p0.50:   223870.976 us/op
                 createNewObjects·p0.90:   226072.986 us/op
                 createNewObjects·p0.95:   227462.349 us/op
                 createNewObjects·p0.99:   227540.992 us/op
                 createNewObjects·p0.999:  227540.992 us/op
                 createNewObjects·p0.9999: 227540.992 us/op
                 createNewObjects·p1.00:   227540.992 us/op

Iteration   8: 223981.659 ±(99.9%) 998.534 us/op
                 createNewObjects·p0.00:   220725.248 us/op
                 createNewObjects·p0.50:   223608.832 us/op
                 createNewObjects·p0.90:   226492.416 us/op
                 createNewObjects·p0.95:   227540.992 us/op
                 createNewObjects·p0.99:   230162.432 us/op
                 createNewObjects·p0.999:  230162.432 us/op
                 createNewObjects·p0.9999: 230162.432 us/op
                 createNewObjects·p1.00:   230162.432 us/op

Iteration   9: 222950.559 ±(99.9%) 719.315 us/op
                 createNewObjects·p0.00:   220987.392 us/op
                 createNewObjects·p0.50:   222560.256 us/op
                 createNewObjects·p0.90:   225391.411 us/op
                 createNewObjects·p0.95:   226151.629 us/op
                 createNewObjects·p0.99:   226754.560 us/op
                 createNewObjects·p0.999:  226754.560 us/op
                 createNewObjects·p0.9999: 226754.560 us/op
                 createNewObjects·p1.00:   226754.560 us/op

Iteration  10: 224307.883 ±(99.9%) 1040.644 us/op
                 createNewObjects·p0.00:   221773.824 us/op
                 createNewObjects·p0.50:   223346.688 us/op
                 createNewObjects·p0.90:   226335.130 us/op
                 createNewObjects·p0.95:   229166.285 us/op
                 createNewObjects·p0.99:   230686.720 us/op
                 createNewObjects·p0.999:  230686.720 us/op
                 createNewObjects·p0.9999: 230686.720 us/op
                 createNewObjects·p1.00:   230686.720 us/op

Iteration  11: 223393.291 ±(99.9%) 635.678 us/op
                 createNewObjects·p0.00:   221249.536 us/op
                 createNewObjects·p0.50:   223608.832 us/op
                 createNewObjects·p0.90:   224762.266 us/op
                 createNewObjects·p0.95:   225103.053 us/op
                 createNewObjects·p0.99:   225968.128 us/op
                 createNewObjects·p0.999:  225968.128 us/op
                 createNewObjects·p0.9999: 225968.128 us/op
                 createNewObjects·p1.00:   225968.128 us/op

Iteration  12: 223789.420 ±(99.9%) 618.849 us/op
                 createNewObjects·p0.00:   221511.680 us/op
                 createNewObjects·p0.50:   223870.976 us/op
                 createNewObjects·p0.90:   225181.696 us/op
                 createNewObjects·p0.95:   225810.842 us/op
                 createNewObjects·p0.99:   225968.128 us/op
                 createNewObjects·p0.999:  225968.128 us/op
                 createNewObjects·p0.9999: 225968.128 us/op
                 createNewObjects·p1.00:   225968.128 us/op

Iteration  13: 224039.913 ±(99.9%) 667.376 us/op
                 createNewObjects·p0.00:   221511.680 us/op
                 createNewObjects·p0.50:   224133.120 us/op
                 createNewObjects·p0.90:   225443.840 us/op
                 createNewObjects·p0.95:   225889.485 us/op
                 createNewObjects·p0.99:   227278.848 us/op
                 createNewObjects·p0.999:  227278.848 us/op
                 createNewObjects·p0.9999: 227278.848 us/op
                 createNewObjects·p1.00:   227278.848 us/op

Iteration  14: 224185.549 ±(99.9%) 714.487 us/op
                 createNewObjects·p0.00:   220725.248 us/op
                 createNewObjects·p0.50:   224395.264 us/op
                 createNewObjects·p0.90:   225810.842 us/op
                 createNewObjects·p0.95:   226518.630 us/op
                 createNewObjects·p0.99:   227016.704 us/op
                 createNewObjects·p0.999:  227016.704 us/op
                 createNewObjects·p0.9999: 227016.704 us/op
                 createNewObjects·p1.00:   227016.704 us/op

Iteration  15: 223742.817 ±(99.9%) 1081.158 us/op
                 createNewObjects·p0.00:   220463.104 us/op
                 createNewObjects·p0.50:   224133.120 us/op
                 createNewObjects·p0.90:   226072.986 us/op
                 createNewObjects·p0.95:   227514.778 us/op
                 createNewObjects·p0.99:   228589.568 us/op
                 createNewObjects·p0.999:  228589.568 us/op
                 createNewObjects·p0.9999: 228589.568 us/op
                 createNewObjects·p1.00:   228589.568 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 675
  mean = 223806.896 ±(99.9%) 188.294 us/op

  Histogram, us/op:
    [220000.000, 221250.000) = 23 
    [221250.000, 222500.000) = 109 
    [222500.000, 223750.000) = 176 
    [223750.000, 225000.000) = 239 
    [225000.000, 226250.000) = 102 
    [226250.000, 227500.000) = 14 
    [227500.000, 228750.000) = 9 
    [228750.000, 230000.000) = 1 
    [230000.000, 231250.000) = 2 
    [231250.000, 232500.000) = 0 
    [232500.000, 233750.000) = 0 
    [233750.000, 235000.000) = 0 
    [235000.000, 236250.000) = 0 
    [236250.000, 237500.000) = 0 
    [237500.000, 238750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 220463.104 us/op
     p(50.0000) = 223870.976 us/op
     p(90.0000) = 225705.984 us/op
     p(95.0000) = 226230.272 us/op
     p(99.0000) = 227666.821 us/op
     p(99.9000) = 230686.720 us/op
     p(99.9900) = 230686.720 us/op
     p(99.9990) = 230686.720 us/op
     p(99.9999) = 230686.720 us/op
    p(100.0000) = 230686.720 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 68.11% complete, ETA 02:39:15
# Fork: 1 of 1
# Warmup Iteration   1: 205237.352 ±(99.9%) 448.214 us/op
# Warmup Iteration   2: 205087.556 ±(99.9%) 607.190 us/op
# Warmup Iteration   3: 204857.511 ±(99.9%) 670.433 us/op
# Warmup Iteration   4: 204664.916 ±(99.9%) 629.951 us/op
# Warmup Iteration   5: 205092.906 ±(99.9%) 639.519 us/op
Iteration   1: 204959.159 ±(99.9%) 560.751 us/op
                 createNewObjects·p0.00:   202899.456 us/op
                 createNewObjects·p0.50:   204996.608 us/op
                 createNewObjects·p0.90:   206307.328 us/op
                 createNewObjects·p0.95:   207093.760 us/op
                 createNewObjects·p0.99:   207355.904 us/op
                 createNewObjects·p0.999:  207355.904 us/op
                 createNewObjects·p0.9999: 207355.904 us/op
                 createNewObjects·p1.00:   207355.904 us/op

Iteration   2: 205151.754 ±(99.9%) 942.330 us/op
                 createNewObjects·p0.00:   203161.600 us/op
                 createNewObjects·p0.50:   204734.464 us/op
                 createNewObjects·p0.90:   206569.472 us/op
                 createNewObjects·p0.95:   207224.832 us/op
                 createNewObjects·p0.99:   215482.368 us/op
                 createNewObjects·p0.999:  215482.368 us/op
                 createNewObjects·p0.9999: 215482.368 us/op
                 createNewObjects·p1.00:   215482.368 us/op

Iteration   3: 204889.610 ±(99.9%) 586.359 us/op
                 createNewObjects·p0.00:   203161.600 us/op
                 createNewObjects·p0.50:   205258.752 us/op
                 createNewObjects·p0.90:   206307.328 us/op
                 createNewObjects·p0.95:   206831.616 us/op
                 createNewObjects·p0.99:   207618.048 us/op
                 createNewObjects·p0.999:  207618.048 us/op
                 createNewObjects·p0.9999: 207618.048 us/op
                 createNewObjects·p1.00:   207618.048 us/op

Iteration   4: 204434.871 ±(99.9%) 639.691 us/op
                 createNewObjects·p0.00:   201588.736 us/op
                 createNewObjects·p0.50:   204472.320 us/op
                 createNewObjects·p0.90:   206045.184 us/op
                 createNewObjects·p0.95:   206831.616 us/op
                 createNewObjects·p0.99:   207618.048 us/op
                 createNewObjects·p0.999:  207618.048 us/op
                 createNewObjects·p0.9999: 207618.048 us/op
                 createNewObjects·p1.00:   207618.048 us/op

Iteration   5: 204370.672 ±(99.9%) 650.715 us/op
                 createNewObjects·p0.00:   201588.736 us/op
                 createNewObjects·p0.50:   204472.320 us/op
                 createNewObjects·p0.90:   206045.184 us/op
                 createNewObjects·p0.95:   206700.544 us/op
                 createNewObjects·p0.99:   206831.616 us/op
                 createNewObjects·p0.999:  206831.616 us/op
                 createNewObjects·p0.9999: 206831.616 us/op
                 createNewObjects·p1.00:   206831.616 us/op

Iteration   6: 205237.352 ±(99.9%) 593.005 us/op
                 createNewObjects·p0.00:   203161.600 us/op
                 createNewObjects·p0.50:   205258.752 us/op
                 createNewObjects·p0.90:   206831.616 us/op
                 createNewObjects·p0.95:   207749.120 us/op
                 createNewObjects·p0.99:   207880.192 us/op
                 createNewObjects·p0.999:  207880.192 us/op
                 createNewObjects·p0.9999: 207880.192 us/op
                 createNewObjects·p1.00:   207880.192 us/op

Iteration   7: 205044.757 ±(99.9%) 602.515 us/op
                 createNewObjects·p0.00:   202899.456 us/op
                 createNewObjects·p0.50:   204996.608 us/op
                 createNewObjects·p0.90:   206569.472 us/op
                 createNewObjects·p0.95:   207224.832 us/op
                 createNewObjects·p0.99:   207880.192 us/op
                 createNewObjects·p0.999:  207880.192 us/op
                 createNewObjects·p0.9999: 207880.192 us/op
                 createNewObjects·p1.00:   207880.192 us/op

Iteration   8: 204739.814 ±(99.9%) 655.482 us/op
                 createNewObjects·p0.00:   202637.312 us/op
                 createNewObjects·p0.50:   204734.464 us/op
                 createNewObjects·p0.90:   206569.472 us/op
                 createNewObjects·p0.95:   207355.904 us/op
                 createNewObjects·p0.99:   208928.768 us/op
                 createNewObjects·p0.999:  208928.768 us/op
                 createNewObjects·p0.9999: 208928.768 us/op
                 createNewObjects·p1.00:   208928.768 us/op

Iteration   9: 204884.261 ±(99.9%) 648.053 us/op
                 createNewObjects·p0.00:   202637.312 us/op
                 createNewObjects·p0.50:   204734.464 us/op
                 createNewObjects·p0.90:   206831.616 us/op
                 createNewObjects·p0.95:   207355.904 us/op
                 createNewObjects·p0.99:   207880.192 us/op
                 createNewObjects·p0.999:  207880.192 us/op
                 createNewObjects·p0.9999: 207880.192 us/op
                 createNewObjects·p1.00:   207880.192 us/op

Iteration  10: 204306.474 ±(99.9%) 651.750 us/op
                 createNewObjects·p0.00:   201588.736 us/op
                 createNewObjects·p0.50:   203948.032 us/op
                 createNewObjects·p0.90:   206307.328 us/op
                 createNewObjects·p0.95:   206700.544 us/op
                 createNewObjects·p0.99:   207093.760 us/op
                 createNewObjects·p0.999:  207093.760 us/op
                 createNewObjects·p0.9999: 207093.760 us/op
                 createNewObjects·p1.00:   207093.760 us/op

Iteration  11: 204397.422 ±(99.9%) 684.683 us/op
                 createNewObjects·p0.00:   201588.736 us/op
                 createNewObjects·p0.50:   203948.032 us/op
                 createNewObjects·p0.90:   206569.472 us/op
                 createNewObjects·p0.95:   207224.832 us/op
                 createNewObjects·p0.99:   207355.904 us/op
                 createNewObjects·p0.999:  207355.904 us/op
                 createNewObjects·p0.9999: 207355.904 us/op
                 createNewObjects·p1.00:   207355.904 us/op

Iteration  12: 204932.409 ±(99.9%) 811.159 us/op
                 createNewObjects·p0.00:   202113.024 us/op
                 createNewObjects·p0.50:   204734.464 us/op
                 createNewObjects·p0.90:   207093.760 us/op
                 createNewObjects·p0.95:   208142.336 us/op
                 createNewObjects·p0.99:   209453.056 us/op
                 createNewObjects·p0.999:  209453.056 us/op
                 createNewObjects·p0.9999: 209453.056 us/op
                 createNewObjects·p1.00:   209453.056 us/op

Iteration  13: 205574.395 ±(99.9%) 925.830 us/op
                 createNewObjects·p0.00:   203161.600 us/op
                 createNewObjects·p0.50:   205783.040 us/op
                 createNewObjects·p0.90:   207880.192 us/op
                 createNewObjects·p0.95:   208273.408 us/op
                 createNewObjects·p0.99:   212074.496 us/op
                 createNewObjects·p0.999:  212074.496 us/op
                 createNewObjects·p0.9999: 212074.496 us/op
                 createNewObjects·p1.00:   212074.496 us/op

Iteration  14: 205012.658 ±(99.9%) 680.163 us/op
                 createNewObjects·p0.00:   202637.312 us/op
                 createNewObjects·p0.50:   204996.608 us/op
                 createNewObjects·p0.90:   206831.616 us/op
                 createNewObjects·p0.95:   207355.904 us/op
                 createNewObjects·p0.99:   207355.904 us/op
                 createNewObjects·p0.999:  207355.904 us/op
                 createNewObjects·p0.9999: 207355.904 us/op
                 createNewObjects·p1.00:   207355.904 us/op

Iteration  15: 204713.064 ±(99.9%) 731.736 us/op
                 createNewObjects·p0.00:   201850.880 us/op
                 createNewObjects·p0.50:   204210.176 us/op
                 createNewObjects·p0.90:   206569.472 us/op
                 createNewObjects·p0.95:   208011.264 us/op
                 createNewObjects·p0.99:   209190.912 us/op
                 createNewObjects·p0.999:  209190.912 us/op
                 createNewObjects·p0.9999: 209190.912 us/op
                 createNewObjects·p1.00:   209190.912 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 735
  mean = 204843.245 ±(99.9%) 173.892 us/op

  Histogram, us/op:
    [200000.000, 201250.000) = 0 
    [201250.000, 202500.000) = 20 
    [202500.000, 203750.000) = 163 
    [203750.000, 205000.000) = 264 
    [205000.000, 206250.000) = 162 
    [206250.000, 207500.000) = 101 
    [207500.000, 208750.000) = 20 
    [208750.000, 210000.000) = 3 
    [210000.000, 211250.000) = 0 
    [211250.000, 212500.000) = 1 
    [212500.000, 213750.000) = 0 
    [213750.000, 215000.000) = 0 
    [215000.000, 216250.000) = 1 
    [216250.000, 217500.000) = 0 
    [217500.000, 218750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 201588.736 us/op
     p(50.0000) = 204734.464 us/op
     p(90.0000) = 206569.472 us/op
     p(95.0000) = 207355.904 us/op
     p(99.0000) = 208310.108 us/op
     p(99.9000) = 215482.368 us/op
     p(99.9900) = 215482.368 us/op
     p(99.9990) = 215482.368 us/op
     p(99.9999) = 215482.368 us/op
    p(100.0000) = 215482.368 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 68.84% complete, ETA 02:35:38
# Fork: 1 of 1
# Warmup Iteration   1: 200456.274 ±(99.9%) 770.837 us/op
# Warmup Iteration   2: 200702.689 ±(99.9%) 594.911 us/op
# Warmup Iteration   3: 200870.461 ±(99.9%) 827.338 us/op
# Warmup Iteration   4: 200377.631 ±(99.9%) 608.618 us/op
# Warmup Iteration   5: 200534.917 ±(99.9%) 730.101 us/op
Iteration   1: 200435.302 ±(99.9%) 606.984 us/op
                 createNewObjects·p0.00:   197918.720 us/op
                 createNewObjects·p0.50:   200802.304 us/op
                 createNewObjects·p0.90:   201824.666 us/op
                 createNewObjects·p0.95:   203017.421 us/op
                 createNewObjects·p0.99:   203161.600 us/op
                 createNewObjects·p0.999:  203161.600 us/op
                 createNewObjects·p0.9999: 203161.600 us/op
                 createNewObjects·p1.00:   203161.600 us/op

Iteration   2: 200739.389 ±(99.9%) 818.463 us/op
                 createNewObjects·p0.00:   197394.432 us/op
                 createNewObjects·p0.50:   201064.448 us/op
                 createNewObjects·p0.90:   202873.242 us/op
                 createNewObjects·p0.95:   202899.456 us/op
                 createNewObjects·p0.99:   203423.744 us/op
                 createNewObjects·p0.999:  203423.744 us/op
                 createNewObjects·p0.9999: 203423.744 us/op
                 createNewObjects·p1.00:   203423.744 us/op

Iteration   3: 200540.160 ±(99.9%) 715.124 us/op
                 createNewObjects·p0.00:   197656.576 us/op
                 createNewObjects·p0.50:   200802.304 us/op
                 createNewObjects·p0.90:   202113.024 us/op
                 createNewObjects·p0.95:   203017.421 us/op
                 createNewObjects·p0.99:   204210.176 us/op
                 createNewObjects·p0.999:  204210.176 us/op
                 createNewObjects·p0.9999: 204210.176 us/op
                 createNewObjects·p1.00:   204210.176 us/op

Iteration   4: 200388.116 ±(99.9%) 763.512 us/op
                 createNewObjects·p0.00:   197394.432 us/op
                 createNewObjects·p0.50:   200278.016 us/op
                 createNewObjects·p0.90:   202113.024 us/op
                 createNewObjects·p0.95:   203436.851 us/op
                 createNewObjects·p0.99:   205520.896 us/op
                 createNewObjects·p0.999:  205520.896 us/op
                 createNewObjects·p0.9999: 205520.896 us/op
                 createNewObjects·p1.00:   205520.896 us/op

Iteration   5: 200246.559 ±(99.9%) 659.437 us/op
                 createNewObjects·p0.00:   198443.008 us/op
                 createNewObjects·p0.50:   200015.872 us/op
                 createNewObjects·p0.90:   202611.098 us/op
                 createNewObjects·p0.95:   203017.421 us/op
                 createNewObjects·p0.99:   203161.600 us/op
                 createNewObjects·p0.999:  203161.600 us/op
                 createNewObjects·p0.9999: 203161.600 us/op
                 createNewObjects·p1.00:   203161.600 us/op

Iteration   6: 200246.559 ±(99.9%) 507.460 us/op
                 createNewObjects·p0.00:   197918.720 us/op
                 createNewObjects·p0.50:   200015.872 us/op
                 createNewObjects·p0.90:   201562.522 us/op
                 createNewObjects·p0.95:   201824.666 us/op
                 createNewObjects·p0.99:   202375.168 us/op
                 createNewObjects·p0.999:  202375.168 us/op
                 createNewObjects·p0.9999: 202375.168 us/op
                 createNewObjects·p1.00:   202375.168 us/op

Iteration   7: 200508.703 ±(99.9%) 681.479 us/op
                 createNewObjects·p0.00:   198180.864 us/op
                 createNewObjects·p0.50:   200278.016 us/op
                 createNewObjects·p0.90:   203109.171 us/op
                 createNewObjects·p0.95:   203161.600 us/op
                 createNewObjects·p0.99:   203685.888 us/op
                 createNewObjects·p0.999:  203685.888 us/op
                 createNewObjects·p0.9999: 203685.888 us/op
                 createNewObjects·p1.00:   203685.888 us/op

Iteration   8: 200534.917 ±(99.9%) 639.245 us/op
                 createNewObjects·p0.00:   198180.864 us/op
                 createNewObjects·p0.50:   200015.872 us/op
                 createNewObjects·p0.90:   202348.954 us/op
                 createNewObjects·p0.95:   203279.565 us/op
                 createNewObjects·p0.99:   204210.176 us/op
                 createNewObjects·p0.999:  204210.176 us/op
                 createNewObjects·p0.9999: 204210.176 us/op
                 createNewObjects·p1.00:   204210.176 us/op

Iteration   9: 200257.044 ±(99.9%) 576.694 us/op
                 createNewObjects·p0.00:   198180.864 us/op
                 createNewObjects·p0.50:   199884.800 us/op
                 createNewObjects·p0.90:   202113.024 us/op
                 createNewObjects·p0.95:   202637.312 us/op
                 createNewObjects·p0.99:   203161.600 us/op
                 createNewObjects·p0.999:  203161.600 us/op
                 createNewObjects·p0.9999: 203161.600 us/op
                 createNewObjects·p1.00:   203161.600 us/op

Iteration  10: 200304.230 ±(99.9%) 515.930 us/op
                 createNewObjects·p0.00:   198705.152 us/op
                 createNewObjects·p0.50:   200015.872 us/op
                 createNewObjects·p0.90:   202532.454 us/op
                 createNewObjects·p0.95:   202755.277 us/op
                 createNewObjects·p0.99:   203161.600 us/op
                 createNewObjects·p0.999:  203161.600 us/op
                 createNewObjects·p0.9999: 203161.600 us/op
                 createNewObjects·p1.00:   203161.600 us/op

Iteration  11: 200340.931 ±(99.9%) 633.883 us/op
                 createNewObjects·p0.00:   198180.864 us/op
                 createNewObjects·p0.50:   199884.800 us/op
                 createNewObjects·p0.90:   202348.954 us/op
                 createNewObjects·p0.95:   202375.168 us/op
                 createNewObjects·p0.99:   202375.168 us/op
                 createNewObjects·p0.999:  202375.168 us/op
                 createNewObjects·p0.9999: 202375.168 us/op
                 createNewObjects·p1.00:   202375.168 us/op

Iteration  12: 200346.173 ±(99.9%) 652.716 us/op
                 createNewObjects·p0.00:   198443.008 us/op
                 createNewObjects·p0.50:   199884.800 us/op
                 createNewObjects·p0.90:   202375.168 us/op
                 createNewObjects·p0.95:   202899.456 us/op
                 createNewObjects·p0.99:   204472.320 us/op
                 createNewObjects·p0.999:  204472.320 us/op
                 createNewObjects·p0.9999: 204472.320 us/op
                 createNewObjects·p1.00:   204472.320 us/op

Iteration  13: 200791.818 ±(99.9%) 862.384 us/op
                 createNewObjects·p0.00:   197918.720 us/op
                 createNewObjects·p0.50:   200540.160 us/op
                 createNewObjects·p0.90:   203397.530 us/op
                 createNewObjects·p0.95:   203803.853 us/op
                 createNewObjects·p0.99:   204472.320 us/op
                 createNewObjects·p0.999:  204472.320 us/op
                 createNewObjects·p0.9999: 204472.320 us/op
                 createNewObjects·p1.00:   204472.320 us/op

Iteration  14: 200403.845 ±(99.9%) 505.152 us/op
                 createNewObjects·p0.00:   198967.296 us/op
                 createNewObjects·p0.50:   200278.016 us/op
                 createNewObjects·p0.90:   202113.024 us/op
                 createNewObjects·p0.95:   202637.312 us/op
                 createNewObjects·p0.99:   203685.888 us/op
                 createNewObjects·p0.999:  203685.888 us/op
                 createNewObjects·p0.9999: 203685.888 us/op
                 createNewObjects·p1.00:   203685.888 us/op

Iteration  15: 201080.177 ±(99.9%) 691.378 us/op
                 createNewObjects·p0.00:   198967.296 us/op
                 createNewObjects·p0.50:   200802.304 us/op
                 createNewObjects·p0.90:   202899.456 us/op
                 createNewObjects·p0.95:   203659.674 us/op
                 createNewObjects·p0.99:   204734.464 us/op
                 createNewObjects·p0.999:  204734.464 us/op
                 createNewObjects·p0.9999: 204734.464 us/op
                 createNewObjects·p1.00:   204734.464 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 750
  mean = 200477.595 ±(99.9%) 162.472 us/op

  Histogram, us/op:
    [197000.000, 197500.000) = 3 
    [197500.000, 198000.000) = 10 
    [198000.000, 198500.000) = 24 
    [198500.000, 199000.000) = 58 
    [199000.000, 199500.000) = 120 
    [199500.000, 200000.000) = 71 
    [200000.000, 200500.000) = 130 
    [200500.000, 201000.000) = 81 
    [201000.000, 201500.000) = 79 
    [201500.000, 202000.000) = 52 
    [202000.000, 202500.000) = 56 
    [202500.000, 203000.000) = 36 
    [203000.000, 203500.000) = 17 
    [203500.000, 204000.000) = 6 
    [204000.000, 204500.000) = 4 
    [204500.000, 205000.000) = 2 
    [205000.000, 205500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 197394.432 us/op
     p(50.0000) = 200278.016 us/op
     p(90.0000) = 202375.168 us/op
     p(95.0000) = 202899.456 us/op
     p(99.0000) = 204076.483 us/op
     p(99.9000) = 205520.896 us/op
     p(99.9900) = 205520.896 us/op
     p(99.9990) = 205520.896 us/op
     p(99.9999) = 205520.896 us/op
    p(100.0000) = 205520.896 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 69.56% complete, ETA 02:32:01
# Fork: 1 of 1
# Warmup Iteration   1: 199650.926 ±(99.9%) 692.543 us/op
# Warmup Iteration   2: 199779.428 ±(99.9%) 668.920 us/op
# Warmup Iteration   3: 199779.428 ±(99.9%) 951.462 us/op
# Warmup Iteration   4: 199568.685 ±(99.9%) 775.645 us/op
# Warmup Iteration   5: 199280.841 ±(99.9%) 766.558 us/op
Iteration   1: 199774.288 ±(99.9%) 989.670 us/op
                 createNewObjects·p0.00:   196870.144 us/op
                 createNewObjects·p0.50:   199491.584 us/op
                 createNewObjects·p0.90:   203109.171 us/op
                 createNewObjects·p0.95:   203895.603 us/op
                 createNewObjects·p0.99:   206307.328 us/op
                 createNewObjects·p0.999:  206307.328 us/op
                 createNewObjects·p0.9999: 206307.328 us/op
                 createNewObjects·p1.00:   206307.328 us/op

Iteration   2: 200550.646 ±(99.9%) 851.555 us/op
                 createNewObjects·p0.00:   197918.720 us/op
                 createNewObjects·p0.50:   200540.160 us/op
                 createNewObjects·p0.90:   202899.456 us/op
                 createNewObjects·p0.95:   204065.997 us/op
                 createNewObjects·p0.99:   204734.464 us/op
                 createNewObjects·p0.999:  204734.464 us/op
                 createNewObjects·p0.9999: 204734.464 us/op
                 createNewObjects·p1.00:   204734.464 us/op

Iteration   3: 199764.008 ±(99.9%) 695.809 us/op
                 createNewObjects·p0.00:   196345.856 us/op
                 createNewObjects·p0.50:   200015.872 us/op
                 createNewObjects·p0.90:   201326.592 us/op
                 createNewObjects·p0.95:   201693.594 us/op
                 createNewObjects·p0.99:   203948.032 us/op
                 createNewObjects·p0.999:  203948.032 us/op
                 createNewObjects·p0.9999: 203948.032 us/op
                 createNewObjects·p1.00:   203948.032 us/op

Iteration   4: 199357.942 ±(99.9%) 801.162 us/op
                 createNewObjects·p0.00:   196870.144 us/op
                 createNewObjects·p0.50:   198705.152 us/op
                 createNewObjects·p0.90:   201588.736 us/op
                 createNewObjects·p0.95:   202480.026 us/op
                 createNewObjects·p0.99:   203685.888 us/op
                 createNewObjects·p0.999:  203685.888 us/op
                 createNewObjects·p0.9999: 203685.888 us/op
                 createNewObjects·p1.00:   203685.888 us/op

Iteration   5: 200131.215 ±(99.9%) 827.899 us/op
                 createNewObjects·p0.00:   196608.000 us/op
                 createNewObjects·p0.50:   200278.016 us/op
                 createNewObjects·p0.90:   202348.954 us/op
                 createNewObjects·p0.95:   202637.312 us/op
                 createNewObjects·p0.99:   203948.032 us/op
                 createNewObjects·p0.999:  203948.032 us/op
                 createNewObjects·p0.9999: 203948.032 us/op
                 createNewObjects·p1.00:   203948.032 us/op

Iteration   6: 199049.537 ±(99.9%) 769.333 us/op
                 createNewObjects·p0.00:   196608.000 us/op
                 createNewObjects·p0.50:   198705.152 us/op
                 createNewObjects·p0.90:   201326.592 us/op
                 createNewObjects·p0.95:   202217.882 us/op
                 createNewObjects·p0.99:   203685.888 us/op
                 createNewObjects·p0.999:  203685.888 us/op
                 createNewObjects·p0.9999: 203685.888 us/op
                 createNewObjects·p1.00:   203685.888 us/op

Iteration   7: 200624.046 ±(99.9%) 783.660 us/op
                 createNewObjects·p0.00:   198180.864 us/op
                 createNewObjects·p0.50:   200540.160 us/op
                 createNewObjects·p0.90:   202348.954 us/op
                 createNewObjects·p0.95:   203921.818 us/op
                 createNewObjects·p0.99:   205783.040 us/op
                 createNewObjects·p0.999:  205783.040 us/op
                 createNewObjects·p0.9999: 205783.040 us/op
                 createNewObjects·p1.00:   205783.040 us/op

Iteration   8: 200152.187 ±(99.9%) 590.475 us/op
                 createNewObjects·p0.00:   197656.576 us/op
                 createNewObjects·p0.50:   200278.016 us/op
                 createNewObjects·p0.90:   201536.307 us/op
                 createNewObjects·p0.95:   203017.421 us/op
                 createNewObjects·p0.99:   203423.744 us/op
                 createNewObjects·p0.999:  203423.744 us/op
                 createNewObjects·p0.9999: 203423.744 us/op
                 createNewObjects·p1.00:   203423.744 us/op

Iteration   9: 200105.001 ±(99.9%) 769.574 us/op
                 createNewObjects·p0.00:   196870.144 us/op
                 createNewObjects·p0.50:   200146.944 us/op
                 createNewObjects·p0.90:   202086.810 us/op
                 createNewObjects·p0.95:   203017.421 us/op
                 createNewObjects·p0.99:   203161.600 us/op
                 createNewObjects·p0.999:  203161.600 us/op
                 createNewObjects·p0.9999: 203161.600 us/op
                 createNewObjects·p1.00:   203161.600 us/op

Iteration  10: 199774.288 ±(99.9%) 879.727 us/op
                 createNewObjects·p0.00:   196608.000 us/op
                 createNewObjects·p0.50:   200015.872 us/op
                 createNewObjects·p0.90:   202113.024 us/op
                 createNewObjects·p0.95:   202637.312 us/op
                 createNewObjects·p0.99:   203161.600 us/op
                 createNewObjects·p0.999:  203161.600 us/op
                 createNewObjects·p0.9999: 203161.600 us/op
                 createNewObjects·p1.00:   203161.600 us/op

Iteration  11: 200283.259 ±(99.9%) 810.416 us/op
                 createNewObjects·p0.00:   196608.000 us/op
                 createNewObjects·p0.50:   200409.088 us/op
                 createNewObjects·p0.90:   202873.242 us/op
                 createNewObjects·p0.95:   203161.600 us/op
                 createNewObjects·p0.99:   203685.888 us/op
                 createNewObjects·p0.999:  203685.888 us/op
                 createNewObjects·p0.9999: 203685.888 us/op
                 createNewObjects·p1.00:   203685.888 us/op

Iteration  12: 198802.813 ±(99.9%) 914.646 us/op
                 createNewObjects·p0.00:   196345.856 us/op
                 createNewObjects·p0.50:   198180.864 us/op
                 createNewObjects·p0.90:   201012.019 us/op
                 createNewObjects·p0.95:   203056.742 us/op
                 createNewObjects·p0.99:   206045.184 us/op
                 createNewObjects·p0.999:  206045.184 us/op
                 createNewObjects·p0.9999: 206045.184 us/op
                 createNewObjects·p1.00:   206045.184 us/op

Iteration  13: 200131.215 ±(99.9%) 789.654 us/op
                 createNewObjects·p0.00:   197132.288 us/op
                 createNewObjects·p0.50:   199884.800 us/op
                 createNewObjects·p0.90:   201824.666 us/op
                 createNewObjects·p0.95:   202702.848 us/op
                 createNewObjects·p0.99:   206045.184 us/op
                 createNewObjects·p0.999:  206045.184 us/op
                 createNewObjects·p0.9999: 206045.184 us/op
                 createNewObjects·p1.00:   206045.184 us/op

Iteration  14: 200330.445 ±(99.9%) 574.401 us/op
                 createNewObjects·p0.00:   198443.008 us/op
                 createNewObjects·p0.50:   200278.016 us/op
                 createNewObjects·p0.90:   201850.880 us/op
                 createNewObjects·p0.95:   202637.312 us/op
                 createNewObjects·p0.99:   202637.312 us/op
                 createNewObjects·p0.999:  202637.312 us/op
                 createNewObjects·p0.9999: 202637.312 us/op
                 createNewObjects·p1.00:   202637.312 us/op

Iteration  15: 199214.020 ±(99.9%) 845.970 us/op
                 createNewObjects·p0.00:   196608.000 us/op
                 createNewObjects·p0.50:   198967.296 us/op
                 createNewObjects·p0.90:   201064.448 us/op
                 createNewObjects·p0.95:   203109.171 us/op
                 createNewObjects·p0.99:   204472.320 us/op
                 createNewObjects·p0.999:  204472.320 us/op
                 createNewObjects·p0.9999: 204472.320 us/op
                 createNewObjects·p1.00:   204472.320 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 757
  mean = 199865.234 ±(99.9%) 203.724 us/op

  Histogram, us/op:
    [196000.000, 197000.000) = 24 
    [197000.000, 198000.000) = 101 
    [198000.000, 199000.000) = 139 
    [199000.000, 200000.000) = 111 
    [200000.000, 201000.000) = 190 
    [201000.000, 202000.000) = 119 
    [202000.000, 203000.000) = 44 
    [203000.000, 204000.000) = 19 
    [204000.000, 205000.000) = 6 
    [205000.000, 206000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 196345.856 us/op
     p(50.0000) = 200015.872 us/op
     p(90.0000) = 201850.880 us/op
     p(95.0000) = 202899.456 us/op
     p(99.0000) = 204210.176 us/op
     p(99.9000) = 206307.328 us/op
     p(99.9900) = 206307.328 us/op
     p(99.9990) = 206307.328 us/op
     p(99.9999) = 206307.328 us/op
    p(100.0000) = 206307.328 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 70.29% complete, ETA 02:28:24
# Fork: 1 of 1
# Warmup Iteration   1: 195861.898 ±(99.9%) 762.188 us/op
# Warmup Iteration   2: 195934.650 ±(99.9%) 827.008 us/op
# Warmup Iteration   3: 196263.615 ±(99.9%) 977.160 us/op
# Warmup Iteration   4: 196184.537 ±(99.9%) 958.888 us/op
# Warmup Iteration   5: 196279.035 ±(99.9%) 873.339 us/op
Iteration   1: 195922.393 ±(99.9%) 860.975 us/op
                 createNewObjects·p0.00:   193462.272 us/op
                 createNewObjects·p0.50:   195821.568 us/op
                 createNewObjects·p0.90:   198102.221 us/op
                 createNewObjects·p0.95:   199504.691 us/op
                 createNewObjects·p0.99:   201850.880 us/op
                 createNewObjects·p0.999:  201850.880 us/op
                 createNewObjects·p0.9999: 201850.880 us/op
                 createNewObjects·p1.00:   201850.880 us/op

Iteration   2: 196022.031 ±(99.9%) 718.917 us/op
                 createNewObjects·p0.00:   193986.560 us/op
                 createNewObjects·p0.50:   195821.568 us/op
                 createNewObjects·p0.90:   197656.576 us/op
                 createNewObjects·p0.95:   199124.582 us/op
                 createNewObjects·p0.99:   200802.304 us/op
                 createNewObjects·p0.999:  200802.304 us/op
                 createNewObjects·p0.9999: 200802.304 us/op
                 createNewObjects·p1.00:   200802.304 us/op

Iteration   3: 195740.908 ±(99.9%) 1090.939 us/op
                 createNewObjects·p0.00:   192151.552 us/op
                 createNewObjects·p0.50:   195428.352 us/op
                 createNewObjects·p0.90:   198731.366 us/op
                 createNewObjects·p0.95:   200998.912 us/op
                 createNewObjects·p0.99:   202113.024 us/op
                 createNewObjects·p0.999:  202113.024 us/op
                 createNewObjects·p0.9999: 202113.024 us/op
                 createNewObjects·p1.00:   202113.024 us/op

Iteration   4: 195932.475 ±(99.9%) 674.190 us/op
                 createNewObjects·p0.00:   193462.272 us/op
                 createNewObjects·p0.50:   195559.424 us/op
                 createNewObjects·p0.90:   197840.077 us/op
                 createNewObjects·p0.95:   198718.259 us/op
                 createNewObjects·p0.99:   199753.728 us/op
                 createNewObjects·p0.999:  199753.728 us/op
                 createNewObjects·p0.9999: 199753.728 us/op
                 createNewObjects·p1.00:   199753.728 us/op

Iteration   5: 196751.922 ±(99.9%) 998.771 us/op
                 createNewObjects·p0.00:   193986.560 us/op
                 createNewObjects·p0.50:   196345.856 us/op
                 createNewObjects·p0.90:   199439.155 us/op
                 createNewObjects·p0.95:   201326.592 us/op
                 createNewObjects·p0.99:   203423.744 us/op
                 createNewObjects·p0.999:  203423.744 us/op
                 createNewObjects·p0.9999: 203423.744 us/op
                 createNewObjects·p1.00:   203423.744 us/op

Iteration   6: 195559.424 ±(99.9%) 781.271 us/op
                 createNewObjects·p0.00:   192151.552 us/op
                 createNewObjects·p0.50:   195559.424 us/op
                 createNewObjects·p0.90:   197315.789 us/op
                 createNewObjects·p0.95:   198377.472 us/op
                 createNewObjects·p0.99:   200802.304 us/op
                 createNewObjects·p0.999:  200802.304 us/op
                 createNewObjects·p0.9999: 200802.304 us/op
                 createNewObjects·p1.00:   200802.304 us/op

Iteration   7: 196592.580 ±(99.9%) 924.835 us/op
                 createNewObjects·p0.00:   193724.416 us/op
                 createNewObjects·p0.50:   196608.000 us/op
                 createNewObjects·p0.90:   199491.584 us/op
                 createNewObjects·p0.95:   200278.016 us/op
                 createNewObjects·p0.99:   202113.024 us/op
                 createNewObjects·p0.999:  202113.024 us/op
                 createNewObjects·p0.9999: 202113.024 us/op
                 createNewObjects·p1.00:   202113.024 us/op

Iteration   8: 196350.996 ±(99.9%) 952.236 us/op
                 createNewObjects·p0.00:   193986.560 us/op
                 createNewObjects·p0.50:   195559.424 us/op
                 createNewObjects·p0.90:   199439.155 us/op
                 createNewObjects·p0.95:   200907.162 us/op
                 createNewObjects·p0.99:   201326.592 us/op
                 createNewObjects·p0.999:  201326.592 us/op
                 createNewObjects·p0.9999: 201326.592 us/op
                 createNewObjects·p1.00:   201326.592 us/op

Iteration   9: 196052.872 ±(99.9%) 866.829 us/op
                 createNewObjects·p0.00:   193724.416 us/op
                 createNewObjects·p0.50:   195821.568 us/op
                 createNewObjects·p0.90:   198600.294 us/op
                 createNewObjects·p0.95:   199439.155 us/op
                 createNewObjects·p0.99:   202375.168 us/op
                 createNewObjects·p0.999:  202375.168 us/op
                 createNewObjects·p0.9999: 202375.168 us/op
                 createNewObjects·p1.00:   202375.168 us/op

Iteration  10: 194969.600 ±(99.9%) 779.196 us/op
                 createNewObjects·p0.00:   193200.128 us/op
                 createNewObjects·p0.50:   194510.848 us/op
                 createNewObjects·p0.90:   196345.856 us/op
                 createNewObjects·p0.95:   199150.797 us/op
                 createNewObjects·p0.99:   201588.736 us/op
                 createNewObjects·p0.999:  201588.736 us/op
                 createNewObjects·p0.9999: 201588.736 us/op
                 createNewObjects·p1.00:   201588.736 us/op

Iteration  11: 196258.475 ±(99.9%) 846.069 us/op
                 createNewObjects·p0.00:   193462.272 us/op
                 createNewObjects·p0.50:   196083.712 us/op
                 createNewObjects·p0.90:   198390.579 us/op
                 createNewObjects·p0.95:   199596.442 us/op
                 createNewObjects·p0.99:   202899.456 us/op
                 createNewObjects·p0.999:  202899.456 us/op
                 createNewObjects·p0.9999: 202899.456 us/op
                 createNewObjects·p1.00:   202899.456 us/op

Iteration  12: 196078.671 ±(99.9%) 914.133 us/op
                 createNewObjects·p0.00:   192937.984 us/op
                 createNewObjects·p0.50:   195821.568 us/op
                 createNewObjects·p0.90:   198285.722 us/op
                 createNewObjects·p0.95:   199583.334 us/op
                 createNewObjects·p0.99:   203948.032 us/op
                 createNewObjects·p0.999:  203948.032 us/op
                 createNewObjects·p0.9999: 203948.032 us/op
                 createNewObjects·p1.00:   203948.032 us/op

Iteration  13: 196936.965 ±(99.9%) 777.998 us/op
                 createNewObjects·p0.00:   193724.416 us/op
                 createNewObjects·p0.50:   197132.288 us/op
                 createNewObjects·p0.90:   199124.582 us/op
                 createNewObjects·p0.95:   199963.443 us/op
                 createNewObjects·p0.99:   200278.016 us/op
                 createNewObjects·p0.999:  200278.016 us/op
                 createNewObjects·p0.9999: 200278.016 us/op
                 createNewObjects·p1.00:   200278.016 us/op

Iteration  14: 195393.063 ±(99.9%) 741.873 us/op
                 createNewObjects·p0.00:   192151.552 us/op
                 createNewObjects·p0.50:   195297.280 us/op
                 createNewObjects·p0.90:   197315.789 us/op
                 createNewObjects·p0.95:   198626.509 us/op
                 createNewObjects·p0.99:   199491.584 us/op
                 createNewObjects·p0.999:  199491.584 us/op
                 createNewObjects·p0.9999: 199491.584 us/op
                 createNewObjects·p1.00:   199491.584 us/op

Iteration  15: 196113.959 ±(99.9%) 875.711 us/op
                 createNewObjects·p0.00:   192937.984 us/op
                 createNewObjects·p0.50:   195821.568 us/op
                 createNewObjects·p0.90:   198285.722 us/op
                 createNewObjects·p0.95:   200631.910 us/op
                 createNewObjects·p0.99:   201064.448 us/op
                 createNewObjects·p0.999:  201064.448 us/op
                 createNewObjects·p0.9999: 201064.448 us/op
                 createNewObjects·p1.00:   201064.448 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 773
  mean = 196041.660 ±(99.9%) 216.247 us/op

  Histogram, us/op:
    [190000.000, 191250.000) = 0 
    [191250.000, 192500.000) = 3 
    [192500.000, 193750.000) = 49 
    [193750.000, 195000.000) = 177 
    [195000.000, 196250.000) = 218 
    [196250.000, 197500.000) = 182 
    [197500.000, 198750.000) = 86 
    [198750.000, 200000.000) = 30 
    [200000.000, 201250.000) = 15 
    [201250.000, 202500.000) = 10 
    [202500.000, 203750.000) = 2 
    [203750.000, 205000.000) = 1 
    [205000.000, 206250.000) = 0 
    [206250.000, 207500.000) = 0 
    [207500.000, 208750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 192151.552 us/op
     p(50.0000) = 195821.568 us/op
     p(90.0000) = 198443.008 us/op
     p(95.0000) = 199491.584 us/op
     p(99.0000) = 201850.880 us/op
     p(99.9000) = 203948.032 us/op
     p(99.9900) = 203948.032 us/op
     p(99.9990) = 203948.032 us/op
     p(99.9999) = 203948.032 us/op
    p(100.0000) = 203948.032 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 71.01% complete, ETA 02:24:47
# Fork: 1 of 1
# Warmup Iteration   1: 500118.323 ±(99.9%) 6617.116 us/op
# Warmup Iteration   2: 495826.651 ±(99.9%) 9998.726 us/op
# Warmup Iteration   3: 495277.397 ±(99.9%) 13511.858 us/op
# Warmup Iteration   4: 494128.957 ±(99.9%) 15213.681 us/op
# Warmup Iteration   5: 493230.178 ±(99.9%) 14445.423 us/op
Iteration   1: 498048.634 ±(99.9%) 8804.507 us/op
                 fillHeap·p0.00:   458227.712 us/op
                 fillHeap·p0.50:   499122.176 us/op
                 fillHeap·p0.90:   508454.502 us/op
                 fillHeap·p0.95:   509031.219 us/op
                 fillHeap·p0.99:   509083.648 us/op
                 fillHeap·p0.999:  509083.648 us/op
                 fillHeap·p0.9999: 509083.648 us/op
                 fillHeap·p1.00:   509083.648 us/op

Iteration   2: 496600.600 ±(99.9%) 11166.711 us/op
                 fillHeap·p0.00:   460324.864 us/op
                 fillHeap·p0.50:   498073.600 us/op
                 fillHeap·p0.90:   511180.800 us/op
                 fillHeap·p0.95:   511180.800 us/op
                 fillHeap·p0.99:   511180.800 us/op
                 fillHeap·p0.999:  511180.800 us/op
                 fillHeap·p0.9999: 511180.800 us/op
                 fillHeap·p1.00:   511180.800 us/op

Iteration   3: 490109.416 ±(99.9%) 17447.846 us/op
                 fillHeap·p0.00:   439353.344 us/op
                 fillHeap·p0.50:   494403.584 us/op
                 fillHeap·p0.90:   508454.502 us/op
                 fillHeap·p0.95:   511390.515 us/op
                 fillHeap·p0.99:   511705.088 us/op
                 fillHeap·p0.999:  511705.088 us/op
                 fillHeap·p0.9999: 511705.088 us/op
                 fillHeap·p1.00:   511705.088 us/op

Iteration   4: 492980.517 ±(99.9%) 14499.194 us/op
                 fillHeap·p0.00:   437256.192 us/op
                 fillHeap·p0.50:   498073.600 us/op
                 fillHeap·p0.90:   505833.062 us/op
                 fillHeap·p0.95:   506409.779 us/op
                 fillHeap·p0.99:   506462.208 us/op
                 fillHeap·p0.999:  506462.208 us/op
                 fillHeap·p0.9999: 506462.208 us/op
                 fillHeap·p1.00:   506462.208 us/op

Iteration   5: 496325.973 ±(99.9%) 9906.337 us/op
                 fillHeap·p0.00:   461897.728 us/op
                 fillHeap·p0.50:   497025.024 us/op
                 fillHeap·p0.90:   510866.227 us/op
                 fillHeap·p0.95:   512648.806 us/op
                 fillHeap·p0.99:   512753.664 us/op
                 fillHeap·p0.999:  512753.664 us/op
                 fillHeap·p0.9999: 512753.664 us/op
                 fillHeap·p1.00:   512753.664 us/op

Iteration   6: 490109.416 ±(99.9%) 17531.579 us/op
                 fillHeap·p0.00:   437256.192 us/op
                 fillHeap·p0.50:   494927.872 us/op
                 fillHeap·p0.90:   510971.085 us/op
                 fillHeap·p0.95:   517367.398 us/op
                 fillHeap·p0.99:   517996.544 us/op
                 fillHeap·p0.999:  517996.544 us/op
                 fillHeap·p0.9999: 517996.544 us/op
                 fillHeap·p1.00:   517996.544 us/op

Iteration   7: 496425.838 ±(99.9%) 10558.393 us/op
                 fillHeap·p0.00:   462946.304 us/op
                 fillHeap·p0.50:   498073.600 us/op
                 fillHeap·p0.90:   511075.942 us/op
                 fillHeap·p0.95:   514064.384 us/op
                 fillHeap·p0.99:   514326.528 us/op
                 fillHeap·p0.999:  514326.528 us/op
                 fillHeap·p0.9999: 514326.528 us/op
                 fillHeap·p1.00:   514326.528 us/op

Iteration   8: 493005.483 ±(99.9%) 14605.288 us/op
                 fillHeap·p0.00:   437256.192 us/op
                 fillHeap·p0.50:   498597.888 us/op
                 fillHeap·p0.90:   509188.506 us/op
                 fillHeap·p0.95:   516213.965 us/op
                 fillHeap·p0.99:   516947.968 us/op
                 fillHeap·p0.999:  516947.968 us/op
                 fillHeap·p0.9999: 516947.968 us/op
                 fillHeap·p1.00:   516947.968 us/op

Iteration   9: 493679.567 ±(99.9%) 16071.070 us/op
                 fillHeap·p0.00:   423100.416 us/op
                 fillHeap·p0.50:   497025.024 us/op
                 fillHeap·p0.90:   511809.946 us/op
                 fillHeap·p0.95:   515112.960 us/op
                 fillHeap·p0.99:   515375.104 us/op
                 fillHeap·p0.999:  515375.104 us/op
                 fillHeap·p0.9999: 515375.104 us/op
                 fillHeap·p1.00:   515375.104 us/op

Iteration  10: 493005.483 ±(99.9%) 13154.711 us/op
                 fillHeap·p0.00:   441974.784 us/op
                 fillHeap·p0.50:   497025.024 us/op
                 fillHeap·p0.90:   507720.499 us/op
                 fillHeap·p0.95:   511338.086 us/op
                 fillHeap·p0.99:   511705.088 us/op
                 fillHeap·p0.999:  511705.088 us/op
                 fillHeap·p0.9999: 511705.088 us/op
                 fillHeap·p1.00:   511705.088 us/op

Iteration  11: 494902.906 ±(99.9%) 12801.346 us/op
                 fillHeap·p0.00:   445120.512 us/op
                 fillHeap·p0.50:   498073.600 us/op
                 fillHeap·p0.90:   505833.062 us/op
                 fillHeap·p0.95:   510656.512 us/op
                 fillHeap·p0.99:   511180.800 us/op
                 fillHeap·p0.999:  511180.800 us/op
                 fillHeap·p0.9999: 511180.800 us/op
                 fillHeap·p1.00:   511180.800 us/op

Iteration  12: 493554.737 ±(99.9%) 14562.823 us/op
                 fillHeap·p0.00:   440401.920 us/op
                 fillHeap·p0.50:   496500.736 us/op
                 fillHeap·p0.90:   508559.360 us/op
                 fillHeap·p0.95:   516580.966 us/op
                 fillHeap·p0.99:   517472.256 us/op
                 fillHeap·p0.999:  517472.256 us/op
                 fillHeap·p0.9999: 517472.256 us/op
                 fillHeap·p1.00:   517472.256 us/op

Iteration  13: 496600.600 ±(99.9%) 10559.618 us/op
                 fillHeap·p0.00:   459800.576 us/op
                 fillHeap·p0.50:   499646.464 us/op
                 fillHeap·p0.90:   506671.923 us/op
                 fillHeap·p0.95:   517367.398 us/op
                 fillHeap·p0.99:   518520.832 us/op
                 fillHeap·p0.999:  518520.832 us/op
                 fillHeap·p0.9999: 518520.832 us/op
                 fillHeap·p1.00:   518520.832 us/op

Iteration  14: 495052.702 ±(99.9%) 14140.758 us/op
                 fillHeap·p0.00:   437256.192 us/op
                 fillHeap·p0.50:   499646.464 us/op
                 fillHeap·p0.90:   506357.350 us/op
                 fillHeap·p0.95:   511180.800 us/op
                 fillHeap·p0.99:   511705.088 us/op
                 fillHeap·p0.999:  511705.088 us/op
                 fillHeap·p0.9999: 511705.088 us/op
                 fillHeap·p1.00:   511705.088 us/op

Iteration  15: 496500.736 ±(99.9%) 10422.225 us/op
                 fillHeap·p0.00:   456130.560 us/op
                 fillHeap·p0.50:   499646.464 us/op
                 fillHeap·p0.90:   505099.059 us/op
                 fillHeap·p0.95:   515794.534 us/op
                 fillHeap·p0.99:   516947.968 us/op
                 fillHeap·p0.999:  516947.968 us/op
                 fillHeap·p0.9999: 516947.968 us/op
                 fillHeap·p1.00:   516947.968 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 315
  mean = 494460.174 ±(99.9%) 2939.955 us/op

  Histogram, us/op:
    [420000.000, 430000.000) = 1 
    [430000.000, 440000.000) = 6 
    [440000.000, 450000.000) = 4 
    [450000.000, 460000.000) = 6 
    [460000.000, 470000.000) = 11 
    [470000.000, 480000.000) = 10 
    [480000.000, 490000.000) = 29 
    [490000.000, 500000.000) = 127 
    [500000.000, 510000.000) = 102 

  Percentiles, us/op:
      p(0.0000) = 423100.416 us/op
     p(50.0000) = 498073.600 us/op
     p(90.0000) = 508035.072 us/op
     p(95.0000) = 511285.658 us/op
     p(99.0000) = 517388.370 us/op
     p(99.9000) = 518520.832 us/op
     p(99.9900) = 518520.832 us/op
     p(99.9990) = 518520.832 us/op
     p(99.9999) = 518520.832 us/op
    p(100.0000) = 518520.832 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 71.74% complete, ETA 02:21:13
# Fork: 1 of 1
# Warmup Iteration   1: 457369.786 ±(99.9%) 9091.155 us/op
# Warmup Iteration   2: 459300.119 ±(99.9%) 4909.243 us/op
# Warmup Iteration   3: 458775.831 ±(99.9%) 5790.151 us/op
# Warmup Iteration   4: 461778.572 ±(99.9%) 6211.667 us/op
# Warmup Iteration   5: 459490.769 ±(99.9%) 5154.474 us/op
Iteration   1: 460777.658 ±(99.9%) 5321.222 us/op
                 fillHeap·p0.00:   452460.544 us/op
                 fillHeap·p0.50:   460062.720 us/op
                 fillHeap·p0.90:   470915.482 us/op
                 fillHeap·p0.95:   474533.069 us/op
                 fillHeap·p0.99:   475004.928 us/op
                 fillHeap·p0.999:  475004.928 us/op
                 fillHeap·p0.9999: 475004.928 us/op
                 fillHeap·p1.00:   475004.928 us/op

Iteration   2: 458752.000 ±(99.9%) 5366.218 us/op
                 fillHeap·p0.00:   450887.680 us/op
                 fillHeap·p0.50:   457703.424 us/op
                 fillHeap·p0.90:   470548.480 us/op
                 fillHeap·p0.95:   473117.491 us/op
                 fillHeap·p0.99:   473432.064 us/op
                 fillHeap·p0.999:  473432.064 us/op
                 fillHeap·p0.9999: 473432.064 us/op
                 fillHeap·p1.00:   473432.064 us/op

Iteration   3: 458632.844 ±(99.9%) 5446.374 us/op
                 fillHeap·p0.00:   450363.392 us/op
                 fillHeap·p0.50:   456654.848 us/op
                 fillHeap·p0.90:   467507.610 us/op
                 fillHeap·p0.95:   474795.213 us/op
                 fillHeap·p0.99:   476053.504 us/op
                 fillHeap·p0.999:  476053.504 us/op
                 fillHeap·p0.9999: 476053.504 us/op
                 fillHeap·p1.00:   476053.504 us/op

Iteration   4: 460134.214 ±(99.9%) 5371.949 us/op
                 fillHeap·p0.00:   451411.968 us/op
                 fillHeap·p0.50:   457441.280 us/op
                 fillHeap·p0.90:   470338.765 us/op
                 fillHeap·p0.95:   472147.558 us/op
                 fillHeap·p0.99:   472383.488 us/op
                 fillHeap·p0.999:  472383.488 us/op
                 fillHeap·p0.9999: 472383.488 us/op
                 fillHeap·p1.00:   472383.488 us/op

Iteration   5: 458990.313 ±(99.9%) 6180.566 us/op
                 fillHeap·p0.00:   450363.392 us/op
                 fillHeap·p0.50:   455606.272 us/op
                 fillHeap·p0.90:   471754.342 us/op
                 fillHeap·p0.95:   472383.488 us/op
                 fillHeap·p0.99:   472383.488 us/op
                 fillHeap·p0.999:  472383.488 us/op
                 fillHeap·p0.9999: 472383.488 us/op
                 fillHeap·p1.00:   472383.488 us/op

Iteration   6: 460444.020 ±(99.9%) 6314.212 us/op
                 fillHeap·p0.00:   452460.544 us/op
                 fillHeap·p0.50:   458752.000 us/op
                 fillHeap·p0.90:   473379.635 us/op
                 fillHeap·p0.95:   478045.798 us/op
                 fillHeap·p0.99:   478674.944 us/op
                 fillHeap·p0.999:  478674.944 us/op
                 fillHeap·p0.9999: 478674.944 us/op
                 fillHeap·p1.00:   478674.944 us/op

Iteration   7: 459228.625 ±(99.9%) 5281.299 us/op
                 fillHeap·p0.00:   449839.104 us/op
                 fillHeap·p0.50:   458752.000 us/op
                 fillHeap·p0.90:   469657.190 us/op
                 fillHeap·p0.95:   472514.560 us/op
                 fillHeap·p0.99:   472907.776 us/op
                 fillHeap·p0.999:  472907.776 us/op
                 fillHeap·p0.9999: 472907.776 us/op
                 fillHeap·p1.00:   472907.776 us/op

Iteration   8: 459180.963 ±(99.9%) 5835.181 us/op
                 fillHeap·p0.00:   449314.816 us/op
                 fillHeap·p0.50:   459014.144 us/op
                 fillHeap·p0.90:   471387.341 us/op
                 fillHeap·p0.95:   473641.779 us/op
                 fillHeap·p0.99:   473956.352 us/op
                 fillHeap·p0.999:  473956.352 us/op
                 fillHeap·p0.9999: 473956.352 us/op
                 fillHeap·p1.00:   473956.352 us/op

Iteration   9: 458180.049 ±(99.9%) 4209.579 us/op
                 fillHeap·p0.00:   451411.968 us/op
                 fillHeap·p0.50:   457965.568 us/op
                 fillHeap·p0.90:   462789.018 us/op
                 fillHeap·p0.95:   472304.845 us/op
                 fillHeap·p0.99:   473956.352 us/op
                 fillHeap·p0.999:  473956.352 us/op
                 fillHeap·p0.9999: 473956.352 us/op
                 fillHeap·p1.00:   473956.352 us/op

Iteration  10: 459323.951 ±(99.9%) 5856.371 us/op
                 fillHeap·p0.00:   450887.680 us/op
                 fillHeap·p0.50:   456654.848 us/op
                 fillHeap·p0.90:   471964.058 us/op
                 fillHeap·p0.95:   474690.355 us/op
                 fillHeap·p0.99:   475004.928 us/op
                 fillHeap·p0.999:  475004.928 us/op
                 fillHeap·p0.9999: 475004.928 us/op
                 fillHeap·p1.00:   475004.928 us/op

Iteration  11: 460324.864 ±(99.9%) 5893.437 us/op
                 fillHeap·p0.00:   450363.392 us/op
                 fillHeap·p0.50:   458752.000 us/op
                 fillHeap·p0.90:   472750.490 us/op
                 fillHeap·p0.95:   477154.509 us/op
                 fillHeap·p0.99:   477626.368 us/op
                 fillHeap·p0.999:  477626.368 us/op
                 fillHeap·p0.9999: 477626.368 us/op
                 fillHeap·p1.00:   477626.368 us/op

Iteration  12: 457631.930 ±(99.9%) 5288.502 us/op
                 fillHeap·p0.00:   449839.104 us/op
                 fillHeap·p0.50:   456130.560 us/op
                 fillHeap·p0.90:   466616.320 us/op
                 fillHeap·p0.95:   473300.992 us/op
                 fillHeap·p0.99:   474480.640 us/op
                 fillHeap·p0.999:  474480.640 us/op
                 fillHeap·p0.9999: 474480.640 us/op
                 fillHeap·p1.00:   474480.640 us/op

Iteration  13: 458990.313 ±(99.9%) 5603.142 us/op
                 fillHeap·p0.00:   450887.680 us/op
                 fillHeap·p0.50:   457965.568 us/op
                 fillHeap·p0.90:   470653.338 us/op
                 fillHeap·p0.95:   473484.493 us/op
                 fillHeap·p0.99:   473956.352 us/op
                 fillHeap·p0.999:  473956.352 us/op
                 fillHeap·p0.9999: 473956.352 us/op
                 fillHeap·p1.00:   473956.352 us/op

Iteration  14: 457989.399 ±(99.9%) 5362.541 us/op
                 fillHeap·p0.00:   450363.392 us/op
                 fillHeap·p0.50:   457179.136 us/op
                 fillHeap·p0.90:   467717.325 us/op
                 fillHeap·p0.95:   473536.922 us/op
                 fillHeap·p0.99:   474480.640 us/op
                 fillHeap·p0.999:  474480.640 us/op
                 fillHeap·p0.9999: 474480.640 us/op
                 fillHeap·p1.00:   474480.640 us/op

Iteration  15: 457822.580 ±(99.9%) 5733.598 us/op
                 fillHeap·p0.00:   450887.680 us/op
                 fillHeap·p0.50:   455344.128 us/op
                 fillHeap·p0.90:   471701.914 us/op
                 fillHeap·p0.95:   473196.134 us/op
                 fillHeap·p0.99:   473432.064 us/op
                 fillHeap·p0.999:  473432.064 us/op
                 fillHeap·p0.9999: 473432.064 us/op
                 fillHeap·p1.00:   473432.064 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 330
  mean = 459093.582 ±(99.9%) 1233.072 us/op

  Histogram, us/op:
    [440000.000, 442500.000) = 0 
    [442500.000, 445000.000) = 0 
    [445000.000, 447500.000) = 0 
    [447500.000, 450000.000) = 4 
    [450000.000, 452500.000) = 56 
    [452500.000, 455000.000) = 55 
    [455000.000, 457500.000) = 52 
    [457500.000, 460000.000) = 32 
    [460000.000, 462500.000) = 42 
    [462500.000, 465000.000) = 24 
    [465000.000, 467500.000) = 17 
    [467500.000, 470000.000) = 16 
    [470000.000, 472500.000) = 16 
    [472500.000, 475000.000) = 11 
    [475000.000, 477500.000) = 3 

  Percentiles, us/op:
      p(0.0000) = 449314.816 us/op
     p(50.0000) = 457179.136 us/op
     p(90.0000) = 469709.619 us/op
     p(95.0000) = 472619.418 us/op
     p(99.0000) = 475728.445 us/op
     p(99.9000) = 478674.944 us/op
     p(99.9900) = 478674.944 us/op
     p(99.9990) = 478674.944 us/op
     p(99.9999) = 478674.944 us/op
    p(100.0000) = 478674.944 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 72.46% complete, ETA 02:17:36
# Fork: 1 of 1
# Warmup Iteration   1: 411293.450 ±(99.9%) 2861.659 us/op
# Warmup Iteration   2: 413138.944 ±(99.9%) 2730.369 us/op
# Warmup Iteration   3: 411146.650 ±(99.9%) 1623.246 us/op
# Warmup Iteration   4: 408965.612 ±(99.9%) 2032.752 us/op
# Warmup Iteration   5: 409322.127 ±(99.9%) 3099.693 us/op
Iteration   1: 409406.013 ±(99.9%) 2411.183 us/op
                 fillHeap·p0.00:   405798.912 us/op
                 fillHeap·p0.50:   408420.352 us/op
                 fillHeap·p0.90:   415026.381 us/op
                 fillHeap·p0.95:   418224.538 us/op
                 fillHeap·p0.99:   418381.824 us/op
                 fillHeap·p0.999:  418381.824 us/op
                 fillHeap·p0.9999: 418381.824 us/op
                 fillHeap·p1.00:   418381.824 us/op

Iteration   2: 412342.026 ±(99.9%) 3818.008 us/op
                 fillHeap·p0.00:   405798.912 us/op
                 fillHeap·p0.50:   410517.504 us/op
                 fillHeap·p0.90:   419115.827 us/op
                 fillHeap·p0.95:   426036.429 us/op
                 fillHeap·p0.99:   428867.584 us/op
                 fillHeap·p0.999:  428867.584 us/op
                 fillHeap·p0.9999: 428867.584 us/op
                 fillHeap·p1.00:   428867.584 us/op

Iteration   3: 409930.301 ±(99.9%) 2072.949 us/op
                 fillHeap·p0.00:   405798.912 us/op
                 fillHeap·p0.50:   409993.216 us/op
                 fillHeap·p0.90:   414292.378 us/op
                 fillHeap·p0.95:   415603.098 us/op
                 fillHeap·p0.99:   415760.384 us/op
                 fillHeap·p0.999:  415760.384 us/op
                 fillHeap·p0.9999: 415760.384 us/op
                 fillHeap·p1.00:   415760.384 us/op

Iteration   4: 409741.558 ±(99.9%) 2692.732 us/op
                 fillHeap·p0.00:   403701.760 us/op
                 fillHeap·p0.50:   408944.640 us/op
                 fillHeap·p0.90:   414502.093 us/op
                 fillHeap·p0.95:   419168.256 us/op
                 fillHeap·p0.99:   419954.688 us/op
                 fillHeap·p0.999:  419954.688 us/op
                 fillHeap·p0.9999: 419954.688 us/op
                 fillHeap·p1.00:   419954.688 us/op

Iteration   5: 411062.764 ±(99.9%) 1915.557 us/op
                 fillHeap·p0.00:   407371.776 us/op
                 fillHeap·p0.50:   411041.792 us/op
                 fillHeap·p0.90:   414187.520 us/op
                 fillHeap·p0.95:   416389.530 us/op
                 fillHeap·p0.99:   417333.248 us/op
                 fillHeap·p0.999:  417333.248 us/op
                 fillHeap·p0.9999: 417333.248 us/op
                 fillHeap·p1.00:   417333.248 us/op

Iteration   6: 409657.672 ±(99.9%) 2636.682 us/op
                 fillHeap·p0.00:   404750.336 us/op
                 fillHeap·p0.50:   408944.640 us/op
                 fillHeap·p0.90:   415760.384 us/op
                 fillHeap·p0.95:   417700.250 us/op
                 fillHeap·p0.99:   417857.536 us/op
                 fillHeap·p0.999:  417857.536 us/op
                 fillHeap·p0.9999: 417857.536 us/op
                 fillHeap·p1.00:   417857.536 us/op

Iteration   7: 409846.415 ±(99.9%) 2787.486 us/op
                 fillHeap·p0.00:   404226.048 us/op
                 fillHeap·p0.50:   408944.640 us/op
                 fillHeap·p0.90:   415655.526 us/op
                 fillHeap·p0.95:   417752.678 us/op
                 fillHeap·p0.99:   418381.824 us/op
                 fillHeap·p0.999:  418381.824 us/op
                 fillHeap·p0.9999: 418381.824 us/op
                 fillHeap·p1.00:   418381.824 us/op

Iteration   8: 410727.219 ±(99.9%) 2180.762 us/op
                 fillHeap·p0.00:   406323.200 us/op
                 fillHeap·p0.50:   411041.792 us/op
                 fillHeap·p0.90:   414082.662 us/op
                 fillHeap·p0.95:   418381.824 us/op
                 fillHeap·p0.99:   419954.688 us/op
                 fillHeap·p0.999:  419954.688 us/op
                 fillHeap·p0.9999: 419954.688 us/op
                 fillHeap·p1.00:   419954.688 us/op

Iteration   9: 410580.419 ±(99.9%) 2429.769 us/op
                 fillHeap·p0.00:   403177.472 us/op
                 fillHeap·p0.50:   409468.928 us/op
                 fillHeap·p0.90:   414397.235 us/op
                 fillHeap·p0.95:   416913.818 us/op
                 fillHeap·p0.99:   417857.536 us/op
                 fillHeap·p0.999:  417857.536 us/op
                 fillHeap·p0.9999: 417857.536 us/op
                 fillHeap·p1.00:   417857.536 us/op

Iteration  10: 410538.476 ±(99.9%) 2125.483 us/op
                 fillHeap·p0.00:   406323.200 us/op
                 fillHeap·p0.50:   410517.504 us/op
                 fillHeap·p0.90:   415131.238 us/op
                 fillHeap·p0.95:   417333.248 us/op
                 fillHeap·p0.99:   417333.248 us/op
                 fillHeap·p0.999:  417333.248 us/op
                 fillHeap·p0.9999: 417333.248 us/op
                 fillHeap·p1.00:   417333.248 us/op

Iteration  11: 410077.102 ±(99.9%) 1830.464 us/op
                 fillHeap·p0.00:   406847.488 us/op
                 fillHeap·p0.50:   409468.928 us/op
                 fillHeap·p0.90:   413663.232 us/op
                 fillHeap·p0.95:   415865.242 us/op
                 fillHeap·p0.99:   416808.960 us/op
                 fillHeap·p0.999:  416808.960 us/op
                 fillHeap·p0.9999: 416808.960 us/op
                 fillHeap·p1.00:   416808.960 us/op

Iteration  12: 410328.760 ±(99.9%) 2741.831 us/op
                 fillHeap·p0.00:   406323.200 us/op
                 fillHeap·p0.50:   408944.640 us/op
                 fillHeap·p0.90:   418067.251 us/op
                 fillHeap·p0.95:   418748.826 us/op
                 fillHeap·p0.99:   418906.112 us/op
                 fillHeap·p0.999:  418906.112 us/op
                 fillHeap·p0.9999: 418906.112 us/op
                 fillHeap·p1.00:   418906.112 us/op

Iteration  13: 412761.457 ±(99.9%) 2584.095 us/op
                 fillHeap·p0.00:   407371.776 us/op
                 fillHeap·p0.50:   413138.944 us/op
                 fillHeap·p0.90:   416284.672 us/op
                 fillHeap·p0.95:   422261.555 us/op
                 fillHeap·p0.99:   424148.992 us/op
                 fillHeap·p0.999:  424148.992 us/op
                 fillHeap·p0.9999: 424148.992 us/op
                 fillHeap·p1.00:   424148.992 us/op

Iteration  14: 411733.852 ±(99.9%) 2968.799 us/op
                 fillHeap·p0.00:   407371.776 us/op
                 fillHeap·p0.50:   409993.216 us/op
                 fillHeap·p0.90:   417228.390 us/op
                 fillHeap·p0.95:   421894.554 us/op
                 fillHeap·p0.99:   423624.704 us/op
                 fillHeap·p0.999:  423624.704 us/op
                 fillHeap·p0.9999: 423624.704 us/op
                 fillHeap·p1.00:   423624.704 us/op

Iteration  15: 410748.191 ±(99.9%) 2386.428 us/op
                 fillHeap·p0.00:   406323.200 us/op
                 fillHeap·p0.50:   409468.928 us/op
                 fillHeap·p0.90:   416913.818 us/op
                 fillHeap·p0.95:   417857.536 us/op
                 fillHeap·p0.99:   417857.536 us/op
                 fillHeap·p0.999:  417857.536 us/op
                 fillHeap·p0.9999: 417857.536 us/op
                 fillHeap·p1.00:   417857.536 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 375
  mean = 410632.148 ±(99.9%) 595.035 us/op

  Histogram, us/op:
    [400000.000, 402500.000) = 0 
    [402500.000, 405000.000) = 6 
    [405000.000, 407500.000) = 52 
    [407500.000, 410000.000) = 146 
    [410000.000, 412500.000) = 65 
    [412500.000, 415000.000) = 68 
    [415000.000, 417500.000) = 19 
    [417500.000, 420000.000) = 16 
    [420000.000, 422500.000) = 0 
    [422500.000, 425000.000) = 2 
    [425000.000, 427500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 403177.472 us/op
     p(50.0000) = 409993.216 us/op
     p(90.0000) = 415236.096 us/op
     p(95.0000) = 417857.536 us/op
     p(99.0000) = 420835.492 us/op
     p(99.9000) = 428867.584 us/op
     p(99.9900) = 428867.584 us/op
     p(99.9990) = 428867.584 us/op
     p(99.9999) = 428867.584 us/op
    p(100.0000) = 428867.584 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 73.19% complete, ETA 02:14:00
# Fork: 1 of 1
# Warmup Iteration   1: 403575.931 ±(99.9%) 7529.054 us/op
# Warmup Iteration   2: 403156.500 ±(99.9%) 5876.235 us/op
# Warmup Iteration   3: 402569.298 ±(99.9%) 7530.249 us/op
# Warmup Iteration   4: 404750.336 ±(99.9%) 6763.497 us/op
# Warmup Iteration   5: 400430.203 ±(99.9%) 1211.972 us/op
Iteration   1: 404582.564 ±(99.9%) 6401.998 us/op
                 fillHeap·p0.00:   398458.880 us/op
                 fillHeap·p0.50:   403177.472 us/op
                 fillHeap·p0.90:   408944.640 us/op
                 fillHeap·p0.95:   432537.600 us/op
                 fillHeap·p0.99:   441974.784 us/op
                 fillHeap·p0.999:  441974.784 us/op
                 fillHeap·p0.9999: 441974.784 us/op
                 fillHeap·p1.00:   441974.784 us/op

Iteration   2: 403261.358 ±(99.9%) 7360.200 us/op
                 fillHeap·p0.00:   396886.016 us/op
                 fillHeap·p0.50:   401080.320 us/op
                 fillHeap·p0.90:   406532.915 us/op
                 fillHeap·p0.95:   436679.475 us/op
                 fillHeap·p0.99:   448790.528 us/op
                 fillHeap·p0.999:  448790.528 us/op
                 fillHeap·p0.9999: 448790.528 us/op
                 fillHeap·p1.00:   448790.528 us/op

Iteration   3: 404330.906 ±(99.9%) 6489.023 us/op
                 fillHeap·p0.00:   396886.016 us/op
                 fillHeap·p0.50:   402128.896 us/op
                 fillHeap·p0.90:   410412.646 us/op
                 fillHeap·p0.95:   432694.886 us/op
                 fillHeap·p0.99:   441974.784 us/op
                 fillHeap·p0.999:  441974.784 us/op
                 fillHeap·p0.9999: 441974.784 us/op
                 fillHeap·p1.00:   441974.784 us/op

Iteration   4: 403869.532 ±(99.9%) 6938.650 us/op
                 fillHeap·p0.00:   398458.880 us/op
                 fillHeap·p0.50:   401604.608 us/op
                 fillHeap·p0.90:   407266.918 us/op
                 fillHeap·p0.95:   435054.182 us/op
                 fillHeap·p0.99:   446693.376 us/op
                 fillHeap·p0.999:  446693.376 us/op
                 fillHeap·p0.9999: 446693.376 us/op
                 fillHeap·p1.00:   446693.376 us/op

Iteration   5: 400556.032 ±(99.9%) 2111.894 us/op
                 fillHeap·p0.00:   396886.016 us/op
                 fillHeap·p0.50:   399507.456 us/op
                 fillHeap·p0.90:   405798.912 us/op
                 fillHeap·p0.95:   406165.914 us/op
                 fillHeap·p0.99:   406323.200 us/op
                 fillHeap·p0.999:  406323.200 us/op
                 fillHeap·p0.9999: 406323.200 us/op
                 fillHeap·p1.00:   406323.200 us/op

Iteration   6: 403030.671 ±(99.9%) 5831.266 us/op
                 fillHeap·p0.00:   398458.880 us/op
                 fillHeap·p0.50:   401604.608 us/op
                 fillHeap·p0.90:   404960.051 us/op
                 fillHeap·p0.95:   429129.728 us/op
                 fillHeap·p0.99:   439353.344 us/op
                 fillHeap·p0.999:  439353.344 us/op
                 fillHeap·p0.9999: 439353.344 us/op
                 fillHeap·p1.00:   439353.344 us/op

Iteration   7: 402191.811 ±(99.9%) 6972.467 us/op
                 fillHeap·p0.00:   397410.304 us/op
                 fillHeap·p0.50:   400031.744 us/op
                 fillHeap·p0.90:   405589.197 us/op
                 fillHeap·p0.95:   434005.606 us/op
                 fillHeap·p0.99:   445644.800 us/op
                 fillHeap·p0.999:  445644.800 us/op
                 fillHeap·p0.9999: 445644.800 us/op
                 fillHeap·p1.00:   445644.800 us/op

Iteration   8: 400807.690 ±(99.9%) 2290.347 us/op
                 fillHeap·p0.00:   395313.152 us/op
                 fillHeap·p0.50:   400556.032 us/op
                 fillHeap·p0.90:   405169.766 us/op
                 fillHeap·p0.95:   408105.779 us/op
                 fillHeap·p0.99:   408420.352 us/op
                 fillHeap·p0.999:  408420.352 us/op
                 fillHeap·p0.9999: 408420.352 us/op
                 fillHeap·p1.00:   408420.352 us/op

Iteration   9: 402443.469 ±(99.9%) 2380.820 us/op
                 fillHeap·p0.00:   397934.592 us/op
                 fillHeap·p0.50:   402128.896 us/op
                 fillHeap·p0.90:   407162.061 us/op
                 fillHeap·p0.95:   409154.355 us/op
                 fillHeap·p0.99:   409468.928 us/op
                 fillHeap·p0.999:  409468.928 us/op
                 fillHeap·p0.9999: 409468.928 us/op
                 fillHeap·p1.00:   409468.928 us/op

Iteration  10: 402401.526 ±(99.9%) 2692.732 us/op
                 fillHeap·p0.00:   397410.304 us/op
                 fillHeap·p0.50:   401080.320 us/op
                 fillHeap·p0.90:   406952.346 us/op
                 fillHeap·p0.95:   411199.078 us/op
                 fillHeap·p0.99:   412614.656 us/op
                 fillHeap·p0.999:  412614.656 us/op
                 fillHeap·p0.9999: 412614.656 us/op
                 fillHeap·p1.00:   412614.656 us/op

Iteration  11: 402338.611 ±(99.9%) 2580.312 us/op
                 fillHeap·p0.00:   397410.304 us/op
                 fillHeap·p0.50:   402128.896 us/op
                 fillHeap·p0.90:   407896.064 us/op
                 fillHeap·p0.95:   410569.933 us/op
                 fillHeap·p0.99:   411041.792 us/op
                 fillHeap·p0.999:  411041.792 us/op
                 fillHeap·p0.9999: 411041.792 us/op
                 fillHeap·p1.00:   411041.792 us/op

Iteration  12: 401940.152 ±(99.9%) 2105.433 us/op
                 fillHeap·p0.00:   398458.880 us/op
                 fillHeap·p0.50:   401080.320 us/op
                 fillHeap·p0.90:   406742.630 us/op
                 fillHeap·p0.95:   409311.642 us/op
                 fillHeap·p0.99:   409468.928 us/op
                 fillHeap·p0.999:  409468.928 us/op
                 fillHeap·p0.9999: 409468.928 us/op
                 fillHeap·p1.00:   409468.928 us/op

Iteration  13: 404414.792 ±(99.9%) 6859.620 us/op
                 fillHeap·p0.00:   398983.168 us/op
                 fillHeap·p0.50:   403177.472 us/op
                 fillHeap·p0.90:   408315.494 us/op
                 fillHeap·p0.95:   435473.613 us/op
                 fillHeap·p0.99:   446169.088 us/op
                 fillHeap·p0.999:  446169.088 us/op
                 fillHeap·p0.9999: 446169.088 us/op
                 fillHeap·p1.00:   446169.088 us/op

Iteration  14: 402904.842 ±(99.9%) 6554.180 us/op
                 fillHeap·p0.00:   396886.016 us/op
                 fillHeap·p0.50:   401080.320 us/op
                 fillHeap·p0.90:   406847.488 us/op
                 fillHeap·p0.95:   432170.598 us/op
                 fillHeap·p0.99:   443023.360 us/op
                 fillHeap·p0.999:  443023.360 us/op
                 fillHeap·p0.9999: 443023.360 us/op
                 fillHeap·p1.00:   443023.360 us/op

Iteration  15: 402443.469 ±(99.9%) 3453.674 us/op
                 fillHeap·p0.00:   397934.592 us/op
                 fillHeap·p0.50:   401604.608 us/op
                 fillHeap·p0.90:   410202.931 us/op
                 fillHeap·p0.95:   414921.523 us/op
                 fillHeap·p0.99:   416808.960 us/op
                 fillHeap·p0.999:  416808.960 us/op
                 fillHeap·p0.9999: 416808.960 us/op
                 fillHeap·p1.00:   416808.960 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 375
  mean = 402767.828 ±(99.9%) 1180.701 us/op

  Histogram, us/op:
    [390000.000, 395000.000) = 0 
    [395000.000, 400000.000) = 105 
    [400000.000, 405000.000) = 203 
    [405000.000, 410000.000) = 52 
    [410000.000, 415000.000) = 6 
    [415000.000, 420000.000) = 1 
    [420000.000, 425000.000) = 0 
    [425000.000, 430000.000) = 0 
    [430000.000, 435000.000) = 0 
    [435000.000, 440000.000) = 1 
    [440000.000, 445000.000) = 3 

  Percentiles, us/op:
      p(0.0000) = 395313.152 us/op
     p(50.0000) = 401080.320 us/op
     p(90.0000) = 406847.488 us/op
     p(95.0000) = 409468.928 us/op
     p(99.0000) = 445770.629 us/op
     p(99.9000) = 448790.528 us/op
     p(99.9900) = 448790.528 us/op
     p(99.9990) = 448790.528 us/op
     p(99.9999) = 448790.528 us/op
    p(100.0000) = 448790.528 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 73.91% complete, ETA 02:10:23
# Fork: 1 of 1
# Warmup Iteration   1: 400115.630 ±(99.9%) 3728.694 us/op
# Warmup Iteration   2: 402799.985 ±(99.9%) 3026.257 us/op
# Warmup Iteration   3: 402737.070 ±(99.9%) 3845.782 us/op
# Warmup Iteration   4: 402758.042 ±(99.9%) 3633.227 us/op
# Warmup Iteration   5: 399759.114 ±(99.9%) 1927.731 us/op
Iteration   1: 405840.855 ±(99.9%) 2969.232 us/op
                 fillHeap·p0.00:   399507.456 us/op
                 fillHeap·p0.50:   405798.912 us/op
                 fillHeap·p0.90:   411775.795 us/op
                 fillHeap·p0.95:   412457.370 us/op
                 fillHeap·p0.99:   412614.656 us/op
                 fillHeap·p0.999:  412614.656 us/op
                 fillHeap·p0.9999: 412614.656 us/op
                 fillHeap·p1.00:   412614.656 us/op

Iteration   2: 403764.675 ±(99.9%) 2855.364 us/op
                 fillHeap·p0.00:   396886.016 us/op
                 fillHeap·p0.50:   402653.184 us/op
                 fillHeap·p0.90:   409888.358 us/op
                 fillHeap·p0.95:   410517.504 us/op
                 fillHeap·p0.99:   410517.504 us/op
                 fillHeap·p0.999:  410517.504 us/op
                 fillHeap·p0.9999: 410517.504 us/op
                 fillHeap·p1.00:   410517.504 us/op

Iteration   3: 402275.697 ±(99.9%) 3855.528 us/op
                 fillHeap·p0.00:   396361.728 us/op
                 fillHeap·p0.50:   400031.744 us/op
                 fillHeap·p0.90:   411146.650 us/op
                 fillHeap·p0.95:   414030.234 us/op
                 fillHeap·p0.99:   414187.520 us/op
                 fillHeap·p0.999:  414187.520 us/op
                 fillHeap·p0.9999: 414187.520 us/op
                 fillHeap·p1.00:   414187.520 us/op

Iteration   4: 403722.732 ±(99.9%) 3015.535 us/op
                 fillHeap·p0.00:   397410.304 us/op
                 fillHeap·p0.50:   402653.184 us/op
                 fillHeap·p0.90:   409888.358 us/op
                 fillHeap·p0.95:   411251.507 us/op
                 fillHeap·p0.99:   411566.080 us/op
                 fillHeap·p0.999:  411566.080 us/op
                 fillHeap·p0.9999: 411566.080 us/op
                 fillHeap·p1.00:   411566.080 us/op

Iteration   5: 403051.643 ±(99.9%) 2814.468 us/op
                 fillHeap·p0.00:   397934.592 us/op
                 fillHeap·p0.50:   401080.320 us/op
                 fillHeap·p0.90:   408315.494 us/op
                 fillHeap·p0.95:   410045.645 us/op
                 fillHeap·p0.99:   410517.504 us/op
                 fillHeap·p0.999:  410517.504 us/op
                 fillHeap·p0.9999: 410517.504 us/op
                 fillHeap·p1.00:   410517.504 us/op

Iteration   6: 406763.602 ±(99.9%) 4442.810 us/op
                 fillHeap·p0.00:   397934.592 us/op
                 fillHeap·p0.50:   405274.624 us/op
                 fillHeap·p0.90:   415445.811 us/op
                 fillHeap·p0.95:   417595.392 us/op
                 fillHeap·p0.99:   418381.824 us/op
                 fillHeap·p0.999:  418381.824 us/op
                 fillHeap·p0.9999: 418381.824 us/op
                 fillHeap·p1.00:   418381.824 us/op

Iteration   7: 403617.874 ±(99.9%) 3451.217 us/op
                 fillHeap·p0.00:   396886.016 us/op
                 fillHeap·p0.50:   402653.184 us/op
                 fillHeap·p0.90:   411041.792 us/op
                 fillHeap·p0.95:   414082.662 us/op
                 fillHeap·p0.99:   414711.808 us/op
                 fillHeap·p0.999:  414711.808 us/op
                 fillHeap·p0.9999: 414711.808 us/op
                 fillHeap·p1.00:   414711.808 us/op

Iteration   8: 403030.671 ±(99.9%) 3346.925 us/op
                 fillHeap·p0.00:   396886.016 us/op
                 fillHeap·p0.50:   402653.184 us/op
                 fillHeap·p0.90:   410727.219 us/op
                 fillHeap·p0.95:   413243.802 us/op
                 fillHeap·p0.99:   414187.520 us/op
                 fillHeap·p0.999:  414187.520 us/op
                 fillHeap·p0.9999: 414187.520 us/op
                 fillHeap·p1.00:   414187.520 us/op

Iteration   9: 402045.010 ±(99.9%) 3933.352 us/op
                 fillHeap·p0.00:   395837.440 us/op
                 fillHeap·p0.50:   401080.320 us/op
                 fillHeap·p0.90:   412090.368 us/op
                 fillHeap·p0.95:   414397.235 us/op
                 fillHeap·p0.99:   414711.808 us/op
                 fillHeap·p0.999:  414711.808 us/op
                 fillHeap·p0.9999: 414711.808 us/op
                 fillHeap·p1.00:   414711.808 us/op

Iteration  10: 403492.045 ±(99.9%) 3096.540 us/op
                 fillHeap·p0.00:   397934.592 us/op
                 fillHeap·p0.50:   403701.760 us/op
                 fillHeap·p0.90:   410517.504 us/op
                 fillHeap·p0.95:   412824.371 us/op
                 fillHeap·p0.99:   413138.944 us/op
                 fillHeap·p0.999:  413138.944 us/op
                 fillHeap·p0.9999: 413138.944 us/op
                 fillHeap·p1.00:   413138.944 us/op

Iteration  11: 402485.412 ±(99.9%) 3732.208 us/op
                 fillHeap·p0.00:   396886.016 us/op
                 fillHeap·p0.50:   400556.032 us/op
                 fillHeap·p0.90:   410727.219 us/op
                 fillHeap·p0.95:   412142.797 us/op
                 fillHeap·p0.99:   412614.656 us/op
                 fillHeap·p0.999:  412614.656 us/op
                 fillHeap·p0.9999: 412614.656 us/op
                 fillHeap·p1.00:   412614.656 us/op

Iteration  12: 399759.114 ±(99.9%) 1583.646 us/op
                 fillHeap·p0.00:   396361.728 us/op
                 fillHeap·p0.50:   400031.744 us/op
                 fillHeap·p0.90:   403596.902 us/op
                 fillHeap·p0.95:   404226.048 us/op
                 fillHeap·p0.99:   404226.048 us/op
                 fillHeap·p0.999:  404226.048 us/op
                 fillHeap·p0.9999: 404226.048 us/op
                 fillHeap·p1.00:   404226.048 us/op

Iteration  13: 402590.269 ±(99.9%) 3682.981 us/op
                 fillHeap·p0.00:   397410.304 us/op
                 fillHeap·p0.50:   400556.032 us/op
                 fillHeap·p0.90:   411461.222 us/op
                 fillHeap·p0.95:   412457.370 us/op
                 fillHeap·p0.99:   412614.656 us/op
                 fillHeap·p0.999:  412614.656 us/op
                 fillHeap·p0.9999: 412614.656 us/op
                 fillHeap·p1.00:   412614.656 us/op

Iteration  14: 399608.281 ±(99.9%) 2134.017 us/op
                 fillHeap·p0.00:   394788.864 us/op
                 fillHeap·p0.50:   399769.600 us/op
                 fillHeap·p0.90:   403701.760 us/op
                 fillHeap·p0.95:   405064.909 us/op
                 fillHeap·p0.99:   405798.912 us/op
                 fillHeap·p0.999:  405798.912 us/op
                 fillHeap·p0.9999: 405798.912 us/op
                 fillHeap·p1.00:   405798.912 us/op

Iteration  15: 402737.070 ±(99.9%) 3392.999 us/op
                 fillHeap·p0.00:   397410.304 us/op
                 fillHeap·p0.50:   401080.320 us/op
                 fillHeap·p0.90:   410936.934 us/op
                 fillHeap·p0.95:   412667.085 us/op
                 fillHeap·p0.99:   413138.944 us/op
                 fillHeap·p0.999:  413138.944 us/op
                 fillHeap·p0.9999: 413138.944 us/op
                 fillHeap·p1.00:   413138.944 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 376
  mean = 402976.681 ±(99.9%) 799.448 us/op

  Histogram, us/op:
    [390000.000, 392500.000) = 0 
    [392500.000, 395000.000) = 1 
    [395000.000, 397500.000) = 34 
    [397500.000, 400000.000) = 66 
    [400000.000, 402500.000) = 107 
    [402500.000, 405000.000) = 61 
    [405000.000, 407500.000) = 39 
    [407500.000, 410000.000) = 30 
    [410000.000, 412500.000) = 21 
    [412500.000, 415000.000) = 14 
    [415000.000, 417500.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 394788.864 us/op
     p(50.0000) = 401604.608 us/op
     p(90.0000) = 410517.504 us/op
     p(95.0000) = 412090.368 us/op
     p(99.0000) = 414832.394 us/op
     p(99.9000) = 418381.824 us/op
     p(99.9900) = 418381.824 us/op
     p(99.9990) = 418381.824 us/op
     p(99.9999) = 418381.824 us/op
    p(100.0000) = 418381.824 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 74.64% complete, ETA 02:06:46
# Fork: 1 of 1
# Warmup Iteration   1: 398438.715 ±(99.9%) 2782.098 us/op
# Warmup Iteration   2: 398862.178 ±(99.9%) 2634.378 us/op
# Warmup Iteration   3: 398559.705 ±(99.9%) 2602.354 us/op
# Warmup Iteration   4: 398660.529 ±(99.9%) 3039.344 us/op
# Warmup Iteration   5: 398983.168 ±(99.9%) 2313.416 us/op
Iteration   1: 398902.508 ±(99.9%) 2900.265 us/op
                 fillHeap·p0.00:   390070.272 us/op
                 fillHeap·p0.50:   400031.744 us/op
                 fillHeap·p0.90:   404383.334 us/op
                 fillHeap·p0.95:   405772.698 us/op
                 fillHeap·p0.99:   406323.200 us/op
                 fillHeap·p0.999:  406323.200 us/op
                 fillHeap·p0.9999: 406323.200 us/op
                 fillHeap·p1.00:   406323.200 us/op

Iteration   2: 398781.519 ±(99.9%) 2311.073 us/op
                 fillHeap·p0.00:   389021.696 us/op
                 fillHeap·p0.50:   398983.168 us/op
                 fillHeap·p0.90:   402076.467 us/op
                 fillHeap·p0.95:   404199.834 us/op
                 fillHeap·p0.99:   404750.336 us/op
                 fillHeap·p0.999:  404750.336 us/op
                 fillHeap·p0.9999: 404750.336 us/op
                 fillHeap·p1.00:   404750.336 us/op

Iteration   3: 399003.333 ±(99.9%) 2342.357 us/op
                 fillHeap·p0.00:   393740.288 us/op
                 fillHeap·p0.50:   399245.312 us/op
                 fillHeap·p0.90:   402653.184 us/op
                 fillHeap·p0.95:   405038.694 us/op
                 fillHeap·p0.99:   406323.200 us/op
                 fillHeap·p0.999:  406323.200 us/op
                 fillHeap·p0.9999: 406323.200 us/op
                 fillHeap·p1.00:   406323.200 us/op

Iteration   4: 398821.849 ±(99.9%) 2681.759 us/op
                 fillHeap·p0.00:   388497.408 us/op
                 fillHeap·p0.50:   399507.456 us/op
                 fillHeap·p0.90:   403125.043 us/op
                 fillHeap·p0.95:   405589.197 us/op
                 fillHeap·p0.99:   406323.200 us/op
                 fillHeap·p0.999:  406323.200 us/op
                 fillHeap·p0.9999: 406323.200 us/op
                 fillHeap·p1.00:   406323.200 us/op

Iteration   5: 399023.498 ±(99.9%) 1979.678 us/op
                 fillHeap·p0.00:   391118.848 us/op
                 fillHeap·p0.50:   399507.456 us/op
                 fillHeap·p0.90:   401761.894 us/op
                 fillHeap·p0.95:   403151.258 us/op
                 fillHeap·p0.99:   403701.760 us/op
                 fillHeap·p0.999:  403701.760 us/op
                 fillHeap·p0.9999: 403701.760 us/op
                 fillHeap·p1.00:   403701.760 us/op

Iteration   6: 399023.498 ±(99.9%) 2338.452 us/op
                 fillHeap·p0.00:   392691.712 us/op
                 fillHeap·p0.50:   399507.456 us/op
                 fillHeap·p0.90:   403701.760 us/op
                 fillHeap·p0.95:   404042.547 us/op
                 fillHeap·p0.99:   404226.048 us/op
                 fillHeap·p0.999:  404226.048 us/op
                 fillHeap·p0.9999: 404226.048 us/op
                 fillHeap·p1.00:   404226.048 us/op

Iteration   7: 398963.003 ±(99.9%) 2596.624 us/op
                 fillHeap·p0.00:   389545.984 us/op
                 fillHeap·p0.50:   399245.312 us/op
                 fillHeap·p0.90:   403701.760 us/op
                 fillHeap·p0.95:   404383.334 us/op
                 fillHeap·p0.99:   404750.336 us/op
                 fillHeap·p0.999:  404750.336 us/op
                 fillHeap·p0.9999: 404750.336 us/op
                 fillHeap·p1.00:   404750.336 us/op

Iteration   8: 398620.199 ±(99.9%) 2940.607 us/op
                 fillHeap·p0.00:   391643.136 us/op
                 fillHeap·p0.50:   397672.448 us/op
                 fillHeap·p0.90:   406480.486 us/op
                 fillHeap·p0.95:   407529.062 us/op
                 fillHeap·p0.99:   407896.064 us/op
                 fillHeap·p0.999:  407896.064 us/op
                 fillHeap·p0.9999: 407896.064 us/op
                 fillHeap·p1.00:   407896.064 us/op

Iteration   9: 399124.322 ±(99.9%) 2867.433 us/op
                 fillHeap·p0.00:   390594.560 us/op
                 fillHeap·p0.50:   400031.744 us/op
                 fillHeap·p0.90:   402967.757 us/op
                 fillHeap·p0.95:   406428.058 us/op
                 fillHeap·p0.99:   407896.064 us/op
                 fillHeap·p0.999:  407896.064 us/op
                 fillHeap·p0.9999: 407896.064 us/op
                 fillHeap·p1.00:   407896.064 us/op

Iteration  10: 398983.168 ±(99.9%) 2671.303 us/op
                 fillHeap·p0.00:   387973.120 us/op
                 fillHeap·p0.50:   399245.312 us/op
                 fillHeap·p0.90:   403492.045 us/op
                 fillHeap·p0.95:   404907.622 us/op
                 fillHeap·p0.99:   405274.624 us/op
                 fillHeap·p0.999:  405274.624 us/op
                 fillHeap·p0.9999: 405274.624 us/op
                 fillHeap·p1.00:   405274.624 us/op

Iteration  11: 398842.014 ±(99.9%) 2307.212 us/op
                 fillHeap·p0.00:   390594.560 us/op
                 fillHeap·p0.50:   399507.456 us/op
                 fillHeap·p0.90:   402286.182 us/op
                 fillHeap·p0.95:   404697.907 us/op
                 fillHeap·p0.99:   405798.912 us/op
                 fillHeap·p0.999:  405798.912 us/op
                 fillHeap·p0.9999: 405798.912 us/op
                 fillHeap·p1.00:   405798.912 us/op

Iteration  12: 398862.178 ±(99.9%) 2745.635 us/op
                 fillHeap·p0.00:   391118.848 us/op
                 fillHeap·p0.50:   399507.456 us/op
                 fillHeap·p0.90:   403125.043 us/op
                 fillHeap·p0.95:   406270.771 us/op
                 fillHeap·p0.99:   407371.776 us/op
                 fillHeap·p0.999:  407371.776 us/op
                 fillHeap·p0.9999: 407371.776 us/op
                 fillHeap·p1.00:   407371.776 us/op

Iteration  13: 399063.828 ±(99.9%) 2176.690 us/op
                 fillHeap·p0.00:   389021.696 us/op
                 fillHeap·p0.50:   399507.456 us/op
                 fillHeap·p0.90:   402286.182 us/op
                 fillHeap·p0.95:   404016.333 us/op
                 fillHeap·p0.99:   404750.336 us/op
                 fillHeap·p0.999:  404750.336 us/op
                 fillHeap·p0.9999: 404750.336 us/op
                 fillHeap·p1.00:   404750.336 us/op

Iteration  14: 398983.168 ±(99.9%) 2522.150 us/op
                 fillHeap·p0.00:   391643.136 us/op
                 fillHeap·p0.50:   398983.168 us/op
                 fillHeap·p0.90:   403334.758 us/op
                 fillHeap·p0.95:   405746.483 us/op
                 fillHeap·p0.99:   406847.488 us/op
                 fillHeap·p0.999:  406847.488 us/op
                 fillHeap·p0.9999: 406847.488 us/op
                 fillHeap·p1.00:   406847.488 us/op

Iteration  15: 398741.189 ±(99.9%) 2202.255 us/op
                 fillHeap·p0.00:   390070.272 us/op
                 fillHeap·p0.50:   399769.600 us/op
                 fillHeap·p0.90:   401604.608 us/op
                 fillHeap·p0.95:   403308.544 us/op
                 fillHeap·p0.99:   404226.048 us/op
                 fillHeap·p0.999:  404226.048 us/op
                 fillHeap·p0.9999: 404226.048 us/op
                 fillHeap·p1.00:   404226.048 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 390
  mean = 398915.952 ±(99.9%) 569.423 us/op

  Histogram, us/op:
    [380000.000, 382500.000) = 0 
    [382500.000, 385000.000) = 0 
    [385000.000, 387500.000) = 0 
    [387500.000, 390000.000) = 5 
    [390000.000, 392500.000) = 11 
    [392500.000, 395000.000) = 29 
    [395000.000, 397500.000) = 81 
    [397500.000, 400000.000) = 100 
    [400000.000, 402500.000) = 116 
    [402500.000, 405000.000) = 37 
    [405000.000, 407500.000) = 9 

  Percentiles, us/op:
      p(0.0000) = 387973.120 us/op
     p(50.0000) = 399507.456 us/op
     p(90.0000) = 402653.184 us/op
     p(95.0000) = 404226.048 us/op
     p(99.0000) = 406894.674 us/op
     p(99.9000) = 407896.064 us/op
     p(99.9900) = 407896.064 us/op
     p(99.9990) = 407896.064 us/op
     p(99.9999) = 407896.064 us/op
    p(100.0000) = 407896.064 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 75.36% complete, ETA 02:03:10
# Fork: 1 of 1
# Warmup Iteration   1: 376.671 ±(99.9%) 0.900 us/op
# Warmup Iteration   2: 375.736 ±(99.9%) 0.393 us/op
# Warmup Iteration   3: 375.756 ±(99.9%) 0.226 us/op
# Warmup Iteration   4: 375.850 ±(99.9%) 0.440 us/op
# Warmup Iteration   5: 375.506 ±(99.9%) 0.247 us/op
Iteration   1: 375.157 ±(99.9%) 0.158 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   382.976 us/op
                 read·p0.95:   385.024 us/op
                 read·p0.99:   401.408 us/op
                 read·p0.999:  450.873 us/op
                 read·p0.9999: 513.443 us/op
                 read·p1.00:   604.160 us/op

Iteration   2: 375.548 ±(99.9%) 0.180 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   384.000 us/op
                 read·p0.95:   387.584 us/op
                 read·p0.99:   409.088 us/op
                 read·p0.999:  467.152 us/op
                 read·p0.9999: 526.029 us/op
                 read·p1.00:   536.576 us/op

Iteration   3: 375.105 ±(99.9%) 0.156 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   382.976 us/op
                 read·p0.95:   385.536 us/op
                 read·p0.99:   401.408 us/op
                 read·p0.999:  450.749 us/op
                 read·p0.9999: 520.622 us/op
                 read·p1.00:   545.792 us/op

Iteration   4: 375.517 ±(99.9%) 0.178 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   383.488 us/op
                 read·p0.95:   387.072 us/op
                 read·p0.99:   405.504 us/op
                 read·p0.999:  473.804 us/op
                 read·p0.9999: 535.713 us/op
                 read·p1.00:   552.960 us/op

Iteration   5: 375.288 ±(99.9%) 0.163 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   382.976 us/op
                 read·p0.95:   386.048 us/op
                 read·p0.99:   402.432 us/op
                 read·p0.999:  461.933 us/op
                 read·p0.9999: 510.194 us/op
                 read·p1.00:   544.768 us/op

Iteration   6: 375.452 ±(99.9%) 0.201 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   383.488 us/op
                 read·p0.95:   386.048 us/op
                 read·p0.99:   403.937 us/op
                 read·p0.999:  471.335 us/op
                 read·p0.9999: 761.912 us/op
                 read·p1.00:   844.800 us/op

Iteration   7: 375.179 ±(99.9%) 0.161 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   382.976 us/op
                 read·p0.95:   385.536 us/op
                 read·p0.99:   401.408 us/op
                 read·p0.999:  464.896 us/op
                 read·p0.9999: 521.594 us/op
                 read·p1.00:   534.528 us/op

Iteration   8: 375.383 ±(99.9%) 0.173 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   383.488 us/op
                 read·p0.95:   386.048 us/op
                 read·p0.99:   406.016 us/op
                 read·p0.999:  477.245 us/op
                 read·p0.9999: 543.119 us/op
                 read·p1.00:   551.936 us/op

Iteration   9: 375.314 ±(99.9%) 0.170 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   383.488 us/op
                 read·p0.95:   386.048 us/op
                 read·p0.99:   403.891 us/op
                 read·p0.999:  453.711 us/op
                 read·p0.9999: 567.740 us/op
                 read·p1.00:   660.480 us/op

Iteration  10: 375.340 ±(99.9%) 0.163 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   383.488 us/op
                 read·p0.95:   386.048 us/op
                 read·p0.99:   401.920 us/op
                 read·p0.999:  453.830 us/op
                 read·p0.9999: 528.747 us/op
                 read·p1.00:   575.488 us/op

Iteration  11: 375.250 ±(99.9%) 0.379 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   382.976 us/op
                 read·p0.95:   386.048 us/op
                 read·p0.99:   400.896 us/op
                 read·p0.999:  458.629 us/op
                 read·p0.9999: 588.294 us/op
                 read·p1.00:   3125.248 us/op

Iteration  12: 375.602 ±(99.9%) 0.254 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   383.488 us/op
                 read·p0.95:   387.072 us/op
                 read·p0.99:   408.064 us/op
                 read·p0.999:  509.476 us/op
                 read·p0.9999: 889.869 us/op
                 read·p1.00:   933.888 us/op

Iteration  13: 376.056 ±(99.9%) 0.347 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   384.000 us/op
                 read·p0.95:   387.072 us/op
                 read·p0.99:   407.235 us/op
                 read·p0.999:  751.616 us/op
                 read·p0.9999: 922.656 us/op
                 read·p1.00:   925.696 us/op

Iteration  14: 376.095 ±(99.9%) 0.526 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   384.000 us/op
                 read·p0.95:   387.584 us/op
                 read·p0.99:   425.682 us/op
                 read·p0.999:  485.767 us/op
                 read·p0.9999: 1466.777 us/op
                 read·p1.00:   3227.648 us/op

Iteration  15: 375.399 ±(99.9%) 0.183 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   382.976 us/op
                 read·p0.95:   386.560 us/op
                 read·p0.99:   415.744 us/op
                 read·p0.999:  468.681 us/op
                 read·p0.9999: 581.339 us/op
                 read·p1.00:   617.472 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  N = 399071
  mean =    375.445 ±(99.9%) 0.064 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 0 
    [ 250.000,  500.000) = 398870 
    [ 500.000,  750.000) = 160 
    [ 750.000, 1000.000) = 38 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 
    [2750.000, 3000.000) = 0 
    [3000.000, 3250.000) = 3 
    [3250.000, 3500.000) = 0 
    [3500.000, 3750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    370.176 us/op
     p(50.0000) =    374.784 us/op
     p(90.0000) =    383.488 us/op
     p(95.0000) =    386.560 us/op
     p(99.0000) =    407.040 us/op
     p(99.9000) =    470.528 us/op
     p(99.9900) =    751.711 us/op
     p(99.9990) =    953.730 us/op
     p(99.9999) =   3227.648 us/op
    p(100.0000) =   3227.648 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 76.08% complete, ETA 01:59:33
# Fork: 1 of 1
# Warmup Iteration   1: 166.670 ±(99.9%) 0.461 us/op
# Warmup Iteration   2: 164.654 ±(99.9%) 0.094 us/op
# Warmup Iteration   3: 164.699 ±(99.9%) 0.093 us/op
# Warmup Iteration   4: 165.597 ±(99.9%) 0.296 us/op
# Warmup Iteration   5: 165.488 ±(99.9%) 0.091 us/op
Iteration   1: 165.984 ±(99.9%) 0.090 us/op
                 readAndWrite·p0.00:   157.696 us/op
                 readAndWrite·p0.50:   165.120 us/op
                 readAndWrite·p0.90:   172.288 us/op
                 readAndWrite·p0.95:   175.360 us/op
                 readAndWrite·p0.99:   186.112 us/op
                 readAndWrite·p0.999:  235.996 us/op
                 readAndWrite·p0.9999: 314.332 us/op
                 readAndWrite·p1.00:   346.112 us/op

Iteration   2: 165.453 ±(99.9%) 0.087 us/op
                 readAndWrite·p0.00:   158.208 us/op
                 readAndWrite·p0.50:   163.840 us/op
                 readAndWrite·p0.90:   171.520 us/op
                 readAndWrite·p0.95:   174.592 us/op
                 readAndWrite·p0.99:   183.808 us/op
                 readAndWrite·p0.999:  239.872 us/op
                 readAndWrite·p0.9999: 292.745 us/op
                 readAndWrite·p1.00:   353.792 us/op

Iteration   3: 164.584 ±(99.9%) 0.080 us/op
                 readAndWrite·p0.00:   157.952 us/op
                 readAndWrite·p0.50:   163.072 us/op
                 readAndWrite·p0.90:   169.728 us/op
                 readAndWrite·p0.95:   173.312 us/op
                 readAndWrite·p0.99:   181.248 us/op
                 readAndWrite·p0.999:  232.973 us/op
                 readAndWrite·p0.9999: 301.535 us/op
                 readAndWrite·p1.00:   350.720 us/op

Iteration   4: 164.554 ±(99.9%) 0.084 us/op
                 readAndWrite·p0.00:   157.952 us/op
                 readAndWrite·p0.50:   162.816 us/op
                 readAndWrite·p0.90:   169.216 us/op
                 readAndWrite·p0.95:   173.568 us/op
                 readAndWrite·p0.99:   182.528 us/op
                 readAndWrite·p0.999:  238.592 us/op
                 readAndWrite·p0.9999: 317.920 us/op
                 readAndWrite·p1.00:   414.208 us/op

Iteration   5: 164.097 ±(99.9%) 0.078 us/op
                 readAndWrite·p0.00:   158.208 us/op
                 readAndWrite·p0.50:   162.048 us/op
                 readAndWrite·p0.90:   168.704 us/op
                 readAndWrite·p0.95:   173.056 us/op
                 readAndWrite·p0.99:   180.480 us/op
                 readAndWrite·p0.999:  233.984 us/op
                 readAndWrite·p0.9999: 300.203 us/op
                 readAndWrite·p1.00:   358.912 us/op

Iteration   6: 164.405 ±(99.9%) 0.111 us/op
                 readAndWrite·p0.00:   158.208 us/op
                 readAndWrite·p0.50:   162.304 us/op
                 readAndWrite·p0.90:   169.216 us/op
                 readAndWrite·p0.95:   173.568 us/op
                 readAndWrite·p0.99:   182.272 us/op
                 readAndWrite·p0.999:  243.200 us/op
                 readAndWrite·p0.9999: 573.218 us/op
                 readAndWrite·p1.00:   736.256 us/op

Iteration   7: 166.115 ±(99.9%) 0.079 us/op
                 readAndWrite·p0.00:   159.488 us/op
                 readAndWrite·p0.50:   164.096 us/op
                 readAndWrite·p0.90:   171.776 us/op
                 readAndWrite·p0.95:   174.848 us/op
                 readAndWrite·p0.99:   183.296 us/op
                 readAndWrite·p0.999:  232.936 us/op
                 readAndWrite·p0.9999: 273.384 us/op
                 readAndWrite·p1.00:   351.744 us/op

Iteration   8: 164.560 ±(99.9%) 0.086 us/op
                 readAndWrite·p0.00:   157.696 us/op
                 readAndWrite·p0.50:   162.560 us/op
                 readAndWrite·p0.90:   169.984 us/op
                 readAndWrite·p0.95:   173.568 us/op
                 readAndWrite·p0.99:   182.528 us/op
                 readAndWrite·p0.999:  239.191 us/op
                 readAndWrite·p0.9999: 329.013 us/op
                 readAndWrite·p1.00:   370.688 us/op

Iteration   9: 164.994 ±(99.9%) 0.172 us/op
                 readAndWrite·p0.00:   158.208 us/op
                 readAndWrite·p0.50:   163.072 us/op
                 readAndWrite·p0.90:   170.496 us/op
                 readAndWrite·p0.95:   174.080 us/op
                 readAndWrite·p0.99:   182.016 us/op
                 readAndWrite·p0.999:  232.704 us/op
                 readAndWrite·p0.9999: 308.913 us/op
                 readAndWrite·p1.00:   2957.312 us/op

Iteration  10: 166.741 ±(99.9%) 0.094 us/op
                 readAndWrite·p0.00:   159.232 us/op
                 readAndWrite·p0.50:   166.400 us/op
                 readAndWrite·p0.90:   172.544 us/op
                 readAndWrite·p0.95:   175.872 us/op
                 readAndWrite·p0.99:   186.368 us/op
                 readAndWrite·p0.999:  248.387 us/op
                 readAndWrite·p0.9999: 331.783 us/op
                 readAndWrite·p1.00:   372.736 us/op

Iteration  11: 166.059 ±(99.9%) 0.090 us/op
                 readAndWrite·p0.00:   158.464 us/op
                 readAndWrite·p0.50:   163.840 us/op
                 readAndWrite·p0.90:   171.776 us/op
                 readAndWrite·p0.95:   174.848 us/op
                 readAndWrite·p0.99:   183.808 us/op
                 readAndWrite·p0.999:  236.259 us/op
                 readAndWrite·p0.9999: 349.137 us/op
                 readAndWrite·p1.00:   418.816 us/op

Iteration  12: 165.884 ±(99.9%) 0.245 us/op
                 readAndWrite·p0.00:   158.464 us/op
                 readAndWrite·p0.50:   164.096 us/op
                 readAndWrite·p0.90:   171.008 us/op
                 readAndWrite·p0.95:   174.848 us/op
                 readAndWrite·p0.99:   186.624 us/op
                 readAndWrite·p0.999:  245.459 us/op
                 readAndWrite·p0.9999: 698.740 us/op
                 readAndWrite·p1.00:   2883.584 us/op

Iteration  13: 165.251 ±(99.9%) 0.094 us/op
                 readAndWrite·p0.00:   157.696 us/op
                 readAndWrite·p0.50:   163.584 us/op
                 readAndWrite·p0.90:   170.496 us/op
                 readAndWrite·p0.95:   174.336 us/op
                 readAndWrite·p0.99:   186.624 us/op
                 readAndWrite·p0.999:  236.032 us/op
                 readAndWrite·p0.9999: 330.760 us/op
                 readAndWrite·p1.00:   534.528 us/op

Iteration  14: 165.935 ±(99.9%) 0.099 us/op
                 readAndWrite·p0.00:   158.464 us/op
                 readAndWrite·p0.50:   163.584 us/op
                 readAndWrite·p0.90:   171.520 us/op
                 readAndWrite·p0.95:   175.104 us/op
                 readAndWrite·p0.99:   187.136 us/op
                 readAndWrite·p0.999:  249.303 us/op
                 readAndWrite·p0.9999: 352.231 us/op
                 readAndWrite·p1.00:   441.856 us/op

Iteration  15: 165.155 ±(99.9%) 0.087 us/op
                 readAndWrite·p0.00:   157.696 us/op
                 readAndWrite·p0.50:   163.328 us/op
                 readAndWrite·p0.90:   170.240 us/op
                 readAndWrite·p0.95:   174.080 us/op
                 readAndWrite·p0.99:   182.784 us/op
                 readAndWrite·p0.999:  237.198 us/op
                 readAndWrite·p0.9999: 321.331 us/op
                 readAndWrite·p1.00:   423.936 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  N = 905755
  mean =    165.315 ±(99.9%) 0.029 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 905266 
    [ 250.000,  500.000) = 468 
    [ 500.000,  750.000) = 17 
    [ 750.000, 1000.000) = 1 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    157.696 us/op
     p(50.0000) =    163.328 us/op
     p(90.0000) =    171.008 us/op
     p(95.0000) =    174.336 us/op
     p(99.0000) =    183.808 us/op
     p(99.9000) =    238.592 us/op
     p(99.9900) =    327.897 us/op
     p(99.9990) =    698.095 us/op
     p(99.9999) =   2957.312 us/op
    p(100.0000) =   2957.312 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 76.81% complete, ETA 01:55:55
# Fork: 1 of 1
# Warmup Iteration   1: 290.524 ±(99.9%) 0.646 us/op
# Warmup Iteration   2: 259.281 ±(99.9%) 0.703 us/op
# Warmup Iteration   3: 344.602 ±(99.9%) 0.350 us/op
# Warmup Iteration   4: 344.643 ±(99.9%) 0.563 us/op
# Warmup Iteration   5: 344.386 ±(99.9%) 0.107 us/op
Iteration   1: 344.422 ±(99.9%) 0.095 us/op
                 swap·p0.00:   340.480 us/op
                 swap·p0.50:   343.552 us/op
                 swap·p0.90:   349.184 us/op
                 swap·p0.95:   350.720 us/op
                 swap·p0.99:   362.496 us/op
                 swap·p0.999:  399.328 us/op
                 swap·p0.9999: 445.643 us/op
                 swap·p1.00:   450.048 us/op

Iteration   2: 344.555 ±(99.9%) 0.195 us/op
                 swap·p0.00:   340.480 us/op
                 swap·p0.50:   343.552 us/op
                 swap·p0.90:   349.184 us/op
                 swap·p0.95:   351.232 us/op
                 swap·p0.99:   361.984 us/op
                 swap·p0.999:  413.702 us/op
                 swap·p0.9999: 548.979 us/op
                 swap·p1.00:   1619.968 us/op

Iteration   3: 344.102 ±(99.9%) 0.111 us/op
                 swap·p0.00:   340.480 us/op
                 swap·p0.50:   343.040 us/op
                 swap·p0.90:   349.184 us/op
                 swap·p0.95:   351.744 us/op
                 swap·p0.99:   362.496 us/op
                 swap·p0.999:  422.364 us/op
                 swap·p0.9999: 488.920 us/op
                 swap·p1.00:   517.120 us/op

Iteration   4: 344.409 ±(99.9%) 0.093 us/op
                 swap·p0.00:   340.480 us/op
                 swap·p0.50:   343.040 us/op
                 swap·p0.90:   348.672 us/op
                 swap·p0.95:   350.720 us/op
                 swap·p0.99:   360.448 us/op
                 swap·p0.999:  394.747 us/op
                 swap·p0.9999: 469.940 us/op
                 swap·p1.00:   508.416 us/op

Iteration   5: 344.485 ±(99.9%) 0.176 us/op
                 swap·p0.00:   340.480 us/op
                 swap·p0.50:   343.552 us/op
                 swap·p0.90:   348.672 us/op
                 swap·p0.95:   350.720 us/op
                 swap·p0.99:   361.472 us/op
                 swap·p0.999:  432.638 us/op
                 swap·p0.9999: 734.601 us/op
                 swap·p1.00:   841.728 us/op

Iteration   6: 344.164 ±(99.9%) 0.114 us/op
                 swap·p0.00:   340.480 us/op
                 swap·p0.50:   343.040 us/op
                 swap·p0.90:   348.672 us/op
                 swap·p0.95:   350.720 us/op
                 swap·p0.99:   363.520 us/op
                 swap·p0.999:  430.080 us/op
                 swap·p0.9999: 523.497 us/op
                 swap·p1.00:   553.984 us/op

Iteration   7: 344.004 ±(99.9%) 0.093 us/op
                 swap·p0.00:   340.480 us/op
                 swap·p0.50:   343.040 us/op
                 swap·p0.90:   348.160 us/op
                 swap·p0.95:   350.208 us/op
                 swap·p0.99:   359.424 us/op
                 swap·p0.999:  396.712 us/op
                 swap·p0.9999: 491.525 us/op
                 swap·p1.00:   507.392 us/op

Iteration   8: 344.322 ±(99.9%) 0.109 us/op
                 swap·p0.00:   340.480 us/op
                 swap·p0.50:   343.040 us/op
                 swap·p0.90:   348.672 us/op
                 swap·p0.95:   351.232 us/op
                 swap·p0.99:   364.969 us/op
                 swap·p0.999:  408.029 us/op
                 swap·p0.9999: 482.821 us/op
                 swap·p1.00:   565.248 us/op

Iteration   9: 344.427 ±(99.9%) 0.108 us/op
                 swap·p0.00:   340.480 us/op
                 swap·p0.50:   343.552 us/op
                 swap·p0.90:   349.184 us/op
                 swap·p0.95:   351.232 us/op
                 swap·p0.99:   363.520 us/op
                 swap·p0.999:  418.275 us/op
                 swap·p0.9999: 527.077 us/op
                 swap·p1.00:   583.680 us/op

Iteration  10: 344.551 ±(99.9%) 0.106 us/op
                 swap·p0.00:   340.480 us/op
                 swap·p0.50:   343.552 us/op
                 swap·p0.90:   349.184 us/op
                 swap·p0.95:   351.232 us/op
                 swap·p0.99:   364.544 us/op
                 swap·p0.999:  410.633 us/op
                 swap·p0.9999: 472.375 us/op
                 swap·p1.00:   495.616 us/op

Iteration  11: 344.629 ±(99.9%) 0.112 us/op
                 swap·p0.00:   340.480 us/op
                 swap·p0.50:   343.552 us/op
                 swap·p0.90:   349.184 us/op
                 swap·p0.95:   351.232 us/op
                 swap·p0.99:   361.984 us/op
                 swap·p0.999:  406.036 us/op
                 swap·p0.9999: 558.509 us/op
                 swap·p1.00:   584.704 us/op

Iteration  12: 344.634 ±(99.9%) 0.241 us/op
                 swap·p0.00:   340.480 us/op
                 swap·p0.50:   343.040 us/op
                 swap·p0.90:   349.184 us/op
                 swap·p0.95:   351.232 us/op
                 swap·p0.99:   363.008 us/op
                 swap·p0.999:  510.598 us/op
                 swap·p0.9999: 833.545 us/op
                 swap·p1.00:   868.352 us/op

Iteration  13: 344.741 ±(99.9%) 0.131 us/op
                 swap·p0.00:   340.480 us/op
                 swap·p0.50:   343.040 us/op
                 swap·p0.90:   349.696 us/op
                 swap·p0.95:   352.768 us/op
                 swap·p0.99:   370.176 us/op
                 swap·p0.999:  421.394 us/op
                 swap·p0.9999: 524.368 us/op
                 swap·p1.00:   564.224 us/op

Iteration  14: 344.674 ±(99.9%) 0.137 us/op
                 swap·p0.00:   340.480 us/op
                 swap·p0.50:   343.040 us/op
                 swap·p0.90:   349.696 us/op
                 swap·p0.95:   352.256 us/op
                 swap·p0.99:   370.176 us/op
                 swap·p0.999:  431.649 us/op
                 swap·p0.9999: 563.564 us/op
                 swap·p1.00:   633.856 us/op

Iteration  15: 344.685 ±(99.9%) 0.124 us/op
                 swap·p0.00:   340.480 us/op
                 swap·p0.50:   343.552 us/op
                 swap·p0.90:   349.184 us/op
                 swap·p0.95:   351.744 us/op
                 swap·p0.99:   369.152 us/op
                 swap·p0.999:  408.590 us/op
                 swap·p0.9999: 535.463 us/op
                 swap·p1.00:   555.008 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  N = 435074
  mean =    344.453 ±(99.9%) 0.035 us/op

  Histogram, us/op:
    [   0.000,  125.000) = 0 
    [ 125.000,  250.000) = 0 
    [ 250.000,  375.000) = 433384 
    [ 375.000,  500.000) = 1615 
    [ 500.000,  625.000) = 39 
    [ 625.000,  750.000) = 23 
    [ 750.000,  875.000) = 11 
    [ 875.000, 1000.000) = 0 
    [1000.000, 1125.000) = 1 
    [1125.000, 1250.000) = 0 
    [1250.000, 1375.000) = 0 
    [1375.000, 1500.000) = 0 
    [1500.000, 1625.000) = 1 
    [1625.000, 1750.000) = 0 
    [1750.000, 1875.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    340.480 us/op
     p(50.0000) =    343.040 us/op
     p(90.0000) =    349.184 us/op
     p(95.0000) =    351.232 us/op
     p(99.0000) =    364.032 us/op
     p(99.9000) =    418.778 us/op
     p(99.9900) =    561.626 us/op
     p(99.9990) =    842.393 us/op
     p(99.9999) =   1619.968 us/op
    p(100.0000) =   1619.968 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 77.53% complete, ETA 01:52:17
# Fork: 1 of 1
# Warmup Iteration   1: 171.802 ±(99.9%) 0.381 us/op
# Warmup Iteration   2: 171.270 ±(99.9%) 0.205 us/op
# Warmup Iteration   3: 169.971 ±(99.9%) 0.121 us/op
# Warmup Iteration   4: 171.933 ±(99.9%) 0.189 us/op
# Warmup Iteration   5: 170.491 ±(99.9%) 0.095 us/op
Iteration   1: 172.192 ±(99.9%) 0.091 us/op
                 write·p0.00:   163.328 us/op
                 write·p0.50:   172.288 us/op
                 write·p0.90:   178.944 us/op
                 write·p0.95:   181.504 us/op
                 write·p0.99:   190.720 us/op
                 write·p0.999:  240.128 us/op
                 write·p0.9999: 299.624 us/op
                 write·p1.00:   319.488 us/op

Iteration   2: 171.266 ±(99.9%) 0.097 us/op
                 write·p0.00:   162.048 us/op
                 write·p0.50:   169.472 us/op
                 write·p0.90:   177.920 us/op
                 write·p0.95:   180.992 us/op
                 write·p0.99:   191.744 us/op
                 write·p0.999:  246.967 us/op
                 write·p0.9999: 310.711 us/op
                 write·p1.00:   352.256 us/op

Iteration   3: 170.523 ±(99.9%) 0.085 us/op
                 write·p0.00:   162.304 us/op
                 write·p0.50:   168.960 us/op
                 write·p0.90:   176.128 us/op
                 write·p0.95:   179.968 us/op
                 write·p0.99:   188.416 us/op
                 write·p0.999:  239.596 us/op
                 write·p0.9999: 308.673 us/op
                 write·p1.00:   325.120 us/op

Iteration   4: 173.017 ±(99.9%) 0.105 us/op
                 write·p0.00:   162.304 us/op
                 write·p0.50:   172.800 us/op
                 write·p0.90:   179.456 us/op
                 write·p0.95:   182.528 us/op
                 write·p0.99:   198.400 us/op
                 write·p0.999:  249.755 us/op
                 write·p0.9999: 325.865 us/op
                 write·p1.00:   553.984 us/op

Iteration   5: 172.103 ±(99.9%) 0.105 us/op
                 write·p0.00:   162.560 us/op
                 write·p0.50:   171.776 us/op
                 write·p0.90:   178.432 us/op
                 write·p0.95:   181.248 us/op
                 write·p0.99:   194.304 us/op
                 write·p0.999:  240.382 us/op
                 write·p0.9999: 340.885 us/op
                 write·p1.00:   627.712 us/op

Iteration   6: 171.801 ±(99.9%) 0.107 us/op
                 write·p0.00:   162.304 us/op
                 write·p0.50:   170.496 us/op
                 write·p0.90:   178.688 us/op
                 write·p0.95:   182.016 us/op
                 write·p0.99:   195.328 us/op
                 write·p0.999:  251.136 us/op
                 write·p0.9999: 331.529 us/op
                 write·p1.00:   362.496 us/op

Iteration   7: 173.602 ±(99.9%) 0.094 us/op
                 write·p0.00:   162.816 us/op
                 write·p0.50:   173.312 us/op
                 write·p0.90:   179.712 us/op
                 write·p0.95:   182.784 us/op
                 write·p0.99:   194.816 us/op
                 write·p0.999:  245.374 us/op
                 write·p0.9999: 316.032 us/op
                 write·p1.00:   336.896 us/op

Iteration   8: 172.314 ±(99.9%) 0.103 us/op
                 write·p0.00:   162.560 us/op
                 write·p0.50:   172.032 us/op
                 write·p0.90:   179.456 us/op
                 write·p0.95:   182.784 us/op
                 write·p0.99:   194.220 us/op
                 write·p0.999:  247.313 us/op
                 write·p0.9999: 334.176 us/op
                 write·p1.00:   363.520 us/op

Iteration   9: 171.841 ±(99.9%) 0.095 us/op
                 write·p0.00:   162.304 us/op
                 write·p0.50:   170.496 us/op
                 write·p0.90:   178.688 us/op
                 write·p0.95:   181.504 us/op
                 write·p0.99:   191.488 us/op
                 write·p0.999:  240.105 us/op
                 write·p0.9999: 289.061 us/op
                 write·p1.00:   434.176 us/op

Iteration  10: 172.852 ±(99.9%) 0.097 us/op
                 write·p0.00:   163.840 us/op
                 write·p0.50:   172.288 us/op
                 write·p0.90:   179.456 us/op
                 write·p0.95:   182.528 us/op
                 write·p0.99:   194.560 us/op
                 write·p0.999:  247.872 us/op
                 write·p0.9999: 304.025 us/op
                 write·p1.00:   361.472 us/op

Iteration  11: 171.073 ±(99.9%) 0.103 us/op
                 write·p0.00:   162.304 us/op
                 write·p0.50:   169.728 us/op
                 write·p0.90:   177.152 us/op
                 write·p0.95:   180.736 us/op
                 write·p0.99:   192.000 us/op
                 write·p0.999:  242.176 us/op
                 write·p0.9999: 374.905 us/op
                 write·p1.00:   563.200 us/op

Iteration  12: 171.332 ±(99.9%) 0.132 us/op
                 write·p0.00:   162.304 us/op
                 write·p0.50:   169.472 us/op
                 write·p0.90:   177.408 us/op
                 write·p0.95:   181.248 us/op
                 write·p0.99:   193.280 us/op
                 write·p0.999:  265.081 us/op
                 write·p0.9999: 613.419 us/op
                 write·p1.00:   706.560 us/op

Iteration  13: 170.341 ±(99.9%) 0.241 us/op
                 write·p0.00:   162.048 us/op
                 write·p0.50:   168.448 us/op
                 write·p0.90:   176.128 us/op
                 write·p0.95:   179.968 us/op
                 write·p0.99:   189.696 us/op
                 write·p0.999:  241.254 us/op
                 write·p0.9999: 336.230 us/op
                 write·p1.00:   2981.888 us/op

Iteration  14: 171.469 ±(99.9%) 0.112 us/op
                 write·p0.00:   162.304 us/op
                 write·p0.50:   169.472 us/op
                 write·p0.90:   178.688 us/op
                 write·p0.95:   182.272 us/op
                 write·p0.99:   197.074 us/op
                 write·p0.999:  256.089 us/op
                 write·p0.9999: 335.978 us/op
                 write·p1.00:   407.040 us/op

Iteration  15: 171.326 ±(99.9%) 0.103 us/op
                 write·p0.00:   162.304 us/op
                 write·p0.50:   169.472 us/op
                 write·p0.90:   178.432 us/op
                 write·p0.95:   181.504 us/op
                 write·p0.99:   191.744 us/op
                 write·p0.999:  244.224 us/op
                 write·p0.9999: 377.357 us/op
                 write·p1.00:   449.536 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  N = 871573
  mean =    171.799 ±(99.9%) 0.030 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 870858 
    [ 250.000,  500.000) = 699 
    [ 500.000,  750.000) = 14 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    162.048 us/op
     p(50.0000) =    170.240 us/op
     p(90.0000) =    178.432 us/op
     p(95.0000) =    181.504 us/op
     p(99.0000) =    193.024 us/op
     p(99.9000) =    246.016 us/op
     p(99.9900) =    327.599 us/op
     p(99.9990) =    614.098 us/op
     p(99.9999) =   2981.888 us/op
    p(100.0000) =   2981.888 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 78.26% complete, ETA 01:48:40
# Fork: 1 of 1
# Warmup Iteration   1: 1357381.632 ±(99.9%) 39967.935 us/op
# Warmup Iteration   2: 1344274.432 ±(99.9%) 5249.933 us/op
# Warmup Iteration   3: 1344274.432 ±(99.9%) 12497.340 us/op
# Warmup Iteration   4: 1343225.856 ±(99.9%) 5249.933 us/op
# Warmup Iteration   5: 1343488.000 ±(99.9%) 6038.374 us/op
Iteration   1: 1345585.152 ±(99.9%) 7088.220 us/op
                 sumBigDecimals·p0.00:   1340080.128 us/op
                 sumBigDecimals·p0.50:   1346371.584 us/op
                 sumBigDecimals·p0.90:   1350565.888 us/op
                 sumBigDecimals·p0.95:   1350565.888 us/op
                 sumBigDecimals·p0.99:   1350565.888 us/op
                 sumBigDecimals·p0.999:  1350565.888 us/op
                 sumBigDecimals·p0.9999: 1350565.888 us/op
                 sumBigDecimals·p1.00:   1350565.888 us/op

Iteration   2: 1345323.008 ±(99.9%) 7727.692 us/op
                 sumBigDecimals·p0.00:   1340080.128 us/op
                 sumBigDecimals·p0.50:   1346371.584 us/op
                 sumBigDecimals·p0.90:   1350565.888 us/op
                 sumBigDecimals·p0.95:   1350565.888 us/op
                 sumBigDecimals·p0.99:   1350565.888 us/op
                 sumBigDecimals·p0.999:  1350565.888 us/op
                 sumBigDecimals·p0.9999: 1350565.888 us/op
                 sumBigDecimals·p1.00:   1350565.888 us/op

Iteration   3: 1344798.720 ±(99.9%) 4671.162 us/op
                 sumBigDecimals·p0.00:   1342177.280 us/op
                 sumBigDecimals·p0.50:   1344274.432 us/op
                 sumBigDecimals·p0.90:   1348468.736 us/op
                 sumBigDecimals·p0.95:   1348468.736 us/op
                 sumBigDecimals·p0.99:   1348468.736 us/op
                 sumBigDecimals·p0.999:  1348468.736 us/op
                 sumBigDecimals·p0.9999: 1348468.736 us/op
                 sumBigDecimals·p1.00:   1348468.736 us/op

Iteration   4: 1346633.728 ±(99.9%) 6225.655 us/op
                 sumBigDecimals·p0.00:   1342177.280 us/op
                 sumBigDecimals·p0.50:   1346371.584 us/op
                 sumBigDecimals·p0.90:   1352663.040 us/op
                 sumBigDecimals·p0.95:   1352663.040 us/op
                 sumBigDecimals·p0.99:   1352663.040 us/op
                 sumBigDecimals·p0.999:  1352663.040 us/op
                 sumBigDecimals·p0.9999: 1352663.040 us/op
                 sumBigDecimals·p1.00:   1352663.040 us/op

Iteration   5: 1345323.008 ±(99.9%) 9093.151 us/op
                 sumBigDecimals·p0.00:   1335885.824 us/op
                 sumBigDecimals·p0.50:   1347420.160 us/op
                 sumBigDecimals·p0.90:   1348468.736 us/op
                 sumBigDecimals·p0.95:   1348468.736 us/op
                 sumBigDecimals·p0.99:   1348468.736 us/op
                 sumBigDecimals·p0.999:  1348468.736 us/op
                 sumBigDecimals·p0.9999: 1348468.736 us/op
                 sumBigDecimals·p1.00:   1348468.736 us/op

Iteration   6: 1340866.560 ±(99.9%) 5222.518 us/op
                 sumBigDecimals·p0.00:   1335885.824 us/op
                 sumBigDecimals·p0.50:   1342177.280 us/op
                 sumBigDecimals·p0.90:   1344274.432 us/op
                 sumBigDecimals·p0.95:   1344274.432 us/op
                 sumBigDecimals·p0.99:   1344274.432 us/op
                 sumBigDecimals·p0.999:  1344274.432 us/op
                 sumBigDecimals·p0.9999: 1344274.432 us/op
                 sumBigDecimals·p1.00:   1344274.432 us/op

Iteration   7: 1340342.272 ±(99.9%) 6584.255 us/op
                 sumBigDecimals·p0.00:   1335885.824 us/op
                 sumBigDecimals·p0.50:   1341128.704 us/op
                 sumBigDecimals·p0.90:   1344274.432 us/op
                 sumBigDecimals·p0.95:   1344274.432 us/op
                 sumBigDecimals·p0.99:   1344274.432 us/op
                 sumBigDecimals·p0.999:  1344274.432 us/op
                 sumBigDecimals·p0.9999: 1344274.432 us/op
                 sumBigDecimals·p1.00:   1344274.432 us/op

Iteration   8: 1345060.864 ±(99.9%) 7405.167 us/op
                 sumBigDecimals·p0.00:   1337982.976 us/op
                 sumBigDecimals·p0.50:   1345323.008 us/op
                 sumBigDecimals·p0.90:   1350565.888 us/op
                 sumBigDecimals·p0.95:   1350565.888 us/op
                 sumBigDecimals·p0.99:   1350565.888 us/op
                 sumBigDecimals·p0.999:  1350565.888 us/op
                 sumBigDecimals·p0.9999: 1350565.888 us/op
                 sumBigDecimals·p1.00:   1350565.888 us/op

Iteration   9: 1340604.416 ±(99.9%) 7346.781 us/op
                 sumBigDecimals·p0.00:   1333788.672 us/op
                 sumBigDecimals·p0.50:   1342177.280 us/op
                 sumBigDecimals·p0.90:   1344274.432 us/op
                 sumBigDecimals·p0.95:   1344274.432 us/op
                 sumBigDecimals·p0.99:   1344274.432 us/op
                 sumBigDecimals·p0.999:  1344274.432 us/op
                 sumBigDecimals·p0.9999: 1344274.432 us/op
                 sumBigDecimals·p1.00:   1344274.432 us/op

Iteration  10: 1345060.864 ±(99.9%) 7405.167 us/op
                 sumBigDecimals·p0.00:   1337982.976 us/op
                 sumBigDecimals·p0.50:   1345323.008 us/op
                 sumBigDecimals·p0.90:   1350565.888 us/op
                 sumBigDecimals·p0.95:   1350565.888 us/op
                 sumBigDecimals·p0.99:   1350565.888 us/op
                 sumBigDecimals·p0.999:  1350565.888 us/op
                 sumBigDecimals·p0.9999: 1350565.888 us/op
                 sumBigDecimals·p1.00:   1350565.888 us/op

Iteration  11: 1346895.872 ±(99.9%) 4150.437 us/op
                 sumBigDecimals·p0.00:   1344274.432 us/op
                 sumBigDecimals·p0.50:   1346371.584 us/op
                 sumBigDecimals·p0.90:   1350565.888 us/op
                 sumBigDecimals·p0.95:   1350565.888 us/op
                 sumBigDecimals·p0.99:   1350565.888 us/op
                 sumBigDecimals·p0.999:  1350565.888 us/op
                 sumBigDecimals·p0.9999: 1350565.888 us/op
                 sumBigDecimals·p1.00:   1350565.888 us/op

Iteration  12: 1343750.144 ±(99.9%) 5966.628 us/op
                 sumBigDecimals·p0.00:   1340080.128 us/op
                 sumBigDecimals·p0.50:   1343225.856 us/op
                 sumBigDecimals·p0.90:   1348468.736 us/op
                 sumBigDecimals·p0.95:   1348468.736 us/op
                 sumBigDecimals·p0.99:   1348468.736 us/op
                 sumBigDecimals·p0.999:  1348468.736 us/op
                 sumBigDecimals·p0.9999: 1348468.736 us/op
                 sumBigDecimals·p1.00:   1348468.736 us/op

Iteration  13: 1350565.888 ±(99.9%) 6777.634 us/op
                 sumBigDecimals·p0.00:   1346371.584 us/op
                 sumBigDecimals·p0.50:   1350565.888 us/op
                 sumBigDecimals·p0.90:   1354760.192 us/op
                 sumBigDecimals·p0.95:   1354760.192 us/op
                 sumBigDecimals·p0.99:   1354760.192 us/op
                 sumBigDecimals·p0.999:  1354760.192 us/op
                 sumBigDecimals·p0.9999: 1354760.192 us/op
                 sumBigDecimals·p1.00:   1354760.192 us/op

Iteration  14: 1342701.568 ±(99.9%) 7947.481 us/op
                 sumBigDecimals·p0.00:   1337982.976 us/op
                 sumBigDecimals·p0.50:   1341128.704 us/op
                 sumBigDecimals·p0.90:   1350565.888 us/op
                 sumBigDecimals·p0.95:   1350565.888 us/op
                 sumBigDecimals·p0.99:   1350565.888 us/op
                 sumBigDecimals·p0.999:  1350565.888 us/op
                 sumBigDecimals·p0.9999: 1350565.888 us/op
                 sumBigDecimals·p1.00:   1350565.888 us/op

Iteration  15: 1343750.144 ±(99.9%) 5568.395 us/op
                 sumBigDecimals·p0.00:   1340080.128 us/op
                 sumBigDecimals·p0.50:   1344274.432 us/op
                 sumBigDecimals·p0.90:   1348468.736 us/op
                 sumBigDecimals·p0.95:   1348468.736 us/op
                 sumBigDecimals·p0.99:   1348468.736 us/op
                 sumBigDecimals·p0.999:  1348468.736 us/op
                 sumBigDecimals·p0.9999: 1348468.736 us/op
                 sumBigDecimals·p1.00:   1348468.736 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  N = 120
  mean = 1344484.147 ±(99.9%) 1295.715 us/op

  Histogram, us/op:
    [1330000.000, 1332500.000) = 0 
    [1332500.000, 1335000.000) = 1 
    [1335000.000, 1337500.000) = 5 
    [1337500.000, 1340000.000) = 5 
    [1340000.000, 1342500.000) = 34 
    [1342500.000, 1345000.000) = 22 
    [1345000.000, 1347500.000) = 23 
    [1347500.000, 1350000.000) = 19 
    [1350000.000, 1352500.000) = 6 
    [1352500.000, 1355000.000) = 5 
    [1355000.000, 1357500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1333788.672 us/op
     p(50.0000) = 1344274.432 us/op
     p(90.0000) = 1348468.736 us/op
     p(95.0000) = 1350565.888 us/op
     p(99.0000) = 1354760.192 us/op
     p(99.9000) = 1354760.192 us/op
     p(99.9900) = 1354760.192 us/op
     p(99.9990) = 1354760.192 us/op
     p(99.9999) = 1354760.192 us/op
    p(100.0000) = 1354760.192 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 78.98% complete, ETA 01:45:06
# Fork: 1 of 1
# Warmup Iteration   1: 133938.108 ±(99.9%) 2011.878 us/op
# Warmup Iteration   2: 135004.160 ±(99.9%) 576.358 us/op
# Warmup Iteration   3: 134327.828 ±(99.9%) 265.158 us/op
# Warmup Iteration   4: 134399.481 ±(99.9%) 208.494 us/op
# Warmup Iteration   5: 135376.121 ±(99.9%) 222.166 us/op
Iteration   1: 130673.677 ±(99.9%) 315.359 us/op
                 countUppercase·p0.00:   129630.208 us/op
                 countUppercase·p0.50:   130547.712 us/op
                 countUppercase·p0.90:   131858.432 us/op
                 countUppercase·p0.95:   132789.043 us/op
                 countUppercase·p0.99:   133824.512 us/op
                 countUppercase·p0.999:  133824.512 us/op
                 countUppercase·p0.9999: 133824.512 us/op
                 countUppercase·p1.00:   133824.512 us/op

Iteration   2: 134703.568 ±(99.9%) 255.200 us/op
                 countUppercase·p0.00:   133693.440 us/op
                 countUppercase·p0.50:   134479.872 us/op
                 countUppercase·p0.90:   135528.448 us/op
                 countUppercase·p0.95:   136105.165 us/op
                 countUppercase·p0.99:   137101.312 us/op
                 countUppercase·p0.999:  137101.312 us/op
                 countUppercase·p0.9999: 137101.312 us/op
                 countUppercase·p1.00:   137101.312 us/op

Iteration   3: 131087.320 ±(99.9%) 289.840 us/op
                 countUppercase·p0.00:   130154.496 us/op
                 countUppercase·p0.50:   130809.856 us/op
                 countUppercase·p0.90:   131884.646 us/op
                 countUppercase·p0.95:   132671.078 us/op
                 countUppercase·p0.99:   134217.728 us/op
                 countUppercase·p0.999:  134217.728 us/op
                 countUppercase·p0.9999: 134217.728 us/op
                 countUppercase·p1.00:   134217.728 us/op

Iteration   4: 133635.768 ±(99.9%) 289.562 us/op
                 countUppercase·p0.00:   132907.008 us/op
                 countUppercase·p0.50:   133431.296 us/op
                 countUppercase·p0.90:   134322.586 us/op
                 countUppercase·p0.95:   134742.016 us/op
                 countUppercase·p0.99:   137887.744 us/op
                 countUppercase·p0.999:  137887.744 us/op
                 countUppercase·p0.9999: 137887.744 us/op
                 countUppercase·p1.00:   137887.744 us/op

Iteration   5: 127929.590 ±(99.9%) 432.978 us/op
                 countUppercase·p0.00:   126877.696 us/op
                 countUppercase·p0.50:   127533.056 us/op
                 countUppercase·p0.90:   128843.776 us/op
                 countUppercase·p0.95:   130809.856 us/op
                 countUppercase·p0.99:   133431.296 us/op
                 countUppercase·p0.999:  133431.296 us/op
                 countUppercase·p0.9999: 133431.296 us/op
                 countUppercase·p1.00:   133431.296 us/op

Iteration   6: 131823.939 ±(99.9%) 383.550 us/op
                 countUppercase·p0.00:   130809.856 us/op
                 countUppercase·p0.50:   131596.288 us/op
                 countUppercase·p0.90:   132553.114 us/op
                 countUppercase·p0.95:   133772.083 us/op
                 countUppercase·p0.99:   136839.168 us/op
                 countUppercase·p0.999:  136839.168 us/op
                 countUppercase·p0.9999: 136839.168 us/op
                 countUppercase·p1.00:   136839.168 us/op

Iteration   7: 132858.718 ±(99.9%) 447.335 us/op
                 countUppercase·p0.00:   131858.432 us/op
                 countUppercase·p0.50:   132513.792 us/op
                 countUppercase·p0.90:   135004.160 us/op
                 countUppercase·p0.95:   135266.304 us/op
                 countUppercase·p0.99:   137887.744 us/op
                 countUppercase·p0.999:  137887.744 us/op
                 countUppercase·p0.9999: 137887.744 us/op
                 countUppercase·p1.00:   137887.744 us/op

Iteration   8: 134207.242 ±(99.9%) 349.778 us/op
                 countUppercase·p0.00:   133038.080 us/op
                 countUppercase·p0.50:   133955.584 us/op
                 countUppercase·p0.90:   135528.448 us/op
                 countUppercase·p0.95:   136105.165 us/op
                 countUppercase·p0.99:   137101.312 us/op
                 countUppercase·p0.999:  137101.312 us/op
                 countUppercase·p0.9999: 137101.312 us/op
                 countUppercase·p1.00:   137101.312 us/op

Iteration   9: 133791.307 ±(99.9%) 554.636 us/op
                 countUppercase·p0.00:   132513.792 us/op
                 countUppercase·p0.50:   133300.224 us/op
                 countUppercase·p0.90:   135738.163 us/op
                 countUppercase·p0.95:   137730.458 us/op
                 countUppercase·p0.99:   139198.464 us/op
                 countUppercase·p0.999:  139198.464 us/op
                 countUppercase·p0.9999: 139198.464 us/op
                 countUppercase·p1.00:   139198.464 us/op

Iteration  10: 129955.335 ±(99.9%) 225.430 us/op
                 countUppercase·p0.00:   129368.064 us/op
                 countUppercase·p0.50:   129761.280 us/op
                 countUppercase·p0.90:   130940.928 us/op
                 countUppercase·p0.95:   131072.000 us/op
                 countUppercase·p0.99:   132382.720 us/op
                 countUppercase·p0.999:  132382.720 us/op
                 countUppercase·p0.9999: 132382.720 us/op
                 countUppercase·p1.00:   132382.720 us/op

Iteration  11: 131932.591 ±(99.9%) 189.035 us/op
                 countUppercase·p0.00:   131203.072 us/op
                 countUppercase·p0.50:   131858.432 us/op
                 countUppercase·p0.90:   132553.114 us/op
                 countUppercase·p0.95:   132907.008 us/op
                 countUppercase·p0.99:   134086.656 us/op
                 countUppercase·p0.999:  134086.656 us/op
                 countUppercase·p0.9999: 134086.656 us/op
                 countUppercase·p1.00:   134086.656 us/op

Iteration  12: 130804.749 ±(99.9%) 253.696 us/op
                 countUppercase·p0.00:   129892.352 us/op
                 countUppercase·p0.50:   130678.784 us/op
                 countUppercase·p0.90:   131622.502 us/op
                 countUppercase·p0.95:   131871.539 us/op
                 countUppercase·p0.99:   133824.512 us/op
                 countUppercase·p0.999:  133824.512 us/op
                 countUppercase·p0.9999: 133824.512 us/op
                 countUppercase·p1.00:   133824.512 us/op

Iteration  13: 131230.308 ±(99.9%) 194.058 us/op
                 countUppercase·p0.00:   130547.712 us/op
                 countUppercase·p0.50:   131072.000 us/op
                 countUppercase·p0.90:   131858.432 us/op
                 countUppercase·p0.95:   132277.862 us/op
                 countUppercase·p0.99:   132644.864 us/op
                 countUppercase·p0.999:  132644.864 us/op
                 countUppercase·p0.9999: 132644.864 us/op
                 countUppercase·p1.00:   132644.864 us/op

Iteration  14: 135372.579 ±(99.9%) 507.172 us/op
                 countUppercase·p0.00:   134479.872 us/op
                 countUppercase·p0.50:   135004.160 us/op
                 countUppercase·p0.90:   136183.808 us/op
                 countUppercase·p0.95:   138936.320 us/op
                 countUppercase·p0.99:   141295.616 us/op
                 countUppercase·p0.999:  141295.616 us/op
                 countUppercase·p0.9999: 141295.616 us/op
                 countUppercase·p1.00:   141295.616 us/op

Iteration  15: 138293.529 ±(99.9%) 203.118 us/op
                 countUppercase·p0.00:   137625.600 us/op
                 countUppercase·p0.50:   138149.888 us/op
                 countUppercase·p0.90:   138936.320 us/op
                 countUppercase·p0.95:   139277.107 us/op
                 countUppercase·p0.99:   139984.896 us/op
                 countUppercase·p0.999:  139984.896 us/op
                 countUppercase·p0.9999: 139984.896 us/op
                 countUppercase·p1.00:   139984.896 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 1139
  mean = 132507.808 ±(99.9%) 254.312 us/op

  Histogram, us/op:
    [120000.000, 122500.000) = 0 
    [122500.000, 125000.000) = 0 
    [125000.000, 127500.000) = 29 
    [127500.000, 130000.000) = 108 
    [130000.000, 132500.000) = 476 
    [132500.000, 135000.000) = 349 
    [135000.000, 137500.000) = 94 
    [137500.000, 140000.000) = 81 
    [140000.000, 142500.000) = 2 
    [142500.000, 145000.000) = 0 
    [145000.000, 147500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 126877.696 us/op
     p(50.0000) = 132120.576 us/op
     p(90.0000) = 135528.448 us/op
     p(95.0000) = 137887.744 us/op
     p(99.0000) = 139093.606 us/op
     p(99.9000) = 141222.216 us/op
     p(99.9900) = 141295.616 us/op
     p(99.9990) = 141295.616 us/op
     p(99.9999) = 141295.616 us/op
    p(100.0000) = 141295.616 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 79.71% complete, ETA 01:41:29
# Fork: 1 of 1
# Warmup Iteration   1: 8556380.160 us/op
# Warmup Iteration   2: 6928990.208 us/op
# Warmup Iteration   3: 7197425.664 us/op
# Warmup Iteration   4: 6715080.704 us/op
# Warmup Iteration   5: 6576668.672 us/op
Iteration   1: 7092568.064 us/op
                 countUppercase·p0.00:   7079985.152 us/op
                 countUppercase·p0.50:   7092568.064 us/op
                 countUppercase·p0.90:   7105150.976 us/op
                 countUppercase·p0.95:   7105150.976 us/op
                 countUppercase·p0.99:   7105150.976 us/op
                 countUppercase·p0.999:  7105150.976 us/op
                 countUppercase·p0.9999: 7105150.976 us/op
                 countUppercase·p1.00:   7105150.976 us/op

Iteration   2: 6312427.520 us/op
                 countUppercase·p0.00:   6299844.608 us/op
                 countUppercase·p0.50:   6312427.520 us/op
                 countUppercase·p0.90:   6325010.432 us/op
                 countUppercase·p0.95:   6325010.432 us/op
                 countUppercase·p0.99:   6325010.432 us/op
                 countUppercase·p0.999:  6325010.432 us/op
                 countUppercase·p0.9999: 6325010.432 us/op
                 countUppercase·p1.00:   6325010.432 us/op

Iteration   3: 6597640.192 us/op
                 countUppercase·p0.00:   6568280.064 us/op
                 countUppercase·p0.50:   6597640.192 us/op
                 countUppercase·p0.90:   6627000.320 us/op
                 countUppercase·p0.95:   6627000.320 us/op
                 countUppercase·p0.99:   6627000.320 us/op
                 countUppercase·p0.999:  6627000.320 us/op
                 countUppercase·p0.9999: 6627000.320 us/op
                 countUppercase·p1.00:   6627000.320 us/op

Iteration   4: 6614417.408 us/op
                 countUppercase·p0.00:   6601834.496 us/op
                 countUppercase·p0.50:   6614417.408 us/op
                 countUppercase·p0.90:   6627000.320 us/op
                 countUppercase·p0.95:   6627000.320 us/op
                 countUppercase·p0.99:   6627000.320 us/op
                 countUppercase·p0.999:  6627000.320 us/op
                 countUppercase·p0.9999: 6627000.320 us/op
                 countUppercase·p1.00:   6627000.320 us/op

Iteration   5: 6333399.040 us/op
                 countUppercase·p0.00:   6291456.000 us/op
                 countUppercase·p0.50:   6333399.040 us/op
                 countUppercase·p0.90:   6375342.080 us/op
                 countUppercase·p0.95:   6375342.080 us/op
                 countUppercase·p0.99:   6375342.080 us/op
                 countUppercase·p0.999:  6375342.080 us/op
                 countUppercase·p0.9999: 6375342.080 us/op
                 countUppercase·p1.00:   6375342.080 us/op

Iteration   6: 7142899.712 us/op
                 countUppercase·p0.00:   7121928.192 us/op
                 countUppercase·p0.50:   7142899.712 us/op
                 countUppercase·p0.90:   7163871.232 us/op
                 countUppercase·p0.95:   7163871.232 us/op
                 countUppercase·p0.99:   7163871.232 us/op
                 countUppercase·p0.999:  7163871.232 us/op
                 countUppercase·p0.9999: 7163871.232 us/op
                 countUppercase·p1.00:   7163871.232 us/op

Iteration   7: 6526337.024 us/op
                 countUppercase·p0.00:   6509559.808 us/op
                 countUppercase·p0.50:   6526337.024 us/op
                 countUppercase·p0.90:   6543114.240 us/op
                 countUppercase·p0.95:   6543114.240 us/op
                 countUppercase·p0.99:   6543114.240 us/op
                 countUppercase·p0.999:  6543114.240 us/op
                 countUppercase·p0.9999: 6543114.240 us/op
                 countUppercase·p1.00:   6543114.240 us/op

Iteration   8: 5947523.072 us/op
                 countUppercase·p0.00:   5939134.464 us/op
                 countUppercase·p0.50:   5947523.072 us/op
                 countUppercase·p0.90:   5955911.680 us/op
                 countUppercase·p0.95:   5955911.680 us/op
                 countUppercase·p0.99:   5955911.680 us/op
                 countUppercase·p0.999:  5955911.680 us/op
                 countUppercase·p0.9999: 5955911.680 us/op
                 countUppercase·p1.00:   5955911.680 us/op

Iteration   9: 6496976.896 us/op
                 countUppercase·p0.00:   6484393.984 us/op
                 countUppercase·p0.50:   6496976.896 us/op
                 countUppercase·p0.90:   6509559.808 us/op
                 countUppercase·p0.95:   6509559.808 us/op
                 countUppercase·p0.99:   6509559.808 us/op
                 countUppercase·p0.999:  6509559.808 us/op
                 countUppercase·p0.9999: 6509559.808 us/op
                 countUppercase·p1.00:   6509559.808 us/op

Iteration  10: 6304038.912 us/op
                 countUppercase·p0.00:   6299844.608 us/op
                 countUppercase·p0.50:   6304038.912 us/op
                 countUppercase·p0.90:   6308233.216 us/op
                 countUppercase·p0.95:   6308233.216 us/op
                 countUppercase·p0.99:   6308233.216 us/op
                 countUppercase·p0.999:  6308233.216 us/op
                 countUppercase·p0.9999: 6308233.216 us/op
                 countUppercase·p1.00:   6308233.216 us/op

Iteration  11: 6660554.752 us/op
                 countUppercase·p0.00:   6652166.144 us/op
                 countUppercase·p0.50:   6660554.752 us/op
                 countUppercase·p0.90:   6668943.360 us/op
                 countUppercase·p0.95:   6668943.360 us/op
                 countUppercase·p0.99:   6668943.360 us/op
                 countUppercase·p0.999:  6668943.360 us/op
                 countUppercase·p0.9999: 6668943.360 us/op
                 countUppercase·p1.00:   6668943.360 us/op

Iteration  12: 6551502.848 us/op
                 countUppercase·p0.00:   6543114.240 us/op
                 countUppercase·p0.50:   6551502.848 us/op
                 countUppercase·p0.90:   6559891.456 us/op
                 countUppercase·p0.95:   6559891.456 us/op
                 countUppercase·p0.99:   6559891.456 us/op
                 countUppercase·p0.999:  6559891.456 us/op
                 countUppercase·p0.9999: 6559891.456 us/op
                 countUppercase·p1.00:   6559891.456 us/op

Iteration  13: 6589251.584 us/op
                 countUppercase·p0.00:   6576668.672 us/op
                 countUppercase·p0.50:   6589251.584 us/op
                 countUppercase·p0.90:   6601834.496 us/op
                 countUppercase·p0.95:   6601834.496 us/op
                 countUppercase·p0.99:   6601834.496 us/op
                 countUppercase·p0.999:  6601834.496 us/op
                 countUppercase·p0.9999: 6601834.496 us/op
                 countUppercase·p1.00:   6601834.496 us/op

Iteration  14: 6773800.960 us/op
                 countUppercase·p0.00:   6769606.656 us/op
                 countUppercase·p0.50:   6773800.960 us/op
                 countUppercase·p0.90:   6777995.264 us/op
                 countUppercase·p0.95:   6777995.264 us/op
                 countUppercase·p0.99:   6777995.264 us/op
                 countUppercase·p0.999:  6777995.264 us/op
                 countUppercase·p0.9999: 6777995.264 us/op
                 countUppercase·p1.00:   6777995.264 us/op

Iteration  15: 6606028.800 us/op
                 countUppercase·p0.00:   6593445.888 us/op
                 countUppercase·p0.50:   6606028.800 us/op
                 countUppercase·p0.90:   6618611.712 us/op
                 countUppercase·p0.95:   6618611.712 us/op
                 countUppercase·p0.99:   6618611.712 us/op
                 countUppercase·p0.999:  6618611.712 us/op
                 countUppercase·p0.9999: 6618611.712 us/op
                 countUppercase·p1.00:   6618611.712 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 30
  mean = 6569957.786 ±(99.9%) 196014.631 us/op

  Histogram, us/op:
    [5000000.000, 5250000.000) = 0 
    [5250000.000, 5500000.000) = 0 
    [5500000.000, 5750000.000) = 0 
    [5750000.000, 6000000.000) = 2 
    [6000000.000, 6250000.000) = 0 
    [6250000.000, 6500000.000) = 7 
    [6500000.000, 6750000.000) = 15 
    [6750000.000, 7000000.000) = 2 
    [7000000.000, 7250000.000) = 4 
    [7250000.000, 7500000.000) = 0 
    [7500000.000, 7750000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 5939134.464 us/op
     p(50.0000) = 6572474.368 us/op
     p(90.0000) = 7102634.394 us/op
     p(95.0000) = 7140802.560 us/op
     p(99.0000) = 7163871.232 us/op
     p(99.9000) = 7163871.232 us/op
     p(99.9900) = 7163871.232 us/op
     p(99.9990) = 7163871.232 us/op
     p(99.9999) = 7163871.232 us/op
    p(100.0000) = 7163871.232 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 80.43% complete, ETA 01:38:08
# Fork: 1 of 1
# Warmup Iteration   1: 1.898 ±(99.9%) 0.005 us/op
# Warmup Iteration   2: 1.899 ±(99.9%) 0.005 us/op
# Warmup Iteration   3: 1.899 ±(99.9%) 0.003 us/op
# Warmup Iteration   4: 1.896 ±(99.9%) 0.003 us/op
# Warmup Iteration   5: 1.907 ±(99.9%) 0.028 us/op
Iteration   1: 1.903 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.876 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.900 us/op
                 runFibonacci·p0.99:   1.920 us/op
                 runFibonacci·p0.999:  9.504 us/op
                 runFibonacci·p0.9999: 32.036 us/op
                 runFibonacci·p1.00:   99.712 us/op

Iteration   2: 1.901 ±(99.9%) 0.005 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.876 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.900 us/op
                 runFibonacci·p0.99:   1.922 us/op
                 runFibonacci·p0.999:  9.371 us/op
                 runFibonacci·p0.9999: 25.987 us/op
                 runFibonacci·p1.00:   389.120 us/op

Iteration   3: 1.901 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.876 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.902 us/op
                 runFibonacci·p0.99:   1.928 us/op
                 runFibonacci·p0.999:  9.344 us/op
                 runFibonacci·p0.9999: 29.429 us/op
                 runFibonacci·p1.00:   119.296 us/op

Iteration   4: 1.901 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.876 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.900 us/op
                 runFibonacci·p0.99:   1.932 us/op
                 runFibonacci·p0.999:  9.600 us/op
                 runFibonacci·p0.9999: 28.154 us/op
                 runFibonacci·p1.00:   109.056 us/op

Iteration   5: 1.900 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.876 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.902 us/op
                 runFibonacci·p0.99:   1.926 us/op
                 runFibonacci·p0.999:  9.494 us/op
                 runFibonacci·p0.9999: 28.200 us/op
                 runFibonacci·p1.00:   110.848 us/op

Iteration   6: 1.899 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.876 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.902 us/op
                 runFibonacci·p0.99:   1.948 us/op
                 runFibonacci·p0.999:  9.466 us/op
                 runFibonacci·p0.9999: 25.143 us/op
                 runFibonacci·p1.00:   87.808 us/op

Iteration   7: 1.896 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.876 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.902 us/op
                 runFibonacci·p0.99:   1.922 us/op
                 runFibonacci·p0.999:  8.679 us/op
                 runFibonacci·p0.9999: 19.505 us/op
                 runFibonacci·p1.00:   81.024 us/op

Iteration   8: 1.902 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.876 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.900 us/op
                 runFibonacci·p0.99:   1.936 us/op
                 runFibonacci·p0.999:  9.514 us/op
                 runFibonacci·p0.9999: 29.640 us/op
                 runFibonacci·p1.00:   102.400 us/op

Iteration   9: 1.903 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.876 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.902 us/op
                 runFibonacci·p0.99:   1.920 us/op
                 runFibonacci·p0.999:  9.424 us/op
                 runFibonacci·p0.9999: 33.144 us/op
                 runFibonacci·p1.00:   380.928 us/op

Iteration  10: 1.902 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.850 us/op
                 runFibonacci·p0.50:   1.878 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.898 us/op
                 runFibonacci·p0.99:   1.930 us/op
                 runFibonacci·p0.999:  9.216 us/op
                 runFibonacci·p0.9999: 25.235 us/op
                 runFibonacci·p1.00:   120.320 us/op

Iteration  11: 1.900 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.876 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.900 us/op
                 runFibonacci·p0.99:   1.930 us/op
                 runFibonacci·p0.999:  9.398 us/op
                 runFibonacci·p0.9999: 25.773 us/op
                 runFibonacci·p1.00:   90.624 us/op

Iteration  12: 1.901 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.850 us/op
                 runFibonacci·p0.50:   1.876 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.902 us/op
                 runFibonacci·p0.99:   1.918 us/op
                 runFibonacci·p0.999:  9.008 us/op
                 runFibonacci·p0.9999: 28.462 us/op
                 runFibonacci·p1.00:   178.944 us/op

Iteration  13: 1.899 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.850 us/op
                 runFibonacci·p0.50:   1.876 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.900 us/op
                 runFibonacci·p0.99:   1.918 us/op
                 runFibonacci·p0.999:  8.816 us/op
                 runFibonacci·p0.9999: 26.070 us/op
                 runFibonacci·p1.00:   211.456 us/op

Iteration  14: 1.902 ±(99.9%) 0.005 us/op
                 runFibonacci·p0.00:   1.850 us/op
                 runFibonacci·p0.50:   1.876 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.900 us/op
                 runFibonacci·p0.99:   1.918 us/op
                 runFibonacci·p0.999:  9.536 us/op
                 runFibonacci·p0.9999: 22.975 us/op
                 runFibonacci·p1.00:   224.256 us/op

Iteration  15: 1.905 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   1.850 us/op
                 runFibonacci·p0.50:   1.876 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.902 us/op
                 runFibonacci·p0.99:   1.918 us/op
                 runFibonacci·p0.999:  9.374 us/op
                 runFibonacci·p0.9999: 31.358 us/op
                 runFibonacci·p1.00:   382.976 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 5015747
  mean =      1.901 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 5015113 
    [ 25.000,  50.000) = 538 
    [ 50.000,  75.000) = 53 
    [ 75.000, 100.000) = 22 
    [100.000, 125.000) = 8 
    [125.000, 150.000) = 1 
    [150.000, 175.000) = 4 
    [175.000, 200.000) = 1 
    [200.000, 225.000) = 2 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 0 
    [275.000, 300.000) = 0 
    [300.000, 325.000) = 0 
    [325.000, 350.000) = 1 
    [350.000, 375.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      1.848 us/op
     p(50.0000) =      1.876 us/op
     p(90.0000) =      1.888 us/op
     p(95.0000) =      1.902 us/op
     p(99.0000) =      1.922 us/op
     p(99.9000) =      9.312 us/op
     p(99.9900) =     27.680 us/op
     p(99.9990) =     64.489 us/op
     p(99.9999) =    338.650 us/op
    p(100.0000) =    389.120 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 81.16% complete, ETA 01:34:29
# Fork: 1 of 1
# Warmup Iteration   1: 4.981 ±(99.9%) 0.015 us/op
# Warmup Iteration   2: 4.978 ±(99.9%) 0.008 us/op
# Warmup Iteration   3: 4.984 ±(99.9%) 0.007 us/op
# Warmup Iteration   4: 4.980 ±(99.9%) 0.008 us/op
# Warmup Iteration   5: 4.972 ±(99.9%) 0.007 us/op
Iteration   1: 4.976 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   4.776 us/op
                 runFibonacci·p0.50:   4.912 us/op
                 runFibonacci·p0.90:   4.960 us/op
                 runFibonacci·p0.95:   4.976 us/op
                 runFibonacci·p0.99:   5.560 us/op
                 runFibonacci·p0.999:  15.707 us/op
                 runFibonacci·p0.9999: 49.250 us/op
                 runFibonacci·p1.00:   189.696 us/op

Iteration   2: 4.990 ±(99.9%) 0.014 us/op
                 runFibonacci·p0.00:   4.784 us/op
                 runFibonacci·p0.50:   4.912 us/op
                 runFibonacci·p0.90:   4.976 us/op
                 runFibonacci·p0.95:   4.992 us/op
                 runFibonacci·p0.99:   5.592 us/op
                 runFibonacci·p0.999:  15.664 us/op
                 runFibonacci·p0.9999: 53.218 us/op
                 runFibonacci·p1.00:   445.440 us/op

Iteration   3: 4.970 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   4.784 us/op
                 runFibonacci·p0.50:   4.912 us/op
                 runFibonacci·p0.90:   4.960 us/op
                 runFibonacci·p0.95:   4.976 us/op
                 runFibonacci·p0.99:   5.224 us/op
                 runFibonacci·p0.999:  14.936 us/op
                 runFibonacci·p0.9999: 43.937 us/op
                 runFibonacci·p1.00:   105.600 us/op

Iteration   4: 4.976 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   4.776 us/op
                 runFibonacci·p0.50:   4.920 us/op
                 runFibonacci·p0.90:   4.976 us/op
                 runFibonacci·p0.95:   5.000 us/op
                 runFibonacci·p0.99:   5.240 us/op
                 runFibonacci·p0.999:  14.656 us/op
                 runFibonacci·p0.9999: 36.761 us/op
                 runFibonacci·p1.00:   103.808 us/op

Iteration   5: 4.968 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   4.776 us/op
                 runFibonacci·p0.50:   4.912 us/op
                 runFibonacci·p0.90:   4.960 us/op
                 runFibonacci·p0.95:   4.976 us/op
                 runFibonacci·p0.99:   5.440 us/op
                 runFibonacci·p0.999:  14.839 us/op
                 runFibonacci·p0.9999: 38.435 us/op
                 runFibonacci·p1.00:   129.536 us/op

Iteration   6: 4.975 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   4.784 us/op
                 runFibonacci·p0.50:   4.912 us/op
                 runFibonacci·p0.90:   4.960 us/op
                 runFibonacci·p0.95:   4.976 us/op
                 runFibonacci·p0.99:   5.416 us/op
                 runFibonacci·p0.999:  15.146 us/op
                 runFibonacci·p0.9999: 45.809 us/op
                 runFibonacci·p1.00:   115.456 us/op

Iteration   7: 4.975 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   4.776 us/op
                 runFibonacci·p0.50:   4.912 us/op
                 runFibonacci·p0.90:   4.968 us/op
                 runFibonacci·p0.95:   4.984 us/op
                 runFibonacci·p0.99:   5.288 us/op
                 runFibonacci·p0.999:  15.194 us/op
                 runFibonacci·p0.9999: 42.722 us/op
                 runFibonacci·p1.00:   173.824 us/op

Iteration   8: 4.980 ±(99.9%) 0.009 us/op
                 runFibonacci·p0.00:   4.768 us/op
                 runFibonacci·p0.50:   4.912 us/op
                 runFibonacci·p0.90:   4.976 us/op
                 runFibonacci·p0.95:   5.000 us/op
                 runFibonacci·p0.99:   5.464 us/op
                 runFibonacci·p0.999:  14.992 us/op
                 runFibonacci·p0.9999: 40.551 us/op
                 runFibonacci·p1.00:   423.424 us/op

Iteration   9: 4.986 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   4.776 us/op
                 runFibonacci·p0.50:   4.920 us/op
                 runFibonacci·p0.90:   4.984 us/op
                 runFibonacci·p0.95:   5.008 us/op
                 runFibonacci·p0.99:   5.411 us/op
                 runFibonacci·p0.999:  15.377 us/op
                 runFibonacci·p0.9999: 42.483 us/op
                 runFibonacci·p1.00:   387.584 us/op

Iteration  10: 4.971 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   4.768 us/op
                 runFibonacci·p0.50:   4.912 us/op
                 runFibonacci·p0.90:   4.960 us/op
                 runFibonacci·p0.95:   4.976 us/op
                 runFibonacci·p0.99:   5.096 us/op
                 runFibonacci·p0.999:  15.209 us/op
                 runFibonacci·p0.9999: 39.536 us/op
                 runFibonacci·p1.00:   98.176 us/op

Iteration  11: 4.992 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   4.776 us/op
                 runFibonacci·p0.50:   4.920 us/op
                 runFibonacci·p0.90:   4.984 us/op
                 runFibonacci·p0.95:   5.016 us/op
                 runFibonacci·p0.99:   5.274 us/op
                 runFibonacci·p0.999:  16.080 us/op
                 runFibonacci·p0.9999: 51.904 us/op
                 runFibonacci·p1.00:   292.352 us/op

Iteration  12: 5.008 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   4.792 us/op
                 runFibonacci·p0.50:   4.944 us/op
                 runFibonacci·p0.90:   5.024 us/op
                 runFibonacci·p0.95:   5.048 us/op
                 runFibonacci·p0.99:   5.160 us/op
                 runFibonacci·p0.999:  15.863 us/op
                 runFibonacci·p0.9999: 45.204 us/op
                 runFibonacci·p1.00:   264.704 us/op

Iteration  13: 5.000 ±(99.9%) 0.038 us/op
                 runFibonacci·p0.00:   4.800 us/op
                 runFibonacci·p0.50:   4.928 us/op
                 runFibonacci·p0.90:   4.984 us/op
                 runFibonacci·p0.95:   5.000 us/op
                 runFibonacci·p0.99:   5.136 us/op
                 runFibonacci·p0.999:  14.976 us/op
                 runFibonacci·p0.9999: 38.889 us/op
                 runFibonacci·p1.00:   2850.816 us/op

Iteration  14: 5.013 ±(99.9%) 0.051 us/op
                 runFibonacci·p0.00:   4.792 us/op
                 runFibonacci·p0.50:   4.928 us/op
                 runFibonacci·p0.90:   4.984 us/op
                 runFibonacci·p0.95:   5.000 us/op
                 runFibonacci·p0.99:   5.152 us/op
                 runFibonacci·p0.999:  15.648 us/op
                 runFibonacci·p0.9999: 38.833 us/op
                 runFibonacci·p1.00:   2760.704 us/op

Iteration  15: 5.013 ±(99.9%) 0.018 us/op
                 runFibonacci·p0.00:   4.800 us/op
                 runFibonacci·p0.50:   4.928 us/op
                 runFibonacci·p0.90:   4.976 us/op
                 runFibonacci·p0.95:   4.992 us/op
                 runFibonacci·p0.99:   5.680 us/op
                 runFibonacci·p0.999:  16.856 us/op
                 runFibonacci·p0.9999: 52.921 us/op
                 runFibonacci·p1.00:   541.696 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 3778416
  mean =      4.986 ±(99.9%) 0.005 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 3778392 
    [ 250.000,  500.000) = 19 
    [ 500.000,  750.000) = 2 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      4.768 us/op
     p(50.0000) =      4.920 us/op
     p(90.0000) =      4.976 us/op
     p(95.0000) =      5.000 us/op
     p(99.0000) =      5.344 us/op
     p(99.9000) =     15.344 us/op
     p(99.9900) =     43.786 us/op
     p(99.9990) =    160.131 us/op
     p(99.9999) =   1012.516 us/op
    p(100.0000) =   2850.816 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 81.88% complete, ETA 01:30:51
# Fork: 1 of 1
# Warmup Iteration   1: 8.883 ±(99.9%) 0.016 us/op
# Warmup Iteration   2: 8.878 ±(99.9%) 0.034 us/op
# Warmup Iteration   3: 8.886 ±(99.9%) 0.009 us/op
# Warmup Iteration   4: 8.925 ±(99.9%) 0.011 us/op
# Warmup Iteration   5: 8.879 ±(99.9%) 0.010 us/op
Iteration   1: 8.891 ±(99.9%) 0.018 us/op
                 runFibonacci·p0.00:   8.512 us/op
                 runFibonacci·p0.50:   8.768 us/op
                 runFibonacci·p0.90:   8.864 us/op
                 runFibonacci·p0.95:   8.896 us/op
                 runFibonacci·p0.99:   12.832 us/op
                 runFibonacci·p0.999:  20.827 us/op
                 runFibonacci·p0.9999: 55.083 us/op
                 runFibonacci·p1.00:   540.672 us/op

Iteration   2: 8.893 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   8.496 us/op
                 runFibonacci·p0.50:   8.800 us/op
                 runFibonacci·p0.90:   8.912 us/op
                 runFibonacci·p0.95:   8.960 us/op
                 runFibonacci·p0.99:   12.768 us/op
                 runFibonacci·p0.999:  20.256 us/op
                 runFibonacci·p0.9999: 40.693 us/op
                 runFibonacci·p1.00:   192.512 us/op

Iteration   3: 8.883 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   8.512 us/op
                 runFibonacci·p0.50:   8.784 us/op
                 runFibonacci·p0.90:   8.896 us/op
                 runFibonacci·p0.95:   8.944 us/op
                 runFibonacci·p0.99:   12.557 us/op
                 runFibonacci·p0.999:  20.032 us/op
                 runFibonacci·p0.9999: 45.113 us/op
                 runFibonacci·p1.00:   115.840 us/op

Iteration   4: 8.865 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   8.496 us/op
                 runFibonacci·p0.50:   8.768 us/op
                 runFibonacci·p0.90:   8.864 us/op
                 runFibonacci·p0.95:   8.896 us/op
                 runFibonacci·p0.99:   12.592 us/op
                 runFibonacci·p0.999:  20.352 us/op
                 runFibonacci·p0.9999: 44.586 us/op
                 runFibonacci·p1.00:   128.000 us/op

Iteration   5: 8.871 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   8.480 us/op
                 runFibonacci·p0.50:   8.768 us/op
                 runFibonacci·p0.90:   8.864 us/op
                 runFibonacci·p0.95:   8.896 us/op
                 runFibonacci·p0.99:   12.656 us/op
                 runFibonacci·p0.999:  20.224 us/op
                 runFibonacci·p0.9999: 42.735 us/op
                 runFibonacci·p1.00:   145.664 us/op

Iteration   6: 8.864 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   8.496 us/op
                 runFibonacci·p0.50:   8.768 us/op
                 runFibonacci·p0.90:   8.864 us/op
                 runFibonacci·p0.95:   8.880 us/op
                 runFibonacci·p0.99:   12.576 us/op
                 runFibonacci·p0.999:  20.233 us/op
                 runFibonacci·p0.9999: 46.729 us/op
                 runFibonacci·p1.00:   118.784 us/op

Iteration   7: 8.877 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   8.464 us/op
                 runFibonacci·p0.50:   8.784 us/op
                 runFibonacci·p0.90:   8.880 us/op
                 runFibonacci·p0.95:   8.912 us/op
                 runFibonacci·p0.99:   12.784 us/op
                 runFibonacci·p0.999:  20.416 us/op
                 runFibonacci·p0.9999: 45.007 us/op
                 runFibonacci·p1.00:   129.664 us/op

Iteration   8: 8.869 ±(99.9%) 0.014 us/op
                 runFibonacci·p0.00:   8.496 us/op
                 runFibonacci·p0.50:   8.768 us/op
                 runFibonacci·p0.90:   8.864 us/op
                 runFibonacci·p0.95:   8.880 us/op
                 runFibonacci·p0.99:   12.496 us/op
                 runFibonacci·p0.999:  20.224 us/op
                 runFibonacci·p0.9999: 50.217 us/op
                 runFibonacci·p1.00:   538.624 us/op

Iteration   9: 8.877 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   8.464 us/op
                 runFibonacci·p0.50:   8.768 us/op
                 runFibonacci·p0.90:   8.864 us/op
                 runFibonacci·p0.95:   8.896 us/op
                 runFibonacci·p0.99:   12.832 us/op
                 runFibonacci·p0.999:  20.960 us/op
                 runFibonacci·p0.9999: 51.630 us/op
                 runFibonacci·p1.00:   186.112 us/op

Iteration  10: 8.885 ±(99.9%) 0.020 us/op
                 runFibonacci·p0.00:   8.512 us/op
                 runFibonacci·p0.50:   8.768 us/op
                 runFibonacci·p0.90:   8.864 us/op
                 runFibonacci·p0.95:   8.912 us/op
                 runFibonacci·p0.99:   12.736 us/op
                 runFibonacci·p0.999:  20.768 us/op
                 runFibonacci·p0.9999: 52.255 us/op
                 runFibonacci·p1.00:   1458.176 us/op

Iteration  11: 8.863 ±(99.9%) 0.009 us/op
                 runFibonacci·p0.00:   8.480 us/op
                 runFibonacci·p0.50:   8.768 us/op
                 runFibonacci·p0.90:   8.864 us/op
                 runFibonacci·p0.95:   8.880 us/op
                 runFibonacci·p0.99:   12.496 us/op
                 runFibonacci·p0.999:  19.434 us/op
                 runFibonacci·p0.9999: 42.464 us/op
                 runFibonacci·p1.00:   272.384 us/op

Iteration  12: 8.895 ±(99.9%) 0.035 us/op
                 runFibonacci·p0.00:   8.480 us/op
                 runFibonacci·p0.50:   8.784 us/op
                 runFibonacci·p0.90:   8.880 us/op
                 runFibonacci·p0.95:   8.928 us/op
                 runFibonacci·p0.99:   12.624 us/op
                 runFibonacci·p0.999:  20.257 us/op
                 runFibonacci·p0.9999: 52.569 us/op
                 runFibonacci·p1.00:   2748.416 us/op

Iteration  13: 8.890 ±(99.9%) 0.009 us/op
                 runFibonacci·p0.00:   8.480 us/op
                 runFibonacci·p0.50:   8.784 us/op
                 runFibonacci·p0.90:   8.880 us/op
                 runFibonacci·p0.95:   8.928 us/op
                 runFibonacci·p0.99:   12.864 us/op
                 runFibonacci·p0.999:  21.440 us/op
                 runFibonacci·p0.9999: 57.829 us/op
                 runFibonacci·p1.00:   301.056 us/op

Iteration  14: 8.888 ±(99.9%) 0.011 us/op
                 runFibonacci·p0.00:   8.528 us/op
                 runFibonacci·p0.50:   8.784 us/op
                 runFibonacci·p0.90:   8.864 us/op
                 runFibonacci·p0.95:   8.896 us/op
                 runFibonacci·p0.99:   12.704 us/op
                 runFibonacci·p0.999:  22.521 us/op
                 runFibonacci·p0.9999: 57.497 us/op
                 runFibonacci·p1.00:   502.272 us/op

Iteration  15: 8.930 ±(99.9%) 0.016 us/op
                 runFibonacci·p0.00:   8.496 us/op
                 runFibonacci·p0.50:   8.816 us/op
                 runFibonacci·p0.90:   8.944 us/op
                 runFibonacci·p0.95:   8.976 us/op
                 runFibonacci·p0.99:   12.768 us/op
                 runFibonacci·p0.999:  20.997 us/op
                 runFibonacci·p0.9999: 53.574 us/op
                 runFibonacci·p1.00:   556.032 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 4218294
  mean =      8.883 ±(99.9%) 0.004 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 4218260 
    [ 250.000,  500.000) = 23 
    [ 500.000,  750.000) = 8 
    [ 750.000, 1000.000) = 1 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 1 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      8.464 us/op
     p(50.0000) =      8.784 us/op
     p(90.0000) =      8.880 us/op
     p(95.0000) =      8.912 us/op
     p(99.0000) =     12.688 us/op
     p(99.9000) =     20.512 us/op
     p(99.9900) =     49.803 us/op
     p(99.9990) =    221.696 us/op
     p(99.9999) =    552.679 us/op
    p(100.0000) =   2748.416 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 82.61% complete, ETA 01:27:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.117 ±(99.9%) 0.004 us/op
# Warmup Iteration   2: 0.112 ±(99.9%) 0.002 us/op
# Warmup Iteration   3: 0.109 ±(99.9%) 0.001 us/op
# Warmup Iteration   4: 0.110 ±(99.9%) 0.001 us/op
# Warmup Iteration   5: 0.110 ±(99.9%) 0.002 us/op
Iteration   1: 0.110 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.096 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.102 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.115 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.118 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.125 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.287 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.462 us/op
                 findLastPrefixUsingScanner1·p1.00:   76.416 us/op

Iteration   2: 0.109 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.097 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.122 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.451 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.396 us/op
                 findLastPrefixUsingScanner1·p1.00:   32.832 us/op

Iteration   3: 0.109 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.097 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.122 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.334 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.058 us/op
                 findLastPrefixUsingScanner1·p1.00:   39.104 us/op

Iteration   4: 0.110 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.097 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.116 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.123 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.328 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.000 us/op
                 findLastPrefixUsingScanner1·p1.00:   35.456 us/op

Iteration   5: 0.111 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.097 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.114 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.120 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.123 us/op
                 findLastPrefixUsingScanner1·p0.999:  2.646 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.900 us/op
                 findLastPrefixUsingScanner1·p1.00:   39.744 us/op

Iteration   6: 0.110 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.098 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.112 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.115 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.123 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.307 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.888 us/op
                 findLastPrefixUsingScanner1·p1.00:   41.920 us/op

Iteration   7: 0.113 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.098 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.115 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.121 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.129 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.342 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.891 us/op
                 findLastPrefixUsingScanner1·p1.00:   372.736 us/op

Iteration   8: 0.112 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.097 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.115 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.123 us/op
                 findLastPrefixUsingScanner1·p0.999:  2.823 us/op
                 findLastPrefixUsingScanner1·p0.9999: 10.404 us/op
                 findLastPrefixUsingScanner1·p1.00:   127.104 us/op

Iteration   9: 0.109 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.097 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.114 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.123 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.309 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.503 us/op
                 findLastPrefixUsingScanner1·p1.00:   39.680 us/op

Iteration  10: 0.110 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.097 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.107 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.122 us/op
                 findLastPrefixUsingScanner1·p0.999:  2.919 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.235 us/op
                 findLastPrefixUsingScanner1·p1.00:   86.272 us/op

Iteration  11: 0.111 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.097 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.116 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.123 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.468 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.620 us/op
                 findLastPrefixUsingScanner1·p1.00:   49.792 us/op

Iteration  12: 0.111 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.098 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.116 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.123 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.462 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.788 us/op
                 findLastPrefixUsingScanner1·p1.00:   107.136 us/op

Iteration  13: 0.111 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.097 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.119 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.135 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.359 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.073 us/op
                 findLastPrefixUsingScanner1·p1.00:   193.024 us/op

Iteration  14: 0.112 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.097 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.123 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.491 us/op
                 findLastPrefixUsingScanner1·p0.9999: 10.415 us/op
                 findLastPrefixUsingScanner1·p1.00:   48.576 us/op

Iteration  15: 0.111 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.097 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.115 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.123 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.383 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.063 us/op
                 findLastPrefixUsingScanner1·p1.00:   134.656 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 3722561
  mean =      0.111 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 3722502 
    [ 25.000,  50.000) = 49 
    [ 50.000,  75.000) = 2 
    [ 75.000, 100.000) = 3 
    [100.000, 125.000) = 1 
    [125.000, 150.000) = 2 
    [150.000, 175.000) = 0 
    [175.000, 200.000) = 1 
    [200.000, 225.000) = 0 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 0 
    [275.000, 300.000) = 0 
    [300.000, 325.000) = 0 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      0.096 us/op
     p(50.0000) =      0.103 us/op
     p(90.0000) =      0.113 us/op
     p(95.0000) =      0.116 us/op
     p(99.0000) =      0.123 us/op
     p(99.9000) =      0.425 us/op
     p(99.9900) =      8.880 us/op
     p(99.9990) =     32.702 us/op
     p(99.9999) =    129.199 us/op
    p(100.0000) =    372.736 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 83.33% complete, ETA 01:23:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.715 ±(99.9%) 0.006 us/op
# Warmup Iteration   2: 0.746 ±(99.9%) 0.005 us/op
# Warmup Iteration   3: 0.698 ±(99.9%) 0.006 us/op
# Warmup Iteration   4: 0.705 ±(99.9%) 0.003 us/op
# Warmup Iteration   5: 0.695 ±(99.9%) 0.004 us/op
Iteration   1: 0.699 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.667 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.681 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.682 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.683 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.695 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.533 us/op
                 findLastPrefixUsingScanner1·p0.9999: 18.851 us/op
                 findLastPrefixUsingScanner1·p1.00:   81.024 us/op

Iteration   2: 0.698 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.664 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.679 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.681 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.682 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.694 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.615 us/op
                 findLastPrefixUsingScanner1·p0.9999: 23.040 us/op
                 findLastPrefixUsingScanner1·p1.00:   171.008 us/op

Iteration   3: 0.716 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.663 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.697 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.700 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.701 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.709 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.450 us/op
                 findLastPrefixUsingScanner1·p0.9999: 21.973 us/op
                 findLastPrefixUsingScanner1·p1.00:   141.312 us/op

Iteration   4: 0.709 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.675 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.690 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.692 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.693 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.704 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.704 us/op
                 findLastPrefixUsingScanner1·p0.9999: 23.700 us/op
                 findLastPrefixUsingScanner1·p1.00:   229.376 us/op

Iteration   5: 0.706 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.674 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.687 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.689 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.690 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.697 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.629 us/op
                 findLastPrefixUsingScanner1·p0.9999: 26.623 us/op
                 findLastPrefixUsingScanner1·p1.00:   91.648 us/op

Iteration   6: 0.702 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.665 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.679 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.692 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.693 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.698 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.791 us/op
                 findLastPrefixUsingScanner1·p0.9999: 33.240 us/op
                 findLastPrefixUsingScanner1·p1.00:   68.480 us/op

Iteration   7: 0.706 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.663 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.686 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.688 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.689 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.698 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.941 us/op
                 findLastPrefixUsingScanner1·p0.9999: 25.675 us/op
                 findLastPrefixUsingScanner1·p1.00:   124.416 us/op

Iteration   8: 0.698 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.665 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.678 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.680 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.681 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.689 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.152 us/op
                 findLastPrefixUsingScanner1·p0.9999: 31.678 us/op
                 findLastPrefixUsingScanner1·p1.00:   61.760 us/op

Iteration   9: 0.711 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.665 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.690 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.694 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.696 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.715 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.980 us/op
                 findLastPrefixUsingScanner1·p0.9999: 27.266 us/op
                 findLastPrefixUsingScanner1·p1.00:   85.120 us/op

Iteration  10: 0.697 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.666 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.680 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.681 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.682 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.689 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.044 us/op
                 findLastPrefixUsingScanner1·p0.9999: 22.007 us/op
                 findLastPrefixUsingScanner1·p1.00:   117.760 us/op

Iteration  11: 0.697 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.668 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.680 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.683 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.684 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.693 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.918 us/op
                 findLastPrefixUsingScanner1·p0.9999: 19.153 us/op
                 findLastPrefixUsingScanner1·p1.00:   87.936 us/op

Iteration  12: 0.700 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.670 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.682 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.683 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.684 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.701 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.873 us/op
                 findLastPrefixUsingScanner1·p0.9999: 26.319 us/op
                 findLastPrefixUsingScanner1·p1.00:   156.928 us/op

Iteration  13: 0.700 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.670 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.682 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.683 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.684 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.701 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.052 us/op
                 findLastPrefixUsingScanner1·p0.9999: 20.592 us/op
                 findLastPrefixUsingScanner1·p1.00:   105.984 us/op

Iteration  14: 0.700 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.670 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.682 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.683 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.684 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.693 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.705 us/op
                 findLastPrefixUsingScanner1·p0.9999: 20.835 us/op
                 findLastPrefixUsingScanner1·p1.00:   190.720 us/op

Iteration  15: 0.715 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.663 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.698 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.701 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.703 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.712 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.842 us/op
                 findLastPrefixUsingScanner1·p0.9999: 19.719 us/op
                 findLastPrefixUsingScanner1·p1.00:   167.936 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 3554409
  mean =      0.704 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 3554086 
    [ 25.000,  50.000) = 278 
    [ 50.000,  75.000) = 23 
    [ 75.000, 100.000) = 9 
    [100.000, 125.000) = 5 
    [125.000, 150.000) = 2 
    [150.000, 175.000) = 4 
    [175.000, 200.000) = 1 
    [200.000, 225.000) = 0 
    [225.000, 250.000) = 1 
    [250.000, 275.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.663 us/op
     p(50.0000) =      0.682 us/op
     p(90.0000) =      0.697 us/op
     p(95.0000) =      0.699 us/op
     p(99.0000) =      0.705 us/op
     p(99.9000) =      6.504 us/op
     p(99.9900) =     23.026 us/op
     p(99.9990) =     54.617 us/op
     p(99.9999) =    169.305 us/op
    p(100.0000) =    229.376 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 84.06% complete, ETA 01:19:55
# Fork: 1 of 1
# Warmup Iteration   1: 6.400 ±(99.9%) 0.021 us/op
# Warmup Iteration   2: 7.093 ±(99.9%) 0.013 us/op
# Warmup Iteration   3: 7.448 ±(99.9%) 0.007 us/op
# Warmup Iteration   4: 7.430 ±(99.9%) 0.007 us/op
# Warmup Iteration   5: 7.469 ±(99.9%) 0.014 us/op
Iteration   1: 7.409 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.272 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.328 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.344 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.352 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.640 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.440 us/op
                 findLastPrefixUsingScanner1·p0.9999: 52.993 us/op
                 findLastPrefixUsingScanner1·p1.00:   229.376 us/op

Iteration   2: 7.557 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.400 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.472 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.504 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.520 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.800 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.048 us/op
                 findLastPrefixUsingScanner1·p0.9999: 55.483 us/op
                 findLastPrefixUsingScanner1·p1.00:   132.096 us/op

Iteration   3: 7.495 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.336 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.408 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.440 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.464 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.624 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.080 us/op
                 findLastPrefixUsingScanner1·p0.9999: 55.865 us/op
                 findLastPrefixUsingScanner1·p1.00:   189.696 us/op

Iteration   4: 7.425 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.280 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.344 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.368 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.384 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.544 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.189 us/op
                 findLastPrefixUsingScanner1·p0.9999: 51.629 us/op
                 findLastPrefixUsingScanner1·p1.00:   149.248 us/op

Iteration   5: 7.408 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.272 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.336 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.360 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.376 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.496 us/op
                 findLastPrefixUsingScanner1·p0.999:  16.726 us/op
                 findLastPrefixUsingScanner1·p0.9999: 48.184 us/op
                 findLastPrefixUsingScanner1·p1.00:   150.272 us/op

Iteration   6: 7.341 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.216 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.264 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.280 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.288 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.512 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.568 us/op
                 findLastPrefixUsingScanner1·p0.9999: 54.264 us/op
                 findLastPrefixUsingScanner1·p1.00:   155.136 us/op

Iteration   7: 7.382 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.248 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.304 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.320 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.336 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.528 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.967 us/op
                 findLastPrefixUsingScanner1·p0.9999: 50.685 us/op
                 findLastPrefixUsingScanner1·p1.00:   400.384 us/op

Iteration   8: 7.528 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.376 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.448 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.472 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.488 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.688 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.624 us/op
                 findLastPrefixUsingScanner1·p0.9999: 51.069 us/op
                 findLastPrefixUsingScanner1·p1.00:   169.984 us/op

Iteration   9: 7.341 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.208 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.264 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.280 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.288 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.480 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.496 us/op
                 findLastPrefixUsingScanner1·p0.9999: 55.126 us/op
                 findLastPrefixUsingScanner1·p1.00:   156.928 us/op

Iteration  10: 7.499 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.328 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.416 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.456 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.472 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.666 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.389 us/op
                 findLastPrefixUsingScanner1·p0.9999: 56.298 us/op
                 findLastPrefixUsingScanner1·p1.00:   174.080 us/op

Iteration  11: 7.401 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.272 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.320 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.344 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.352 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.528 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.889 us/op
                 findLastPrefixUsingScanner1·p0.9999: 54.119 us/op
                 findLastPrefixUsingScanner1·p1.00:   298.496 us/op

Iteration  12: 7.435 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.304 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.360 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.376 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.384 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.544 us/op
                 findLastPrefixUsingScanner1·p0.999:  16.576 us/op
                 findLastPrefixUsingScanner1·p0.9999: 50.352 us/op
                 findLastPrefixUsingScanner1·p1.00:   1560.576 us/op

Iteration  13: 7.555 ±(99.9%) 0.012 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.384 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.472 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.504 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.520 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.704 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.165 us/op
                 findLastPrefixUsingScanner1·p0.9999: 53.184 us/op
                 findLastPrefixUsingScanner1·p1.00:   558.080 us/op

Iteration  14: 7.471 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.328 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.392 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.424 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.440 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.576 us/op
                 findLastPrefixUsingScanner1·p0.999:  16.928 us/op
                 findLastPrefixUsingScanner1·p0.9999: 48.984 us/op
                 findLastPrefixUsingScanner1·p1.00:   282.624 us/op

Iteration  15: 7.350 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.224 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.264 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.288 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.296 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.496 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.496 us/op
                 findLastPrefixUsingScanner1·p0.9999: 55.470 us/op
                 findLastPrefixUsingScanner1·p1.00:   256.256 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 5041199
  mean =      7.439 ±(99.9%) 0.002 us/op

  Histogram, us/op:
    [   0.000,  125.000) = 5041112 
    [ 125.000,  250.000) = 77 
    [ 250.000,  375.000) = 4 
    [ 375.000,  500.000) = 3 
    [ 500.000,  625.000) = 2 
    [ 625.000,  750.000) = 0 
    [ 750.000,  875.000) = 0 
    [ 875.000, 1000.000) = 0 
    [1000.000, 1125.000) = 0 
    [1125.000, 1250.000) = 0 
    [1250.000, 1375.000) = 0 
    [1375.000, 1500.000) = 0 
    [1500.000, 1625.000) = 1 
    [1625.000, 1750.000) = 0 
    [1750.000, 1875.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      7.208 us/op
     p(50.0000) =      7.352 us/op
     p(90.0000) =      7.472 us/op
     p(95.0000) =      7.488 us/op
     p(99.0000) =     10.576 us/op
     p(99.9000) =     17.760 us/op
     p(99.9900) =     52.800 us/op
     p(99.9990) =    139.972 us/op
     p(99.9999) =    411.675 us/op
    p(100.0000) =   1560.576 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 84.78% complete, ETA 01:16:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.116 ±(99.9%) 0.003 us/op
# Warmup Iteration   2: 0.108 ±(99.9%) 0.002 us/op
# Warmup Iteration   3: 0.115 ±(99.9%) 0.002 us/op
# Warmup Iteration   4: 0.114 ±(99.9%) 0.001 us/op
# Warmup Iteration   5: 0.117 ±(99.9%) 0.002 us/op
Iteration   1: 0.114 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.118 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.120 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.124 us/op
                 findLastPrefixUsingScanner2·p0.999:  2.439 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.981 us/op
                 findLastPrefixUsingScanner2·p1.00:   46.656 us/op

Iteration   2: 0.115 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.098 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.120 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.122 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.132 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.553 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.622 us/op
                 findLastPrefixUsingScanner2·p1.00:   54.912 us/op

Iteration   3: 0.116 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.120 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.121 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.132 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.623 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.962 us/op
                 findLastPrefixUsingScanner2·p1.00:   36.416 us/op

Iteration   4: 0.116 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.119 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.121 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.124 us/op
                 findLastPrefixUsingScanner2·p0.999:  2.794 us/op
                 findLastPrefixUsingScanner2·p0.9999: 9.213 us/op
                 findLastPrefixUsingScanner2·p1.00:   42.560 us/op

Iteration   5: 0.115 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.119 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.120 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.123 us/op
                 findLastPrefixUsingScanner2·p0.999:  1.963 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.602 us/op
                 findLastPrefixUsingScanner2·p1.00:   48.832 us/op

Iteration   6: 0.113 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.119 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.120 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.130 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.242 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.648 us/op
                 findLastPrefixUsingScanner2·p1.00:   41.664 us/op

Iteration   7: 0.116 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.099 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.111 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.121 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.123 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.130 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.489 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.469 us/op
                 findLastPrefixUsingScanner2·p1.00:   310.784 us/op

Iteration   8: 0.115 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.119 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.120 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.130 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.349 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.096 us/op
                 findLastPrefixUsingScanner2·p1.00:   39.680 us/op

Iteration   9: 0.114 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.119 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.120 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.122 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.262 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.700 us/op
                 findLastPrefixUsingScanner2·p1.00:   41.664 us/op

Iteration  10: 0.116 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.119 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.120 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.126 us/op
                 findLastPrefixUsingScanner2·p0.999:  2.440 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.209 us/op
                 findLastPrefixUsingScanner2·p1.00:   216.576 us/op

Iteration  11: 0.118 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.099 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.111 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.122 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.125 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.134 us/op
                 findLastPrefixUsingScanner2·p0.999:  3.096 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.453 us/op
                 findLastPrefixUsingScanner2·p1.00:   46.080 us/op

Iteration  12: 0.115 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.118 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.119 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.127 us/op
                 findLastPrefixUsingScanner2·p0.999:  2.632 us/op
                 findLastPrefixUsingScanner2·p0.9999: 9.045 us/op
                 findLastPrefixUsingScanner2·p1.00:   72.448 us/op

Iteration  13: 0.113 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.108 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.118 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.119 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.129 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.294 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.062 us/op
                 findLastPrefixUsingScanner2·p1.00:   37.440 us/op

Iteration  14: 0.117 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.098 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.120 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.124 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.133 us/op
                 findLastPrefixUsingScanner2·p0.999:  1.295 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.727 us/op
                 findLastPrefixUsingScanner2·p1.00:   160.768 us/op

Iteration  15: 0.114 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.118 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.119 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.125 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.467 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.950 us/op
                 findLastPrefixUsingScanner2·p1.00:   52.416 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 3716291
  mean =      0.115 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 3716243 
    [ 25.000,  50.000) = 42 
    [ 50.000,  75.000) = 3 
    [ 75.000, 100.000) = 0 
    [100.000, 125.000) = 0 
    [125.000, 150.000) = 0 
    [150.000, 175.000) = 1 
    [175.000, 200.000) = 0 
    [200.000, 225.000) = 1 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 0 
    [275.000, 300.000) = 0 
    [300.000, 325.000) = 1 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.096 us/op
     p(50.0000) =      0.109 us/op
     p(90.0000) =      0.119 us/op
     p(95.0000) =      0.121 us/op
     p(99.0000) =      0.130 us/op
     p(99.9000) =      0.461 us/op
     p(99.9900) =      8.416 us/op
     p(99.9990) =     28.096 us/op
     p(99.9999) =     97.505 us/op
    p(100.0000) =    310.784 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 85.50% complete, ETA 01:12:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.702 ±(99.9%) 0.006 us/op
# Warmup Iteration   2: 0.736 ±(99.9%) 0.004 us/op
# Warmup Iteration   3: 0.708 ±(99.9%) 0.005 us/op
# Warmup Iteration   4: 0.694 ±(99.9%) 0.007 us/op
# Warmup Iteration   5: 0.697 ±(99.9%) 0.007 us/op
Iteration   1: 0.698 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.672 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.683 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.684 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.685 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.694 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.271 us/op
                 findLastPrefixUsingScanner2·p0.9999: 14.341 us/op
                 findLastPrefixUsingScanner2·p1.00:   44.608 us/op

Iteration   2: 0.699 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.670 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.682 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.690 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.691 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.696 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.687 us/op
                 findLastPrefixUsingScanner2·p0.9999: 14.539 us/op
                 findLastPrefixUsingScanner2·p1.00:   55.424 us/op

Iteration   3: 0.694 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.664 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.675 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.676 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.677 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.688 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.095 us/op
                 findLastPrefixUsingScanner2·p0.9999: 23.404 us/op
                 findLastPrefixUsingScanner2·p1.00:   224.000 us/op

Iteration   4: 0.700 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.670 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.681 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.690 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.691 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.695 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.355 us/op
                 findLastPrefixUsingScanner2·p0.9999: 19.212 us/op
                 findLastPrefixUsingScanner2·p1.00:   57.600 us/op

Iteration   5: 0.692 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.663 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.675 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.676 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.677 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.686 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.148 us/op
                 findLastPrefixUsingScanner2·p0.9999: 18.512 us/op
                 findLastPrefixUsingScanner2·p1.00:   63.104 us/op

Iteration   6: 0.706 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.663 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.688 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.691 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.692 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.698 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.872 us/op
                 findLastPrefixUsingScanner2·p0.9999: 14.754 us/op
                 findLastPrefixUsingScanner2·p1.00:   411.648 us/op

Iteration   7: 0.692 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.663 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.676 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.678 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.679 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.686 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.851 us/op
                 findLastPrefixUsingScanner2·p0.9999: 16.321 us/op
                 findLastPrefixUsingScanner2·p1.00:   96.896 us/op

Iteration   8: 0.699 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.672 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.683 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.684 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.685 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.694 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.475 us/op
                 findLastPrefixUsingScanner2·p0.9999: 17.271 us/op
                 findLastPrefixUsingScanner2·p1.00:   120.064 us/op

Iteration   9: 0.688 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.662 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.674 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.676 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.676 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.684 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.426 us/op
                 findLastPrefixUsingScanner2·p0.9999: 11.772 us/op
                 findLastPrefixUsingScanner2·p1.00:   41.920 us/op

Iteration  10: 0.688 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.661 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.673 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.675 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.675 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.684 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.588 us/op
                 findLastPrefixUsingScanner2·p0.9999: 13.346 us/op
                 findLastPrefixUsingScanner2·p1.00:   38.272 us/op

Iteration  11: 0.700 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.670 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.681 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.690 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.691 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.700 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.430 us/op
                 findLastPrefixUsingScanner2·p0.9999: 19.192 us/op
                 findLastPrefixUsingScanner2·p1.00:   92.928 us/op

Iteration  12: 0.690 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.661 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.674 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.676 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.676 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.686 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.989 us/op
                 findLastPrefixUsingScanner2·p0.9999: 13.442 us/op
                 findLastPrefixUsingScanner2·p1.00:   73.984 us/op

Iteration  13: 0.694 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.661 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.673 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.675 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.675 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.685 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.327 us/op
                 findLastPrefixUsingScanner2·p0.9999: 25.865 us/op
                 findLastPrefixUsingScanner2·p1.00:   401.920 us/op

Iteration  14: 0.693 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.662 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.674 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.682 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.683 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.691 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.019 us/op
                 findLastPrefixUsingScanner2·p0.9999: 21.685 us/op
                 findLastPrefixUsingScanner2·p1.00:   89.856 us/op

Iteration  15: 0.689 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.662 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.674 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.676 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.676 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.684 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.727 us/op
                 findLastPrefixUsingScanner2·p0.9999: 12.834 us/op
                 findLastPrefixUsingScanner2·p1.00:   59.712 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 3570595
  mean =      0.695 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 3570568 
    [ 50.000, 100.000) = 21 
    [100.000, 150.000) = 2 
    [150.000, 200.000) = 0 
    [200.000, 250.000) = 1 
    [250.000, 300.000) = 0 
    [300.000, 350.000) = 0 
    [350.000, 400.000) = 1 
    [400.000, 450.000) = 2 

  Percentiles, us/op:
      p(0.0000) =      0.661 us/op
     p(50.0000) =      0.676 us/op
     p(90.0000) =      0.686 us/op
     p(95.0000) =      0.690 us/op
     p(99.0000) =      0.694 us/op
     p(99.9000) =      5.968 us/op
     p(99.9900) =     17.374 us/op
     p(99.9990) =     43.768 us/op
     p(99.9999) =    292.705 us/op
    p(100.0000) =    411.648 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 86.23% complete, ETA 01:09:01
# Fork: 1 of 1
# Warmup Iteration   1: 6.510 ±(99.9%) 0.051 us/op
# Warmup Iteration   2: 6.707 ±(99.9%) 0.011 us/op
# Warmup Iteration   3: 7.419 ±(99.9%) 0.007 us/op
# Warmup Iteration   4: 7.335 ±(99.9%) 0.010 us/op
# Warmup Iteration   5: 7.384 ±(99.9%) 0.007 us/op
Iteration   1: 7.398 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner2·p0.00:   7.256 us/op
                 findLastPrefixUsingScanner2·p0.50:   7.312 us/op
                 findLastPrefixUsingScanner2·p0.90:   7.336 us/op
                 findLastPrefixUsingScanner2·p0.95:   7.344 us/op
                 findLastPrefixUsingScanner2·p0.99:   10.592 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.592 us/op
                 findLastPrefixUsingScanner2·p0.9999: 52.621 us/op
                 findLastPrefixUsingScanner2·p1.00:   144.640 us/op

Iteration   2: 7.326 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner2·p0.00:   7.200 us/op
                 findLastPrefixUsingScanner2·p0.50:   7.248 us/op
                 findLastPrefixUsingScanner2·p0.90:   7.264 us/op
                 findLastPrefixUsingScanner2·p0.95:   7.272 us/op
                 findLastPrefixUsingScanner2·p0.99:   10.480 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.654 us/op
                 findLastPrefixUsingScanner2·p0.9999: 49.213 us/op
                 findLastPrefixUsingScanner2·p1.00:   375.296 us/op

Iteration   3: 7.349 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner2·p0.00:   7.232 us/op
                 findLastPrefixUsingScanner2·p0.50:   7.280 us/op
                 findLastPrefixUsingScanner2·p0.90:   7.304 us/op
                 findLastPrefixUsingScanner2·p0.95:   7.304 us/op
                 findLastPrefixUsingScanner2·p0.99:   10.400 us/op
                 findLastPrefixUsingScanner2·p0.999:  16.205 us/op
                 findLastPrefixUsingScanner2·p0.9999: 44.722 us/op
                 findLastPrefixUsingScanner2·p1.00:   236.800 us/op

Iteration   4: 7.458 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   7.296 us/op
                 findLastPrefixUsingScanner2·p0.50:   7.392 us/op
                 findLastPrefixUsingScanner2·p0.90:   7.424 us/op
                 findLastPrefixUsingScanner2·p0.95:   7.440 us/op
                 findLastPrefixUsingScanner2·p0.99:   10.512 us/op
                 findLastPrefixUsingScanner2·p0.999:  16.038 us/op
                 findLastPrefixUsingScanner2·p0.9999: 38.818 us/op
                 findLastPrefixUsingScanner2·p1.00:   157.184 us/op

Iteration   5: 7.365 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner2·p0.00:   7.240 us/op
                 findLastPrefixUsingScanner2·p0.50:   7.296 us/op
                 findLastPrefixUsingScanner2·p0.90:   7.320 us/op
                 findLastPrefixUsingScanner2·p0.95:   7.328 us/op
                 findLastPrefixUsingScanner2·p0.99:   10.368 us/op
                 findLastPrefixUsingScanner2·p0.999:  16.016 us/op
                 findLastPrefixUsingScanner2·p0.9999: 42.160 us/op
                 findLastPrefixUsingScanner2·p1.00:   533.504 us/op

Iteration   6: 7.428 ±(99.9%) 0.012 us/op
                 findLastPrefixUsingScanner2·p0.00:   7.304 us/op
                 findLastPrefixUsingScanner2·p0.50:   7.352 us/op
                 findLastPrefixUsingScanner2·p0.90:   7.376 us/op
                 findLastPrefixUsingScanner2·p0.95:   7.384 us/op
                 findLastPrefixUsingScanner2·p0.99:   10.432 us/op
                 findLastPrefixUsingScanner2·p0.999:  16.032 us/op
                 findLastPrefixUsingScanner2·p0.9999: 43.541 us/op
                 findLastPrefixUsingScanner2·p1.00:   540.672 us/op

Iteration   7: 7.338 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   7.224 us/op
                 findLastPrefixUsingScanner2·p0.50:   7.272 us/op
                 findLastPrefixUsingScanner2·p0.90:   7.288 us/op
                 findLastPrefixUsingScanner2·p0.95:   7.296 us/op
                 findLastPrefixUsingScanner2·p0.99:   10.384 us/op
                 findLastPrefixUsingScanner2·p0.999:  16.073 us/op
                 findLastPrefixUsingScanner2·p0.9999: 39.482 us/op
                 findLastPrefixUsingScanner2·p1.00:   131.072 us/op

Iteration   8: 7.385 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   7.256 us/op
                 findLastPrefixUsingScanner2·p0.50:   7.320 us/op
                 findLastPrefixUsingScanner2·p0.90:   7.352 us/op
                 findLastPrefixUsingScanner2·p0.95:   7.360 us/op
                 findLastPrefixUsingScanner2·p0.99:   10.432 us/op
                 findLastPrefixUsingScanner2·p0.999:  16.064 us/op
                 findLastPrefixUsingScanner2·p0.9999: 38.123 us/op
                 findLastPrefixUsingScanner2·p1.00:   126.080 us/op

Iteration   9: 7.402 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   7.272 us/op
                 findLastPrefixUsingScanner2·p0.50:   7.328 us/op
                 findLastPrefixUsingScanner2·p0.90:   7.360 us/op
                 findLastPrefixUsingScanner2·p0.95:   7.368 us/op
                 findLastPrefixUsingScanner2·p0.99:   10.480 us/op
                 findLastPrefixUsingScanner2·p0.999:  16.256 us/op
                 findLastPrefixUsingScanner2·p0.9999: 40.862 us/op
                 findLastPrefixUsingScanner2·p1.00:   151.552 us/op

Iteration  10: 7.334 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   7.216 us/op
                 findLastPrefixUsingScanner2·p0.50:   7.264 us/op
                 findLastPrefixUsingScanner2·p0.90:   7.288 us/op
                 findLastPrefixUsingScanner2·p0.95:   7.296 us/op
                 findLastPrefixUsingScanner2·p0.99:   10.416 us/op
                 findLastPrefixUsingScanner2·p0.999:  16.048 us/op
                 findLastPrefixUsingScanner2·p0.9999: 40.092 us/op
                 findLastPrefixUsingScanner2·p1.00:   129.664 us/op

Iteration  11: 7.367 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner2·p0.00:   7.240 us/op
                 findLastPrefixUsingScanner2·p0.50:   7.296 us/op
                 findLastPrefixUsingScanner2·p0.90:   7.312 us/op
                 findLastPrefixUsingScanner2·p0.95:   7.320 us/op
                 findLastPrefixUsingScanner2·p0.99:   10.432 us/op
                 findLastPrefixUsingScanner2·p0.999:  16.736 us/op
                 findLastPrefixUsingScanner2·p0.9999: 46.936 us/op
                 findLastPrefixUsingScanner2·p1.00:   262.144 us/op

Iteration  12: 7.352 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner2·p0.00:   7.224 us/op
                 findLastPrefixUsingScanner2·p0.50:   7.280 us/op
                 findLastPrefixUsingScanner2·p0.90:   7.304 us/op
                 findLastPrefixUsingScanner2·p0.95:   7.312 us/op
                 findLastPrefixUsingScanner2·p0.99:   10.464 us/op
                 findLastPrefixUsingScanner2·p0.999:  16.704 us/op
                 findLastPrefixUsingScanner2·p0.9999: 45.826 us/op
                 findLastPrefixUsingScanner2·p1.00:   144.128 us/op

Iteration  13: 7.380 ±(99.9%) 0.010 us/op
                 findLastPrefixUsingScanner2·p0.00:   7.248 us/op
                 findLastPrefixUsingScanner2·p0.50:   7.296 us/op
                 findLastPrefixUsingScanner2·p0.90:   7.320 us/op
                 findLastPrefixUsingScanner2·p0.95:   7.320 us/op
                 findLastPrefixUsingScanner2·p0.99:   10.496 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.219 us/op
                 findLastPrefixUsingScanner2·p0.9999: 56.780 us/op
                 findLastPrefixUsingScanner2·p1.00:   533.504 us/op

Iteration  14: 7.373 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner2·p0.00:   7.248 us/op
                 findLastPrefixUsingScanner2·p0.50:   7.304 us/op
                 findLastPrefixUsingScanner2·p0.90:   7.328 us/op
                 findLastPrefixUsingScanner2·p0.95:   7.344 us/op
                 findLastPrefixUsingScanner2·p0.99:   10.480 us/op
                 findLastPrefixUsingScanner2·p0.999:  16.016 us/op
                 findLastPrefixUsingScanner2·p0.9999: 40.858 us/op
                 findLastPrefixUsingScanner2·p1.00:   234.240 us/op

Iteration  15: 7.410 ±(99.9%) 0.015 us/op
                 findLastPrefixUsingScanner2·p0.00:   7.264 us/op
                 findLastPrefixUsingScanner2·p0.50:   7.328 us/op
                 findLastPrefixUsingScanner2·p0.90:   7.352 us/op
                 findLastPrefixUsingScanner2·p0.95:   7.360 us/op
                 findLastPrefixUsingScanner2·p0.99:   10.592 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.308 us/op
                 findLastPrefixUsingScanner2·p0.9999: 52.032 us/op
                 findLastPrefixUsingScanner2·p1.00:   1396.736 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 5081388
  mean =      7.378 ±(99.9%) 0.002 us/op

  Histogram, us/op:
    [   0.000,  125.000) = 5081322 
    [ 125.000,  250.000) = 53 
    [ 250.000,  375.000) = 3 
    [ 375.000,  500.000) = 6 
    [ 500.000,  625.000) = 3 
    [ 625.000,  750.000) = 0 
    [ 750.000,  875.000) = 0 
    [ 875.000, 1000.000) = 0 
    [1000.000, 1125.000) = 0 
    [1125.000, 1250.000) = 0 
    [1250.000, 1375.000) = 0 
    [1375.000, 1500.000) = 1 
    [1500.000, 1625.000) = 0 
    [1625.000, 1750.000) = 0 
    [1750.000, 1875.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      7.200 us/op
     p(50.0000) =      7.304 us/op
     p(90.0000) =      7.368 us/op
     p(95.0000) =      7.392 us/op
     p(99.0000) =     10.464 us/op
     p(99.9000) =     16.480 us/op
     p(99.9900) =     44.855 us/op
     p(99.9990) =    131.983 us/op
     p(99.9999) =    476.398 us/op
    p(100.0000) =   1396.736 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 86.95% complete, ETA 01:05:23
# Fork: 1 of 1
# Warmup Iteration   1: 14391.682 ±(99.9%) 83.071 us/op
# Warmup Iteration   2: 14341.359 ±(99.9%) 17.816 us/op
# Warmup Iteration   3: 14354.476 ±(99.9%) 15.122 us/op
# Warmup Iteration   4: 14344.838 ±(99.9%) 13.956 us/op
# Warmup Iteration   5: 14350.974 ±(99.9%) 12.193 us/op
Iteration   1: 14340.560 ±(99.9%) 12.196 us/op
                 runAlgorithm·p0.00:   14254.080 us/op
                 runAlgorithm·p0.50:   14319.616 us/op
                 runAlgorithm·p0.90:   14385.152 us/op
                 runAlgorithm·p0.95:   14417.920 us/op
                 runAlgorithm·p0.99:   14598.472 us/op
                 runAlgorithm·p0.999:  15908.864 us/op
                 runAlgorithm·p0.9999: 15908.864 us/op
                 runAlgorithm·p1.00:   15908.864 us/op

Iteration   2: 14330.883 ±(99.9%) 9.858 us/op
                 runAlgorithm·p0.00:   14254.080 us/op
                 runAlgorithm·p0.50:   14319.616 us/op
                 runAlgorithm·p0.90:   14368.768 us/op
                 runAlgorithm·p0.95:   14401.536 us/op
                 runAlgorithm·p0.99:   14631.240 us/op
                 runAlgorithm·p0.999:  15253.504 us/op
                 runAlgorithm·p0.9999: 15253.504 us/op
                 runAlgorithm·p1.00:   15253.504 us/op

Iteration   3: 14338.045 ±(99.9%) 11.059 us/op
                 runAlgorithm·p0.00:   14254.080 us/op
                 runAlgorithm·p0.50:   14319.616 us/op
                 runAlgorithm·p0.90:   14385.152 us/op
                 runAlgorithm·p0.95:   14434.304 us/op
                 runAlgorithm·p0.99:   14664.991 us/op
                 runAlgorithm·p0.999:  15532.032 us/op
                 runAlgorithm·p0.9999: 15532.032 us/op
                 runAlgorithm·p1.00:   15532.032 us/op

Iteration   4: 14352.313 ±(99.9%) 11.692 us/op
                 runAlgorithm·p0.00:   14270.464 us/op
                 runAlgorithm·p0.50:   14336.000 us/op
                 runAlgorithm·p0.90:   14417.920 us/op
                 runAlgorithm·p0.95:   14435.942 us/op
                 runAlgorithm·p0.99:   14600.765 us/op
                 runAlgorithm·p0.999:  15728.640 us/op
                 runAlgorithm·p0.9999: 15728.640 us/op
                 runAlgorithm·p1.00:   15728.640 us/op

Iteration   5: 14404.959 ±(99.9%) 15.609 us/op
                 runAlgorithm·p0.00:   14254.080 us/op
                 runAlgorithm·p0.50:   14368.768 us/op
                 runAlgorithm·p0.90:   14532.608 us/op
                 runAlgorithm·p0.95:   14663.680 us/op
                 runAlgorithm·p0.99:   14829.978 us/op
                 runAlgorithm·p0.999:  15286.272 us/op
                 runAlgorithm·p0.9999: 15286.272 us/op
                 runAlgorithm·p1.00:   15286.272 us/op

Iteration   6: 14342.723 ±(99.9%) 9.547 us/op
                 runAlgorithm·p0.00:   14270.464 us/op
                 runAlgorithm·p0.50:   14336.000 us/op
                 runAlgorithm·p0.90:   14401.536 us/op
                 runAlgorithm·p0.95:   14434.304 us/op
                 runAlgorithm·p0.99:   14745.928 us/op
                 runAlgorithm·p0.999:  15138.816 us/op
                 runAlgorithm·p0.9999: 15138.816 us/op
                 runAlgorithm·p1.00:   15138.816 us/op

Iteration   7: 14328.700 ±(99.9%) 10.016 us/op
                 runAlgorithm·p0.00:   14254.080 us/op
                 runAlgorithm·p0.50:   14319.616 us/op
                 runAlgorithm·p0.90:   14368.768 us/op
                 runAlgorithm·p0.95:   14401.536 us/op
                 runAlgorithm·p0.99:   14581.924 us/op
                 runAlgorithm·p0.999:  15482.880 us/op
                 runAlgorithm·p0.9999: 15482.880 us/op
                 runAlgorithm·p1.00:   15482.880 us/op

Iteration   8: 14340.842 ±(99.9%) 8.833 us/op
                 runAlgorithm·p0.00:   14270.464 us/op
                 runAlgorithm·p0.50:   14319.616 us/op
                 runAlgorithm·p0.90:   14385.152 us/op
                 runAlgorithm·p0.95:   14417.920 us/op
                 runAlgorithm·p0.99:   14631.567 us/op
                 runAlgorithm·p0.999:  15089.664 us/op
                 runAlgorithm·p0.9999: 15089.664 us/op
                 runAlgorithm·p1.00:   15089.664 us/op

Iteration   9: 14337.408 ±(99.9%) 9.728 us/op
                 runAlgorithm·p0.00:   14254.080 us/op
                 runAlgorithm·p0.50:   14319.616 us/op
                 runAlgorithm·p0.90:   14385.152 us/op
                 runAlgorithm·p0.95:   14417.920 us/op
                 runAlgorithm·p0.99:   14549.320 us/op
                 runAlgorithm·p0.999:  15400.960 us/op
                 runAlgorithm·p0.9999: 15400.960 us/op
                 runAlgorithm·p1.00:   15400.960 us/op

Iteration  10: 14339.502 ±(99.9%) 10.187 us/op
                 runAlgorithm·p0.00:   14237.696 us/op
                 runAlgorithm·p0.50:   14319.616 us/op
                 runAlgorithm·p0.90:   14401.536 us/op
                 runAlgorithm·p0.95:   14435.942 us/op
                 runAlgorithm·p0.99:   14680.064 us/op
                 runAlgorithm·p0.999:  15302.656 us/op
                 runAlgorithm·p0.9999: 15302.656 us/op
                 runAlgorithm·p1.00:   15302.656 us/op

Iteration  11: 14334.897 ±(99.9%) 9.604 us/op
                 runAlgorithm·p0.00:   14254.080 us/op
                 runAlgorithm·p0.50:   14319.616 us/op
                 runAlgorithm·p0.90:   14385.152 us/op
                 runAlgorithm·p0.95:   14434.304 us/op
                 runAlgorithm·p0.99:   14663.844 us/op
                 runAlgorithm·p0.999:  15138.816 us/op
                 runAlgorithm·p0.9999: 15138.816 us/op
                 runAlgorithm·p1.00:   15138.816 us/op

Iteration  12: 14339.103 ±(99.9%) 17.450 us/op
                 runAlgorithm·p0.00:   14254.080 us/op
                 runAlgorithm·p0.50:   14319.616 us/op
                 runAlgorithm·p0.90:   14385.152 us/op
                 runAlgorithm·p0.95:   14450.688 us/op
                 runAlgorithm·p0.99:   14778.696 us/op
                 runAlgorithm·p0.999:  17104.896 us/op
                 runAlgorithm·p0.9999: 17104.896 us/op
                 runAlgorithm·p1.00:   17104.896 us/op

Iteration  13: 14338.562 ±(99.9%) 17.049 us/op
                 runAlgorithm·p0.00:   14254.080 us/op
                 runAlgorithm·p0.50:   14319.616 us/op
                 runAlgorithm·p0.90:   14385.152 us/op
                 runAlgorithm·p0.95:   14434.304 us/op
                 runAlgorithm·p0.99:   14602.076 us/op
                 runAlgorithm·p0.999:  17268.736 us/op
                 runAlgorithm·p0.9999: 17268.736 us/op
                 runAlgorithm·p1.00:   17268.736 us/op

Iteration  14: 14338.750 ±(99.9%) 11.244 us/op
                 runAlgorithm·p0.00:   14254.080 us/op
                 runAlgorithm·p0.50:   14319.616 us/op
                 runAlgorithm·p0.90:   14401.536 us/op
                 runAlgorithm·p0.95:   14434.304 us/op
                 runAlgorithm·p0.99:   14581.760 us/op
                 runAlgorithm·p0.999:  15548.416 us/op
                 runAlgorithm·p0.9999: 15548.416 us/op
                 runAlgorithm·p1.00:   15548.416 us/op

Iteration  15: 14359.823 ±(99.9%) 10.070 us/op
                 runAlgorithm·p0.00:   14270.464 us/op
                 runAlgorithm·p0.50:   14352.384 us/op
                 runAlgorithm·p0.90:   14417.920 us/op
                 runAlgorithm·p0.95:   14469.530 us/op
                 runAlgorithm·p0.99:   14647.296 us/op
                 runAlgorithm·p0.999:  15450.112 us/op
                 runAlgorithm·p0.9999: 15450.112 us/op
                 runAlgorithm·p1.00:   15450.112 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  N = 10455
  mean =  14344.448 ±(99.9%) 3.115 us/op

  Histogram, us/op:
    [14000.000, 14250.000) = 1 
    [14250.000, 14500.000) = 10104 
    [14500.000, 14750.000) = 268 
    [14750.000, 15000.000) = 45 
    [15000.000, 15250.000) = 12 
    [15250.000, 15500.000) = 18 
    [15500.000, 15750.000) = 3 
    [15750.000, 16000.000) = 2 
    [16000.000, 16250.000) = 0 
    [16250.000, 16500.000) = 0 
    [16500.000, 16750.000) = 0 
    [16750.000, 17000.000) = 0 
    [17000.000, 17250.000) = 1 
    [17250.000, 17500.000) = 1 
    [17500.000, 17750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  14237.696 us/op
     p(50.0000) =  14319.616 us/op
     p(90.0000) =  14401.536 us/op
     p(95.0000) =  14467.072 us/op
     p(99.0000) =  14696.448 us/op
     p(99.9000) =  15427.699 us/op
     p(99.9900) =  17261.265 us/op
     p(99.9990) =  17268.736 us/op
     p(99.9999) =  17268.736 us/op
    p(100.0000) =  17268.736 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 87.68% complete, ETA 01:01:44
# Fork: 1 of 1
# Warmup Iteration   1: 352.528 ±(99.9%) 1.984 us/op
# Warmup Iteration   2: 346.899 ±(99.9%) 0.599 us/op
# Warmup Iteration   3: 346.471 ±(99.9%) 0.617 us/op
# Warmup Iteration   4: 345.612 ±(99.9%) 0.576 us/op
# Warmup Iteration   5: 346.033 ±(99.9%) 0.569 us/op
Iteration   1: 346.132 ±(99.9%) 0.570 us/op
                 runAlgorithm·p0.00:   327.680 us/op
                 runAlgorithm·p0.50:   342.016 us/op
                 runAlgorithm·p0.90:   356.864 us/op
                 runAlgorithm·p0.95:   362.496 us/op
                 runAlgorithm·p0.99:   395.996 us/op
                 runAlgorithm·p0.999:  702.465 us/op
                 runAlgorithm·p0.9999: 899.511 us/op
                 runAlgorithm·p1.00:   3301.376 us/op

Iteration   2: 345.463 ±(99.9%) 0.382 us/op
                 runAlgorithm·p0.00:   328.704 us/op
                 runAlgorithm·p0.50:   342.016 us/op
                 runAlgorithm·p0.90:   356.352 us/op
                 runAlgorithm·p0.95:   361.472 us/op
                 runAlgorithm·p0.99:   392.704 us/op
                 runAlgorithm·p0.999:  655.360 us/op
                 runAlgorithm·p0.9999: 761.166 us/op
                 runAlgorithm·p1.00:   783.360 us/op

Iteration   3: 346.407 ±(99.9%) 0.659 us/op
                 runAlgorithm·p0.00:   329.728 us/op
                 runAlgorithm·p0.50:   342.528 us/op
                 runAlgorithm·p0.90:   356.864 us/op
                 runAlgorithm·p0.95:   361.984 us/op
                 runAlgorithm·p0.99:   396.800 us/op
                 runAlgorithm·p0.999:  750.751 us/op
                 runAlgorithm·p0.9999: 961.715 us/op
                 runAlgorithm·p1.00:   4202.496 us/op

Iteration   4: 345.266 ±(99.9%) 0.398 us/op
                 runAlgorithm·p0.00:   328.704 us/op
                 runAlgorithm·p0.50:   342.016 us/op
                 runAlgorithm·p0.90:   355.840 us/op
                 runAlgorithm·p0.95:   360.448 us/op
                 runAlgorithm·p0.99:   393.728 us/op
                 runAlgorithm·p0.999:  659.014 us/op
                 runAlgorithm·p0.9999: 809.031 us/op
                 runAlgorithm·p1.00:   904.192 us/op

Iteration   5: 345.883 ±(99.9%) 0.446 us/op
                 runAlgorithm·p0.00:   329.216 us/op
                 runAlgorithm·p0.50:   342.528 us/op
                 runAlgorithm·p0.90:   355.840 us/op
                 runAlgorithm·p0.95:   360.448 us/op
                 runAlgorithm·p0.99:   394.240 us/op
                 runAlgorithm·p0.999:  701.815 us/op
                 runAlgorithm·p0.9999: 885.990 us/op
                 runAlgorithm·p1.00:   894.976 us/op

Iteration   6: 347.353 ±(99.9%) 0.516 us/op
                 runAlgorithm·p0.00:   328.704 us/op
                 runAlgorithm·p0.50:   343.040 us/op
                 runAlgorithm·p0.90:   359.936 us/op
                 runAlgorithm·p0.95:   368.640 us/op
                 runAlgorithm·p0.99:   403.456 us/op
                 runAlgorithm·p0.999:  728.039 us/op
                 runAlgorithm·p0.9999: 850.042 us/op
                 runAlgorithm·p1.00:   915.456 us/op

Iteration   7: 344.549 ±(99.9%) 0.363 us/op
                 runAlgorithm·p0.00:   329.216 us/op
                 runAlgorithm·p0.50:   341.504 us/op
                 runAlgorithm·p0.90:   354.816 us/op
                 runAlgorithm·p0.95:   359.424 us/op
                 runAlgorithm·p0.99:   390.195 us/op
                 runAlgorithm·p0.999:  648.223 us/op
                 runAlgorithm·p0.9999: 763.397 us/op
                 runAlgorithm·p1.00:   789.504 us/op

Iteration   8: 345.539 ±(99.9%) 0.376 us/op
                 runAlgorithm·p0.00:   329.216 us/op
                 runAlgorithm·p0.50:   342.016 us/op
                 runAlgorithm·p0.90:   356.864 us/op
                 runAlgorithm·p0.95:   362.496 us/op
                 runAlgorithm·p0.99:   392.192 us/op
                 runAlgorithm·p0.999:  655.931 us/op
                 runAlgorithm·p0.9999: 763.406 us/op
                 runAlgorithm·p1.00:   801.792 us/op

Iteration   9: 345.895 ±(99.9%) 0.475 us/op
                 runAlgorithm·p0.00:   328.192 us/op
                 runAlgorithm·p0.50:   342.016 us/op
                 runAlgorithm·p0.90:   355.840 us/op
                 runAlgorithm·p0.95:   361.472 us/op
                 runAlgorithm·p0.99:   396.800 us/op
                 runAlgorithm·p0.999:  713.982 us/op
                 runAlgorithm·p0.9999: 894.424 us/op
                 runAlgorithm·p1.00:   1006.592 us/op

Iteration  10: 345.217 ±(99.9%) 0.361 us/op
                 runAlgorithm·p0.00:   329.216 us/op
                 runAlgorithm·p0.50:   342.016 us/op
                 runAlgorithm·p0.90:   355.328 us/op
                 runAlgorithm·p0.95:   360.448 us/op
                 runAlgorithm·p0.99:   391.680 us/op
                 runAlgorithm·p0.999:  655.360 us/op
                 runAlgorithm·p0.9999: 748.175 us/op
                 runAlgorithm·p1.00:   784.384 us/op

Iteration  11: 345.856 ±(99.9%) 0.504 us/op
                 runAlgorithm·p0.00:   330.240 us/op
                 runAlgorithm·p0.50:   342.528 us/op
                 runAlgorithm·p0.90:   356.864 us/op
                 runAlgorithm·p0.95:   361.984 us/op
                 runAlgorithm·p0.99:   394.240 us/op
                 runAlgorithm·p0.999:  642.417 us/op
                 runAlgorithm·p0.9999: 846.340 us/op
                 runAlgorithm·p1.00:   3293.184 us/op

Iteration  12: 345.792 ±(99.9%) 0.496 us/op
                 runAlgorithm·p0.00:   328.192 us/op
                 runAlgorithm·p0.50:   343.040 us/op
                 runAlgorithm·p0.90:   356.352 us/op
                 runAlgorithm·p0.95:   361.472 us/op
                 runAlgorithm·p0.99:   395.776 us/op
                 runAlgorithm·p0.999:  638.302 us/op
                 runAlgorithm·p0.9999: 878.719 us/op
                 runAlgorithm·p1.00:   3244.032 us/op

Iteration  13: 345.267 ±(99.9%) 0.386 us/op
                 runAlgorithm·p0.00:   328.704 us/op
                 runAlgorithm·p0.50:   342.016 us/op
                 runAlgorithm·p0.90:   355.840 us/op
                 runAlgorithm·p0.95:   360.448 us/op
                 runAlgorithm·p0.99:   391.680 us/op
                 runAlgorithm·p0.999:  659.747 us/op
                 runAlgorithm·p0.9999: 744.337 us/op
                 runAlgorithm·p1.00:   844.800 us/op

Iteration  14: 345.709 ±(99.9%) 0.406 us/op
                 runAlgorithm·p0.00:   329.216 us/op
                 runAlgorithm·p0.50:   342.528 us/op
                 runAlgorithm·p0.90:   356.352 us/op
                 runAlgorithm·p0.95:   361.472 us/op
                 runAlgorithm·p0.99:   394.240 us/op
                 runAlgorithm·p0.999:  668.672 us/op
                 runAlgorithm·p0.9999: 822.038 us/op
                 runAlgorithm·p1.00:   1191.936 us/op

Iteration  15: 345.660 ±(99.9%) 0.503 us/op
                 runAlgorithm·p0.00:   328.192 us/op
                 runAlgorithm·p0.50:   342.528 us/op
                 runAlgorithm·p0.90:   356.352 us/op
                 runAlgorithm·p0.95:   361.472 us/op
                 runAlgorithm·p0.99:   394.752 us/op
                 runAlgorithm·p0.999:  659.561 us/op
                 runAlgorithm·p0.9999: 860.680 us/op
                 runAlgorithm·p1.00:   3268.608 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 433345
  mean =    345.732 ±(99.9%) 0.120 us/op

  Histogram, us/op:
    [   0.000,  500.000) = 431412 
    [ 500.000, 1000.000) = 1925 
    [1000.000, 1500.000) = 3 
    [1500.000, 2000.000) = 0 
    [2000.000, 2500.000) = 0 
    [2500.000, 3000.000) = 0 
    [3000.000, 3500.000) = 4 
    [3500.000, 4000.000) = 0 
    [4000.000, 4500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    327.680 us/op
     p(50.0000) =    342.528 us/op
     p(90.0000) =    356.352 us/op
     p(95.0000) =    361.472 us/op
     p(99.0000) =    394.240 us/op
     p(99.9000) =    674.816 us/op
     p(99.9900) =    843.433 us/op
     p(99.9990) =   3260.413 us/op
     p(99.9999) =   4202.496 us/op
    p(100.0000) =   4202.496 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 88.40% complete, ETA 00:58:06
# Fork: 1 of 1
# Warmup Iteration   1: 34371.605 ±(99.9%) 642.110 us/op
# Warmup Iteration   2: 34302.485 ±(99.9%) 138.349 us/op
# Warmup Iteration   3: 34122.560 ±(99.9%) 107.681 us/op
# Warmup Iteration   4: 34143.585 ±(99.9%) 113.987 us/op
# Warmup Iteration   5: 34108.021 ±(99.9%) 106.598 us/op
Iteration   1: 34186.754 ±(99.9%) 159.091 us/op
                 runAlgorithm·p0.00:   33619.968 us/op
                 runAlgorithm·p0.50:   33947.648 us/op
                 runAlgorithm·p0.90:   34930.688 us/op
                 runAlgorithm·p0.95:   35323.904 us/op
                 runAlgorithm·p0.99:   39210.189 us/op
                 runAlgorithm·p0.999:  39583.744 us/op
                 runAlgorithm·p0.9999: 39583.744 us/op
                 runAlgorithm·p1.00:   39583.744 us/op

Iteration   2: 34128.599 ±(99.9%) 89.646 us/op
                 runAlgorithm·p0.00:   33619.968 us/op
                 runAlgorithm·p0.50:   34013.184 us/op
                 runAlgorithm·p0.90:   34904.474 us/op
                 runAlgorithm·p0.95:   35127.296 us/op
                 runAlgorithm·p0.99:   35833.774 us/op
                 runAlgorithm·p0.999:  36962.304 us/op
                 runAlgorithm·p0.9999: 36962.304 us/op
                 runAlgorithm·p1.00:   36962.304 us/op

Iteration   3: 34122.783 ±(99.9%) 88.529 us/op
                 runAlgorithm·p0.00:   33619.968 us/op
                 runAlgorithm·p0.50:   34013.184 us/op
                 runAlgorithm·p0.90:   34799.616 us/op
                 runAlgorithm·p0.95:   35192.832 us/op
                 runAlgorithm·p0.99:   35721.052 us/op
                 runAlgorithm·p0.999:  36896.768 us/op
                 runAlgorithm·p0.9999: 36896.768 us/op
                 runAlgorithm·p1.00:   36896.768 us/op

Iteration   4: 34148.953 ±(99.9%) 106.371 us/op
                 runAlgorithm·p0.00:   33619.968 us/op
                 runAlgorithm·p0.50:   33947.648 us/op
                 runAlgorithm·p0.90:   34799.616 us/op
                 runAlgorithm·p0.95:   35212.493 us/op
                 runAlgorithm·p0.99:   36904.632 us/op
                 runAlgorithm·p0.999:  38338.560 us/op
                 runAlgorithm·p0.9999: 38338.560 us/op
                 runAlgorithm·p1.00:   38338.560 us/op

Iteration   5: 34102.429 ±(99.9%) 104.854 us/op
                 runAlgorithm·p0.00:   33619.968 us/op
                 runAlgorithm·p0.50:   33947.648 us/op
                 runAlgorithm·p0.90:   34773.402 us/op
                 runAlgorithm·p0.95:   35278.029 us/op
                 runAlgorithm·p0.99:   36920.361 us/op
                 runAlgorithm·p0.999:  37617.664 us/op
                 runAlgorithm·p0.9999: 37617.664 us/op
                 runAlgorithm·p1.00:   37617.664 us/op

Iteration   6: 34059.550 ±(99.9%) 98.459 us/op
                 runAlgorithm·p0.00:   33619.968 us/op
                 runAlgorithm·p0.50:   33882.112 us/op
                 runAlgorithm·p0.90:   34701.312 us/op
                 runAlgorithm·p0.95:   35061.760 us/op
                 runAlgorithm·p0.99:   35559.834 us/op
                 runAlgorithm·p0.999:  38862.848 us/op
                 runAlgorithm·p0.9999: 38862.848 us/op
                 runAlgorithm·p1.00:   38862.848 us/op

Iteration   7: 34084.293 ±(99.9%) 88.238 us/op
                 runAlgorithm·p0.00:   33619.968 us/op
                 runAlgorithm·p0.50:   33947.648 us/op
                 runAlgorithm·p0.90:   34832.384 us/op
                 runAlgorithm·p0.95:   35127.296 us/op
                 runAlgorithm·p0.99:   35395.994 us/op
                 runAlgorithm·p0.999:  37814.272 us/op
                 runAlgorithm·p0.9999: 37814.272 us/op
                 runAlgorithm·p1.00:   37814.272 us/op

Iteration   8: 34289.692 ±(99.9%) 136.821 us/op
                 runAlgorithm·p0.00:   33685.504 us/op
                 runAlgorithm·p0.50:   34013.184 us/op
                 runAlgorithm·p0.90:   35238.707 us/op
                 runAlgorithm·p0.95:   35871.130 us/op
                 runAlgorithm·p0.99:   36656.251 us/op
                 runAlgorithm·p0.999:  38273.024 us/op
                 runAlgorithm·p0.9999: 38273.024 us/op
                 runAlgorithm·p1.00:   38273.024 us/op

Iteration   9: 34145.151 ±(99.9%) 114.993 us/op
                 runAlgorithm·p0.00:   33619.968 us/op
                 runAlgorithm·p0.50:   33947.648 us/op
                 runAlgorithm·p0.90:   34970.010 us/op
                 runAlgorithm·p0.95:   35258.368 us/op
                 runAlgorithm·p0.99:   37317.509 us/op
                 runAlgorithm·p0.999:  38469.632 us/op
                 runAlgorithm·p0.9999: 38469.632 us/op
                 runAlgorithm·p1.00:   38469.632 us/op

Iteration  10: 34203.082 ±(99.9%) 139.777 us/op
                 runAlgorithm·p0.00:   33619.968 us/op
                 runAlgorithm·p0.50:   34013.184 us/op
                 runAlgorithm·p0.90:   34904.474 us/op
                 runAlgorithm·p0.95:   35468.083 us/op
                 runAlgorithm·p0.99:   37756.600 us/op
                 runAlgorithm·p0.999:  38404.096 us/op
                 runAlgorithm·p0.9999: 38404.096 us/op
                 runAlgorithm·p1.00:   38404.096 us/op

Iteration  11: 34084.516 ±(99.9%) 84.568 us/op
                 runAlgorithm·p0.00:   33619.968 us/op
                 runAlgorithm·p0.50:   33947.648 us/op
                 runAlgorithm·p0.90:   34734.080 us/op
                 runAlgorithm·p0.95:   35061.760 us/op
                 runAlgorithm·p0.99:   35468.083 us/op
                 runAlgorithm·p0.999:  37683.200 us/op
                 runAlgorithm·p0.9999: 37683.200 us/op
                 runAlgorithm·p1.00:   37683.200 us/op

Iteration  12: 34132.178 ±(99.9%) 125.347 us/op
                 runAlgorithm·p0.00:   33619.968 us/op
                 runAlgorithm·p0.50:   33947.648 us/op
                 runAlgorithm·p0.90:   34838.938 us/op
                 runAlgorithm·p0.95:   35212.493 us/op
                 runAlgorithm·p0.99:   37269.012 us/op
                 runAlgorithm·p0.999:  39714.816 us/op
                 runAlgorithm·p0.9999: 39714.816 us/op
                 runAlgorithm·p1.00:   39714.816 us/op

Iteration  13: 34092.811 ±(99.9%) 97.216 us/op
                 runAlgorithm·p0.00:   33619.968 us/op
                 runAlgorithm·p0.50:   33947.648 us/op
                 runAlgorithm·p0.90:   34865.152 us/op
                 runAlgorithm·p0.95:   35127.296 us/op
                 runAlgorithm·p0.99:   35397.304 us/op
                 runAlgorithm·p0.999:  39321.600 us/op
                 runAlgorithm·p0.9999: 39321.600 us/op
                 runAlgorithm·p1.00:   39321.600 us/op

Iteration  14: 34133.296 ±(99.9%) 116.557 us/op
                 runAlgorithm·p0.00:   33685.504 us/op
                 runAlgorithm·p0.50:   33947.648 us/op
                 runAlgorithm·p0.90:   34904.474 us/op
                 runAlgorithm·p0.95:   35258.368 us/op
                 runAlgorithm·p0.99:   37706.793 us/op
                 runAlgorithm·p0.999:  38207.488 us/op
                 runAlgorithm·p0.9999: 38207.488 us/op
                 runAlgorithm·p1.00:   38207.488 us/op

Iteration  15: 34070.472 ±(99.9%) 90.584 us/op
                 runAlgorithm·p0.00:   33619.968 us/op
                 runAlgorithm·p0.50:   33947.648 us/op
                 runAlgorithm·p0.90:   34734.080 us/op
                 runAlgorithm·p0.95:   35061.760 us/op
                 runAlgorithm·p0.99:   35648.307 us/op
                 runAlgorithm·p0.999:  37486.592 us/op
                 runAlgorithm·p0.9999: 37486.592 us/op
                 runAlgorithm·p1.00:   37486.592 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 4398
  mean =  34132.216 ±(99.9%) 28.608 us/op

  Histogram, us/op:
    [33000.000, 33500.000) = 0 
    [33500.000, 34000.000) = 2358 
    [34000.000, 34500.000) = 1446 
    [34500.000, 35000.000) = 256 
    [35000.000, 35500.000) = 231 
    [35500.000, 36000.000) = 42 
    [36000.000, 36500.000) = 12 
    [36500.000, 37000.000) = 19 
    [37000.000, 37500.000) = 9 
    [37500.000, 38000.000) = 9 
    [38000.000, 38500.000) = 6 
    [38500.000, 39000.000) = 5 
    [39000.000, 39500.000) = 2 

  Percentiles, us/op:
      p(0.0000) =  33619.968 us/op
     p(50.0000) =  33947.648 us/op
     p(90.0000) =  34865.152 us/op
     p(95.0000) =  35192.832 us/op
     p(99.0000) =  36765.696 us/op
     p(99.9000) =  39269.302 us/op
     p(99.9900) =  39714.816 us/op
     p(99.9990) =  39714.816 us/op
     p(99.9999) =  39714.816 us/op
    p(100.0000) =  39714.816 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 89.13% complete, ETA 00:54:28
# Fork: 1 of 1
# Warmup Iteration   1: 3437931.179 ±(99.9%) 309250.762 us/op
# Warmup Iteration   2: 3402978.645 ±(99.9%) 233771.603 us/op
# Warmup Iteration   3: 11408506.880 us/op
# Warmup Iteration   4: 11425284.096 us/op
# Warmup Iteration   5: 11391729.664 us/op
Iteration   1: 11391729.664 us/op
                 runAlgorithm·p0.00:   11391729.664 us/op
                 runAlgorithm·p0.50:   11391729.664 us/op
                 runAlgorithm·p0.90:   11391729.664 us/op
                 runAlgorithm·p0.95:   11391729.664 us/op
                 runAlgorithm·p0.99:   11391729.664 us/op
                 runAlgorithm·p0.999:  11391729.664 us/op
                 runAlgorithm·p0.9999: 11391729.664 us/op
                 runAlgorithm·p1.00:   11391729.664 us/op

Iteration   2: 11408506.880 us/op
                 runAlgorithm·p0.00:   11408506.880 us/op
                 runAlgorithm·p0.50:   11408506.880 us/op
                 runAlgorithm·p0.90:   11408506.880 us/op
                 runAlgorithm·p0.95:   11408506.880 us/op
                 runAlgorithm·p0.99:   11408506.880 us/op
                 runAlgorithm·p0.999:  11408506.880 us/op
                 runAlgorithm·p0.9999: 11408506.880 us/op
                 runAlgorithm·p1.00:   11408506.880 us/op

Iteration   3: 11391729.664 us/op
                 runAlgorithm·p0.00:   11391729.664 us/op
                 runAlgorithm·p0.50:   11391729.664 us/op
                 runAlgorithm·p0.90:   11391729.664 us/op
                 runAlgorithm·p0.95:   11391729.664 us/op
                 runAlgorithm·p0.99:   11391729.664 us/op
                 runAlgorithm·p0.999:  11391729.664 us/op
                 runAlgorithm·p0.9999: 11391729.664 us/op
                 runAlgorithm·p1.00:   11391729.664 us/op

Iteration   4: 11391729.664 us/op
                 runAlgorithm·p0.00:   11391729.664 us/op
                 runAlgorithm·p0.50:   11391729.664 us/op
                 runAlgorithm·p0.90:   11391729.664 us/op
                 runAlgorithm·p0.95:   11391729.664 us/op
                 runAlgorithm·p0.99:   11391729.664 us/op
                 runAlgorithm·p0.999:  11391729.664 us/op
                 runAlgorithm·p0.9999: 11391729.664 us/op
                 runAlgorithm·p1.00:   11391729.664 us/op

Iteration   5: 11391729.664 us/op
                 runAlgorithm·p0.00:   11391729.664 us/op
                 runAlgorithm·p0.50:   11391729.664 us/op
                 runAlgorithm·p0.90:   11391729.664 us/op
                 runAlgorithm·p0.95:   11391729.664 us/op
                 runAlgorithm·p0.99:   11391729.664 us/op
                 runAlgorithm·p0.999:  11391729.664 us/op
                 runAlgorithm·p0.9999: 11391729.664 us/op
                 runAlgorithm·p1.00:   11391729.664 us/op

Iteration   6: 11391729.664 us/op
                 runAlgorithm·p0.00:   11391729.664 us/op
                 runAlgorithm·p0.50:   11391729.664 us/op
                 runAlgorithm·p0.90:   11391729.664 us/op
                 runAlgorithm·p0.95:   11391729.664 us/op
                 runAlgorithm·p0.99:   11391729.664 us/op
                 runAlgorithm·p0.999:  11391729.664 us/op
                 runAlgorithm·p0.9999: 11391729.664 us/op
                 runAlgorithm·p1.00:   11391729.664 us/op

Iteration   7: 11391729.664 us/op
                 runAlgorithm·p0.00:   11391729.664 us/op
                 runAlgorithm·p0.50:   11391729.664 us/op
                 runAlgorithm·p0.90:   11391729.664 us/op
                 runAlgorithm·p0.95:   11391729.664 us/op
                 runAlgorithm·p0.99:   11391729.664 us/op
                 runAlgorithm·p0.999:  11391729.664 us/op
                 runAlgorithm·p0.9999: 11391729.664 us/op
                 runAlgorithm·p1.00:   11391729.664 us/op

Iteration   8: 11391729.664 us/op
                 runAlgorithm·p0.00:   11391729.664 us/op
                 runAlgorithm·p0.50:   11391729.664 us/op
                 runAlgorithm·p0.90:   11391729.664 us/op
                 runAlgorithm·p0.95:   11391729.664 us/op
                 runAlgorithm·p0.99:   11391729.664 us/op
                 runAlgorithm·p0.999:  11391729.664 us/op
                 runAlgorithm·p0.9999: 11391729.664 us/op
                 runAlgorithm·p1.00:   11391729.664 us/op

Iteration   9: 11442061.312 us/op
                 runAlgorithm·p0.00:   11442061.312 us/op
                 runAlgorithm·p0.50:   11442061.312 us/op
                 runAlgorithm·p0.90:   11442061.312 us/op
                 runAlgorithm·p0.95:   11442061.312 us/op
                 runAlgorithm·p0.99:   11442061.312 us/op
                 runAlgorithm·p0.999:  11442061.312 us/op
                 runAlgorithm·p0.9999: 11442061.312 us/op
                 runAlgorithm·p1.00:   11442061.312 us/op

Iteration  10: 11391729.664 us/op
                 runAlgorithm·p0.00:   11391729.664 us/op
                 runAlgorithm·p0.50:   11391729.664 us/op
                 runAlgorithm·p0.90:   11391729.664 us/op
                 runAlgorithm·p0.95:   11391729.664 us/op
                 runAlgorithm·p0.99:   11391729.664 us/op
                 runAlgorithm·p0.999:  11391729.664 us/op
                 runAlgorithm·p0.9999: 11391729.664 us/op
                 runAlgorithm·p1.00:   11391729.664 us/op

Iteration  11: 11391729.664 us/op
                 runAlgorithm·p0.00:   11391729.664 us/op
                 runAlgorithm·p0.50:   11391729.664 us/op
                 runAlgorithm·p0.90:   11391729.664 us/op
                 runAlgorithm·p0.95:   11391729.664 us/op
                 runAlgorithm·p0.99:   11391729.664 us/op
                 runAlgorithm·p0.999:  11391729.664 us/op
                 runAlgorithm·p0.9999: 11391729.664 us/op
                 runAlgorithm·p1.00:   11391729.664 us/op

Iteration  12: 11408506.880 us/op
                 runAlgorithm·p0.00:   11408506.880 us/op
                 runAlgorithm·p0.50:   11408506.880 us/op
                 runAlgorithm·p0.90:   11408506.880 us/op
                 runAlgorithm·p0.95:   11408506.880 us/op
                 runAlgorithm·p0.99:   11408506.880 us/op
                 runAlgorithm·p0.999:  11408506.880 us/op
                 runAlgorithm·p0.9999: 11408506.880 us/op
                 runAlgorithm·p1.00:   11408506.880 us/op

Iteration  13: 11391729.664 us/op
                 runAlgorithm·p0.00:   11391729.664 us/op
                 runAlgorithm·p0.50:   11391729.664 us/op
                 runAlgorithm·p0.90:   11391729.664 us/op
                 runAlgorithm·p0.95:   11391729.664 us/op
                 runAlgorithm·p0.99:   11391729.664 us/op
                 runAlgorithm·p0.999:  11391729.664 us/op
                 runAlgorithm·p0.9999: 11391729.664 us/op
                 runAlgorithm·p1.00:   11391729.664 us/op

Iteration  14: 11391729.664 us/op
                 runAlgorithm·p0.00:   11391729.664 us/op
                 runAlgorithm·p0.50:   11391729.664 us/op
                 runAlgorithm·p0.90:   11391729.664 us/op
                 runAlgorithm·p0.95:   11391729.664 us/op
                 runAlgorithm·p0.99:   11391729.664 us/op
                 runAlgorithm·p0.999:  11391729.664 us/op
                 runAlgorithm·p0.9999: 11391729.664 us/op
                 runAlgorithm·p1.00:   11391729.664 us/op

Iteration  15: 11391729.664 us/op
                 runAlgorithm·p0.00:   11391729.664 us/op
                 runAlgorithm·p0.50:   11391729.664 us/op
                 runAlgorithm·p0.90:   11391729.664 us/op
                 runAlgorithm·p0.95:   11391729.664 us/op
                 runAlgorithm·p0.99:   11391729.664 us/op
                 runAlgorithm·p0.999:  11391729.664 us/op
                 runAlgorithm·p0.9999: 11391729.664 us/op
                 runAlgorithm·p1.00:   11391729.664 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean = 11397322.069 ±(99.9%) 14644.570 us/op

  Histogram, us/op:
    [11390000.000, 11395000.000) = 12 
    [11395000.000, 11400000.000) = 0 
    [11400000.000, 11405000.000) = 0 
    [11405000.000, 11410000.000) = 2 
    [11410000.000, 11415000.000) = 0 
    [11415000.000, 11420000.000) = 0 
    [11420000.000, 11425000.000) = 0 
    [11425000.000, 11430000.000) = 0 
    [11430000.000, 11435000.000) = 0 
    [11435000.000, 11440000.000) = 0 
    [11440000.000, 11445000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 11391729.664 us/op
     p(50.0000) = 11391729.664 us/op
     p(90.0000) = 11421928.653 us/op
     p(95.0000) = 11442061.312 us/op
     p(99.0000) = 11442061.312 us/op
     p(99.9000) = 11442061.312 us/op
     p(99.9900) = 11442061.312 us/op
     p(99.9990) = 11442061.312 us/op
     p(99.9999) = 11442061.312 us/op
    p(100.0000) = 11442061.312 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 89.85% complete, ETA 00:50:53
# Fork: 1 of 1
# Warmup Iteration   1: 2080.541 ±(99.9%) 15.599 us/op
# Warmup Iteration   2: 2071.014 ±(99.9%) 1.871 us/op
# Warmup Iteration   3: 2073.363 ±(99.9%) 2.890 us/op
# Warmup Iteration   4: 2073.743 ±(99.9%) 4.188 us/op
# Warmup Iteration   5: 2071.053 ±(99.9%) 1.860 us/op
Iteration   1: 2071.681 ±(99.9%) 1.520 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2048.000 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2068.480 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2086.912 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2105.344 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2170.880 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2500.952 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2600.960 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2600.960 us/op

Iteration   2: 2067.398 ±(99.9%) 1.304 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2045.952 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2064.384 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2080.768 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2097.152 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2148.966 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2484.879 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2560.000 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2560.000 us/op

Iteration   3: 2071.350 ±(99.9%) 2.135 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2048.000 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2068.480 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2084.864 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2105.344 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2161.623 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2514.412 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3784.704 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3784.704 us/op

Iteration   4: 2069.622 ±(99.9%) 1.303 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2048.000 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2066.432 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2086.912 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2105.344 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2153.267 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2486.968 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2523.136 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2523.136 us/op

Iteration   5: 2070.438 ±(99.9%) 1.842 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2048.000 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2066.432 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2082.816 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2105.344 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2153.349 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2483.585 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3743.744 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3743.744 us/op

Iteration   6: 2070.316 ±(99.9%) 1.927 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2048.000 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2066.432 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2084.864 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2105.344 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2154.496 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2492.482 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3715.072 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3715.072 us/op

Iteration   7: 2070.029 ±(99.9%) 1.324 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2048.000 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2066.432 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2084.864 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2101.248 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2161.500 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2478.780 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2498.560 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2498.560 us/op

Iteration   8: 2532.494 ±(99.9%) 19.217 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2048.000 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2805.760 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2830.336 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2850.816 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2883.584 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3304.198 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3612.672 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3612.672 us/op

Iteration   9: 2634.638 ±(99.9%) 1.209 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2605.056 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2629.632 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2662.400 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2678.784 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2719.744 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2843.468 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2887.680 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2887.680 us/op

Iteration  10: 2629.919 ±(99.9%) 1.019 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2605.056 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2625.536 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2646.016 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2666.496 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2699.264 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2798.363 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2895.872 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2895.872 us/op

Iteration  11: 2632.078 ±(99.9%) 1.159 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2605.056 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2629.632 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2650.112 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2666.496 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2711.552 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2842.624 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2867.200 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2867.200 us/op

Iteration  12: 2632.433 ±(99.9%) 1.332 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2605.056 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2629.632 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2654.208 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2670.592 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2711.552 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2893.439 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3358.720 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3358.720 us/op

Iteration  13: 2632.780 ±(99.9%) 2.667 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2605.056 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2629.632 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2654.208 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2674.688 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2711.716 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2847.556 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 5398.528 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   5398.528 us/op

Iteration  14: 2632.694 ±(99.9%) 1.639 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2605.056 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2625.536 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2654.208 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2674.688 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2723.963 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3128.635 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3223.552 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3223.552 us/op

Iteration  15: 2632.334 ±(99.9%) 2.805 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2605.056 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2625.536 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2654.208 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2670.592 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2723.840 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3043.697 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 5423.104 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   5423.104 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  N = 64312
  mean =   2330.821 ±(99.9%) 3.787 us/op

  Histogram, us/op:
    [2000.000, 2250.000) = 35178 
    [2250.000, 2500.000) = 106 
    [2500.000, 2750.000) = 26458 
    [2750.000, 3000.000) = 2544 
    [3000.000, 3250.000) = 12 
    [3250.000, 3500.000) = 8 
    [3500.000, 3750.000) = 3 
    [3750.000, 4000.000) = 1 
    [4000.000, 4250.000) = 0 
    [4250.000, 4500.000) = 0 
    [4500.000, 4750.000) = 0 
    [4750.000, 5000.000) = 0 
    [5000.000, 5250.000) = 0 
    [5250.000, 5500.000) = 2 
    [5500.000, 5750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   2045.952 us/op
     p(50.0000) =   2086.912 us/op
     p(90.0000) =   2646.016 us/op
     p(95.0000) =   2682.880 us/op
     p(99.0000) =   2822.144 us/op
     p(99.9000) =   2887.680 us/op
     p(99.9900) =   3515.509 us/op
     p(99.9990) =   5423.104 us/op
     p(99.9999) =   5423.104 us/op
    p(100.0000) =   5423.104 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 90.58% complete, ETA 00:47:15
# Fork: 1 of 1
# Warmup Iteration   1: 62102.483 ±(99.9%) 131.854 us/op
# Warmup Iteration   2: 62107.775 ±(99.9%) 69.644 us/op
# Warmup Iteration   3: 62079.281 ±(99.9%) 70.580 us/op
# Warmup Iteration   4: 62078.874 ±(99.9%) 41.925 us/op
# Warmup Iteration   5: 62009.192 ±(99.9%) 74.434 us/op
Iteration   1: 62130.977 ±(99.9%) 58.184 us/op
                 extractOperationOutOfLoop·p0.00:   60948.480 us/op
                 extractOperationOutOfLoop·p0.50:   62128.128 us/op
                 extractOperationOutOfLoop·p0.90:   62390.272 us/op
                 extractOperationOutOfLoop·p0.95:   62580.326 us/op
                 extractOperationOutOfLoop·p0.99:   62742.856 us/op
                 extractOperationOutOfLoop·p0.999:  62783.488 us/op
                 extractOperationOutOfLoop·p0.9999: 62783.488 us/op
                 extractOperationOutOfLoop·p1.00:   62783.488 us/op

Iteration   2: 62062.592 ±(99.9%) 41.347 us/op
                 extractOperationOutOfLoop·p0.00:   61276.160 us/op
                 extractOperationOutOfLoop·p0.50:   62062.592 us/op
                 extractOperationOutOfLoop·p0.90:   62193.664 us/op
                 extractOperationOutOfLoop·p0.95:   62324.736 us/op
                 extractOperationOutOfLoop·p0.99:   62390.272 us/op
                 extractOperationOutOfLoop·p0.999:  62390.272 us/op
                 extractOperationOutOfLoop·p0.9999: 62390.272 us/op
                 extractOperationOutOfLoop·p1.00:   62390.272 us/op

Iteration   3: 62071.492 ±(99.9%) 47.686 us/op
                 extractOperationOutOfLoop·p0.00:   61014.016 us/op
                 extractOperationOutOfLoop·p0.50:   62062.592 us/op
                 extractOperationOutOfLoop·p0.90:   62259.200 us/op
                 extractOperationOutOfLoop·p0.95:   62324.736 us/op
                 extractOperationOutOfLoop·p0.99:   62438.769 us/op
                 extractOperationOutOfLoop·p0.999:  62521.344 us/op
                 extractOperationOutOfLoop·p0.9999: 62521.344 us/op
                 extractOperationOutOfLoop·p1.00:   62521.344 us/op

Iteration   4: 62098.006 ±(99.9%) 32.451 us/op
                 extractOperationOutOfLoop·p0.00:   61669.376 us/op
                 extractOperationOutOfLoop·p0.50:   62062.592 us/op
                 extractOperationOutOfLoop·p0.90:   62259.200 us/op
                 extractOperationOutOfLoop·p0.95:   62324.736 us/op
                 extractOperationOutOfLoop·p0.99:   62455.808 us/op
                 extractOperationOutOfLoop·p0.999:  62455.808 us/op
                 extractOperationOutOfLoop·p0.9999: 62455.808 us/op
                 extractOperationOutOfLoop·p1.00:   62455.808 us/op

Iteration   5: 62074.324 ±(99.9%) 50.782 us/op
                 extractOperationOutOfLoop·p0.00:   61014.016 us/op
                 extractOperationOutOfLoop·p0.50:   62062.592 us/op
                 extractOperationOutOfLoop·p0.90:   62259.200 us/op
                 extractOperationOutOfLoop·p0.95:   62324.736 us/op
                 extractOperationOutOfLoop·p0.99:   62504.305 us/op
                 extractOperationOutOfLoop·p0.999:  62586.880 us/op
                 extractOperationOutOfLoop·p0.9999: 62586.880 us/op
                 extractOperationOutOfLoop·p1.00:   62586.880 us/op

Iteration   6: 62035.488 ±(99.9%) 50.991 us/op
                 extractOperationOutOfLoop·p0.00:   61145.088 us/op
                 extractOperationOutOfLoop·p0.50:   62062.592 us/op
                 extractOperationOutOfLoop·p0.90:   62193.664 us/op
                 extractOperationOutOfLoop·p0.95:   62259.200 us/op
                 extractOperationOutOfLoop·p0.99:   62455.808 us/op
                 extractOperationOutOfLoop·p0.999:  62455.808 us/op
                 extractOperationOutOfLoop·p0.9999: 62455.808 us/op
                 extractOperationOutOfLoop·p1.00:   62455.808 us/op

Iteration   7: 62057.333 ±(99.9%) 40.074 us/op
                 extractOperationOutOfLoop·p0.00:   61538.304 us/op
                 extractOperationOutOfLoop·p0.50:   62062.592 us/op
                 extractOperationOutOfLoop·p0.90:   62239.539 us/op
                 extractOperationOutOfLoop·p0.95:   62259.200 us/op
                 extractOperationOutOfLoop·p0.99:   62487.265 us/op
                 extractOperationOutOfLoop·p0.999:  62652.416 us/op
                 extractOperationOutOfLoop·p0.9999: 62652.416 us/op
                 extractOperationOutOfLoop·p1.00:   62652.416 us/op

Iteration   8: 61992.201 ±(99.9%) 53.051 us/op
                 extractOperationOutOfLoop·p0.00:   60948.480 us/op
                 extractOperationOutOfLoop·p0.50:   62062.592 us/op
                 extractOperationOutOfLoop·p0.90:   62174.003 us/op
                 extractOperationOutOfLoop·p0.95:   62249.370 us/op
                 extractOperationOutOfLoop·p0.99:   62414.520 us/op
                 extractOperationOutOfLoop·p0.999:  62455.808 us/op
                 extractOperationOutOfLoop·p0.9999: 62455.808 us/op
                 extractOperationOutOfLoop·p1.00:   62455.808 us/op

Iteration   9: 62018.092 ±(99.9%) 53.471 us/op
                 extractOperationOutOfLoop·p0.00:   60686.336 us/op
                 extractOperationOutOfLoop·p0.50:   62062.592 us/op
                 extractOperationOutOfLoop·p0.90:   62193.664 us/op
                 extractOperationOutOfLoop·p0.95:   62314.906 us/op
                 extractOperationOutOfLoop·p0.99:   62414.520 us/op
                 extractOperationOutOfLoop·p0.999:  62455.808 us/op
                 extractOperationOutOfLoop·p0.9999: 62455.808 us/op
                 extractOperationOutOfLoop·p1.00:   62455.808 us/op

Iteration  10: 62039.533 ±(99.9%) 33.456 us/op
                 extractOperationOutOfLoop·p0.00:   61407.232 us/op
                 extractOperationOutOfLoop·p0.50:   62062.592 us/op
                 extractOperationOutOfLoop·p0.90:   62193.664 us/op
                 extractOperationOutOfLoop·p0.95:   62259.200 us/op
                 extractOperationOutOfLoop·p0.99:   62414.520 us/op
                 extractOperationOutOfLoop·p0.999:  62455.808 us/op
                 extractOperationOutOfLoop·p0.9999: 62455.808 us/op
                 extractOperationOutOfLoop·p1.00:   62455.808 us/op

Iteration  11: 62166.798 ±(99.9%) 75.585 us/op
                 extractOperationOutOfLoop·p0.00:   61407.232 us/op
                 extractOperationOutOfLoop·p0.50:   62128.128 us/op
                 extractOperationOutOfLoop·p0.90:   62324.736 us/op
                 extractOperationOutOfLoop·p0.95:   62455.808 us/op
                 extractOperationOutOfLoop·p0.99:   64009.011 us/op
                 extractOperationOutOfLoop·p0.999:  64618.496 us/op
                 extractOperationOutOfLoop·p0.9999: 64618.496 us/op
                 extractOperationOutOfLoop·p1.00:   64618.496 us/op

Iteration  12: 62075.133 ±(99.9%) 61.090 us/op
                 extractOperationOutOfLoop·p0.00:   60686.336 us/op
                 extractOperationOutOfLoop·p0.50:   62128.128 us/op
                 extractOperationOutOfLoop·p0.90:   62324.736 us/op
                 extractOperationOutOfLoop·p0.95:   62390.272 us/op
                 extractOperationOutOfLoop·p0.99:   62480.056 us/op
                 extractOperationOutOfLoop·p0.999:  62521.344 us/op
                 extractOperationOutOfLoop·p0.9999: 62521.344 us/op
                 extractOperationOutOfLoop·p1.00:   62521.344 us/op

Iteration  13: 62202.212 ±(99.9%) 73.055 us/op
                 extractOperationOutOfLoop·p0.00:   61669.376 us/op
                 extractOperationOutOfLoop·p0.50:   62128.128 us/op
                 extractOperationOutOfLoop·p0.90:   62455.808 us/op
                 extractOperationOutOfLoop·p0.95:   62521.344 us/op
                 extractOperationOutOfLoop·p0.99:   63758.664 us/op
                 extractOperationOutOfLoop·p0.999:  64815.104 us/op
                 extractOperationOutOfLoop·p0.9999: 64815.104 us/op
                 extractOperationOutOfLoop·p1.00:   64815.104 us/op

Iteration  14: 62126.907 ±(99.9%) 61.232 us/op
                 extractOperationOutOfLoop·p0.00:   61210.624 us/op
                 extractOperationOutOfLoop·p0.50:   62128.128 us/op
                 extractOperationOutOfLoop·p0.90:   62390.272 us/op
                 extractOperationOutOfLoop·p0.95:   62586.880 us/op
                 extractOperationOutOfLoop·p0.99:   62873.928 us/op
                 extractOperationOutOfLoop·p0.999:  62914.560 us/op
                 extractOperationOutOfLoop·p0.9999: 62914.560 us/op
                 extractOperationOutOfLoop·p1.00:   62914.560 us/op

Iteration  15: 62119.173 ±(99.9%) 63.012 us/op
                 extractOperationOutOfLoop·p0.00:   60293.120 us/op
                 extractOperationOutOfLoop·p0.50:   62128.128 us/op
                 extractOperationOutOfLoop·p0.90:   62324.736 us/op
                 extractOperationOutOfLoop·p0.95:   62383.718 us/op
                 extractOperationOutOfLoop·p0.99:   62546.248 us/op
                 extractOperationOutOfLoop·p0.999:  62586.880 us/op
                 extractOperationOutOfLoop·p0.9999: 62586.880 us/op
                 extractOperationOutOfLoop·p1.00:   62586.880 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  N = 2424
  mean =  62084.545 ±(99.9%) 14.250 us/op

  Histogram, us/op:
    [60000.000, 60500.000) = 1 
    [60500.000, 61000.000) = 5 
    [61000.000, 61500.000) = 34 
    [61500.000, 62000.000) = 576 
    [62000.000, 62500.000) = 1759 
    [62500.000, 63000.000) = 45 
    [63000.000, 63500.000) = 1 
    [63500.000, 64000.000) = 1 
    [64000.000, 64500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  60293.120 us/op
     p(50.0000) =  62062.592 us/op
     p(90.0000) =  62259.200 us/op
     p(95.0000) =  62390.272 us/op
     p(99.0000) =  62586.880 us/op
     p(99.9000) =  64200.704 us/op
     p(99.9900) =  64815.104 us/op
     p(99.9990) =  64815.104 us/op
     p(99.9999) =  64815.104 us/op
    p(100.0000) =  64815.104 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 91.30% complete, ETA 00:43:37
# Fork: 1 of 1
# Warmup Iteration   1: 1707780.779 ±(99.9%) 29207.344 us/op
# Warmup Iteration   2: 1702188.373 ±(99.9%) 4801.658 us/op
# Warmup Iteration   3: 1702537.899 ±(99.9%) 2400.829 us/op
# Warmup Iteration   4: 1702887.424 ±(99.9%) 3719.348 us/op
# Warmup Iteration   5: 1703586.475 ±(99.9%) 3036.835 us/op
Iteration   1: 1702188.373 ±(99.9%) 4801.658 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1701838.848 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration   2: 1702188.373 ±(99.9%) 3036.835 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration   3: 1703236.949 ±(99.9%) 4426.910 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration   4: 1703936.000 ±(99.9%) 4920.235 us/op
                 reduceLoops·p0.00:   1702887.424 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1707081.728 us/op
                 reduceLoops·p0.95:   1707081.728 us/op
                 reduceLoops·p0.99:   1707081.728 us/op
                 reduceLoops·p0.999:  1707081.728 us/op
                 reduceLoops·p0.9999: 1707081.728 us/op
                 reduceLoops·p1.00:   1707081.728 us/op

Iteration   5: 1702887.424 ±(99.9%) 0.001 us/op
                 reduceLoops·p0.00:   1702887.424 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration   6: 1703236.949 ±(99.9%) 2400.829 us/op
                 reduceLoops·p0.00:   1702887.424 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration   7: 1704285.525 ±(99.9%) 6073.670 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1704984.576 us/op
                 reduceLoops·p0.90:   1707081.728 us/op
                 reduceLoops·p0.95:   1707081.728 us/op
                 reduceLoops·p0.99:   1707081.728 us/op
                 reduceLoops·p0.999:  1707081.728 us/op
                 reduceLoops·p0.9999: 1707081.728 us/op
                 reduceLoops·p1.00:   1707081.728 us/op

Iteration   8: 1702537.899 ±(99.9%) 2400.829 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration   9: 1703236.949 ±(99.9%) 2400.829 us/op
                 reduceLoops·p0.00:   1702887.424 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration  10: 1702887.424 ±(99.9%) 0.001 us/op
                 reduceLoops·p0.00:   1702887.424 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration  11: 1702537.899 ±(99.9%) 2400.829 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration  12: 1702537.899 ±(99.9%) 2400.829 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration  13: 1703586.475 ±(99.9%) 6073.670 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1707081.728 us/op
                 reduceLoops·p0.95:   1707081.728 us/op
                 reduceLoops·p0.99:   1707081.728 us/op
                 reduceLoops·p0.999:  1707081.728 us/op
                 reduceLoops·p0.9999: 1707081.728 us/op
                 reduceLoops·p1.00:   1707081.728 us/op

Iteration  14: 1703236.949 ±(99.9%) 2400.829 us/op
                 reduceLoops·p0.00:   1702887.424 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration  15: 1702537.899 ±(99.9%) 2400.829 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  N = 90
  mean = 1703003.932 ±(99.9%) 469.903 us/op

  Histogram, us/op:
    [1700000.000, 1700500.000) = 0 
    [1700500.000, 1701000.000) = 12 
    [1701000.000, 1701500.000) = 0 
    [1701500.000, 1702000.000) = 0 
    [1702000.000, 1702500.000) = 0 
    [1702500.000, 1703000.000) = 64 
    [1703000.000, 1703500.000) = 0 
    [1703500.000, 1704000.000) = 0 
    [1704000.000, 1704500.000) = 0 
    [1704500.000, 1705000.000) = 11 
    [1705000.000, 1705500.000) = 0 
    [1705500.000, 1706000.000) = 0 
    [1706000.000, 1706500.000) = 0 
    [1706500.000, 1707000.000) = 0 
    [1707000.000, 1707500.000) = 3 

  Percentiles, us/op:
      p(0.0000) = 1700790.272 us/op
     p(50.0000) = 1702887.424 us/op
     p(90.0000) = 1704984.576 us/op
     p(95.0000) = 1704984.576 us/op
     p(99.0000) = 1707081.728 us/op
     p(99.9000) = 1707081.728 us/op
     p(99.9900) = 1707081.728 us/op
     p(99.9990) = 1707081.728 us/op
     p(99.9999) = 1707081.728 us/op
    p(100.0000) = 1707081.728 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 92.03% complete, ETA 00:39:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.709 ±(99.9%) 0.005 us/op
# Warmup Iteration   2: 0.616 ±(99.9%) 0.002 us/op
# Warmup Iteration   3: 0.650 ±(99.9%) 0.003 us/op
# Warmup Iteration   4: 0.619 ±(99.9%) 0.003 us/op
# Warmup Iteration   5: 0.629 ±(99.9%) 0.011 us/op
Iteration   1: 0.621 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.539 us/op
                 reduceSynchronizedBlocks·p0.50:   0.603 us/op
                 reduceSynchronizedBlocks·p0.90:   0.621 us/op
                 reduceSynchronizedBlocks·p0.95:   0.627 us/op
                 reduceSynchronizedBlocks·p0.99:   0.648 us/op
                 reduceSynchronizedBlocks·p0.999:  5.644 us/op
                 reduceSynchronizedBlocks·p0.9999: 26.940 us/op
                 reduceSynchronizedBlocks·p1.00:   69.504 us/op

Iteration   2: 0.619 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.546 us/op
                 reduceSynchronizedBlocks·p0.50:   0.603 us/op
                 reduceSynchronizedBlocks·p0.90:   0.621 us/op
                 reduceSynchronizedBlocks·p0.95:   0.627 us/op
                 reduceSynchronizedBlocks·p0.99:   0.647 us/op
                 reduceSynchronizedBlocks·p0.999:  5.277 us/op
                 reduceSynchronizedBlocks·p0.9999: 20.853 us/op
                 reduceSynchronizedBlocks·p1.00:   66.304 us/op

Iteration   3: 0.635 ±(99.9%) 0.004 us/op
                 reduceSynchronizedBlocks·p0.00:   0.536 us/op
                 reduceSynchronizedBlocks·p0.50:   0.602 us/op
                 reduceSynchronizedBlocks·p0.90:   0.623 us/op
                 reduceSynchronizedBlocks·p0.95:   0.635 us/op
                 reduceSynchronizedBlocks·p0.99:   0.935 us/op
                 reduceSynchronizedBlocks·p0.999:  6.390 us/op
                 reduceSynchronizedBlocks·p0.9999: 30.030 us/op
                 reduceSynchronizedBlocks·p1.00:   98.432 us/op

Iteration   4: 0.625 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.538 us/op
                 reduceSynchronizedBlocks·p0.50:   0.603 us/op
                 reduceSynchronizedBlocks·p0.90:   0.622 us/op
                 reduceSynchronizedBlocks·p0.95:   0.629 us/op
                 reduceSynchronizedBlocks·p0.99:   0.884 us/op
                 reduceSynchronizedBlocks·p0.999:  5.791 us/op
                 reduceSynchronizedBlocks·p0.9999: 24.982 us/op
                 reduceSynchronizedBlocks·p1.00:   93.312 us/op

Iteration   5: 0.621 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.544 us/op
                 reduceSynchronizedBlocks·p0.50:   0.601 us/op
                 reduceSynchronizedBlocks·p0.90:   0.620 us/op
                 reduceSynchronizedBlocks·p0.95:   0.626 us/op
                 reduceSynchronizedBlocks·p0.99:   0.647 us/op
                 reduceSynchronizedBlocks·p0.999:  6.390 us/op
                 reduceSynchronizedBlocks·p0.9999: 24.854 us/op
                 reduceSynchronizedBlocks·p1.00:   55.424 us/op

Iteration   6: 0.622 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.533 us/op
                 reduceSynchronizedBlocks·p0.50:   0.602 us/op
                 reduceSynchronizedBlocks·p0.90:   0.620 us/op
                 reduceSynchronizedBlocks·p0.95:   0.627 us/op
                 reduceSynchronizedBlocks·p0.99:   0.648 us/op
                 reduceSynchronizedBlocks·p0.999:  6.014 us/op
                 reduceSynchronizedBlocks·p0.9999: 25.841 us/op
                 reduceSynchronizedBlocks·p1.00:   90.880 us/op

Iteration   7: 0.619 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.544 us/op
                 reduceSynchronizedBlocks·p0.50:   0.601 us/op
                 reduceSynchronizedBlocks·p0.90:   0.620 us/op
                 reduceSynchronizedBlocks·p0.95:   0.627 us/op
                 reduceSynchronizedBlocks·p0.99:   0.646 us/op
                 reduceSynchronizedBlocks·p0.999:  5.561 us/op
                 reduceSynchronizedBlocks·p0.9999: 23.585 us/op
                 reduceSynchronizedBlocks·p1.00:   59.968 us/op

Iteration   8: 0.621 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.537 us/op
                 reduceSynchronizedBlocks·p0.50:   0.603 us/op
                 reduceSynchronizedBlocks·p0.90:   0.621 us/op
                 reduceSynchronizedBlocks·p0.95:   0.628 us/op
                 reduceSynchronizedBlocks·p0.99:   0.646 us/op
                 reduceSynchronizedBlocks·p0.999:  5.505 us/op
                 reduceSynchronizedBlocks·p0.9999: 21.492 us/op
                 reduceSynchronizedBlocks·p1.00:   140.800 us/op

Iteration   9: 0.646 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.553 us/op
                 reduceSynchronizedBlocks·p0.50:   0.630 us/op
                 reduceSynchronizedBlocks·p0.90:   0.652 us/op
                 reduceSynchronizedBlocks·p0.95:   0.659 us/op
                 reduceSynchronizedBlocks·p0.99:   0.684 us/op
                 reduceSynchronizedBlocks·p0.999:  5.340 us/op
                 reduceSynchronizedBlocks·p0.9999: 20.338 us/op
                 reduceSynchronizedBlocks·p1.00:   84.736 us/op

Iteration  10: 0.648 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.545 us/op
                 reduceSynchronizedBlocks·p0.50:   0.629 us/op
                 reduceSynchronizedBlocks·p0.90:   0.651 us/op
                 reduceSynchronizedBlocks·p0.95:   0.659 us/op
                 reduceSynchronizedBlocks·p0.99:   0.692 us/op
                 reduceSynchronizedBlocks·p0.999:  5.436 us/op
                 reduceSynchronizedBlocks·p0.9999: 20.855 us/op
                 reduceSynchronizedBlocks·p1.00:   108.032 us/op

Iteration  11: 0.649 ±(99.9%) 0.004 us/op
                 reduceSynchronizedBlocks·p0.00:   0.544 us/op
                 reduceSynchronizedBlocks·p0.50:   0.631 us/op
                 reduceSynchronizedBlocks·p0.90:   0.653 us/op
                 reduceSynchronizedBlocks·p0.95:   0.661 us/op
                 reduceSynchronizedBlocks·p0.99:   0.698 us/op
                 reduceSynchronizedBlocks·p0.999:  5.467 us/op
                 reduceSynchronizedBlocks·p0.9999: 18.728 us/op
                 reduceSynchronizedBlocks·p1.00:   227.072 us/op

Iteration  12: 0.667 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.566 us/op
                 reduceSynchronizedBlocks·p0.50:   0.648 us/op
                 reduceSynchronizedBlocks·p0.90:   0.671 us/op
                 reduceSynchronizedBlocks·p0.95:   0.679 us/op
                 reduceSynchronizedBlocks·p0.99:   0.710 us/op
                 reduceSynchronizedBlocks·p0.999:  5.557 us/op
                 reduceSynchronizedBlocks·p0.9999: 20.385 us/op
                 reduceSynchronizedBlocks·p1.00:   125.568 us/op

Iteration  13: 0.672 ±(99.9%) 0.009 us/op
                 reduceSynchronizedBlocks·p0.00:   0.566 us/op
                 reduceSynchronizedBlocks·p0.50:   0.650 us/op
                 reduceSynchronizedBlocks·p0.90:   0.674 us/op
                 reduceSynchronizedBlocks·p0.95:   0.682 us/op
                 reduceSynchronizedBlocks·p0.99:   0.710 us/op
                 reduceSynchronizedBlocks·p0.999:  5.574 us/op
                 reduceSynchronizedBlocks·p0.9999: 18.000 us/op
                 reduceSynchronizedBlocks·p1.00:   421.376 us/op

Iteration  14: 0.663 ±(99.9%) 0.002 us/op
                 reduceSynchronizedBlocks·p0.00:   0.570 us/op
                 reduceSynchronizedBlocks·p0.50:   0.648 us/op
                 reduceSynchronizedBlocks·p0.90:   0.671 us/op
                 reduceSynchronizedBlocks·p0.95:   0.680 us/op
                 reduceSynchronizedBlocks·p0.99:   0.710 us/op
                 reduceSynchronizedBlocks·p0.999:  5.232 us/op
                 reduceSynchronizedBlocks·p0.9999: 12.158 us/op
                 reduceSynchronizedBlocks·p1.00:   55.808 us/op

Iteration  15: 0.665 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.566 us/op
                 reduceSynchronizedBlocks·p0.50:   0.648 us/op
                 reduceSynchronizedBlocks·p0.90:   0.671 us/op
                 reduceSynchronizedBlocks·p0.95:   0.679 us/op
                 reduceSynchronizedBlocks·p0.99:   0.707 us/op
                 reduceSynchronizedBlocks·p0.999:  5.273 us/op
                 reduceSynchronizedBlocks·p0.9999: 19.281 us/op
                 reduceSynchronizedBlocks·p1.00:   143.360 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  N = 3979881
  mean =      0.639 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 3979841 
    [ 50.000, 100.000) = 29 
    [100.000, 150.000) = 7 
    [150.000, 200.000) = 0 
    [200.000, 250.000) = 1 
    [250.000, 300.000) = 0 
    [300.000, 350.000) = 0 
    [350.000, 400.000) = 2 
    [400.000, 450.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      0.533 us/op
     p(50.0000) =      0.616 us/op
     p(90.0000) =      0.656 us/op
     p(95.0000) =      0.667 us/op
     p(99.0000) =      0.702 us/op
     p(99.9000) =      5.576 us/op
     p(99.9900) =     22.624 us/op
     p(99.9990) =     50.381 us/op
     p(99.9999) =    229.858 us/op
    p(100.0000) =    421.376 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 92.75% complete, ETA 00:36:21
# Fork: 1 of 1
# Warmup Iteration   1: 7836.714 ±(99.9%) 41.238 us/op
# Warmup Iteration   2: 7836.335 ±(99.9%) 2.528 us/op
# Warmup Iteration   3: 7840.271 ±(99.9%) 2.839 us/op
# Warmup Iteration   4: 7839.487 ±(99.9%) 4.507 us/op
# Warmup Iteration   5: 7846.046 ±(99.9%) 3.528 us/op
Iteration   1: 7845.345 ±(99.9%) 2.545 us/op
                 reduceYoungObjects·p0.00:   7806.976 us/op
                 reduceYoungObjects·p0.50:   7839.744 us/op
                 reduceYoungObjects·p0.90:   7872.512 us/op
                 reduceYoungObjects·p0.95:   7897.088 us/op
                 reduceYoungObjects·p0.99:   7962.624 us/op
                 reduceYoungObjects·p0.999:  8066.048 us/op
                 reduceYoungObjects·p0.9999: 8077.312 us/op
                 reduceYoungObjects·p1.00:   8077.312 us/op

Iteration   2: 7839.468 ±(99.9%) 7.193 us/op
                 reduceYoungObjects·p0.00:   7815.168 us/op
                 reduceYoungObjects·p0.50:   7831.552 us/op
                 reduceYoungObjects·p0.90:   7856.128 us/op
                 reduceYoungObjects·p0.95:   7872.512 us/op
                 reduceYoungObjects·p0.99:   7979.008 us/op
                 reduceYoungObjects·p0.999:  9822.732 us/op
                 reduceYoungObjects·p0.9999: 10469.376 us/op
                 reduceYoungObjects·p1.00:   10469.376 us/op

Iteration   3: 7839.969 ±(99.9%) 3.287 us/op
                 reduceYoungObjects·p0.00:   7806.976 us/op
                 reduceYoungObjects·p0.50:   7831.552 us/op
                 reduceYoungObjects·p0.90:   7864.320 us/op
                 reduceYoungObjects·p0.95:   7880.704 us/op
                 reduceYoungObjects·p0.99:   7987.200 us/op
                 reduceYoungObjects·p0.999:  8483.439 us/op
                 reduceYoungObjects·p0.9999: 8650.752 us/op
                 reduceYoungObjects·p1.00:   8650.752 us/op

Iteration   4: 7839.249 ±(99.9%) 2.366 us/op
                 reduceYoungObjects·p0.00:   7806.976 us/op
                 reduceYoungObjects·p0.50:   7831.552 us/op
                 reduceYoungObjects·p0.90:   7864.320 us/op
                 reduceYoungObjects·p0.95:   7872.512 us/op
                 reduceYoungObjects·p0.99:   7964.590 us/op
                 reduceYoungObjects·p0.999:  8093.696 us/op
                 reduceYoungObjects·p0.9999: 8093.696 us/op
                 reduceYoungObjects·p1.00:   8093.696 us/op

Iteration   5: 7842.481 ±(99.9%) 3.777 us/op
                 reduceYoungObjects·p0.00:   7806.976 us/op
                 reduceYoungObjects·p0.50:   7831.552 us/op
                 reduceYoungObjects·p0.90:   7864.320 us/op
                 reduceYoungObjects·p0.95:   7882.342 us/op
                 reduceYoungObjects·p0.99:   8019.968 us/op
                 reduceYoungObjects·p0.999:  8333.230 us/op
                 reduceYoungObjects·p0.9999: 8355.840 us/op
                 reduceYoungObjects·p1.00:   8355.840 us/op

Iteration   6: 7844.383 ±(99.9%) 4.668 us/op
                 reduceYoungObjects·p0.00:   7806.976 us/op
                 reduceYoungObjects·p0.50:   7831.552 us/op
                 reduceYoungObjects·p0.90:   7864.320 us/op
                 reduceYoungObjects·p0.95:   7880.704 us/op
                 reduceYoungObjects·p0.99:   8054.374 us/op
                 reduceYoungObjects·p0.999:  8547.336 us/op
                 reduceYoungObjects·p0.9999: 8601.600 us/op
                 reduceYoungObjects·p1.00:   8601.600 us/op

Iteration   7: 7845.621 ±(99.9%) 3.143 us/op
                 reduceYoungObjects·p0.00:   7806.976 us/op
                 reduceYoungObjects·p0.50:   7839.744 us/op
                 reduceYoungObjects·p0.90:   7872.512 us/op
                 reduceYoungObjects·p0.95:   7897.088 us/op
                 reduceYoungObjects·p0.99:   8005.632 us/op
                 reduceYoungObjects·p0.999:  8218.010 us/op
                 reduceYoungObjects·p0.9999: 8224.768 us/op
                 reduceYoungObjects·p1.00:   8224.768 us/op

Iteration   8: 7839.770 ±(99.9%) 2.275 us/op
                 reduceYoungObjects·p0.00:   7806.976 us/op
                 reduceYoungObjects·p0.50:   7831.552 us/op
                 reduceYoungObjects·p0.90:   7864.320 us/op
                 reduceYoungObjects·p0.95:   7872.512 us/op
                 reduceYoungObjects·p0.99:   7941.980 us/op
                 reduceYoungObjects·p0.999:  8099.627 us/op
                 reduceYoungObjects·p0.9999: 8101.888 us/op
                 reduceYoungObjects·p1.00:   8101.888 us/op

Iteration   9: 7840.284 ±(99.9%) 2.750 us/op
                 reduceYoungObjects·p0.00:   7806.976 us/op
                 reduceYoungObjects·p0.50:   7831.552 us/op
                 reduceYoungObjects·p0.90:   7864.320 us/op
                 reduceYoungObjects·p0.95:   7888.896 us/op
                 reduceYoungObjects·p0.99:   7979.008 us/op
                 reduceYoungObjects·p0.999:  8112.898 us/op
                 reduceYoungObjects·p0.9999: 8126.464 us/op
                 reduceYoungObjects·p1.00:   8126.464 us/op

Iteration  10: 7839.789 ±(99.9%) 2.341 us/op
                 reduceYoungObjects·p0.00:   7806.976 us/op
                 reduceYoungObjects·p0.50:   7831.552 us/op
                 reduceYoungObjects·p0.90:   7864.320 us/op
                 reduceYoungObjects·p0.95:   7880.704 us/op
                 reduceYoungObjects·p0.99:   7940.014 us/op
                 reduceYoungObjects·p0.999:  8066.859 us/op
                 reduceYoungObjects·p0.9999: 8069.120 us/op
                 reduceYoungObjects·p1.00:   8069.120 us/op

Iteration  11: 7843.239 ±(99.9%) 3.111 us/op
                 reduceYoungObjects·p0.00:   7806.976 us/op
                 reduceYoungObjects·p0.50:   7831.552 us/op
                 reduceYoungObjects·p0.90:   7864.320 us/op
                 reduceYoungObjects·p0.95:   7888.896 us/op
                 reduceYoungObjects·p0.99:   8013.742 us/op
                 reduceYoungObjects·p0.999:  8091.435 us/op
                 reduceYoungObjects·p0.9999: 8093.696 us/op
                 reduceYoungObjects·p1.00:   8093.696 us/op

Iteration  12: 7854.841 ±(99.9%) 5.674 us/op
                 reduceYoungObjects·p0.00:   7806.976 us/op
                 reduceYoungObjects·p0.50:   7839.744 us/op
                 reduceYoungObjects·p0.90:   7888.896 us/op
                 reduceYoungObjects·p0.95:   7932.314 us/op
                 reduceYoungObjects·p0.99:   8188.068 us/op
                 reduceYoungObjects·p0.999:  8346.862 us/op
                 reduceYoungObjects·p0.9999: 8355.840 us/op
                 reduceYoungObjects·p1.00:   8355.840 us/op

Iteration  13: 7845.235 ±(99.9%) 7.907 us/op
                 reduceYoungObjects·p0.00:   7806.976 us/op
                 reduceYoungObjects·p0.50:   7831.552 us/op
                 reduceYoungObjects·p0.90:   7872.512 us/op
                 reduceYoungObjects·p0.95:   7888.896 us/op
                 reduceYoungObjects·p0.99:   8019.968 us/op
                 reduceYoungObjects·p0.999:  9984.410 us/op
                 reduceYoungObjects·p0.9999: 10633.216 us/op
                 reduceYoungObjects·p1.00:   10633.216 us/op

Iteration  14: 7840.753 ±(99.9%) 2.990 us/op
                 reduceYoungObjects·p0.00:   7806.976 us/op
                 reduceYoungObjects·p0.50:   7831.552 us/op
                 reduceYoungObjects·p0.90:   7864.320 us/op
                 reduceYoungObjects·p0.95:   7880.704 us/op
                 reduceYoungObjects·p0.99:   8011.776 us/op
                 reduceYoungObjects·p0.999:  8175.616 us/op
                 reduceYoungObjects·p0.9999: 8175.616 us/op
                 reduceYoungObjects·p1.00:   8175.616 us/op

Iteration  15: 7841.742 ±(99.9%) 2.962 us/op
                 reduceYoungObjects·p0.00:   7806.976 us/op
                 reduceYoungObjects·p0.50:   7831.552 us/op
                 reduceYoungObjects·p0.90:   7864.320 us/op
                 reduceYoungObjects·p0.95:   7888.896 us/op
                 reduceYoungObjects·p0.99:   8021.934 us/op
                 reduceYoungObjects·p0.999:  8111.489 us/op
                 reduceYoungObjects·p0.9999: 8118.272 us/op
                 reduceYoungObjects·p1.00:   8118.272 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  N = 19120
  mean =   7842.810 ±(99.9%) 1.078 us/op

  Histogram, us/op:
    [ 7000.000,  7250.000) = 0 
    [ 7250.000,  7500.000) = 0 
    [ 7500.000,  7750.000) = 0 
    [ 7750.000,  8000.000) = 18924 
    [ 8000.000,  8250.000) = 176 
    [ 8250.000,  8500.000) = 16 
    [ 8500.000,  8750.000) = 2 
    [ 8750.000,  9000.000) = 0 
    [ 9000.000,  9250.000) = 0 
    [ 9250.000,  9500.000) = 0 
    [ 9500.000,  9750.000) = 0 
    [ 9750.000, 10000.000) = 0 
    [10000.000, 10250.000) = 0 
    [10250.000, 10500.000) = 1 
    [10500.000, 10750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   7806.976 us/op
     p(50.0000) =   7831.552 us/op
     p(90.0000) =   7864.320 us/op
     p(95.0000) =   7888.896 us/op
     p(99.0000) =   8003.584 us/op
     p(99.9000) =   8257.536 us/op
     p(99.9900) =  10483.778 us/op
     p(99.9990) =  10633.216 us/op
     p(99.9999) =  10633.216 us/op
    p(100.0000) =  10633.216 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 93.48% complete, ETA 00:32:43
# Fork: 1 of 1
# Warmup Iteration   1: 40293.013 ±(99.9%) 541.125 us/op
# Warmup Iteration   2: 38304.662 ±(99.9%) 374.003 us/op
# Warmup Iteration   3: 35546.308 ±(99.9%) 399.946 us/op
# Warmup Iteration   4: 36964.964 ±(99.9%) 387.857 us/op
# Warmup Iteration   5: 33731.401 ±(99.9%) 336.368 us/op
Iteration   1: 36220.750 ±(99.9%) 381.133 us/op
                 redundantCode·p0.00:   35782.656 us/op
                 redundantCode·p0.50:   35979.264 us/op
                 redundantCode·p0.90:   36241.408 us/op
                 redundantCode·p0.95:   36372.480 us/op
                 redundantCode·p0.99:   45770.342 us/op
                 redundantCode·p0.999:  59572.224 us/op
                 redundantCode·p0.9999: 59572.224 us/op
                 redundantCode·p1.00:   59572.224 us/op

Iteration   2: 34467.190 ±(99.9%) 224.491 us/op
                 redundantCode·p0.00:   34078.720 us/op
                 redundantCode·p0.50:   34340.864 us/op
                 redundantCode·p0.90:   34603.008 us/op
                 redundantCode·p0.95:   34734.080 us/op
                 redundantCode·p0.99:   35890.790 us/op
                 redundantCode·p0.999:  52625.408 us/op
                 redundantCode·p0.9999: 52625.408 us/op
                 redundantCode·p1.00:   52625.408 us/op

Iteration   3: 34303.607 ±(99.9%) 284.325 us/op
                 redundantCode·p0.00:   33947.648 us/op
                 redundantCode·p0.50:   34144.256 us/op
                 redundantCode·p0.90:   34406.400 us/op
                 redundantCode·p0.95:   34429.338 us/op
                 redundantCode·p0.99:   35935.355 us/op
                 redundantCode·p0.999:  57344.000 us/op
                 redundantCode·p0.9999: 57344.000 us/op
                 redundantCode·p1.00:   57344.000 us/op

Iteration   4: 39149.312 ±(99.9%) 184.252 us/op
                 redundantCode·p0.00:   38666.240 us/op
                 redundantCode·p0.50:   38993.920 us/op
                 redundantCode·p0.90:   39256.064 us/op
                 redundantCode·p0.95:   39387.136 us/op
                 redundantCode·p0.99:   45304.381 us/op
                 redundantCode·p0.999:  48627.712 us/op
                 redundantCode·p0.9999: 48627.712 us/op
                 redundantCode·p1.00:   48627.712 us/op

Iteration   5: 39574.678 ±(99.9%) 168.638 us/op
                 redundantCode·p0.00:   39321.600 us/op
                 redundantCode·p0.50:   39452.672 us/op
                 redundantCode·p0.90:   39649.280 us/op
                 redundantCode·p0.95:   39845.888 us/op
                 redundantCode·p0.99:   43584.061 us/op
                 redundantCode·p0.999:  50135.040 us/op
                 redundantCode·p0.9999: 50135.040 us/op
                 redundantCode·p1.00:   50135.040 us/op

Iteration   6: 34759.794 ±(99.9%) 215.855 us/op
                 redundantCode·p0.00:   34406.400 us/op
                 redundantCode·p0.50:   34603.008 us/op
                 redundantCode·p0.90:   34799.616 us/op
                 redundantCode·p0.95:   34865.152 us/op
                 redundantCode·p0.99:   41602.253 us/op
                 redundantCode·p0.999:  46399.488 us/op
                 redundantCode·p0.9999: 46399.488 us/op
                 redundantCode·p1.00:   46399.488 us/op

Iteration   7: 37092.648 ±(99.9%) 406.544 us/op
                 redundantCode·p0.00:   36634.624 us/op
                 redundantCode·p0.50:   36831.232 us/op
                 redundantCode·p0.90:   37093.376 us/op
                 redundantCode·p0.95:   37289.984 us/op
                 redundantCode·p0.99:   50336.891 us/op
                 redundantCode·p0.999:  58523.648 us/op
                 redundantCode·p0.9999: 58523.648 us/op
                 redundantCode·p1.00:   58523.648 us/op

Iteration   8: 38643.467 ±(99.9%) 291.953 us/op
                 redundantCode·p0.00:   38207.488 us/op
                 redundantCode·p0.50:   38535.168 us/op
                 redundantCode·p0.90:   38731.776 us/op
                 redundantCode·p0.95:   38862.848 us/op
                 redundantCode·p0.99:   41772.646 us/op
                 redundantCode·p0.999:  60358.656 us/op
                 redundantCode·p0.9999: 60358.656 us/op
                 redundantCode·p1.00:   60358.656 us/op

Iteration   9: 41985.170 ±(99.9%) 404.985 us/op
                 redundantCode·p0.00:   40632.320 us/op
                 redundantCode·p0.50:   41156.608 us/op
                 redundantCode·p0.90:   43188.224 us/op
                 redundantCode·p0.95:   43319.296 us/op
                 redundantCode·p0.99:   52880.998 us/op
                 redundantCode·p0.999:  60489.728 us/op
                 redundantCode·p0.9999: 60489.728 us/op
                 redundantCode·p1.00:   60489.728 us/op

Iteration  10: 32570.647 ±(99.9%) 311.405 us/op
                 redundantCode·p0.00:   32178.176 us/op
                 redundantCode·p0.50:   32374.784 us/op
                 redundantCode·p0.90:   32607.437 us/op
                 redundantCode·p0.95:   32753.254 us/op
                 redundantCode·p0.99:   38763.233 us/op
                 redundantCode·p0.999:  59179.008 us/op
                 redundantCode·p0.9999: 59179.008 us/op
                 redundantCode·p1.00:   59179.008 us/op

Iteration  11: 35977.614 ±(99.9%) 159.960 us/op
                 redundantCode·p0.00:   35651.584 us/op
                 redundantCode·p0.50:   35913.728 us/op
                 redundantCode·p0.90:   36175.872 us/op
                 redundantCode·p0.95:   36306.944 us/op
                 redundantCode·p0.99:   37715.313 us/op
                 redundantCode·p0.999:  47775.744 us/op
                 redundantCode·p0.9999: 47775.744 us/op
                 redundantCode·p1.00:   47775.744 us/op

Iteration  12: 40379.689 ±(99.9%) 308.765 us/op
                 redundantCode·p0.00:   39059.456 us/op
                 redundantCode·p0.50:   39714.816 us/op
                 redundantCode·p0.90:   41549.824 us/op
                 redundantCode·p0.95:   41746.432 us/op
                 redundantCode·p0.99:   49108.746 us/op
                 redundantCode·p0.999:  51052.544 us/op
                 redundantCode·p0.9999: 51052.544 us/op
                 redundantCode·p1.00:   51052.544 us/op

Iteration  13: 39158.784 ±(99.9%) 262.437 us/op
                 redundantCode·p0.00:   38207.488 us/op
                 redundantCode·p0.50:   38633.472 us/op
                 redundantCode·p0.90:   39976.960 us/op
                 redundantCode·p0.95:   40239.104 us/op
                 redundantCode·p0.99:   47571.272 us/op
                 redundantCode·p0.999:  48365.568 us/op
                 redundantCode·p0.9999: 48365.568 us/op
                 redundantCode·p1.00:   48365.568 us/op

Iteration  14: 34952.572 ±(99.9%) 324.378 us/op
                 redundantCode·p0.00:   33456.128 us/op
                 redundantCode·p0.50:   35651.584 us/op
                 redundantCode·p0.90:   35848.192 us/op
                 redundantCode·p0.95:   35979.264 us/op
                 redundantCode·p0.99:   37945.999 us/op
                 redundantCode·p0.999:  55443.456 us/op
                 redundantCode·p0.9999: 55443.456 us/op
                 redundantCode·p1.00:   55443.456 us/op

Iteration  15: 42058.692 ±(99.9%) 361.947 us/op
                 redundantCode·p0.00:   40894.464 us/op
                 redundantCode·p0.50:   42434.560 us/op
                 redundantCode·p0.90:   42801.562 us/op
                 redundantCode·p0.95:   42926.080 us/op
                 redundantCode·p0.99:   47737.078 us/op
                 redundantCode·p0.999:  63242.240 us/op
                 redundantCode·p0.9999: 63242.240 us/op
                 redundantCode·p1.00:   63242.240 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  N = 4036
  mean =  37202.527 ±(99.9%) 165.391 us/op

  Histogram, us/op:
    [30000.000, 32500.000) = 246 
    [32500.000, 35000.000) = 1038 
    [35000.000, 37500.000) = 977 
    [37500.000, 40000.000) = 1133 
    [40000.000, 42500.000) = 401 
    [42500.000, 45000.000) = 210 
    [45000.000, 47500.000) = 9 
    [47500.000, 50000.000) = 7 
    [50000.000, 52500.000) = 3 
    [52500.000, 55000.000) = 2 
    [55000.000, 57500.000) = 4 
    [57500.000, 60000.000) = 3 
    [60000.000, 62500.000) = 2 
    [62500.000, 65000.000) = 1 
    [65000.000, 67500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  32178.176 us/op
     p(50.0000) =  36700.160 us/op
     p(90.0000) =  41156.608 us/op
     p(95.0000) =  42663.936 us/op
     p(99.0000) =  43360.584 us/op
     p(99.9000) =  59557.675 us/op
     p(99.9900) =  63242.240 us/op
     p(99.9990) =  63242.240 us/op
     p(99.9999) =  63242.240 us/op
    p(100.0000) =  63242.240 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 94.20% complete, ETA 00:29:05
# Fork: 1 of 1
# Warmup Iteration   1: 34453.405 ±(99.9%) 386.096 us/op
# Warmup Iteration   2: 34195.701 ±(99.9%) 134.194 us/op
# Warmup Iteration   3: 34238.296 ±(99.9%) 46.009 us/op
# Warmup Iteration   4: 34231.563 ±(99.9%) 80.066 us/op
# Warmup Iteration   5: 34504.478 ±(99.9%) 100.184 us/op
Iteration   1: 34254.904 ±(99.9%) 57.546 us/op
                 split·p0.00:   33947.648 us/op
                 split·p0.50:   34209.792 us/op
                 split·p0.90:   34537.472 us/op
                 split·p0.95:   34822.554 us/op
                 split·p0.99:   35932.078 us/op
                 split·p0.999:  36765.696 us/op
                 split·p0.9999: 36765.696 us/op
                 split·p1.00:   36765.696 us/op

Iteration   2: 34259.393 ±(99.9%) 54.285 us/op
                 split·p0.00:   34013.184 us/op
                 split·p0.50:   34209.792 us/op
                 split·p0.90:   34452.275 us/op
                 split·p0.95:   34691.482 us/op
                 split·p0.99:   35127.296 us/op
                 split·p0.999:  37683.200 us/op
                 split·p0.9999: 37683.200 us/op
                 split·p1.00:   37683.200 us/op

Iteration   3: 34295.976 ±(99.9%) 128.390 us/op
                 split·p0.00:   33947.648 us/op
                 split·p0.50:   34144.256 us/op
                 split·p0.90:   34517.811 us/op
                 split·p0.95:   35084.698 us/op
                 split·p0.99:   37878.497 us/op
                 split·p0.999:  39256.064 us/op
                 split·p0.9999: 39256.064 us/op
                 split·p1.00:   39256.064 us/op

Iteration   4: 34214.505 ±(99.9%) 41.676 us/op
                 split·p0.00:   33947.648 us/op
                 split·p0.50:   34144.256 us/op
                 split·p0.90:   34406.400 us/op
                 split·p0.95:   34668.544 us/op
                 split·p0.99:   35262.956 us/op
                 split·p0.999:  35389.440 us/op
                 split·p0.9999: 35389.440 us/op
                 split·p1.00:   35389.440 us/op

Iteration   5: 34188.319 ±(99.9%) 45.037 us/op
                 split·p0.00:   33882.112 us/op
                 split·p0.50:   34144.256 us/op
                 split·p0.90:   34471.936 us/op
                 split·p0.95:   34668.544 us/op
                 split·p0.99:   34880.881 us/op
                 split·p0.999:  36372.480 us/op
                 split·p0.9999: 36372.480 us/op
                 split·p1.00:   36372.480 us/op

Iteration   6: 34254.904 ±(99.9%) 49.115 us/op
                 split·p0.00:   34013.184 us/op
                 split·p0.50:   34209.792 us/op
                 split·p0.90:   34471.936 us/op
                 split·p0.95:   34668.544 us/op
                 split·p0.99:   35028.337 us/op
                 split·p0.999:  37093.376 us/op
                 split·p0.9999: 37093.376 us/op
                 split·p1.00:   37093.376 us/op

Iteration   7: 34160.137 ±(99.9%) 36.939 us/op
                 split·p0.00:   33947.648 us/op
                 split·p0.50:   34078.720 us/op
                 split·p0.90:   34380.186 us/op
                 split·p0.95:   34603.008 us/op
                 split·p0.99:   35000.156 us/op
                 split·p0.999:  35192.832 us/op
                 split·p0.9999: 35192.832 us/op
                 split·p1.00:   35192.832 us/op

Iteration   8: 34236.500 ±(99.9%) 71.649 us/op
                 split·p0.00:   33947.648 us/op
                 split·p0.50:   34144.256 us/op
                 split·p0.90:   34340.864 us/op
                 split·p0.95:   34691.482 us/op
                 split·p0.99:   35846.881 us/op
                 split·p0.999:  38666.240 us/op
                 split·p0.9999: 38666.240 us/op
                 split·p1.00:   38666.240 us/op

Iteration   9: 34186.754 ±(99.9%) 99.074 us/op
                 split·p0.00:   33947.648 us/op
                 split·p0.50:   34078.720 us/op
                 split·p0.90:   34275.328 us/op
                 split·p0.95:   34471.936 us/op
                 split·p0.99:   36183.736 us/op
                 split·p0.999:  41222.144 us/op
                 split·p0.9999: 41222.144 us/op
                 split·p1.00:   41222.144 us/op

Iteration  10: 34320.216 ±(99.9%) 135.835 us/op
                 split·p0.00:   33947.648 us/op
                 split·p0.50:   34144.256 us/op
                 split·p0.90:   34406.400 us/op
                 split·p0.95:   35281.306 us/op
                 split·p0.99:   38023.332 us/op
                 split·p0.999:  40894.464 us/op
                 split·p0.9999: 40894.464 us/op
                 split·p1.00:   40894.464 us/op

Iteration  11: 34182.504 ±(99.9%) 48.619 us/op
                 split·p0.00:   33947.648 us/op
                 split·p0.50:   34078.720 us/op
                 split·p0.90:   34471.936 us/op
                 split·p0.95:   34734.080 us/op
                 split·p0.99:   35154.821 us/op
                 split·p0.999:  36044.800 us/op
                 split·p0.9999: 36044.800 us/op
                 split·p1.00:   36044.800 us/op

Iteration  12: 34460.863 ±(99.9%) 147.548 us/op
                 split·p0.00:   33947.648 us/op
                 split·p0.50:   34144.256 us/op
                 split·p0.90:   35127.296 us/op
                 split·p0.95:   35769.549 us/op
                 split·p0.99:   37015.388 us/op
                 split·p0.999:  42336.256 us/op
                 split·p0.9999: 42336.256 us/op
                 split·p1.00:   42336.256 us/op

Iteration  13: 34188.990 ±(99.9%) 36.209 us/op
                 split·p0.00:   33947.648 us/op
                 split·p0.50:   34144.256 us/op
                 split·p0.90:   34406.400 us/op
                 split·p0.95:   34557.133 us/op
                 split·p0.99:   34934.620 us/op
                 split·p0.999:  35454.976 us/op
                 split·p0.9999: 35454.976 us/op
                 split·p1.00:   35454.976 us/op

Iteration  14: 34313.707 ±(99.9%) 118.333 us/op
                 split·p0.00:   34013.184 us/op
                 split·p0.50:   34209.792 us/op
                 split·p0.90:   34471.936 us/op
                 split·p0.95:   34668.544 us/op
                 split·p0.99:   36018.586 us/op
                 split·p0.999:  41484.288 us/op
                 split·p0.9999: 41484.288 us/op
                 split·p1.00:   41484.288 us/op

Iteration  15: 34171.768 ±(99.9%) 46.029 us/op
                 split·p0.00:   33947.648 us/op
                 split·p0.50:   34144.256 us/op
                 split·p0.90:   34340.864 us/op
                 split·p0.95:   34557.133 us/op
                 split·p0.99:   34934.620 us/op
                 split·p0.999:  37027.840 us/op
                 split·p0.9999: 37027.840 us/op
                 split·p1.00:   37027.840 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  N = 4384
  mean =  34245.774 ±(99.9%) 21.685 us/op

  Histogram, us/op:
    [33000.000, 34000.000) = 66 
    [34000.000, 35000.000) = 4199 
    [35000.000, 36000.000) = 70 
    [36000.000, 37000.000) = 28 
    [37000.000, 38000.000) = 12 
    [38000.000, 39000.000) = 2 
    [39000.000, 40000.000) = 2 
    [40000.000, 41000.000) = 2 
    [41000.000, 42000.000) = 2 

  Percentiles, us/op:
      p(0.0000) =  33882.112 us/op
     p(50.0000) =  34144.256 us/op
     p(90.0000) =  34471.936 us/op
     p(95.0000) =  34799.616 us/op
     p(99.0000) =  36175.872 us/op
     p(99.9000) =  40894.464 us/op
     p(99.9900) =  42336.256 us/op
     p(99.9990) =  42336.256 us/op
     p(99.9999) =  42336.256 us/op
    p(100.0000) =  42336.256 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 94.92% complete, ETA 00:25:27
# Fork: 1 of 1
# Warmup Iteration   1: 27833.723 ±(99.9%) 643.434 us/op
# Warmup Iteration   2: 27537.668 ±(99.9%) 573.547 us/op
# Warmup Iteration   3: 27710.836 ±(99.9%) 630.064 us/op
# Warmup Iteration   4: 27664.339 ±(99.9%) 604.910 us/op
# Warmup Iteration   5: 27765.783 ±(99.9%) 636.164 us/op
Iteration   1: 27443.694 ±(99.9%) 550.148 us/op
                 mapToPair·p0.00:   25657.344 us/op
                 mapToPair·p0.50:   26017.792 us/op
                 mapToPair·p0.90:   33560.986 us/op
                 mapToPair·p0.95:   34603.008 us/op
                 mapToPair·p0.99:   38710.804 us/op
                 mapToPair·p0.999:  44695.552 us/op
                 mapToPair·p0.9999: 44695.552 us/op
                 mapToPair·p1.00:   44695.552 us/op

Iteration   2: 27462.375 ±(99.9%) 566.613 us/op
                 mapToPair·p0.00:   25690.112 us/op
                 mapToPair·p0.50:   25985.024 us/op
                 mapToPair·p0.90:   33456.128 us/op
                 mapToPair·p0.95:   35094.528 us/op
                 mapToPair·p0.99:   38623.642 us/op
                 mapToPair·p0.999:  39321.600 us/op
                 mapToPair·p0.9999: 39321.600 us/op
                 mapToPair·p1.00:   39321.600 us/op

Iteration   3: 27615.277 ±(99.9%) 580.972 us/op
                 mapToPair·p0.00:   25657.344 us/op
                 mapToPair·p0.50:   26083.328 us/op
                 mapToPair·p0.90:   34144.256 us/op
                 mapToPair·p0.95:   35707.290 us/op
                 mapToPair·p0.99:   38821.560 us/op
                 mapToPair·p0.999:  38928.384 us/op
                 mapToPair·p0.9999: 38928.384 us/op
                 mapToPair·p1.00:   38928.384 us/op

Iteration   4: 27738.974 ±(99.9%) 643.053 us/op
                 mapToPair·p0.00:   25690.112 us/op
                 mapToPair·p0.50:   26017.792 us/op
                 mapToPair·p0.90:   34196.685 us/op
                 mapToPair·p0.95:   37611.110 us/op
                 mapToPair·p0.99:   39895.695 us/op
                 mapToPair·p0.999:  44105.728 us/op
                 mapToPair·p0.9999: 44105.728 us/op
                 mapToPair·p1.00:   44105.728 us/op

Iteration   5: 27634.648 ±(99.9%) 625.829 us/op
                 mapToPair·p0.00:   25690.112 us/op
                 mapToPair·p0.50:   26050.560 us/op
                 mapToPair·p0.90:   33908.326 us/op
                 mapToPair·p0.95:   37794.611 us/op
                 mapToPair·p0.99:   39001.129 us/op
                 mapToPair·p0.999:  44433.408 us/op
                 mapToPair·p0.9999: 44433.408 us/op
                 mapToPair·p1.00:   44433.408 us/op

Iteration   6: 27759.775 ±(99.9%) 657.993 us/op
                 mapToPair·p0.00:   25624.576 us/op
                 mapToPair·p0.50:   25985.024 us/op
                 mapToPair·p0.90:   34334.310 us/op
                 mapToPair·p0.95:   38141.952 us/op
                 mapToPair·p0.99:   38953.943 us/op
                 mapToPair·p0.999:  44826.624 us/op
                 mapToPair·p0.9999: 44826.624 us/op
                 mapToPair·p1.00:   44826.624 us/op

Iteration   7: 27809.929 ±(99.9%) 646.966 us/op
                 mapToPair·p0.00:   25690.112 us/op
                 mapToPair·p0.50:   26034.176 us/op
                 mapToPair·p0.90:   34406.400 us/op
                 mapToPair·p0.95:   37670.093 us/op
                 mapToPair·p0.99:   38888.407 us/op
                 mapToPair·p0.999:  42860.544 us/op
                 mapToPair·p0.9999: 42860.544 us/op
                 mapToPair·p1.00:   42860.544 us/op

Iteration   8: 27755.952 ±(99.9%) 642.061 us/op
                 mapToPair·p0.00:   25690.112 us/op
                 mapToPair·p0.50:   26017.792 us/op
                 mapToPair·p0.90:   33882.112 us/op
                 mapToPair·p0.95:   38400.819 us/op
                 mapToPair·p0.99:   38928.384 us/op
                 mapToPair·p0.999:  39190.528 us/op
                 mapToPair·p0.9999: 39190.528 us/op
                 mapToPair·p1.00:   39190.528 us/op

Iteration   9: 27401.769 ±(99.9%) 543.958 us/op
                 mapToPair·p0.00:   25624.576 us/op
                 mapToPair·p0.50:   26083.328 us/op
                 mapToPair·p0.90:   32630.374 us/op
                 mapToPair·p0.95:   34779.955 us/op
                 mapToPair·p0.99:   39471.022 us/op
                 mapToPair·p0.999:  43843.584 us/op
                 mapToPair·p0.9999: 43843.584 us/op
                 mapToPair·p1.00:   43843.584 us/op

Iteration  10: 27658.817 ±(99.9%) 611.247 us/op
                 mapToPair·p0.00:   25657.344 us/op
                 mapToPair·p0.50:   25985.024 us/op
                 mapToPair·p0.90:   34209.792 us/op
                 mapToPair·p0.95:   35743.334 us/op
                 mapToPair·p0.99:   38826.148 us/op
                 mapToPair·p0.999:  40501.248 us/op
                 mapToPair·p0.9999: 40501.248 us/op
                 mapToPair·p1.00:   40501.248 us/op

Iteration  11: 27618.536 ±(99.9%) 615.976 us/op
                 mapToPair·p0.00:   25657.344 us/op
                 mapToPair·p0.50:   26050.560 us/op
                 mapToPair·p0.90:   34321.203 us/op
                 mapToPair·p0.95:   35818.701 us/op
                 mapToPair·p0.99:   42374.922 us/op
                 mapToPair·p0.999:  43057.152 us/op
                 mapToPair·p0.9999: 43057.152 us/op
                 mapToPair·p1.00:   43057.152 us/op

Iteration  12: 27539.163 ±(99.9%) 589.713 us/op
                 mapToPair·p0.00:   25690.112 us/op
                 mapToPair·p0.50:   26017.792 us/op
                 mapToPair·p0.90:   34111.488 us/op
                 mapToPair·p0.95:   36306.944 us/op
                 mapToPair·p0.99:   38754.714 us/op
                 mapToPair·p0.999:  43057.152 us/op
                 mapToPair·p0.9999: 43057.152 us/op
                 mapToPair·p1.00:   43057.152 us/op

Iteration  13: 27648.588 ±(99.9%) 666.149 us/op
                 mapToPair·p0.00:   25657.344 us/op
                 mapToPair·p0.50:   25952.256 us/op
                 mapToPair·p0.90:   34517.811 us/op
                 mapToPair·p0.95:   37054.054 us/op
                 mapToPair·p0.99:   43182.981 us/op
                 mapToPair·p0.999:  44433.408 us/op
                 mapToPair·p0.9999: 44433.408 us/op
                 mapToPair·p1.00:   44433.408 us/op

Iteration  14: 27558.249 ±(99.9%) 581.783 us/op
                 mapToPair·p0.00:   25624.576 us/op
                 mapToPair·p0.50:   26050.560 us/op
                 mapToPair·p0.90:   33816.576 us/op
                 mapToPair·p0.95:   35114.189 us/op
                 mapToPair·p0.99:   39022.756 us/op
                 mapToPair·p0.999:  44105.728 us/op
                 mapToPair·p0.9999: 44105.728 us/op
                 mapToPair·p1.00:   44105.728 us/op

Iteration  15: 27478.939 ±(99.9%) 600.657 us/op
                 mapToPair·p0.00:   25690.112 us/op
                 mapToPair·p0.50:   25985.024 us/op
                 mapToPair·p0.90:   32931.840 us/op
                 mapToPair·p0.95:   35061.760 us/op
                 mapToPair·p0.99:   42178.970 us/op
                 mapToPair·p0.999:  44236.800 us/op
                 mapToPair·p0.9999: 44236.800 us/op
                 mapToPair·p1.00:   44236.800 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  N = 5436
  mean =  27607.763 ±(99.9%) 155.955 us/op

  Histogram, us/op:
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 4312 
    [27500.000, 30000.000) = 141 
    [30000.000, 32500.000) = 321 
    [32500.000, 35000.000) = 333 
    [35000.000, 37500.000) = 127 
    [37500.000, 40000.000) = 172 
    [40000.000, 42500.000) = 10 
    [42500.000, 45000.000) = 20 
    [45000.000, 47500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  25624.576 us/op
     p(50.0000) =  26017.792 us/op
     p(90.0000) =  34013.184 us/op
     p(95.0000) =  35858.022 us/op
     p(99.0000) =  38928.384 us/op
     p(99.9000) =  44273.697 us/op
     p(99.9900) =  44826.624 us/op
     p(99.9990) =  44826.624 us/op
     p(99.9999) =  44826.624 us/op
    p(100.0000) =  44826.624 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 95.65% complete, ETA 00:21:48
# Fork: 1 of 1
# Warmup Iteration   1: 22444.023 ±(99.9%) 345.984 us/op
# Warmup Iteration   2: 24096.324 ±(99.9%) 205.398 us/op
# Warmup Iteration   3: 23975.489 ±(99.9%) 123.649 us/op
# Warmup Iteration   4: 24083.454 ±(99.9%) 193.229 us/op
# Warmup Iteration   5: 24032.965 ±(99.9%) 134.651 us/op
Iteration   1: 24083.848 ±(99.9%) 184.069 us/op
                 plusOne·p0.00:   23625.728 us/op
                 plusOne·p0.50:   23920.640 us/op
                 plusOne·p0.90:   24182.784 us/op
                 plusOne·p0.95:   24346.624 us/op
                 plusOne·p0.99:   29636.690 us/op
                 plusOne·p0.999:  37945.344 us/op
                 plusOne·p0.9999: 37945.344 us/op
                 plusOne·p1.00:   37945.344 us/op

Iteration   2: 24047.852 ±(99.9%) 176.098 us/op
                 plusOne·p0.00:   23592.960 us/op
                 plusOne·p0.50:   23887.872 us/op
                 plusOne·p0.90:   24117.248 us/op
                 plusOne·p0.95:   24384.307 us/op
                 plusOne·p0.99:   28054.323 us/op
                 plusOne·p0.999:  37486.592 us/op
                 plusOne·p0.9999: 37486.592 us/op
                 plusOne·p1.00:   37486.592 us/op

Iteration   3: 24033.122 ±(99.9%) 172.351 us/op
                 plusOne·p0.00:   23592.960 us/op
                 plusOne·p0.50:   23887.872 us/op
                 plusOne·p0.90:   24150.016 us/op
                 plusOne·p0.95:   24248.320 us/op
                 plusOne·p0.99:   27136.819 us/op
                 plusOne·p0.999:  38141.952 us/op
                 plusOne·p0.9999: 38141.952 us/op
                 plusOne·p1.00:   38141.952 us/op

Iteration   4: 24091.981 ±(99.9%) 205.579 us/op
                 plusOne·p0.00:   23625.728 us/op
                 plusOne·p0.50:   23855.104 us/op
                 plusOne·p0.90:   24215.552 us/op
                 plusOne·p0.95:   24543.232 us/op
                 plusOne·p0.99:   30967.071 us/op
                 plusOne·p0.999:  38273.024 us/op
                 plusOne·p0.9999: 38273.024 us/op
                 plusOne·p1.00:   38273.024 us/op

Iteration   5: 24130.592 ±(99.9%) 224.134 us/op
                 plusOne·p0.00:   23625.728 us/op
                 plusOne·p0.50:   23887.872 us/op
                 plusOne·p0.90:   24215.552 us/op
                 plusOne·p0.95:   24320.410 us/op
                 plusOne·p0.99:   32138.854 us/op
                 plusOne·p0.999:  37224.448 us/op
                 plusOne·p0.9999: 37224.448 us/op
                 plusOne·p1.00:   37224.448 us/op

Iteration   6: 24165.134 ±(99.9%) 272.446 us/op
                 plusOne·p0.00:   23625.728 us/op
                 plusOne·p0.50:   23887.872 us/op
                 plusOne·p0.90:   24182.784 us/op
                 plusOne·p0.95:   24322.048 us/op
                 plusOne·p0.99:   35948.134 us/op
                 plusOne·p0.999:  42860.544 us/op
                 plusOne·p0.9999: 42860.544 us/op
                 plusOne·p1.00:   42860.544 us/op

Iteration   7: 24105.641 ±(99.9%) 233.044 us/op
                 plusOne·p0.00:   23625.728 us/op
                 plusOne·p0.50:   23887.872 us/op
                 plusOne·p0.90:   24117.248 us/op
                 plusOne·p0.95:   24248.320 us/op
                 plusOne·p0.99:   35740.713 us/op
                 plusOne·p0.999:  37814.272 us/op
                 plusOne·p0.9999: 37814.272 us/op
                 plusOne·p1.00:   37814.272 us/op

Iteration   8: 23443.317 ±(99.9%) 286.427 us/op
                 plusOne·p0.00:   21331.968 us/op
                 plusOne·p0.50:   23822.336 us/op
                 plusOne·p0.90:   24084.480 us/op
                 plusOne·p0.95:   24418.714 us/op
                 plusOne·p0.99:   32020.890 us/op
                 plusOne·p0.999:  38469.632 us/op
                 plusOne·p0.9999: 38469.632 us/op
                 plusOne·p1.00:   38469.632 us/op

Iteration   9: 21880.205 ±(99.9%) 261.124 us/op
                 plusOne·p0.00:   21331.968 us/op
                 plusOne·p0.50:   21626.880 us/op
                 plusOne·p0.90:   21830.042 us/op
                 plusOne·p0.95:   21957.837 us/op
                 plusOne·p0.99:   34433.925 us/op
                 plusOne·p0.999:  42532.864 us/op
                 plusOne·p0.9999: 42532.864 us/op
                 plusOne·p1.00:   42532.864 us/op

Iteration  10: 21932.427 ±(99.9%) 248.154 us/op
                 plusOne·p0.00:   21331.968 us/op
                 plusOne·p0.50:   21659.648 us/op
                 plusOne·p0.90:   21898.854 us/op
                 plusOne·p0.95:   22400.205 us/op
                 plusOne·p0.99:   33734.001 us/op
                 plusOne·p0.999:  35651.584 us/op
                 plusOne·p0.9999: 35651.584 us/op
                 plusOne·p1.00:   35651.584 us/op

Iteration  11: 21798.359 ±(99.9%) 191.439 us/op
                 plusOne·p0.00:   21331.968 us/op
                 plusOne·p0.50:   21594.112 us/op
                 plusOne·p0.90:   21823.488 us/op
                 plusOne·p0.95:   22151.168 us/op
                 plusOne·p0.99:   30598.758 us/op
                 plusOne·p0.999:  35586.048 us/op
                 plusOne·p0.9999: 35586.048 us/op
                 plusOne·p1.00:   35586.048 us/op

Iteration  12: 21799.644 ±(99.9%) 157.400 us/op
                 plusOne·p0.00:   21364.736 us/op
                 plusOne·p0.50:   21626.880 us/op
                 plusOne·p0.90:   21987.328 us/op
                 plusOne·p0.95:   22478.848 us/op
                 plusOne·p0.99:   26142.310 us/op
                 plusOne·p0.999:  34668.544 us/op
                 plusOne·p0.9999: 34668.544 us/op
                 plusOne·p1.00:   34668.544 us/op

Iteration  13: 21983.655 ±(99.9%) 273.039 us/op
                 plusOne·p0.00:   21331.968 us/op
                 plusOne·p0.50:   21659.648 us/op
                 plusOne·p0.90:   21856.256 us/op
                 plusOne·p0.95:   22229.811 us/op
                 plusOne·p0.99:   33661.911 us/op
                 plusOne·p0.999:  35586.048 us/op
                 plusOne·p0.9999: 35586.048 us/op
                 plusOne·p1.00:   35586.048 us/op

Iteration  14: 21743.990 ±(99.9%) 139.206 us/op
                 plusOne·p0.00:   21331.968 us/op
                 plusOne·p0.50:   21594.112 us/op
                 plusOne·p0.90:   21856.256 us/op
                 plusOne·p0.95:   22244.557 us/op
                 plusOne·p0.99:   26366.116 us/op
                 plusOne·p0.999:  34406.400 us/op
                 plusOne·p0.9999: 34406.400 us/op
                 plusOne·p1.00:   34406.400 us/op

Iteration  15: 21943.925 ±(99.9%) 283.408 us/op
                 plusOne·p0.00:   21331.968 us/op
                 plusOne·p0.50:   21594.112 us/op
                 plusOne·p0.90:   21856.256 us/op
                 plusOne·p0.95:   22914.662 us/op
                 plusOne·p0.99:   34678.374 us/op
                 plusOne·p0.999:  35323.904 us/op
                 plusOne·p0.9999: 35323.904 us/op
                 plusOne·p1.00:   35323.904 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  N = 6535
  mean =  22961.057 ±(99.9%) 72.844 us/op

  Histogram, us/op:
    [20000.000, 22500.000) = 3176 
    [22500.000, 25000.000) = 3177 
    [25000.000, 27500.000) = 81 
    [27500.000, 30000.000) = 27 
    [30000.000, 32500.000) = 22 
    [32500.000, 35000.000) = 22 
    [35000.000, 37500.000) = 21 
    [37500.000, 40000.000) = 7 
    [40000.000, 42500.000) = 0 
    [42500.000, 45000.000) = 2 
    [45000.000, 47500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  21331.968 us/op
     p(50.0000) =  23658.496 us/op
     p(90.0000) =  24051.712 us/op
     p(95.0000) =  24215.552 us/op
     p(99.0000) =  30766.531 us/op
     p(99.9000) =  37875.089 us/op
     p(99.9900) =  42860.544 us/op
     p(99.9990) =  42860.544 us/op
     p(99.9999) =  42860.544 us/op
    p(100.0000) =  42860.544 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 96.37% complete, ETA 00:18:10
# Fork: 1 of 1
# Warmup Iteration   1: 43538.129 ±(99.9%) 766.354 us/op
# Warmup Iteration   2: 40446.018 ±(99.9%) 357.674 us/op
# Warmup Iteration   3: 37834.551 ±(99.9%) 273.710 us/op
# Warmup Iteration   4: 38070.685 ±(99.9%) 279.149 us/op
# Warmup Iteration   5: 38544.998 ±(99.9%) 262.094 us/op
Iteration   1: 37549.428 ±(99.9%) 286.099 us/op
                 sort·p0.00:   37093.376 us/op
                 sort·p0.50:   37355.520 us/op
                 sort·p0.90:   37617.664 us/op
                 sort·p0.95:   37788.058 us/op
                 sort·p0.99:   46160.937 us/op
                 sort·p0.999:  55508.992 us/op
                 sort·p0.9999: 55508.992 us/op
                 sort·p1.00:   55508.992 us/op

Iteration   2: 37907.611 ±(99.9%) 252.888 us/op
                 sort·p0.00:   37421.056 us/op
                 sort·p0.50:   37748.736 us/op
                 sort·p0.90:   37945.344 us/op
                 sort·p0.95:   38076.416 us/op
                 sort·p0.99:   46714.061 us/op
                 sort·p0.999:  52363.264 us/op
                 sort·p0.9999: 52363.264 us/op
                 sort·p1.00:   52363.264 us/op

Iteration   3: 38150.207 ±(99.9%) 381.798 us/op
                 sort·p0.00:   37552.128 us/op
                 sort·p0.50:   37879.808 us/op
                 sort·p0.90:   38141.952 us/op
                 sort·p0.95:   38328.730 us/op
                 sort·p0.99:   52072.940 us/op
                 sort·p0.999:  57475.072 us/op
                 sort·p0.9999: 57475.072 us/op
                 sort·p1.00:   57475.072 us/op

Iteration   4: 39333.165 ±(99.9%) 246.597 us/op
                 sort·p0.00:   38862.848 us/op
                 sort·p0.50:   39190.528 us/op
                 sort·p0.90:   39518.208 us/op
                 sort·p0.95:   39727.923 us/op
                 sort·p0.99:   44142.428 us/op
                 sort·p0.999:  55967.744 us/op
                 sort·p0.9999: 55967.744 us/op
                 sort·p1.00:   55967.744 us/op

Iteration   5: 38216.493 ±(99.9%) 278.485 us/op
                 sort·p0.00:   37683.200 us/op
                 sort·p0.50:   38010.880 us/op
                 sort·p0.90:   38338.560 us/op
                 sort·p0.95:   38525.338 us/op
                 sort·p0.99:   49697.915 us/op
                 sort·p0.999:  50921.472 us/op
                 sort·p0.9999: 50921.472 us/op
                 sort·p1.00:   50921.472 us/op

Iteration   6: 37941.372 ±(99.9%) 194.614 us/op
                 sort·p0.00:   37486.592 us/op
                 sort·p0.50:   37814.272 us/op
                 sort·p0.90:   38076.416 us/op
                 sort·p0.95:   38273.024 us/op
                 sort·p0.99:   43650.253 us/op
                 sort·p0.999:  48168.960 us/op
                 sort·p0.9999: 48168.960 us/op
                 sort·p1.00:   48168.960 us/op

Iteration   7: 35746.143 ±(99.9%) 198.753 us/op
                 sort·p0.00:   35192.832 us/op
                 sort·p0.50:   35586.048 us/op
                 sort·p0.90:   35913.728 us/op
                 sort·p0.95:   36107.059 us/op
                 sort·p0.99:   43668.603 us/op
                 sort·p0.999:  45219.840 us/op
                 sort·p0.9999: 45219.840 us/op
                 sort·p1.00:   45219.840 us/op

Iteration   8: 40772.983 ±(99.9%) 130.452 us/op
                 sort·p0.00:   40370.176 us/op
                 sort·p0.50:   40632.320 us/op
                 sort·p0.90:   40960.000 us/op
                 sort·p0.95:   41133.670 us/op
                 sort·p0.99:   43812.782 us/op
                 sort·p0.999:  47251.456 us/op
                 sort·p0.9999: 47251.456 us/op
                 sort·p1.00:   47251.456 us/op

Iteration   9: 36841.352 ±(99.9%) 139.219 us/op
                 sort·p0.00:   36372.480 us/op
                 sort·p0.50:   36765.696 us/op
                 sort·p0.90:   36962.304 us/op
                 sort·p0.95:   37158.912 us/op
                 sort·p0.99:   41941.074 us/op
                 sort·p0.999:  44236.800 us/op
                 sort·p0.9999: 44236.800 us/op
                 sort·p1.00:   44236.800 us/op

Iteration  10: 37936.656 ±(99.9%) 299.697 us/op
                 sort·p0.00:   37355.520 us/op
                 sort·p0.50:   37748.736 us/op
                 sort·p0.90:   38010.880 us/op
                 sort·p0.95:   38404.096 us/op
                 sort·p0.99:   43981.210 us/op
                 sort·p0.999:  58654.720 us/op
                 sort·p0.9999: 58654.720 us/op
                 sort·p1.00:   58654.720 us/op

Iteration  11: 40758.597 ±(99.9%) 168.415 us/op
                 sort·p0.00:   40370.176 us/op
                 sort·p0.50:   40632.320 us/op
                 sort·p0.90:   40914.125 us/op
                 sort·p0.95:   41091.072 us/op
                 sort·p0.99:   45033.062 us/op
                 sort·p0.999:  50462.720 us/op
                 sort·p0.9999: 50462.720 us/op
                 sort·p1.00:   50462.720 us/op

Iteration  12: 39828.917 ±(99.9%) 247.871 us/op
                 sort·p0.00:   39387.136 us/op
                 sort·p0.50:   39649.280 us/op
                 sort·p0.90:   39976.960 us/op
                 sort·p0.95:   40173.568 us/op
                 sort·p0.99:   43977.277 us/op
                 sort·p0.999:  56754.176 us/op
                 sort·p0.9999: 56754.176 us/op
                 sort·p1.00:   56754.176 us/op

Iteration  13: 36109.626 ±(99.9%) 250.870 us/op
                 sort·p0.00:   35586.048 us/op
                 sort·p0.50:   35913.728 us/op
                 sort·p0.90:   36175.872 us/op
                 sort·p0.95:   36313.498 us/op
                 sort·p0.99:   44640.502 us/op
                 sort·p0.999:  48037.888 us/op
                 sort·p0.9999: 48037.888 us/op
                 sort·p1.00:   48037.888 us/op

Iteration  14: 36063.424 ±(99.9%) 148.053 us/op
                 sort·p0.00:   35586.048 us/op
                 sort·p0.50:   35946.496 us/op
                 sort·p0.90:   36241.408 us/op
                 sort·p0.95:   36372.480 us/op
                 sort·p0.99:   40030.700 us/op
                 sort·p0.999:  44564.480 us/op
                 sort·p0.9999: 44564.480 us/op
                 sort·p1.00:   44564.480 us/op

Iteration  15: 36301.720 ±(99.9%) 209.696 us/op
                 sort·p0.00:   35848.192 us/op
                 sort·p0.50:   36175.872 us/op
                 sort·p0.90:   36438.016 us/op
                 sort·p0.95:   36569.088 us/op
                 sort·p0.99:   41243.771 us/op
                 sort·p0.999:  49741.824 us/op
                 sort·p0.9999: 49741.824 us/op
                 sort·p1.00:   49741.824 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  N = 3964
  mean =  37899.598 ±(99.9%) 101.962 us/op

  Histogram, us/op:
    [30000.000, 32500.000) = 0 
    [32500.000, 35000.000) = 0 
    [35000.000, 37500.000) = 1594 
    [37500.000, 40000.000) = 1805 
    [40000.000, 42500.000) = 516 
    [42500.000, 45000.000) = 22 
    [45000.000, 47500.000) = 10 
    [47500.000, 50000.000) = 6 
    [50000.000, 52500.000) = 5 
    [52500.000, 55000.000) = 1 
    [55000.000, 57500.000) = 4 

  Percentiles, us/op:
      p(0.0000) =  35192.832 us/op
     p(50.0000) =  37748.736 us/op
     p(90.0000) =  40566.784 us/op
     p(95.0000) =  40763.392 us/op
     p(99.0000) =  43496.243 us/op
     p(99.9000) =  55995.269 us/op
     p(99.9900) =  58654.720 us/op
     p(99.9990) =  58654.720 us/op
     p(99.9999) =  58654.720 us/op
    p(100.0000) =  58654.720 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 97.10% complete, ETA 00:14:32
# Fork: 1 of 1
# Warmup Iteration   1: 664.373 ±(99.9%) 3.881 us/op
# Warmup Iteration   2: 663.826 ±(99.9%) 1.496 us/op
# Warmup Iteration   3: 661.641 ±(99.9%) 1.784 us/op
# Warmup Iteration   4: 659.602 ±(99.9%) 1.379 us/op
# Warmup Iteration   5: 661.665 ±(99.9%) 1.657 us/op
Iteration   1: 657.418 ±(99.9%) 1.500 us/op
                 concatenateStrings·p0.00:   596.992 us/op
                 concatenateStrings·p0.50:   649.216 us/op
                 concatenateStrings·p0.90:   676.864 us/op
                 concatenateStrings·p0.95:   691.200 us/op
                 concatenateStrings·p0.99:   933.929 us/op
                 concatenateStrings·p0.999:  1054.720 us/op
                 concatenateStrings·p0.9999: 3242.672 us/op
                 concatenateStrings·p1.00:   3604.480 us/op

Iteration   2: 659.040 ±(99.9%) 1.524 us/op
                 concatenateStrings·p0.00:   602.112 us/op
                 concatenateStrings·p0.50:   650.240 us/op
                 concatenateStrings·p0.90:   679.936 us/op
                 concatenateStrings·p0.95:   698.368 us/op
                 concatenateStrings·p0.99:   959.488 us/op
                 concatenateStrings·p0.999:  1109.039 us/op
                 concatenateStrings·p0.9999: 3183.793 us/op
                 concatenateStrings·p1.00:   3211.264 us/op

Iteration   3: 656.666 ±(99.9%) 1.341 us/op
                 concatenateStrings·p0.00:   602.112 us/op
                 concatenateStrings·p0.50:   649.216 us/op
                 concatenateStrings·p0.90:   676.864 us/op
                 concatenateStrings·p0.95:   692.224 us/op
                 concatenateStrings·p0.99:   942.961 us/op
                 concatenateStrings·p0.999:  1083.392 us/op
                 concatenateStrings·p0.9999: 2156.521 us/op
                 concatenateStrings·p1.00:   3080.192 us/op

Iteration   4: 656.620 ±(99.9%) 1.540 us/op
                 concatenateStrings·p0.00:   605.184 us/op
                 concatenateStrings·p0.50:   649.216 us/op
                 concatenateStrings·p0.90:   675.840 us/op
                 concatenateStrings·p0.95:   689.152 us/op
                 concatenateStrings·p0.99:   934.758 us/op
                 concatenateStrings·p0.999:  1078.856 us/op
                 concatenateStrings·p0.9999: 3199.793 us/op
                 concatenateStrings·p1.00:   3428.352 us/op

Iteration   5: 656.488 ±(99.9%) 1.320 us/op
                 concatenateStrings·p0.00:   604.160 us/op
                 concatenateStrings·p0.50:   649.216 us/op
                 concatenateStrings·p0.90:   675.840 us/op
                 concatenateStrings·p0.95:   688.128 us/op
                 concatenateStrings·p0.99:   929.608 us/op
                 concatenateStrings·p0.999:  1043.495 us/op
                 concatenateStrings·p0.9999: 2298.629 us/op
                 concatenateStrings·p1.00:   3309.568 us/op

Iteration   6: 659.074 ±(99.9%) 1.417 us/op
                 concatenateStrings·p0.00:   607.232 us/op
                 concatenateStrings·p0.50:   651.264 us/op
                 concatenateStrings·p0.90:   678.912 us/op
                 concatenateStrings·p0.95:   694.272 us/op
                 concatenateStrings·p0.99:   951.296 us/op
                 concatenateStrings·p0.999:  1092.667 us/op
                 concatenateStrings·p0.9999: 2666.090 us/op
                 concatenateStrings·p1.00:   2813.952 us/op

Iteration   7: 659.144 ±(99.9%) 1.915 us/op
                 concatenateStrings·p0.00:   604.160 us/op
                 concatenateStrings·p0.50:   649.216 us/op
                 concatenateStrings·p0.90:   677.888 us/op
                 concatenateStrings·p0.95:   694.272 us/op
                 concatenateStrings·p0.99:   951.747 us/op
                 concatenateStrings·p0.999:  1154.753 us/op
                 concatenateStrings·p0.9999: 3733.447 us/op
                 concatenateStrings·p1.00:   3870.720 us/op

Iteration   8: 656.589 ±(99.9%) 1.538 us/op
                 concatenateStrings·p0.00:   603.136 us/op
                 concatenateStrings·p0.50:   648.192 us/op
                 concatenateStrings·p0.90:   675.840 us/op
                 concatenateStrings·p0.95:   689.152 us/op
                 concatenateStrings·p0.99:   933.734 us/op
                 concatenateStrings·p0.999:  1082.952 us/op
                 concatenateStrings·p0.9999: 3207.854 us/op
                 concatenateStrings·p1.00:   3538.944 us/op

Iteration   9: 656.965 ±(99.9%) 1.380 us/op
                 concatenateStrings·p0.00:   602.112 us/op
                 concatenateStrings·p0.50:   648.192 us/op
                 concatenateStrings·p0.90:   676.864 us/op
                 concatenateStrings·p0.95:   692.224 us/op
                 concatenateStrings·p0.99:   937.912 us/op
                 concatenateStrings·p0.999:  1115.593 us/op
                 concatenateStrings·p0.9999: 2189.988 us/op
                 concatenateStrings·p1.00:   2662.400 us/op

Iteration  10: 659.667 ±(99.9%) 1.405 us/op
                 concatenateStrings·p0.00:   601.088 us/op
                 concatenateStrings·p0.50:   650.240 us/op
                 concatenateStrings·p0.90:   679.936 us/op
                 concatenateStrings·p0.95:   700.416 us/op
                 concatenateStrings·p0.99:   948.224 us/op
                 concatenateStrings·p0.999:  1158.216 us/op
                 concatenateStrings·p0.9999: 1721.833 us/op
                 concatenateStrings·p1.00:   1740.800 us/op

Iteration  11: 659.138 ±(99.9%) 1.447 us/op
                 concatenateStrings·p0.00:   600.064 us/op
                 concatenateStrings·p0.50:   650.240 us/op
                 concatenateStrings·p0.90:   678.912 us/op
                 concatenateStrings·p0.95:   694.272 us/op
                 concatenateStrings·p0.99:   949.699 us/op
                 concatenateStrings·p0.999:  1158.849 us/op
                 concatenateStrings·p0.9999: 2283.355 us/op
                 concatenateStrings·p1.00:   2830.336 us/op

Iteration  12: 659.394 ±(99.9%) 1.435 us/op
                 concatenateStrings·p0.00:   599.040 us/op
                 concatenateStrings·p0.50:   651.264 us/op
                 concatenateStrings·p0.90:   678.912 us/op
                 concatenateStrings·p0.95:   695.296 us/op
                 concatenateStrings·p0.99:   944.128 us/op
                 concatenateStrings·p0.999:  1102.346 us/op
                 concatenateStrings·p0.9999: 2481.618 us/op
                 concatenateStrings·p1.00:   3244.032 us/op

Iteration  13: 660.482 ±(99.9%) 1.552 us/op
                 concatenateStrings·p0.00:   603.136 us/op
                 concatenateStrings·p0.50:   652.288 us/op
                 concatenateStrings·p0.90:   679.936 us/op
                 concatenateStrings·p0.95:   695.296 us/op
                 concatenateStrings·p0.99:   955.392 us/op
                 concatenateStrings·p0.999:  1111.290 us/op
                 concatenateStrings·p0.9999: 3307.300 us/op
                 concatenateStrings·p1.00:   3649.536 us/op

Iteration  14: 659.575 ±(99.9%) 1.484 us/op
                 concatenateStrings·p0.00:   596.992 us/op
                 concatenateStrings·p0.50:   651.264 us/op
                 concatenateStrings·p0.90:   678.912 us/op
                 concatenateStrings·p0.95:   693.248 us/op
                 concatenateStrings·p0.99:   957.993 us/op
                 concatenateStrings·p0.999:  1115.861 us/op
                 concatenateStrings·p0.9999: 2783.304 us/op
                 concatenateStrings·p1.00:   3719.168 us/op

Iteration  15: 660.734 ±(99.9%) 1.600 us/op
                 concatenateStrings·p0.00:   599.040 us/op
                 concatenateStrings·p0.50:   651.264 us/op
                 concatenateStrings·p0.90:   681.984 us/op
                 concatenateStrings·p0.95:   698.368 us/op
                 concatenateStrings·p0.99:   968.909 us/op
                 concatenateStrings·p0.999:  1118.208 us/op
                 concatenateStrings·p0.9999: 3270.017 us/op
                 concatenateStrings·p1.00:   3559.424 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 227564
  mean =    658.463 ±(99.9%) 0.387 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 0 
    [ 250.000,  500.000) = 0 
    [ 500.000,  750.000) = 221869 
    [ 750.000, 1000.000) = 4542 
    [1000.000, 1250.000) = 1092 
    [1250.000, 1500.000) = 13 
    [1500.000, 1750.000) = 11 
    [1750.000, 2000.000) = 6 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 1 
    [2500.000, 2750.000) = 8 
    [2750.000, 3000.000) = 8 
    [3000.000, 3250.000) = 5 
    [3250.000, 3500.000) = 2 
    [3500.000, 3750.000) = 6 

  Percentiles, us/op:
      p(0.0000) =    596.992 us/op
     p(50.0000) =    650.240 us/op
     p(90.0000) =    677.888 us/op
     p(95.0000) =    693.248 us/op
     p(99.0000) =    945.152 us/op
     p(99.9000) =   1105.920 us/op
     p(99.9900) =   2742.684 us/op
     p(99.9990) =   3699.974 us/op
     p(99.9999) =   3870.720 us/op
    p(100.0000) =   3870.720 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 97.82% complete, ETA 00:10:54
# Fork: 1 of 1
# Warmup Iteration   1: 10049.392 ±(99.9%) 57.572 us/op
# Warmup Iteration   2: 9973.474 ±(99.9%) 22.365 us/op
# Warmup Iteration   3: 10007.590 ±(99.9%) 24.606 us/op
# Warmup Iteration   4: 9987.578 ±(99.9%) 24.326 us/op
# Warmup Iteration   5: 10004.982 ±(99.9%) 24.349 us/op
Iteration   1: 10024.083 ±(99.9%) 25.277 us/op
                 concatenateStrings·p0.00:   9519.104 us/op
                 concatenateStrings·p0.50:   9977.856 us/op
                 concatenateStrings·p0.90:   10240.000 us/op
                 concatenateStrings·p0.95:   10485.760 us/op
                 concatenateStrings·p0.99:   10928.783 us/op
                 concatenateStrings·p0.999:  11780.096 us/op
                 concatenateStrings·p0.9999: 11780.096 us/op
                 concatenateStrings·p1.00:   11780.096 us/op

Iteration   2: 9986.956 ±(99.9%) 23.865 us/op
                 concatenateStrings·p0.00:   9502.720 us/op
                 concatenateStrings·p0.50:   9961.472 us/op
                 concatenateStrings·p0.90:   10240.000 us/op
                 concatenateStrings·p0.95:   10387.456 us/op
                 concatenateStrings·p0.99:   10813.112 us/op
                 concatenateStrings·p0.999:  11288.510 us/op
                 concatenateStrings·p0.9999: 11288.576 us/op
                 concatenateStrings·p1.00:   11288.576 us/op

Iteration   3: 9975.158 ±(99.9%) 23.066 us/op
                 concatenateStrings·p0.00:   9551.872 us/op
                 concatenateStrings·p0.50:   9953.280 us/op
                 concatenateStrings·p0.90:   10190.848 us/op
                 concatenateStrings·p0.95:   10352.230 us/op
                 concatenateStrings·p0.99:   10828.841 us/op
                 concatenateStrings·p0.999:  11124.687 us/op
                 concatenateStrings·p0.9999: 11124.736 us/op
                 concatenateStrings·p1.00:   11124.736 us/op

Iteration   4: 9996.861 ±(99.9%) 22.664 us/op
                 concatenateStrings·p0.00:   9486.336 us/op
                 concatenateStrings·p0.50:   9961.472 us/op
                 concatenateStrings·p0.90:   10223.616 us/op
                 concatenateStrings·p0.95:   10371.072 us/op
                 concatenateStrings·p0.99:   10911.416 us/op
                 concatenateStrings·p0.999:  11206.623 us/op
                 concatenateStrings·p0.9999: 11206.656 us/op
                 concatenateStrings·p1.00:   11206.656 us/op

Iteration   5: 9983.208 ±(99.9%) 24.030 us/op
                 concatenateStrings·p0.00:   9469.952 us/op
                 concatenateStrings·p0.50:   9961.472 us/op
                 concatenateStrings·p0.90:   10207.232 us/op
                 concatenateStrings·p0.95:   10369.434 us/op
                 concatenateStrings·p0.99:   10927.800 us/op
                 concatenateStrings·p0.999:  11386.847 us/op
                 concatenateStrings·p0.9999: 11386.880 us/op
                 concatenateStrings·p1.00:   11386.880 us/op

Iteration   6: 9984.305 ±(99.9%) 19.705 us/op
                 concatenateStrings·p0.00:   9535.488 us/op
                 concatenateStrings·p0.50:   9977.856 us/op
                 concatenateStrings·p0.90:   10190.848 us/op
                 concatenateStrings·p0.95:   10289.152 us/op
                 concatenateStrings·p0.99:   10583.409 us/op
                 concatenateStrings·p0.999:  10976.920 us/op
                 concatenateStrings·p0.9999: 10977.280 us/op
                 concatenateStrings·p1.00:   10977.280 us/op

Iteration   7: 10000.571 ±(99.9%) 23.002 us/op
                 concatenateStrings·p0.00:   9502.720 us/op
                 concatenateStrings·p0.50:   9977.856 us/op
                 concatenateStrings·p0.90:   10223.616 us/op
                 concatenateStrings·p0.95:   10354.688 us/op
                 concatenateStrings·p0.99:   10780.672 us/op
                 concatenateStrings·p0.999:  11190.272 us/op
                 concatenateStrings·p0.9999: 11190.272 us/op
                 concatenateStrings·p1.00:   11190.272 us/op

Iteration   8: 9989.898 ±(99.9%) 22.539 us/op
                 concatenateStrings·p0.00:   9502.720 us/op
                 concatenateStrings·p0.50:   9977.856 us/op
                 concatenateStrings·p0.90:   10223.616 us/op
                 concatenateStrings·p0.95:   10371.072 us/op
                 concatenateStrings·p0.99:   10747.740 us/op
                 concatenateStrings·p0.999:  11353.801 us/op
                 concatenateStrings·p0.9999: 11354.112 us/op
                 concatenateStrings·p1.00:   11354.112 us/op

Iteration   9: 9975.534 ±(99.9%) 22.590 us/op
                 concatenateStrings·p0.00:   9535.488 us/op
                 concatenateStrings·p0.50:   9961.472 us/op
                 concatenateStrings·p0.90:   10174.464 us/op
                 concatenateStrings·p0.95:   10303.078 us/op
                 concatenateStrings·p0.99:   10797.056 us/op
                 concatenateStrings·p0.999:  11892.670 us/op
                 concatenateStrings·p0.9999: 11894.784 us/op
                 concatenateStrings·p1.00:   11894.784 us/op

Iteration  10: 9983.601 ±(99.9%) 20.403 us/op
                 concatenateStrings·p0.00:   9535.488 us/op
                 concatenateStrings·p0.50:   9977.856 us/op
                 concatenateStrings·p0.90:   10223.616 us/op
                 concatenateStrings·p0.95:   10354.688 us/op
                 concatenateStrings·p0.99:   10584.064 us/op
                 concatenateStrings·p0.999:  10944.512 us/op
                 concatenateStrings·p0.9999: 10944.512 us/op
                 concatenateStrings·p1.00:   10944.512 us/op

Iteration  11: 10016.895 ±(99.9%) 24.091 us/op
                 concatenateStrings·p0.00:   9486.336 us/op
                 concatenateStrings·p0.50:   9977.856 us/op
                 concatenateStrings·p0.90:   10256.384 us/op
                 concatenateStrings·p0.95:   10403.840 us/op
                 concatenateStrings·p0.99:   10862.920 us/op
                 concatenateStrings·p0.999:  11173.888 us/op
                 concatenateStrings·p0.9999: 11173.888 us/op
                 concatenateStrings·p1.00:   11173.888 us/op

Iteration  12: 10019.744 ±(99.9%) 26.037 us/op
                 concatenateStrings·p0.00:   9535.488 us/op
                 concatenateStrings·p0.50:   9977.856 us/op
                 concatenateStrings·p0.90:   10272.768 us/op
                 concatenateStrings·p0.95:   10471.014 us/op
                 concatenateStrings·p0.99:   10960.896 us/op
                 concatenateStrings·p0.999:  11665.408 us/op
                 concatenateStrings·p0.9999: 11665.408 us/op
                 concatenateStrings·p1.00:   11665.408 us/op

Iteration  13: 9996.485 ±(99.9%) 21.095 us/op
                 concatenateStrings·p0.00:   9535.488 us/op
                 concatenateStrings·p0.50:   9977.856 us/op
                 concatenateStrings·p0.90:   10240.000 us/op
                 concatenateStrings·p0.95:   10338.304 us/op
                 concatenateStrings·p0.99:   10682.204 us/op
                 concatenateStrings·p0.999:  10944.479 us/op
                 concatenateStrings·p0.9999: 10944.512 us/op
                 concatenateStrings·p1.00:   10944.512 us/op

Iteration  14: 9994.813 ±(99.9%) 26.454 us/op
                 concatenateStrings·p0.00:   9469.952 us/op
                 concatenateStrings·p0.50:   9977.856 us/op
                 concatenateStrings·p0.90:   10240.000 us/op
                 concatenateStrings·p0.95:   10338.304 us/op
                 concatenateStrings·p0.99:   10665.820 us/op
                 concatenateStrings·p0.999:  14235.533 us/op
                 concatenateStrings·p0.9999: 14237.696 us/op
                 concatenateStrings·p1.00:   14237.696 us/op

Iteration  15: 10026.630 ±(99.9%) 22.156 us/op
                 concatenateStrings·p0.00:   9519.104 us/op
                 concatenateStrings·p0.50:   9994.240 us/op
                 concatenateStrings·p0.90:   10256.384 us/op
                 concatenateStrings·p0.95:   10420.224 us/op
                 concatenateStrings·p0.99:   10764.288 us/op
                 concatenateStrings·p0.999:  11091.968 us/op
                 concatenateStrings·p0.9999: 11091.968 us/op
                 concatenateStrings·p1.00:   11091.968 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 14996
  mean =   9996.955 ±(99.9%) 5.988 us/op

  Histogram, us/op:
    [ 9000.000,  9500.000) = 5 
    [ 9500.000, 10000.000) = 8516 
    [10000.000, 10500.000) = 5981 
    [10500.000, 11000.000) = 438 
    [11000.000, 11500.000) = 51 
    [11500.000, 12000.000) = 3 
    [12000.000, 12500.000) = 1 
    [12500.000, 13000.000) = 0 
    [13000.000, 13500.000) = 0 
    [13500.000, 14000.000) = 0 
    [14000.000, 14500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   9469.952 us/op
     p(50.0000) =   9977.856 us/op
     p(90.0000) =  10223.616 us/op
     p(95.0000) =  10371.072 us/op
     p(99.0000) =  10797.056 us/op
     p(99.9000) =  11337.728 us/op
     p(99.9900) =  13157.001 us/op
     p(99.9990) =  14237.696 us/op
     p(99.9999) =  14237.696 us/op
    p(100.0000) =  14237.696 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 98.55% complete, ETA 00:07:16
# Fork: 1 of 1
# Warmup Iteration   1: 110727.033 ±(99.9%) 888.027 us/op
# Warmup Iteration   2: 110064.471 ±(99.9%) 428.466 us/op
# Warmup Iteration   3: 109247.087 ±(99.9%) 349.152 us/op
# Warmup Iteration   4: 109755.704 ±(99.9%) 387.931 us/op
# Warmup Iteration   5: 109195.798 ±(99.9%) 286.222 us/op
Iteration   1: 109674.496 ±(99.9%) 396.098 us/op
                 concatenateStrings·p0.00:   108134.400 us/op
                 concatenateStrings·p0.50:   109576.192 us/op
                 concatenateStrings·p0.90:   111502.950 us/op
                 concatenateStrings·p0.95:   111719.219 us/op
                 concatenateStrings·p0.99:   112459.776 us/op
                 concatenateStrings·p0.999:  112459.776 us/op
                 concatenateStrings·p0.9999: 112459.776 us/op
                 concatenateStrings·p1.00:   112459.776 us/op

Iteration   2: 110529.705 ±(99.9%) 495.909 us/op
                 concatenateStrings·p0.00:   108396.544 us/op
                 concatenateStrings·p0.50:   110624.768 us/op
                 concatenateStrings·p0.90:   112197.632 us/op
                 concatenateStrings·p0.95:   112905.421 us/op
                 concatenateStrings·p0.99:   115343.360 us/op
                 concatenateStrings·p0.999:  115343.360 us/op
                 concatenateStrings·p0.9999: 115343.360 us/op
                 concatenateStrings·p1.00:   115343.360 us/op

Iteration   3: 109526.328 ±(99.9%) 341.340 us/op
                 concatenateStrings·p0.00:   108003.328 us/op
                 concatenateStrings·p0.50:   109445.120 us/op
                 concatenateStrings·p0.90:   110939.341 us/op
                 concatenateStrings·p0.95:   111326.003 us/op
                 concatenateStrings·p0.99:   112328.704 us/op
                 concatenateStrings·p0.999:  112328.704 us/op
                 concatenateStrings·p0.9999: 112328.704 us/op
                 concatenateStrings·p1.00:   112328.704 us/op

Iteration   4: 109492.135 ±(99.9%) 398.663 us/op
                 concatenateStrings·p0.00:   107479.040 us/op
                 concatenateStrings·p0.50:   109379.584 us/op
                 concatenateStrings·p0.90:   111109.734 us/op
                 concatenateStrings·p0.95:   111280.128 us/op
                 concatenateStrings·p0.99:   112852.992 us/op
                 concatenateStrings·p0.999:  112852.992 us/op
                 concatenateStrings·p0.9999: 112852.992 us/op
                 concatenateStrings·p1.00:   112852.992 us/op

Iteration   5: 110473.531 ±(99.9%) 364.069 us/op
                 concatenateStrings·p0.00:   108265.472 us/op
                 concatenateStrings·p0.50:   110624.768 us/op
                 concatenateStrings·p0.90:   111909.274 us/op
                 concatenateStrings·p0.95:   112066.560 us/op
                 concatenateStrings·p0.99:   113115.136 us/op
                 concatenateStrings·p0.999:  113115.136 us/op
                 concatenateStrings·p0.9999: 113115.136 us/op
                 concatenateStrings·p1.00:   113115.136 us/op

Iteration   6: 110438.963 ±(99.9%) 380.830 us/op
                 concatenateStrings·p0.00:   108396.544 us/op
                 concatenateStrings·p0.50:   110755.840 us/op
                 concatenateStrings·p0.90:   111935.488 us/op
                 concatenateStrings·p0.95:   112066.560 us/op
                 concatenateStrings·p0.99:   112197.632 us/op
                 concatenateStrings·p0.999:  112197.632 us/op
                 concatenateStrings·p0.9999: 112197.632 us/op
                 concatenateStrings·p1.00:   112197.632 us/op

Iteration   7: 110299.249 ±(99.9%) 305.272 us/op
                 concatenateStrings·p0.00:   108134.400 us/op
                 concatenateStrings·p0.50:   110493.696 us/op
                 concatenateStrings·p0.90:   111620.915 us/op
                 concatenateStrings·p0.95:   111804.416 us/op
                 concatenateStrings·p0.99:   111935.488 us/op
                 concatenateStrings·p0.999:  111935.488 us/op
                 concatenateStrings·p0.9999: 111935.488 us/op
                 concatenateStrings·p1.00:   111935.488 us/op

Iteration   8: 109422.325 ±(99.9%) 321.931 us/op
                 concatenateStrings·p0.00:   107610.112 us/op
                 concatenateStrings·p0.50:   109379.584 us/op
                 concatenateStrings·p0.90:   110755.840 us/op
                 concatenateStrings·p0.95:   111063.859 us/op
                 concatenateStrings·p0.99:   111280.128 us/op
                 concatenateStrings·p0.999:  111280.128 us/op
                 concatenateStrings·p0.9999: 111280.128 us/op
                 concatenateStrings·p1.00:   111280.128 us/op

Iteration   9: 110114.884 ±(99.9%) 466.984 us/op
                 concatenateStrings·p0.00:   107741.184 us/op
                 concatenateStrings·p0.50:   109838.336 us/op
                 concatenateStrings·p0.90:   111804.416 us/op
                 concatenateStrings·p0.95:   112590.848 us/op
                 concatenateStrings·p0.99:   113246.208 us/op
                 concatenateStrings·p0.999:  113246.208 us/op
                 concatenateStrings·p0.9999: 113246.208 us/op
                 concatenateStrings·p1.00:   113246.208 us/op

Iteration  10: 109534.876 ±(99.9%) 359.430 us/op
                 concatenateStrings·p0.00:   107872.256 us/op
                 concatenateStrings·p0.50:   109576.192 us/op
                 concatenateStrings·p0.90:   111017.984 us/op
                 concatenateStrings·p0.95:   111280.128 us/op
                 concatenateStrings·p0.99:   111935.488 us/op
                 concatenateStrings·p0.999:  111935.488 us/op
                 concatenateStrings·p0.9999: 111935.488 us/op
                 concatenateStrings·p1.00:   111935.488 us/op

Iteration  11: 109251.361 ±(99.9%) 378.691 us/op
                 concatenateStrings·p0.00:   107347.968 us/op
                 concatenateStrings·p0.50:   109117.440 us/op
                 concatenateStrings·p0.90:   110755.840 us/op
                 concatenateStrings·p0.95:   111194.931 us/op
                 concatenateStrings·p0.99:   112721.920 us/op
                 concatenateStrings·p0.999:  112721.920 us/op
                 concatenateStrings·p0.9999: 112721.920 us/op
                 concatenateStrings·p1.00:   112721.920 us/op

Iteration  12: 109457.942 ±(99.9%) 372.345 us/op
                 concatenateStrings·p0.00:   107479.040 us/op
                 concatenateStrings·p0.50:   109379.584 us/op
                 concatenateStrings·p0.90:   111031.091 us/op
                 concatenateStrings·p0.95:   111588.147 us/op
                 concatenateStrings·p0.99:   111804.416 us/op
                 concatenateStrings·p0.999:  111804.416 us/op
                 concatenateStrings·p0.9999: 111804.416 us/op
                 concatenateStrings·p1.00:   111804.416 us/op

Iteration  13: 109792.746 ±(99.9%) 456.228 us/op
                 concatenateStrings·p0.00:   107741.184 us/op
                 concatenateStrings·p0.50:   109576.192 us/op
                 concatenateStrings·p0.90:   111634.022 us/op
                 concatenateStrings·p0.95:   112335.258 us/op
                 concatenateStrings·p0.99:   113246.208 us/op
                 concatenateStrings·p0.999:  113246.208 us/op
                 concatenateStrings·p0.9999: 113246.208 us/op
                 concatenateStrings·p1.00:   113246.208 us/op

Iteration  14: 110045.747 ±(99.9%) 315.649 us/op
                 concatenateStrings·p0.00:   108003.328 us/op
                 concatenateStrings·p0.50:   109838.336 us/op
                 concatenateStrings·p0.90:   111149.056 us/op
                 concatenateStrings·p0.95:   111725.773 us/op
                 concatenateStrings·p0.99:   112459.776 us/op
                 concatenateStrings·p0.999:  112459.776 us/op
                 concatenateStrings·p0.9999: 112459.776 us/op
                 concatenateStrings·p1.00:   112459.776 us/op

Iteration  15: 109490.710 ±(99.9%) 361.175 us/op
                 concatenateStrings·p0.00:   108003.328 us/op
                 concatenateStrings·p0.50:   109379.584 us/op
                 concatenateStrings·p0.90:   111017.984 us/op
                 concatenateStrings·p0.95:   111326.003 us/op
                 concatenateStrings·p0.99:   112328.704 us/op
                 concatenateStrings·p0.999:  112328.704 us/op
                 concatenateStrings·p0.9999: 112328.704 us/op
                 concatenateStrings·p1.00:   112328.704 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 1374
  mean = 109834.234 ±(99.9%) 102.944 us/op

  Histogram, us/op:
    [107000.000, 107500.000) = 5 
    [107500.000, 108000.000) = 33 
    [108000.000, 108500.000) = 143 
    [108500.000, 109000.000) = 190 
    [109000.000, 109500.000) = 196 
    [109500.000, 110000.000) = 265 
    [110000.000, 110500.000) = 148 
    [110500.000, 111000.000) = 149 
    [111000.000, 111500.000) = 125 
    [111500.000, 112000.000) = 73 
    [112000.000, 112500.000) = 27 
    [112500.000, 113000.000) = 12 
    [113000.000, 113500.000) = 7 
    [113500.000, 114000.000) = 0 
    [114000.000, 114500.000) = 0 
    [114500.000, 115000.000) = 0 
    [115000.000, 115500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 107347.968 us/op
     p(50.0000) = 109707.264 us/op
     p(90.0000) = 111411.200 us/op
     p(95.0000) = 111804.416 us/op
     p(99.0000) = 112721.920 us/op
     p(99.9000) = 114556.928 us/op
     p(99.9900) = 115343.360 us/op
     p(99.9990) = 115343.360 us/op
     p(99.9999) = 115343.360 us/op
    p(100.0000) = 115343.360 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 99.27% complete, ETA 00:03:38
# Fork: 1 of 1
# Warmup Iteration   1: 643563.520 ±(99.9%) 165286.139 us/op
# Warmup Iteration   2: 596732.265 ±(99.9%) 143094.564 us/op
# Warmup Iteration   3: 598707.769 ±(99.9%) 157986.332 us/op
# Warmup Iteration   4: 580153.799 ±(99.9%) 142229.889 us/op
# Warmup Iteration   5: 589731.479 ±(99.9%) 143748.935 us/op
Iteration   1: 600772.367 ±(99.9%) 143124.690 us/op
                 createNewObjectsWithRecursive·p0.00:   380633.088 us/op
                 createNewObjectsWithRecursive·p0.50:   566231.040 us/op
                 createNewObjectsWithRecursive·p0.90:   827745.894 us/op
                 createNewObjectsWithRecursive·p0.95:   833617.920 us/op
                 createNewObjectsWithRecursive·p0.99:   833617.920 us/op
                 createNewObjectsWithRecursive·p0.999:  833617.920 us/op
                 createNewObjectsWithRecursive·p0.9999: 833617.920 us/op
                 createNewObjectsWithRecursive·p1.00:   833617.920 us/op

Iteration   2: 597979.591 ±(99.9%) 178893.158 us/op
                 createNewObjectsWithRecursive·p0.00:   283639.808 us/op
                 createNewObjectsWithRecursive·p0.50:   599261.184 us/op
                 createNewObjectsWithRecursive·p0.90:   815267.840 us/op
                 createNewObjectsWithRecursive·p0.95:   848297.984 us/op
                 createNewObjectsWithRecursive·p0.99:   848297.984 us/op
                 createNewObjectsWithRecursive·p0.999:  848297.984 us/op
                 createNewObjectsWithRecursive·p0.9999: 848297.984 us/op
                 createNewObjectsWithRecursive·p1.00:   848297.984 us/op

Iteration   3: 608235.761 ±(99.9%) 175887.563 us/op
                 createNewObjectsWithRecursive·p0.00:   281018.368 us/op
                 createNewObjectsWithRecursive·p0.50:   563085.312 us/op
                 createNewObjectsWithRecursive·p0.90:   830681.907 us/op
                 createNewObjectsWithRecursive·p0.95:   848297.984 us/op
                 createNewObjectsWithRecursive·p0.99:   848297.984 us/op
                 createNewObjectsWithRecursive·p0.999:  848297.984 us/op
                 createNewObjectsWithRecursive·p0.9999: 848297.984 us/op
                 createNewObjectsWithRecursive·p1.00:   848297.984 us/op

Iteration   4: 573221.547 ±(99.9%) 122964.643 us/op
                 createNewObjectsWithRecursive·p0.00:   379060.224 us/op
                 createNewObjectsWithRecursive·p0.50:   565182.464 us/op
                 createNewObjectsWithRecursive·p0.90:   792618.598 us/op
                 createNewObjectsWithRecursive·p0.95:   848297.984 us/op
                 createNewObjectsWithRecursive·p0.99:   848297.984 us/op
                 createNewObjectsWithRecursive·p0.999:  848297.984 us/op
                 createNewObjectsWithRecursive·p0.9999: 848297.984 us/op
                 createNewObjectsWithRecursive·p1.00:   848297.984 us/op

Iteration   5: 645300.224 ±(99.9%) 141799.324 us/op
                 createNewObjectsWithRecursive·p0.00:   387973.120 us/op
                 createNewObjectsWithRecursive·p0.50:   620756.992 us/op
                 createNewObjectsWithRecursive·p0.90:   849346.560 us/op
                 createNewObjectsWithRecursive·p0.95:   849346.560 us/op
                 createNewObjectsWithRecursive·p0.99:   849346.560 us/op
                 createNewObjectsWithRecursive·p0.999:  849346.560 us/op
                 createNewObjectsWithRecursive·p0.9999: 849346.560 us/op
                 createNewObjectsWithRecursive·p1.00:   849346.560 us/op

Iteration   6: 573163.292 ±(99.9%) 143648.079 us/op
                 createNewObjectsWithRecursive·p0.00:   306708.480 us/op
                 createNewObjectsWithRecursive·p0.50:   566755.328 us/op
                 createNewObjectsWithRecursive·p0.90:   837917.082 us/op
                 createNewObjectsWithRecursive·p0.95:   857735.168 us/op
                 createNewObjectsWithRecursive·p0.99:   857735.168 us/op
                 createNewObjectsWithRecursive·p0.999:  857735.168 us/op
                 createNewObjectsWithRecursive·p0.9999: 857735.168 us/op
                 createNewObjectsWithRecursive·p1.00:   857735.168 us/op

Iteration   7: 558716.245 ±(99.9%) 158265.848 us/op
                 createNewObjectsWithRecursive·p0.00:   368574.464 us/op
                 createNewObjectsWithRecursive·p0.50:   548667.392 us/op
                 createNewObjectsWithRecursive·p0.90:   822293.299 us/op
                 createNewObjectsWithRecursive·p0.95:   824180.736 us/op
                 createNewObjectsWithRecursive·p0.99:   824180.736 us/op
                 createNewObjectsWithRecursive·p0.999:  824180.736 us/op
                 createNewObjectsWithRecursive·p0.9999: 824180.736 us/op
                 createNewObjectsWithRecursive·p1.00:   824180.736 us/op

Iteration   8: 625506.424 ±(99.9%) 152047.006 us/op
                 createNewObjectsWithRecursive·p0.00:   372768.768 us/op
                 createNewObjectsWithRecursive·p0.50:   629145.600 us/op
                 createNewObjectsWithRecursive·p0.90:   808871.526 us/op
                 createNewObjectsWithRecursive·p0.95:   827326.464 us/op
                 createNewObjectsWithRecursive·p0.99:   827326.464 us/op
                 createNewObjectsWithRecursive·p0.999:  827326.464 us/op
                 createNewObjectsWithRecursive·p0.9999: 827326.464 us/op
                 createNewObjectsWithRecursive·p1.00:   827326.464 us/op

Iteration   9: 593278.133 ±(99.9%) 156951.921 us/op
                 createNewObjectsWithRecursive·p0.00:   382730.240 us/op
                 createNewObjectsWithRecursive·p0.50:   563085.312 us/op
                 createNewObjectsWithRecursive·p0.90:   844103.680 us/op
                 createNewObjectsWithRecursive·p0.95:   844103.680 us/op
                 createNewObjectsWithRecursive·p0.99:   844103.680 us/op
                 createNewObjectsWithRecursive·p0.999:  844103.680 us/op
                 createNewObjectsWithRecursive·p0.9999: 844103.680 us/op
                 createNewObjectsWithRecursive·p1.00:   844103.680 us/op

Iteration  10: 593648.218 ±(99.9%) 164857.387 us/op
                 createNewObjectsWithRecursive·p0.00:   375914.496 us/op
                 createNewObjectsWithRecursive·p0.50:   565182.464 us/op
                 createNewObjectsWithRecursive·p0.90:   820405.862 us/op
                 createNewObjectsWithRecursive·p0.95:   834666.496 us/op
                 createNewObjectsWithRecursive·p0.99:   834666.496 us/op
                 createNewObjectsWithRecursive·p0.999:  834666.496 us/op
                 createNewObjectsWithRecursive·p0.9999: 834666.496 us/op
                 createNewObjectsWithRecursive·p1.00:   834666.496 us/op

Iteration  11: 512570.163 ±(99.9%) 118652.363 us/op
                 createNewObjectsWithRecursive·p0.00:   346030.080 us/op
                 createNewObjectsWithRecursive·p0.50:   495976.448 us/op
                 createNewObjectsWithRecursive·p0.90:   801216.922 us/op
                 createNewObjectsWithRecursive·p0.95:   833880.064 us/op
                 createNewObjectsWithRecursive·p0.99:   834666.496 us/op
                 createNewObjectsWithRecursive·p0.999:  834666.496 us/op
                 createNewObjectsWithRecursive·p0.9999: 834666.496 us/op
                 createNewObjectsWithRecursive·p1.00:   834666.496 us/op

Iteration  12: 585891.840 ±(99.9%) 130229.138 us/op
                 createNewObjectsWithRecursive·p0.00:   370147.328 us/op
                 createNewObjectsWithRecursive·p0.50:   557842.432 us/op
                 createNewObjectsWithRecursive·p0.90:   821139.866 us/op
                 createNewObjectsWithRecursive·p0.95:   831520.768 us/op
                 createNewObjectsWithRecursive·p0.99:   831520.768 us/op
                 createNewObjectsWithRecursive·p0.999:  831520.768 us/op
                 createNewObjectsWithRecursive·p0.9999: 831520.768 us/op
                 createNewObjectsWithRecursive·p1.00:   831520.768 us/op

Iteration  13: 581901.426 ±(99.9%) 169319.155 us/op
                 createNewObjectsWithRecursive·p0.00:   280494.080 us/op
                 createNewObjectsWithRecursive·p0.50:   573046.784 us/op
                 createNewObjectsWithRecursive·p0.90:   846620.262 us/op
                 createNewObjectsWithRecursive·p0.95:   859832.320 us/op
                 createNewObjectsWithRecursive·p0.99:   859832.320 us/op
                 createNewObjectsWithRecursive·p0.999:  859832.320 us/op
                 createNewObjectsWithRecursive·p0.9999: 859832.320 us/op
                 createNewObjectsWithRecursive·p1.00:   859832.320 us/op

Iteration  14: 628260.864 ±(99.9%) 171111.146 us/op
                 createNewObjectsWithRecursive·p0.00:   377487.360 us/op
                 createNewObjectsWithRecursive·p0.50:   599261.184 us/op
                 createNewObjectsWithRecursive·p0.90:   832674.202 us/op
                 createNewObjectsWithRecursive·p0.95:   859832.320 us/op
                 createNewObjectsWithRecursive·p0.99:   859832.320 us/op
                 createNewObjectsWithRecursive·p0.999:  859832.320 us/op
                 createNewObjectsWithRecursive·p0.9999: 859832.320 us/op
                 createNewObjectsWithRecursive·p1.00:   859832.320 us/op

Iteration  15: 598150.927 ±(99.9%) 148771.336 us/op
                 createNewObjectsWithRecursive·p0.00:   366477.312 us/op
                 createNewObjectsWithRecursive·p0.50:   567279.616 us/op
                 createNewObjectsWithRecursive·p0.90:   820196.147 us/op
                 createNewObjectsWithRecursive·p0.95:   833617.920 us/op
                 createNewObjectsWithRecursive·p0.99:   833617.920 us/op
                 createNewObjectsWithRecursive·p0.999:  833617.920 us/op
                 createNewObjectsWithRecursive·p0.9999: 833617.920 us/op
                 createNewObjectsWithRecursive·p1.00:   833617.920 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  N = 262
  mean = 590218.217 ±(99.9%) 32504.088 us/op

  Histogram, us/op:
    [200000.000, 250000.000) = 0 
    [250000.000, 300000.000) = 3 
    [300000.000, 350000.000) = 2 
    [350000.000, 400000.000) = 38 
    [400000.000, 450000.000) = 20 
    [450000.000, 500000.000) = 12 
    [500000.000, 550000.000) = 38 
    [550000.000, 600000.000) = 33 
    [600000.000, 650000.000) = 36 
    [650000.000, 700000.000) = 13 
    [700000.000, 750000.000) = 0 
    [750000.000, 800000.000) = 17 
    [800000.000, 850000.000) = 47 

  Percentiles, us/op:
      p(0.0000) = 280494.080 us/op
     p(50.0000) = 566231.040 us/op
     p(90.0000) = 821769.011 us/op
     p(95.0000) = 835557.786 us/op
     p(99.0000) = 858511.114 us/op
     p(99.9000) = 859832.320 us/op
     p(99.9900) = 859832.320 us/op
     p(99.9990) = 859832.320 us/op
     p(99.9999) = 859832.320 us/op
    p(100.0000) = 859832.320 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 100.00% complete, ETA 00:00:01
# Fork: 1 of 1
# Warmup Iteration   1: 245614.365 us/op
# Warmup Iteration   2: 219641.994 us/op
# Warmup Iteration   3: 224700.199 us/op
# Warmup Iteration   4: 219045.157 us/op
# Warmup Iteration   5: 220984.423 us/op
Iteration   1: 223179.893 us/op
Iteration   2: 216968.888 us/op
Iteration   3: 219045.607 us/op
Iteration   4: 224526.694 us/op
Iteration   5: 217989.677 us/op
Iteration   6: 213694.665 us/op
Iteration   7: 217240.354 us/op
Iteration   8: 217326.559 us/op
Iteration   9: 217667.189 us/op
Iteration  10: 212195.223 us/op
Iteration  11: 220429.435 us/op
Iteration  12: 220142.566 us/op
Iteration  13: 225634.550 us/op
Iteration  14: 224591.301 us/op
Iteration  15: 228522.244 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 219943.656 ±(99.9%) 4875.945 us/op

  Histogram, us/op:
    [210000.000, 211250.000) = 0 
    [211250.000, 212500.000) = 1 
    [212500.000, 213750.000) = 1 
    [213750.000, 215000.000) = 0 
    [215000.000, 216250.000) = 0 
    [216250.000, 217500.000) = 3 
    [217500.000, 218750.000) = 2 
    [218750.000, 220000.000) = 1 
    [220000.000, 221250.000) = 2 
    [221250.000, 222500.000) = 0 
    [222500.000, 223750.000) = 1 
    [223750.000, 225000.000) = 2 
    [225000.000, 226250.000) = 1 
    [226250.000, 227500.000) = 0 
    [227500.000, 228750.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 212195.223 us/op
     p(50.0000) = 219045.607 us/op
     p(90.0000) = 226789.628 us/op
     p(95.0000) = 228522.244 us/op
     p(99.0000) = 228522.244 us/op
     p(99.9000) = 228522.244 us/op
     p(99.9900) = 228522.244 us/op
     p(99.9990) = 228522.244 us/op
     p(99.9999) = 228522.244 us/op
    p(100.0000) = 228522.244 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 219267.573 us/op
# Warmup Iteration   2: 205126.246 us/op
# Warmup Iteration   3: 222750.309 us/op
# Warmup Iteration   4: 226269.849 us/op
# Warmup Iteration   5: 222098.519 us/op
Iteration   1: 222951.454 us/op
Iteration   2: 222506.042 us/op
Iteration   3: 222354.791 us/op
Iteration   4: 223315.999 us/op
Iteration   5: 222895.865 us/op
Iteration   6: 222343.323 us/op
Iteration   7: 222832.341 us/op
Iteration   8: 223000.396 us/op
Iteration   9: 223495.678 us/op
Iteration  10: 222110.510 us/op
Iteration  11: 222058.480 us/op
Iteration  12: 225022.122 us/op
Iteration  13: 224284.791 us/op
Iteration  14: 224999.181 us/op
Iteration  15: 224789.717 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 223264.046 ±(99.9%) 1108.415 us/op

  Histogram, us/op:
    [222000.000, 222250.000) = 2 
    [222250.000, 222500.000) = 2 
    [222500.000, 222750.000) = 1 
    [222750.000, 223000.000) = 3 
    [223000.000, 223250.000) = 1 
    [223250.000, 223500.000) = 2 
    [223500.000, 223750.000) = 0 
    [223750.000, 224000.000) = 0 
    [224000.000, 224250.000) = 0 
    [224250.000, 224500.000) = 1 
    [224500.000, 224750.000) = 0 
    [224750.000, 225000.000) = 2 
    [225000.000, 225250.000) = 1 
    [225250.000, 225500.000) = 0 
    [225500.000, 225750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 222058.480 us/op
     p(50.0000) = 222951.454 us/op
     p(90.0000) = 225008.357 us/op
     p(95.0000) = 225022.122 us/op
     p(99.0000) = 225022.122 us/op
     p(99.9000) = 225022.122 us/op
     p(99.9900) = 225022.122 us/op
     p(99.9990) = 225022.122 us/op
     p(99.9999) = 225022.122 us/op
    p(100.0000) = 225022.122 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 208765.064 us/op
# Warmup Iteration   2: 206550.417 us/op
# Warmup Iteration   3: 204283.298 us/op
# Warmup Iteration   4: 204263.773 us/op
# Warmup Iteration   5: 207461.911 us/op
Iteration   1: 203011.020 us/op
Iteration   2: 204815.618 us/op
Iteration   3: 202939.854 us/op
Iteration   4: 203172.378 us/op
Iteration   5: 203161.167 us/op
Iteration   6: 203713.173 us/op
Iteration   7: 203261.110 us/op
Iteration   8: 202074.842 us/op
Iteration   9: 203591.661 us/op
Iteration  10: 204201.158 us/op
Iteration  11: 203120.714 us/op
Iteration  12: 203244.674 us/op
Iteration  13: 202866.137 us/op
Iteration  14: 203018.095 us/op
Iteration  15: 203433.017 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 203308.308 ±(99.9%) 666.149 us/op

  Histogram, us/op:
    [202000.000, 202250.000) = 1 
    [202250.000, 202500.000) = 0 
    [202500.000, 202750.000) = 0 
    [202750.000, 203000.000) = 2 
    [203000.000, 203250.000) = 6 
    [203250.000, 203500.000) = 2 
    [203500.000, 203750.000) = 2 
    [203750.000, 204000.000) = 0 
    [204000.000, 204250.000) = 1 
    [204250.000, 204500.000) = 0 
    [204500.000, 204750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 202074.842 us/op
     p(50.0000) = 203172.378 us/op
     p(90.0000) = 204446.942 us/op
     p(95.0000) = 204815.618 us/op
     p(99.0000) = 204815.618 us/op
     p(99.9000) = 204815.618 us/op
     p(99.9900) = 204815.618 us/op
     p(99.9990) = 204815.618 us/op
     p(99.9999) = 204815.618 us/op
    p(100.0000) = 204815.618 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 201921.256 us/op
# Warmup Iteration   2: 198144.423 us/op
# Warmup Iteration   3: 198006.262 us/op
# Warmup Iteration   4: 198643.820 us/op
# Warmup Iteration   5: 201024.403 us/op
Iteration   1: 200516.356 us/op
Iteration   2: 199099.513 us/op
Iteration   3: 198734.843 us/op
Iteration   4: 198850.465 us/op
Iteration   5: 199685.166 us/op
Iteration   6: 199378.206 us/op
Iteration   7: 200201.273 us/op
Iteration   8: 201982.074 us/op
Iteration   9: 197973.805 us/op
Iteration  10: 197982.066 us/op
Iteration  11: 201953.164 us/op
Iteration  12: 198923.203 us/op
Iteration  13: 199013.252 us/op
Iteration  14: 199121.959 us/op
Iteration  15: 198745.867 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 199477.414 ±(99.9%) 1303.933 us/op

  Histogram, us/op:
    [197000.000, 197500.000) = 0 
    [197500.000, 198000.000) = 2 
    [198000.000, 198500.000) = 0 
    [198500.000, 199000.000) = 4 
    [199000.000, 199500.000) = 4 
    [199500.000, 200000.000) = 1 
    [200000.000, 200500.000) = 1 
    [200500.000, 201000.000) = 1 
    [201000.000, 201500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 197973.805 us/op
     p(50.0000) = 199099.513 us/op
     p(90.0000) = 201964.728 us/op
     p(95.0000) = 201982.074 us/op
     p(99.0000) = 201982.074 us/op
     p(99.9000) = 201982.074 us/op
     p(99.9900) = 201982.074 us/op
     p(99.9990) = 201982.074 us/op
     p(99.9999) = 201982.074 us/op
    p(100.0000) = 201982.074 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 201479.656 us/op
# Warmup Iteration   2: 198777.276 us/op
# Warmup Iteration   3: 198831.995 us/op
# Warmup Iteration   4: 201803.271 us/op
# Warmup Iteration   5: 199062.777 us/op
Iteration   1: 197743.476 us/op
Iteration   2: 199506.271 us/op
Iteration   3: 198130.680 us/op
Iteration   4: 197879.837 us/op
Iteration   5: 198945.355 us/op
Iteration   6: 197965.653 us/op
Iteration   7: 197174.595 us/op
Iteration   8: 197933.733 us/op
Iteration   9: 198057.109 us/op
Iteration  10: 199443.928 us/op
Iteration  11: 202208.910 us/op
Iteration  12: 198622.797 us/op
Iteration  13: 198105.644 us/op
Iteration  14: 198109.758 us/op
Iteration  15: 199215.114 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 198602.857 ±(99.9%) 1283.696 us/op

  Histogram, us/op:
    [197000.000, 197500.000) = 1 
    [197500.000, 198000.000) = 4 
    [198000.000, 198500.000) = 4 
    [198500.000, 199000.000) = 2 
    [199000.000, 199500.000) = 2 
    [199500.000, 200000.000) = 1 
    [200000.000, 200500.000) = 0 
    [200500.000, 201000.000) = 0 
    [201000.000, 201500.000) = 0 
    [201500.000, 202000.000) = 0 
    [202000.000, 202500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 197174.595 us/op
     p(50.0000) = 198109.758 us/op
     p(90.0000) = 200587.327 us/op
     p(95.0000) = 202208.910 us/op
     p(99.0000) = 202208.910 us/op
     p(99.9000) = 202208.910 us/op
     p(99.9900) = 202208.910 us/op
     p(99.9990) = 202208.910 us/op
     p(99.9999) = 202208.910 us/op
    p(100.0000) = 202208.910 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 194949.820 us/op
# Warmup Iteration   2: 193184.251 us/op
# Warmup Iteration   3: 194275.960 us/op
# Warmup Iteration   4: 191789.136 us/op
# Warmup Iteration   5: 192998.302 us/op
Iteration   1: 196855.131 us/op
Iteration   2: 193497.754 us/op
Iteration   3: 193902.326 us/op
Iteration   4: 193356.739 us/op
Iteration   5: 193442.962 us/op
Iteration   6: 194295.202 us/op
Iteration   7: 193847.797 us/op
Iteration   8: 201991.326 us/op
Iteration   9: 203768.544 us/op
Iteration  10: 200204.144 us/op
Iteration  11: 192381.978 us/op
Iteration  12: 192912.102 us/op
Iteration  13: 198974.268 us/op
Iteration  14: 196135.456 us/op
Iteration  15: 194180.585 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 195983.088 ±(99.9%) 3845.788 us/op

  Histogram, us/op:
    [190000.000, 191250.000) = 0 
    [191250.000, 192500.000) = 1 
    [192500.000, 193750.000) = 4 
    [193750.000, 195000.000) = 4 
    [195000.000, 196250.000) = 1 
    [196250.000, 197500.000) = 1 
    [197500.000, 198750.000) = 0 
    [198750.000, 200000.000) = 1 
    [200000.000, 201250.000) = 1 
    [201250.000, 202500.000) = 1 
    [202500.000, 203750.000) = 0 
    [203750.000, 205000.000) = 1 
    [205000.000, 206250.000) = 0 
    [206250.000, 207500.000) = 0 
    [207500.000, 208750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 192381.978 us/op
     p(50.0000) = 194180.585 us/op
     p(90.0000) = 202702.213 us/op
     p(95.0000) = 203768.544 us/op
     p(99.0000) = 203768.544 us/op
     p(99.9000) = 203768.544 us/op
     p(99.9900) = 203768.544 us/op
     p(99.9990) = 203768.544 us/op
     p(99.9999) = 203768.544 us/op
    p(100.0000) = 203768.544 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 487995.894 us/op
# Warmup Iteration   2: 457100.467 us/op
# Warmup Iteration   3: 441812.377 us/op
# Warmup Iteration   4: 433477.398 us/op
# Warmup Iteration   5: 435545.812 us/op
Iteration   1: 482645.946 us/op
Iteration   2: 459973.949 us/op
Iteration   3: 458362.973 us/op
Iteration   4: 463802.219 us/op
Iteration   5: 464641.999 us/op
Iteration   6: 458061.335 us/op
Iteration   7: 457598.343 us/op
Iteration   8: 460588.558 us/op
Iteration   9: 457674.813 us/op
Iteration  10: 462098.817 us/op
Iteration  11: 458295.354 us/op
Iteration  12: 466425.667 us/op
Iteration  13: 465108.343 us/op
Iteration  14: 461923.421 us/op
Iteration  15: 464108.631 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 462754.025 ±(99.9%) 6690.387 us/op

  Histogram, us/op:
    [450000.000, 452500.000) = 0 
    [452500.000, 455000.000) = 0 
    [455000.000, 457500.000) = 0 
    [457500.000, 460000.000) = 6 
    [460000.000, 462500.000) = 3 
    [462500.000, 465000.000) = 3 
    [465000.000, 467500.000) = 2 
    [467500.000, 470000.000) = 0 
    [470000.000, 472500.000) = 0 
    [472500.000, 475000.000) = 0 
    [475000.000, 477500.000) = 0 
    [477500.000, 480000.000) = 0 
    [480000.000, 482500.000) = 0 
    [482500.000, 485000.000) = 1 
    [485000.000, 487500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 457598.343 us/op
     p(50.0000) = 461923.421 us/op
     p(90.0000) = 472913.779 us/op
     p(95.0000) = 482645.946 us/op
     p(99.0000) = 482645.946 us/op
     p(99.9000) = 482645.946 us/op
     p(99.9900) = 482645.946 us/op
     p(99.9990) = 482645.946 us/op
     p(99.9999) = 482645.946 us/op
    p(100.0000) = 482645.946 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 426606.159 us/op
# Warmup Iteration   2: 452134.950 us/op
# Warmup Iteration   3: 449254.184 us/op
# Warmup Iteration   4: 449737.562 us/op
# Warmup Iteration   5: 450125.942 us/op
Iteration   1: 454637.672 us/op
Iteration   2: 449251.673 us/op
Iteration   3: 449612.218 us/op
Iteration   4: 454961.303 us/op
Iteration   5: 454972.186 us/op
Iteration   6: 451242.407 us/op
Iteration   7: 453539.718 us/op
Iteration   8: 448686.087 us/op
Iteration   9: 454572.941 us/op
Iteration  10: 450681.355 us/op
Iteration  11: 453949.557 us/op
Iteration  12: 450648.730 us/op
Iteration  13: 448958.878 us/op
Iteration  14: 449477.427 us/op
Iteration  15: 450152.733 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 451689.659 ±(99.9%) 2607.830 us/op

  Histogram, us/op:
    [448000.000, 448500.000) = 0 
    [448500.000, 449000.000) = 2 
    [449000.000, 449500.000) = 2 
    [449500.000, 450000.000) = 1 
    [450000.000, 450500.000) = 1 
    [450500.000, 451000.000) = 2 
    [451000.000, 451500.000) = 1 
    [451500.000, 452000.000) = 0 
    [452000.000, 452500.000) = 0 
    [452500.000, 453000.000) = 0 
    [453000.000, 453500.000) = 0 
    [453500.000, 454000.000) = 2 
    [454000.000, 454500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 448686.087 us/op
     p(50.0000) = 450681.355 us/op
     p(90.0000) = 454965.656 us/op
     p(95.0000) = 454972.186 us/op
     p(99.0000) = 454972.186 us/op
     p(99.9000) = 454972.186 us/op
     p(99.9900) = 454972.186 us/op
     p(99.9990) = 454972.186 us/op
     p(99.9999) = 454972.186 us/op
    p(100.0000) = 454972.186 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 418226.754 us/op
# Warmup Iteration   2: 415775.564 us/op
# Warmup Iteration   3: 413314.636 us/op
# Warmup Iteration   4: 407983.745 us/op
# Warmup Iteration   5: 411659.852 us/op
Iteration   1: 409661.697 us/op
Iteration   2: 406508.569 us/op
Iteration   3: 410302.060 us/op
Iteration   4: 409643.518 us/op
Iteration   5: 411949.601 us/op
Iteration   6: 409322.555 us/op
Iteration   7: 406715.779 us/op
Iteration   8: 412931.039 us/op
Iteration   9: 406702.634 us/op
Iteration  10: 409081.632 us/op
Iteration  11: 406620.416 us/op
Iteration  12: 413479.189 us/op
Iteration  13: 411019.496 us/op
Iteration  14: 406951.230 us/op
Iteration  15: 406014.512 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 409126.928 ±(99.9%) 2652.521 us/op

  Histogram, us/op:
    [406000.000, 406500.000) = 1 
    [406500.000, 407000.000) = 5 
    [407000.000, 407500.000) = 0 
    [407500.000, 408000.000) = 0 
    [408000.000, 408500.000) = 0 
    [408500.000, 409000.000) = 0 
    [409000.000, 409500.000) = 2 
    [409500.000, 410000.000) = 2 
    [410000.000, 410500.000) = 1 
    [410500.000, 411000.000) = 0 
    [411000.000, 411500.000) = 1 
    [411500.000, 412000.000) = 1 
    [412000.000, 412500.000) = 0 
    [412500.000, 413000.000) = 1 
    [413000.000, 413500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 406014.512 us/op
     p(50.0000) = 409322.555 us/op
     p(90.0000) = 413150.299 us/op
     p(95.0000) = 413479.189 us/op
     p(99.0000) = 413479.189 us/op
     p(99.9000) = 413479.189 us/op
     p(99.9900) = 413479.189 us/op
     p(99.9990) = 413479.189 us/op
     p(99.9999) = 413479.189 us/op
    p(100.0000) = 413479.189 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 400266.101 us/op
# Warmup Iteration   2: 400184.754 us/op
# Warmup Iteration   3: 395997.375 us/op
# Warmup Iteration   4: 440901.967 us/op
# Warmup Iteration   5: 397876.283 us/op
Iteration   1: 403033.220 us/op
Iteration   2: 438309.545 us/op
Iteration   3: 399955.959 us/op
Iteration   4: 409643.714 us/op
Iteration   5: 438893.958 us/op
Iteration   6: 402263.414 us/op
Iteration   7: 397348.180 us/op
Iteration   8: 396358.420 us/op
Iteration   9: 431556.165 us/op
Iteration  10: 402204.412 us/op
Iteration  11: 399014.748 us/op
Iteration  12: 404236.203 us/op
Iteration  13: 397148.777 us/op
Iteration  14: 396992.309 us/op
Iteration  15: 398207.905 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 407677.795 ±(99.9%) 16322.773 us/op

  Histogram, us/op:
    [390000.000, 395000.000) = 0 
    [395000.000, 400000.000) = 7 
    [400000.000, 405000.000) = 4 
    [405000.000, 410000.000) = 1 
    [410000.000, 415000.000) = 0 
    [415000.000, 420000.000) = 0 
    [420000.000, 425000.000) = 0 
    [425000.000, 430000.000) = 0 
    [430000.000, 435000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 396358.420 us/op
     p(50.0000) = 402204.412 us/op
     p(90.0000) = 438543.310 us/op
     p(95.0000) = 438893.958 us/op
     p(99.0000) = 438893.958 us/op
     p(99.9000) = 438893.958 us/op
     p(99.9900) = 438893.958 us/op
     p(99.9990) = 438893.958 us/op
     p(99.9999) = 438893.958 us/op
    p(100.0000) = 438893.958 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 419936.231 us/op
# Warmup Iteration   2: 419999.840 us/op
# Warmup Iteration   3: 423007.936 us/op
# Warmup Iteration   4: 396944.437 us/op
# Warmup Iteration   5: 396118.773 us/op
Iteration   1: 422941.864 us/op
Iteration   2: 420619.403 us/op
Iteration   3: 399812.519 us/op
Iteration   4: 399243.277 us/op
Iteration   5: 423731.556 us/op
Iteration   6: 404445.201 us/op
Iteration   7: 408798.722 us/op
Iteration   8: 428217.610 us/op
Iteration   9: 415402.473 us/op
Iteration  10: 396302.275 us/op
Iteration  11: 398855.363 us/op
Iteration  12: 432079.711 us/op
Iteration  13: 415071.160 us/op
Iteration  14: 402987.968 us/op
Iteration  15: 426188.892 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 412979.866 ±(99.9%) 13045.774 us/op

  Histogram, us/op:
    [390000.000, 395000.000) = 0 
    [395000.000, 400000.000) = 4 
    [400000.000, 405000.000) = 2 
    [405000.000, 410000.000) = 1 
    [410000.000, 415000.000) = 0 
    [415000.000, 420000.000) = 2 
    [420000.000, 425000.000) = 3 
    [425000.000, 430000.000) = 2 
    [430000.000, 435000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 396302.275 us/op
     p(50.0000) = 415071.160 us/op
     p(90.0000) = 429762.450 us/op
     p(95.0000) = 432079.711 us/op
     p(99.0000) = 432079.711 us/op
     p(99.9000) = 432079.711 us/op
     p(99.9900) = 432079.711 us/op
     p(99.9990) = 432079.711 us/op
     p(99.9999) = 432079.711 us/op
    p(100.0000) = 432079.711 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 392323.242 us/op
# Warmup Iteration   2: 390842.200 us/op
# Warmup Iteration   3: 387846.195 us/op
# Warmup Iteration   4: 389941.656 us/op
# Warmup Iteration   5: 392687.921 us/op
Iteration   1: 395446.371 us/op
Iteration   2: 389309.615 us/op
Iteration   3: 390857.180 us/op
Iteration   4: 390605.609 us/op
Iteration   5: 390074.847 us/op
Iteration   6: 391419.687 us/op
Iteration   7: 389661.377 us/op
Iteration   8: 391748.260 us/op
Iteration   9: 389118.138 us/op
Iteration  10: 392480.875 us/op
Iteration  11: 395793.271 us/op
Iteration  12: 398225.695 us/op
Iteration  13: 388777.640 us/op
Iteration  14: 392092.730 us/op
Iteration  15: 388751.339 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 391624.176 ±(99.9%) 3029.875 us/op

  Histogram, us/op:
    [388000.000, 389000.000) = 2 
    [389000.000, 390000.000) = 3 
    [390000.000, 391000.000) = 3 
    [391000.000, 392000.000) = 2 
    [392000.000, 393000.000) = 2 
    [393000.000, 394000.000) = 0 
    [394000.000, 395000.000) = 0 
    [395000.000, 396000.000) = 2 
    [396000.000, 397000.000) = 0 
    [397000.000, 398000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 388751.339 us/op
     p(50.0000) = 390857.180 us/op
     p(90.0000) = 396766.241 us/op
     p(95.0000) = 398225.695 us/op
     p(99.0000) = 398225.695 us/op
     p(99.9000) = 398225.695 us/op
     p(99.9900) = 398225.695 us/op
     p(99.9990) = 398225.695 us/op
     p(99.9999) = 398225.695 us/op
    p(100.0000) = 398225.695 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5917.264 us/op
# Warmup Iteration   2: 3862.184 us/op
# Warmup Iteration   3: 584.815 us/op
# Warmup Iteration   4: 428.343 us/op
# Warmup Iteration   5: 408.638 us/op
Iteration   1: 424.114 us/op
Iteration   2: 413.556 us/op
Iteration   3: 413.904 us/op
Iteration   4: 409.534 us/op
Iteration   5: 446.982 us/op
Iteration   6: 440.346 us/op
Iteration   7: 412.324 us/op
Iteration   8: 445.775 us/op
Iteration   9: 394.718 us/op
Iteration  10: 471.155 us/op
Iteration  11: 399.757 us/op
Iteration  12: 439.571 us/op
Iteration  13: 396.789 us/op
Iteration  14: 404.977 us/op
Iteration  15: 419.310 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  N = 15
  mean =    422.187 ±(99.9%) 23.582 us/op

  Histogram, us/op:
    [390.000, 395.000) = 1 
    [395.000, 400.000) = 2 
    [400.000, 405.000) = 1 
    [405.000, 410.000) = 1 
    [410.000, 415.000) = 3 
    [415.000, 420.000) = 1 
    [420.000, 425.000) = 1 
    [425.000, 430.000) = 0 
    [430.000, 435.000) = 0 
    [435.000, 440.000) = 1 
    [440.000, 445.000) = 1 
    [445.000, 450.000) = 2 
    [450.000, 455.000) = 0 
    [455.000, 460.000) = 0 
    [460.000, 465.000) = 0 
    [465.000, 470.000) = 0 
    [470.000, 475.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    394.718 us/op
     p(50.0000) =    413.904 us/op
     p(90.0000) =    456.651 us/op
     p(95.0000) =    471.155 us/op
     p(99.0000) =    471.155 us/op
     p(99.9000) =    471.155 us/op
     p(99.9900) =    471.155 us/op
     p(99.9990) =    471.155 us/op
     p(99.9999) =    471.155 us/op
    p(100.0000) =    471.155 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4857.486 us/op
# Warmup Iteration   2: 412.331 us/op
# Warmup Iteration   3: 207.796 us/op
# Warmup Iteration   4: 192.332 us/op
# Warmup Iteration   5: 207.216 us/op
Iteration   1: 212.115 us/op
Iteration   2: 220.535 us/op
Iteration   3: 205.996 us/op
Iteration   4: 250.623 us/op
Iteration   5: 217.561 us/op
Iteration   6: 217.028 us/op
Iteration   7: 192.323 us/op
Iteration   8: 235.728 us/op
Iteration   9: 217.095 us/op
Iteration  10: 239.412 us/op
Iteration  11: 223.443 us/op
Iteration  12: 228.900 us/op
Iteration  13: 201.839 us/op
Iteration  14: 213.025 us/op
Iteration  15: 226.196 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  N = 15
  mean =    220.121 ±(99.9%) 15.953 us/op

  Histogram, us/op:
    [190.000, 195.000) = 1 
    [195.000, 200.000) = 0 
    [200.000, 205.000) = 1 
    [205.000, 210.000) = 1 
    [210.000, 215.000) = 2 
    [215.000, 220.000) = 3 
    [220.000, 225.000) = 2 
    [225.000, 230.000) = 2 
    [230.000, 235.000) = 0 
    [235.000, 240.000) = 2 
    [240.000, 245.000) = 0 
    [245.000, 250.000) = 0 
    [250.000, 255.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    192.323 us/op
     p(50.0000) =    217.561 us/op
     p(90.0000) =    243.896 us/op
     p(95.0000) =    250.623 us/op
     p(99.0000) =    250.623 us/op
     p(99.9000) =    250.623 us/op
     p(99.9900) =    250.623 us/op
     p(99.9990) =    250.623 us/op
     p(99.9999) =    250.623 us/op
    p(100.0000) =    250.623 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6147.032 us/op
# Warmup Iteration   2: 2684.442 us/op
# Warmup Iteration   3: 299.833 us/op
# Warmup Iteration   4: 296.167 us/op
# Warmup Iteration   5: 294.078 us/op
Iteration   1: 294.241 us/op
Iteration   2: 311.188 us/op
Iteration   3: 296.576 us/op
Iteration   4: 308.328 us/op
Iteration   5: 293.857 us/op
Iteration   6: 295.525 us/op
Iteration   7: 302.346 us/op
Iteration   8: 297.982 us/op
Iteration   9: 294.371 us/op
Iteration  10: 298.394 us/op
Iteration  11: 298.322 us/op
Iteration  12: 301.214 us/op
Iteration  13: 295.623 us/op
Iteration  14: 293.467 us/op
Iteration  15: 313.430 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  N = 15
  mean =    299.658 ±(99.9%) 6.915 us/op

  Histogram, us/op:
    [290.000, 292.500) = 0 
    [292.500, 295.000) = 4 
    [295.000, 297.500) = 3 
    [297.500, 300.000) = 3 
    [300.000, 302.500) = 2 
    [302.500, 305.000) = 0 
    [305.000, 307.500) = 0 
    [307.500, 310.000) = 1 
    [310.000, 312.500) = 1 
    [312.500, 315.000) = 1 
    [315.000, 317.500) = 0 

  Percentiles, us/op:
      p(0.0000) =    293.467 us/op
     p(50.0000) =    297.982 us/op
     p(90.0000) =    312.085 us/op
     p(95.0000) =    313.430 us/op
     p(99.0000) =    313.430 us/op
     p(99.9000) =    313.430 us/op
     p(99.9900) =    313.430 us/op
     p(99.9990) =    313.430 us/op
     p(99.9999) =    313.430 us/op
    p(100.0000) =    313.430 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5250.237 us/op
# Warmup Iteration   2: 497.883 us/op
# Warmup Iteration   3: 280.716 us/op
# Warmup Iteration   4: 253.226 us/op
# Warmup Iteration   5: 231.097 us/op
Iteration   1: 267.642 us/op
Iteration   2: 283.233 us/op
Iteration   3: 306.665 us/op
Iteration   4: 300.353 us/op
Iteration   5: 302.255 us/op
Iteration   6: 286.868 us/op
Iteration   7: 201.283 us/op
Iteration   8: 296.286 us/op
Iteration   9: 211.602 us/op
Iteration  10: 292.511 us/op
Iteration  11: 234.828 us/op
Iteration  12: 239.831 us/op
Iteration  13: 239.347 us/op
Iteration  14: 263.690 us/op
Iteration  15: 235.750 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  N = 15
  mean =    264.143 ±(99.9%) 37.128 us/op

  Histogram, us/op:
    [200.000, 212.500) = 2 
    [212.500, 225.000) = 0 
    [225.000, 237.500) = 2 
    [237.500, 250.000) = 2 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 2 
    [275.000, 287.500) = 2 
    [287.500, 300.000) = 2 
    [300.000, 312.500) = 3 
    [312.500, 325.000) = 0 
    [325.000, 337.500) = 0 
    [337.500, 350.000) = 0 
    [350.000, 362.500) = 0 
    [362.500, 375.000) = 0 
    [375.000, 387.500) = 0 

  Percentiles, us/op:
      p(0.0000) =    201.283 us/op
     p(50.0000) =    267.642 us/op
     p(90.0000) =    304.019 us/op
     p(95.0000) =    306.665 us/op
     p(99.0000) =    306.665 us/op
     p(99.9000) =    306.665 us/op
     p(99.9900) =    306.665 us/op
     p(99.9990) =    306.665 us/op
     p(99.9999) =    306.665 us/op
    p(100.0000) =    306.665 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1434719.414 us/op
# Warmup Iteration   2: 1400839.617 us/op
# Warmup Iteration   3: 1399282.744 us/op
# Warmup Iteration   4: 1389230.741 us/op
# Warmup Iteration   5: 1389745.481 us/op
Iteration   1: 1385884.503 us/op
Iteration   2: 1384831.304 us/op
Iteration   3: 1381122.773 us/op
Iteration   4: 1382213.511 us/op
Iteration   5: 1379578.948 us/op
Iteration   6: 1386165.355 us/op
Iteration   7: 1389112.442 us/op
Iteration   8: 1387783.588 us/op
Iteration   9: 1385778.491 us/op
Iteration  10: 1381148.352 us/op
Iteration  11: 1379489.856 us/op
Iteration  12: 1385502.255 us/op
Iteration  13: 1392916.242 us/op
Iteration  14: 1380797.766 us/op
Iteration  15: 1386005.664 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  N = 15
  mean = 1384555.403 ±(99.9%) 4075.289 us/op

  Histogram, us/op:
    [1370000.000, 1372500.000) = 0 
    [1372500.000, 1375000.000) = 0 
    [1375000.000, 1377500.000) = 0 
    [1377500.000, 1380000.000) = 2 
    [1380000.000, 1382500.000) = 4 
    [1382500.000, 1385000.000) = 1 
    [1385000.000, 1387500.000) = 5 
    [1387500.000, 1390000.000) = 2 
    [1390000.000, 1392500.000) = 0 
    [1392500.000, 1395000.000) = 1 
    [1395000.000, 1397500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1379489.856 us/op
     p(50.0000) = 1385502.255 us/op
     p(90.0000) = 1390633.962 us/op
     p(95.0000) = 1392916.242 us/op
     p(99.0000) = 1392916.242 us/op
     p(99.9000) = 1392916.242 us/op
     p(99.9900) = 1392916.242 us/op
     p(99.9990) = 1392916.242 us/op
     p(99.9999) = 1392916.242 us/op
    p(100.0000) = 1392916.242 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 175135.551 us/op
# Warmup Iteration   2: 149096.887 us/op
# Warmup Iteration   3: 141672.493 us/op
# Warmup Iteration   4: 147755.164 us/op
# Warmup Iteration   5: 140937.855 us/op
Iteration   1: 138439.653 us/op
Iteration   2: 135403.655 us/op
Iteration   3: 141625.461 us/op
Iteration   4: 138144.701 us/op
Iteration   5: 141467.009 us/op
Iteration   6: 143682.583 us/op
Iteration   7: 138763.868 us/op
Iteration   8: 141480.707 us/op
Iteration   9: 142350.065 us/op
Iteration  10: 147411.644 us/op
Iteration  11: 138170.615 us/op
Iteration  12: 137916.627 us/op
Iteration  13: 143283.212 us/op
Iteration  14: 140271.193 us/op
Iteration  15: 136156.403 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 15
  mean = 140304.493 ±(99.9%) 3398.216 us/op

  Histogram, us/op:
    [130000.000, 131250.000) = 0 
    [131250.000, 132500.000) = 0 
    [132500.000, 133750.000) = 0 
    [133750.000, 135000.000) = 0 
    [135000.000, 136250.000) = 2 
    [136250.000, 137500.000) = 0 
    [137500.000, 138750.000) = 4 
    [138750.000, 140000.000) = 1 
    [140000.000, 141250.000) = 1 
    [141250.000, 142500.000) = 4 
    [142500.000, 143750.000) = 2 
    [143750.000, 145000.000) = 0 
    [145000.000, 146250.000) = 0 
    [146250.000, 147500.000) = 1 
    [147500.000, 148750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 135403.655 us/op
     p(50.0000) = 140271.193 us/op
     p(90.0000) = 145174.207 us/op
     p(95.0000) = 147411.644 us/op
     p(99.0000) = 147411.644 us/op
     p(99.9000) = 147411.644 us/op
     p(99.9900) = 147411.644 us/op
     p(99.9990) = 147411.644 us/op
     p(99.9999) = 147411.644 us/op
    p(100.0000) = 147411.644 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4002869.458 us/op
# Warmup Iteration   2: 4071301.272 us/op
# Warmup Iteration   3: 4065144.562 us/op
# Warmup Iteration   4: 4081809.581 us/op
# Warmup Iteration   5: 4074575.741 us/op
Iteration   1: 4049060.406 us/op
Iteration   2: 4059618.961 us/op
Iteration   3: 4062876.672 us/op
Iteration   4: 4090497.185 us/op
Iteration   5: 4064843.268 us/op
Iteration   6: 4073911.688 us/op
Iteration   7: 4040104.161 us/op
Iteration   8: 4042592.293 us/op
Iteration   9: 4053977.677 us/op
Iteration  10: 4051433.110 us/op
Iteration  11: 4050893.665 us/op
Iteration  12: 4035717.408 us/op
Iteration  13: 4087427.443 us/op
Iteration  14: 4095467.078 us/op
Iteration  15: 4075715.989 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 15
  mean = 4062275.800 ±(99.9%) 20073.120 us/op

  Histogram, us/op:
    [4030000.000, 4035000.000) = 0 
    [4035000.000, 4040000.000) = 1 
    [4040000.000, 4045000.000) = 2 
    [4045000.000, 4050000.000) = 1 
    [4050000.000, 4055000.000) = 3 
    [4055000.000, 4060000.000) = 1 
    [4060000.000, 4065000.000) = 2 
    [4065000.000, 4070000.000) = 0 
    [4070000.000, 4075000.000) = 1 
    [4075000.000, 4080000.000) = 1 
    [4080000.000, 4085000.000) = 0 
    [4085000.000, 4090000.000) = 1 
    [4090000.000, 4095000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 4035717.408 us/op
     p(50.0000) = 4059618.961 us/op
     p(90.0000) = 4092485.142 us/op
     p(95.0000) = 4095467.078 us/op
     p(99.0000) = 4095467.078 us/op
     p(99.9000) = 4095467.078 us/op
     p(99.9900) = 4095467.078 us/op
     p(99.9990) = 4095467.078 us/op
     p(99.9999) = 4095467.078 us/op
    p(100.0000) = 4095467.078 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 124.367 us/op
# Warmup Iteration   2: 62.144 us/op
# Warmup Iteration   3: 14.009 us/op
# Warmup Iteration   4: 13.073 us/op
# Warmup Iteration   5: 13.365 us/op
Iteration   1: 12.679 us/op
Iteration   2: 13.910 us/op
Iteration   3: 13.752 us/op
Iteration   4: 12.586 us/op
Iteration   5: 15.201 us/op
Iteration   6: 16.964 us/op
Iteration   7: 13.008 us/op
Iteration   8: 12.697 us/op
Iteration   9: 13.589 us/op
Iteration  10: 13.296 us/op
Iteration  11: 12.005 us/op
Iteration  12: 14.756 us/op
Iteration  13: 14.019 us/op
Iteration  14: 13.324 us/op
Iteration  15: 11.948 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     13.582 ±(99.9%) 1.399 us/op

  Histogram, us/op:
    [11.000, 11.500) = 0 
    [11.500, 12.000) = 1 
    [12.000, 12.500) = 1 
    [12.500, 13.000) = 3 
    [13.000, 13.500) = 3 
    [13.500, 14.000) = 3 
    [14.000, 14.500) = 1 
    [14.500, 15.000) = 1 
    [15.000, 15.500) = 1 
    [15.500, 16.000) = 0 
    [16.000, 16.500) = 0 

  Percentiles, us/op:
      p(0.0000) =     11.948 us/op
     p(50.0000) =     13.324 us/op
     p(90.0000) =     15.906 us/op
     p(95.0000) =     16.964 us/op
     p(99.0000) =     16.964 us/op
     p(99.9000) =     16.964 us/op
     p(99.9900) =     16.964 us/op
     p(99.9990) =     16.964 us/op
     p(99.9999) =     16.964 us/op
    p(100.0000) =     16.964 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 246.379 us/op
# Warmup Iteration   2: 31.832 us/op
# Warmup Iteration   3: 21.257 us/op
# Warmup Iteration   4: 25.678 us/op
# Warmup Iteration   5: 21.816 us/op
Iteration   1: 47.456 us/op
Iteration   2: 22.757 us/op
Iteration   3: 13.327 us/op
Iteration   4: 13.939 us/op
Iteration   5: 13.464 us/op
Iteration   6: 13.611 us/op
Iteration   7: 12.892 us/op
Iteration   8: 14.871 us/op
Iteration   9: 12.832 us/op
Iteration  10: 13.557 us/op
Iteration  11: 12.484 us/op
Iteration  12: 15.190 us/op
Iteration  13: 15.699 us/op
Iteration  14: 43.481 us/op
Iteration  15: 15.615 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     18.745 ±(99.9%) 11.922 us/op

  Histogram, us/op:
    [10.000, 12.500) = 1 
    [12.500, 15.000) = 8 
    [15.000, 17.500) = 3 
    [17.500, 20.000) = 0 
    [20.000, 22.500) = 0 
    [22.500, 25.000) = 1 
    [25.000, 27.500) = 0 
    [27.500, 30.000) = 0 
    [30.000, 32.500) = 0 
    [32.500, 35.000) = 0 
    [35.000, 37.500) = 0 
    [37.500, 40.000) = 0 
    [40.000, 42.500) = 0 
    [42.500, 45.000) = 1 
    [45.000, 47.500) = 1 

  Percentiles, us/op:
      p(0.0000) =     12.484 us/op
     p(50.0000) =     13.939 us/op
     p(90.0000) =     45.071 us/op
     p(95.0000) =     47.456 us/op
     p(99.0000) =     47.456 us/op
     p(99.9000) =     47.456 us/op
     p(99.9900) =     47.456 us/op
     p(99.9990) =     47.456 us/op
     p(99.9999) =     47.456 us/op
    p(100.0000) =     47.456 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 358.402 us/op
# Warmup Iteration   2: 45.893 us/op
# Warmup Iteration   3: 36.745 us/op
# Warmup Iteration   4: 57.647 us/op
# Warmup Iteration   5: 30.776 us/op
Iteration   1: 20.335 us/op
Iteration   2: 20.909 us/op
Iteration   3: 20.833 us/op
Iteration   4: 19.191 us/op
Iteration   5: 19.581 us/op
Iteration   6: 18.110 us/op
Iteration   7: 17.474 us/op
Iteration   8: 15.840 us/op
Iteration   9: 17.512 us/op
Iteration  10: 20.838 us/op
Iteration  11: 21.279 us/op
Iteration  12: 23.426 us/op
Iteration  13: 24.258 us/op
Iteration  14: 24.454 us/op
Iteration  15: 21.938 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     20.399 ±(99.9%) 2.700 us/op

  Histogram, us/op:
    [15.000, 16.000) = 1 
    [16.000, 17.000) = 0 
    [17.000, 18.000) = 2 
    [18.000, 19.000) = 1 
    [19.000, 20.000) = 2 
    [20.000, 21.000) = 4 
    [21.000, 22.000) = 2 
    [22.000, 23.000) = 0 
    [23.000, 24.000) = 1 

  Percentiles, us/op:
      p(0.0000) =     15.840 us/op
     p(50.0000) =     20.833 us/op
     p(90.0000) =     24.336 us/op
     p(95.0000) =     24.454 us/op
     p(99.0000) =     24.454 us/op
     p(99.9000) =     24.454 us/op
     p(99.9900) =     24.454 us/op
     p(99.9990) =     24.454 us/op
     p(99.9999) =     24.454 us/op
    p(100.0000) =     24.454 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 268.807 us/op
# Warmup Iteration   2: 7.745 us/op
# Warmup Iteration   3: 6.800 us/op
# Warmup Iteration   4: 7.091 us/op
# Warmup Iteration   5: 7.157 us/op
Iteration   1: 14.917 us/op
Iteration   2: 7.360 us/op
Iteration   3: 6.632 us/op
Iteration   4: 6.624 us/op
Iteration   5: 7.275 us/op
Iteration   6: 6.623 us/op
Iteration   7: 7.570 us/op
Iteration   8: 27.831 us/op
Iteration   9: 6.855 us/op
Iteration  10: 6.617 us/op
Iteration  11: 9.869 us/op
Iteration  12: 7.399 us/op
Iteration  13: 7.115 us/op
Iteration  14: 7.303 us/op
Iteration  15: 6.422 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =      9.094 ±(99.9%) 5.999 us/op

  Histogram, us/op:
    [ 0.000,  2.500) = 0 
    [ 2.500,  5.000) = 0 
    [ 5.000,  7.500) = 11 
    [ 7.500, 10.000) = 2 
    [10.000, 12.500) = 0 
    [12.500, 15.000) = 1 
    [15.000, 17.500) = 0 
    [17.500, 20.000) = 0 
    [20.000, 22.500) = 0 
    [22.500, 25.000) = 0 
    [25.000, 27.500) = 0 

  Percentiles, us/op:
      p(0.0000) =      6.422 us/op
     p(50.0000) =      7.275 us/op
     p(90.0000) =     20.083 us/op
     p(95.0000) =     27.831 us/op
     p(99.0000) =     27.831 us/op
     p(99.9000) =     27.831 us/op
     p(99.9900) =     27.831 us/op
     p(99.9990) =     27.831 us/op
     p(99.9999) =     27.831 us/op
    p(100.0000) =     27.831 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 267.765 us/op
# Warmup Iteration   2: 132.005 us/op
# Warmup Iteration   3: 24.369 us/op
# Warmup Iteration   4: 24.158 us/op
# Warmup Iteration   5: 23.617 us/op
Iteration   1: 64.409 us/op
Iteration   2: 22.883 us/op
Iteration   3: 15.824 us/op
Iteration   4: 16.675 us/op
Iteration   5: 16.554 us/op
Iteration   6: 18.094 us/op
Iteration   7: 16.665 us/op
Iteration   8: 17.304 us/op
Iteration   9: 15.942 us/op
Iteration  10: 18.049 us/op
Iteration  11: 17.869 us/op
Iteration  12: 16.837 us/op
Iteration  13: 17.107 us/op
Iteration  14: 16.077 us/op
Iteration  15: 16.128 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =     20.428 ±(99.9%) 13.136 us/op

  Histogram, us/op:
    [10.000, 15.000) = 0 
    [15.000, 20.000) = 13 
    [20.000, 25.000) = 1 
    [25.000, 30.000) = 0 
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 0 
    [40.000, 45.000) = 0 
    [45.000, 50.000) = 0 
    [50.000, 55.000) = 0 
    [55.000, 60.000) = 0 
    [60.000, 65.000) = 1 

  Percentiles, us/op:
      p(0.0000) =     15.824 us/op
     p(50.0000) =     16.837 us/op
     p(90.0000) =     39.493 us/op
     p(95.0000) =     64.409 us/op
     p(99.0000) =     64.409 us/op
     p(99.9000) =     64.409 us/op
     p(99.9900) =     64.409 us/op
     p(99.9990) =     64.409 us/op
     p(99.9999) =     64.409 us/op
    p(100.0000) =     64.409 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 528.254 us/op
# Warmup Iteration   2: 148.903 us/op
# Warmup Iteration   3: 134.705 us/op
# Warmup Iteration   4: 137.786 us/op
# Warmup Iteration   5: 162.630 us/op
Iteration   1: 128.007 us/op
Iteration   2: 126.340 us/op
Iteration   3: 111.056 us/op
Iteration   4: 110.723 us/op
Iteration   5: 148.113 us/op
Iteration   6: 100.596 us/op
Iteration   7: 93.884 us/op
Iteration   8: 93.494 us/op
Iteration   9: 96.369 us/op
Iteration  10: 99.943 us/op
Iteration  11: 94.916 us/op
Iteration  12: 93.769 us/op
Iteration  13: 96.424 us/op
Iteration  14: 125.081 us/op
Iteration  15: 91.952 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =    107.378 ±(99.9%) 18.247 us/op

  Histogram, us/op:
    [ 90.000,  95.000) = 5 
    [ 95.000, 100.000) = 3 
    [100.000, 105.000) = 1 
    [105.000, 110.000) = 0 
    [110.000, 115.000) = 2 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 3 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     91.952 us/op
     p(50.0000) =     99.943 us/op
     p(90.0000) =    136.049 us/op
     p(95.0000) =    148.113 us/op
     p(99.0000) =    148.113 us/op
     p(99.9000) =    148.113 us/op
     p(99.9900) =    148.113 us/op
     p(99.9990) =    148.113 us/op
     p(99.9999) =    148.113 us/op
    p(100.0000) =    148.113 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 335.756 us/op
# Warmup Iteration   2: 6.531 us/op
# Warmup Iteration   3: 6.307 us/op
# Warmup Iteration   4: 6.499 us/op
# Warmup Iteration   5: 6.467 us/op
Iteration   1: 7.497 us/op
Iteration   2: 6.992 us/op
Iteration   3: 6.760 us/op
Iteration   4: 6.967 us/op
Iteration   5: 6.784 us/op
Iteration   6: 7.326 us/op
Iteration   7: 7.023 us/op
Iteration   8: 9.109 us/op
Iteration   9: 19.224 us/op
Iteration  10: 7.282 us/op
Iteration  11: 7.299 us/op
Iteration  12: 7.181 us/op
Iteration  13: 8.141 us/op
Iteration  14: 7.369 us/op
Iteration  15: 7.001 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =      8.130 ±(99.9%) 3.342 us/op

  Histogram, us/op:
    [ 0.000,  1.250) = 0 
    [ 1.250,  2.500) = 0 
    [ 2.500,  3.750) = 0 
    [ 3.750,  5.000) = 0 
    [ 5.000,  6.250) = 0 
    [ 6.250,  7.500) = 12 
    [ 7.500,  8.750) = 1 
    [ 8.750, 10.000) = 1 
    [10.000, 11.250) = 0 
    [11.250, 12.500) = 0 
    [12.500, 13.750) = 0 
    [13.750, 15.000) = 0 
    [15.000, 16.250) = 0 
    [16.250, 17.500) = 0 
    [17.500, 18.750) = 0 

  Percentiles, us/op:
      p(0.0000) =      6.760 us/op
     p(50.0000) =      7.282 us/op
     p(90.0000) =     13.155 us/op
     p(95.0000) =     19.224 us/op
     p(99.0000) =     19.224 us/op
     p(99.9000) =     19.224 us/op
     p(99.9900) =     19.224 us/op
     p(99.9990) =     19.224 us/op
     p(99.9999) =     19.224 us/op
    p(100.0000) =     19.224 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 287.439 us/op
# Warmup Iteration   2: 43.001 us/op
# Warmup Iteration   3: 69.650 us/op
# Warmup Iteration   4: 39.600 us/op
# Warmup Iteration   5: 17.529 us/op
Iteration   1: 17.908 us/op
Iteration   2: 16.808 us/op
Iteration   3: 28.845 us/op
Iteration   4: 16.204 us/op
Iteration   5: 16.307 us/op
Iteration   6: 17.530 us/op
Iteration   7: 16.815 us/op
Iteration   8: 16.032 us/op
Iteration   9: 17.777 us/op
Iteration  10: 17.289 us/op
Iteration  11: 15.908 us/op
Iteration  12: 16.422 us/op
Iteration  13: 16.231 us/op
Iteration  14: 15.964 us/op
Iteration  15: 15.572 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =     17.441 ±(99.9%) 3.459 us/op

  Histogram, us/op:
    [10.000, 11.250) = 0 
    [11.250, 12.500) = 0 
    [12.500, 13.750) = 0 
    [13.750, 15.000) = 0 
    [15.000, 16.250) = 6 
    [16.250, 17.500) = 5 
    [17.500, 18.750) = 3 
    [18.750, 20.000) = 0 
    [20.000, 21.250) = 0 
    [21.250, 22.500) = 0 
    [22.500, 23.750) = 0 
    [23.750, 25.000) = 0 
    [25.000, 26.250) = 0 
    [26.250, 27.500) = 0 
    [27.500, 28.750) = 0 

  Percentiles, us/op:
      p(0.0000) =     15.572 us/op
     p(50.0000) =     16.422 us/op
     p(90.0000) =     22.283 us/op
     p(95.0000) =     28.845 us/op
     p(99.0000) =     28.845 us/op
     p(99.9000) =     28.845 us/op
     p(99.9900) =     28.845 us/op
     p(99.9990) =     28.845 us/op
     p(99.9999) =     28.845 us/op
    p(100.0000) =     28.845 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 529.536 us/op
# Warmup Iteration   2: 142.440 us/op
# Warmup Iteration   3: 213.158 us/op
# Warmup Iteration   4: 231.194 us/op
# Warmup Iteration   5: 221.752 us/op
Iteration   1: 195.300 us/op
Iteration   2: 185.312 us/op
Iteration   3: 107.274 us/op
Iteration   4: 104.453 us/op
Iteration   5: 129.632 us/op
Iteration   6: 134.877 us/op
Iteration   7: 93.259 us/op
Iteration   8: 99.058 us/op
Iteration   9: 120.563 us/op
Iteration  10: 100.617 us/op
Iteration  11: 108.714 us/op
Iteration  12: 92.004 us/op
Iteration  13: 103.702 us/op
Iteration  14: 91.161 us/op
Iteration  15: 95.230 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =    117.410 ±(99.9%) 34.647 us/op

  Histogram, us/op:
    [  0.000,  12.500) = 0 
    [ 12.500,  25.000) = 0 
    [ 25.000,  37.500) = 0 
    [ 37.500,  50.000) = 0 
    [ 50.000,  62.500) = 0 
    [ 62.500,  75.000) = 0 
    [ 75.000,  87.500) = 0 
    [ 87.500, 100.000) = 5 
    [100.000, 112.500) = 5 
    [112.500, 125.000) = 1 
    [125.000, 137.500) = 2 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 1 

  Percentiles, us/op:
      p(0.0000) =     91.161 us/op
     p(50.0000) =    104.453 us/op
     p(90.0000) =    189.307 us/op
     p(95.0000) =    195.300 us/op
     p(99.0000) =    195.300 us/op
     p(99.9000) =    195.300 us/op
     p(99.9900) =    195.300 us/op
     p(99.9990) =    195.300 us/op
     p(99.9999) =    195.300 us/op
    p(100.0000) =    195.300 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 30114.218 us/op
# Warmup Iteration   2: 16473.019 us/op
# Warmup Iteration   3: 14938.057 us/op
# Warmup Iteration   4: 15292.943 us/op
# Warmup Iteration   5: 14717.301 us/op
Iteration   1: 14646.147 us/op
Iteration   2: 14545.359 us/op
Iteration   3: 16589.602 us/op
Iteration   4: 14538.830 us/op
Iteration   5: 14497.270 us/op
Iteration   6: 14570.975 us/op
Iteration   7: 14596.828 us/op
Iteration   8: 14575.428 us/op
Iteration   9: 14523.219 us/op
Iteration  10: 14388.104 us/op
Iteration  11: 14491.327 us/op
Iteration  12: 14430.028 us/op
Iteration  13: 14587.188 us/op
Iteration  14: 14408.249 us/op
Iteration  15: 14448.543 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  N = 15
  mean =  14655.806 ±(99.9%) 577.408 us/op

  Histogram, us/op:
    [14000.000, 14250.000) = 0 
    [14250.000, 14500.000) = 6 
    [14500.000, 14750.000) = 8 
    [14750.000, 15000.000) = 0 
    [15000.000, 15250.000) = 0 
    [15250.000, 15500.000) = 0 
    [15500.000, 15750.000) = 0 
    [15750.000, 16000.000) = 0 
    [16000.000, 16250.000) = 0 
    [16250.000, 16500.000) = 0 
    [16500.000, 16750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  14388.104 us/op
     p(50.0000) =  14538.830 us/op
     p(90.0000) =  15423.529 us/op
     p(95.0000) =  16589.602 us/op
     p(99.0000) =  16589.602 us/op
     p(99.9000) =  16589.602 us/op
     p(99.9900) =  16589.602 us/op
     p(99.9990) =  16589.602 us/op
     p(99.9999) =  16589.602 us/op
    p(100.0000) =  16589.602 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 13974.533 us/op
# Warmup Iteration   2: 3597.330 us/op
# Warmup Iteration   3: 3622.355 us/op
# Warmup Iteration   4: 3603.200 us/op
# Warmup Iteration   5: 3650.062 us/op
Iteration   1: 3691.165 us/op
Iteration   2: 8695.840 us/op
Iteration   3: 1926.372 us/op
Iteration   4: 1834.838 us/op
Iteration   5: 10319.649 us/op
Iteration   6: 2023.001 us/op
Iteration   7: 1424.768 us/op
Iteration   8: 1419.535 us/op
Iteration   9: 1416.983 us/op
Iteration  10: 9653.741 us/op
Iteration  11: 1198.696 us/op
Iteration  12: 1185.389 us/op
Iteration  13: 1148.697 us/op
Iteration  14: 3690.419 us/op
Iteration  15: 1167.037 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean =   3386.409 ±(99.9%) 3537.391 us/op

  Histogram, us/op:
    [ 1000.000,  2000.000) = 9 
    [ 2000.000,  3000.000) = 1 
    [ 3000.000,  4000.000) = 2 
    [ 4000.000,  5000.000) = 0 
    [ 5000.000,  6000.000) = 0 
    [ 6000.000,  7000.000) = 0 
    [ 7000.000,  8000.000) = 0 
    [ 8000.000,  9000.000) = 1 
    [ 9000.000, 10000.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   1148.697 us/op
     p(50.0000) =   1834.838 us/op
     p(90.0000) =   9920.104 us/op
     p(95.0000) =  10319.649 us/op
     p(99.0000) =  10319.649 us/op
     p(99.9000) =  10319.649 us/op
     p(99.9900) =  10319.649 us/op
     p(99.9990) =  10319.649 us/op
     p(99.9999) =  10319.649 us/op
    p(100.0000) =  10319.649 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 88771.318 us/op
# Warmup Iteration   2: 39530.168 us/op
# Warmup Iteration   3: 33753.124 us/op
# Warmup Iteration   4: 33738.901 us/op
# Warmup Iteration   5: 33472.311 us/op
Iteration   1: 35851.428 us/op
Iteration   2: 108002.568 us/op
Iteration   3: 33733.139 us/op
Iteration   4: 33891.867 us/op
Iteration   5: 34417.517 us/op
Iteration   6: 34918.798 us/op
Iteration   7: 34447.566 us/op
Iteration   8: 34299.239 us/op
Iteration   9: 35213.467 us/op
Iteration  10: 108409.904 us/op
Iteration  11: 108631.684 us/op
Iteration  12: 111329.821 us/op
Iteration  13: 111491.189 us/op
Iteration  14: 111612.903 us/op
Iteration  15: 112324.764 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean =  69905.057 ±(99.9%) 41792.238 us/op

  Histogram, us/op:
    [ 30000.000,  35000.000) = 6 
    [ 35000.000,  40000.000) = 2 
    [ 40000.000,  45000.000) = 0 
    [ 45000.000,  50000.000) = 0 
    [ 50000.000,  55000.000) = 0 
    [ 55000.000,  60000.000) = 0 
    [ 60000.000,  65000.000) = 0 
    [ 65000.000,  70000.000) = 0 
    [ 70000.000,  75000.000) = 0 
    [ 75000.000,  80000.000) = 0 
    [ 80000.000,  85000.000) = 0 
    [ 85000.000,  90000.000) = 0 
    [ 90000.000,  95000.000) = 0 
    [ 95000.000, 100000.000) = 0 
    [100000.000, 105000.000) = 0 
    [105000.000, 110000.000) = 3 
    [110000.000, 115000.000) = 4 

  Percentiles, us/op:
      p(0.0000) =  33733.139 us/op
     p(50.0000) =  35851.428 us/op
     p(90.0000) = 111897.647 us/op
     p(95.0000) = 112324.764 us/op
     p(99.0000) = 112324.764 us/op
     p(99.9000) = 112324.764 us/op
     p(99.9900) = 112324.764 us/op
     p(99.9990) = 112324.764 us/op
     p(99.9999) = 112324.764 us/op
    p(100.0000) = 112324.764 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3413129.509 us/op
# Warmup Iteration   2: 11752517.409 us/op
# Warmup Iteration   3: 10661414.325 us/op
# Warmup Iteration   4: 10686914.819 us/op
# Warmup Iteration   5: 10633623.298 us/op
Iteration   1: 10649194.407 us/op
Iteration   2: 10815267.027 us/op
Iteration   3: 10814038.814 us/op
Iteration   4: 10796385.213 us/op
Iteration   5: 10781450.937 us/op
Iteration   6: 10782212.346 us/op
Iteration   7: 10808835.250 us/op
Iteration   8: 10778200.993 us/op
Iteration   9: 10841252.257 us/op
Iteration  10: 10797402.244 us/op
Iteration  11: 10772900.046 us/op
Iteration  12: 10777324.471 us/op
Iteration  13: 10777486.084 us/op
Iteration  14: 10769714.782 us/op
Iteration  15: 10767024.417 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean = 10781912.619 ±(99.9%) 45140.386 us/op

  Histogram, us/op:
    [10600000.000, 10625000.000) = 0 
    [10625000.000, 10650000.000) = 1 
    [10650000.000, 10675000.000) = 0 
    [10675000.000, 10700000.000) = 0 
    [10700000.000, 10725000.000) = 0 
    [10725000.000, 10750000.000) = 0 
    [10750000.000, 10775000.000) = 3 
    [10775000.000, 10800000.000) = 7 
    [10800000.000, 10825000.000) = 3 
    [10825000.000, 10850000.000) = 1 
    [10850000.000, 10875000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 10649194.407 us/op
     p(50.0000) = 10781450.937 us/op
     p(90.0000) = 10825661.119 us/op
     p(95.0000) = 10841252.257 us/op
     p(99.0000) = 10841252.257 us/op
     p(99.9000) = 10841252.257 us/op
     p(99.9900) = 10841252.257 us/op
     p(99.9990) = 10841252.257 us/op
     p(99.9999) = 10841252.257 us/op
    p(100.0000) = 10841252.257 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 23005.445 us/op
# Warmup Iteration   2: 10426.295 us/op
# Warmup Iteration   3: 2140.651 us/op
# Warmup Iteration   4: 2111.423 us/op
# Warmup Iteration   5: 2116.503 us/op
Iteration   1: 2118.369 us/op
Iteration   2: 2089.096 us/op
Iteration   3: 2095.064 us/op
Iteration   4: 2127.548 us/op
Iteration   5: 2109.877 us/op
Iteration   6: 2125.963 us/op
Iteration   7: 2124.950 us/op
Iteration   8: 2117.349 us/op
Iteration   9: 2102.362 us/op
Iteration  10: 2106.930 us/op
Iteration  11: 2090.787 us/op
Iteration  12: 2116.898 us/op
Iteration  13: 2107.563 us/op
Iteration  14: 2085.110 us/op
Iteration  15: 2125.216 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  N = 15
  mean =   2109.539 ±(99.9%) 15.409 us/op

  Histogram, us/op:
    [2080.000, 2085.000) = 0 
    [2085.000, 2090.000) = 2 
    [2090.000, 2095.000) = 1 
    [2095.000, 2100.000) = 1 
    [2100.000, 2105.000) = 1 
    [2105.000, 2110.000) = 3 
    [2110.000, 2115.000) = 0 
    [2115.000, 2120.000) = 3 
    [2120.000, 2125.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   2085.110 us/op
     p(50.0000) =   2109.877 us/op
     p(90.0000) =   2126.597 us/op
     p(95.0000) =   2127.548 us/op
     p(99.0000) =   2127.548 us/op
     p(99.9000) =   2127.548 us/op
     p(99.9900) =   2127.548 us/op
     p(99.9990) =   2127.548 us/op
     p(99.9999) =   2127.548 us/op
    p(100.0000) =   2127.548 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 67834.471 us/op
# Warmup Iteration   2: 62747.099 us/op
# Warmup Iteration   3: 62133.072 us/op
# Warmup Iteration   4: 62105.906 us/op
# Warmup Iteration   5: 61998.049 us/op
Iteration   1: 61635.634 us/op
Iteration   2: 62169.503 us/op
Iteration   3: 62201.773 us/op
Iteration   4: 61825.754 us/op
Iteration   5: 62085.754 us/op
Iteration   6: 62124.757 us/op
Iteration   7: 62159.761 us/op
Iteration   8: 62101.755 us/op
Iteration   9: 62293.224 us/op
Iteration  10: 62104.395 us/op
Iteration  11: 61978.336 us/op
Iteration  12: 61891.352 us/op
Iteration  13: 62225.537 us/op
Iteration  14: 62085.880 us/op
Iteration  15: 62138.743 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  N = 15
  mean =  62068.144 ±(99.9%) 182.581 us/op

  Histogram, us/op:
    [61600.000, 61650.000) = 1 
    [61650.000, 61700.000) = 0 
    [61700.000, 61750.000) = 0 
    [61750.000, 61800.000) = 0 
    [61800.000, 61850.000) = 1 
    [61850.000, 61900.000) = 1 
    [61900.000, 61950.000) = 0 
    [61950.000, 62000.000) = 1 
    [62000.000, 62050.000) = 0 
    [62050.000, 62100.000) = 2 
    [62100.000, 62150.000) = 4 
    [62150.000, 62200.000) = 2 
    [62200.000, 62250.000) = 2 

  Percentiles, us/op:
      p(0.0000) =  61635.634 us/op
     p(50.0000) =  62104.395 us/op
     p(90.0000) =  62252.612 us/op
     p(95.0000) =  62293.224 us/op
     p(99.0000) =  62293.224 us/op
     p(99.9000) =  62293.224 us/op
     p(99.9900) =  62293.224 us/op
     p(99.9990) =  62293.224 us/op
     p(99.9999) =  62293.224 us/op
    p(100.0000) =  62293.224 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1726352.202 us/op
# Warmup Iteration   2: 1707527.432 us/op
# Warmup Iteration   3: 1701386.668 us/op
# Warmup Iteration   4: 1704553.124 us/op
# Warmup Iteration   5: 1702212.654 us/op
Iteration   1: 1701211.553 us/op
Iteration   2: 1703279.429 us/op
Iteration   3: 1702951.930 us/op
Iteration   4: 1703446.228 us/op
Iteration   5: 1703376.224 us/op
Iteration   6: 1703743.819 us/op
Iteration   7: 1701715.614 us/op
Iteration   8: 1704275.536 us/op
Iteration   9: 1705717.536 us/op
Iteration  10: 1704596.827 us/op
Iteration  11: 1704269.641 us/op
Iteration  12: 1704447.101 us/op
Iteration  13: 1703389.300 us/op
Iteration  14: 1703738.735 us/op
Iteration  15: 1703070.432 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  N = 15
  mean = 1703548.660 ±(99.9%) 1187.616 us/op

  Histogram, us/op:
    [1701000.000, 1701500.000) = 1 
    [1701500.000, 1702000.000) = 1 
    [1702000.000, 1702500.000) = 0 
    [1702500.000, 1703000.000) = 1 
    [1703000.000, 1703500.000) = 5 
    [1703500.000, 1704000.000) = 2 
    [1704000.000, 1704500.000) = 3 
    [1704500.000, 1705000.000) = 1 
    [1705000.000, 1705500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1701211.553 us/op
     p(50.0000) = 1703446.228 us/op
     p(90.0000) = 1705045.111 us/op
     p(95.0000) = 1705717.536 us/op
     p(99.0000) = 1705717.536 us/op
     p(99.9000) = 1705717.536 us/op
     p(99.9900) = 1705717.536 us/op
     p(99.9990) = 1705717.536 us/op
     p(99.9999) = 1705717.536 us/op
    p(100.0000) = 1705717.536 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 50.026 us/op
# Warmup Iteration   2: 13.554 us/op
# Warmup Iteration   3: 13.144 us/op
# Warmup Iteration   4: 13.281 us/op
# Warmup Iteration   5: 12.594 us/op
Iteration   1: 12.644 us/op
Iteration   2: 17.519 us/op
Iteration   3: 12.503 us/op
Iteration   4: 13.075 us/op
Iteration   5: 16.179 us/op
Iteration   6: 11.421 us/op
Iteration   7: 11.255 us/op
Iteration   8: 10.390 us/op
Iteration   9: 13.859 us/op
Iteration  10: 16.700 us/op
Iteration  11: 13.722 us/op
Iteration  12: 13.219 us/op
Iteration  13: 61.571 us/op
Iteration  14: 11.960 us/op
Iteration  15: 13.921 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  N = 15
  mean =     16.663 ±(99.9%) 13.456 us/op

  Histogram, us/op:
    [10.000, 15.000) = 11 
    [15.000, 20.000) = 3 
    [20.000, 25.000) = 0 
    [25.000, 30.000) = 0 
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 0 
    [40.000, 45.000) = 0 
    [45.000, 50.000) = 0 
    [50.000, 55.000) = 0 
    [55.000, 60.000) = 0 
    [60.000, 65.000) = 1 

  Percentiles, us/op:
      p(0.0000) =     10.390 us/op
     p(50.0000) =     13.219 us/op
     p(90.0000) =     35.140 us/op
     p(95.0000) =     61.571 us/op
     p(99.0000) =     61.571 us/op
     p(99.9000) =     61.571 us/op
     p(99.9900) =     61.571 us/op
     p(99.9990) =     61.571 us/op
     p(99.9999) =     61.571 us/op
    p(100.0000) =     61.571 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 27288.128 us/op
# Warmup Iteration   2: 12626.765 us/op
# Warmup Iteration   3: 7861.362 us/op
# Warmup Iteration   4: 7842.799 us/op
# Warmup Iteration   5: 7825.572 us/op
Iteration   1: 7822.932 us/op
Iteration   2: 7835.682 us/op
Iteration   3: 7875.322 us/op
Iteration   4: 7843.124 us/op
Iteration   5: 7870.295 us/op
Iteration   6: 7903.774 us/op
Iteration   7: 7888.851 us/op
Iteration   8: 7854.023 us/op
Iteration   9: 8051.824 us/op
Iteration  10: 7867.723 us/op
Iteration  11: 7855.449 us/op
Iteration  12: 7848.491 us/op
Iteration  13: 7831.886 us/op
Iteration  14: 7876.443 us/op
Iteration  15: 7862.628 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  N = 15
  mean =   7872.563 ±(99.9%) 57.913 us/op

  Histogram, us/op:
    [7800.000, 7825.000) = 1 
    [7825.000, 7850.000) = 4 
    [7850.000, 7875.000) = 5 
    [7875.000, 7900.000) = 3 
    [7900.000, 7925.000) = 1 
    [7925.000, 7950.000) = 0 
    [7950.000, 7975.000) = 0 
    [7975.000, 8000.000) = 0 
    [8000.000, 8025.000) = 0 
    [8025.000, 8050.000) = 0 
    [8050.000, 8075.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   7822.932 us/op
     p(50.0000) =   7862.628 us/op
     p(90.0000) =   7962.994 us/op
     p(95.0000) =   8051.824 us/op
     p(99.0000) =   8051.824 us/op
     p(99.9000) =   8051.824 us/op
     p(99.9900) =   8051.824 us/op
     p(99.9990) =   8051.824 us/op
     p(99.9999) =   8051.824 us/op
    p(100.0000) =   8051.824 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 70890.868 us/op
# Warmup Iteration   2: 54771.621 us/op
# Warmup Iteration   3: 39457.340 us/op
# Warmup Iteration   4: 33938.166 us/op
# Warmup Iteration   5: 45420.926 us/op
Iteration   1: 40470.268 us/op
Iteration   2: 43381.852 us/op
Iteration   3: 33165.768 us/op
Iteration   4: 40131.406 us/op
Iteration   5: 36435.049 us/op
Iteration   6: 35750.222 us/op
Iteration   7: 39951.420 us/op
Iteration   8: 34129.384 us/op
Iteration   9: 43530.136 us/op
Iteration  10: 33055.434 us/op
Iteration  11: 40855.102 us/op
Iteration  12: 33400.055 us/op
Iteration  13: 34785.895 us/op
Iteration  14: 35190.495 us/op
Iteration  15: 34460.484 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  N = 15
  mean =  37246.198 ±(99.9%) 3998.533 us/op

  Histogram, us/op:
    [30000.000, 31250.000) = 0 
    [31250.000, 32500.000) = 0 
    [32500.000, 33750.000) = 3 
    [33750.000, 35000.000) = 3 
    [35000.000, 36250.000) = 2 
    [36250.000, 37500.000) = 1 
    [37500.000, 38750.000) = 0 
    [38750.000, 40000.000) = 1 
    [40000.000, 41250.000) = 3 
    [41250.000, 42500.000) = 0 
    [42500.000, 43750.000) = 2 
    [43750.000, 45000.000) = 0 
    [45000.000, 46250.000) = 0 
    [46250.000, 47500.000) = 0 
    [47500.000, 48750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  33055.434 us/op
     p(50.0000) =  35750.222 us/op
     p(90.0000) =  43441.166 us/op
     p(95.0000) =  43530.136 us/op
     p(99.0000) =  43530.136 us/op
     p(99.9000) =  43530.136 us/op
     p(99.9900) =  43530.136 us/op
     p(99.9990) =  43530.136 us/op
     p(99.9999) =  43530.136 us/op
    p(100.0000) =  43530.136 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 71270.633 us/op
# Warmup Iteration   2: 45398.557 us/op
# Warmup Iteration   3: 34918.490 us/op
# Warmup Iteration   4: 34344.958 us/op
# Warmup Iteration   5: 34163.179 us/op
Iteration   1: 33876.952 us/op
Iteration   2: 34061.171 us/op
Iteration   3: 33959.960 us/op
Iteration   4: 34580.264 us/op
Iteration   5: 34051.657 us/op
Iteration   6: 33929.646 us/op
Iteration   7: 33955.960 us/op
Iteration   8: 34058.631 us/op
Iteration   9: 34043.143 us/op
Iteration  10: 34051.765 us/op
Iteration  11: 33982.747 us/op
Iteration  12: 34416.485 us/op
Iteration  13: 33903.244 us/op
Iteration  14: 33936.915 us/op
Iteration  15: 34335.227 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  N = 15
  mean =  34076.251 ±(99.9%) 218.904 us/op

  Histogram, us/op:
    [33800.000, 33850.000) = 0 
    [33850.000, 33900.000) = 1 
    [33900.000, 33950.000) = 3 
    [33950.000, 34000.000) = 3 
    [34000.000, 34050.000) = 1 
    [34050.000, 34100.000) = 4 
    [34100.000, 34150.000) = 0 
    [34150.000, 34200.000) = 0 
    [34200.000, 34250.000) = 0 
    [34250.000, 34300.000) = 0 
    [34300.000, 34350.000) = 1 
    [34350.000, 34400.000) = 0 
    [34400.000, 34450.000) = 1 
    [34450.000, 34500.000) = 0 
    [34500.000, 34550.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  33876.952 us/op
     p(50.0000) =  34043.143 us/op
     p(90.0000) =  34481.997 us/op
     p(95.0000) =  34580.264 us/op
     p(99.0000) =  34580.264 us/op
     p(99.9000) =  34580.264 us/op
     p(99.9900) =  34580.264 us/op
     p(99.9990) =  34580.264 us/op
     p(99.9999) =  34580.264 us/op
    p(100.0000) =  34580.264 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 40917.214 us/op
# Warmup Iteration   2: 29898.201 us/op
# Warmup Iteration   3: 29581.952 us/op
# Warmup Iteration   4: 29965.485 us/op
# Warmup Iteration   5: 29663.418 us/op
Iteration   1: 26290.530 us/op
Iteration   2: 27074.754 us/op
Iteration   3: 26602.999 us/op
Iteration   4: 26622.924 us/op
Iteration   5: 27261.817 us/op
Iteration   6: 26738.482 us/op
Iteration   7: 26450.133 us/op
Iteration   8: 26623.785 us/op
Iteration   9: 26564.331 us/op
Iteration  10: 26471.435 us/op
Iteration  11: 26484.687 us/op
Iteration  12: 26529.742 us/op
Iteration  13: 26556.202 us/op
Iteration  14: 26719.675 us/op
Iteration  15: 26737.523 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  N = 15
  mean =  26648.601 ±(99.9%) 261.500 us/op

  Histogram, us/op:
    [26200.000, 26300.000) = 1 
    [26300.000, 26400.000) = 0 
    [26400.000, 26500.000) = 3 
    [26500.000, 26600.000) = 3 
    [26600.000, 26700.000) = 3 
    [26700.000, 26800.000) = 3 
    [26800.000, 26900.000) = 0 
    [26900.000, 27000.000) = 0 
    [27000.000, 27100.000) = 1 
    [27100.000, 27200.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  26290.530 us/op
     p(50.0000) =  26602.999 us/op
     p(90.0000) =  27149.579 us/op
     p(95.0000) =  27261.817 us/op
     p(99.0000) =  27261.817 us/op
     p(99.9000) =  27261.817 us/op
     p(99.9900) =  27261.817 us/op
     p(99.9990) =  27261.817 us/op
     p(99.9999) =  27261.817 us/op
    p(100.0000) =  27261.817 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 34524.382 us/op
# Warmup Iteration   2: 26943.675 us/op
# Warmup Iteration   3: 21990.025 us/op
# Warmup Iteration   4: 21668.822 us/op
# Warmup Iteration   5: 21816.580 us/op
Iteration   1: 21752.546 us/op
Iteration   2: 21729.073 us/op
Iteration   3: 21847.053 us/op
Iteration   4: 21758.373 us/op
Iteration   5: 21821.197 us/op
Iteration   6: 21868.117 us/op
Iteration   7: 21712.904 us/op
Iteration   8: 22125.847 us/op
Iteration   9: 21847.651 us/op
Iteration  10: 21882.940 us/op
Iteration  11: 21694.944 us/op
Iteration  12: 22018.615 us/op
Iteration  13: 21770.433 us/op
Iteration  14: 21844.233 us/op
Iteration  15: 21776.659 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  N = 15
  mean =  21830.039 ±(99.9%) 123.852 us/op

  Histogram, us/op:
    [21600.000, 21650.000) = 0 
    [21650.000, 21700.000) = 1 
    [21700.000, 21750.000) = 2 
    [21750.000, 21800.000) = 4 
    [21800.000, 21850.000) = 4 
    [21850.000, 21900.000) = 2 
    [21900.000, 21950.000) = 0 
    [21950.000, 22000.000) = 0 
    [22000.000, 22050.000) = 1 
    [22050.000, 22100.000) = 0 
    [22100.000, 22150.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  21694.944 us/op
     p(50.0000) =  21821.197 us/op
     p(90.0000) =  22061.508 us/op
     p(95.0000) =  22125.847 us/op
     p(99.0000) =  22125.847 us/op
     p(99.9000) =  22125.847 us/op
     p(99.9900) =  22125.847 us/op
     p(99.9990) =  22125.847 us/op
     p(99.9999) =  22125.847 us/op
    p(100.0000) =  22125.847 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 93582.162 us/op
# Warmup Iteration   2: 55760.313 us/op
# Warmup Iteration   3: 40310.469 us/op
# Warmup Iteration   4: 42670.144 us/op
# Warmup Iteration   5: 40993.588 us/op
Iteration   1: 41103.102 us/op
Iteration   2: 41107.922 us/op
Iteration   3: 40001.357 us/op
Iteration   4: 40048.152 us/op
Iteration   5: 42492.207 us/op
Iteration   6: 38896.473 us/op
Iteration   7: 40841.445 us/op
Iteration   8: 39701.645 us/op
Iteration   9: 40565.466 us/op
Iteration  10: 41174.522 us/op
Iteration  11: 40918.192 us/op
Iteration  12: 40892.464 us/op
Iteration  13: 40842.906 us/op
Iteration  14: 41207.708 us/op
Iteration  15: 41505.337 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  N = 15
  mean =  40753.260 ±(99.9%) 900.601 us/op

  Histogram, us/op:
    [38000.000, 38500.000) = 0 
    [38500.000, 39000.000) = 1 
    [39000.000, 39500.000) = 0 
    [39500.000, 40000.000) = 1 
    [40000.000, 40500.000) = 2 
    [40500.000, 41000.000) = 5 
    [41000.000, 41500.000) = 4 
    [41500.000, 42000.000) = 1 
    [42000.000, 42500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  38896.473 us/op
     p(50.0000) =  40892.464 us/op
     p(90.0000) =  41900.085 us/op
     p(95.0000) =  42492.207 us/op
     p(99.0000) =  42492.207 us/op
     p(99.9000) =  42492.207 us/op
     p(99.9900) =  42492.207 us/op
     p(99.9990) =  42492.207 us/op
     p(99.9999) =  42492.207 us/op
    p(100.0000) =  42492.207 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 15707.165 us/op
# Warmup Iteration   2: 1517.556 us/op
# Warmup Iteration   3: 1324.007 us/op
# Warmup Iteration   4: 1424.007 us/op
# Warmup Iteration   5: 1214.720 us/op
Iteration   1: 1187.760 us/op
Iteration   2: 1230.398 us/op
Iteration   3: 930.132 us/op
Iteration   4: 981.761 us/op
Iteration   5: 1055.143 us/op
Iteration   6: 997.331 us/op
Iteration   7: 945.715 us/op
Iteration   8: 914.723 us/op
Iteration   9: 1008.447 us/op
Iteration  10: 1000.314 us/op
Iteration  11: 931.068 us/op
Iteration  12: 907.397 us/op
Iteration  13: 901.486 us/op
Iteration  14: 917.031 us/op
Iteration  15: 899.344 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean =    987.203 ±(99.9%) 108.603 us/op

  Histogram, us/op:
    [ 800.000,  850.000) = 0 
    [ 850.000,  900.000) = 1 
    [ 900.000,  950.000) = 7 
    [ 950.000, 1000.000) = 2 
    [1000.000, 1050.000) = 2 
    [1050.000, 1100.000) = 1 
    [1100.000, 1150.000) = 0 
    [1150.000, 1200.000) = 1 
    [1200.000, 1250.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    899.344 us/op
     p(50.0000) =    945.715 us/op
     p(90.0000) =   1204.815 us/op
     p(95.0000) =   1230.398 us/op
     p(99.0000) =   1230.398 us/op
     p(99.9000) =   1230.398 us/op
     p(99.9900) =   1230.398 us/op
     p(99.9990) =   1230.398 us/op
     p(99.9999) =   1230.398 us/op
    p(100.0000) =   1230.398 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 27675.463 us/op
# Warmup Iteration   2: 11148.810 us/op
# Warmup Iteration   3: 11117.080 us/op
# Warmup Iteration   4: 11177.834 us/op
# Warmup Iteration   5: 10975.517 us/op
Iteration   1: 11010.613 us/op
Iteration   2: 10806.542 us/op
Iteration   3: 10860.602 us/op
Iteration   4: 11028.587 us/op
Iteration   5: 10857.823 us/op
Iteration   6: 10921.308 us/op
Iteration   7: 10819.209 us/op
Iteration   8: 10828.162 us/op
Iteration   9: 10825.543 us/op
Iteration  10: 10810.955 us/op
Iteration  11: 10322.878 us/op
Iteration  12: 10821.185 us/op
Iteration  13: 10780.178 us/op
Iteration  14: 10759.126 us/op
Iteration  15: 10809.554 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean =  10817.484 ±(99.9%) 168.060 us/op

  Histogram, us/op:
    [10300.000, 10350.000) = 1 
    [10350.000, 10400.000) = 0 
    [10400.000, 10450.000) = 0 
    [10450.000, 10500.000) = 0 
    [10500.000, 10550.000) = 0 
    [10550.000, 10600.000) = 0 
    [10600.000, 10650.000) = 0 
    [10650.000, 10700.000) = 0 
    [10700.000, 10750.000) = 0 
    [10750.000, 10800.000) = 2 
    [10800.000, 10850.000) = 7 
    [10850.000, 10900.000) = 2 
    [10900.000, 10950.000) = 1 
    [10950.000, 11000.000) = 0 
    [11000.000, 11050.000) = 2 

  Percentiles, us/op:
      p(0.0000) =  10322.878 us/op
     p(50.0000) =  10821.185 us/op
     p(90.0000) =  11017.803 us/op
     p(95.0000) =  11028.587 us/op
     p(99.0000) =  11028.587 us/op
     p(99.9000) =  11028.587 us/op
     p(99.9900) =  11028.587 us/op
     p(99.9990) =  11028.587 us/op
     p(99.9999) =  11028.587 us/op
    p(100.0000) =  11028.587 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 130856.746 us/op
# Warmup Iteration   2: 111488.301 us/op
# Warmup Iteration   3: 112104.758 us/op
# Warmup Iteration   4: 111265.838 us/op
# Warmup Iteration   5: 111960.178 us/op
Iteration   1: 112142.370 us/op
Iteration   2: 110906.563 us/op
Iteration   3: 110800.886 us/op
Iteration   4: 110555.880 us/op
Iteration   5: 109169.306 us/op
Iteration   6: 112968.758 us/op
Iteration   7: 110595.743 us/op
Iteration   8: 110828.036 us/op
Iteration   9: 110461.819 us/op
Iteration  10: 111795.892 us/op
Iteration  11: 110485.127 us/op
Iteration  12: 110454.338 us/op
Iteration  13: 110411.719 us/op
Iteration  14: 110611.013 us/op
Iteration  15: 111606.135 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean = 110919.572 ±(99.9%) 957.253 us/op

  Histogram, us/op:
    [109000.000, 109250.000) = 1 
    [109250.000, 109500.000) = 0 
    [109500.000, 109750.000) = 0 
    [109750.000, 110000.000) = 0 
    [110000.000, 110250.000) = 0 
    [110250.000, 110500.000) = 4 
    [110500.000, 110750.000) = 3 
    [110750.000, 111000.000) = 3 
    [111000.000, 111250.000) = 0 
    [111250.000, 111500.000) = 0 
    [111500.000, 111750.000) = 1 
    [111750.000, 112000.000) = 1 
    [112000.000, 112250.000) = 1 
    [112250.000, 112500.000) = 0 
    [112500.000, 112750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 109169.306 us/op
     p(50.0000) = 110611.013 us/op
     p(90.0000) = 112472.925 us/op
     p(95.0000) = 112968.758 us/op
     p(99.0000) = 112968.758 us/op
     p(99.9000) = 112968.758 us/op
     p(99.9900) = 112968.758 us/op
     p(99.9990) = 112968.758 us/op
     p(99.9999) = 112968.758 us/op
    p(100.0000) = 112968.758 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 577381.897 us/op
# Warmup Iteration   2: 460911.220 us/op
# Warmup Iteration   3: 608182.440 us/op
# Warmup Iteration   4: 562606.086 us/op
# Warmup Iteration   5: 635645.779 us/op
Iteration   1: 368860.304 us/op
Iteration   2: 419665.260 us/op
Iteration   3: 290097.697 us/op
Iteration   4: 409793.377 us/op
Iteration   5: 283113.055 us/op
Iteration   6: 564239.853 us/op
Iteration   7: 289698.495 us/op
Iteration   8: 284407.950 us/op
Iteration   9: 284487.963 us/op
Iteration  10: 287922.291 us/op
Iteration  11: 283462.153 us/op
Iteration  12: 283755.692 us/op
Iteration  13: 288151.109 us/op
Iteration  14: 288143.475 us/op
Iteration  15: 285951.297 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  N = 15
  mean = 327449.998 ±(99.9%) 86554.750 us/op

  Histogram, us/op:
    [200000.000, 225000.000) = 0 
    [225000.000, 250000.000) = 0 
    [250000.000, 275000.000) = 0 
    [275000.000, 300000.000) = 11 
    [300000.000, 325000.000) = 0 
    [325000.000, 350000.000) = 0 
    [350000.000, 375000.000) = 1 
    [375000.000, 400000.000) = 0 
    [400000.000, 425000.000) = 2 
    [425000.000, 450000.000) = 0 
    [450000.000, 475000.000) = 0 
    [475000.000, 500000.000) = 0 
    [500000.000, 525000.000) = 0 
    [525000.000, 550000.000) = 0 
    [550000.000, 575000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 283113.055 us/op
     p(50.0000) = 288143.475 us/op
     p(90.0000) = 477495.097 us/op
     p(95.0000) = 564239.853 us/op
     p(99.0000) = 564239.853 us/op
     p(99.9000) = 564239.853 us/op
     p(99.9900) = 564239.853 us/op
     p(99.9990) = 564239.853 us/op
     p(99.9999) = 564239.853 us/op
    p(100.0000) = 564239.853 us/op


# Run complete. Total time: 08:41:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                    (iterations)  (length)     (size)    Mode      Cnt         Score        Error   Units
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A   thrpt       15         0.003 ±      0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A   thrpt       15         0.006 ±      0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A   thrpt       15         0.003 ±      0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A   thrpt       15         0.006 ±      0.001  ops/us
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A   thrpt       15        ≈ 10⁻⁷               ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A   thrpt       15         0.542 ±      0.001  ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A   thrpt       15         0.193 ±      0.001  ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A   thrpt       15         0.113 ±      0.001  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10   thrpt       15        14.667 ±      0.172  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100   thrpt       15         1.394 ±      0.009  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000   thrpt       15         0.160 ±      0.001  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10   thrpt       15        18.207 ±      0.077  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100   thrpt       15         1.473 ±      0.008  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000   thrpt       15         0.137 ±      0.001  ops/us
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A   thrpt       15         0.003 ±      0.001  ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A   thrpt       15        ≈ 10⁻⁷               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A   thrpt       15        ≈ 10⁻³               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A   thrpt       15         1.804 ±      0.006  ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A   thrpt       15         0.002 ±      0.001  ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024    avgt       15    223643.182 ±   1722.464   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240    avgt       15    223752.648 ±    416.761   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400    avgt       15    205188.177 ±    290.596   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576    avgt       15    200617.325 ±    282.723   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760    avgt       15    200057.582 ±    385.508   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600    avgt       15    195884.344 ±    480.690   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024    avgt       15    496390.130 ±   3025.440   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240    avgt       15    457859.834 ±   1501.985   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400    avgt       15    411071.314 ±    700.950   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576    avgt       15    402579.043 ±   1444.187   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760    avgt       15    405918.707 ±   2631.032   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600    avgt       15    398991.444 ±    959.738   us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A    avgt       15       375.563 ±      0.180   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A    avgt       15       165.103 ±      0.606   us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A    avgt       15       202.350 ±      0.160   us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A    avgt       15       171.986 ±      0.937   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A    avgt       15    790981.437 ±   3885.250   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A    avgt       15    138756.931 ±   1268.402   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A    avgt       15   4186796.442 ±  84886.017   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A    avgt       15         1.846 ±      0.002   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A    avgt       15         4.913 ±      0.008   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A    avgt       15         9.333 ±      0.030   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10    avgt       15         0.074 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100    avgt       15         0.646 ±      0.004   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000    avgt       15         6.277 ±      0.051   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10    avgt       15         0.055 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100    avgt       15         0.732 ±      0.008   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000    avgt       15         7.280 ±      0.032   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A    avgt       15     14351.252 ±      7.926   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A    avgt       15       345.261 ±      0.830   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A    avgt       15     34243.015 ±     78.644   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A    avgt       15  11465396.658 ±  24787.010   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A    avgt       15      2256.126 ±      2.021   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A    avgt       15     62145.380 ±     38.940   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A    avgt       15   1703913.320 ±    709.036   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A    avgt       15         0.564 ±      0.006   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A    avgt       15      7846.705 ±      3.425   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A    avgt       15     37005.616 ±   3402.874   us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A    avgt       15     33934.838 ±     94.113   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A    avgt       15     27634.585 ±    203.718   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A    avgt       15     22004.464 ±    107.295   us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A    avgt       15     39591.114 ±   1060.182   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A    avgt       15       660.384 ±      1.743   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A    avgt       15     10034.903 ±     17.014   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A    avgt       15    109971.228 ±    260.724   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A    avgt       15    593617.949 ±  26116.706   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024  sample      677    222764.705 ±    559.492   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A       1024  sample             207355.904                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A       1024  sample             223084.544                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A       1024  sample             228327.424                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A       1024  sample             229113.856                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A       1024  sample             230744.392                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A       1024  sample             233570.304                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A       1024  sample             233570.304                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A       1024  sample             233570.304                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240  sample      675    223806.896 ±    188.294   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A      10240  sample             220463.104                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A      10240  sample             223870.976                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A      10240  sample             225705.984                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A      10240  sample             226230.272                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A      10240  sample             227666.821                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A      10240  sample             230686.720                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A      10240  sample             230686.720                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A      10240  sample             230686.720                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400  sample      735    204843.245 ±    173.892   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A     102400  sample             201588.736                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A     102400  sample             204734.464                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A     102400  sample             206569.472                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A     102400  sample             207355.904                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A     102400  sample             208310.108                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A     102400  sample             215482.368                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A     102400  sample             215482.368                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A     102400  sample             215482.368                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576  sample      750    200477.595 ±    162.472   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A    1048576  sample             197394.432                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A    1048576  sample             200278.016                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A    1048576  sample             202375.168                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A    1048576  sample             202899.456                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A    1048576  sample             204076.483                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A    1048576  sample             205520.896                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A    1048576  sample             205520.896                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A    1048576  sample             205520.896                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760  sample      757    199865.234 ±    203.724   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A   10485760  sample             196345.856                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A   10485760  sample             200015.872                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A   10485760  sample             201850.880                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A   10485760  sample             202899.456                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A   10485760  sample             204210.176                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A   10485760  sample             206307.328                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A   10485760  sample             206307.328                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A   10485760  sample             206307.328                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600  sample      773    196041.660 ±    216.247   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A  104857600  sample             192151.552                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A  104857600  sample             195821.568                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A  104857600  sample             198443.008                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A  104857600  sample             199491.584                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A  104857600  sample             201850.880                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A  104857600  sample             203948.032                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A  104857600  sample             203948.032                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A  104857600  sample             203948.032                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024  sample      315    494460.174 ±   2939.955   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A       1024  sample             423100.416                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A       1024  sample             498073.600                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A       1024  sample             508035.072                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A       1024  sample             511285.658                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A       1024  sample             517388.370                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A       1024  sample             518520.832                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A       1024  sample             518520.832                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A       1024  sample             518520.832                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240  sample      330    459093.582 ±   1233.072   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A      10240  sample             449314.816                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A      10240  sample             457179.136                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A      10240  sample             469709.619                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A      10240  sample             472619.418                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A      10240  sample             475728.445                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A      10240  sample             478674.944                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A      10240  sample             478674.944                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A      10240  sample             478674.944                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400  sample      375    410632.148 ±    595.035   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A     102400  sample             403177.472                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A     102400  sample             409993.216                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A     102400  sample             415236.096                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A     102400  sample             417857.536                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A     102400  sample             420835.492                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A     102400  sample             428867.584                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A     102400  sample             428867.584                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A     102400  sample             428867.584                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576  sample      375    402767.828 ±   1180.701   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A    1048576  sample             395313.152                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A    1048576  sample             401080.320                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A    1048576  sample             406847.488                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A    1048576  sample             409468.928                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A    1048576  sample             445770.629                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A    1048576  sample             448790.528                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A    1048576  sample             448790.528                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A    1048576  sample             448790.528                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760  sample      376    402976.681 ±    799.448   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A   10485760  sample             394788.864                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A   10485760  sample             401604.608                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A   10485760  sample             410517.504                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A   10485760  sample             412090.368                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A   10485760  sample             414832.394                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A   10485760  sample             418381.824                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A   10485760  sample             418381.824                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A   10485760  sample             418381.824                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600  sample      390    398915.952 ±    569.423   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A  104857600  sample             387973.120                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A  104857600  sample             399507.456                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A  104857600  sample             402653.184                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A  104857600  sample             404226.048                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A  104857600  sample             406894.674                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A  104857600  sample             407896.064                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A  104857600  sample             407896.064                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A  104857600  sample             407896.064                us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A  sample   399071       375.445 ±      0.064   us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.00                                                                        N/A       N/A        N/A  sample                370.176                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.50                                                                        N/A       N/A        N/A  sample                374.784                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.90                                                                        N/A       N/A        N/A  sample                383.488                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.95                                                                        N/A       N/A        N/A  sample                386.560                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.99                                                                        N/A       N/A        N/A  sample                407.040                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.999                                                                       N/A       N/A        N/A  sample                470.528                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.9999                                                                      N/A       N/A        N/A  sample                751.711                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p1.00                                                                        N/A       N/A        N/A  sample               3227.648                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A  sample   905755       165.315 ±      0.029   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.00                                                        N/A       N/A        N/A  sample                157.696                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.50                                                        N/A       N/A        N/A  sample                163.328                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.90                                                        N/A       N/A        N/A  sample                171.008                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.95                                                        N/A       N/A        N/A  sample                174.336                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.99                                                        N/A       N/A        N/A  sample                183.808                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.999                                                       N/A       N/A        N/A  sample                238.592                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.9999                                                      N/A       N/A        N/A  sample                327.897                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p1.00                                                        N/A       N/A        N/A  sample               2957.312                us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A  sample   435074       344.453 ±      0.035   us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.00                                                                        N/A       N/A        N/A  sample                340.480                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.50                                                                        N/A       N/A        N/A  sample                343.040                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.90                                                                        N/A       N/A        N/A  sample                349.184                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.95                                                                        N/A       N/A        N/A  sample                351.232                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.99                                                                        N/A       N/A        N/A  sample                364.032                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.999                                                                       N/A       N/A        N/A  sample                418.778                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.9999                                                                      N/A       N/A        N/A  sample                561.626                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p1.00                                                                        N/A       N/A        N/A  sample               1619.968                us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A  sample   871573       171.799 ±      0.030   us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.00                                                                      N/A       N/A        N/A  sample                162.048                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.50                                                                      N/A       N/A        N/A  sample                170.240                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.90                                                                      N/A       N/A        N/A  sample                178.432                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.95                                                                      N/A       N/A        N/A  sample                181.504                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.99                                                                      N/A       N/A        N/A  sample                193.024                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.999                                                                     N/A       N/A        N/A  sample                246.016                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.9999                                                                    N/A       N/A        N/A  sample                327.599                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p1.00                                                                      N/A       N/A        N/A  sample               2981.888                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A  sample      120   1344484.147 ±   1295.715   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.00                                          N/A       N/A        N/A  sample            1333788.672                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.50                                          N/A       N/A        N/A  sample            1344274.432                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.90                                          N/A       N/A        N/A  sample            1348468.736                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.95                                          N/A       N/A        N/A  sample            1350565.888                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.99                                          N/A       N/A        N/A  sample            1354760.192                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.999                                         N/A       N/A        N/A  sample            1354760.192                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.9999                                        N/A       N/A        N/A  sample            1354760.192                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p1.00                                          N/A       N/A        N/A  sample            1354760.192                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A  sample     1139    132507.808 ±    254.312   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.00                                  N/A       100        N/A  sample             126877.696                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.50                                  N/A       100        N/A  sample             132120.576                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.90                                  N/A       100        N/A  sample             135528.448                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.95                                  N/A       100        N/A  sample             137887.744                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.99                                  N/A       100        N/A  sample             139093.606                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.999                                 N/A       100        N/A  sample             141222.216                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.9999                                N/A       100        N/A  sample             141295.616                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p1.00                                  N/A       100        N/A  sample             141295.616                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A  sample       30   6569957.786 ± 196014.631   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.00                                  N/A      1000        N/A  sample            5939134.464                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.50                                  N/A      1000        N/A  sample            6572474.368                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.90                                  N/A      1000        N/A  sample            7102634.394                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.95                                  N/A      1000        N/A  sample            7140802.560                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.99                                  N/A      1000        N/A  sample            7163871.232                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.999                                 N/A      1000        N/A  sample            7163871.232                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.9999                                N/A      1000        N/A  sample            7163871.232                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p1.00                                  N/A      1000        N/A  sample            7163871.232                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A  sample  5015747         1.901 ±      0.001   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                                521       N/A        N/A  sample                  1.848                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                                521       N/A        N/A  sample                  1.876                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                                521       N/A        N/A  sample                  1.888                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                                521       N/A        N/A  sample                  1.902                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                                521       N/A        N/A  sample                  1.922                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                               521       N/A        N/A  sample                  9.312                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                              521       N/A        N/A  sample                 27.680                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                                521       N/A        N/A  sample                389.120                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A  sample  3778416         4.986 ±      0.005   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                               1153       N/A        N/A  sample                  4.768                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                               1153       N/A        N/A  sample                  4.920                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                               1153       N/A        N/A  sample                  4.976                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                               1153       N/A        N/A  sample                  5.000                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                               1153       N/A        N/A  sample                  5.344                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                              1153       N/A        N/A  sample                 15.344                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                             1153       N/A        N/A  sample                 43.786                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                               1153       N/A        N/A  sample               2850.816                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A  sample  4218294         8.883 ±      0.004   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                               2021       N/A        N/A  sample                  8.464                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                               2021       N/A        N/A  sample                  8.784                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                               2021       N/A        N/A  sample                  8.880                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                               2021       N/A        N/A  sample                  8.912                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                               2021       N/A        N/A  sample                 12.688                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                              2021       N/A        N/A  sample                 20.512                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                             2021       N/A        N/A  sample                 49.803                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                               2021       N/A        N/A  sample               2748.416                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10  sample  3722561         0.111 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A         10  sample                  0.096                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A         10  sample                  0.103                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A         10  sample                  0.113                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A         10  sample                  0.116                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A         10  sample                  0.123                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A         10  sample                  0.425                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A         10  sample                  8.880                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A         10  sample                372.736                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100  sample  3554409         0.704 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A        100  sample                  0.663                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A        100  sample                  0.682                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A        100  sample                  0.697                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A        100  sample                  0.699                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A        100  sample                  0.705                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A        100  sample                  6.504                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A        100  sample                 23.026                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A        100  sample                229.376                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000  sample  5041199         7.439 ±      0.002   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A       1000  sample                  7.208                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A       1000  sample                  7.352                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A       1000  sample                  7.472                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A       1000  sample                  7.488                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A       1000  sample                 10.576                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A       1000  sample                 17.760                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A       1000  sample                 52.800                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A       1000  sample               1560.576                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10  sample  3716291         0.115 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A         10  sample                  0.096                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A         10  sample                  0.109                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A         10  sample                  0.119                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A         10  sample                  0.121                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A         10  sample                  0.130                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A         10  sample                  0.461                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A         10  sample                  8.416                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A         10  sample                310.784                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100  sample  3570595         0.695 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A        100  sample                  0.661                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A        100  sample                  0.676                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A        100  sample                  0.686                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A        100  sample                  0.690                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A        100  sample                  0.694                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A        100  sample                  5.968                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A        100  sample                 17.374                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A        100  sample                411.648                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000  sample  5081388         7.378 ±      0.002   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A       1000  sample                  7.200                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A       1000  sample                  7.304                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A       1000  sample                  7.368                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A       1000  sample                  7.392                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A       1000  sample                 10.464                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A       1000  sample                 16.480                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A       1000  sample                 44.855                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A       1000  sample               1396.736                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A  sample    10455     14344.448 ±      3.115   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.00                                  N/A       N/A        N/A  sample              14237.696                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.50                                  N/A       N/A        N/A  sample              14319.616                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.90                                  N/A       N/A        N/A  sample              14401.536                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.95                                  N/A       N/A        N/A  sample              14467.072                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.99                                  N/A       N/A        N/A  sample              14696.448                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.999                                 N/A       N/A        N/A  sample              15427.699                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.9999                                N/A       N/A        N/A  sample              17261.265                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p1.00                                  N/A       N/A        N/A  sample              17268.736                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A  sample   433345       345.732 ±      0.120   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A       100        N/A  sample                327.680                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A       100        N/A  sample                342.528                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A       100        N/A  sample                356.352                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A       100        N/A  sample                361.472                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A       100        N/A  sample                394.240                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A       100        N/A  sample                674.816                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A       100        N/A  sample                843.433                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A       100        N/A  sample               4202.496                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A  sample     4398     34132.216 ±     28.608   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A      1000        N/A  sample              33619.968                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A      1000        N/A  sample              33947.648                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A      1000        N/A  sample              34865.152                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A      1000        N/A  sample              35192.832                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A      1000        N/A  sample              36765.696                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A      1000        N/A  sample              39269.302                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A      1000        N/A  sample              39714.816                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A      1000        N/A  sample              39714.816                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A  sample       15  11397322.069 ±  14644.570   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A     10000        N/A  sample           11391729.664                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A     10000        N/A  sample           11391729.664                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A     10000        N/A  sample           11421928.653                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A     10000        N/A  sample           11442061.312                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A     10000        N/A  sample           11442061.312                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A     10000        N/A  sample           11442061.312                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A     10000        N/A  sample           11442061.312                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A     10000        N/A  sample           11442061.312                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A  sample    64312      2330.821 ±      3.787   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.00             N/A       N/A        N/A  sample               2045.952                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.50             N/A       N/A        N/A  sample               2086.912                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.90             N/A       N/A        N/A  sample               2646.016                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.95             N/A       N/A        N/A  sample               2682.880                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.99             N/A       N/A        N/A  sample               2822.144                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.999            N/A       N/A        N/A  sample               2887.680                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.9999           N/A       N/A        N/A  sample               3515.509                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p1.00             N/A       N/A        N/A  sample               5423.104                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A  sample     2424     62084.545 ±     14.250   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.00                     N/A       N/A        N/A  sample              60293.120                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.50                     N/A       N/A        N/A  sample              62062.592                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.90                     N/A       N/A        N/A  sample              62259.200                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.95                     N/A       N/A        N/A  sample              62390.272                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.99                     N/A       N/A        N/A  sample              62586.880                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.999                    N/A       N/A        N/A  sample              64200.704                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.9999                   N/A       N/A        N/A  sample              64815.104                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p1.00                     N/A       N/A        N/A  sample              64815.104                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A  sample       90   1703003.932 ±    469.903   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.00                                                 N/A       N/A        N/A  sample            1700790.272                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.50                                                 N/A       N/A        N/A  sample            1702887.424                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.90                                                 N/A       N/A        N/A  sample            1704984.576                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.95                                                 N/A       N/A        N/A  sample            1704984.576                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.99                                                 N/A       N/A        N/A  sample            1707081.728                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.999                                                N/A       N/A        N/A  sample            1707081.728                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.9999                                               N/A       N/A        N/A  sample            1707081.728                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p1.00                                                 N/A       N/A        N/A  sample            1707081.728                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A  sample  3979881         0.639 ±      0.001   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.00                       N/A       N/A        N/A  sample                  0.533                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.50                       N/A       N/A        N/A  sample                  0.616                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.90                       N/A       N/A        N/A  sample                  0.656                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.95                       N/A       N/A        N/A  sample                  0.667                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.99                       N/A       N/A        N/A  sample                  0.702                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.999                      N/A       N/A        N/A  sample                  5.576                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.9999                     N/A       N/A        N/A  sample                 22.624                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p1.00                       N/A       N/A        N/A  sample                421.376                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A  sample    19120      7842.810 ±      1.078   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.00                                   N/A       N/A        N/A  sample               7806.976                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.50                                   N/A       N/A        N/A  sample               7831.552                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.90                                   N/A       N/A        N/A  sample               7864.320                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.95                                   N/A       N/A        N/A  sample               7888.896                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.99                                   N/A       N/A        N/A  sample               8003.584                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.999                                  N/A       N/A        N/A  sample               8257.536                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.9999                                 N/A       N/A        N/A  sample              10483.778                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p1.00                                   N/A       N/A        N/A  sample              10633.216                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A  sample     4036     37202.527 ±    165.391   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.00                                             N/A       N/A        N/A  sample              32178.176                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.50                                             N/A       N/A        N/A  sample              36700.160                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.90                                             N/A       N/A        N/A  sample              41156.608                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.95                                             N/A       N/A        N/A  sample              42663.936                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.99                                             N/A       N/A        N/A  sample              43360.584                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.999                                            N/A       N/A        N/A  sample              59557.675                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.9999                                           N/A       N/A        N/A  sample              63242.240                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p1.00                                             N/A       N/A        N/A  sample              63242.240                us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A  sample     4384     34245.774 ±     21.685   us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.00                                                              N/A       N/A        N/A  sample              33882.112                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.50                                                              N/A       N/A        N/A  sample              34144.256                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.90                                                              N/A       N/A        N/A  sample              34471.936                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.95                                                              N/A       N/A        N/A  sample              34799.616                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.99                                                              N/A       N/A        N/A  sample              36175.872                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.999                                                             N/A       N/A        N/A  sample              40894.464                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.9999                                                            N/A       N/A        N/A  sample              42336.256                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p1.00                                                              N/A       N/A        N/A  sample              42336.256                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A  sample     5436     27607.763 ±    155.955   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.00                                                            N/A       N/A        N/A  sample              25624.576                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.50                                                            N/A       N/A        N/A  sample              26017.792                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.90                                                            N/A       N/A        N/A  sample              34013.184                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.95                                                            N/A       N/A        N/A  sample              35858.022                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.99                                                            N/A       N/A        N/A  sample              38928.384                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.999                                                           N/A       N/A        N/A  sample              44273.697                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.9999                                                          N/A       N/A        N/A  sample              44826.624                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p1.00                                                            N/A       N/A        N/A  sample              44826.624                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A  sample     6535     22961.057 ±     72.844   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.00                                                                N/A       N/A        N/A  sample              21331.968                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.50                                                                N/A       N/A        N/A  sample              23658.496                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.90                                                                N/A       N/A        N/A  sample              24051.712                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.95                                                                N/A       N/A        N/A  sample              24215.552                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.99                                                                N/A       N/A        N/A  sample              30766.531                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.999                                                               N/A       N/A        N/A  sample              37875.089                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.9999                                                              N/A       N/A        N/A  sample              42860.544                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p1.00                                                                N/A       N/A        N/A  sample              42860.544                us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A  sample     3964     37899.598 ±    101.962   us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.00                                                                      N/A       N/A        N/A  sample              35192.832                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.50                                                                      N/A       N/A        N/A  sample              37748.736                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.90                                                                      N/A       N/A        N/A  sample              40566.784                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.95                                                                      N/A       N/A        N/A  sample              40763.392                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.99                                                                      N/A       N/A        N/A  sample              43496.243                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.999                                                                     N/A       N/A        N/A  sample              55995.269                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.9999                                                                    N/A       N/A        N/A  sample              58654.720                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p1.00                                                                      N/A       N/A        N/A  sample              58654.720                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A  sample   227564       658.463 ±      0.387   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A        10        N/A  sample                596.992                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A        10        N/A  sample                650.240                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A        10        N/A  sample                677.888                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A        10        N/A  sample                693.248                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A        10        N/A  sample                945.152                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A        10        N/A  sample               1105.920                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A        10        N/A  sample               2742.684                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A        10        N/A  sample               3870.720                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A  sample    14996      9996.955 ±      5.988   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A       100        N/A  sample               9469.952                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A       100        N/A  sample               9977.856                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A       100        N/A  sample              10223.616                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A       100        N/A  sample              10371.072                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A       100        N/A  sample              10797.056                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A       100        N/A  sample              11337.728                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A       100        N/A  sample              13157.001                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A       100        N/A  sample              14237.696                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A  sample     1374    109834.234 ±    102.944   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A      1000        N/A  sample             107347.968                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A      1000        N/A  sample             109707.264                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A      1000        N/A  sample             111411.200                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A      1000        N/A  sample             111804.416                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A      1000        N/A  sample             112721.920                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A      1000        N/A  sample             114556.928                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A      1000        N/A  sample             115343.360                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A      1000        N/A  sample             115343.360                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A  sample      262    590218.217 ±  32504.088   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.00                        N/A       N/A        N/A  sample             280494.080                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.50                        N/A       N/A        N/A  sample             566231.040                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.90                        N/A       N/A        N/A  sample             821769.011                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.95                        N/A       N/A        N/A  sample             835557.786                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.99                        N/A       N/A        N/A  sample             858511.114                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.999                       N/A       N/A        N/A  sample             859832.320                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.9999                      N/A       N/A        N/A  sample             859832.320                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p1.00                        N/A       N/A        N/A  sample             859832.320                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024      ss       15    219943.656 ±   4875.945   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240      ss       15    223264.046 ±   1108.415   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400      ss       15    203308.308 ±    666.149   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576      ss       15    199477.414 ±   1303.933   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760      ss       15    198602.857 ±   1283.696   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600      ss       15    195983.088 ±   3845.788   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024      ss       15    462754.025 ±   6690.387   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240      ss       15    451689.659 ±   2607.830   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400      ss       15    409126.928 ±   2652.521   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576      ss       15    407677.795 ±  16322.773   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760      ss       15    412979.866 ±  13045.774   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600      ss       15    391624.176 ±   3029.875   us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A      ss       15       422.187 ±     23.582   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A      ss       15       220.121 ±     15.953   us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A      ss       15       299.658 ±      6.915   us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A      ss       15       264.143 ±     37.128   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A      ss       15   1384555.403 ±   4075.289   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A      ss       15    140304.493 ±   3398.216   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A      ss       15   4062275.800 ±  20073.120   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A      ss       15        13.582 ±      1.399   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A      ss       15        18.745 ±     11.922   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A      ss       15        20.399 ±      2.700   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10      ss       15         9.094 ±      5.999   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100      ss       15        20.428 ±     13.136   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000      ss       15       107.378 ±     18.247   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10      ss       15         8.130 ±      3.342   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100      ss       15        17.441 ±      3.459   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000      ss       15       117.410 ±     34.647   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A      ss       15     14655.806 ±    577.408   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A      ss       15      3386.409 ±   3537.391   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A      ss       15     69905.057 ±  41792.238   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A      ss       15  10781912.619 ±  45140.386   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A      ss       15      2109.539 ±     15.409   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A      ss       15     62068.144 ±    182.581   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A      ss       15   1703548.660 ±   1187.616   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A      ss       15        16.663 ±     13.456   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A      ss       15      7872.563 ±     57.913   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A      ss       15     37246.198 ±   3998.533   us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A      ss       15     34076.251 ±    218.904   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A      ss       15     26648.601 ±    261.500   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A      ss       15     21830.039 ±    123.852   us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A      ss       15     40753.260 ±    900.601   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A      ss       15       987.203 ±    108.603   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A      ss       15     10817.484 ±    168.060   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A      ss       15    110919.572 ±    957.253   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A      ss       15    327449.998 ±  86554.750   us/op
