# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 0.00% complete, ETA 07:40:00
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 0.72% complete, ETA 08:19:49
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 1.45% complete, ETA 08:13:13
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 2.17% complete, ETA 08:07:24
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 2.90% complete, ETA 08:03:51
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 3.62% complete, ETA 08:00:02
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 4.35% complete, ETA 07:56:09
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 5.07% complete, ETA 07:56:03
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 5.80% complete, ETA 07:55:52
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 6.52% complete, ETA 07:51:32
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 7.25% complete, ETA 07:47:00
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 7.97% complete, ETA 07:44:32
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 8.70% complete, ETA 07:40:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ops/us
# Warmup Iteration   2: 0.003 ops/us
# Warmup Iteration   3: 0.003 ops/us
# Warmup Iteration   4: 0.003 ops/us
# Warmup Iteration   5: 0.003 ops/us
Iteration   1: 0.003 ops/us
Iteration   2: 0.003 ops/us
Iteration   3: 0.003 ops/us
Iteration   4: 0.003 ops/us
Iteration   5: 0.003 ops/us
Iteration   6: 0.003 ops/us
Iteration   7: 0.003 ops/us
Iteration   8: 0.003 ops/us
Iteration   9: 0.003 ops/us
Iteration  10: 0.003 ops/us
Iteration  11: 0.003 ops/us
Iteration  12: 0.003 ops/us
Iteration  13: 0.003 ops/us
Iteration  14: 0.003 ops/us
Iteration  15: 0.003 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  0.003 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 9.42% complete, ETA 07:35:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ops/us
# Warmup Iteration   2: 0.006 ops/us
# Warmup Iteration   3: 0.006 ops/us
# Warmup Iteration   4: 0.006 ops/us
# Warmup Iteration   5: 0.006 ops/us
Iteration   1: 0.006 ops/us
Iteration   2: 0.006 ops/us
Iteration   3: 0.006 ops/us
Iteration   4: 0.006 ops/us
Iteration   5: 0.006 ops/us
Iteration   6: 0.006 ops/us
Iteration   7: 0.006 ops/us
Iteration   8: 0.006 ops/us
Iteration   9: 0.006 ops/us
Iteration  10: 0.006 ops/us
Iteration  11: 0.006 ops/us
Iteration  12: 0.006 ops/us
Iteration  13: 0.006 ops/us
Iteration  14: 0.006 ops/us
Iteration  15: 0.006 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  0.006 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.006] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 10.14% complete, ETA 07:31:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ops/us
# Warmup Iteration   2: 0.003 ops/us
# Warmup Iteration   3: 0.003 ops/us
# Warmup Iteration   4: 0.003 ops/us
# Warmup Iteration   5: 0.004 ops/us
Iteration   1: 0.004 ops/us
Iteration   2: 0.004 ops/us
Iteration   3: 0.004 ops/us
Iteration   4: 0.004 ops/us
Iteration   5: 0.004 ops/us
Iteration   6: 0.004 ops/us
Iteration   7: 0.004 ops/us
Iteration   8: 0.004 ops/us
Iteration   9: 0.004 ops/us
Iteration  10: 0.004 ops/us
Iteration  11: 0.004 ops/us
Iteration  12: 0.004 ops/us
Iteration  13: 0.004 ops/us
Iteration  14: 0.004 ops/us
Iteration  15: 0.004 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  0.004 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.004, 0.004] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 10.87% complete, ETA 07:27:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ops/us
# Warmup Iteration   2: 0.006 ops/us
# Warmup Iteration   3: 0.006 ops/us
# Warmup Iteration   4: 0.005 ops/us
# Warmup Iteration   5: 0.006 ops/us
Iteration   1: 0.006 ops/us
Iteration   2: 0.006 ops/us
Iteration   3: 0.006 ops/us
Iteration   4: 0.006 ops/us
Iteration   5: 0.006 ops/us
Iteration   6: 0.006 ops/us
Iteration   7: 0.006 ops/us
Iteration   8: 0.006 ops/us
Iteration   9: 0.006 ops/us
Iteration  10: 0.006 ops/us
Iteration  11: 0.006 ops/us
Iteration  12: 0.006 ops/us
Iteration  13: 0.006 ops/us
Iteration  14: 0.006 ops/us
Iteration  15: 0.006 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  0.006 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.006] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 11.59% complete, ETA 07:22:58
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 12.32% complete, ETA 07:19:41
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 13.04% complete, ETA 07:15:52
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁷ ops/us
# Warmup Iteration   2: ≈ 10⁻⁷ ops/us
# Warmup Iteration   3: ≈ 10⁻⁷ ops/us
# Warmup Iteration   4: ≈ 10⁻⁷ ops/us
# Warmup Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   1: ≈ 10⁻⁷ ops/us
Iteration   2: ≈ 10⁻⁷ ops/us
Iteration   3: ≈ 10⁻⁷ ops/us
Iteration   4: ≈ 10⁻⁷ ops/us
Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   6: ≈ 10⁻⁷ ops/us
Iteration   7: ≈ 10⁻⁷ ops/us
Iteration   8: ≈ 10⁻⁷ ops/us
Iteration   9: ≈ 10⁻⁷ ops/us
Iteration  10: ≈ 10⁻⁷ ops/us
Iteration  11: ≈ 10⁻⁷ ops/us
Iteration  12: ≈ 10⁻⁷ ops/us
Iteration  13: ≈ 10⁻⁷ ops/us
Iteration  14: ≈ 10⁻⁷ ops/us
Iteration  15: ≈ 10⁻⁷ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  ≈ 10⁻⁷ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 13.77% complete, ETA 07:24:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.541 ops/us
# Warmup Iteration   2: 0.542 ops/us
# Warmup Iteration   3: 0.541 ops/us
# Warmup Iteration   4: 0.542 ops/us
# Warmup Iteration   5: 0.542 ops/us
Iteration   1: 0.542 ops/us
Iteration   2: 0.542 ops/us
Iteration   3: 0.542 ops/us
Iteration   4: 0.542 ops/us
Iteration   5: 0.542 ops/us
Iteration   6: 0.542 ops/us
Iteration   7: 0.542 ops/us
Iteration   8: 0.542 ops/us
Iteration   9: 0.541 ops/us
Iteration  10: 0.542 ops/us
Iteration  11: 0.542 ops/us
Iteration  12: 0.542 ops/us
Iteration  13: 0.541 ops/us
Iteration  14: 0.542 ops/us
Iteration  15: 0.542 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.542 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.541, 0.542, 0.542), stdev = 0.001
  CI (99.9%): [0.541, 0.542] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 14.49% complete, ETA 07:20:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.203 ops/us
# Warmup Iteration   2: 0.203 ops/us
# Warmup Iteration   3: 0.203 ops/us
# Warmup Iteration   4: 0.203 ops/us
# Warmup Iteration   5: 0.203 ops/us
Iteration   1: 0.203 ops/us
Iteration   2: 0.203 ops/us
Iteration   3: 0.203 ops/us
Iteration   4: 0.203 ops/us
Iteration   5: 0.203 ops/us
Iteration   6: 0.203 ops/us
Iteration   7: 0.203 ops/us
Iteration   8: 0.204 ops/us
Iteration   9: 0.203 ops/us
Iteration  10: 0.203 ops/us
Iteration  11: 0.204 ops/us
Iteration  12: 0.203 ops/us
Iteration  13: 0.203 ops/us
Iteration  14: 0.203 ops/us
Iteration  15: 0.203 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.203 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.203, 0.203, 0.204), stdev = 0.001
  CI (99.9%): [0.203, 0.204] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 15.22% complete, ETA 07:15:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.114 ops/us
# Warmup Iteration   2: 0.114 ops/us
# Warmup Iteration   3: 0.114 ops/us
# Warmup Iteration   4: 0.113 ops/us
# Warmup Iteration   5: 0.114 ops/us
Iteration   1: 0.114 ops/us
Iteration   2: 0.113 ops/us
Iteration   3: 0.113 ops/us
Iteration   4: 0.114 ops/us
Iteration   5: 0.114 ops/us
Iteration   6: 0.114 ops/us
Iteration   7: 0.114 ops/us
Iteration   8: 0.113 ops/us
Iteration   9: 0.113 ops/us
Iteration  10: 0.114 ops/us
Iteration  11: 0.114 ops/us
Iteration  12: 0.113 ops/us
Iteration  13: 0.113 ops/us
Iteration  14: 0.113 ops/us
Iteration  15: 0.113 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.113 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.113, 0.113, 0.114), stdev = 0.001
  CI (99.9%): [0.113, 0.114] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 15.94% complete, ETA 07:10:52
# Fork: 1 of 1
# Warmup Iteration   1: 23.221 ops/us
# Warmup Iteration   2: 23.006 ops/us
# Warmup Iteration   3: 22.696 ops/us
# Warmup Iteration   4: 23.265 ops/us
# Warmup Iteration   5: 23.242 ops/us
Iteration   1: 23.256 ops/us
Iteration   2: 23.275 ops/us
Iteration   3: 23.259 ops/us
Iteration   4: 22.680 ops/us
Iteration   5: 23.269 ops/us
Iteration   6: 23.278 ops/us
Iteration   7: 23.262 ops/us
Iteration   8: 23.233 ops/us
Iteration   9: 23.269 ops/us
Iteration  10: 23.270 ops/us
Iteration  11: 23.268 ops/us
Iteration  12: 23.248 ops/us
Iteration  13: 23.262 ops/us
Iteration  14: 23.273 ops/us
Iteration  15: 23.251 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  23.224 ±(99.9%) 0.161 ops/us [Average]
  (min, avg, max) = (22.680, 23.224, 23.278), stdev = 0.151
  CI (99.9%): [23.062, 23.385] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 16.67% complete, ETA 07:06:25
# Fork: 1 of 1
# Warmup Iteration   1: 2.574 ops/us
# Warmup Iteration   2: 2.612 ops/us
# Warmup Iteration   3: 2.392 ops/us
# Warmup Iteration   4: 2.388 ops/us
# Warmup Iteration   5: 2.353 ops/us
Iteration   1: 2.378 ops/us
Iteration   2: 2.385 ops/us
Iteration   3: 2.389 ops/us
Iteration   4: 2.393 ops/us
Iteration   5: 2.319 ops/us
Iteration   6: 2.349 ops/us
Iteration   7: 2.341 ops/us
Iteration   8: 2.390 ops/us
Iteration   9: 2.382 ops/us
Iteration  10: 2.397 ops/us
Iteration  11: 2.381 ops/us
Iteration  12: 2.395 ops/us
Iteration  13: 2.385 ops/us
Iteration  14: 2.322 ops/us
Iteration  15: 2.390 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  2.373 ±(99.9%) 0.028 ops/us [Average]
  (min, avg, max) = (2.319, 2.373, 2.397), stdev = 0.027
  CI (99.9%): [2.345, 2.402] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 17.39% complete, ETA 07:02:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.248 ops/us
# Warmup Iteration   2: 0.227 ops/us
# Warmup Iteration   3: 0.212 ops/us
# Warmup Iteration   4: 0.215 ops/us
# Warmup Iteration   5: 0.214 ops/us
Iteration   1: 0.210 ops/us
Iteration   2: 0.212 ops/us
Iteration   3: 0.209 ops/us
Iteration   4: 0.212 ops/us
Iteration   5: 0.208 ops/us
Iteration   6: 0.213 ops/us
Iteration   7: 0.213 ops/us
Iteration   8: 0.208 ops/us
Iteration   9: 0.212 ops/us
Iteration  10: 0.212 ops/us
Iteration  11: 0.210 ops/us
Iteration  12: 0.211 ops/us
Iteration  13: 0.208 ops/us
Iteration  14: 0.211 ops/us
Iteration  15: 0.213 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.211 ±(99.9%) 0.002 ops/us [Average]
  (min, avg, max) = (0.208, 0.211, 0.213), stdev = 0.002
  CI (99.9%): [0.209, 0.213] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 18.12% complete, ETA 06:57:42
# Fork: 1 of 1
# Warmup Iteration   1: 20.235 ops/us
# Warmup Iteration   2: 22.421 ops/us
# Warmup Iteration   3: 21.411 ops/us
# Warmup Iteration   4: 21.401 ops/us
# Warmup Iteration   5: 21.411 ops/us
Iteration   1: 21.067 ops/us
Iteration   2: 21.415 ops/us
Iteration   3: 21.408 ops/us
Iteration   4: 21.418 ops/us
Iteration   5: 21.418 ops/us
Iteration   6: 21.407 ops/us
Iteration   7: 21.409 ops/us
Iteration   8: 21.406 ops/us
Iteration   9: 21.402 ops/us
Iteration  10: 21.402 ops/us
Iteration  11: 21.414 ops/us
Iteration  12: 21.394 ops/us
Iteration  13: 21.408 ops/us
Iteration  14: 21.391 ops/us
Iteration  15: 20.855 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  21.348 ±(99.9%) 0.173 ops/us [Average]
  (min, avg, max) = (20.855, 21.348, 21.418), stdev = 0.162
  CI (99.9%): [21.174, 21.521] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 18.84% complete, ETA 06:53:26
# Fork: 1 of 1
# Warmup Iteration   1: 2.176 ops/us
# Warmup Iteration   2: 2.613 ops/us
# Warmup Iteration   3: 2.396 ops/us
# Warmup Iteration   4: 2.355 ops/us
# Warmup Iteration   5: 2.390 ops/us
Iteration   1: 2.390 ops/us
Iteration   2: 2.392 ops/us
Iteration   3: 2.375 ops/us
Iteration   4: 2.400 ops/us
Iteration   5: 2.324 ops/us
Iteration   6: 2.396 ops/us
Iteration   7: 2.388 ops/us
Iteration   8: 2.400 ops/us
Iteration   9: 2.360 ops/us
Iteration  10: 2.402 ops/us
Iteration  11: 2.351 ops/us
Iteration  12: 2.401 ops/us
Iteration  13: 2.397 ops/us
Iteration  14: 2.393 ops/us
Iteration  15: 2.353 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  2.381 ±(99.9%) 0.025 ops/us [Average]
  (min, avg, max) = (2.324, 2.381, 2.402), stdev = 0.024
  CI (99.9%): [2.356, 2.407] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 19.56% complete, ETA 06:49:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.260 ops/us
# Warmup Iteration   2: 0.248 ops/us
# Warmup Iteration   3: 0.232 ops/us
# Warmup Iteration   4: 0.226 ops/us
# Warmup Iteration   5: 0.227 ops/us
Iteration   1: 0.227 ops/us
Iteration   2: 0.225 ops/us
Iteration   3: 0.221 ops/us
Iteration   4: 0.225 ops/us
Iteration   5: 0.225 ops/us
Iteration   6: 0.229 ops/us
Iteration   7: 0.217 ops/us
Iteration   8: 0.229 ops/us
Iteration   9: 0.225 ops/us
Iteration  10: 0.222 ops/us
Iteration  11: 0.226 ops/us
Iteration  12: 0.224 ops/us
Iteration  13: 0.232 ops/us
Iteration  14: 0.223 ops/us
Iteration  15: 0.225 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.225 ±(99.9%) 0.004 ops/us [Average]
  (min, avg, max) = (0.217, 0.225, 0.232), stdev = 0.003
  CI (99.9%): [0.221, 0.229] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 20.29% complete, ETA 06:45:04
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 21.01% complete, ETA 06:41:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ops/us
# Warmup Iteration   2: 0.003 ops/us
# Warmup Iteration   3: 0.003 ops/us
# Warmup Iteration   4: 0.003 ops/us
# Warmup Iteration   5: 0.003 ops/us
Iteration   1: 0.003 ops/us
Iteration   2: 0.003 ops/us
Iteration   3: 0.003 ops/us
Iteration   4: 0.003 ops/us
Iteration   5: 0.003 ops/us
Iteration   6: 0.003 ops/us
Iteration   7: 0.003 ops/us
Iteration   8: 0.003 ops/us
Iteration   9: 0.003 ops/us
Iteration  10: 0.003 ops/us
Iteration  11: 0.003 ops/us
Iteration  12: 0.003 ops/us
Iteration  13: 0.003 ops/us
Iteration  14: 0.003 ops/us
Iteration  15: 0.003 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  0.003 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 21.74% complete, ETA 06:36:59
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 22.46% complete, ETA 06:33:00
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁷ ops/us
# Warmup Iteration   2: ≈ 10⁻⁷ ops/us
# Warmup Iteration   3: ≈ 10⁻⁷ ops/us
# Warmup Iteration   4: ≈ 10⁻⁷ ops/us
# Warmup Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   1: ≈ 10⁻⁷ ops/us
Iteration   2: ≈ 10⁻⁷ ops/us
Iteration   3: ≈ 10⁻⁷ ops/us
Iteration   4: ≈ 10⁻⁷ ops/us
Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   6: ≈ 10⁻⁷ ops/us
Iteration   7: ≈ 10⁻⁷ ops/us
Iteration   8: ≈ 10⁻⁷ ops/us
Iteration   9: ≈ 10⁻⁷ ops/us
Iteration  10: ≈ 10⁻⁷ ops/us
Iteration  11: ≈ 10⁻⁷ ops/us
Iteration  12: ≈ 10⁻⁷ ops/us
Iteration  13: ≈ 10⁻⁷ ops/us
Iteration  14: ≈ 10⁻⁷ ops/us
Iteration  15: ≈ 10⁻⁷ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  ≈ 10⁻⁷ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 23.19% complete, ETA 06:31:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ops/us
# Warmup Iteration   2: 0.001 ops/us
# Warmup Iteration   3: 0.001 ops/us
# Warmup Iteration   4: 0.001 ops/us
# Warmup Iteration   5: 0.001 ops/us
Iteration   1: 0.001 ops/us
Iteration   2: 0.001 ops/us
Iteration   3: 0.001 ops/us
Iteration   4: 0.001 ops/us
Iteration   5: 0.001 ops/us
Iteration   6: 0.001 ops/us
Iteration   7: 0.001 ops/us
Iteration   8: 0.001 ops/us
Iteration   9: 0.001 ops/us
Iteration  10: 0.001 ops/us
Iteration  11: 0.001 ops/us
Iteration  12: 0.001 ops/us
Iteration  13: 0.001 ops/us
Iteration  14: 0.001 ops/us
Iteration  15: 0.001 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  0.001 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 23.91% complete, ETA 06:27:25
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 24.64% complete, ETA 06:23:23
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 25.36% complete, ETA 06:20:25
# Fork: 1 of 1
# Warmup Iteration   1: 1.923 ops/us
# Warmup Iteration   2: 1.950 ops/us
# Warmup Iteration   3: 1.936 ops/us
# Warmup Iteration   4: 1.937 ops/us
# Warmup Iteration   5: 1.939 ops/us
Iteration   1: 1.939 ops/us
Iteration   2: 1.940 ops/us
Iteration   3: 1.931 ops/us
Iteration   4: 1.932 ops/us
Iteration   5: 1.930 ops/us
Iteration   6: 1.929 ops/us
Iteration   7: 1.932 ops/us
Iteration   8: 1.930 ops/us
Iteration   9: 1.931 ops/us
Iteration  10: 1.931 ops/us
Iteration  11: 1.932 ops/us
Iteration  12: 1.939 ops/us
Iteration  13: 1.934 ops/us
Iteration  14: 1.934 ops/us
Iteration  15: 1.935 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  1.933 ±(99.9%) 0.004 ops/us [Average]
  (min, avg, max) = (1.929, 1.933, 1.940), stdev = 0.004
  CI (99.9%): [1.929, 1.937] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 26.09% complete, ETA 06:16:21
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 26.81% complete, ETA 06:12:21
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 27.54% complete, ETA 06:08:23
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 28.26% complete, ETA 06:04:25
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 28.98% complete, ETA 06:00:32
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 29.71% complete, ETA 05:56:36
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 30.43% complete, ETA 05:52:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ops/us
# Warmup Iteration   2: 0.002 ops/us
# Warmup Iteration   3: 0.002 ops/us
# Warmup Iteration   4: 0.002 ops/us
# Warmup Iteration   5: 0.002 ops/us
Iteration   1: 0.002 ops/us
Iteration   2: 0.002 ops/us
Iteration   3: 0.002 ops/us
Iteration   4: 0.002 ops/us
Iteration   5: 0.002 ops/us
Iteration   6: 0.002 ops/us
Iteration   7: 0.002 ops/us
Iteration   8: 0.002 ops/us
Iteration   9: 0.002 ops/us
Iteration  10: 0.002 ops/us
Iteration  11: 0.002 ops/us
Iteration  12: 0.002 ops/us
Iteration  13: 0.002 ops/us
Iteration  14: 0.002 ops/us
Iteration  15: 0.002 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  0.002 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 31.16% complete, ETA 05:48:47
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 31.88% complete, ETA 05:44:53
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 32.61% complete, ETA 05:41:03
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 33.33% complete, ETA 05:38:22
# Fork: 1 of 1
# Warmup Iteration   1: 217883.160 us/op
# Warmup Iteration   2: 217256.438 us/op
# Warmup Iteration   3: 216447.026 us/op
# Warmup Iteration   4: 216912.220 us/op
# Warmup Iteration   5: 216767.710 us/op
Iteration   1: 217720.226 us/op
Iteration   2: 218229.458 us/op
Iteration   3: 216568.365 us/op
Iteration   4: 217325.728 us/op
Iteration   5: 216868.812 us/op
Iteration   6: 216400.341 us/op
Iteration   7: 216624.328 us/op
Iteration   8: 216641.901 us/op
Iteration   9: 215502.380 us/op
Iteration  10: 217003.951 us/op
Iteration  11: 216593.044 us/op
Iteration  12: 220750.276 us/op
Iteration  13: 220791.868 us/op
Iteration  14: 220639.082 us/op
Iteration  15: 220465.927 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  217875.046 ±(99.9%) 1971.047 us/op [Average]
  (min, avg, max) = (215502.380, 217875.046, 220791.868), stdev = 1843.719
  CI (99.9%): [215903.999, 219846.093] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 34.06% complete, ETA 05:34:35
# Fork: 1 of 1
# Warmup Iteration   1: 219424.596 us/op
# Warmup Iteration   2: 219675.485 us/op
# Warmup Iteration   3: 219846.888 us/op
# Warmup Iteration   4: 219809.316 us/op
# Warmup Iteration   5: 220886.655 us/op
Iteration   1: 220186.436 us/op
Iteration   2: 219979.154 us/op
Iteration   3: 220745.228 us/op
Iteration   4: 219595.642 us/op
Iteration   5: 219183.494 us/op
Iteration   6: 219875.814 us/op
Iteration   7: 219698.160 us/op
Iteration   8: 220020.032 us/op
Iteration   9: 219513.730 us/op
Iteration  10: 219985.606 us/op
Iteration  11: 220353.880 us/op
Iteration  12: 219597.456 us/op
Iteration  13: 220097.463 us/op
Iteration  14: 219932.691 us/op
Iteration  15: 220060.666 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  219921.697 ±(99.9%) 401.773 us/op [Average]
  (min, avg, max) = (219183.494, 219921.697, 220745.228), stdev = 375.818
  CI (99.9%): [219519.924, 220323.470] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 34.78% complete, ETA 05:30:46
# Fork: 1 of 1
# Warmup Iteration   1: 198080.673 us/op
# Warmup Iteration   2: 200981.451 us/op
# Warmup Iteration   3: 200999.156 us/op
# Warmup Iteration   4: 201060.173 us/op
# Warmup Iteration   5: 201089.049 us/op
Iteration   1: 200642.034 us/op
Iteration   2: 200578.862 us/op
Iteration   3: 200980.815 us/op
Iteration   4: 200962.843 us/op
Iteration   5: 200855.061 us/op
Iteration   6: 200629.362 us/op
Iteration   7: 201946.354 us/op
Iteration   8: 200808.284 us/op
Iteration   9: 201284.567 us/op
Iteration  10: 200825.447 us/op
Iteration  11: 200470.415 us/op
Iteration  12: 201407.340 us/op
Iteration  13: 200671.212 us/op
Iteration  14: 200222.217 us/op
Iteration  15: 201608.849 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  200926.244 ±(99.9%) 491.398 us/op [Average]
  (min, avg, max) = (200222.217, 200926.244, 201946.354), stdev = 459.654
  CI (99.9%): [200434.846, 201417.642] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 35.51% complete, ETA 05:26:55
# Fork: 1 of 1
# Warmup Iteration   1: 200046.752 us/op
# Warmup Iteration   2: 199438.833 us/op
# Warmup Iteration   3: 199480.736 us/op
# Warmup Iteration   4: 199563.209 us/op
# Warmup Iteration   5: 199677.231 us/op
Iteration   1: 199569.848 us/op
Iteration   2: 198699.957 us/op
Iteration   3: 199767.821 us/op
Iteration   4: 199837.231 us/op
Iteration   5: 199715.272 us/op
Iteration   6: 200219.488 us/op
Iteration   7: 198906.699 us/op
Iteration   8: 199811.261 us/op
Iteration   9: 199107.243 us/op
Iteration  10: 199073.340 us/op
Iteration  11: 198550.210 us/op
Iteration  12: 198867.731 us/op
Iteration  13: 199051.104 us/op
Iteration  14: 198737.408 us/op
Iteration  15: 198173.258 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  199205.858 ±(99.9%) 621.197 us/op [Average]
  (min, avg, max) = (198173.258, 199205.858, 200219.488), stdev = 581.068
  CI (99.9%): [198584.661, 199827.055] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 36.23% complete, ETA 05:23:09
# Fork: 1 of 1
# Warmup Iteration   1: 197982.107 us/op
# Warmup Iteration   2: 198905.867 us/op
# Warmup Iteration   3: 198762.947 us/op
# Warmup Iteration   4: 197863.868 us/op
# Warmup Iteration   5: 198685.710 us/op
Iteration   1: 197744.622 us/op
Iteration   2: 197496.637 us/op
Iteration   3: 197816.719 us/op
Iteration   4: 198523.112 us/op
Iteration   5: 198347.606 us/op
Iteration   6: 198147.354 us/op
Iteration   7: 198551.172 us/op
Iteration   8: 197941.926 us/op
Iteration   9: 198540.473 us/op
Iteration  10: 198301.350 us/op
Iteration  11: 198650.302 us/op
Iteration  12: 198117.841 us/op
Iteration  13: 198787.099 us/op
Iteration  14: 198242.258 us/op
Iteration  15: 198643.363 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  198256.789 ±(99.9%) 403.891 us/op [Average]
  (min, avg, max) = (197496.637, 198256.789, 198787.099), stdev = 377.800
  CI (99.9%): [197852.898, 198660.680] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 36.96% complete, ETA 05:19:21
# Fork: 1 of 1
# Warmup Iteration   1: 194347.274 us/op
# Warmup Iteration   2: 193709.374 us/op
# Warmup Iteration   3: 193249.872 us/op
# Warmup Iteration   4: 193853.590 us/op
# Warmup Iteration   5: 193477.012 us/op
Iteration   1: 194201.302 us/op
Iteration   2: 193752.945 us/op
Iteration   3: 193755.176 us/op
Iteration   4: 194248.433 us/op
Iteration   5: 194460.221 us/op
Iteration   6: 193986.552 us/op
Iteration   7: 193307.518 us/op
Iteration   8: 194028.979 us/op
Iteration   9: 193905.100 us/op
Iteration  10: 194314.982 us/op
Iteration  11: 194284.951 us/op
Iteration  12: 194777.755 us/op
Iteration  13: 194733.422 us/op
Iteration  14: 193695.218 us/op
Iteration  15: 194065.400 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  194101.197 ±(99.9%) 422.956 us/op [Average]
  (min, avg, max) = (193307.518, 194101.197, 194777.755), stdev = 395.633
  CI (99.9%): [193678.241, 194524.153] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 37.68% complete, ETA 05:15:33
# Fork: 1 of 1
# Warmup Iteration   1: 1373518.938 us/op
# Warmup Iteration   2: 1326126.396 us/op
# Warmup Iteration   3: 1337860.202 us/op
# Warmup Iteration   4: 1324511.044 us/op
# Warmup Iteration   5: 1330961.092 us/op
Iteration   1: 1324509.281 us/op
Iteration   2: 1318540.744 us/op
Iteration   3: 1330662.576 us/op
Iteration   4: 1321804.021 us/op
Iteration   5: 1335770.483 us/op
Iteration   6: 1323992.308 us/op
Iteration   7: 1339962.334 us/op
Iteration   8: 1329849.516 us/op
Iteration   9: 1342135.713 us/op
Iteration  10: 1331073.840 us/op
Iteration  11: 1331668.958 us/op
Iteration  12: 1328953.071 us/op
Iteration  13: 1349384.831 us/op
Iteration  14: 1327295.970 us/op
Iteration  15: 1331579.981 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1331145.575 ±(99.9%) 8647.137 us/op [Average]
  (min, avg, max) = (1318540.744, 1331145.575, 1349384.831), stdev = 8088.537
  CI (99.9%): [1322498.438, 1339792.712] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 38.40% complete, ETA 05:12:07
# Fork: 1 of 1
# Warmup Iteration   1: 990145.832 us/op
# Warmup Iteration   2: 991466.589 us/op
# Warmup Iteration   3: 994787.257 us/op
# Warmup Iteration   4: 998119.634 us/op
# Warmup Iteration   5: 990909.093 us/op
Iteration   1: 996865.557 us/op
Iteration   2: 1000404.065 us/op
Iteration   3: 994800.872 us/op
Iteration   4: 995513.311 us/op
Iteration   5: 990018.805 us/op
Iteration   6: 991444.273 us/op
Iteration   7: 987403.399 us/op
Iteration   8: 994737.275 us/op
Iteration   9: 995385.350 us/op
Iteration  10: 991707.727 us/op
Iteration  11: 993056.680 us/op
Iteration  12: 992337.351 us/op
Iteration  13: 984158.937 us/op
Iteration  14: 990545.420 us/op
Iteration  15: 983534.311 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  992127.556 ±(99.9%) 4908.573 us/op [Average]
  (min, avg, max) = (983534.311, 992127.556, 1000404.065), stdev = 4591.482
  CI (99.9%): [987218.983, 997036.128] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 39.13% complete, ETA 05:08:44
# Fork: 1 of 1
# Warmup Iteration   1: 852742.594 us/op
# Warmup Iteration   2: 851771.841 us/op
# Warmup Iteration   3: 844453.705 us/op
# Warmup Iteration   4: 847522.151 us/op
# Warmup Iteration   5: 848991.596 us/op
Iteration   1: 847371.933 us/op
Iteration   2: 847852.456 us/op
Iteration   3: 848700.572 us/op
Iteration   4: 839295.272 us/op
Iteration   5: 841539.890 us/op
Iteration   6: 841779.796 us/op
Iteration   7: 841793.936 us/op
Iteration   8: 841203.899 us/op
Iteration   9: 843189.508 us/op
Iteration  10: 842945.350 us/op
Iteration  11: 846255.774 us/op
Iteration  12: 843190.303 us/op
Iteration  13: 844751.989 us/op
Iteration  14: 842931.164 us/op
Iteration  15: 844738.980 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  843836.055 ±(99.9%) 2906.358 us/op [Average]
  (min, avg, max) = (839295.272, 843836.055, 848700.572), stdev = 2718.609
  CI (99.9%): [840929.697, 846742.412] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 39.85% complete, ETA 05:04:58
# Fork: 1 of 1
# Warmup Iteration   1: 839312.168 us/op
# Warmup Iteration   2: 834941.184 us/op
# Warmup Iteration   3: 833678.686 us/op
# Warmup Iteration   4: 838073.363 us/op
# Warmup Iteration   5: 837768.272 us/op
Iteration   1: 841191.405 us/op
Iteration   2: 836993.502 us/op
Iteration   3: 836627.656 us/op
Iteration   4: 836300.310 us/op
Iteration   5: 837735.011 us/op
Iteration   6: 836511.004 us/op
Iteration   7: 840939.320 us/op
Iteration   8: 841190.267 us/op
Iteration   9: 839713.400 us/op
Iteration  10: 841557.779 us/op
Iteration  11: 841942.424 us/op
Iteration  12: 841708.319 us/op
Iteration  13: 844239.602 us/op
Iteration  14: 838582.768 us/op
Iteration  15: 842153.478 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  839825.750 ±(99.9%) 2687.671 us/op [Average]
  (min, avg, max) = (836300.310, 839825.750, 844239.602), stdev = 2514.049
  CI (99.9%): [837138.079, 842513.420] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 40.58% complete, ETA 05:01:10
# Fork: 1 of 1
# Warmup Iteration   1: 831785.943 us/op
# Warmup Iteration   2: 837841.401 us/op
# Warmup Iteration   3: 836388.536 us/op
# Warmup Iteration   4: 837552.744 us/op
# Warmup Iteration   5: 839510.137 us/op
Iteration   1: 837946.613 us/op
Iteration   2: 836388.415 us/op
Iteration   3: 834904.709 us/op
Iteration   4: 832643.962 us/op
Iteration   5: 827945.071 us/op
Iteration   6: 833050.452 us/op
Iteration   7: 827246.509 us/op
Iteration   8: 835615.913 us/op
Iteration   9: 834002.647 us/op
Iteration  10: 834829.177 us/op
Iteration  11: 834208.325 us/op
Iteration  12: 831890.529 us/op
Iteration  13: 835727.612 us/op
Iteration  14: 834660.965 us/op
Iteration  15: 834659.814 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  833714.714 ±(99.9%) 3097.630 us/op [Average]
  (min, avg, max) = (827246.509, 833714.714, 837946.613), stdev = 2897.525
  CI (99.9%): [830617.085, 836812.344] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 41.30% complete, ETA 04:57:31
# Fork: 1 of 1
# Warmup Iteration   1: 905332.103 us/op
# Warmup Iteration   2: 909523.548 us/op
# Warmup Iteration   3: 911614.220 us/op
# Warmup Iteration   4: 911764.131 us/op
# Warmup Iteration   5: 909144.135 us/op
Iteration   1: 910486.986 us/op
Iteration   2: 911690.706 us/op
Iteration   3: 910564.454 us/op
Iteration   4: 913104.879 us/op
Iteration   5: 914246.874 us/op
Iteration   6: 915139.112 us/op
Iteration   7: 911327.521 us/op
Iteration   8: 912505.608 us/op
Iteration   9: 914755.550 us/op
Iteration  10: 911926.709 us/op
Iteration  11: 911344.858 us/op
Iteration  12: 913503.942 us/op
Iteration  13: 915244.906 us/op
Iteration  14: 910734.840 us/op
Iteration  15: 914386.228 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  912730.878 ±(99.9%) 1837.897 us/op [Average]
  (min, avg, max) = (910486.986, 912730.878, 915244.906), stdev = 1719.170
  CI (99.9%): [910892.981, 914568.775] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 42.03% complete, ETA 04:53:44
# Fork: 1 of 1
# Warmup Iteration   1: 376.481 us/op
# Warmup Iteration   2: 376.191 us/op
# Warmup Iteration   3: 375.908 us/op
# Warmup Iteration   4: 376.357 us/op
# Warmup Iteration   5: 375.818 us/op
Iteration   1: 375.696 us/op
Iteration   2: 375.643 us/op
Iteration   3: 375.736 us/op
Iteration   4: 375.429 us/op
Iteration   5: 375.421 us/op
Iteration   6: 375.965 us/op
Iteration   7: 375.358 us/op
Iteration   8: 375.380 us/op
Iteration   9: 375.290 us/op
Iteration  10: 375.230 us/op
Iteration  11: 375.416 us/op
Iteration  12: 375.935 us/op
Iteration  13: 375.288 us/op
Iteration  14: 375.318 us/op
Iteration  15: 375.296 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  375.493 ±(99.9%) 0.257 us/op [Average]
  (min, avg, max) = (375.230, 375.493, 375.965), stdev = 0.240
  CI (99.9%): [375.237, 375.750] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 42.75% complete, ETA 04:49:55
# Fork: 1 of 1
# Warmup Iteration   1: 165.965 us/op
# Warmup Iteration   2: 164.576 us/op
# Warmup Iteration   3: 165.327 us/op
# Warmup Iteration   4: 165.498 us/op
# Warmup Iteration   5: 164.726 us/op
Iteration   1: 164.922 us/op
Iteration   2: 164.411 us/op
Iteration   3: 165.415 us/op
Iteration   4: 165.488 us/op
Iteration   5: 164.952 us/op
Iteration   6: 165.031 us/op
Iteration   7: 165.069 us/op
Iteration   8: 165.319 us/op
Iteration   9: 165.407 us/op
Iteration  10: 165.887 us/op
Iteration  11: 165.771 us/op
Iteration  12: 164.604 us/op
Iteration  13: 166.190 us/op
Iteration  14: 165.730 us/op
Iteration  15: 166.701 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  165.393 ±(99.9%) 0.645 us/op [Average]
  (min, avg, max) = (164.411, 165.393, 166.701), stdev = 0.604
  CI (99.9%): [164.748, 166.038] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 43.48% complete, ETA 04:46:07
# Fork: 1 of 1
# Warmup Iteration   1: 290.464 us/op
# Warmup Iteration   2: 290.099 us/op
# Warmup Iteration   3: 289.692 us/op
# Warmup Iteration   4: 300.754 us/op
# Warmup Iteration   5: 275.411 us/op
Iteration   1: 272.819 us/op
Iteration   2: 275.088 us/op
Iteration   3: 277.089 us/op
Iteration   4: 274.931 us/op
Iteration   5: 273.648 us/op
Iteration   6: 273.669 us/op
Iteration   7: 274.305 us/op
Iteration   8: 274.915 us/op
Iteration   9: 272.816 us/op
Iteration  10: 274.638 us/op
Iteration  11: 274.065 us/op
Iteration  12: 273.457 us/op
Iteration  13: 273.624 us/op
Iteration  14: 274.522 us/op
Iteration  15: 273.808 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  274.226 ±(99.9%) 1.141 us/op [Average]
  (min, avg, max) = (272.816, 274.226, 277.089), stdev = 1.067
  CI (99.9%): [273.085, 275.367] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 44.20% complete, ETA 04:42:20
# Fork: 1 of 1
# Warmup Iteration   1: 180.965 us/op
# Warmup Iteration   2: 177.736 us/op
# Warmup Iteration   3: 178.010 us/op
# Warmup Iteration   4: 177.398 us/op
# Warmup Iteration   5: 178.556 us/op
Iteration   1: 176.171 us/op
Iteration   2: 178.128 us/op
Iteration   3: 178.117 us/op
Iteration   4: 178.134 us/op
Iteration   5: 178.042 us/op
Iteration   6: 177.073 us/op
Iteration   7: 179.221 us/op
Iteration   8: 178.297 us/op
Iteration   9: 177.407 us/op
Iteration  10: 176.620 us/op
Iteration  11: 178.126 us/op
Iteration  12: 178.893 us/op
Iteration  13: 179.010 us/op
Iteration  14: 179.320 us/op
Iteration  15: 176.582 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  177.943 ±(99.9%) 1.055 us/op [Average]
  (min, avg, max) = (176.171, 177.943, 179.320), stdev = 0.987
  CI (99.9%): [176.888, 178.997] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 44.93% complete, ETA 04:38:32
# Fork: 1 of 1
# Warmup Iteration   1: 1076083.478 us/op
# Warmup Iteration   2: 1046678.550 us/op
# Warmup Iteration   3: 1046654.495 us/op
# Warmup Iteration   4: 1047832.572 us/op
# Warmup Iteration   5: 1046348.178 us/op
Iteration   1: 1047922.341 us/op
Iteration   2: 1045284.880 us/op
Iteration   3: 1047162.329 us/op
Iteration   4: 1045239.202 us/op
Iteration   5: 1045747.279 us/op
Iteration   6: 1045647.571 us/op
Iteration   7: 1044634.930 us/op
Iteration   8: 1044222.898 us/op
Iteration   9: 1044382.692 us/op
Iteration  10: 1045316.861 us/op
Iteration  11: 1049179.533 us/op
Iteration  12: 1046632.144 us/op
Iteration  13: 1045993.238 us/op
Iteration  14: 1045384.770 us/op
Iteration  15: 1045793.250 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  1045902.928 ±(99.9%) 1434.795 us/op [Average]
  (min, avg, max) = (1044222.898, 1045902.928, 1049179.533), stdev = 1342.108
  CI (99.9%): [1044468.133, 1047337.722] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 45.65% complete, ETA 04:34:57
# Fork: 1 of 1
# Warmup Iteration   1: 130133.046 us/op
# Warmup Iteration   2: 126618.020 us/op
# Warmup Iteration   3: 132496.362 us/op
# Warmup Iteration   4: 131842.568 us/op
# Warmup Iteration   5: 128911.987 us/op
Iteration   1: 129126.837 us/op
Iteration   2: 129555.651 us/op
Iteration   3: 128728.020 us/op
Iteration   4: 126063.110 us/op
Iteration   5: 124586.877 us/op
Iteration   6: 121448.677 us/op
Iteration   7: 125856.804 us/op
Iteration   8: 124399.698 us/op
Iteration   9: 130473.625 us/op
Iteration  10: 125107.563 us/op
Iteration  11: 126149.885 us/op
Iteration  12: 129598.275 us/op
Iteration  13: 125659.225 us/op
Iteration  14: 124047.735 us/op
Iteration  15: 126648.515 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  126496.700 ±(99.9%) 2704.321 us/op [Average]
  (min, avg, max) = (121448.677, 126496.700, 130473.625), stdev = 2529.624
  CI (99.9%): [123792.378, 129201.021] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 46.38% complete, ETA 04:31:12
# Fork: 1 of 1
# Warmup Iteration   1: 3230832.137 us/op
# Warmup Iteration   2: 4258787.596 us/op
# Warmup Iteration   3: 4233404.317 us/op
# Warmup Iteration   4: 4244081.186 us/op
# Warmup Iteration   5: 4230849.925 us/op
Iteration   1: 4265256.451 us/op
Iteration   2: 4247985.477 us/op
Iteration   3: 4220305.393 us/op
Iteration   4: 4237811.911 us/op
Iteration   5: 4242625.044 us/op
Iteration   6: 4221481.087 us/op
Iteration   7: 4247428.263 us/op
Iteration   8: 4250304.459 us/op
Iteration   9: 4230314.213 us/op
Iteration  10: 4236667.800 us/op
Iteration  11: 4245474.419 us/op
Iteration  12: 4226499.355 us/op
Iteration  13: 4248034.388 us/op
Iteration  14: 4245418.353 us/op
Iteration  15: 4217975.462 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  4238905.472 ±(99.9%) 14239.271 us/op [Average]
  (min, avg, max) = (4217975.462, 4238905.472, 4265256.451), stdev = 13319.423
  CI (99.9%): [4224666.201, 4253144.743] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 47.10% complete, ETA 04:28:28
# Fork: 1 of 1
# Warmup Iteration   1: 1.848 us/op
# Warmup Iteration   2: 1.850 us/op
# Warmup Iteration   3: 1.848 us/op
# Warmup Iteration   4: 1.845 us/op
# Warmup Iteration   5: 1.846 us/op
Iteration   1: 1.845 us/op
Iteration   2: 1.845 us/op
Iteration   3: 1.845 us/op
Iteration   4: 1.845 us/op
Iteration   5: 1.845 us/op
Iteration   6: 1.845 us/op
Iteration   7: 1.844 us/op
Iteration   8: 1.844 us/op
Iteration   9: 1.845 us/op
Iteration  10: 1.845 us/op
Iteration  11: 1.845 us/op
Iteration  12: 1.849 us/op
Iteration  13: 1.846 us/op
Iteration  14: 1.846 us/op
Iteration  15: 1.845 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  1.845 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (1.844, 1.845, 1.849), stdev = 0.001
  CI (99.9%): [1.844, 1.847] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 47.82% complete, ETA 04:24:40
# Fork: 1 of 1
# Warmup Iteration   1: 4.914 us/op
# Warmup Iteration   2: 4.909 us/op
# Warmup Iteration   3: 4.918 us/op
# Warmup Iteration   4: 4.916 us/op
# Warmup Iteration   5: 4.913 us/op
Iteration   1: 4.910 us/op
Iteration   2: 4.922 us/op
Iteration   3: 4.923 us/op
Iteration   4: 4.917 us/op
Iteration   5: 4.911 us/op
Iteration   6: 4.920 us/op
Iteration   7: 4.914 us/op
Iteration   8: 4.917 us/op
Iteration   9: 4.907 us/op
Iteration  10: 4.910 us/op
Iteration  11: 4.912 us/op
Iteration  12: 4.921 us/op
Iteration  13: 4.946 us/op
Iteration  14: 4.938 us/op
Iteration  15: 4.937 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  4.920 ±(99.9%) 0.012 us/op [Average]
  (min, avg, max) = (4.907, 4.920, 4.946), stdev = 0.012
  CI (99.9%): [4.908, 4.933] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 48.55% complete, ETA 04:20:52
# Fork: 1 of 1
# Warmup Iteration   1: 8.832 us/op
# Warmup Iteration   2: 8.829 us/op
# Warmup Iteration   3: 8.817 us/op
# Warmup Iteration   4: 8.811 us/op
# Warmup Iteration   5: 8.810 us/op
Iteration   1: 8.806 us/op
Iteration   2: 8.809 us/op
Iteration   3: 8.808 us/op
Iteration   4: 8.830 us/op
Iteration   5: 8.816 us/op
Iteration   6: 8.806 us/op
Iteration   7: 8.830 us/op
Iteration   8: 8.814 us/op
Iteration   9: 8.802 us/op
Iteration  10: 8.807 us/op
Iteration  11: 8.810 us/op
Iteration  12: 8.842 us/op
Iteration  13: 8.831 us/op
Iteration  14: 8.825 us/op
Iteration  15: 8.834 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  8.818 ±(99.9%) 0.014 us/op [Average]
  (min, avg, max) = (8.802, 8.818, 8.842), stdev = 0.013
  CI (99.9%): [8.804, 8.832] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 49.27% complete, ETA 04:17:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.043 us/op
# Warmup Iteration   2: 0.044 us/op
# Warmup Iteration   3: 0.044 us/op
# Warmup Iteration   4: 0.044 us/op
# Warmup Iteration   5: 0.044 us/op
Iteration   1: 0.043 us/op
Iteration   2: 0.044 us/op
Iteration   3: 0.043 us/op
Iteration   4: 0.043 us/op
Iteration   5: 0.043 us/op
Iteration   6: 0.043 us/op
Iteration   7: 0.044 us/op
Iteration   8: 0.043 us/op
Iteration   9: 0.044 us/op
Iteration  10: 0.043 us/op
Iteration  11: 0.043 us/op
Iteration  12: 0.043 us/op
Iteration  13: 0.043 us/op
Iteration  14: 0.043 us/op
Iteration  15: 0.043 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.043 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.043, 0.043, 0.044), stdev = 0.001
  CI (99.9%): [0.043, 0.044] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 50.00% complete, ETA 04:13:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.383 us/op
# Warmup Iteration   2: 0.384 us/op
# Warmup Iteration   3: 0.419 us/op
# Warmup Iteration   4: 0.420 us/op
# Warmup Iteration   5: 0.418 us/op
Iteration   1: 0.421 us/op
Iteration   2: 0.418 us/op
Iteration   3: 0.426 us/op
Iteration   4: 0.418 us/op
Iteration   5: 0.420 us/op
Iteration   6: 0.425 us/op
Iteration   7: 0.426 us/op
Iteration   8: 0.420 us/op
Iteration   9: 0.419 us/op
Iteration  10: 0.419 us/op
Iteration  11: 0.429 us/op
Iteration  12: 0.419 us/op
Iteration  13: 0.419 us/op
Iteration  14: 0.420 us/op
Iteration  15: 0.421 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.421 ±(99.9%) 0.004 us/op [Average]
  (min, avg, max) = (0.418, 0.421, 0.429), stdev = 0.004
  CI (99.9%): [0.418, 0.425] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 50.72% complete, ETA 04:09:32
# Fork: 1 of 1
# Warmup Iteration   1: 4.166 us/op
# Warmup Iteration   2: 4.413 us/op
# Warmup Iteration   3: 4.815 us/op
# Warmup Iteration   4: 4.786 us/op
# Warmup Iteration   5: 4.769 us/op
Iteration   1: 4.724 us/op
Iteration   2: 4.728 us/op
Iteration   3: 4.779 us/op
Iteration   4: 4.738 us/op
Iteration   5: 4.783 us/op
Iteration   6: 4.648 us/op
Iteration   7: 4.809 us/op
Iteration   8: 4.794 us/op
Iteration   9: 4.712 us/op
Iteration  10: 4.708 us/op
Iteration  11: 4.721 us/op
Iteration  12: 4.742 us/op
Iteration  13: 4.748 us/op
Iteration  14: 4.862 us/op
Iteration  15: 4.860 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  4.757 ±(99.9%) 0.062 us/op [Average]
  (min, avg, max) = (4.648, 4.757, 4.862), stdev = 0.058
  CI (99.9%): [4.695, 4.819] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 51.45% complete, ETA 04:05:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.049 us/op
# Warmup Iteration   2: 0.044 us/op
# Warmup Iteration   3: 0.047 us/op
# Warmup Iteration   4: 0.047 us/op
# Warmup Iteration   5: 0.047 us/op
Iteration   1: 0.047 us/op
Iteration   2: 0.047 us/op
Iteration   3: 0.047 us/op
Iteration   4: 0.047 us/op
Iteration   5: 0.047 us/op
Iteration   6: 0.047 us/op
Iteration   7: 0.047 us/op
Iteration   8: 0.047 us/op
Iteration   9: 0.047 us/op
Iteration  10: 0.047 us/op
Iteration  11: 0.047 us/op
Iteration  12: 0.047 us/op
Iteration  13: 0.047 us/op
Iteration  14: 0.047 us/op
Iteration  15: 0.047 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.047 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.047, 0.047, 0.047), stdev = 0.001
  CI (99.9%): [0.047, 0.047] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 52.17% complete, ETA 04:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.455 us/op
# Warmup Iteration   2: 0.387 us/op
# Warmup Iteration   3: 0.416 us/op
# Warmup Iteration   4: 0.424 us/op
# Warmup Iteration   5: 0.418 us/op
Iteration   1: 0.428 us/op
Iteration   2: 0.429 us/op
Iteration   3: 0.417 us/op
Iteration   4: 0.418 us/op
Iteration   5: 0.426 us/op
Iteration   6: 0.416 us/op
Iteration   7: 0.418 us/op
Iteration   8: 0.420 us/op
Iteration   9: 0.418 us/op
Iteration  10: 0.420 us/op
Iteration  11: 0.419 us/op
Iteration  12: 0.417 us/op
Iteration  13: 0.418 us/op
Iteration  14: 0.420 us/op
Iteration  15: 0.419 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.420 ±(99.9%) 0.004 us/op [Average]
  (min, avg, max) = (0.416, 0.420, 0.429), stdev = 0.004
  CI (99.9%): [0.416, 0.425] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 52.90% complete, ETA 03:58:14
# Fork: 1 of 1
# Warmup Iteration   1: 3.785 us/op
# Warmup Iteration   2: 3.682 us/op
# Warmup Iteration   3: 4.417 us/op
# Warmup Iteration   4: 4.330 us/op
# Warmup Iteration   5: 4.380 us/op
Iteration   1: 4.425 us/op
Iteration   2: 4.386 us/op
Iteration   3: 4.439 us/op
Iteration   4: 4.310 us/op
Iteration   5: 4.425 us/op
Iteration   6: 4.426 us/op
Iteration   7: 4.401 us/op
Iteration   8: 4.402 us/op
Iteration   9: 4.309 us/op
Iteration  10: 4.404 us/op
Iteration  11: 4.478 us/op
Iteration  12: 4.490 us/op
Iteration  13: 4.408 us/op
Iteration  14: 4.438 us/op
Iteration  15: 4.282 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  4.401 ±(99.9%) 0.064 us/op [Average]
  (min, avg, max) = (4.282, 4.401, 4.490), stdev = 0.060
  CI (99.9%): [4.338, 4.465] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 53.62% complete, ETA 03:54:29
# Fork: 1 of 1
# Warmup Iteration   1: 14324.485 us/op
# Warmup Iteration   2: 14277.589 us/op
# Warmup Iteration   3: 14273.830 us/op
# Warmup Iteration   4: 14291.297 us/op
# Warmup Iteration   5: 14287.620 us/op
Iteration   1: 14264.566 us/op
Iteration   2: 14275.841 us/op
Iteration   3: 14266.710 us/op
Iteration   4: 14269.656 us/op
Iteration   5: 14259.030 us/op
Iteration   6: 14254.622 us/op
Iteration   7: 14260.147 us/op
Iteration   8: 14284.167 us/op
Iteration   9: 14262.002 us/op
Iteration  10: 14266.965 us/op
Iteration  11: 14266.530 us/op
Iteration  12: 14262.619 us/op
Iteration  13: 14262.064 us/op
Iteration  14: 14261.263 us/op
Iteration  15: 14275.419 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  14266.107 ±(99.9%) 8.133 us/op [Average]
  (min, avg, max) = (14254.622, 14266.107, 14284.167), stdev = 7.608
  CI (99.9%): [14257.974, 14274.240] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 54.35% complete, ETA 03:50:46
# Fork: 1 of 1
# Warmup Iteration   1: 319.724 us/op
# Warmup Iteration   2: 316.025 us/op
# Warmup Iteration   3: 314.657 us/op
# Warmup Iteration   4: 314.479 us/op
# Warmup Iteration   5: 314.023 us/op
Iteration   1: 314.006 us/op
Iteration   2: 314.186 us/op
Iteration   3: 314.140 us/op
Iteration   4: 314.040 us/op
Iteration   5: 313.632 us/op
Iteration   6: 313.722 us/op
Iteration   7: 314.079 us/op
Iteration   8: 314.093 us/op
Iteration   9: 314.317 us/op
Iteration  10: 314.539 us/op
Iteration  11: 313.922 us/op
Iteration  12: 313.979 us/op
Iteration  13: 313.614 us/op
Iteration  14: 313.505 us/op
Iteration  15: 313.643 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  313.961 ±(99.9%) 0.310 us/op [Average]
  (min, avg, max) = (313.505, 313.961, 314.539), stdev = 0.290
  CI (99.9%): [313.651, 314.271] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 55.07% complete, ETA 03:47:02
# Fork: 1 of 1
# Warmup Iteration   1: 31405.719 us/op
# Warmup Iteration   2: 31250.440 us/op
# Warmup Iteration   3: 31161.504 us/op
# Warmup Iteration   4: 31194.293 us/op
# Warmup Iteration   5: 31236.977 us/op
Iteration   1: 31231.061 us/op
Iteration   2: 31184.145 us/op
Iteration   3: 31189.687 us/op
Iteration   4: 31138.703 us/op
Iteration   5: 31168.552 us/op
Iteration   6: 31172.713 us/op
Iteration   7: 31163.771 us/op
Iteration   8: 31130.320 us/op
Iteration   9: 31217.463 us/op
Iteration  10: 31193.708 us/op
Iteration  11: 31220.430 us/op
Iteration  12: 31216.121 us/op
Iteration  13: 31195.985 us/op
Iteration  14: 31199.910 us/op
Iteration  15: 31184.270 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  31187.123 ±(99.9%) 31.010 us/op [Average]
  (min, avg, max) = (31130.320, 31187.123, 31231.061), stdev = 29.006
  CI (99.9%): [31156.113, 31218.132] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 55.80% complete, ETA 03:43:18
# Fork: 1 of 1
# Warmup Iteration   1: 3183088.813 us/op
# Warmup Iteration   2: 6001315.358 us/op
# Warmup Iteration   3: 3174890.811 us/op
# Warmup Iteration   4: 5258822.139 us/op
# Warmup Iteration   5: 11452758.236 us/op
Iteration   1: 11464101.601 us/op
Iteration   2: 11474454.375 us/op
Iteration   3: 11454478.951 us/op
Iteration   4: 11472453.260 us/op
Iteration   5: 11473467.447 us/op
Iteration   6: 11488840.625 us/op
Iteration   7: 11453644.903 us/op
Iteration   8: 11467646.194 us/op
Iteration   9: 11451378.332 us/op
Iteration  10: 11477334.063 us/op
Iteration  11: 11487491.167 us/op
Iteration  12: 11426224.313 us/op
Iteration  13: 11403638.735 us/op
Iteration  14: 11406214.090 us/op
Iteration  15: 11406801.668 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  11453877.982 ±(99.9%) 31470.667 us/op [Average]
  (min, avg, max) = (11403638.735, 11453877.982, 11488840.625), stdev = 29437.682
  CI (99.9%): [11422407.314, 11485348.649] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 56.52% complete, ETA 03:40:11
# Fork: 1 of 1
# Warmup Iteration   1: 1880.034 us/op
# Warmup Iteration   2: 1876.960 us/op
# Warmup Iteration   3: 1879.933 us/op
# Warmup Iteration   4: 1876.140 us/op
# Warmup Iteration   5: 1875.732 us/op
Iteration   1: 1876.138 us/op
Iteration   2: 1875.353 us/op
Iteration   3: 1877.159 us/op
Iteration   4: 1879.586 us/op
Iteration   5: 1876.976 us/op
Iteration   6: 1875.483 us/op
Iteration   7: 1875.879 us/op
Iteration   8: 1876.279 us/op
Iteration   9: 1874.578 us/op
Iteration  10: 1874.847 us/op
Iteration  11: 1876.405 us/op
Iteration  12: 1874.949 us/op
Iteration  13: 1876.097 us/op
Iteration  14: 1874.834 us/op
Iteration  15: 1878.757 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  1876.221 ±(99.9%) 1.534 us/op [Average]
  (min, avg, max) = (1874.578, 1876.221, 1879.586), stdev = 1.435
  CI (99.9%): [1874.688, 1877.755] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 57.24% complete, ETA 03:36:27
# Fork: 1 of 1
# Warmup Iteration   1: 62203.054 us/op
# Warmup Iteration   2: 62252.205 us/op
# Warmup Iteration   3: 62232.935 us/op
# Warmup Iteration   4: 62257.550 us/op
# Warmup Iteration   5: 62197.307 us/op
Iteration   1: 62128.444 us/op
Iteration   2: 62154.083 us/op
Iteration   3: 62189.088 us/op
Iteration   4: 62121.668 us/op
Iteration   5: 62101.261 us/op
Iteration   6: 62032.204 us/op
Iteration   7: 62077.761 us/op
Iteration   8: 62130.342 us/op
Iteration   9: 62121.607 us/op
Iteration  10: 62053.174 us/op
Iteration  11: 62113.550 us/op
Iteration  12: 62190.532 us/op
Iteration  13: 62185.942 us/op
Iteration  14: 62145.387 us/op
Iteration  15: 62125.314 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  62124.690 ±(99.9%) 49.599 us/op [Average]
  (min, avg, max) = (62032.204, 62124.690, 62190.532), stdev = 46.395
  CI (99.9%): [62075.091, 62174.290] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 57.97% complete, ETA 03:32:43
# Fork: 1 of 1
# Warmup Iteration   1: 1694537.817 us/op
# Warmup Iteration   2: 1703555.196 us/op
# Warmup Iteration   3: 1703789.456 us/op
# Warmup Iteration   4: 1703278.584 us/op
# Warmup Iteration   5: 1703245.774 us/op
Iteration   1: 1702931.964 us/op
Iteration   2: 1703171.057 us/op
Iteration   3: 1703929.266 us/op
Iteration   4: 1702848.066 us/op
Iteration   5: 1703145.553 us/op
Iteration   6: 1702818.254 us/op
Iteration   7: 1702804.034 us/op
Iteration   8: 1703052.321 us/op
Iteration   9: 1704091.460 us/op
Iteration  10: 1703290.069 us/op
Iteration  11: 1705976.521 us/op
Iteration  12: 1702874.105 us/op
Iteration  13: 1703119.430 us/op
Iteration  14: 1703152.457 us/op
Iteration  15: 1704029.212 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  1703415.585 ±(99.9%) 888.623 us/op [Average]
  (min, avg, max) = (1702804.034, 1703415.585, 1705976.521), stdev = 831.219
  CI (99.9%): [1702526.961, 1704304.208] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 58.69% complete, ETA 03:29:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.516 us/op
# Warmup Iteration   2: 0.516 us/op
# Warmup Iteration   3: 0.517 us/op
# Warmup Iteration   4: 0.517 us/op
# Warmup Iteration   5: 0.517 us/op
Iteration   1: 0.517 us/op
Iteration   2: 0.517 us/op
Iteration   3: 0.517 us/op
Iteration   4: 0.517 us/op
Iteration   5: 0.517 us/op
Iteration   6: 0.517 us/op
Iteration   7: 0.517 us/op
Iteration   8: 0.518 us/op
Iteration   9: 0.517 us/op
Iteration  10: 0.517 us/op
Iteration  11: 0.517 us/op
Iteration  12: 0.516 us/op
Iteration  13: 0.516 us/op
Iteration  14: 0.516 us/op
Iteration  15: 0.516 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  0.517 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.516, 0.517, 0.518), stdev = 0.001
  CI (99.9%): [0.516, 0.518] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 59.42% complete, ETA 03:25:28
# Fork: 1 of 1
# Warmup Iteration   1: 7009.584 us/op
# Warmup Iteration   2: 6960.095 us/op
# Warmup Iteration   3: 6960.612 us/op
# Warmup Iteration   4: 6956.040 us/op
# Warmup Iteration   5: 6962.116 us/op
Iteration   1: 6955.924 us/op
Iteration   2: 6956.269 us/op
Iteration   3: 6951.875 us/op
Iteration   4: 6945.956 us/op
Iteration   5: 6948.524 us/op
Iteration   6: 6946.814 us/op
Iteration   7: 6946.081 us/op
Iteration   8: 6956.181 us/op
Iteration   9: 6953.742 us/op
Iteration  10: 6945.076 us/op
Iteration  11: 6949.421 us/op
Iteration  12: 6953.698 us/op
Iteration  13: 6950.179 us/op
Iteration  14: 6946.933 us/op
Iteration  15: 6958.308 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  6950.999 ±(99.9%) 4.746 us/op [Average]
  (min, avg, max) = (6945.076, 6950.999, 6958.308), stdev = 4.439
  CI (99.9%): [6946.253, 6955.745] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 60.14% complete, ETA 03:21:44
# Fork: 1 of 1
# Warmup Iteration   1: 29966.843 us/op
# Warmup Iteration   2: 33085.369 us/op
# Warmup Iteration   3: 32179.507 us/op
# Warmup Iteration   4: 37261.995 us/op
# Warmup Iteration   5: 34464.385 us/op
Iteration   1: 33003.549 us/op
Iteration   2: 34436.643 us/op
Iteration   3: 36108.063 us/op
Iteration   4: 41349.283 us/op
Iteration   5: 31418.883 us/op
Iteration   6: 33906.354 us/op
Iteration   7: 33897.489 us/op
Iteration   8: 34039.908 us/op
Iteration   9: 34147.240 us/op
Iteration  10: 32591.845 us/op
Iteration  11: 36143.617 us/op
Iteration  12: 32496.217 us/op
Iteration  13: 32650.952 us/op
Iteration  14: 32079.152 us/op
Iteration  15: 35888.170 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  34277.158 ±(99.9%) 2604.682 us/op [Average]
  (min, avg, max) = (31418.883, 34277.158, 41349.283), stdev = 2436.421
  CI (99.9%): [31672.476, 36881.839] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 60.87% complete, ETA 03:18:01
# Fork: 1 of 1
# Warmup Iteration   1: 35056.999 us/op
# Warmup Iteration   2: 34603.483 us/op
# Warmup Iteration   3: 34586.039 us/op
# Warmup Iteration   4: 34743.849 us/op
# Warmup Iteration   5: 34622.358 us/op
Iteration   1: 34690.894 us/op
Iteration   2: 34728.221 us/op
Iteration   3: 34802.038 us/op
Iteration   4: 34741.870 us/op
Iteration   5: 34743.222 us/op
Iteration   6: 34702.989 us/op
Iteration   7: 34798.896 us/op
Iteration   8: 34780.680 us/op
Iteration   9: 34792.430 us/op
Iteration  10: 34772.876 us/op
Iteration  11: 34755.223 us/op
Iteration  12: 34801.102 us/op
Iteration  13: 34772.853 us/op
Iteration  14: 34910.355 us/op
Iteration  15: 34791.799 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  34772.363 ±(99.9%) 55.531 us/op [Average]
  (min, avg, max) = (34690.894, 34772.363, 34910.355), stdev = 51.943
  CI (99.9%): [34716.832, 34827.894] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 61.59% complete, ETA 03:14:17
# Fork: 1 of 1
# Warmup Iteration   1: 25142.087 us/op
# Warmup Iteration   2: 24796.266 us/op
# Warmup Iteration   3: 24595.093 us/op
# Warmup Iteration   4: 24761.363 us/op
# Warmup Iteration   5: 24702.672 us/op
Iteration   1: 24826.762 us/op
Iteration   2: 24746.810 us/op
Iteration   3: 24909.092 us/op
Iteration   4: 24777.862 us/op
Iteration   5: 24857.148 us/op
Iteration   6: 24783.829 us/op
Iteration   7: 24894.739 us/op
Iteration   8: 24781.855 us/op
Iteration   9: 24909.205 us/op
Iteration  10: 24779.120 us/op
Iteration  11: 24698.385 us/op
Iteration  12: 24717.438 us/op
Iteration  13: 24699.965 us/op
Iteration  14: 24824.060 us/op
Iteration  15: 24820.555 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  24801.788 ±(99.9%) 75.179 us/op [Average]
  (min, avg, max) = (24698.385, 24801.788, 24909.205), stdev = 70.322
  CI (99.9%): [24726.610, 24876.967] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 62.32% complete, ETA 03:10:35
# Fork: 1 of 1
# Warmup Iteration   1: 14380.380 us/op
# Warmup Iteration   2: 14309.518 us/op
# Warmup Iteration   3: 14355.288 us/op
# Warmup Iteration   4: 14334.387 us/op
# Warmup Iteration   5: 14325.864 us/op
Iteration   1: 14316.594 us/op
Iteration   2: 14288.042 us/op
Iteration   3: 14319.850 us/op
Iteration   4: 14305.853 us/op
Iteration   5: 14331.659 us/op
Iteration   6: 14299.396 us/op
Iteration   7: 14362.896 us/op
Iteration   8: 14280.809 us/op
Iteration   9: 14291.592 us/op
Iteration  10: 14310.110 us/op
Iteration  11: 14277.817 us/op
Iteration  12: 14311.845 us/op
Iteration  13: 14318.184 us/op
Iteration  14: 14302.660 us/op
Iteration  15: 14319.583 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  14309.126 ±(99.9%) 22.948 us/op [Average]
  (min, avg, max) = (14277.817, 14309.126, 14362.896), stdev = 21.466
  CI (99.9%): [14286.178, 14332.074] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 63.04% complete, ETA 03:06:52
# Fork: 1 of 1
# Warmup Iteration   1: 32012.235 us/op
# Warmup Iteration   2: 33631.197 us/op
# Warmup Iteration   3: 31720.857 us/op
# Warmup Iteration   4: 31501.108 us/op
# Warmup Iteration   5: 31421.687 us/op
Iteration   1: 32231.089 us/op
Iteration   2: 32187.450 us/op
Iteration   3: 31467.204 us/op
Iteration   4: 30760.350 us/op
Iteration   5: 30395.863 us/op
Iteration   6: 32749.589 us/op
Iteration   7: 34494.168 us/op
Iteration   8: 31881.263 us/op
Iteration   9: 30959.391 us/op
Iteration  10: 31594.767 us/op
Iteration  11: 31714.050 us/op
Iteration  12: 31255.674 us/op
Iteration  13: 32134.691 us/op
Iteration  14: 29486.224 us/op
Iteration  15: 29484.923 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  31519.780 ±(99.9%) 1351.233 us/op [Average]
  (min, avg, max) = (29484.923, 31519.780, 34494.168), stdev = 1263.944
  CI (99.9%): [30168.547, 32871.013] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 63.77% complete, ETA 03:03:09
# Fork: 1 of 1
# Warmup Iteration   1: 637.495 us/op
# Warmup Iteration   2: 633.134 us/op
# Warmup Iteration   3: 635.589 us/op
# Warmup Iteration   4: 633.789 us/op
# Warmup Iteration   5: 634.522 us/op
Iteration   1: 633.395 us/op
Iteration   2: 632.829 us/op
Iteration   3: 630.285 us/op
Iteration   4: 633.582 us/op
Iteration   5: 633.883 us/op
Iteration   6: 631.766 us/op
Iteration   7: 631.909 us/op
Iteration   8: 631.004 us/op
Iteration   9: 633.201 us/op
Iteration  10: 631.166 us/op
Iteration  11: 632.534 us/op
Iteration  12: 633.094 us/op
Iteration  13: 632.375 us/op
Iteration  14: 631.295 us/op
Iteration  15: 631.726 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  632.270 ±(99.9%) 1.140 us/op [Average]
  (min, avg, max) = (630.285, 632.270, 633.883), stdev = 1.066
  CI (99.9%): [631.130, 633.410] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 64.49% complete, ETA 02:59:26
# Fork: 1 of 1
# Warmup Iteration   1: 6481.471 us/op
# Warmup Iteration   2: 6457.207 us/op
# Warmup Iteration   3: 6458.791 us/op
# Warmup Iteration   4: 6479.765 us/op
# Warmup Iteration   5: 6499.745 us/op
Iteration   1: 6470.449 us/op
Iteration   2: 6455.660 us/op
Iteration   3: 6455.793 us/op
Iteration   4: 6446.836 us/op
Iteration   5: 6442.568 us/op
Iteration   6: 6473.413 us/op
Iteration   7: 6462.948 us/op
Iteration   8: 6467.584 us/op
Iteration   9: 6458.697 us/op
Iteration  10: 6471.464 us/op
Iteration  11: 6457.345 us/op
Iteration  12: 6457.012 us/op
Iteration  13: 6456.024 us/op
Iteration  14: 6485.640 us/op
Iteration  15: 6445.064 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  6460.433 ±(99.9%) 12.492 us/op [Average]
  (min, avg, max) = (6442.568, 6460.433, 6485.640), stdev = 11.685
  CI (99.9%): [6447.941, 6472.925] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 65.22% complete, ETA 02:55:43
# Fork: 1 of 1
# Warmup Iteration   1: 107694.783 us/op
# Warmup Iteration   2: 106025.304 us/op
# Warmup Iteration   3: 104828.751 us/op
# Warmup Iteration   4: 105123.561 us/op
# Warmup Iteration   5: 105024.918 us/op
Iteration   1: 105226.423 us/op
Iteration   2: 105269.454 us/op
Iteration   3: 104489.085 us/op
Iteration   4: 105017.082 us/op
Iteration   5: 105140.683 us/op
Iteration   6: 105351.976 us/op
Iteration   7: 104629.011 us/op
Iteration   8: 104644.310 us/op
Iteration   9: 104800.147 us/op
Iteration  10: 104296.052 us/op
Iteration  11: 104501.051 us/op
Iteration  12: 104821.904 us/op
Iteration  13: 104464.858 us/op
Iteration  14: 104794.455 us/op
Iteration  15: 104726.161 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  104811.510 ±(99.9%) 347.576 us/op [Average]
  (min, avg, max) = (104296.052, 104811.510, 105351.976), stdev = 325.123
  CI (99.9%): [104463.934, 105159.086] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 65.94% complete, ETA 02:52:01
# Fork: 1 of 1
# Warmup Iteration   1: 1687021.411 us/op
# Warmup Iteration   2: 1718940.142 us/op
# Warmup Iteration   3: 1665693.170 us/op
# Warmup Iteration   4: 1667748.111 us/op
# Warmup Iteration   5: 1658757.625 us/op
Iteration   1: 1657072.291 us/op
Iteration   2: 1660946.736 us/op
Iteration   3: 1654723.744 us/op
Iteration   4: 1660110.968 us/op
Iteration   5: 1655343.261 us/op
Iteration   6: 1663336.466 us/op
Iteration   7: 1654730.299 us/op
Iteration   8: 1661175.218 us/op
Iteration   9: 1657716.887 us/op
Iteration  10: 1660223.823 us/op
Iteration  11: 1659319.135 us/op
Iteration  12: 1658811.911 us/op
Iteration  13: 1652030.557 us/op
Iteration  14: 1657507.032 us/op
Iteration  15: 1657812.338 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  1658057.378 ±(99.9%) 3185.870 us/op [Average]
  (min, avg, max) = (1652030.557, 1658057.378, 1663336.466), stdev = 2980.065
  CI (99.9%): [1654871.508, 1661243.247] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 66.66% complete, ETA 02:48:37
# Fork: 1 of 1
# Warmup Iteration   1: 216698.270 ±(99.9%) 2927.037 us/op
# Warmup Iteration   2: 216452.859 ±(99.9%) 2196.874 us/op
# Warmup Iteration   3: 217397.159 ±(99.9%) 2978.727 us/op
# Warmup Iteration   4: 217402.858 ±(99.9%) 2610.275 us/op
# Warmup Iteration   5: 217647.905 ±(99.9%) 2330.396 us/op
Iteration   1: 217395.461 ±(99.9%) 2746.733 us/op
                 createNewObjects·p0.00:   207880.192 us/op
                 createNewObjects·p0.50:   217317.376 us/op
                 createNewObjects·p0.90:   225234.125 us/op
                 createNewObjects·p0.95:   226964.275 us/op
                 createNewObjects·p0.99:   227803.136 us/op
                 createNewObjects·p0.999:  227803.136 us/op
                 createNewObjects·p0.9999: 227803.136 us/op
                 createNewObjects·p1.00:   227803.136 us/op

Iteration   2: 217083.120 ±(99.9%) 2771.544 us/op
                 createNewObjects·p0.00:   203161.600 us/op
                 createNewObjects·p0.50:   217579.520 us/op
                 createNewObjects·p0.90:   222560.256 us/op
                 createNewObjects·p0.95:   226492.416 us/op
                 createNewObjects·p0.99:   230162.432 us/op
                 createNewObjects·p0.999:  230162.432 us/op
                 createNewObjects·p0.9999: 230162.432 us/op
                 createNewObjects·p1.00:   230162.432 us/op

Iteration   3: 217773.279 ±(99.9%) 2744.924 us/op
                 createNewObjects·p0.00:   201588.736 us/op
                 createNewObjects·p0.50:   217972.736 us/op
                 createNewObjects·p0.90:   222822.400 us/op
                 createNewObjects·p0.95:   226911.846 us/op
                 createNewObjects·p0.99:   229638.144 us/op
                 createNewObjects·p0.999:  229638.144 us/op
                 createNewObjects·p0.9999: 229638.144 us/op
                 createNewObjects·p1.00:   229638.144 us/op

Iteration   4: 217105.430 ±(99.9%) 2828.403 us/op
                 createNewObjects·p0.00:   203161.600 us/op
                 createNewObjects·p0.50:   217317.376 us/op
                 createNewObjects·p0.90:   224971.981 us/op
                 createNewObjects·p0.95:   227593.421 us/op
                 createNewObjects·p0.99:   230424.576 us/op
                 createNewObjects·p0.999:  230424.576 us/op
                 createNewObjects·p0.9999: 230424.576 us/op
                 createNewObjects·p1.00:   230424.576 us/op

Iteration   5: 216296.688 ±(99.9%) 2201.038 us/op
                 createNewObjects·p0.00:   206569.472 us/op
                 createNewObjects·p0.50:   217055.232 us/op
                 createNewObjects·p0.90:   221406.822 us/op
                 createNewObjects·p0.95:   224080.691 us/op
                 createNewObjects·p0.99:   225443.840 us/op
                 createNewObjects·p0.999:  225443.840 us/op
                 createNewObjects·p0.9999: 225443.840 us/op
                 createNewObjects·p1.00:   225443.840 us/op

Iteration   6: 216179.559 ±(99.9%) 2516.535 us/op
                 createNewObjects·p0.00:   204472.320 us/op
                 createNewObjects·p0.50:   216530.944 us/op
                 createNewObjects·p0.90:   222140.826 us/op
                 createNewObjects·p0.95:   224080.691 us/op
                 createNewObjects·p0.99:   225443.840 us/op
                 createNewObjects·p0.999:  225443.840 us/op
                 createNewObjects·p0.9999: 225443.840 us/op
                 createNewObjects·p1.00:   225443.840 us/op

Iteration   7: 217596.616 ±(99.9%) 2011.869 us/op
                 createNewObjects·p0.00:   208928.768 us/op
                 createNewObjects·p0.50:   217186.304 us/op
                 createNewObjects·p0.90:   222376.755 us/op
                 createNewObjects·p0.95:   222992.794 us/op
                 createNewObjects·p0.99:   228851.712 us/op
                 createNewObjects·p0.999:  228851.712 us/op
                 createNewObjects·p0.9999: 228851.712 us/op
                 createNewObjects·p1.00:   228851.712 us/op

Iteration   8: 217295.066 ±(99.9%) 2651.866 us/op
                 createNewObjects·p0.00:   203685.888 us/op
                 createNewObjects·p0.50:   217579.520 us/op
                 createNewObjects·p0.90:   223503.974 us/op
                 createNewObjects·p0.95:   225181.696 us/op
                 createNewObjects·p0.99:   225705.984 us/op
                 createNewObjects·p0.999:  225705.984 us/op
                 createNewObjects·p0.9999: 225705.984 us/op
                 createNewObjects·p1.00:   225705.984 us/op

Iteration   9: 217222.558 ±(99.9%) 2262.482 us/op
                 createNewObjects·p0.00:   207880.192 us/op
                 createNewObjects·p0.50:   217841.664 us/op
                 createNewObjects·p0.90:   222402.970 us/op
                 createNewObjects·p0.95:   223451.546 us/op
                 createNewObjects·p0.99:   225181.696 us/op
                 createNewObjects·p0.999:  225181.696 us/op
                 createNewObjects·p0.9999: 225181.696 us/op
                 createNewObjects·p1.00:   225181.696 us/op

Iteration  10: 217172.360 ±(99.9%) 2348.565 us/op
                 createNewObjects·p0.00:   204734.464 us/op
                 createNewObjects·p0.50:   217317.376 us/op
                 createNewObjects·p0.90:   221249.536 us/op
                 createNewObjects·p0.95:   225181.696 us/op
                 createNewObjects·p0.99:   229376.000 us/op
                 createNewObjects·p0.999:  229376.000 us/op
                 createNewObjects·p0.9999: 229376.000 us/op
                 createNewObjects·p1.00:   229376.000 us/op

Iteration  11: 216040.121 ±(99.9%) 2505.170 us/op
                 createNewObjects·p0.00:   202375.168 us/op
                 createNewObjects·p0.50:   216530.944 us/op
                 createNewObjects·p0.90:   221039.821 us/op
                 createNewObjects·p0.95:   222245.683 us/op
                 createNewObjects·p0.99:   228327.424 us/op
                 createNewObjects·p0.999:  228327.424 us/op
                 createNewObjects·p0.9999: 228327.424 us/op
                 createNewObjects·p1.00:   228327.424 us/op

Iteration  12: 217306.221 ±(99.9%) 2605.725 us/op
                 createNewObjects·p0.00:   206569.472 us/op
                 createNewObjects·p0.50:   217579.520 us/op
                 createNewObjects·p0.90:   222455.398 us/op
                 createNewObjects·p0.95:   225024.410 us/op
                 createNewObjects·p0.99:   230424.576 us/op
                 createNewObjects·p0.999:  230424.576 us/op
                 createNewObjects·p0.9999: 230424.576 us/op
                 createNewObjects·p1.00:   230424.576 us/op

Iteration  13: 217744.785 ±(99.9%) 2427.568 us/op
                 createNewObjects·p0.00:   202375.168 us/op
                 createNewObjects·p0.50:   218365.952 us/op
                 createNewObjects·p0.90:   222901.043 us/op
                 createNewObjects·p0.95:   224618.086 us/op
                 createNewObjects·p0.99:   226230.272 us/op
                 createNewObjects·p0.999:  226230.272 us/op
                 createNewObjects·p0.9999: 226230.272 us/op
                 createNewObjects·p1.00:   226230.272 us/op

Iteration  14: 216179.559 ±(99.9%) 2287.486 us/op
                 createNewObjects·p0.00:   207618.048 us/op
                 createNewObjects·p0.50:   217055.232 us/op
                 createNewObjects·p0.90:   220882.534 us/op
                 createNewObjects·p0.95:   222612.685 us/op
                 createNewObjects·p0.99:   225968.128 us/op
                 createNewObjects·p0.999:  225968.128 us/op
                 createNewObjects·p0.9999: 225968.128 us/op
                 createNewObjects·p1.00:   225968.128 us/op

Iteration  15: 217847.363 ±(99.9%) 2227.510 us/op
                 createNewObjects·p0.00:   207880.192 us/op
                 createNewObjects·p0.50:   218234.880 us/op
                 createNewObjects·p0.90:   222455.398 us/op
                 createNewObjects·p0.95:   223595.725 us/op
                 createNewObjects·p0.99:   228065.280 us/op
                 createNewObjects·p0.999:  228065.280 us/op
                 createNewObjects·p0.9999: 228065.280 us/op
                 createNewObjects·p1.00:   228065.280 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 701
  mean = 217078.791 ±(99.9%) 602.453 us/op

  Histogram, us/op:
    [200000.000, 202500.000) = 3 
    [202500.000, 205000.000) = 5 
    [205000.000, 207500.000) = 13 
    [207500.000, 210000.000) = 38 
    [210000.000, 212500.000) = 61 
    [212500.000, 215000.000) = 100 
    [215000.000, 217500.000) = 144 
    [217500.000, 220000.000) = 124 
    [220000.000, 222500.000) = 141 
    [222500.000, 225000.000) = 43 
    [225000.000, 227500.000) = 17 
    [227500.000, 230000.000) = 9 
    [230000.000, 232500.000) = 3 
    [232500.000, 235000.000) = 0 
    [235000.000, 237500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 201588.736 us/op
     p(50.0000) = 217317.376 us/op
     p(90.0000) = 222560.256 us/op
     p(95.0000) = 224395.264 us/op
     p(99.0000) = 228841.226 us/op
     p(99.9000) = 230424.576 us/op
     p(99.9900) = 230424.576 us/op
     p(99.9990) = 230424.576 us/op
     p(99.9999) = 230424.576 us/op
    p(100.0000) = 230424.576 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 67.39% complete, ETA 02:44:55
# Fork: 1 of 1
# Warmup Iteration   1: 219329.046 ±(99.9%) 2067.268 us/op
# Warmup Iteration   2: 220081.286 ±(99.9%) 809.641 us/op
# Warmup Iteration   3: 220708.152 ±(99.9%) 732.658 us/op
# Warmup Iteration   4: 220434.610 ±(99.9%) 544.418 us/op
# Warmup Iteration   5: 219106.794 ±(99.9%) 716.133 us/op
Iteration   1: 219796.346 ±(99.9%) 772.191 us/op
                 createNewObjects·p0.00:   217055.232 us/op
                 createNewObjects·p0.50:   220200.960 us/op
                 createNewObjects·p0.90:   221590.323 us/op
                 createNewObjects·p0.95:   222035.968 us/op
                 createNewObjects·p0.99:   222298.112 us/op
                 createNewObjects·p0.999:  222298.112 us/op
                 createNewObjects·p0.9999: 222298.112 us/op
                 createNewObjects·p1.00:   222298.112 us/op

Iteration   2: 220064.189 ±(99.9%) 793.750 us/op
                 createNewObjects·p0.00:   216793.088 us/op
                 createNewObjects·p0.50:   220463.104 us/op
                 createNewObjects·p0.90:   221852.467 us/op
                 createNewObjects·p0.95:   222035.968 us/op
                 createNewObjects·p0.99:   222035.968 us/op
                 createNewObjects·p0.999:  222035.968 us/op
                 createNewObjects·p0.9999: 222035.968 us/op
                 createNewObjects·p1.00:   222035.968 us/op

Iteration   3: 219226.468 ±(99.9%) 935.943 us/op
                 createNewObjects·p0.00:   216793.088 us/op
                 createNewObjects·p0.50:   218628.096 us/op
                 createNewObjects·p0.90:   222298.112 us/op
                 createNewObjects·p0.95:   222560.256 us/op
                 createNewObjects·p0.99:   223608.832 us/op
                 createNewObjects·p0.999:  223608.832 us/op
                 createNewObjects·p0.9999: 223608.832 us/op
                 createNewObjects·p1.00:   223608.832 us/op

Iteration   4: 219101.095 ±(99.9%) 742.817 us/op
                 createNewObjects·p0.00:   216793.088 us/op
                 createNewObjects·p0.50:   218759.168 us/op
                 createNewObjects·p0.90:   221328.179 us/op
                 createNewObjects·p0.95:   221944.218 us/op
                 createNewObjects·p0.99:   222298.112 us/op
                 createNewObjects·p0.999:  222298.112 us/op
                 createNewObjects·p0.9999: 222298.112 us/op
                 createNewObjects·p1.00:   222298.112 us/op

Iteration   5: 220485.899 ±(99.9%) 552.368 us/op
                 createNewObjects·p0.00:   218365.952 us/op
                 createNewObjects·p0.50:   220725.248 us/op
                 createNewObjects·p0.90:   221773.824 us/op
                 createNewObjects·p0.95:   222206.362 us/op
                 createNewObjects·p0.99:   222560.256 us/op
                 createNewObjects·p0.999:  222560.256 us/op
                 createNewObjects·p0.9999: 222560.256 us/op
                 createNewObjects·p1.00:   222560.256 us/op

Iteration   6: 219460.118 ±(99.9%) 626.673 us/op
                 createNewObjects·p0.00:   217841.664 us/op
                 createNewObjects·p0.50:   219152.384 us/op
                 createNewObjects·p0.90:   221249.536 us/op
                 createNewObjects·p0.95:   222022.861 us/op
                 createNewObjects·p0.99:   222298.112 us/op
                 createNewObjects·p0.999:  222298.112 us/op
                 createNewObjects·p0.9999: 222298.112 us/op
                 createNewObjects·p1.00:   222298.112 us/op

Iteration   7: 220218.056 ±(99.9%) 667.426 us/op
                 createNewObjects·p0.00:   217579.520 us/op
                 createNewObjects·p0.50:   220463.104 us/op
                 createNewObjects·p0.90:   221852.467 us/op
                 createNewObjects·p0.95:   222035.968 us/op
                 createNewObjects·p0.99:   222298.112 us/op
                 createNewObjects·p0.999:  222298.112 us/op
                 createNewObjects·p0.9999: 222298.112 us/op
                 createNewObjects·p1.00:   222298.112 us/op

Iteration   8: 219790.648 ±(99.9%) 868.452 us/op
                 createNewObjects·p0.00:   216793.088 us/op
                 createNewObjects·p0.50:   219414.528 us/op
                 createNewObjects·p0.90:   222114.611 us/op
                 createNewObjects·p0.95:   222468.506 us/op
                 createNewObjects·p0.99:   222822.400 us/op
                 createNewObjects·p0.999:  222822.400 us/op
                 createNewObjects·p0.9999: 222822.400 us/op
                 createNewObjects·p1.00:   222822.400 us/op

Iteration   9: 220269.345 ±(99.9%) 635.882 us/op
                 createNewObjects·p0.00:   217055.232 us/op
                 createNewObjects·p0.50:   220463.104 us/op
                 createNewObjects·p0.90:   221773.824 us/op
                 createNewObjects·p0.95:   222638.899 us/op
                 createNewObjects·p0.99:   222822.400 us/op
                 createNewObjects·p0.999:  222822.400 us/op
                 createNewObjects·p0.9999: 222822.400 us/op
                 createNewObjects·p1.00:   222822.400 us/op

Iteration  10: 220280.743 ±(99.9%) 545.657 us/op
                 createNewObjects·p0.00:   218365.952 us/op
                 createNewObjects·p0.50:   220463.104 us/op
                 createNewObjects·p0.90:   221590.323 us/op
                 createNewObjects·p0.95:   221773.824 us/op
                 createNewObjects·p0.99:   222035.968 us/op
                 createNewObjects·p0.999:  222035.968 us/op
                 createNewObjects·p0.9999: 222035.968 us/op
                 createNewObjects·p1.00:   222035.968 us/op

Iteration  11: 219460.118 ±(99.9%) 734.286 us/op
                 createNewObjects·p0.00:   217055.232 us/op
                 createNewObjects·p0.50:   219283.456 us/op
                 createNewObjects·p0.90:   221511.680 us/op
                 createNewObjects·p0.95:   221852.467 us/op
                 createNewObjects·p0.99:   222298.112 us/op
                 createNewObjects·p0.999:  222298.112 us/op
                 createNewObjects·p0.9999: 222298.112 us/op
                 createNewObjects·p1.00:   222298.112 us/op

Iteration  12: 219477.215 ±(99.9%) 542.871 us/op
                 createNewObjects·p0.00:   217579.520 us/op
                 createNewObjects·p0.50:   219283.456 us/op
                 createNewObjects·p0.90:   220987.392 us/op
                 createNewObjects·p0.95:   221419.930 us/op
                 createNewObjects·p0.99:   221773.824 us/op
                 createNewObjects·p0.999:  221773.824 us/op
                 createNewObjects·p0.9999: 221773.824 us/op
                 createNewObjects·p1.00:   221773.824 us/op

Iteration  13: 219203.673 ±(99.9%) 704.734 us/op
                 createNewObjects·p0.00:   216793.088 us/op
                 createNewObjects·p0.50:   218890.240 us/op
                 createNewObjects·p0.90:   221328.179 us/op
                 createNewObjects·p0.95:   221773.824 us/op
                 createNewObjects·p0.99:   222035.968 us/op
                 createNewObjects·p0.999:  222035.968 us/op
                 createNewObjects·p0.9999: 222035.968 us/op
                 createNewObjects·p1.00:   222035.968 us/op

Iteration  14: 219967.310 ±(99.9%) 807.872 us/op
                 createNewObjects·p0.00:   216793.088 us/op
                 createNewObjects·p0.50:   220200.960 us/op
                 createNewObjects·p0.90:   221773.824 us/op
                 createNewObjects·p0.95:   221944.218 us/op
                 createNewObjects·p0.99:   222298.112 us/op
                 createNewObjects·p0.999:  222298.112 us/op
                 createNewObjects·p0.9999: 222298.112 us/op
                 createNewObjects·p1.00:   222298.112 us/op

Iteration  15: 220275.044 ±(99.9%) 863.230 us/op
                 createNewObjects·p0.00:   217055.232 us/op
                 createNewObjects·p0.50:   220463.104 us/op
                 createNewObjects·p0.90:   222376.755 us/op
                 createNewObjects·p0.95:   222901.043 us/op
                 createNewObjects·p0.99:   223084.544 us/op
                 createNewObjects·p0.999:  223084.544 us/op
                 createNewObjects·p0.9999: 223084.544 us/op
                 createNewObjects·p1.00:   223084.544 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 690
  mean = 219805.085 ±(99.9%) 183.638 us/op

  Histogram, us/op:
    [216000.000, 216500.000) = 0 
    [216500.000, 217000.000) = 9 
    [217000.000, 217500.000) = 29 
    [217500.000, 218000.000) = 44 
    [218000.000, 218500.000) = 65 
    [218500.000, 219000.000) = 94 
    [219000.000, 219500.000) = 73 
    [219500.000, 220000.000) = 52 
    [220000.000, 220500.000) = 83 
    [220500.000, 221000.000) = 88 
    [221000.000, 221500.000) = 44 
    [221500.000, 222000.000) = 62 
    [222000.000, 222500.000) = 35 
    [222500.000, 223000.000) = 9 
    [223000.000, 223500.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 216793.088 us/op
     p(50.0000) = 219676.672 us/op
     p(90.0000) = 221773.824 us/op
     p(95.0000) = 222035.968 us/op
     p(99.0000) = 222583.849 us/op
     p(99.9000) = 223608.832 us/op
     p(99.9900) = 223608.832 us/op
     p(99.9990) = 223608.832 us/op
     p(99.9999) = 223608.832 us/op
    p(100.0000) = 223608.832 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 68.11% complete, ETA 02:41:14
# Fork: 1 of 1
# Warmup Iteration   1: 198751.413 ±(99.9%) 5934.822 us/op
# Warmup Iteration   2: 200943.862 ±(99.9%) 681.767 us/op
# Warmup Iteration   3: 200760.361 ±(99.9%) 792.348 us/op
# Warmup Iteration   4: 201127.363 ±(99.9%) 884.264 us/op
# Warmup Iteration   5: 201337.078 ±(99.9%) 581.513 us/op
Iteration   1: 201069.691 ±(99.9%) 796.298 us/op
                 createNewObjects·p0.00:   198180.864 us/op
                 createNewObjects·p0.50:   201457.664 us/op
                 createNewObjects·p0.90:   202637.312 us/op
                 createNewObjects·p0.95:   203921.818 us/op
                 createNewObjects·p0.99:   204472.320 us/op
                 createNewObjects·p0.999:  204472.320 us/op
                 createNewObjects·p0.9999: 204472.320 us/op
                 createNewObjects·p1.00:   204472.320 us/op

Iteration   2: 201331.835 ±(99.9%) 656.747 us/op
                 createNewObjects·p0.00:   198705.152 us/op
                 createNewObjects·p0.50:   201064.448 us/op
                 createNewObjects·p0.90:   203161.600 us/op
                 createNewObjects·p0.95:   203541.709 us/op
                 createNewObjects·p0.99:   203685.888 us/op
                 createNewObjects·p0.999:  203685.888 us/op
                 createNewObjects·p0.9999: 203685.888 us/op
                 createNewObjects·p1.00:   203685.888 us/op

Iteration   3: 201221.734 ±(99.9%) 523.698 us/op
                 createNewObjects·p0.00:   198705.152 us/op
                 createNewObjects·p0.50:   201064.448 us/op
                 createNewObjects·p0.90:   202873.242 us/op
                 createNewObjects·p0.95:   203161.600 us/op
                 createNewObjects·p0.99:   203685.888 us/op
                 createNewObjects·p0.999:  203685.888 us/op
                 createNewObjects·p0.9999: 203685.888 us/op
                 createNewObjects·p1.00:   203685.888 us/op

Iteration   4: 201845.637 ±(99.9%) 602.146 us/op
                 createNewObjects·p0.00:   198705.152 us/op
                 createNewObjects·p0.50:   202113.024 us/op
                 createNewObjects·p0.90:   203161.600 us/op
                 createNewObjects·p0.95:   203423.744 us/op
                 createNewObjects·p0.99:   203685.888 us/op
                 createNewObjects·p0.999:  203685.888 us/op
                 createNewObjects·p0.9999: 203685.888 us/op
                 createNewObjects·p1.00:   203685.888 us/op

Iteration   5: 201515.336 ±(99.9%) 862.814 us/op
                 createNewObjects·p0.00:   198180.864 us/op
                 createNewObjects·p0.50:   202113.024 us/op
                 createNewObjects·p0.90:   203161.600 us/op
                 createNewObjects·p0.95:   203659.674 us/op
                 createNewObjects·p0.99:   203948.032 us/op
                 createNewObjects·p0.999:  203948.032 us/op
                 createNewObjects·p0.9999: 203948.032 us/op
                 createNewObjects·p1.00:   203948.032 us/op

Iteration   6: 200875.704 ±(99.9%) 777.761 us/op
                 createNewObjects·p0.00:   198443.008 us/op
                 createNewObjects·p0.50:   200671.232 us/op
                 createNewObjects·p0.90:   203397.530 us/op
                 createNewObjects·p0.95:   203541.709 us/op
                 createNewObjects·p0.99:   203685.888 us/op
                 createNewObjects·p0.999:  203685.888 us/op
                 createNewObjects·p0.9999: 203685.888 us/op
                 createNewObjects·p1.00:   203685.888 us/op

Iteration   7: 200545.403 ±(99.9%) 647.259 us/op
                 createNewObjects·p0.00:   198443.008 us/op
                 createNewObjects·p0.50:   200015.872 us/op
                 createNewObjects·p0.90:   203082.957 us/op
                 createNewObjects·p0.95:   203423.744 us/op
                 createNewObjects·p0.99:   203423.744 us/op
                 createNewObjects·p0.999:  203423.744 us/op
                 createNewObjects·p0.9999: 203423.744 us/op
                 createNewObjects·p1.00:   203423.744 us/op

Iteration   8: 200624.046 ±(99.9%) 768.604 us/op
                 createNewObjects·p0.00:   198180.864 us/op
                 createNewObjects·p0.50:   200146.944 us/op
                 createNewObjects·p0.90:   202637.312 us/op
                 createNewObjects·p0.95:   203135.386 us/op
                 createNewObjects·p0.99:   203948.032 us/op
                 createNewObjects·p0.999:  203948.032 us/op
                 createNewObjects·p0.9999: 203948.032 us/op
                 createNewObjects·p1.00:   203948.032 us/op

Iteration   9: 200970.076 ±(99.9%) 752.937 us/op
                 createNewObjects·p0.00:   198443.008 us/op
                 createNewObjects·p0.50:   200278.016 us/op
                 createNewObjects·p0.90:   203397.530 us/op
                 createNewObjects·p0.95:   203685.888 us/op
                 createNewObjects·p0.99:   203948.032 us/op
                 createNewObjects·p0.999:  203948.032 us/op
                 createNewObjects·p0.9999: 203948.032 us/op
                 createNewObjects·p1.00:   203948.032 us/op

Iteration  10: 201787.965 ±(99.9%) 765.970 us/op
                 createNewObjects·p0.00:   198705.152 us/op
                 createNewObjects·p0.50:   202113.024 us/op
                 createNewObjects·p0.90:   203685.888 us/op
                 createNewObjects·p0.95:   203948.032 us/op
                 createNewObjects·p0.99:   203948.032 us/op
                 createNewObjects·p0.999:  203948.032 us/op
                 createNewObjects·p0.9999: 203948.032 us/op
                 createNewObjects·p1.00:   203948.032 us/op

Iteration  11: 201641.165 ±(99.9%) 698.101 us/op
                 createNewObjects·p0.00:   199491.584 us/op
                 createNewObjects·p0.50:   201981.952 us/op
                 createNewObjects·p0.90:   203423.744 us/op
                 createNewObjects·p0.95:   203685.888 us/op
                 createNewObjects·p0.99:   203948.032 us/op
                 createNewObjects·p0.999:  203948.032 us/op
                 createNewObjects·p0.9999: 203948.032 us/op
                 createNewObjects·p1.00:   203948.032 us/op

Iteration  12: 201106.391 ±(99.9%) 746.335 us/op
                 createNewObjects·p0.00:   198705.152 us/op
                 createNewObjects·p0.50:   200802.304 us/op
                 createNewObjects·p0.90:   202899.456 us/op
                 createNewObjects·p0.95:   203397.530 us/op
                 createNewObjects·p0.99:   206045.184 us/op
                 createNewObjects·p0.999:  206045.184 us/op
                 createNewObjects·p0.9999: 206045.184 us/op
                 createNewObjects·p1.00:   206045.184 us/op

Iteration  13: 201216.492 ±(99.9%) 651.810 us/op
                 createNewObjects·p0.00:   198705.152 us/op
                 createNewObjects·p0.50:   200802.304 us/op
                 createNewObjects·p0.90:   202873.242 us/op
                 createNewObjects·p0.95:   204065.997 us/op
                 createNewObjects·p0.99:   204210.176 us/op
                 createNewObjects·p0.999:  204210.176 us/op
                 createNewObjects·p0.9999: 204210.176 us/op
                 createNewObjects·p1.00:   204210.176 us/op

Iteration  14: 201211.249 ±(99.9%) 794.427 us/op
                 createNewObjects·p0.00:   198443.008 us/op
                 createNewObjects·p0.50:   200540.160 us/op
                 createNewObjects·p0.90:   203423.744 us/op
                 createNewObjects·p0.95:   204183.962 us/op
                 createNewObjects·p0.99:   204472.320 us/op
                 createNewObjects·p0.999:  204472.320 us/op
                 createNewObjects·p0.9999: 204472.320 us/op
                 createNewObjects·p1.00:   204472.320 us/op

Iteration  15: 201226.977 ±(99.9%) 757.093 us/op
                 createNewObjects·p0.00:   198705.152 us/op
                 createNewObjects·p0.50:   200802.304 us/op
                 createNewObjects·p0.90:   203161.600 us/op
                 createNewObjects·p0.95:   203659.674 us/op
                 createNewObjects·p0.99:   205520.896 us/op
                 createNewObjects·p0.999:  205520.896 us/op
                 createNewObjects·p0.9999: 205520.896 us/op
                 createNewObjects·p1.00:   205520.896 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 750
  mean = 201212.647 ±(99.9%) 180.562 us/op

  Histogram, us/op:
    [198000.000, 198500.000) = 13 
    [198500.000, 199000.000) = 39 
    [199000.000, 199500.000) = 71 
    [199500.000, 200000.000) = 55 
    [200000.000, 200500.000) = 102 
    [200500.000, 201000.000) = 71 
    [201000.000, 201500.000) = 54 
    [201500.000, 202000.000) = 64 
    [202000.000, 202500.000) = 116 
    [202500.000, 203000.000) = 70 
    [203000.000, 203500.000) = 56 
    [203500.000, 204000.000) = 31 
    [204000.000, 204500.000) = 6 
    [204500.000, 205000.000) = 0 
    [205000.000, 205500.000) = 0 
    [205500.000, 206000.000) = 1 
    [206000.000, 206500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 198180.864 us/op
     p(50.0000) = 201064.448 us/op
     p(90.0000) = 203161.600 us/op
     p(95.0000) = 203685.888 us/op
     p(99.0000) = 204210.176 us/op
     p(99.9000) = 206045.184 us/op
     p(99.9900) = 206045.184 us/op
     p(99.9990) = 206045.184 us/op
     p(99.9999) = 206045.184 us/op
    p(100.0000) = 206045.184 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 68.84% complete, ETA 02:37:32
# Fork: 1 of 1
# Warmup Iteration   1: 199522.424 ±(99.9%) 1093.337 us/op
# Warmup Iteration   2: 198962.156 ±(99.9%) 758.555 us/op
# Warmup Iteration   3: 199306.541 ±(99.9%) 885.493 us/op
# Warmup Iteration   4: 199049.537 ±(99.9%) 890.758 us/op
# Warmup Iteration   5: 199121.498 ±(99.9%) 647.870 us/op
Iteration   1: 199471.024 ±(99.9%) 887.925 us/op
                 createNewObjects·p0.00:   196870.144 us/op
                 createNewObjects·p0.50:   199753.728 us/op
                 createNewObjects·p0.90:   202322.739 us/op
                 createNewObjects·p0.95:   202480.026 us/op
                 createNewObjects·p0.99:   202899.456 us/op
                 createNewObjects·p0.999:  202899.456 us/op
                 createNewObjects·p0.9999: 202899.456 us/op
                 createNewObjects·p1.00:   202899.456 us/op

Iteration   2: 199630.366 ±(99.9%) 617.774 us/op
                 createNewObjects·p0.00:   197132.288 us/op
                 createNewObjects·p0.50:   200015.872 us/op
                 createNewObjects·p0.90:   201274.163 us/op
                 createNewObjects·p0.95:   201588.736 us/op
                 createNewObjects·p0.99:   201850.880 us/op
                 createNewObjects·p0.999:  201850.880 us/op
                 createNewObjects·p0.9999: 201850.880 us/op
                 createNewObjects·p1.00:   201850.880 us/op

Iteration   3: 198628.051 ±(99.9%) 679.685 us/op
                 createNewObjects·p0.00:   196870.144 us/op
                 createNewObjects·p0.50:   197918.720 us/op
                 createNewObjects·p0.90:   201064.448 us/op
                 createNewObjects·p0.95:   201693.594 us/op
                 createNewObjects·p0.99:   202113.024 us/op
                 createNewObjects·p0.999:  202113.024 us/op
                 createNewObjects·p0.9999: 202113.024 us/op
                 createNewObjects·p1.00:   202113.024 us/op

Iteration   4: 199214.020 ±(99.9%) 684.090 us/op
                 createNewObjects·p0.00:   196608.000 us/op
                 createNewObjects·p0.50:   198967.296 us/op
                 createNewObjects·p0.90:   201326.592 us/op
                 createNewObjects·p0.95:   201693.594 us/op
                 createNewObjects·p0.99:   202113.024 us/op
                 createNewObjects·p0.999:  202113.024 us/op
                 createNewObjects·p0.9999: 202113.024 us/op
                 createNewObjects·p1.00:   202113.024 us/op

Iteration   5: 199548.125 ±(99.9%) 700.692 us/op
                 createNewObjects·p0.00:   196870.144 us/op
                 createNewObjects·p0.50:   199229.440 us/op
                 createNewObjects·p0.90:   201536.307 us/op
                 createNewObjects·p0.95:   201693.594 us/op
                 createNewObjects·p0.99:   202637.312 us/op
                 createNewObjects·p0.999:  202637.312 us/op
                 createNewObjects·p0.9999: 202637.312 us/op
                 createNewObjects·p1.00:   202637.312 us/op

Iteration   6: 199136.919 ±(99.9%) 735.779 us/op
                 createNewObjects·p0.00:   196083.712 us/op
                 createNewObjects·p0.50:   199491.584 us/op
                 createNewObjects·p0.90:   201326.592 us/op
                 createNewObjects·p0.95:   201798.451 us/op
                 createNewObjects·p0.99:   202375.168 us/op
                 createNewObjects·p0.999:  202375.168 us/op
                 createNewObjects·p0.9999: 202375.168 us/op
                 createNewObjects·p1.00:   202375.168 us/op

Iteration   7: 200246.559 ±(99.9%) 608.477 us/op
                 createNewObjects·p0.00:   196870.144 us/op
                 createNewObjects·p0.50:   200409.088 us/op
                 createNewObjects·p0.90:   201536.307 us/op
                 createNewObjects·p0.95:   202611.098 us/op
                 createNewObjects·p0.99:   202899.456 us/op
                 createNewObjects·p0.999:  202899.456 us/op
                 createNewObjects·p0.9999: 202899.456 us/op
                 createNewObjects·p1.00:   202899.456 us/op

Iteration   8: 199620.086 ±(99.9%) 712.837 us/op
                 createNewObjects·p0.00:   196345.856 us/op
                 createNewObjects·p0.50:   200015.872 us/op
                 createNewObjects·p0.90:   201012.019 us/op
                 createNewObjects·p0.95:   201798.451 us/op
                 createNewObjects·p0.99:   202375.168 us/op
                 createNewObjects·p0.999:  202375.168 us/op
                 createNewObjects·p0.9999: 202375.168 us/op
                 createNewObjects·p1.00:   202375.168 us/op

Iteration   9: 199676.627 ±(99.9%) 673.845 us/op
                 createNewObjects·p0.00:   196345.856 us/op
                 createNewObjects·p0.50:   200278.016 us/op
                 createNewObjects·p0.90:   201274.163 us/op
                 createNewObjects·p0.95:   201588.736 us/op
                 createNewObjects·p0.99:   201850.880 us/op
                 createNewObjects·p0.999:  201850.880 us/op
                 createNewObjects·p0.9999: 201850.880 us/op
                 createNewObjects·p1.00:   201850.880 us/op

Iteration  10: 199399.063 ±(99.9%) 859.647 us/op
                 createNewObjects·p0.00:   196345.856 us/op
                 createNewObjects·p0.50:   200015.872 us/op
                 createNewObjects·p0.90:   201588.736 us/op
                 createNewObjects·p0.95:   201955.738 us/op
                 createNewObjects·p0.99:   202113.024 us/op
                 createNewObjects·p0.999:  202113.024 us/op
                 createNewObjects·p0.9999: 202113.024 us/op
                 createNewObjects·p1.00:   202113.024 us/op

Iteration  11: 199116.358 ±(99.9%) 666.948 us/op
                 createNewObjects·p0.00:   196870.144 us/op
                 createNewObjects·p0.50:   198967.296 us/op
                 createNewObjects·p0.90:   200802.304 us/op
                 createNewObjects·p0.95:   201274.163 us/op
                 createNewObjects·p0.99:   201850.880 us/op
                 createNewObjects·p0.999:  201850.880 us/op
                 createNewObjects·p0.9999: 201850.880 us/op
                 createNewObjects·p1.00:   201850.880 us/op

Iteration  12: 199393.923 ±(99.9%) 829.278 us/op
                 createNewObjects·p0.00:   196870.144 us/op
                 createNewObjects·p0.50:   198967.296 us/op
                 createNewObjects·p0.90:   202060.595 us/op
                 createNewObjects·p0.95:   202113.024 us/op
                 createNewObjects·p0.99:   202375.168 us/op
                 createNewObjects·p0.999:  202375.168 us/op
                 createNewObjects·p0.9999: 202375.168 us/op
                 createNewObjects·p1.00:   202375.168 us/op

Iteration  13: 199157.479 ±(99.9%) 736.787 us/op
                 createNewObjects·p0.00:   196870.144 us/op
                 createNewObjects·p0.50:   198443.008 us/op
                 createNewObjects·p0.90:   201274.163 us/op
                 createNewObjects·p0.95:   201693.594 us/op
                 createNewObjects·p0.99:   202375.168 us/op
                 createNewObjects·p0.999:  202375.168 us/op
                 createNewObjects·p0.9999: 202375.168 us/op
                 createNewObjects·p1.00:   202375.168 us/op

Iteration  14: 199183.179 ±(99.9%) 681.820 us/op
                 createNewObjects·p0.00:   197394.432 us/op
                 createNewObjects·p0.50:   198705.152 us/op
                 createNewObjects·p0.90:   201274.163 us/op
                 createNewObjects·p0.95:   202322.739 us/op
                 createNewObjects·p0.99:   202637.312 us/op
                 createNewObjects·p0.999:  202637.312 us/op
                 createNewObjects·p0.9999: 202637.312 us/op
                 createNewObjects·p1.00:   202637.312 us/op

Iteration  15: 200382.874 ±(99.9%) 534.096 us/op
                 createNewObjects·p0.00:   197132.288 us/op
                 createNewObjects·p0.50:   200540.160 us/op
                 createNewObjects·p0.90:   201588.736 us/op
                 createNewObjects·p0.95:   201850.880 us/op
                 createNewObjects·p0.99:   201850.880 us/op
                 createNewObjects·p0.999:  201850.880 us/op
                 createNewObjects·p0.9999: 201850.880 us/op
                 createNewObjects·p1.00:   201850.880 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 763
  mean = 199451.386 ±(99.9%) 179.871 us/op

  Histogram, us/op:
    [196000.000, 196500.000) = 6 
    [196500.000, 197000.000) = 24 
    [197000.000, 197500.000) = 48 
    [197500.000, 198000.000) = 106 
    [198000.000, 198500.000) = 91 
    [198500.000, 199000.000) = 49 
    [199000.000, 199500.000) = 50 
    [199500.000, 200000.000) = 34 
    [200000.000, 200500.000) = 117 
    [200500.000, 201000.000) = 108 
    [201000.000, 201500.000) = 63 
    [201500.000, 202000.000) = 39 
    [202000.000, 202500.000) = 21 

  Percentiles, us/op:
      p(0.0000) = 196083.712 us/op
     p(50.0000) = 199753.728 us/op
     p(90.0000) = 201326.592 us/op
     p(95.0000) = 201850.880 us/op
     p(99.0000) = 202469.540 us/op
     p(99.9000) = 202899.456 us/op
     p(99.9900) = 202899.456 us/op
     p(99.9990) = 202899.456 us/op
     p(99.9999) = 202899.456 us/op
    p(100.0000) = 202899.456 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 69.56% complete, ETA 02:33:51
# Fork: 1 of 1
# Warmup Iteration   1: 198448.148 ±(99.9%) 850.273 us/op
# Warmup Iteration   2: 199193.459 ±(99.9%) 604.661 us/op
# Warmup Iteration   3: 198201.424 ±(99.9%) 674.602 us/op
# Warmup Iteration   4: 198669.171 ±(99.9%) 814.069 us/op
# Warmup Iteration   5: 198381.327 ±(99.9%) 825.547 us/op
Iteration   1: 198355.627 ±(99.9%) 785.927 us/op
                 createNewObjects·p0.00:   195821.568 us/op
                 createNewObjects·p0.50:   198443.008 us/op
                 createNewObjects·p0.90:   200959.590 us/op
                 createNewObjects·p0.95:   201274.163 us/op
                 createNewObjects·p0.99:   202113.024 us/op
                 createNewObjects·p0.999:  202113.024 us/op
                 createNewObjects·p0.9999: 202113.024 us/op
                 createNewObjects·p1.00:   202113.024 us/op

Iteration   2: 198201.424 ±(99.9%) 707.955 us/op
                 createNewObjects·p0.00:   195035.136 us/op
                 createNewObjects·p0.50:   198705.152 us/op
                 createNewObjects·p0.90:   200225.587 us/op
                 createNewObjects·p0.95:   200382.874 us/op
                 createNewObjects·p0.99:   200540.160 us/op
                 createNewObjects·p0.999:  200540.160 us/op
                 createNewObjects·p0.9999: 200540.160 us/op
                 createNewObjects·p1.00:   200540.160 us/op

Iteration   3: 198453.288 ±(99.9%) 912.483 us/op
                 createNewObjects·p0.00:   195035.136 us/op
                 createNewObjects·p0.50:   199229.440 us/op
                 createNewObjects·p0.90:   200540.160 us/op
                 createNewObjects·p0.95:   200802.304 us/op
                 createNewObjects·p0.99:   200802.304 us/op
                 createNewObjects·p0.999:  200802.304 us/op
                 createNewObjects·p0.9999: 200802.304 us/op
                 createNewObjects·p1.00:   200802.304 us/op

Iteration   4: 197954.701 ±(99.9%) 655.875 us/op
                 createNewObjects·p0.00:   196083.712 us/op
                 createNewObjects·p0.50:   197394.432 us/op
                 createNewObjects·p0.90:   200015.872 us/op
                 createNewObjects·p0.95:   200540.160 us/op
                 createNewObjects·p0.99:   200540.160 us/op
                 createNewObjects·p0.999:  200540.160 us/op
                 createNewObjects·p0.9999: 200540.160 us/op
                 createNewObjects·p1.00:   200540.160 us/op

Iteration   5: 199890.043 ±(99.9%) 737.944 us/op
                 createNewObjects·p0.00:   196083.712 us/op
                 createNewObjects·p0.50:   200278.016 us/op
                 createNewObjects·p0.90:   201562.522 us/op
                 createNewObjects·p0.95:   201588.736 us/op
                 createNewObjects·p0.99:   201850.880 us/op
                 createNewObjects·p0.999:  201850.880 us/op
                 createNewObjects·p0.9999: 201850.880 us/op
                 createNewObjects·p1.00:   201850.880 us/op

Iteration   6: 198802.813 ±(99.9%) 708.939 us/op
                 createNewObjects·p0.00:   195821.568 us/op
                 createNewObjects·p0.50:   198705.152 us/op
                 createNewObjects·p0.90:   200802.304 us/op
                 createNewObjects·p0.95:   201169.306 us/op
                 createNewObjects·p0.99:   201326.592 us/op
                 createNewObjects·p0.999:  201326.592 us/op
                 createNewObjects·p0.9999: 201326.592 us/op
                 createNewObjects·p1.00:   201326.592 us/op

Iteration   7: 199100.938 ±(99.9%) 710.522 us/op
                 createNewObjects·p0.00:   196083.712 us/op
                 createNewObjects·p0.50:   199229.440 us/op
                 createNewObjects·p0.90:   200487.731 us/op
                 createNewObjects·p0.95:   201798.451 us/op
                 createNewObjects·p0.99:   202375.168 us/op
                 createNewObjects·p0.999:  202375.168 us/op
                 createNewObjects·p0.9999: 202375.168 us/op
                 createNewObjects·p1.00:   202375.168 us/op

Iteration   8: 199301.401 ±(99.9%) 754.020 us/op
                 createNewObjects·p0.00:   195821.568 us/op
                 createNewObjects·p0.50:   199491.584 us/op
                 createNewObjects·p0.90:   201064.448 us/op
                 createNewObjects·p0.95:   201326.592 us/op
                 createNewObjects·p0.99:   201588.736 us/op
                 createNewObjects·p0.999:  201588.736 us/op
                 createNewObjects·p0.9999: 201588.736 us/op
                 createNewObjects·p1.00:   201588.736 us/op

Iteration   9: 197790.218 ±(99.9%) 617.251 us/op
                 createNewObjects·p0.00:   195821.568 us/op
                 createNewObjects·p0.50:   197656.576 us/op
                 createNewObjects·p0.90:   200015.872 us/op
                 createNewObjects·p0.95:   200487.731 us/op
                 createNewObjects·p0.99:   200802.304 us/op
                 createNewObjects·p0.999:  200802.304 us/op
                 createNewObjects·p0.9999: 200802.304 us/op
                 createNewObjects·p1.00:   200802.304 us/op

Iteration  10: 199553.265 ±(99.9%) 593.982 us/op
                 createNewObjects·p0.00:   197394.432 us/op
                 createNewObjects·p0.50:   199753.728 us/op
                 createNewObjects·p0.90:   201012.019 us/op
                 createNewObjects·p0.95:   201588.736 us/op
                 createNewObjects·p0.99:   201588.736 us/op
                 createNewObjects·p0.999:  201588.736 us/op
                 createNewObjects·p0.9999: 201588.736 us/op
                 createNewObjects·p1.00:   201588.736 us/op

Iteration  11: 198576.650 ±(99.9%) 636.171 us/op
                 createNewObjects·p0.00:   197394.432 us/op
                 createNewObjects·p0.50:   197918.720 us/op
                 createNewObjects·p0.90:   200802.304 us/op
                 createNewObjects·p0.95:   201431.450 us/op
                 createNewObjects·p0.99:   201588.736 us/op
                 createNewObjects·p0.999:  201588.736 us/op
                 createNewObjects·p0.9999: 201588.736 us/op
                 createNewObjects·p1.00:   201588.736 us/op

Iteration  12: 198992.996 ±(99.9%) 723.787 us/op
                 createNewObjects·p0.00:   196345.856 us/op
                 createNewObjects·p0.50:   198967.296 us/op
                 createNewObjects·p0.90:   201012.019 us/op
                 createNewObjects·p0.95:   201588.736 us/op
                 createNewObjects·p0.99:   201588.736 us/op
                 createNewObjects·p0.999:  201588.736 us/op
                 createNewObjects·p0.9999: 201588.736 us/op
                 createNewObjects·p1.00:   201588.736 us/op

Iteration  13: 198854.214 ±(99.9%) 704.883 us/op
                 createNewObjects·p0.00:   196083.712 us/op
                 createNewObjects·p0.50:   199229.440 us/op
                 createNewObjects·p0.90:   200540.160 us/op
                 createNewObjects·p0.95:   201169.306 us/op
                 createNewObjects·p0.99:   201588.736 us/op
                 createNewObjects·p0.999:  201588.736 us/op
                 createNewObjects·p0.9999: 201588.736 us/op
                 createNewObjects·p1.00:   201588.736 us/op

Iteration  14: 198658.891 ±(99.9%) 761.681 us/op
                 createNewObjects·p0.00:   195821.568 us/op
                 createNewObjects·p0.50:   199229.440 us/op
                 createNewObjects·p0.90:   200015.872 us/op
                 createNewObjects·p0.95:   200854.733 us/op
                 createNewObjects·p0.99:   202375.168 us/op
                 createNewObjects·p0.999:  202375.168 us/op
                 createNewObjects·p0.9999: 202375.168 us/op
                 createNewObjects·p1.00:   202375.168 us/op

Iteration  15: 198422.448 ±(99.9%) 820.044 us/op
                 createNewObjects·p0.00:   195297.280 us/op
                 createNewObjects·p0.50:   198705.152 us/op
                 createNewObjects·p0.90:   200540.160 us/op
                 createNewObjects·p0.95:   201012.019 us/op
                 createNewObjects·p0.99:   201588.736 us/op
                 createNewObjects·p0.999:  201588.736 us/op
                 createNewObjects·p0.9999: 201588.736 us/op
                 createNewObjects·p1.00:   201588.736 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 764
  mean = 198725.739 ±(99.9%) 187.786 us/op

  Histogram, us/op:
    [195000.000, 195500.000) = 9 
    [195500.000, 196000.000) = 17 
    [196000.000, 196500.000) = 43 
    [196500.000, 197000.000) = 53 
    [197000.000, 197500.000) = 83 
    [197500.000, 198000.000) = 87 
    [198000.000, 198500.000) = 47 
    [198500.000, 199000.000) = 63 
    [199000.000, 199500.000) = 105 
    [199500.000, 200000.000) = 58 
    [200000.000, 200500.000) = 88 
    [200500.000, 201000.000) = 60 
    [201000.000, 201500.000) = 29 
    [201500.000, 202000.000) = 18 
    [202000.000, 202500.000) = 4 

  Percentiles, us/op:
      p(0.0000) = 195035.136 us/op
     p(50.0000) = 198967.296 us/op
     p(90.0000) = 200802.304 us/op
     p(95.0000) = 201064.448 us/op
     p(99.0000) = 201588.736 us/op
     p(99.9000) = 202375.168 us/op
     p(99.9900) = 202375.168 us/op
     p(99.9990) = 202375.168 us/op
     p(99.9999) = 202375.168 us/op
    p(100.0000) = 202375.168 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 70.29% complete, ETA 02:30:10
# Fork: 1 of 1
# Warmup Iteration   1: 194480.601 ±(99.9%) 645.122 us/op
# Warmup Iteration   2: 194122.673 ±(99.9%) 719.590 us/op
# Warmup Iteration   3: 193547.973 ±(99.9%) 596.293 us/op
# Warmup Iteration   4: 193941.189 ±(99.9%) 709.523 us/op
# Warmup Iteration   5: 194949.435 ±(99.9%) 797.964 us/op
Iteration   1: 194440.271 ±(99.9%) 605.961 us/op
                 createNewObjects·p0.00:   192675.840 us/op
                 createNewObjects·p0.50:   194379.776 us/op
                 createNewObjects·p0.90:   196345.856 us/op
                 createNewObjects·p0.95:   196437.606 us/op
                 createNewObjects·p0.99:   196608.000 us/op
                 createNewObjects·p0.999:  196608.000 us/op
                 createNewObjects·p0.9999: 196608.000 us/op
                 createNewObjects·p1.00:   196608.000 us/op

Iteration   2: 193709.292 ±(99.9%) 740.332 us/op
                 createNewObjects·p0.00:   191102.976 us/op
                 createNewObjects·p0.50:   193462.272 us/op
                 createNewObjects·p0.90:   196083.712 us/op
                 createNewObjects·p0.95:   196437.606 us/op
                 createNewObjects·p0.99:   196870.144 us/op
                 createNewObjects·p0.999:  196870.144 us/op
                 createNewObjects·p0.9999: 196870.144 us/op
                 createNewObjects·p1.00:   196870.144 us/op

Iteration   3: 194485.642 ±(99.9%) 718.170 us/op
                 createNewObjects·p0.00:   191365.120 us/op
                 createNewObjects·p0.50:   194772.992 us/op
                 createNewObjects·p0.90:   196608.000 us/op
                 createNewObjects·p0.95:   196870.144 us/op
                 createNewObjects·p0.99:   196870.144 us/op
                 createNewObjects·p0.999:  196870.144 us/op
                 createNewObjects·p0.9999: 196870.144 us/op
                 createNewObjects·p1.00:   196870.144 us/op

Iteration   4: 195035.136 ±(99.9%) 442.582 us/op
                 createNewObjects·p0.00:   193200.128 us/op
                 createNewObjects·p0.50:   195035.136 us/op
                 createNewObjects·p0.90:   196345.856 us/op
                 createNewObjects·p0.95:   196870.144 us/op
                 createNewObjects·p0.99:   196870.144 us/op
                 createNewObjects·p0.999:  196870.144 us/op
                 createNewObjects·p0.9999: 196870.144 us/op
                 createNewObjects·p1.00:   196870.144 us/op

Iteration   5: 194515.889 ±(99.9%) 828.564 us/op
                 createNewObjects·p0.00:   191365.120 us/op
                 createNewObjects·p0.50:   195035.136 us/op
                 createNewObjects·p0.90:   196345.856 us/op
                 createNewObjects·p0.95:   196699.750 us/op
                 createNewObjects·p0.99:   197132.288 us/op
                 createNewObjects·p0.999:  197132.288 us/op
                 createNewObjects·p0.9999: 197132.288 us/op
                 createNewObjects·p1.00:   197132.288 us/op

Iteration   6: 194853.652 ±(99.9%) 841.071 us/op
                 createNewObjects·p0.00:   191102.976 us/op
                 createNewObjects·p0.50:   195297.280 us/op
                 createNewObjects·p0.90:   196870.144 us/op
                 createNewObjects·p0.95:   197132.288 us/op
                 createNewObjects·p0.99:   197394.432 us/op
                 createNewObjects·p0.999:  197394.432 us/op
                 createNewObjects·p0.9999: 197394.432 us/op
                 createNewObjects·p1.00:   197394.432 us/op

Iteration   7: 195307.362 ±(99.9%) 689.763 us/op
                 createNewObjects·p0.00:   191365.120 us/op
                 createNewObjects·p0.50:   195428.352 us/op
                 createNewObjects·p0.90:   197132.288 us/op
                 createNewObjects·p0.95:   197486.182 us/op
                 createNewObjects·p0.99:   198443.008 us/op
                 createNewObjects·p0.999:  198443.008 us/op
                 createNewObjects·p0.9999: 198443.008 us/op
                 createNewObjects·p1.00:   198443.008 us/op

Iteration   8: 194283.993 ±(99.9%) 694.813 us/op
                 createNewObjects·p0.00:   191102.976 us/op
                 createNewObjects·p0.50:   194248.704 us/op
                 createNewObjects·p0.90:   196345.856 us/op
                 createNewObjects·p0.95:   196345.856 us/op
                 createNewObjects·p0.99:   196870.144 us/op
                 createNewObjects·p0.999:  196870.144 us/op
                 createNewObjects·p0.9999: 196870.144 us/op
                 createNewObjects·p1.00:   196870.144 us/op

Iteration   9: 195090.590 ±(99.9%) 699.485 us/op
                 createNewObjects·p0.00:   191365.120 us/op
                 createNewObjects·p0.50:   195559.424 us/op
                 createNewObjects·p0.90:   196608.000 us/op
                 createNewObjects·p0.95:   196699.750 us/op
                 createNewObjects·p0.99:   196870.144 us/op
                 createNewObjects·p0.999:  196870.144 us/op
                 createNewObjects·p0.9999: 196870.144 us/op
                 createNewObjects·p1.00:   196870.144 us/op

Iteration  10: 193719.375 ±(99.9%) 761.402 us/op
                 createNewObjects·p0.00:   191365.120 us/op
                 createNewObjects·p0.50:   193200.128 us/op
                 createNewObjects·p0.90:   195559.424 us/op
                 createNewObjects·p0.95:   196083.712 us/op
                 createNewObjects·p0.99:   196083.712 us/op
                 createNewObjects·p0.999:  196083.712 us/op
                 createNewObjects·p0.9999: 196083.712 us/op
                 createNewObjects·p1.00:   196083.712 us/op

Iteration  11: 194556.219 ±(99.9%) 743.019 us/op
                 createNewObjects·p0.00:   191102.976 us/op
                 createNewObjects·p0.50:   194772.992 us/op
                 createNewObjects·p0.90:   196529.357 us/op
                 createNewObjects·p0.95:   196608.000 us/op
                 createNewObjects·p0.99:   196870.144 us/op
                 createNewObjects·p0.999:  196870.144 us/op
                 createNewObjects·p0.9999: 196870.144 us/op
                 createNewObjects·p1.00:   196870.144 us/op

Iteration  12: 194042.014 ±(99.9%) 461.684 us/op
                 createNewObjects·p0.00:   191889.408 us/op
                 createNewObjects·p0.50:   193986.560 us/op
                 createNewObjects·p0.90:   195480.781 us/op
                 createNewObjects·p0.95:   195651.174 us/op
                 createNewObjects·p0.99:   196083.712 us/op
                 createNewObjects·p0.999:  196083.712 us/op
                 createNewObjects·p0.9999: 196083.712 us/op
                 createNewObjects·p1.00:   196083.712 us/op

Iteration  13: 194152.921 ±(99.9%) 686.580 us/op
                 createNewObjects·p0.00:   191102.976 us/op
                 createNewObjects·p0.50:   193986.560 us/op
                 createNewObjects·p0.90:   195821.568 us/op
                 createNewObjects·p0.95:   196542.464 us/op
                 createNewObjects·p0.99:   197656.576 us/op
                 createNewObjects·p0.999:  197656.576 us/op
                 createNewObjects·p0.9999: 197656.576 us/op
                 createNewObjects·p1.00:   197656.576 us/op

Iteration  14: 193936.148 ±(99.9%) 755.800 us/op
                 createNewObjects·p0.00:   191365.120 us/op
                 createNewObjects·p0.50:   193724.416 us/op
                 createNewObjects·p0.90:   196083.712 us/op
                 createNewObjects·p0.95:   196608.000 us/op
                 createNewObjects·p0.99:   196608.000 us/op
                 createNewObjects·p0.999:  196608.000 us/op
                 createNewObjects·p0.9999: 196608.000 us/op
                 createNewObjects·p1.00:   196608.000 us/op

Iteration  15: 194964.559 ±(99.9%) 704.336 us/op
                 createNewObjects·p0.00:   191627.264 us/op
                 createNewObjects·p0.50:   195297.280 us/op
                 createNewObjects·p0.90:   196608.000 us/op
                 createNewObjects·p0.95:   196870.144 us/op
                 createNewObjects·p0.99:   196870.144 us/op
                 createNewObjects·p0.999:  196870.144 us/op
                 createNewObjects·p0.9999: 196870.144 us/op
                 createNewObjects·p1.00:   196870.144 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 780
  mean = 194472.871 ±(99.9%) 178.977 us/op

  Histogram, us/op:
    [191000.000, 191500.000) = 23 
    [191500.000, 192000.000) = 47 
    [192000.000, 192500.000) = 30 
    [192500.000, 193000.000) = 46 
    [193000.000, 193500.000) = 89 
    [193500.000, 194000.000) = 78 
    [194000.000, 194500.000) = 28 
    [194500.000, 195000.000) = 84 
    [195000.000, 195500.000) = 114 
    [195500.000, 196000.000) = 100 
    [196000.000, 196500.000) = 83 
    [196500.000, 197000.000) = 46 
    [197000.000, 197500.000) = 9 
    [197500.000, 198000.000) = 2 
    [198000.000, 198500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 191102.976 us/op
     p(50.0000) = 194772.992 us/op
     p(90.0000) = 196345.856 us/op
     p(95.0000) = 196608.000 us/op
     p(99.0000) = 197132.288 us/op
     p(99.9000) = 198443.008 us/op
     p(99.9900) = 198443.008 us/op
     p(99.9990) = 198443.008 us/op
     p(99.9999) = 198443.008 us/op
    p(100.0000) = 198443.008 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 71.01% complete, ETA 02:26:28
# Fork: 1 of 1
# Warmup Iteration   1: 1359478.784 ±(99.9%) 125811.408 us/op
# Warmup Iteration   2: 1325137.920 ±(99.9%) 115824.944 us/op
# Warmup Iteration   3: 1335099.392 ±(99.9%) 123307.087 us/op
# Warmup Iteration   4: 1333002.240 ±(99.9%) 122334.659 us/op
# Warmup Iteration   5: 1341652.992 ±(99.9%) 126048.513 us/op
Iteration   1: 1324613.632 ±(99.9%) 119888.240 us/op
                 fillHeap·p0.00:   1186988.032 us/op
                 fillHeap·p0.50:   1331691.520 us/op
                 fillHeap·p0.90:   1392508.928 us/op
                 fillHeap·p0.95:   1392508.928 us/op
                 fillHeap·p0.99:   1392508.928 us/op
                 fillHeap·p0.999:  1392508.928 us/op
                 fillHeap·p0.9999: 1392508.928 us/op
                 fillHeap·p1.00:   1392508.928 us/op

Iteration   2: 1326972.928 ±(99.9%) 119980.403 us/op
                 fillHeap·p0.00:   1186988.032 us/op
                 fillHeap·p0.50:   1339031.552 us/op
                 fillHeap·p0.90:   1386217.472 us/op
                 fillHeap·p0.95:   1386217.472 us/op
                 fillHeap·p0.99:   1386217.472 us/op
                 fillHeap·p0.999:  1386217.472 us/op
                 fillHeap·p0.9999: 1386217.472 us/op
                 fillHeap·p1.00:   1386217.472 us/op

Iteration   3: 1333526.528 ±(99.9%) 121836.109 us/op
                 fillHeap·p0.00:   1189085.184 us/op
                 fillHeap·p0.50:   1351614.464 us/op
                 fillHeap·p0.90:   1394606.080 us/op
                 fillHeap·p0.95:   1394606.080 us/op
                 fillHeap·p0.99:   1394606.080 us/op
                 fillHeap·p0.999:  1394606.080 us/op
                 fillHeap·p0.9999: 1394606.080 us/op
                 fillHeap·p1.00:   1394606.080 us/op

Iteration   4: 1323565.056 ±(99.9%) 114829.160 us/op
                 fillHeap·p0.00:   1191182.336 us/op
                 fillHeap·p0.50:   1339031.552 us/op
                 fillHeap·p0.90:   1379926.016 us/op
                 fillHeap·p0.95:   1379926.016 us/op
                 fillHeap·p0.99:   1379926.016 us/op
                 fillHeap·p0.999:  1379926.016 us/op
                 fillHeap·p0.9999: 1379926.016 us/op
                 fillHeap·p1.00:   1379926.016 us/op

Iteration   5: 1341915.136 ±(99.9%) 131988.884 us/op
                 fillHeap·p0.00:   1180696.576 us/op
                 fillHeap·p0.50:   1358954.496 us/op
                 fillHeap·p0.90:   1396703.232 us/op
                 fillHeap·p0.95:   1396703.232 us/op
                 fillHeap·p0.99:   1396703.232 us/op
                 fillHeap·p0.999:  1396703.232 us/op
                 fillHeap·p0.9999: 1396703.232 us/op
                 fillHeap·p1.00:   1396703.232 us/op

Iteration   6: 1326448.640 ±(99.9%) 114359.402 us/op
                 fillHeap·p0.00:   1186988.032 us/op
                 fillHeap·p0.50:   1339031.552 us/op
                 fillHeap·p0.90:   1377828.864 us/op
                 fillHeap·p0.95:   1377828.864 us/op
                 fillHeap·p0.99:   1377828.864 us/op
                 fillHeap·p0.999:  1377828.864 us/op
                 fillHeap·p0.9999: 1377828.864 us/op
                 fillHeap·p1.00:   1377828.864 us/op

Iteration   7: 1337458.688 ±(99.9%) 119135.122 us/op
                 fillHeap·p0.00:   1193279.488 us/op
                 fillHeap·p0.50:   1355808.768 us/op
                 fillHeap·p0.90:   1390411.776 us/op
                 fillHeap·p0.95:   1390411.776 us/op
                 fillHeap·p0.99:   1390411.776 us/op
                 fillHeap·p0.999:  1390411.776 us/op
                 fillHeap·p0.9999: 1390411.776 us/op
                 fillHeap·p1.00:   1390411.776 us/op

Iteration   8: 1334575.104 ±(99.9%) 128470.369 us/op
                 fillHeap·p0.00:   1193279.488 us/op
                 fillHeap·p0.50:   1345323.008 us/op
                 fillHeap·p0.90:   1400897.536 us/op
                 fillHeap·p0.95:   1400897.536 us/op
                 fillHeap·p0.99:   1400897.536 us/op
                 fillHeap·p0.999:  1400897.536 us/op
                 fillHeap·p0.9999: 1400897.536 us/op
                 fillHeap·p1.00:   1400897.536 us/op

Iteration   9: 1334837.248 ±(99.9%) 126344.269 us/op
                 fillHeap·p0.00:   1184890.880 us/op
                 fillHeap·p0.50:   1347420.160 us/op
                 fillHeap·p0.90:   1392508.928 us/op
                 fillHeap·p0.95:   1392508.928 us/op
                 fillHeap·p0.99:   1392508.928 us/op
                 fillHeap·p0.999:  1392508.928 us/op
                 fillHeap·p0.9999: 1392508.928 us/op
                 fillHeap·p1.00:   1392508.928 us/op

Iteration  10: 1338245.120 ±(99.9%) 123260.511 us/op
                 fillHeap·p0.00:   1191182.336 us/op
                 fillHeap·p0.50:   1351614.464 us/op
                 fillHeap·p0.90:   1402994.688 us/op
                 fillHeap·p0.95:   1402994.688 us/op
                 fillHeap·p0.99:   1402994.688 us/op
                 fillHeap·p0.999:  1402994.688 us/op
                 fillHeap·p0.9999: 1402994.688 us/op
                 fillHeap·p1.00:   1402994.688 us/op

Iteration  11: 1334050.816 ±(99.9%) 123074.032 us/op
                 fillHeap·p0.00:   1189085.184 us/op
                 fillHeap·p0.50:   1352663.040 us/op
                 fillHeap·p0.90:   1388314.624 us/op
                 fillHeap·p0.95:   1388314.624 us/op
                 fillHeap·p0.99:   1388314.624 us/op
                 fillHeap·p0.999:  1388314.624 us/op
                 fillHeap·p0.9999: 1388314.624 us/op
                 fillHeap·p1.00:   1388314.624 us/op

Iteration  12: 1338769.408 ±(99.9%) 128809.607 us/op
                 fillHeap·p0.00:   1186988.032 us/op
                 fillHeap·p0.50:   1355808.768 us/op
                 fillHeap·p0.90:   1398800.384 us/op
                 fillHeap·p0.95:   1398800.384 us/op
                 fillHeap·p0.99:   1398800.384 us/op
                 fillHeap·p0.999:  1398800.384 us/op
                 fillHeap·p0.9999: 1398800.384 us/op
                 fillHeap·p1.00:   1398800.384 us/op

Iteration  13: 1327235.072 ±(99.9%) 117791.260 us/op
                 fillHeap·p0.00:   1189085.184 us/op
                 fillHeap·p0.50:   1336934.400 us/op
                 fillHeap·p0.90:   1388314.624 us/op
                 fillHeap·p0.95:   1388314.624 us/op
                 fillHeap·p0.99:   1388314.624 us/op
                 fillHeap·p0.999:  1388314.624 us/op
                 fillHeap·p0.9999: 1388314.624 us/op
                 fillHeap·p1.00:   1388314.624 us/op

Iteration  14: 1336934.400 ±(99.9%) 120042.602 us/op
                 fillHeap·p0.00:   1195376.640 us/op
                 fillHeap·p0.50:   1351614.464 us/op
                 fillHeap·p0.90:   1396703.232 us/op
                 fillHeap·p0.95:   1396703.232 us/op
                 fillHeap·p0.99:   1396703.232 us/op
                 fillHeap·p0.999:  1396703.232 us/op
                 fillHeap·p0.9999: 1396703.232 us/op
                 fillHeap·p1.00:   1396703.232 us/op

Iteration  15: 1328283.648 ±(99.9%) 113572.153 us/op
                 fillHeap·p0.00:   1197473.792 us/op
                 fillHeap·p0.50:   1344274.432 us/op
                 fillHeap·p0.90:   1384120.320 us/op
                 fillHeap·p0.95:   1384120.320 us/op
                 fillHeap·p0.99:   1384120.320 us/op
                 fillHeap·p0.999:  1384120.320 us/op
                 fillHeap·p0.9999: 1384120.320 us/op
                 fillHeap·p1.00:   1384120.320 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 120
  mean = 1332495.428 ±(99.9%) 18494.488 us/op

  Histogram, us/op:
    [1100000.000, 1125000.000) = 0 
    [1125000.000, 1150000.000) = 0 
    [1150000.000, 1175000.000) = 0 
    [1175000.000, 1200000.000) = 15 
    [1200000.000, 1225000.000) = 0 
    [1225000.000, 1250000.000) = 0 
    [1250000.000, 1275000.000) = 0 
    [1275000.000, 1300000.000) = 0 
    [1300000.000, 1325000.000) = 18 
    [1325000.000, 1350000.000) = 33 
    [1350000.000, 1375000.000) = 28 
    [1375000.000, 1400000.000) = 24 
    [1400000.000, 1425000.000) = 2 
    [1425000.000, 1450000.000) = 0 
    [1450000.000, 1475000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1180696.576 us/op
     p(50.0000) = 1345323.008 us/op
     p(90.0000) = 1390202.061 us/op
     p(95.0000) = 1396598.374 us/op
     p(99.0000) = 1402554.286 us/op
     p(99.9000) = 1402994.688 us/op
     p(99.9900) = 1402994.688 us/op
     p(99.9990) = 1402994.688 us/op
     p(99.9999) = 1402994.688 us/op
    p(100.0000) = 1402994.688 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 71.74% complete, ETA 02:22:52
# Fork: 1 of 1
# Warmup Iteration   1: 986710.016 ±(99.9%) 80267.233 us/op
# Warmup Iteration   2: 990427.695 ±(99.9%) 73863.533 us/op
# Warmup Iteration   3: 995670.575 ±(99.9%) 73646.830 us/op
# Warmup Iteration   4: 993954.723 ±(99.9%) 71808.000 us/op
# Warmup Iteration   5: 989951.069 ±(99.9%) 73667.075 us/op
Iteration   1: 986900.666 ±(99.9%) 73341.952 us/op
                 fillHeap·p0.00:   905969.664 us/op
                 fillHeap·p0.50:   984612.864 us/op
                 fillHeap·p0.90:   1064933.786 us/op
                 fillHeap·p0.95:   1066401.792 us/op
                 fillHeap·p0.99:   1066401.792 us/op
                 fillHeap·p0.999:  1066401.792 us/op
                 fillHeap·p0.9999: 1066401.792 us/op
                 fillHeap·p1.00:   1066401.792 us/op

Iteration   2: 989093.143 ±(99.9%) 76192.057 us/op
                 fillHeap·p0.00:   903872.512 us/op
                 fillHeap·p0.50:   986710.016 us/op
                 fillHeap·p0.90:   1071854.387 us/op
                 fillHeap·p0.95:   1073741.824 us/op
                 fillHeap·p0.99:   1073741.824 us/op
                 fillHeap·p0.999:  1073741.824 us/op
                 fillHeap·p0.9999: 1073741.824 us/op
                 fillHeap·p1.00:   1073741.824 us/op

Iteration   3: 991190.295 ±(99.9%) 72367.065 us/op
                 fillHeap·p0.00:   912261.120 us/op
                 fillHeap·p0.50:   989855.744 us/op
                 fillHeap·p0.90:   1072483.533 us/op
                 fillHeap·p0.95:   1075838.976 us/op
                 fillHeap·p0.99:   1075838.976 us/op
                 fillHeap·p0.999:  1075838.976 us/op
                 fillHeap·p0.9999: 1075838.976 us/op
                 fillHeap·p1.00:   1075838.976 us/op

Iteration   4: 991666.921 ±(99.9%) 74240.469 us/op
                 fillHeap·p0.00:   910163.968 us/op
                 fillHeap·p0.50:   981467.136 us/op
                 fillHeap·p0.90:   1073112.678 us/op
                 fillHeap·p0.95:   1075838.976 us/op
                 fillHeap·p0.99:   1075838.976 us/op
                 fillHeap·p0.999:  1075838.976 us/op
                 fillHeap·p0.9999: 1075838.976 us/op
                 fillHeap·p1.00:   1075838.976 us/op

Iteration   5: 993478.097 ±(99.9%) 73735.299 us/op
                 fillHeap·p0.00:   914358.272 us/op
                 fillHeap·p0.50:   987758.592 us/op
                 fillHeap·p0.90:   1074790.400 us/op
                 fillHeap·p0.95:   1077936.128 us/op
                 fillHeap·p0.99:   1077936.128 us/op
                 fillHeap·p0.999:  1077936.128 us/op
                 fillHeap·p0.9999: 1077936.128 us/op
                 fillHeap·p1.00:   1077936.128 us/op

Iteration   6: 988139.892 ±(99.9%) 73680.829 us/op
                 fillHeap·p0.00:   904921.088 us/op
                 fillHeap·p0.50:   981467.136 us/op
                 fillHeap·p0.90:   1069757.235 us/op
                 fillHeap·p0.95:   1073741.824 us/op
                 fillHeap·p0.99:   1073741.824 us/op
                 fillHeap·p0.999:  1073741.824 us/op
                 fillHeap·p0.9999: 1073741.824 us/op
                 fillHeap·p1.00:   1073741.824 us/op

Iteration   7: 992334.196 ±(99.9%) 74158.790 us/op
                 fillHeap·p0.00:   904921.088 us/op
                 fillHeap·p0.50:   985661.440 us/op
                 fillHeap·p0.90:   1067240.653 us/op
                 fillHeap·p0.95:   1067450.368 us/op
                 fillHeap·p0.99:   1067450.368 us/op
                 fillHeap·p0.999:  1067450.368 us/op
                 fillHeap·p0.9999: 1067450.368 us/op
                 fillHeap·p1.00:   1067450.368 us/op

Iteration   8: 992524.847 ±(99.9%) 72975.571 us/op
                 fillHeap·p0.00:   911212.544 us/op
                 fillHeap·p0.50:   988807.168 us/op
                 fillHeap·p0.90:   1073951.539 us/op
                 fillHeap·p0.95:   1075838.976 us/op
                 fillHeap·p0.99:   1075838.976 us/op
                 fillHeap·p0.999:  1075838.976 us/op
                 fillHeap·p0.9999: 1075838.976 us/op
                 fillHeap·p1.00:   1075838.976 us/op

Iteration   9: 995098.624 ±(99.9%) 75992.814 us/op
                 fillHeap·p0.00:   910163.968 us/op
                 fillHeap·p0.50:   999292.928 us/op
                 fillHeap·p0.90:   1076258.406 us/op
                 fillHeap·p0.95:   1077936.128 us/op
                 fillHeap·p0.99:   1077936.128 us/op
                 fillHeap·p0.999:  1077936.128 us/op
                 fillHeap·p0.9999: 1077936.128 us/op
                 fillHeap·p1.00:   1077936.128 us/op

Iteration  10: 993764.073 ±(99.9%) 78588.824 us/op
                 fillHeap·p0.00:   908066.816 us/op
                 fillHeap·p0.50:   987758.592 us/op
                 fillHeap·p0.90:   1076887.552 us/op
                 fillHeap·p0.95:   1077936.128 us/op
                 fillHeap·p0.99:   1077936.128 us/op
                 fillHeap·p0.999:  1077936.128 us/op
                 fillHeap·p0.9999: 1077936.128 us/op
                 fillHeap·p1.00:   1077936.128 us/op

Iteration  11: 996433.175 ±(99.9%) 73018.000 us/op
                 fillHeap·p0.00:   918552.576 us/op
                 fillHeap·p0.50:   994050.048 us/op
                 fillHeap·p0.90:   1082340.147 us/op
                 fillHeap·p0.95:   1086324.736 us/op
                 fillHeap·p0.99:   1086324.736 us/op
                 fillHeap·p0.999:  1086324.736 us/op
                 fillHeap·p0.9999: 1086324.736 us/op
                 fillHeap·p1.00:   1086324.736 us/op

Iteration  12: 993192.122 ±(99.9%) 75062.302 us/op
                 fillHeap·p0.00:   907018.240 us/op
                 fillHeap·p0.50:   986710.016 us/op
                 fillHeap·p0.90:   1076258.406 us/op
                 fillHeap·p0.95:   1077936.128 us/op
                 fillHeap·p0.99:   1077936.128 us/op
                 fillHeap·p0.999:  1077936.128 us/op
                 fillHeap·p0.9999: 1077936.128 us/op
                 fillHeap·p1.00:   1077936.128 us/op

Iteration  13: 986614.691 ±(99.9%) 71033.582 us/op
                 fillHeap·p0.00:   907018.240 us/op
                 fillHeap·p0.50:   984612.864 us/op
                 fillHeap·p0.90:   1064514.355 us/op
                 fillHeap·p0.95:   1067450.368 us/op
                 fillHeap·p0.99:   1067450.368 us/op
                 fillHeap·p0.999:  1067450.368 us/op
                 fillHeap·p0.9999: 1067450.368 us/op
                 fillHeap·p1.00:   1067450.368 us/op

Iteration  14: 990141.719 ±(99.9%) 71268.964 us/op
                 fillHeap·p0.00:   912261.120 us/op
                 fillHeap·p0.50:   983564.288 us/op
                 fillHeap·p0.90:   1071015.526 us/op
                 fillHeap·p0.95:   1073741.824 us/op
                 fillHeap·p0.99:   1073741.824 us/op
                 fillHeap·p0.999:  1073741.824 us/op
                 fillHeap·p0.9999: 1073741.824 us/op
                 fillHeap·p1.00:   1073741.824 us/op

Iteration  15: 992524.847 ±(99.9%) 71484.852 us/op
                 fillHeap·p0.00:   911212.544 us/op
                 fillHeap·p0.50:   994050.048 us/op
                 fillHeap·p0.90:   1071434.957 us/op
                 fillHeap·p0.95:   1075838.976 us/op
                 fillHeap·p0.99:   1075838.976 us/op
                 fillHeap·p0.999:  1075838.976 us/op
                 fillHeap·p0.9999: 1075838.976 us/op
                 fillHeap·p1.00:   1075838.976 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 165
  mean = 991539.821 ±(99.9%) 13339.115 us/op

  Histogram, us/op:
    [ 900000.000,  912500.000) = 18 
    [ 912500.000,  925000.000) = 12 
    [ 925000.000,  937500.000) = 0 
    [ 937500.000,  950000.000) = 1 
    [ 950000.000,  962500.000) = 11 
    [ 962500.000,  975000.000) = 21 
    [ 975000.000,  987500.000) = 20 
    [ 987500.000, 1000000.000) = 11 
    [1000000.000, 1012500.000) = 15 
    [1012500.000, 1025000.000) = 11 
    [1025000.000, 1037500.000) = 15 
    [1037500.000, 1050000.000) = 0 
    [1050000.000, 1062500.000) = 8 
    [1062500.000, 1075000.000) = 13 
    [1075000.000, 1087500.000) = 9 

  Percentiles, us/op:
      p(0.0000) = 903872.512 us/op
     p(50.0000) = 986710.016 us/op
     p(90.0000) = 1067450.368 us/op
     p(95.0000) = 1075838.976 us/op
     p(99.0000) = 1080788.255 us/op
     p(99.9000) = 1086324.736 us/op
     p(99.9900) = 1086324.736 us/op
     p(99.9990) = 1086324.736 us/op
     p(99.9999) = 1086324.736 us/op
    p(100.0000) = 1086324.736 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 72.46% complete, ETA 02:19:17
# Fork: 1 of 1
# Warmup Iteration   1: 854938.965 ±(99.9%) 67587.274 us/op
# Warmup Iteration   2: 850919.424 ±(99.9%) 50283.843 us/op
# Warmup Iteration   3: 844802.731 ±(99.9%) 44438.735 us/op
# Warmup Iteration   4: 844278.443 ±(99.9%) 47217.241 us/op
# Warmup Iteration   5: 845239.637 ±(99.9%) 46502.038 us/op
Iteration   1: 845327.019 ±(99.9%) 48431.068 us/op
                 fillHeap·p0.00:   787480.576 us/op
                 fillHeap·p0.50:   844627.968 us/op
                 fillHeap·p0.90:   901565.645 us/op
                 fillHeap·p0.95:   909115.392 us/op
                 fillHeap·p0.99:   909115.392 us/op
                 fillHeap·p0.999:  909115.392 us/op
                 fillHeap·p0.9999: 909115.392 us/op
                 fillHeap·p1.00:   909115.392 us/op

Iteration   2: 845064.875 ±(99.9%) 46565.469 us/op
                 fillHeap·p0.00:   785383.424 us/op
                 fillHeap·p0.50:   846725.120 us/op
                 fillHeap·p0.90:   897790.771 us/op
                 fillHeap·p0.95:   902823.936 us/op
                 fillHeap·p0.99:   902823.936 us/op
                 fillHeap·p0.999:  902823.936 us/op
                 fillHeap·p0.9999: 902823.936 us/op
                 fillHeap·p1.00:   902823.936 us/op

Iteration   3: 841307.477 ±(99.9%) 46698.658 us/op
                 fillHeap·p0.00:   784334.848 us/op
                 fillHeap·p0.50:   840957.952 us/op
                 fillHeap·p0.90:   895483.904 us/op
                 fillHeap·p0.95:   901775.360 us/op
                 fillHeap·p0.99:   901775.360 us/op
                 fillHeap·p0.999:  901775.360 us/op
                 fillHeap·p0.9999: 901775.360 us/op
                 fillHeap·p1.00:   901775.360 us/op

Iteration   4: 843928.917 ±(99.9%) 46956.047 us/op
                 fillHeap·p0.00:   783286.272 us/op
                 fillHeap·p0.50:   845152.256 us/op
                 fillHeap·p0.90:   898524.774 us/op
                 fillHeap·p0.95:   907018.240 us/op
                 fillHeap·p0.99:   907018.240 us/op
                 fillHeap·p0.999:  907018.240 us/op
                 fillHeap·p0.9999: 907018.240 us/op
                 fillHeap·p1.00:   907018.240 us/op

Iteration   5: 844365.824 ±(99.9%) 46447.935 us/op
                 fillHeap·p0.00:   791674.880 us/op
                 fillHeap·p0.50:   846725.120 us/op
                 fillHeap·p0.90:   895588.762 us/op
                 fillHeap·p0.95:   899678.208 us/op
                 fillHeap·p0.99:   899678.208 us/op
                 fillHeap·p0.999:  899678.208 us/op
                 fillHeap·p0.9999: 899678.208 us/op
                 fillHeap·p1.00:   899678.208 us/op

Iteration   6: 842181.291 ±(99.9%) 48363.302 us/op
                 fillHeap·p0.00:   776994.816 us/op
                 fillHeap·p0.50:   839909.376 us/op
                 fillHeap·p0.90:   892862.464 us/op
                 fillHeap·p0.95:   897581.056 us/op
                 fillHeap·p0.99:   897581.056 us/op
                 fillHeap·p0.999:  897581.056 us/op
                 fillHeap·p0.9999: 897581.056 us/op
                 fillHeap·p1.00:   897581.056 us/op

Iteration   7: 842530.816 ±(99.9%) 47045.596 us/op
                 fillHeap·p0.00:   779091.968 us/op
                 fillHeap·p0.50:   846725.120 us/op
                 fillHeap·p0.90:   891289.600 us/op
                 fillHeap·p0.95:   897581.056 us/op
                 fillHeap·p0.99:   897581.056 us/op
                 fillHeap·p0.999:  897581.056 us/op
                 fillHeap·p0.9999: 897581.056 us/op
                 fillHeap·p1.00:   897581.056 us/op

Iteration   8: 841831.765 ±(99.9%) 47690.664 us/op
                 fillHeap·p0.00:   787480.576 us/op
                 fillHeap·p0.50:   843055.104 us/op
                 fillHeap·p0.90:   900517.069 us/op
                 fillHeap·p0.95:   908066.816 us/op
                 fillHeap·p0.99:   908066.816 us/op
                 fillHeap·p0.999:  908066.816 us/op
                 fillHeap·p0.9999: 908066.816 us/op
                 fillHeap·p1.00:   908066.816 us/op

Iteration   9: 841132.715 ±(99.9%) 48053.761 us/op
                 fillHeap·p0.00:   781189.120 us/op
                 fillHeap·p0.50:   841482.240 us/op
                 fillHeap·p0.90:   892443.034 us/op
                 fillHeap·p0.95:   896532.480 us/op
                 fillHeap·p0.99:   896532.480 us/op
                 fillHeap·p0.999:  896532.480 us/op
                 fillHeap·p0.9999: 896532.480 us/op
                 fillHeap·p1.00:   896532.480 us/op

Iteration  10: 842181.291 ±(99.9%) 47342.103 us/op
                 fillHeap·p0.00:   784334.848 us/op
                 fillHeap·p0.50:   843055.104 us/op
                 fillHeap·p0.90:   889821.594 us/op
                 fillHeap·p0.95:   892338.176 us/op
                 fillHeap·p0.99:   892338.176 us/op
                 fillHeap·p0.999:  892338.176 us/op
                 fillHeap·p0.9999: 892338.176 us/op
                 fillHeap·p1.00:   892338.176 us/op

Iteration  11: 844715.349 ±(99.9%) 45348.716 us/op
                 fillHeap·p0.00:   786432.000 us/op
                 fillHeap·p0.50:   847773.696 us/op
                 fillHeap·p0.90:   893386.752 us/op
                 fillHeap·p0.95:   899678.208 us/op
                 fillHeap·p0.99:   899678.208 us/op
                 fillHeap·p0.999:  899678.208 us/op
                 fillHeap·p0.9999: 899678.208 us/op
                 fillHeap·p1.00:   899678.208 us/op

Iteration  12: 842618.197 ±(99.9%) 46621.780 us/op
                 fillHeap·p0.00:   789577.728 us/op
                 fillHeap·p0.50:   842530.816 us/op
                 fillHeap·p0.90:   899678.208 us/op
                 fillHeap·p0.95:   905969.664 us/op
                 fillHeap·p0.99:   905969.664 us/op
                 fillHeap·p0.999:  905969.664 us/op
                 fillHeap·p0.9999: 905969.664 us/op
                 fillHeap·p1.00:   905969.664 us/op

Iteration  13: 845239.637 ±(99.9%) 47000.116 us/op
                 fillHeap·p0.00:   781189.120 us/op
                 fillHeap·p0.50:   847773.696 us/op
                 fillHeap·p0.90:   895798.477 us/op
                 fillHeap·p0.95:   898629.632 us/op
                 fillHeap·p0.99:   898629.632 us/op
                 fillHeap·p0.999:  898629.632 us/op
                 fillHeap·p0.9999: 898629.632 us/op
                 fillHeap·p1.00:   898629.632 us/op

Iteration  14: 844365.824 ±(99.9%) 46518.491 us/op
                 fillHeap·p0.00:   788529.152 us/op
                 fillHeap·p0.50:   847249.408 us/op
                 fillHeap·p0.90:   896217.907 us/op
                 fillHeap·p0.95:   899678.208 us/op
                 fillHeap·p0.99:   899678.208 us/op
                 fillHeap·p0.999:  899678.208 us/op
                 fillHeap·p0.9999: 899678.208 us/op
                 fillHeap·p1.00:   899678.208 us/op

Iteration  15: 843754.155 ±(99.9%) 47340.371 us/op
                 fillHeap·p0.00:   780140.544 us/op
                 fillHeap·p0.50:   843055.104 us/op
                 fillHeap·p0.90:   898105.344 us/op
                 fillHeap·p0.95:   902823.936 us/op
                 fillHeap·p0.99:   902823.936 us/op
                 fillHeap·p0.999:  902823.936 us/op
                 fillHeap·p0.9999: 902823.936 us/op
                 fillHeap·p1.00:   902823.936 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 180
  mean = 843369.677 ±(99.9%) 8811.651 us/op

  Histogram, us/op:
    [ 700000.000,  725000.000) = 0 
    [ 725000.000,  750000.000) = 0 
    [ 750000.000,  775000.000) = 0 
    [ 775000.000,  800000.000) = 28 
    [ 800000.000,  825000.000) = 26 
    [ 825000.000,  850000.000) = 47 
    [ 850000.000,  875000.000) = 35 
    [ 875000.000,  900000.000) = 37 
    [ 900000.000,  925000.000) = 7 
    [ 925000.000,  950000.000) = 0 
    [ 950000.000,  975000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 776994.816 us/op
     p(50.0000) = 845152.256 us/op
     p(90.0000) = 886990.438 us/op
     p(95.0000) = 899678.208 us/op
     p(99.0000) = 908266.045 us/op
     p(99.9000) = 909115.392 us/op
     p(99.9900) = 909115.392 us/op
     p(99.9990) = 909115.392 us/op
     p(99.9999) = 909115.392 us/op
    p(100.0000) = 909115.392 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 73.19% complete, ETA 02:15:36
# Fork: 1 of 1
# Warmup Iteration   1: 837462.699 ±(99.9%) 55011.496 us/op
# Warmup Iteration   2: 836064.597 ±(99.9%) 51764.883 us/op
# Warmup Iteration   3: 834491.733 ±(99.9%) 50884.655 us/op
# Warmup Iteration   4: 836151.979 ±(99.9%) 54772.879 us/op
# Warmup Iteration   5: 835627.691 ±(99.9%) 55545.835 us/op
Iteration   1: 837287.936 ±(99.9%) 53168.742 us/op
                 fillHeap·p0.00:   761266.176 us/op
                 fillHeap·p0.50:   834666.496 us/op
                 fillHeap·p0.90:   909220.250 us/op
                 fillHeap·p0.95:   916455.424 us/op
                 fillHeap·p0.99:   916455.424 us/op
                 fillHeap·p0.999:  916455.424 us/op
                 fillHeap·p0.9999: 916455.424 us/op
                 fillHeap·p1.00:   916455.424 us/op

Iteration   2: 838686.037 ±(99.9%) 55750.270 us/op
                 fillHeap·p0.00:   779091.968 us/op
                 fillHeap·p0.50:   837287.936 us/op
                 fillHeap·p0.90:   911212.544 us/op
                 fillHeap·p0.95:   911212.544 us/op
                 fillHeap·p0.99:   911212.544 us/op
                 fillHeap·p0.999:  911212.544 us/op
                 fillHeap·p0.9999: 911212.544 us/op
                 fillHeap·p1.00:   911212.544 us/op

Iteration   3: 835977.216 ±(99.9%) 52836.537 us/op
                 fillHeap·p0.00:   772800.512 us/op
                 fillHeap·p0.50:   834142.208 us/op
                 fillHeap·p0.90:   903243.366 us/op
                 fillHeap·p0.95:   907018.240 us/op
                 fillHeap·p0.99:   907018.240 us/op
                 fillHeap·p0.999:  907018.240 us/op
                 fillHeap·p0.9999: 907018.240 us/op
                 fillHeap·p1.00:   907018.240 us/op

Iteration   4: 838773.419 ±(99.9%) 50783.444 us/op
                 fillHeap·p0.00:   774897.664 us/op
                 fillHeap·p0.50:   835715.072 us/op
                 fillHeap·p0.90:   898524.774 us/op
                 fillHeap·p0.95:   900726.784 us/op
                 fillHeap·p0.99:   900726.784 us/op
                 fillHeap·p0.999:  900726.784 us/op
                 fillHeap·p0.9999: 900726.784 us/op
                 fillHeap·p1.00:   900726.784 us/op

Iteration   5: 835977.216 ±(99.9%) 49231.293 us/op
                 fillHeap·p0.00:   769654.784 us/op
                 fillHeap·p0.50:   837812.224 us/op
                 fillHeap·p0.90:   900307.354 us/op
                 fillHeap·p0.95:   909115.392 us/op
                 fillHeap·p0.99:   909115.392 us/op
                 fillHeap·p0.999:  909115.392 us/op
                 fillHeap·p0.9999: 909115.392 us/op
                 fillHeap·p1.00:   909115.392 us/op

Iteration   6: 835715.072 ±(99.9%) 54648.617 us/op
                 fillHeap·p0.00:   771751.936 us/op
                 fillHeap·p0.50:   828899.328 us/op
                 fillHeap·p0.90:   910478.541 us/op
                 fillHeap·p0.95:   916455.424 us/op
                 fillHeap·p0.99:   916455.424 us/op
                 fillHeap·p0.999:  916455.424 us/op
                 fillHeap·p0.9999: 916455.424 us/op
                 fillHeap·p1.00:   916455.424 us/op

Iteration   7: 839559.851 ±(99.9%) 54592.575 us/op
                 fillHeap·p0.00:   762314.752 us/op
                 fillHeap·p0.50:   837812.224 us/op
                 fillHeap·p0.90:   903243.366 us/op
                 fillHeap·p0.95:   907018.240 us/op
                 fillHeap·p0.99:   907018.240 us/op
                 fillHeap·p0.999:  907018.240 us/op
                 fillHeap·p0.9999: 907018.240 us/op
                 fillHeap·p1.00:   907018.240 us/op

Iteration   8: 837812.224 ±(99.9%) 53682.862 us/op
                 fillHeap·p0.00:   768606.208 us/op
                 fillHeap·p0.50:   840433.664 us/op
                 fillHeap·p0.90:   906808.525 us/op
                 fillHeap·p0.95:   914358.272 us/op
                 fillHeap·p0.99:   914358.272 us/op
                 fillHeap·p0.999:  914358.272 us/op
                 fillHeap·p0.9999: 914358.272 us/op
                 fillHeap·p1.00:   914358.272 us/op

Iteration   9: 838686.037 ±(99.9%) 51337.039 us/op
                 fillHeap·p0.00:   773849.088 us/op
                 fillHeap·p0.50:   836763.648 us/op
                 fillHeap·p0.90:   906808.525 us/op
                 fillHeap·p0.95:   911212.544 us/op
                 fillHeap·p0.99:   911212.544 us/op
                 fillHeap·p0.999:  911212.544 us/op
                 fillHeap·p0.9999: 911212.544 us/op
                 fillHeap·p1.00:   911212.544 us/op

Iteration  10: 838686.037 ±(99.9%) 50849.194 us/op
                 fillHeap·p0.00:   773849.088 us/op
                 fillHeap·p0.50:   835715.072 us/op
                 fillHeap·p0.90:   904396.800 us/op
                 fillHeap·p0.95:   909115.392 us/op
                 fillHeap·p0.99:   909115.392 us/op
                 fillHeap·p0.999:  909115.392 us/op
                 fillHeap·p0.9999: 909115.392 us/op
                 fillHeap·p1.00:   909115.392 us/op

Iteration  11: 835016.021 ±(99.9%) 52027.151 us/op
                 fillHeap·p0.00:   763363.328 us/op
                 fillHeap·p0.50:   836763.648 us/op
                 fillHeap·p0.90:   896217.907 us/op
                 fillHeap·p0.95:   902823.936 us/op
                 fillHeap·p0.99:   902823.936 us/op
                 fillHeap·p0.999:  902823.936 us/op
                 fillHeap·p0.9999: 902823.936 us/op
                 fillHeap·p1.00:   902823.936 us/op

Iteration  12: 837200.555 ±(99.9%) 53048.193 us/op
                 fillHeap·p0.00:   769654.784 us/op
                 fillHeap·p0.50:   833093.632 us/op
                 fillHeap·p0.90:   906913.382 us/op
                 fillHeap·p0.95:   912261.120 us/op
                 fillHeap·p0.99:   912261.120 us/op
                 fillHeap·p0.999:  912261.120 us/op
                 fillHeap·p0.9999: 912261.120 us/op
                 fillHeap·p1.00:   912261.120 us/op

Iteration  13: 841482.240 ±(99.9%) 55137.047 us/op
                 fillHeap·p0.00:   773849.088 us/op
                 fillHeap·p0.50:   845676.544 us/op
                 fillHeap·p0.90:   910163.968 us/op
                 fillHeap·p0.95:   916455.424 us/op
                 fillHeap·p0.99:   916455.424 us/op
                 fillHeap·p0.999:  916455.424 us/op
                 fillHeap·p0.9999: 916455.424 us/op
                 fillHeap·p1.00:   916455.424 us/op

Iteration  14: 839385.088 ±(99.9%) 53617.147 us/op
                 fillHeap·p0.00:   774897.664 us/op
                 fillHeap·p0.50:   841482.240 us/op
                 fillHeap·p0.90:   906598.810 us/op
                 fillHeap·p0.95:   912261.120 us/op
                 fillHeap·p0.99:   912261.120 us/op
                 fillHeap·p0.999:  912261.120 us/op
                 fillHeap·p0.9999: 912261.120 us/op
                 fillHeap·p1.00:   912261.120 us/op

Iteration  15: 836588.885 ±(99.9%) 53679.299 us/op
                 fillHeap·p0.00:   769654.784 us/op
                 fillHeap·p0.50:   834142.208 us/op
                 fillHeap·p0.90:   908695.962 us/op
                 fillHeap·p0.95:   917504.000 us/op
                 fillHeap·p0.99:   917504.000 us/op
                 fillHeap·p0.999:  917504.000 us/op
                 fillHeap·p0.9999: 917504.000 us/op
                 fillHeap·p1.00:   917504.000 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 180
  mean = 837788.922 ±(99.9%) 9914.025 us/op

  Histogram, us/op:
    [ 700000.000,  725000.000) = 0 
    [ 725000.000,  750000.000) = 0 
    [ 750000.000,  775000.000) = 14 
    [ 775000.000,  800000.000) = 17 
    [ 800000.000,  825000.000) = 40 
    [ 825000.000,  850000.000) = 43 
    [ 850000.000,  875000.000) = 35 
    [ 875000.000,  900000.000) = 15 
    [ 900000.000,  925000.000) = 16 
    [ 925000.000,  950000.000) = 0 
    [ 950000.000,  975000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 761266.176 us/op
     p(50.0000) = 837287.936 us/op
     p(90.0000) = 896427.622 us/op
     p(95.0000) = 911212.544 us/op
     p(99.0000) = 916654.653 us/op
     p(99.9000) = 917504.000 us/op
     p(99.9900) = 917504.000 us/op
     p(99.9990) = 917504.000 us/op
     p(99.9999) = 917504.000 us/op
    p(100.0000) = 917504.000 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 73.91% complete, ETA 02:11:55
# Fork: 1 of 1
# Warmup Iteration   1: 836239.360 ±(99.9%) 55737.522 us/op
# Warmup Iteration   2: 837986.987 ±(99.9%) 52201.788 us/op
# Warmup Iteration   3: 833093.632 ±(99.9%) 45709.041 us/op
# Warmup Iteration   4: 837375.317 ±(99.9%) 48649.391 us/op
# Warmup Iteration   5: 833268.395 ±(99.9%) 46097.833 us/op
Iteration   1: 835190.784 ±(99.9%) 44479.922 us/op
                 fillHeap·p0.00:   775946.240 us/op
                 fillHeap·p0.50:   835190.784 us/op
                 fillHeap·p0.90:   890031.309 us/op
                 fillHeap·p0.95:   891289.600 us/op
                 fillHeap·p0.99:   891289.600 us/op
                 fillHeap·p0.999:  891289.600 us/op
                 fillHeap·p0.9999: 891289.600 us/op
                 fillHeap·p1.00:   891289.600 us/op

Iteration   2: 833181.013 ±(99.9%) 47167.291 us/op
                 fillHeap·p0.00:   773849.088 us/op
                 fillHeap·p0.50:   827850.752 us/op
                 fillHeap·p0.90:   891184.742 us/op
                 fillHeap·p0.95:   896532.480 us/op
                 fillHeap·p0.99:   896532.480 us/op
                 fillHeap·p0.999:  896532.480 us/op
                 fillHeap·p0.9999: 896532.480 us/op
                 fillHeap·p1.00:   896532.480 us/op

Iteration   3: 835069.794 ±(99.9%) 43115.420 us/op
                 fillHeap·p0.00:   769654.784 us/op
                 fillHeap·p0.50:   834666.496 us/op
                 fillHeap·p0.90:   886466.150 us/op
                 fillHeap·p0.95:   898629.632 us/op
                 fillHeap·p0.99:   898629.632 us/op
                 fillHeap·p0.999:  898629.632 us/op
                 fillHeap·p0.9999: 898629.632 us/op
                 fillHeap·p1.00:   898629.632 us/op

Iteration   4: 835016.021 ±(99.9%) 47884.544 us/op
                 fillHeap·p0.00:   779091.968 us/op
                 fillHeap·p0.50:   834666.496 us/op
                 fillHeap·p0.90:   892862.464 us/op
                 fillHeap·p0.95:   894435.328 us/op
                 fillHeap·p0.99:   894435.328 us/op
                 fillHeap·p0.999:  894435.328 us/op
                 fillHeap·p0.9999: 894435.328 us/op
                 fillHeap·p1.00:   894435.328 us/op

Iteration   5: 833792.683 ±(99.9%) 50441.219 us/op
                 fillHeap·p0.00:   775946.240 us/op
                 fillHeap·p0.50:   829947.904 us/op
                 fillHeap·p0.90:   896951.910 us/op
                 fillHeap·p0.95:   897581.056 us/op
                 fillHeap·p0.99:   897581.056 us/op
                 fillHeap·p0.999:  897581.056 us/op
                 fillHeap·p0.9999: 897581.056 us/op
                 fillHeap·p1.00:   897581.056 us/op

Iteration   6: 836588.885 ±(99.9%) 49842.738 us/op
                 fillHeap·p0.00:   767557.632 us/op
                 fillHeap·p0.50:   839909.376 us/op
                 fillHeap·p0.90:   899468.493 us/op
                 fillHeap·p0.95:   903872.512 us/op
                 fillHeap·p0.99:   903872.512 us/op
                 fillHeap·p0.999:  903872.512 us/op
                 fillHeap·p0.9999: 903872.512 us/op
                 fillHeap·p1.00:   903872.512 us/op

Iteration   7: 837200.555 ±(99.9%) 45145.762 us/op
                 fillHeap·p0.00:   779091.968 us/op
                 fillHeap·p0.50:   834666.496 us/op
                 fillHeap·p0.90:   896742.195 us/op
                 fillHeap·p0.95:   901775.360 us/op
                 fillHeap·p0.99:   901775.360 us/op
                 fillHeap·p0.999:  901775.360 us/op
                 fillHeap·p0.9999: 901775.360 us/op
                 fillHeap·p1.00:   901775.360 us/op

Iteration   8: 834229.589 ±(99.9%) 45532.762 us/op
                 fillHeap·p0.00:   779091.968 us/op
                 fillHeap·p0.50:   835190.784 us/op
                 fillHeap·p0.90:   896847.053 us/op
                 fillHeap·p0.95:   902823.936 us/op
                 fillHeap·p0.99:   902823.936 us/op
                 fillHeap·p0.999:  902823.936 us/op
                 fillHeap·p0.9999: 902823.936 us/op
                 fillHeap·p1.00:   902823.936 us/op

Iteration   9: 835977.216 ±(99.9%) 48816.516 us/op
                 fillHeap·p0.00:   770703.360 us/op
                 fillHeap·p0.50:   835715.072 us/op
                 fillHeap·p0.90:   893072.179 us/op
                 fillHeap·p0.95:   899678.208 us/op
                 fillHeap·p0.99:   899678.208 us/op
                 fillHeap·p0.999:  899678.208 us/op
                 fillHeap·p0.9999: 899678.208 us/op
                 fillHeap·p1.00:   899678.208 us/op

Iteration  10: 833268.395 ±(99.9%) 47041.530 us/op
                 fillHeap·p0.00:   767557.632 us/op
                 fillHeap·p0.50:   838336.512 us/op
                 fillHeap·p0.90:   887200.154 us/op
                 fillHeap·p0.95:   891289.600 us/op
                 fillHeap·p0.99:   891289.600 us/op
                 fillHeap·p0.999:  891289.600 us/op
                 fillHeap·p0.9999: 891289.600 us/op
                 fillHeap·p1.00:   891289.600 us/op

Iteration  11: 832891.983 ±(99.9%) 40013.626 us/op
                 fillHeap·p0.00:   774897.664 us/op
                 fillHeap·p0.50:   833617.920 us/op
                 fillHeap·p0.90:   880803.840 us/op
                 fillHeap·p0.95:   889192.448 us/op
                 fillHeap·p0.99:   889192.448 us/op
                 fillHeap·p0.999:  889192.448 us/op
                 fillHeap·p0.9999: 889192.448 us/op
                 fillHeap·p1.00:   889192.448 us/op

Iteration  12: 835016.021 ±(99.9%) 48591.633 us/op
                 fillHeap·p0.00:   771751.936 us/op
                 fillHeap·p0.50:   829947.904 us/op
                 fillHeap·p0.90:   900307.354 us/op
                 fillHeap·p0.95:   905969.664 us/op
                 fillHeap·p0.99:   905969.664 us/op
                 fillHeap·p0.999:  905969.664 us/op
                 fillHeap·p0.9999: 905969.664 us/op
                 fillHeap·p1.00:   905969.664 us/op

Iteration  13: 833705.301 ±(99.9%) 47775.261 us/op
                 fillHeap·p0.00:   776994.816 us/op
                 fillHeap·p0.50:   833617.920 us/op
                 fillHeap·p0.90:   897056.768 us/op
                 fillHeap·p0.95:   908066.816 us/op
                 fillHeap·p0.99:   908066.816 us/op
                 fillHeap·p0.999:  908066.816 us/op
                 fillHeap·p0.9999: 908066.816 us/op
                 fillHeap·p1.00:   908066.816 us/op

Iteration  14: 837113.173 ±(99.9%) 43615.598 us/op
                 fillHeap·p0.00:   786432.000 us/op
                 fillHeap·p0.50:   833617.920 us/op
                 fillHeap·p0.90:   892023.603 us/op
                 fillHeap·p0.95:   892338.176 us/op
                 fillHeap·p0.99:   892338.176 us/op
                 fillHeap·p0.999:  892338.176 us/op
                 fillHeap·p0.9999: 892338.176 us/op
                 fillHeap·p1.00:   892338.176 us/op

Iteration  15: 838249.131 ±(99.9%) 48307.748 us/op
                 fillHeap·p0.00:   783286.272 us/op
                 fillHeap·p0.50:   834666.496 us/op
                 fillHeap·p0.90:   900621.926 us/op
                 fillHeap·p0.95:   905969.664 us/op
                 fillHeap·p0.99:   905969.664 us/op
                 fillHeap·p0.999:  905969.664 us/op
                 fillHeap·p0.9999: 905969.664 us/op
                 fillHeap·p1.00:   905969.664 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 182
  mean = 835087.079 ±(99.9%) 8734.559 us/op

  Histogram, us/op:
    [ 700000.000,  725000.000) = 0 
    [ 725000.000,  750000.000) = 0 
    [ 750000.000,  775000.000) = 7 
    [ 775000.000,  800000.000) = 23 
    [ 800000.000,  825000.000) = 46 
    [ 825000.000,  850000.000) = 43 
    [ 850000.000,  875000.000) = 36 
    [ 875000.000,  900000.000) = 21 
    [ 900000.000,  925000.000) = 6 
    [ 925000.000,  950000.000) = 0 
    [ 950000.000,  975000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 767557.632 us/op
     p(50.0000) = 833617.920 us/op
     p(90.0000) = 889192.448 us/op
     p(95.0000) = 897423.770 us/op
     p(99.0000) = 906326.180 us/op
     p(99.9000) = 908066.816 us/op
     p(99.9900) = 908066.816 us/op
     p(99.9990) = 908066.816 us/op
     p(99.9999) = 908066.816 us/op
    p(100.0000) = 908066.816 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 74.64% complete, ETA 02:08:14
# Fork: 1 of 1
# Warmup Iteration   1: 913786.321 ±(99.9%) 90194.656 us/op
# Warmup Iteration   2: 911021.894 ±(99.9%) 92293.108 us/op
# Warmup Iteration   3: 910163.968 ±(99.9%) 91575.238 us/op
# Warmup Iteration   4: 908734.092 ±(99.9%) 90800.967 us/op
# Warmup Iteration   5: 911879.820 ±(99.9%) 91862.476 us/op
Iteration   1: 909782.668 ±(99.9%) 92148.197 us/op
                 fillHeap·p0.00:   842006.528 us/op
                 fillHeap·p0.50:   887095.296 us/op
                 fillHeap·p0.90:   1030959.923 us/op
                 fillHeap·p0.95:   1031798.784 us/op
                 fillHeap·p0.99:   1031798.784 us/op
                 fillHeap·p0.999:  1031798.784 us/op
                 fillHeap·p0.9999: 1031798.784 us/op
                 fillHeap·p1.00:   1031798.784 us/op

Iteration   2: 911593.844 ±(99.9%) 91883.078 us/op
                 fillHeap·p0.00:   840957.952 us/op
                 fillHeap·p0.50:   889192.448 us/op
                 fillHeap·p0.90:   1031169.638 us/op
                 fillHeap·p0.95:   1031798.784 us/op
                 fillHeap·p0.99:   1031798.784 us/op
                 fillHeap·p0.999:  1031798.784 us/op
                 fillHeap·p0.9999: 1031798.784 us/op
                 fillHeap·p1.00:   1031798.784 us/op

Iteration   3: 912928.396 ±(99.9%) 91800.644 us/op
                 fillHeap·p0.00:   840957.952 us/op
                 fillHeap·p0.50:   889192.448 us/op
                 fillHeap·p0.90:   1032218.214 us/op
                 fillHeap·p0.95:   1032847.360 us/op
                 fillHeap·p0.99:   1032847.360 us/op
                 fillHeap·p0.999:  1032847.360 us/op
                 fillHeap·p0.9999: 1032847.360 us/op
                 fillHeap·p1.00:   1032847.360 us/op

Iteration   4: 909306.042 ±(99.9%) 91838.539 us/op
                 fillHeap·p0.00:   838860.800 us/op
                 fillHeap·p0.50:   883949.568 us/op
                 fillHeap·p0.90:   1028443.341 us/op
                 fillHeap·p0.95:   1028653.056 us/op
                 fillHeap·p0.99:   1028653.056 us/op
                 fillHeap·p0.999:  1028653.056 us/op
                 fillHeap·p0.9999: 1028653.056 us/op
                 fillHeap·p1.00:   1028653.056 us/op

Iteration   5: 911784.495 ±(99.9%) 93086.187 us/op
                 fillHeap·p0.00:   839909.376 us/op
                 fillHeap·p0.50:   890241.024 us/op
                 fillHeap·p0.90:   1034525.082 us/op
                 fillHeap·p0.95:   1035993.088 us/op
                 fillHeap·p0.99:   1035993.088 us/op
                 fillHeap·p0.999:  1035993.088 us/op
                 fillHeap·p0.9999: 1035993.088 us/op
                 fillHeap·p1.00:   1035993.088 us/op

Iteration   6: 912928.396 ±(99.9%) 91207.686 us/op
                 fillHeap·p0.00:   842006.528 us/op
                 fillHeap·p0.50:   889192.448 us/op
                 fillHeap·p0.90:   1036202.803 us/op
                 fillHeap·p0.95:   1039138.816 us/op
                 fillHeap·p0.99:   1039138.816 us/op
                 fillHeap·p0.999:  1039138.816 us/op
                 fillHeap·p0.9999: 1039138.816 us/op
                 fillHeap·p1.00:   1039138.816 us/op

Iteration   7: 913405.021 ±(99.9%) 91810.223 us/op
                 fillHeap·p0.00:   840957.952 us/op
                 fillHeap·p0.50:   888143.872 us/op
                 fillHeap·p0.90:   1031169.638 us/op
                 fillHeap·p0.95:   1031798.784 us/op
                 fillHeap·p0.99:   1031798.784 us/op
                 fillHeap·p0.999:  1031798.784 us/op
                 fillHeap·p0.9999: 1031798.784 us/op
                 fillHeap·p1.00:   1031798.784 us/op

Iteration   8: 911689.169 ±(99.9%) 91198.673 us/op
                 fillHeap·p0.00:   842006.528 us/op
                 fillHeap·p0.50:   891289.600 us/op
                 fillHeap·p0.90:   1029491.917 us/op
                 fillHeap·p0.95:   1029701.632 us/op
                 fillHeap·p0.99:   1029701.632 us/op
                 fillHeap·p0.999:  1029701.632 us/op
                 fillHeap·p0.9999: 1029701.632 us/op
                 fillHeap·p1.00:   1029701.632 us/op

Iteration   9: 911689.169 ±(99.9%) 90543.728 us/op
                 fillHeap·p0.00:   843055.104 us/op
                 fillHeap·p0.50:   889192.448 us/op
                 fillHeap·p0.90:   1029282.202 us/op
                 fillHeap·p0.95:   1029701.632 us/op
                 fillHeap·p0.99:   1029701.632 us/op
                 fillHeap·p0.999:  1029701.632 us/op
                 fillHeap·p0.9999: 1029701.632 us/op
                 fillHeap·p1.00:   1029701.632 us/op

Iteration  10: 909401.367 ±(99.9%) 91045.721 us/op
                 fillHeap·p0.00:   840957.952 us/op
                 fillHeap·p0.50:   888143.872 us/op
                 fillHeap·p0.90:   1027394.765 us/op
                 fillHeap·p0.95:   1027604.480 us/op
                 fillHeap·p0.99:   1027604.480 us/op
                 fillHeap·p0.999:  1027604.480 us/op
                 fillHeap·p0.9999: 1027604.480 us/op
                 fillHeap·p1.00:   1027604.480 us/op

Iteration  11: 910926.569 ±(99.9%) 93993.872 us/op
                 fillHeap·p0.00:   838860.800 us/op
                 fillHeap·p0.50:   890241.024 us/op
                 fillHeap·p0.90:   1033057.075 us/op
                 fillHeap·p0.95:   1033895.936 us/op
                 fillHeap·p0.99:   1033895.936 us/op
                 fillHeap·p0.999:  1033895.936 us/op
                 fillHeap·p0.9999: 1033895.936 us/op
                 fillHeap·p1.00:   1033895.936 us/op

Iteration  12: 904396.800 ±(99.9%) 82086.872 us/op
                 fillHeap·p0.00:   836763.648 us/op
                 fillHeap·p0.50:   882900.992 us/op
                 fillHeap·p0.90:   1025926.758 us/op
                 fillHeap·p0.95:   1026555.904 us/op
                 fillHeap·p0.99:   1026555.904 us/op
                 fillHeap·p0.999:  1026555.904 us/op
                 fillHeap·p0.9999: 1026555.904 us/op
                 fillHeap·p1.00:   1026555.904 us/op

Iteration  13: 909782.668 ±(99.9%) 91775.441 us/op
                 fillHeap·p0.00:   835715.072 us/op
                 fillHeap·p0.50:   889192.448 us/op
                 fillHeap·p0.90:   1028023.910 us/op
                 fillHeap·p0.95:   1028653.056 us/op
                 fillHeap·p0.99:   1028653.056 us/op
                 fillHeap·p0.999:  1028653.056 us/op
                 fillHeap·p0.9999: 1028653.056 us/op
                 fillHeap·p1.00:   1028653.056 us/op

Iteration  14: 911403.194 ±(99.9%) 90167.732 us/op
                 fillHeap·p0.00:   844103.680 us/op
                 fillHeap·p0.50:   892338.176 us/op
                 fillHeap·p0.90:   1030540.493 us/op
                 fillHeap·p0.95:   1031798.784 us/op
                 fillHeap·p0.99:   1031798.784 us/op
                 fillHeap·p0.999:  1031798.784 us/op
                 fillHeap·p0.9999: 1031798.784 us/op
                 fillHeap·p1.00:   1031798.784 us/op

Iteration  15: 914834.897 ±(99.9%) 92567.379 us/op
                 fillHeap·p0.00:   847249.408 us/op
                 fillHeap·p0.50:   893386.752 us/op
                 fillHeap·p0.90:   1035154.227 us/op
                 fillHeap·p0.95:   1035993.088 us/op
                 fillHeap·p0.99:   1035993.088 us/op
                 fillHeap·p0.999:  1035993.088 us/op
                 fillHeap·p0.9999: 1035993.088 us/op
                 fillHeap·p1.00:   1035993.088 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 166
  mean = 911016.726 ±(99.9%) 16482.876 us/op

  Histogram, us/op:
    [ 800000.000,  825000.000) = 0 
    [ 825000.000,  850000.000) = 29 
    [ 850000.000,  875000.000) = 32 
    [ 875000.000,  900000.000) = 30 
    [ 900000.000,  925000.000) = 15 
    [ 925000.000,  950000.000) = 30 
    [ 950000.000,  975000.000) = 0 
    [ 975000.000, 1000000.000) = 0 
    [1000000.000, 1025000.000) = 2 
    [1025000.000, 1050000.000) = 28 
    [1050000.000, 1075000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 835715.072 us/op
     p(50.0000) = 889192.448 us/op
     p(90.0000) = 1028653.056 us/op
     p(95.0000) = 1031798.784 us/op
     p(99.0000) = 1037031.178 us/op
     p(99.9000) = 1039138.816 us/op
     p(99.9900) = 1039138.816 us/op
     p(99.9990) = 1039138.816 us/op
     p(99.9999) = 1039138.816 us/op
    p(100.0000) = 1039138.816 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 75.36% complete, ETA 02:04:32
# Fork: 1 of 1
# Warmup Iteration   1: 376.365 ±(99.9%) 0.983 us/op
# Warmup Iteration   2: 375.843 ±(99.9%) 0.184 us/op
# Warmup Iteration   3: 375.741 ±(99.9%) 0.209 us/op
# Warmup Iteration   4: 375.152 ±(99.9%) 0.193 us/op
# Warmup Iteration   5: 374.898 ±(99.9%) 0.184 us/op
Iteration   1: 375.156 ±(99.9%) 0.188 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   382.976 us/op
                 read·p0.95:   385.536 us/op
                 read·p0.99:   401.408 us/op
                 read·p0.999:  464.634 us/op
                 read·p0.9999: 641.426 us/op
                 read·p1.00:   951.296 us/op

Iteration   2: 375.414 ±(99.9%) 0.269 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   372.736 us/op
                 read·p0.90:   382.976 us/op
                 read·p0.95:   387.072 us/op
                 read·p0.99:   403.968 us/op
                 read·p0.999:  483.927 us/op
                 read·p0.9999: 849.678 us/op
                 read·p1.00:   922.624 us/op

Iteration   3: 375.154 ±(99.9%) 0.170 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   382.976 us/op
                 read·p0.95:   386.048 us/op
                 read·p0.99:   402.944 us/op
                 read·p0.999:  455.870 us/op
                 read·p0.9999: 533.861 us/op
                 read·p1.00:   614.400 us/op

Iteration   4: 375.050 ±(99.9%) 0.168 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.272 us/op
                 read·p0.90:   382.976 us/op
                 read·p0.95:   386.048 us/op
                 read·p0.99:   402.432 us/op
                 read·p0.999:  463.270 us/op
                 read·p0.9999: 530.185 us/op
                 read·p1.00:   565.248 us/op

Iteration   5: 375.541 ±(99.9%) 0.178 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   383.488 us/op
                 read·p0.95:   387.072 us/op
                 read·p0.99:   408.571 us/op
                 read·p0.999:  460.386 us/op
                 read·p0.9999: 533.358 us/op
                 read·p1.00:   558.080 us/op

Iteration   6: 375.759 ±(99.9%) 0.200 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   384.512 us/op
                 read·p0.95:   389.120 us/op
                 read·p0.99:   419.840 us/op
                 read·p0.999:  486.313 us/op
                 read·p0.9999: 558.031 us/op
                 read·p1.00:   581.632 us/op

Iteration   7: 375.156 ±(99.9%) 0.164 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   382.976 us/op
                 read·p0.95:   386.048 us/op
                 read·p0.99:   401.920 us/op
                 read·p0.999:  451.072 us/op
                 read·p0.9999: 533.909 us/op
                 read·p1.00:   546.816 us/op

Iteration   8: 375.664 ±(99.9%) 0.292 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   383.488 us/op
                 read·p0.95:   387.072 us/op
                 read·p0.99:   404.521 us/op
                 read·p0.999:  480.371 us/op
                 read·p0.9999: 926.068 us/op
                 read·p1.00:   936.960 us/op

Iteration   9: 375.348 ±(99.9%) 0.177 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   383.488 us/op
                 read·p0.95:   386.560 us/op
                 read·p0.99:   407.552 us/op
                 read·p0.999:  478.918 us/op
                 read·p0.9999: 535.915 us/op
                 read·p1.00:   555.008 us/op

Iteration  10: 375.067 ±(99.9%) 0.161 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   382.976 us/op
                 read·p0.95:   386.048 us/op
                 read·p0.99:   402.432 us/op
                 read·p0.999:  448.699 us/op
                 read·p0.9999: 527.735 us/op
                 read·p1.00:   586.752 us/op

Iteration  11: 375.510 ±(99.9%) 0.184 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   383.488 us/op
                 read·p0.95:   387.072 us/op
                 read·p0.99:   408.576 us/op
                 read·p0.999:  478.208 us/op
                 read·p0.9999: 557.847 us/op
                 read·p1.00:   621.568 us/op

Iteration  12: 375.296 ±(99.9%) 0.187 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   382.976 us/op
                 read·p0.95:   386.560 us/op
                 read·p0.99:   407.552 us/op
                 read·p0.999:  481.792 us/op
                 read·p0.9999: 584.826 us/op
                 read·p1.00:   653.312 us/op

Iteration  13: 375.511 ±(99.9%) 0.188 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   383.488 us/op
                 read·p0.95:   387.072 us/op
                 read·p0.99:   406.528 us/op
                 read·p0.999:  479.021 us/op
                 read·p0.9999: 564.130 us/op
                 read·p1.00:   641.024 us/op

Iteration  14: 375.584 ±(99.9%) 0.208 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   384.000 us/op
                 read·p0.95:   387.584 us/op
                 read·p0.99:   407.552 us/op
                 read·p0.999:  481.792 us/op
                 read·p0.9999: 675.052 us/op
                 read·p1.00:   934.912 us/op

Iteration  15: 375.553 ±(99.9%) 0.290 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   382.976 us/op
                 read·p0.95:   386.560 us/op
                 read·p0.99:   406.533 us/op
                 read·p0.999:  499.616 us/op
                 read·p0.9999: 896.515 us/op
                 read·p1.00:   936.960 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  N = 399160
  mean =    375.384 ±(99.9%) 0.053 us/op

  Histogram, us/op:
    [ 300.000,  350.000) = 0 
    [ 350.000,  400.000) = 394269 
    [ 400.000,  450.000) = 4121 
    [ 450.000,  500.000) = 586 
    [ 500.000,  550.000) = 107 
    [ 550.000,  600.000) = 15 
    [ 600.000,  650.000) = 5 
    [ 650.000,  700.000) = 1 
    [ 700.000,  750.000) = 3 
    [ 750.000,  800.000) = 23 
    [ 800.000,  850.000) = 16 
    [ 850.000,  900.000) = 3 
    [ 900.000,  950.000) = 10 

  Percentiles, us/op:
      p(0.0000) =    370.176 us/op
     p(50.0000) =    374.784 us/op
     p(90.0000) =    383.488 us/op
     p(95.0000) =    387.072 us/op
     p(99.0000) =    406.016 us/op
     p(99.9000) =    474.542 us/op
     p(99.9900) =    766.976 us/op
     p(99.9990) =    934.929 us/op
     p(99.9999) =    951.296 us/op
    p(100.0000) =    951.296 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 76.08% complete, ETA 02:00:51
# Fork: 1 of 1
# Warmup Iteration   1: 166.282 ±(99.9%) 0.361 us/op
# Warmup Iteration   2: 164.697 ±(99.9%) 0.086 us/op
# Warmup Iteration   3: 165.915 ±(99.9%) 0.089 us/op
# Warmup Iteration   4: 165.914 ±(99.9%) 0.094 us/op
# Warmup Iteration   5: 164.886 ±(99.9%) 0.087 us/op
Iteration   1: 164.628 ±(99.9%) 0.090 us/op
                 readAndWrite·p0.00:   158.208 us/op
                 readAndWrite·p0.50:   162.816 us/op
                 readAndWrite·p0.90:   169.728 us/op
                 readAndWrite·p0.95:   174.080 us/op
                 readAndWrite·p0.99:   182.784 us/op
                 readAndWrite·p0.999:  239.029 us/op
                 readAndWrite·p0.9999: 318.480 us/op
                 readAndWrite·p1.00:   686.080 us/op

Iteration   2: 164.320 ±(99.9%) 0.086 us/op
                 readAndWrite·p0.00:   158.208 us/op
                 readAndWrite·p0.50:   162.304 us/op
                 readAndWrite·p0.90:   169.472 us/op
                 readAndWrite·p0.95:   173.824 us/op
                 readAndWrite·p0.99:   182.272 us/op
                 readAndWrite·p0.999:  237.886 us/op
                 readAndWrite·p0.9999: 287.829 us/op
                 readAndWrite·p1.00:   739.328 us/op

Iteration   3: 165.816 ±(99.9%) 0.086 us/op
                 readAndWrite·p0.00:   159.232 us/op
                 readAndWrite·p0.50:   163.584 us/op
                 readAndWrite·p0.90:   171.520 us/op
                 readAndWrite·p0.95:   175.104 us/op
                 readAndWrite·p0.99:   184.064 us/op
                 readAndWrite·p0.999:  241.664 us/op
                 readAndWrite·p0.9999: 295.752 us/op
                 readAndWrite·p1.00:   344.576 us/op

Iteration   4: 165.154 ±(99.9%) 0.086 us/op
                 readAndWrite·p0.00:   157.952 us/op
                 readAndWrite·p0.50:   163.328 us/op
                 readAndWrite·p0.90:   171.264 us/op
                 readAndWrite·p0.95:   174.592 us/op
                 readAndWrite·p0.99:   183.296 us/op
                 readAndWrite·p0.999:  239.667 us/op
                 readAndWrite·p0.9999: 297.915 us/op
                 readAndWrite·p1.00:   356.352 us/op

Iteration   5: 165.859 ±(99.9%) 0.090 us/op
                 readAndWrite·p0.00:   157.952 us/op
                 readAndWrite·p0.50:   164.608 us/op
                 readAndWrite·p0.90:   171.776 us/op
                 readAndWrite·p0.95:   175.104 us/op
                 readAndWrite·p0.99:   184.576 us/op
                 readAndWrite·p0.999:  242.638 us/op
                 readAndWrite·p0.9999: 311.015 us/op
                 readAndWrite·p1.00:   411.648 us/op

Iteration   6: 165.939 ±(99.9%) 0.095 us/op
                 readAndWrite·p0.00:   157.952 us/op
                 readAndWrite·p0.50:   163.840 us/op
                 readAndWrite·p0.90:   172.032 us/op
                 readAndWrite·p0.95:   175.616 us/op
                 readAndWrite·p0.99:   185.856 us/op
                 readAndWrite·p0.999:  248.236 us/op
                 readAndWrite·p0.9999: 315.845 us/op
                 readAndWrite·p1.00:   352.256 us/op

Iteration   7: 164.955 ±(99.9%) 0.086 us/op
                 readAndWrite·p0.00:   158.208 us/op
                 readAndWrite·p0.50:   163.072 us/op
                 readAndWrite·p0.90:   169.728 us/op
                 readAndWrite·p0.95:   174.336 us/op
                 readAndWrite·p0.99:   182.784 us/op
                 readAndWrite·p0.999:  239.360 us/op
                 readAndWrite·p0.9999: 315.258 us/op
                 readAndWrite·p1.00:   369.152 us/op

Iteration   8: 164.432 ±(99.9%) 0.088 us/op
                 readAndWrite·p0.00:   158.208 us/op
                 readAndWrite·p0.50:   162.304 us/op
                 readAndWrite·p0.90:   169.216 us/op
                 readAndWrite·p0.95:   173.568 us/op
                 readAndWrite·p0.99:   182.016 us/op
                 readAndWrite·p0.999:  237.384 us/op
                 readAndWrite·p0.9999: 309.537 us/op
                 readAndWrite·p1.00:   711.680 us/op

Iteration   9: 164.742 ±(99.9%) 0.085 us/op
                 readAndWrite·p0.00:   157.696 us/op
                 readAndWrite·p0.50:   163.328 us/op
                 readAndWrite·p0.90:   169.984 us/op
                 readAndWrite·p0.95:   173.824 us/op
                 readAndWrite·p0.99:   183.296 us/op
                 readAndWrite·p0.999:  239.872 us/op
                 readAndWrite·p0.9999: 303.400 us/op
                 readAndWrite·p1.00:   323.584 us/op

Iteration  10: 165.997 ±(99.9%) 0.088 us/op
                 readAndWrite·p0.00:   157.440 us/op
                 readAndWrite·p0.50:   165.888 us/op
                 readAndWrite·p0.90:   172.032 us/op
                 readAndWrite·p0.95:   175.104 us/op
                 readAndWrite·p0.99:   184.576 us/op
                 readAndWrite·p0.999:  239.360 us/op
                 readAndWrite·p0.9999: 303.104 us/op
                 readAndWrite·p1.00:   328.192 us/op

Iteration  11: 165.662 ±(99.9%) 0.094 us/op
                 readAndWrite·p0.00:   158.208 us/op
                 readAndWrite·p0.50:   163.584 us/op
                 readAndWrite·p0.90:   171.264 us/op
                 readAndWrite·p0.95:   175.360 us/op
                 readAndWrite·p0.99:   185.600 us/op
                 readAndWrite·p0.999:  243.968 us/op
                 readAndWrite·p0.9999: 350.194 us/op
                 readAndWrite·p1.00:   407.552 us/op

Iteration  12: 165.664 ±(99.9%) 0.092 us/op
                 readAndWrite·p0.00:   158.208 us/op
                 readAndWrite·p0.50:   164.096 us/op
                 readAndWrite·p0.90:   172.032 us/op
                 readAndWrite·p0.95:   175.360 us/op
                 readAndWrite·p0.99:   185.088 us/op
                 readAndWrite·p0.999:  244.412 us/op
                 readAndWrite·p0.9999: 319.420 us/op
                 readAndWrite·p1.00:   372.224 us/op

Iteration  13: 165.089 ±(99.9%) 0.093 us/op
                 readAndWrite·p0.00:   158.208 us/op
                 readAndWrite·p0.50:   162.816 us/op
                 readAndWrite·p0.90:   171.008 us/op
                 readAndWrite·p0.95:   174.848 us/op
                 readAndWrite·p0.99:   185.344 us/op
                 readAndWrite·p0.999:  244.480 us/op
                 readAndWrite·p0.9999: 333.190 us/op
                 readAndWrite·p1.00:   373.760 us/op

Iteration  14: 165.870 ±(99.9%) 0.132 us/op
                 readAndWrite·p0.00:   158.464 us/op
                 readAndWrite·p0.50:   163.328 us/op
                 readAndWrite·p0.90:   171.776 us/op
                 readAndWrite·p0.95:   176.128 us/op
                 readAndWrite·p0.99:   187.648 us/op
                 readAndWrite·p0.999:  251.343 us/op
                 readAndWrite·p0.9999: 611.269 us/op
                 readAndWrite·p1.00:   737.280 us/op

Iteration  15: 165.471 ±(99.9%) 0.340 us/op
                 readAndWrite·p0.00:   157.952 us/op
                 readAndWrite·p0.50:   163.072 us/op
                 readAndWrite·p0.90:   170.752 us/op
                 readAndWrite·p0.95:   174.848 us/op
                 readAndWrite·p0.99:   187.814 us/op
                 readAndWrite·p0.999:  254.463 us/op
                 readAndWrite·p0.9999: 793.384 us/op
                 readAndWrite·p1.00:   2826.240 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  N = 905939
  mean =    165.305 ±(99.9%) 0.032 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 905365 
    [ 250.000,  500.000) = 544 
    [ 500.000,  750.000) = 24 
    [ 750.000, 1000.000) = 1 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 4 

  Percentiles, us/op:
      p(0.0000) =    157.440 us/op
     p(50.0000) =    163.328 us/op
     p(90.0000) =    171.008 us/op
     p(95.0000) =    174.848 us/op
     p(99.0000) =    184.576 us/op
     p(99.9000) =    242.432 us/op
     p(99.9900) =    326.048 us/op
     p(99.9990) =    727.821 us/op
     p(99.9999) =   2826.240 us/op
    p(100.0000) =   2826.240 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 76.81% complete, ETA 01:57:09
# Fork: 1 of 1
# Warmup Iteration   1: 289.615 ±(99.9%) 0.568 us/op
# Warmup Iteration   2: 292.928 ±(99.9%) 0.143 us/op
# Warmup Iteration   3: 315.871 ±(99.9%) 0.201 us/op
# Warmup Iteration   4: 315.143 ±(99.9%) 0.198 us/op
# Warmup Iteration   5: 314.838 ±(99.9%) 0.195 us/op
Iteration   1: 315.502 ±(99.9%) 0.226 us/op
                 swap·p0.00:   303.104 us/op
                 swap·p0.50:   313.344 us/op
                 swap·p0.90:   327.168 us/op
                 swap·p0.95:   328.704 us/op
                 swap·p0.99:   333.824 us/op
                 swap·p0.999:  374.956 us/op
                 swap·p0.9999: 728.747 us/op
                 swap·p1.00:   751.616 us/op

Iteration   2: 315.291 ±(99.9%) 0.194 us/op
                 swap·p0.00:   303.104 us/op
                 swap·p0.50:   313.344 us/op
                 swap·p0.90:   326.656 us/op
                 swap·p0.95:   328.704 us/op
                 swap·p0.99:   333.824 us/op
                 swap·p0.999:  367.104 us/op
                 swap·p0.9999: 411.971 us/op
                 swap·p1.00:   459.264 us/op

Iteration   3: 315.353 ±(99.9%) 0.197 us/op
                 swap·p0.00:   303.104 us/op
                 swap·p0.50:   313.344 us/op
                 swap·p0.90:   327.168 us/op
                 swap·p0.95:   328.704 us/op
                 swap·p0.99:   333.824 us/op
                 swap·p0.999:  366.244 us/op
                 swap·p0.9999: 442.869 us/op
                 swap·p1.00:   463.360 us/op

Iteration   4: 314.957 ±(99.9%) 0.197 us/op
                 swap·p0.00:   303.104 us/op
                 swap·p0.50:   312.320 us/op
                 swap·p0.90:   326.656 us/op
                 swap·p0.95:   328.704 us/op
                 swap·p0.99:   334.336 us/op
                 swap·p0.999:  373.024 us/op
                 swap·p0.9999: 441.896 us/op
                 swap·p1.00:   471.040 us/op

Iteration   5: 315.336 ±(99.9%) 0.196 us/op
                 swap·p0.00:   303.104 us/op
                 swap·p0.50:   313.344 us/op
                 swap·p0.90:   327.168 us/op
                 swap·p0.95:   328.704 us/op
                 swap·p0.99:   334.336 us/op
                 swap·p0.999:  369.664 us/op
                 swap·p0.9999: 415.559 us/op
                 swap·p1.00:   461.312 us/op

Iteration   6: 315.467 ±(99.9%) 0.199 us/op
                 swap·p0.00:   303.104 us/op
                 swap·p0.50:   313.856 us/op
                 swap·p0.90:   327.168 us/op
                 swap·p0.95:   328.704 us/op
                 swap·p0.99:   334.336 us/op
                 swap·p0.999:  372.564 us/op
                 swap·p0.9999: 457.044 us/op
                 swap·p1.00:   489.472 us/op

Iteration   7: 314.819 ±(99.9%) 0.201 us/op
                 swap·p0.00:   303.104 us/op
                 swap·p0.50:   311.808 us/op
                 swap·p0.90:   326.656 us/op
                 swap·p0.95:   328.704 us/op
                 swap·p0.99:   333.312 us/op
                 swap·p0.999:  361.472 us/op
                 swap·p0.9999: 560.471 us/op
                 swap·p1.00:   684.032 us/op

Iteration   8: 315.411 ±(99.9%) 0.254 us/op
                 swap·p0.00:   303.104 us/op
                 swap·p0.50:   312.832 us/op
                 swap·p0.90:   327.168 us/op
                 swap·p0.95:   328.704 us/op
                 swap·p0.99:   335.360 us/op
                 swap·p0.999:  390.794 us/op
                 swap·p0.9999: 758.932 us/op
                 swap·p1.00:   860.160 us/op

Iteration   9: 315.872 ±(99.9%) 0.195 us/op
                 swap·p0.00:   303.104 us/op
                 swap·p0.50:   315.392 us/op
                 swap·p0.90:   327.168 us/op
                 swap·p0.95:   328.704 us/op
                 swap·p0.99:   333.312 us/op
                 swap·p0.999:  359.615 us/op
                 swap·p0.9999: 415.352 us/op
                 swap·p1.00:   474.624 us/op

Iteration  10: 315.526 ±(99.9%) 0.196 us/op
                 swap·p0.00:   303.104 us/op
                 swap·p0.50:   313.856 us/op
                 swap·p0.90:   327.168 us/op
                 swap·p0.95:   328.704 us/op
                 swap·p0.99:   334.336 us/op
                 swap·p0.999:  364.205 us/op
                 swap·p0.9999: 425.220 us/op
                 swap·p1.00:   454.144 us/op

Iteration  11: 315.501 ±(99.9%) 0.200 us/op
                 swap·p0.00:   303.104 us/op
                 swap·p0.50:   313.856 us/op
                 swap·p0.90:   327.168 us/op
                 swap·p0.95:   328.704 us/op
                 swap·p0.99:   333.824 us/op
                 swap·p0.999:  375.808 us/op
                 swap·p0.9999: 456.280 us/op
                 swap·p1.00:   547.840 us/op

Iteration  12: 315.499 ±(99.9%) 0.203 us/op
                 swap·p0.00:   303.104 us/op
                 swap·p0.50:   313.856 us/op
                 swap·p0.90:   327.168 us/op
                 swap·p0.95:   328.704 us/op
                 swap·p0.99:   334.336 us/op
                 swap·p0.999:  377.347 us/op
                 swap·p0.9999: 467.628 us/op
                 swap·p1.00:   493.056 us/op

Iteration  13: 315.465 ±(99.9%) 0.199 us/op
                 swap·p0.00:   303.104 us/op
                 swap·p0.50:   313.856 us/op
                 swap·p0.90:   327.168 us/op
                 swap·p0.95:   328.704 us/op
                 swap·p0.99:   333.824 us/op
                 swap·p0.999:  375.808 us/op
                 swap·p0.9999: 473.769 us/op
                 swap·p1.00:   502.272 us/op

Iteration  14: 315.617 ±(99.9%) 0.225 us/op
                 swap·p0.00:   303.104 us/op
                 swap·p0.50:   313.856 us/op
                 swap·p0.90:   327.168 us/op
                 swap·p0.95:   328.704 us/op
                 swap·p0.99:   333.824 us/op
                 swap·p0.999:  375.808 us/op
                 swap·p0.9999: 684.887 us/op
                 swap·p1.00:   732.160 us/op

Iteration  15: 315.172 ±(99.9%) 0.222 us/op
                 swap·p0.00:   303.104 us/op
                 swap·p0.50:   312.320 us/op
                 swap·p0.90:   326.656 us/op
                 swap·p0.95:   328.704 us/op
                 swap·p0.99:   334.336 us/op
                 swap·p0.999:  375.808 us/op
                 swap·p0.9999: 712.183 us/op
                 swap·p1.00:   770.048 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  N = 475124
  mean =    315.386 ±(99.9%) 0.054 us/op

  Histogram, us/op:
    [300.000, 350.000) = 473966 
    [350.000, 400.000) = 966 
    [400.000, 450.000) = 113 
    [450.000, 500.000) = 31 
    [500.000, 550.000) = 7 
    [550.000, 600.000) = 4 
    [600.000, 650.000) = 7 
    [650.000, 700.000) = 12 
    [700.000, 750.000) = 13 
    [750.000, 800.000) = 4 
    [800.000, 850.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    303.104 us/op
     p(50.0000) =    313.344 us/op
     p(90.0000) =    327.168 us/op
     p(95.0000) =    328.704 us/op
     p(99.0000) =    333.824 us/op
     p(99.9000) =    373.760 us/op
     p(99.9900) =    500.224 us/op
     p(99.9990) =    754.927 us/op
     p(99.9999) =    860.160 us/op
    p(100.0000) =    860.160 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 77.53% complete, ETA 01:53:28
# Fork: 1 of 1
# Warmup Iteration   1: 181.211 ±(99.9%) 0.311 us/op
# Warmup Iteration   2: 177.475 ±(99.9%) 0.095 us/op
# Warmup Iteration   3: 179.631 ±(99.9%) 0.105 us/op
# Warmup Iteration   4: 177.619 ±(99.9%) 0.099 us/op
# Warmup Iteration   5: 179.609 ±(99.9%) 0.104 us/op
Iteration   1: 179.056 ±(99.9%) 0.148 us/op
                 write·p0.00:   170.240 us/op
                 write·p0.50:   177.152 us/op
                 write·p0.90:   185.600 us/op
                 write·p0.95:   189.184 us/op
                 write·p0.99:   199.936 us/op
                 write·p0.999:  265.728 us/op
                 write·p0.9999: 647.446 us/op
                 write·p1.00:   750.592 us/op

Iteration   2: 177.646 ±(99.9%) 0.103 us/op
                 write·p0.00:   169.472 us/op
                 write·p0.50:   176.128 us/op
                 write·p0.90:   184.576 us/op
                 write·p0.95:   188.160 us/op
                 write·p0.99:   199.680 us/op
                 write·p0.999:  257.024 us/op
                 write·p0.9999: 327.168 us/op
                 write·p1.00:   347.648 us/op

Iteration   3: 179.719 ±(99.9%) 0.108 us/op
                 write·p0.00:   170.240 us/op
                 write·p0.50:   178.176 us/op
                 write·p0.90:   186.368 us/op
                 write·p0.95:   190.208 us/op
                 write·p0.99:   201.984 us/op
                 write·p0.999:  263.168 us/op
                 write·p0.9999: 364.942 us/op
                 write·p1.00:   415.744 us/op

Iteration   4: 179.664 ±(99.9%) 0.103 us/op
                 write·p0.00:   169.472 us/op
                 write·p0.50:   179.200 us/op
                 write·p0.90:   186.112 us/op
                 write·p0.95:   189.440 us/op
                 write·p0.99:   200.448 us/op
                 write·p0.999:  260.570 us/op
                 write·p0.9999: 344.677 us/op
                 write·p1.00:   517.120 us/op

Iteration   5: 177.298 ±(99.9%) 0.098 us/op
                 write·p0.00:   168.960 us/op
                 write·p0.50:   175.616 us/op
                 write·p0.90:   183.552 us/op
                 write·p0.95:   188.160 us/op
                 write·p0.99:   197.888 us/op
                 write·p0.999:  257.887 us/op
                 write·p0.9999: 328.410 us/op
                 write·p1.00:   369.664 us/op

Iteration   6: 178.234 ±(99.9%) 0.098 us/op
                 write·p0.00:   169.472 us/op
                 write·p0.50:   176.640 us/op
                 write·p0.90:   184.832 us/op
                 write·p0.95:   188.416 us/op
                 write·p0.99:   198.912 us/op
                 write·p0.999:  256.251 us/op
                 write·p0.9999: 322.764 us/op
                 write·p1.00:   358.912 us/op

Iteration   7: 179.333 ±(99.9%) 0.149 us/op
                 write·p0.00:   170.752 us/op
                 write·p0.50:   177.664 us/op
                 write·p0.90:   185.856 us/op
                 write·p0.95:   189.440 us/op
                 write·p0.99:   199.936 us/op
                 write·p0.999:  266.752 us/op
                 write·p0.9999: 656.300 us/op
                 write·p1.00:   741.376 us/op

Iteration   8: 177.536 ±(99.9%) 0.096 us/op
                 write·p0.00:   169.216 us/op
                 write·p0.50:   176.128 us/op
                 write·p0.90:   183.296 us/op
                 write·p0.95:   187.648 us/op
                 write·p0.99:   197.376 us/op
                 write·p0.999:  255.488 us/op
                 write·p0.9999: 337.863 us/op
                 write·p1.00:   386.048 us/op

Iteration   9: 178.124 ±(99.9%) 0.093 us/op
                 write·p0.00:   169.728 us/op
                 write·p0.50:   176.384 us/op
                 write·p0.90:   184.064 us/op
                 write·p0.95:   187.904 us/op
                 write·p0.99:   197.632 us/op
                 write·p0.999:  253.952 us/op
                 write·p0.9999: 308.816 us/op
                 write·p1.00:   378.880 us/op

Iteration  10: 176.540 ±(99.9%) 0.093 us/op
                 write·p0.00:   169.216 us/op
                 write·p0.50:   175.360 us/op
                 write·p0.90:   182.272 us/op
                 write·p0.95:   186.368 us/op
                 write·p0.99:   196.608 us/op
                 write·p0.999:  256.141 us/op
                 write·p0.9999: 313.042 us/op
                 write·p1.00:   359.936 us/op

Iteration  11: 178.098 ±(99.9%) 0.103 us/op
                 write·p0.00:   170.496 us/op
                 write·p0.50:   175.616 us/op
                 write·p0.90:   184.832 us/op
                 write·p0.95:   188.160 us/op
                 write·p0.99:   198.656 us/op
                 write·p0.999:  258.271 us/op
                 write·p0.9999: 355.448 us/op
                 write·p1.00:   463.872 us/op

Iteration  12: 178.236 ±(99.9%) 0.101 us/op
                 write·p0.00:   169.728 us/op
                 write·p0.50:   176.384 us/op
                 write·p0.90:   184.576 us/op
                 write·p0.95:   188.416 us/op
                 write·p0.99:   198.912 us/op
                 write·p0.999:  260.582 us/op
                 write·p0.9999: 345.699 us/op
                 write·p1.00:   439.296 us/op

Iteration  13: 178.494 ±(99.9%) 0.165 us/op
                 write·p0.00:   169.472 us/op
                 write·p0.50:   176.640 us/op
                 write·p0.90:   185.088 us/op
                 write·p0.95:   188.928 us/op
                 write·p0.99:   201.472 us/op
                 write·p0.999:  266.240 us/op
                 write·p0.9999: 378.703 us/op
                 write·p1.00:   2129.920 us/op

Iteration  14: 177.782 ±(99.9%) 0.115 us/op
                 write·p0.00:   169.984 us/op
                 write·p0.50:   176.384 us/op
                 write·p0.90:   183.552 us/op
                 write·p0.95:   187.904 us/op
                 write·p0.99:   198.400 us/op
                 write·p0.999:  258.518 us/op
                 write·p0.9999: 544.392 us/op
                 write·p1.00:   652.288 us/op

Iteration  15: 178.648 ±(99.9%) 0.106 us/op
                 write·p0.00:   169.216 us/op
                 write·p0.50:   177.920 us/op
                 write·p0.90:   185.600 us/op
                 write·p0.95:   188.928 us/op
                 write·p0.99:   198.912 us/op
                 write·p0.999:  258.332 us/op
                 write·p0.9999: 334.275 us/op
                 write·p1.00:   621.568 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  N = 840019
  mean =    178.290 ±(99.9%) 0.030 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 838611 
    [ 250.000,  500.000) = 1364 
    [ 500.000,  750.000) = 41 
    [ 750.000, 1000.000) = 2 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 1 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    168.960 us/op
     p(50.0000) =    176.640 us/op
     p(90.0000) =    184.832 us/op
     p(95.0000) =    188.416 us/op
     p(99.0000) =    199.168 us/op
     p(99.9000) =    259.840 us/op
     p(99.9900) =    354.304 us/op
     p(99.9990) =    708.805 us/op
     p(99.9999) =   2129.920 us/op
    p(100.0000) =   2129.920 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 78.26% complete, ETA 01:49:47
# Fork: 1 of 1
# Warmup Iteration   1: 1226134.869 ±(99.9%) 110701.940 us/op
# Warmup Iteration   2: 1331691.520 ±(99.9%) 3712.263 us/op
# Warmup Iteration   3: 1331953.664 ±(99.9%) 1417.644 us/op
# Warmup Iteration   4: 1331429.376 ±(99.9%) 2569.698 us/op
# Warmup Iteration   5: 1332215.808 ±(99.9%) 4150.437 us/op
Iteration   1: 1331429.376 ±(99.9%) 5845.096 us/op
                 sumBigDecimals·p0.00:   1327497.216 us/op
                 sumBigDecimals·p0.50:   1331691.520 us/op
                 sumBigDecimals·p0.90:   1335885.824 us/op
                 sumBigDecimals·p0.95:   1335885.824 us/op
                 sumBigDecimals·p0.99:   1335885.824 us/op
                 sumBigDecimals·p0.999:  1335885.824 us/op
                 sumBigDecimals·p0.9999: 1335885.824 us/op
                 sumBigDecimals·p1.00:   1335885.824 us/op

Iteration   2: 1332215.808 ±(99.9%) 4150.437 us/op
                 sumBigDecimals·p0.00:   1329594.368 us/op
                 sumBigDecimals·p0.50:   1331691.520 us/op
                 sumBigDecimals·p0.90:   1335885.824 us/op
                 sumBigDecimals·p0.95:   1335885.824 us/op
                 sumBigDecimals·p0.99:   1335885.824 us/op
                 sumBigDecimals·p0.999:  1335885.824 us/op
                 sumBigDecimals·p0.9999: 1335885.824 us/op
                 sumBigDecimals·p1.00:   1335885.824 us/op

Iteration   3: 1330905.088 ±(99.9%) 4252.932 us/op
                 sumBigDecimals·p0.00:   1327497.216 us/op
                 sumBigDecimals·p0.50:   1330642.944 us/op
                 sumBigDecimals·p0.90:   1333788.672 us/op
                 sumBigDecimals·p0.95:   1333788.672 us/op
                 sumBigDecimals·p0.99:   1333788.672 us/op
                 sumBigDecimals·p0.999:  1333788.672 us/op
                 sumBigDecimals·p0.9999: 1333788.672 us/op
                 sumBigDecimals·p1.00:   1333788.672 us/op

Iteration   4: 1331691.520 ±(99.9%) 2143.276 us/op
                 sumBigDecimals·p0.00:   1329594.368 us/op
                 sumBigDecimals·p0.50:   1331691.520 us/op
                 sumBigDecimals·p0.90:   1333788.672 us/op
                 sumBigDecimals·p0.95:   1333788.672 us/op
                 sumBigDecimals·p0.99:   1333788.672 us/op
                 sumBigDecimals·p0.999:  1333788.672 us/op
                 sumBigDecimals·p0.9999: 1333788.672 us/op
                 sumBigDecimals·p1.00:   1333788.672 us/op

Iteration   5: 1331167.232 ±(99.9%) 3554.221 us/op
                 sumBigDecimals·p0.00:   1327497.216 us/op
                 sumBigDecimals·p0.50:   1331691.520 us/op
                 sumBigDecimals·p0.90:   1333788.672 us/op
                 sumBigDecimals·p0.95:   1333788.672 us/op
                 sumBigDecimals·p0.99:   1333788.672 us/op
                 sumBigDecimals·p0.999:  1333788.672 us/op
                 sumBigDecimals·p0.9999: 1333788.672 us/op
                 sumBigDecimals·p1.00:   1333788.672 us/op

Iteration   6: 1335623.680 ±(99.9%) 5437.969 us/op
                 sumBigDecimals·p0.00:   1331691.520 us/op
                 sumBigDecimals·p0.50:   1334837.248 us/op
                 sumBigDecimals·p0.90:   1340080.128 us/op
                 sumBigDecimals·p0.95:   1340080.128 us/op
                 sumBigDecimals·p0.99:   1340080.128 us/op
                 sumBigDecimals·p0.999:  1340080.128 us/op
                 sumBigDecimals·p0.9999: 1340080.128 us/op
                 sumBigDecimals·p1.00:   1340080.128 us/op

Iteration   7: 1330642.944 ±(99.9%) 3712.263 us/op
                 sumBigDecimals·p0.00:   1327497.216 us/op
                 sumBigDecimals·p0.50:   1330642.944 us/op
                 sumBigDecimals·p0.90:   1333788.672 us/op
                 sumBigDecimals·p0.95:   1333788.672 us/op
                 sumBigDecimals·p0.99:   1333788.672 us/op
                 sumBigDecimals·p0.999:  1333788.672 us/op
                 sumBigDecimals·p0.9999: 1333788.672 us/op
                 sumBigDecimals·p1.00:   1333788.672 us/op

Iteration   8: 1331953.664 ±(99.9%) 3973.740 us/op
                 sumBigDecimals·p0.00:   1329594.368 us/op
                 sumBigDecimals·p0.50:   1331691.520 us/op
                 sumBigDecimals·p0.90:   1335885.824 us/op
                 sumBigDecimals·p0.95:   1335885.824 us/op
                 sumBigDecimals·p0.99:   1335885.824 us/op
                 sumBigDecimals·p0.999:  1335885.824 us/op
                 sumBigDecimals·p0.9999: 1335885.824 us/op
                 sumBigDecimals·p1.00:   1335885.824 us/op

Iteration   9: 1330642.944 ±(99.9%) 4792.511 us/op
                 sumBigDecimals·p0.00:   1325400.064 us/op
                 sumBigDecimals·p0.50:   1331691.520 us/op
                 sumBigDecimals·p0.90:   1333788.672 us/op
                 sumBigDecimals·p0.95:   1333788.672 us/op
                 sumBigDecimals·p0.99:   1333788.672 us/op
                 sumBigDecimals·p0.999:  1333788.672 us/op
                 sumBigDecimals·p0.9999: 1333788.672 us/op
                 sumBigDecimals·p1.00:   1333788.672 us/op

Iteration  10: 1332215.808 ±(99.9%) 2835.288 us/op
                 sumBigDecimals·p0.00:   1329594.368 us/op
                 sumBigDecimals·p0.50:   1331691.520 us/op
                 sumBigDecimals·p0.90:   1333788.672 us/op
                 sumBigDecimals·p0.95:   1333788.672 us/op
                 sumBigDecimals·p0.99:   1333788.672 us/op
                 sumBigDecimals·p0.999:  1333788.672 us/op
                 sumBigDecimals·p0.9999: 1333788.672 us/op
                 sumBigDecimals·p1.00:   1333788.672 us/op

Iteration  11: 1335885.824 ±(99.9%) 5249.933 us/op
                 sumBigDecimals·p0.00:   1331691.520 us/op
                 sumBigDecimals·p0.50:   1335885.824 us/op
                 sumBigDecimals·p0.90:   1340080.128 us/op
                 sumBigDecimals·p0.95:   1340080.128 us/op
                 sumBigDecimals·p0.99:   1340080.128 us/op
                 sumBigDecimals·p0.999:  1340080.128 us/op
                 sumBigDecimals·p0.9999: 1340080.128 us/op
                 sumBigDecimals·p1.00:   1340080.128 us/op

Iteration  12: 1330380.800 ±(99.9%) 2983.314 us/op
                 sumBigDecimals·p0.00:   1329594.368 us/op
                 sumBigDecimals·p0.50:   1329594.368 us/op
                 sumBigDecimals·p0.90:   1333788.672 us/op
                 sumBigDecimals·p0.95:   1333788.672 us/op
                 sumBigDecimals·p0.99:   1333788.672 us/op
                 sumBigDecimals·p0.999:  1333788.672 us/op
                 sumBigDecimals·p0.9999: 1333788.672 us/op
                 sumBigDecimals·p1.00:   1333788.672 us/op

Iteration  13: 1331691.520 ±(99.9%) 4286.552 us/op
                 sumBigDecimals·p0.00:   1327497.216 us/op
                 sumBigDecimals·p0.50:   1331691.520 us/op
                 sumBigDecimals·p0.90:   1333788.672 us/op
                 sumBigDecimals·p0.95:   1333788.672 us/op
                 sumBigDecimals·p0.99:   1333788.672 us/op
                 sumBigDecimals·p0.999:  1333788.672 us/op
                 sumBigDecimals·p0.9999: 1333788.672 us/op
                 sumBigDecimals·p1.00:   1333788.672 us/op

Iteration  14: 1331167.232 ±(99.9%) 5139.396 us/op
                 sumBigDecimals·p0.00:   1327497.216 us/op
                 sumBigDecimals·p0.50:   1331691.520 us/op
                 sumBigDecimals·p0.90:   1333788.672 us/op
                 sumBigDecimals·p0.95:   1333788.672 us/op
                 sumBigDecimals·p0.99:   1333788.672 us/op
                 sumBigDecimals·p0.999:  1333788.672 us/op
                 sumBigDecimals·p0.9999: 1333788.672 us/op
                 sumBigDecimals·p1.00:   1333788.672 us/op

Iteration  15: 1330905.088 ±(99.9%) 5222.518 us/op
                 sumBigDecimals·p0.00:   1325400.064 us/op
                 sumBigDecimals·p0.50:   1331691.520 us/op
                 sumBigDecimals·p0.90:   1333788.672 us/op
                 sumBigDecimals·p0.95:   1333788.672 us/op
                 sumBigDecimals·p0.99:   1333788.672 us/op
                 sumBigDecimals·p0.999:  1333788.672 us/op
                 sumBigDecimals·p0.9999: 1333788.672 us/op
                 sumBigDecimals·p1.00:   1333788.672 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  N = 120
  mean = 1331901.235 ±(99.9%) 826.469 us/op

  Histogram, us/op:
    [1320000.000, 1322500.000) = 0 
    [1322500.000, 1325000.000) = 0 
    [1325000.000, 1327500.000) = 10 
    [1327500.000, 1330000.000) = 26 
    [1330000.000, 1332500.000) = 44 
    [1332500.000, 1335000.000) = 28 
    [1335000.000, 1337500.000) = 6 
    [1337500.000, 1340000.000) = 4 
    [1340000.000, 1342500.000) = 2 
    [1342500.000, 1345000.000) = 0 
    [1345000.000, 1347500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1325400.064 us/op
     p(50.0000) = 1331691.520 us/op
     p(90.0000) = 1335676.109 us/op
     p(95.0000) = 1337878.118 us/op
     p(99.0000) = 1340080.128 us/op
     p(99.9000) = 1340080.128 us/op
     p(99.9900) = 1340080.128 us/op
     p(99.9990) = 1340080.128 us/op
     p(99.9999) = 1340080.128 us/op
    p(100.0000) = 1340080.128 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 78.98% complete, ETA 01:46:10
# Fork: 1 of 1
# Warmup Iteration   1: 126844.513 ±(99.9%) 1524.413 us/op
# Warmup Iteration   2: 126382.899 ±(99.9%) 185.021 us/op
# Warmup Iteration   3: 133158.804 ±(99.9%) 155.913 us/op
# Warmup Iteration   4: 126300.979 ±(99.9%) 206.072 us/op
# Warmup Iteration   5: 124164.020 ±(99.9%) 118.902 us/op
Iteration   1: 125960.192 ±(99.9%) 132.880 us/op
                 countUppercase·p0.00:   125435.904 us/op
                 countUppercase·p0.50:   125960.192 us/op
                 countUppercase·p0.90:   126484.480 us/op
                 countUppercase·p0.95:   126740.070 us/op
                 countUppercase·p0.99:   126877.696 us/op
                 countUppercase·p0.999:  126877.696 us/op
                 countUppercase·p0.9999: 126877.696 us/op
                 countUppercase·p1.00:   126877.696 us/op

Iteration   2: 126061.773 ±(99.9%) 134.536 us/op
                 countUppercase·p0.00:   125566.976 us/op
                 countUppercase·p0.50:   125960.192 us/op
                 countUppercase·p0.90:   126615.552 us/op
                 countUppercase·p0.95:   126746.624 us/op
                 countUppercase·p0.99:   127401.984 us/op
                 countUppercase·p0.999:  127401.984 us/op
                 countUppercase·p0.9999: 127401.984 us/op
                 countUppercase·p1.00:   127401.984 us/op

Iteration   3: 125468.672 ±(99.9%) 130.102 us/op
                 countUppercase·p0.00:   124780.544 us/op
                 countUppercase·p0.50:   125435.904 us/op
                 countUppercase·p0.90:   125960.192 us/op
                 countUppercase·p0.95:   126084.710 us/op
                 countUppercase·p0.99:   126222.336 us/op
                 countUppercase·p0.999:  126222.336 us/op
                 countUppercase·p0.9999: 126222.336 us/op
                 countUppercase·p1.00:   126222.336 us/op

Iteration   4: 128695.900 ±(99.9%) 871.583 us/op
                 countUppercase·p0.00:   127401.984 us/op
                 countUppercase·p0.50:   127795.200 us/op
                 countUppercase·p0.90:   134217.728 us/op
                 countUppercase·p0.95:   134492.979 us/op
                 countUppercase·p0.99:   135004.160 us/op
                 countUppercase·p0.999:  135004.160 us/op
                 countUppercase·p0.9999: 135004.160 us/op
                 countUppercase·p1.00:   135004.160 us/op

Iteration   5: 127443.462 ±(99.9%) 148.139 us/op
                 countUppercase·p0.00:   126877.696 us/op
                 countUppercase·p0.50:   127401.984 us/op
                 countUppercase·p0.90:   128057.344 us/op
                 countUppercase·p0.95:   128188.416 us/op
                 countUppercase·p0.99:   128450.560 us/op
                 countUppercase·p0.999:  128450.560 us/op
                 countUppercase·p0.9999: 128450.560 us/op
                 countUppercase·p1.00:   128450.560 us/op

Iteration   6: 126212.506 ±(99.9%) 139.588 us/op
                 countUppercase·p0.00:   125698.048 us/op
                 countUppercase·p0.50:   126222.336 us/op
                 countUppercase·p0.90:   126615.552 us/op
                 countUppercase·p0.95:   126746.624 us/op
                 countUppercase·p0.99:   127533.056 us/op
                 countUppercase·p0.999:  127533.056 us/op
                 countUppercase·p0.9999: 127533.056 us/op
                 countUppercase·p1.00:   127533.056 us/op

Iteration   7: 132667.284 ±(99.9%) 149.103 us/op
                 countUppercase·p0.00:   132120.576 us/op
                 countUppercase·p0.50:   132644.864 us/op
                 countUppercase·p0.90:   133169.152 us/op
                 countUppercase·p0.95:   133300.224 us/op
                 countUppercase·p0.99:   133693.440 us/op
                 countUppercase·p0.999:  133693.440 us/op
                 countUppercase·p0.9999: 133693.440 us/op
                 countUppercase·p1.00:   133693.440 us/op

Iteration   8: 126302.618 ±(99.9%) 167.455 us/op
                 countUppercase·p0.00:   125566.976 us/op
                 countUppercase·p0.50:   126222.336 us/op
                 countUppercase·p0.90:   126864.589 us/op
                 countUppercase·p0.95:   127270.912 us/op
                 countUppercase·p0.99:   127533.056 us/op
                 countUppercase·p0.999:  127533.056 us/op
                 countUppercase·p0.9999: 127533.056 us/op
                 countUppercase·p1.00:   127533.056 us/op

Iteration   9: 126222.336 ±(99.9%) 166.219 us/op
                 countUppercase·p0.00:   125698.048 us/op
                 countUppercase·p0.50:   126091.264 us/op
                 countUppercase·p0.90:   126746.624 us/op
                 countUppercase·p0.95:   126871.142 us/op
                 countUppercase·p0.99:   128188.416 us/op
                 countUppercase·p0.999:  128188.416 us/op
                 countUppercase·p0.9999: 128188.416 us/op
                 countUppercase·p1.00:   128188.416 us/op

Iteration  10: 122013.646 ±(99.9%) 137.407 us/op
                 countUppercase·p0.00:   121503.744 us/op
                 countUppercase·p0.50:   122028.032 us/op
                 countUppercase·p0.90:   122552.320 us/op
                 countUppercase·p0.95:   122683.392 us/op
                 countUppercase·p0.99:   123076.608 us/op
                 countUppercase·p0.999:  123076.608 us/op
                 countUppercase·p0.9999: 123076.608 us/op
                 countUppercase·p1.00:   123076.608 us/op

Iteration  11: 121233.704 ±(99.9%) 116.141 us/op
                 countUppercase·p0.00:   120717.312 us/op
                 countUppercase·p0.50:   121241.600 us/op
                 countUppercase·p0.90:   121634.816 us/op
                 countUppercase·p0.95:   121870.746 us/op
                 countUppercase·p0.99:   121896.960 us/op
                 countUppercase·p0.999:  121896.960 us/op
                 countUppercase·p0.9999: 121896.960 us/op
                 countUppercase·p1.00:   121896.960 us/op

Iteration  12: 131402.233 ±(99.9%) 185.960 us/op
                 countUppercase·p0.00:   130678.784 us/op
                 countUppercase·p0.50:   131334.144 us/op
                 countUppercase·p0.90:   132251.648 us/op
                 countUppercase·p0.95:   132264.755 us/op
                 countUppercase·p0.99:   132513.792 us/op
                 countUppercase·p0.999:  132513.792 us/op
                 countUppercase·p0.9999: 132513.792 us/op
                 countUppercase·p1.00:   132513.792 us/op

Iteration  13: 122637.037 ±(99.9%) 126.520 us/op
                 countUppercase·p0.00:   122028.032 us/op
                 countUppercase·p0.50:   122552.320 us/op
                 countUppercase·p0.90:   123076.608 us/op
                 countUppercase·p0.95:   123338.752 us/op
                 countUppercase·p0.99:   123469.824 us/op
                 countUppercase·p0.999:  123469.824 us/op
                 countUppercase·p0.9999: 123469.824 us/op
                 countUppercase·p1.00:   123469.824 us/op

Iteration  14: 126466.458 ±(99.9%) 108.616 us/op
                 countUppercase·p0.00:   125960.192 us/op
                 countUppercase·p0.50:   126484.480 us/op
                 countUppercase·p0.90:   126877.696 us/op
                 countUppercase·p0.95:   127008.768 us/op
                 countUppercase·p0.99:   127139.840 us/op
                 countUppercase·p0.999:  127139.840 us/op
                 countUppercase·p0.9999: 127139.840 us/op
                 countUppercase·p1.00:   127139.840 us/op

Iteration  15: 126842.854 ±(99.9%) 126.321 us/op
                 countUppercase·p0.00:   126353.408 us/op
                 countUppercase·p0.50:   126877.696 us/op
                 countUppercase·p0.90:   127270.912 us/op
                 countUppercase·p0.95:   127401.984 us/op
                 countUppercase·p0.99:   127795.200 us/op
                 countUppercase·p0.999:  127795.200 us/op
                 countUppercase·p0.9999: 127795.200 us/op
                 countUppercase·p1.00:   127795.200 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 1196
  mean = 126310.119 ±(99.9%) 289.532 us/op

  Histogram, us/op:
    [120000.000, 121250.000) = 51 
    [121250.000, 122500.000) = 133 
    [122500.000, 123750.000) = 63 
    [123750.000, 125000.000) = 5 
    [125000.000, 126250.000) = 373 
    [126250.000, 127500.000) = 311 
    [127500.000, 128750.000) = 94 
    [128750.000, 130000.000) = 2 
    [130000.000, 131250.000) = 36 
    [131250.000, 132500.000) = 66 
    [132500.000, 133750.000) = 53 
    [133750.000, 135000.000) = 7 
    [135000.000, 136250.000) = 2 
    [136250.000, 137500.000) = 0 
    [137500.000, 138750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 120717.312 us/op
     p(50.0000) = 126222.336 us/op
     p(90.0000) = 131465.216 us/op
     p(95.0000) = 132513.792 us/op
     p(99.0000) = 133308.088 us/op
     p(99.9000) = 135004.160 us/op
     p(99.9900) = 135004.160 us/op
     p(99.9990) = 135004.160 us/op
     p(99.9999) = 135004.160 us/op
    p(100.0000) = 135004.160 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 79.71% complete, ETA 01:42:29
# Fork: 1 of 1
# Warmup Iteration   1: 3034578.944 ±(99.9%) 166343.079 us/op
# Warmup Iteration   2: 3344258.389 ±(99.9%) 44178.680 us/op
# Warmup Iteration   3: 3383405.227 ±(99.9%) 44178.680 us/op
# Warmup Iteration   4: 3354045.099 ±(99.9%) 116885.801 us/op
# Warmup Iteration   5: 3344258.389 ±(99.9%) 44178.680 us/op
Iteration   1: 3391793.835 ±(99.9%) 309250.762 us/op
                 countUppercase·p0.00:   3372220.416 us/op
                 countUppercase·p0.50:   3401580.544 us/op
                 countUppercase·p0.90:   3401580.544 us/op
                 countUppercase·p0.95:   3401580.544 us/op
                 countUppercase·p0.99:   3401580.544 us/op
                 countUppercase·p0.999:  3401580.544 us/op
                 countUppercase·p0.9999: 3401580.544 us/op
                 countUppercase·p1.00:   3401580.544 us/op

Iteration   2: 3395988.139 ±(99.9%) 159288.497 us/op
                 countUppercase·p0.00:   3388997.632 us/op
                 countUppercase·p0.50:   3393191.936 us/op
                 countUppercase·p0.90:   3405774.848 us/op
                 countUppercase·p0.95:   3405774.848 us/op
                 countUppercase·p0.99:   3405774.848 us/op
                 countUppercase·p0.999:  3405774.848 us/op
                 countUppercase·p0.9999: 3405774.848 us/op
                 countUppercase·p1.00:   3405774.848 us/op

Iteration   3: 3398784.341 ±(99.9%) 392668.700 us/op
                 countUppercase·p0.00:   3380609.024 us/op
                 countUppercase·p0.50:   3393191.936 us/op
                 countUppercase·p0.90:   3422552.064 us/op
                 countUppercase·p0.95:   3422552.064 us/op
                 countUppercase·p0.99:   3422552.064 us/op
                 countUppercase·p0.999:  3422552.064 us/op
                 countUppercase·p0.9999: 3422552.064 us/op
                 countUppercase·p1.00:   3422552.064 us/op

Iteration   4: 3388997.632 ±(99.9%) 229559.157 us/op
                 countUppercase·p0.00:   3376414.720 us/op
                 countUppercase·p0.50:   3388997.632 us/op
                 countUppercase·p0.90:   3401580.544 us/op
                 countUppercase·p0.95:   3401580.544 us/op
                 countUppercase·p0.99:   3401580.544 us/op
                 countUppercase·p0.999:  3401580.544 us/op
                 countUppercase·p0.9999: 3401580.544 us/op
                 countUppercase·p1.00:   3401580.544 us/op

Iteration   5: 3409969.152 ±(99.9%) 265072.082 us/op
                 countUppercase·p0.00:   3401580.544 us/op
                 countUppercase·p0.50:   3401580.544 us/op
                 countUppercase·p0.90:   3426746.368 us/op
                 countUppercase·p0.95:   3426746.368 us/op
                 countUppercase·p0.99:   3426746.368 us/op
                 countUppercase·p0.999:  3426746.368 us/op
                 countUppercase·p0.9999: 3426746.368 us/op
                 countUppercase·p1.00:   3426746.368 us/op

Iteration   6: 3333073.579 ±(99.9%) 116885.801 us/op
                 countUppercase·p0.00:   3326083.072 us/op
                 countUppercase·p0.50:   3334471.680 us/op
                 countUppercase·p0.90:   3338665.984 us/op
                 countUppercase·p0.95:   3338665.984 us/op
                 countUppercase·p0.99:   3338665.984 us/op
                 countUppercase·p0.999:  3338665.984 us/op
                 countUppercase·p0.9999: 3338665.984 us/op
                 countUppercase·p1.00:   3338665.984 us/op

Iteration   7: 3359637.504 ±(99.9%) 0.001 us/op
                 countUppercase·p0.00:   3359637.504 us/op
                 countUppercase·p0.50:   3359637.504 us/op
                 countUppercase·p0.90:   3359637.504 us/op
                 countUppercase·p0.95:   3359637.504 us/op
                 countUppercase·p0.99:   3359637.504 us/op
                 countUppercase·p0.999:  3359637.504 us/op
                 countUppercase·p0.9999: 3359637.504 us/op
                 countUppercase·p1.00:   3359637.504 us/op

Iteration   8: 3386201.429 ±(99.9%) 309250.762 us/op
                 countUppercase·p0.00:   3376414.720 us/op
                 countUppercase·p0.50:   3376414.720 us/op
                 countUppercase·p0.90:   3405774.848 us/op
                 countUppercase·p0.95:   3405774.848 us/op
                 countUppercase·p0.99:   3405774.848 us/op
                 countUppercase·p0.999:  3405774.848 us/op
                 countUppercase·p0.9999: 3405774.848 us/op
                 countUppercase·p1.00:   3405774.848 us/op

Iteration   9: 3376414.720 ±(99.9%) 76519.719 us/op
                 countUppercase·p0.00:   3372220.416 us/op
                 countUppercase·p0.50:   3376414.720 us/op
                 countUppercase·p0.90:   3380609.024 us/op
                 countUppercase·p0.95:   3380609.024 us/op
                 countUppercase·p0.99:   3380609.024 us/op
                 countUppercase·p0.999:  3380609.024 us/op
                 countUppercase·p0.9999: 3380609.024 us/op
                 countUppercase·p1.00:   3380609.024 us/op

Iteration  10: 3387599.531 ±(99.9%) 116885.801 us/op
                 countUppercase·p0.00:   3380609.024 us/op
                 countUppercase·p0.50:   3388997.632 us/op
                 countUppercase·p0.90:   3393191.936 us/op
                 countUppercase·p0.95:   3393191.936 us/op
                 countUppercase·p0.99:   3393191.936 us/op
                 countUppercase·p0.999:  3393191.936 us/op
                 countUppercase·p0.9999: 3393191.936 us/op
                 countUppercase·p1.00:   3393191.936 us/op

Iteration  11: 3423950.165 ±(99.9%) 392668.700 us/op
                 countUppercase·p0.00:   3405774.848 us/op
                 countUppercase·p0.50:   3418357.760 us/op
                 countUppercase·p0.90:   3447717.888 us/op
                 countUppercase·p0.95:   3447717.888 us/op
                 countUppercase·p0.99:   3447717.888 us/op
                 countUppercase·p0.999:  3447717.888 us/op
                 countUppercase·p0.9999: 3447717.888 us/op
                 countUppercase·p1.00:   3447717.888 us/op

Iteration  12: 3366628.011 ±(99.9%) 116885.801 us/op
                 countUppercase·p0.00:   3359637.504 us/op
                 countUppercase·p0.50:   3368026.112 us/op
                 countUppercase·p0.90:   3372220.416 us/op
                 countUppercase·p0.95:   3372220.416 us/op
                 countUppercase·p0.99:   3372220.416 us/op
                 countUppercase·p0.999:  3372220.416 us/op
                 countUppercase·p0.9999: 3372220.416 us/op
                 countUppercase·p1.00:   3372220.416 us/op

Iteration  13: 3354045.099 ±(99.9%) 44178.680 us/op
                 countUppercase·p0.00:   3351248.896 us/op
                 countUppercase·p0.50:   3355443.200 us/op
                 countUppercase·p0.90:   3355443.200 us/op
                 countUppercase·p0.95:   3355443.200 us/op
                 countUppercase·p0.99:   3355443.200 us/op
                 countUppercase·p0.999:  3355443.200 us/op
                 countUppercase·p0.9999: 3355443.200 us/op
                 countUppercase·p1.00:   3355443.200 us/op

Iteration  14: 3365229.909 ±(99.9%) 116885.801 us/op
                 countUppercase·p0.00:   3359637.504 us/op
                 countUppercase·p0.50:   3363831.808 us/op
                 countUppercase·p0.90:   3372220.416 us/op
                 countUppercase·p0.95:   3372220.416 us/op
                 countUppercase·p0.99:   3372220.416 us/op
                 countUppercase·p0.999:  3372220.416 us/op
                 countUppercase·p0.9999: 3372220.416 us/op
                 countUppercase·p1.00:   3372220.416 us/op

Iteration  15: 3333073.579 ±(99.9%) 159288.497 us/op
                 countUppercase·p0.00:   3326083.072 us/op
                 countUppercase·p0.50:   3330277.376 us/op
                 countUppercase·p0.90:   3342860.288 us/op
                 countUppercase·p0.95:   3342860.288 us/op
                 countUppercase·p0.99:   3342860.288 us/op
                 countUppercase·p0.999:  3342860.288 us/op
                 countUppercase·p0.9999: 3342860.288 us/op
                 countUppercase·p1.00:   3342860.288 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 45
  mean = 3378092.442 ±(99.9%) 14443.689 us/op

  Histogram, us/op:
    [3300000.000, 3312500.000) = 0 
    [3312500.000, 3325000.000) = 0 
    [3325000.000, 3337500.000) = 4 
    [3337500.000, 3350000.000) = 2 
    [3350000.000, 3362500.000) = 8 
    [3362500.000, 3375000.000) = 6 
    [3375000.000, 3387500.000) = 7 
    [3387500.000, 3400000.000) = 6 
    [3400000.000, 3412500.000) = 8 
    [3412500.000, 3425000.000) = 2 
    [3425000.000, 3437500.000) = 1 
    [3437500.000, 3450000.000) = 1 
    [3450000.000, 3462500.000) = 0 
    [3462500.000, 3475000.000) = 0 
    [3475000.000, 3487500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 3326083.072 us/op
     p(50.0000) = 3376414.720 us/op
     p(90.0000) = 3410808.013 us/op
     p(95.0000) = 3425488.077 us/op
     p(99.0000) = 3447717.888 us/op
     p(99.9000) = 3447717.888 us/op
     p(99.9900) = 3447717.888 us/op
     p(99.9990) = 3447717.888 us/op
     p(99.9999) = 3447717.888 us/op
    p(100.0000) = 3447717.888 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 80.43% complete, ETA 01:38:50
# Fork: 1 of 1
# Warmup Iteration   1: 1.894 ±(99.9%) 0.004 us/op
# Warmup Iteration   2: 1.893 ±(99.9%) 0.004 us/op
# Warmup Iteration   3: 1.901 ±(99.9%) 0.005 us/op
# Warmup Iteration   4: 1.897 ±(99.9%) 0.003 us/op
# Warmup Iteration   5: 1.897 ±(99.9%) 0.004 us/op
Iteration   1: 1.899 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.894 us/op
                 runFibonacci·p0.99:   1.944 us/op
                 runFibonacci·p0.999:  9.070 us/op
                 runFibonacci·p0.9999: 30.150 us/op
                 runFibonacci·p1.00:   135.680 us/op

Iteration   2: 1.897 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.886 us/op
                 runFibonacci·p0.95:   1.892 us/op
                 runFibonacci·p0.99:   1.932 us/op
                 runFibonacci·p0.999:  9.069 us/op
                 runFibonacci·p0.9999: 23.868 us/op
                 runFibonacci·p1.00:   115.584 us/op

Iteration   3: 1.898 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.894 us/op
                 runFibonacci·p0.99:   1.928 us/op
                 runFibonacci·p0.999:  8.939 us/op
                 runFibonacci·p0.9999: 26.323 us/op
                 runFibonacci·p1.00:   96.512 us/op

Iteration   4: 1.897 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.892 us/op
                 runFibonacci·p0.99:   1.912 us/op
                 runFibonacci·p0.999:  9.328 us/op
                 runFibonacci·p0.9999: 26.089 us/op
                 runFibonacci·p1.00:   52.736 us/op

Iteration   5: 1.895 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.886 us/op
                 runFibonacci·p0.95:   1.892 us/op
                 runFibonacci·p0.99:   1.910 us/op
                 runFibonacci·p0.999:  8.784 us/op
                 runFibonacci·p0.9999: 22.545 us/op
                 runFibonacci·p1.00:   101.120 us/op

Iteration   6: 1.900 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.892 us/op
                 runFibonacci·p0.99:   1.914 us/op
                 runFibonacci·p0.999:  9.410 us/op
                 runFibonacci·p0.9999: 27.449 us/op
                 runFibonacci·p1.00:   96.384 us/op

Iteration   7: 1.902 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.894 us/op
                 runFibonacci·p0.99:   1.930 us/op
                 runFibonacci·p0.999:  10.096 us/op
                 runFibonacci·p0.9999: 29.944 us/op
                 runFibonacci·p1.00:   115.712 us/op

Iteration   8: 1.904 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.894 us/op
                 runFibonacci·p0.99:   1.942 us/op
                 runFibonacci·p0.999:  9.968 us/op
                 runFibonacci·p0.9999: 34.658 us/op
                 runFibonacci·p1.00:   130.816 us/op

Iteration   9: 1.900 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.894 us/op
                 runFibonacci·p0.99:   1.930 us/op
                 runFibonacci·p0.999:  9.399 us/op
                 runFibonacci·p0.9999: 27.895 us/op
                 runFibonacci·p1.00:   114.688 us/op

Iteration  10: 1.900 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.894 us/op
                 runFibonacci·p0.99:   1.948 us/op
                 runFibonacci·p0.999:  9.609 us/op
                 runFibonacci·p0.9999: 25.994 us/op
                 runFibonacci·p1.00:   103.680 us/op

Iteration  11: 1.898 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.886 us/op
                 runFibonacci·p0.95:   1.892 us/op
                 runFibonacci·p0.99:   1.916 us/op
                 runFibonacci·p0.999:  9.034 us/op
                 runFibonacci·p0.9999: 24.728 us/op
                 runFibonacci·p1.00:   115.968 us/op

Iteration  12: 1.902 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.894 us/op
                 runFibonacci·p0.99:   1.918 us/op
                 runFibonacci·p0.999:  9.534 us/op
                 runFibonacci·p0.9999: 30.980 us/op
                 runFibonacci·p1.00:   152.064 us/op

Iteration  13: 1.900 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.892 us/op
                 runFibonacci·p0.99:   1.918 us/op
                 runFibonacci·p0.999:  9.392 us/op
                 runFibonacci·p0.9999: 31.579 us/op
                 runFibonacci·p1.00:   108.032 us/op

Iteration  14: 1.901 ±(99.9%) 0.005 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.894 us/op
                 runFibonacci·p0.99:   1.912 us/op
                 runFibonacci·p0.999:  9.376 us/op
                 runFibonacci·p0.9999: 29.800 us/op
                 runFibonacci·p1.00:   163.072 us/op

Iteration  15: 1.900 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.894 us/op
                 runFibonacci·p0.99:   1.920 us/op
                 runFibonacci·p0.999:  9.985 us/op
                 runFibonacci·p0.9999: 26.618 us/op
                 runFibonacci·p1.00:   182.272 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 5016275
  mean =      1.900 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  12.500) = 5014193 
    [ 12.500,  25.000) = 1421 
    [ 25.000,  37.500) = 437 
    [ 37.500,  50.000) = 112 
    [ 50.000,  62.500) = 38 
    [ 62.500,  75.000) = 12 
    [ 75.000,  87.500) = 12 
    [ 87.500, 100.000) = 21 
    [100.000, 112.500) = 15 
    [112.500, 125.000) = 7 
    [125.000, 137.500) = 3 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 2 
    [162.500, 175.000) = 1 
    [175.000, 187.500) = 1 

  Percentiles, us/op:
      p(0.0000) =      1.848 us/op
     p(50.0000) =      1.874 us/op
     p(90.0000) =      1.888 us/op
     p(95.0000) =      1.894 us/op
     p(99.0000) =      1.922 us/op
     p(99.9000) =      9.392 us/op
     p(99.9900) =     27.832 us/op
     p(99.9990) =     87.448 us/op
     p(99.9999) =    135.601 us/op
    p(100.0000) =    182.272 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 81.16% complete, ETA 01:35:09
# Fork: 1 of 1
# Warmup Iteration   1: 5.008 ±(99.9%) 0.062 us/op
# Warmup Iteration   2: 4.962 ±(99.9%) 0.008 us/op
# Warmup Iteration   3: 4.980 ±(99.9%) 0.014 us/op
# Warmup Iteration   4: 4.962 ±(99.9%) 0.008 us/op
# Warmup Iteration   5: 4.974 ±(99.9%) 0.007 us/op
Iteration   1: 4.982 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   4.768 us/op
                 runFibonacci·p0.50:   4.912 us/op
                 runFibonacci·p0.90:   4.976 us/op
                 runFibonacci·p0.95:   5.000 us/op
                 runFibonacci·p0.99:   5.104 us/op
                 runFibonacci·p0.999:  17.211 us/op
                 runFibonacci·p0.9999: 46.418 us/op
                 runFibonacci·p1.00:   201.216 us/op

Iteration   2: 4.977 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   4.768 us/op
                 runFibonacci·p0.50:   4.904 us/op
                 runFibonacci·p0.90:   4.960 us/op
                 runFibonacci·p0.95:   4.976 us/op
                 runFibonacci·p0.99:   5.320 us/op
                 runFibonacci·p0.999:  17.811 us/op
                 runFibonacci·p0.9999: 46.322 us/op
                 runFibonacci·p1.00:   262.656 us/op

Iteration   3: 4.961 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   4.776 us/op
                 runFibonacci·p0.50:   4.904 us/op
                 runFibonacci·p0.90:   4.952 us/op
                 runFibonacci·p0.95:   4.968 us/op
                 runFibonacci·p0.99:   5.128 us/op
                 runFibonacci·p0.999:  15.012 us/op
                 runFibonacci·p0.9999: 32.587 us/op
                 runFibonacci·p1.00:   124.160 us/op

Iteration   4: 4.962 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   4.776 us/op
                 runFibonacci·p0.50:   4.904 us/op
                 runFibonacci·p0.90:   4.952 us/op
                 runFibonacci·p0.95:   4.968 us/op
                 runFibonacci·p0.99:   5.432 us/op
                 runFibonacci·p0.999:  14.823 us/op
                 runFibonacci·p0.9999: 44.173 us/op
                 runFibonacci·p1.00:   156.928 us/op

Iteration   5: 4.993 ±(99.9%) 0.055 us/op
                 runFibonacci·p0.00:   4.768 us/op
                 runFibonacci·p0.50:   4.904 us/op
                 runFibonacci·p0.90:   4.952 us/op
                 runFibonacci·p0.95:   4.976 us/op
                 runFibonacci·p0.99:   5.664 us/op
                 runFibonacci·p0.999:  16.368 us/op
                 runFibonacci·p0.9999: 51.848 us/op
                 runFibonacci·p1.00:   4161.536 us/op

Iteration   6: 4.969 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   4.760 us/op
                 runFibonacci·p0.50:   4.912 us/op
                 runFibonacci·p0.90:   4.960 us/op
                 runFibonacci·p0.95:   4.976 us/op
                 runFibonacci·p0.99:   5.344 us/op
                 runFibonacci·p0.999:  15.656 us/op
                 runFibonacci·p0.9999: 41.744 us/op
                 runFibonacci·p1.00:   95.744 us/op

Iteration   7: 4.960 ±(99.9%) 0.005 us/op
                 runFibonacci·p0.00:   4.776 us/op
                 runFibonacci·p0.50:   4.904 us/op
                 runFibonacci·p0.90:   4.960 us/op
                 runFibonacci·p0.95:   4.976 us/op
                 runFibonacci·p0.99:   5.216 us/op
                 runFibonacci·p0.999:  14.598 us/op
                 runFibonacci·p0.9999: 35.790 us/op
                 runFibonacci·p1.00:   115.712 us/op

Iteration   8: 4.968 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   4.776 us/op
                 runFibonacci·p0.50:   4.912 us/op
                 runFibonacci·p0.90:   4.968 us/op
                 runFibonacci·p0.95:   5.000 us/op
                 runFibonacci·p0.99:   5.296 us/op
                 runFibonacci·p0.999:  14.842 us/op
                 runFibonacci·p0.9999: 39.718 us/op
                 runFibonacci·p1.00:   124.032 us/op

Iteration   9: 4.966 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   4.784 us/op
                 runFibonacci·p0.50:   4.904 us/op
                 runFibonacci·p0.90:   4.960 us/op
                 runFibonacci·p0.95:   4.976 us/op
                 runFibonacci·p0.99:   5.416 us/op
                 runFibonacci·p0.999:  15.190 us/op
                 runFibonacci·p0.9999: 39.118 us/op
                 runFibonacci·p1.00:   92.288 us/op

Iteration  10: 4.963 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   4.768 us/op
                 runFibonacci·p0.50:   4.904 us/op
                 runFibonacci·p0.90:   4.960 us/op
                 runFibonacci·p0.95:   4.976 us/op
                 runFibonacci·p0.99:   5.272 us/op
                 runFibonacci·p0.999:  14.776 us/op
                 runFibonacci·p0.9999: 37.632 us/op
                 runFibonacci·p1.00:   124.288 us/op

Iteration  11: 4.982 ±(99.9%) 0.013 us/op
                 runFibonacci·p0.00:   4.768 us/op
                 runFibonacci·p0.50:   4.912 us/op
                 runFibonacci·p0.90:   4.976 us/op
                 runFibonacci·p0.95:   5.000 us/op
                 runFibonacci·p0.99:   5.464 us/op
                 runFibonacci·p0.999:  15.235 us/op
                 runFibonacci·p0.9999: 39.571 us/op
                 runFibonacci·p1.00:   472.064 us/op

Iteration  12: 5.000 ±(99.9%) 0.013 us/op
                 runFibonacci·p0.00:   4.800 us/op
                 runFibonacci·p0.50:   4.928 us/op
                 runFibonacci·p0.90:   4.976 us/op
                 runFibonacci·p0.95:   5.000 us/op
                 runFibonacci·p0.99:   5.544 us/op
                 runFibonacci·p0.999:  15.974 us/op
                 runFibonacci·p0.9999: 48.167 us/op
                 runFibonacci·p1.00:   426.496 us/op

Iteration  13: 4.990 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   4.792 us/op
                 runFibonacci·p0.50:   4.928 us/op
                 runFibonacci·p0.90:   4.976 us/op
                 runFibonacci·p0.95:   5.000 us/op
                 runFibonacci·p0.99:   5.192 us/op
                 runFibonacci·p0.999:  15.656 us/op
                 runFibonacci·p0.9999: 41.907 us/op
                 runFibonacci·p1.00:   150.528 us/op

Iteration  14: 5.000 ±(99.9%) 0.011 us/op
                 runFibonacci·p0.00:   4.800 us/op
                 runFibonacci·p0.50:   4.936 us/op
                 runFibonacci·p0.90:   4.992 us/op
                 runFibonacci·p0.95:   5.016 us/op
                 runFibonacci·p0.99:   5.584 us/op
                 runFibonacci·p0.999:  15.536 us/op
                 runFibonacci·p0.9999: 43.634 us/op
                 runFibonacci·p1.00:   635.904 us/op

Iteration  15: 4.999 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   4.800 us/op
                 runFibonacci·p0.50:   4.928 us/op
                 runFibonacci·p0.90:   4.992 us/op
                 runFibonacci·p0.95:   5.016 us/op
                 runFibonacci·p0.99:   5.720 us/op
                 runFibonacci·p0.999:  16.368 us/op
                 runFibonacci·p0.9999: 46.560 us/op
                 runFibonacci·p1.00:   175.104 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 3781494
  mean =      4.978 ±(99.9%) 0.004 us/op

  Histogram, us/op:
    [   0.000,  500.000) = 3781491 
    [ 500.000, 1000.000) = 2 
    [1000.000, 1500.000) = 0 
    [1500.000, 2000.000) = 0 
    [2000.000, 2500.000) = 0 
    [2500.000, 3000.000) = 0 
    [3000.000, 3500.000) = 0 
    [3500.000, 4000.000) = 0 
    [4000.000, 4500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      4.760 us/op
     p(50.0000) =      4.912 us/op
     p(90.0000) =      4.968 us/op
     p(95.0000) =      4.992 us/op
     p(99.0000) =      5.392 us/op
     p(99.9000) =     15.504 us/op
     p(99.9900) =     42.368 us/op
     p(99.9990) =    116.157 us/op
     p(99.9999) =    480.119 us/op
    p(100.0000) =   4161.536 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 81.88% complete, ETA 01:31:28
# Fork: 1 of 1
# Warmup Iteration   1: 9.036 ±(99.9%) 0.010 us/op
# Warmup Iteration   2: 9.035 ±(99.9%) 0.008 us/op
# Warmup Iteration   3: 9.055 ±(99.9%) 0.015 us/op
# Warmup Iteration   4: 9.061 ±(99.9%) 0.009 us/op
# Warmup Iteration   5: 9.067 ±(99.9%) 0.009 us/op
Iteration   1: 9.053 ±(99.9%) 0.009 us/op
                 runFibonacci·p0.00:   8.752 us/op
                 runFibonacci·p0.50:   8.960 us/op
                 runFibonacci·p0.90:   9.056 us/op
                 runFibonacci·p0.95:   9.088 us/op
                 runFibonacci·p0.99:   12.848 us/op
                 runFibonacci·p0.999:  20.256 us/op
                 runFibonacci·p0.9999: 45.141 us/op
                 runFibonacci·p1.00:   310.272 us/op

Iteration   2: 9.050 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   8.720 us/op
                 runFibonacci·p0.50:   8.960 us/op
                 runFibonacci·p0.90:   9.056 us/op
                 runFibonacci·p0.95:   9.088 us/op
                 runFibonacci·p0.99:   12.784 us/op
                 runFibonacci·p0.999:  19.942 us/op
                 runFibonacci·p0.9999: 48.575 us/op
                 runFibonacci·p1.00:   122.112 us/op

Iteration   3: 9.059 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   8.672 us/op
                 runFibonacci·p0.50:   8.960 us/op
                 runFibonacci·p0.90:   9.056 us/op
                 runFibonacci·p0.95:   9.104 us/op
                 runFibonacci·p0.99:   12.832 us/op
                 runFibonacci·p0.999:  20.608 us/op
                 runFibonacci·p0.9999: 48.388 us/op
                 runFibonacci·p1.00:   154.624 us/op

Iteration   4: 9.087 ±(99.9%) 0.025 us/op
                 runFibonacci·p0.00:   8.656 us/op
                 runFibonacci·p0.50:   8.960 us/op
                 runFibonacci·p0.90:   9.072 us/op
                 runFibonacci·p0.95:   9.104 us/op
                 runFibonacci·p0.99:   13.072 us/op
                 runFibonacci·p0.999:  22.592 us/op
                 runFibonacci·p0.9999: 55.902 us/op
                 runFibonacci·p1.00:   1683.456 us/op

Iteration   5: 9.063 ±(99.9%) 0.013 us/op
                 runFibonacci·p0.00:   8.672 us/op
                 runFibonacci·p0.50:   8.944 us/op
                 runFibonacci·p0.90:   9.040 us/op
                 runFibonacci·p0.95:   9.056 us/op
                 runFibonacci·p0.99:   13.184 us/op
                 runFibonacci·p0.999:  22.755 us/op
                 runFibonacci·p0.9999: 55.811 us/op
                 runFibonacci·p1.00:   436.736 us/op

Iteration   6: 9.051 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   8.688 us/op
                 runFibonacci·p0.50:   8.944 us/op
                 runFibonacci·p0.90:   9.040 us/op
                 runFibonacci·p0.95:   9.056 us/op
                 runFibonacci·p0.99:   12.912 us/op
                 runFibonacci·p0.999:  21.280 us/op
                 runFibonacci·p0.9999: 55.423 us/op
                 runFibonacci·p1.00:   194.816 us/op

Iteration   7: 9.059 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   8.624 us/op
                 runFibonacci·p0.50:   8.960 us/op
                 runFibonacci·p0.90:   9.072 us/op
                 runFibonacci·p0.95:   9.120 us/op
                 runFibonacci·p0.99:   12.832 us/op
                 runFibonacci·p0.999:  20.704 us/op
                 runFibonacci·p0.9999: 43.618 us/op
                 runFibonacci·p1.00:   115.968 us/op

Iteration   8: 9.064 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   8.672 us/op
                 runFibonacci·p0.50:   8.960 us/op
                 runFibonacci·p0.90:   9.072 us/op
                 runFibonacci·p0.95:   9.120 us/op
                 runFibonacci·p0.99:   12.816 us/op
                 runFibonacci·p0.999:  21.280 us/op
                 runFibonacci·p0.9999: 52.804 us/op
                 runFibonacci·p1.00:   135.168 us/op

Iteration   9: 9.043 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   8.640 us/op
                 runFibonacci·p0.50:   8.944 us/op
                 runFibonacci·p0.90:   9.040 us/op
                 runFibonacci·p0.95:   9.056 us/op
                 runFibonacci·p0.99:   12.624 us/op
                 runFibonacci·p0.999:  20.800 us/op
                 runFibonacci·p0.9999: 42.948 us/op
                 runFibonacci·p1.00:   129.792 us/op

Iteration  10: 9.051 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   8.672 us/op
                 runFibonacci·p0.50:   8.944 us/op
                 runFibonacci·p0.90:   9.040 us/op
                 runFibonacci·p0.95:   9.056 us/op
                 runFibonacci·p0.99:   12.944 us/op
                 runFibonacci·p0.999:  21.120 us/op
                 runFibonacci·p0.9999: 45.376 us/op
                 runFibonacci·p1.00:   132.096 us/op

Iteration  11: 9.068 ±(99.9%) 0.021 us/op
                 runFibonacci·p0.00:   8.672 us/op
                 runFibonacci·p0.50:   8.928 us/op
                 runFibonacci·p0.90:   9.024 us/op
                 runFibonacci·p0.95:   9.040 us/op
                 runFibonacci·p0.99:   13.184 us/op
                 runFibonacci·p0.999:  24.386 us/op
                 runFibonacci·p0.9999: 69.070 us/op
                 runFibonacci·p1.00:   531.456 us/op

Iteration  12: 9.055 ±(99.9%) 0.048 us/op
                 runFibonacci·p0.00:   8.640 us/op
                 runFibonacci·p0.50:   8.944 us/op
                 runFibonacci·p0.90:   9.024 us/op
                 runFibonacci·p0.95:   9.056 us/op
                 runFibonacci·p0.99:   12.560 us/op
                 runFibonacci·p0.999:  20.512 us/op
                 runFibonacci·p0.9999: 47.574 us/op
                 runFibonacci·p1.00:   2740.224 us/op

Iteration  13: 9.048 ±(99.9%) 0.028 us/op
                 runFibonacci·p0.00:   8.656 us/op
                 runFibonacci·p0.50:   8.944 us/op
                 runFibonacci·p0.90:   9.024 us/op
                 runFibonacci·p0.95:   9.040 us/op
                 runFibonacci·p0.99:   12.893 us/op
                 runFibonacci·p0.999:  21.491 us/op
                 runFibonacci·p0.9999: 49.029 us/op
                 runFibonacci·p1.00:   2252.800 us/op

Iteration  14: 9.031 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   8.656 us/op
                 runFibonacci·p0.50:   8.928 us/op
                 runFibonacci·p0.90:   9.008 us/op
                 runFibonacci·p0.95:   9.040 us/op
                 runFibonacci·p0.99:   12.816 us/op
                 runFibonacci·p0.999:  20.800 us/op
                 runFibonacci·p0.9999: 45.568 us/op
                 runFibonacci·p1.00:   274.944 us/op

Iteration  15: 9.034 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   8.656 us/op
                 runFibonacci·p0.50:   8.944 us/op
                 runFibonacci·p0.90:   9.024 us/op
                 runFibonacci·p0.95:   9.056 us/op
                 runFibonacci·p0.99:   12.720 us/op
                 runFibonacci·p0.999:  20.975 us/op
                 runFibonacci·p0.9999: 47.580 us/op
                 runFibonacci·p1.00:   172.800 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 4140353
  mean =      9.054 ±(99.9%) 0.005 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 4140317 
    [ 250.000,  500.000) = 27 
    [ 500.000,  750.000) = 4 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 1 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 1 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 1 
    [2500.000, 2750.000) = 2 

  Percentiles, us/op:
      p(0.0000) =      8.624 us/op
     p(50.0000) =      8.944 us/op
     p(90.0000) =      9.040 us/op
     p(95.0000) =      9.072 us/op
     p(99.0000) =     12.864 us/op
     p(99.9000) =     21.120 us/op
     p(99.9900) =     50.875 us/op
     p(99.9990) =    192.665 us/op
     p(99.9999) =   1607.283 us/op
    p(100.0000) =   2740.224 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 82.61% complete, ETA 01:27:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.085 ±(99.9%) 0.005 us/op
# Warmup Iteration   2: 0.077 ±(99.9%) 0.003 us/op
# Warmup Iteration   3: 0.093 ±(99.9%) 0.001 us/op
# Warmup Iteration   4: 0.094 ±(99.9%) 0.002 us/op
# Warmup Iteration   5: 0.092 ±(99.9%) 0.001 us/op
Iteration   1: 0.096 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.074 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.090 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.118 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.208 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.125 us/op
                 findLastPrefixUsingScanner1·p1.00:   38.592 us/op

Iteration   2: 0.094 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.071 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.110 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.177 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.664 us/op
                 findLastPrefixUsingScanner1·p1.00:   129.536 us/op

Iteration   3: 0.095 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.107 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.190 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.169 us/op
                 findLastPrefixUsingScanner1·p1.00:   33.536 us/op

Iteration   4: 0.094 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.071 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.180 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.165 us/op
                 findLastPrefixUsingScanner1·p1.00:   57.408 us/op

Iteration   5: 0.095 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.073 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.107 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.184 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.422 us/op
                 findLastPrefixUsingScanner1·p1.00:   32.480 us/op

Iteration   6: 0.095 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.071 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.107 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.178 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.960 us/op
                 findLastPrefixUsingScanner1·p1.00:   92.800 us/op

Iteration   7: 0.094 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.071 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.107 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.112 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.183 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.171 us/op
                 findLastPrefixUsingScanner1·p1.00:   32.384 us/op

Iteration   8: 0.096 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.118 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.186 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.877 us/op
                 findLastPrefixUsingScanner1·p1.00:   23.872 us/op

Iteration   9: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.071 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.178 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.552 us/op
                 findLastPrefixUsingScanner1·p1.00:   49.152 us/op

Iteration  10: 0.094 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.071 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.107 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.116 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.172 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.358 us/op
                 findLastPrefixUsingScanner1·p1.00:   70.784 us/op

Iteration  11: 0.100 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.075 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.090 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.110 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.121 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.124 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.186 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.518 us/op
                 findLastPrefixUsingScanner1·p1.00:   117.760 us/op

Iteration  12: 0.095 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.071 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.181 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.442 us/op
                 findLastPrefixUsingScanner1·p1.00:   151.808 us/op

Iteration  13: 0.094 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.107 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.114 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.175 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.807 us/op
                 findLastPrefixUsingScanner1·p1.00:   38.080 us/op

Iteration  14: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.174 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.053 us/op
                 findLastPrefixUsingScanner1·p1.00:   90.240 us/op

Iteration  15: 0.094 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.071 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.112 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.177 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.893 us/op
                 findLastPrefixUsingScanner1·p1.00:   136.192 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 5114648
  mean =      0.095 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  12.500) = 5114495 
    [ 12.500,  25.000) = 100 
    [ 25.000,  37.500) = 29 
    [ 37.500,  50.000) = 11 
    [ 50.000,  62.500) = 3 
    [ 62.500,  75.000) = 2 
    [ 75.000,  87.500) = 2 
    [ 87.500, 100.000) = 2 
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 1 
    [125.000, 137.500) = 2 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 1 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.071 us/op
     p(50.0000) =      0.088 us/op
     p(90.0000) =      0.107 us/op
     p(95.0000) =      0.108 us/op
     p(99.0000) =      0.116 us/op
     p(99.9000) =      0.180 us/op
     p(99.9900) =      8.000 us/op
     p(99.9990) =     25.819 us/op
     p(99.9999) =     92.506 us/op
    p(100.0000) =    151.808 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 83.33% complete, ETA 01:24:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.516 ±(99.9%) 0.004 us/op
# Warmup Iteration   2: 0.389 ±(99.9%) 0.004 us/op
# Warmup Iteration   3: 0.357 ±(99.9%) 0.003 us/op
# Warmup Iteration   4: 0.360 ±(99.9%) 0.003 us/op
# Warmup Iteration   5: 0.375 ±(99.9%) 0.004 us/op
Iteration   1: 0.357 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.337 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.344 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.352 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.354 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.362 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.062 us/op
                 findLastPrefixUsingScanner1·p0.9999: 12.153 us/op
                 findLastPrefixUsingScanner1·p1.00:   46.144 us/op

Iteration   2: 0.371 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.348 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.360 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.366 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.368 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.384 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.122 us/op
                 findLastPrefixUsingScanner1·p0.9999: 11.099 us/op
                 findLastPrefixUsingScanner1·p1.00:   46.976 us/op

Iteration   3: 0.372 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.315 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.361 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.367 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.368 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.378 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.287 us/op
                 findLastPrefixUsingScanner1·p0.9999: 12.755 us/op
                 findLastPrefixUsingScanner1·p1.00:   45.696 us/op

Iteration   4: 0.377 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.312 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.369 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.380 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.384 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.395 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.511 us/op
                 findLastPrefixUsingScanner1·p0.9999: 13.016 us/op
                 findLastPrefixUsingScanner1·p1.00:   342.016 us/op

Iteration   5: 0.386 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.326 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.377 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.387 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.388 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.394 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.279 us/op
                 findLastPrefixUsingScanner1·p0.9999: 13.106 us/op
                 findLastPrefixUsingScanner1·p1.00:   90.752 us/op

Iteration   6: 0.362 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.315 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.353 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.361 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.367 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.394 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.390 us/op
                 findLastPrefixUsingScanner1·p0.9999: 16.621 us/op
                 findLastPrefixUsingScanner1·p1.00:   133.888 us/op

Iteration   7: 0.411 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.317 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.396 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.403 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.408 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.419 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.103 us/op
                 findLastPrefixUsingScanner1·p0.9999: 20.291 us/op
                 findLastPrefixUsingScanner1·p1.00:   59.392 us/op

Iteration   8: 0.391 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.347 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.375 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.382 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.386 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.394 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.725 us/op
                 findLastPrefixUsingScanner1·p0.9999: 23.103 us/op
                 findLastPrefixUsingScanner1·p1.00:   104.704 us/op

Iteration   9: 0.358 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.337 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.344 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.352 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.354 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.360 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.097 us/op
                 findLastPrefixUsingScanner1·p0.9999: 15.238 us/op
                 findLastPrefixUsingScanner1·p1.00:   63.744 us/op

Iteration  10: 0.373 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.315 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.370 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.396 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.398 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.403 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.351 us/op
                 findLastPrefixUsingScanner1·p0.9999: 19.478 us/op
                 findLastPrefixUsingScanner1·p1.00:   94.080 us/op

Iteration  11: 0.370 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.323 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.357 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.380 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.383 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.388 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.042 us/op
                 findLastPrefixUsingScanner1·p0.9999: 12.113 us/op
                 findLastPrefixUsingScanner1·p1.00:   40.832 us/op

Iteration  12: 0.358 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.338 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.344 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.352 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.354 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.361 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.269 us/op
                 findLastPrefixUsingScanner1·p0.9999: 15.565 us/op
                 findLastPrefixUsingScanner1·p1.00:   89.728 us/op

Iteration  13: 0.374 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.324 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.361 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.367 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.369 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.384 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.465 us/op
                 findLastPrefixUsingScanner1·p0.9999: 12.427 us/op
                 findLastPrefixUsingScanner1·p1.00:   40.320 us/op

Iteration  14: 0.374 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.347 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.361 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.367 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.368 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.383 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.400 us/op
                 findLastPrefixUsingScanner1·p0.9999: 14.167 us/op
                 findLastPrefixUsingScanner1·p1.00:   121.600 us/op

Iteration  15: 0.375 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.348 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.362 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.368 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.373 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.386 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.521 us/op
                 findLastPrefixUsingScanner1·p0.9999: 13.216 us/op
                 findLastPrefixUsingScanner1·p1.00:   154.880 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 3533031
  mean =      0.374 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 3532878 
    [ 25.000,  50.000) = 132 
    [ 50.000,  75.000) = 8 
    [ 75.000, 100.000) = 6 
    [100.000, 125.000) = 3 
    [125.000, 150.000) = 2 
    [150.000, 175.000) = 1 
    [175.000, 200.000) = 0 
    [200.000, 225.000) = 0 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 0 
    [275.000, 300.000) = 0 
    [300.000, 325.000) = 0 
    [325.000, 350.000) = 1 
    [350.000, 375.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.312 us/op
     p(50.0000) =      0.359 us/op
     p(90.0000) =      0.386 us/op
     p(95.0000) =      0.395 us/op
     p(99.0000) =      0.404 us/op
     p(99.9000) =      4.352 us/op
     p(99.9900) =     13.419 us/op
     p(99.9990) =     40.875 us/op
     p(99.9999) =    132.387 us/op
    p(100.0000) =    342.016 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 84.06% complete, ETA 01:20:26
# Fork: 1 of 1
# Warmup Iteration   1: 4.268 ±(99.9%) 0.012 us/op
# Warmup Iteration   2: 4.127 ±(99.9%) 0.009 us/op
# Warmup Iteration   3: 4.255 ±(99.9%) 0.006 us/op
# Warmup Iteration   4: 4.022 ±(99.9%) 0.006 us/op
# Warmup Iteration   5: 4.193 ±(99.9%) 0.006 us/op
Iteration   1: 4.266 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.136 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.216 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.240 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.248 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.616 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.296 us/op
                 findLastPrefixUsingScanner1·p0.9999: 41.430 us/op
                 findLastPrefixUsingScanner1·p1.00:   126.592 us/op

Iteration   2: 4.259 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.104 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.208 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.240 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.256 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.491 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.468 us/op
                 findLastPrefixUsingScanner1·p0.9999: 42.304 us/op
                 findLastPrefixUsingScanner1·p1.00:   115.584 us/op

Iteration   3: 4.246 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.112 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.192 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.216 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.232 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.676 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.760 us/op
                 findLastPrefixUsingScanner1·p0.9999: 43.633 us/op
                 findLastPrefixUsingScanner1·p1.00:   143.104 us/op

Iteration   4: 4.172 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.056 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.120 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.144 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.152 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.336 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.056 us/op
                 findLastPrefixUsingScanner1·p0.9999: 36.937 us/op
                 findLastPrefixUsingScanner1·p1.00:   380.928 us/op

Iteration   5: 4.125 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.004 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.076 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.096 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.104 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.376 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.104 us/op
                 findLastPrefixUsingScanner1·p0.9999: 38.115 us/op
                 findLastPrefixUsingScanner1·p1.00:   159.232 us/op

Iteration   6: 4.182 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.064 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.136 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.160 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.168 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.296 us/op
                 findLastPrefixUsingScanner1·p0.999:  12.540 us/op
                 findLastPrefixUsingScanner1·p0.9999: 33.644 us/op
                 findLastPrefixUsingScanner1·p1.00:   154.880 us/op

Iteration   7: 4.181 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.064 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.136 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.152 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.168 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.280 us/op
                 findLastPrefixUsingScanner1·p0.999:  12.839 us/op
                 findLastPrefixUsingScanner1·p0.9999: 35.388 us/op
                 findLastPrefixUsingScanner1·p1.00:   134.400 us/op

Iteration   8: 4.286 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.160 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.240 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.264 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.272 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.384 us/op
                 findLastPrefixUsingScanner1·p0.999:  12.861 us/op
                 findLastPrefixUsingScanner1·p0.9999: 39.328 us/op
                 findLastPrefixUsingScanner1·p1.00:   116.864 us/op

Iteration   9: 4.271 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.136 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.224 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.248 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.256 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.400 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.067 us/op
                 findLastPrefixUsingScanner1·p0.9999: 41.892 us/op
                 findLastPrefixUsingScanner1·p1.00:   128.128 us/op

Iteration  10: 4.208 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.084 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.152 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.184 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.192 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.368 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.460 us/op
                 findLastPrefixUsingScanner1·p0.9999: 44.023 us/op
                 findLastPrefixUsingScanner1·p1.00:   507.904 us/op

Iteration  11: 4.080 ±(99.9%) 0.011 us/op
                 findLastPrefixUsingScanner1·p0.00:   3.948 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.024 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.048 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.060 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.176 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.328 us/op
                 findLastPrefixUsingScanner1·p0.9999: 46.008 us/op
                 findLastPrefixUsingScanner1·p1.00:   450.048 us/op

Iteration  12: 4.188 ±(99.9%) 0.016 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.056 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.128 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.152 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.160 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.304 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.328 us/op
                 findLastPrefixUsingScanner1·p0.9999: 53.881 us/op
                 findLastPrefixUsingScanner1·p1.00:   1368.064 us/op

Iteration  13: 4.251 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.112 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.200 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.224 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.232 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.328 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.370 us/op
                 findLastPrefixUsingScanner1·p0.9999: 46.537 us/op
                 findLastPrefixUsingScanner1·p1.00:   146.944 us/op

Iteration  14: 4.220 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.088 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.168 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.192 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.200 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.312 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.008 us/op
                 findLastPrefixUsingScanner1·p0.9999: 46.108 us/op
                 findLastPrefixUsingScanner1·p1.00:   187.392 us/op

Iteration  15: 4.147 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.016 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.092 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.112 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.120 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.248 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.425 us/op
                 findLastPrefixUsingScanner1·p0.9999: 50.436 us/op
                 findLastPrefixUsingScanner1·p1.00:   172.032 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 4486425
  mean =      4.205 ±(99.9%) 0.002 us/op

  Histogram, us/op:
    [   0.000,  125.000) = 4486394 
    [ 125.000,  250.000) = 23 
    [ 250.000,  375.000) = 3 
    [ 375.000,  500.000) = 3 
    [ 500.000,  625.000) = 1 
    [ 625.000,  750.000) = 0 
    [ 750.000,  875.000) = 0 
    [ 875.000, 1000.000) = 0 
    [1000.000, 1125.000) = 0 
    [1125.000, 1250.000) = 0 
    [1250.000, 1375.000) = 1 
    [1375.000, 1500.000) = 0 
    [1500.000, 1625.000) = 0 
    [1625.000, 1750.000) = 0 
    [1750.000, 1875.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      3.948 us/op
     p(50.0000) =      4.152 us/op
     p(90.0000) =      4.232 us/op
     p(95.0000) =      4.248 us/op
     p(99.0000) =      4.360 us/op
     p(99.9000) =     13.184 us/op
     p(99.9900) =     42.903 us/op
     p(99.9990) =    113.408 us/op
     p(99.9999) =    401.175 us/op
    p(100.0000) =   1368.064 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 84.78% complete, ETA 01:16:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.092 ±(99.9%) 0.007 us/op
# Warmup Iteration   2: 0.086 ±(99.9%) 0.003 us/op
# Warmup Iteration   3: 0.093 ±(99.9%) 0.001 us/op
# Warmup Iteration   4: 0.094 ±(99.9%) 0.001 us/op
# Warmup Iteration   5: 0.093 ±(99.9%) 0.001 us/op
Iteration   1: 0.095 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.069 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.117 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.177 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.639 us/op
                 findLastPrefixUsingScanner2·p1.00:   65.664 us/op

Iteration   2: 0.092 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.069 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.087 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.167 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.799 us/op
                 findLastPrefixUsingScanner2·p1.00:   20.512 us/op

Iteration   3: 0.094 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.070 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.116 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.179 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.452 us/op
                 findLastPrefixUsingScanner2·p1.00:   85.632 us/op

Iteration   4: 0.094 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.069 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.179 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.130 us/op
                 findLastPrefixUsingScanner2·p1.00:   132.864 us/op

Iteration   5: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.068 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.177 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.841 us/op
                 findLastPrefixUsingScanner2·p1.00:   66.176 us/op

Iteration   6: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.070 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.159 us/op
                 findLastPrefixUsingScanner2·p0.9999: 6.955 us/op
                 findLastPrefixUsingScanner2·p1.00:   36.032 us/op

Iteration   7: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.069 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.167 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.053 us/op
                 findLastPrefixUsingScanner2·p1.00:   48.192 us/op

Iteration   8: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.069 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.113 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.168 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.629 us/op
                 findLastPrefixUsingScanner2·p1.00:   83.328 us/op

Iteration   9: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.069 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.087 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.176 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.554 us/op
                 findLastPrefixUsingScanner2·p1.00:   53.376 us/op

Iteration  10: 0.096 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.070 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.118 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.179 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.563 us/op
                 findLastPrefixUsingScanner2·p1.00:   37.376 us/op

Iteration  11: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.070 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.120 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.165 us/op
                 findLastPrefixUsingScanner2·p0.9999: 6.802 us/op
                 findLastPrefixUsingScanner2·p1.00:   22.912 us/op

Iteration  12: 0.094 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.069 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.176 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.165 us/op
                 findLastPrefixUsingScanner2·p1.00:   53.504 us/op

Iteration  13: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.070 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.087 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.174 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.679 us/op
                 findLastPrefixUsingScanner2·p1.00:   40.704 us/op

Iteration  14: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.070 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.087 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.178 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.410 us/op
                 findLastPrefixUsingScanner2·p1.00:   38.016 us/op

Iteration  15: 0.095 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.070 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.175 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.817 us/op
                 findLastPrefixUsingScanner2·p1.00:   30.656 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 5140295
  mean =      0.094 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  12.500) = 5140179 
    [ 12.500,  25.000) = 72 
    [ 25.000,  37.500) = 24 
    [ 37.500,  50.000) = 12 
    [ 50.000,  62.500) = 3 
    [ 62.500,  75.000) = 2 
    [ 75.000,  87.500) = 2 
    [ 87.500, 100.000) = 0 
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 1 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.068 us/op
     p(50.0000) =      0.088 us/op
     p(90.0000) =      0.106 us/op
     p(95.0000) =      0.108 us/op
     p(99.0000) =      0.112 us/op
     p(99.9000) =      0.174 us/op
     p(99.9900) =      7.672 us/op
     p(99.9990) =     23.122 us/op
     p(99.9999) =     64.093 us/op
    p(100.0000) =    132.864 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 85.50% complete, ETA 01:13:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.421 ±(99.9%) 0.006 us/op
# Warmup Iteration   2: 0.474 ±(99.9%) 0.024 us/op
# Warmup Iteration   3: 0.467 ±(99.9%) 0.003 us/op
# Warmup Iteration   4: 0.473 ±(99.9%) 0.002 us/op
# Warmup Iteration   5: 0.468 ±(99.9%) 0.002 us/op
Iteration   1: 0.469 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.443 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.457 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.460 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.461 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.470 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.152 us/op
                 findLastPrefixUsingScanner2·p0.9999: 13.068 us/op
                 findLastPrefixUsingScanner2·p1.00:   93.824 us/op

Iteration   2: 0.468 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.445 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.458 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.460 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.461 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.468 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.009 us/op
                 findLastPrefixUsingScanner2·p0.9999: 11.418 us/op
                 findLastPrefixUsingScanner2·p1.00:   50.560 us/op

Iteration   3: 0.473 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.450 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.462 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.465 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.465 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.472 us/op
                 findLastPrefixUsingScanner2·p0.999:  3.976 us/op
                 findLastPrefixUsingScanner2·p0.9999: 11.159 us/op
                 findLastPrefixUsingScanner2·p1.00:   131.328 us/op

Iteration   4: 0.472 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.449 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.462 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.464 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.465 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.471 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.006 us/op
                 findLastPrefixUsingScanner2·p0.9999: 11.925 us/op
                 findLastPrefixUsingScanner2·p1.00:   43.200 us/op

Iteration   5: 0.473 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.450 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.462 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.465 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.465 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.471 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.248 us/op
                 findLastPrefixUsingScanner2·p0.9999: 11.674 us/op
                 findLastPrefixUsingScanner2·p1.00:   44.672 us/op

Iteration   6: 0.467 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.444 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.458 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.460 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.461 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.467 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.004 us/op
                 findLastPrefixUsingScanner2·p0.9999: 10.974 us/op
                 findLastPrefixUsingScanner2·p1.00:   101.120 us/op

Iteration   7: 0.471 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.445 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.458 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.462 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.463 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.470 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.379 us/op
                 findLastPrefixUsingScanner2·p0.9999: 12.566 us/op
                 findLastPrefixUsingScanner2·p1.00:   101.760 us/op

Iteration   8: 0.466 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.444 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.457 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.459 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.460 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.467 us/op
                 findLastPrefixUsingScanner2·p0.999:  3.840 us/op
                 findLastPrefixUsingScanner2·p0.9999: 10.572 us/op
                 findLastPrefixUsingScanner2·p1.00:   86.016 us/op

Iteration   9: 0.476 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.453 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.466 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.468 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.475 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.482 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.004 us/op
                 findLastPrefixUsingScanner2·p0.9999: 10.676 us/op
                 findLastPrefixUsingScanner2·p1.00:   61.568 us/op

Iteration  10: 0.473 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.447 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.461 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.465 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.474 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.477 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.189 us/op
                 findLastPrefixUsingScanner2·p0.9999: 12.289 us/op
                 findLastPrefixUsingScanner2·p1.00:   97.792 us/op

Iteration  11: 0.472 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.449 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.461 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.464 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.464 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.472 us/op
                 findLastPrefixUsingScanner2·p0.999:  3.963 us/op
                 findLastPrefixUsingScanner2·p0.9999: 11.805 us/op
                 findLastPrefixUsingScanner2·p1.00:   101.888 us/op

Iteration  12: 0.469 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.445 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.458 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.460 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.461 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.469 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.142 us/op
                 findLastPrefixUsingScanner2·p0.9999: 11.311 us/op
                 findLastPrefixUsingScanner2·p1.00:   127.616 us/op

Iteration  13: 0.471 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.445 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.460 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.463 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.463 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.471 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.299 us/op
                 findLastPrefixUsingScanner2·p0.9999: 12.012 us/op
                 findLastPrefixUsingScanner2·p1.00:   166.400 us/op

Iteration  14: 0.468 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.443 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.457 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.460 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.460 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.468 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.157 us/op
                 findLastPrefixUsingScanner2·p0.9999: 11.068 us/op
                 findLastPrefixUsingScanner2·p1.00:   78.592 us/op

Iteration  15: 0.468 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.444 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.458 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.460 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.460 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.470 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.128 us/op
                 findLastPrefixUsingScanner2·p0.9999: 11.742 us/op
                 findLastPrefixUsingScanner2·p1.00:   73.984 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 5395859
  mean =      0.470 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  12.500) = 5395419 
    [ 12.500,  25.000) = 296 
    [ 25.000,  37.500) = 86 
    [ 37.500,  50.000) = 31 
    [ 50.000,  62.500) = 10 
    [ 62.500,  75.000) = 2 
    [ 75.000,  87.500) = 5 
    [ 87.500, 100.000) = 2 
    [100.000, 112.500) = 4 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 3 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 1 
    [175.000, 187.500) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.443 us/op
     p(50.0000) =      0.460 us/op
     p(90.0000) =      0.464 us/op
     p(95.0000) =      0.466 us/op
     p(99.0000) =      0.475 us/op
     p(99.9000) =      4.080 us/op
     p(99.9900) =     11.575 us/op
     p(99.9990) =     38.173 us/op
     p(99.9999) =    101.837 us/op
    p(100.0000) =    166.400 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 86.23% complete, ETA 01:09:26
# Fork: 1 of 1
# Warmup Iteration   1: 4.465 ±(99.9%) 0.012 us/op
# Warmup Iteration   2: 3.730 ±(99.9%) 0.010 us/op
# Warmup Iteration   3: 4.068 ±(99.9%) 0.006 us/op
# Warmup Iteration   4: 4.125 ±(99.9%) 0.041 us/op
# Warmup Iteration   5: 4.007 ±(99.9%) 0.005 us/op
Iteration   1: 4.002 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.908 us/op
                 findLastPrefixUsingScanner2·p0.50:   3.952 us/op
                 findLastPrefixUsingScanner2·p0.90:   3.972 us/op
                 findLastPrefixUsingScanner2·p0.95:   3.980 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.104 us/op
                 findLastPrefixUsingScanner2·p0.999:  12.926 us/op
                 findLastPrefixUsingScanner2·p0.9999: 42.083 us/op
                 findLastPrefixUsingScanner2·p1.00:   129.280 us/op

Iteration   2: 4.113 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.988 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.064 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.084 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.092 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.248 us/op
                 findLastPrefixUsingScanner2·p0.999:  13.419 us/op
                 findLastPrefixUsingScanner2·p0.9999: 40.108 us/op
                 findLastPrefixUsingScanner2·p1.00:   136.960 us/op

Iteration   3: 4.118 ±(99.9%) 0.010 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.984 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.068 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.084 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.092 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.200 us/op
                 findLastPrefixUsingScanner2·p0.999:  12.640 us/op
                 findLastPrefixUsingScanner2·p0.9999: 42.550 us/op
                 findLastPrefixUsingScanner2·p1.00:   434.688 us/op

Iteration   4: 4.093 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.992 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.040 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.060 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.072 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.160 us/op
                 findLastPrefixUsingScanner2·p0.999:  13.145 us/op
                 findLastPrefixUsingScanner2·p0.9999: 45.953 us/op
                 findLastPrefixUsingScanner2·p1.00:   389.632 us/op

Iteration   5: 4.051 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.920 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.004 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.024 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.028 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.104 us/op
                 findLastPrefixUsingScanner2·p0.999:  13.200 us/op
                 findLastPrefixUsingScanner2·p0.9999: 43.565 us/op
                 findLastPrefixUsingScanner2·p1.00:   123.520 us/op

Iteration   6: 4.067 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.948 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.016 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.040 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.044 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.128 us/op
                 findLastPrefixUsingScanner2·p0.999:  13.224 us/op
                 findLastPrefixUsingScanner2·p0.9999: 45.760 us/op
                 findLastPrefixUsingScanner2·p1.00:   155.648 us/op

Iteration   7: 4.033 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.940 us/op
                 findLastPrefixUsingScanner2·p0.50:   3.984 us/op
                 findLastPrefixUsingScanner2·p0.90:   3.996 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.004 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.112 us/op
                 findLastPrefixUsingScanner2·p0.999:  13.264 us/op
                 findLastPrefixUsingScanner2·p0.9999: 44.076 us/op
                 findLastPrefixUsingScanner2·p1.00:   94.976 us/op

Iteration   8: 4.122 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.016 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.068 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.104 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.112 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.216 us/op
                 findLastPrefixUsingScanner2·p0.999:  13.040 us/op
                 findLastPrefixUsingScanner2·p0.9999: 40.112 us/op
                 findLastPrefixUsingScanner2·p1.00:   143.360 us/op

Iteration   9: 4.129 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.008 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.104 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.112 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.232 us/op
                 findLastPrefixUsingScanner2·p0.999:  12.896 us/op
                 findLastPrefixUsingScanner2·p0.9999: 33.578 us/op
                 findLastPrefixUsingScanner2·p1.00:   356.352 us/op

Iteration  10: 4.073 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.960 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.020 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.036 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.044 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.256 us/op
                 findLastPrefixUsingScanner2·p0.999:  13.202 us/op
                 findLastPrefixUsingScanner2·p0.9999: 37.636 us/op
                 findLastPrefixUsingScanner2·p1.00:   407.040 us/op

Iteration  11: 4.094 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.988 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.048 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.068 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.072 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.184 us/op
                 findLastPrefixUsingScanner2·p0.999:  12.800 us/op
                 findLastPrefixUsingScanner2·p0.9999: 37.930 us/op
                 findLastPrefixUsingScanner2·p1.00:   106.496 us/op

Iteration  12: 4.048 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.956 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.000 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.016 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.024 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.128 us/op
                 findLastPrefixUsingScanner2·p0.999:  12.666 us/op
                 findLastPrefixUsingScanner2·p0.9999: 39.803 us/op
                 findLastPrefixUsingScanner2·p1.00:   146.432 us/op

Iteration  13: 4.112 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.980 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.056 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.080 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.088 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.256 us/op
                 findLastPrefixUsingScanner2·p0.999:  13.360 us/op
                 findLastPrefixUsingScanner2·p0.9999: 48.263 us/op
                 findLastPrefixUsingScanner2·p1.00:   168.960 us/op

Iteration  14: 4.105 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.992 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.048 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.080 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.092 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.200 us/op
                 findLastPrefixUsingScanner2·p0.999:  13.296 us/op
                 findLastPrefixUsingScanner2·p0.9999: 48.805 us/op
                 findLastPrefixUsingScanner2·p1.00:   168.448 us/op

Iteration  15: 4.057 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.956 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.004 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.024 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.032 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.168 us/op
                 findLastPrefixUsingScanner2·p0.999:  13.218 us/op
                 findLastPrefixUsingScanner2·p0.9999: 45.640 us/op
                 findLastPrefixUsingScanner2·p1.00:   138.752 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 4627620
  mean =      4.081 ±(99.9%) 0.002 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 4627335 
    [ 50.000, 100.000) = 207 
    [100.000, 150.000) = 64 
    [150.000, 200.000) = 6 
    [200.000, 250.000) = 0 
    [250.000, 300.000) = 0 
    [300.000, 350.000) = 1 
    [350.000, 400.000) = 3 
    [400.000, 450.000) = 4 

  Percentiles, us/op:
      p(0.0000) =      3.908 us/op
     p(50.0000) =      4.036 us/op
     p(90.0000) =      4.080 us/op
     p(95.0000) =      4.096 us/op
     p(99.0000) =      4.184 us/op
     p(99.9000) =     13.072 us/op
     p(99.9900) =     43.072 us/op
     p(99.9990) =    113.395 us/op
     p(99.9999) =    396.114 us/op
    p(100.0000) =    434.688 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 86.95% complete, ETA 01:05:46
# Fork: 1 of 1
# Warmup Iteration   1: 14318.419 ±(99.9%) 102.924 us/op
# Warmup Iteration   2: 14272.474 ±(99.9%) 9.452 us/op
# Warmup Iteration   3: 14264.901 ±(99.9%) 7.251 us/op
# Warmup Iteration   4: 14262.354 ±(99.9%) 6.301 us/op
# Warmup Iteration   5: 14265.673 ±(99.9%) 6.003 us/op
Iteration   1: 14288.650 ±(99.9%) 6.203 us/op
                 runAlgorithm·p0.00:   14204.928 us/op
                 runAlgorithm·p0.50:   14286.848 us/op
                 runAlgorithm·p0.90:   14336.000 us/op
                 runAlgorithm·p0.95:   14368.768 us/op
                 runAlgorithm·p0.99:   14483.456 us/op
                 runAlgorithm·p0.999:  14581.760 us/op
                 runAlgorithm·p0.9999: 14581.760 us/op
                 runAlgorithm·p1.00:   14581.760 us/op

Iteration   2: 14264.177 ±(99.9%) 6.651 us/op
                 runAlgorithm·p0.00:   14188.544 us/op
                 runAlgorithm·p0.50:   14254.080 us/op
                 runAlgorithm·p0.90:   14303.232 us/op
                 runAlgorithm·p0.95:   14350.746 us/op
                 runAlgorithm·p0.99:   14499.512 us/op
                 runAlgorithm·p0.999:  14729.216 us/op
                 runAlgorithm·p0.9999: 14729.216 us/op
                 runAlgorithm·p1.00:   14729.216 us/op

Iteration   3: 14276.198 ±(99.9%) 11.332 us/op
                 runAlgorithm·p0.00:   14188.544 us/op
                 runAlgorithm·p0.50:   14254.080 us/op
                 runAlgorithm·p0.90:   14336.000 us/op
                 runAlgorithm·p0.95:   14401.536 us/op
                 runAlgorithm·p0.99:   14729.052 us/op
                 runAlgorithm·p0.999:  14876.672 us/op
                 runAlgorithm·p0.9999: 14876.672 us/op
                 runAlgorithm·p1.00:   14876.672 us/op

Iteration   4: 14259.759 ±(99.9%) 5.362 us/op
                 runAlgorithm·p0.00:   14188.544 us/op
                 runAlgorithm·p0.50:   14254.080 us/op
                 runAlgorithm·p0.90:   14303.232 us/op
                 runAlgorithm·p0.95:   14319.616 us/op
                 runAlgorithm·p0.99:   14450.360 us/op
                 runAlgorithm·p0.999:  14565.376 us/op
                 runAlgorithm·p0.9999: 14565.376 us/op
                 runAlgorithm·p1.00:   14565.376 us/op

Iteration   5: 14259.970 ±(99.9%) 6.075 us/op
                 runAlgorithm·p0.00:   14188.544 us/op
                 runAlgorithm·p0.50:   14254.080 us/op
                 runAlgorithm·p0.90:   14303.232 us/op
                 runAlgorithm·p0.95:   14336.000 us/op
                 runAlgorithm·p0.99:   14483.456 us/op
                 runAlgorithm·p0.999:  14630.912 us/op
                 runAlgorithm·p0.9999: 14630.912 us/op
                 runAlgorithm·p1.00:   14630.912 us/op

Iteration   6: 14272.801 ±(99.9%) 6.216 us/op
                 runAlgorithm·p0.00:   14188.544 us/op
                 runAlgorithm·p0.50:   14254.080 us/op
                 runAlgorithm·p0.90:   14336.000 us/op
                 runAlgorithm·p0.95:   14368.768 us/op
                 runAlgorithm·p0.99:   14466.744 us/op
                 runAlgorithm·p0.999:  14581.760 us/op
                 runAlgorithm·p0.9999: 14581.760 us/op
                 runAlgorithm·p1.00:   14581.760 us/op

Iteration   7: 14259.128 ±(99.9%) 5.850 us/op
                 runAlgorithm·p0.00:   14188.544 us/op
                 runAlgorithm·p0.50:   14254.080 us/op
                 runAlgorithm·p0.90:   14319.616 us/op
                 runAlgorithm·p0.95:   14336.000 us/op
                 runAlgorithm·p0.99:   14450.688 us/op
                 runAlgorithm·p0.999:  14499.840 us/op
                 runAlgorithm·p0.9999: 14499.840 us/op
                 runAlgorithm·p1.00:   14499.840 us/op

Iteration   8: 14247.825 ±(99.9%) 5.302 us/op
                 runAlgorithm·p0.00:   14188.544 us/op
                 runAlgorithm·p0.50:   14237.696 us/op
                 runAlgorithm·p0.90:   14286.848 us/op
                 runAlgorithm·p0.95:   14319.616 us/op
                 runAlgorithm·p0.99:   14450.196 us/op
                 runAlgorithm·p0.999:  14598.144 us/op
                 runAlgorithm·p0.9999: 14598.144 us/op
                 runAlgorithm·p1.00:   14598.144 us/op

Iteration   9: 14256.487 ±(99.9%) 6.997 us/op
                 runAlgorithm·p0.00:   14188.544 us/op
                 runAlgorithm·p0.50:   14237.696 us/op
                 runAlgorithm·p0.90:   14303.232 us/op
                 runAlgorithm·p0.95:   14336.000 us/op
                 runAlgorithm·p0.99:   14466.744 us/op
                 runAlgorithm·p0.999:  14827.520 us/op
                 runAlgorithm·p0.9999: 14827.520 us/op
                 runAlgorithm·p1.00:   14827.520 us/op

Iteration  10: 14256.137 ±(99.9%) 7.399 us/op
                 runAlgorithm·p0.00:   14188.544 us/op
                 runAlgorithm·p0.50:   14237.696 us/op
                 runAlgorithm·p0.90:   14303.232 us/op
                 runAlgorithm·p0.95:   14336.000 us/op
                 runAlgorithm·p0.99:   14531.953 us/op
                 runAlgorithm·p0.999:  14893.056 us/op
                 runAlgorithm·p0.9999: 14893.056 us/op
                 runAlgorithm·p1.00:   14893.056 us/op

Iteration  11: 14256.160 ±(99.9%) 5.902 us/op
                 runAlgorithm·p0.00:   14188.544 us/op
                 runAlgorithm·p0.50:   14237.696 us/op
                 runAlgorithm·p0.90:   14303.232 us/op
                 runAlgorithm·p0.95:   14336.000 us/op
                 runAlgorithm·p0.99:   14434.304 us/op
                 runAlgorithm·p0.999:  14516.224 us/op
                 runAlgorithm·p0.9999: 14516.224 us/op
                 runAlgorithm·p1.00:   14516.224 us/op

Iteration  12: 14273.269 ±(99.9%) 6.166 us/op
                 runAlgorithm·p0.00:   14188.544 us/op
                 runAlgorithm·p0.50:   14270.464 us/op
                 runAlgorithm·p0.90:   14319.616 us/op
                 runAlgorithm·p0.95:   14352.384 us/op
                 runAlgorithm·p0.99:   14483.128 us/op
                 runAlgorithm·p0.999:  14630.912 us/op
                 runAlgorithm·p0.9999: 14630.912 us/op
                 runAlgorithm·p1.00:   14630.912 us/op

Iteration  13: 14261.396 ±(99.9%) 6.279 us/op
                 runAlgorithm·p0.00:   14188.544 us/op
                 runAlgorithm·p0.50:   14254.080 us/op
                 runAlgorithm·p0.90:   14319.616 us/op
                 runAlgorithm·p0.95:   14352.384 us/op
                 runAlgorithm·p0.99:   14466.744 us/op
                 runAlgorithm·p0.999:  14548.992 us/op
                 runAlgorithm·p0.9999: 14548.992 us/op
                 runAlgorithm·p1.00:   14548.992 us/op

Iteration  14: 14252.820 ±(99.9%) 6.120 us/op
                 runAlgorithm·p0.00:   14172.160 us/op
                 runAlgorithm·p0.50:   14237.696 us/op
                 runAlgorithm·p0.90:   14303.232 us/op
                 runAlgorithm·p0.95:   14352.384 us/op
                 runAlgorithm·p0.99:   14467.072 us/op
                 runAlgorithm·p0.999:  14516.224 us/op
                 runAlgorithm·p0.9999: 14516.224 us/op
                 runAlgorithm·p1.00:   14516.224 us/op

Iteration  15: 14256.674 ±(99.9%) 6.526 us/op
                 runAlgorithm·p0.00:   14188.544 us/op
                 runAlgorithm·p0.50:   14254.080 us/op
                 runAlgorithm·p0.90:   14303.232 us/op
                 runAlgorithm·p0.95:   14336.000 us/op
                 runAlgorithm·p0.99:   14516.224 us/op
                 runAlgorithm·p0.999:  14647.296 us/op
                 runAlgorithm·p0.9999: 14647.296 us/op
                 runAlgorithm·p1.00:   14647.296 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  N = 10515
  mean =  14262.757 ±(99.9%) 1.753 us/op

  Histogram, us/op:
    [14100.000, 14150.000) = 0 
    [14150.000, 14200.000) = 80 
    [14200.000, 14250.000) = 4623 
    [14250.000, 14300.000) = 4040 
    [14300.000, 14350.000) = 1217 
    [14350.000, 14400.000) = 257 
    [14400.000, 14450.000) = 121 
    [14450.000, 14500.000) = 106 
    [14500.000, 14550.000) = 27 
    [14550.000, 14600.000) = 10 
    [14600.000, 14650.000) = 13 
    [14650.000, 14700.000) = 8 
    [14700.000, 14750.000) = 5 
    [14750.000, 14800.000) = 3 
    [14800.000, 14850.000) = 2 

  Percentiles, us/op:
      p(0.0000) =  14172.160 us/op
     p(50.0000) =  14254.080 us/op
     p(90.0000) =  14319.616 us/op
     p(95.0000) =  14352.384 us/op
     p(99.0000) =  14483.456 us/op
     p(99.9000) =  14737.146 us/op
     p(99.9900) =  14892.211 us/op
     p(99.9990) =  14893.056 us/op
     p(99.9999) =  14893.056 us/op
    p(100.0000) =  14893.056 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 87.68% complete, ETA 01:02:06
# Fork: 1 of 1
# Warmup Iteration   1: 322.321 ±(99.9%) 1.859 us/op
# Warmup Iteration   2: 316.359 ±(99.9%) 0.414 us/op
# Warmup Iteration   3: 315.025 ±(99.9%) 0.364 us/op
# Warmup Iteration   4: 314.785 ±(99.9%) 0.349 us/op
# Warmup Iteration   5: 315.363 ±(99.9%) 0.373 us/op
Iteration   1: 315.271 ±(99.9%) 0.361 us/op
                 runAlgorithm·p0.00:   302.080 us/op
                 runAlgorithm·p0.50:   312.320 us/op
                 runAlgorithm·p0.90:   324.608 us/op
                 runAlgorithm·p0.95:   329.216 us/op
                 runAlgorithm·p0.99:   362.496 us/op
                 runAlgorithm·p0.999:  673.393 us/op
                 runAlgorithm·p0.9999: 743.250 us/op
                 runAlgorithm·p1.00:   777.216 us/op

Iteration   2: 315.388 ±(99.9%) 0.360 us/op
                 runAlgorithm·p0.00:   302.592 us/op
                 runAlgorithm·p0.50:   312.320 us/op
                 runAlgorithm·p0.90:   324.608 us/op
                 runAlgorithm·p0.95:   329.984 us/op
                 runAlgorithm·p0.99:   359.424 us/op
                 runAlgorithm·p0.999:  672.420 us/op
                 runAlgorithm·p0.9999: 765.775 us/op
                 runAlgorithm·p1.00:   776.192 us/op

Iteration   3: 315.960 ±(99.9%) 0.386 us/op
                 runAlgorithm·p0.00:   302.592 us/op
                 runAlgorithm·p0.50:   312.832 us/op
                 runAlgorithm·p0.90:   325.632 us/op
                 runAlgorithm·p0.95:   330.752 us/op
                 runAlgorithm·p0.99:   363.520 us/op
                 runAlgorithm·p0.999:  683.801 us/op
                 runAlgorithm·p0.9999: 784.384 us/op
                 runAlgorithm·p1.00:   886.784 us/op

Iteration   4: 314.367 ±(99.9%) 0.339 us/op
                 runAlgorithm·p0.00:   302.080 us/op
                 runAlgorithm·p0.50:   311.808 us/op
                 runAlgorithm·p0.90:   323.584 us/op
                 runAlgorithm·p0.95:   327.680 us/op
                 runAlgorithm·p0.99:   352.768 us/op
                 runAlgorithm·p0.999:  660.712 us/op
                 runAlgorithm·p0.9999: 724.564 us/op
                 runAlgorithm·p1.00:   867.328 us/op

Iteration   5: 315.264 ±(99.9%) 0.380 us/op
                 runAlgorithm·p0.00:   302.080 us/op
                 runAlgorithm·p0.50:   312.320 us/op
                 runAlgorithm·p0.90:   325.120 us/op
                 runAlgorithm·p0.95:   328.704 us/op
                 runAlgorithm·p0.99:   350.720 us/op
                 runAlgorithm·p0.999:  710.982 us/op
                 runAlgorithm·p0.9999: 787.284 us/op
                 runAlgorithm·p1.00:   807.936 us/op

Iteration   6: 315.487 ±(99.9%) 0.381 us/op
                 runAlgorithm·p0.00:   302.592 us/op
                 runAlgorithm·p0.50:   312.832 us/op
                 runAlgorithm·p0.90:   325.120 us/op
                 runAlgorithm·p0.95:   329.728 us/op
                 runAlgorithm·p0.99:   357.888 us/op
                 runAlgorithm·p0.999:  695.316 us/op
                 runAlgorithm·p0.9999: 780.118 us/op
                 runAlgorithm·p1.00:   816.128 us/op

Iteration   7: 315.020 ±(99.9%) 0.366 us/op
                 runAlgorithm·p0.00:   302.080 us/op
                 runAlgorithm·p0.50:   312.320 us/op
                 runAlgorithm·p0.90:   324.096 us/op
                 runAlgorithm·p0.95:   327.680 us/op
                 runAlgorithm·p0.99:   345.600 us/op
                 runAlgorithm·p0.999:  685.656 us/op
                 runAlgorithm·p0.9999: 791.652 us/op
                 runAlgorithm·p1.00:   891.904 us/op

Iteration   8: 314.489 ±(99.9%) 0.340 us/op
                 runAlgorithm·p0.00:   301.568 us/op
                 runAlgorithm·p0.50:   311.808 us/op
                 runAlgorithm·p0.90:   323.584 us/op
                 runAlgorithm·p0.95:   328.192 us/op
                 runAlgorithm·p0.99:   349.696 us/op
                 runAlgorithm·p0.999:  661.504 us/op
                 runAlgorithm·p0.9999: 732.888 us/op
                 runAlgorithm·p1.00:   807.936 us/op

Iteration   9: 314.676 ±(99.9%) 0.333 us/op
                 runAlgorithm·p0.00:   302.080 us/op
                 runAlgorithm·p0.50:   312.320 us/op
                 runAlgorithm·p0.90:   324.096 us/op
                 runAlgorithm·p0.95:   327.680 us/op
                 runAlgorithm·p0.99:   351.232 us/op
                 runAlgorithm·p0.999:  658.696 us/op
                 runAlgorithm·p0.9999: 724.543 us/op
                 runAlgorithm·p1.00:   793.600 us/op

Iteration  10: 314.386 ±(99.9%) 0.348 us/op
                 runAlgorithm·p0.00:   302.592 us/op
                 runAlgorithm·p0.50:   311.808 us/op
                 runAlgorithm·p0.90:   323.072 us/op
                 runAlgorithm·p0.95:   327.168 us/op
                 runAlgorithm·p0.99:   347.136 us/op
                 runAlgorithm·p0.999:  674.261 us/op
                 runAlgorithm·p0.9999: 732.640 us/op
                 runAlgorithm·p1.00:   813.056 us/op

Iteration  11: 314.448 ±(99.9%) 0.355 us/op
                 runAlgorithm·p0.00:   301.568 us/op
                 runAlgorithm·p0.50:   311.808 us/op
                 runAlgorithm·p0.90:   323.584 us/op
                 runAlgorithm·p0.95:   327.168 us/op
                 runAlgorithm·p0.99:   353.792 us/op
                 runAlgorithm·p0.999:  676.562 us/op
                 runAlgorithm·p0.9999: 747.339 us/op
                 runAlgorithm·p1.00:   868.352 us/op

Iteration  12: 314.740 ±(99.9%) 0.351 us/op
                 runAlgorithm·p0.00:   301.568 us/op
                 runAlgorithm·p0.50:   311.808 us/op
                 runAlgorithm·p0.90:   324.096 us/op
                 runAlgorithm·p0.95:   328.192 us/op
                 runAlgorithm·p0.99:   354.125 us/op
                 runAlgorithm·p0.999:  665.600 us/op
                 runAlgorithm·p0.9999: 742.400 us/op
                 runAlgorithm·p1.00:   779.264 us/op

Iteration  13: 314.211 ±(99.9%) 0.354 us/op
                 runAlgorithm·p0.00:   301.056 us/op
                 runAlgorithm·p0.50:   311.808 us/op
                 runAlgorithm·p0.90:   323.072 us/op
                 runAlgorithm·p0.95:   326.656 us/op
                 runAlgorithm·p0.99:   349.757 us/op
                 runAlgorithm·p0.999:  676.057 us/op
                 runAlgorithm·p0.9999: 733.476 us/op
                 runAlgorithm·p1.00:   740.352 us/op

Iteration  14: 314.868 ±(99.9%) 0.355 us/op
                 runAlgorithm·p0.00:   301.568 us/op
                 runAlgorithm·p0.50:   312.320 us/op
                 runAlgorithm·p0.90:   324.608 us/op
                 runAlgorithm·p0.95:   328.704 us/op
                 runAlgorithm·p0.99:   351.744 us/op
                 runAlgorithm·p0.999:  675.840 us/op
                 runAlgorithm·p0.9999: 758.431 us/op
                 runAlgorithm·p1.00:   793.600 us/op

Iteration  15: 315.061 ±(99.9%) 0.362 us/op
                 runAlgorithm·p0.00:   302.080 us/op
                 runAlgorithm·p0.50:   312.320 us/op
                 runAlgorithm·p0.90:   324.096 us/op
                 runAlgorithm·p0.95:   328.192 us/op
                 runAlgorithm·p0.99:   353.792 us/op
                 runAlgorithm·p0.999:  684.336 us/op
                 runAlgorithm·p0.9999: 760.810 us/op
                 runAlgorithm·p1.00:   811.008 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 475772
  mean =    314.908 ±(99.9%) 0.093 us/op

  Histogram, us/op:
    [300.000, 350.000) = 470123 
    [350.000, 400.000) = 4323 
    [400.000, 450.000) = 199 
    [450.000, 500.000) = 87 
    [500.000, 550.000) = 9 
    [550.000, 600.000) = 14 
    [600.000, 650.000) = 200 
    [650.000, 700.000) = 573 
    [700.000, 750.000) = 187 
    [750.000, 800.000) = 45 
    [800.000, 850.000) = 8 

  Percentiles, us/op:
      p(0.0000) =    301.056 us/op
     p(50.0000) =    312.320 us/op
     p(90.0000) =    324.096 us/op
     p(95.0000) =    328.192 us/op
     p(99.0000) =    356.352 us/op
     p(99.9000) =    676.864 us/op
     p(99.9900) =    757.169 us/op
     p(99.9990) =    846.378 us/op
     p(99.9999) =    891.904 us/op
    p(100.0000) =    891.904 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 88.40% complete, ETA 00:58:26
# Fork: 1 of 1
# Warmup Iteration   1: 31365.345 ±(99.9%) 542.288 us/op
# Warmup Iteration   2: 31166.962 ±(99.9%) 109.910 us/op
# Warmup Iteration   3: 31156.345 ±(99.9%) 109.141 us/op
# Warmup Iteration   4: 31174.822 ±(99.9%) 109.102 us/op
# Warmup Iteration   5: 31172.780 ±(99.9%) 109.404 us/op
Iteration   1: 31145.423 ±(99.9%) 110.498 us/op
                 runAlgorithm·p0.00:   30638.080 us/op
                 runAlgorithm·p0.50:   30867.456 us/op
                 runAlgorithm·p0.90:   32276.480 us/op
                 runAlgorithm·p0.95:   32342.016 us/op
                 runAlgorithm·p0.99:   32505.856 us/op
                 runAlgorithm·p0.999:  32636.928 us/op
                 runAlgorithm·p0.9999: 32636.928 us/op
                 runAlgorithm·p1.00:   32636.928 us/op

Iteration   2: 31197.484 ±(99.9%) 111.303 us/op
                 runAlgorithm·p0.00:   30670.848 us/op
                 runAlgorithm·p0.50:   30900.224 us/op
                 runAlgorithm·p0.90:   32342.016 us/op
                 runAlgorithm·p0.95:   32407.552 us/op
                 runAlgorithm·p0.99:   32582.533 us/op
                 runAlgorithm·p0.999:  32636.928 us/op
                 runAlgorithm·p0.9999: 32636.928 us/op
                 runAlgorithm·p1.00:   32636.928 us/op

Iteration   3: 31179.518 ±(99.9%) 108.288 us/op
                 runAlgorithm·p0.00:   30670.848 us/op
                 runAlgorithm·p0.50:   30900.224 us/op
                 runAlgorithm·p0.90:   32276.480 us/op
                 runAlgorithm·p0.95:   32342.016 us/op
                 runAlgorithm·p0.99:   32564.183 us/op
                 runAlgorithm·p0.999:  32866.304 us/op
                 runAlgorithm·p0.9999: 32866.304 us/op
                 runAlgorithm·p1.00:   32866.304 us/op

Iteration   4: 31157.876 ±(99.9%) 110.254 us/op
                 runAlgorithm·p0.00:   30638.080 us/op
                 runAlgorithm·p0.50:   30867.456 us/op
                 runAlgorithm·p0.90:   32276.480 us/op
                 runAlgorithm·p0.95:   32342.016 us/op
                 runAlgorithm·p0.99:   32596.951 us/op
                 runAlgorithm·p0.999:  32866.304 us/op
                 runAlgorithm·p0.9999: 32866.304 us/op
                 runAlgorithm·p1.00:   32866.304 us/op

Iteration   5: 31236.608 ±(99.9%) 116.747 us/op
                 runAlgorithm·p0.00:   30638.080 us/op
                 runAlgorithm·p0.50:   30932.992 us/op
                 runAlgorithm·p0.90:   32342.016 us/op
                 runAlgorithm·p0.95:   32473.088 us/op
                 runAlgorithm·p0.99:   33007.862 us/op
                 runAlgorithm·p0.999:  33226.752 us/op
                 runAlgorithm·p0.9999: 33226.752 us/op
                 runAlgorithm·p1.00:   33226.752 us/op

Iteration   6: 31154.610 ±(99.9%) 107.686 us/op
                 runAlgorithm·p0.00:   30638.080 us/op
                 runAlgorithm·p0.50:   30867.456 us/op
                 runAlgorithm·p0.90:   32276.480 us/op
                 runAlgorithm·p0.95:   32338.739 us/op
                 runAlgorithm·p0.99:   32505.856 us/op
                 runAlgorithm·p0.999:  32604.160 us/op
                 runAlgorithm·p0.9999: 32604.160 us/op
                 runAlgorithm·p1.00:   32604.160 us/op

Iteration   7: 31151.445 ±(99.9%) 108.449 us/op
                 runAlgorithm·p0.00:   30638.080 us/op
                 runAlgorithm·p0.50:   30867.456 us/op
                 runAlgorithm·p0.90:   32243.712 us/op
                 runAlgorithm·p0.95:   32309.248 us/op
                 runAlgorithm·p0.99:   32473.088 us/op
                 runAlgorithm·p0.999:  32571.392 us/op
                 runAlgorithm·p0.9999: 32571.392 us/op
                 runAlgorithm·p1.00:   32571.392 us/op

Iteration   8: 31157.876 ±(99.9%) 111.113 us/op
                 runAlgorithm·p0.00:   30638.080 us/op
                 runAlgorithm·p0.50:   30867.456 us/op
                 runAlgorithm·p0.90:   32276.480 us/op
                 runAlgorithm·p0.95:   32374.784 us/op
                 runAlgorithm·p0.99:   32564.183 us/op
                 runAlgorithm·p0.999:  32702.464 us/op
                 runAlgorithm·p0.9999: 32702.464 us/op
                 runAlgorithm·p1.00:   32702.464 us/op

Iteration   9: 31127.056 ±(99.9%) 108.985 us/op
                 runAlgorithm·p0.00:   30638.080 us/op
                 runAlgorithm·p0.50:   30834.688 us/op
                 runAlgorithm·p0.90:   32243.712 us/op
                 runAlgorithm·p0.95:   32309.248 us/op
                 runAlgorithm·p0.99:   32556.319 us/op
                 runAlgorithm·p0.999:  32964.608 us/op
                 runAlgorithm·p0.9999: 32964.608 us/op
                 runAlgorithm·p1.00:   32964.608 us/op

Iteration  10: 31161.858 ±(99.9%) 109.342 us/op
                 runAlgorithm·p0.00:   30670.848 us/op
                 runAlgorithm·p0.50:   30867.456 us/op
                 runAlgorithm·p0.90:   32276.480 us/op
                 runAlgorithm·p0.95:   32374.784 us/op
                 runAlgorithm·p0.99:   32498.647 us/op
                 runAlgorithm·p0.999:  32669.696 us/op
                 runAlgorithm·p0.9999: 32669.696 us/op
                 runAlgorithm·p1.00:   32669.696 us/op

Iteration  11: 31142.156 ±(99.9%) 110.372 us/op
                 runAlgorithm·p0.00:   30638.080 us/op
                 runAlgorithm·p0.50:   30834.688 us/op
                 runAlgorithm·p0.90:   32269.926 us/op
                 runAlgorithm·p0.95:   32338.739 us/op
                 runAlgorithm·p0.99:   32582.533 us/op
                 runAlgorithm·p0.999:  32997.376 us/op
                 runAlgorithm·p0.9999: 32997.376 us/op
                 runAlgorithm·p1.00:   32997.376 us/op

Iteration  12: 31132.856 ±(99.9%) 110.855 us/op
                 runAlgorithm·p0.00:   30670.848 us/op
                 runAlgorithm·p0.50:   30834.688 us/op
                 runAlgorithm·p0.90:   32243.712 us/op
                 runAlgorithm·p0.95:   32309.248 us/op
                 runAlgorithm·p0.99:   32765.706 us/op
                 runAlgorithm·p0.999:  32899.072 us/op
                 runAlgorithm·p0.9999: 32899.072 us/op
                 runAlgorithm·p1.00:   32899.072 us/op

Iteration  13: 31180.334 ±(99.9%) 112.028 us/op
                 runAlgorithm·p0.00:   30638.080 us/op
                 runAlgorithm·p0.50:   30900.224 us/op
                 runAlgorithm·p0.90:   32309.248 us/op
                 runAlgorithm·p0.95:   32407.552 us/op
                 runAlgorithm·p0.99:   32604.160 us/op
                 runAlgorithm·p0.999:  32636.928 us/op
                 runAlgorithm·p0.9999: 32636.928 us/op
                 runAlgorithm·p1.00:   32636.928 us/op

Iteration  14: 31179.416 ±(99.9%) 112.105 us/op
                 runAlgorithm·p0.00:   30638.080 us/op
                 runAlgorithm·p0.50:   30900.224 us/op
                 runAlgorithm·p0.90:   32309.248 us/op
                 runAlgorithm·p0.95:   32407.552 us/op
                 runAlgorithm·p0.99:   32669.696 us/op
                 runAlgorithm·p0.999:  32768.000 us/op
                 runAlgorithm·p0.9999: 32768.000 us/op
                 runAlgorithm·p1.00:   32768.000 us/op

Iteration  15: 31192.686 ±(99.9%) 110.502 us/op
                 runAlgorithm·p0.00:   30670.848 us/op
                 runAlgorithm·p0.50:   30900.224 us/op
                 runAlgorithm·p0.90:   32309.248 us/op
                 runAlgorithm·p0.95:   32374.784 us/op
                 runAlgorithm·p0.99:   32564.183 us/op
                 runAlgorithm·p0.999:  32768.000 us/op
                 runAlgorithm·p0.9999: 32768.000 us/op
                 runAlgorithm·p1.00:   32768.000 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 4816
  mean =  31166.450 ±(99.9%) 28.296 us/op

  Histogram, us/op:
    [30000.000, 30250.000) = 0 
    [30250.000, 30500.000) = 0 
    [30500.000, 30750.000) = 524 
    [30750.000, 31000.000) = 2917 
    [31000.000, 31250.000) = 270 
    [31250.000, 31500.000) = 72 
    [31500.000, 31750.000) = 14 
    [31750.000, 32000.000) = 15 
    [32000.000, 32250.000) = 458 
    [32250.000, 32500.000) = 460 
    [32500.000, 32750.000) = 71 
    [32750.000, 33000.000) = 12 
    [33000.000, 33250.000) = 3 
    [33250.000, 33500.000) = 0 
    [33500.000, 33750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  30638.080 us/op
     p(50.0000) =  30867.456 us/op
     p(90.0000) =  32276.480 us/op
     p(95.0000) =  32374.784 us/op
     p(99.0000) =  32571.392 us/op
     p(99.9000) =  32970.605 us/op
     p(99.9900) =  33226.752 us/op
     p(99.9990) =  33226.752 us/op
     p(99.9999) =  33226.752 us/op
    p(100.0000) =  33226.752 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 89.13% complete, ETA 00:54:47
# Fork: 1 of 1
# Warmup Iteration   1: 3183476.736 ±(99.9%) 711263.744 us/op
# Warmup Iteration   2: 5961504.085 ±(99.9%) 89241065.501 us/op
# Warmup Iteration   3: 3180331.008 ±(99.9%) 574260.580 us/op
# Warmup Iteration   4: 5944726.869 ±(99.9%) 88710922.121 us/op
# Warmup Iteration   5: 11374952.448 us/op
Iteration   1: 11374952.448 us/op
                 runAlgorithm·p0.00:   11374952.448 us/op
                 runAlgorithm·p0.50:   11374952.448 us/op
                 runAlgorithm·p0.90:   11374952.448 us/op
                 runAlgorithm·p0.95:   11374952.448 us/op
                 runAlgorithm·p0.99:   11374952.448 us/op
                 runAlgorithm·p0.999:  11374952.448 us/op
                 runAlgorithm·p0.9999: 11374952.448 us/op
                 runAlgorithm·p1.00:   11374952.448 us/op

Iteration   2: 11374952.448 us/op
                 runAlgorithm·p0.00:   11374952.448 us/op
                 runAlgorithm·p0.50:   11374952.448 us/op
                 runAlgorithm·p0.90:   11374952.448 us/op
                 runAlgorithm·p0.95:   11374952.448 us/op
                 runAlgorithm·p0.99:   11374952.448 us/op
                 runAlgorithm·p0.999:  11374952.448 us/op
                 runAlgorithm·p0.9999: 11374952.448 us/op
                 runAlgorithm·p1.00:   11374952.448 us/op

Iteration   3: 11374952.448 us/op
                 runAlgorithm·p0.00:   11374952.448 us/op
                 runAlgorithm·p0.50:   11374952.448 us/op
                 runAlgorithm·p0.90:   11374952.448 us/op
                 runAlgorithm·p0.95:   11374952.448 us/op
                 runAlgorithm·p0.99:   11374952.448 us/op
                 runAlgorithm·p0.999:  11374952.448 us/op
                 runAlgorithm·p0.9999: 11374952.448 us/op
                 runAlgorithm·p1.00:   11374952.448 us/op

Iteration   4: 11374952.448 us/op
                 runAlgorithm·p0.00:   11374952.448 us/op
                 runAlgorithm·p0.50:   11374952.448 us/op
                 runAlgorithm·p0.90:   11374952.448 us/op
                 runAlgorithm·p0.95:   11374952.448 us/op
                 runAlgorithm·p0.99:   11374952.448 us/op
                 runAlgorithm·p0.999:  11374952.448 us/op
                 runAlgorithm·p0.9999: 11374952.448 us/op
                 runAlgorithm·p1.00:   11374952.448 us/op

Iteration   5: 11391729.664 us/op
                 runAlgorithm·p0.00:   11391729.664 us/op
                 runAlgorithm·p0.50:   11391729.664 us/op
                 runAlgorithm·p0.90:   11391729.664 us/op
                 runAlgorithm·p0.95:   11391729.664 us/op
                 runAlgorithm·p0.99:   11391729.664 us/op
                 runAlgorithm·p0.999:  11391729.664 us/op
                 runAlgorithm·p0.9999: 11391729.664 us/op
                 runAlgorithm·p1.00:   11391729.664 us/op

Iteration   6: 11391729.664 us/op
                 runAlgorithm·p0.00:   11391729.664 us/op
                 runAlgorithm·p0.50:   11391729.664 us/op
                 runAlgorithm·p0.90:   11391729.664 us/op
                 runAlgorithm·p0.95:   11391729.664 us/op
                 runAlgorithm·p0.99:   11391729.664 us/op
                 runAlgorithm·p0.999:  11391729.664 us/op
                 runAlgorithm·p0.9999: 11391729.664 us/op
                 runAlgorithm·p1.00:   11391729.664 us/op

Iteration   7: 11374952.448 us/op
                 runAlgorithm·p0.00:   11374952.448 us/op
                 runAlgorithm·p0.50:   11374952.448 us/op
                 runAlgorithm·p0.90:   11374952.448 us/op
                 runAlgorithm·p0.95:   11374952.448 us/op
                 runAlgorithm·p0.99:   11374952.448 us/op
                 runAlgorithm·p0.999:  11374952.448 us/op
                 runAlgorithm·p0.9999: 11374952.448 us/op
                 runAlgorithm·p1.00:   11374952.448 us/op

Iteration   8: 11374952.448 us/op
                 runAlgorithm·p0.00:   11374952.448 us/op
                 runAlgorithm·p0.50:   11374952.448 us/op
                 runAlgorithm·p0.90:   11374952.448 us/op
                 runAlgorithm·p0.95:   11374952.448 us/op
                 runAlgorithm·p0.99:   11374952.448 us/op
                 runAlgorithm·p0.999:  11374952.448 us/op
                 runAlgorithm·p0.9999: 11374952.448 us/op
                 runAlgorithm·p1.00:   11374952.448 us/op

Iteration   9: 11374952.448 us/op
                 runAlgorithm·p0.00:   11374952.448 us/op
                 runAlgorithm·p0.50:   11374952.448 us/op
                 runAlgorithm·p0.90:   11374952.448 us/op
                 runAlgorithm·p0.95:   11374952.448 us/op
                 runAlgorithm·p0.99:   11374952.448 us/op
                 runAlgorithm·p0.999:  11374952.448 us/op
                 runAlgorithm·p0.9999: 11374952.448 us/op
                 runAlgorithm·p1.00:   11374952.448 us/op

Iteration  10: 11374952.448 us/op
                 runAlgorithm·p0.00:   11374952.448 us/op
                 runAlgorithm·p0.50:   11374952.448 us/op
                 runAlgorithm·p0.90:   11374952.448 us/op
                 runAlgorithm·p0.95:   11374952.448 us/op
                 runAlgorithm·p0.99:   11374952.448 us/op
                 runAlgorithm·p0.999:  11374952.448 us/op
                 runAlgorithm·p0.9999: 11374952.448 us/op
                 runAlgorithm·p1.00:   11374952.448 us/op

Iteration  11: 11374952.448 us/op
                 runAlgorithm·p0.00:   11374952.448 us/op
                 runAlgorithm·p0.50:   11374952.448 us/op
                 runAlgorithm·p0.90:   11374952.448 us/op
                 runAlgorithm·p0.95:   11374952.448 us/op
                 runAlgorithm·p0.99:   11374952.448 us/op
                 runAlgorithm·p0.999:  11374952.448 us/op
                 runAlgorithm·p0.9999: 11374952.448 us/op
                 runAlgorithm·p1.00:   11374952.448 us/op

Iteration  12: 11374952.448 us/op
                 runAlgorithm·p0.00:   11374952.448 us/op
                 runAlgorithm·p0.50:   11374952.448 us/op
                 runAlgorithm·p0.90:   11374952.448 us/op
                 runAlgorithm·p0.95:   11374952.448 us/op
                 runAlgorithm·p0.99:   11374952.448 us/op
                 runAlgorithm·p0.999:  11374952.448 us/op
                 runAlgorithm·p0.9999: 11374952.448 us/op
                 runAlgorithm·p1.00:   11374952.448 us/op

Iteration  13: 11374952.448 us/op
                 runAlgorithm·p0.00:   11374952.448 us/op
                 runAlgorithm·p0.50:   11374952.448 us/op
                 runAlgorithm·p0.90:   11374952.448 us/op
                 runAlgorithm·p0.95:   11374952.448 us/op
                 runAlgorithm·p0.99:   11374952.448 us/op
                 runAlgorithm·p0.999:  11374952.448 us/op
                 runAlgorithm·p0.9999: 11374952.448 us/op
                 runAlgorithm·p1.00:   11374952.448 us/op

Iteration  14: 11374952.448 us/op
                 runAlgorithm·p0.00:   11374952.448 us/op
                 runAlgorithm·p0.50:   11374952.448 us/op
                 runAlgorithm·p0.90:   11374952.448 us/op
                 runAlgorithm·p0.95:   11374952.448 us/op
                 runAlgorithm·p0.99:   11374952.448 us/op
                 runAlgorithm·p0.999:  11374952.448 us/op
                 runAlgorithm·p0.9999: 11374952.448 us/op
                 runAlgorithm·p1.00:   11374952.448 us/op

Iteration  15: 11391729.664 us/op
                 runAlgorithm·p0.00:   11391729.664 us/op
                 runAlgorithm·p0.50:   11391729.664 us/op
                 runAlgorithm·p0.90:   11391729.664 us/op
                 runAlgorithm·p0.95:   11391729.664 us/op
                 runAlgorithm·p0.99:   11391729.664 us/op
                 runAlgorithm·p0.999:  11391729.664 us/op
                 runAlgorithm·p0.9999: 11391729.664 us/op
                 runAlgorithm·p1.00:   11391729.664 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean = 11378307.891 ±(99.9%) 7426.152 us/op

  Histogram, us/op:
    [11370000.000, 11372500.000) = 0 
    [11372500.000, 11375000.000) = 12 
    [11375000.000, 11377500.000) = 0 
    [11377500.000, 11380000.000) = 0 
    [11380000.000, 11382500.000) = 0 
    [11382500.000, 11385000.000) = 0 
    [11385000.000, 11387500.000) = 0 
    [11387500.000, 11390000.000) = 0 
    [11390000.000, 11392500.000) = 3 
    [11392500.000, 11395000.000) = 0 
    [11395000.000, 11397500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 11374952.448 us/op
     p(50.0000) = 11374952.448 us/op
     p(90.0000) = 11391729.664 us/op
     p(95.0000) = 11391729.664 us/op
     p(99.0000) = 11391729.664 us/op
     p(99.9000) = 11391729.664 us/op
     p(99.9900) = 11391729.664 us/op
     p(99.9990) = 11391729.664 us/op
     p(99.9999) = 11391729.664 us/op
    p(100.0000) = 11391729.664 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 89.85% complete, ETA 00:51:12
# Fork: 1 of 1
# Warmup Iteration   1: 1881.229 ±(99.9%) 11.744 us/op
# Warmup Iteration   2: 1877.248 ±(99.9%) 2.034 us/op
# Warmup Iteration   3: 1878.232 ±(99.9%) 1.579 us/op
# Warmup Iteration   4: 1879.401 ±(99.9%) 1.648 us/op
# Warmup Iteration   5: 1876.832 ±(99.9%) 1.416 us/op
Iteration   1: 1874.674 ±(99.9%) 0.716 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1855.488 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1873.920 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1886.208 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1896.448 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   1939.456 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2024.174 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2078.720 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2078.720 us/op

Iteration   2: 1874.557 ±(99.9%) 0.725 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1855.488 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1873.920 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1886.208 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1898.496 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   1939.456 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2019.328 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2082.816 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2082.816 us/op

Iteration   3: 1875.913 ±(99.9%) 0.780 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1855.488 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1873.920 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1888.256 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1900.544 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   1949.102 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2030.375 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2121.728 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2121.728 us/op

Iteration   4: 1876.002 ±(99.9%) 1.075 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1855.488 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1873.920 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1886.208 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1904.640 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   1949.696 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2248.704 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2322.432 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2322.432 us/op

Iteration   5: 1877.505 ±(99.9%) 2.824 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1855.488 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1873.920 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1886.208 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1902.592 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   1943.552 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3367.371 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3600.384 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3600.384 us/op

Iteration   6: 1875.554 ±(99.9%) 0.730 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1855.488 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1873.920 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1888.256 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1902.592 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   1937.408 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2026.947 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2093.056 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2093.056 us/op

Iteration   7: 2029.555 ±(99.9%) 3.420 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1855.488 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2058.240 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2070.528 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2082.816 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2129.920 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2237.325 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2269.184 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2269.184 us/op

Iteration   8: 2062.144 ±(99.9%) 0.764 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2043.904 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2060.288 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2076.672 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2095.104 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2121.728 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2173.370 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2281.472 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2281.472 us/op

Iteration   9: 2062.194 ±(99.9%) 0.798 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2043.904 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2060.288 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2074.624 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2096.333 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2125.824 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2222.522 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2293.760 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2293.760 us/op

Iteration  10: 2063.155 ±(99.9%) 0.831 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2043.904 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2060.288 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2076.672 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2097.152 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2125.824 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2236.416 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2412.544 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2412.544 us/op

Iteration  11: 2067.946 ±(99.9%) 4.306 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2043.904 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2060.288 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2077.901 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2101.248 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2138.112 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  4247.536 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 4399.104 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   4399.104 us/op

Iteration  12: 2065.159 ±(99.9%) 3.598 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2043.904 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2060.288 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2074.624 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2095.104 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2129.920 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3833.549 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 4407.296 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   4407.296 us/op

Iteration  13: 2064.885 ±(99.9%) 3.290 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2043.904 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2060.288 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2074.624 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2095.104 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2128.241 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3662.561 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 4341.760 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   4341.760 us/op

Iteration  14: 2065.418 ±(99.9%) 4.014 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2043.904 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2060.288 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2074.624 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2095.104 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2125.824 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3997.368 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 4390.912 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   4390.912 us/op

Iteration  15: 2066.484 ±(99.9%) 3.657 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2043.904 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2060.288 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2076.672 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2097.152 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2134.016 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3946.439 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 4333.568 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   4333.568 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  N = 75622
  mean =   1982.497 ±(99.9%) 1.270 us/op

  Histogram, us/op:
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 32722 
    [2000.000, 2250.000) = 42815 
    [2250.000, 2500.000) = 28 
    [2500.000, 2750.000) = 7 
    [2750.000, 3000.000) = 1 
    [3000.000, 3250.000) = 7 
    [3250.000, 3500.000) = 8 
    [3500.000, 3750.000) = 5 
    [3750.000, 4000.000) = 11 
    [4000.000, 4250.000) = 6 
    [4250.000, 4500.000) = 12 
    [4500.000, 4750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   1855.488 us/op
     p(50.0000) =   2048.000 us/op
     p(90.0000) =   2068.480 us/op
     p(95.0000) =   2078.720 us/op
     p(99.0000) =   2117.632 us/op
     p(99.9000) =   2262.536 us/op
     p(99.9900) =   4333.568 us/op
     p(99.9990) =   4407.296 us/op
     p(99.9999) =   4407.296 us/op
    p(100.0000) =   4407.296 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 90.58% complete, ETA 00:47:32
# Fork: 1 of 1
# Warmup Iteration   1: 62170.869 ±(99.9%) 81.450 us/op
# Warmup Iteration   2: 62181.859 ±(99.9%) 75.297 us/op
# Warmup Iteration   3: 62141.968 ±(99.9%) 80.621 us/op
# Warmup Iteration   4: 62164.763 ±(99.9%) 73.457 us/op
# Warmup Iteration   5: 62190.000 ±(99.9%) 73.518 us/op
Iteration   1: 62133.827 ±(99.9%) 56.120 us/op
                 extractOperationOutOfLoop·p0.00:   61145.088 us/op
                 extractOperationOutOfLoop·p0.50:   62193.664 us/op
                 extractOperationOutOfLoop·p0.90:   62390.272 us/op
                 extractOperationOutOfLoop·p0.95:   62455.808 us/op
                 extractOperationOutOfLoop·p0.99:   62611.784 us/op
                 extractOperationOutOfLoop·p0.999:  62652.416 us/op
                 extractOperationOutOfLoop·p0.9999: 62652.416 us/op
                 extractOperationOutOfLoop·p1.00:   62652.416 us/op

Iteration   2: 62124.872 ±(99.9%) 58.005 us/op
                 extractOperationOutOfLoop·p0.00:   61472.768 us/op
                 extractOperationOutOfLoop·p0.50:   62193.664 us/op
                 extractOperationOutOfLoop·p0.90:   62324.736 us/op
                 extractOperationOutOfLoop·p0.95:   62455.808 us/op
                 extractOperationOutOfLoop·p0.99:   62851.645 us/op
                 extractOperationOutOfLoop·p0.999:  63176.704 us/op
                 extractOperationOutOfLoop·p0.9999: 63176.704 us/op
                 extractOperationOutOfLoop·p1.00:   63176.704 us/op

Iteration   3: 62115.916 ±(99.9%) 53.305 us/op
                 extractOperationOutOfLoop·p0.00:   61210.624 us/op
                 extractOperationOutOfLoop·p0.50:   62193.664 us/op
                 extractOperationOutOfLoop·p0.90:   62311.629 us/op
                 extractOperationOutOfLoop·p0.95:   62390.272 us/op
                 extractOperationOutOfLoop·p0.99:   62521.344 us/op
                 extractOperationOutOfLoop·p0.999:  62521.344 us/op
                 extractOperationOutOfLoop·p0.9999: 62521.344 us/op
                 extractOperationOutOfLoop·p1.00:   62521.344 us/op

Iteration   4: 62162.728 ±(99.9%) 75.027 us/op
                 extractOperationOutOfLoop·p0.00:   61276.160 us/op
                 extractOperationOutOfLoop·p0.50:   62193.664 us/op
                 extractOperationOutOfLoop·p0.90:   62442.701 us/op
                 extractOperationOutOfLoop·p0.95:   62717.952 us/op
                 extractOperationOutOfLoop·p0.99:   63005.000 us/op
                 extractOperationOutOfLoop·p0.999:  63045.632 us/op
                 extractOperationOutOfLoop·p0.9999: 63045.632 us/op
                 extractOperationOutOfLoop·p1.00:   63045.632 us/op

Iteration   5: 62163.135 ±(99.9%) 49.659 us/op
                 extractOperationOutOfLoop·p0.00:   61407.232 us/op
                 extractOperationOutOfLoop·p0.50:   62193.664 us/op
                 extractOperationOutOfLoop·p0.90:   62324.736 us/op
                 extractOperationOutOfLoop·p0.95:   62390.272 us/op
                 extractOperationOutOfLoop·p0.99:   62661.591 us/op
                 extractOperationOutOfLoop·p0.999:  62783.488 us/op
                 extractOperationOutOfLoop·p0.9999: 62783.488 us/op
                 extractOperationOutOfLoop·p1.00:   62783.488 us/op

Iteration   6: 62157.843 ±(99.9%) 54.684 us/op
                 extractOperationOutOfLoop·p0.00:   61341.696 us/op
                 extractOperationOutOfLoop·p0.50:   62193.664 us/op
                 extractOperationOutOfLoop·p0.90:   62377.165 us/op
                 extractOperationOutOfLoop·p0.95:   62449.254 us/op
                 extractOperationOutOfLoop·p0.99:   62652.416 us/op
                 extractOperationOutOfLoop·p0.999:  62652.416 us/op
                 extractOperationOutOfLoop·p0.9999: 62652.416 us/op
                 extractOperationOutOfLoop·p1.00:   62652.416 us/op

Iteration   7: 62196.106 ±(99.9%) 61.974 us/op
                 extractOperationOutOfLoop·p0.00:   60948.480 us/op
                 extractOperationOutOfLoop·p0.50:   62259.200 us/op
                 extractOperationOutOfLoop·p0.90:   62390.272 us/op
                 extractOperationOutOfLoop·p0.95:   62455.808 us/op
                 extractOperationOutOfLoop·p0.99:   63001.068 us/op
                 extractOperationOutOfLoop·p0.999:  63569.920 us/op
                 extractOperationOutOfLoop·p0.9999: 63569.920 us/op
                 extractOperationOutOfLoop·p1.00:   63569.920 us/op

Iteration   8: 62139.119 ±(99.9%) 87.484 us/op
                 extractOperationOutOfLoop·p0.00:   60489.728 us/op
                 extractOperationOutOfLoop·p0.50:   62193.664 us/op
                 extractOperationOutOfLoop·p0.90:   62377.165 us/op
                 extractOperationOutOfLoop·p0.95:   62449.254 us/op
                 extractOperationOutOfLoop·p0.99:   63005.000 us/op
                 extractOperationOutOfLoop·p0.999:  63045.632 us/op
                 extractOperationOutOfLoop·p0.9999: 63045.632 us/op
                 extractOperationOutOfLoop·p1.00:   63045.632 us/op

Iteration   9: 62062.997 ±(99.9%) 77.795 us/op
                 extractOperationOutOfLoop·p0.00:   60882.944 us/op
                 extractOperationOutOfLoop·p0.50:   62128.128 us/op
                 extractOperationOutOfLoop·p0.90:   62259.200 us/op
                 extractOperationOutOfLoop·p0.95:   62324.736 us/op
                 extractOperationOutOfLoop·p0.99:   62528.553 us/op
                 extractOperationOutOfLoop·p0.999:  62652.416 us/op
                 extractOperationOutOfLoop·p0.9999: 62652.416 us/op
                 extractOperationOutOfLoop·p1.00:   62652.416 us/op

Iteration  10: 62189.593 ±(99.9%) 63.344 us/op
                 extractOperationOutOfLoop·p0.00:   61145.088 us/op
                 extractOperationOutOfLoop·p0.50:   62193.664 us/op
                 extractOperationOutOfLoop·p0.90:   62390.272 us/op
                 extractOperationOutOfLoop·p0.95:   62580.326 us/op
                 extractOperationOutOfLoop·p0.99:   62849.024 us/op
                 extractOperationOutOfLoop·p0.999:  62849.024 us/op
                 extractOperationOutOfLoop·p0.9999: 62849.024 us/op
                 extractOperationOutOfLoop·p1.00:   62849.024 us/op

Iteration  11: 62184.709 ±(99.9%) 62.953 us/op
                 extractOperationOutOfLoop·p0.00:   61341.696 us/op
                 extractOperationOutOfLoop·p0.50:   62193.664 us/op
                 extractOperationOutOfLoop·p0.90:   62455.808 us/op
                 extractOperationOutOfLoop·p0.95:   62586.880 us/op
                 extractOperationOutOfLoop·p0.99:   62873.928 us/op
                 extractOperationOutOfLoop·p0.999:  62914.560 us/op
                 extractOperationOutOfLoop·p0.9999: 62914.560 us/op
                 extractOperationOutOfLoop·p1.00:   62914.560 us/op

Iteration  12: 62126.907 ±(99.9%) 99.663 us/op
                 extractOperationOutOfLoop·p0.00:   60751.872 us/op
                 extractOperationOutOfLoop·p0.50:   62128.128 us/op
                 extractOperationOutOfLoop·p0.90:   62455.808 us/op
                 extractOperationOutOfLoop·p0.95:   62757.274 us/op
                 extractOperationOutOfLoop·p0.99:   63457.198 us/op
                 extractOperationOutOfLoop·p0.999:  63700.992 us/op
                 extractOperationOutOfLoop·p0.9999: 63700.992 us/op
                 extractOperationOutOfLoop·p1.00:   63700.992 us/op

Iteration  13: 62124.057 ±(99.9%) 87.343 us/op
                 extractOperationOutOfLoop·p0.00:   60555.264 us/op
                 extractOperationOutOfLoop·p0.50:   62128.128 us/op
                 extractOperationOutOfLoop·p0.90:   62390.272 us/op
                 extractOperationOutOfLoop·p0.95:   62704.845 us/op
                 extractOperationOutOfLoop·p0.99:   63104.614 us/op
                 extractOperationOutOfLoop·p0.999:  63307.776 us/op
                 extractOperationOutOfLoop·p0.9999: 63307.776 us/op
                 extractOperationOutOfLoop·p1.00:   63307.776 us/op

Iteration  14: 62132.199 ±(99.9%) 95.970 us/op
                 extractOperationOutOfLoop·p0.00:   60620.800 us/op
                 extractOperationOutOfLoop·p0.50:   62193.664 us/op
                 extractOperationOutOfLoop·p0.90:   62390.272 us/op
                 extractOperationOutOfLoop·p0.95:   62652.416 us/op
                 extractOperationOutOfLoop·p0.99:   63307.776 us/op
                 extractOperationOutOfLoop·p0.999:  63307.776 us/op
                 extractOperationOutOfLoop·p0.9999: 63307.776 us/op
                 extractOperationOutOfLoop·p1.00:   63307.776 us/op

Iteration  15: 62114.288 ±(99.9%) 72.211 us/op
                 extractOperationOutOfLoop·p0.00:   61341.696 us/op
                 extractOperationOutOfLoop·p0.50:   62128.128 us/op
                 extractOperationOutOfLoop·p0.90:   62324.736 us/op
                 extractOperationOutOfLoop·p0.95:   62521.344 us/op
                 extractOperationOutOfLoop·p0.99:   63341.855 us/op
                 extractOperationOutOfLoop·p0.999:  63504.384 us/op
                 extractOperationOutOfLoop·p0.9999: 63504.384 us/op
                 extractOperationOutOfLoop·p1.00:   63504.384 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  N = 2416
  mean =  62141.854 ±(99.9%) 18.378 us/op

  Histogram, us/op:
    [60000.000, 60250.000) = 0 
    [60250.000, 60500.000) = 1 
    [60500.000, 60750.000) = 3 
    [60750.000, 61000.000) = 7 
    [61000.000, 61250.000) = 20 
    [61250.000, 61500.000) = 45 
    [61500.000, 61750.000) = 113 
    [61750.000, 62000.000) = 332 
    [62000.000, 62250.000) = 1101 
    [62250.000, 62500.000) = 683 
    [62500.000, 62750.000) = 72 
    [62750.000, 63000.000) = 24 
    [63000.000, 63250.000) = 8 
    [63250.000, 63500.000) = 4 
    [63500.000, 63750.000) = 3 

  Percentiles, us/op:
      p(0.0000) =  60489.728 us/op
     p(50.0000) =  62193.664 us/op
     p(90.0000) =  62390.272 us/op
     p(95.0000) =  62455.808 us/op
     p(99.0000) =  62914.560 us/op
     p(99.9000) =  63542.591 us/op
     p(99.9900) =  63700.992 us/op
     p(99.9990) =  63700.992 us/op
     p(99.9999) =  63700.992 us/op
    p(100.0000) =  63700.992 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 91.30% complete, ETA 00:43:52
# Fork: 1 of 1
# Warmup Iteration   1: 1695397.595 ±(99.9%) 57321.981 us/op
# Warmup Iteration   2: 1705583.762 ±(99.9%) 3570.441 us/op
# Warmup Iteration   3: 1703187.017 ±(99.9%) 1785.220 us/op
# Warmup Iteration   4: 1703187.017 ±(99.9%) 1785.220 us/op
# Warmup Iteration   5: 1702537.899 ±(99.9%) 2400.829 us/op
Iteration   1: 1702537.899 ±(99.9%) 2400.829 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration   2: 1702188.373 ±(99.9%) 3036.835 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration   3: 1704635.051 ±(99.9%) 5781.962 us/op
                 reduceLoops·p0.00:   1702887.424 us/op
                 reduceLoops·p0.50:   1703936.000 us/op
                 reduceLoops·p0.90:   1707081.728 us/op
                 reduceLoops·p0.95:   1707081.728 us/op
                 reduceLoops·p0.99:   1707081.728 us/op
                 reduceLoops·p0.999:  1707081.728 us/op
                 reduceLoops·p0.9999: 1707081.728 us/op
                 reduceLoops·p1.00:   1707081.728 us/op

Iteration   4: 1701838.848 ±(99.9%) 3221.050 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1701838.848 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration   5: 1702188.373 ±(99.9%) 3036.835 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration   6: 1702188.373 ±(99.9%) 3036.835 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration   7: 1702188.373 ±(99.9%) 3036.835 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration   8: 1701838.848 ±(99.9%) 3221.050 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1701838.848 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration   9: 1705334.101 ±(99.9%) 8656.312 us/op
                 reduceLoops·p0.00:   1702887.424 us/op
                 reduceLoops·p0.50:   1704984.576 us/op
                 reduceLoops·p0.90:   1711276.032 us/op
                 reduceLoops·p0.95:   1711276.032 us/op
                 reduceLoops·p0.99:   1711276.032 us/op
                 reduceLoops·p0.999:  1711276.032 us/op
                 reduceLoops·p0.9999: 1711276.032 us/op
                 reduceLoops·p1.00:   1711276.032 us/op

Iteration  10: 1703936.000 ±(99.9%) 3221.050 us/op
                 reduceLoops·p0.00:   1702887.424 us/op
                 reduceLoops·p0.50:   1703936.000 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration  11: 1703486.610 ±(99.9%) 2304.710 us/op
                 reduceLoops·p0.00:   1702887.424 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration  12: 1703486.610 ±(99.9%) 2304.710 us/op
                 reduceLoops·p0.00:   1702887.424 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration  13: 1702288.238 ±(99.9%) 2304.710 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration  14: 1702887.424 ±(99.9%) 2726.969 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration  15: 1703786.203 ±(99.9%) 6009.948 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1709178.880 us/op
                 reduceLoops·p0.95:   1709178.880 us/op
                 reduceLoops·p0.99:   1709178.880 us/op
                 reduceLoops·p0.999:  1709178.880 us/op
                 reduceLoops·p0.9999: 1709178.880 us/op
                 reduceLoops·p1.00:   1709178.880 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  N = 95
  mean = 1702997.800 ±(99.9%) 606.573 us/op

  Histogram, us/op:
    [1700000.000, 1701250.000) = 19 
    [1701250.000, 1702500.000) = 0 
    [1702500.000, 1703750.000) = 59 
    [1703750.000, 1705000.000) = 13 
    [1705000.000, 1706250.000) = 0 
    [1706250.000, 1707500.000) = 2 
    [1707500.000, 1708750.000) = 0 
    [1708750.000, 1710000.000) = 1 
    [1710000.000, 1711250.000) = 0 
    [1711250.000, 1712500.000) = 1 
    [1712500.000, 1713750.000) = 0 
    [1713750.000, 1715000.000) = 0 
    [1715000.000, 1716250.000) = 0 
    [1716250.000, 1717500.000) = 0 
    [1717500.000, 1718750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1700790.272 us/op
     p(50.0000) = 1702887.424 us/op
     p(90.0000) = 1704984.576 us/op
     p(95.0000) = 1705404.006 us/op
     p(99.0000) = 1711276.032 us/op
     p(99.9000) = 1711276.032 us/op
     p(99.9900) = 1711276.032 us/op
     p(99.9990) = 1711276.032 us/op
     p(99.9999) = 1711276.032 us/op
    p(100.0000) = 1711276.032 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 92.03% complete, ETA 00:40:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.580 ±(99.9%) 0.005 us/op
# Warmup Iteration   2: 0.581 ±(99.9%) 0.003 us/op
# Warmup Iteration   3: 0.586 ±(99.9%) 0.003 us/op
# Warmup Iteration   4: 0.584 ±(99.9%) 0.003 us/op
# Warmup Iteration   5: 0.679 ±(99.9%) 0.004 us/op
Iteration   1: 0.584 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.511 us/op
                 reduceSynchronizedBlocks·p0.50:   0.569 us/op
                 reduceSynchronizedBlocks·p0.90:   0.579 us/op
                 reduceSynchronizedBlocks·p0.95:   0.588 us/op
                 reduceSynchronizedBlocks·p0.99:   0.604 us/op
                 reduceSynchronizedBlocks·p0.999:  5.204 us/op
                 reduceSynchronizedBlocks·p0.9999: 18.437 us/op
                 reduceSynchronizedBlocks·p1.00:   106.368 us/op

Iteration   2: 0.583 ±(99.9%) 0.004 us/op
                 reduceSynchronizedBlocks·p0.00:   0.514 us/op
                 reduceSynchronizedBlocks·p0.50:   0.569 us/op
                 reduceSynchronizedBlocks·p0.90:   0.578 us/op
                 reduceSynchronizedBlocks·p0.95:   0.588 us/op
                 reduceSynchronizedBlocks·p0.99:   0.605 us/op
                 reduceSynchronizedBlocks·p0.999:  4.769 us/op
                 reduceSynchronizedBlocks·p0.9999: 12.321 us/op
                 reduceSynchronizedBlocks·p1.00:   294.400 us/op

Iteration   3: 0.583 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.516 us/op
                 reduceSynchronizedBlocks·p0.50:   0.569 us/op
                 reduceSynchronizedBlocks·p0.90:   0.582 us/op
                 reduceSynchronizedBlocks·p0.95:   0.591 us/op
                 reduceSynchronizedBlocks·p0.99:   0.608 us/op
                 reduceSynchronizedBlocks·p0.999:  4.768 us/op
                 reduceSynchronizedBlocks·p0.9999: 12.794 us/op
                 reduceSynchronizedBlocks·p1.00:   114.560 us/op

Iteration   4: 0.580 ±(99.9%) 0.002 us/op
                 reduceSynchronizedBlocks·p0.00:   0.513 us/op
                 reduceSynchronizedBlocks·p0.50:   0.568 us/op
                 reduceSynchronizedBlocks·p0.90:   0.578 us/op
                 reduceSynchronizedBlocks·p0.95:   0.588 us/op
                 reduceSynchronizedBlocks·p0.99:   0.604 us/op
                 reduceSynchronizedBlocks·p0.999:  4.672 us/op
                 reduceSynchronizedBlocks·p0.9999: 11.656 us/op
                 reduceSynchronizedBlocks·p1.00:   96.640 us/op

Iteration   5: 0.584 ±(99.9%) 0.002 us/op
                 reduceSynchronizedBlocks·p0.00:   0.510 us/op
                 reduceSynchronizedBlocks·p0.50:   0.569 us/op
                 reduceSynchronizedBlocks·p0.90:   0.582 us/op
                 reduceSynchronizedBlocks·p0.95:   0.590 us/op
                 reduceSynchronizedBlocks·p0.99:   0.603 us/op
                 reduceSynchronizedBlocks·p0.999:  4.933 us/op
                 reduceSynchronizedBlocks·p0.9999: 14.648 us/op
                 reduceSynchronizedBlocks·p1.00:   70.656 us/op

Iteration   6: 0.583 ±(99.9%) 0.002 us/op
                 reduceSynchronizedBlocks·p0.00:   0.517 us/op
                 reduceSynchronizedBlocks·p0.50:   0.569 us/op
                 reduceSynchronizedBlocks·p0.90:   0.579 us/op
                 reduceSynchronizedBlocks·p0.95:   0.589 us/op
                 reduceSynchronizedBlocks·p0.99:   0.605 us/op
                 reduceSynchronizedBlocks·p0.999:  5.129 us/op
                 reduceSynchronizedBlocks·p0.9999: 13.819 us/op
                 reduceSynchronizedBlocks·p1.00:   103.936 us/op

Iteration   7: 0.583 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.511 us/op
                 reduceSynchronizedBlocks·p0.50:   0.568 us/op
                 reduceSynchronizedBlocks·p0.90:   0.578 us/op
                 reduceSynchronizedBlocks·p0.95:   0.588 us/op
                 reduceSynchronizedBlocks·p0.99:   0.608 us/op
                 reduceSynchronizedBlocks·p0.999:  5.000 us/op
                 reduceSynchronizedBlocks·p0.9999: 13.180 us/op
                 reduceSynchronizedBlocks·p1.00:   103.168 us/op

Iteration   8: 0.585 ±(99.9%) 0.006 us/op
                 reduceSynchronizedBlocks·p0.00:   0.506 us/op
                 reduceSynchronizedBlocks·p0.50:   0.569 us/op
                 reduceSynchronizedBlocks·p0.90:   0.580 us/op
                 reduceSynchronizedBlocks·p0.95:   0.589 us/op
                 reduceSynchronizedBlocks·p0.99:   0.604 us/op
                 reduceSynchronizedBlocks·p0.999:  4.716 us/op
                 reduceSynchronizedBlocks·p0.9999: 17.253 us/op
                 reduceSynchronizedBlocks·p1.00:   502.272 us/op

Iteration   9: 0.585 ±(99.9%) 0.004 us/op
                 reduceSynchronizedBlocks·p0.00:   0.512 us/op
                 reduceSynchronizedBlocks·p0.50:   0.569 us/op
                 reduceSynchronizedBlocks·p0.90:   0.581 us/op
                 reduceSynchronizedBlocks·p0.95:   0.589 us/op
                 reduceSynchronizedBlocks·p0.99:   0.603 us/op
                 reduceSynchronizedBlocks·p0.999:  4.992 us/op
                 reduceSynchronizedBlocks·p0.9999: 15.660 us/op
                 reduceSynchronizedBlocks·p1.00:   285.184 us/op

Iteration  10: 0.583 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.513 us/op
                 reduceSynchronizedBlocks·p0.50:   0.569 us/op
                 reduceSynchronizedBlocks·p0.90:   0.583 us/op
                 reduceSynchronizedBlocks·p0.95:   0.591 us/op
                 reduceSynchronizedBlocks·p0.99:   0.605 us/op
                 reduceSynchronizedBlocks·p0.999:  4.710 us/op
                 reduceSynchronizedBlocks·p0.9999: 12.876 us/op
                 reduceSynchronizedBlocks·p1.00:   125.312 us/op

Iteration  11: 0.577 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.511 us/op
                 reduceSynchronizedBlocks·p0.50:   0.562 us/op
                 reduceSynchronizedBlocks·p0.90:   0.574 us/op
                 reduceSynchronizedBlocks·p0.95:   0.581 us/op
                 reduceSynchronizedBlocks·p0.99:   0.601 us/op
                 reduceSynchronizedBlocks·p0.999:  4.917 us/op
                 reduceSynchronizedBlocks·p0.9999: 20.964 us/op
                 reduceSynchronizedBlocks·p1.00:   104.832 us/op

Iteration  12: 0.596 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.518 us/op
                 reduceSynchronizedBlocks·p0.50:   0.575 us/op
                 reduceSynchronizedBlocks·p0.90:   0.611 us/op
                 reduceSynchronizedBlocks·p0.95:   0.626 us/op
                 reduceSynchronizedBlocks·p0.99:   0.647 us/op
                 reduceSynchronizedBlocks·p0.999:  5.071 us/op
                 reduceSynchronizedBlocks·p0.9999: 17.536 us/op
                 reduceSynchronizedBlocks·p1.00:   92.800 us/op

Iteration  13: 0.594 ±(99.9%) 0.002 us/op
                 reduceSynchronizedBlocks·p0.00:   0.516 us/op
                 reduceSynchronizedBlocks·p0.50:   0.575 us/op
                 reduceSynchronizedBlocks·p0.90:   0.621 us/op
                 reduceSynchronizedBlocks·p0.95:   0.628 us/op
                 reduceSynchronizedBlocks·p0.99:   0.648 us/op
                 reduceSynchronizedBlocks·p0.999:  4.820 us/op
                 reduceSynchronizedBlocks·p0.9999: 13.240 us/op
                 reduceSynchronizedBlocks·p1.00:   68.864 us/op

Iteration  14: 0.597 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.513 us/op
                 reduceSynchronizedBlocks·p0.50:   0.574 us/op
                 reduceSynchronizedBlocks·p0.90:   0.622 us/op
                 reduceSynchronizedBlocks·p0.95:   0.630 us/op
                 reduceSynchronizedBlocks·p0.99:   0.833 us/op
                 reduceSynchronizedBlocks·p0.999:  4.997 us/op
                 reduceSynchronizedBlocks·p0.9999: 16.434 us/op
                 reduceSynchronizedBlocks·p1.00:   111.872 us/op

Iteration  15: 0.596 ±(99.9%) 0.002 us/op
                 reduceSynchronizedBlocks·p0.00:   0.517 us/op
                 reduceSynchronizedBlocks·p0.50:   0.575 us/op
                 reduceSynchronizedBlocks·p0.90:   0.622 us/op
                 reduceSynchronizedBlocks·p0.95:   0.629 us/op
                 reduceSynchronizedBlocks·p0.99:   0.648 us/op
                 reduceSynchronizedBlocks·p0.999:  4.909 us/op
                 reduceSynchronizedBlocks·p0.9999: 15.508 us/op
                 reduceSynchronizedBlocks·p1.00:   97.536 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  N = 4397107
  mean =      0.586 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 4397071 
    [ 50.000, 100.000) = 24 
    [100.000, 150.000) = 9 
    [150.000, 200.000) = 0 
    [200.000, 250.000) = 0 
    [250.000, 300.000) = 2 
    [300.000, 350.000) = 0 
    [350.000, 400.000) = 0 
    [400.000, 450.000) = 0 
    [450.000, 500.000) = 0 
    [500.000, 550.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      0.506 us/op
     p(50.0000) =      0.569 us/op
     p(90.0000) =      0.588 us/op
     p(95.0000) =      0.600 us/op
     p(99.0000) =      0.639 us/op
     p(99.9000) =      4.896 us/op
     p(99.9900) =     14.062 us/op
     p(99.9990) =     47.104 us/op
     p(99.9999) =    121.042 us/op
    p(100.0000) =    502.272 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 92.75% complete, ETA 00:36:35
# Fork: 1 of 1
# Warmup Iteration   1: 6983.431 ±(99.9%) 40.173 us/op
# Warmup Iteration   2: 6948.308 ±(99.9%) 5.501 us/op
# Warmup Iteration   3: 6951.311 ±(99.9%) 5.842 us/op
# Warmup Iteration   4: 6954.290 ±(99.9%) 6.151 us/op
# Warmup Iteration   5: 6948.478 ±(99.9%) 5.008 us/op
Iteration   1: 6946.503 ±(99.9%) 2.543 us/op
                 reduceYoungObjects·p0.00:   6807.552 us/op
                 reduceYoungObjects·p0.50:   6946.816 us/op
                 reduceYoungObjects·p0.90:   6971.392 us/op
                 reduceYoungObjects·p0.95:   6979.584 us/op
                 reduceYoungObjects·p0.99:   7050.035 us/op
                 reduceYoungObjects·p0.999:  7304.643 us/op
                 reduceYoungObjects·p0.9999: 7405.568 us/op
                 reduceYoungObjects·p1.00:   7405.568 us/op

Iteration   2: 6947.180 ±(99.9%) 2.911 us/op
                 reduceYoungObjects·p0.00:   6799.360 us/op
                 reduceYoungObjects·p0.50:   6946.816 us/op
                 reduceYoungObjects·p0.90:   6971.392 us/op
                 reduceYoungObjects·p0.95:   6987.776 us/op
                 reduceYoungObjects·p0.99:   7077.888 us/op
                 reduceYoungObjects·p0.999:  7362.314 us/op
                 reduceYoungObjects·p0.9999: 7495.680 us/op
                 reduceYoungObjects·p1.00:   7495.680 us/op

Iteration   3: 6948.478 ±(99.9%) 3.222 us/op
                 reduceYoungObjects·p0.00:   6799.360 us/op
                 reduceYoungObjects·p0.50:   6946.816 us/op
                 reduceYoungObjects·p0.90:   6971.392 us/op
                 reduceYoungObjects·p0.95:   6987.776 us/op
                 reduceYoungObjects·p0.99:   7115.571 us/op
                 reduceYoungObjects·p0.999:  7452.754 us/op
                 reduceYoungObjects·p0.9999: 7528.448 us/op
                 reduceYoungObjects·p1.00:   7528.448 us/op

Iteration   4: 6946.850 ±(99.9%) 2.307 us/op
                 reduceYoungObjects·p0.00:   6791.168 us/op
                 reduceYoungObjects·p0.50:   6946.816 us/op
                 reduceYoungObjects·p0.90:   6971.392 us/op
                 reduceYoungObjects·p0.95:   6987.776 us/op
                 reduceYoungObjects·p0.99:   7036.928 us/op
                 reduceYoungObjects·p0.999:  7138.181 us/op
                 reduceYoungObjects·p0.9999: 7159.808 us/op
                 reduceYoungObjects·p1.00:   7159.808 us/op

Iteration   5: 6944.125 ±(99.9%) 2.571 us/op
                 reduceYoungObjects·p0.00:   6791.168 us/op
                 reduceYoungObjects·p0.50:   6938.624 us/op
                 reduceYoungObjects·p0.90:   6971.392 us/op
                 reduceYoungObjects·p0.95:   6979.584 us/op
                 reduceYoungObjects·p0.99:   7045.120 us/op
                 reduceYoungObjects·p0.999:  7207.281 us/op
                 reduceYoungObjects·p0.9999: 7225.344 us/op
                 reduceYoungObjects·p1.00:   7225.344 us/op

Iteration   6: 6942.407 ±(99.9%) 2.357 us/op
                 reduceYoungObjects·p0.00:   6791.168 us/op
                 reduceYoungObjects·p0.50:   6938.624 us/op
                 reduceYoungObjects·p0.90:   6963.200 us/op
                 reduceYoungObjects·p0.95:   6979.584 us/op
                 reduceYoungObjects·p0.99:   7033.569 us/op
                 reduceYoungObjects·p0.999:  7136.199 us/op
                 reduceYoungObjects·p0.9999: 7143.424 us/op
                 reduceYoungObjects·p1.00:   7143.424 us/op

Iteration   7: 6944.404 ±(99.9%) 2.405 us/op
                 reduceYoungObjects·p0.00:   6799.360 us/op
                 reduceYoungObjects·p0.50:   6938.624 us/op
                 reduceYoungObjects·p0.90:   6971.392 us/op
                 reduceYoungObjects·p0.95:   6979.584 us/op
                 reduceYoungObjects·p0.99:   7033.569 us/op
                 reduceYoungObjects·p0.999:  7136.199 us/op
                 reduceYoungObjects·p0.9999: 7143.424 us/op
                 reduceYoungObjects·p1.00:   7143.424 us/op

Iteration   8: 6948.330 ±(99.9%) 3.728 us/op
                 reduceYoungObjects·p0.00:   6799.360 us/op
                 reduceYoungObjects·p0.50:   6938.624 us/op
                 reduceYoungObjects·p0.90:   6971.392 us/op
                 reduceYoungObjects·p0.95:   6987.776 us/op
                 reduceYoungObjects·p0.99:   7079.526 us/op
                 reduceYoungObjects·p0.999:  7475.036 us/op
                 reduceYoungObjects·p0.9999: 7503.872 us/op
                 reduceYoungObjects·p1.00:   7503.872 us/op

Iteration   9: 6952.296 ±(99.9%) 5.017 us/op
                 reduceYoungObjects·p0.00:   6823.936 us/op
                 reduceYoungObjects·p0.50:   6946.816 us/op
                 reduceYoungObjects·p0.90:   6979.584 us/op
                 reduceYoungObjects·p0.95:   6988.186 us/op
                 reduceYoungObjects·p0.99:   7115.653 us/op
                 reduceYoungObjects·p0.999:  8043.758 us/op
                 reduceYoungObjects·p0.9999: 8273.920 us/op
                 reduceYoungObjects·p1.00:   8273.920 us/op

Iteration  10: 6949.196 ±(99.9%) 6.484 us/op
                 reduceYoungObjects·p0.00:   6807.552 us/op
                 reduceYoungObjects·p0.50:   6946.816 us/op
                 reduceYoungObjects·p0.90:   6971.392 us/op
                 reduceYoungObjects·p0.95:   6979.584 us/op
                 reduceYoungObjects·p0.99:   7033.651 us/op
                 reduceYoungObjects·p0.999:  8699.576 us/op
                 reduceYoungObjects·p0.9999: 9568.256 us/op
                 reduceYoungObjects·p1.00:   9568.256 us/op

Iteration  11: 6950.228 ±(99.9%) 8.296 us/op
                 reduceYoungObjects·p0.00:   6799.360 us/op
                 reduceYoungObjects·p0.50:   6938.624 us/op
                 reduceYoungObjects·p0.90:   6963.200 us/op
                 reduceYoungObjects·p0.95:   6979.584 us/op
                 reduceYoungObjects·p0.99:   7077.888 us/op
                 reduceYoungObjects·p0.999:  8633.975 us/op
                 reduceYoungObjects·p0.9999: 8749.056 us/op
                 reduceYoungObjects·p1.00:   8749.056 us/op

Iteration  12: 6959.266 ±(99.9%) 13.605 us/op
                 reduceYoungObjects·p0.00:   6799.360 us/op
                 reduceYoungObjects·p0.50:   6938.624 us/op
                 reduceYoungObjects·p0.90:   6971.392 us/op
                 reduceYoungObjects·p0.95:   6987.776 us/op
                 reduceYoungObjects·p0.99:   7217.152 us/op
                 reduceYoungObjects·p0.999:  9782.624 us/op
                 reduceYoungObjects·p0.9999: 10371.072 us/op
                 reduceYoungObjects·p1.00:   10371.072 us/op

Iteration  13: 6955.669 ±(99.9%) 8.458 us/op
                 reduceYoungObjects·p0.00:   6807.552 us/op
                 reduceYoungObjects·p0.50:   6946.816 us/op
                 reduceYoungObjects·p0.90:   6971.392 us/op
                 reduceYoungObjects·p0.95:   6995.968 us/op
                 reduceYoungObjects·p0.99:   7145.390 us/op
                 reduceYoungObjects·p0.999:  8548.598 us/op
                 reduceYoungObjects·p0.9999: 8781.824 us/op
                 reduceYoungObjects·p1.00:   8781.824 us/op

Iteration  14: 6949.577 ±(99.9%) 5.100 us/op
                 reduceYoungObjects·p0.00:   6799.360 us/op
                 reduceYoungObjects·p0.50:   6946.816 us/op
                 reduceYoungObjects·p0.90:   6971.392 us/op
                 reduceYoungObjects·p0.95:   6987.776 us/op
                 reduceYoungObjects·p0.99:   7102.464 us/op
                 reduceYoungObjects·p0.999:  8178.237 us/op
                 reduceYoungObjects·p0.9999: 8257.536 us/op
                 reduceYoungObjects·p1.00:   8257.536 us/op

Iteration  15: 6954.945 ±(99.9%) 10.321 us/op
                 reduceYoungObjects·p0.00:   6799.360 us/op
                 reduceYoungObjects·p0.50:   6938.624 us/op
                 reduceYoungObjects·p0.90:   6971.392 us/op
                 reduceYoungObjects·p0.95:   6987.776 us/op
                 reduceYoungObjects·p0.99:   7146.209 us/op
                 reduceYoungObjects·p0.999:  9011.200 us/op
                 reduceYoungObjects·p0.9999: 9011.200 us/op
                 reduceYoungObjects·p1.00:   9011.200 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  N = 21580
  mean =   6949.294 ±(99.9%) 1.614 us/op

  Histogram, us/op:
    [ 6000.000,  6500.000) = 0 
    [ 6500.000,  7000.000) = 20937 
    [ 7000.000,  7500.000) = 599 
    [ 7500.000,  8000.000) = 16 
    [ 8000.000,  8500.000) = 16 
    [ 8500.000,  9000.000) = 7 
    [ 9000.000,  9500.000) = 3 
    [ 9500.000, 10000.000) = 1 
    [10000.000, 10500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   6791.168 us/op
     p(50.0000) =   6938.624 us/op
     p(90.0000) =   6971.392 us/op
     p(95.0000) =   6987.776 us/op
     p(99.0000) =   7077.888 us/op
     p(99.9000) =   8239.825 us/op
     p(99.9900) =   9482.776 us/op
     p(99.9990) =  10371.072 us/op
     p(99.9999) =  10371.072 us/op
    p(100.0000) =  10371.072 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 93.48% complete, ETA 00:32:55
# Fork: 1 of 1
# Warmup Iteration   1: 29278.687 ±(99.9%) 350.842 us/op
# Warmup Iteration   2: 32702.143 ±(99.9%) 44.800 us/op
# Warmup Iteration   3: 30298.981 ±(99.9%) 51.370 us/op
# Warmup Iteration   4: 35953.332 ±(99.9%) 53.196 us/op
# Warmup Iteration   5: 28719.834 ±(99.9%) 56.058 us/op
Iteration   1: 38209.489 ±(99.9%) 68.811 us/op
                 redundantCode·p0.00:   37945.344 us/op
                 redundantCode·p0.50:   38141.952 us/op
                 redundantCode·p0.90:   38449.971 us/op
                 redundantCode·p0.95:   38535.168 us/op
                 redundantCode·p0.99:   40279.736 us/op
                 redundantCode·p0.999:  41418.752 us/op
                 redundantCode·p0.9999: 41418.752 us/op
                 redundantCode·p1.00:   41418.752 us/op

Iteration   2: 34314.380 ±(99.9%) 44.820 us/op
                 redundantCode·p0.00:   34078.720 us/op
                 redundantCode·p0.50:   34275.328 us/op
                 redundantCode·p0.90:   34471.936 us/op
                 redundantCode·p0.95:   34603.008 us/op
                 redundantCode·p0.99:   34747.843 us/op
                 redundantCode·p0.999:  37552.128 us/op
                 redundantCode·p0.9999: 37552.128 us/op
                 redundantCode·p1.00:   37552.128 us/op

Iteration   3: 32024.700 ±(99.9%) 37.848 us/op
                 redundantCode·p0.00:   31719.424 us/op
                 redundantCode·p0.50:   32014.336 us/op
                 redundantCode·p0.90:   32145.408 us/op
                 redundantCode·p0.95:   32210.944 us/op
                 redundantCode·p0.99:   32402.964 us/op
                 redundantCode·p0.999:  35061.760 us/op
                 redundantCode·p0.9999: 35061.760 us/op
                 redundantCode·p1.00:   35061.760 us/op

Iteration   4: 29058.929 ±(99.9%) 43.970 us/op
                 redundantCode·p0.00:   28835.840 us/op
                 redundantCode·p0.50:   29032.448 us/op
                 redundantCode·p0.90:   29163.520 us/op
                 redundantCode·p0.95:   29229.056 us/op
                 redundantCode·p0.99:   29527.245 us/op
                 redundantCode·p0.999:  32112.640 us/op
                 redundantCode·p0.9999: 32112.640 us/op
                 redundantCode·p1.00:   32112.640 us/op

Iteration   5: 31290.266 ±(99.9%) 37.596 us/op
                 redundantCode·p0.00:   30900.224 us/op
                 redundantCode·p0.50:   31260.672 us/op
                 redundantCode·p0.90:   31424.512 us/op
                 redundantCode·p0.95:   31457.280 us/op
                 redundantCode·p0.99:   31621.120 us/op
                 redundantCode·p0.999:  34340.864 us/op
                 redundantCode·p0.9999: 34340.864 us/op
                 redundantCode·p1.00:   34340.864 us/op

Iteration   6: 29843.456 ±(99.9%) 52.159 us/op
                 redundantCode·p0.00:   29589.504 us/op
                 redundantCode·p0.50:   29818.880 us/op
                 redundantCode·p0.90:   29949.952 us/op
                 redundantCode·p0.95:   29987.635 us/op
                 redundantCode·p0.99:   30220.616 us/op
                 redundantCode·p0.999:  33521.664 us/op
                 redundantCode·p0.9999: 33521.664 us/op
                 redundantCode·p1.00:   33521.664 us/op

Iteration   7: 30460.495 ±(99.9%) 38.215 us/op
                 redundantCode·p0.00:   30244.864 us/op
                 redundantCode·p0.50:   30441.472 us/op
                 redundantCode·p0.90:   30605.312 us/op
                 redundantCode·p0.95:   30687.232 us/op
                 redundantCode·p0.99:   30890.394 us/op
                 redundantCode·p0.999:  33423.360 us/op
                 redundantCode·p0.9999: 33423.360 us/op
                 redundantCode·p1.00:   33423.360 us/op

Iteration   8: 30730.655 ±(99.9%) 50.056 us/op
                 redundantCode·p0.00:   30408.704 us/op
                 redundantCode·p0.50:   30670.848 us/op
                 redundantCode·p0.90:   30932.992 us/op
                 redundantCode·p0.95:   31096.832 us/op
                 redundantCode·p0.99:   31439.585 us/op
                 redundantCode·p0.999:  33882.112 us/op
                 redundantCode·p0.9999: 33882.112 us/op
                 redundantCode·p1.00:   33882.112 us/op

Iteration   9: 33068.860 ±(99.9%) 43.023 us/op
                 redundantCode·p0.00:   32833.536 us/op
                 redundantCode·p0.50:   33030.144 us/op
                 redundantCode·p0.90:   33193.984 us/op
                 redundantCode·p0.95:   33292.288 us/op
                 redundantCode·p0.99:   33554.432 us/op
                 redundantCode·p0.999:  36175.872 us/op
                 redundantCode·p0.9999: 36175.872 us/op
                 redundantCode·p1.00:   36175.872 us/op

Iteration  10: 29801.716 ±(99.9%) 49.474 us/op
                 redundantCode·p0.00:   29556.736 us/op
                 redundantCode·p0.50:   29753.344 us/op
                 redundantCode·p0.90:   29917.184 us/op
                 redundantCode·p0.95:   29982.720 us/op
                 redundantCode·p0.99:   30439.178 us/op
                 redundantCode·p0.999:  33128.448 us/op
                 redundantCode·p0.9999: 33128.448 us/op
                 redundantCode·p1.00:   33128.448 us/op

Iteration  11: 34230.665 ±(99.9%) 43.856 us/op
                 redundantCode·p0.00:   33816.576 us/op
                 redundantCode·p0.50:   34209.792 us/op
                 redundantCode·p0.90:   34340.864 us/op
                 redundantCode·p0.95:   34406.400 us/op
                 redundantCode·p0.99:   34804.204 us/op
                 redundantCode·p0.999:  37355.520 us/op
                 redundantCode·p0.9999: 37355.520 us/op
                 redundantCode·p1.00:   37355.520 us/op

Iteration  12: 34120.770 ±(99.9%) 44.684 us/op
                 redundantCode·p0.00:   33882.112 us/op
                 redundantCode·p0.50:   34078.720 us/op
                 redundantCode·p0.90:   34275.328 us/op
                 redundantCode·p0.95:   34360.525 us/op
                 redundantCode·p0.99:   35000.156 us/op
                 redundantCode·p0.999:  37158.912 us/op
                 redundantCode·p0.9999: 37158.912 us/op
                 redundantCode·p1.00:   37158.912 us/op

Iteration  13: 35470.314 ±(99.9%) 51.881 us/op
                 redundantCode·p0.00:   35192.832 us/op
                 redundantCode·p0.50:   35454.976 us/op
                 redundantCode·p0.90:   35651.584 us/op
                 redundantCode·p0.95:   35782.656 us/op
                 redundantCode·p0.99:   36514.693 us/op
                 redundantCode·p0.999:  38666.240 us/op
                 redundantCode·p0.9999: 38666.240 us/op
                 redundantCode·p1.00:   38666.240 us/op

Iteration  14: 31662.910 ±(99.9%) 99.330 us/op
                 redundantCode·p0.00:   30932.992 us/op
                 redundantCode·p0.50:   31948.800 us/op
                 redundantCode·p0.90:   32178.176 us/op
                 redundantCode·p0.95:   32248.627 us/op
                 redundantCode·p0.99:   33051.771 us/op
                 redundantCode·p0.999:  34340.864 us/op
                 redundantCode·p0.9999: 34340.864 us/op
                 redundantCode·p1.00:   34340.864 us/op

Iteration  15: 31686.241 ±(99.9%) 48.952 us/op
                 redundantCode·p0.00:   31424.512 us/op
                 redundantCode·p0.50:   31621.120 us/op
                 redundantCode·p0.90:   31850.496 us/op
                 redundantCode·p0.95:   32019.251 us/op
                 redundantCode·p0.99:   32500.285 us/op
                 redundantCode·p0.999:  34996.224 us/op
                 redundantCode·p0.9999: 34996.224 us/op
                 redundantCode·p1.00:   34996.224 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  N = 4660
  mean =  32226.955 ±(99.9%) 113.926 us/op

  Histogram, us/op:
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 0 
    [27500.000, 30000.000) = 983 
    [30000.000, 32500.000) = 1933 
    [32500.000, 35000.000) = 1194 
    [35000.000, 37500.000) = 286 
    [37500.000, 40000.000) = 262 
    [40000.000, 42500.000) = 2 
    [42500.000, 45000.000) = 0 
    [45000.000, 47500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  28835.840 us/op
     p(50.0000) =  31686.656 us/op
     p(90.0000) =  35389.440 us/op
     p(95.0000) =  38010.880 us/op
     p(99.0000) =  38338.560 us/op
     p(99.9000) =  38797.312 us/op
     p(99.9900) =  41418.752 us/op
     p(99.9990) =  41418.752 us/op
     p(99.9999) =  41418.752 us/op
    p(100.0000) =  41418.752 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 94.20% complete, ETA 00:29:15
# Fork: 1 of 1
# Warmup Iteration   1: 35059.690 ±(99.9%) 1406.400 us/op
# Warmup Iteration   2: 34614.913 ±(99.9%) 1154.229 us/op
# Warmup Iteration   3: 34718.492 ±(99.9%) 1232.437 us/op
# Warmup Iteration   4: 34663.215 ±(99.9%) 1158.101 us/op
# Warmup Iteration   5: 34669.905 ±(99.9%) 1189.284 us/op
Iteration   1: 34774.812 ±(99.9%) 1211.475 us/op
                 split·p0.00:   33193.984 us/op
                 split·p0.50:   33341.440 us/op
                 split·p0.90:   33751.040 us/op
                 split·p0.95:   45252.608 us/op
                 split·p0.99:   69420.974 us/op
                 split·p0.999:  76414.976 us/op
                 split·p0.9999: 76414.976 us/op
                 split·p1.00:   76414.976 us/op

Iteration   2: 34749.212 ±(99.9%) 1225.339 us/op
                 split·p0.00:   33128.448 us/op
                 split·p0.50:   33292.288 us/op
                 split·p0.90:   33619.968 us/op
                 split·p0.95:   45383.680 us/op
                 split·p0.99:   69799.772 us/op
                 split·p0.999:  76414.976 us/op
                 split·p0.9999: 76414.976 us/op
                 split·p1.00:   76414.976 us/op

Iteration   3: 34785.394 ±(99.9%) 1236.295 us/op
                 split·p0.00:   33193.984 us/op
                 split·p0.50:   33325.056 us/op
                 split·p0.90:   33554.432 us/op
                 split·p0.95:   45688.422 us/op
                 split·p0.99:   70047.498 us/op
                 split·p0.999:  77463.552 us/op
                 split·p0.9999: 77463.552 us/op
                 split·p1.00:   77463.552 us/op

Iteration   4: 34731.008 ±(99.9%) 1237.419 us/op
                 split·p0.00:   33095.680 us/op
                 split·p0.50:   33259.520 us/op
                 split·p0.90:   33456.128 us/op
                 split·p0.95:   45885.030 us/op
                 split·p0.99:   70047.498 us/op
                 split·p0.999:  77070.336 us/op
                 split·p0.9999: 77070.336 us/op
                 split·p1.00:   77070.336 us/op

Iteration   5: 34722.361 ±(99.9%) 1237.627 us/op
                 split·p0.00:   33062.912 us/op
                 split·p0.50:   33259.520 us/op
                 split·p0.90:   33456.128 us/op
                 split·p0.95:   45855.539 us/op
                 split·p0.99:   70383.043 us/op
                 split·p0.999:  76677.120 us/op
                 split·p0.9999: 76677.120 us/op
                 split·p1.00:   76677.120 us/op

Iteration   6: 34751.602 ±(99.9%) 1244.597 us/op
                 split·p0.00:   33095.680 us/op
                 split·p0.50:   33292.288 us/op
                 split·p0.90:   33488.896 us/op
                 split·p0.95:   45921.075 us/op
                 split·p0.99:   70105.170 us/op
                 split·p0.999:  77201.408 us/op
                 split·p0.9999: 77201.408 us/op
                 split·p1.00:   77201.408 us/op

Iteration   7: 34822.222 ±(99.9%) 1252.808 us/op
                 split·p0.00:   33128.448 us/op
                 split·p0.50:   33292.288 us/op
                 split·p0.90:   33751.040 us/op
                 split·p0.95:   46084.915 us/op
                 split·p0.99:   70794.609 us/op
                 split·p0.999:  77725.696 us/op
                 split·p0.9999: 77725.696 us/op
                 split·p1.00:   77725.696 us/op

Iteration   8: 34743.979 ±(99.9%) 1238.235 us/op
                 split·p0.00:   33095.680 us/op
                 split·p0.50:   33259.520 us/op
                 split·p0.90:   33524.941 us/op
                 split·p0.95:   45747.405 us/op
                 split·p0.99:   70149.734 us/op
                 split·p0.999:  76939.264 us/op
                 split·p0.9999: 76939.264 us/op
                 split·p1.00:   76939.264 us/op

Iteration   9: 34744.775 ±(99.9%) 1239.063 us/op
                 split·p0.00:   33128.448 us/op
                 split·p0.50:   33259.520 us/op
                 split·p0.90:   33554.432 us/op
                 split·p0.95:   45848.986 us/op
                 split·p0.99:   70164.152 us/op
                 split·p0.999:  76808.192 us/op
                 split·p0.9999: 76808.192 us/op
                 split·p1.00:   76808.192 us/op

Iteration  10: 34758.315 ±(99.9%) 1244.206 us/op
                 split·p0.00:   33128.448 us/op
                 split·p0.50:   33292.288 us/op
                 split·p0.90:   33488.896 us/op
                 split·p0.95:   45878.477 us/op
                 split·p0.99:   70849.659 us/op
                 split·p0.999:  76939.264 us/op
                 split·p0.9999: 76939.264 us/op
                 split·p1.00:   76939.264 us/op

Iteration  11: 34725.433 ±(99.9%) 1240.277 us/op
                 split·p0.00:   33095.680 us/op
                 split·p0.50:   33259.520 us/op
                 split·p0.90:   33459.405 us/op
                 split·p0.95:   45865.370 us/op
                 split·p0.99:   70338.478 us/op
                 split·p0.999:  76808.192 us/op
                 split·p0.9999: 76808.192 us/op
                 split·p1.00:   76808.192 us/op

Iteration  12: 34736.242 ±(99.9%) 1246.769 us/op
                 split·p0.00:   33095.680 us/op
                 split·p0.50:   33259.520 us/op
                 split·p0.90:   33456.128 us/op
                 split·p0.95:   46022.656 us/op
                 split·p0.99:   70980.731 us/op
                 split·p0.999:  76939.264 us/op
                 split·p0.9999: 76939.264 us/op
                 split·p1.00:   76939.264 us/op

Iteration  13: 34765.596 ±(99.9%) 1249.515 us/op
                 split·p0.00:   33128.448 us/op
                 split·p0.50:   33292.288 us/op
                 split·p0.90:   33488.896 us/op
                 split·p0.95:   45966.950 us/op
                 split·p0.99:   70426.296 us/op
                 split·p0.999:  77201.408 us/op
                 split·p0.9999: 77201.408 us/op
                 split·p1.00:   77201.408 us/op

Iteration  14: 34748.757 ±(99.9%) 1246.130 us/op
                 split·p0.00:   33095.680 us/op
                 split·p0.50:   33259.520 us/op
                 split·p0.90:   33456.128 us/op
                 split·p0.95:   46091.469 us/op
                 split·p0.99:   70266.388 us/op
                 split·p0.999:  76939.264 us/op
                 split·p0.9999: 76939.264 us/op
                 split·p1.00:   76939.264 us/op

Iteration  15: 34733.511 ±(99.9%) 1246.208 us/op
                 split·p0.00:   33095.680 us/op
                 split·p0.50:   33259.520 us/op
                 split·p0.90:   33492.173 us/op
                 split·p0.95:   46052.147 us/op
                 split·p0.99:   70338.478 us/op
                 split·p0.999:  77201.408 us/op
                 split·p0.9999: 77201.408 us/op
                 split·p1.00:   77201.408 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  N = 4319
  mean =  34752.865 ±(99.9%) 316.516 us/op

  Histogram, us/op:
    [30000.000, 35000.000) = 4048 
    [35000.000, 40000.000) = 17 
    [40000.000, 45000.000) = 43 
    [45000.000, 50000.000) = 31 
    [50000.000, 55000.000) = 30 
    [55000.000, 60000.000) = 35 
    [60000.000, 65000.000) = 41 
    [65000.000, 70000.000) = 39 
    [70000.000, 75000.000) = 20 

  Percentiles, us/op:
      p(0.0000) =  33062.912 us/op
     p(50.0000) =  33292.288 us/op
     p(90.0000) =  33554.432 us/op
     p(95.0000) =  44761.088 us/op
     p(99.0000) =  69677.875 us/op
     p(99.9000) =  77201.408 us/op
     p(99.9900) =  77725.696 us/op
     p(99.9990) =  77725.696 us/op
     p(99.9999) =  77725.696 us/op
    p(100.0000) =  77725.696 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 94.92% complete, ETA 00:25:36
# Fork: 1 of 1
# Warmup Iteration   1: 29734.772 ±(99.9%) 2267.977 us/op
# Warmup Iteration   2: 40238.841 ±(99.9%) 1827.008 us/op
# Warmup Iteration   3: 39951.633 ±(99.9%) 1863.617 us/op
# Warmup Iteration   4: 40041.447 ±(99.9%) 1904.566 us/op
# Warmup Iteration   5: 40089.944 ±(99.9%) 1876.173 us/op
Iteration   1: 40016.282 ±(99.9%) 1866.798 us/op
                 mapToPair·p0.00:   37224.448 us/op
                 mapToPair·p0.50:   37486.592 us/op
                 mapToPair·p0.90:   40049.050 us/op
                 mapToPair·p0.95:   64890.470 us/op
                 mapToPair·p0.99:   84175.749 us/op
                 mapToPair·p0.999:  87949.312 us/op
                 mapToPair·p0.9999: 87949.312 us/op
                 mapToPair·p1.00:   87949.312 us/op

Iteration   2: 39921.346 ±(99.9%) 1856.395 us/op
                 mapToPair·p0.00:   37224.448 us/op
                 mapToPair·p0.50:   37421.056 us/op
                 mapToPair·p0.90:   39282.278 us/op
                 mapToPair·p0.95:   64172.851 us/op
                 mapToPair·p0.99:   84709.212 us/op
                 mapToPair·p0.999:  88080.384 us/op
                 mapToPair·p0.9999: 88080.384 us/op
                 mapToPair·p1.00:   88080.384 us/op

Iteration   3: 39892.103 ±(99.9%) 1861.435 us/op
                 mapToPair·p0.00:   37158.912 us/op
                 mapToPair·p0.50:   37421.056 us/op
                 mapToPair·p0.90:   39793.459 us/op
                 mapToPair·p0.95:   63884.493 us/op
                 mapToPair·p0.99:   85102.428 us/op
                 mapToPair·p0.999:  88342.528 us/op
                 mapToPair·p0.9999: 88342.528 us/op
                 mapToPair·p1.00:   88342.528 us/op

Iteration   4: 39891.842 ±(99.9%) 1853.567 us/op
                 mapToPair·p0.00:   37224.448 us/op
                 mapToPair·p0.50:   37421.056 us/op
                 mapToPair·p0.90:   39007.027 us/op
                 mapToPair·p0.95:   64041.779 us/op
                 mapToPair·p0.99:   84703.969 us/op
                 mapToPair·p0.999:  87949.312 us/op
                 mapToPair·p0.9999: 87949.312 us/op
                 mapToPair·p1.00:   87949.312 us/op

Iteration   5: 39898.108 ±(99.9%) 1858.325 us/op
                 mapToPair·p0.00:   37224.448 us/op
                 mapToPair·p0.50:   37421.056 us/op
                 mapToPair·p0.90:   38587.597 us/op
                 mapToPair·p0.95:   64120.422 us/op
                 mapToPair·p0.99:   84976.599 us/op
                 mapToPair·p0.999:  88080.384 us/op
                 mapToPair·p0.9999: 88080.384 us/op
                 mapToPair·p1.00:   88080.384 us/op

Iteration   6: 39950.067 ±(99.9%) 1855.982 us/op
                 mapToPair·p0.00:   37158.912 us/op
                 mapToPair·p0.50:   37421.056 us/op
                 mapToPair·p0.90:   40081.818 us/op
                 mapToPair·p0.95:   64067.994 us/op
                 mapToPair·p0.99:   84766.884 us/op
                 mapToPair·p0.999:  88342.528 us/op
                 mapToPair·p0.9999: 88342.528 us/op
                 mapToPair·p1.00:   88342.528 us/op

Iteration   7: 40007.369 ±(99.9%) 1861.548 us/op
                 mapToPair·p0.00:   37224.448 us/op
                 mapToPair·p0.50:   37486.592 us/op
                 mapToPair·p0.90:   40540.570 us/op
                 mapToPair·p0.95:   64022.118 us/op
                 mapToPair·p0.99:   84849.459 us/op
                 mapToPair·p0.999:  88342.528 us/op
                 mapToPair·p0.9999: 88342.528 us/op
                 mapToPair·p1.00:   88342.528 us/op

Iteration   8: 39882.442 ±(99.9%) 1769.505 us/op
                 mapToPair·p0.00:   37224.448 us/op
                 mapToPair·p0.50:   37486.592 us/op
                 mapToPair·p0.90:   39334.707 us/op
                 mapToPair·p0.95:   61865.984 us/op
                 mapToPair·p0.99:   83534.807 us/op
                 mapToPair·p0.999:  85983.232 us/op
                 mapToPair·p0.9999: 85983.232 us/op
                 mapToPair·p1.00:   85983.232 us/op

Iteration   9: 39865.393 ±(99.9%) 1780.203 us/op
                 mapToPair·p0.00:   37224.448 us/op
                 mapToPair·p0.50:   37486.592 us/op
                 mapToPair·p0.90:   38626.918 us/op
                 mapToPair·p0.95:   62350.950 us/op
                 mapToPair·p0.99:   83028.869 us/op
                 mapToPair·p0.999:  87293.952 us/op
                 mapToPair·p0.9999: 87293.952 us/op
                 mapToPair·p1.00:   87293.952 us/op

Iteration  10: 39868.514 ±(99.9%) 1766.183 us/op
                 mapToPair·p0.00:   37224.448 us/op
                 mapToPair·p0.50:   37486.592 us/op
                 mapToPair·p0.90:   38646.579 us/op
                 mapToPair·p0.95:   61679.206 us/op
                 mapToPair·p0.99:   83213.681 us/op
                 mapToPair·p0.999:  86114.304 us/op
                 mapToPair·p0.9999: 86114.304 us/op
                 mapToPair·p1.00:   86114.304 us/op

Iteration  11: 39813.900 ±(99.9%) 1762.445 us/op
                 mapToPair·p0.00:   37158.912 us/op
                 mapToPair·p0.50:   37421.056 us/op
                 mapToPair·p0.90:   38404.096 us/op
                 mapToPair·p0.95:   61846.323 us/op
                 mapToPair·p0.99:   82937.119 us/op
                 mapToPair·p0.999:  86245.376 us/op
                 mapToPair·p0.9999: 86245.376 us/op
                 mapToPair·p1.00:   86245.376 us/op

Iteration  12: 24870.423 ±(99.9%) 1402.464 us/op
                 mapToPair·p0.00:   22216.704 us/op
                 mapToPair·p0.50:   22413.312 us/op
                 mapToPair·p0.90:   25306.726 us/op
                 mapToPair·p0.95:   45809.664 us/op
                 mapToPair·p0.99:   66749.727 us/op
                 mapToPair·p0.999:  70909.952 us/op
                 mapToPair·p0.9999: 70909.952 us/op
                 mapToPair·p1.00:   70909.952 us/op

Iteration  13: 24835.949 ±(99.9%) 1407.129 us/op
                 mapToPair·p0.00:   22216.704 us/op
                 mapToPair·p0.50:   22413.312 us/op
                 mapToPair·p0.90:   25349.325 us/op
                 mapToPair·p0.95:   47579.136 us/op
                 mapToPair·p0.99:   67108.864 us/op
                 mapToPair·p0.999:  73400.320 us/op
                 mapToPair·p0.9999: 73400.320 us/op
                 mapToPair·p1.00:   73400.320 us/op

Iteration  14: 24968.072 ±(99.9%) 1439.820 us/op
                 mapToPair·p0.00:   22249.472 us/op
                 mapToPair·p0.50:   22413.312 us/op
                 mapToPair·p0.90:   24700.518 us/op
                 mapToPair·p0.95:   47657.779 us/op
                 mapToPair·p0.99:   67363.144 us/op
                 mapToPair·p0.999:  73007.104 us/op
                 mapToPair·p0.9999: 73007.104 us/op
                 mapToPair·p1.00:   73007.104 us/op

Iteration  15: 24818.060 ±(99.9%) 1405.117 us/op
                 mapToPair·p0.00:   22151.168 us/op
                 mapToPair·p0.50:   22347.776 us/op
                 mapToPair·p0.90:   25585.254 us/op
                 mapToPair·p0.95:   46281.523 us/op
                 mapToPair·p0.99:   66686.812 us/op
                 mapToPair·p0.999:  70778.880 us/op
                 mapToPair·p0.9999: 70778.880 us/op
                 mapToPair·p1.00:   70778.880 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  N = 4371
  mean =  34374.524 ±(99.9%) 561.392 us/op

  Histogram, us/op:
    [20000.000, 25000.000) = 1448 
    [25000.000, 30000.000) = 28 
    [30000.000, 35000.000) = 25 
    [35000.000, 40000.000) = 2502 
    [40000.000, 45000.000) = 62 
    [45000.000, 50000.000) = 42 
    [50000.000, 55000.000) = 31 
    [55000.000, 60000.000) = 49 
    [60000.000, 65000.000) = 36 
    [65000.000, 70000.000) = 52 
    [70000.000, 75000.000) = 33 
    [75000.000, 80000.000) = 24 
    [80000.000, 85000.000) = 21 

  Percentiles, us/op:
      p(0.0000) =  22151.168 us/op
     p(50.0000) =  37355.520 us/op
     p(90.0000) =  38273.024 us/op
     p(95.0000) =  57016.320 us/op
     p(99.0000) =  78679.900 us/op
     p(99.9000) =  88080.384 us/op
     p(99.9900) =  88342.528 us/op
     p(99.9990) =  88342.528 us/op
     p(99.9999) =  88342.528 us/op
    p(100.0000) =  88342.528 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 95.65% complete, ETA 00:21:56
# Fork: 1 of 1
# Warmup Iteration   1: 13919.075 ±(99.9%) 82.624 us/op
# Warmup Iteration   2: 13890.970 ±(99.9%) 76.208 us/op
# Warmup Iteration   3: 13810.716 ±(99.9%) 50.303 us/op
# Warmup Iteration   4: 13853.602 ±(99.9%) 72.520 us/op
# Warmup Iteration   5: 13893.791 ±(99.9%) 64.201 us/op
Iteration   1: 13866.068 ±(99.9%) 63.296 us/op
                 plusOne·p0.00:   13565.952 us/op
                 plusOne·p0.50:   13746.176 us/op
                 plusOne·p0.90:   13959.168 us/op
                 plusOne·p0.95:   14413.005 us/op
                 plusOne·p0.99:   16835.543 us/op
                 plusOne·p0.999:  17629.184 us/op
                 plusOne·p0.9999: 17629.184 us/op
                 plusOne·p1.00:   17629.184 us/op

Iteration   2: 13851.605 ±(99.9%) 60.611 us/op
                 plusOne·p0.00:   13565.952 us/op
                 plusOne·p0.50:   13746.176 us/op
                 plusOne·p0.90:   13893.632 us/op
                 plusOne·p0.95:   14454.784 us/op
                 plusOne·p0.99:   16744.448 us/op
                 plusOne·p0.999:  16842.752 us/op
                 plusOne·p0.9999: 16842.752 us/op
                 plusOne·p1.00:   16842.752 us/op

Iteration   3: 13869.976 ±(99.9%) 74.006 us/op
                 plusOne·p0.00:   13565.952 us/op
                 plusOne·p0.50:   13746.176 us/op
                 plusOne·p0.90:   13893.632 us/op
                 plusOne·p0.95:   14447.411 us/op
                 plusOne·p0.99:   16802.775 us/op
                 plusOne·p0.999:  22315.008 us/op
                 plusOne·p0.9999: 22315.008 us/op
                 plusOne·p1.00:   22315.008 us/op

Iteration   4: 13862.841 ±(99.9%) 60.835 us/op
                 plusOne·p0.00:   13582.336 us/op
                 plusOne·p0.50:   13762.560 us/op
                 plusOne·p0.90:   13910.016 us/op
                 plusOne·p0.95:   14434.304 us/op
                 plusOne·p0.99:   16868.311 us/op
                 plusOne·p0.999:  16941.056 us/op
                 plusOne·p0.9999: 16941.056 us/op
                 plusOne·p1.00:   16941.056 us/op

Iteration   5: 13871.362 ±(99.9%) 72.775 us/op
                 plusOne·p0.00:   13582.336 us/op
                 plusOne·p0.50:   13746.176 us/op
                 plusOne·p0.90:   13906.739 us/op
                 plusOne·p0.95:   14557.184 us/op
                 plusOne·p0.99:   16777.216 us/op
                 plusOne·p0.999:  22282.240 us/op
                 plusOne·p0.9999: 22282.240 us/op
                 plusOne·p1.00:   22282.240 us/op

Iteration   6: 13851.832 ±(99.9%) 59.825 us/op
                 plusOne·p0.00:   13565.952 us/op
                 plusOne·p0.50:   13746.176 us/op
                 plusOne·p0.90:   13926.400 us/op
                 plusOne·p0.95:   14445.773 us/op
                 plusOne·p0.99:   16749.527 us/op
                 plusOne·p0.999:  16941.056 us/op
                 plusOne·p0.9999: 16941.056 us/op
                 plusOne·p1.00:   16941.056 us/op

Iteration   7: 13846.363 ±(99.9%) 60.807 us/op
                 plusOne·p0.00:   13582.336 us/op
                 plusOne·p0.50:   13729.792 us/op
                 plusOne·p0.90:   13926.400 us/op
                 plusOne·p0.95:   14471.168 us/op
                 plusOne·p0.99:   16707.912 us/op
                 plusOne·p0.999:  16941.056 us/op
                 plusOne·p0.9999: 16941.056 us/op
                 plusOne·p1.00:   16941.056 us/op

Iteration   8: 13882.209 ±(99.9%) 62.635 us/op
                 plusOne·p0.00:   13582.336 us/op
                 plusOne·p0.50:   13762.560 us/op
                 plusOne·p0.90:   13942.784 us/op
                 plusOne·p0.95:   14499.021 us/op
                 plusOne·p0.99:   16809.984 us/op
                 plusOne·p0.999:  17268.736 us/op
                 plusOne·p0.9999: 17268.736 us/op
                 plusOne·p1.00:   17268.736 us/op

Iteration   9: 13844.752 ±(99.9%) 59.425 us/op
                 plusOne·p0.00:   13565.952 us/op
                 plusOne·p0.50:   13746.176 us/op
                 plusOne·p0.90:   13893.632 us/op
                 plusOne·p0.95:   14087.782 us/op
                 plusOne·p0.99:   16728.064 us/op
                 plusOne·p0.999:  17432.576 us/op
                 plusOne·p0.9999: 17432.576 us/op
                 plusOne·p1.00:   17432.576 us/op

Iteration  10: 13840.084 ±(99.9%) 62.675 us/op
                 plusOne·p0.00:   13565.952 us/op
                 plusOne·p0.50:   13713.408 us/op
                 plusOne·p0.90:   13926.400 us/op
                 plusOne·p0.95:   14804.582 us/op
                 plusOne·p0.99:   16732.652 us/op
                 plusOne·p0.999:  17170.432 us/op
                 plusOne·p0.9999: 17170.432 us/op
                 plusOne·p1.00:   17170.432 us/op

Iteration  11: 13861.341 ±(99.9%) 64.947 us/op
                 plusOne·p0.00:   13582.336 us/op
                 plusOne·p0.50:   13746.176 us/op
                 plusOne·p0.90:   13923.123 us/op
                 plusOne·p0.95:   14450.688 us/op
                 plusOne·p0.99:   17006.592 us/op
                 plusOne·p0.999:  17367.040 us/op
                 plusOne·p0.9999: 17367.040 us/op
                 plusOne·p1.00:   17367.040 us/op

Iteration  12: 13883.301 ±(99.9%) 64.607 us/op
                 plusOne·p0.00:   13582.336 us/op
                 plusOne·p0.50:   13746.176 us/op
                 plusOne·p0.90:   13991.936 us/op
                 plusOne·p0.95:   14728.397 us/op
                 plusOne·p0.99:   16908.288 us/op
                 plusOne·p0.999:  17006.592 us/op
                 plusOne·p0.9999: 17006.592 us/op
                 plusOne·p1.00:   17006.592 us/op

Iteration  13: 13893.313 ±(99.9%) 65.693 us/op
                 plusOne·p0.00:   13582.336 us/op
                 plusOne·p0.50:   13762.560 us/op
                 plusOne·p0.90:   14023.066 us/op
                 plusOne·p0.95:   14695.629 us/op
                 plusOne·p0.99:   16796.221 us/op
                 plusOne·p0.999:  17793.024 us/op
                 plusOne·p0.9999: 17793.024 us/op
                 plusOne·p1.00:   17793.024 us/op

Iteration  14: 13836.889 ±(99.9%) 63.421 us/op
                 plusOne·p0.00:   13549.568 us/op
                 plusOne·p0.50:   13713.408 us/op
                 plusOne·p0.90:   13926.400 us/op
                 plusOne·p0.95:   14630.912 us/op
                 plusOne·p0.99:   16798.188 us/op
                 plusOne·p0.999:  17694.720 us/op
                 plusOne·p0.9999: 17694.720 us/op
                 plusOne·p1.00:   17694.720 us/op

Iteration  15: 13867.022 ±(99.9%) 62.861 us/op
                 plusOne·p0.00:   13565.952 us/op
                 plusOne·p0.50:   13746.176 us/op
                 plusOne·p0.90:   13991.936 us/op
                 plusOne·p0.95:   14630.912 us/op
                 plusOne·p0.99:   16777.216 us/op
                 plusOne·p0.999:  17203.200 us/op
                 plusOne·p0.9999: 17203.200 us/op
                 plusOne·p1.00:   17203.200 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  N = 10820
  mean =  13861.910 ±(99.9%) 16.465 us/op

  Histogram, us/op:
    [13000.000, 14000.000) = 9954 
    [14000.000, 15000.000) = 521 
    [15000.000, 16000.000) = 85 
    [16000.000, 17000.000) = 228 
    [17000.000, 18000.000) = 29 
    [18000.000, 19000.000) = 1 
    [19000.000, 20000.000) = 0 
    [20000.000, 21000.000) = 0 
    [21000.000, 22000.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  13549.568 us/op
     p(50.0000) =  13746.176 us/op
     p(90.0000) =  13926.400 us/op
     p(95.0000) =  14516.224 us/op
     p(99.0000) =  16777.216 us/op
     p(99.9000) =  17367.040 us/op
     p(99.9900) =  22312.318 us/op
     p(99.9990) =  22315.008 us/op
     p(99.9999) =  22315.008 us/op
    p(100.0000) =  22315.008 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 96.37% complete, ETA 00:18:17
# Fork: 1 of 1
# Warmup Iteration   1: 32129.814 ±(99.9%) 535.697 us/op
# Warmup Iteration   2: 29361.666 ±(99.9%) 89.014 us/op
# Warmup Iteration   3: 29335.336 ±(99.9%) 87.660 us/op
# Warmup Iteration   4: 28294.520 ±(99.9%) 85.848 us/op
# Warmup Iteration   5: 31859.679 ±(99.9%) 92.839 us/op
Iteration   1: 29688.100 ±(99.9%) 91.170 us/op
                 sort·p0.00:   29327.360 us/op
                 sort·p0.50:   29589.504 us/op
                 sort·p0.90:   29818.880 us/op
                 sort·p0.95:   29959.782 us/op
                 sort·p0.99:   32718.193 us/op
                 sort·p0.999:  33030.144 us/op
                 sort·p0.9999: 33030.144 us/op
                 sort·p1.00:   33030.144 us/op

Iteration   2: 29307.084 ±(99.9%) 91.323 us/op
                 sort·p0.00:   28966.912 us/op
                 sort·p0.50:   29196.288 us/op
                 sort·p0.90:   29392.896 us/op
                 sort·p0.95:   29523.968 us/op
                 sort·p0.99:   32283.689 us/op
                 sort·p0.999:  32866.304 us/op
                 sort·p0.9999: 32866.304 us/op
                 sort·p1.00:   32866.304 us/op

Iteration   3: 32142.458 ±(99.9%) 121.185 us/op
                 sort·p0.00:   31719.424 us/op
                 sort·p0.50:   32014.336 us/op
                 sort·p0.90:   32243.712 us/op
                 sort·p0.95:   32420.659 us/op
                 sort·p0.99:   35759.063 us/op
                 sort·p0.999:  36765.696 us/op
                 sort·p0.9999: 36765.696 us/op
                 sort·p1.00:   36765.696 us/op

Iteration   4: 29765.144 ±(99.9%) 89.753 us/op
                 sort·p0.00:   29458.432 us/op
                 sort·p0.50:   29687.808 us/op
                 sort·p0.90:   29851.648 us/op
                 sort·p0.95:   30048.256 us/op
                 sort·p0.99:   32621.199 us/op
                 sort·p0.999:  33456.128 us/op
                 sort·p0.9999: 33456.128 us/op
                 sort·p1.00:   33456.128 us/op

Iteration   5: 31585.975 ±(99.9%) 134.278 us/op
                 sort·p0.00:   31227.904 us/op
                 sort·p0.50:   31457.280 us/op
                 sort·p0.90:   31686.656 us/op
                 sort·p0.95:   31821.005 us/op
                 sort·p0.99:   35110.257 us/op
                 sort·p0.999:  40173.568 us/op
                 sort·p0.9999: 40173.568 us/op
                 sort·p1.00:   40173.568 us/op

Iteration   6: 30268.326 ±(99.9%) 91.252 us/op
                 sort·p0.00:   29949.952 us/op
                 sort·p0.50:   30146.560 us/op
                 sort·p0.90:   30343.168 us/op
                 sort·p0.95:   30605.312 us/op
                 sort·p0.99:   32977.715 us/op
                 sort·p0.999:  33947.648 us/op
                 sort·p0.9999: 33947.648 us/op
                 sort·p1.00:   33947.648 us/op

Iteration   7: 32124.298 ±(99.9%) 99.120 us/op
                 sort·p0.00:   31784.960 us/op
                 sort·p0.50:   31997.952 us/op
                 sort·p0.90:   32430.490 us/op
                 sort·p0.95:   32681.165 us/op
                 sort·p0.99:   35036.201 us/op
                 sort·p0.999:  35782.656 us/op
                 sort·p0.9999: 35782.656 us/op
                 sort·p1.00:   35782.656 us/op

Iteration   8: 31494.582 ±(99.9%) 95.057 us/op
                 sort·p0.00:   31096.832 us/op
                 sort·p0.50:   31391.744 us/op
                 sort·p0.90:   31588.352 us/op
                 sort·p0.95:   31752.192 us/op
                 sort·p0.99:   34422.129 us/op
                 sort·p0.999:  34865.152 us/op
                 sort·p0.9999: 34865.152 us/op
                 sort·p1.00:   34865.152 us/op

Iteration   9: 30977.122 ±(99.9%) 93.794 us/op
                 sort·p0.00:   30638.080 us/op
                 sort·p0.50:   30867.456 us/op
                 sort·p0.90:   31083.725 us/op
                 sort·p0.95:   31260.672 us/op
                 sort·p0.99:   33931.919 us/op
                 sort·p0.999:  34471.936 us/op
                 sort·p0.9999: 34471.936 us/op
                 sort·p1.00:   34471.936 us/op

Iteration  10: 31978.741 ±(99.9%) 131.243 us/op
                 sort·p0.00:   31588.352 us/op
                 sort·p0.50:   31850.496 us/op
                 sort·p0.90:   32047.104 us/op
                 sort·p0.95:   32466.534 us/op
                 sort·p0.99:   35221.668 us/op
                 sort·p0.999:  40173.568 us/op
                 sort·p0.9999: 40173.568 us/op
                 sort·p1.00:   40173.568 us/op

Iteration  11: 30365.609 ±(99.9%) 85.571 us/op
                 sort·p0.00:   30048.256 us/op
                 sort·p0.50:   30277.632 us/op
                 sort·p0.90:   30441.472 us/op
                 sort·p0.95:   30605.312 us/op
                 sort·p0.99:   33251.656 us/op
                 sort·p0.999:  33816.576 us/op
                 sort·p0.9999: 33816.576 us/op
                 sort·p1.00:   33816.576 us/op

Iteration  12: 33419.305 ±(99.9%) 116.925 us/op
                 sort·p0.00:   32571.392 us/op
                 sort·p0.50:   33521.664 us/op
                 sort·p0.90:   33751.040 us/op
                 sort·p0.95:   33947.648 us/op
                 sort·p0.99:   36634.624 us/op
                 sort·p0.999:  37224.448 us/op
                 sort·p0.9999: 37224.448 us/op
                 sort·p1.00:   37224.448 us/op

Iteration  13: 31260.979 ±(99.9%) 88.710 us/op
                 sort·p0.00:   30900.224 us/op
                 sort·p0.50:   31162.368 us/op
                 sort·p0.90:   31391.744 us/op
                 sort·p0.95:   31685.018 us/op
                 sort·p0.99:   34220.278 us/op
                 sort·p0.999:  34799.616 us/op
                 sort·p0.9999: 34799.616 us/op
                 sort·p1.00:   34799.616 us/op

Iteration  14: 32139.508 ±(99.9%) 95.121 us/op
                 sort·p0.00:   31817.728 us/op
                 sort·p0.50:   32047.104 us/op
                 sort·p0.90:   32276.480 us/op
                 sort·p0.95:   32682.803 us/op
                 sort·p0.99:   35111.567 us/op
                 sort·p0.999:  35913.728 us/op
                 sort·p0.9999: 35913.728 us/op
                 sort·p1.00:   35913.728 us/op

Iteration  15: 30517.398 ±(99.9%) 85.187 us/op
                 sort·p0.00:   30212.096 us/op
                 sort·p0.50:   30441.472 us/op
                 sort·p0.90:   30605.312 us/op
                 sort·p0.95:   30736.384 us/op
                 sort·p0.99:   33281.802 us/op
                 sort·p0.999:  34078.720 us/op
                 sort·p0.9999: 34078.720 us/op
                 sort·p1.00:   34078.720 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  N = 4827
  mean =  31096.377 ±(99.9%) 58.337 us/op

  Histogram, us/op:
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 0 
    [27500.000, 30000.000) = 972 
    [30000.000, 32500.000) = 3415 
    [32500.000, 35000.000) = 413 
    [35000.000, 37500.000) = 25 
    [37500.000, 40000.000) = 0 
    [40000.000, 42500.000) = 2 
    [42500.000, 45000.000) = 0 
    [45000.000, 47500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  28966.912 us/op
     p(50.0000) =  31162.368 us/op
     p(90.0000) =  32309.248 us/op
     p(95.0000) =  33488.896 us/op
     p(99.0000) =  34453.586 us/op
     p(99.9000) =  36711.432 us/op
     p(99.9900) =  40173.568 us/op
     p(99.9990) =  40173.568 us/op
     p(99.9999) =  40173.568 us/op
    p(100.0000) =  40173.568 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 97.10% complete, ETA 00:14:37
# Fork: 1 of 1
# Warmup Iteration   1: 642.005 ±(99.9%) 3.414 us/op
# Warmup Iteration   2: 637.950 ±(99.9%) 1.041 us/op
# Warmup Iteration   3: 636.299 ±(99.9%) 0.950 us/op
# Warmup Iteration   4: 635.008 ±(99.9%) 1.021 us/op
# Warmup Iteration   5: 634.460 ±(99.9%) 1.055 us/op
Iteration   1: 632.520 ±(99.9%) 0.955 us/op
                 concatenateStrings·p0.00:   578.560 us/op
                 concatenateStrings·p0.50:   627.712 us/op
                 concatenateStrings·p0.90:   653.312 us/op
                 concatenateStrings·p0.95:   664.576 us/op
                 concatenateStrings·p0.99:   722.944 us/op
                 concatenateStrings·p0.999:  1016.044 us/op
                 concatenateStrings·p0.9999: 1107.085 us/op
                 concatenateStrings·p1.00:   1128.448 us/op

Iteration   2: 633.695 ±(99.9%) 0.893 us/op
                 concatenateStrings·p0.00:   580.608 us/op
                 concatenateStrings·p0.50:   628.736 us/op
                 concatenateStrings·p0.90:   654.336 us/op
                 concatenateStrings·p0.95:   666.624 us/op
                 concatenateStrings·p0.99:   719.206 us/op
                 concatenateStrings·p0.999:  1014.723 us/op
                 concatenateStrings·p0.9999: 1112.305 us/op
                 concatenateStrings·p1.00:   1118.208 us/op

Iteration   3: 632.536 ±(99.9%) 1.146 us/op
                 concatenateStrings·p0.00:   578.560 us/op
                 concatenateStrings·p0.50:   627.712 us/op
                 concatenateStrings·p0.90:   653.312 us/op
                 concatenateStrings·p0.95:   663.552 us/op
                 concatenateStrings·p0.99:   729.702 us/op
                 concatenateStrings·p0.999:  1018.489 us/op
                 concatenateStrings·p0.9999: 2265.341 us/op
                 concatenateStrings·p1.00:   3735.552 us/op

Iteration   4: 633.385 ±(99.9%) 0.973 us/op
                 concatenateStrings·p0.00:   585.728 us/op
                 concatenateStrings·p0.50:   628.736 us/op
                 concatenateStrings·p0.90:   654.336 us/op
                 concatenateStrings·p0.95:   665.600 us/op
                 concatenateStrings·p0.99:   747.049 us/op
                 concatenateStrings·p0.999:  1039.360 us/op
                 concatenateStrings·p0.9999: 1114.092 us/op
                 concatenateStrings·p1.00:   1144.832 us/op

Iteration   5: 634.780 ±(99.9%) 1.014 us/op
                 concatenateStrings·p0.00:   581.632 us/op
                 concatenateStrings·p0.50:   629.760 us/op
                 concatenateStrings·p0.90:   655.360 us/op
                 concatenateStrings·p0.95:   665.600 us/op
                 concatenateStrings·p0.99:   738.304 us/op
                 concatenateStrings·p0.999:  1060.420 us/op
                 concatenateStrings·p0.9999: 1137.210 us/op
                 concatenateStrings·p1.00:   1140.736 us/op

Iteration   6: 631.840 ±(99.9%) 0.981 us/op
                 concatenateStrings·p0.00:   578.560 us/op
                 concatenateStrings·p0.50:   627.712 us/op
                 concatenateStrings·p0.90:   651.264 us/op
                 concatenateStrings·p0.95:   660.480 us/op
                 concatenateStrings·p0.99:   724.746 us/op
                 concatenateStrings·p0.999:  1051.394 us/op
                 concatenateStrings·p0.9999: 1176.935 us/op
                 concatenateStrings·p1.00:   1181.696 us/op

Iteration   7: 632.865 ±(99.9%) 0.980 us/op
                 concatenateStrings·p0.00:   577.536 us/op
                 concatenateStrings·p0.50:   628.736 us/op
                 concatenateStrings·p0.90:   652.288 us/op
                 concatenateStrings·p0.95:   662.528 us/op
                 concatenateStrings·p0.99:   724.111 us/op
                 concatenateStrings·p0.999:  1032.630 us/op
                 concatenateStrings·p0.9999: 1197.114 us/op
                 concatenateStrings·p1.00:   1204.224 us/op

Iteration   8: 635.966 ±(99.9%) 0.990 us/op
                 concatenateStrings·p0.00:   579.584 us/op
                 concatenateStrings·p0.50:   631.808 us/op
                 concatenateStrings·p0.90:   657.408 us/op
                 concatenateStrings·p0.95:   667.648 us/op
                 concatenateStrings·p0.99:   726.016 us/op
                 concatenateStrings·p0.999:  1041.408 us/op
                 concatenateStrings·p0.9999: 1111.200 us/op
                 concatenateStrings·p1.00:   1126.400 us/op

Iteration   9: 631.371 ±(99.9%) 0.961 us/op
                 concatenateStrings·p0.00:   579.584 us/op
                 concatenateStrings·p0.50:   626.688 us/op
                 concatenateStrings·p0.90:   650.240 us/op
                 concatenateStrings·p0.95:   659.456 us/op
                 concatenateStrings·p0.99:   709.632 us/op
                 concatenateStrings·p0.999:  1019.061 us/op
                 concatenateStrings·p0.9999: 1126.607 us/op
                 concatenateStrings·p1.00:   1146.880 us/op

Iteration  10: 632.501 ±(99.9%) 0.924 us/op
                 concatenateStrings·p0.00:   582.656 us/op
                 concatenateStrings·p0.50:   627.712 us/op
                 concatenateStrings·p0.90:   652.288 us/op
                 concatenateStrings·p0.95:   662.528 us/op
                 concatenateStrings·p0.99:   717.875 us/op
                 concatenateStrings·p0.999:  1013.156 us/op
                 concatenateStrings·p0.9999: 1129.917 us/op
                 concatenateStrings·p1.00:   1171.456 us/op

Iteration  11: 632.608 ±(99.9%) 0.919 us/op
                 concatenateStrings·p0.00:   576.512 us/op
                 concatenateStrings·p0.50:   627.712 us/op
                 concatenateStrings·p0.90:   654.336 us/op
                 concatenateStrings·p0.95:   664.576 us/op
                 concatenateStrings·p0.99:   728.064 us/op
                 concatenateStrings·p0.999:  1013.160 us/op
                 concatenateStrings·p0.9999: 1144.182 us/op
                 concatenateStrings·p1.00:   1148.928 us/op

Iteration  12: 632.649 ±(99.9%) 0.920 us/op
                 concatenateStrings·p0.00:   577.536 us/op
                 concatenateStrings·p0.50:   627.712 us/op
                 concatenateStrings·p0.90:   654.336 us/op
                 concatenateStrings·p0.95:   666.624 us/op
                 concatenateStrings·p0.99:   729.180 us/op
                 concatenateStrings·p0.999:  989.230 us/op
                 concatenateStrings·p0.9999: 1082.090 us/op
                 concatenateStrings·p1.00:   1114.112 us/op

Iteration  13: 633.024 ±(99.9%) 0.982 us/op
                 concatenateStrings·p0.00:   579.584 us/op
                 concatenateStrings·p0.50:   627.712 us/op
                 concatenateStrings·p0.90:   654.336 us/op
                 concatenateStrings·p0.95:   665.600 us/op
                 concatenateStrings·p0.99:   724.521 us/op
                 concatenateStrings·p0.999:  1039.583 us/op
                 concatenateStrings·p0.9999: 1118.684 us/op
                 concatenateStrings·p1.00:   1153.024 us/op

Iteration  14: 634.485 ±(99.9%) 0.945 us/op
                 concatenateStrings·p0.00:   579.584 us/op
                 concatenateStrings·p0.50:   629.760 us/op
                 concatenateStrings·p0.90:   655.360 us/op
                 concatenateStrings·p0.95:   666.624 us/op
                 concatenateStrings·p0.99:   727.122 us/op
                 concatenateStrings·p0.999:  1010.948 us/op
                 concatenateStrings·p0.9999: 1090.407 us/op
                 concatenateStrings·p1.00:   1091.584 us/op

Iteration  15: 631.412 ±(99.9%) 0.918 us/op
                 concatenateStrings·p0.00:   577.536 us/op
                 concatenateStrings·p0.50:   626.688 us/op
                 concatenateStrings·p0.90:   652.288 us/op
                 concatenateStrings·p0.95:   663.552 us/op
                 concatenateStrings·p0.99:   726.815 us/op
                 concatenateStrings·p0.999:  1006.479 us/op
                 concatenateStrings·p0.9999: 1188.050 us/op
                 concatenateStrings·p1.00:   1208.320 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 236710
  mean =    633.040 ±(99.9%) 0.250 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 0 
    [ 250.000,  500.000) = 0 
    [ 500.000,  750.000) = 234503 
    [ 750.000, 1000.000) = 1777 
    [1000.000, 1250.000) = 429 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 
    [2750.000, 3000.000) = 0 
    [3000.000, 3250.000) = 0 
    [3250.000, 3500.000) = 0 
    [3500.000, 3750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    576.512 us/op
     p(50.0000) =    628.736 us/op
     p(90.0000) =    654.336 us/op
     p(95.0000) =    664.576 us/op
     p(99.0000) =    726.016 us/op
     p(99.9000) =   1026.048 us/op
     p(99.9900) =   1119.555 us/op
     p(99.9990) =   1206.816 us/op
     p(99.9999) =   3735.552 us/op
    p(100.0000) =   3735.552 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 97.82% complete, ETA 00:10:58
# Fork: 1 of 1
# Warmup Iteration   1: 6525.024 ±(99.9%) 41.703 us/op
# Warmup Iteration   2: 6491.718 ±(99.9%) 18.904 us/op
# Warmup Iteration   3: 6471.701 ±(99.9%) 18.866 us/op
# Warmup Iteration   4: 6468.186 ±(99.9%) 19.136 us/op
# Warmup Iteration   5: 6491.633 ±(99.9%) 19.177 us/op
Iteration   1: 6485.693 ±(99.9%) 19.128 us/op
                 concatenateStrings·p0.00:   6086.656 us/op
                 concatenateStrings·p0.50:   6438.912 us/op
                 concatenateStrings·p0.90:   6791.168 us/op
                 concatenateStrings·p0.95:   6888.653 us/op
                 concatenateStrings·p0.99:   7099.023 us/op
                 concatenateStrings·p0.999:  7249.920 us/op
                 concatenateStrings·p0.9999: 7249.920 us/op
                 concatenateStrings·p1.00:   7249.920 us/op

Iteration   2: 6475.426 ±(99.9%) 18.940 us/op
                 concatenateStrings·p0.00:   6062.080 us/op
                 concatenateStrings·p0.50:   6422.528 us/op
                 concatenateStrings·p0.90:   6782.976 us/op
                 concatenateStrings·p0.95:   6873.088 us/op
                 concatenateStrings·p0.99:   7098.778 us/op
                 concatenateStrings·p0.999:  7298.335 us/op
                 concatenateStrings·p0.9999: 7307.264 us/op
                 concatenateStrings·p1.00:   7307.264 us/op

Iteration   3: 6461.285 ±(99.9%) 18.903 us/op
                 concatenateStrings·p0.00:   6078.464 us/op
                 concatenateStrings·p0.50:   6406.144 us/op
                 concatenateStrings·p0.90:   6782.976 us/op
                 concatenateStrings·p0.95:   6848.512 us/op
                 concatenateStrings·p0.99:   7032.996 us/op
                 concatenateStrings·p0.999:  7291.437 us/op
                 concatenateStrings·p0.9999: 7331.840 us/op
                 concatenateStrings·p1.00:   7331.840 us/op

Iteration   4: 6468.133 ±(99.9%) 18.793 us/op
                 concatenateStrings·p0.00:   6103.040 us/op
                 concatenateStrings·p0.50:   6422.528 us/op
                 concatenateStrings·p0.90:   6774.784 us/op
                 concatenateStrings·p0.95:   6862.438 us/op
                 concatenateStrings·p0.99:   7069.696 us/op
                 concatenateStrings·p0.999:  7325.811 us/op
                 concatenateStrings·p0.9999: 7397.376 us/op
                 concatenateStrings·p1.00:   7397.376 us/op

Iteration   5: 6483.299 ±(99.9%) 19.379 us/op
                 concatenateStrings·p0.00:   6094.848 us/op
                 concatenateStrings·p0.50:   6438.912 us/op
                 concatenateStrings·p0.90:   6791.168 us/op
                 concatenateStrings·p0.95:   6873.088 us/op
                 concatenateStrings·p0.99:   7151.616 us/op
                 concatenateStrings·p0.999:  7627.678 us/op
                 concatenateStrings·p0.9999: 7667.712 us/op
                 concatenateStrings·p1.00:   7667.712 us/op

Iteration   6: 6475.240 ±(99.9%) 18.746 us/op
                 concatenateStrings·p0.00:   6103.040 us/op
                 concatenateStrings·p0.50:   6422.528 us/op
                 concatenateStrings·p0.90:   6782.976 us/op
                 concatenateStrings·p0.95:   6864.896 us/op
                 concatenateStrings·p0.99:   7100.416 us/op
                 concatenateStrings·p0.999:  7419.781 us/op
                 concatenateStrings·p0.9999: 7495.680 us/op
                 concatenateStrings·p1.00:   7495.680 us/op

Iteration   7: 6465.056 ±(99.9%) 19.348 us/op
                 concatenateStrings·p0.00:   6078.464 us/op
                 concatenateStrings·p0.50:   6414.336 us/op
                 concatenateStrings·p0.90:   6774.784 us/op
                 concatenateStrings·p0.95:   6856.704 us/op
                 concatenateStrings·p0.99:   7086.572 us/op
                 concatenateStrings·p0.999:  7611.351 us/op
                 concatenateStrings·p0.9999: 7790.592 us/op
                 concatenateStrings·p1.00:   7790.592 us/op

Iteration   8: 6481.381 ±(99.9%) 18.914 us/op
                 concatenateStrings·p0.00:   6037.504 us/op
                 concatenateStrings·p0.50:   6430.720 us/op
                 concatenateStrings·p0.90:   6791.168 us/op
                 concatenateStrings·p0.95:   6873.088 us/op
                 concatenateStrings·p0.99:   7102.464 us/op
                 concatenateStrings·p0.999:  7276.831 us/op
                 concatenateStrings·p0.9999: 7299.072 us/op
                 concatenateStrings·p1.00:   7299.072 us/op

Iteration   9: 6462.387 ±(99.9%) 19.065 us/op
                 concatenateStrings·p0.00:   6062.080 us/op
                 concatenateStrings·p0.50:   6422.528 us/op
                 concatenateStrings·p0.90:   6766.592 us/op
                 concatenateStrings·p0.95:   6864.896 us/op
                 concatenateStrings·p0.99:   7131.955 us/op
                 concatenateStrings·p0.999:  7319.159 us/op
                 concatenateStrings·p0.9999: 7323.648 us/op
                 concatenateStrings·p1.00:   7323.648 us/op

Iteration  10: 6477.823 ±(99.9%) 19.184 us/op
                 concatenateStrings·p0.00:   6078.464 us/op
                 concatenateStrings·p0.50:   6438.912 us/op
                 concatenateStrings·p0.90:   6774.784 us/op
                 concatenateStrings·p0.95:   6856.704 us/op
                 concatenateStrings·p0.99:   7131.628 us/op
                 concatenateStrings·p0.999:  7348.355 us/op
                 concatenateStrings·p0.9999: 7397.376 us/op
                 concatenateStrings·p1.00:   7397.376 us/op

Iteration  11: 6478.375 ±(99.9%) 20.789 us/op
                 concatenateStrings·p0.00:   6078.464 us/op
                 concatenateStrings·p0.50:   6430.720 us/op
                 concatenateStrings·p0.90:   6791.168 us/op
                 concatenateStrings·p0.95:   6864.896 us/op
                 concatenateStrings·p0.99:   7140.803 us/op
                 concatenateStrings·p0.999:  9082.503 us/op
                 concatenateStrings·p0.9999: 10125.312 us/op
                 concatenateStrings·p1.00:   10125.312 us/op

Iteration  12: 6466.545 ±(99.9%) 18.714 us/op
                 concatenateStrings·p0.00:   6029.312 us/op
                 concatenateStrings·p0.50:   6414.336 us/op
                 concatenateStrings·p0.90:   6782.976 us/op
                 concatenateStrings·p0.95:   6856.704 us/op
                 concatenateStrings·p0.99:   7070.188 us/op
                 concatenateStrings·p0.999:  7275.127 us/op
                 concatenateStrings·p0.9999: 7315.456 us/op
                 concatenateStrings·p1.00:   7315.456 us/op

Iteration  13: 6500.352 ±(99.9%) 19.345 us/op
                 concatenateStrings·p0.00:   6045.696 us/op
                 concatenateStrings·p0.50:   6463.488 us/op
                 concatenateStrings·p0.90:   6815.744 us/op
                 concatenateStrings·p0.95:   6889.472 us/op
                 concatenateStrings·p0.99:   7153.418 us/op
                 concatenateStrings·p0.999:  7281.410 us/op
                 concatenateStrings·p0.9999: 7299.072 us/op
                 concatenateStrings·p1.00:   7299.072 us/op

Iteration  14: 6504.240 ±(99.9%) 19.326 us/op
                 concatenateStrings·p0.00:   6070.272 us/op
                 concatenateStrings·p0.50:   6463.488 us/op
                 concatenateStrings·p0.90:   6815.744 us/op
                 concatenateStrings·p0.95:   6897.664 us/op
                 concatenateStrings·p0.99:   7094.272 us/op
                 concatenateStrings·p0.999:  7392.969 us/op
                 concatenateStrings·p0.9999: 7397.376 us/op
                 concatenateStrings·p1.00:   7397.376 us/op

Iteration  15: 6474.025 ±(99.9%) 18.576 us/op
                 concatenateStrings·p0.00:   6111.232 us/op
                 concatenateStrings·p0.50:   6430.720 us/op
                 concatenateStrings·p0.90:   6774.784 us/op
                 concatenateStrings·p0.95:   6854.656 us/op
                 concatenateStrings·p0.99:   7054.131 us/op
                 concatenateStrings·p0.999:  7277.486 us/op
                 concatenateStrings·p0.9999: 7290.880 us/op
                 concatenateStrings·p1.00:   7290.880 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 23149
  mean =   6477.261 ±(99.9%) 4.941 us/op

  Histogram, us/op:
    [ 6000.000,  6500.000) = 13515 
    [ 6500.000,  7000.000) = 9149 
    [ 7000.000,  7500.000) = 479 
    [ 7500.000,  8000.000) = 4 
    [ 8000.000,  8500.000) = 1 
    [ 8500.000,  9000.000) = 0 
    [ 9000.000,  9500.000) = 0 
    [ 9500.000, 10000.000) = 0 
    [10000.000, 10500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   6029.312 us/op
     p(50.0000) =   6430.720 us/op
     p(90.0000) =   6791.168 us/op
     p(95.0000) =   6873.088 us/op
     p(99.0000) =   7102.464 us/op
     p(99.9000) =   7307.264 us/op
     p(99.9900) =   8076.780 us/op
     p(99.9990) =  10125.312 us/op
     p(99.9999) =  10125.312 us/op
    p(100.0000) =  10125.312 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 98.55% complete, ETA 00:07:19
# Fork: 1 of 1
# Warmup Iteration   1: 107883.531 ±(99.9%) 1077.142 us/op
# Warmup Iteration   2: 105982.060 ±(99.9%) 818.894 us/op
# Warmup Iteration   3: 105299.106 ±(99.9%) 590.389 us/op
# Warmup Iteration   4: 105594.363 ±(99.9%) 646.880 us/op
# Warmup Iteration   5: 104871.253 ±(99.9%) 683.974 us/op
Iteration   1: 105390.166 ±(99.9%) 599.819 us/op
                 concatenateStrings·p0.00:   99745.792 us/op
                 concatenateStrings·p0.50:   105381.888 us/op
                 concatenateStrings·p0.90:   107610.112 us/op
                 concatenateStrings·p0.95:   108134.400 us/op
                 concatenateStrings·p0.99:   108789.760 us/op
                 concatenateStrings·p0.999:  108789.760 us/op
                 concatenateStrings·p0.9999: 108789.760 us/op
                 concatenateStrings·p1.00:   108789.760 us/op

Iteration   2: 105216.323 ±(99.9%) 613.013 us/op
                 concatenateStrings·p0.00:   99614.720 us/op
                 concatenateStrings·p0.50:   105250.816 us/op
                 concatenateStrings·p0.90:   107400.397 us/op
                 concatenateStrings·p0.95:   107741.184 us/op
                 concatenateStrings·p0.99:   109314.048 us/op
                 concatenateStrings·p0.999:  109314.048 us/op
                 concatenateStrings·p0.9999: 109314.048 us/op
                 concatenateStrings·p1.00:   109314.048 us/op

Iteration   3: 105312.903 ±(99.9%) 635.826 us/op
                 concatenateStrings·p0.00:   99745.792 us/op
                 concatenateStrings·p0.50:   105381.888 us/op
                 concatenateStrings·p0.90:   107610.112 us/op
                 concatenateStrings·p0.95:   108029.542 us/op
                 concatenateStrings·p0.99:   109445.120 us/op
                 concatenateStrings·p0.999:  109445.120 us/op
                 concatenateStrings·p0.9999: 109445.120 us/op
                 concatenateStrings·p1.00:   109445.120 us/op

Iteration   4: 105343.256 ±(99.9%) 719.808 us/op
                 concatenateStrings·p0.00:   99614.720 us/op
                 concatenateStrings·p0.50:   105250.816 us/op
                 concatenateStrings·p0.90:   108396.544 us/op
                 concatenateStrings·p0.95:   109104.333 us/op
                 concatenateStrings·p0.99:   109707.264 us/op
                 concatenateStrings·p0.999:  109707.264 us/op
                 concatenateStrings·p0.9999: 109707.264 us/op
                 concatenateStrings·p1.00:   109707.264 us/op

Iteration   5: 105026.901 ±(99.9%) 635.964 us/op
                 concatenateStrings·p0.00:   99876.864 us/op
                 concatenateStrings·p0.50:   104923.136 us/op
                 concatenateStrings·p0.90:   107347.968 us/op
                 concatenateStrings·p0.95:   107911.578 us/op
                 concatenateStrings·p0.99:   108658.688 us/op
                 concatenateStrings·p0.999:  108658.688 us/op
                 concatenateStrings·p0.9999: 108658.688 us/op
                 concatenateStrings·p1.00:   108658.688 us/op

Iteration   6: 105237.019 ±(99.9%) 562.798 us/op
                 concatenateStrings·p0.00:   101318.656 us/op
                 concatenateStrings·p0.50:   104857.600 us/op
                 concatenateStrings·p0.90:   107138.253 us/op
                 concatenateStrings·p0.95:   107793.613 us/op
                 concatenateStrings·p0.99:   109969.408 us/op
                 concatenateStrings·p0.999:  109969.408 us/op
                 concatenateStrings·p0.9999: 109969.408 us/op
                 concatenateStrings·p1.00:   109969.408 us/op

Iteration   7: 104936.789 ±(99.9%) 644.837 us/op
                 concatenateStrings·p0.00:   99090.432 us/op
                 concatenateStrings·p0.50:   105054.208 us/op
                 concatenateStrings·p0.90:   107125.146 us/op
                 concatenateStrings·p0.95:   107911.578 us/op
                 concatenateStrings·p0.99:   109445.120 us/op
                 concatenateStrings·p0.999:  109445.120 us/op
                 concatenateStrings·p0.9999: 109445.120 us/op
                 concatenateStrings·p1.00:   109445.120 us/op

Iteration   8: 105005.056 ±(99.9%) 620.974 us/op
                 concatenateStrings·p0.00:   100139.008 us/op
                 concatenateStrings·p0.50:   104857.600 us/op
                 concatenateStrings·p0.90:   107649.434 us/op
                 concatenateStrings·p0.95:   108173.722 us/op
                 concatenateStrings·p0.99:   109051.904 us/op
                 concatenateStrings·p0.999:  109051.904 us/op
                 concatenateStrings·p0.9999: 109051.904 us/op
                 concatenateStrings·p1.00:   109051.904 us/op

Iteration   9: 104950.443 ±(99.9%) 581.730 us/op
                 concatenateStrings·p0.00:   100794.368 us/op
                 concatenateStrings·p0.50:   104988.672 us/op
                 concatenateStrings·p0.90:   107256.218 us/op
                 concatenateStrings·p0.95:   107760.845 us/op
                 concatenateStrings·p0.99:   109576.192 us/op
                 concatenateStrings·p0.999:  109576.192 us/op
                 concatenateStrings·p0.9999: 109576.192 us/op
                 concatenateStrings·p1.00:   109576.192 us/op

Iteration  10: 104970.923 ±(99.9%) 574.504 us/op
                 concatenateStrings·p0.00:   99876.864 us/op
                 concatenateStrings·p0.50:   104988.672 us/op
                 concatenateStrings·p0.90:   107387.290 us/op
                 concatenateStrings·p0.95:   108003.328 us/op
                 concatenateStrings·p0.99:   108920.832 us/op
                 concatenateStrings·p0.999:  108920.832 us/op
                 concatenateStrings·p0.9999: 108920.832 us/op
                 concatenateStrings·p1.00:   108920.832 us/op

Iteration  11: 104402.944 ±(99.9%) 549.745 us/op
                 concatenateStrings·p0.00:   100270.080 us/op
                 concatenateStrings·p0.50:   104267.776 us/op
                 concatenateStrings·p0.90:   106600.858 us/op
                 concatenateStrings·p0.95:   107085.824 us/op
                 concatenateStrings·p0.99:   107741.184 us/op
                 concatenateStrings·p0.999:  107741.184 us/op
                 concatenateStrings·p0.9999: 107741.184 us/op
                 concatenateStrings·p1.00:   107741.184 us/op

Iteration  12: 104641.877 ±(99.9%) 593.928 us/op
                 concatenateStrings·p0.00:   100270.080 us/op
                 concatenateStrings·p0.50:   104792.064 us/op
                 concatenateStrings·p0.90:   106954.752 us/op
                 concatenateStrings·p0.95:   107479.040 us/op
                 concatenateStrings·p0.99:   108003.328 us/op
                 concatenateStrings·p0.999:  108003.328 us/op
                 concatenateStrings·p0.9999: 108003.328 us/op
                 concatenateStrings·p1.00:   108003.328 us/op

Iteration  13: 105197.007 ±(99.9%) 606.323 us/op
                 concatenateStrings·p0.00:   100532.224 us/op
                 concatenateStrings·p0.50:   105381.888 us/op
                 concatenateStrings·p0.90:   107531.469 us/op
                 concatenateStrings·p0.95:   108055.757 us/op
                 concatenateStrings·p0.99:   110493.696 us/op
                 concatenateStrings·p0.999:  110493.696 us/op
                 concatenateStrings·p0.9999: 110493.696 us/op
                 concatenateStrings·p1.00:   110493.696 us/op

Iteration  14: 104848.043 ±(99.9%) 658.430 us/op
                 concatenateStrings·p0.00:   99483.648 us/op
                 concatenateStrings·p0.50:   104857.600 us/op
                 concatenateStrings·p0.90:   107479.040 us/op
                 concatenateStrings·p0.95:   108022.989 us/op
                 concatenateStrings·p0.99:   108527.616 us/op
                 concatenateStrings·p0.999:  108527.616 us/op
                 concatenateStrings·p0.9999: 108527.616 us/op
                 concatenateStrings·p1.00:   108527.616 us/op

Iteration  15: 104777.045 ±(99.9%) 550.512 us/op
                 concatenateStrings·p0.00:   99614.720 us/op
                 concatenateStrings·p0.50:   104792.064 us/op
                 concatenateStrings·p0.90:   106823.680 us/op
                 concatenateStrings·p0.95:   107610.112 us/op
                 concatenateStrings·p0.99:   108003.328 us/op
                 concatenateStrings·p0.999:  108003.328 us/op
                 concatenateStrings·p0.9999: 108003.328 us/op
                 concatenateStrings·p1.00:   108003.328 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 1434
  mean = 105016.002 ±(99.9%) 154.262 us/op

  Histogram, us/op:
    [ 90000.000,  92500.000) = 0 
    [ 92500.000,  95000.000) = 0 
    [ 95000.000,  97500.000) = 0 
    [ 97500.000, 100000.000) = 9 
    [100000.000, 102500.000) = 90 
    [102500.000, 105000.000) = 636 
    [105000.000, 107500.000) = 588 
    [107500.000, 110000.000) = 110 
    [110000.000, 112500.000) = 1 
    [112500.000, 115000.000) = 0 
    [115000.000, 117500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  99090.432 us/op
     p(50.0000) = 104988.672 us/op
     p(90.0000) = 107347.968 us/op
     p(95.0000) = 107872.256 us/op
     p(99.0000) = 109051.904 us/op
     p(99.9000) = 110265.631 us/op
     p(99.9900) = 110493.696 us/op
     p(99.9990) = 110493.696 us/op
     p(99.9999) = 110493.696 us/op
    p(100.0000) = 110493.696 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 99.27% complete, ETA 00:03:40
# Fork: 1 of 1
# Warmup Iteration   1: 1704984.576 ±(99.9%) 406556.281 us/op
# Warmup Iteration   2: 1713073.591 ±(99.9%) 398150.860 us/op
# Warmup Iteration   3: 1672029.330 ±(99.9%) 478547.873 us/op
# Warmup Iteration   4: 1672328.923 ±(99.9%) 487127.536 us/op
# Warmup Iteration   5: 1666936.247 ±(99.9%) 449755.110 us/op
Iteration   1: 1664239.909 ±(99.9%) 472197.844 us/op
                 createNewObjectsWithRecursive·p0.00:   1451229.184 us/op
                 createNewObjectsWithRecursive·p0.50:   1644167.168 us/op
                 createNewObjectsWithRecursive·p0.90:   2095054.848 us/op
                 createNewObjectsWithRecursive·p0.95:   2095054.848 us/op
                 createNewObjectsWithRecursive·p0.99:   2095054.848 us/op
                 createNewObjectsWithRecursive·p0.999:  2095054.848 us/op
                 createNewObjectsWithRecursive·p0.9999: 2095054.848 us/op
                 createNewObjectsWithRecursive·p1.00:   2095054.848 us/op

Iteration   2: 1662142.757 ±(99.9%) 471054.701 us/op
                 createNewObjectsWithRecursive·p0.00:   1453326.336 us/op
                 createNewObjectsWithRecursive·p0.50:   1637875.712 us/op
                 createNewObjectsWithRecursive·p0.90:   2092957.696 us/op
                 createNewObjectsWithRecursive·p0.95:   2092957.696 us/op
                 createNewObjectsWithRecursive·p0.99:   2092957.696 us/op
                 createNewObjectsWithRecursive·p0.999:  2092957.696 us/op
                 createNewObjectsWithRecursive·p0.9999: 2092957.696 us/op
                 createNewObjectsWithRecursive·p1.00:   2092957.696 us/op

Iteration   3: 1661543.570 ±(99.9%) 461347.393 us/op
                 createNewObjectsWithRecursive·p0.00:   1436549.120 us/op
                 createNewObjectsWithRecursive·p0.50:   1650458.624 us/op
                 createNewObjectsWithRecursive·p0.90:   2076180.480 us/op
                 createNewObjectsWithRecursive·p0.95:   2076180.480 us/op
                 createNewObjectsWithRecursive·p0.99:   2076180.480 us/op
                 createNewObjectsWithRecursive·p0.999:  2076180.480 us/op
                 createNewObjectsWithRecursive·p0.9999: 2076180.480 us/op
                 createNewObjectsWithRecursive·p1.00:   2076180.480 us/op

Iteration   4: 1659446.418 ±(99.9%) 471179.850 us/op
                 createNewObjectsWithRecursive·p0.00:   1440743.424 us/op
                 createNewObjectsWithRecursive·p0.50:   1635778.560 us/op
                 createNewObjectsWithRecursive·p0.90:   2086666.240 us/op
                 createNewObjectsWithRecursive·p0.95:   2086666.240 us/op
                 createNewObjectsWithRecursive·p0.99:   2086666.240 us/op
                 createNewObjectsWithRecursive·p0.999:  2086666.240 us/op
                 createNewObjectsWithRecursive·p0.9999: 2086666.240 us/op
                 createNewObjectsWithRecursive·p1.00:   2086666.240 us/op

Iteration   5: 1659146.825 ±(99.9%) 461683.463 us/op
                 createNewObjectsWithRecursive·p0.00:   1444937.728 us/op
                 createNewObjectsWithRecursive·p0.50:   1652555.776 us/op
                 createNewObjectsWithRecursive·p0.90:   2074083.328 us/op
                 createNewObjectsWithRecursive·p0.95:   2074083.328 us/op
                 createNewObjectsWithRecursive·p0.99:   2074083.328 us/op
                 createNewObjectsWithRecursive·p0.999:  2074083.328 us/op
                 createNewObjectsWithRecursive·p0.9999: 2074083.328 us/op
                 createNewObjectsWithRecursive·p1.00:   2074083.328 us/op

Iteration   6: 1663640.722 ±(99.9%) 469044.383 us/op
                 createNewObjectsWithRecursive·p0.00:   1451229.184 us/op
                 createNewObjectsWithRecursive·p0.50:   1646264.320 us/op
                 createNewObjectsWithRecursive·p0.90:   2090860.544 us/op
                 createNewObjectsWithRecursive·p0.95:   2090860.544 us/op
                 createNewObjectsWithRecursive·p0.99:   2090860.544 us/op
                 createNewObjectsWithRecursive·p0.999:  2090860.544 us/op
                 createNewObjectsWithRecursive·p0.9999: 2090860.544 us/op
                 createNewObjectsWithRecursive·p1.00:   2090860.544 us/op

Iteration   7: 1659746.011 ±(99.9%) 480750.513 us/op
                 createNewObjectsWithRecursive·p0.00:   1440743.424 us/op
                 createNewObjectsWithRecursive·p0.50:   1646264.320 us/op
                 createNewObjectsWithRecursive·p0.90:   2099249.152 us/op
                 createNewObjectsWithRecursive·p0.95:   2099249.152 us/op
                 createNewObjectsWithRecursive·p0.99:   2099249.152 us/op
                 createNewObjectsWithRecursive·p0.999:  2099249.152 us/op
                 createNewObjectsWithRecursive·p0.9999: 2099249.152 us/op
                 createNewObjectsWithRecursive·p1.00:   2099249.152 us/op

Iteration   8: 1667235.840 ±(99.9%) 458876.906 us/op
                 createNewObjectsWithRecursive·p0.00:   1455423.488 us/op
                 createNewObjectsWithRecursive·p0.50:   1648361.472 us/op
                 createNewObjectsWithRecursive·p0.90:   2082471.936 us/op
                 createNewObjectsWithRecursive·p0.95:   2082471.936 us/op
                 createNewObjectsWithRecursive·p0.99:   2082471.936 us/op
                 createNewObjectsWithRecursive·p0.999:  2082471.936 us/op
                 createNewObjectsWithRecursive·p0.9999: 2082471.936 us/op
                 createNewObjectsWithRecursive·p1.00:   2082471.936 us/op

Iteration   9: 1656450.487 ±(99.9%) 475583.983 us/op
                 createNewObjectsWithRecursive·p0.00:   1432354.816 us/op
                 createNewObjectsWithRecursive·p0.50:   1648361.472 us/op
                 createNewObjectsWithRecursive·p0.90:   2086666.240 us/op
                 createNewObjectsWithRecursive·p0.95:   2086666.240 us/op
                 createNewObjectsWithRecursive·p0.99:   2086666.240 us/op
                 createNewObjectsWithRecursive·p0.999:  2086666.240 us/op
                 createNewObjectsWithRecursive·p0.9999: 2086666.240 us/op
                 createNewObjectsWithRecursive·p1.00:   2086666.240 us/op

Iteration  10: 1662142.757 ±(99.9%) 471173.086 us/op
                 createNewObjectsWithRecursive·p0.00:   1436549.120 us/op
                 createNewObjectsWithRecursive·p0.50:   1635778.560 us/op
                 createNewObjectsWithRecursive·p0.90:   2084569.088 us/op
                 createNewObjectsWithRecursive·p0.95:   2084569.088 us/op
                 createNewObjectsWithRecursive·p0.99:   2084569.088 us/op
                 createNewObjectsWithRecursive·p0.999:  2084569.088 us/op
                 createNewObjectsWithRecursive·p0.9999: 2084569.088 us/op
                 createNewObjectsWithRecursive·p1.00:   2084569.088 us/op

Iteration  11: 1652855.369 ±(99.9%) 468946.982 us/op
                 createNewObjectsWithRecursive·p0.00:   1438646.272 us/op
                 createNewObjectsWithRecursive·p0.50:   1629487.104 us/op
                 createNewObjectsWithRecursive·p0.90:   2080374.784 us/op
                 createNewObjectsWithRecursive·p0.95:   2080374.784 us/op
                 createNewObjectsWithRecursive·p0.99:   2080374.784 us/op
                 createNewObjectsWithRecursive·p0.999:  2080374.784 us/op
                 createNewObjectsWithRecursive·p0.9999: 2080374.784 us/op
                 createNewObjectsWithRecursive·p1.00:   2080374.784 us/op

Iteration  12: 1665737.874 ±(99.9%) 465199.818 us/op
                 createNewObjectsWithRecursive·p0.00:   1436549.120 us/op
                 createNewObjectsWithRecursive·p0.50:   1656750.080 us/op
                 createNewObjectsWithRecursive·p0.90:   2080374.784 us/op
                 createNewObjectsWithRecursive·p0.95:   2080374.784 us/op
                 createNewObjectsWithRecursive·p0.99:   2080374.784 us/op
                 createNewObjectsWithRecursive·p0.999:  2080374.784 us/op
                 createNewObjectsWithRecursive·p0.9999: 2080374.784 us/op
                 createNewObjectsWithRecursive·p1.00:   2080374.784 us/op

Iteration  13: 1675624.448 ±(99.9%) 471726.281 us/op
                 createNewObjectsWithRecursive·p0.00:   1468006.400 us/op
                 createNewObjectsWithRecursive·p0.50:   1652555.776 us/op
                 createNewObjectsWithRecursive·p0.90:   2107637.760 us/op
                 createNewObjectsWithRecursive·p0.95:   2107637.760 us/op
                 createNewObjectsWithRecursive·p0.99:   2107637.760 us/op
                 createNewObjectsWithRecursive·p0.999:  2107637.760 us/op
                 createNewObjectsWithRecursive·p0.9999: 2107637.760 us/op
                 createNewObjectsWithRecursive·p1.00:   2107637.760 us/op

Iteration  14: 1668434.213 ±(99.9%) 471023.127 us/op
                 createNewObjectsWithRecursive·p0.00:   1453326.336 us/op
                 createNewObjectsWithRecursive·p0.50:   1652555.776 us/op
                 createNewObjectsWithRecursive·p0.90:   2101346.304 us/op
                 createNewObjectsWithRecursive·p0.95:   2101346.304 us/op
                 createNewObjectsWithRecursive·p0.99:   2101346.304 us/op
                 createNewObjectsWithRecursive·p0.999:  2101346.304 us/op
                 createNewObjectsWithRecursive·p0.9999: 2101346.304 us/op
                 createNewObjectsWithRecursive·p1.00:   2101346.304 us/op

Iteration  15: 1673826.889 ±(99.9%) 470142.705 us/op
                 createNewObjectsWithRecursive·p0.00:   1463812.096 us/op
                 createNewObjectsWithRecursive·p0.50:   1652555.776 us/op
                 createNewObjectsWithRecursive·p0.90:   2101346.304 us/op
                 createNewObjectsWithRecursive·p0.95:   2101346.304 us/op
                 createNewObjectsWithRecursive·p0.99:   2101346.304 us/op
                 createNewObjectsWithRecursive·p0.999:  2101346.304 us/op
                 createNewObjectsWithRecursive·p0.9999: 2101346.304 us/op
                 createNewObjectsWithRecursive·p1.00:   2101346.304 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  N = 105
  mean = 1663480.939 ±(99.9%) 64100.811 us/op

  Histogram, us/op:
    [1400000.000, 1450000.000) = 8 
    [1450000.000, 1500000.000) = 9 
    [1500000.000, 1550000.000) = 13 
    [1550000.000, 1600000.000) = 14 
    [1600000.000, 1650000.000) = 11 
    [1650000.000, 1700000.000) = 22 
    [1700000.000, 1750000.000) = 13 
    [1750000.000, 1800000.000) = 0 
    [1800000.000, 1850000.000) = 0 
    [1850000.000, 1900000.000) = 0 
    [1900000.000, 1950000.000) = 0 
    [1950000.000, 2000000.000) = 0 
    [2000000.000, 2050000.000) = 0 
    [2050000.000, 2100000.000) = 12 
    [2100000.000, 2150000.000) = 3 

  Percentiles, us/op:
      p(0.0000) = 1432354.816 us/op
     p(50.0000) = 1646264.320 us/op
     p(90.0000) = 2083310.797 us/op
     p(95.0000) = 2094425.702 us/op
     p(99.0000) = 2107260.273 us/op
     p(99.9000) = 2107637.760 us/op
     p(99.9900) = 2107637.760 us/op
     p(99.9990) = 2107637.760 us/op
     p(99.9999) = 2107637.760 us/op
    p(100.0000) = 2107637.760 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 100.00% complete, ETA 00:00:01
# Fork: 1 of 1
# Warmup Iteration   1: 226733.440 us/op
# Warmup Iteration   2: 218828.628 us/op
# Warmup Iteration   3: 210276.483 us/op
# Warmup Iteration   4: 222914.954 us/op
# Warmup Iteration   5: 223791.642 us/op
Iteration   1: 221315.791 us/op
Iteration   2: 222744.953 us/op
Iteration   3: 225186.027 us/op
Iteration   4: 217783.719 us/op
Iteration   5: 224560.120 us/op
Iteration   6: 218887.648 us/op
Iteration   7: 222991.636 us/op
Iteration   8: 224457.678 us/op
Iteration   9: 218568.374 us/op
Iteration  10: 222761.249 us/op
Iteration  11: 219790.743 us/op
Iteration  12: 225160.846 us/op
Iteration  13: 217772.529 us/op
Iteration  14: 222965.572 us/op
Iteration  15: 231312.845 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 222417.315 ±(99.9%) 3858.398 us/op

  Histogram, us/op:
    [210000.000, 212500.000) = 0 
    [212500.000, 215000.000) = 0 
    [215000.000, 217500.000) = 0 
    [217500.000, 220000.000) = 5 
    [220000.000, 222500.000) = 1 
    [222500.000, 225000.000) = 6 
    [225000.000, 227500.000) = 2 
    [227500.000, 230000.000) = 0 
    [230000.000, 232500.000) = 1 
    [232500.000, 235000.000) = 0 
    [235000.000, 237500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 217772.529 us/op
     p(50.0000) = 222761.249 us/op
     p(90.0000) = 227636.754 us/op
     p(95.0000) = 231312.845 us/op
     p(99.0000) = 231312.845 us/op
     p(99.9000) = 231312.845 us/op
     p(99.9900) = 231312.845 us/op
     p(99.9990) = 231312.845 us/op
     p(99.9999) = 231312.845 us/op
    p(100.0000) = 231312.845 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 210047.049 us/op
# Warmup Iteration   2: 199705.546 us/op
# Warmup Iteration   3: 220853.320 us/op
# Warmup Iteration   4: 219688.547 us/op
# Warmup Iteration   5: 220841.040 us/op
Iteration   1: 220899.429 us/op
Iteration   2: 220569.613 us/op
Iteration   3: 220480.517 us/op
Iteration   4: 222808.655 us/op
Iteration   5: 219036.801 us/op
Iteration   6: 220749.665 us/op
Iteration   7: 220641.883 us/op
Iteration   8: 220898.293 us/op
Iteration   9: 219971.710 us/op
Iteration  10: 224513.867 us/op
Iteration  11: 221326.564 us/op
Iteration  12: 220967.710 us/op
Iteration  13: 223513.530 us/op
Iteration  14: 222112.271 us/op
Iteration  15: 221018.411 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 221300.595 ±(99.9%) 1498.433 us/op

  Histogram, us/op:
    [219000.000, 219500.000) = 1 
    [219500.000, 220000.000) = 1 
    [220000.000, 220500.000) = 1 
    [220500.000, 221000.000) = 6 
    [221000.000, 221500.000) = 2 
    [221500.000, 222000.000) = 0 
    [222000.000, 222500.000) = 1 
    [222500.000, 223000.000) = 1 
    [223000.000, 223500.000) = 0 
    [223500.000, 224000.000) = 1 
    [224000.000, 224500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 219036.801 us/op
     p(50.0000) = 220899.429 us/op
     p(90.0000) = 223913.665 us/op
     p(95.0000) = 224513.867 us/op
     p(99.0000) = 224513.867 us/op
     p(99.9000) = 224513.867 us/op
     p(99.9900) = 224513.867 us/op
     p(99.9990) = 224513.867 us/op
     p(99.9999) = 224513.867 us/op
    p(100.0000) = 224513.867 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 206090.719 us/op
# Warmup Iteration   2: 204169.566 us/op
# Warmup Iteration   3: 202693.710 us/op
# Warmup Iteration   4: 204257.240 us/op
# Warmup Iteration   5: 179464.158 us/op
Iteration   1: 152799.263 us/op
Iteration   2: 153336.391 us/op
Iteration   3: 185313.370 us/op
Iteration   4: 201943.404 us/op
Iteration   5: 200796.921 us/op
Iteration   6: 200533.134 us/op
Iteration   7: 200586.416 us/op
Iteration   8: 200779.850 us/op
Iteration   9: 202012.162 us/op
Iteration  10: 202739.348 us/op
Iteration  11: 203313.770 us/op
Iteration  12: 202967.701 us/op
Iteration  13: 200659.985 us/op
Iteration  14: 201569.206 us/op
Iteration  15: 202573.679 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 194128.307 ±(99.9%) 18407.142 us/op

  Histogram, us/op:
    [150000.000, 155000.000) = 2 
    [155000.000, 160000.000) = 0 
    [160000.000, 165000.000) = 0 
    [165000.000, 170000.000) = 0 
    [170000.000, 175000.000) = 0 
    [175000.000, 180000.000) = 0 
    [180000.000, 185000.000) = 0 
    [185000.000, 190000.000) = 1 
    [190000.000, 195000.000) = 0 
    [195000.000, 200000.000) = 0 
    [200000.000, 205000.000) = 12 

  Percentiles, us/op:
      p(0.0000) = 152799.263 us/op
     p(50.0000) = 200796.921 us/op
     p(90.0000) = 203106.129 us/op
     p(95.0000) = 203313.770 us/op
     p(99.0000) = 203313.770 us/op
     p(99.9000) = 203313.770 us/op
     p(99.9900) = 203313.770 us/op
     p(99.9990) = 203313.770 us/op
     p(99.9999) = 203313.770 us/op
    p(100.0000) = 203313.770 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 200645.636 us/op
# Warmup Iteration   2: 198877.420 us/op
# Warmup Iteration   3: 198822.600 us/op
# Warmup Iteration   4: 199283.662 us/op
# Warmup Iteration   5: 199032.880 us/op
Iteration   1: 198903.389 us/op
Iteration   2: 200295.056 us/op
Iteration   3: 198050.198 us/op
Iteration   4: 198613.841 us/op
Iteration   5: 198970.711 us/op
Iteration   6: 202727.458 us/op
Iteration   7: 198849.109 us/op
Iteration   8: 198689.388 us/op
Iteration   9: 202658.612 us/op
Iteration  10: 198941.804 us/op
Iteration  11: 198951.189 us/op
Iteration  12: 199174.856 us/op
Iteration  13: 198553.541 us/op
Iteration  14: 198712.942 us/op
Iteration  15: 198922.494 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 199400.973 ±(99.9%) 1513.219 us/op

  Histogram, us/op:
    [198000.000, 198500.000) = 1 
    [198500.000, 199000.000) = 10 
    [199000.000, 199500.000) = 1 
    [199500.000, 200000.000) = 0 
    [200000.000, 200500.000) = 1 
    [200500.000, 201000.000) = 0 
    [201000.000, 201500.000) = 0 
    [201500.000, 202000.000) = 0 
    [202000.000, 202500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 198050.198 us/op
     p(50.0000) = 198922.494 us/op
     p(90.0000) = 202686.150 us/op
     p(95.0000) = 202727.458 us/op
     p(99.0000) = 202727.458 us/op
     p(99.9000) = 202727.458 us/op
     p(99.9900) = 202727.458 us/op
     p(99.9990) = 202727.458 us/op
     p(99.9999) = 202727.458 us/op
    p(100.0000) = 202727.458 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 200830.294 us/op
# Warmup Iteration   2: 198646.567 us/op
# Warmup Iteration   3: 199112.182 us/op
# Warmup Iteration   4: 199127.340 us/op
# Warmup Iteration   5: 199182.590 us/op
Iteration   1: 198683.517 us/op
Iteration   2: 198416.434 us/op
Iteration   3: 197915.596 us/op
Iteration   4: 198060.182 us/op
Iteration   5: 198451.699 us/op
Iteration   6: 198280.568 us/op
Iteration   7: 198020.542 us/op
Iteration   8: 198150.642 us/op
Iteration   9: 198373.770 us/op
Iteration  10: 198122.200 us/op
Iteration  11: 198456.028 us/op
Iteration  12: 200730.899 us/op
Iteration  13: 200383.893 us/op
Iteration  14: 198356.634 us/op
Iteration  15: 201772.583 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 198811.679 ±(99.9%) 1243.378 us/op

  Histogram, us/op:
    [197000.000, 197500.000) = 0 
    [197500.000, 198000.000) = 1 
    [198000.000, 198500.000) = 10 
    [198500.000, 199000.000) = 1 
    [199000.000, 199500.000) = 0 
    [199500.000, 200000.000) = 0 
    [200000.000, 200500.000) = 1 
    [200500.000, 201000.000) = 1 
    [201000.000, 201500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 197915.596 us/op
     p(50.0000) = 198373.770 us/op
     p(90.0000) = 201147.573 us/op
     p(95.0000) = 201772.583 us/op
     p(99.0000) = 201772.583 us/op
     p(99.9000) = 201772.583 us/op
     p(99.9900) = 201772.583 us/op
     p(99.9990) = 201772.583 us/op
     p(99.9999) = 201772.583 us/op
    p(100.0000) = 201772.583 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 195574.954 us/op
# Warmup Iteration   2: 194242.412 us/op
# Warmup Iteration   3: 194145.223 us/op
# Warmup Iteration   4: 196222.954 us/op
# Warmup Iteration   5: 194038.355 us/op
Iteration   1: 194988.247 us/op
Iteration   2: 194134.586 us/op
Iteration   3: 195184.637 us/op
Iteration   4: 195381.922 us/op
Iteration   5: 195079.401 us/op
Iteration   6: 195111.090 us/op
Iteration   7: 196975.046 us/op
Iteration   8: 195075.706 us/op
Iteration   9: 194723.032 us/op
Iteration  10: 195191.378 us/op
Iteration  11: 194399.726 us/op
Iteration  12: 197757.662 us/op
Iteration  13: 197634.045 us/op
Iteration  14: 197702.029 us/op
Iteration  15: 196817.139 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 195743.710 ±(99.9%) 1345.524 us/op

  Histogram, us/op:
    [194000.000, 194250.000) = 1 
    [194250.000, 194500.000) = 1 
    [194500.000, 194750.000) = 1 
    [194750.000, 195000.000) = 1 
    [195000.000, 195250.000) = 5 
    [195250.000, 195500.000) = 1 
    [195500.000, 195750.000) = 0 
    [195750.000, 196000.000) = 0 
    [196000.000, 196250.000) = 0 
    [196250.000, 196500.000) = 0 
    [196500.000, 196750.000) = 0 
    [196750.000, 197000.000) = 2 
    [197000.000, 197250.000) = 0 
    [197250.000, 197500.000) = 0 
    [197500.000, 197750.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 194134.586 us/op
     p(50.0000) = 195184.637 us/op
     p(90.0000) = 197724.282 us/op
     p(95.0000) = 197757.662 us/op
     p(99.0000) = 197757.662 us/op
     p(99.9000) = 197757.662 us/op
     p(99.9900) = 197757.662 us/op
     p(99.9990) = 197757.662 us/op
     p(99.9999) = 197757.662 us/op
    p(100.0000) = 197757.662 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1395637.973 us/op
# Warmup Iteration   2: 1193927.242 us/op
# Warmup Iteration   3: 1185012.163 us/op
# Warmup Iteration   4: 1197165.803 us/op
# Warmup Iteration   5: 1190082.740 us/op
Iteration   1: 1185325.348 us/op
Iteration   2: 1195827.094 us/op
Iteration   3: 1192505.842 us/op
Iteration   4: 1187092.721 us/op
Iteration   5: 1190403.165 us/op
Iteration   6: 1196030.139 us/op
Iteration   7: 1194310.851 us/op
Iteration   8: 1187954.326 us/op
Iteration   9: 1191987.397 us/op
Iteration  10: 1192486.837 us/op
Iteration  11: 1190116.646 us/op
Iteration  12: 1204234.468 us/op
Iteration  13: 1199068.600 us/op
Iteration  14: 1185471.268 us/op
Iteration  15: 1183139.017 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 1191730.248 ±(99.9%) 6044.251 us/op

  Histogram, us/op:
    [1180000.000, 1182500.000) = 0 
    [1182500.000, 1185000.000) = 1 
    [1185000.000, 1187500.000) = 3 
    [1187500.000, 1190000.000) = 1 
    [1190000.000, 1192500.000) = 4 
    [1192500.000, 1195000.000) = 2 
    [1195000.000, 1197500.000) = 2 
    [1197500.000, 1200000.000) = 1 
    [1200000.000, 1202500.000) = 0 
    [1202500.000, 1205000.000) = 1 
    [1205000.000, 1207500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1183139.017 us/op
     p(50.0000) = 1191987.397 us/op
     p(90.0000) = 1201134.947 us/op
     p(95.0000) = 1204234.468 us/op
     p(99.0000) = 1204234.468 us/op
     p(99.9000) = 1204234.468 us/op
     p(99.9900) = 1204234.468 us/op
     p(99.9990) = 1204234.468 us/op
     p(99.9999) = 1204234.468 us/op
    p(100.0000) = 1204234.468 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 884028.892 us/op
# Warmup Iteration   2: 910794.267 us/op
# Warmup Iteration   3: 913669.809 us/op
# Warmup Iteration   4: 916600.757 us/op
# Warmup Iteration   5: 920542.783 us/op
Iteration   1: 916915.544 us/op
Iteration   2: 915800.151 us/op
Iteration   3: 927138.968 us/op
Iteration   4: 921926.137 us/op
Iteration   5: 916283.931 us/op
Iteration   6: 922253.233 us/op
Iteration   7: 923774.006 us/op
Iteration   8: 921130.101 us/op
Iteration   9: 927317.027 us/op
Iteration  10: 935249.166 us/op
Iteration  11: 927110.928 us/op
Iteration  12: 922480.233 us/op
Iteration  13: 920415.918 us/op
Iteration  14: 921397.211 us/op
Iteration  15: 921192.314 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 922692.325 ±(99.9%) 5374.579 us/op

  Histogram, us/op:
    [910000.000, 912500.000) = 0 
    [912500.000, 915000.000) = 0 
    [915000.000, 917500.000) = 3 
    [917500.000, 920000.000) = 0 
    [920000.000, 922500.000) = 7 
    [922500.000, 925000.000) = 1 
    [925000.000, 927500.000) = 3 
    [927500.000, 930000.000) = 0 
    [930000.000, 932500.000) = 0 
    [932500.000, 935000.000) = 0 
    [935000.000, 937500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 915800.151 us/op
     p(50.0000) = 921926.137 us/op
     p(90.0000) = 930489.883 us/op
     p(95.0000) = 935249.166 us/op
     p(99.0000) = 935249.166 us/op
     p(99.9000) = 935249.166 us/op
     p(99.9900) = 935249.166 us/op
     p(99.9990) = 935249.166 us/op
     p(99.9999) = 935249.166 us/op
    p(100.0000) = 935249.166 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 796479.656 us/op
# Warmup Iteration   2: 801762.689 us/op
# Warmup Iteration   3: 754163.601 us/op
# Warmup Iteration   4: 706063.081 us/op
# Warmup Iteration   5: 797644.508 us/op
Iteration   1: 803855.953 us/op
Iteration   2: 794840.573 us/op
Iteration   3: 797219.851 us/op
Iteration   4: 800571.212 us/op
Iteration   5: 801164.687 us/op
Iteration   6: 796810.145 us/op
Iteration   7: 798504.301 us/op
Iteration   8: 799433.856 us/op
Iteration   9: 803116.754 us/op
Iteration  10: 796073.518 us/op
Iteration  11: 797737.533 us/op
Iteration  12: 799597.209 us/op
Iteration  13: 793791.956 us/op
Iteration  14: 798979.236 us/op
Iteration  15: 799024.572 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 798714.757 ±(99.9%) 2993.926 us/op

  Histogram, us/op:
    [790000.000, 791250.000) = 0 
    [791250.000, 792500.000) = 0 
    [792500.000, 793750.000) = 0 
    [793750.000, 795000.000) = 2 
    [795000.000, 796250.000) = 1 
    [796250.000, 797500.000) = 2 
    [797500.000, 798750.000) = 2 
    [798750.000, 800000.000) = 4 
    [800000.000, 801250.000) = 2 
    [801250.000, 802500.000) = 0 
    [802500.000, 803750.000) = 1 
    [803750.000, 805000.000) = 1 
    [805000.000, 806250.000) = 0 
    [806250.000, 807500.000) = 0 
    [807500.000, 808750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 793791.956 us/op
     p(50.0000) = 798979.236 us/op
     p(90.0000) = 803412.434 us/op
     p(95.0000) = 803855.953 us/op
     p(99.0000) = 803855.953 us/op
     p(99.9000) = 803855.953 us/op
     p(99.9900) = 803855.953 us/op
     p(99.9990) = 803855.953 us/op
     p(99.9999) = 803855.953 us/op
    p(100.0000) = 803855.953 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 782940.604 us/op
# Warmup Iteration   2: 787328.759 us/op
# Warmup Iteration   3: 785520.287 us/op
# Warmup Iteration   4: 794664.649 us/op
# Warmup Iteration   5: 789764.121 us/op
Iteration   1: 782782.057 us/op
Iteration   2: 788031.212 us/op
Iteration   3: 785609.493 us/op
Iteration   4: 793788.159 us/op
Iteration   5: 792814.150 us/op
Iteration   6: 780626.572 us/op
Iteration   7: 779842.551 us/op
Iteration   8: 782413.953 us/op
Iteration   9: 786531.707 us/op
Iteration  10: 786182.239 us/op
Iteration  11: 784327.340 us/op
Iteration  12: 778786.165 us/op
Iteration  13: 776945.940 us/op
Iteration  14: 781272.217 us/op
Iteration  15: 788593.358 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 784569.808 ±(99.9%) 5244.269 us/op

  Histogram, us/op:
    [770000.000, 772500.000) = 0 
    [772500.000, 775000.000) = 0 
    [775000.000, 777500.000) = 1 
    [777500.000, 780000.000) = 2 
    [780000.000, 782500.000) = 3 
    [782500.000, 785000.000) = 2 
    [785000.000, 787500.000) = 3 
    [787500.000, 790000.000) = 2 
    [790000.000, 792500.000) = 0 
    [792500.000, 795000.000) = 2 
    [795000.000, 797500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 776945.940 us/op
     p(50.0000) = 784327.340 us/op
     p(90.0000) = 793203.754 us/op
     p(95.0000) = 793788.159 us/op
     p(99.0000) = 793788.159 us/op
     p(99.9000) = 793788.159 us/op
     p(99.9900) = 793788.159 us/op
     p(99.9990) = 793788.159 us/op
     p(99.9999) = 793788.159 us/op
    p(100.0000) = 793788.159 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 863077.847 us/op
# Warmup Iteration   2: 778380.286 us/op
# Warmup Iteration   3: 776462.562 us/op
# Warmup Iteration   4: 776170.085 us/op
# Warmup Iteration   5: 778716.398 us/op
Iteration   1: 780125.400 us/op
Iteration   2: 778799.467 us/op
Iteration   3: 780444.028 us/op
Iteration   4: 773748.646 us/op
Iteration   5: 772173.378 us/op
Iteration   6: 776627.771 us/op
Iteration   7: 774583.840 us/op
Iteration   8: 777319.511 us/op
Iteration   9: 781013.299 us/op
Iteration  10: 772528.687 us/op
Iteration  11: 776597.258 us/op
Iteration  12: 776286.079 us/op
Iteration  13: 776149.907 us/op
Iteration  14: 774310.425 us/op
Iteration  15: 770659.848 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 776091.170 ±(99.9%) 3348.507 us/op

  Histogram, us/op:
    [770000.000, 771250.000) = 1 
    [771250.000, 772500.000) = 1 
    [772500.000, 773750.000) = 2 
    [773750.000, 775000.000) = 2 
    [775000.000, 776250.000) = 1 
    [776250.000, 777500.000) = 4 
    [777500.000, 778750.000) = 0 
    [778750.000, 780000.000) = 1 
    [780000.000, 781250.000) = 3 
    [781250.000, 782500.000) = 0 
    [782500.000, 783750.000) = 0 
    [783750.000, 785000.000) = 0 
    [785000.000, 786250.000) = 0 
    [786250.000, 787500.000) = 0 
    [787500.000, 788750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 770659.848 us/op
     p(50.0000) = 776286.079 us/op
     p(90.0000) = 780671.736 us/op
     p(95.0000) = 781013.299 us/op
     p(99.0000) = 781013.299 us/op
     p(99.9000) = 781013.299 us/op
     p(99.9900) = 781013.299 us/op
     p(99.9990) = 781013.299 us/op
     p(99.9999) = 781013.299 us/op
    p(100.0000) = 781013.299 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 911683.708 us/op
# Warmup Iteration   2: 911258.346 us/op
# Warmup Iteration   3: 919781.331 us/op
# Warmup Iteration   4: 907506.708 us/op
# Warmup Iteration   5: 916294.345 us/op
Iteration   1: 912262.531 us/op
Iteration   2: 911586.730 us/op
Iteration   3: 911956.408 us/op
Iteration   4: 909887.661 us/op
Iteration   5: 910904.853 us/op
Iteration   6: 913036.249 us/op
Iteration   7: 916283.633 us/op
Iteration   8: 912168.344 us/op
Iteration   9: 930781.550 us/op
Iteration  10: 925968.264 us/op
Iteration  11: 910189.488 us/op
Iteration  12: 913759.922 us/op
Iteration  13: 909990.441 us/op
Iteration  14: 915719.812 us/op
Iteration  15: 908740.190 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 914215.738 ±(99.9%) 6605.278 us/op

  Histogram, us/op:
    [900000.000, 902500.000) = 0 
    [902500.000, 905000.000) = 0 
    [905000.000, 907500.000) = 0 
    [907500.000, 910000.000) = 3 
    [910000.000, 912500.000) = 6 
    [912500.000, 915000.000) = 2 
    [915000.000, 917500.000) = 2 
    [917500.000, 920000.000) = 0 
    [920000.000, 922500.000) = 0 
    [922500.000, 925000.000) = 0 
    [925000.000, 927500.000) = 1 
    [927500.000, 930000.000) = 0 
    [930000.000, 932500.000) = 1 
    [932500.000, 935000.000) = 0 
    [935000.000, 937500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 908740.190 us/op
     p(50.0000) = 912168.344 us/op
     p(90.0000) = 927893.578 us/op
     p(95.0000) = 930781.550 us/op
     p(99.0000) = 930781.550 us/op
     p(99.9000) = 930781.550 us/op
     p(99.9900) = 930781.550 us/op
     p(99.9990) = 930781.550 us/op
     p(99.9999) = 930781.550 us/op
    p(100.0000) = 930781.550 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4965.642 us/op
# Warmup Iteration   2: 2708.967 us/op
# Warmup Iteration   3: 640.767 us/op
# Warmup Iteration   4: 489.441 us/op
# Warmup Iteration   5: 434.085 us/op
Iteration   1: 419.741 us/op
Iteration   2: 415.853 us/op
Iteration   3: 487.356 us/op
Iteration   4: 410.354 us/op
Iteration   5: 395.373 us/op
Iteration   6: 399.637 us/op
Iteration   7: 452.701 us/op
Iteration   8: 407.681 us/op
Iteration   9: 410.121 us/op
Iteration  10: 425.389 us/op
Iteration  11: 414.572 us/op
Iteration  12: 435.845 us/op
Iteration  13: 477.422 us/op
Iteration  14: 418.719 us/op
Iteration  15: 458.651 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  N = 15
  mean =    428.628 ±(99.9%) 29.929 us/op

  Histogram, us/op:
    [390.000, 400.000) = 2 
    [400.000, 410.000) = 1 
    [410.000, 420.000) = 6 
    [420.000, 430.000) = 1 
    [430.000, 440.000) = 1 
    [440.000, 450.000) = 0 
    [450.000, 460.000) = 2 
    [460.000, 470.000) = 0 
    [470.000, 480.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    395.373 us/op
     p(50.0000) =    418.719 us/op
     p(90.0000) =    481.396 us/op
     p(95.0000) =    487.356 us/op
     p(99.0000) =    487.356 us/op
     p(99.9000) =    487.356 us/op
     p(99.9900) =    487.356 us/op
     p(99.9990) =    487.356 us/op
     p(99.9999) =    487.356 us/op
    p(100.0000) =    487.356 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4762.702 us/op
# Warmup Iteration   2: 413.533 us/op
# Warmup Iteration   3: 241.301 us/op
# Warmup Iteration   4: 285.618 us/op
# Warmup Iteration   5: 232.800 us/op
Iteration   1: 257.622 us/op
Iteration   2: 202.968 us/op
Iteration   3: 246.403 us/op
Iteration   4: 231.797 us/op
Iteration   5: 246.640 us/op
Iteration   6: 238.750 us/op
Iteration   7: 266.300 us/op
Iteration   8: 204.850 us/op
Iteration   9: 238.644 us/op
Iteration  10: 260.467 us/op
Iteration  11: 237.887 us/op
Iteration  12: 275.094 us/op
Iteration  13: 239.498 us/op
Iteration  14: 248.276 us/op
Iteration  15: 221.383 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  N = 15
  mean =    241.105 ±(99.9%) 21.791 us/op

  Histogram, us/op:
    [200.000, 205.000) = 2 
    [205.000, 210.000) = 0 
    [210.000, 215.000) = 0 
    [215.000, 220.000) = 0 
    [220.000, 225.000) = 1 
    [225.000, 230.000) = 0 
    [230.000, 235.000) = 1 
    [235.000, 240.000) = 4 
    [240.000, 245.000) = 0 
    [245.000, 250.000) = 3 
    [250.000, 255.000) = 0 
    [255.000, 260.000) = 1 
    [260.000, 265.000) = 1 
    [265.000, 270.000) = 1 
    [270.000, 275.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    202.968 us/op
     p(50.0000) =    239.498 us/op
     p(90.0000) =    269.818 us/op
     p(95.0000) =    275.094 us/op
     p(99.0000) =    275.094 us/op
     p(99.9000) =    275.094 us/op
     p(99.9900) =    275.094 us/op
     p(99.9990) =    275.094 us/op
     p(99.9999) =    275.094 us/op
    p(100.0000) =    275.094 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5715.656 us/op
# Warmup Iteration   2: 2381.721 us/op
# Warmup Iteration   3: 294.629 us/op
# Warmup Iteration   4: 291.467 us/op
# Warmup Iteration   5: 292.070 us/op
Iteration   1: 291.343 us/op
Iteration   2: 291.712 us/op
Iteration   3: 300.181 us/op
Iteration   4: 290.523 us/op
Iteration   5: 302.619 us/op
Iteration   6: 290.825 us/op
Iteration   7: 294.351 us/op
Iteration   8: 291.552 us/op
Iteration   9: 290.494 us/op
Iteration  10: 307.173 us/op
Iteration  11: 291.128 us/op
Iteration  12: 291.200 us/op
Iteration  13: 291.094 us/op
Iteration  14: 294.877 us/op
Iteration  15: 295.464 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  N = 15
  mean =    294.302 ±(99.9%) 5.458 us/op

  Histogram, us/op:
    [290.000, 291.250) = 6 
    [291.250, 292.500) = 3 
    [292.500, 293.750) = 0 
    [293.750, 295.000) = 2 
    [295.000, 296.250) = 1 
    [296.250, 297.500) = 0 
    [297.500, 298.750) = 0 
    [298.750, 300.000) = 0 
    [300.000, 301.250) = 1 
    [301.250, 302.500) = 0 
    [302.500, 303.750) = 1 
    [303.750, 305.000) = 0 
    [305.000, 306.250) = 0 
    [306.250, 307.500) = 1 
    [307.500, 308.750) = 0 

  Percentiles, us/op:
      p(0.0000) =    290.494 us/op
     p(50.0000) =    291.552 us/op
     p(90.0000) =    304.441 us/op
     p(95.0000) =    307.173 us/op
     p(99.0000) =    307.173 us/op
     p(99.9000) =    307.173 us/op
     p(99.9900) =    307.173 us/op
     p(99.9990) =    307.173 us/op
     p(99.9999) =    307.173 us/op
    p(100.0000) =    307.173 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4197.139 us/op
# Warmup Iteration   2: 483.237 us/op
# Warmup Iteration   3: 272.351 us/op
# Warmup Iteration   4: 272.809 us/op
# Warmup Iteration   5: 309.656 us/op
Iteration   1: 260.079 us/op
Iteration   2: 304.378 us/op
Iteration   3: 232.291 us/op
Iteration   4: 244.728 us/op
Iteration   5: 299.063 us/op
Iteration   6: 286.634 us/op
Iteration   7: 299.359 us/op
Iteration   8: 279.443 us/op
Iteration   9: 263.674 us/op
Iteration  10: 287.136 us/op
Iteration  11: 287.921 us/op
Iteration  12: 298.706 us/op
Iteration  13: 306.962 us/op
Iteration  14: 245.881 us/op
Iteration  15: 391.384 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  N = 15
  mean =    285.843 ±(99.9%) 40.214 us/op

  Histogram, us/op:
    [200.000, 212.500) = 0 
    [212.500, 225.000) = 0 
    [225.000, 237.500) = 1 
    [237.500, 250.000) = 2 
    [250.000, 262.500) = 1 
    [262.500, 275.000) = 1 
    [275.000, 287.500) = 3 
    [287.500, 300.000) = 4 
    [300.000, 312.500) = 2 
    [312.500, 325.000) = 0 
    [325.000, 337.500) = 0 
    [337.500, 350.000) = 0 
    [350.000, 362.500) = 0 
    [362.500, 375.000) = 0 
    [375.000, 387.500) = 0 

  Percentiles, us/op:
      p(0.0000) =    232.291 us/op
     p(50.0000) =    287.136 us/op
     p(90.0000) =    340.731 us/op
     p(95.0000) =    391.384 us/op
     p(99.0000) =    391.384 us/op
     p(99.9000) =    391.384 us/op
     p(99.9900) =    391.384 us/op
     p(99.9990) =    391.384 us/op
     p(99.9999) =    391.384 us/op
    p(100.0000) =    391.384 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1401178.386 us/op
# Warmup Iteration   2: 1139851.869 us/op
# Warmup Iteration   3: 1053453.841 us/op
# Warmup Iteration   4: 1050894.706 us/op
# Warmup Iteration   5: 1052697.470 us/op
Iteration   1: 1046069.806 us/op
Iteration   2: 1348381.680 us/op
Iteration   3: 1130536.920 us/op
Iteration   4: 1045542.702 us/op
Iteration   5: 1047146.687 us/op
Iteration   6: 1225434.906 us/op
Iteration   7: 1136501.944 us/op
Iteration   8: 1047806.410 us/op
Iteration   9: 1045458.474 us/op
Iteration  10: 1042569.669 us/op
Iteration  11: 1048863.791 us/op
Iteration  12: 1045330.649 us/op
Iteration  13: 1041594.356 us/op
Iteration  14: 1051886.010 us/op
Iteration  15: 1047387.456 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  N = 15
  mean = 1090034.097 ±(99.9%) 94747.071 us/op

  Histogram, us/op:
    [1000000.000, 1025000.000) = 0 
    [1025000.000, 1050000.000) = 10 
    [1050000.000, 1075000.000) = 1 
    [1075000.000, 1100000.000) = 0 
    [1100000.000, 1125000.000) = 0 
    [1125000.000, 1150000.000) = 2 
    [1150000.000, 1175000.000) = 0 
    [1175000.000, 1200000.000) = 0 
    [1200000.000, 1225000.000) = 0 
    [1225000.000, 1250000.000) = 1 
    [1250000.000, 1275000.000) = 0 
    [1275000.000, 1300000.000) = 0 
    [1300000.000, 1325000.000) = 0 
    [1325000.000, 1350000.000) = 1 
    [1350000.000, 1375000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1041594.356 us/op
     p(50.0000) = 1047387.456 us/op
     p(90.0000) = 1274613.616 us/op
     p(95.0000) = 1348381.680 us/op
     p(99.0000) = 1348381.680 us/op
     p(99.9000) = 1348381.680 us/op
     p(99.9900) = 1348381.680 us/op
     p(99.9990) = 1348381.680 us/op
     p(99.9999) = 1348381.680 us/op
    p(100.0000) = 1348381.680 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 172363.838 us/op
# Warmup Iteration   2: 154190.816 us/op
# Warmup Iteration   3: 149036.971 us/op
# Warmup Iteration   4: 147191.736 us/op
# Warmup Iteration   5: 149740.332 us/op
Iteration   1: 148929.204 us/op
Iteration   2: 148525.687 us/op
Iteration   3: 147475.888 us/op
Iteration   4: 149024.686 us/op
Iteration   5: 149754.924 us/op
Iteration   6: 147046.283 us/op
Iteration   7: 146622.510 us/op
Iteration   8: 150409.980 us/op
Iteration   9: 147981.180 us/op
Iteration  10: 149180.696 us/op
Iteration  11: 146905.856 us/op
Iteration  12: 146670.854 us/op
Iteration  13: 149749.549 us/op
Iteration  14: 146813.925 us/op
Iteration  15: 148906.947 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 15
  mean = 148266.545 ±(99.9%) 1362.550 us/op

  Histogram, us/op:
    [146000.000, 146500.000) = 0 
    [146500.000, 147000.000) = 4 
    [147000.000, 147500.000) = 2 
    [147500.000, 148000.000) = 1 
    [148000.000, 148500.000) = 0 
    [148500.000, 149000.000) = 3 
    [149000.000, 149500.000) = 2 
    [149500.000, 150000.000) = 2 
    [150000.000, 150500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 146622.510 us/op
     p(50.0000) = 148525.687 us/op
     p(90.0000) = 150016.946 us/op
     p(95.0000) = 150409.980 us/op
     p(99.0000) = 150409.980 us/op
     p(99.9000) = 150409.980 us/op
     p(99.9900) = 150409.980 us/op
     p(99.9990) = 150409.980 us/op
     p(99.9999) = 150409.980 us/op
    p(100.0000) = 150409.980 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6737644.003 us/op
# Warmup Iteration   2: 2644954.791 us/op
# Warmup Iteration   3: 2693512.194 us/op
# Warmup Iteration   4: 2689966.112 us/op
# Warmup Iteration   5: 2673825.358 us/op
Iteration   1: 2668679.618 us/op
Iteration   2: 2681645.225 us/op
Iteration   3: 2765380.522 us/op
Iteration   4: 2689925.702 us/op
Iteration   5: 2700499.858 us/op
Iteration   6: 2669743.604 us/op
Iteration   7: 2714503.080 us/op
Iteration   8: 2664050.364 us/op
Iteration   9: 2638972.869 us/op
Iteration  10: 2670278.327 us/op
Iteration  11: 2686970.528 us/op
Iteration  12: 2693428.670 us/op
Iteration  13: 2695648.745 us/op
Iteration  14: 2694279.340 us/op
Iteration  15: 2666952.786 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 15
  mean = 2686730.616 ±(99.9%) 30554.049 us/op

  Histogram, us/op:
    [2600000.000, 2612500.000) = 0 
    [2612500.000, 2625000.000) = 0 
    [2625000.000, 2637500.000) = 0 
    [2637500.000, 2650000.000) = 1 
    [2650000.000, 2662500.000) = 0 
    [2662500.000, 2675000.000) = 5 
    [2675000.000, 2687500.000) = 2 
    [2687500.000, 2700000.000) = 4 
    [2700000.000, 2712500.000) = 1 
    [2712500.000, 2725000.000) = 1 
    [2725000.000, 2737500.000) = 0 
    [2737500.000, 2750000.000) = 0 
    [2750000.000, 2762500.000) = 0 
    [2762500.000, 2775000.000) = 1 
    [2775000.000, 2787500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 2638972.869 us/op
     p(50.0000) = 2686970.528 us/op
     p(90.0000) = 2734854.057 us/op
     p(95.0000) = 2765380.522 us/op
     p(99.0000) = 2765380.522 us/op
     p(99.9000) = 2765380.522 us/op
     p(99.9900) = 2765380.522 us/op
     p(99.9990) = 2765380.522 us/op
     p(99.9999) = 2765380.522 us/op
    p(100.0000) = 2765380.522 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 124.944 us/op
# Warmup Iteration   2: 23.400 us/op
# Warmup Iteration   3: 14.397 us/op
# Warmup Iteration   4: 13.622 us/op
# Warmup Iteration   5: 13.443 us/op
Iteration   1: 15.593 us/op
Iteration   2: 14.461 us/op
Iteration   3: 14.170 us/op
Iteration   4: 12.278 us/op
Iteration   5: 14.032 us/op
Iteration   6: 16.296 us/op
Iteration   7: 15.865 us/op
Iteration   8: 13.928 us/op
Iteration   9: 13.504 us/op
Iteration  10: 15.545 us/op
Iteration  11: 12.828 us/op
Iteration  12: 12.859 us/op
Iteration  13: 12.832 us/op
Iteration  14: 11.543 us/op
Iteration  15: 12.660 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     13.893 ±(99.9%) 1.534 us/op

  Histogram, us/op:
    [11.000, 11.500) = 0 
    [11.500, 12.000) = 1 
    [12.000, 12.500) = 1 
    [12.500, 13.000) = 4 
    [13.000, 13.500) = 0 
    [13.500, 14.000) = 2 
    [14.000, 14.500) = 3 
    [14.500, 15.000) = 0 
    [15.000, 15.500) = 0 
    [15.500, 16.000) = 3 
    [16.000, 16.500) = 1 

  Percentiles, us/op:
      p(0.0000) =     11.543 us/op
     p(50.0000) =     13.928 us/op
     p(90.0000) =     16.037 us/op
     p(95.0000) =     16.296 us/op
     p(99.0000) =     16.296 us/op
     p(99.9000) =     16.296 us/op
     p(99.9900) =     16.296 us/op
     p(99.9990) =     16.296 us/op
     p(99.9999) =     16.296 us/op
    p(100.0000) =     16.296 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 234.934 us/op
# Warmup Iteration   2: 32.689 us/op
# Warmup Iteration   3: 22.702 us/op
# Warmup Iteration   4: 30.849 us/op
# Warmup Iteration   5: 23.539 us/op
Iteration   1: 92.210 us/op
Iteration   2: 69.032 us/op
Iteration   3: 12.457 us/op
Iteration   4: 13.554 us/op
Iteration   5: 12.639 us/op
Iteration   6: 10.566 us/op
Iteration   7: 14.511 us/op
Iteration   8: 12.707 us/op
Iteration   9: 9.362 us/op
Iteration  10: 14.419 us/op
Iteration  11: 12.344 us/op
Iteration  12: 14.176 us/op
Iteration  13: 12.449 us/op
Iteration  14: 14.750 us/op
Iteration  15: 14.235 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     21.961 ±(99.9%) 25.937 us/op

  Histogram, us/op:
    [  0.000,  10.000) = 1 
    [ 10.000,  20.000) = 12 
    [ 20.000,  30.000) = 0 
    [ 30.000,  40.000) = 0 
    [ 40.000,  50.000) = 0 
    [ 50.000,  60.000) = 0 
    [ 60.000,  70.000) = 1 
    [ 70.000,  80.000) = 0 
    [ 80.000,  90.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      9.362 us/op
     p(50.0000) =     13.554 us/op
     p(90.0000) =     78.303 us/op
     p(95.0000) =     92.210 us/op
     p(99.0000) =     92.210 us/op
     p(99.9000) =     92.210 us/op
     p(99.9900) =     92.210 us/op
     p(99.9990) =     92.210 us/op
     p(99.9999) =     92.210 us/op
    p(100.0000) =     92.210 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 334.586 us/op
# Warmup Iteration   2: 39.442 us/op
# Warmup Iteration   3: 33.381 us/op
# Warmup Iteration   4: 64.088 us/op
# Warmup Iteration   5: 28.648 us/op
Iteration   1: 20.415 us/op
Iteration   2: 20.490 us/op
Iteration   3: 21.160 us/op
Iteration   4: 20.445 us/op
Iteration   5: 24.430 us/op
Iteration   6: 20.680 us/op
Iteration   7: 19.925 us/op
Iteration   8: 20.066 us/op
Iteration   9: 19.533 us/op
Iteration  10: 19.922 us/op
Iteration  11: 20.839 us/op
Iteration  12: 23.380 us/op
Iteration  13: 21.060 us/op
Iteration  14: 21.217 us/op
Iteration  15: 22.535 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     21.073 ±(99.9%) 1.461 us/op

  Histogram, us/op:
    [19.000, 19.500) = 0 
    [19.500, 20.000) = 3 
    [20.000, 20.500) = 4 
    [20.500, 21.000) = 2 
    [21.000, 21.500) = 3 
    [21.500, 22.000) = 0 
    [22.000, 22.500) = 0 
    [22.500, 23.000) = 1 
    [23.000, 23.500) = 1 
    [23.500, 24.000) = 0 
    [24.000, 24.500) = 1 

  Percentiles, us/op:
      p(0.0000) =     19.533 us/op
     p(50.0000) =     20.680 us/op
     p(90.0000) =     23.800 us/op
     p(95.0000) =     24.430 us/op
     p(99.0000) =     24.430 us/op
     p(99.9000) =     24.430 us/op
     p(99.9900) =     24.430 us/op
     p(99.9990) =     24.430 us/op
     p(99.9999) =     24.430 us/op
    p(100.0000) =     24.430 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 294.320 us/op
# Warmup Iteration   2: 6.690 us/op
# Warmup Iteration   3: 7.596 us/op
# Warmup Iteration   4: 6.948 us/op
# Warmup Iteration   5: 11.210 us/op
Iteration   1: 10.359 us/op
Iteration   2: 10.146 us/op
Iteration   3: 8.292 us/op
Iteration   4: 9.456 us/op
Iteration   5: 7.323 us/op
Iteration   6: 8.446 us/op
Iteration   7: 7.148 us/op
Iteration   8: 35.795 us/op
Iteration   9: 6.916 us/op
Iteration  10: 6.631 us/op
Iteration  11: 5.920 us/op
Iteration  12: 6.979 us/op
Iteration  13: 6.216 us/op
Iteration  14: 7.102 us/op
Iteration  15: 7.287 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =      9.601 ±(99.9%) 7.881 us/op

  Histogram, us/op:
    [ 0.000,  2.500) = 0 
    [ 2.500,  5.000) = 0 
    [ 5.000,  7.500) = 9 
    [ 7.500, 10.000) = 3 
    [10.000, 12.500) = 2 
    [12.500, 15.000) = 0 
    [15.000, 17.500) = 0 
    [17.500, 20.000) = 0 
    [20.000, 22.500) = 0 
    [22.500, 25.000) = 0 
    [25.000, 27.500) = 0 
    [27.500, 30.000) = 0 
    [30.000, 32.500) = 0 
    [32.500, 35.000) = 0 
    [35.000, 37.500) = 1 

  Percentiles, us/op:
      p(0.0000) =      5.920 us/op
     p(50.0000) =      7.287 us/op
     p(90.0000) =     20.533 us/op
     p(95.0000) =     35.795 us/op
     p(99.0000) =     35.795 us/op
     p(99.9000) =     35.795 us/op
     p(99.9900) =     35.795 us/op
     p(99.9990) =     35.795 us/op
     p(99.9999) =     35.795 us/op
    p(100.0000) =     35.795 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 267.969 us/op
# Warmup Iteration   2: 46.247 us/op
# Warmup Iteration   3: 41.649 us/op
# Warmup Iteration   4: 45.320 us/op
# Warmup Iteration   5: 17.911 us/op
Iteration   1: 16.040 us/op
Iteration   2: 16.219 us/op
Iteration   3: 15.950 us/op
Iteration   4: 69.362 us/op
Iteration   5: 15.458 us/op
Iteration   6: 16.855 us/op
Iteration   7: 15.437 us/op
Iteration   8: 16.713 us/op
Iteration   9: 16.113 us/op
Iteration  10: 18.093 us/op
Iteration  11: 14.727 us/op
Iteration  12: 16.300 us/op
Iteration  13: 15.814 us/op
Iteration  14: 15.140 us/op
Iteration  15: 15.179 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =     19.560 ±(99.9%) 14.755 us/op

  Histogram, us/op:
    [10.000, 15.000) = 1 
    [15.000, 20.000) = 13 
    [20.000, 25.000) = 0 
    [25.000, 30.000) = 0 
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 0 
    [40.000, 45.000) = 0 
    [45.000, 50.000) = 0 
    [50.000, 55.000) = 0 
    [55.000, 60.000) = 0 
    [60.000, 65.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     14.727 us/op
     p(50.0000) =     16.040 us/op
     p(90.0000) =     38.601 us/op
     p(95.0000) =     69.362 us/op
     p(99.0000) =     69.362 us/op
     p(99.9000) =     69.362 us/op
     p(99.9900) =     69.362 us/op
     p(99.9990) =     69.362 us/op
     p(99.9999) =     69.362 us/op
    p(100.0000) =     69.362 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 541.205 us/op
# Warmup Iteration   2: 134.665 us/op
# Warmup Iteration   3: 124.919 us/op
# Warmup Iteration   4: 124.886 us/op
# Warmup Iteration   5: 145.438 us/op
Iteration   1: 125.105 us/op
Iteration   2: 99.294 us/op
Iteration   3: 102.913 us/op
Iteration   4: 145.145 us/op
Iteration   5: 90.516 us/op
Iteration   6: 90.002 us/op
Iteration   7: 87.398 us/op
Iteration   8: 88.283 us/op
Iteration   9: 132.193 us/op
Iteration  10: 88.130 us/op
Iteration  11: 138.755 us/op
Iteration  12: 90.293 us/op
Iteration  13: 88.447 us/op
Iteration  14: 86.250 us/op
Iteration  15: 86.838 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =    102.637 ±(99.9%) 22.729 us/op

  Histogram, us/op:
    [ 80.000,  85.000) = 0 
    [ 85.000,  90.000) = 6 
    [ 90.000,  95.000) = 3 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 1 
    [105.000, 110.000) = 0 
    [110.000, 115.000) = 0 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 1 
    [130.000, 135.000) = 1 
    [135.000, 140.000) = 1 
    [140.000, 145.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     86.250 us/op
     p(50.0000) =     90.293 us/op
     p(90.0000) =    141.311 us/op
     p(95.0000) =    145.145 us/op
     p(99.0000) =    145.145 us/op
     p(99.9000) =    145.145 us/op
     p(99.9900) =    145.145 us/op
     p(99.9990) =    145.145 us/op
     p(99.9999) =    145.145 us/op
    p(100.0000) =    145.145 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 287.376 us/op
# Warmup Iteration   2: 7.020 us/op
# Warmup Iteration   3: 6.372 us/op
# Warmup Iteration   4: 7.011 us/op
# Warmup Iteration   5: 7.609 us/op
Iteration   1: 7.053 us/op
Iteration   2: 6.896 us/op
Iteration   3: 6.988 us/op
Iteration   4: 7.186 us/op
Iteration   5: 7.089 us/op
Iteration   6: 7.662 us/op
Iteration   7: 7.426 us/op
Iteration   8: 7.996 us/op
Iteration   9: 6.598 us/op
Iteration  10: 6.846 us/op
Iteration  11: 6.698 us/op
Iteration  12: 7.499 us/op
Iteration  13: 7.091 us/op
Iteration  14: 8.079 us/op
Iteration  15: 7.304 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =      7.227 ±(99.9%) 0.468 us/op

  Histogram, us/op:
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 2 
    [6.750, 7.000) = 3 
    [7.000, 7.250) = 4 
    [7.250, 7.500) = 3 
    [7.500, 7.750) = 1 
    [7.750, 8.000) = 1 
    [8.000, 8.250) = 1 
    [8.250, 8.500) = 0 
    [8.500, 8.750) = 0 

  Percentiles, us/op:
      p(0.0000) =      6.598 us/op
     p(50.0000) =      7.091 us/op
     p(90.0000) =      8.029 us/op
     p(95.0000) =      8.079 us/op
     p(99.0000) =      8.079 us/op
     p(99.9000) =      8.079 us/op
     p(99.9900) =      8.079 us/op
     p(99.9990) =      8.079 us/op
     p(99.9999) =      8.079 us/op
    p(100.0000) =      8.079 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 254.792 us/op
# Warmup Iteration   2: 25.424 us/op
# Warmup Iteration   3: 34.264 us/op
# Warmup Iteration   4: 31.565 us/op
# Warmup Iteration   5: 17.157 us/op
Iteration   1: 15.826 us/op
Iteration   2: 15.377 us/op
Iteration   3: 16.826 us/op
Iteration   4: 15.371 us/op
Iteration   5: 14.909 us/op
Iteration   6: 17.772 us/op
Iteration   7: 15.409 us/op
Iteration   8: 16.002 us/op
Iteration   9: 15.636 us/op
Iteration  10: 17.460 us/op
Iteration  11: 14.655 us/op
Iteration  12: 16.236 us/op
Iteration  13: 21.787 us/op
Iteration  14: 16.008 us/op
Iteration  15: 16.455 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =     16.382 ±(99.9%) 1.848 us/op

  Histogram, us/op:
    [14.000, 14.500) = 0 
    [14.500, 15.000) = 2 
    [15.000, 15.500) = 3 
    [15.500, 16.000) = 2 
    [16.000, 16.500) = 4 
    [16.500, 17.000) = 1 
    [17.000, 17.500) = 1 
    [17.500, 18.000) = 1 
    [18.000, 18.500) = 0 
    [18.500, 19.000) = 0 
    [19.000, 19.500) = 0 
    [19.500, 20.000) = 0 
    [20.000, 20.500) = 0 
    [20.500, 21.000) = 0 
    [21.000, 21.500) = 0 

  Percentiles, us/op:
      p(0.0000) =     14.655 us/op
     p(50.0000) =     16.002 us/op
     p(90.0000) =     19.378 us/op
     p(95.0000) =     21.787 us/op
     p(99.0000) =     21.787 us/op
     p(99.9000) =     21.787 us/op
     p(99.9900) =     21.787 us/op
     p(99.9990) =     21.787 us/op
     p(99.9999) =     21.787 us/op
    p(100.0000) =     21.787 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 531.840 us/op
# Warmup Iteration   2: 148.284 us/op
# Warmup Iteration   3: 116.671 us/op
# Warmup Iteration   4: 127.663 us/op
# Warmup Iteration   5: 162.933 us/op
Iteration   1: 114.730 us/op
Iteration   2: 105.899 us/op
Iteration   3: 92.666 us/op
Iteration   4: 103.125 us/op
Iteration   5: 91.628 us/op
Iteration   6: 87.295 us/op
Iteration   7: 97.608 us/op
Iteration   8: 87.469 us/op
Iteration   9: 136.314 us/op
Iteration  10: 86.836 us/op
Iteration  11: 89.149 us/op
Iteration  12: 86.844 us/op
Iteration  13: 88.407 us/op
Iteration  14: 89.319 us/op
Iteration  15: 87.261 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =     96.303 ±(99.9%) 14.841 us/op

  Histogram, us/op:
    [ 80.000,  85.000) = 0 
    [ 85.000,  90.000) = 8 
    [ 90.000,  95.000) = 2 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 1 
    [105.000, 110.000) = 1 
    [110.000, 115.000) = 1 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     86.836 us/op
     p(50.0000) =     89.319 us/op
     p(90.0000) =    123.364 us/op
     p(95.0000) =    136.314 us/op
     p(99.0000) =    136.314 us/op
     p(99.9000) =    136.314 us/op
     p(99.9900) =    136.314 us/op
     p(99.9990) =    136.314 us/op
     p(99.9999) =    136.314 us/op
    p(100.0000) =    136.314 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 29017.045 us/op
# Warmup Iteration   2: 17730.844 us/op
# Warmup Iteration   3: 14888.337 us/op
# Warmup Iteration   4: 14633.061 us/op
# Warmup Iteration   5: 14798.233 us/op
Iteration   1: 15120.787 us/op
Iteration   2: 14794.895 us/op
Iteration   3: 14857.368 us/op
Iteration   4: 14481.660 us/op
Iteration   5: 14661.605 us/op
Iteration   6: 14626.953 us/op
Iteration   7: 14505.435 us/op
Iteration   8: 14557.598 us/op
Iteration   9: 14612.806 us/op
Iteration  10: 14361.461 us/op
Iteration  11: 14389.369 us/op
Iteration  12: 14424.157 us/op
Iteration  13: 14359.746 us/op
Iteration  14: 14392.486 us/op
Iteration  15: 14368.789 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  N = 15
  mean =  14567.674 ±(99.9%) 234.851 us/op

  Histogram, us/op:
    [14300.000, 14350.000) = 0 
    [14350.000, 14400.000) = 5 
    [14400.000, 14450.000) = 1 
    [14450.000, 14500.000) = 1 
    [14500.000, 14550.000) = 1 
    [14550.000, 14600.000) = 1 
    [14600.000, 14650.000) = 2 
    [14650.000, 14700.000) = 1 
    [14700.000, 14750.000) = 0 
    [14750.000, 14800.000) = 1 
    [14800.000, 14850.000) = 0 
    [14850.000, 14900.000) = 1 
    [14900.000, 14950.000) = 0 
    [14950.000, 15000.000) = 0 
    [15000.000, 15050.000) = 0 
    [15050.000, 15100.000) = 0 
    [15100.000, 15150.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  14359.746 us/op
     p(50.0000) =  14505.435 us/op
     p(90.0000) =  14962.736 us/op
     p(95.0000) =  15120.787 us/op
     p(99.0000) =  15120.787 us/op
     p(99.9000) =  15120.787 us/op
     p(99.9900) =  15120.787 us/op
     p(99.9990) =  15120.787 us/op
     p(99.9999) =  15120.787 us/op
    p(100.0000) =  15120.787 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 14409.768 us/op
# Warmup Iteration   2: 2805.565 us/op
# Warmup Iteration   3: 2847.601 us/op
# Warmup Iteration   4: 2766.808 us/op
# Warmup Iteration   5: 2885.129 us/op
Iteration   1: 2834.789 us/op
Iteration   2: 1920.359 us/op
Iteration   3: 1866.560 us/op
Iteration   4: 1839.327 us/op
Iteration   5: 1865.255 us/op
Iteration   6: 1906.693 us/op
Iteration   7: 1371.289 us/op
Iteration   8: 1356.417 us/op
Iteration   9: 1406.567 us/op
Iteration  10: 1443.326 us/op
Iteration  11: 1189.329 us/op
Iteration  12: 1191.970 us/op
Iteration  13: 1163.231 us/op
Iteration  14: 1166.616 us/op
Iteration  15: 1189.987 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean =   1580.781 ±(99.9%) 492.397 us/op

  Histogram, us/op:
    [1000.000, 1125.000) = 0 
    [1125.000, 1250.000) = 5 
    [1250.000, 1375.000) = 2 
    [1375.000, 1500.000) = 2 
    [1500.000, 1625.000) = 0 
    [1625.000, 1750.000) = 0 
    [1750.000, 1875.000) = 3 
    [1875.000, 2000.000) = 2 
    [2000.000, 2125.000) = 0 
    [2125.000, 2250.000) = 0 
    [2250.000, 2375.000) = 0 
    [2375.000, 2500.000) = 0 
    [2500.000, 2625.000) = 0 
    [2625.000, 2750.000) = 0 
    [2750.000, 2875.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   1163.231 us/op
     p(50.0000) =   1406.567 us/op
     p(90.0000) =   2286.131 us/op
     p(95.0000) =   2834.789 us/op
     p(99.0000) =   2834.789 us/op
     p(99.9000) =   2834.789 us/op
     p(99.9900) =   2834.789 us/op
     p(99.9990) =   2834.789 us/op
     p(99.9999) =   2834.789 us/op
    p(100.0000) =   2834.789 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 82161.833 us/op
# Warmup Iteration   2: 39273.919 us/op
# Warmup Iteration   3: 31274.325 us/op
# Warmup Iteration   4: 31332.548 us/op
# Warmup Iteration   5: 31224.359 us/op
Iteration   1: 31362.389 us/op
Iteration   2: 111362.751 us/op
Iteration   3: 32266.240 us/op
Iteration   4: 31663.482 us/op
Iteration   5: 32257.576 us/op
Iteration   6: 32305.420 us/op
Iteration   7: 32337.371 us/op
Iteration   8: 32428.557 us/op
Iteration   9: 32947.345 us/op
Iteration  10: 109326.522 us/op
Iteration  11: 108817.354 us/op
Iteration  12: 108998.019 us/op
Iteration  13: 109074.776 us/op
Iteration  14: 109389.639 us/op
Iteration  15: 110100.036 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean =  68309.165 ±(99.9%) 42727.423 us/op

  Histogram, us/op:
    [ 30000.000,  35000.000) = 8 
    [ 35000.000,  40000.000) = 0 
    [ 40000.000,  45000.000) = 0 
    [ 45000.000,  50000.000) = 0 
    [ 50000.000,  55000.000) = 0 
    [ 55000.000,  60000.000) = 0 
    [ 60000.000,  65000.000) = 0 
    [ 65000.000,  70000.000) = 0 
    [ 70000.000,  75000.000) = 0 
    [ 75000.000,  80000.000) = 0 
    [ 80000.000,  85000.000) = 0 
    [ 85000.000,  90000.000) = 0 
    [ 90000.000,  95000.000) = 0 
    [ 95000.000, 100000.000) = 0 
    [100000.000, 105000.000) = 0 
    [105000.000, 110000.000) = 5 
    [110000.000, 115000.000) = 2 

  Percentiles, us/op:
      p(0.0000) =  31362.389 us/op
     p(50.0000) =  32947.345 us/op
     p(90.0000) = 110605.122 us/op
     p(95.0000) = 111362.751 us/op
     p(99.0000) = 111362.751 us/op
     p(99.9000) = 111362.751 us/op
     p(99.9900) = 111362.751 us/op
     p(99.9990) = 111362.751 us/op
     p(99.9999) = 111362.751 us/op
    p(100.0000) = 111362.751 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3100850.051 us/op
# Warmup Iteration   2: 11417525.374 us/op
# Warmup Iteration   3: 11225278.869 us/op
# Warmup Iteration   4: 11218601.384 us/op
# Warmup Iteration   5: 11206211.311 us/op
Iteration   1: 11197825.766 us/op
Iteration   2: 11098560.340 us/op
Iteration   3: 11109844.401 us/op
Iteration   4: 11047298.067 us/op
Iteration   5: 11083931.640 us/op
Iteration   6: 11091044.078 us/op
Iteration   7: 11094874.752 us/op
Iteration   8: 11044698.412 us/op
Iteration   9: 11054738.431 us/op
Iteration  10: 11052947.172 us/op
Iteration  11: 11076122.895 us/op
Iteration  12: 11074773.472 us/op
Iteration  13: 11083744.823 us/op
Iteration  14: 11075661.800 us/op
Iteration  15: 11061916.613 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean = 11083198.844 ±(99.9%) 39807.369 us/op

  Histogram, us/op:
    [11000000.000, 11012500.000) = 0 
    [11012500.000, 11025000.000) = 0 
    [11025000.000, 11037500.000) = 0 
    [11037500.000, 11050000.000) = 2 
    [11050000.000, 11062500.000) = 3 
    [11062500.000, 11075000.000) = 1 
    [11075000.000, 11087500.000) = 4 
    [11087500.000, 11100000.000) = 3 
    [11100000.000, 11112500.000) = 1 
    [11112500.000, 11125000.000) = 0 
    [11125000.000, 11137500.000) = 0 
    [11137500.000, 11150000.000) = 0 
    [11150000.000, 11162500.000) = 0 
    [11162500.000, 11175000.000) = 0 
    [11175000.000, 11187500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 11044698.412 us/op
     p(50.0000) = 11076122.895 us/op
     p(90.0000) = 11145036.947 us/op
     p(95.0000) = 11197825.766 us/op
     p(99.0000) = 11197825.766 us/op
     p(99.9000) = 11197825.766 us/op
     p(99.9900) = 11197825.766 us/op
     p(99.9990) = 11197825.766 us/op
     p(99.9999) = 11197825.766 us/op
    p(100.0000) = 11197825.766 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 19273.419 us/op
# Warmup Iteration   2: 7687.398 us/op
# Warmup Iteration   3: 1967.217 us/op
# Warmup Iteration   4: 1880.868 us/op
# Warmup Iteration   5: 1878.716 us/op
Iteration   1: 1865.576 us/op
Iteration   2: 1863.990 us/op
Iteration   3: 1886.769 us/op
Iteration   4: 1867.537 us/op
Iteration   5: 1887.384 us/op
Iteration   6: 1942.070 us/op
Iteration   7: 1886.129 us/op
Iteration   8: 1877.508 us/op
Iteration   9: 2005.322 us/op
Iteration  10: 1873.972 us/op
Iteration  11: 1869.981 us/op
Iteration  12: 1873.016 us/op
Iteration  13: 1867.426 us/op
Iteration  14: 1871.097 us/op
Iteration  15: 1870.360 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  N = 15
  mean =   1887.209 ±(99.9%) 40.466 us/op

  Histogram, us/op:
    [1800.000, 1825.000) = 0 
    [1825.000, 1850.000) = 0 
    [1850.000, 1875.000) = 9 
    [1875.000, 1900.000) = 4 
    [1900.000, 1925.000) = 0 
    [1925.000, 1950.000) = 1 
    [1950.000, 1975.000) = 0 
    [1975.000, 2000.000) = 0 
    [2000.000, 2025.000) = 1 
    [2025.000, 2050.000) = 0 
    [2050.000, 2075.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   1863.990 us/op
     p(50.0000) =   1873.016 us/op
     p(90.0000) =   1967.371 us/op
     p(95.0000) =   2005.322 us/op
     p(99.0000) =   2005.322 us/op
     p(99.9000) =   2005.322 us/op
     p(99.9900) =   2005.322 us/op
     p(99.9990) =   2005.322 us/op
     p(99.9999) =   2005.322 us/op
    p(100.0000) =   2005.322 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 60313.512 us/op
# Warmup Iteration   2: 62754.843 us/op
# Warmup Iteration   3: 62241.723 us/op
# Warmup Iteration   4: 62290.137 us/op
# Warmup Iteration   5: 62434.841 us/op
Iteration   1: 62409.614 us/op
Iteration   2: 62210.958 us/op
Iteration   3: 62258.677 us/op
Iteration   4: 62077.970 us/op
Iteration   5: 62366.524 us/op
Iteration   6: 62379.960 us/op
Iteration   7: 62311.946 us/op
Iteration   8: 61797.152 us/op
Iteration   9: 62300.158 us/op
Iteration  10: 62165.316 us/op
Iteration  11: 62188.845 us/op
Iteration  12: 61929.258 us/op
Iteration  13: 62335.550 us/op
Iteration  14: 62174.488 us/op
Iteration  15: 62005.624 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  N = 15
  mean =  62194.136 ±(99.9%) 189.153 us/op

  Histogram, us/op:
    [61700.000, 61750.000) = 0 
    [61750.000, 61800.000) = 1 
    [61800.000, 61850.000) = 0 
    [61850.000, 61900.000) = 0 
    [61900.000, 61950.000) = 1 
    [61950.000, 62000.000) = 0 
    [62000.000, 62050.000) = 1 
    [62050.000, 62100.000) = 1 
    [62100.000, 62150.000) = 0 
    [62150.000, 62200.000) = 3 
    [62200.000, 62250.000) = 1 
    [62250.000, 62300.000) = 1 
    [62300.000, 62350.000) = 3 
    [62350.000, 62400.000) = 2 
    [62400.000, 62450.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  61797.152 us/op
     p(50.0000) =  62210.958 us/op
     p(90.0000) =  62391.822 us/op
     p(95.0000) =  62409.614 us/op
     p(99.0000) =  62409.614 us/op
     p(99.9000) =  62409.614 us/op
     p(99.9900) =  62409.614 us/op
     p(99.9990) =  62409.614 us/op
     p(99.9999) =  62409.614 us/op
    p(100.0000) =  62409.614 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1631906.039 us/op
# Warmup Iteration   2: 1713583.396 us/op
# Warmup Iteration   3: 1705332.888 us/op
# Warmup Iteration   4: 1704575.069 us/op
# Warmup Iteration   5: 1704742.553 us/op
Iteration   1: 1703768.322 us/op
Iteration   2: 1705414.627 us/op
Iteration   3: 1704122.828 us/op
Iteration   4: 1703385.646 us/op
Iteration   5: 1703924.164 us/op
Iteration   6: 1703144.276 us/op
Iteration   7: 1702316.749 us/op
Iteration   8: 1704407.370 us/op
Iteration   9: 1704115.488 us/op
Iteration  10: 1704025.761 us/op
Iteration  11: 1704296.057 us/op
Iteration  12: 1706381.013 us/op
Iteration  13: 1703119.343 us/op
Iteration  14: 1706276.121 us/op
Iteration  15: 1703340.870 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  N = 15
  mean = 1704135.909 ±(99.9%) 1214.529 us/op

  Histogram, us/op:
    [1702000.000, 1702500.000) = 1 
    [1702500.000, 1703000.000) = 0 
    [1703000.000, 1703500.000) = 4 
    [1703500.000, 1704000.000) = 2 
    [1704000.000, 1704500.000) = 5 
    [1704500.000, 1705000.000) = 0 
    [1705000.000, 1705500.000) = 1 
    [1705500.000, 1706000.000) = 0 
    [1706000.000, 1706500.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 1702316.749 us/op
     p(50.0000) = 1704025.761 us/op
     p(90.0000) = 1706318.078 us/op
     p(95.0000) = 1706381.013 us/op
     p(99.0000) = 1706381.013 us/op
     p(99.9000) = 1706381.013 us/op
     p(99.9900) = 1706381.013 us/op
     p(99.9990) = 1706381.013 us/op
     p(99.9999) = 1706381.013 us/op
    p(100.0000) = 1706381.013 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 49.670 us/op
# Warmup Iteration   2: 11.420 us/op
# Warmup Iteration   3: 10.553 us/op
# Warmup Iteration   4: 11.274 us/op
# Warmup Iteration   5: 11.824 us/op
Iteration   1: 11.407 us/op
Iteration   2: 12.892 us/op
Iteration   3: 12.045 us/op
Iteration   4: 12.115 us/op
Iteration   5: 16.472 us/op
Iteration   6: 13.031 us/op
Iteration   7: 12.370 us/op
Iteration   8: 11.823 us/op
Iteration   9: 12.506 us/op
Iteration  10: 10.764 us/op
Iteration  11: 14.296 us/op
Iteration  12: 12.280 us/op
Iteration  13: 62.291 us/op
Iteration  14: 12.538 us/op
Iteration  15: 12.628 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  N = 15
  mean =     15.964 ±(99.9%) 13.773 us/op

  Histogram, us/op:
    [10.000, 15.000) = 13 
    [15.000, 20.000) = 1 
    [20.000, 25.000) = 0 
    [25.000, 30.000) = 0 
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 0 
    [40.000, 45.000) = 0 
    [45.000, 50.000) = 0 
    [50.000, 55.000) = 0 
    [55.000, 60.000) = 0 
    [60.000, 65.000) = 1 

  Percentiles, us/op:
      p(0.0000) =     10.764 us/op
     p(50.0000) =     12.506 us/op
     p(90.0000) =     34.800 us/op
     p(95.0000) =     62.291 us/op
     p(99.0000) =     62.291 us/op
     p(99.9000) =     62.291 us/op
     p(99.9900) =     62.291 us/op
     p(99.9990) =     62.291 us/op
     p(99.9999) =     62.291 us/op
    p(100.0000) =     62.291 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 23454.402 us/op
# Warmup Iteration   2: 12794.252 us/op
# Warmup Iteration   3: 7727.585 us/op
# Warmup Iteration   4: 7684.739 us/op
# Warmup Iteration   5: 7688.891 us/op
Iteration   1: 7711.144 us/op
Iteration   2: 7698.400 us/op
Iteration   3: 7705.461 us/op
Iteration   4: 7726.687 us/op
Iteration   5: 7704.700 us/op
Iteration   6: 7691.995 us/op
Iteration   7: 7687.693 us/op
Iteration   8: 7690.039 us/op
Iteration   9: 7673.963 us/op
Iteration  10: 7678.133 us/op
Iteration  11: 7559.464 us/op
Iteration  12: 7697.528 us/op
Iteration  13: 7707.782 us/op
Iteration  14: 7562.857 us/op
Iteration  15: 7581.060 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  N = 15
  mean =   7671.794 ±(99.9%) 59.385 us/op

  Histogram, us/op:
    [7500.000, 7525.000) = 0 
    [7525.000, 7550.000) = 0 
    [7550.000, 7575.000) = 2 
    [7575.000, 7600.000) = 1 
    [7600.000, 7625.000) = 0 
    [7625.000, 7650.000) = 0 
    [7650.000, 7675.000) = 1 
    [7675.000, 7700.000) = 6 
    [7700.000, 7725.000) = 4 
    [7725.000, 7750.000) = 1 
    [7750.000, 7775.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   7559.464 us/op
     p(50.0000) =   7691.995 us/op
     p(90.0000) =   7717.361 us/op
     p(95.0000) =   7726.687 us/op
     p(99.0000) =   7726.687 us/op
     p(99.9000) =   7726.687 us/op
     p(99.9900) =   7726.687 us/op
     p(99.9990) =   7726.687 us/op
     p(99.9999) =   7726.687 us/op
    p(100.0000) =   7726.687 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 67811.910 us/op
# Warmup Iteration   2: 46217.230 us/op
# Warmup Iteration   3: 34775.626 us/op
# Warmup Iteration   4: 34922.341 us/op
# Warmup Iteration   5: 32037.505 us/op
Iteration   1: 33086.864 us/op
Iteration   2: 38607.798 us/op
Iteration   3: 32862.809 us/op
Iteration   4: 38199.541 us/op
Iteration   5: 36194.736 us/op
Iteration   6: 36436.244 us/op
Iteration   7: 30306.656 us/op
Iteration   8: 34271.666 us/op
Iteration   9: 30756.753 us/op
Iteration  10: 31208.805 us/op
Iteration  11: 33111.636 us/op
Iteration  12: 34224.869 us/op
Iteration  13: 31323.731 us/op
Iteration  14: 32047.010 us/op
Iteration  15: 32092.678 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  N = 15
  mean =  33648.786 ±(99.9%) 2819.436 us/op

  Histogram, us/op:
    [30000.000, 30500.000) = 1 
    [30500.000, 31000.000) = 1 
    [31000.000, 31500.000) = 2 
    [31500.000, 32000.000) = 0 
    [32000.000, 32500.000) = 2 
    [32500.000, 33000.000) = 1 
    [33000.000, 33500.000) = 2 
    [33500.000, 34000.000) = 0 
    [34000.000, 34500.000) = 2 
    [34500.000, 35000.000) = 0 
    [35000.000, 35500.000) = 0 
    [35500.000, 36000.000) = 0 
    [36000.000, 36500.000) = 2 
    [36500.000, 37000.000) = 0 
    [37000.000, 37500.000) = 0 
    [37500.000, 38000.000) = 0 
    [38000.000, 38500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  30306.656 us/op
     p(50.0000) =  33086.864 us/op
     p(90.0000) =  38362.844 us/op
     p(95.0000) =  38607.798 us/op
     p(99.0000) =  38607.798 us/op
     p(99.9000) =  38607.798 us/op
     p(99.9900) =  38607.798 us/op
     p(99.9990) =  38607.798 us/op
     p(99.9999) =  38607.798 us/op
    p(100.0000) =  38607.798 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 65739.160 us/op
# Warmup Iteration   2: 41984.455 us/op
# Warmup Iteration   3: 33334.785 us/op
# Warmup Iteration   4: 33335.988 us/op
# Warmup Iteration   5: 33326.993 us/op
Iteration   1: 33358.893 us/op
Iteration   2: 33420.153 us/op
Iteration   3: 33297.869 us/op
Iteration   4: 33382.893 us/op
Iteration   5: 33269.449 us/op
Iteration   6: 33255.042 us/op
Iteration   7: 33528.723 us/op
Iteration   8: 33503.347 us/op
Iteration   9: 34078.809 us/op
Iteration  10: 33780.799 us/op
Iteration  11: 33325.821 us/op
Iteration  12: 33270.490 us/op
Iteration  13: 33365.970 us/op
Iteration  14: 33809.455 us/op
Iteration  15: 33188.951 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  N = 15
  mean =  33455.778 ±(99.9%) 266.941 us/op

  Histogram, us/op:
    [33100.000, 33200.000) = 1 
    [33200.000, 33300.000) = 4 
    [33300.000, 33400.000) = 4 
    [33400.000, 33500.000) = 1 
    [33500.000, 33600.000) = 2 
    [33600.000, 33700.000) = 0 
    [33700.000, 33800.000) = 1 
    [33800.000, 33900.000) = 1 
    [33900.000, 34000.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  33188.951 us/op
     p(50.0000) =  33365.970 us/op
     p(90.0000) =  33917.197 us/op
     p(95.0000) =  34078.809 us/op
     p(99.0000) =  34078.809 us/op
     p(99.9000) =  34078.809 us/op
     p(99.9900) =  34078.809 us/op
     p(99.9990) =  34078.809 us/op
     p(99.9999) =  34078.809 us/op
    p(100.0000) =  34078.809 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 36161.682 us/op
# Warmup Iteration   2: 23448.472 us/op
# Warmup Iteration   3: 23009.877 us/op
# Warmup Iteration   4: 23153.535 us/op
# Warmup Iteration   5: 23013.096 us/op
Iteration   1: 21628.231 us/op
Iteration   2: 21564.180 us/op
Iteration   3: 21698.705 us/op
Iteration   4: 21593.823 us/op
Iteration   5: 21894.031 us/op
Iteration   6: 21623.695 us/op
Iteration   7: 21673.907 us/op
Iteration   8: 21818.488 us/op
Iteration   9: 21809.511 us/op
Iteration  10: 21723.036 us/op
Iteration  11: 21630.370 us/op
Iteration  12: 21908.908 us/op
Iteration  13: 21707.483 us/op
Iteration  14: 21719.039 us/op
Iteration  15: 21752.805 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  N = 15
  mean =  21716.414 ±(99.9%) 111.848 us/op

  Histogram, us/op:
    [21500.000, 21550.000) = 0 
    [21550.000, 21600.000) = 2 
    [21600.000, 21650.000) = 3 
    [21650.000, 21700.000) = 2 
    [21700.000, 21750.000) = 3 
    [21750.000, 21800.000) = 1 
    [21800.000, 21850.000) = 2 
    [21850.000, 21900.000) = 1 
    [21900.000, 21950.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  21564.180 us/op
     p(50.0000) =  21707.483 us/op
     p(90.0000) =  21899.982 us/op
     p(95.0000) =  21908.908 us/op
     p(99.0000) =  21908.908 us/op
     p(99.9000) =  21908.908 us/op
     p(99.9900) =  21908.908 us/op
     p(99.9990) =  21908.908 us/op
     p(99.9999) =  21908.908 us/op
    p(100.0000) =  21908.908 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 26265.501 us/op
# Warmup Iteration   2: 18805.389 us/op
# Warmup Iteration   3: 13907.157 us/op
# Warmup Iteration   4: 13832.782 us/op
# Warmup Iteration   5: 13922.924 us/op
Iteration   1: 13880.454 us/op
Iteration   2: 13896.591 us/op
Iteration   3: 13957.499 us/op
Iteration   4: 13924.233 us/op
Iteration   5: 13895.611 us/op
Iteration   6: 13917.474 us/op
Iteration   7: 13842.556 us/op
Iteration   8: 13867.787 us/op
Iteration   9: 13826.469 us/op
Iteration  10: 13858.129 us/op
Iteration  11: 13836.001 us/op
Iteration  12: 14057.123 us/op
Iteration  13: 13917.356 us/op
Iteration  14: 13867.754 us/op
Iteration  15: 13982.123 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  N = 15
  mean =  13901.811 ±(99.9%) 65.733 us/op

  Histogram, us/op:
    [13800.000, 13825.000) = 0 
    [13825.000, 13850.000) = 3 
    [13850.000, 13875.000) = 3 
    [13875.000, 13900.000) = 3 
    [13900.000, 13925.000) = 3 
    [13925.000, 13950.000) = 0 
    [13950.000, 13975.000) = 1 
    [13975.000, 14000.000) = 1 
    [14000.000, 14025.000) = 0 
    [14025.000, 14050.000) = 0 
    [14050.000, 14075.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  13826.469 us/op
     p(50.0000) =  13895.611 us/op
     p(90.0000) =  14012.123 us/op
     p(95.0000) =  14057.123 us/op
     p(99.0000) =  14057.123 us/op
     p(99.9000) =  14057.123 us/op
     p(99.9900) =  14057.123 us/op
     p(99.9990) =  14057.123 us/op
     p(99.9999) =  14057.123 us/op
    p(100.0000) =  14057.123 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 77644.511 us/op
# Warmup Iteration   2: 48642.116 us/op
# Warmup Iteration   3: 29596.794 us/op
# Warmup Iteration   4: 32615.864 us/op
# Warmup Iteration   5: 29141.435 us/op
Iteration   1: 30180.428 us/op
Iteration   2: 33314.209 us/op
Iteration   3: 30063.294 us/op
Iteration   4: 32827.367 us/op
Iteration   5: 30405.618 us/op
Iteration   6: 30417.046 us/op
Iteration   7: 31019.380 us/op
Iteration   8: 29984.529 us/op
Iteration   9: 32162.095 us/op
Iteration  10: 29949.078 us/op
Iteration  11: 29020.147 us/op
Iteration  12: 30676.228 us/op
Iteration  13: 30670.566 us/op
Iteration  14: 30687.690 us/op
Iteration  15: 29767.813 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  N = 15
  mean =  30743.033 ±(99.9%) 1251.370 us/op

  Histogram, us/op:
    [29000.000, 29500.000) = 1 
    [29500.000, 30000.000) = 3 
    [30000.000, 30500.000) = 4 
    [30500.000, 31000.000) = 3 
    [31000.000, 31500.000) = 1 
    [31500.000, 32000.000) = 0 
    [32000.000, 32500.000) = 1 
    [32500.000, 33000.000) = 1 
    [33000.000, 33500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  29020.147 us/op
     p(50.0000) =  30417.046 us/op
     p(90.0000) =  33022.104 us/op
     p(95.0000) =  33314.209 us/op
     p(99.0000) =  33314.209 us/op
     p(99.9000) =  33314.209 us/op
     p(99.9900) =  33314.209 us/op
     p(99.9990) =  33314.209 us/op
     p(99.9999) =  33314.209 us/op
    p(100.0000) =  33314.209 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 15033.605 us/op
# Warmup Iteration   2: 1388.268 us/op
# Warmup Iteration   3: 1218.670 us/op
# Warmup Iteration   4: 1318.635 us/op
# Warmup Iteration   5: 1071.525 us/op
Iteration   1: 1152.374 us/op
Iteration   2: 1104.654 us/op
Iteration   3: 835.736 us/op
Iteration   4: 935.812 us/op
Iteration   5: 930.363 us/op
Iteration   6: 875.396 us/op
Iteration   7: 826.667 us/op
Iteration   8: 797.528 us/op
Iteration   9: 876.745 us/op
Iteration  10: 806.353 us/op
Iteration  11: 822.497 us/op
Iteration  12: 805.683 us/op
Iteration  13: 815.290 us/op
Iteration  14: 838.354 us/op
Iteration  15: 823.788 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean =    883.149 ±(99.9%) 116.106 us/op

  Histogram, us/op:
    [ 700.000,  750.000) = 0 
    [ 750.000,  800.000) = 1 
    [ 800.000,  850.000) = 8 
    [ 850.000,  900.000) = 2 
    [ 900.000,  950.000) = 2 
    [ 950.000, 1000.000) = 0 
    [1000.000, 1050.000) = 0 
    [1050.000, 1100.000) = 0 
    [1100.000, 1150.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    797.528 us/op
     p(50.0000) =    835.736 us/op
     p(90.0000) =   1123.742 us/op
     p(95.0000) =   1152.374 us/op
     p(99.0000) =   1152.374 us/op
     p(99.9000) =   1152.374 us/op
     p(99.9900) =   1152.374 us/op
     p(99.9990) =   1152.374 us/op
     p(99.9999) =   1152.374 us/op
    p(100.0000) =   1152.374 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 21956.019 us/op
# Warmup Iteration   2: 8050.540 us/op
# Warmup Iteration   3: 8064.005 us/op
# Warmup Iteration   4: 7901.762 us/op
# Warmup Iteration   5: 7729.497 us/op
Iteration   1: 8072.147 us/op
Iteration   2: 7801.047 us/op
Iteration   3: 6698.028 us/op
Iteration   4: 7354.779 us/op
Iteration   5: 6831.483 us/op
Iteration   6: 6905.544 us/op
Iteration   7: 6857.701 us/op
Iteration   8: 7214.611 us/op
Iteration   9: 6727.717 us/op
Iteration  10: 6620.367 us/op
Iteration  11: 6627.608 us/op
Iteration  12: 7169.448 us/op
Iteration  13: 6774.601 us/op
Iteration  14: 6691.505 us/op
Iteration  15: 6784.865 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean =   7008.763 ±(99.9%) 468.492 us/op

  Histogram, us/op:
    [6000.000, 6250.000) = 0 
    [6250.000, 6500.000) = 0 
    [6500.000, 6750.000) = 5 
    [6750.000, 7000.000) = 5 
    [7000.000, 7250.000) = 2 
    [7250.000, 7500.000) = 1 
    [7500.000, 7750.000) = 0 
    [7750.000, 8000.000) = 1 
    [8000.000, 8250.000) = 1 
    [8250.000, 8500.000) = 0 
    [8500.000, 8750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   6620.367 us/op
     p(50.0000) =   6831.483 us/op
     p(90.0000) =   7909.487 us/op
     p(95.0000) =   8072.147 us/op
     p(99.0000) =   8072.147 us/op
     p(99.9000) =   8072.147 us/op
     p(99.9900) =   8072.147 us/op
     p(99.9990) =   8072.147 us/op
     p(99.9999) =   8072.147 us/op
    p(100.0000) =   8072.147 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 125735.520 us/op
# Warmup Iteration   2: 108661.639 us/op
# Warmup Iteration   3: 111198.120 us/op
# Warmup Iteration   4: 108223.126 us/op
# Warmup Iteration   5: 108235.931 us/op
Iteration   1: 108470.140 us/op
Iteration   2: 111167.099 us/op
Iteration   3: 106681.488 us/op
Iteration   4: 108782.204 us/op
Iteration   5: 108259.282 us/op
Iteration   6: 108053.297 us/op
Iteration   7: 107475.630 us/op
Iteration   8: 105494.278 us/op
Iteration   9: 108471.627 us/op
Iteration  10: 107346.193 us/op
Iteration  11: 107882.389 us/op
Iteration  12: 107653.648 us/op
Iteration  13: 110085.751 us/op
Iteration  14: 106706.000 us/op
Iteration  15: 106954.515 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean = 107965.569 ±(99.9%) 1487.638 us/op

  Histogram, us/op:
    [105000.000, 105500.000) = 1 
    [105500.000, 106000.000) = 0 
    [106000.000, 106500.000) = 0 
    [106500.000, 107000.000) = 3 
    [107000.000, 107500.000) = 2 
    [107500.000, 108000.000) = 2 
    [108000.000, 108500.000) = 4 
    [108500.000, 109000.000) = 1 
    [109000.000, 109500.000) = 0 
    [109500.000, 110000.000) = 0 
    [110000.000, 110500.000) = 1 
    [110500.000, 111000.000) = 0 
    [111000.000, 111500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 105494.278 us/op
     p(50.0000) = 107882.389 us/op
     p(90.0000) = 110518.290 us/op
     p(95.0000) = 111167.099 us/op
     p(99.0000) = 111167.099 us/op
     p(99.9000) = 111167.099 us/op
     p(99.9900) = 111167.099 us/op
     p(99.9990) = 111167.099 us/op
     p(99.9999) = 111167.099 us/op
    p(100.0000) = 111167.099 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1657164.497 us/op
# Warmup Iteration   2: 1653096.881 us/op
# Warmup Iteration   3: 1649360.599 us/op
# Warmup Iteration   4: 1658532.108 us/op
# Warmup Iteration   5: 1666202.500 us/op
Iteration   1: 1662353.386 us/op
Iteration   2: 1667115.038 us/op
Iteration   3: 1661718.880 us/op
Iteration   4: 1645085.716 us/op
Iteration   5: 1667490.368 us/op
Iteration   6: 1690819.243 us/op
Iteration   7: 1673609.167 us/op
Iteration   8: 1641635.481 us/op
Iteration   9: 1654293.636 us/op
Iteration  10: 1649717.465 us/op
Iteration  11: 1644815.761 us/op
Iteration  12: 1651007.865 us/op
Iteration  13: 1649354.202 us/op
Iteration  14: 1654659.004 us/op
Iteration  15: 1669383.920 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  N = 15
  mean = 1658870.609 ±(99.9%) 14201.232 us/op

  Histogram, us/op:
    [1640000.000, 1645000.000) = 2 
    [1645000.000, 1650000.000) = 3 
    [1650000.000, 1655000.000) = 3 
    [1655000.000, 1660000.000) = 0 
    [1660000.000, 1665000.000) = 2 
    [1665000.000, 1670000.000) = 3 
    [1670000.000, 1675000.000) = 1 
    [1675000.000, 1680000.000) = 0 
    [1680000.000, 1685000.000) = 0 
    [1685000.000, 1690000.000) = 0 
    [1690000.000, 1695000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 1641635.481 us/op
     p(50.0000) = 1654659.004 us/op
     p(90.0000) = 1680493.197 us/op
     p(95.0000) = 1690819.243 us/op
     p(99.0000) = 1690819.243 us/op
     p(99.9000) = 1690819.243 us/op
     p(99.9900) = 1690819.243 us/op
     p(99.9990) = 1690819.243 us/op
     p(99.9999) = 1690819.243 us/op
    p(100.0000) = 1690819.243 us/op


# Run complete. Total time: 08:43:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                    (iterations)  (length)     (size)    Mode      Cnt         Score       Error   Units
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024   thrpt       15        ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240   thrpt       15        ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400   thrpt       15        ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576   thrpt       15        ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760   thrpt       15        ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600   thrpt       15        ≈ 10⁻⁶              ops/us
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A   thrpt       15         0.003 ±     0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A   thrpt       15         0.006 ±     0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A   thrpt       15         0.004 ±     0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A   thrpt       15         0.006 ±     0.001  ops/us
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁶              ops/us
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A   thrpt       15        ≈ 10⁻⁷              ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A   thrpt       15         0.542 ±     0.001  ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A   thrpt       15         0.203 ±     0.001  ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A   thrpt       15         0.113 ±     0.001  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10   thrpt       15        23.224 ±     0.161  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100   thrpt       15         2.373 ±     0.028  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000   thrpt       15         0.211 ±     0.002  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10   thrpt       15        21.348 ±     0.173  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100   thrpt       15         2.381 ±     0.025  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000   thrpt       15         0.225 ±     0.004  ops/us
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴              ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A   thrpt       15         0.003 ±     0.001  ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A   thrpt       15        ≈ 10⁻⁴              ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A   thrpt       15        ≈ 10⁻⁷              ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A   thrpt       15         0.001 ±     0.001  ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁶              ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A   thrpt       15         1.933 ±     0.004  ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴              ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴              ops/us
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴              ops/us
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A   thrpt       15         0.002 ±     0.001  ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A   thrpt       15        ≈ 10⁻⁴              ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024    avgt       15    217875.046 ±  1971.047   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240    avgt       15    219921.697 ±   401.773   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400    avgt       15    200926.244 ±   491.398   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576    avgt       15    199205.858 ±   621.197   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760    avgt       15    198256.789 ±   403.891   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600    avgt       15    194101.197 ±   422.956   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024    avgt       15   1331145.575 ±  8647.137   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240    avgt       15    992127.556 ±  4908.573   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400    avgt       15    843836.055 ±  2906.358   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576    avgt       15    839825.750 ±  2687.671   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760    avgt       15    833714.714 ±  3097.630   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600    avgt       15    912730.878 ±  1837.897   us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A    avgt       15       375.493 ±     0.257   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A    avgt       15       165.393 ±     0.645   us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A    avgt       15       274.226 ±     1.141   us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A    avgt       15       177.943 ±     1.055   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A    avgt       15   1045902.928 ±  1434.795   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A    avgt       15    126496.700 ±  2704.321   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A    avgt       15   4238905.472 ± 14239.271   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A    avgt       15         1.845 ±     0.001   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A    avgt       15         4.920 ±     0.012   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A    avgt       15         8.818 ±     0.014   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10    avgt       15         0.043 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100    avgt       15         0.421 ±     0.004   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000    avgt       15         4.757 ±     0.062   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10    avgt       15         0.047 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100    avgt       15         0.420 ±     0.004   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000    avgt       15         4.401 ±     0.064   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A    avgt       15     14266.107 ±     8.133   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A    avgt       15       313.961 ±     0.310   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A    avgt       15     31187.123 ±    31.010   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A    avgt       15  11453877.982 ± 31470.667   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A    avgt       15      1876.221 ±     1.534   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A    avgt       15     62124.690 ±    49.599   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A    avgt       15   1703415.585 ±   888.623   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A    avgt       15         0.517 ±     0.001   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A    avgt       15      6950.999 ±     4.746   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A    avgt       15     34277.158 ±  2604.682   us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A    avgt       15     34772.363 ±    55.531   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A    avgt       15     24801.788 ±    75.179   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A    avgt       15     14309.126 ±    22.948   us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A    avgt       15     31519.780 ±  1351.233   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A    avgt       15       632.270 ±     1.140   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A    avgt       15      6460.433 ±    12.492   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A    avgt       15    104811.510 ±   347.576   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A    avgt       15   1658057.378 ±  3185.870   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024  sample      701    217078.791 ±   602.453   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A       1024  sample             201588.736               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A       1024  sample             217317.376               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A       1024  sample             222560.256               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A       1024  sample             224395.264               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A       1024  sample             228841.226               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A       1024  sample             230424.576               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A       1024  sample             230424.576               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A       1024  sample             230424.576               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240  sample      690    219805.085 ±   183.638   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A      10240  sample             216793.088               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A      10240  sample             219676.672               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A      10240  sample             221773.824               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A      10240  sample             222035.968               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A      10240  sample             222583.849               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A      10240  sample             223608.832               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A      10240  sample             223608.832               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A      10240  sample             223608.832               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400  sample      750    201212.647 ±   180.562   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A     102400  sample             198180.864               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A     102400  sample             201064.448               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A     102400  sample             203161.600               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A     102400  sample             203685.888               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A     102400  sample             204210.176               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A     102400  sample             206045.184               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A     102400  sample             206045.184               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A     102400  sample             206045.184               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576  sample      763    199451.386 ±   179.871   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A    1048576  sample             196083.712               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A    1048576  sample             199753.728               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A    1048576  sample             201326.592               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A    1048576  sample             201850.880               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A    1048576  sample             202469.540               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A    1048576  sample             202899.456               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A    1048576  sample             202899.456               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A    1048576  sample             202899.456               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760  sample      764    198725.739 ±   187.786   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A   10485760  sample             195035.136               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A   10485760  sample             198967.296               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A   10485760  sample             200802.304               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A   10485760  sample             201064.448               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A   10485760  sample             201588.736               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A   10485760  sample             202375.168               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A   10485760  sample             202375.168               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A   10485760  sample             202375.168               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600  sample      780    194472.871 ±   178.977   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A  104857600  sample             191102.976               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A  104857600  sample             194772.992               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A  104857600  sample             196345.856               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A  104857600  sample             196608.000               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A  104857600  sample             197132.288               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A  104857600  sample             198443.008               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A  104857600  sample             198443.008               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A  104857600  sample             198443.008               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024  sample      120   1332495.428 ± 18494.488   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A       1024  sample            1180696.576               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A       1024  sample            1345323.008               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A       1024  sample            1390202.061               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A       1024  sample            1396598.374               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A       1024  sample            1402554.286               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A       1024  sample            1402994.688               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A       1024  sample            1402994.688               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A       1024  sample            1402994.688               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240  sample      165    991539.821 ± 13339.115   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A      10240  sample             903872.512               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A      10240  sample             986710.016               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A      10240  sample            1067450.368               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A      10240  sample            1075838.976               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A      10240  sample            1080788.255               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A      10240  sample            1086324.736               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A      10240  sample            1086324.736               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A      10240  sample            1086324.736               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400  sample      180    843369.677 ±  8811.651   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A     102400  sample             776994.816               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A     102400  sample             845152.256               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A     102400  sample             886990.438               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A     102400  sample             899678.208               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A     102400  sample             908266.045               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A     102400  sample             909115.392               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A     102400  sample             909115.392               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A     102400  sample             909115.392               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576  sample      180    837788.922 ±  9914.025   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A    1048576  sample             761266.176               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A    1048576  sample             837287.936               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A    1048576  sample             896427.622               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A    1048576  sample             911212.544               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A    1048576  sample             916654.653               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A    1048576  sample             917504.000               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A    1048576  sample             917504.000               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A    1048576  sample             917504.000               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760  sample      182    835087.079 ±  8734.559   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A   10485760  sample             767557.632               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A   10485760  sample             833617.920               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A   10485760  sample             889192.448               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A   10485760  sample             897423.770               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A   10485760  sample             906326.180               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A   10485760  sample             908066.816               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A   10485760  sample             908066.816               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A   10485760  sample             908066.816               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600  sample      166    911016.726 ± 16482.876   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A  104857600  sample             835715.072               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A  104857600  sample             889192.448               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A  104857600  sample            1028653.056               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A  104857600  sample            1031798.784               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A  104857600  sample            1037031.178               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A  104857600  sample            1039138.816               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A  104857600  sample            1039138.816               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A  104857600  sample            1039138.816               us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A  sample   399160       375.384 ±     0.053   us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.00                                                                        N/A       N/A        N/A  sample                370.176               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.50                                                                        N/A       N/A        N/A  sample                374.784               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.90                                                                        N/A       N/A        N/A  sample                383.488               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.95                                                                        N/A       N/A        N/A  sample                387.072               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.99                                                                        N/A       N/A        N/A  sample                406.016               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.999                                                                       N/A       N/A        N/A  sample                474.542               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.9999                                                                      N/A       N/A        N/A  sample                766.976               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p1.00                                                                        N/A       N/A        N/A  sample                951.296               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A  sample   905939       165.305 ±     0.032   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.00                                                        N/A       N/A        N/A  sample                157.440               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.50                                                        N/A       N/A        N/A  sample                163.328               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.90                                                        N/A       N/A        N/A  sample                171.008               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.95                                                        N/A       N/A        N/A  sample                174.848               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.99                                                        N/A       N/A        N/A  sample                184.576               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.999                                                       N/A       N/A        N/A  sample                242.432               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.9999                                                      N/A       N/A        N/A  sample                326.048               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p1.00                                                        N/A       N/A        N/A  sample               2826.240               us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A  sample   475124       315.386 ±     0.054   us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.00                                                                        N/A       N/A        N/A  sample                303.104               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.50                                                                        N/A       N/A        N/A  sample                313.344               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.90                                                                        N/A       N/A        N/A  sample                327.168               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.95                                                                        N/A       N/A        N/A  sample                328.704               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.99                                                                        N/A       N/A        N/A  sample                333.824               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.999                                                                       N/A       N/A        N/A  sample                373.760               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.9999                                                                      N/A       N/A        N/A  sample                500.224               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p1.00                                                                        N/A       N/A        N/A  sample                860.160               us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A  sample   840019       178.290 ±     0.030   us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.00                                                                      N/A       N/A        N/A  sample                168.960               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.50                                                                      N/A       N/A        N/A  sample                176.640               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.90                                                                      N/A       N/A        N/A  sample                184.832               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.95                                                                      N/A       N/A        N/A  sample                188.416               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.99                                                                      N/A       N/A        N/A  sample                199.168               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.999                                                                     N/A       N/A        N/A  sample                259.840               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.9999                                                                    N/A       N/A        N/A  sample                354.304               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p1.00                                                                      N/A       N/A        N/A  sample               2129.920               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A  sample      120   1331901.235 ±   826.469   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.00                                          N/A       N/A        N/A  sample            1325400.064               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.50                                          N/A       N/A        N/A  sample            1331691.520               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.90                                          N/A       N/A        N/A  sample            1335676.109               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.95                                          N/A       N/A        N/A  sample            1337878.118               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.99                                          N/A       N/A        N/A  sample            1340080.128               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.999                                         N/A       N/A        N/A  sample            1340080.128               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.9999                                        N/A       N/A        N/A  sample            1340080.128               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p1.00                                          N/A       N/A        N/A  sample            1340080.128               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A  sample     1196    126310.119 ±   289.532   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.00                                  N/A       100        N/A  sample             120717.312               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.50                                  N/A       100        N/A  sample             126222.336               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.90                                  N/A       100        N/A  sample             131465.216               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.95                                  N/A       100        N/A  sample             132513.792               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.99                                  N/A       100        N/A  sample             133308.088               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.999                                 N/A       100        N/A  sample             135004.160               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.9999                                N/A       100        N/A  sample             135004.160               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p1.00                                  N/A       100        N/A  sample             135004.160               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A  sample       45   3378092.442 ± 14443.689   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.00                                  N/A      1000        N/A  sample            3326083.072               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.50                                  N/A      1000        N/A  sample            3376414.720               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.90                                  N/A      1000        N/A  sample            3410808.013               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.95                                  N/A      1000        N/A  sample            3425488.077               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.99                                  N/A      1000        N/A  sample            3447717.888               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.999                                 N/A      1000        N/A  sample            3447717.888               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.9999                                N/A      1000        N/A  sample            3447717.888               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p1.00                                  N/A      1000        N/A  sample            3447717.888               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A  sample  5016275         1.900 ±     0.001   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                                521       N/A        N/A  sample                  1.848               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                                521       N/A        N/A  sample                  1.874               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                                521       N/A        N/A  sample                  1.888               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                                521       N/A        N/A  sample                  1.894               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                                521       N/A        N/A  sample                  1.922               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                               521       N/A        N/A  sample                  9.392               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                              521       N/A        N/A  sample                 27.832               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                                521       N/A        N/A  sample                182.272               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A  sample  3781494         4.978 ±     0.004   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                               1153       N/A        N/A  sample                  4.760               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                               1153       N/A        N/A  sample                  4.912               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                               1153       N/A        N/A  sample                  4.968               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                               1153       N/A        N/A  sample                  4.992               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                               1153       N/A        N/A  sample                  5.392               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                              1153       N/A        N/A  sample                 15.504               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                             1153       N/A        N/A  sample                 42.368               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                               1153       N/A        N/A  sample               4161.536               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A  sample  4140353         9.054 ±     0.005   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                               2021       N/A        N/A  sample                  8.624               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                               2021       N/A        N/A  sample                  8.944               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                               2021       N/A        N/A  sample                  9.040               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                               2021       N/A        N/A  sample                  9.072               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                               2021       N/A        N/A  sample                 12.864               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                              2021       N/A        N/A  sample                 21.120               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                             2021       N/A        N/A  sample                 50.875               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                               2021       N/A        N/A  sample               2740.224               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10  sample  5114648         0.095 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A         10  sample                  0.071               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A         10  sample                  0.088               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A         10  sample                  0.107               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A         10  sample                  0.108               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A         10  sample                  0.116               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A         10  sample                  0.180               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A         10  sample                  8.000               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A         10  sample                151.808               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100  sample  3533031         0.374 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A        100  sample                  0.312               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A        100  sample                  0.359               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A        100  sample                  0.386               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A        100  sample                  0.395               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A        100  sample                  0.404               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A        100  sample                  4.352               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A        100  sample                 13.419               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A        100  sample                342.016               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000  sample  4486425         4.205 ±     0.002   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A       1000  sample                  3.948               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A       1000  sample                  4.152               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A       1000  sample                  4.232               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A       1000  sample                  4.248               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A       1000  sample                  4.360               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A       1000  sample                 13.184               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A       1000  sample                 42.903               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A       1000  sample               1368.064               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10  sample  5140295         0.094 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A         10  sample                  0.068               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A         10  sample                  0.088               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A         10  sample                  0.106               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A         10  sample                  0.108               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A         10  sample                  0.112               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A         10  sample                  0.174               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A         10  sample                  7.672               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A         10  sample                132.864               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100  sample  5395859         0.470 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A        100  sample                  0.443               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A        100  sample                  0.460               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A        100  sample                  0.464               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A        100  sample                  0.466               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A        100  sample                  0.475               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A        100  sample                  4.080               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A        100  sample                 11.575               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A        100  sample                166.400               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000  sample  4627620         4.081 ±     0.002   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A       1000  sample                  3.908               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A       1000  sample                  4.036               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A       1000  sample                  4.080               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A       1000  sample                  4.096               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A       1000  sample                  4.184               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A       1000  sample                 13.072               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A       1000  sample                 43.072               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A       1000  sample                434.688               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A  sample    10515     14262.757 ±     1.753   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.00                                  N/A       N/A        N/A  sample              14172.160               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.50                                  N/A       N/A        N/A  sample              14254.080               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.90                                  N/A       N/A        N/A  sample              14319.616               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.95                                  N/A       N/A        N/A  sample              14352.384               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.99                                  N/A       N/A        N/A  sample              14483.456               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.999                                 N/A       N/A        N/A  sample              14737.146               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.9999                                N/A       N/A        N/A  sample              14892.211               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p1.00                                  N/A       N/A        N/A  sample              14893.056               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A  sample   475772       314.908 ±     0.093   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A       100        N/A  sample                301.056               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A       100        N/A  sample                312.320               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A       100        N/A  sample                324.096               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A       100        N/A  sample                328.192               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A       100        N/A  sample                356.352               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A       100        N/A  sample                676.864               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A       100        N/A  sample                757.169               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A       100        N/A  sample                891.904               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A  sample     4816     31166.450 ±    28.296   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A      1000        N/A  sample              30638.080               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A      1000        N/A  sample              30867.456               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A      1000        N/A  sample              32276.480               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A      1000        N/A  sample              32374.784               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A      1000        N/A  sample              32571.392               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A      1000        N/A  sample              32970.605               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A      1000        N/A  sample              33226.752               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A      1000        N/A  sample              33226.752               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A  sample       15  11378307.891 ±  7426.152   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A     10000        N/A  sample           11374952.448               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A     10000        N/A  sample           11374952.448               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A     10000        N/A  sample           11391729.664               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A     10000        N/A  sample           11391729.664               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A     10000        N/A  sample           11391729.664               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A     10000        N/A  sample           11391729.664               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A     10000        N/A  sample           11391729.664               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A     10000        N/A  sample           11391729.664               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A  sample    75622      1982.497 ±     1.270   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.00             N/A       N/A        N/A  sample               1855.488               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.50             N/A       N/A        N/A  sample               2048.000               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.90             N/A       N/A        N/A  sample               2068.480               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.95             N/A       N/A        N/A  sample               2078.720               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.99             N/A       N/A        N/A  sample               2117.632               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.999            N/A       N/A        N/A  sample               2262.536               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.9999           N/A       N/A        N/A  sample               4333.568               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p1.00             N/A       N/A        N/A  sample               4407.296               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A  sample     2416     62141.854 ±    18.378   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.00                     N/A       N/A        N/A  sample              60489.728               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.50                     N/A       N/A        N/A  sample              62193.664               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.90                     N/A       N/A        N/A  sample              62390.272               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.95                     N/A       N/A        N/A  sample              62455.808               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.99                     N/A       N/A        N/A  sample              62914.560               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.999                    N/A       N/A        N/A  sample              63542.591               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.9999                   N/A       N/A        N/A  sample              63700.992               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p1.00                     N/A       N/A        N/A  sample              63700.992               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A  sample       95   1702997.800 ±   606.573   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.00                                                 N/A       N/A        N/A  sample            1700790.272               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.50                                                 N/A       N/A        N/A  sample            1702887.424               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.90                                                 N/A       N/A        N/A  sample            1704984.576               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.95                                                 N/A       N/A        N/A  sample            1705404.006               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.99                                                 N/A       N/A        N/A  sample            1711276.032               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.999                                                N/A       N/A        N/A  sample            1711276.032               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.9999                                               N/A       N/A        N/A  sample            1711276.032               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p1.00                                                 N/A       N/A        N/A  sample            1711276.032               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A  sample  4397107         0.586 ±     0.001   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.00                       N/A       N/A        N/A  sample                  0.506               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.50                       N/A       N/A        N/A  sample                  0.569               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.90                       N/A       N/A        N/A  sample                  0.588               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.95                       N/A       N/A        N/A  sample                  0.600               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.99                       N/A       N/A        N/A  sample                  0.639               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.999                      N/A       N/A        N/A  sample                  4.896               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.9999                     N/A       N/A        N/A  sample                 14.062               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p1.00                       N/A       N/A        N/A  sample                502.272               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A  sample    21580      6949.294 ±     1.614   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.00                                   N/A       N/A        N/A  sample               6791.168               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.50                                   N/A       N/A        N/A  sample               6938.624               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.90                                   N/A       N/A        N/A  sample               6971.392               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.95                                   N/A       N/A        N/A  sample               6987.776               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.99                                   N/A       N/A        N/A  sample               7077.888               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.999                                  N/A       N/A        N/A  sample               8239.825               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.9999                                 N/A       N/A        N/A  sample               9482.776               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p1.00                                   N/A       N/A        N/A  sample              10371.072               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A  sample     4660     32226.955 ±   113.926   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.00                                             N/A       N/A        N/A  sample              28835.840               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.50                                             N/A       N/A        N/A  sample              31686.656               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.90                                             N/A       N/A        N/A  sample              35389.440               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.95                                             N/A       N/A        N/A  sample              38010.880               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.99                                             N/A       N/A        N/A  sample              38338.560               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.999                                            N/A       N/A        N/A  sample              38797.312               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.9999                                           N/A       N/A        N/A  sample              41418.752               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p1.00                                             N/A       N/A        N/A  sample              41418.752               us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A  sample     4319     34752.865 ±   316.516   us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.00                                                              N/A       N/A        N/A  sample              33062.912               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.50                                                              N/A       N/A        N/A  sample              33292.288               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.90                                                              N/A       N/A        N/A  sample              33554.432               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.95                                                              N/A       N/A        N/A  sample              44761.088               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.99                                                              N/A       N/A        N/A  sample              69677.875               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.999                                                             N/A       N/A        N/A  sample              77201.408               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.9999                                                            N/A       N/A        N/A  sample              77725.696               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p1.00                                                              N/A       N/A        N/A  sample              77725.696               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A  sample     4371     34374.524 ±   561.392   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.00                                                            N/A       N/A        N/A  sample              22151.168               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.50                                                            N/A       N/A        N/A  sample              37355.520               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.90                                                            N/A       N/A        N/A  sample              38273.024               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.95                                                            N/A       N/A        N/A  sample              57016.320               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.99                                                            N/A       N/A        N/A  sample              78679.900               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.999                                                           N/A       N/A        N/A  sample              88080.384               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.9999                                                          N/A       N/A        N/A  sample              88342.528               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p1.00                                                            N/A       N/A        N/A  sample              88342.528               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A  sample    10820     13861.910 ±    16.465   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.00                                                                N/A       N/A        N/A  sample              13549.568               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.50                                                                N/A       N/A        N/A  sample              13746.176               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.90                                                                N/A       N/A        N/A  sample              13926.400               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.95                                                                N/A       N/A        N/A  sample              14516.224               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.99                                                                N/A       N/A        N/A  sample              16777.216               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.999                                                               N/A       N/A        N/A  sample              17367.040               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.9999                                                              N/A       N/A        N/A  sample              22312.318               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p1.00                                                                N/A       N/A        N/A  sample              22315.008               us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A  sample     4827     31096.377 ±    58.337   us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.00                                                                      N/A       N/A        N/A  sample              28966.912               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.50                                                                      N/A       N/A        N/A  sample              31162.368               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.90                                                                      N/A       N/A        N/A  sample              32309.248               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.95                                                                      N/A       N/A        N/A  sample              33488.896               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.99                                                                      N/A       N/A        N/A  sample              34453.586               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.999                                                                     N/A       N/A        N/A  sample              36711.432               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.9999                                                                    N/A       N/A        N/A  sample              40173.568               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p1.00                                                                      N/A       N/A        N/A  sample              40173.568               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A  sample   236710       633.040 ±     0.250   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A        10        N/A  sample                576.512               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A        10        N/A  sample                628.736               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A        10        N/A  sample                654.336               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A        10        N/A  sample                664.576               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A        10        N/A  sample                726.016               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A        10        N/A  sample               1026.048               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A        10        N/A  sample               1119.555               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A        10        N/A  sample               3735.552               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A  sample    23149      6477.261 ±     4.941   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A       100        N/A  sample               6029.312               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A       100        N/A  sample               6430.720               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A       100        N/A  sample               6791.168               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A       100        N/A  sample               6873.088               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A       100        N/A  sample               7102.464               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A       100        N/A  sample               7307.264               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A       100        N/A  sample               8076.780               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A       100        N/A  sample              10125.312               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A  sample     1434    105016.002 ±   154.262   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A      1000        N/A  sample              99090.432               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A      1000        N/A  sample             104988.672               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A      1000        N/A  sample             107347.968               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A      1000        N/A  sample             107872.256               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A      1000        N/A  sample             109051.904               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A      1000        N/A  sample             110265.631               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A      1000        N/A  sample             110493.696               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A      1000        N/A  sample             110493.696               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A  sample      105   1663480.939 ± 64100.811   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.00                        N/A       N/A        N/A  sample            1432354.816               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.50                        N/A       N/A        N/A  sample            1646264.320               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.90                        N/A       N/A        N/A  sample            2083310.797               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.95                        N/A       N/A        N/A  sample            2094425.702               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.99                        N/A       N/A        N/A  sample            2107260.273               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.999                       N/A       N/A        N/A  sample            2107637.760               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.9999                      N/A       N/A        N/A  sample            2107637.760               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p1.00                        N/A       N/A        N/A  sample            2107637.760               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024      ss       15    222417.315 ±  3858.398   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240      ss       15    221300.595 ±  1498.433   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400      ss       15    194128.307 ± 18407.142   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576      ss       15    199400.973 ±  1513.219   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760      ss       15    198811.679 ±  1243.378   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600      ss       15    195743.710 ±  1345.524   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024      ss       15   1191730.248 ±  6044.251   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240      ss       15    922692.325 ±  5374.579   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400      ss       15    798714.757 ±  2993.926   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576      ss       15    784569.808 ±  5244.269   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760      ss       15    776091.170 ±  3348.507   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600      ss       15    914215.738 ±  6605.278   us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A      ss       15       428.628 ±    29.929   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A      ss       15       241.105 ±    21.791   us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A      ss       15       294.302 ±     5.458   us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A      ss       15       285.843 ±    40.214   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A      ss       15   1090034.097 ± 94747.071   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A      ss       15    148266.545 ±  1362.550   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A      ss       15   2686730.616 ± 30554.049   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A      ss       15        13.893 ±     1.534   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A      ss       15        21.961 ±    25.937   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A      ss       15        21.073 ±     1.461   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10      ss       15         9.601 ±     7.881   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100      ss       15        19.560 ±    14.755   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000      ss       15       102.637 ±    22.729   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10      ss       15         7.227 ±     0.468   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100      ss       15        16.382 ±     1.848   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000      ss       15        96.303 ±    14.841   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A      ss       15     14567.674 ±   234.851   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A      ss       15      1580.781 ±   492.397   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A      ss       15     68309.165 ± 42727.423   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A      ss       15  11083198.844 ± 39807.369   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A      ss       15      1887.209 ±    40.466   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A      ss       15     62194.136 ±   189.153   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A      ss       15   1704135.909 ±  1214.529   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A      ss       15        15.964 ±    13.773   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A      ss       15      7671.794 ±    59.385   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A      ss       15     33648.786 ±  2819.436   us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A      ss       15     33455.778 ±   266.941   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A      ss       15     21716.414 ±   111.848   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A      ss       15     13901.811 ±    65.733   us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A      ss       15     30743.033 ±  1251.370   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A      ss       15       883.149 ±   116.106   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A      ss       15      7008.763 ±   468.492   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A      ss       15    107965.569 ±  1487.638   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A      ss       15   1658870.609 ± 14201.232   us/op
