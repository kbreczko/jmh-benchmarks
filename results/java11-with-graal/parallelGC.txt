# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 512)

# Run progress: 39.44% complete, ETA 02:25:27
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2058354688, numberOfObjects: 2814156
5739871.287 us/op
# Warmup Iteration   2: MaxHeap:1908932608, numberOfObjects: 2609868
5492265.501 us/op
# Warmup Iteration   3: MaxHeap:1908932608, numberOfObjects: 2609868
5315474.456 us/op
# Warmup Iteration   4: MaxHeap:1908932608, numberOfObjects: 2609868
5466804.277 us/op
# Warmup Iteration   5: MaxHeap:1908932608, numberOfObjects: 2609868
5136454.700 us/op
Iteration   1: MaxHeap:1908932608, numberOfObjects: 2609868
5572429.714 us/op
Iteration   2: MaxHeap:1908932608, numberOfObjects: 2609868
5264384.152 us/op
Iteration   3: MaxHeap:1908932608, numberOfObjects: 2609868
5536028.823 us/op
Iteration   4: MaxHeap:1908932608, numberOfObjects: 2609868
5345593.027 us/op
Iteration   5: MaxHeap:1908932608, numberOfObjects: 2609868
5250739.091 us/op
Iteration   6: MaxHeap:1908932608, numberOfObjects: 2609868
5469133.087 us/op
Iteration   7: MaxHeap:1908932608, numberOfObjects: 2609868
5158845.109 us/op
Iteration   8: MaxHeap:1908932608, numberOfObjects: 2609868
5515446.625 us/op
Iteration   9: MaxHeap:1908932608, numberOfObjects: 2609868
5517539.981 us/op
Iteration  10: MaxHeap:1908932608, numberOfObjects: 2609868
5228376.357 us/op
Iteration  11: MaxHeap:1908932608, numberOfObjects: 2609868
5371150.583 us/op
Iteration  12: MaxHeap:1908932608, numberOfObjects: 2609868
5142029.402 us/op
Iteration  13: MaxHeap:1908932608, numberOfObjects: 2609868
5513764.628 us/op
Iteration  14: MaxHeap:1908932608, numberOfObjects: 2609868
5455909.373 us/op
Iteration  15: MaxHeap:1908932608, numberOfObjects: 2609868
5348988.924 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  5379357.258 ±(99.9%) 154144.896 us/op [Average]
  (min, avg, max) = (5142029.402, 5379357.258, 5572429.714), stdev = 144187.231
  CI (99.9%): [5225212.362, 5533502.154] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 40.85% complete, ETA 02:22:25
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2058354688, numberOfObjects: 1407078
4200355.075 us/op
# Warmup Iteration   2: MaxHeap:1908932608, numberOfObjects: 1304934
3723007.828 us/op
# Warmup Iteration   3: MaxHeap:1908932608, numberOfObjects: 1304934
3756421.852 us/op
# Warmup Iteration   4: MaxHeap:1908932608, numberOfObjects: 1304934
3781956.145 us/op
# Warmup Iteration   5: MaxHeap:1908932608, numberOfObjects: 1304934
3788930.627 us/op
Iteration   1: MaxHeap:1908932608, numberOfObjects: 1304934
3731981.709 us/op
Iteration   2: MaxHeap:1908932608, numberOfObjects: 1304934
3778527.593 us/op
Iteration   3: MaxHeap:1908932608, numberOfObjects: 1304934
3883949.964 us/op
Iteration   4: MaxHeap:1908932608, numberOfObjects: 1304934
3692745.775 us/op
Iteration   5: MaxHeap:1908932608, numberOfObjects: 1304934
3787560.147 us/op
Iteration   6: MaxHeap:1908932608, numberOfObjects: 1304934
3844499.562 us/op
Iteration   7: MaxHeap:1908932608, numberOfObjects: 1304934
3817442.536 us/op
Iteration   8: MaxHeap:1908932608, numberOfObjects: 1304934
3625740.077 us/op
Iteration   9: MaxHeap:1908932608, numberOfObjects: 1304934
3694195.824 us/op
Iteration  10: MaxHeap:1908932608, numberOfObjects: 1304934
3771827.353 us/op
Iteration  11: MaxHeap:1908932608, numberOfObjects: 1304934
3665286.466 us/op
Iteration  12: MaxHeap:1908932608, numberOfObjects: 1304934
3789412.929 us/op
Iteration  13: MaxHeap:1908932608, numberOfObjects: 1304934
3652672.107 us/op
Iteration  14: MaxHeap:1908932608, numberOfObjects: 1304934
3749925.607 us/op
Iteration  15: MaxHeap:1908932608, numberOfObjects: 1304934
3713111.834 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  3746591.966 ±(99.9%) 78595.238 us/op [Average]
  (min, avg, max) = (3625740.077, 3746591.966, 3883949.964), stdev = 73518.034
  CI (99.9%): [3667996.728, 3825187.204] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 2048)

# Run progress: 42.25% complete, ETA 02:19:35
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2058354688, numberOfObjects: 703539
2931762.949 us/op
# Warmup Iteration   2: MaxHeap:1908932608, numberOfObjects: 652467
2525504.232 us/op
# Warmup Iteration   3: MaxHeap:1908932608, numberOfObjects: 652467
2530909.795 us/op
# Warmup Iteration   4: MaxHeap:1908932608, numberOfObjects: 652467
2637922.480 us/op
# Warmup Iteration   5: MaxHeap:1908932608, numberOfObjects: 652467
2611616.829 us/op
Iteration   1: MaxHeap:1908932608, numberOfObjects: 652467
2492482.374 us/op
Iteration   2: MaxHeap:1908932608, numberOfObjects: 652467
2517267.974 us/op
Iteration   3: MaxHeap:1908932608, numberOfObjects: 652467
2501899.773 us/op
Iteration   4: MaxHeap:1908932608, numberOfObjects: 652467
2524367.703 us/op
Iteration   5: MaxHeap:1908932608, numberOfObjects: 652467
2535372.825 us/op
Iteration   6: MaxHeap:1908932608, numberOfObjects: 652467
2495359.161 us/op
Iteration   7: MaxHeap:1908932608, numberOfObjects: 652467
2540361.605 us/op
Iteration   8: MaxHeap:1908932608, numberOfObjects: 652467
2519760.899 us/op
Iteration   9: MaxHeap:1908932608, numberOfObjects: 652467
2474259.060 us/op
Iteration  10: MaxHeap:1908932608, numberOfObjects: 652467
2513313.408 us/op
Iteration  11: MaxHeap:1908932608, numberOfObjects: 652467
2552166.533 us/op
Iteration  12: MaxHeap:1908932608, numberOfObjects: 652467
2595654.675 us/op
Iteration  13: MaxHeap:1908932608, numberOfObjects: 652467
2629086.815 us/op
Iteration  14: MaxHeap:1908932608, numberOfObjects: 652467
2571180.627 us/op
Iteration  15: MaxHeap:1908932608, numberOfObjects: 652467
2509643.306 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  2531478.449 ±(99.9%) 44184.969 us/op [Average]
  (min, avg, max) = (2474259.060, 2531478.449, 2629086.815), stdev = 41330.648
  CI (99.9%): [2487293.480, 2575663.419] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 43.66% complete, ETA 02:16:27
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2058354688, numberOfObjects: 140707
2283035.175 us/op
# Warmup Iteration   2: MaxHeap:1908932608, numberOfObjects: 130493
1801996.476 us/op
# Warmup Iteration   3: MaxHeap:1908932608, numberOfObjects: 130493
1789157.760 us/op
# Warmup Iteration   4: MaxHeap:1908932608, numberOfObjects: 130493
1762855.719 us/op
# Warmup Iteration   5: MaxHeap:1908932608, numberOfObjects: 130493
1704582.251 us/op
Iteration   1: MaxHeap:1908932608, numberOfObjects: 130493
1767848.888 us/op
Iteration   2: MaxHeap:1908932608, numberOfObjects: 130493
1771591.877 us/op
Iteration   3: MaxHeap:1908932608, numberOfObjects: 130493
1773437.234 us/op
Iteration   4: MaxHeap:1908932608, numberOfObjects: 130493
1778540.320 us/op
Iteration   5: MaxHeap:1908932608, numberOfObjects: 130493
1775598.743 us/op
Iteration   6: MaxHeap:1908932608, numberOfObjects: 130493
1770814.181 us/op
Iteration   7: MaxHeap:1908932608, numberOfObjects: 130493
1751950.096 us/op
Iteration   8: MaxHeap:1908932608, numberOfObjects: 130493
1768485.027 us/op
Iteration   9: MaxHeap:1908932608, numberOfObjects: 130493
1769355.360 us/op
Iteration  10: MaxHeap:1908932608, numberOfObjects: 130493
1794179.715 us/op
Iteration  11: MaxHeap:1908932608, numberOfObjects: 130493
1745749.235 us/op
Iteration  12: MaxHeap:1908932608, numberOfObjects: 130493
1733521.938 us/op
Iteration  13: MaxHeap:1908932608, numberOfObjects: 130493
1749947.274 us/op
Iteration  14: MaxHeap:1908932608, numberOfObjects: 130493
1554541.584 us/op
Iteration  15: MaxHeap:1908932608, numberOfObjects: 130493
1536884.472 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1736163.063 ±(99.9%) 84250.165 us/op [Average]
  (min, avg, max) = (1536884.472, 1736163.063, 1794179.715), stdev = 78807.657
  CI (99.9%): [1651912.898, 1820413.228] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 45.07% complete, ETA 02:13:14
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2058354688, numberOfObjects: 14070
2153050.755 us/op
# Warmup Iteration   2: MaxHeap:1908932608, numberOfObjects: 13049
1785492.058 us/op
# Warmup Iteration   3: MaxHeap:1909456896, numberOfObjects: 13052
1706968.814 us/op
# Warmup Iteration   4: MaxHeap:1909456896, numberOfObjects: 13052
1735654.061 us/op
# Warmup Iteration   5: MaxHeap:1909456896, numberOfObjects: 13052
1708781.719 us/op
Iteration   1: MaxHeap:1909456896, numberOfObjects: 13052
1707355.850 us/op
Iteration   2: MaxHeap:1908932608, numberOfObjects: 13049
1764459.452 us/op
Iteration   3: MaxHeap:1908932608, numberOfObjects: 13049
1742839.465 us/op
Iteration   4: MaxHeap:1908932608, numberOfObjects: 13049
1705509.459 us/op
Iteration   5: MaxHeap:1908932608, numberOfObjects: 13049
1698096.770 us/op
Iteration   6: MaxHeap:1908932608, numberOfObjects: 13049
1719583.962 us/op
Iteration   7: MaxHeap:1909456896, numberOfObjects: 13052
1747682.304 us/op
Iteration   8: MaxHeap:1909456896, numberOfObjects: 13052
1746951.465 us/op
Iteration   9: MaxHeap:1908932608, numberOfObjects: 13049
1718823.580 us/op
Iteration  10: MaxHeap:1908932608, numberOfObjects: 13049
1752416.455 us/op
Iteration  11: MaxHeap:1908932608, numberOfObjects: 13049
1730455.352 us/op
Iteration  12: MaxHeap:1908932608, numberOfObjects: 13049
1711196.581 us/op
Iteration  13: MaxHeap:1908932608, numberOfObjects: 13049
1717279.041 us/op
Iteration  14: MaxHeap:1908932608, numberOfObjects: 13049
1782750.371 us/op
Iteration  15: MaxHeap:1908932608, numberOfObjects: 13049
1723271.056 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1731244.744 ±(99.9%) 25776.216 us/op [Average]
  (min, avg, max) = (1698096.770, 1731244.744, 1782750.371), stdev = 24111.088
  CI (99.9%): [1705468.529, 1757020.960] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 46.48% complete, ETA 02:09:55
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2058354688, numberOfObjects: 1374
1821886.899 us/op
# Warmup Iteration   2: MaxHeap:2057830400, numberOfObjects: 1373
1752727.139 us/op
# Warmup Iteration   3: MaxHeap:2057830400, numberOfObjects: 1373
1579189.106 us/op
# Warmup Iteration   4: MaxHeap:2057830400, numberOfObjects: 1373
1628627.270 us/op
# Warmup Iteration   5: MaxHeap:2057830400, numberOfObjects: 1373
1647712.813 us/op
Iteration   1: MaxHeap:2057830400, numberOfObjects: 1373
1681786.304 us/op
Iteration   2: MaxHeap:2057830400, numberOfObjects: 1373
1611237.202 us/op
Iteration   3: MaxHeap:2057830400, numberOfObjects: 1373
1632238.863 us/op
Iteration   4: MaxHeap:2057830400, numberOfObjects: 1373
1620830.252 us/op
Iteration   5: MaxHeap:2057830400, numberOfObjects: 1373
1644150.591 us/op
Iteration   6: MaxHeap:2057830400, numberOfObjects: 1373
1652155.459 us/op
Iteration   7: MaxHeap:2057830400, numberOfObjects: 1373
1671120.052 us/op
Iteration   8: MaxHeap:2057830400, numberOfObjects: 1373
1614939.345 us/op
Iteration   9: MaxHeap:2057830400, numberOfObjects: 1373
1622054.590 us/op
Iteration  10: MaxHeap:2057830400, numberOfObjects: 1373
1641635.442 us/op
Iteration  11: MaxHeap:2057830400, numberOfObjects: 1373
1616559.635 us/op
Iteration  12: MaxHeap:2057830400, numberOfObjects: 1373
1651776.690 us/op
Iteration  13: MaxHeap:2057830400, numberOfObjects: 1373
1671993.486 us/op
Iteration  14: MaxHeap:2057830400, numberOfObjects: 1373
1616354.822 us/op
Iteration  15: MaxHeap:2057830400, numberOfObjects: 1373
1623693.698 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1638168.429 ±(99.9%) 24865.211 us/op [Average]
  (min, avg, max) = (1611237.202, 1638168.429, 1681786.304), stdev = 23258.933
  CI (99.9%): [1613303.218, 1663033.639] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 2097152)

# Run progress: 47.89% complete, ETA 02:06:52
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2058354688, numberOfObjects: 687
1846828.712 us/op
# Warmup Iteration   2: MaxHeap:2058878976, numberOfObjects: 687
1781627.397 us/op
# Warmup Iteration   3: MaxHeap:2058878976, numberOfObjects: 687
1772063.836 us/op
# Warmup Iteration   4: MaxHeap:2058878976, numberOfObjects: 687
1697559.201 us/op
# Warmup Iteration   5: MaxHeap:2058878976, numberOfObjects: 687
1577840.168 us/op
Iteration   1: MaxHeap:2058878976, numberOfObjects: 687
1588639.958 us/op
Iteration   2: MaxHeap:2058878976, numberOfObjects: 687
1876283.967 us/op
Iteration   3: MaxHeap:1909981184, numberOfObjects: 637
1611697.811 us/op
Iteration   4: MaxHeap:1909981184, numberOfObjects: 637
1543928.752 us/op
Iteration   5: MaxHeap:1909981184, numberOfObjects: 637
1537169.148 us/op
Iteration   6: MaxHeap:1909981184, numberOfObjects: 637
1543694.276 us/op
Iteration   7: MaxHeap:1909981184, numberOfObjects: 637
1531538.686 us/op
Iteration   8: MaxHeap:1909981184, numberOfObjects: 637
1533063.544 us/op
Iteration   9: MaxHeap:1909981184, numberOfObjects: 637
1538189.082 us/op
Iteration  10: MaxHeap:1909981184, numberOfObjects: 637
1527021.207 us/op
Iteration  11: MaxHeap:1909981184, numberOfObjects: 637
1528649.645 us/op
Iteration  12: MaxHeap:1909981184, numberOfObjects: 637
1572779.417 us/op
Iteration  13: MaxHeap:1909981184, numberOfObjects: 637
1537830.307 us/op
Iteration  14: MaxHeap:1909981184, numberOfObjects: 637
1510522.492 us/op
Iteration  15: MaxHeap:1909981184, numberOfObjects: 637
1569278.215 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1570019.100 ±(99.9%) 94907.934 us/op [Average]
  (min, avg, max) = (1510522.492, 1570019.100, 1876283.967), stdev = 88776.940
  CI (99.9%): [1475111.167, 1664927.034] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 49.30% complete, ETA 02:03:39
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2058354688, numberOfObjects: 137
1963345.356 us/op
# Warmup Iteration   2: MaxHeap:1916272640, numberOfObjects: 127
1556738.063 us/op
# Warmup Iteration   3: MaxHeap:1916272640, numberOfObjects: 127
1543667.272 us/op
# Warmup Iteration   4: MaxHeap:1916272640, numberOfObjects: 127
1570044.250 us/op
# Warmup Iteration   5: MaxHeap:1916272640, numberOfObjects: 127
1571959.008 us/op
Iteration   1: MaxHeap:1916272640, numberOfObjects: 127
1577041.578 us/op
Iteration   2: MaxHeap:1916272640, numberOfObjects: 127
1549683.075 us/op
Iteration   3: MaxHeap:1916272640, numberOfObjects: 127
1547185.577 us/op
Iteration   4: MaxHeap:1916272640, numberOfObjects: 127
1591155.778 us/op
Iteration   5: MaxHeap:1916272640, numberOfObjects: 127
1572949.895 us/op
Iteration   6: MaxHeap:1916272640, numberOfObjects: 127
1552724.367 us/op
Iteration   7: MaxHeap:1916272640, numberOfObjects: 127
1540787.108 us/op
Iteration   8: MaxHeap:1916272640, numberOfObjects: 127
1581429.567 us/op
Iteration   9: MaxHeap:1916272640, numberOfObjects: 127
1584171.495 us/op
Iteration  10: MaxHeap:1916272640, numberOfObjects: 127
1577812.969 us/op
Iteration  11: MaxHeap:1916272640, numberOfObjects: 127
1532303.637 us/op
Iteration  12: MaxHeap:1916272640, numberOfObjects: 127
1548274.383 us/op
Iteration  13: MaxHeap:1916272640, numberOfObjects: 127
1587692.178 us/op
Iteration  14: MaxHeap:1916272640, numberOfObjects: 127
1592167.440 us/op
Iteration  15: MaxHeap:1916272640, numberOfObjects: 127
1562564.873 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1566529.595 ±(99.9%) 21296.148 us/op [Average]
  (min, avg, max) = (1532303.637, 1566529.595, 1592167.440), stdev = 19920.430
  CI (99.9%): [1545233.447, 1587825.743] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 50.70% complete, ETA 02:00:28
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2058354688, numberOfObjects: 13
1782527.575 us/op
# Warmup Iteration   2: MaxHeap:2145910784, numberOfObjects: 14
1833238.164 us/op
# Warmup Iteration   3: MaxHeap:2146959360, numberOfObjects: 14
1820947.035 us/op
# Warmup Iteration   4: MaxHeap:2146959360, numberOfObjects: 14
1835991.534 us/op
# Warmup Iteration   5: MaxHeap:2146959360, numberOfObjects: 14
1829450.419 us/op
Iteration   1: MaxHeap:2146959360, numberOfObjects: 14
1823678.056 us/op
Iteration   2: MaxHeap:2146959360, numberOfObjects: 14
1821643.861 us/op
Iteration   3: MaxHeap:2146959360, numberOfObjects: 14
1802505.392 us/op
Iteration   4: MaxHeap:2146959360, numberOfObjects: 14
1831891.905 us/op
Iteration   5: MaxHeap:2146959360, numberOfObjects: 14
1825174.712 us/op
Iteration   6: MaxHeap:2146959360, numberOfObjects: 14
1817540.805 us/op
Iteration   7: MaxHeap:2146959360, numberOfObjects: 14
1824566.965 us/op
Iteration   8: MaxHeap:2146959360, numberOfObjects: 14
1825184.338 us/op
Iteration   9: MaxHeap:2146959360, numberOfObjects: 14
1826632.281 us/op
Iteration  10: MaxHeap:2146959360, numberOfObjects: 14
1799581.958 us/op
Iteration  11: MaxHeap:2146959360, numberOfObjects: 14
1820725.967 us/op
Iteration  12: MaxHeap:2146959360, numberOfObjects: 14
1810867.517 us/op
Iteration  13: MaxHeap:2146959360, numberOfObjects: 14
1818811.436 us/op
Iteration  14: MaxHeap:2146959360, numberOfObjects: 14
1832910.210 us/op
Iteration  15: MaxHeap:2146959360, numberOfObjects: 14
1826109.525 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1820521.662 ±(99.9%) 10263.668 us/op [Average]
  (min, avg, max) = (1799581.958, 1820521.662, 1832910.210), stdev = 9600.641
  CI (99.9%): [1810257.994, 1830785.329] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 52.11% complete, ETA 01:57:14
# Fork: 1 of 1
# Warmup Iteration   1: 578.947 us/op
# Warmup Iteration   2: 537.006 us/op
# Warmup Iteration   3: 535.954 us/op
# Warmup Iteration   4: 534.872 us/op
# Warmup Iteration   5: 534.386 us/op
Iteration   1: 535.160 us/op
Iteration   2: 534.485 us/op
Iteration   3: 534.495 us/op
Iteration   4: 534.456 us/op
Iteration   5: 534.691 us/op
Iteration   6: 534.579 us/op
Iteration   7: 535.008 us/op
Iteration   8: 535.221 us/op
Iteration   9: 535.533 us/op
Iteration  10: 535.095 us/op
Iteration  11: 534.964 us/op
Iteration  12: 534.976 us/op
Iteration  13: 535.256 us/op
Iteration  14: 535.244 us/op
Iteration  15: 535.079 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  534.949 ±(99.9%) 0.356 us/op [Average]
  (min, avg, max) = (534.456, 534.949, 535.533), stdev = 0.333
  CI (99.9%): [534.594, 535.305] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 53.52% complete, ETA 01:53:43
# Fork: 1 of 1
# Warmup Iteration   1: 709.429 us/op
# Warmup Iteration   2: 657.070 us/op
# Warmup Iteration   3: 656.584 us/op
# Warmup Iteration   4: 657.041 us/op
# Warmup Iteration   5: 665.766 us/op
Iteration   1: 667.939 us/op
Iteration   2: 667.382 us/op
Iteration   3: 659.097 us/op
Iteration   4: 655.105 us/op
Iteration   5: 654.934 us/op
Iteration   6: 655.704 us/op
Iteration   7: 654.888 us/op
Iteration   8: 655.050 us/op
Iteration   9: 655.286 us/op
Iteration  10: 654.963 us/op
Iteration  11: 655.607 us/op
Iteration  12: 655.471 us/op
Iteration  13: 655.551 us/op
Iteration  14: 655.046 us/op
Iteration  15: 655.289 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  657.154 ±(99.9%) 4.691 us/op [Average]
  (min, avg, max) = (654.888, 657.154, 667.939), stdev = 4.388
  CI (99.9%): [652.464, 661.845] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 56.34% complete, ETA 01:46:42
# Fork: 1 of 1
# Warmup Iteration   1: 577.328 us/op
# Warmup Iteration   2: 535.860 us/op
# Warmup Iteration   3: 535.834 us/op
# Warmup Iteration   4: 535.007 us/op
# Warmup Iteration   5: 534.730 us/op
Iteration   1: 535.906 us/op
Iteration   2: 535.343 us/op
Iteration   3: 534.977 us/op
Iteration   4: 535.356 us/op
Iteration   5: 535.173 us/op
Iteration   6: 534.963 us/op
Iteration   7: 535.021 us/op
Iteration   8: 535.317 us/op
Iteration   9: 535.491 us/op
Iteration  10: 535.529 us/op
Iteration  11: 535.435 us/op
Iteration  12: 535.691 us/op
Iteration  13: 535.031 us/op
Iteration  14: 535.336 us/op
Iteration  15: 534.975 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  535.303 ±(99.9%) 0.303 us/op [Average]
  (min, avg, max) = (534.963, 535.303, 535.906), stdev = 0.283
  CI (99.9%): [535.000, 535.606] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 57.75% complete, ETA 01:43:12
# Fork: 1 of 1
# Warmup Iteration   1: 1022609.783 us/op
# Warmup Iteration   2: 905973.966 us/op
# Warmup Iteration   3: 921757.401 us/op
# Warmup Iteration   4: 916587.056 us/op
# Warmup Iteration   5: 919580.616 us/op
Iteration   1: 920234.261 us/op
Iteration   2: 921173.000 us/op
Iteration   3: 915923.070 us/op
Iteration   4: 910059.513 us/op
Iteration   5: 921868.927 us/op
Iteration   6: 906278.368 us/op
Iteration   7: 924997.646 us/op
Iteration   8: 903389.821 us/op
Iteration   9: 925037.795 us/op
Iteration  10: 918060.626 us/op
Iteration  11: 910358.654 us/op
Iteration  12: 925639.448 us/op
Iteration  13: 926293.387 us/op
Iteration  14: 922116.324 us/op
Iteration  15: 917355.092 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  917919.062 ±(99.9%) 7822.334 us/op [Average]
  (min, avg, max) = (903389.821, 917919.062, 926293.387), stdev = 7317.016
  CI (99.9%): [910096.728, 925741.396] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 59.15% complete, ETA 01:39:46
# Fork: 1 of 1
# Warmup Iteration   1: 308373.208 us/op
# Warmup Iteration   2: 398830.199 us/op
# Warmup Iteration   3: 396470.940 us/op
# Warmup Iteration   4: 400933.282 us/op
# Warmup Iteration   5: 399198.852 us/op
Iteration   1: 400693.381 us/op
Iteration   2: 417339.237 us/op
Iteration   3: 414974.454 us/op
Iteration   4: 408252.493 us/op
Iteration   5: 436357.796 us/op
Iteration   6: 415293.466 us/op
Iteration   7: 400856.493 us/op
Iteration   8: 402614.355 us/op
Iteration   9: 395157.739 us/op
Iteration  10: 407527.161 us/op
Iteration  11: 402284.896 us/op
Iteration  12: 396553.585 us/op
Iteration  13: 400864.179 us/op
Iteration  14: 411811.601 us/op
Iteration  15: 421870.507 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  408830.090 ±(99.9%) 11791.011 us/op [Average]
  (min, avg, max) = (395157.739, 408830.090, 436357.796), stdev = 11029.319
  CI (99.9%): [397039.078, 420621.101] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 60.56% complete, ETA 01:36:19
# Fork: 1 of 1
# Warmup Iteration   1: 5115398.233 us/op
# Warmup Iteration   2: 4894953.965 us/op
# Warmup Iteration   3: 4702151.743 us/op
# Warmup Iteration   4: 4617299.470 us/op
# Warmup Iteration   5: 4638178.487 us/op
Iteration   1: 4948870.571 us/op
Iteration   2: 4879045.849 us/op
Iteration   3: 4782199.460 us/op
Iteration   4: 4866597.519 us/op
Iteration   5: 4984571.779 us/op
Iteration   6: 4687067.403 us/op
Iteration   7: 4779691.660 us/op
Iteration   8: 4706923.004 us/op
Iteration   9: 4585885.505 us/op
Iteration  10: 4822891.835 us/op
Iteration  11: 4721058.560 us/op
Iteration  12: 4752302.400 us/op
Iteration  13: 4644979.938 us/op
Iteration  14: 4911151.948 us/op
Iteration  15: 4519903.320 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  4772876.050 ±(99.9%) 142211.881 us/op [Average]
  (min, avg, max) = (4519903.320, 4772876.050, 4984571.779), stdev = 133025.081
  CI (99.9%): [4630664.169, 4915087.931] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 61.97% complete, ETA 01:33:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.733 us/op
# Warmup Iteration   2: 0.679 us/op
# Warmup Iteration   3: 0.678 us/op
# Warmup Iteration   4: 0.678 us/op
# Warmup Iteration   5: 0.678 us/op
Iteration   1: 0.678 us/op
Iteration   2: 0.678 us/op
Iteration   3: 0.678 us/op
Iteration   4: 0.678 us/op
Iteration   5: 0.678 us/op
Iteration   6: 0.678 us/op
Iteration   7: 0.678 us/op
Iteration   8: 0.678 us/op
Iteration   9: 0.678 us/op
Iteration  10: 0.678 us/op
Iteration  11: 0.678 us/op
Iteration  12: 0.678 us/op
Iteration  13: 0.678 us/op
Iteration  14: 0.678 us/op
Iteration  15: 0.678 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.678 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.678, 0.678, 0.678), stdev = 0.001
  CI (99.9%): [0.678, 0.678] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 63.38% complete, ETA 01:30:07
# Fork: 1 of 1
# Warmup Iteration   1: 1.749 us/op
# Warmup Iteration   2: 1.614 us/op
# Warmup Iteration   3: 1.611 us/op
# Warmup Iteration   4: 1.611 us/op
# Warmup Iteration   5: 1.611 us/op
Iteration   1: 1.611 us/op
Iteration   2: 1.611 us/op
Iteration   3: 1.611 us/op
Iteration   4: 1.611 us/op
Iteration   5: 1.610 us/op
Iteration   6: 1.611 us/op
Iteration   7: 1.612 us/op
Iteration   8: 1.612 us/op
Iteration   9: 1.611 us/op
Iteration  10: 1.611 us/op
Iteration  11: 1.611 us/op
Iteration  12: 1.611 us/op
Iteration  13: 1.614 us/op
Iteration  14: 1.612 us/op
Iteration  15: 1.611 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  1.611 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (1.610, 1.611, 1.614), stdev = 0.001
  CI (99.9%): [1.610, 1.612] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 64.79% complete, ETA 01:26:36
# Fork: 1 of 1
# Warmup Iteration   1: 3.037 us/op
# Warmup Iteration   2: 2.800 us/op
# Warmup Iteration   3: 2.797 us/op
# Warmup Iteration   4: 2.799 us/op
# Warmup Iteration   5: 2.796 us/op
Iteration   1: 2.796 us/op
Iteration   2: 2.799 us/op
Iteration   3: 2.797 us/op
Iteration   4: 2.797 us/op
Iteration   5: 2.797 us/op
Iteration   6: 2.796 us/op
Iteration   7: 2.796 us/op
Iteration   8: 2.797 us/op
Iteration   9: 2.798 us/op
Iteration  10: 2.798 us/op
Iteration  11: 2.798 us/op
Iteration  12: 2.798 us/op
Iteration  13: 2.797 us/op
Iteration  14: 2.797 us/op
Iteration  15: 2.796 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  2.797 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (2.796, 2.797, 2.799), stdev = 0.001
  CI (99.9%): [2.796, 2.798] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 76.06% complete, ETA 00:58:38
# Fork: 1 of 1
# Warmup Iteration   1: 505.894 us/op
# Warmup Iteration   2: 625.488 us/op
# Warmup Iteration   3: 623.158 us/op
# Warmup Iteration   4: 623.508 us/op
# Warmup Iteration   5: 620.598 us/op
Iteration   1: 622.061 us/op
Iteration   2: 622.219 us/op
Iteration   3: 622.284 us/op
Iteration   4: 622.223 us/op
Iteration   5: 620.229 us/op
Iteration   6: 617.257 us/op
Iteration   7: 619.754 us/op
Iteration   8: 616.120 us/op
Iteration   9: 615.708 us/op
Iteration  10: 622.027 us/op
Iteration  11: 619.034 us/op
Iteration  12: 623.043 us/op
Iteration  13: 618.403 us/op
Iteration  14: 620.314 us/op
Iteration  15: 619.064 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  619.983 ±(99.9%) 2.528 us/op [Average]
  (min, avg, max) = (615.708, 619.983, 623.043), stdev = 2.364
  CI (99.9%): [617.455, 622.510] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 77.46% complete, ETA 00:55:09
# Fork: 1 of 1
# Warmup Iteration   1: 42894.811 us/op
# Warmup Iteration   2: 40325.682 us/op
# Warmup Iteration   3: 40348.902 us/op
# Warmup Iteration   4: 40344.301 us/op
# Warmup Iteration   5: 40195.800 us/op
Iteration   1: 40396.030 us/op
Iteration   2: 40303.293 us/op
Iteration   3: 40470.721 us/op
Iteration   4: 40114.626 us/op
Iteration   5: 40250.905 us/op
Iteration   6: 40181.490 us/op
Iteration   7: 40343.735 us/op
Iteration   8: 40463.027 us/op
Iteration   9: 40587.124 us/op
Iteration  10: 40207.475 us/op
Iteration  11: 40400.531 us/op
Iteration  12: 40219.754 us/op
Iteration  13: 40262.731 us/op
Iteration  14: 40270.428 us/op
Iteration  15: 40423.176 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  40326.336 ±(99.9%) 137.699 us/op [Average]
  (min, avg, max) = (40114.626, 40326.336, 40587.124), stdev = 128.804
  CI (99.9%): [40188.637, 40464.036] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 78.87% complete, ETA 00:51:41
# Fork: 1 of 1
# Warmup Iteration   1: 5034791.498 us/op
# Warmup Iteration   2: 4148649.646 us/op
# Warmup Iteration   3: 4106856.313 us/op
# Warmup Iteration   4: 4109019.089 us/op
# Warmup Iteration   5: 4132613.026 us/op
Iteration   1: 4114792.696 us/op
Iteration   2: 4100021.927 us/op
Iteration   3: 4143095.947 us/op
Iteration   4: 4108541.236 us/op
Iteration   5: 4125962.148 us/op
Iteration   6: 4098243.471 us/op
Iteration   7: 4119812.123 us/op
Iteration   8: 4093457.936 us/op
Iteration   9: 4110205.977 us/op
Iteration  10: 4109040.069 us/op
Iteration  11: 4128241.165 us/op
Iteration  12: 4103229.533 us/op
Iteration  13: 4113972.196 us/op
Iteration  14: 4117642.188 us/op
Iteration  15: 4096748.827 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  4112200.496 ±(99.9%) 14398.655 us/op [Average]
  (min, avg, max) = (4093457.936, 4112200.496, 4143095.947), stdev = 13468.510
  CI (99.9%): [4097801.841, 4126599.151] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 80.28% complete, ETA 00:48:24
# Fork: 1 of 1
# Warmup Iteration   1: 3299.814 us/op
# Warmup Iteration   2: 2997.880 us/op
# Warmup Iteration   3: 3000.664 us/op
# Warmup Iteration   4: 2998.524 us/op
# Warmup Iteration   5: 2996.555 us/op
Iteration   1: 2997.807 us/op
Iteration   2: 2997.785 us/op
Iteration   3: 2997.526 us/op
Iteration   4: 2997.623 us/op
Iteration   5: 2998.972 us/op
Iteration   6: 2997.781 us/op
Iteration   7: 2997.542 us/op
Iteration   8: 2997.293 us/op
Iteration   9: 2998.669 us/op
Iteration  10: 2998.244 us/op
Iteration  11: 2997.424 us/op
Iteration  12: 2996.569 us/op
Iteration  13: 2997.387 us/op
Iteration  14: 2997.237 us/op
Iteration  15: 2996.413 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  2997.618 ±(99.9%) 0.719 us/op [Average]
  (min, avg, max) = (2996.413, 2997.618, 2998.972), stdev = 0.672
  CI (99.9%): [2996.899, 2998.337] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 81.69% complete, ETA 00:44:55
# Fork: 1 of 1
# Warmup Iteration   1: 33786.112 us/op
# Warmup Iteration   2: 31534.096 us/op
# Warmup Iteration   3: 31498.995 us/op
# Warmup Iteration   4: 31516.556 us/op
# Warmup Iteration   5: 31495.924 us/op
Iteration   1: 31507.502 us/op
Iteration   2: 31503.740 us/op
Iteration   3: 31503.000 us/op
Iteration   4: 31498.128 us/op
Iteration   5: 31496.202 us/op
Iteration   6: 31499.993 us/op
Iteration   7: 31492.244 us/op
Iteration   8: 31496.189 us/op
Iteration   9: 31494.761 us/op
Iteration  10: 31500.360 us/op
Iteration  11: 31502.725 us/op
Iteration  12: 31501.945 us/op
Iteration  13: 31496.789 us/op
Iteration  14: 31491.542 us/op
Iteration  15: 31503.492 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  31499.241 ±(99.9%) 4.916 us/op [Average]
  (min, avg, max) = (31491.542, 31499.241, 31507.502), stdev = 4.598
  CI (99.9%): [31494.325, 31504.157] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 83.10% complete, ETA 00:41:27
# Fork: 1 of 1
# Warmup Iteration   1: 3063220.717 us/op
# Warmup Iteration   2: 1762107.180 us/op
# Warmup Iteration   3: 1759815.817 us/op
# Warmup Iteration   4: 1760670.287 us/op
# Warmup Iteration   5: 1762028.683 us/op
Iteration   1: 1760528.621 us/op
Iteration   2: 1761173.648 us/op
Iteration   3: 1760467.763 us/op
Iteration   4: 1760664.389 us/op
Iteration   5: 1760122.548 us/op
Iteration   6: 1760220.257 us/op
Iteration   7: 1760638.383 us/op
Iteration   8: 1760116.930 us/op
Iteration   9: 1759449.185 us/op
Iteration  10: 1759575.254 us/op
Iteration  11: 1759397.679 us/op
Iteration  12: 1759802.832 us/op
Iteration  13: 1759513.286 us/op
Iteration  14: 1760234.796 us/op
Iteration  15: 1759795.417 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  1760113.399 ±(99.9%) 559.038 us/op [Average]
  (min, avg, max) = (1759397.679, 1760113.399, 1761173.648), stdev = 522.924
  CI (99.9%): [1759554.361, 1760672.437] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 84.51% complete, ETA 00:38:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 us/op
# Warmup Iteration   2: 0.021 us/op
# Warmup Iteration   3: 0.022 us/op
# Warmup Iteration   4: 0.022 us/op
# Warmup Iteration   5: 0.022 us/op
Iteration   1: 0.022 us/op
Iteration   2: 0.022 us/op
Iteration   3: 0.022 us/op
Iteration   4: 0.022 us/op
Iteration   5: 0.022 us/op
Iteration   6: 0.022 us/op
Iteration   7: 0.022 us/op
Iteration   8: 0.022 us/op
Iteration   9: 0.022 us/op
Iteration  10: 0.022 us/op
Iteration  11: 0.022 us/op
Iteration  12: 0.022 us/op
Iteration  13: 0.022 us/op
Iteration  14: 0.022 us/op
Iteration  15: 0.022 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  0.022 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.022, 0.022, 0.022), stdev = 0.001
  CI (99.9%): [0.022, 0.022] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 85.92% complete, ETA 00:34:33
# Fork: 1 of 1
# Warmup Iteration   1: 10398.332 us/op
# Warmup Iteration   2: 10401.738 us/op
# Warmup Iteration   3: 10393.284 us/op
# Warmup Iteration   4: 10389.281 us/op
# Warmup Iteration   5: 10395.139 us/op
Iteration   1: 10397.343 us/op
Iteration   2: 10394.622 us/op
Iteration   3: 10396.845 us/op
Iteration   4: 10396.050 us/op
Iteration   5: 10392.517 us/op
Iteration   6: 10395.645 us/op
Iteration   7: 10382.345 us/op
Iteration   8: 10398.418 us/op
Iteration   9: 10393.098 us/op
Iteration  10: 10391.287 us/op
Iteration  11: 10392.034 us/op
Iteration  12: 10398.018 us/op
Iteration  13: 10398.455 us/op
Iteration  14: 10395.535 us/op
Iteration  15: 10390.821 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  10394.202 ±(99.9%) 4.463 us/op [Average]
  (min, avg, max) = (10382.345, 10394.202, 10398.455), stdev = 4.175
  CI (99.9%): [10389.739, 10398.665] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 87.32% complete, ETA 00:31:05
# Fork: 1 of 1
# Warmup Iteration   1: 42152.745 us/op
# Warmup Iteration   2: 38021.725 us/op
# Warmup Iteration   3: 29248.214 us/op
# Warmup Iteration   4: 30753.218 us/op
# Warmup Iteration   5: 36195.199 us/op
Iteration   1: 35028.911 us/op
Iteration   2: 37009.378 us/op
Iteration   3: 41565.347 us/op
Iteration   4: 36881.278 us/op
Iteration   5: 34678.503 us/op
Iteration   6: 35480.979 us/op
Iteration   7: 39101.071 us/op
Iteration   8: 34336.750 us/op
Iteration   9: 38863.692 us/op
Iteration  10: 36140.004 us/op
Iteration  11: 34782.333 us/op
Iteration  12: 45549.435 us/op
Iteration  13: 46290.895 us/op
Iteration  14: 31814.674 us/op
Iteration  15: 39478.230 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  37800.099 ±(99.9%) 4388.522 us/op [Average]
  (min, avg, max) = (31814.674, 37800.099, 46290.895), stdev = 4105.026
  CI (99.9%): [33411.577, 42188.621] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 88.73% complete, ETA 00:27:37
# Fork: 1 of 1
# Warmup Iteration   1: 41731.686 us/op
# Warmup Iteration   2: 37536.195 us/op
# Warmup Iteration   3: 37372.467 us/op
# Warmup Iteration   4: 38084.699 us/op
# Warmup Iteration   5: 37305.077 us/op
Iteration   1: 38189.850 us/op
Iteration   2: 36823.989 us/op
Iteration   3: 38467.155 us/op
Iteration   4: 38180.239 us/op
Iteration   5: 37627.257 us/op
Iteration   6: 38417.255 us/op
Iteration   7: 38049.557 us/op
Iteration   8: 37617.514 us/op
Iteration   9: 37196.470 us/op
Iteration  10: 37205.565 us/op
Iteration  11: 37905.058 us/op
Iteration  12: 38620.287 us/op
Iteration  13: 37801.426 us/op
Iteration  14: 38288.456 us/op
Iteration  15: 38398.245 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  37919.221 ±(99.9%) 570.398 us/op [Average]
  (min, avg, max) = (36823.989, 37919.221, 38620.287), stdev = 533.551
  CI (99.9%): [37348.823, 38489.620] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 90.14% complete, ETA 00:24:09
# Fork: 1 of 1
# Warmup Iteration   1: 21871.576 us/op
# Warmup Iteration   2: 23367.755 us/op
# Warmup Iteration   3: 23518.809 us/op
# Warmup Iteration   4: 23367.031 us/op
# Warmup Iteration   5: 23266.130 us/op
Iteration   1: 23539.878 us/op
Iteration   2: 23357.041 us/op
Iteration   3: 23172.683 us/op
Iteration   4: 23285.417 us/op
Iteration   5: 23004.021 us/op
Iteration   6: 23261.524 us/op
Iteration   7: 23375.569 us/op
Iteration   8: 23438.576 us/op
Iteration   9: 23232.372 us/op
Iteration  10: 23380.426 us/op
Iteration  11: 23001.198 us/op
Iteration  12: 23076.980 us/op
Iteration  13: 23534.421 us/op
Iteration  14: 22973.985 us/op
Iteration  15: 23107.408 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  23249.433 ±(99.9%) 202.287 us/op [Average]
  (min, avg, max) = (22973.985, 23249.433, 23539.878), stdev = 189.219
  CI (99.9%): [23047.147, 23451.720] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 91.55% complete, ETA 00:20:42
# Fork: 1 of 1
# Warmup Iteration   1: 14505.426 us/op
# Warmup Iteration   2: 13207.483 us/op
# Warmup Iteration   3: 13123.794 us/op
# Warmup Iteration   4: 13143.080 us/op
# Warmup Iteration   5: 13082.226 us/op
Iteration   1: 13074.864 us/op
Iteration   2: 13106.848 us/op
Iteration   3: 13072.818 us/op
Iteration   4: 13088.620 us/op
Iteration   5: 13067.137 us/op
Iteration   6: 13179.801 us/op
Iteration   7: 13062.691 us/op
Iteration   8: 13038.400 us/op
Iteration   9: 13081.432 us/op
Iteration  10: 13096.755 us/op
Iteration  11: 13076.384 us/op
Iteration  12: 13067.431 us/op
Iteration  13: 13056.059 us/op
Iteration  14: 13074.997 us/op
Iteration  15: 13046.485 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  13079.382 ±(99.9%) 35.224 us/op [Average]
  (min, avg, max) = (13038.400, 13079.382, 13179.801), stdev = 32.948
  CI (99.9%): [13044.158, 13114.605] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 92.96% complete, ETA 00:17:14
# Fork: 1 of 1
# Warmup Iteration   1: 34821.355 us/op
# Warmup Iteration   2: 31832.785 us/op
# Warmup Iteration   3: 31063.584 us/op
# Warmup Iteration   4: 31253.460 us/op
# Warmup Iteration   5: 31516.277 us/op
Iteration   1: 30845.606 us/op
Iteration   2: 30001.674 us/op
Iteration   3: 30912.406 us/op
Iteration   4: 31143.969 us/op
Iteration   5: 31659.643 us/op
Iteration   6: 31743.668 us/op
Iteration   7: 30722.084 us/op
Iteration   8: 31120.675 us/op
Iteration   9: 31328.371 us/op
Iteration  10: 31095.262 us/op
Iteration  11: 31572.866 us/op
Iteration  12: 30973.219 us/op
Iteration  13: 32014.230 us/op
Iteration  14: 31066.016 us/op
Iteration  15: 30903.666 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  31140.224 ±(99.9%) 520.762 us/op [Average]
  (min, avg, max) = (30001.674, 31140.224, 32014.230), stdev = 487.121
  CI (99.9%): [30619.462, 31660.986] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 94.37% complete, ETA 00:13:47
# Fork: 1 of 1
# Warmup Iteration   1: 851.182 us/op
# Warmup Iteration   2: 804.328 us/op
# Warmup Iteration   3: 800.989 us/op
# Warmup Iteration   4: 806.905 us/op
# Warmup Iteration   5: 807.633 us/op
Iteration   1: 801.679 us/op
Iteration   2: 804.965 us/op
Iteration   3: 798.170 us/op
Iteration   4: 803.046 us/op
Iteration   5: 786.844 us/op
Iteration   6: 791.123 us/op
Iteration   7: 784.285 us/op
Iteration   8: 782.244 us/op
Iteration   9: 784.624 us/op
Iteration  10: 785.899 us/op
Iteration  11: 781.583 us/op
Iteration  12: 781.010 us/op
Iteration  13: 780.509 us/op
Iteration  14: 784.379 us/op
Iteration  15: 783.740 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  788.940 ±(99.9%) 9.226 us/op [Average]
  (min, avg, max) = (780.509, 788.940, 804.965), stdev = 8.630
  CI (99.9%): [779.714, 798.166] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 95.77% complete, ETA 00:10:20
# Fork: 1 of 1
# Warmup Iteration   1: 8366.449 us/op
# Warmup Iteration   2: 8163.645 us/op
# Warmup Iteration   3: 8132.583 us/op
# Warmup Iteration   4: 8144.606 us/op
# Warmup Iteration   5: 8127.644 us/op
Iteration   1: 8189.509 us/op
Iteration   2: 8157.010 us/op
Iteration   3: 8101.760 us/op
Iteration   4: 8084.228 us/op
Iteration   5: 8144.859 us/op
Iteration   6: 8163.656 us/op
Iteration   7: 8143.606 us/op
Iteration   8: 8138.108 us/op
Iteration   9: 8146.034 us/op
Iteration  10: 8093.164 us/op
Iteration  11: 8137.604 us/op
Iteration  12: 8144.003 us/op
Iteration  13: 8162.250 us/op
Iteration  14: 8118.794 us/op
Iteration  15: 8121.658 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  8136.416 ±(99.9%) 30.310 us/op [Average]
  (min, avg, max) = (8084.228, 8136.416, 8189.509), stdev = 28.352
  CI (99.9%): [8106.107, 8166.726] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 97.18% complete, ETA 00:06:53
# Fork: 1 of 1
# Warmup Iteration   1: 111941.830 us/op
# Warmup Iteration   2: 109623.295 us/op
# Warmup Iteration   3: 109332.456 us/op
# Warmup Iteration   4: 109077.042 us/op
# Warmup Iteration   5: 109870.355 us/op
Iteration   1: 109229.494 us/op
Iteration   2: 109838.052 us/op
Iteration   3: 109654.636 us/op
Iteration   4: 109490.913 us/op
Iteration   5: 109565.934 us/op
Iteration   6: 109365.085 us/op
Iteration   7: 109545.734 us/op
Iteration   8: 108998.640 us/op
Iteration   9: 109821.574 us/op
Iteration  10: 109611.718 us/op
Iteration  11: 109457.505 us/op
Iteration  12: 109633.284 us/op
Iteration  13: 109590.572 us/op
Iteration  14: 110271.076 us/op
Iteration  15: 109841.364 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  109594.372 ±(99.9%) 314.110 us/op [Average]
  (min, avg, max) = (108998.640, 109594.372, 110271.076), stdev = 293.819
  CI (99.9%): [109280.262, 109908.482] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 98.59% complete, ETA 00:03:26
# Fork: 1 of 1
# Warmup Iteration   1: 4322043.857 us/op
# Warmup Iteration   2: 4157930.157 us/op
# Warmup Iteration   3: 4077357.737 us/op
# Warmup Iteration   4: 4144102.916 us/op
# Warmup Iteration   5: 4122559.694 us/op
Iteration   1: 4102895.882 us/op
Iteration   2: 4133668.638 us/op
Iteration   3: 4138663.015 us/op
Iteration   4: 4133046.952 us/op
Iteration   5: 4105070.968 us/op
Iteration   6: 4122036.221 us/op
Iteration   7: 4089019.871 us/op
Iteration   8: 4120436.592 us/op
Iteration   9: 4094253.503 us/op
Iteration  10: 4100479.794 us/op
Iteration  11: 4128775.952 us/op
Iteration  12: 4101225.017 us/op
Iteration  13: 4139116.904 us/op
Iteration  14: 4103151.636 us/op
Iteration  15: 4113736.429 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  4115038.492 ±(99.9%) 18019.845 us/op [Average]
  (min, avg, max) = (4089019.871, 4115038.492, 4139116.904), stdev = 16855.774
  CI (99.9%): [4097018.646, 4133058.337] (assumes normal distribution)


# Run complete. Total time: 04:05:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (iterations)  (length)     (size)   Mode  Cnt        Score        Error   Units
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A        512   avgt   15  5379357.258 ± 154144.896   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A       1024   avgt   15  3746591.966 ±  78595.238   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A       2048   avgt   15  2531478.449 ±  44184.969   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A      10240   avgt   15  1736163.063 ±  84250.165   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A     102400   avgt   15  1731244.744 ±  25776.216   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A    1048576   avgt   15  1638168.429 ±  24865.211   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A    2097152   avgt   15  1570019.100 ±  94907.934   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A   10485760   avgt   15  1566529.595 ±  21296.148   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A  104857600   avgt   15  1820521.662 ±  10263.668   us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                     N/A       N/A        N/A   avgt   15      534.949 ±      0.356   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                             N/A       N/A        N/A   avgt   15      657.154 ±      4.691   us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                    N/A       N/A        N/A   avgt   15      535.303 ±      0.303   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                 N/A       N/A        N/A   avgt   15   917919.062 ±   7822.334   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                         N/A       100        N/A   avgt   15   408830.090 ±  11791.011   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                         N/A      1000        N/A   avgt   15  4772876.050 ± 142211.881   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                     521       N/A        N/A   avgt   15        0.678 ±      0.001   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                    1153       N/A        N/A   avgt   15        1.611 ±      0.001   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                    2021       N/A        N/A   avgt   15        2.797 ±      0.001   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                         N/A       100        N/A   avgt   15      619.983 ±      2.528   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                         N/A      1000        N/A   avgt   15    40326.336 ±    137.699   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                         N/A     10000        N/A   avgt   15  4112200.496 ±  14398.655   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                   N/A       N/A        N/A   avgt   15     2997.618 ±      0.719   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                       N/A       N/A        N/A   avgt   15    31499.241 ±      4.916   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                     N/A       N/A        N/A   avgt   15  1760113.399 ±    559.038   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                        N/A       N/A        N/A   avgt   15        0.022 ±      0.001   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                              N/A       N/A        N/A   avgt   15    10394.202 ±      4.463   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                   N/A       N/A        N/A   avgt   15    37800.099 ±   4388.522   us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                            N/A       N/A        N/A   avgt   15    37919.221 ±    570.398   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                              N/A       N/A        N/A   avgt   15    23249.433 ±    202.287   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                N/A       N/A        N/A   avgt   15    13079.382 ±     35.224   us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                   N/A       N/A        N/A   avgt   15    31140.224 ±    520.762   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings           N/A        10        N/A   avgt   15      788.940 ±      9.226   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings           N/A       100        N/A   avgt   15     8136.416 ±     30.310   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings           N/A      1000        N/A   avgt   15   109594.372 ±    314.110   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                              N/A       N/A        N/A   avgt   15  4115038.492 ±  18019.845   us/op
