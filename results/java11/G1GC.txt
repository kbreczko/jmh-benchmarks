# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 0.00% complete, ETA 07:40:00
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 0.72% complete, ETA 08:20:05
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 1.45% complete, ETA 08:12:40
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 2.17% complete, ETA 08:08:26
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 2.90% complete, ETA 08:05:00
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 3.62% complete, ETA 08:01:12
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 4.35% complete, ETA 07:57:22
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 5.07% complete, ETA 07:55:53
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 5.80% complete, ETA 07:52:17
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 6.52% complete, ETA 07:49:21
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap(AllocationBenchmark.java:52)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_thrpt_jmhStub(AllocationBenchmark_fillHeap_jmhTest.java:161)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_Throughput(AllocationBenchmark_fillHeap_jmhTest.java:104)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)




# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 7.25% complete, ETA 06:59:43
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 7.97% complete, ETA 07:01:14
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 8.70% complete, ETA 07:01:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ops/us
# Warmup Iteration   2: 0.002 ops/us
# Warmup Iteration   3: 0.002 ops/us
# Warmup Iteration   4: 0.002 ops/us
# Warmup Iteration   5: 0.002 ops/us
Iteration   1: 0.002 ops/us
Iteration   2: 0.002 ops/us
Iteration   3: 0.002 ops/us
Iteration   4: 0.002 ops/us
Iteration   5: 0.002 ops/us
Iteration   6: 0.002 ops/us
Iteration   7: 0.002 ops/us
Iteration   8: 0.002 ops/us
Iteration   9: 0.002 ops/us
Iteration  10: 0.002 ops/us
Iteration  11: 0.002 ops/us
Iteration  12: 0.002 ops/us
Iteration  13: 0.002 ops/us
Iteration  14: 0.002 ops/us
Iteration  15: 0.002 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  0.002 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 9.42% complete, ETA 07:00:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ops/us
# Warmup Iteration   2: 0.002 ops/us
# Warmup Iteration   3: 0.002 ops/us
# Warmup Iteration   4: 0.002 ops/us
# Warmup Iteration   5: 0.002 ops/us
Iteration   1: 0.002 ops/us
Iteration   2: 0.002 ops/us
Iteration   3: 0.002 ops/us
Iteration   4: 0.002 ops/us
Iteration   5: 0.002 ops/us
Iteration   6: 0.002 ops/us
Iteration   7: 0.002 ops/us
Iteration   8: 0.002 ops/us
Iteration   9: 0.002 ops/us
Iteration  10: 0.002 ops/us
Iteration  11: 0.002 ops/us
Iteration  12: 0.002 ops/us
Iteration  13: 0.002 ops/us
Iteration  14: 0.002 ops/us
Iteration  15: 0.002 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  0.002 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 10.14% complete, ETA 06:59:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ops/us
# Warmup Iteration   2: 0.001 ops/us
# Warmup Iteration   3: 0.001 ops/us
# Warmup Iteration   4: 0.001 ops/us
# Warmup Iteration   5: 0.001 ops/us
Iteration   1: 0.001 ops/us
Iteration   2: 0.001 ops/us
Iteration   3: 0.001 ops/us
Iteration   4: 0.001 ops/us
Iteration   5: 0.001 ops/us
Iteration   6: 0.001 ops/us
Iteration   7: 0.001 ops/us
Iteration   8: 0.001 ops/us
Iteration   9: 0.001 ops/us
Iteration  10: 0.001 ops/us
Iteration  11: 0.001 ops/us
Iteration  12: 0.001 ops/us
Iteration  13: 0.001 ops/us
Iteration  14: 0.001 ops/us
Iteration  15: 0.001 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  0.001 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 10.87% complete, ETA 06:57:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ops/us
# Warmup Iteration   2: 0.002 ops/us
# Warmup Iteration   3: 0.002 ops/us
# Warmup Iteration   4: 0.002 ops/us
# Warmup Iteration   5: 0.002 ops/us
Iteration   1: 0.002 ops/us
Iteration   2: 0.002 ops/us
Iteration   3: 0.002 ops/us
Iteration   4: 0.002 ops/us
Iteration   5: 0.002 ops/us
Iteration   6: 0.002 ops/us
Iteration   7: 0.002 ops/us
Iteration   8: 0.002 ops/us
Iteration   9: 0.002 ops/us
Iteration  10: 0.002 ops/us
Iteration  11: 0.002 ops/us
Iteration  12: 0.002 ops/us
Iteration  13: 0.002 ops/us
Iteration  14: 0.002 ops/us
Iteration  15: 0.002 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  0.002 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 11.59% complete, ETA 06:55:19
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 12.32% complete, ETA 06:54:36
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 13.04% complete, ETA 06:52:25
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 13.77% complete, ETA 06:50:25
# Fork: 1 of 1
# Warmup Iteration   1: 1.443 ops/us
# Warmup Iteration   2: 1.475 ops/us
# Warmup Iteration   3: 1.475 ops/us
# Warmup Iteration   4: 1.474 ops/us
# Warmup Iteration   5: 1.474 ops/us
Iteration   1: 1.475 ops/us
Iteration   2: 1.475 ops/us
Iteration   3: 1.476 ops/us
Iteration   4: 1.476 ops/us
Iteration   5: 1.476 ops/us
Iteration   6: 1.475 ops/us
Iteration   7: 1.476 ops/us
Iteration   8: 1.476 ops/us
Iteration   9: 1.476 ops/us
Iteration  10: 1.476 ops/us
Iteration  11: 1.475 ops/us
Iteration  12: 1.475 ops/us
Iteration  13: 1.475 ops/us
Iteration  14: 1.475 ops/us
Iteration  15: 1.475 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  1.475 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (1.475, 1.475, 1.476), stdev = 0.001
  CI (99.9%): [1.475, 1.476] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 14.49% complete, ETA 06:47:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.610 ops/us
# Warmup Iteration   2: 0.620 ops/us
# Warmup Iteration   3: 0.621 ops/us
# Warmup Iteration   4: 0.621 ops/us
# Warmup Iteration   5: 0.621 ops/us
Iteration   1: 0.621 ops/us
Iteration   2: 0.621 ops/us
Iteration   3: 0.621 ops/us
Iteration   4: 0.621 ops/us
Iteration   5: 0.621 ops/us
Iteration   6: 0.621 ops/us
Iteration   7: 0.621 ops/us
Iteration   8: 0.621 ops/us
Iteration   9: 0.621 ops/us
Iteration  10: 0.621 ops/us
Iteration  11: 0.621 ops/us
Iteration  12: 0.622 ops/us
Iteration  13: 0.622 ops/us
Iteration  14: 0.621 ops/us
Iteration  15: 0.621 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.621 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.621, 0.621, 0.622), stdev = 0.001
  CI (99.9%): [0.621, 0.621] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 15.22% complete, ETA 06:44:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.347 ops/us
# Warmup Iteration   2: 0.357 ops/us
# Warmup Iteration   3: 0.357 ops/us
# Warmup Iteration   4: 0.358 ops/us
# Warmup Iteration   5: 0.358 ops/us
Iteration   1: 0.358 ops/us
Iteration   2: 0.358 ops/us
Iteration   3: 0.358 ops/us
Iteration   4: 0.358 ops/us
Iteration   5: 0.358 ops/us
Iteration   6: 0.358 ops/us
Iteration   7: 0.358 ops/us
Iteration   8: 0.358 ops/us
Iteration   9: 0.358 ops/us
Iteration  10: 0.358 ops/us
Iteration  11: 0.358 ops/us
Iteration  12: 0.358 ops/us
Iteration  13: 0.358 ops/us
Iteration  14: 0.358 ops/us
Iteration  15: 0.358 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.358 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.358, 0.358, 0.358), stdev = 0.001
  CI (99.9%): [0.358, 0.358] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 15.94% complete, ETA 06:42:04
# Fork: 1 of 1
# Warmup Iteration   1: 20.050 ops/us
# Warmup Iteration   2: 19.479 ops/us
# Warmup Iteration   3: 19.478 ops/us
# Warmup Iteration   4: 18.516 ops/us
# Warmup Iteration   5: 19.491 ops/us
Iteration   1: 19.489 ops/us
Iteration   2: 19.491 ops/us
Iteration   3: 19.465 ops/us
Iteration   4: 19.480 ops/us
Iteration   5: 19.479 ops/us
Iteration   6: 19.491 ops/us
Iteration   7: 19.485 ops/us
Iteration   8: 19.481 ops/us
Iteration   9: 19.483 ops/us
Iteration  10: 19.479 ops/us
Iteration  11: 19.484 ops/us
Iteration  12: 19.491 ops/us
Iteration  13: 19.483 ops/us
Iteration  14: 19.476 ops/us
Iteration  15: 19.468 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  19.482 ±(99.9%) 0.008 ops/us [Average]
  (min, avg, max) = (19.465, 19.482, 19.491), stdev = 0.008
  CI (99.9%): [19.473, 19.490] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 16.67% complete, ETA 06:39:09
# Fork: 1 of 1
# Warmup Iteration   1: 2.100 ops/us
# Warmup Iteration   2: 2.194 ops/us
# Warmup Iteration   3: 2.032 ops/us
# Warmup Iteration   4: 2.005 ops/us
# Warmup Iteration   5: 2.034 ops/us
Iteration   1: 2.041 ops/us
Iteration   2: 2.004 ops/us
Iteration   3: 2.047 ops/us
Iteration   4: 2.043 ops/us
Iteration   5: 2.004 ops/us
Iteration   6: 2.046 ops/us
Iteration   7: 2.039 ops/us
Iteration   8: 2.044 ops/us
Iteration   9: 2.005 ops/us
Iteration  10: 2.043 ops/us
Iteration  11: 2.042 ops/us
Iteration  12: 2.001 ops/us
Iteration  13: 2.002 ops/us
Iteration  14: 1.969 ops/us
Iteration  15: 2.044 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  2.025 ±(99.9%) 0.026 ops/us [Average]
  (min, avg, max) = (1.969, 2.025, 2.047), stdev = 0.025
  CI (99.9%): [1.999, 2.051] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 17.39% complete, ETA 06:36:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.203 ops/us
# Warmup Iteration   2: 0.212 ops/us
# Warmup Iteration   3: 0.196 ops/us
# Warmup Iteration   4: 0.195 ops/us
# Warmup Iteration   5: 0.193 ops/us
Iteration   1: 0.197 ops/us
Iteration   2: 0.198 ops/us
Iteration   3: 0.197 ops/us
Iteration   4: 0.194 ops/us
Iteration   5: 0.195 ops/us
Iteration   6: 0.198 ops/us
Iteration   7: 0.198 ops/us
Iteration   8: 0.197 ops/us
Iteration   9: 0.193 ops/us
Iteration  10: 0.195 ops/us
Iteration  11: 0.198 ops/us
Iteration  12: 0.192 ops/us
Iteration  13: 0.196 ops/us
Iteration  14: 0.195 ops/us
Iteration  15: 0.195 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.196 ±(99.9%) 0.002 ops/us [Average]
  (min, avg, max) = (0.192, 0.196, 0.198), stdev = 0.002
  CI (99.9%): [0.194, 0.198] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 18.12% complete, ETA 06:33:10
# Fork: 1 of 1
# Warmup Iteration   1: 18.406 ops/us
# Warmup Iteration   2: 17.252 ops/us
# Warmup Iteration   3: 21.003 ops/us
# Warmup Iteration   4: 20.986 ops/us
# Warmup Iteration   5: 20.998 ops/us
Iteration   1: 20.991 ops/us
Iteration   2: 20.975 ops/us
Iteration   3: 20.996 ops/us
Iteration   4: 20.962 ops/us
Iteration   5: 20.981 ops/us
Iteration   6: 20.984 ops/us
Iteration   7: 20.979 ops/us
Iteration   8: 20.986 ops/us
Iteration   9: 20.976 ops/us
Iteration  10: 20.981 ops/us
Iteration  11: 20.987 ops/us
Iteration  12: 20.991 ops/us
Iteration  13: 20.983 ops/us
Iteration  14: 20.995 ops/us
Iteration  15: 19.855 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  20.908 ±(99.9%) 0.312 ops/us [Average]
  (min, avg, max) = (19.855, 20.908, 20.996), stdev = 0.291
  CI (99.9%): [20.597, 21.220] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 18.84% complete, ETA 06:30:06
# Fork: 1 of 1
# Warmup Iteration   1: 1.954 ops/us
# Warmup Iteration   2: 1.877 ops/us
# Warmup Iteration   3: 2.359 ops/us
# Warmup Iteration   4: 2.269 ops/us
# Warmup Iteration   5: 2.360 ops/us
Iteration   1: 2.372 ops/us
Iteration   2: 2.340 ops/us
Iteration   3: 2.362 ops/us
Iteration   4: 2.314 ops/us
Iteration   5: 2.356 ops/us
Iteration   6: 2.325 ops/us
Iteration   7: 2.377 ops/us
Iteration   8: 2.377 ops/us
Iteration   9: 2.337 ops/us
Iteration  10: 2.362 ops/us
Iteration  11: 2.333 ops/us
Iteration  12: 2.332 ops/us
Iteration  13: 2.343 ops/us
Iteration  14: 2.381 ops/us
Iteration  15: 2.362 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  2.352 ±(99.9%) 0.022 ops/us [Average]
  (min, avg, max) = (2.314, 2.352, 2.381), stdev = 0.021
  CI (99.9%): [2.329, 2.374] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 19.56% complete, ETA 06:27:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.189 ops/us
# Warmup Iteration   2: 0.181 ops/us
# Warmup Iteration   3: 0.216 ops/us
# Warmup Iteration   4: 0.212 ops/us
# Warmup Iteration   5: 0.213 ops/us
Iteration   1: 0.209 ops/us
Iteration   2: 0.209 ops/us
Iteration   3: 0.216 ops/us
Iteration   4: 0.214 ops/us
Iteration   5: 0.214 ops/us
Iteration   6: 0.228 ops/us
Iteration   7: 0.226 ops/us
Iteration   8: 0.221 ops/us
Iteration   9: 0.224 ops/us
Iteration  10: 0.225 ops/us
Iteration  11: 0.206 ops/us
Iteration  12: 0.227 ops/us
Iteration  13: 0.229 ops/us
Iteration  14: 0.219 ops/us
Iteration  15: 0.229 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.220 ±(99.9%) 0.008 ops/us [Average]
  (min, avg, max) = (0.206, 0.220, 0.229), stdev = 0.008
  CI (99.9%): [0.211, 0.228] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 20.29% complete, ETA 06:23:53
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 21.01% complete, ETA 06:20:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ops/us
# Warmup Iteration   2: 0.002 ops/us
# Warmup Iteration   3: 0.002 ops/us
# Warmup Iteration   4: 0.002 ops/us
# Warmup Iteration   5: 0.002 ops/us
Iteration   1: 0.002 ops/us
Iteration   2: 0.002 ops/us
Iteration   3: 0.002 ops/us
Iteration   4: 0.002 ops/us
Iteration   5: 0.002 ops/us
Iteration   6: 0.002 ops/us
Iteration   7: 0.002 ops/us
Iteration   8: 0.002 ops/us
Iteration   9: 0.002 ops/us
Iteration  10: 0.002 ops/us
Iteration  11: 0.002 ops/us
Iteration  12: 0.002 ops/us
Iteration  13: 0.002 ops/us
Iteration  14: 0.002 ops/us
Iteration  15: 0.002 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  0.002 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 21.74% complete, ETA 06:17:32
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 22.46% complete, ETA 06:14:21
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁷ ops/us
# Warmup Iteration   2: ≈ 10⁻⁷ ops/us
# Warmup Iteration   3: ≈ 10⁻⁷ ops/us
# Warmup Iteration   4: ≈ 10⁻⁷ ops/us
# Warmup Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   1: ≈ 10⁻⁷ ops/us
Iteration   2: ≈ 10⁻⁷ ops/us
Iteration   3: ≈ 10⁻⁷ ops/us
Iteration   4: ≈ 10⁻⁷ ops/us
Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   6: ≈ 10⁻⁷ ops/us
Iteration   7: ≈ 10⁻⁷ ops/us
Iteration   8: ≈ 10⁻⁷ ops/us
Iteration   9: ≈ 10⁻⁷ ops/us
Iteration  10: ≈ 10⁻⁷ ops/us
Iteration  11: ≈ 10⁻⁷ ops/us
Iteration  12: ≈ 10⁻⁷ ops/us
Iteration  13: ≈ 10⁻⁷ ops/us
Iteration  14: ≈ 10⁻⁷ ops/us
Iteration  15: ≈ 10⁻⁷ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  ≈ 10⁻⁷ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 23.19% complete, ETA 06:13:28
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻³ ops/us
# Warmup Iteration   2: ≈ 10⁻³ ops/us
# Warmup Iteration   3: ≈ 10⁻³ ops/us
# Warmup Iteration   4: ≈ 10⁻³ ops/us
# Warmup Iteration   5: ≈ 10⁻³ ops/us
Iteration   1: ≈ 10⁻³ ops/us
Iteration   2: ≈ 10⁻³ ops/us
Iteration   3: ≈ 10⁻³ ops/us
Iteration   4: ≈ 10⁻³ ops/us
Iteration   5: ≈ 10⁻³ ops/us
Iteration   6: ≈ 10⁻³ ops/us
Iteration   7: ≈ 10⁻³ ops/us
Iteration   8: ≈ 10⁻³ ops/us
Iteration   9: ≈ 10⁻³ ops/us
Iteration  10: ≈ 10⁻³ ops/us
Iteration  11: ≈ 10⁻³ ops/us
Iteration  12: ≈ 10⁻³ ops/us
Iteration  13: ≈ 10⁻³ ops/us
Iteration  14: ≈ 10⁻³ ops/us
Iteration  15: ≈ 10⁻³ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  ≈ 10⁻³ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 23.91% complete, ETA 06:10:08
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 24.64% complete, ETA 06:06:49
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 25.36% complete, ETA 06:05:33
# Fork: 1 of 1
# Warmup Iteration   1: 42.349 ops/us
# Warmup Iteration   2: 47.648 ops/us
# Warmup Iteration   3: 46.136 ops/us
# Warmup Iteration   4: 46.136 ops/us
# Warmup Iteration   5: 46.205 ops/us
Iteration   1: 46.200 ops/us
Iteration   2: 46.177 ops/us
Iteration   3: 46.191 ops/us
Iteration   4: 46.143 ops/us
Iteration   5: 46.127 ops/us
Iteration   6: 46.155 ops/us
Iteration   7: 46.193 ops/us
Iteration   8: 46.162 ops/us
Iteration   9: 46.170 ops/us
Iteration  10: 46.172 ops/us
Iteration  11: 46.183 ops/us
Iteration  12: 46.153 ops/us
Iteration  13: 46.100 ops/us
Iteration  14: 46.171 ops/us
Iteration  15: 46.115 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  46.161 ±(99.9%) 0.031 ops/us [Average]
  (min, avg, max) = (46.100, 46.161, 46.200), stdev = 0.029
  CI (99.9%): [46.130, 46.192] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 26.09% complete, ETA 06:02:05
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 26.81% complete, ETA 05:58:38
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 27.54% complete, ETA 05:55:12
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 28.26% complete, ETA 05:51:44
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 28.98% complete, ETA 05:48:18
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 29.71% complete, ETA 05:44:49
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 30.43% complete, ETA 05:41:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ops/us
# Warmup Iteration   2: 0.001 ops/us
# Warmup Iteration   3: 0.001 ops/us
# Warmup Iteration   4: 0.001 ops/us
# Warmup Iteration   5: 0.001 ops/us
Iteration   1: 0.001 ops/us
Iteration   2: 0.001 ops/us
Iteration   3: 0.001 ops/us
Iteration   4: 0.001 ops/us
Iteration   5: 0.001 ops/us
Iteration   6: 0.001 ops/us
Iteration   7: 0.001 ops/us
Iteration   8: 0.001 ops/us
Iteration   9: 0.001 ops/us
Iteration  10: 0.001 ops/us
Iteration  11: 0.001 ops/us
Iteration  12: 0.001 ops/us
Iteration  13: 0.001 ops/us
Iteration  14: 0.001 ops/us
Iteration  15: 0.001 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  0.001 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 31.16% complete, ETA 05:37:49
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 31.88% complete, ETA 05:34:20
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 32.61% complete, ETA 05:30:53
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 33.33% complete, ETA 05:27:37
# Fork: 1 of 1
# Warmup Iteration   1: 211105.109 us/op
# Warmup Iteration   2: 205906.701 us/op
# Warmup Iteration   3: 206414.693 us/op
# Warmup Iteration   4: 206009.650 us/op
# Warmup Iteration   5: 207349.991 us/op
Iteration   1: 205719.761 us/op
Iteration   2: 205484.082 us/op
Iteration   3: 205175.769 us/op
Iteration   4: 205517.801 us/op
Iteration   5: 205104.721 us/op
Iteration   6: 204802.087 us/op
Iteration   7: 206240.779 us/op
Iteration   8: 205882.976 us/op
Iteration   9: 206445.570 us/op
Iteration  10: 205509.488 us/op
Iteration  11: 205542.043 us/op
Iteration  12: 205582.708 us/op
Iteration  13: 205244.061 us/op
Iteration  14: 207168.338 us/op
Iteration  15: 205276.263 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  205646.430 ±(99.9%) 637.148 us/op [Average]
  (min, avg, max) = (204802.087, 205646.430, 207168.338), stdev = 595.989
  CI (99.9%): [205009.282, 206283.578] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 34.06% complete, ETA 05:24:08
# Fork: 1 of 1
# Warmup Iteration   1: 165505.354 us/op
# Warmup Iteration   2: 160910.171 us/op
# Warmup Iteration   3: 161219.800 us/op
# Warmup Iteration   4: 161274.072 us/op
# Warmup Iteration   5: 162309.004 us/op
Iteration   1: 162801.050 us/op
Iteration   2: 163012.223 us/op
Iteration   3: 161733.697 us/op
Iteration   4: 162518.711 us/op
Iteration   5: 161243.589 us/op
Iteration   6: 161987.527 us/op
Iteration   7: 162240.477 us/op
Iteration   8: 162110.948 us/op
Iteration   9: 161931.491 us/op
Iteration  10: 162614.773 us/op
Iteration  11: 162005.724 us/op
Iteration  12: 161594.847 us/op
Iteration  13: 163535.208 us/op
Iteration  14: 161120.527 us/op
Iteration  15: 161135.143 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  162105.729 ±(99.9%) 750.856 us/op [Average]
  (min, avg, max) = (161120.527, 162105.729, 163535.208), stdev = 702.351
  CI (99.9%): [161354.873, 162856.585] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 34.78% complete, ETA 05:20:39
# Fork: 1 of 1
# Warmup Iteration   1: 209967.264 us/op
# Warmup Iteration   2: 208495.620 us/op
# Warmup Iteration   3: 207776.042 us/op
# Warmup Iteration   4: 207917.723 us/op
# Warmup Iteration   5: 209045.066 us/op
Iteration   1: 207937.520 us/op
Iteration   2: 207572.132 us/op
Iteration   3: 207201.973 us/op
Iteration   4: 208858.609 us/op
Iteration   5: 207601.902 us/op
Iteration   6: 207543.893 us/op
Iteration   7: 208875.550 us/op
Iteration   8: 208478.268 us/op
Iteration   9: 208419.173 us/op
Iteration  10: 208463.978 us/op
Iteration  11: 209491.812 us/op
Iteration  12: 209141.835 us/op
Iteration  13: 209138.458 us/op
Iteration  14: 209016.355 us/op
Iteration  15: 208355.305 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  208406.451 ±(99.9%) 746.180 us/op [Average]
  (min, avg, max) = (207201.973, 208406.451, 209491.812), stdev = 697.978
  CI (99.9%): [207660.270, 209152.631] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 35.51% complete, ETA 05:17:09
# Fork: 1 of 1
# Warmup Iteration   1: 250321.447 us/op
# Warmup Iteration   2: 251487.523 us/op
# Warmup Iteration   3: 246277.369 us/op
# Warmup Iteration   4: 248303.929 us/op
# Warmup Iteration   5: 255940.961 us/op
Iteration   1: 254538.467 us/op
Iteration   2: 248409.667 us/op
Iteration   3: 247908.008 us/op
Iteration   4: 247894.249 us/op
Iteration   5: 252204.986 us/op
Iteration   6: 253913.812 us/op
Iteration   7: 250214.212 us/op
Iteration   8: 253871.486 us/op
Iteration   9: 251048.508 us/op
Iteration  10: 250534.152 us/op
Iteration  11: 251985.669 us/op
Iteration  12: 251769.051 us/op
Iteration  13: 253174.517 us/op
Iteration  14: 247589.717 us/op
Iteration  15: 250478.154 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  251035.644 ±(99.9%) 2484.864 us/op [Average]
  (min, avg, max) = (247589.717, 251035.644, 254538.467), stdev = 2324.344
  CI (99.9%): [248550.779, 253520.508] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 36.23% complete, ETA 05:13:41
# Fork: 1 of 1
# Warmup Iteration   1: 230086.499 us/op
# Warmup Iteration   2: 225519.368 us/op
# Warmup Iteration   3: 225169.451 us/op
# Warmup Iteration   4: 220809.616 us/op
# Warmup Iteration   5: 226594.783 us/op
Iteration   1: 224551.168 us/op
Iteration   2: 225204.500 us/op
Iteration   3: 224416.437 us/op
Iteration   4: 224632.271 us/op
Iteration   5: 225729.473 us/op
Iteration   6: 225647.151 us/op
Iteration   7: 222551.854 us/op
Iteration   8: 222955.960 us/op
Iteration   9: 225024.354 us/op
Iteration  10: 230997.317 us/op
Iteration  11: 228153.654 us/op
Iteration  12: 225377.841 us/op
Iteration  13: 227749.670 us/op
Iteration  14: 223452.932 us/op
Iteration  15: 221970.020 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  225227.640 ±(99.9%) 2495.024 us/op [Average]
  (min, avg, max) = (221970.020, 225227.640, 230997.317), stdev = 2333.847
  CI (99.9%): [222732.616, 227722.664] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 36.96% complete, ETA 05:10:12
# Fork: 1 of 1
# Warmup Iteration   1: 223676.195 us/op
# Warmup Iteration   2: 218098.742 us/op
# Warmup Iteration   3: 215328.550 us/op
# Warmup Iteration   4: 218377.285 us/op
# Warmup Iteration   5: 221056.034 us/op
Iteration   1: 218302.705 us/op
Iteration   2: 214768.973 us/op
Iteration   3: 216292.109 us/op
Iteration   4: 215524.387 us/op
Iteration   5: 214432.298 us/op
Iteration   6: 214549.009 us/op
Iteration   7: 211831.121 us/op
Iteration   8: 214695.865 us/op
Iteration   9: 215756.819 us/op
Iteration  10: 216277.947 us/op
Iteration  11: 215767.563 us/op
Iteration  12: 217833.971 us/op
Iteration  13: 213540.901 us/op
Iteration  14: 216188.419 us/op
Iteration  15: 215702.838 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  215430.995 ±(99.9%) 1705.745 us/op [Average]
  (min, avg, max) = (211831.121, 215430.995, 218302.705), stdev = 1595.555
  CI (99.9%): [213725.250, 217136.740] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 37.68% complete, ETA 05:06:42
# Fork: 1 of 1
# Warmup Iteration   1: 910785.015 us/op
# Warmup Iteration   2: 871992.856 us/op
# Warmup Iteration   3: 884495.486 us/op
# Warmup Iteration   4: 877163.646 us/op
# Warmup Iteration   5: 880046.616 us/op
Iteration   1: 870677.769 us/op
Iteration   2: 872536.119 us/op
Iteration   3: 874207.975 us/op
Iteration   4: 876872.787 us/op
Iteration   5: 876492.476 us/op
Iteration   6: 870552.767 us/op
Iteration   7: 881237.255 us/op
Iteration   8: 875004.891 us/op
Iteration   9: 882642.669 us/op
Iteration  10: 875385.141 us/op
Iteration  11: 879907.415 us/op
Iteration  12: 888700.552 us/op
Iteration  13: 875971.754 us/op
Iteration  14: 885157.550 us/op
Iteration  15: 874077.315 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  877294.962 ±(99.9%) 5614.285 us/op [Average]
  (min, avg, max) = (870552.767, 877294.962, 888700.552), stdev = 5251.605
  CI (99.9%): [871680.678, 882909.247] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 38.40% complete, ETA 05:03:25
# Fork: 1 of 1
# Warmup Iteration   1: 917905.421 us/op
# Warmup Iteration   2: 873793.024 us/op
# Warmup Iteration   3: 873492.328 us/op
# Warmup Iteration   4: 864998.306 us/op
# Warmup Iteration   5: 881677.553 us/op
Iteration   1: 871766.117 us/op
Iteration   2: 868148.274 us/op
Iteration   3: 866148.518 us/op
Iteration   4: 850826.233 us/op
Iteration   5: 864500.466 us/op
Iteration   6: 879551.126 us/op
Iteration   7: 864440.532 us/op
Iteration   8: 867529.321 us/op
Iteration   9: 874330.365 us/op
Iteration  10: 861744.308 us/op
Iteration  11: 874211.626 us/op
Iteration  12: 865547.453 us/op
Iteration  13: 874160.897 us/op
Iteration  14: 873109.757 us/op
Iteration  15: 864891.327 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  868060.421 ±(99.9%) 7388.021 us/op [Average]
  (min, avg, max) = (850826.233, 868060.421, 879551.126), stdev = 6910.759
  CI (99.9%): [860672.400, 875448.442] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 39.13% complete, ETA 05:00:05
# Fork: 1 of 1
# Warmup Iteration   1: 661206.723 us/op
# Warmup Iteration   2: 641655.200 us/op
# Warmup Iteration   3: 639874.121 us/op
# Warmup Iteration   4: 644483.786 us/op
# Warmup Iteration   5: 647973.598 us/op
Iteration   1: 645543.407 us/op
Iteration   2: 645317.042 us/op
Iteration   3: 643381.168 us/op
Iteration   4: 644971.570 us/op
Iteration   5: 649164.610 us/op
Iteration   6: 644770.916 us/op
Iteration   7: 647759.344 us/op
Iteration   8: 648124.279 us/op
Iteration   9: 638507.789 us/op
Iteration  10: 645460.937 us/op
Iteration  11: 646433.577 us/op
Iteration  12: 643330.606 us/op
Iteration  13: 645650.004 us/op
Iteration  14: 644299.288 us/op
Iteration  15: 643280.295 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  645066.322 ±(99.9%) 2692.387 us/op [Average]
  (min, avg, max) = (638507.789, 645066.322, 649164.610), stdev = 2518.460
  CI (99.9%): [642373.935, 647758.709] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 39.85% complete, ETA 04:56:40
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap(AllocationBenchmark.java:52)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_avgt_jmhStub(AllocationBenchmark_fillHeap_jmhTest.java:269)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_AverageTime(AllocationBenchmark_fillHeap_jmhTest.java:212)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)




# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 40.58% complete, ETA 04:47:56
# Fork: 1 of 1
# Warmup Iteration   1: 540870.088 us/op
# Warmup Iteration   2: 548854.319 us/op
# Warmup Iteration   3: 538230.290 us/op
# Warmup Iteration   4: 545385.209 us/op
# Warmup Iteration   5: 550013.068 us/op
Iteration   1: 555553.525 us/op
Iteration   2: 545784.481 us/op
Iteration   3: 552889.103 us/op
Iteration   4: 544865.154 us/op
Iteration   5: 555656.259 us/op
Iteration   6: 546505.522 us/op
Iteration   7: 547001.684 us/op
Iteration   8: 560093.917 us/op
Iteration   9: 544473.763 us/op
Iteration  10: 551743.090 us/op
Iteration  11: 549612.275 us/op
Iteration  12: 547932.730 us/op
Iteration  13: 561033.698 us/op
Iteration  14: 550421.327 us/op
Iteration  15: 545239.170 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  550587.047 ±(99.9%) 5826.312 us/op [Average]
  (min, avg, max) = (544473.763, 550587.047, 561033.698), stdev = 5449.936
  CI (99.9%): [544760.734, 556413.359] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 41.30% complete, ETA 04:44:41
# Fork: 1 of 1
# Warmup Iteration   1: 477810.450 us/op
# Warmup Iteration   2: 479206.669 us/op
# Warmup Iteration   3: 470819.740 us/op
# Warmup Iteration   4: 491957.603 us/op
# Warmup Iteration   5: 489728.878 us/op
Iteration   1: 475587.990 us/op
Iteration   2: 478513.811 us/op
Iteration   3: 467098.327 us/op
Iteration   4: 478082.576 us/op
Iteration   5: 472287.903 us/op
Iteration   6: 482223.577 us/op
Iteration   7: 476463.170 us/op
Iteration   8: 464047.658 us/op
Iteration   9: 477296.509 us/op
Iteration  10: 477444.851 us/op
Iteration  11: 477336.782 us/op
Iteration  12: 466310.749 us/op
Iteration  13: 474714.217 us/op
Iteration  14: 475837.179 us/op
Iteration  15: 470968.091 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  474280.893 ±(99.9%) 5479.232 us/op [Average]
  (min, avg, max) = (464047.658, 474280.893, 482223.577), stdev = 5125.277
  CI (99.9%): [468801.661, 479760.125] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 42.03% complete, ETA 04:41:22
# Fork: 1 of 1
# Warmup Iteration   1: 545.320 us/op
# Warmup Iteration   2: 536.505 us/op
# Warmup Iteration   3: 535.716 us/op
# Warmup Iteration   4: 534.891 us/op
# Warmup Iteration   5: 534.656 us/op
Iteration   1: 535.866 us/op
Iteration   2: 534.993 us/op
Iteration   3: 534.470 us/op
Iteration   4: 534.328 us/op
Iteration   5: 534.584 us/op
Iteration   6: 534.557 us/op
Iteration   7: 534.671 us/op
Iteration   8: 534.569 us/op
Iteration   9: 534.473 us/op
Iteration  10: 534.977 us/op
Iteration  11: 534.978 us/op
Iteration  12: 534.923 us/op
Iteration  13: 535.021 us/op
Iteration  14: 534.629 us/op
Iteration  15: 534.976 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  534.801 ±(99.9%) 0.402 us/op [Average]
  (min, avg, max) = (534.328, 534.801, 535.866), stdev = 0.376
  CI (99.9%): [534.399, 535.203] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 42.75% complete, ETA 04:37:56
# Fork: 1 of 1
# Warmup Iteration   1: 672.963 us/op
# Warmup Iteration   2: 657.492 us/op
# Warmup Iteration   3: 657.098 us/op
# Warmup Iteration   4: 657.222 us/op
# Warmup Iteration   5: 666.312 us/op
Iteration   1: 666.958 us/op
Iteration   2: 667.081 us/op
Iteration   3: 659.497 us/op
Iteration   4: 656.395 us/op
Iteration   5: 656.757 us/op
Iteration   6: 656.310 us/op
Iteration   7: 656.220 us/op
Iteration   8: 656.140 us/op
Iteration   9: 656.200 us/op
Iteration  10: 656.407 us/op
Iteration  11: 656.516 us/op
Iteration  12: 656.307 us/op
Iteration  13: 656.581 us/op
Iteration  14: 656.507 us/op
Iteration  15: 656.531 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  658.027 ±(99.9%) 3.998 us/op [Average]
  (min, avg, max) = (656.140, 658.027, 667.081), stdev = 3.740
  CI (99.9%): [654.029, 662.025] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 43.48% complete, ETA 04:34:30
# Fork: 1 of 1
# Warmup Iteration   1: 956.895 us/op
# Warmup Iteration   2: 941.116 us/op
# Warmup Iteration   3: 940.904 us/op
# Warmup Iteration   4: 941.340 us/op
# Warmup Iteration   5: 940.953 us/op
Iteration   1: 941.205 us/op
Iteration   2: 941.598 us/op
Iteration   3: 940.944 us/op
Iteration   4: 941.885 us/op
Iteration   5: 941.705 us/op
Iteration   6: 826.277 us/op
Iteration   7: 755.835 us/op
Iteration   8: 756.144 us/op
Iteration   9: 756.925 us/op
Iteration  10: 756.777 us/op
Iteration  11: 756.668 us/op
Iteration  12: 756.500 us/op
Iteration  13: 756.254 us/op
Iteration  14: 757.019 us/op
Iteration  15: 756.477 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  822.814 ±(99.9%) 94.750 us/op [Average]
  (min, avg, max) = (755.835, 822.814, 941.885), stdev = 88.629
  CI (99.9%): [728.064, 917.564] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 44.20% complete, ETA 04:31:04
# Fork: 1 of 1
# Warmup Iteration   1: 541.872 us/op
# Warmup Iteration   2: 536.330 us/op
# Warmup Iteration   3: 536.057 us/op
# Warmup Iteration   4: 535.784 us/op
# Warmup Iteration   5: 534.894 us/op
Iteration   1: 535.085 us/op
Iteration   2: 535.423 us/op
Iteration   3: 535.315 us/op
Iteration   4: 535.237 us/op
Iteration   5: 534.808 us/op
Iteration   6: 535.188 us/op
Iteration   7: 535.048 us/op
Iteration   8: 534.772 us/op
Iteration   9: 534.902 us/op
Iteration  10: 535.181 us/op
Iteration  11: 534.876 us/op
Iteration  12: 535.085 us/op
Iteration  13: 534.769 us/op
Iteration  14: 535.139 us/op
Iteration  15: 534.894 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  535.048 ±(99.9%) 0.218 us/op [Average]
  (min, avg, max) = (534.769, 535.048, 535.423), stdev = 0.204
  CI (99.9%): [534.830, 535.266] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 44.93% complete, ETA 04:27:37
# Fork: 1 of 1
# Warmup Iteration   1: 928629.418 us/op
# Warmup Iteration   2: 888195.868 us/op
# Warmup Iteration   3: 887623.300 us/op
# Warmup Iteration   4: 889492.629 us/op
# Warmup Iteration   5: 885624.395 us/op
Iteration   1: 887553.327 us/op
Iteration   2: 886590.748 us/op
Iteration   3: 886977.364 us/op
Iteration   4: 886847.825 us/op
Iteration   5: 886241.771 us/op
Iteration   6: 885985.597 us/op
Iteration   7: 887655.432 us/op
Iteration   8: 885749.278 us/op
Iteration   9: 887446.701 us/op
Iteration  10: 886440.589 us/op
Iteration  11: 885869.371 us/op
Iteration  12: 887146.030 us/op
Iteration  13: 887414.276 us/op
Iteration  14: 887687.572 us/op
Iteration  15: 886030.652 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  886775.769 ±(99.9%) 741.609 us/op [Average]
  (min, avg, max) = (885749.278, 886775.769, 887687.572), stdev = 693.701
  CI (99.9%): [886034.160, 887517.378] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 45.65% complete, ETA 04:24:25
# Fork: 1 of 1
# Warmup Iteration   1: 234835.687 us/op
# Warmup Iteration   2: 237986.420 us/op
# Warmup Iteration   3: 240253.780 us/op
# Warmup Iteration   4: 240471.286 us/op
# Warmup Iteration   5: 242601.181 us/op
Iteration   1: 235775.498 us/op
Iteration   2: 245742.843 us/op
Iteration   3: 240754.152 us/op
Iteration   4: 242393.990 us/op
Iteration   5: 240814.063 us/op
Iteration   6: 240217.169 us/op
Iteration   7: 240215.283 us/op
Iteration   8: 243899.205 us/op
Iteration   9: 239078.847 us/op
Iteration  10: 240682.334 us/op
Iteration  11: 234276.843 us/op
Iteration  12: 244382.145 us/op
Iteration  13: 241910.933 us/op
Iteration  14: 236739.030 us/op
Iteration  15: 238340.323 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  240348.177 ±(99.9%) 3399.691 us/op [Average]
  (min, avg, max) = (234276.843, 240348.177, 245742.843), stdev = 3180.073
  CI (99.9%): [236948.486, 243747.869] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 46.38% complete, ETA 04:20:59
# Fork: 1 of 1
# Warmup Iteration   1: 2783441.696 us/op
# Warmup Iteration   2: 2193204.441 us/op
# Warmup Iteration   3: 2177798.748 us/op
# Warmup Iteration   4: 2219991.437 us/op
# Warmup Iteration   5: 2186388.617 us/op
Iteration   1: 2203253.487 us/op
Iteration   2: 2164151.952 us/op
Iteration   3: 2163925.605 us/op
Iteration   4: 2227376.122 us/op
Iteration   5: 2165533.825 us/op
Iteration   6: 2184650.720 us/op
Iteration   7: 2243862.228 us/op
Iteration   8: 2195726.255 us/op
Iteration   9: 2223883.872 us/op
Iteration  10: 2198957.905 us/op
Iteration  11: 2191061.094 us/op
Iteration  12: 2195399.443 us/op
Iteration  13: 2176291.408 us/op
Iteration  14: 2166650.371 us/op
Iteration  15: 2171250.770 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  2191465.004 ±(99.9%) 26791.916 us/op [Average]
  (min, avg, max) = (2163925.605, 2191465.004, 2243862.228), stdev = 25061.175
  CI (99.9%): [2164673.088, 2218256.920] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 47.10% complete, ETA 04:17:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.698 us/op
# Warmup Iteration   2: 0.679 us/op
# Warmup Iteration   3: 0.678 us/op
# Warmup Iteration   4: 0.678 us/op
# Warmup Iteration   5: 0.678 us/op
Iteration   1: 0.678 us/op
Iteration   2: 0.678 us/op
Iteration   3: 0.678 us/op
Iteration   4: 0.678 us/op
Iteration   5: 0.678 us/op
Iteration   6: 0.678 us/op
Iteration   7: 0.679 us/op
Iteration   8: 0.678 us/op
Iteration   9: 0.678 us/op
Iteration  10: 0.678 us/op
Iteration  11: 0.678 us/op
Iteration  12: 0.678 us/op
Iteration  13: 0.678 us/op
Iteration  14: 0.678 us/op
Iteration  15: 0.678 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.678 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.678, 0.678, 0.679), stdev = 0.001
  CI (99.9%): [0.678, 0.678] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 47.82% complete, ETA 04:14:23
# Fork: 1 of 1
# Warmup Iteration   1: 1.656 us/op
# Warmup Iteration   2: 1.610 us/op
# Warmup Iteration   3: 1.611 us/op
# Warmup Iteration   4: 1.611 us/op
# Warmup Iteration   5: 1.611 us/op
Iteration   1: 1.610 us/op
Iteration   2: 1.610 us/op
Iteration   3: 1.609 us/op
Iteration   4: 1.610 us/op
Iteration   5: 1.610 us/op
Iteration   6: 1.610 us/op
Iteration   7: 1.610 us/op
Iteration   8: 1.611 us/op
Iteration   9: 1.610 us/op
Iteration  10: 1.611 us/op
Iteration  11: 1.611 us/op
Iteration  12: 1.611 us/op
Iteration  13: 1.610 us/op
Iteration  14: 1.611 us/op
Iteration  15: 1.611 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  1.610 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (1.609, 1.610, 1.611), stdev = 0.001
  CI (99.9%): [1.610, 1.611] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 48.55% complete, ETA 04:10:54
# Fork: 1 of 1
# Warmup Iteration   1: 2.861 us/op
# Warmup Iteration   2: 2.799 us/op
# Warmup Iteration   3: 2.796 us/op
# Warmup Iteration   4: 2.795 us/op
# Warmup Iteration   5: 2.794 us/op
Iteration   1: 2.795 us/op
Iteration   2: 2.795 us/op
Iteration   3: 2.795 us/op
Iteration   4: 2.796 us/op
Iteration   5: 2.795 us/op
Iteration   6: 2.796 us/op
Iteration   7: 2.796 us/op
Iteration   8: 2.797 us/op
Iteration   9: 2.797 us/op
Iteration  10: 2.798 us/op
Iteration  11: 2.796 us/op
Iteration  12: 2.798 us/op
Iteration  13: 2.799 us/op
Iteration  14: 2.798 us/op
Iteration  15: 2.800 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  2.797 ±(99.9%) 0.002 us/op [Average]
  (min, avg, max) = (2.795, 2.797, 2.800), stdev = 0.001
  CI (99.9%): [2.795, 2.798] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 49.27% complete, ETA 04:07:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.050 us/op
# Warmup Iteration   2: 0.052 us/op
# Warmup Iteration   3: 0.051 us/op
# Warmup Iteration   4: 0.051 us/op
# Warmup Iteration   5: 0.051 us/op
Iteration   1: 0.051 us/op
Iteration   2: 0.051 us/op
Iteration   3: 0.051 us/op
Iteration   4: 0.051 us/op
Iteration   5: 0.051 us/op
Iteration   6: 0.051 us/op
Iteration   7: 0.051 us/op
Iteration   8: 0.051 us/op
Iteration   9: 0.051 us/op
Iteration  10: 0.051 us/op
Iteration  11: 0.051 us/op
Iteration  12: 0.051 us/op
Iteration  13: 0.051 us/op
Iteration  14: 0.051 us/op
Iteration  15: 0.051 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.051 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.051, 0.051, 0.051), stdev = 0.001
  CI (99.9%): [0.051, 0.051] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 50.00% complete, ETA 04:03:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.478 us/op
# Warmup Iteration   2: 0.458 us/op
# Warmup Iteration   3: 0.490 us/op
# Warmup Iteration   4: 0.500 us/op
# Warmup Iteration   5: 0.491 us/op
Iteration   1: 0.491 us/op
Iteration   2: 0.492 us/op
Iteration   3: 0.500 us/op
Iteration   4: 0.489 us/op
Iteration   5: 0.491 us/op
Iteration   6: 0.492 us/op
Iteration   7: 0.489 us/op
Iteration   8: 0.489 us/op
Iteration   9: 0.503 us/op
Iteration  10: 0.489 us/op
Iteration  11: 0.500 us/op
Iteration  12: 0.490 us/op
Iteration  13: 0.492 us/op
Iteration  14: 0.491 us/op
Iteration  15: 0.489 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.492 ±(99.9%) 0.005 us/op [Average]
  (min, avg, max) = (0.489, 0.492, 0.503), stdev = 0.005
  CI (99.9%): [0.488, 0.497] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 50.72% complete, ETA 04:00:25
# Fork: 1 of 1
# Warmup Iteration   1: 4.934 us/op
# Warmup Iteration   2: 4.664 us/op
# Warmup Iteration   3: 5.081 us/op
# Warmup Iteration   4: 5.040 us/op
# Warmup Iteration   5: 5.077 us/op
Iteration   1: 5.105 us/op
Iteration   2: 5.064 us/op
Iteration   3: 5.092 us/op
Iteration   4: 5.218 us/op
Iteration   5: 5.127 us/op
Iteration   6: 5.029 us/op
Iteration   7: 5.099 us/op
Iteration   8: 5.133 us/op
Iteration   9: 5.125 us/op
Iteration  10: 5.078 us/op
Iteration  11: 5.128 us/op
Iteration  12: 5.049 us/op
Iteration  13: 4.991 us/op
Iteration  14: 5.092 us/op
Iteration  15: 5.088 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  5.095 ±(99.9%) 0.056 us/op [Average]
  (min, avg, max) = (4.991, 5.095, 5.218), stdev = 0.052
  CI (99.9%): [5.039, 5.151] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 51.45% complete, ETA 03:56:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.054 us/op
# Warmup Iteration   2: 0.058 us/op
# Warmup Iteration   3: 0.048 us/op
# Warmup Iteration   4: 0.048 us/op
# Warmup Iteration   5: 0.048 us/op
Iteration   1: 0.048 us/op
Iteration   2: 0.048 us/op
Iteration   3: 0.048 us/op
Iteration   4: 0.048 us/op
Iteration   5: 0.048 us/op
Iteration   6: 0.048 us/op
Iteration   7: 0.048 us/op
Iteration   8: 0.048 us/op
Iteration   9: 0.048 us/op
Iteration  10: 0.048 us/op
Iteration  11: 0.048 us/op
Iteration  12: 0.048 us/op
Iteration  13: 0.048 us/op
Iteration  14: 0.048 us/op
Iteration  15: 0.049 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.048 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.048, 0.048, 0.049), stdev = 0.001
  CI (99.9%): [0.048, 0.048] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 52.17% complete, ETA 03:53:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.441 us/op
# Warmup Iteration   2: 0.424 us/op
# Warmup Iteration   3: 0.421 us/op
# Warmup Iteration   4: 0.427 us/op
# Warmup Iteration   5: 0.429 us/op
Iteration   1: 0.435 us/op
Iteration   2: 0.420 us/op
Iteration   3: 0.429 us/op
Iteration   4: 0.428 us/op
Iteration   5: 0.420 us/op
Iteration   6: 0.420 us/op
Iteration   7: 0.430 us/op
Iteration   8: 0.423 us/op
Iteration   9: 0.420 us/op
Iteration  10: 0.428 us/op
Iteration  11: 0.437 us/op
Iteration  12: 0.427 us/op
Iteration  13: 0.429 us/op
Iteration  14: 0.426 us/op
Iteration  15: 0.423 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.426 ±(99.9%) 0.006 us/op [Average]
  (min, avg, max) = (0.420, 0.426, 0.437), stdev = 0.005
  CI (99.9%): [0.421, 0.432] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 52.90% complete, ETA 03:49:56
# Fork: 1 of 1
# Warmup Iteration   1: 5.313 us/op
# Warmup Iteration   2: 5.500 us/op
# Warmup Iteration   3: 4.789 us/op
# Warmup Iteration   4: 4.786 us/op
# Warmup Iteration   5: 4.845 us/op
Iteration   1: 4.843 us/op
Iteration   2: 4.921 us/op
Iteration   3: 4.753 us/op
Iteration   4: 4.706 us/op
Iteration   5: 4.520 us/op
Iteration   6: 4.420 us/op
Iteration   7: 4.426 us/op
Iteration   8: 4.580 us/op
Iteration   9: 4.378 us/op
Iteration  10: 4.622 us/op
Iteration  11: 4.816 us/op
Iteration  12: 4.426 us/op
Iteration  13: 4.547 us/op
Iteration  14: 4.582 us/op
Iteration  15: 4.571 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  4.607 ±(99.9%) 0.180 us/op [Average]
  (min, avg, max) = (4.378, 4.607, 4.921), stdev = 0.168
  CI (99.9%): [4.427, 4.787] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 53.62% complete, ETA 03:46:26
# Fork: 1 of 1
# Warmup Iteration   1: 15246.012 us/op
# Warmup Iteration   2: 14830.756 us/op
# Warmup Iteration   3: 14793.508 us/op
# Warmup Iteration   4: 14788.716 us/op
# Warmup Iteration   5: 14779.484 us/op
Iteration   1: 14798.396 us/op
Iteration   2: 14800.584 us/op
Iteration   3: 14806.802 us/op
Iteration   4: 14801.201 us/op
Iteration   5: 14800.932 us/op
Iteration   6: 14795.102 us/op
Iteration   7: 14792.587 us/op
Iteration   8: 14806.486 us/op
Iteration   9: 14801.513 us/op
Iteration  10: 14785.491 us/op
Iteration  11: 14779.524 us/op
Iteration  12: 14783.588 us/op
Iteration  13: 14779.606 us/op
Iteration  14: 14807.078 us/op
Iteration  15: 14796.405 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  14795.686 ±(99.9%) 10.197 us/op [Average]
  (min, avg, max) = (14779.524, 14795.686, 14807.078), stdev = 9.538
  CI (99.9%): [14785.489, 14805.883] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 54.35% complete, ETA 03:42:56
# Fork: 1 of 1
# Warmup Iteration   1: 405.848 us/op
# Warmup Iteration   2: 418.482 us/op
# Warmup Iteration   3: 422.170 us/op
# Warmup Iteration   4: 420.228 us/op
# Warmup Iteration   5: 423.602 us/op
Iteration   1: 420.901 us/op
Iteration   2: 421.098 us/op
Iteration   3: 419.488 us/op
Iteration   4: 420.814 us/op
Iteration   5: 420.162 us/op
Iteration   6: 422.552 us/op
Iteration   7: 421.788 us/op
Iteration   8: 420.981 us/op
Iteration   9: 423.482 us/op
Iteration  10: 424.280 us/op
Iteration  11: 421.903 us/op
Iteration  12: 420.721 us/op
Iteration  13: 420.572 us/op
Iteration  14: 419.613 us/op
Iteration  15: 421.871 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  421.349 ±(99.9%) 1.427 us/op [Average]
  (min, avg, max) = (419.488, 421.349, 424.280), stdev = 1.334
  CI (99.9%): [419.922, 422.775] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 55.07% complete, ETA 03:39:25
# Fork: 1 of 1
# Warmup Iteration   1: 44316.189 us/op
# Warmup Iteration   2: 60727.743 us/op
# Warmup Iteration   3: 60262.170 us/op
# Warmup Iteration   4: 60442.921 us/op
# Warmup Iteration   5: 60203.816 us/op
Iteration   1: 60302.089 us/op
Iteration   2: 60611.137 us/op
Iteration   3: 60430.796 us/op
Iteration   4: 60365.015 us/op
Iteration   5: 60421.176 us/op
Iteration   6: 60488.014 us/op
Iteration   7: 60658.120 us/op
Iteration   8: 60348.941 us/op
Iteration   9: 60359.867 us/op
Iteration  10: 60355.617 us/op
Iteration  11: 60270.766 us/op
Iteration  12: 60272.319 us/op
Iteration  13: 60632.177 us/op
Iteration  14: 60334.651 us/op
Iteration  15: 60336.313 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  60412.466 ±(99.9%) 137.101 us/op [Average]
  (min, avg, max) = (60270.766, 60412.466, 60658.120), stdev = 128.244
  CI (99.9%): [60275.366, 60549.567] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 55.80% complete, ETA 03:35:55
# Fork: 1 of 1
# Warmup Iteration   1: 3967778.657 us/op
# Warmup Iteration   2: 4189217.823 us/op
# Warmup Iteration   3: 4215846.901 us/op
# Warmup Iteration   4: 4192115.344 us/op
# Warmup Iteration   5: 4192258.132 us/op
Iteration   1: 4194813.483 us/op
Iteration   2: 4203096.869 us/op
Iteration   3: 4193334.988 us/op
Iteration   4: 4220805.966 us/op
Iteration   5: 4206867.060 us/op
Iteration   6: 4187284.847 us/op
Iteration   7: 4211991.963 us/op
Iteration   8: 4178893.818 us/op
Iteration   9: 4184873.327 us/op
Iteration  10: 4201907.105 us/op
Iteration  11: 4196880.993 us/op
Iteration  12: 4205914.194 us/op
Iteration  13: 4186571.279 us/op
Iteration  14: 4183569.834 us/op
Iteration  15: 4187011.056 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  4196254.452 ±(99.9%) 12770.135 us/op [Average]
  (min, avg, max) = (4178893.818, 4196254.452, 4220805.966), stdev = 11945.193
  CI (99.9%): [4183484.317, 4209024.588] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 56.52% complete, ETA 03:33:03
# Fork: 1 of 1
# Warmup Iteration   1: 3087.944 us/op
# Warmup Iteration   2: 2999.293 us/op
# Warmup Iteration   3: 2997.700 us/op
# Warmup Iteration   4: 2997.770 us/op
# Warmup Iteration   5: 2997.051 us/op
Iteration   1: 2997.847 us/op
Iteration   2: 2998.912 us/op
Iteration   3: 2998.706 us/op
Iteration   4: 2997.565 us/op
Iteration   5: 2996.214 us/op
Iteration   6: 3000.169 us/op
Iteration   7: 2998.387 us/op
Iteration   8: 3004.229 us/op
Iteration   9: 3002.140 us/op
Iteration  10: 3001.431 us/op
Iteration  11: 2999.750 us/op
Iteration  12: 2999.021 us/op
Iteration  13: 2999.298 us/op
Iteration  14: 2997.803 us/op
Iteration  15: 2998.400 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  2999.325 ±(99.9%) 2.156 us/op [Average]
  (min, avg, max) = (2996.214, 2999.325, 3004.229), stdev = 2.017
  CI (99.9%): [2997.168, 3001.481] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 57.24% complete, ETA 03:29:32
# Fork: 1 of 1
# Warmup Iteration   1: 32236.299 us/op
# Warmup Iteration   2: 31517.132 us/op
# Warmup Iteration   3: 31521.457 us/op
# Warmup Iteration   4: 31527.324 us/op
# Warmup Iteration   5: 31528.572 us/op
Iteration   1: 31513.282 us/op
Iteration   2: 31524.219 us/op
Iteration   3: 31547.539 us/op
Iteration   4: 31548.004 us/op
Iteration   5: 31516.782 us/op
Iteration   6: 31538.689 us/op
Iteration   7: 31512.602 us/op
Iteration   8: 31507.355 us/op
Iteration   9: 31505.913 us/op
Iteration  10: 31506.960 us/op
Iteration  11: 31516.162 us/op
Iteration  12: 31507.425 us/op
Iteration  13: 31519.961 us/op
Iteration  14: 31527.232 us/op
Iteration  15: 31524.703 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  31521.122 ±(99.9%) 15.056 us/op [Average]
  (min, avg, max) = (31505.913, 31521.122, 31548.004), stdev = 14.083
  CI (99.9%): [31506.066, 31536.178] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 57.97% complete, ETA 03:26:01
# Fork: 1 of 1
# Warmup Iteration   1: 2909975.130 us/op
# Warmup Iteration   2: 1763395.114 us/op
# Warmup Iteration   3: 1760789.302 us/op
# Warmup Iteration   4: 1760431.058 us/op
# Warmup Iteration   5: 1761075.886 us/op
Iteration   1: 1760320.537 us/op
Iteration   2: 1759977.383 us/op
Iteration   3: 1759843.150 us/op
Iteration   4: 1760730.348 us/op
Iteration   5: 1760637.270 us/op
Iteration   6: 1764485.338 us/op
Iteration   7: 1760845.182 us/op
Iteration   8: 1760778.310 us/op
Iteration   9: 1760971.238 us/op
Iteration  10: 1760739.196 us/op
Iteration  11: 1760128.115 us/op
Iteration  12: 1760590.928 us/op
Iteration  13: 1759985.836 us/op
Iteration  14: 1759623.120 us/op
Iteration  15: 1759902.917 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  1760637.258 ±(99.9%) 1226.304 us/op [Average]
  (min, avg, max) = (1759623.120, 1760637.258, 1764485.338), stdev = 1147.085
  CI (99.9%): [1759410.954, 1761863.561] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 58.69% complete, ETA 03:22:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 us/op
# Warmup Iteration   2: 0.021 us/op
# Warmup Iteration   3: 0.022 us/op
# Warmup Iteration   4: 0.022 us/op
# Warmup Iteration   5: 0.022 us/op
Iteration   1: 0.022 us/op
Iteration   2: 0.022 us/op
Iteration   3: 0.022 us/op
Iteration   4: 0.022 us/op
Iteration   5: 0.022 us/op
Iteration   6: 0.022 us/op
Iteration   7: 0.022 us/op
Iteration   8: 0.022 us/op
Iteration   9: 0.022 us/op
Iteration  10: 0.022 us/op
Iteration  11: 0.022 us/op
Iteration  12: 0.022 us/op
Iteration  13: 0.022 us/op
Iteration  14: 0.022 us/op
Iteration  15: 0.022 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  0.022 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.022, 0.022, 0.022), stdev = 0.001
  CI (99.9%): [0.022, 0.022] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 59.42% complete, ETA 03:19:05
# Fork: 1 of 1
# Warmup Iteration   1: 10223.839 us/op
# Warmup Iteration   2: 10594.525 us/op
# Warmup Iteration   3: 10590.078 us/op
# Warmup Iteration   4: 10590.597 us/op
# Warmup Iteration   5: 10595.079 us/op
Iteration   1: 10588.977 us/op
Iteration   2: 10592.347 us/op
Iteration   3: 10589.606 us/op
Iteration   4: 10594.734 us/op
Iteration   5: 10594.094 us/op
Iteration   6: 10593.273 us/op
Iteration   7: 10588.004 us/op
Iteration   8: 10590.929 us/op
Iteration   9: 10590.672 us/op
Iteration  10: 10582.590 us/op
Iteration  11: 10586.266 us/op
Iteration  12: 10587.278 us/op
Iteration  13: 10583.357 us/op
Iteration  14: 10588.711 us/op
Iteration  15: 10591.781 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  10589.508 ±(99.9%) 3.870 us/op [Average]
  (min, avg, max) = (10582.590, 10589.508, 10594.734), stdev = 3.620
  CI (99.9%): [10585.638, 10593.378] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 60.14% complete, ETA 03:15:33
# Fork: 1 of 1
# Warmup Iteration   1: 39172.640 us/op
# Warmup Iteration   2: 30232.073 us/op
# Warmup Iteration   3: 31264.027 us/op
# Warmup Iteration   4: 32208.855 us/op
# Warmup Iteration   5: 36085.398 us/op
Iteration   1: 40985.168 us/op
Iteration   2: 32144.222 us/op
Iteration   3: 28880.135 us/op
Iteration   4: 37984.770 us/op
Iteration   5: 33293.692 us/op
Iteration   6: 33176.646 us/op
Iteration   7: 42635.159 us/op
Iteration   8: 32669.542 us/op
Iteration   9: 33896.169 us/op
Iteration  10: 38419.156 us/op
Iteration  11: 35201.034 us/op
Iteration  12: 37500.818 us/op
Iteration  13: 37279.998 us/op
Iteration  14: 40116.783 us/op
Iteration  15: 35186.747 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  35958.003 ±(99.9%) 4011.816 us/op [Average]
  (min, avg, max) = (28880.135, 35958.003, 42635.159), stdev = 3752.655
  CI (99.9%): [31946.187, 39969.818] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 60.87% complete, ETA 03:12:01
# Fork: 1 of 1
# Warmup Iteration   1: 43417.417 us/op
# Warmup Iteration   2: 42096.226 us/op
# Warmup Iteration   3: 41872.364 us/op
# Warmup Iteration   4: 41932.107 us/op
# Warmup Iteration   5: 41833.294 us/op
Iteration   1: 41900.965 us/op
Iteration   2: 41843.173 us/op
Iteration   3: 42141.928 us/op
Iteration   4: 41979.205 us/op
Iteration   5: 42066.452 us/op
Iteration   6: 41866.713 us/op
Iteration   7: 41906.847 us/op
Iteration   8: 41954.849 us/op
Iteration   9: 41974.758 us/op
Iteration  10: 41935.349 us/op
Iteration  11: 42052.467 us/op
Iteration  12: 41852.464 us/op
Iteration  13: 41860.944 us/op
Iteration  14: 42078.735 us/op
Iteration  15: 41978.271 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  41959.541 ±(99.9%) 98.424 us/op [Average]
  (min, avg, max) = (41843.173, 41959.541, 42141.928), stdev = 92.066
  CI (99.9%): [41861.117, 42057.966] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 61.59% complete, ETA 03:08:29
# Fork: 1 of 1
# Warmup Iteration   1: 69001.736 us/op
# Warmup Iteration   2: 66825.165 us/op
# Warmup Iteration   3: 67750.435 us/op
# Warmup Iteration   4: 66240.911 us/op
# Warmup Iteration   5: 68097.578 us/op
Iteration   1: 68378.985 us/op
Iteration   2: 67240.407 us/op
Iteration   3: 67600.236 us/op
Iteration   4: 67316.999 us/op
Iteration   5: 67777.600 us/op
Iteration   6: 68157.344 us/op
Iteration   7: 67952.159 us/op
Iteration   8: 66800.860 us/op
Iteration   9: 67148.817 us/op
Iteration  10: 67643.666 us/op
Iteration  11: 66320.490 us/op
Iteration  12: 68316.366 us/op
Iteration  13: 66776.287 us/op
Iteration  14: 66768.122 us/op
Iteration  15: 66370.332 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  67371.245 ±(99.9%) 721.375 us/op [Average]
  (min, avg, max) = (66320.490, 67371.245, 68378.985), stdev = 674.775
  CI (99.9%): [66649.869, 68092.620] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 62.32% complete, ETA 03:04:57
# Fork: 1 of 1
# Warmup Iteration   1: 25408.159 us/op
# Warmup Iteration   2: 24095.220 us/op
# Warmup Iteration   3: 24356.103 us/op
# Warmup Iteration   4: 24005.162 us/op
# Warmup Iteration   5: 24093.902 us/op
Iteration   1: 24201.692 us/op
Iteration   2: 24323.951 us/op
Iteration   3: 24302.651 us/op
Iteration   4: 24377.795 us/op
Iteration   5: 24398.147 us/op
Iteration   6: 24411.327 us/op
Iteration   7: 24390.885 us/op
Iteration   8: 24416.761 us/op
Iteration   9: 24323.897 us/op
Iteration  10: 24238.974 us/op
Iteration  11: 24236.773 us/op
Iteration  12: 24512.510 us/op
Iteration  13: 24342.658 us/op
Iteration  14: 24259.815 us/op
Iteration  15: 24206.914 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  24329.650 ±(99.9%) 95.868 us/op [Average]
  (min, avg, max) = (24201.692, 24329.650, 24512.510), stdev = 89.675
  CI (99.9%): [24233.782, 24425.518] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 63.04% complete, ETA 03:01:25
# Fork: 1 of 1
# Warmup Iteration   1: 42088.754 us/op
# Warmup Iteration   2: 41844.731 us/op
# Warmup Iteration   3: 40659.045 us/op
# Warmup Iteration   4: 41169.497 us/op
# Warmup Iteration   5: 38949.749 us/op
Iteration   1: 41551.704 us/op
Iteration   2: 41139.512 us/op
Iteration   3: 40311.933 us/op
Iteration   4: 40699.302 us/op
Iteration   5: 41521.731 us/op
Iteration   6: 42198.217 us/op
Iteration   7: 41829.685 us/op
Iteration   8: 39796.938 us/op
Iteration   9: 42048.465 us/op
Iteration  10: 40759.566 us/op
Iteration  11: 41092.089 us/op
Iteration  12: 42367.303 us/op
Iteration  13: 42493.177 us/op
Iteration  14: 42539.087 us/op
Iteration  15: 41832.358 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  41478.738 ±(99.9%) 886.178 us/op [Average]
  (min, avg, max) = (39796.938, 41478.738, 42539.087), stdev = 828.932
  CI (99.9%): [40592.560, 42364.916] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 63.77% complete, ETA 02:57:53
# Fork: 1 of 1
# Warmup Iteration   1: 837.161 us/op
# Warmup Iteration   2: 809.865 us/op
# Warmup Iteration   3: 806.702 us/op
# Warmup Iteration   4: 807.808 us/op
# Warmup Iteration   5: 811.032 us/op
Iteration   1: 810.765 us/op
Iteration   2: 806.895 us/op
Iteration   3: 806.984 us/op
Iteration   4: 805.164 us/op
Iteration   5: 803.000 us/op
Iteration   6: 803.515 us/op
Iteration   7: 802.520 us/op
Iteration   8: 808.843 us/op
Iteration   9: 801.970 us/op
Iteration  10: 808.239 us/op
Iteration  11: 804.953 us/op
Iteration  12: 806.677 us/op
Iteration  13: 802.398 us/op
Iteration  14: 804.184 us/op
Iteration  15: 806.734 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  805.523 ±(99.9%) 2.810 us/op [Average]
  (min, avg, max) = (801.970, 805.523, 810.765), stdev = 2.629
  CI (99.9%): [802.713, 808.333] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 64.49% complete, ETA 02:54:20
# Fork: 1 of 1
# Warmup Iteration   1: 11034.779 us/op
# Warmup Iteration   2: 10889.867 us/op
# Warmup Iteration   3: 10937.587 us/op
# Warmup Iteration   4: 10918.265 us/op
# Warmup Iteration   5: 10858.871 us/op
Iteration   1: 10841.052 us/op
Iteration   2: 10920.099 us/op
Iteration   3: 10870.653 us/op
Iteration   4: 10893.286 us/op
Iteration   5: 10848.934 us/op
Iteration   6: 10868.636 us/op
Iteration   7: 10837.411 us/op
Iteration   8: 10886.122 us/op
Iteration   9: 10853.565 us/op
Iteration  10: 10861.231 us/op
Iteration  11: 10861.248 us/op
Iteration  12: 10804.438 us/op
Iteration  13: 10836.192 us/op
Iteration  14: 10914.682 us/op
Iteration  15: 10868.948 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  10864.433 ±(99.9%) 32.647 us/op [Average]
  (min, avg, max) = (10804.438, 10864.433, 10920.099), stdev = 30.538
  CI (99.9%): [10831.786, 10897.080] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 65.22% complete, ETA 02:50:47
# Fork: 1 of 1
# Warmup Iteration   1: 120900.479 us/op
# Warmup Iteration   2: 119831.503 us/op
# Warmup Iteration   3: 118639.144 us/op
# Warmup Iteration   4: 119711.539 us/op
# Warmup Iteration   5: 120016.420 us/op
Iteration   1: 119465.790 us/op
Iteration   2: 121677.303 us/op
Iteration   3: 121814.330 us/op
Iteration   4: 119213.108 us/op
Iteration   5: 121771.012 us/op
Iteration   6: 120073.023 us/op
Iteration   7: 121511.563 us/op
Iteration   8: 119642.111 us/op
Iteration   9: 119906.089 us/op
Iteration  10: 120328.096 us/op
Iteration  11: 121618.888 us/op
Iteration  12: 120522.230 us/op
Iteration  13: 120971.447 us/op
Iteration  14: 120495.523 us/op
Iteration  15: 119677.883 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  120579.226 ±(99.9%) 982.925 us/op [Average]
  (min, avg, max) = (119213.108, 120579.226, 121814.330), stdev = 919.429
  CI (99.9%): [119596.301, 121562.152] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 65.94% complete, ETA 02:47:15
# Fork: 1 of 1
# Warmup Iteration   1: 896709.417 us/op
# Warmup Iteration   2: 853083.160 us/op
# Warmup Iteration   3: 850652.579 us/op
# Warmup Iteration   4: 843834.386 us/op
# Warmup Iteration   5: 843111.402 us/op
Iteration   1: 844642.179 us/op
Iteration   2: 842782.641 us/op
Iteration   3: 838138.200 us/op
Iteration   4: 842005.054 us/op
Iteration   5: 847522.244 us/op
Iteration   6: 837373.852 us/op
Iteration   7: 855786.096 us/op
Iteration   8: 841092.206 us/op
Iteration   9: 849579.499 us/op
Iteration  10: 832351.608 us/op
Iteration  11: 836515.375 us/op
Iteration  12: 850543.606 us/op
Iteration  13: 835919.897 us/op
Iteration  14: 845501.623 us/op
Iteration  15: 852702.631 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  843497.114 ±(99.9%) 7279.116 us/op [Average]
  (min, avg, max) = (832351.608, 843497.114, 855786.096), stdev = 6808.890
  CI (99.9%): [836217.998, 850776.231] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 66.66% complete, ETA 02:43:45
# Fork: 1 of 1
# Warmup Iteration   1: 209753.429 ±(99.9%) 12041.465 us/op
# Warmup Iteration   2: 204520.469 ±(99.9%) 1507.529 us/op
# Warmup Iteration   3: 205290.851 ±(99.9%) 1806.069 us/op
# Warmup Iteration   4: 204456.270 ±(99.9%) 1386.146 us/op
# Warmup Iteration   5: 204964.509 ±(99.9%) 1982.486 us/op
Iteration   1: 204798.663 ±(99.9%) 2018.000 us/op
                 createNewObjects·p0.00:   200015.872 us/op
                 createNewObjects·p0.50:   203685.888 us/op
                 createNewObjects·p0.90:   211025.920 us/op
                 createNewObjects·p0.95:   213647.360 us/op
                 createNewObjects·p0.99:   217841.664 us/op
                 createNewObjects·p0.999:  217841.664 us/op
                 createNewObjects·p0.9999: 217841.664 us/op
                 createNewObjects·p1.00:   217841.664 us/op

Iteration   2: 205440.648 ±(99.9%) 1914.991 us/op
                 createNewObjects·p0.00:   200540.160 us/op
                 createNewObjects·p0.50:   204210.176 us/op
                 createNewObjects·p0.90:   210763.776 us/op
                 createNewObjects·p0.95:   212467.712 us/op
                 createNewObjects·p0.99:   221249.536 us/op
                 createNewObjects·p0.999:  221249.536 us/op
                 createNewObjects·p0.9999: 221249.536 us/op
                 createNewObjects·p1.00:   221249.536 us/op

Iteration   3: 205611.844 ±(99.9%) 1619.535 us/op
                 createNewObjects·p0.00:   200540.160 us/op
                 createNewObjects·p0.50:   204996.608 us/op
                 createNewObjects·p0.90:   210501.632 us/op
                 createNewObjects·p0.95:   211288.064 us/op
                 createNewObjects·p0.99:   214433.792 us/op
                 createNewObjects·p0.999:  214433.792 us/op
                 createNewObjects·p0.9999: 214433.792 us/op
                 createNewObjects·p1.00:   214433.792 us/op

Iteration   4: 205098.256 ±(99.9%) 1666.778 us/op
                 createNewObjects·p0.00:   201064.448 us/op
                 createNewObjects·p0.50:   203948.032 us/op
                 createNewObjects·p0.90:   211288.064 us/op
                 createNewObjects·p0.95:   212074.496 us/op
                 createNewObjects·p0.99:   212598.784 us/op
                 createNewObjects·p0.999:  212598.784 us/op
                 createNewObjects·p0.9999: 212598.784 us/op
                 createNewObjects·p1.00:   212598.784 us/op

Iteration   5: 206136.132 ±(99.9%) 2207.279 us/op
                 createNewObjects·p0.00:   201326.592 us/op
                 createNewObjects·p0.50:   204734.464 us/op
                 createNewObjects·p0.90:   211812.352 us/op
                 createNewObjects·p0.95:   216399.872 us/op
                 createNewObjects·p0.99:   222035.968 us/op
                 createNewObjects·p0.999:  222035.968 us/op
                 createNewObjects·p0.9999: 222035.968 us/op
                 createNewObjects·p1.00:   222035.968 us/op

Iteration   6: 205873.988 ±(99.9%) 1837.382 us/op
                 createNewObjects·p0.00:   200540.160 us/op
                 createNewObjects·p0.50:   204996.608 us/op
                 createNewObjects·p0.90:   211550.208 us/op
                 createNewObjects·p0.95:   214040.576 us/op
                 createNewObjects·p0.99:   218628.096 us/op
                 createNewObjects·p0.999:  218628.096 us/op
                 createNewObjects·p0.9999: 218628.096 us/op
                 createNewObjects·p1.00:   218628.096 us/op

Iteration   7: 204943.109 ±(99.9%) 1474.379 us/op
                 createNewObjects·p0.00:   200540.160 us/op
                 createNewObjects·p0.50:   203948.032 us/op
                 createNewObjects·p0.90:   209190.912 us/op
                 createNewObjects·p0.95:   211025.920 us/op
                 createNewObjects·p0.99:   212336.640 us/op
                 createNewObjects·p0.999:  212336.640 us/op
                 createNewObjects·p0.9999: 212336.640 us/op
                 createNewObjects·p1.00:   212336.640 us/op

Iteration   8: 205365.750 ±(99.9%) 1541.725 us/op
                 createNewObjects·p0.00:   201326.592 us/op
                 createNewObjects·p0.50:   204472.320 us/op
                 createNewObjects·p0.90:   210239.488 us/op
                 createNewObjects·p0.95:   211419.136 us/op
                 createNewObjects·p0.99:   212598.784 us/op
                 createNewObjects·p0.999:  212598.784 us/op
                 createNewObjects·p0.9999: 212598.784 us/op
                 createNewObjects·p1.00:   212598.784 us/op

Iteration   9: 204306.474 ±(99.9%) 1400.389 us/op
                 createNewObjects·p0.00:   200540.160 us/op
                 createNewObjects·p0.50:   203685.888 us/op
                 createNewObjects·p0.90:   208142.336 us/op
                 createNewObjects·p0.95:   209846.272 us/op
                 createNewObjects·p0.99:   210501.632 us/op
                 createNewObjects·p0.999:  210501.632 us/op
                 createNewObjects·p0.9999: 210501.632 us/op
                 createNewObjects·p1.00:   210501.632 us/op

Iteration  10: 205831.189 ±(99.9%) 1783.276 us/op
                 createNewObjects·p0.00:   201588.736 us/op
                 createNewObjects·p0.50:   204472.320 us/op
                 createNewObjects·p0.90:   211288.064 us/op
                 createNewObjects·p0.95:   212860.928 us/op
                 createNewObjects·p0.99:   214695.936 us/op
                 createNewObjects·p0.999:  214695.936 us/op
                 createNewObjects·p0.9999: 214695.936 us/op
                 createNewObjects·p1.00:   214695.936 us/op

Iteration  11: 205724.191 ±(99.9%) 2376.386 us/op
                 createNewObjects·p0.00:   201326.592 us/op
                 createNewObjects·p0.50:   204210.176 us/op
                 createNewObjects·p0.90:   210501.632 us/op
                 createNewObjects·p0.95:   214302.720 us/op
                 createNewObjects·p0.99:   228589.568 us/op
                 createNewObjects·p0.999:  228589.568 us/op
                 createNewObjects·p0.9999: 228589.568 us/op
                 createNewObjects·p1.00:   228589.568 us/op

Iteration  12: 204868.211 ±(99.9%) 1563.504 us/op
                 createNewObjects·p0.00:   200278.016 us/op
                 createNewObjects·p0.50:   203685.888 us/op
                 createNewObjects·p0.90:   209977.344 us/op
                 createNewObjects·p0.95:   211288.064 us/op
                 createNewObjects·p0.99:   212860.928 us/op
                 createNewObjects·p0.999:  212860.928 us/op
                 createNewObjects·p0.9999: 212860.928 us/op
                 createNewObjects·p1.00:   212860.928 us/op

Iteration  13: 204295.774 ±(99.9%) 1780.600 us/op
                 createNewObjects·p0.00:   200015.872 us/op
                 createNewObjects·p0.50:   203423.744 us/op
                 createNewObjects·p0.90:   209977.344 us/op
                 createNewObjects·p0.95:   211550.208 us/op
                 createNewObjects·p0.99:   218365.952 us/op
                 createNewObjects·p0.999:  218365.952 us/op
                 createNewObjects·p0.9999: 218365.952 us/op
                 createNewObjects·p1.00:   218365.952 us/op

Iteration  14: 203680.645 ±(99.9%) 1339.541 us/op
                 createNewObjects·p0.00:   200278.016 us/op
                 createNewObjects·p0.50:   202899.456 us/op
                 createNewObjects·p0.90:   208640.410 us/op
                 createNewObjects·p0.95:   209046.733 us/op
                 createNewObjects·p0.99:   211550.208 us/op
                 createNewObjects·p0.999:  211550.208 us/op
                 createNewObjects·p0.9999: 211550.208 us/op
                 createNewObjects·p1.00:   211550.208 us/op

Iteration  15: 204055.030 ±(99.9%) 1553.092 us/op
                 createNewObjects·p0.00:   199229.440 us/op
                 createNewObjects·p0.50:   203161.600 us/op
                 createNewObjects·p0.90:   209715.200 us/op
                 createNewObjects·p0.95:   210894.848 us/op
                 createNewObjects·p0.99:   212860.928 us/op
                 createNewObjects·p0.999:  212860.928 us/op
                 createNewObjects·p0.9999: 212860.928 us/op
                 createNewObjects·p1.00:   212860.928 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 736
  mean = 205066.774 ±(99.9%) 433.195 us/op

  Histogram, us/op:
    [190000.000, 192500.000) = 0 
    [192500.000, 195000.000) = 0 
    [195000.000, 197500.000) = 0 
    [197500.000, 200000.000) = 1 
    [200000.000, 202500.000) = 172 
    [202500.000, 205000.000) = 291 
    [205000.000, 207500.000) = 110 
    [207500.000, 210000.000) = 88 
    [210000.000, 212500.000) = 51 
    [212500.000, 215000.000) = 16 
    [215000.000, 217500.000) = 0 
    [217500.000, 220000.000) = 4 
    [220000.000, 222500.000) = 2 
    [222500.000, 225000.000) = 0 
    [225000.000, 227500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 199229.440 us/op
     p(50.0000) = 203948.032 us/op
     p(90.0000) = 210239.488 us/op
     p(95.0000) = 211550.208 us/op
     p(99.0000) = 216774.738 us/op
     p(99.9000) = 228589.568 us/op
     p(99.9900) = 228589.568 us/op
     p(99.9990) = 228589.568 us/op
     p(99.9999) = 228589.568 us/op
    p(100.0000) = 228589.568 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 67.39% complete, ETA 02:40:12
# Fork: 1 of 1
# Warmup Iteration   1: 165546.085 ±(99.9%) 9585.395 us/op
# Warmup Iteration   2: 162364.383 ±(99.9%) 1965.663 us/op
# Warmup Iteration   3: 160968.899 ±(99.9%) 1251.727 us/op
# Warmup Iteration   4: 162089.555 ±(99.9%) 1583.105 us/op
# Warmup Iteration   5: 161573.723 ±(99.9%) 1340.535 us/op
Iteration   1: 162322.102 ±(99.9%) 1718.531 us/op
                 createNewObjects·p0.00:   157286.400 us/op
                 createNewObjects·p0.50:   161349.632 us/op
                 createNewObjects·p0.90:   167824.589 us/op
                 createNewObjects·p0.95:   171429.069 us/op
                 createNewObjects·p0.99:   177471.488 us/op
                 createNewObjects·p0.999:  177471.488 us/op
                 createNewObjects·p0.9999: 177471.488 us/op
                 createNewObjects·p1.00:   177471.488 us/op

Iteration   2: 161391.913 ±(99.9%) 1630.038 us/op
                 createNewObjects·p0.00:   157286.400 us/op
                 createNewObjects·p0.50:   160169.984 us/op
                 createNewObjects·p0.90:   166644.941 us/op
                 createNewObjects·p0.95:   168519.270 us/op
                 createNewObjects·p0.99:   179568.640 us/op
                 createNewObjects·p0.999:  179568.640 us/op
                 createNewObjects·p0.9999: 179568.640 us/op
                 createNewObjects·p1.00:   179568.640 us/op

Iteration   3: 162952.093 ±(99.9%) 1977.793 us/op
                 createNewObjects·p0.00:   157810.688 us/op
                 createNewObjects·p0.50:   161218.560 us/op
                 createNewObjects·p0.90:   168742.093 us/op
                 createNewObjects·p0.95:   171809.178 us/op
                 createNewObjects·p0.99:   184287.232 us/op
                 createNewObjects·p0.999:  184287.232 us/op
                 createNewObjects·p0.9999: 184287.232 us/op
                 createNewObjects·p1.00:   184287.232 us/op

Iteration   4: 162034.589 ±(99.9%) 2179.624 us/op
                 createNewObjects·p0.00:   158072.832 us/op
                 createNewObjects·p0.50:   160301.056 us/op
                 createNewObjects·p0.90:   167536.230 us/op
                 createNewObjects·p0.95:   175269.478 us/op
                 createNewObjects·p0.99:   183238.656 us/op
                 createNewObjects·p0.999:  183238.656 us/op
                 createNewObjects·p0.9999: 183238.656 us/op
                 createNewObjects·p1.00:   183238.656 us/op

Iteration   5: 161387.685 ±(99.9%) 1277.827 us/op
                 createNewObjects·p0.00:   157810.688 us/op
                 createNewObjects·p0.50:   160432.128 us/op
                 createNewObjects·p0.90:   166409.011 us/op
                 createNewObjects·p0.95:   167470.694 us/op
                 createNewObjects·p0.99:   170131.456 us/op
                 createNewObjects·p0.999:  170131.456 us/op
                 createNewObjects·p0.9999: 170131.456 us/op
                 createNewObjects·p1.00:   170131.456 us/op

Iteration   6: 161577.951 ±(99.9%) 1825.064 us/op
                 createNewObjects·p0.00:   157810.688 us/op
                 createNewObjects·p0.50:   160169.984 us/op
                 createNewObjects·p0.90:   167247.872 us/op
                 createNewObjects·p0.95:   169554.739 us/op
                 createNewObjects·p0.99:   182714.368 us/op
                 createNewObjects·p0.999:  182714.368 us/op
                 createNewObjects·p0.9999: 182714.368 us/op
                 createNewObjects·p1.00:   182714.368 us/op

Iteration   7: 161725.935 ±(99.9%) 1729.709 us/op
                 createNewObjects·p0.00:   157024.256 us/op
                 createNewObjects·p0.50:   160169.984 us/op
                 createNewObjects·p0.90:   166723.584 us/op
                 createNewObjects·p0.95:   167693.517 us/op
                 createNewObjects·p0.99:   176160.768 us/op
                 createNewObjects·p0.999:  176160.768 us/op
                 createNewObjects·p0.9999: 176160.768 us/op
                 createNewObjects·p1.00:   176160.768 us/op

Iteration   8: 162250.223 ±(99.9%) 1608.433 us/op
                 createNewObjects·p0.00:   157548.544 us/op
                 createNewObjects·p0.50:   160694.272 us/op
                 createNewObjects·p0.90:   168322.662 us/op
                 createNewObjects·p0.95:   169305.702 us/op
                 createNewObjects·p0.99:   172228.608 us/op
                 createNewObjects·p0.999:  172228.608 us/op
                 createNewObjects·p0.9999: 172228.608 us/op
                 createNewObjects·p1.00:   172228.608 us/op

Iteration   9: 162203.714 ±(99.9%) 1501.705 us/op
                 createNewObjects·p0.00:   158072.832 us/op
                 createNewObjects·p0.50:   160694.272 us/op
                 createNewObjects·p0.90:   167693.517 us/op
                 createNewObjects·p0.95:   168296.448 us/op
                 createNewObjects·p0.99:   172490.752 us/op
                 createNewObjects·p0.999:  172490.752 us/op
                 createNewObjects·p0.9999: 172490.752 us/op
                 createNewObjects·p1.00:   172490.752 us/op

Iteration  10: 160998.026 ±(99.9%) 1585.168 us/op
                 createNewObjects·p0.00:   157286.400 us/op
                 createNewObjects·p0.50:   159645.696 us/op
                 createNewObjects·p0.90:   165884.723 us/op
                 createNewObjects·p0.95:   167981.875 us/op
                 createNewObjects·p0.99:   174850.048 us/op
                 createNewObjects·p0.999:  174850.048 us/op
                 createNewObjects·p0.9999: 174850.048 us/op
                 createNewObjects·p1.00:   174850.048 us/op

Iteration  11: 161147.823 ±(99.9%) 1683.194 us/op
                 createNewObjects·p0.00:   157810.688 us/op
                 createNewObjects·p0.50:   159645.696 us/op
                 createNewObjects·p0.90:   167300.301 us/op
                 createNewObjects·p0.95:   171232.461 us/op
                 createNewObjects·p0.99:   175374.336 us/op
                 createNewObjects·p0.999:  175374.336 us/op
                 createNewObjects·p0.9999: 175374.336 us/op
                 createNewObjects·p1.00:   175374.336 us/op

Iteration  12: 161324.263 ±(99.9%) 1440.552 us/op
                 createNewObjects·p0.00:   156762.112 us/op
                 createNewObjects·p0.50:   160694.272 us/op
                 createNewObjects·p0.90:   166671.155 us/op
                 createNewObjects·p0.95:   168296.448 us/op
                 createNewObjects·p0.99:   172490.752 us/op
                 createNewObjects·p0.999:  172490.752 us/op
                 createNewObjects·p0.9999: 172490.752 us/op
                 createNewObjects·p1.00:   172490.752 us/op

Iteration  13: 160989.704 ±(99.9%) 1309.287 us/op
                 createNewObjects·p0.00:   157548.544 us/op
                 createNewObjects·p0.50:   159907.840 us/op
                 createNewObjects·p0.90:   165675.008 us/op
                 createNewObjects·p0.95:   166356.582 us/op
                 createNewObjects·p0.99:   171442.176 us/op
                 createNewObjects·p0.999:  171442.176 us/op
                 createNewObjects·p0.9999: 171442.176 us/op
                 createNewObjects·p1.00:   171442.176 us/op

Iteration  14: 161734.392 ±(99.9%) 1498.995 us/op
                 createNewObjects·p0.00:   157810.688 us/op
                 createNewObjects·p0.50:   160301.056 us/op
                 createNewObjects·p0.90:   167169.229 us/op
                 createNewObjects·p0.95:   168401.306 us/op
                 createNewObjects·p0.99:   173277.184 us/op
                 createNewObjects·p0.999:  173277.184 us/op
                 createNewObjects·p0.9999: 173277.184 us/op
                 createNewObjects·p1.00:   173277.184 us/op

Iteration  15: 161950.026 ±(99.9%) 1701.001 us/op
                 createNewObjects·p0.00:   157810.688 us/op
                 createNewObjects·p0.50:   160432.128 us/op
                 createNewObjects·p0.90:   167169.229 us/op
                 createNewObjects·p0.95:   169528.525 us/op
                 createNewObjects·p0.99:   177471.488 us/op
                 createNewObjects·p0.999:  177471.488 us/op
                 createNewObjects·p0.9999: 177471.488 us/op
                 createNewObjects·p1.00:   177471.488 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 933
  mean = 161730.485 ±(99.9%) 410.217 us/op

  Histogram, us/op:
    [150000.000, 152500.000) = 0 
    [152500.000, 155000.000) = 0 
    [155000.000, 157500.000) = 6 
    [157500.000, 160000.000) = 389 
    [160000.000, 162500.000) = 259 
    [162500.000, 165000.000) = 114 
    [165000.000, 167500.000) = 87 
    [167500.000, 170000.000) = 48 
    [170000.000, 172500.000) = 14 
    [172500.000, 175000.000) = 5 
    [175000.000, 177500.000) = 6 
    [177500.000, 180000.000) = 2 
    [180000.000, 182500.000) = 0 
    [182500.000, 185000.000) = 3 
    [185000.000, 187500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 156762.112 us/op
     p(50.0000) = 160432.128 us/op
     p(90.0000) = 166880.870 us/op
     p(95.0000) = 168637.235 us/op
     p(99.0000) = 175809.495 us/op
     p(99.9000) = 184287.232 us/op
     p(99.9900) = 184287.232 us/op
     p(99.9990) = 184287.232 us/op
     p(99.9999) = 184287.232 us/op
    p(100.0000) = 184287.232 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 68.11% complete, ETA 02:36:40
# Fork: 1 of 1
# Warmup Iteration   1: 209010.688 ±(99.9%) 5141.627 us/op
# Warmup Iteration   2: 207511.050 ±(99.9%) 1996.431 us/op
# Warmup Iteration   3: 207505.701 ±(99.9%) 2114.497 us/op
# Warmup Iteration   4: 207430.802 ±(99.9%) 2341.960 us/op
# Warmup Iteration   5: 207644.797 ±(99.9%) 2127.400 us/op
Iteration   1: 208019.289 ±(99.9%) 1642.981 us/op
                 createNewObjects·p0.00:   203948.032 us/op
                 createNewObjects·p0.50:   207093.760 us/op
                 createNewObjects·p0.90:   212598.784 us/op
                 createNewObjects·p0.95:   214564.864 us/op
                 createNewObjects·p0.99:   219938.816 us/op
                 createNewObjects·p0.999:  219938.816 us/op
                 createNewObjects·p0.9999: 219938.816 us/op
                 createNewObjects·p1.00:   219938.816 us/op

Iteration   2: 208046.038 ±(99.9%) 2238.147 us/op
                 createNewObjects·p0.00:   201850.880 us/op
                 createNewObjects·p0.50:   207355.904 us/op
                 createNewObjects·p0.90:   213647.360 us/op
                 createNewObjects·p0.95:   217972.736 us/op
                 createNewObjects·p0.99:   224919.552 us/op
                 createNewObjects·p0.999:  224919.552 us/op
                 createNewObjects·p0.9999: 224919.552 us/op
                 createNewObjects·p1.00:   224919.552 us/op

Iteration   3: 209431.211 ±(99.9%) 2018.150 us/op
                 createNewObjects·p0.00:   203423.744 us/op
                 createNewObjects·p0.50:   208142.336 us/op
                 createNewObjects·p0.90:   214722.150 us/op
                 createNewObjects·p0.95:   218012.058 us/op
                 createNewObjects·p0.99:   222298.112 us/op
                 createNewObjects·p0.999:  222298.112 us/op
                 createNewObjects·p0.9999: 222298.112 us/op
                 createNewObjects·p1.00:   222298.112 us/op

Iteration   4: 207227.507 ±(99.9%) 1683.771 us/op
                 createNewObjects·p0.00:   202375.168 us/op
                 createNewObjects·p0.50:   206569.472 us/op
                 createNewObjects·p0.90:   213123.072 us/op
                 createNewObjects·p0.95:   213778.432 us/op
                 createNewObjects·p0.99:   214958.080 us/op
                 createNewObjects·p0.999:  214958.080 us/op
                 createNewObjects·p0.9999: 214958.080 us/op
                 createNewObjects·p1.00:   214958.080 us/op

Iteration   5: 208306.176 ±(99.9%) 2468.586 us/op
                 createNewObjects·p0.00:   202113.024 us/op
                 createNewObjects·p0.50:   206831.616 us/op
                 createNewObjects·p0.90:   213935.718 us/op
                 createNewObjects·p0.95:   218326.630 us/op
                 createNewObjects·p0.99:   229638.144 us/op
                 createNewObjects·p0.999:  229638.144 us/op
                 createNewObjects·p0.9999: 229638.144 us/op
                 createNewObjects·p1.00:   229638.144 us/op

Iteration   6: 206569.472 ±(99.9%) 1590.337 us/op
                 createNewObjects·p0.00:   202637.312 us/op
                 createNewObjects·p0.50:   205258.752 us/op
                 createNewObjects·p0.90:   209977.344 us/op
                 createNewObjects·p0.95:   214564.864 us/op
                 createNewObjects·p0.99:   218628.096 us/op
                 createNewObjects·p0.999:  218628.096 us/op
                 createNewObjects·p0.9999: 218628.096 us/op
                 createNewObjects·p1.00:   218628.096 us/op

Iteration   7: 208344.405 ±(99.9%) 2024.908 us/op
                 createNewObjects·p0.00:   203685.888 us/op
                 createNewObjects·p0.50:   207355.904 us/op
                 createNewObjects·p0.90:   213699.789 us/op
                 createNewObjects·p0.95:   215220.224 us/op
                 createNewObjects·p0.99:   226754.560 us/op
                 createNewObjects·p0.999:  226754.560 us/op
                 createNewObjects·p0.9999: 226754.560 us/op
                 createNewObjects·p1.00:   226754.560 us/op

Iteration   8: 207478.951 ±(99.9%) 2102.256 us/op
                 createNewObjects·p0.00:   202899.456 us/op
                 createNewObjects·p0.50:   205783.040 us/op
                 createNewObjects·p0.90:   213123.072 us/op
                 createNewObjects·p0.95:   214958.080 us/op
                 createNewObjects·p0.99:   224133.120 us/op
                 createNewObjects·p0.999:  224133.120 us/op
                 createNewObjects·p0.9999: 224133.120 us/op
                 createNewObjects·p1.00:   224133.120 us/op

Iteration   9: 208579.243 ±(99.9%) 2038.593 us/op
                 createNewObjects·p0.00:   203685.888 us/op
                 createNewObjects·p0.50:   206700.544 us/op
                 createNewObjects·p0.90:   214433.792 us/op
                 createNewObjects·p0.95:   218012.058 us/op
                 createNewObjects·p0.99:   221249.536 us/op
                 createNewObjects·p0.999:  221249.536 us/op
                 createNewObjects·p0.9999: 221249.536 us/op
                 createNewObjects·p1.00:   221249.536 us/op

Iteration  10: 206713.919 ±(99.9%) 1598.904 us/op
                 createNewObjects·p0.00:   202113.024 us/op
                 createNewObjects·p0.50:   206045.184 us/op
                 createNewObjects·p0.90:   212860.928 us/op
                 createNewObjects·p0.95:   213909.504 us/op
                 createNewObjects·p0.99:   216793.088 us/op
                 createNewObjects·p0.999:  216793.088 us/op
                 createNewObjects·p0.9999: 216793.088 us/op
                 createNewObjects·p1.00:   216793.088 us/op

Iteration  11: 207377.304 ±(99.9%) 1310.384 us/op
                 createNewObjects·p0.00:   201850.880 us/op
                 createNewObjects·p0.50:   207093.760 us/op
                 createNewObjects·p0.90:   211288.064 us/op
                 createNewObjects·p0.95:   212729.856 us/op
                 createNewObjects·p0.99:   214171.648 us/op
                 createNewObjects·p0.999:  214171.648 us/op
                 createNewObjects·p0.9999: 214171.648 us/op
                 createNewObjects·p1.00:   214171.648 us/op

Iteration  12: 207543.150 ±(99.9%) 1663.585 us/op
                 createNewObjects·p0.00:   201850.880 us/op
                 createNewObjects·p0.50:   206307.328 us/op
                 createNewObjects·p0.90:   213385.216 us/op
                 createNewObjects·p0.95:   214040.576 us/op
                 createNewObjects·p0.99:   216268.800 us/op
                 createNewObjects·p0.999:  216268.800 us/op
                 createNewObjects·p0.9999: 216268.800 us/op
                 createNewObjects·p1.00:   216268.800 us/op

Iteration  13: 208008.589 ±(99.9%) 1793.002 us/op
                 createNewObjects·p0.00:   203161.600 us/op
                 createNewObjects·p0.50:   206307.328 us/op
                 createNewObjects·p0.90:   213909.504 us/op
                 createNewObjects·p0.95:   214040.576 us/op
                 createNewObjects·p0.99:   218103.808 us/op
                 createNewObjects·p0.999:  218103.808 us/op
                 createNewObjects·p0.9999: 218103.808 us/op
                 createNewObjects·p1.00:   218103.808 us/op

Iteration  14: 206874.415 ±(99.9%) 1416.357 us/op
                 createNewObjects·p0.00:   203161.600 us/op
                 createNewObjects·p0.50:   206307.328 us/op
                 createNewObjects·p0.90:   211025.920 us/op
                 createNewObjects·p0.95:   213909.504 us/op
                 createNewObjects·p0.99:   216530.944 us/op
                 createNewObjects·p0.999:  216530.944 us/op
                 createNewObjects·p0.9999: 216530.944 us/op
                 createNewObjects·p1.00:   216530.944 us/op

Iteration  15: 207430.802 ±(99.9%) 1659.912 us/op
                 createNewObjects·p0.00:   202637.312 us/op
                 createNewObjects·p0.50:   206569.472 us/op
                 createNewObjects·p0.90:   212336.640 us/op
                 createNewObjects·p0.95:   215744.512 us/op
                 createNewObjects·p0.99:   216268.800 us/op
                 createNewObjects·p0.999:  216268.800 us/op
                 createNewObjects·p0.9999: 216268.800 us/op
                 createNewObjects·p1.00:   216268.800 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 731
  mean = 207724.914 ±(99.9%) 452.235 us/op

  Histogram, us/op:
    [200000.000, 202500.000) = 14 
    [202500.000, 205000.000) = 151 
    [205000.000, 207500.000) = 277 
    [207500.000, 210000.000) = 133 
    [210000.000, 212500.000) = 67 
    [212500.000, 215000.000) = 61 
    [215000.000, 217500.000) = 13 
    [217500.000, 220000.000) = 7 
    [220000.000, 222500.000) = 4 
    [222500.000, 225000.000) = 2 
    [225000.000, 227500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 201850.880 us/op
     p(50.0000) = 206569.472 us/op
     p(90.0000) = 213070.643 us/op
     p(95.0000) = 214276.506 us/op
     p(99.0000) = 220913.992 us/op
     p(99.9000) = 229638.144 us/op
     p(99.9900) = 229638.144 us/op
     p(99.9990) = 229638.144 us/op
     p(99.9999) = 229638.144 us/op
    p(100.0000) = 229638.144 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 68.84% complete, ETA 02:33:08
# Fork: 1 of 1
# Warmup Iteration   1: 252824.781 ±(99.9%) 8929.989 us/op
# Warmup Iteration   2: 243400.704 ±(99.9%) 8543.384 us/op
# Warmup Iteration   3: 244746.590 ±(99.9%) 7697.670 us/op
# Warmup Iteration   4: 247758.049 ±(99.9%) 9155.563 us/op
# Warmup Iteration   5: 249394.850 ±(99.9%) 8489.716 us/op
Iteration   1: 252162.867 ±(99.9%) 8795.671 us/op
                 createNewObjects·p0.00:   228327.424 us/op
                 createNewObjects·p0.50:   248774.656 us/op
                 createNewObjects·p0.90:   272315.187 us/op
                 createNewObjects·p0.95:   281988.301 us/op
                 createNewObjects·p0.99:   301465.600 us/op
                 createNewObjects·p0.999:  301465.600 us/op
                 createNewObjects·p0.9999: 301465.600 us/op
                 createNewObjects·p1.00:   301465.600 us/op

Iteration   2: 250576.896 ±(99.9%) 8244.786 us/op
                 createNewObjects·p0.00:   231735.296 us/op
                 createNewObjects·p0.50:   248774.656 us/op
                 createNewObjects·p0.90:   275723.059 us/op
                 createNewObjects·p0.95:   278370.714 us/op
                 createNewObjects·p0.99:   284164.096 us/op
                 createNewObjects·p0.999:  284164.096 us/op
                 createNewObjects·p0.9999: 284164.096 us/op
                 createNewObjects·p1.00:   284164.096 us/op

Iteration   3: 251297.792 ±(99.9%) 9473.147 us/op
                 createNewObjects·p0.00:   229376.000 us/op
                 createNewObjects·p0.50:   251265.024 us/op
                 createNewObjects·p0.90:   274464.768 us/op
                 createNewObjects·p0.95:   289302.118 us/op
                 createNewObjects·p0.99:   290455.552 us/op
                 createNewObjects·p0.999:  290455.552 us/op
                 createNewObjects·p0.9999: 290455.552 us/op
                 createNewObjects·p1.00:   290455.552 us/op

Iteration   4: 248160.855 ±(99.9%) 9975.293 us/op
                 createNewObjects·p0.00:   224657.408 us/op
                 createNewObjects·p0.50:   245628.928 us/op
                 createNewObjects·p0.90:   275985.203 us/op
                 createNewObjects·p0.95:   285474.816 us/op
                 createNewObjects·p0.99:   303562.752 us/op
                 createNewObjects·p0.999:  303562.752 us/op
                 createNewObjects·p0.9999: 303562.752 us/op
                 createNewObjects·p1.00:   303562.752 us/op

Iteration   5: 252660.941 ±(99.9%) 8739.664 us/op
                 createNewObjects·p0.00:   232259.584 us/op
                 createNewObjects·p0.50:   250478.592 us/op
                 createNewObjects·p0.90:   276771.635 us/op
                 createNewObjects·p0.95:   282407.731 us/op
                 createNewObjects·p0.99:   292028.416 us/op
                 createNewObjects·p0.999:  292028.416 us/op
                 createNewObjects·p0.9999: 292028.416 us/op
                 createNewObjects·p1.00:   292028.416 us/op

Iteration   6: 246274.697 ±(99.9%) 6747.815 us/op
                 createNewObjects·p0.00:   228851.712 us/op
                 createNewObjects·p0.50:   244842.496 us/op
                 createNewObjects·p0.90:   262930.432 us/op
                 createNewObjects·p0.95:   271790.899 us/op
                 createNewObjects·p0.99:   285736.960 us/op
                 createNewObjects·p0.999:  285736.960 us/op
                 createNewObjects·p0.9999: 285736.960 us/op
                 createNewObjects·p1.00:   285736.960 us/op

Iteration   7: 251304.346 ±(99.9%) 9165.304 us/op
                 createNewObjects·p0.00:   228851.712 us/op
                 createNewObjects·p0.50:   246939.648 us/op
                 createNewObjects·p0.90:   273888.051 us/op
                 createNewObjects·p0.95:   286969.037 us/op
                 createNewObjects·p0.99:   301465.600 us/op
                 createNewObjects·p0.999:  301465.600 us/op
                 createNewObjects·p0.9999: 301465.600 us/op
                 createNewObjects·p1.00:   301465.600 us/op

Iteration   8: 251147.059 ±(99.9%) 9859.882 us/op
                 createNewObjects·p0.00:   227803.136 us/op
                 createNewObjects·p0.50:   247463.936 us/op
                 createNewObjects·p0.90:   276824.064 us/op
                 createNewObjects·p0.95:   291740.058 us/op
                 createNewObjects·p0.99:   292028.416 us/op
                 createNewObjects·p0.999:  292028.416 us/op
                 createNewObjects·p0.9999: 292028.416 us/op
                 createNewObjects·p1.00:   292028.416 us/op

Iteration   9: 247240.155 ±(99.9%) 7525.507 us/op
                 createNewObjects·p0.00:   227540.992 us/op
                 createNewObjects·p0.50:   245366.784 us/op
                 createNewObjects·p0.90:   265027.584 us/op
                 createNewObjects·p0.95:   275618.202 us/op
                 createNewObjects·p0.99:   279445.504 us/op
                 createNewObjects·p0.999:  279445.504 us/op
                 createNewObjects·p0.9999: 279445.504 us/op
                 createNewObjects·p1.00:   279445.504 us/op

Iteration  10: 244407.721 ±(99.9%) 6431.712 us/op
                 createNewObjects·p0.00:   229376.000 us/op
                 createNewObjects·p0.50:   240123.904 us/op
                 createNewObjects·p0.90:   261619.712 us/op
                 createNewObjects·p0.95:   268094.669 us/op
                 createNewObjects·p0.99:   273678.336 us/op
                 createNewObjects·p0.999:  273678.336 us/op
                 createNewObjects·p0.9999: 273678.336 us/op
                 createNewObjects·p1.00:   273678.336 us/op

Iteration  11: 249967.411 ±(99.9%) 8046.909 us/op
                 createNewObjects·p0.00:   231997.440 us/op
                 createNewObjects·p0.50:   245628.928 us/op
                 createNewObjects·p0.90:   269431.603 us/op
                 createNewObjects·p0.95:   272079.258 us/op
                 createNewObjects·p0.99:   286785.536 us/op
                 createNewObjects·p0.999:  286785.536 us/op
                 createNewObjects·p0.9999: 286785.536 us/op
                 createNewObjects·p1.00:   286785.536 us/op

Iteration  12: 248122.493 ±(99.9%) 6515.655 us/op
                 createNewObjects·p0.00:   231997.440 us/op
                 createNewObjects·p0.50:   247463.936 us/op
                 createNewObjects·p0.90:   264241.152 us/op
                 createNewObjects·p0.95:   272996.762 us/op
                 createNewObjects·p0.99:   280494.080 us/op
                 createNewObjects·p0.999:  280494.080 us/op
                 createNewObjects·p0.9999: 280494.080 us/op
                 createNewObjects·p1.00:   280494.080 us/op

Iteration  13: 249855.201 ±(99.9%) 9181.898 us/op
                 createNewObjects·p0.00:   229113.856 us/op
                 createNewObjects·p0.50:   246677.504 us/op
                 createNewObjects·p0.90:   275670.630 us/op
                 createNewObjects·p0.95:   283954.381 us/op
                 createNewObjects·p0.99:   294125.568 us/op
                 createNewObjects·p0.999:  294125.568 us/op
                 createNewObjects·p0.9999: 294125.568 us/op
                 createNewObjects·p1.00:   294125.568 us/op

Iteration  14: 257405.243 ±(99.9%) 10680.248 us/op
                 createNewObjects·p0.00:   229376.000 us/op
                 createNewObjects·p0.50:   255328.256 us/op
                 createNewObjects·p0.90:   288882.688 us/op
                 createNewObjects·p0.95:   292552.704 us/op
                 createNewObjects·p0.99:   301465.600 us/op
                 createNewObjects·p0.999:  301465.600 us/op
                 createNewObjects·p0.9999: 301465.600 us/op
                 createNewObjects·p1.00:   301465.600 us/op

Iteration  15: 251736.883 ±(99.9%) 8136.525 us/op
                 createNewObjects·p0.00:   232783.872 us/op
                 createNewObjects·p0.50:   251789.312 us/op
                 createNewObjects·p0.90:   273468.621 us/op
                 createNewObjects·p0.95:   285212.672 us/op
                 createNewObjects·p0.99:   287309.824 us/op
                 createNewObjects·p0.999:  287309.824 us/op
                 createNewObjects·p0.9999: 287309.824 us/op
                 createNewObjects·p1.00:   287309.824 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 605
  mean = 250114.840 ±(99.9%) 2072.958 us/op

  Histogram, us/op:
    [220000.000, 225000.000) = 1 
    [225000.000, 230000.000) = 17 
    [230000.000, 235000.000) = 88 
    [235000.000, 240000.000) = 102 
    [240000.000, 245000.000) = 59 
    [245000.000, 250000.000) = 62 
    [250000.000, 255000.000) = 70 
    [255000.000, 260000.000) = 56 
    [260000.000, 265000.000) = 46 
    [265000.000, 270000.000) = 41 
    [270000.000, 275000.000) = 18 
    [275000.000, 280000.000) = 16 
    [280000.000, 285000.000) = 8 
    [285000.000, 290000.000) = 10 
    [290000.000, 295000.000) = 7 
    [295000.000, 300000.000) = 0 
    [300000.000, 305000.000) = 4 

  Percentiles, us/op:
      p(0.0000) = 224657.408 us/op
     p(50.0000) = 247726.080 us/op
     p(90.0000) = 271790.899 us/op
     p(95.0000) = 279288.218 us/op
     p(99.0000) = 292521.247 us/op
     p(99.9000) = 303562.752 us/op
     p(99.9900) = 303562.752 us/op
     p(99.9990) = 303562.752 us/op
     p(99.9999) = 303562.752 us/op
    p(100.0000) = 303562.752 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 69.56% complete, ETA 02:29:35
# Fork: 1 of 1
# Warmup Iteration   1: 227743.558 ±(99.9%) 6999.819 us/op
# Warmup Iteration   2: 225170.045 ±(99.9%) 6225.589 us/op
# Warmup Iteration   3: 225403.062 ±(99.9%) 5420.170 us/op
# Warmup Iteration   4: 223061.242 ±(99.9%) 6507.364 us/op
# Warmup Iteration   5: 224430.217 ±(99.9%) 6332.482 us/op
Iteration   1: 224756.440 ±(99.9%) 6608.319 us/op
                 createNewObjects·p0.00:   208142.336 us/op
                 createNewObjects·p0.50:   221249.536 us/op
                 createNewObjects·p0.90:   246782.362 us/op
                 createNewObjects·p0.95:   252995.174 us/op
                 createNewObjects·p0.99:   259522.560 us/op
                 createNewObjects·p0.999:  259522.560 us/op
                 createNewObjects·p0.9999: 259522.560 us/op
                 createNewObjects·p1.00:   259522.560 us/op

Iteration   2: 228714.682 ±(99.9%) 7195.358 us/op
                 createNewObjects·p0.00:   211550.208 us/op
                 createNewObjects·p0.50:   225837.056 us/op
                 createNewObjects·p0.90:   249430.016 us/op
                 createNewObjects·p0.95:   262012.928 us/op
                 createNewObjects·p0.99:   265551.872 us/op
                 createNewObjects·p0.999:  265551.872 us/op
                 createNewObjects·p0.9999: 265551.872 us/op
                 createNewObjects·p1.00:   265551.872 us/op

Iteration   3: 228535.948 ±(99.9%) 6431.343 us/op
                 createNewObjects·p0.00:   211812.352 us/op
                 createNewObjects·p0.50:   227016.704 us/op
                 createNewObjects·p0.90:   244580.352 us/op
                 createNewObjects·p0.95:   256376.832 us/op
                 createNewObjects·p0.99:   262144.000 us/op
                 createNewObjects·p0.999:  262144.000 us/op
                 createNewObjects·p0.9999: 262144.000 us/op
                 createNewObjects·p1.00:   262144.000 us/op

Iteration   4: 224733.138 ±(99.9%) 6039.265 us/op
                 createNewObjects·p0.00:   208404.480 us/op
                 createNewObjects·p0.50:   222035.968 us/op
                 createNewObjects·p0.90:   240595.763 us/op
                 createNewObjects·p0.95:   244160.922 us/op
                 createNewObjects·p0.99:   264241.152 us/op
                 createNewObjects·p0.999:  264241.152 us/op
                 createNewObjects·p0.9999: 264241.152 us/op
                 createNewObjects·p1.00:   264241.152 us/op

Iteration   5: 226381.733 ±(99.9%) 7375.533 us/op
                 createNewObjects·p0.00:   208404.480 us/op
                 createNewObjects·p0.50:   224133.120 us/op
                 createNewObjects·p0.90:   251448.525 us/op
                 createNewObjects·p0.95:   257399.194 us/op
                 createNewObjects·p0.99:   258736.128 us/op
                 createNewObjects·p0.999:  258736.128 us/op
                 createNewObjects·p0.9999: 258736.128 us/op
                 createNewObjects·p1.00:   258736.128 us/op

Iteration   6: 227195.439 ±(99.9%) 6956.448 us/op
                 createNewObjects·p0.00:   209977.344 us/op
                 createNewObjects·p0.50:   225181.696 us/op
                 createNewObjects·p0.90:   248774.656 us/op
                 createNewObjects·p0.95:   253755.392 us/op
                 createNewObjects·p0.99:   257687.552 us/op
                 createNewObjects·p0.999:  257687.552 us/op
                 createNewObjects·p0.9999: 257687.552 us/op
                 createNewObjects·p1.00:   257687.552 us/op

Iteration   7: 225472.967 ±(99.9%) 6660.535 us/op
                 createNewObjects·p0.00:   207880.192 us/op
                 createNewObjects·p0.50:   221773.824 us/op
                 createNewObjects·p0.90:   245576.499 us/op
                 createNewObjects·p0.95:   252130.099 us/op
                 createNewObjects·p0.99:   256638.976 us/op
                 createNewObjects·p0.999:  256638.976 us/op
                 createNewObjects·p0.9999: 256638.976 us/op
                 createNewObjects·p1.00:   256638.976 us/op

Iteration   8: 230805.876 ±(99.9%) 8215.002 us/op
                 createNewObjects·p0.00:   209453.056 us/op
                 createNewObjects·p0.50:   227540.992 us/op
                 createNewObjects·p0.90:   251396.096 us/op
                 createNewObjects·p0.95:   261292.032 us/op
                 createNewObjects·p0.99:   283115.520 us/op
                 createNewObjects·p0.999:  283115.520 us/op
                 createNewObjects·p0.9999: 283115.520 us/op
                 createNewObjects·p1.00:   283115.520 us/op

Iteration   9: 224837.996 ±(99.9%) 6485.248 us/op
                 createNewObjects·p0.00:   205520.896 us/op
                 createNewObjects·p0.50:   224395.264 us/op
                 createNewObjects·p0.90:   241854.054 us/op
                 createNewObjects·p0.95:   243820.134 us/op
                 createNewObjects·p0.99:   263192.576 us/op
                 createNewObjects·p0.999:  263192.576 us/op
                 createNewObjects·p0.9999: 263192.576 us/op
                 createNewObjects·p1.00:   263192.576 us/op

Iteration  10: 224995.282 ±(99.9%) 7013.875 us/op
                 createNewObjects·p0.00:   205783.040 us/op
                 createNewObjects·p0.50:   220463.104 us/op
                 createNewObjects·p0.90:   243636.634 us/op
                 createNewObjects·p0.95:   253388.390 us/op
                 createNewObjects·p0.99:   267911.168 us/op
                 createNewObjects·p0.999:  267911.168 us/op
                 createNewObjects·p0.9999: 267911.168 us/op
                 createNewObjects·p1.00:   267911.168 us/op

Iteration  11: 222752.495 ±(99.9%) 5461.204 us/op
                 createNewObjects·p0.00:   206831.616 us/op
                 createNewObjects·p0.50:   221249.536 us/op
                 createNewObjects·p0.90:   240123.904 us/op
                 createNewObjects·p0.95:   242509.414 us/op
                 createNewObjects·p0.99:   243007.488 us/op
                 createNewObjects·p0.999:  243007.488 us/op
                 createNewObjects·p0.9999: 243007.488 us/op
                 createNewObjects·p1.00:   243007.488 us/op

Iteration  12: 225239.950 ±(99.9%) 6337.814 us/op
                 createNewObjects·p0.00:   207618.048 us/op
                 createNewObjects·p0.50:   222035.968 us/op
                 createNewObjects·p0.90:   245157.069 us/op
                 createNewObjects·p0.95:   249613.517 us/op
                 createNewObjects·p0.99:   257163.264 us/op
                 createNewObjects·p0.999:  257163.264 us/op
                 createNewObjects·p0.9999: 257163.264 us/op
                 createNewObjects·p1.00:   257163.264 us/op

Iteration  13: 226014.731 ±(99.9%) 6267.331 us/op
                 createNewObjects·p0.00:   207618.048 us/op
                 createNewObjects·p0.50:   224395.264 us/op
                 createNewObjects·p0.90:   243269.632 us/op
                 createNewObjects·p0.95:   251710.669 us/op
                 createNewObjects·p0.99:   258211.840 us/op
                 createNewObjects·p0.999:  258211.840 us/op
                 createNewObjects·p0.9999: 258211.840 us/op
                 createNewObjects·p1.00:   258211.840 us/op

Iteration  14: 222092.956 ±(99.9%) 4781.838 us/op
                 createNewObjects·p0.00:   208666.624 us/op
                 createNewObjects·p0.50:   220463.104 us/op
                 createNewObjects·p0.90:   237502.464 us/op
                 createNewObjects·p0.95:   239507.866 us/op
                 createNewObjects·p0.99:   245104.640 us/op
                 createNewObjects·p0.999:  245104.640 us/op
                 createNewObjects·p0.9999: 245104.640 us/op
                 createNewObjects·p1.00:   245104.640 us/op

Iteration  15: 225467.142 ±(99.9%) 5192.163 us/op
                 createNewObjects·p0.00:   209715.200 us/op
                 createNewObjects·p0.50:   224133.120 us/op
                 createNewObjects·p0.90:   240333.619 us/op
                 createNewObjects·p0.95:   246887.219 us/op
                 createNewObjects·p0.99:   247463.936 us/op
                 createNewObjects·p0.999:  247463.936 us/op
                 createNewObjects·p0.9999: 247463.936 us/op
                 createNewObjects·p1.00:   247463.936 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 672
  mean = 225843.298 ±(99.9%) 1582.740 us/op

  Histogram, us/op:
    [200000.000, 205000.000) = 0 
    [205000.000, 210000.000) = 40 
    [210000.000, 215000.000) = 94 
    [215000.000, 220000.000) = 114 
    [220000.000, 225000.000) = 123 
    [225000.000, 230000.000) = 102 
    [230000.000, 235000.000) = 51 
    [235000.000, 240000.000) = 59 
    [240000.000, 245000.000) = 33 
    [245000.000, 250000.000) = 24 
    [250000.000, 255000.000) = 12 
    [255000.000, 260000.000) = 10 
    [260000.000, 265000.000) = 7 
    [265000.000, 270000.000) = 2 
    [270000.000, 275000.000) = 0 
    [275000.000, 280000.000) = 0 
    [280000.000, 285000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 205520.896 us/op
     p(50.0000) = 223346.688 us/op
     p(90.0000) = 243453.133 us/op
     p(95.0000) = 249482.445 us/op
     p(99.0000) = 262285.558 us/op
     p(99.9000) = 283115.520 us/op
     p(99.9900) = 283115.520 us/op
     p(99.9990) = 283115.520 us/op
     p(99.9999) = 283115.520 us/op
    p(100.0000) = 283115.520 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 70.29% complete, ETA 02:26:03
# Fork: 1 of 1
# Warmup Iteration   1: 217471.243 ±(99.9%) 6385.230 us/op
# Warmup Iteration   2: 219665.274 ±(99.9%) 5499.673 us/op
# Warmup Iteration   3: 212721.490 ±(99.9%) 3979.352 us/op
# Warmup Iteration   4: 216307.843 ±(99.9%) 5610.480 us/op
# Warmup Iteration   5: 214528.610 ±(99.9%) 5571.811 us/op
Iteration   1: 216185.137 ±(99.9%) 6394.213 us/op
                 createNewObjects·p0.00:   202637.312 us/op
                 createNewObjects·p0.50:   213909.504 us/op
                 createNewObjects·p0.90:   234671.309 us/op
                 createNewObjects·p0.95:   243689.062 us/op
                 createNewObjects·p0.99:   258211.840 us/op
                 createNewObjects·p0.999:  258211.840 us/op
                 createNewObjects·p0.9999: 258211.840 us/op
                 createNewObjects·p1.00:   258211.840 us/op

Iteration   2: 216419.393 ±(99.9%) 5640.481 us/op
                 createNewObjects·p0.00:   202375.168 us/op
                 createNewObjects·p0.50:   213385.216 us/op
                 createNewObjects·p0.90:   235929.600 us/op
                 createNewObjects·p0.95:   238760.755 us/op
                 createNewObjects·p0.99:   240386.048 us/op
                 createNewObjects·p0.999:  240386.048 us/op
                 createNewObjects·p0.9999: 240386.048 us/op
                 createNewObjects·p1.00:   240386.048 us/op

Iteration   3: 216603.452 ±(99.9%) 6391.547 us/op
                 createNewObjects·p0.00:   201850.880 us/op
                 createNewObjects·p0.50:   213909.504 us/op
                 createNewObjects·p0.90:   231787.725 us/op
                 createNewObjects·p0.95:   249141.658 us/op
                 createNewObjects·p0.99:   257949.696 us/op
                 createNewObjects·p0.999:  257949.696 us/op
                 createNewObjects·p0.9999: 257949.696 us/op
                 createNewObjects·p1.00:   257949.696 us/op

Iteration   4: 215828.175 ±(99.9%) 5563.324 us/op
                 createNewObjects·p0.00:   201326.592 us/op
                 createNewObjects·p0.50:   214171.648 us/op
                 createNewObjects·p0.90:   234566.451 us/op
                 createNewObjects·p0.95:   241801.626 us/op
                 createNewObjects·p0.99:   244580.352 us/op
                 createNewObjects·p0.999:  244580.352 us/op
                 createNewObjects·p0.9999: 244580.352 us/op
                 createNewObjects·p1.00:   244580.352 us/op

Iteration   5: 221089.970 ±(99.9%) 7470.607 us/op
                 createNewObjects·p0.00:   201588.736 us/op
                 createNewObjects·p0.50:   220332.032 us/op
                 createNewObjects·p0.90:   244318.208 us/op
                 createNewObjects·p0.95:   248840.192 us/op
                 createNewObjects·p0.99:   252706.816 us/op
                 createNewObjects·p0.999:  252706.816 us/op
                 createNewObjects·p0.9999: 252706.816 us/op
                 createNewObjects·p1.00:   252706.816 us/op

Iteration   6: 214266.466 ±(99.9%) 5278.058 us/op
                 createNewObjects·p0.00:   200540.160 us/op
                 createNewObjects·p0.50:   212860.928 us/op
                 createNewObjects·p0.90:   230267.290 us/op
                 createNewObjects·p0.95:   233884.877 us/op
                 createNewObjects·p0.99:   241172.480 us/op
                 createNewObjects·p0.999:  241172.480 us/op
                 createNewObjects·p0.9999: 241172.480 us/op
                 createNewObjects·p1.00:   241172.480 us/op

Iteration   7: 217380.063 ±(99.9%) 5634.990 us/op
                 createNewObjects·p0.00:   202113.024 us/op
                 createNewObjects·p0.50:   214171.648 us/op
                 createNewObjects·p0.90:   235667.456 us/op
                 createNewObjects·p0.95:   240975.872 us/op
                 createNewObjects·p0.99:   242745.344 us/op
                 createNewObjects·p0.999:  242745.344 us/op
                 createNewObjects·p0.9999: 242745.344 us/op
                 createNewObjects·p1.00:   242745.344 us/op

Iteration   8: 219608.287 ±(99.9%) 7041.234 us/op
                 createNewObjects·p0.00:   203161.600 us/op
                 createNewObjects·p0.50:   216530.944 us/op
                 createNewObjects·p0.90:   239494.758 us/op
                 createNewObjects·p0.95:   246585.754 us/op
                 createNewObjects·p0.99:   268959.744 us/op
                 createNewObjects·p0.999:  268959.744 us/op
                 createNewObjects·p0.9999: 268959.744 us/op
                 createNewObjects·p1.00:   268959.744 us/op

Iteration   9: 217704.893 ±(99.9%) 5032.654 us/op
                 createNewObjects·p0.00:   201588.736 us/op
                 createNewObjects·p0.50:   217579.520 us/op
                 createNewObjects·p0.90:   227540.992 us/op
                 createNewObjects·p0.95:   232390.656 us/op
                 createNewObjects·p0.99:   256901.120 us/op
                 createNewObjects·p0.999:  256901.120 us/op
                 createNewObjects·p0.9999: 256901.120 us/op
                 createNewObjects·p1.00:   256901.120 us/op

Iteration  10: 217116.585 ±(99.9%) 6247.913 us/op
                 createNewObjects·p0.00:   202899.456 us/op
                 createNewObjects·p0.50:   214171.648 us/op
                 createNewObjects·p0.90:   233413.018 us/op
                 createNewObjects·p0.95:   248197.939 us/op
                 createNewObjects·p0.99:   253231.104 us/op
                 createNewObjects·p0.999:  253231.104 us/op
                 createNewObjects·p0.9999: 253231.104 us/op
                 createNewObjects·p1.00:   253231.104 us/op

Iteration  11: 217300.280 ±(99.9%) 6051.044 us/op
                 createNewObjects·p0.00:   202113.024 us/op
                 createNewObjects·p0.50:   214433.792 us/op
                 createNewObjects·p0.90:   235641.242 us/op
                 createNewObjects·p0.95:   248145.510 us/op
                 createNewObjects·p0.99:   253493.248 us/op
                 createNewObjects·p0.999:  253493.248 us/op
                 createNewObjects·p0.9999: 253493.248 us/op
                 createNewObjects·p1.00:   253493.248 us/op

Iteration  12: 218628.096 ±(99.9%) 6633.755 us/op
                 createNewObjects·p0.00:   202637.312 us/op
                 createNewObjects·p0.50:   216530.944 us/op
                 createNewObjects·p0.90:   239678.259 us/op
                 createNewObjects·p0.95:   244213.350 us/op
                 createNewObjects·p0.99:   247201.792 us/op
                 createNewObjects·p0.999:  247201.792 us/op
                 createNewObjects·p0.9999: 247201.792 us/op
                 createNewObjects·p1.00:   247201.792 us/op

Iteration  13: 218850.349 ±(99.9%) 6406.225 us/op
                 createNewObjects·p0.00:   202637.312 us/op
                 createNewObjects·p0.50:   217317.376 us/op
                 createNewObjects·p0.90:   233386.803 us/op
                 createNewObjects·p0.95:   248578.048 us/op
                 createNewObjects·p0.99:   262668.288 us/op
                 createNewObjects·p0.999:  262668.288 us/op
                 createNewObjects·p0.9999: 262668.288 us/op
                 createNewObjects·p1.00:   262668.288 us/op

Iteration  14: 220594.176 ±(99.9%) 5551.624 us/op
                 createNewObjects·p0.00:   203161.600 us/op
                 createNewObjects·p0.50:   220725.248 us/op
                 createNewObjects·p0.90:   237004.390 us/op
                 createNewObjects·p0.95:   242089.984 us/op
                 createNewObjects·p0.99:   244318.208 us/op
                 createNewObjects·p0.999:  244318.208 us/op
                 createNewObjects·p0.9999: 244318.208 us/op
                 createNewObjects·p1.00:   244318.208 us/op

Iteration  15: 218183.591 ±(99.9%) 6283.216 us/op
                 createNewObjects·p0.00:   203423.744 us/op
                 createNewObjects·p0.50:   216662.016 us/op
                 createNewObjects·p0.90:   236532.531 us/op
                 createNewObjects·p0.95:   242902.630 us/op
                 createNewObjects·p0.99:   259522.560 us/op
                 createNewObjects·p0.999:  259522.560 us/op
                 createNewObjects·p0.9999: 259522.560 us/op
                 createNewObjects·p1.00:   259522.560 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 696
  mean = 217703.059 ±(99.9%) 1490.282 us/op

  Histogram, us/op:
    [200000.000, 205000.000) = 81 
    [205000.000, 210000.000) = 127 
    [210000.000, 215000.000) = 131 
    [215000.000, 220000.000) = 110 
    [220000.000, 225000.000) = 94 
    [225000.000, 230000.000) = 54 
    [230000.000, 235000.000) = 31 
    [235000.000, 240000.000) = 25 
    [240000.000, 245000.000) = 24 
    [245000.000, 250000.000) = 7 
    [250000.000, 255000.000) = 5 
    [255000.000, 260000.000) = 5 
    [260000.000, 265000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 200540.160 us/op
     p(50.0000) = 215482.368 us/op
     p(90.0000) = 234514.022 us/op
     p(95.0000) = 242221.056 us/op
     p(99.0000) = 256916.849 us/op
     p(99.9000) = 268959.744 us/op
     p(99.9900) = 268959.744 us/op
     p(99.9990) = 268959.744 us/op
     p(99.9999) = 268959.744 us/op
    p(100.0000) = 268959.744 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 71.01% complete, ETA 02:22:30
# Fork: 1 of 1
# Warmup Iteration   1: 916360.099 ±(99.9%) 144763.320 us/op
# Warmup Iteration   2: 877308.587 ±(99.9%) 39091.042 us/op
# Warmup Iteration   3: 890415.787 ±(99.9%) 50134.695 us/op
# Warmup Iteration   4: 888930.304 ±(99.9%) 46939.601 us/op
# Warmup Iteration   5: 893124.608 ±(99.9%) 58008.506 us/op
Iteration   1: 876871.680 ±(99.9%) 52531.504 us/op
                 fillHeap·p0.00:   754974.720 us/op
                 fillHeap·p0.50:   887095.296 us/op
                 fillHeap·p0.90:   909954.253 us/op
                 fillHeap·p0.95:   911212.544 us/op
                 fillHeap·p0.99:   911212.544 us/op
                 fillHeap·p0.999:  911212.544 us/op
                 fillHeap·p0.9999: 911212.544 us/op
                 fillHeap·p1.00:   911212.544 us/op

Iteration   2: 878794.069 ±(99.9%) 56720.215 us/op
                 fillHeap·p0.00:   752877.568 us/op
                 fillHeap·p0.50:   888668.160 us/op
                 fillHeap·p0.90:   927675.187 us/op
                 fillHeap·p0.95:   940572.672 us/op
                 fillHeap·p0.99:   940572.672 us/op
                 fillHeap·p0.999:  940572.672 us/op
                 fillHeap·p0.9999: 940572.672 us/op
                 fillHeap·p1.00:   940572.672 us/op

Iteration   3: 886308.864 ±(99.9%) 61653.738 us/op
                 fillHeap·p0.00:   747634.688 us/op
                 fillHeap·p0.50:   894959.616 us/op
                 fillHeap·p0.90:   941201.818 us/op
                 fillHeap·p0.95:   953155.584 us/op
                 fillHeap·p0.99:   953155.584 us/op
                 fillHeap·p0.999:  953155.584 us/op
                 fillHeap·p0.9999: 953155.584 us/op
                 fillHeap·p1.00:   953155.584 us/op

Iteration   4: 868046.165 ±(99.9%) 48475.065 us/op
                 fillHeap·p0.00:   749731.840 us/op
                 fillHeap·p0.50:   880803.840 us/op
                 fillHeap·p0.90:   887200.154 us/op
                 fillHeap·p0.95:   888143.872 us/op
                 fillHeap·p0.99:   888143.872 us/op
                 fillHeap·p0.999:  888143.872 us/op
                 fillHeap·p0.9999: 888143.872 us/op
                 fillHeap·p1.00:   888143.872 us/op

Iteration   5: 881065.984 ±(99.9%) 58786.339 us/op
                 fillHeap·p0.00:   743440.384 us/op
                 fillHeap·p0.50:   891813.888 us/op
                 fillHeap·p0.90:   909849.395 us/op
                 fillHeap·p0.95:   910163.968 us/op
                 fillHeap·p0.99:   910163.968 us/op
                 fillHeap·p0.999:  910163.968 us/op
                 fillHeap·p0.9999: 910163.968 us/op
                 fillHeap·p1.00:   910163.968 us/op

Iteration   6: 877221.205 ±(99.9%) 57541.128 us/op
                 fillHeap·p0.00:   742391.808 us/op
                 fillHeap·p0.50:   891289.600 us/op
                 fillHeap·p0.90:   914358.272 us/op
                 fillHeap·p0.95:   920649.728 us/op
                 fillHeap·p0.99:   920649.728 us/op
                 fillHeap·p0.999:  920649.728 us/op
                 fillHeap·p0.9999: 920649.728 us/op
                 fillHeap·p1.00:   920649.728 us/op

Iteration   7: 870667.605 ±(99.9%) 52697.338 us/op
                 fillHeap·p0.00:   756023.296 us/op
                 fillHeap·p0.50:   885522.432 us/op
                 fillHeap·p0.90:   910478.541 us/op
                 fillHeap·p0.95:   916455.424 us/op
                 fillHeap·p0.99:   916455.424 us/op
                 fillHeap·p0.999:  916455.424 us/op
                 fillHeap·p0.9999: 916455.424 us/op
                 fillHeap·p1.00:   916455.424 us/op

Iteration   8: 886396.245 ±(99.9%) 64541.642 us/op
                 fillHeap·p0.00:   744488.960 us/op
                 fillHeap·p0.50:   897581.056 us/op
                 fillHeap·p0.90:   939838.669 us/op
                 fillHeap·p0.95:   948961.280 us/op
                 fillHeap·p0.99:   948961.280 us/op
                 fillHeap·p0.999:  948961.280 us/op
                 fillHeap·p0.9999: 948961.280 us/op
                 fillHeap·p1.00:   948961.280 us/op

Iteration   9: 877133.824 ±(99.9%) 51711.530 us/op
                 fillHeap·p0.00:   759169.024 us/op
                 fillHeap·p0.50:   886571.008 us/op
                 fillHeap·p0.90:   911212.544 us/op
                 fillHeap·p0.95:   911212.544 us/op
                 fillHeap·p0.99:   911212.544 us/op
                 fillHeap·p0.999:  911212.544 us/op
                 fillHeap·p0.9999: 911212.544 us/op
                 fillHeap·p1.00:   911212.544 us/op

Iteration  10: 883425.280 ±(99.9%) 46293.662 us/op
                 fillHeap·p0.00:   783286.272 us/op
                 fillHeap·p0.50:   894435.328 us/op
                 fillHeap·p0.90:   916560.282 us/op
                 fillHeap·p0.95:   917504.000 us/op
                 fillHeap·p0.99:   917504.000 us/op
                 fillHeap·p0.999:  917504.000 us/op
                 fillHeap·p0.9999: 917504.000 us/op
                 fillHeap·p1.00:   917504.000 us/op

Iteration  11: 880629.077 ±(99.9%) 52280.262 us/op
                 fillHeap·p0.00:   757071.872 us/op
                 fillHeap·p0.50:   891813.888 us/op
                 fillHeap·p0.90:   908276.531 us/op
                 fillHeap·p0.95:   910163.968 us/op
                 fillHeap·p0.99:   910163.968 us/op
                 fillHeap·p0.999:  910163.968 us/op
                 fillHeap·p0.9999: 910163.968 us/op
                 fillHeap·p1.00:   910163.968 us/op

Iteration  12: 873289.045 ±(99.9%) 55490.823 us/op
                 fillHeap·p0.00:   741343.232 us/op
                 fillHeap·p0.50:   884473.856 us/op
                 fillHeap·p0.90:   902719.078 us/op
                 fillHeap·p0.95:   904921.088 us/op
                 fillHeap·p0.99:   904921.088 us/op
                 fillHeap·p0.999:  904921.088 us/op
                 fillHeap·p0.9999: 904921.088 us/op
                 fillHeap·p1.00:   904921.088 us/op

Iteration  13: 873026.901 ±(99.9%) 60133.112 us/op
                 fillHeap·p0.00:   732954.624 us/op
                 fillHeap·p0.50:   882376.704 us/op
                 fillHeap·p0.90:   909849.395 us/op
                 fillHeap·p0.95:   913309.696 us/op
                 fillHeap·p0.99:   913309.696 us/op
                 fillHeap·p0.999:  913309.696 us/op
                 fillHeap·p0.9999: 913309.696 us/op
                 fillHeap·p1.00:   913309.696 us/op

Iteration  14: 869881.173 ±(99.9%) 46670.997 us/op
                 fillHeap·p0.00:   764411.904 us/op
                 fillHeap·p0.50:   879755.264 us/op
                 fillHeap·p0.90:   902194.790 us/op
                 fillHeap·p0.95:   905969.664 us/op
                 fillHeap·p0.99:   905969.664 us/op
                 fillHeap·p0.999:  905969.664 us/op
                 fillHeap·p0.9999: 905969.664 us/op
                 fillHeap·p1.00:   905969.664 us/op

Iteration  15: 871454.037 ±(99.9%) 50563.390 us/op
                 fillHeap·p0.00:   754974.720 us/op
                 fillHeap·p0.50:   877658.112 us/op
                 fillHeap·p0.90:   904606.515 us/op
                 fillHeap·p0.95:   908066.816 us/op
                 fillHeap·p0.99:   908066.816 us/op
                 fillHeap·p0.999:  908066.816 us/op
                 fillHeap·p0.9999: 908066.816 us/op
                 fillHeap·p1.00:   908066.816 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 180
  mean = 876947.410 ±(99.9%) 10315.165 us/op

  Histogram, us/op:
    [ 700000.000,  725000.000) = 0 
    [ 725000.000,  750000.000) = 7 
    [ 750000.000,  775000.000) = 7 
    [ 775000.000,  800000.000) = 1 
    [ 800000.000,  825000.000) = 0 
    [ 825000.000,  850000.000) = 1 
    [ 850000.000,  875000.000) = 36 
    [ 875000.000,  900000.000) = 94 
    [ 900000.000,  925000.000) = 31 
    [ 925000.000,  950000.000) = 2 
    [ 950000.000,  975000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 732954.624 us/op
     p(50.0000) = 886571.008 us/op
     p(90.0000) = 909010.534 us/op
     p(95.0000) = 914305.843 us/op
     p(99.0000) = 949758.198 us/op
     p(99.9000) = 953155.584 us/op
     p(99.9900) = 953155.584 us/op
     p(99.9990) = 953155.584 us/op
     p(99.9999) = 953155.584 us/op
    p(100.0000) = 953155.584 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 71.74% complete, ETA 02:19:01
# Fork: 1 of 1
# Warmup Iteration   1: 912833.071 ±(99.9%) 136698.116 us/op
# Warmup Iteration   2: 859832.320 ±(99.9%) 25308.504 us/op
# Warmup Iteration   3: 869706.411 ±(99.9%) 38952.890 us/op
# Warmup Iteration   4: 866473.301 ±(99.9%) 30300.002 us/op
# Warmup Iteration   5: 862628.523 ±(99.9%) 23600.805 us/op
Iteration   1: 859919.701 ±(99.9%) 28921.743 us/op
                 fillHeap·p0.00:   802160.640 us/op
                 fillHeap·p0.50:   857210.880 us/op
                 fillHeap·p0.90:   889402.163 us/op
                 fillHeap·p0.95:   891289.600 us/op
                 fillHeap·p0.99:   891289.600 us/op
                 fillHeap·p0.999:  891289.600 us/op
                 fillHeap·p0.9999: 891289.600 us/op
                 fillHeap·p1.00:   891289.600 us/op

Iteration   2: 855812.779 ±(99.9%) 34154.435 us/op
                 fillHeap·p0.00:   785383.424 us/op
                 fillHeap·p0.50:   854065.152 us/op
                 fillHeap·p0.90:   885837.005 us/op
                 fillHeap·p0.95:   887095.296 us/op
                 fillHeap·p0.99:   887095.296 us/op
                 fillHeap·p0.999:  887095.296 us/op
                 fillHeap·p0.9999: 887095.296 us/op
                 fillHeap·p1.00:   887095.296 us/op

Iteration   3: 859308.032 ±(99.9%) 18885.565 us/op
                 fillHeap·p0.00:   825229.312 us/op
                 fillHeap·p0.50:   862453.760 us/op
                 fillHeap·p0.90:   881537.843 us/op
                 fillHeap·p0.95:   884998.144 us/op
                 fillHeap·p0.99:   884998.144 us/op
                 fillHeap·p0.999:  884998.144 us/op
                 fillHeap·p0.9999: 884998.144 us/op
                 fillHeap·p1.00:   884998.144 us/op

Iteration   4: 853103.957 ±(99.9%) 24581.829 us/op
                 fillHeap·p0.00:   800063.488 us/op
                 fillHeap·p0.50:   855638.016 us/op
                 fillHeap·p0.90:   874302.669 us/op
                 fillHeap·p0.95:   875560.960 us/op
                 fillHeap·p0.99:   875560.960 us/op
                 fillHeap·p0.999:  875560.960 us/op
                 fillHeap·p0.9999: 875560.960 us/op
                 fillHeap·p1.00:   875560.960 us/op

Iteration   5: 857560.405 ±(99.9%) 27978.627 us/op
                 fillHeap·p0.00:   797966.336 us/op
                 fillHeap·p0.50:   859308.032 us/op
                 fillHeap·p0.90:   879126.118 us/op
                 fillHeap·p0.95:   879755.264 us/op
                 fillHeap·p0.99:   879755.264 us/op
                 fillHeap·p0.999:  879755.264 us/op
                 fillHeap·p0.9999: 879755.264 us/op
                 fillHeap·p1.00:   879755.264 us/op

Iteration   6: 860531.371 ±(99.9%) 23447.446 us/op
                 fillHeap·p0.00:   810549.248 us/op
                 fillHeap·p0.50:   867696.640 us/op
                 fillHeap·p0.90:   875665.818 us/op
                 fillHeap·p0.95:   876609.536 us/op
                 fillHeap·p0.99:   876609.536 us/op
                 fillHeap·p0.999:  876609.536 us/op
                 fillHeap·p0.9999: 876609.536 us/op
                 fillHeap·p1.00:   876609.536 us/op

Iteration   7: 863851.861 ±(99.9%) 38874.403 us/op
                 fillHeap·p0.00:   780140.544 us/op
                 fillHeap·p0.50:   865599.488 us/op
                 fillHeap·p0.90:   895903.334 us/op
                 fillHeap·p0.95:   896532.480 us/op
                 fillHeap·p0.99:   896532.480 us/op
                 fillHeap·p0.999:  896532.480 us/op
                 fillHeap·p0.9999: 896532.480 us/op
                 fillHeap·p1.00:   896532.480 us/op

Iteration   8: 854152.533 ±(99.9%) 24541.771 us/op
                 fillHeap·p0.00:   810549.248 us/op
                 fillHeap·p0.50:   856162.304 us/op
                 fillHeap·p0.90:   879335.834 us/op
                 fillHeap·p0.95:   881852.416 us/op
                 fillHeap·p0.99:   881852.416 us/op
                 fillHeap·p0.999:  881852.416 us/op
                 fillHeap·p0.9999: 881852.416 us/op
                 fillHeap·p1.00:   881852.416 us/op

Iteration   9: 861579.947 ±(99.9%) 36180.482 us/op
                 fillHeap·p0.00:   788529.152 us/op
                 fillHeap·p0.50:   859832.320 us/op
                 fillHeap·p0.90:   890660.454 us/op
                 fillHeap·p0.95:   891289.600 us/op
                 fillHeap·p0.99:   891289.600 us/op
                 fillHeap·p0.999:  891289.600 us/op
                 fillHeap·p0.9999: 891289.600 us/op
                 fillHeap·p1.00:   891289.600 us/op

Iteration  10: 865249.963 ±(99.9%) 24037.969 us/op
                 fillHeap·p0.00:   824180.736 us/op
                 fillHeap·p0.50:   867696.640 us/op
                 fillHeap·p0.90:   892128.461 us/op
                 fillHeap·p0.95:   893386.752 us/op
                 fillHeap·p0.99:   893386.752 us/op
                 fillHeap·p0.999:  893386.752 us/op
                 fillHeap·p0.9999: 893386.752 us/op
                 fillHeap·p1.00:   893386.752 us/op

Iteration  11: 857123.499 ±(99.9%) 28671.182 us/op
                 fillHeap·p0.00:   803209.216 us/op
                 fillHeap·p0.50:   855113.728 us/op
                 fillHeap·p0.90:   885732.147 us/op
                 fillHeap·p0.95:   886046.720 us/op
                 fillHeap·p0.99:   886046.720 us/op
                 fillHeap·p0.999:  886046.720 us/op
                 fillHeap·p0.9999: 886046.720 us/op
                 fillHeap·p1.00:   886046.720 us/op

Iteration  12: 856511.829 ±(99.9%) 25858.672 us/op
                 fillHeap·p0.00:   803209.216 us/op
                 fillHeap·p0.50:   860356.608 us/op
                 fillHeap·p0.90:   876294.963 us/op
                 fillHeap·p0.95:   876609.536 us/op
                 fillHeap·p0.99:   876609.536 us/op
                 fillHeap·p0.999:  876609.536 us/op
                 fillHeap·p0.9999: 876609.536 us/op
                 fillHeap·p1.00:   876609.536 us/op

Iteration  13: 858871.125 ±(99.9%) 20833.896 us/op
                 fillHeap·p0.00:   824180.736 us/op
                 fillHeap·p0.50:   859308.032 us/op
                 fillHeap·p0.90:   879964.979 us/op
                 fillHeap·p0.95:   881852.416 us/op
                 fillHeap·p0.99:   881852.416 us/op
                 fillHeap·p0.999:  881852.416 us/op
                 fillHeap·p0.9999: 881852.416 us/op
                 fillHeap·p1.00:   881852.416 us/op

Iteration  14: 857473.024 ±(99.9%) 27915.795 us/op
                 fillHeap·p0.00:   803209.216 us/op
                 fillHeap·p0.50:   857735.168 us/op
                 fillHeap·p0.90:   881223.270 us/op
                 fillHeap·p0.95:   881852.416 us/op
                 fillHeap·p0.99:   881852.416 us/op
                 fillHeap·p0.999:  881852.416 us/op
                 fillHeap·p0.9999: 881852.416 us/op
                 fillHeap·p1.00:   881852.416 us/op

Iteration  15: 862366.379 ±(99.9%) 27900.126 us/op
                 fillHeap·p0.00:   804257.792 us/op
                 fillHeap·p0.50:   866123.776 us/op
                 fillHeap·p0.90:   882586.419 us/op
                 fillHeap·p0.95:   882900.992 us/op
                 fillHeap·p0.99:   882900.992 us/op
                 fillHeap·p0.999:  882900.992 us/op
                 fillHeap·p0.9999: 882900.992 us/op
                 fillHeap·p1.00:   882900.992 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 180
  mean = 858894.427 ±(99.9%) 5303.990 us/op

  Histogram, us/op:
    [700000.000, 712500.000) = 0 
    [712500.000, 725000.000) = 0 
    [725000.000, 737500.000) = 0 
    [737500.000, 750000.000) = 0 
    [750000.000, 762500.000) = 0 
    [762500.000, 775000.000) = 0 
    [775000.000, 787500.000) = 2 
    [787500.000, 800000.000) = 2 
    [800000.000, 812500.000) = 8 
    [812500.000, 825000.000) = 2 
    [825000.000, 837500.000) = 2 
    [837500.000, 850000.000) = 23 
    [850000.000, 862500.000) = 60 
    [862500.000, 875000.000) = 44 
    [875000.000, 887500.000) = 29 

  Percentiles, us/op:
      p(0.0000) = 780140.544 us/op
     p(50.0000) = 859832.320 us/op
     p(90.0000) = 881852.416 us/op
     p(95.0000) = 887042.867 us/op
     p(99.0000) = 894833.787 us/op
     p(99.9000) = 896532.480 us/op
     p(99.9900) = 896532.480 us/op
     p(99.9990) = 896532.480 us/op
     p(99.9999) = 896532.480 us/op
    p(100.0000) = 896532.480 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 72.46% complete, ETA 02:15:30
# Fork: 1 of 1
# Warmup Iteration   1: 664862.720 ±(99.9%) 29195.829 us/op
# Warmup Iteration   2: 644349.952 ±(99.9%) 15540.343 us/op
# Warmup Iteration   3: 644808.704 ±(99.9%) 14995.176 us/op
# Warmup Iteration   4: 651165.696 ±(99.9%) 12408.046 us/op
# Warmup Iteration   5: 642908.160 ±(99.9%) 10052.375 us/op
Iteration   1: 652410.880 ±(99.9%) 15764.732 us/op
                 fillHeap·p0.00:   630194.176 us/op
                 fillHeap·p0.50:   653262.848 us/op
                 fillHeap·p0.90:   673290.650 us/op
                 fillHeap·p0.95:   685768.704 us/op
                 fillHeap·p0.99:   685768.704 us/op
                 fillHeap·p0.999:  685768.704 us/op
                 fillHeap·p0.9999: 685768.704 us/op
                 fillHeap·p1.00:   685768.704 us/op

Iteration   2: 646709.248 ±(99.9%) 13955.904 us/op
                 fillHeap·p0.00:   608174.080 us/op
                 fillHeap·p0.50:   646447.104 us/op
                 fillHeap·p0.90:   663224.320 us/op
                 fillHeap·p0.95:   666894.336 us/op
                 fillHeap·p0.99:   666894.336 us/op
                 fillHeap·p0.999:  666894.336 us/op
                 fillHeap·p0.9999: 666894.336 us/op
                 fillHeap·p1.00:   666894.336 us/op

Iteration   3: 647102.464 ±(99.9%) 12203.489 us/op
                 fillHeap·p0.00:   618659.840 us/op
                 fillHeap·p0.50:   647495.680 us/op
                 fillHeap·p0.90:   663853.466 us/op
                 fillHeap·p0.95:   668991.488 us/op
                 fillHeap·p0.99:   668991.488 us/op
                 fillHeap·p0.999:  668991.488 us/op
                 fillHeap·p0.9999: 668991.488 us/op
                 fillHeap·p1.00:   668991.488 us/op

Iteration   4: 650117.120 ±(99.9%) 14345.246 us/op
                 fillHeap·p0.00:   611319.808 us/op
                 fillHeap·p0.50:   654835.712 us/op
                 fillHeap·p0.90:   665950.618 us/op
                 fillHeap·p0.95:   671088.640 us/op
                 fillHeap·p0.99:   671088.640 us/op
                 fillHeap·p0.999:  671088.640 us/op
                 fillHeap·p0.9999: 671088.640 us/op
                 fillHeap·p1.00:   671088.640 us/op

Iteration   5: 647561.216 ±(99.9%) 15535.300 us/op
                 fillHeap·p0.00:   606076.928 us/op
                 fillHeap·p0.50:   651165.696 us/op
                 fillHeap·p0.90:   663958.323 us/op
                 fillHeap·p0.95:   666894.336 us/op
                 fillHeap·p0.99:   666894.336 us/op
                 fillHeap·p0.999:  666894.336 us/op
                 fillHeap·p0.9999: 666894.336 us/op
                 fillHeap·p1.00:   666894.336 us/op

Iteration   6: 649592.832 ±(99.9%) 12408.046 us/op
                 fillHeap·p0.00:   619708.416 us/op
                 fillHeap·p0.50:   655884.288 us/op
                 fillHeap·p0.90:   661232.026 us/op
                 fillHeap·p0.95:   662700.032 us/op
                 fillHeap·p0.99:   662700.032 us/op
                 fillHeap·p0.999:  662700.032 us/op
                 fillHeap·p0.9999: 662700.032 us/op
                 fillHeap·p1.00:   662700.032 us/op

Iteration   7: 646250.496 ±(99.9%) 14274.717 us/op
                 fillHeap·p0.00:   623902.720 us/op
                 fillHeap·p0.50:   644874.240 us/op
                 fillHeap·p0.90:   673395.507 us/op
                 fillHeap·p0.95:   676331.520 us/op
                 fillHeap·p0.99:   676331.520 us/op
                 fillHeap·p0.999:  676331.520 us/op
                 fillHeap·p0.9999: 676331.520 us/op
                 fillHeap·p1.00:   676331.520 us/op

Iteration   8: 646119.424 ±(99.9%) 17513.897 us/op
                 fillHeap·p0.00:   597688.320 us/op
                 fillHeap·p0.50:   651165.696 us/op
                 fillHeap·p0.90:   663329.178 us/op
                 fillHeap·p0.95:   664797.184 us/op
                 fillHeap·p0.99:   664797.184 us/op
                 fillHeap·p0.999:  664797.184 us/op
                 fillHeap·p0.9999: 664797.184 us/op
                 fillHeap·p1.00:   664797.184 us/op

Iteration   9: 652673.024 ±(99.9%) 19034.827 us/op
                 fillHeap·p0.00:   611319.808 us/op
                 fillHeap·p0.50:   650117.120 us/op
                 fillHeap·p0.90:   686292.992 us/op
                 fillHeap·p0.95:   689963.008 us/op
                 fillHeap·p0.99:   689963.008 us/op
                 fillHeap·p0.999:  689963.008 us/op
                 fillHeap·p0.9999: 689963.008 us/op
                 fillHeap·p1.00:   689963.008 us/op

Iteration  10: 650051.584 ±(99.9%) 16620.043 us/op
                 fillHeap·p0.00:   625999.872 us/op
                 fillHeap·p0.50:   646971.392 us/op
                 fillHeap·p0.90:   676646.093 us/op
                 fillHeap·p0.95:   692060.160 us/op
                 fillHeap·p0.99:   692060.160 us/op
                 fillHeap·p0.999:  692060.160 us/op
                 fillHeap·p0.9999: 692060.160 us/op
                 fillHeap·p1.00:   692060.160 us/op

Iteration  11: 645201.920 ±(99.9%) 13503.252 us/op
                 fillHeap·p0.00:   616562.688 us/op
                 fillHeap·p0.50:   643825.664 us/op
                 fillHeap·p0.90:   667208.909 us/op
                 fillHeap·p0.95:   667942.912 us/op
                 fillHeap·p0.99:   667942.912 us/op
                 fillHeap·p0.999:  667942.912 us/op
                 fillHeap·p0.9999: 667942.912 us/op
                 fillHeap·p1.00:   667942.912 us/op

Iteration  12: 647168.000 ±(99.9%) 12506.982 us/op
                 fillHeap·p0.00:   610271.232 us/op
                 fillHeap·p0.50:   649592.832 us/op
                 fillHeap·p0.90:   660183.450 us/op
                 fillHeap·p0.95:   668991.488 us/op
                 fillHeap·p0.99:   668991.488 us/op
                 fillHeap·p0.999:  668991.488 us/op
                 fillHeap·p0.9999: 668991.488 us/op
                 fillHeap·p1.00:   668991.488 us/op

Iteration  13: 645988.352 ±(99.9%) 16551.316 us/op
                 fillHeap·p0.00:   603979.776 us/op
                 fillHeap·p0.50:   649068.544 us/op
                 fillHeap·p0.90:   663853.466 us/op
                 fillHeap·p0.95:   668991.488 us/op
                 fillHeap·p0.99:   668991.488 us/op
                 fillHeap·p0.999:  668991.488 us/op
                 fillHeap·p0.9999: 668991.488 us/op
                 fillHeap·p1.00:   668991.488 us/op

Iteration  14: 647888.896 ±(99.9%) 15402.199 us/op
                 fillHeap·p0.00:   618659.840 us/op
                 fillHeap·p0.50:   646971.392 us/op
                 fillHeap·p0.90:   674339.226 us/op
                 fillHeap·p0.95:   679477.248 us/op
                 fillHeap·p0.99:   679477.248 us/op
                 fillHeap·p0.999:  679477.248 us/op
                 fillHeap·p0.9999: 679477.248 us/op
                 fillHeap·p1.00:   679477.248 us/op

Iteration  15: 650117.120 ±(99.9%) 12034.973 us/op
                 fillHeap·p0.00:   623902.720 us/op
                 fillHeap·p0.50:   651165.696 us/op
                 fillHeap·p0.90:   667838.054 us/op
                 fillHeap·p0.95:   670040.064 us/op
                 fillHeap·p0.99:   670040.064 us/op
                 fillHeap·p0.999:  670040.064 us/op
                 fillHeap·p0.9999: 670040.064 us/op
                 fillHeap·p1.00:   670040.064 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 240
  mean = 648330.172 ±(99.9%) 3095.641 us/op

  Histogram, us/op:
    [590000.000, 600000.000) = 1 
    [600000.000, 610000.000) = 3 
    [610000.000, 620000.000) = 7 
    [620000.000, 630000.000) = 5 
    [630000.000, 640000.000) = 44 
    [640000.000, 650000.000) = 61 
    [650000.000, 660000.000) = 79 
    [660000.000, 670000.000) = 29 
    [670000.000, 680000.000) = 7 
    [680000.000, 690000.000) = 3 

  Percentiles, us/op:
      p(0.0000) = 597688.320 us/op
     p(50.0000) = 649068.544 us/op
     p(90.0000) = 664797.184 us/op
     p(95.0000) = 668991.488 us/op
     p(99.0000) = 688243.343 us/op
     p(99.9000) = 692060.160 us/op
     p(99.9900) = 692060.160 us/op
     p(99.9990) = 692060.160 us/op
     p(99.9999) = 692060.160 us/op
    p(100.0000) = 692060.160 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 73.19% complete, ETA 02:11:59
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap(AllocationBenchmark.java:52)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_sample_jmhStub(AllocationBenchmark_fillHeap_jmhTest.java:388)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_SampleTime(AllocationBenchmark_fillHeap_jmhTest.java:324)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)




# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 73.91% complete, ETA 02:07:10
# Fork: 1 of 1
# Warmup Iteration   1: 560405.618 ±(99.9%) 24605.473 us/op
# Warmup Iteration   2: 554310.387 ±(99.9%) 28111.894 us/op
# Warmup Iteration   3: 545894.184 ±(99.9%) 28198.705 us/op
# Warmup Iteration   4: 546722.008 ±(99.9%) 29719.536 us/op
# Warmup Iteration   5: 549784.953 ±(99.9%) 20858.680 us/op
Iteration   1: 550254.053 ±(99.9%) 20381.606 us/op
                 fillHeap·p0.00:   503316.480 us/op
                 fillHeap·p0.50:   550502.400 us/op
                 fillHeap·p0.90:   581959.680 us/op
                 fillHeap·p0.95:   594542.592 us/op
                 fillHeap·p0.99:   594542.592 us/op
                 fillHeap·p0.999:  594542.592 us/op
                 fillHeap·p0.9999: 594542.592 us/op
                 fillHeap·p1.00:   594542.592 us/op

Iteration   2: 564192.142 ±(99.9%) 23564.035 us/op
                 fillHeap·p0.00:   511705.088 us/op
                 fillHeap·p0.50:   568328.192 us/op
                 fillHeap·p0.90:   598632.038 us/op
                 fillHeap·p0.95:   607125.504 us/op
                 fillHeap·p0.99:   607125.504 us/op
                 fillHeap·p0.999:  607125.504 us/op
                 fillHeap·p0.9999: 607125.504 us/op
                 fillHeap·p1.00:   607125.504 us/op

Iteration   3: 552158.046 ±(99.9%) 28665.491 us/op
                 fillHeap·p0.00:   494927.872 us/op
                 fillHeap·p0.50:   553648.128 us/op
                 fillHeap·p0.90:   609222.656 us/op
                 fillHeap·p0.95:   619708.416 us/op
                 fillHeap·p0.99:   619708.416 us/op
                 fillHeap·p0.999:  619708.416 us/op
                 fillHeap·p0.9999: 619708.416 us/op
                 fillHeap·p1.00:   619708.416 us/op

Iteration   4: 554062.040 ±(99.9%) 19382.650 us/op
                 fillHeap·p0.00:   522715.136 us/op
                 fillHeap·p0.50:   548405.248 us/op
                 fillHeap·p0.90:   591396.864 us/op
                 fillHeap·p0.95:   593494.016 us/op
                 fillHeap·p0.99:   593494.016 us/op
                 fillHeap·p0.999:  593494.016 us/op
                 fillHeap·p0.9999: 593494.016 us/op
                 fillHeap·p1.00:   593494.016 us/op

Iteration   5: 554945.051 ±(99.9%) 20353.082 us/op
                 fillHeap·p0.00:   518520.832 us/op
                 fillHeap·p0.50:   544210.944 us/op
                 fillHeap·p0.90:   590348.288 us/op
                 fillHeap·p0.95:   606076.928 us/op
                 fillHeap·p0.99:   606076.928 us/op
                 fillHeap·p0.999:  606076.928 us/op
                 fillHeap·p0.9999: 606076.928 us/op
                 fillHeap·p1.00:   606076.928 us/op

Iteration   6: 546087.343 ±(99.9%) 23181.588 us/op
                 fillHeap·p0.00:   507510.784 us/op
                 fillHeap·p0.50:   549453.824 us/op
                 fillHeap·p0.90:   598736.896 us/op
                 fillHeap·p0.95:   599785.472 us/op
                 fillHeap·p0.99:   599785.472 us/op
                 fillHeap·p0.999:  599785.472 us/op
                 fillHeap·p0.9999: 599785.472 us/op
                 fillHeap·p1.00:   599785.472 us/op

Iteration   7: 553454.969 ±(99.9%) 24895.903 us/op
                 fillHeap·p0.00:   508559.360 us/op
                 fillHeap·p0.50:   551550.976 us/op
                 fillHeap·p0.90:   594542.592 us/op
                 fillHeap·p0.95:   607125.504 us/op
                 fillHeap·p0.99:   607125.504 us/op
                 fillHeap·p0.999:  607125.504 us/op
                 fillHeap·p0.9999: 607125.504 us/op
                 fillHeap·p1.00:   607125.504 us/op

Iteration   8: 545369.896 ±(99.9%) 15061.930 us/op
                 fillHeap·p0.00:   520617.984 us/op
                 fillHeap·p0.50:   545259.520 us/op
                 fillHeap·p0.90:   568328.192 us/op
                 fillHeap·p0.95:   576716.800 us/op
                 fillHeap·p0.99:   576716.800 us/op
                 fillHeap·p0.999:  576716.800 us/op
                 fillHeap·p0.9999: 576716.800 us/op
                 fillHeap·p1.00:   576716.800 us/op

Iteration   9: 553344.593 ±(99.9%) 25562.282 us/op
                 fillHeap·p0.00:   493879.296 us/op
                 fillHeap·p0.50:   550502.400 us/op
                 fillHeap·p0.90:   596639.744 us/op
                 fillHeap·p0.95:   602931.200 us/op
                 fillHeap·p0.99:   602931.200 us/op
                 fillHeap·p0.999:  602931.200 us/op
                 fillHeap·p0.9999: 602931.200 us/op
                 fillHeap·p1.00:   602931.200 us/op

Iteration  10: 543741.844 ±(99.9%) 20001.148 us/op
                 fillHeap·p0.00:   512229.376 us/op
                 fillHeap·p0.50:   544210.944 us/op
                 fillHeap·p0.90:   576716.800 us/op
                 fillHeap·p0.95:   584056.832 us/op
                 fillHeap·p0.99:   584056.832 us/op
                 fillHeap·p0.999:  584056.832 us/op
                 fillHeap·p0.9999: 584056.832 us/op
                 fillHeap·p1.00:   584056.832 us/op

Iteration  11: 545866.590 ±(99.9%) 18253.287 us/op
                 fillHeap·p0.00:   507510.784 us/op
                 fillHeap·p0.50:   544210.944 us/op
                 fillHeap·p0.90:   570425.344 us/op
                 fillHeap·p0.95:   590348.288 us/op
                 fillHeap·p0.99:   590348.288 us/op
                 fillHeap·p0.999:  590348.288 us/op
                 fillHeap·p0.9999: 590348.288 us/op
                 fillHeap·p1.00:   590348.288 us/op

Iteration  12: 554696.704 ±(99.9%) 28959.680 us/op
                 fillHeap·p0.00:   504365.056 us/op
                 fillHeap·p0.50:   554696.704 us/op
                 fillHeap·p0.90:   602931.200 us/op
                 fillHeap·p0.95:   602931.200 us/op
                 fillHeap·p0.99:   602931.200 us/op
                 fillHeap·p0.999:  602931.200 us/op
                 fillHeap·p0.9999: 602931.200 us/op
                 fillHeap·p1.00:   602931.200 us/op

Iteration  13: 558250.212 ±(99.9%) 27738.389 us/op
                 fillHeap·p0.00:   512229.376 us/op
                 fillHeap·p0.50:   552599.552 us/op
                 fillHeap·p0.90:   620966.707 us/op
                 fillHeap·p0.95:   622854.144 us/op
                 fillHeap·p0.99:   622854.144 us/op
                 fillHeap·p0.999:  622854.144 us/op
                 fillHeap·p0.9999: 622854.144 us/op
                 fillHeap·p1.00:   622854.144 us/op

Iteration  14: 564774.684 ±(99.9%) 35636.269 us/op
                 fillHeap·p0.00:   506986.496 us/op
                 fillHeap·p0.50:   558891.008 us/op
                 fillHeap·p0.90:   618030.694 us/op
                 fillHeap·p0.95:   650117.120 us/op
                 fillHeap·p0.99:   650117.120 us/op
                 fillHeap·p0.999:  650117.120 us/op
                 fillHeap·p0.9999: 650117.120 us/op
                 fillHeap·p1.00:   650117.120 us/op

Iteration  15: 550861.123 ±(99.9%) 21693.453 us/op
                 fillHeap·p0.00:   507510.784 us/op
                 fillHeap·p0.50:   544210.944 us/op
                 fillHeap·p0.90:   589299.712 us/op
                 fillHeap·p0.95:   599785.472 us/op
                 fillHeap·p0.99:   599785.472 us/op
                 fillHeap·p0.999:  599785.472 us/op
                 fillHeap·p0.9999: 599785.472 us/op
                 fillHeap·p1.00:   599785.472 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 282
  mean = 552701.807 ±(99.9%) 5237.163 us/op

  Histogram, us/op:
    [400000.000, 425000.000) = 0 
    [425000.000, 450000.000) = 0 
    [450000.000, 475000.000) = 0 
    [475000.000, 500000.000) = 2 
    [500000.000, 525000.000) = 40 
    [525000.000, 550000.000) = 95 
    [550000.000, 575000.000) = 89 
    [575000.000, 600000.000) = 42 
    [600000.000, 625000.000) = 13 
    [625000.000, 650000.000) = 0 
    [650000.000, 675000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 493879.296 us/op
     p(50.0000) = 550502.400 us/op
     p(90.0000) = 590033.715 us/op
     p(95.0000) = 600676.762 us/op
     p(99.0000) = 621113.508 us/op
     p(99.9000) = 650117.120 us/op
     p(99.9900) = 650117.120 us/op
     p(99.9990) = 650117.120 us/op
     p(99.9999) = 650117.120 us/op
    p(100.0000) = 650117.120 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 74.64% complete, ETA 02:03:42
# Fork: 1 of 1
# Warmup Iteration   1: 479349.029 ±(99.9%) 16945.071 us/op
# Warmup Iteration   2: 481945.502 ±(99.9%) 19303.188 us/op
# Warmup Iteration   3: 476172.660 ±(99.9%) 16285.144 us/op
# Warmup Iteration   4: 484517.010 ±(99.9%) 22777.512 us/op
# Warmup Iteration   5: 482944.146 ±(99.9%) 18300.094 us/op
Iteration   1: 478749.842 ±(99.9%) 17399.234 us/op
                 fillHeap·p0.00:   445120.512 us/op
                 fillHeap·p0.50:   476053.504 us/op
                 fillHeap·p0.90:   508978.790 us/op
                 fillHeap·p0.95:   511967.232 us/op
                 fillHeap·p0.99:   512229.376 us/op
                 fillHeap·p0.999:  512229.376 us/op
                 fillHeap·p0.9999: 512229.376 us/op
                 fillHeap·p1.00:   512229.376 us/op

Iteration   2: 470834.455 ±(99.9%) 19283.688 us/op
                 fillHeap·p0.00:   436207.616 us/op
                 fillHeap·p0.50:   465567.744 us/op
                 fillHeap·p0.90:   506671.923 us/op
                 fillHeap·p0.95:   515899.392 us/op
                 fillHeap·p0.99:   517472.256 us/op
                 fillHeap·p0.999:  517472.256 us/op
                 fillHeap·p0.9999: 517472.256 us/op
                 fillHeap·p1.00:   517472.256 us/op

Iteration   3: 481271.418 ±(99.9%) 19103.480 us/op
                 fillHeap·p0.00:   445644.800 us/op
                 fillHeap·p0.50:   479199.232 us/op
                 fillHeap·p0.90:   515794.534 us/op
                 fillHeap·p0.95:   518311.117 us/op
                 fillHeap·p0.99:   518520.832 us/op
                 fillHeap·p0.999:  518520.832 us/op
                 fillHeap·p0.9999: 518520.832 us/op
                 fillHeap·p1.00:   518520.832 us/op

Iteration   4: 469023.279 ±(99.9%) 12967.448 us/op
                 fillHeap·p0.00:   439877.632 us/op
                 fillHeap·p0.50:   472121.344 us/op
                 fillHeap·p0.90:   489999.565 us/op
                 fillHeap·p0.95:   502398.976 us/op
                 fillHeap·p0.99:   504365.056 us/op
                 fillHeap·p0.999:  504365.056 us/op
                 fillHeap·p0.9999: 504365.056 us/op
                 fillHeap·p1.00:   504365.056 us/op

Iteration   5: 474432.977 ±(99.9%) 16145.438 us/op
                 fillHeap·p0.00:   447741.952 us/op
                 fillHeap·p0.50:   472383.488 us/op
                 fillHeap·p0.90:   501271.757 us/op
                 fillHeap·p0.95:   522688.922 us/op
                 fillHeap·p0.99:   526385.152 us/op
                 fillHeap·p0.999:  526385.152 us/op
                 fillHeap·p0.9999: 526385.152 us/op
                 fillHeap·p1.00:   526385.152 us/op

Iteration   6: 480647.266 ±(99.9%) 17348.782 us/op
                 fillHeap·p0.00:   440401.920 us/op
                 fillHeap·p0.50:   480247.808 us/op
                 fillHeap·p0.90:   506776.781 us/op
                 fillHeap·p0.95:   523553.997 us/op
                 fillHeap·p0.99:   525336.576 us/op
                 fillHeap·p0.999:  525336.576 us/op
                 fillHeap·p0.9999: 525336.576 us/op
                 fillHeap·p1.00:   525336.576 us/op

Iteration   7: 475457.722 ±(99.9%) 16103.664 us/op
                 fillHeap·p0.00:   435683.328 us/op
                 fillHeap·p0.50:   473956.352 us/op
                 fillHeap·p0.90:   506304.922 us/op
                 fillHeap·p0.95:   510263.296 us/op
                 fillHeap·p0.99:   510656.512 us/op
                 fillHeap·p0.999:  510656.512 us/op
                 fillHeap·p0.9999: 510656.512 us/op
                 fillHeap·p1.00:   510656.512 us/op

Iteration   8: 477888.512 ±(99.9%) 19719.934 us/op
                 fillHeap·p0.00:   443547.648 us/op
                 fillHeap·p0.50:   469762.048 us/op
                 fillHeap·p0.90:   515584.819 us/op
                 fillHeap·p0.95:   531968.819 us/op
                 fillHeap·p0.99:   534249.472 us/op
                 fillHeap·p0.999:  534249.472 us/op
                 fillHeap·p0.9999: 534249.472 us/op
                 fillHeap·p1.00:   534249.472 us/op

Iteration   9: 474766.615 ±(99.9%) 20087.506 us/op
                 fillHeap·p0.00:   443547.648 us/op
                 fillHeap·p0.50:   477888.512 us/op
                 fillHeap·p0.90:   509817.651 us/op
                 fillHeap·p0.95:   536897.126 us/op
                 fillHeap·p0.99:   541065.216 us/op
                 fillHeap·p0.999:  541065.216 us/op
                 fillHeap·p0.9999: 541065.216 us/op
                 fillHeap·p1.00:   541065.216 us/op

Iteration  10: 474194.665 ±(99.9%) 20587.221 us/op
                 fillHeap·p0.00:   431489.024 us/op
                 fillHeap·p0.50:   470810.624 us/op
                 fillHeap·p0.90:   515689.677 us/op
                 fillHeap·p0.95:   530579.456 us/op
                 fillHeap·p0.99:   532152.320 us/op
                 fillHeap·p0.999:  532152.320 us/op
                 fillHeap·p0.9999: 532152.320 us/op
                 fillHeap·p1.00:   532152.320 us/op

Iteration  11: 479823.384 ±(99.9%) 16634.576 us/op
                 fillHeap·p0.00:   452460.544 us/op
                 fillHeap·p0.50:   477626.368 us/op
                 fillHeap·p0.90:   505099.059 us/op
                 fillHeap·p0.95:   523920.998 us/op
                 fillHeap·p0.99:   525860.864 us/op
                 fillHeap·p0.999:  525860.864 us/op
                 fillHeap·p0.9999: 525860.864 us/op
                 fillHeap·p1.00:   525860.864 us/op

Iteration  12: 479998.147 ±(99.9%) 19896.342 us/op
                 fillHeap·p0.00:   451411.968 us/op
                 fillHeap·p0.50:   475529.216 us/op
                 fillHeap·p0.90:   518415.974 us/op
                 fillHeap·p0.95:   534564.045 us/op
                 fillHeap·p0.99:   536346.624 us/op
                 fillHeap·p0.999:  536346.624 us/op
                 fillHeap·p0.9999: 536346.624 us/op
                 fillHeap·p1.00:   536346.624 us/op

Iteration  13: 474218.496 ±(99.9%) 14719.743 us/op
                 fillHeap·p0.00:   450887.680 us/op
                 fillHeap·p0.50:   471597.056 us/op
                 fillHeap·p0.90:   505256.346 us/op
                 fillHeap·p0.95:   516371.251 us/op
                 fillHeap·p0.99:   517472.256 us/op
                 fillHeap·p0.999:  517472.256 us/op
                 fillHeap·p0.9999: 517472.256 us/op
                 fillHeap·p1.00:   517472.256 us/op

Iteration  14: 478300.453 ±(99.9%) 22795.328 us/op
                 fillHeap·p0.00:   443547.648 us/op
                 fillHeap·p0.50:   471334.912 us/op
                 fillHeap·p0.90:   526804.582 us/op
                 fillHeap·p0.95:   536084.480 us/op
                 fillHeap·p0.99:   536870.912 us/op
                 fillHeap·p0.999:  536870.912 us/op
                 fillHeap·p0.9999: 536870.912 us/op
                 fillHeap·p1.00:   536870.912 us/op

Iteration  15: 480572.367 ±(99.9%) 17147.805 us/op
                 fillHeap·p0.00:   447217.664 us/op
                 fillHeap·p0.50:   475529.216 us/op
                 fillHeap·p0.90:   512963.379 us/op
                 fillHeap·p0.95:   530998.886 us/op
                 fillHeap·p0.99:   532676.608 us/op
                 fillHeap·p0.999:  532676.608 us/op
                 fillHeap·p0.9999: 532676.608 us/op
                 fillHeap·p1.00:   532676.608 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 323
  mean = 476608.632 ±(99.9%) 4024.995 us/op

  Histogram, us/op:
    [400000.000, 412500.000) = 0 
    [412500.000, 425000.000) = 0 
    [425000.000, 437500.000) = 3 
    [437500.000, 450000.000) = 23 
    [450000.000, 462500.000) = 73 
    [462500.000, 475000.000) = 63 
    [475000.000, 487500.000) = 66 
    [487500.000, 500000.000) = 46 
    [500000.000, 512500.000) = 27 
    [512500.000, 525000.000) = 12 
    [525000.000, 537500.000) = 9 
    [537500.000, 550000.000) = 1 
    [550000.000, 562500.000) = 0 
    [562500.000, 575000.000) = 0 
    [575000.000, 587500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 431489.024 us/op
     p(50.0000) = 474480.640 us/op
     p(90.0000) = 506252.493 us/op
     p(95.0000) = 517891.686 us/op
     p(99.0000) = 535843.308 us/op
     p(99.9000) = 541065.216 us/op
     p(99.9900) = 541065.216 us/op
     p(99.9990) = 541065.216 us/op
     p(99.9999) = 541065.216 us/op
    p(100.0000) = 541065.216 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 75.36% complete, ETA 02:00:13
# Fork: 1 of 1
# Warmup Iteration   1: 549.710 ±(99.9%) 5.639 us/op
# Warmup Iteration   2: 535.654 ±(99.9%) 0.554 us/op
# Warmup Iteration   3: 535.429 ±(99.9%) 0.500 us/op
# Warmup Iteration   4: 534.965 ±(99.9%) 0.256 us/op
# Warmup Iteration   5: 534.891 ±(99.9%) 0.270 us/op
Iteration   1: 534.983 ±(99.9%) 0.286 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   533.504 us/op
                 read·p0.90:   545.792 us/op
                 read·p0.95:   549.888 us/op
                 read·p0.99:   575.488 us/op
                 read·p0.999:  608.580 us/op
                 read·p0.9999: 1042.218 us/op
                 read·p1.00:   1060.864 us/op

Iteration   2: 534.850 ±(99.9%) 0.235 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   533.504 us/op
                 read·p0.90:   545.792 us/op
                 read·p0.95:   549.888 us/op
                 read·p0.99:   578.560 us/op
                 read·p0.999:  618.803 us/op
                 read·p0.9999: 708.321 us/op
                 read·p1.00:   793.600 us/op

Iteration   3: 534.721 ±(99.9%) 0.244 us/op
                 read·p0.00:   525.312 us/op
                 read·p0.50:   533.504 us/op
                 read·p0.90:   546.816 us/op
                 read·p0.95:   550.912 us/op
                 read·p0.99:   574.464 us/op
                 read·p0.999:  623.945 us/op
                 read·p0.9999: 727.021 us/op
                 read·p1.00:   740.352 us/op

Iteration   4: 534.970 ±(99.9%) 0.253 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   533.504 us/op
                 read·p0.90:   545.792 us/op
                 read·p0.95:   550.912 us/op
                 read·p0.99:   576.512 us/op
                 read·p0.999:  629.073 us/op
                 read·p0.9999: 721.724 us/op
                 read·p1.00:   840.704 us/op

Iteration   5: 534.827 ±(99.9%) 0.236 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   533.504 us/op
                 read·p0.90:   545.792 us/op
                 read·p0.95:   549.888 us/op
                 read·p0.99:   574.464 us/op
                 read·p0.999:  606.540 us/op
                 read·p0.9999: 771.257 us/op
                 read·p1.00:   852.992 us/op

Iteration   6: 534.548 ±(99.9%) 0.225 us/op
                 read·p0.00:   525.312 us/op
                 read·p0.50:   533.504 us/op
                 read·p0.90:   545.792 us/op
                 read·p0.95:   549.888 us/op
                 read·p0.99:   573.440 us/op
                 read·p0.999:  604.422 us/op
                 read·p0.9999: 708.355 us/op
                 read·p1.00:   760.832 us/op

Iteration   7: 534.788 ±(99.9%) 0.305 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   533.504 us/op
                 read·p0.90:   544.768 us/op
                 read·p0.95:   548.864 us/op
                 read·p0.99:   573.440 us/op
                 read·p0.999:  619.819 us/op
                 read·p0.9999: 990.834 us/op
                 read·p1.00:   1095.680 us/op

Iteration   8: 534.767 ±(99.9%) 0.216 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   533.504 us/op
                 read·p0.90:   545.792 us/op
                 read·p0.95:   549.888 us/op
                 read·p0.99:   571.392 us/op
                 read·p0.999:  594.250 us/op
                 read·p0.9999: 701.211 us/op
                 read·p1.00:   719.872 us/op

Iteration   9: 534.654 ±(99.9%) 0.238 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   532.480 us/op
                 read·p0.90:   545.792 us/op
                 read·p0.95:   549.888 us/op
                 read·p0.99:   574.464 us/op
                 read·p0.999:  624.640 us/op
                 read·p0.9999: 726.612 us/op
                 read·p1.00:   737.280 us/op

Iteration  10: 534.824 ±(99.9%) 0.229 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   533.504 us/op
                 read·p0.90:   545.792 us/op
                 read·p0.95:   549.888 us/op
                 read·p0.99:   571.392 us/op
                 read·p0.999:  624.640 us/op
                 read·p0.9999: 674.199 us/op
                 read·p1.00:   676.864 us/op

Iteration  11: 534.909 ±(99.9%) 0.244 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   533.504 us/op
                 read·p0.90:   546.816 us/op
                 read·p0.95:   550.912 us/op
                 read·p0.99:   573.440 us/op
                 read·p0.999:  624.975 us/op
                 read·p0.9999: 718.751 us/op
                 read·p1.00:   851.968 us/op

Iteration  12: 534.688 ±(99.9%) 0.214 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   533.504 us/op
                 read·p0.90:   545.792 us/op
                 read·p0.95:   550.912 us/op
                 read·p0.99:   570.368 us/op
                 read·p0.999:  597.645 us/op
                 read·p0.9999: 647.495 us/op
                 read·p1.00:   656.384 us/op

Iteration  13: 535.474 ±(99.9%) 0.393 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   533.504 us/op
                 read·p0.90:   546.816 us/op
                 read·p0.95:   550.912 us/op
                 read·p0.99:   576.512 us/op
                 read·p0.999:  825.031 us/op
                 read·p0.9999: 955.275 us/op
                 read·p1.00:   967.680 us/op

Iteration  14: 534.558 ±(99.9%) 0.258 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   532.480 us/op
                 read·p0.90:   544.768 us/op
                 read·p0.95:   549.888 us/op
                 read·p0.99:   576.512 us/op
                 read·p0.999:  617.472 us/op
                 read·p0.9999: 873.115 us/op
                 read·p1.00:   945.152 us/op

Iteration  15: 534.929 ±(99.9%) 0.526 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   532.480 us/op
                 read·p0.90:   545.792 us/op
                 read·p0.95:   549.888 us/op
                 read·p0.99:   577.536 us/op
                 read·p0.999:  623.616 us/op
                 read·p0.9999: 1010.713 us/op
                 read·p1.00:   3190.784 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  N = 280120
  mean =    534.832 ±(99.9%) 0.074 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 0 
    [ 250.000,  500.000) = 0 
    [ 500.000,  750.000) = 280068 
    [ 750.000, 1000.000) = 47 
    [1000.000, 1250.000) = 4 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 
    [2750.000, 3000.000) = 0 
    [3000.000, 3250.000) = 1 
    [3250.000, 3500.000) = 0 
    [3500.000, 3750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    525.312 us/op
     p(50.0000) =    533.504 us/op
     p(90.0000) =    545.792 us/op
     p(95.0000) =    549.888 us/op
     p(99.0000) =    574.464 us/op
     p(99.9000) =    623.616 us/op
     p(99.9900) =    862.196 us/op
     p(99.9990) =   1067.785 us/op
     p(99.9999) =   3190.784 us/op
    p(100.0000) =   3190.784 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 76.08% complete, ETA 01:56:41
# Fork: 1 of 1
# Warmup Iteration   1: 668.231 ±(99.9%) 6.397 us/op
# Warmup Iteration   2: 657.053 ±(99.9%) 0.373 us/op
# Warmup Iteration   3: 656.330 ±(99.9%) 0.293 us/op
# Warmup Iteration   4: 657.061 ±(99.9%) 0.511 us/op
# Warmup Iteration   5: 654.661 ±(99.9%) 0.423 us/op
Iteration   1: 654.629 ±(99.9%) 0.342 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   666.624 us/op
                 readAndWrite·p0.95:   671.744 us/op
                 readAndWrite·p0.99:   698.368 us/op
                 readAndWrite·p0.999:  753.664 us/op
                 readAndWrite·p0.9999: 1150.981 us/op
                 readAndWrite·p1.00:   1171.456 us/op

Iteration   2: 654.362 ±(99.9%) 0.300 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   666.624 us/op
                 readAndWrite·p0.95:   671.744 us/op
                 readAndWrite·p0.99:   699.392 us/op
                 readAndWrite·p0.999:  741.851 us/op
                 readAndWrite·p0.9999: 913.707 us/op
                 readAndWrite·p1.00:   998.400 us/op

Iteration   3: 654.271 ±(99.9%) 0.288 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   666.624 us/op
                 readAndWrite·p0.95:   671.744 us/op
                 readAndWrite·p0.99:   698.368 us/op
                 readAndWrite·p0.999:  749.322 us/op
                 readAndWrite·p0.9999: 825.331 us/op
                 readAndWrite·p1.00:   835.584 us/op

Iteration   4: 654.476 ±(99.9%) 0.309 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   665.600 us/op
                 readAndWrite·p0.95:   673.792 us/op
                 readAndWrite·p0.99:   700.416 us/op
                 readAndWrite·p0.999:  753.392 us/op
                 readAndWrite·p0.9999: 840.856 us/op
                 readAndWrite·p1.00:   858.112 us/op

Iteration   5: 655.058 ±(99.9%) 0.323 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   667.648 us/op
                 readAndWrite·p0.95:   672.768 us/op
                 readAndWrite·p0.99:   704.512 us/op
                 readAndWrite·p0.999:  765.694 us/op
                 readAndWrite·p0.9999: 854.937 us/op
                 readAndWrite·p1.00:   857.088 us/op

Iteration   6: 654.830 ±(99.9%) 0.292 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   667.648 us/op
                 readAndWrite·p0.95:   672.768 us/op
                 readAndWrite·p0.99:   700.416 us/op
                 readAndWrite·p0.999:  747.257 us/op
                 readAndWrite·p0.9999: 808.369 us/op
                 readAndWrite·p1.00:   809.984 us/op

Iteration   7: 655.677 ±(99.9%) 0.421 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   652.288 us/op
                 readAndWrite·p0.90:   667.648 us/op
                 readAndWrite·p0.95:   674.816 us/op
                 readAndWrite·p0.99:   704.512 us/op
                 readAndWrite·p0.999:  779.045 us/op
                 readAndWrite·p0.9999: 1184.525 us/op
                 readAndWrite·p1.00:   1189.888 us/op

Iteration   8: 654.482 ±(99.9%) 0.265 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   666.624 us/op
                 readAndWrite·p0.95:   670.720 us/op
                 readAndWrite·p0.99:   696.320 us/op
                 readAndWrite·p0.999:  728.064 us/op
                 readAndWrite·p0.9999: 781.149 us/op
                 readAndWrite·p1.00:   784.384 us/op

Iteration   9: 653.530 ±(99.9%) 0.252 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   664.576 us/op
                 readAndWrite·p0.95:   668.672 us/op
                 readAndWrite·p0.99:   692.224 us/op
                 readAndWrite·p0.999:  732.733 us/op
                 readAndWrite·p0.9999: 814.986 us/op
                 readAndWrite·p1.00:   817.152 us/op

Iteration  10: 653.358 ±(99.9%) 0.315 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   663.552 us/op
                 readAndWrite·p0.95:   667.648 us/op
                 readAndWrite·p0.99:   690.176 us/op
                 readAndWrite·p0.999:  743.551 us/op
                 readAndWrite·p0.9999: 1238.457 us/op
                 readAndWrite·p1.00:   1286.144 us/op

Iteration  11: 653.769 ±(99.9%) 0.813 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   664.576 us/op
                 readAndWrite·p0.95:   668.672 us/op
                 readAndWrite·p0.99:   692.224 us/op
                 readAndWrite·p0.999:  766.556 us/op
                 readAndWrite·p0.9999: 3164.529 us/op
                 readAndWrite·p1.00:   3272.704 us/op

Iteration  12: 653.999 ±(99.9%) 0.270 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   665.600 us/op
                 readAndWrite·p0.95:   669.696 us/op
                 readAndWrite·p0.99:   696.320 us/op
                 readAndWrite·p0.999:  747.977 us/op
                 readAndWrite·p0.9999: 839.913 us/op
                 readAndWrite·p1.00:   874.496 us/op

Iteration  13: 653.744 ±(99.9%) 0.282 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   664.576 us/op
                 readAndWrite·p0.95:   668.672 us/op
                 readAndWrite·p0.99:   698.368 us/op
                 readAndWrite·p0.999:  747.829 us/op
                 readAndWrite·p0.9999: 911.012 us/op
                 readAndWrite·p1.00:   946.176 us/op

Iteration  14: 653.636 ±(99.9%) 0.358 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   664.576 us/op
                 readAndWrite·p0.95:   667.648 us/op
                 readAndWrite·p0.99:   697.344 us/op
                 readAndWrite·p0.999:  767.857 us/op
                 readAndWrite·p0.9999: 1177.367 us/op
                 readAndWrite·p1.00:   1181.696 us/op

Iteration  15: 653.386 ±(99.9%) 0.257 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   664.576 us/op
                 readAndWrite·p0.95:   667.648 us/op
                 readAndWrite·p0.99:   693.248 us/op
                 readAndWrite·p0.999:  717.824 us/op
                 readAndWrite·p0.9999: 905.574 us/op
                 readAndWrite·p1.00:   1001.472 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  N = 229060
  mean =    654.213 ±(99.9%) 0.094 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 0 
    [ 250.000,  500.000) = 0 
    [ 500.000,  750.000) = 228820 
    [ 750.000, 1000.000) = 218 
    [1000.000, 1250.000) = 19 
    [1250.000, 1500.000) = 1 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 
    [2750.000, 3000.000) = 0 
    [3000.000, 3250.000) = 1 
    [3250.000, 3500.000) = 1 
    [3500.000, 3750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    644.096 us/op
     p(50.0000) =    651.264 us/op
     p(90.0000) =    665.600 us/op
     p(95.0000) =    670.720 us/op
     p(99.0000) =    697.344 us/op
     p(99.9000) =    752.640 us/op
     p(99.9900) =    998.688 us/op
     p(99.9990) =   2550.107 us/op
     p(99.9999) =   3272.704 us/op
    p(100.0000) =   3272.704 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 76.81% complete, ETA 01:53:10
# Fork: 1 of 1
# Warmup Iteration   1: 960.035 ±(99.9%) 10.794 us/op
# Warmup Iteration   2: 940.893 ±(99.9%) 0.251 us/op
# Warmup Iteration   3: 942.802 ±(99.9%) 1.199 us/op
# Warmup Iteration   4: 940.312 ±(99.9%) 0.225 us/op
# Warmup Iteration   5: 940.736 ±(99.9%) 0.508 us/op
Iteration   1: 859.537 ±(99.9%) 2.814 us/op
                 swap·p0.00:   749.568 us/op
                 swap·p0.50:   935.936 us/op
                 swap·p0.90:   945.152 us/op
                 swap·p0.95:   947.200 us/op
                 swap·p0.99:   961.536 us/op
                 swap·p0.999:  1018.360 us/op
                 swap·p0.9999: 1282.592 us/op
                 swap·p1.00:   1318.912 us/op

Iteration   2: 941.051 ±(99.9%) 0.246 us/op
                 swap·p0.00:   799.744 us/op
                 swap·p0.50:   937.984 us/op
                 swap·p0.90:   947.200 us/op
                 swap·p0.95:   951.296 us/op
                 swap·p0.99:   963.584 us/op
                 swap·p0.999:  1041.408 us/op
                 swap·p0.9999: 1116.300 us/op
                 swap·p1.00:   1118.208 us/op

Iteration   3: 941.219 ±(99.9%) 0.244 us/op
                 swap·p0.00:   762.880 us/op
                 swap·p0.50:   937.984 us/op
                 swap·p0.90:   948.224 us/op
                 swap·p0.95:   952.320 us/op
                 swap·p0.99:   963.584 us/op
                 swap·p0.999:  1042.432 us/op
                 swap·p0.9999: 1126.186 us/op
                 swap·p1.00:   1130.496 us/op

Iteration   4: 941.080 ±(99.9%) 0.231 us/op
                 swap·p0.00:   769.024 us/op
                 swap·p0.50:   937.984 us/op
                 swap·p0.90:   947.200 us/op
                 swap·p0.95:   950.272 us/op
                 swap·p0.99:   962.560 us/op
                 swap·p0.999:  1041.548 us/op
                 swap·p0.9999: 1058.434 us/op
                 swap·p1.00:   1058.816 us/op

Iteration   5: 941.171 ±(99.9%) 0.250 us/op
                 swap·p0.00:   750.592 us/op
                 swap·p0.50:   937.984 us/op
                 swap·p0.90:   948.224 us/op
                 swap·p0.95:   951.296 us/op
                 swap·p0.99:   966.656 us/op
                 swap·p0.999:  1039.749 us/op
                 swap·p0.9999: 1102.475 us/op
                 swap·p1.00:   1103.872 us/op

Iteration   6: 941.710 ±(99.9%) 0.332 us/op
                 swap·p0.00:   765.952 us/op
                 swap·p0.50:   937.984 us/op
                 swap·p0.90:   949.248 us/op
                 swap·p0.95:   953.344 us/op
                 swap·p0.99:   972.800 us/op
                 swap·p0.999:  1060.864 us/op
                 swap·p0.9999: 1267.317 us/op
                 swap·p1.00:   1273.856 us/op

Iteration   7: 941.458 ±(99.9%) 0.281 us/op
                 swap·p0.00:   754.688 us/op
                 swap·p0.50:   937.984 us/op
                 swap·p0.90:   947.200 us/op
                 swap·p0.95:   952.320 us/op
                 swap·p0.99:   968.704 us/op
                 swap·p0.999:  1039.360 us/op
                 swap·p0.9999: 1186.197 us/op
                 swap·p1.00:   1187.840 us/op

Iteration   8: 941.356 ±(99.9%) 0.251 us/op
                 swap·p0.00:   761.856 us/op
                 swap·p0.50:   937.984 us/op
                 swap·p0.90:   948.224 us/op
                 swap·p0.95:   952.320 us/op
                 swap·p0.99:   967.680 us/op
                 swap·p0.999:  1039.510 us/op
                 swap·p0.9999: 1060.864 us/op
                 swap·p1.00:   1060.864 us/op

Iteration   9: 941.313 ±(99.9%) 0.260 us/op
                 swap·p0.00:   765.952 us/op
                 swap·p0.50:   937.984 us/op
                 swap·p0.90:   947.200 us/op
                 swap·p0.95:   952.320 us/op
                 swap·p0.99:   966.656 us/op
                 swap·p0.999:  1032.583 us/op
                 swap·p0.9999: 1226.337 us/op
                 swap·p1.00:   1234.944 us/op

Iteration  10: 941.351 ±(99.9%) 0.252 us/op
                 swap·p0.00:   755.712 us/op
                 swap·p0.50:   937.984 us/op
                 swap·p0.90:   947.200 us/op
                 swap·p0.95:   952.320 us/op
                 swap·p0.99:   966.656 us/op
                 swap·p0.999:  1033.998 us/op
                 swap·p0.9999: 1074.947 us/op
                 swap·p1.00:   1075.200 us/op

Iteration  11: 942.017 ±(99.9%) 0.651 us/op
                 swap·p0.00:   754.688 us/op
                 swap·p0.50:   937.984 us/op
                 swap·p0.90:   948.224 us/op
                 swap·p0.95:   953.344 us/op
                 swap·p0.99:   973.824 us/op
                 swap·p0.999:  1065.759 us/op
                 swap·p0.9999: 2678.895 us/op
                 swap·p1.00:   2777.088 us/op

Iteration  12: 941.624 ±(99.9%) 0.299 us/op
                 swap·p0.00:   754.688 us/op
                 swap·p0.50:   937.984 us/op
                 swap·p0.90:   948.224 us/op
                 swap·p0.95:   953.344 us/op
                 swap·p0.99:   971.776 us/op
                 swap·p0.999:  1057.085 us/op
                 swap·p0.9999: 1150.094 us/op
                 swap·p1.00:   1150.976 us/op

Iteration  13: 941.660 ±(99.9%) 0.343 us/op
                 swap·p0.00:   754.688 us/op
                 swap·p0.50:   937.984 us/op
                 swap·p0.90:   948.224 us/op
                 swap·p0.95:   953.344 us/op
                 swap·p0.99:   971.776 us/op
                 swap·p0.999:  1042.827 us/op
                 swap·p0.9999: 1430.564 us/op
                 swap·p1.00:   1439.744 us/op

Iteration  14: 941.583 ±(99.9%) 0.399 us/op
                 swap·p0.00:   750.592 us/op
                 swap·p0.50:   937.984 us/op
                 swap·p0.90:   948.224 us/op
                 swap·p0.95:   953.344 us/op
                 swap·p0.99:   968.704 us/op
                 swap·p0.999:  1040.778 us/op
                 swap·p0.9999: 1426.826 us/op
                 swap·p1.00:   1427.456 us/op

Iteration  15: 941.372 ±(99.9%) 0.266 us/op
                 swap·p0.00:   750.592 us/op
                 swap·p0.50:   937.984 us/op
                 swap·p0.90:   948.224 us/op
                 swap·p0.95:   952.320 us/op
                 swap·p0.99:   966.656 us/op
                 swap·p0.999:  1042.190 us/op
                 swap·p0.9999: 1087.235 us/op
                 swap·p1.00:   1087.488 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  N = 160250
  mean =    935.485 ±(99.9%) 0.280 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 0 
    [ 250.000,  500.000) = 0 
    [ 500.000,  750.000) = 713 
    [ 750.000, 1000.000) = 159093 
    [1000.000, 1250.000) = 433 
    [1250.000, 1500.000) = 10 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    749.568 us/op
     p(50.0000) =    937.984 us/op
     p(90.0000) =    948.224 us/op
     p(95.0000) =    952.320 us/op
     p(99.0000) =    967.680 us/op
     p(99.9000) =   1041.408 us/op
     p(99.9900) =   1167.309 us/op
     p(99.9990) =   1971.325 us/op
     p(99.9999) =   2777.088 us/op
    p(100.0000) =   2777.088 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 77.53% complete, ETA 01:49:39
# Fork: 1 of 1
# Warmup Iteration   1: 542.544 ±(99.9%) 4.002 us/op
# Warmup Iteration   2: 535.901 ±(99.9%) 0.770 us/op
# Warmup Iteration   3: 534.655 ±(99.9%) 0.252 us/op
# Warmup Iteration   4: 534.501 ±(99.9%) 0.248 us/op
# Warmup Iteration   5: 534.458 ±(99.9%) 0.257 us/op
Iteration   1: 534.538 ±(99.9%) 0.252 us/op
                 write·p0.00:   515.584 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   544.768 us/op
                 write·p0.95:   548.864 us/op
                 write·p0.99:   575.488 us/op
                 write·p0.999:  624.961 us/op
                 write·p0.9999: 724.275 us/op
                 write·p1.00:   943.104 us/op

Iteration   2: 534.594 ±(99.9%) 0.256 us/op
                 write·p0.00:   516.096 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   544.768 us/op
                 write·p0.95:   549.888 us/op
                 write·p0.99:   574.464 us/op
                 write·p0.999:  609.603 us/op
                 write·p0.9999: 765.251 us/op
                 write·p1.00:   1064.960 us/op

Iteration   3: 535.002 ±(99.9%) 0.244 us/op
                 write·p0.00:   516.608 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   545.792 us/op
                 write·p0.95:   550.912 us/op
                 write·p0.99:   576.512 us/op
                 write·p0.999:  608.594 us/op
                 write·p0.9999: 680.884 us/op
                 write·p1.00:   700.416 us/op

Iteration   4: 535.216 ±(99.9%) 0.242 us/op
                 write·p0.00:   514.560 us/op
                 write·p0.50:   534.528 us/op
                 write·p0.90:   545.792 us/op
                 write·p0.95:   549.888 us/op
                 write·p0.99:   574.464 us/op
                 write·p0.999:  606.208 us/op
                 write·p0.9999: 768.970 us/op
                 write·p1.00:   801.792 us/op

Iteration   5: 535.027 ±(99.9%) 0.240 us/op
                 write·p0.00:   514.560 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   545.792 us/op
                 write·p0.95:   549.888 us/op
                 write·p0.99:   575.488 us/op
                 write·p0.999:  605.184 us/op
                 write·p0.9999: 717.072 us/op
                 write·p1.00:   718.848 us/op

Iteration   6: 535.400 ±(99.9%) 0.342 us/op
                 write·p0.00:   516.096 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   545.792 us/op
                 write·p0.95:   550.912 us/op
                 write·p0.99:   583.680 us/op
                 write·p0.999:  742.081 us/op
                 write·p0.9999: 877.809 us/op
                 write·p1.00:   1017.856 us/op

Iteration   7: 536.615 ±(99.9%) 0.548 us/op
                 write·p0.00:   516.096 us/op
                 write·p0.50:   534.528 us/op
                 write·p0.90:   546.816 us/op
                 write·p0.95:   552.960 us/op
                 write·p0.99:   588.800 us/op
                 write·p0.999:  648.587 us/op
                 write·p0.9999: 1320.934 us/op
                 write·p1.00:   2924.544 us/op

Iteration   8: 535.728 ±(99.9%) 0.295 us/op
                 write·p0.00:   515.584 us/op
                 write·p0.50:   534.528 us/op
                 write·p0.90:   546.816 us/op
                 write·p0.95:   552.960 us/op
                 write·p0.99:   580.608 us/op
                 write·p0.999:  640.000 us/op
                 write·p0.9999: 872.495 us/op
                 write·p1.00:   1245.184 us/op

Iteration   9: 534.931 ±(99.9%) 0.240 us/op
                 write·p0.00:   515.584 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   544.768 us/op
                 write·p0.95:   549.888 us/op
                 write·p0.99:   576.512 us/op
                 write·p0.999:  621.903 us/op
                 write·p0.9999: 704.861 us/op
                 write·p1.00:   787.456 us/op

Iteration  10: 535.061 ±(99.9%) 0.469 us/op
                 write·p0.00:   516.096 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   544.768 us/op
                 write·p0.95:   549.888 us/op
                 write·p0.99:   575.488 us/op
                 write·p0.999:  601.768 us/op
                 write·p0.9999: 1022.492 us/op
                 write·p1.00:   2838.528 us/op

Iteration  11: 535.847 ±(99.9%) 0.406 us/op
                 write·p0.00:   516.608 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   544.768 us/op
                 write·p0.95:   550.912 us/op
                 write·p0.99:   583.680 us/op
                 write·p0.999:  758.128 us/op
                 write·p0.9999: 806.941 us/op
                 write·p1.00:   839.680 us/op

Iteration  12: 535.137 ±(99.9%) 0.246 us/op
                 write·p0.00:   516.608 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   545.792 us/op
                 write·p0.95:   549.888 us/op
                 write·p0.99:   575.488 us/op
                 write·p0.999:  618.500 us/op
                 write·p0.9999: 708.138 us/op
                 write·p1.00:   804.864 us/op

Iteration  13: 534.751 ±(99.9%) 0.305 us/op
                 write·p0.00:   516.096 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   544.768 us/op
                 write·p0.95:   549.888 us/op
                 write·p0.99:   574.464 us/op
                 write·p0.999:  621.530 us/op
                 write·p0.9999: 1032.173 us/op
                 write·p1.00:   1045.504 us/op

Iteration  14: 535.108 ±(99.9%) 0.250 us/op
                 write·p0.00:   515.584 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   545.792 us/op
                 write·p0.95:   551.936 us/op
                 write·p0.99:   577.536 us/op
                 write·p0.999:  616.106 us/op
                 write·p0.9999: 675.908 us/op
                 write·p1.00:   683.008 us/op

Iteration  15: 533.968 ±(99.9%) 0.255 us/op
                 write·p0.00:   515.584 us/op
                 write·p0.50:   532.480 us/op
                 write·p0.90:   543.744 us/op
                 write·p0.95:   548.864 us/op
                 write·p0.99:   576.512 us/op
                 write·p0.999:  630.784 us/op
                 write·p0.9999: 871.701 us/op
                 write·p1.00:   901.120 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  N = 279975
  mean =    535.127 ±(99.9%) 0.083 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 0 
    [ 250.000,  500.000) = 0 
    [ 500.000,  750.000) = 279913 
    [ 750.000, 1000.000) = 51 
    [1000.000, 1250.000) = 9 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    514.560 us/op
     p(50.0000) =    533.504 us/op
     p(90.0000) =    545.792 us/op
     p(95.0000) =    550.912 us/op
     p(99.0000) =    578.560 us/op
     p(99.9000) =    641.049 us/op
     p(99.9900) =    801.792 us/op
     p(99.9990) =   1564.235 us/op
     p(99.9999) =   2924.544 us/op
    p(100.0000) =   2924.544 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 78.26% complete, ETA 01:46:07
# Fork: 1 of 1
# Warmup Iteration   1: 917218.025 ±(99.9%) 135483.079 us/op
# Warmup Iteration   2: 887357.440 ±(99.9%) 3090.639 us/op
# Warmup Iteration   3: 885522.432 ±(99.9%) 1669.648 us/op
# Warmup Iteration   4: 883949.568 ±(99.9%) 3084.000 us/op
# Warmup Iteration   5: 884473.856 ±(99.9%) 3314.651 us/op
Iteration   1: 885609.813 ±(99.9%) 2100.927 us/op
                 sumBigDecimals·p0.00:   882900.992 us/op
                 sumBigDecimals·p0.50:   885522.432 us/op
                 sumBigDecimals·p0.90:   888143.872 us/op
                 sumBigDecimals·p0.95:   888143.872 us/op
                 sumBigDecimals·p0.99:   888143.872 us/op
                 sumBigDecimals·p0.999:  888143.872 us/op
                 sumBigDecimals·p0.9999: 888143.872 us/op
                 sumBigDecimals·p1.00:   888143.872 us/op

Iteration   2: 886833.152 ±(99.9%) 2152.334 us/op
                 sumBigDecimals·p0.00:   883949.568 us/op
                 sumBigDecimals·p0.50:   886571.008 us/op
                 sumBigDecimals·p0.90:   889611.878 us/op
                 sumBigDecimals·p0.95:   890241.024 us/op
                 sumBigDecimals·p0.99:   890241.024 us/op
                 sumBigDecimals·p0.999:  890241.024 us/op
                 sumBigDecimals·p0.9999: 890241.024 us/op
                 sumBigDecimals·p1.00:   890241.024 us/op

Iteration   3: 886833.152 ±(99.9%) 2504.471 us/op
                 sumBigDecimals·p0.00:   882900.992 us/op
                 sumBigDecimals·p0.50:   887095.296 us/op
                 sumBigDecimals·p0.90:   889192.448 us/op
                 sumBigDecimals·p0.95:   889192.448 us/op
                 sumBigDecimals·p0.99:   889192.448 us/op
                 sumBigDecimals·p0.999:  889192.448 us/op
                 sumBigDecimals·p0.9999: 889192.448 us/op
                 sumBigDecimals·p1.00:   889192.448 us/op

Iteration   4: 886658.389 ±(99.9%) 1852.024 us/op
                 sumBigDecimals·p0.00:   883949.568 us/op
                 sumBigDecimals·p0.50:   886571.008 us/op
                 sumBigDecimals·p0.90:   888877.875 us/op
                 sumBigDecimals·p0.95:   889192.448 us/op
                 sumBigDecimals·p0.99:   889192.448 us/op
                 sumBigDecimals·p0.999:  889192.448 us/op
                 sumBigDecimals·p0.9999: 889192.448 us/op
                 sumBigDecimals·p1.00:   889192.448 us/op

Iteration   5: 884299.093 ±(99.9%) 3205.669 us/op
                 sumBigDecimals·p0.00:   880803.840 us/op
                 sumBigDecimals·p0.50:   883949.568 us/op
                 sumBigDecimals·p0.90:   887095.296 us/op
                 sumBigDecimals·p0.95:   887095.296 us/op
                 sumBigDecimals·p0.99:   887095.296 us/op
                 sumBigDecimals·p0.999:  887095.296 us/op
                 sumBigDecimals·p0.9999: 887095.296 us/op
                 sumBigDecimals·p1.00:   887095.296 us/op

Iteration   6: 886658.389 ±(99.9%) 1563.998 us/op
                 sumBigDecimals·p0.00:   883949.568 us/op
                 sumBigDecimals·p0.50:   887095.296 us/op
                 sumBigDecimals·p0.90:   888143.872 us/op
                 sumBigDecimals·p0.95:   888143.872 us/op
                 sumBigDecimals·p0.99:   888143.872 us/op
                 sumBigDecimals·p0.999:  888143.872 us/op
                 sumBigDecimals·p0.9999: 888143.872 us/op
                 sumBigDecimals·p1.00:   888143.872 us/op

Iteration   7: 884386.475 ±(99.9%) 2590.302 us/op
                 sumBigDecimals·p0.00:   881852.416 us/op
                 sumBigDecimals·p0.50:   883949.568 us/op
                 sumBigDecimals·p0.90:   887829.299 us/op
                 sumBigDecimals·p0.95:   888143.872 us/op
                 sumBigDecimals·p0.99:   888143.872 us/op
                 sumBigDecimals·p0.999:  888143.872 us/op
                 sumBigDecimals·p0.9999: 888143.872 us/op
                 sumBigDecimals·p1.00:   888143.872 us/op

Iteration   8: 885609.813 ±(99.9%) 2713.964 us/op
                 sumBigDecimals·p0.00:   880803.840 us/op
                 sumBigDecimals·p0.50:   886046.720 us/op
                 sumBigDecimals·p0.90:   887095.296 us/op
                 sumBigDecimals·p0.95:   887095.296 us/op
                 sumBigDecimals·p0.99:   887095.296 us/op
                 sumBigDecimals·p0.999:  887095.296 us/op
                 sumBigDecimals·p0.9999: 887095.296 us/op
                 sumBigDecimals·p1.00:   887095.296 us/op

Iteration   9: 885260.288 ±(99.9%) 2152.334 us/op
                 sumBigDecimals·p0.00:   882900.992 us/op
                 sumBigDecimals·p0.50:   885522.432 us/op
                 sumBigDecimals·p0.90:   887095.296 us/op
                 sumBigDecimals·p0.95:   887095.296 us/op
                 sumBigDecimals·p0.99:   887095.296 us/op
                 sumBigDecimals·p0.999:  887095.296 us/op
                 sumBigDecimals·p0.9999: 887095.296 us/op
                 sumBigDecimals·p1.00:   887095.296 us/op

Iteration  10: 884910.763 ±(99.9%) 1852.024 us/op
                 sumBigDecimals·p0.00:   882900.992 us/op
                 sumBigDecimals·p0.50:   884998.144 us/op
                 sumBigDecimals·p0.90:   887095.296 us/op
                 sumBigDecimals·p0.95:   887095.296 us/op
                 sumBigDecimals·p0.99:   887095.296 us/op
                 sumBigDecimals·p0.999:  887095.296 us/op
                 sumBigDecimals·p0.9999: 887095.296 us/op
                 sumBigDecimals·p1.00:   887095.296 us/op

Iteration  11: 884910.763 ±(99.9%) 2100.927 us/op
                 sumBigDecimals·p0.00:   881852.416 us/op
                 sumBigDecimals·p0.50:   885522.432 us/op
                 sumBigDecimals·p0.90:   886780.723 us/op
                 sumBigDecimals·p0.95:   887095.296 us/op
                 sumBigDecimals·p0.99:   887095.296 us/op
                 sumBigDecimals·p0.999:  887095.296 us/op
                 sumBigDecimals·p0.9999: 887095.296 us/op
                 sumBigDecimals·p1.00:   887095.296 us/op

Iteration  12: 885260.288 ±(99.9%) 2693.748 us/op
                 sumBigDecimals·p0.00:   881852.416 us/op
                 sumBigDecimals·p0.50:   885522.432 us/op
                 sumBigDecimals·p0.90:   888982.733 us/op
                 sumBigDecimals·p0.95:   890241.024 us/op
                 sumBigDecimals·p0.99:   890241.024 us/op
                 sumBigDecimals·p0.999:  890241.024 us/op
                 sumBigDecimals·p0.9999: 890241.024 us/op
                 sumBigDecimals·p1.00:   890241.024 us/op

Iteration  13: 884648.619 ±(99.9%) 2242.506 us/op
                 sumBigDecimals·p0.00:   881852.416 us/op
                 sumBigDecimals·p0.50:   884998.144 us/op
                 sumBigDecimals·p0.90:   887095.296 us/op
                 sumBigDecimals·p0.95:   887095.296 us/op
                 sumBigDecimals·p0.99:   887095.296 us/op
                 sumBigDecimals·p0.999:  887095.296 us/op
                 sumBigDecimals·p0.9999: 887095.296 us/op
                 sumBigDecimals·p1.00:   887095.296 us/op

Iteration  14: 884910.763 ±(99.9%) 1563.998 us/op
                 sumBigDecimals·p0.00:   882900.992 us/op
                 sumBigDecimals·p0.50:   884998.144 us/op
                 sumBigDecimals·p0.90:   886046.720 us/op
                 sumBigDecimals·p0.95:   886046.720 us/op
                 sumBigDecimals·p0.99:   886046.720 us/op
                 sumBigDecimals·p0.999:  886046.720 us/op
                 sumBigDecimals·p0.9999: 886046.720 us/op
                 sumBigDecimals·p1.00:   886046.720 us/op

Iteration  15: 885172.907 ±(99.9%) 2910.754 us/op
                 sumBigDecimals·p0.00:   880803.840 us/op
                 sumBigDecimals·p0.50:   884998.144 us/op
                 sumBigDecimals·p0.90:   888143.872 us/op
                 sumBigDecimals·p0.95:   888143.872 us/op
                 sumBigDecimals·p0.99:   888143.872 us/op
                 sumBigDecimals·p0.999:  888143.872 us/op
                 sumBigDecimals·p0.9999: 888143.872 us/op
                 sumBigDecimals·p1.00:   888143.872 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  N = 180
  mean = 885464.178 ±(99.9%) 484.470 us/op

  Histogram, us/op:
    [880000.000, 881000.000) = 4 
    [881000.000, 882000.000) = 6 
    [882000.000, 883000.000) = 22 
    [883000.000, 884000.000) = 23 
    [884000.000, 885000.000) = 28 
    [885000.000, 886000.000) = 0 
    [886000.000, 887000.000) = 40 
    [887000.000, 888000.000) = 37 
    [888000.000, 889000.000) = 15 
    [889000.000, 890000.000) = 3 

  Percentiles, us/op:
      p(0.0000) = 880803.840 us/op
     p(50.0000) = 886046.720 us/op
     p(90.0000) = 888143.872 us/op
     p(95.0000) = 888143.872 us/op
     p(99.0000) = 890241.024 us/op
     p(99.9000) = 890241.024 us/op
     p(99.9900) = 890241.024 us/op
     p(99.9990) = 890241.024 us/op
     p(99.9999) = 890241.024 us/op
    p(100.0000) = 890241.024 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 78.98% complete, ETA 01:42:39
# Fork: 1 of 1
# Warmup Iteration   1: 313311.232 ±(99.9%) 50386.803 us/op
# Warmup Iteration   2: 264372.224 ±(99.9%) 3259.194 us/op
# Warmup Iteration   3: 259556.168 ±(99.9%) 1248.113 us/op
# Warmup Iteration   4: 260846.723 ±(99.9%) 1129.474 us/op
# Warmup Iteration   5: 262211.216 ±(99.9%) 2029.339 us/op
Iteration   1: 257694.274 ±(99.9%) 1350.349 us/op
                 countUppercase·p0.00:   256114.688 us/op
                 countUppercase·p0.50:   256901.120 us/op
                 countUppercase·p0.90:   259784.704 us/op
                 countUppercase·p0.95:   262144.000 us/op
                 countUppercase·p0.99:   269484.032 us/op
                 countUppercase·p0.999:  269484.032 us/op
                 countUppercase·p0.9999: 269484.032 us/op
                 countUppercase·p1.00:   269484.032 us/op

Iteration   2: 259656.993 ±(99.9%) 1114.194 us/op
                 countUppercase·p0.00:   257949.696 us/op
                 countUppercase·p0.50:   258736.128 us/op
                 countUppercase·p0.90:   263192.576 us/op
                 countUppercase·p0.95:   265027.584 us/op
                 countUppercase·p0.99:   265027.584 us/op
                 countUppercase·p0.999:  265027.584 us/op
                 countUppercase·p0.9999: 265027.584 us/op
                 countUppercase·p1.00:   265027.584 us/op

Iteration   3: 262285.154 ±(99.9%) 2449.288 us/op
                 countUppercase·p0.00:   260046.848 us/op
                 countUppercase·p0.50:   260833.280 us/op
                 countUppercase·p0.90:   266076.160 us/op
                 countUppercase·p0.95:   271581.184 us/op
                 countUppercase·p0.99:   284164.096 us/op
                 countUppercase·p0.999:  284164.096 us/op
                 countUppercase·p0.9999: 284164.096 us/op
                 countUppercase·p1.00:   284164.096 us/op

Iteration   4: 266979.867 ±(99.9%) 2367.214 us/op
                 countUppercase·p0.00:   264765.440 us/op
                 countUppercase·p0.50:   265551.872 us/op
                 countUppercase·p0.90:   270008.320 us/op
                 countUppercase·p0.95:   280205.722 us/op
                 countUppercase·p0.99:   284688.384 us/op
                 countUppercase·p0.999:  284688.384 us/op
                 countUppercase·p0.9999: 284688.384 us/op
                 countUppercase·p1.00:   284688.384 us/op

Iteration   5: 262580.907 ±(99.9%) 991.248 us/op
                 countUppercase·p0.00:   261357.568 us/op
                 countUppercase·p0.50:   261881.856 us/op
                 countUppercase·p0.90:   266338.304 us/op
                 countUppercase·p0.95:   266862.592 us/op
                 countUppercase·p0.99:   268435.456 us/op
                 countUppercase·p0.999:  268435.456 us/op
                 countUppercase·p0.9999: 268435.456 us/op
                 countUppercase·p1.00:   268435.456 us/op

Iteration   6: 257452.295 ±(99.9%) 1352.229 us/op
                 countUppercase·p0.00:   255852.544 us/op
                 countUppercase·p0.50:   256638.976 us/op
                 countUppercase·p0.90:   261357.568 us/op
                 countUppercase·p0.95:   265551.872 us/op
                 countUppercase·p0.99:   266076.160 us/op
                 countUppercase·p0.999:  266076.160 us/op
                 countUppercase·p0.9999: 266076.160 us/op
                 countUppercase·p1.00:   266076.160 us/op

Iteration   7: 260174.559 ±(99.9%) 1293.890 us/op
                 countUppercase·p0.00:   259260.416 us/op
                 countUppercase·p0.50:   259522.560 us/op
                 countUppercase·p0.90:   262406.144 us/op
                 countUppercase·p0.95:   263979.008 us/op
                 countUppercase·p0.99:   272105.472 us/op
                 countUppercase·p0.999:  272105.472 us/op
                 countUppercase·p0.9999: 272105.472 us/op
                 countUppercase·p1.00:   272105.472 us/op

Iteration   8: 258393.324 ±(99.9%) 1029.078 us/op
                 countUppercase·p0.00:   256901.120 us/op
                 countUppercase·p0.50:   257687.552 us/op
                 countUppercase·p0.90:   260833.280 us/op
                 countUppercase·p0.95:   262144.000 us/op
                 countUppercase·p0.99:   266076.160 us/op
                 countUppercase·p0.999:  266076.160 us/op
                 countUppercase·p0.9999: 266076.160 us/op
                 countUppercase·p1.00:   266076.160 us/op

Iteration   9: 265186.250 ±(99.9%) 1273.714 us/op
                 countUppercase·p0.00:   263979.008 us/op
                 countUppercase·p0.50:   264503.296 us/op
                 countUppercase·p0.90:   267701.453 us/op
                 countUppercase·p0.95:   271738.470 us/op
                 countUppercase·p0.99:   274726.912 us/op
                 countUppercase·p0.999:  274726.912 us/op
                 countUppercase·p0.9999: 274726.912 us/op
                 countUppercase·p1.00:   274726.912 us/op

Iteration  10: 263758.255 ±(99.9%) 1479.141 us/op
                 countUppercase·p0.00:   262406.144 us/op
                 countUppercase·p0.50:   262930.432 us/op
                 countUppercase·p0.90:   268251.955 us/op
                 countUppercase·p0.95:   272629.760 us/op
                 countUppercase·p0.99:   272629.760 us/op
                 countUppercase·p0.999:  272629.760 us/op
                 countUppercase·p0.9999: 272629.760 us/op
                 countUppercase·p1.00:   272629.760 us/op

Iteration  11: 256800.295 ±(99.9%) 1109.285 us/op
                 countUppercase·p0.00:   255852.544 us/op
                 countUppercase·p0.50:   256114.688 us/op
                 countUppercase·p0.90:   258998.272 us/op
                 countUppercase·p0.95:   260571.136 us/op
                 countUppercase·p0.99:   266600.448 us/op
                 countUppercase·p0.999:  266600.448 us/op
                 countUppercase·p0.9999: 266600.448 us/op
                 countUppercase·p1.00:   266600.448 us/op

Iteration  12: 259347.797 ±(99.9%) 986.479 us/op
                 countUppercase·p0.00:   258211.840 us/op
                 countUppercase·p0.50:   258736.128 us/op
                 countUppercase·p0.90:   262144.000 us/op
                 countUppercase·p0.95:   263192.576 us/op
                 countUppercase·p0.99:   266862.592 us/op
                 countUppercase·p0.999:  266862.592 us/op
                 countUppercase·p0.9999: 266862.592 us/op
                 countUppercase·p1.00:   266862.592 us/op

Iteration  13: 259784.704 ±(99.9%) 831.940 us/op
                 countUppercase·p0.00:   258736.128 us/op
                 countUppercase·p0.50:   259260.416 us/op
                 countUppercase·p0.90:   261619.712 us/op
                 countUppercase·p0.95:   263979.008 us/op
                 countUppercase·p0.99:   264241.152 us/op
                 countUppercase·p0.999:  264241.152 us/op
                 countUppercase·p0.9999: 264241.152 us/op
                 countUppercase·p1.00:   264241.152 us/op

Iteration  14: 261881.856 ±(99.9%) 1189.498 us/op
                 countUppercase·p0.00:   260308.992 us/op
                 countUppercase·p0.50:   261095.424 us/op
                 countUppercase·p0.90:   265289.728 us/op
                 countUppercase·p0.95:   268435.456 us/op
                 countUppercase·p0.99:   268959.744 us/op
                 countUppercase·p0.999:  268959.744 us/op
                 countUppercase·p0.9999: 268959.744 us/op
                 countUppercase·p1.00:   268959.744 us/op

Iteration  15: 261962.516 ±(99.9%) 632.370 us/op
                 countUppercase·p0.00:   261095.424 us/op
                 countUppercase·p0.50:   261619.712 us/op
                 countUppercase·p0.90:   264241.152 us/op
                 countUppercase·p0.95:   264765.440 us/op
                 countUppercase·p0.99:   264765.440 us/op
                 countUppercase·p0.999:  264765.440 us/op
                 countUppercase·p0.9999: 264765.440 us/op
                 countUppercase·p1.00:   264765.440 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 582
  mean = 260906.698 ±(99.9%) 507.325 us/op

  Histogram, us/op:
    [250000.000, 252500.000) = 0 
    [252500.000, 255000.000) = 0 
    [255000.000, 257500.000) = 111 
    [257500.000, 260000.000) = 154 
    [260000.000, 262500.000) = 163 
    [262500.000, 265000.000) = 80 
    [265000.000, 267500.000) = 53 
    [267500.000, 270000.000) = 11 
    [270000.000, 272500.000) = 3 
    [272500.000, 275000.000) = 4 
    [275000.000, 277500.000) = 0 
    [277500.000, 280000.000) = 1 
    [280000.000, 282500.000) = 0 
    [282500.000, 285000.000) = 2 
    [285000.000, 287500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 255852.544 us/op
     p(50.0000) = 260571.136 us/op
     p(90.0000) = 265289.728 us/op
     p(95.0000) = 266600.448 us/op
     p(99.0000) = 272986.276 us/op
     p(99.9000) = 284688.384 us/op
     p(99.9900) = 284688.384 us/op
     p(99.9990) = 284688.384 us/op
     p(99.9999) = 284688.384 us/op
    p(100.0000) = 284688.384 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 79.71% complete, ETA 01:39:08
# Fork: 1 of 1
# Warmup Iteration   1: 2777677.824 ±(99.9%) 1298026.032 us/op
# Warmup Iteration   2: 2196976.435 ±(99.9%) 78626.227 us/op
# Warmup Iteration   3: 2194459.853 ±(99.9%) 85002.784 us/op
# Warmup Iteration   4: 2227175.424 ±(99.9%) 44230.709 us/op
# Warmup Iteration   5: 2235564.032 ±(99.9%) 61500.305 us/op
Iteration   1: 2168455.168 ±(99.9%) 44230.709 us/op
                 countUppercase·p0.00:   2151677.952 us/op
                 countUppercase·p0.50:   2168455.168 us/op
                 countUppercase·p0.90:   2181038.080 us/op
                 countUppercase·p0.95:   2181038.080 us/op
                 countUppercase·p0.99:   2181038.080 us/op
                 countUppercase·p0.999:  2181038.080 us/op
                 countUppercase·p0.9999: 2181038.080 us/op
                 countUppercase·p1.00:   2181038.080 us/op

Iteration   2: 2173488.333 ±(99.9%) 33099.232 us/op
                 countUppercase·p0.00:   2164260.864 us/op
                 countUppercase·p0.50:   2176843.776 us/op
                 countUppercase·p0.90:   2181038.080 us/op
                 countUppercase·p0.95:   2181038.080 us/op
                 countUppercase·p0.99:   2181038.080 us/op
                 countUppercase·p0.999:  2181038.080 us/op
                 countUppercase·p0.9999: 2181038.080 us/op
                 countUppercase·p1.00:   2181038.080 us/op

Iteration   3: 2186071.245 ±(99.9%) 74363.735 us/op
                 countUppercase·p0.00:   2168455.168 us/op
                 countUppercase·p0.50:   2181038.080 us/op
                 countUppercase·p0.90:   2210398.208 us/op
                 countUppercase·p0.95:   2210398.208 us/op
                 countUppercase·p0.99:   2210398.208 us/op
                 countUppercase·p0.999:  2210398.208 us/op
                 countUppercase·p0.9999: 2210398.208 us/op
                 countUppercase·p1.00:   2210398.208 us/op

Iteration   4: 2208720.486 ±(99.9%) 112824.437 us/op
                 countUppercase·p0.00:   2164260.864 us/op
                 countUppercase·p0.50:   2222981.120 us/op
                 countUppercase·p0.90:   2231369.728 us/op
                 countUppercase·p0.95:   2231369.728 us/op
                 countUppercase·p0.99:   2231369.728 us/op
                 countUppercase·p0.999:  2231369.728 us/op
                 countUppercase·p0.9999: 2231369.728 us/op
                 countUppercase·p1.00:   2231369.728 us/op

Iteration   5: 2138256.179 ±(99.9%) 35476.595 us/op
                 countUppercase·p0.00:   2128609.280 us/op
                 countUppercase·p0.50:   2134900.736 us/op
                 countUppercase·p0.90:   2151677.952 us/op
                 countUppercase·p0.95:   2151677.952 us/op
                 countUppercase·p0.99:   2151677.952 us/op
                 countUppercase·p0.999:  2151677.952 us/op
                 countUppercase·p0.9999: 2151677.952 us/op
                 countUppercase·p1.00:   2151677.952 us/op

Iteration   6: 2125673.267 ±(99.9%) 33588.168 us/op
                 countUppercase·p0.00:   2113929.216 us/op
                 countUppercase·p0.50:   2126512.128 us/op
                 countUppercase·p0.90:   2134900.736 us/op
                 countUppercase·p0.95:   2134900.736 us/op
                 countUppercase·p0.99:   2134900.736 us/op
                 countUppercase·p0.999:  2134900.736 us/op
                 countUppercase·p0.9999: 2134900.736 us/op
                 countUppercase·p1.00:   2134900.736 us/op

Iteration   7: 2157130.547 ±(99.9%) 96500.013 us/op
                 countUppercase·p0.00:   2124414.976 us/op
                 countUppercase·p0.50:   2160066.560 us/op
                 countUppercase·p0.90:   2193620.992 us/op
                 countUppercase·p0.95:   2193620.992 us/op
                 countUppercase·p0.99:   2193620.992 us/op
                 countUppercase·p0.999:  2193620.992 us/op
                 countUppercase·p0.9999: 2193620.992 us/op
                 countUppercase·p1.00:   2193620.992 us/op

Iteration   8: 2224658.842 ±(99.9%) 31483.649 us/op
                 countUppercase·p0.00:   2218786.816 us/op
                 countUppercase·p0.50:   2218786.816 us/op
                 countUppercase·p0.90:   2235564.032 us/op
                 countUppercase·p0.95:   2235564.032 us/op
                 countUppercase·p0.99:   2235564.032 us/op
                 countUppercase·p0.999:  2235564.032 us/op
                 countUppercase·p0.9999: 2235564.032 us/op
                 countUppercase·p1.00:   2235564.032 us/op

Iteration   9: 2168874.598 ±(99.9%) 101570.247 us/op
                 countUppercase·p0.00:   2136997.888 us/op
                 countUppercase·p0.50:   2160066.560 us/op
                 countUppercase·p0.90:   2202009.600 us/op
                 countUppercase·p0.95:   2202009.600 us/op
                 countUppercase·p0.99:   2202009.600 us/op
                 countUppercase·p0.999:  2202009.600 us/op
                 countUppercase·p0.9999: 2202009.600 us/op
                 countUppercase·p1.00:   2202009.600 us/op

Iteration  10: 2210398.208 ±(99.9%) 105907.689 us/op
                 countUppercase·p0.00:   2189426.688 us/op
                 countUppercase·p0.50:   2193620.992 us/op
                 countUppercase·p0.90:   2248146.944 us/op
                 countUppercase·p0.95:   2248146.944 us/op
                 countUppercase·p0.99:   2248146.944 us/op
                 countUppercase·p0.999:  2248146.944 us/op
                 countUppercase·p0.9999: 2248146.944 us/op
                 countUppercase·p1.00:   2248146.944 us/op

Iteration  11: 2135739.597 ±(99.9%) 38134.293 us/op
                 countUppercase·p0.00:   2122317.824 us/op
                 countUppercase·p0.50:   2134900.736 us/op
                 countUppercase·p0.90:   2145386.496 us/op
                 countUppercase·p0.95:   2145386.496 us/op
                 countUppercase·p0.99:   2145386.496 us/op
                 countUppercase·p0.999:  2145386.496 us/op
                 countUppercase·p0.9999: 2145386.496 us/op
                 countUppercase·p1.00:   2145386.496 us/op

Iteration  12: 2163422.003 ±(99.9%) 101119.823 us/op
                 countUppercase·p0.00:   2130706.432 us/op
                 countUppercase·p0.50:   2155872.256 us/op
                 countUppercase·p0.90:   2197815.296 us/op
                 countUppercase·p0.95:   2197815.296 us/op
                 countUppercase·p0.99:   2197815.296 us/op
                 countUppercase·p0.999:  2197815.296 us/op
                 countUppercase·p0.9999: 2197815.296 us/op
                 countUppercase·p1.00:   2197815.296 us/op

Iteration  13: 2190265.549 ±(99.9%) 58678.666 us/op
                 countUppercase·p0.00:   2172649.472 us/op
                 countUppercase·p0.50:   2189426.688 us/op
                 countUppercase·p0.90:   2214592.512 us/op
                 countUppercase·p0.95:   2214592.512 us/op
                 countUppercase·p0.99:   2214592.512 us/op
                 countUppercase·p0.999:  2214592.512 us/op
                 countUppercase·p0.9999: 2214592.512 us/op
                 countUppercase·p1.00:   2214592.512 us/op

Iteration  14: 2138256.179 ±(99.9%) 80470.721 us/op
                 countUppercase·p0.00:   2120220.672 us/op
                 countUppercase·p0.50:   2126512.128 us/op
                 countUppercase·p0.90:   2168455.168 us/op
                 countUppercase·p0.95:   2168455.168 us/op
                 countUppercase·p0.99:   2168455.168 us/op
                 countUppercase·p0.999:  2168455.168 us/op
                 countUppercase·p0.9999: 2168455.168 us/op
                 countUppercase·p1.00:   2168455.168 us/op

Iteration  15: 2216270.234 ±(99.9%) 133963.808 us/op
                 countUppercase·p0.00:   2172649.472 us/op
                 countUppercase·p0.50:   2222981.120 us/op
                 countUppercase·p0.90:   2256535.552 us/op
                 countUppercase·p0.95:   2256535.552 us/op
                 countUppercase·p0.99:   2256535.552 us/op
                 countUppercase·p0.999:  2256535.552 us/op
                 countUppercase·p0.9999: 2256535.552 us/op
                 countUppercase·p1.00:   2256535.552 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 75
  mean = 2173712.029 ±(99.9%) 14263.930 us/op

  Histogram, us/op:
    [2100000.000, 2112500.000) = 0 
    [2112500.000, 2125000.000) = 6 
    [2125000.000, 2137500.000) = 11 
    [2137500.000, 2150000.000) = 4 
    [2150000.000, 2162500.000) = 9 
    [2162500.000, 2175000.000) = 10 
    [2175000.000, 2187500.000) = 8 
    [2187500.000, 2200000.000) = 10 
    [2200000.000, 2212500.000) = 3 
    [2212500.000, 2225000.000) = 6 
    [2225000.000, 2237500.000) = 5 
    [2237500.000, 2250000.000) = 2 
    [2250000.000, 2262500.000) = 1 
    [2262500.000, 2275000.000) = 0 
    [2275000.000, 2287500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 2113929.216 us/op
     p(50.0000) = 2168455.168 us/op
     p(90.0000) = 2231369.728 us/op
     p(95.0000) = 2236402.893 us/op
     p(99.0000) = 2256535.552 us/op
     p(99.9000) = 2256535.552 us/op
     p(99.9900) = 2256535.552 us/op
     p(99.9990) = 2256535.552 us/op
     p(99.9999) = 2256535.552 us/op
    p(100.0000) = 2256535.552 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 80.43% complete, ETA 01:35:40
# Fork: 1 of 1
# Warmup Iteration   1: 1.196 ±(99.9%) 0.288 us/op
# Warmup Iteration   2: 0.775 ±(99.9%) 0.082 us/op
# Warmup Iteration   3: 0.727 ±(99.9%) 0.003 us/op
# Warmup Iteration   4: 0.739 ±(99.9%) 0.042 us/op
# Warmup Iteration   5: 0.726 ±(99.9%) 0.004 us/op
Iteration   1: 0.725 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   0.677 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.718 us/op
                 runFibonacci·p0.95:   0.721 us/op
                 runFibonacci·p0.99:   0.725 us/op
                 runFibonacci·p0.999:  5.878 us/op
                 runFibonacci·p0.9999: 13.480 us/op
                 runFibonacci·p1.00:   86.528 us/op

Iteration   2: 0.729 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   0.678 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.719 us/op
                 runFibonacci·p0.95:   0.722 us/op
                 runFibonacci·p0.99:   0.730 us/op
                 runFibonacci·p0.999:  6.466 us/op
                 runFibonacci·p0.9999: 21.239 us/op
                 runFibonacci·p1.00:   289.280 us/op

Iteration   3: 0.726 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   0.677 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.718 us/op
                 runFibonacci·p0.95:   0.721 us/op
                 runFibonacci·p0.99:   0.725 us/op
                 runFibonacci·p0.999:  6.835 us/op
                 runFibonacci·p0.9999: 16.750 us/op
                 runFibonacci·p1.00:   35.392 us/op

Iteration   4: 0.727 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   0.679 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.718 us/op
                 runFibonacci·p0.95:   0.720 us/op
                 runFibonacci·p0.99:   0.724 us/op
                 runFibonacci·p0.999:  6.617 us/op
                 runFibonacci·p0.9999: 20.930 us/op
                 runFibonacci·p1.00:   186.368 us/op

Iteration   5: 0.725 ±(99.9%) 0.002 us/op
                 runFibonacci·p0.00:   0.679 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.718 us/op
                 runFibonacci·p0.95:   0.720 us/op
                 runFibonacci·p0.99:   0.724 us/op
                 runFibonacci·p0.999:  5.845 us/op
                 runFibonacci·p0.9999: 14.187 us/op
                 runFibonacci·p1.00:   38.016 us/op

Iteration   6: 0.727 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   0.678 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.717 us/op
                 runFibonacci·p0.95:   0.720 us/op
                 runFibonacci·p0.99:   0.724 us/op
                 runFibonacci·p0.999:  6.243 us/op
                 runFibonacci·p0.9999: 22.488 us/op
                 runFibonacci·p1.00:   167.424 us/op

Iteration   7: 0.728 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   0.680 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.719 us/op
                 runFibonacci·p0.95:   0.722 us/op
                 runFibonacci·p0.99:   0.730 us/op
                 runFibonacci·p0.999:  6.939 us/op
                 runFibonacci·p0.9999: 23.945 us/op
                 runFibonacci·p1.00:   101.504 us/op

Iteration   8: 0.738 ±(99.9%) 0.040 us/op
                 runFibonacci·p0.00:   0.679 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.718 us/op
                 runFibonacci·p0.95:   0.720 us/op
                 runFibonacci·p0.99:   0.724 us/op
                 runFibonacci·p0.999:  5.645 us/op
                 runFibonacci·p0.9999: 18.348 us/op
                 runFibonacci·p1.00:   2723.840 us/op

Iteration   9: 0.728 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   0.678 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.718 us/op
                 runFibonacci·p0.95:   0.721 us/op
                 runFibonacci·p0.99:   0.730 us/op
                 runFibonacci·p0.999:  5.837 us/op
                 runFibonacci·p0.9999: 18.508 us/op
                 runFibonacci·p1.00:   429.568 us/op

Iteration  10: 0.726 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   0.677 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.720 us/op
                 runFibonacci·p0.95:   0.722 us/op
                 runFibonacci·p0.99:   0.730 us/op
                 runFibonacci·p0.999:  5.729 us/op
                 runFibonacci·p0.9999: 13.686 us/op
                 runFibonacci·p1.00:   70.272 us/op

Iteration  11: 0.725 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   0.678 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.718 us/op
                 runFibonacci·p0.95:   0.720 us/op
                 runFibonacci·p0.99:   0.724 us/op
                 runFibonacci·p0.999:  5.380 us/op
                 runFibonacci·p0.9999: 18.555 us/op
                 runFibonacci·p1.00:   66.176 us/op

Iteration  12: 0.725 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   0.678 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.717 us/op
                 runFibonacci·p0.95:   0.720 us/op
                 runFibonacci·p0.99:   0.725 us/op
                 runFibonacci·p0.999:  5.544 us/op
                 runFibonacci·p0.9999: 13.614 us/op
                 runFibonacci·p1.00:   78.848 us/op

Iteration  13: 0.739 ±(99.9%) 0.040 us/op
                 runFibonacci·p0.00:   0.677 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.719 us/op
                 runFibonacci·p0.95:   0.721 us/op
                 runFibonacci·p0.99:   0.727 us/op
                 runFibonacci·p0.999:  6.669 us/op
                 runFibonacci·p0.9999: 18.593 us/op
                 runFibonacci·p1.00:   2736.128 us/op

Iteration  14: 0.725 ±(99.9%) 0.002 us/op
                 runFibonacci·p0.00:   0.678 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.718 us/op
                 runFibonacci·p0.95:   0.721 us/op
                 runFibonacci·p0.99:   0.724 us/op
                 runFibonacci·p0.999:  6.091 us/op
                 runFibonacci·p0.9999: 14.038 us/op
                 runFibonacci·p1.00:   34.880 us/op

Iteration  15: 0.727 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   0.680 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.719 us/op
                 runFibonacci·p0.95:   0.721 us/op
                 runFibonacci·p0.99:   0.727 us/op
                 runFibonacci·p0.999:  5.608 us/op
                 runFibonacci·p0.9999: 20.286 us/op
                 runFibonacci·p1.00:   377.344 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 3396150
  mean =      0.728 ±(99.9%) 0.004 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 3396145 
    [ 250.000,  500.000) = 3 
    [ 500.000,  750.000) = 0 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 2 

  Percentiles, us/op:
      p(0.0000) =      0.677 us/op
     p(50.0000) =      0.709 us/op
     p(90.0000) =      0.718 us/op
     p(95.0000) =      0.721 us/op
     p(99.0000) =      0.727 us/op
     p(99.9000) =      5.999 us/op
     p(99.9900) =     17.836 us/op
     p(99.9990) =     43.877 us/op
     p(99.9999) =    408.879 us/op
    p(100.0000) =   2736.128 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 81.16% complete, ETA 01:32:08
# Fork: 1 of 1
# Warmup Iteration   1: 1.881 ±(99.9%) 0.132 us/op
# Warmup Iteration   2: 1.662 ±(99.9%) 0.004 us/op
# Warmup Iteration   3: 1.654 ±(99.9%) 0.003 us/op
# Warmup Iteration   4: 1.654 ±(99.9%) 0.004 us/op
# Warmup Iteration   5: 1.654 ±(99.9%) 0.003 us/op
Iteration   1: 1.653 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.642 us/op
                 runFibonacci·p0.95:   1.646 us/op
                 runFibonacci·p0.99:   1.658 us/op
                 runFibonacci·p0.999:  8.208 us/op
                 runFibonacci·p0.9999: 18.206 us/op
                 runFibonacci·p1.00:   109.824 us/op

Iteration   2: 1.654 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.658 us/op
                 runFibonacci·p0.999:  8.176 us/op
                 runFibonacci·p0.9999: 26.323 us/op
                 runFibonacci·p1.00:   302.592 us/op

Iteration   3: 1.654 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.642 us/op
                 runFibonacci·p0.95:   1.646 us/op
                 runFibonacci·p0.99:   1.658 us/op
                 runFibonacci·p0.999:  9.019 us/op
                 runFibonacci·p0.9999: 20.356 us/op
                 runFibonacci·p1.00:   198.656 us/op

Iteration   4: 1.653 ±(99.9%) 0.002 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.642 us/op
                 runFibonacci·p0.95:   1.646 us/op
                 runFibonacci·p0.99:   1.658 us/op
                 runFibonacci·p0.999:  8.588 us/op
                 runFibonacci·p0.9999: 17.358 us/op
                 runFibonacci·p1.00:   55.936 us/op

Iteration   5: 1.653 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.646 us/op
                 runFibonacci·p0.99:   1.656 us/op
                 runFibonacci·p0.999:  7.745 us/op
                 runFibonacci·p0.9999: 21.520 us/op
                 runFibonacci·p1.00:   89.344 us/op

Iteration   6: 1.651 ±(99.9%) 0.002 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.642 us/op
                 runFibonacci·p0.95:   1.646 us/op
                 runFibonacci·p0.99:   1.656 us/op
                 runFibonacci·p0.999:  7.844 us/op
                 runFibonacci·p0.9999: 17.202 us/op
                 runFibonacci·p1.00:   77.824 us/op

Iteration   7: 1.648 ±(99.9%) 0.002 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.642 us/op
                 runFibonacci·p0.95:   1.646 us/op
                 runFibonacci·p0.99:   1.656 us/op
                 runFibonacci·p0.999:  7.034 us/op
                 runFibonacci·p0.9999: 14.065 us/op
                 runFibonacci·p1.00:   40.512 us/op

Iteration   8: 1.653 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.642 us/op
                 runFibonacci·p0.95:   1.646 us/op
                 runFibonacci·p0.99:   1.656 us/op
                 runFibonacci·p0.999:  7.854 us/op
                 runFibonacci·p0.9999: 21.130 us/op
                 runFibonacci·p1.00:   100.864 us/op

Iteration   9: 1.654 ±(99.9%) 0.005 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.658 us/op
                 runFibonacci·p0.999:  7.899 us/op
                 runFibonacci·p0.9999: 22.600 us/op
                 runFibonacci·p1.00:   427.008 us/op

Iteration  10: 1.653 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.642 us/op
                 runFibonacci·p0.95:   1.646 us/op
                 runFibonacci·p0.99:   1.656 us/op
                 runFibonacci·p0.999:  7.288 us/op
                 runFibonacci·p0.9999: 20.754 us/op
                 runFibonacci·p1.00:   272.384 us/op

Iteration  11: 1.651 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.656 us/op
                 runFibonacci·p0.999:  7.416 us/op
                 runFibonacci·p0.9999: 16.370 us/op
                 runFibonacci·p1.00:   249.856 us/op

Iteration  12: 1.650 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.604 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.642 us/op
                 runFibonacci·p0.95:   1.646 us/op
                 runFibonacci·p0.99:   1.656 us/op
                 runFibonacci·p0.999:  6.741 us/op
                 runFibonacci·p0.9999: 17.999 us/op
                 runFibonacci·p1.00:   228.352 us/op

Iteration  13: 1.652 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.656 us/op
                 runFibonacci·p0.999:  7.565 us/op
                 runFibonacci·p0.9999: 19.240 us/op
                 runFibonacci·p1.00:   183.040 us/op

Iteration  14: 1.651 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.642 us/op
                 runFibonacci·p0.95:   1.646 us/op
                 runFibonacci·p0.99:   1.656 us/op
                 runFibonacci·p0.999:  7.730 us/op
                 runFibonacci·p0.9999: 21.381 us/op
                 runFibonacci·p1.00:   203.264 us/op

Iteration  15: 1.652 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.642 us/op
                 runFibonacci·p0.95:   1.646 us/op
                 runFibonacci·p0.99:   1.656 us/op
                 runFibonacci·p0.999:  7.859 us/op
                 runFibonacci·p0.9999: 20.635 us/op
                 runFibonacci·p1.00:   168.704 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 5765354
  mean =      1.652 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 5765299 
    [ 50.000, 100.000) = 41 
    [100.000, 150.000) = 3 
    [150.000, 200.000) = 4 
    [200.000, 250.000) = 4 
    [250.000, 300.000) = 1 
    [300.000, 350.000) = 1 
    [350.000, 400.000) = 0 
    [400.000, 450.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      1.604 us/op
     p(50.0000) =      1.632 us/op
     p(90.0000) =      1.642 us/op
     p(95.0000) =      1.646 us/op
     p(99.0000) =      1.656 us/op
     p(99.9000) =      7.800 us/op
     p(99.9900) =     19.488 us/op
     p(99.9990) =     47.577 us/op
     p(99.9999) =    217.184 us/op
    p(100.0000) =    427.008 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 81.88% complete, ETA 01:28:36
# Fork: 1 of 1
# Warmup Iteration   1: 3.242 ±(99.9%) 0.241 us/op
# Warmup Iteration   2: 2.852 ±(99.9%) 0.009 us/op
# Warmup Iteration   3: 2.848 ±(99.9%) 0.008 us/op
# Warmup Iteration   4: 2.847 ±(99.9%) 0.007 us/op
# Warmup Iteration   5: 2.848 ±(99.9%) 0.008 us/op
Iteration   1: 2.850 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.812 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.844 us/op
                 runFibonacci·p0.999:  11.715 us/op
                 runFibonacci·p0.9999: 28.104 us/op
                 runFibonacci·p1.00:   486.400 us/op

Iteration   2: 2.849 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.812 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.844 us/op
                 runFibonacci·p0.999:  11.763 us/op
                 runFibonacci·p0.9999: 29.606 us/op
                 runFibonacci·p1.00:   262.656 us/op

Iteration   3: 2.845 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.812 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.844 us/op
                 runFibonacci·p0.999:  11.379 us/op
                 runFibonacci·p0.9999: 26.909 us/op
                 runFibonacci·p1.00:   250.368 us/op

Iteration   4: 2.848 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.812 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.844 us/op
                 runFibonacci·p0.999:  11.650 us/op
                 runFibonacci·p0.9999: 29.430 us/op
                 runFibonacci·p1.00:   190.464 us/op

Iteration   5: 2.854 ±(99.9%) 0.009 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.812 us/op
                 runFibonacci·p0.90:   2.824 us/op
                 runFibonacci·p0.95:   2.828 us/op
                 runFibonacci·p0.99:   2.840 us/op
                 runFibonacci·p0.999:  12.001 us/op
                 runFibonacci·p0.9999: 46.181 us/op
                 runFibonacci·p1.00:   318.976 us/op

Iteration   6: 2.845 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.812 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.844 us/op
                 runFibonacci·p0.999:  11.346 us/op
                 runFibonacci·p0.9999: 28.450 us/op
                 runFibonacci·p1.00:   182.272 us/op

Iteration   7: 2.851 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.812 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.848 us/op
                 runFibonacci·p0.999:  11.956 us/op
                 runFibonacci·p0.9999: 33.191 us/op
                 runFibonacci·p1.00:   237.312 us/op

Iteration   8: 2.854 ±(99.9%) 0.009 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.812 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.848 us/op
                 runFibonacci·p0.999:  12.324 us/op
                 runFibonacci·p0.9999: 34.582 us/op
                 runFibonacci·p1.00:   251.136 us/op

Iteration   9: 2.845 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.812 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.844 us/op
                 runFibonacci·p0.999:  11.650 us/op
                 runFibonacci·p0.9999: 29.571 us/op
                 runFibonacci·p1.00:   163.840 us/op

Iteration  10: 2.848 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.812 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.840 us/op
                 runFibonacci·p0.999:  11.425 us/op
                 runFibonacci·p0.9999: 31.460 us/op
                 runFibonacci·p1.00:   217.600 us/op

Iteration  11: 2.852 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.812 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.848 us/op
                 runFibonacci·p0.999:  12.387 us/op
                 runFibonacci·p0.9999: 34.163 us/op
                 runFibonacci·p1.00:   156.160 us/op

Iteration  12: 2.844 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.812 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.844 us/op
                 runFibonacci·p0.999:  11.488 us/op
                 runFibonacci·p0.9999: 25.473 us/op
                 runFibonacci·p1.00:   301.056 us/op

Iteration  13: 2.846 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.824 us/op
                 runFibonacci·p0.95:   2.828 us/op
                 runFibonacci·p0.99:   2.844 us/op
                 runFibonacci·p0.999:  11.937 us/op
                 runFibonacci·p0.9999: 30.149 us/op
                 runFibonacci·p1.00:   188.416 us/op

Iteration  14: 2.849 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.812 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.840 us/op
                 runFibonacci·p0.999:  12.160 us/op
                 runFibonacci·p0.9999: 32.528 us/op
                 runFibonacci·p1.00:   179.712 us/op

Iteration  15: 2.848 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.812 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.848 us/op
                 runFibonacci·p0.999:  11.554 us/op
                 runFibonacci·p0.9999: 31.597 us/op
                 runFibonacci·p1.00:   293.888 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 3327986
  mean =      2.849 ±(99.9%) 0.002 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 3327862 
    [ 50.000, 100.000) = 67 
    [100.000, 150.000) = 17 
    [150.000, 200.000) = 24 
    [200.000, 250.000) = 8 
    [250.000, 300.000) = 5 
    [300.000, 350.000) = 2 
    [350.000, 400.000) = 0 
    [400.000, 450.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      2.772 us/op
     p(50.0000) =      2.812 us/op
     p(90.0000) =      2.828 us/op
     p(95.0000) =      2.832 us/op
     p(99.0000) =      2.844 us/op
     p(99.9000) =     11.744 us/op
     p(99.9900) =     30.912 us/op
     p(99.9990) =    159.284 us/op
     p(99.9999) =    298.705 us/op
    p(100.0000) =    486.400 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 82.61% complete, ETA 01:25:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.331 ±(99.9%) 0.168 us/op
# Warmup Iteration   2: 0.131 ±(99.9%) 0.002 us/op
# Warmup Iteration   3: 0.113 ±(99.9%) 0.003 us/op
# Warmup Iteration   4: 0.110 ±(99.9%) 0.001 us/op
# Warmup Iteration   5: 0.110 ±(99.9%) 0.001 us/op
Iteration   1: 0.110 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.098 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.101 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.112 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.284 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.993 us/op
                 findLastPrefixUsingScanner1·p1.00:   88.704 us/op

Iteration   2: 0.110 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.098 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.101 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.112 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.310 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.990 us/op
                 findLastPrefixUsingScanner1·p1.00:   36.224 us/op

Iteration   3: 0.110 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.098 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.101 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.294 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.170 us/op
                 findLastPrefixUsingScanner1·p1.00:   28.864 us/op

Iteration   4: 0.110 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.099 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.101 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.112 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.287 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.417 us/op
                 findLastPrefixUsingScanner1·p1.00:   33.984 us/op

Iteration   5: 0.111 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.099 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.102 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.120 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.291 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.415 us/op
                 findLastPrefixUsingScanner1·p1.00:   152.832 us/op

Iteration   6: 0.111 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.099 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.102 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.112 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.120 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.330 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.061 us/op
                 findLastPrefixUsingScanner1·p1.00:   39.616 us/op

Iteration   7: 0.113 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.099 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.112 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.120 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.374 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.340 us/op
                 findLastPrefixUsingScanner1·p1.00:   92.288 us/op

Iteration   8: 0.112 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.098 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.101 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.120 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.324 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.966 us/op
                 findLastPrefixUsingScanner1·p1.00:   213.504 us/op

Iteration   9: 0.112 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.099 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.112 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.120 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.372 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.625 us/op
                 findLastPrefixUsingScanner1·p1.00:   36.224 us/op

Iteration  10: 0.112 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.098 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.102 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.112 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.457 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.497 us/op
                 findLastPrefixUsingScanner1·p1.00:   278.016 us/op

Iteration  11: 0.111 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.098 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.101 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.375 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.136 us/op
                 findLastPrefixUsingScanner1·p1.00:   165.120 us/op

Iteration  12: 0.111 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.099 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.112 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.120 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.319 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.158 us/op
                 findLastPrefixUsingScanner1·p1.00:   27.200 us/op

Iteration  13: 0.110 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.098 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.101 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.118 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.338 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.967 us/op
                 findLastPrefixUsingScanner1·p1.00:   39.552 us/op

Iteration  14: 0.116 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.100 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.110 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.120 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.121 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.431 us/op
                 findLastPrefixUsingScanner1·p0.9999: 11.995 us/op
                 findLastPrefixUsingScanner1·p1.00:   168.960 us/op

Iteration  15: 0.111 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.098 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.101 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.112 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.120 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.295 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.602 us/op
                 findLastPrefixUsingScanner1·p1.00:   99.968 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 3687378
  mean =      0.111 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 3687321 
    [ 25.000,  50.000) = 41 
    [ 50.000,  75.000) = 3 
    [ 75.000, 100.000) = 6 
    [100.000, 125.000) = 0 
    [125.000, 150.000) = 2 
    [150.000, 175.000) = 3 
    [175.000, 200.000) = 0 
    [200.000, 225.000) = 1 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.098 us/op
     p(50.0000) =      0.103 us/op
     p(90.0000) =      0.112 us/op
     p(95.0000) =      0.113 us/op
     p(99.0000) =      0.120 us/op
     p(99.9000) =      0.314 us/op
     p(99.9900) =      8.480 us/op
     p(99.9990) =     32.209 us/op
     p(99.9999) =    166.320 us/op
    p(100.0000) =    278.016 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 83.33% complete, ETA 01:21:32
# Fork: 1 of 1
# Warmup Iteration   1: 1.443 ±(99.9%) 0.362 us/op
# Warmup Iteration   2: 0.742 ±(99.9%) 0.008 us/op
# Warmup Iteration   3: 0.814 ±(99.9%) 0.005 us/op
# Warmup Iteration   4: 0.800 ±(99.9%) 0.006 us/op
# Warmup Iteration   5: 0.785 ±(99.9%) 0.004 us/op
Iteration   1: 0.812 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.777 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.793 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.802 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.805 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.814 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.033 us/op
                 findLastPrefixUsingScanner1·p0.9999: 16.567 us/op
                 findLastPrefixUsingScanner1·p1.00:   85.376 us/op

Iteration   2: 0.786 ±(99.9%) 0.044 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.743 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.756 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.760 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.761 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.766 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.693 us/op
                 findLastPrefixUsingScanner1·p0.9999: 17.714 us/op
                 findLastPrefixUsingScanner1·p1.00:   2809.856 us/op

Iteration   3: 0.787 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.753 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.766 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.769 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.770 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.777 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.052 us/op
                 findLastPrefixUsingScanner1·p0.9999: 23.061 us/op
                 findLastPrefixUsingScanner1·p1.00:   116.352 us/op

Iteration   4: 0.822 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.791 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.805 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.808 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.810 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.821 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.882 us/op
                 findLastPrefixUsingScanner1·p0.9999: 16.405 us/op
                 findLastPrefixUsingScanner1·p1.00:   83.200 us/op

Iteration   5: 0.773 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.741 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.754 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.756 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.758 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.762 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.140 us/op
                 findLastPrefixUsingScanner1·p0.9999: 20.113 us/op
                 findLastPrefixUsingScanner1·p1.00:   185.088 us/op

Iteration   6: 0.797 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.765 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.779 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.782 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.783 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.788 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.210 us/op
                 findLastPrefixUsingScanner1·p0.9999: 19.090 us/op
                 findLastPrefixUsingScanner1·p1.00:   96.128 us/op

Iteration   7: 0.786 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.755 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.768 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.771 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.772 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.777 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.909 us/op
                 findLastPrefixUsingScanner1·p0.9999: 16.339 us/op
                 findLastPrefixUsingScanner1·p1.00:   38.784 us/op

Iteration   8: 0.788 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.754 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.768 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.771 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.772 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.779 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.163 us/op
                 findLastPrefixUsingScanner1·p0.9999: 17.782 us/op
                 findLastPrefixUsingScanner1·p1.00:   283.136 us/op

Iteration   9: 0.789 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.755 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.769 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.771 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.772 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.779 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.686 us/op
                 findLastPrefixUsingScanner1·p0.9999: 19.553 us/op
                 findLastPrefixUsingScanner1·p1.00:   103.296 us/op

Iteration  10: 0.774 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.744 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.756 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.758 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.760 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.764 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.999 us/op
                 findLastPrefixUsingScanner1·p0.9999: 17.532 us/op
                 findLastPrefixUsingScanner1·p1.00:   80.768 us/op

Iteration  11: 0.783 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.755 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.767 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.769 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.771 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.775 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.538 us/op
                 findLastPrefixUsingScanner1·p0.9999: 15.456 us/op
                 findLastPrefixUsingScanner1·p1.00:   63.360 us/op

Iteration  12: 0.814 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.780 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.794 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.799 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.804 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.810 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.130 us/op
                 findLastPrefixUsingScanner1·p0.9999: 20.661 us/op
                 findLastPrefixUsingScanner1·p1.00:   97.920 us/op

Iteration  13: 0.781 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.752 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.765 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.768 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.769 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.773 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.690 us/op
                 findLastPrefixUsingScanner1·p0.9999: 16.219 us/op
                 findLastPrefixUsingScanner1·p1.00:   97.280 us/op

Iteration  14: 0.811 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.778 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.792 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.795 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.796 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.807 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.292 us/op
                 findLastPrefixUsingScanner1·p0.9999: 17.566 us/op
                 findLastPrefixUsingScanner1·p1.00:   103.808 us/op

Iteration  15: 0.777 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.745 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.758 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.761 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.762 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.766 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.060 us/op
                 findLastPrefixUsingScanner1·p0.9999: 18.959 us/op
                 findLastPrefixUsingScanner1·p1.00:   104.832 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 3112575
  mean =      0.792 ±(99.9%) 0.003 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 3112573 
    [ 250.000,  500.000) = 1 
    [ 500.000,  750.000) = 0 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.741 us/op
     p(50.0000) =      0.768 us/op
     p(90.0000) =      0.796 us/op
     p(95.0000) =      0.804 us/op
     p(99.0000) =      0.810 us/op
     p(99.9000) =      7.016 us/op
     p(99.9900) =     18.112 us/op
     p(99.9990) =     46.335 us/op
     p(99.9999) =    177.350 us/op
    p(100.0000) =   2809.856 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 84.06% complete, ETA 01:18:00
# Fork: 1 of 1
# Warmup Iteration   1: 7.499 ±(99.9%) 0.185 us/op
# Warmup Iteration   2: 7.161 ±(99.9%) 0.095 us/op
# Warmup Iteration   3: 7.411 ±(99.9%) 0.028 us/op
# Warmup Iteration   4: 7.452 ±(99.9%) 0.005 us/op
# Warmup Iteration   5: 7.384 ±(99.9%) 0.005 us/op
Iteration   1: 7.426 ±(99.9%) 0.014 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.312 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.352 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.360 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.360 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.416 us/op
                 findLastPrefixUsingScanner1·p0.999:  16.416 us/op
                 findLastPrefixUsingScanner1·p0.9999: 47.493 us/op
                 findLastPrefixUsingScanner1·p1.00:   539.648 us/op

Iteration   2: 7.502 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.392 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.440 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.448 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.448 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.512 us/op
                 findLastPrefixUsingScanner1·p0.999:  16.502 us/op
                 findLastPrefixUsingScanner1·p0.9999: 40.000 us/op
                 findLastPrefixUsingScanner1·p1.00:   367.104 us/op

Iteration   3: 7.462 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.360 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.392 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.416 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.416 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.608 us/op
                 findLastPrefixUsingScanner1·p0.999:  16.416 us/op
                 findLastPrefixUsingScanner1·p0.9999: 38.593 us/op
                 findLastPrefixUsingScanner1·p1.00:   321.024 us/op

Iteration   4: 7.500 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.400 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.440 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.448 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.456 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.512 us/op
                 findLastPrefixUsingScanner1·p0.999:  16.256 us/op
                 findLastPrefixUsingScanner1·p0.9999: 33.470 us/op
                 findLastPrefixUsingScanner1·p1.00:   251.136 us/op

Iteration   5: 7.381 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.288 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.320 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.328 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.336 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.400 us/op
                 findLastPrefixUsingScanner1·p0.999:  15.808 us/op
                 findLastPrefixUsingScanner1·p0.9999: 32.720 us/op
                 findLastPrefixUsingScanner1·p1.00:   180.224 us/op

Iteration   6: 7.944 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.616 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.888 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.984 us/op
                 findLastPrefixUsingScanner1·p0.95:   8.008 us/op
                 findLastPrefixUsingScanner1·p0.99:   11.328 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.216 us/op
                 findLastPrefixUsingScanner1·p0.9999: 34.313 us/op
                 findLastPrefixUsingScanner1·p1.00:   217.856 us/op

Iteration   7: 7.811 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.512 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.728 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.888 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.920 us/op
                 findLastPrefixUsingScanner1·p0.99:   11.280 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.536 us/op
                 findLastPrefixUsingScanner1·p0.9999: 41.920 us/op
                 findLastPrefixUsingScanner1·p1.00:   123.520 us/op

Iteration   8: 7.814 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.504 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.744 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.888 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.912 us/op
                 findLastPrefixUsingScanner1·p0.99:   11.184 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.251 us/op
                 findLastPrefixUsingScanner1·p0.9999: 34.051 us/op
                 findLastPrefixUsingScanner1·p1.00:   106.752 us/op

Iteration   9: 7.850 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.480 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.760 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.888 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.920 us/op
                 findLastPrefixUsingScanner1·p0.99:   11.312 us/op
                 findLastPrefixUsingScanner1·p0.999:  19.840 us/op
                 findLastPrefixUsingScanner1·p0.9999: 49.060 us/op
                 findLastPrefixUsingScanner1·p1.00:   214.784 us/op

Iteration  10: 7.918 ±(99.9%) 0.010 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.552 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.864 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.952 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.976 us/op
                 findLastPrefixUsingScanner1·p0.99:   11.296 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.560 us/op
                 findLastPrefixUsingScanner1·p0.9999: 50.733 us/op
                 findLastPrefixUsingScanner1·p1.00:   230.656 us/op

Iteration  11: 7.407 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.296 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.336 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.344 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.344 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.400 us/op
                 findLastPrefixUsingScanner1·p0.999:  16.554 us/op
                 findLastPrefixUsingScanner1·p0.9999: 46.720 us/op
                 findLastPrefixUsingScanner1·p1.00:   245.248 us/op

Iteration  12: 7.959 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.568 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.920 us/op
                 findLastPrefixUsingScanner1·p0.90:   8.008 us/op
                 findLastPrefixUsingScanner1·p0.95:   8.032 us/op
                 findLastPrefixUsingScanner1·p0.99:   11.408 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.792 us/op
                 findLastPrefixUsingScanner1·p0.9999: 47.846 us/op
                 findLastPrefixUsingScanner1·p1.00:   222.720 us/op

Iteration  13: 7.377 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.288 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.320 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.328 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.328 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.304 us/op
                 findLastPrefixUsingScanner1·p0.999:  16.082 us/op
                 findLastPrefixUsingScanner1·p0.9999: 34.624 us/op
                 findLastPrefixUsingScanner1·p1.00:   113.536 us/op

Iteration  14: 7.463 ±(99.9%) 0.012 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.352 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.384 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.400 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.400 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.496 us/op
                 findLastPrefixUsingScanner1·p0.999:  16.736 us/op
                 findLastPrefixUsingScanner1·p0.9999: 49.020 us/op
                 findLastPrefixUsingScanner1·p1.00:   516.608 us/op

Iteration  15: 7.994 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.656 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.904 us/op
                 findLastPrefixUsingScanner1·p0.90:   8.096 us/op
                 findLastPrefixUsingScanner1·p0.95:   8.120 us/op
                 findLastPrefixUsingScanner1·p0.99:   11.408 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.376 us/op
                 findLastPrefixUsingScanner1·p0.9999: 40.990 us/op
                 findLastPrefixUsingScanner1·p1.00:   141.568 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 4905340
  mean =      7.647 ±(99.9%) 0.002 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 4905013 
    [ 50.000, 100.000) = 196 
    [100.000, 150.000) = 55 
    [150.000, 200.000) = 14 
    [200.000, 250.000) = 38 
    [250.000, 300.000) = 3 
    [300.000, 350.000) = 8 
    [350.000, 400.000) = 5 
    [400.000, 450.000) = 4 
    [450.000, 500.000) = 2 
    [500.000, 550.000) = 2 

  Percentiles, us/op:
      p(0.0000) =      7.288 us/op
     p(50.0000) =      7.440 us/op
     p(90.0000) =      7.936 us/op
     p(95.0000) =      7.992 us/op
     p(99.0000) =     10.656 us/op
     p(99.9000) =     17.152 us/op
     p(99.9900) =     41.566 us/op
     p(99.9990) =    213.504 us/op
     p(99.9999) =    445.470 us/op
    p(100.0000) =    539.648 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 84.78% complete, ETA 01:14:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.235 ±(99.9%) 0.098 us/op
# Warmup Iteration   2: 0.108 ±(99.9%) 0.005 us/op
# Warmup Iteration   3: 0.100 ±(99.9%) 0.001 us/op
# Warmup Iteration   4: 0.103 ±(99.9%) 0.002 us/op
# Warmup Iteration   5: 0.102 ±(99.9%) 0.001 us/op
Iteration   1: 0.101 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.093 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.111 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.268 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.445 us/op
                 findLastPrefixUsingScanner2·p1.00:   29.568 us/op

Iteration   2: 0.107 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.102 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.111 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.114 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.123 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.254 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.342 us/op
                 findLastPrefixUsingScanner2·p1.00:   41.472 us/op

Iteration   3: 0.101 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.093 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.111 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.217 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.460 us/op
                 findLastPrefixUsingScanner2·p1.00:   37.632 us/op

Iteration   4: 0.102 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.093 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.111 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.215 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.168 us/op
                 findLastPrefixUsingScanner2·p1.00:   279.040 us/op

Iteration   5: 0.102 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.093 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.111 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.224 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.991 us/op
                 findLastPrefixUsingScanner2·p1.00:   34.432 us/op

Iteration   6: 0.107 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.102 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.111 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.112 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.262 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.397 us/op
                 findLastPrefixUsingScanner2·p1.00:   49.280 us/op

Iteration   7: 0.102 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.093 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.111 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.225 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.087 us/op
                 findLastPrefixUsingScanner2·p1.00:   33.792 us/op

Iteration   8: 0.102 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.100 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.111 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.219 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.448 us/op
                 findLastPrefixUsingScanner2·p1.00:   37.696 us/op

Iteration   9: 0.100 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.093 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.111 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.206 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.086 us/op
                 findLastPrefixUsingScanner2·p1.00:   32.288 us/op

Iteration  10: 0.100 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.093 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.111 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.196 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.955 us/op
                 findLastPrefixUsingScanner2·p1.00:   58.880 us/op

Iteration  11: 0.101 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.094 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.111 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.212 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.739 us/op
                 findLastPrefixUsingScanner2·p1.00:   21.344 us/op

Iteration  12: 0.101 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.093 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.112 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.199 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.687 us/op
                 findLastPrefixUsingScanner2·p1.00:   23.232 us/op

Iteration  13: 0.103 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.099 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.111 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.226 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.040 us/op
                 findLastPrefixUsingScanner2·p1.00:   60.672 us/op

Iteration  14: 0.108 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.102 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.111 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.111 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.114 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.248 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.072 us/op
                 findLastPrefixUsingScanner2·p1.00:   41.408 us/op

Iteration  15: 0.102 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.093 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.111 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.204 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.951 us/op
                 findLastPrefixUsingScanner2·p1.00:   40.320 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 4213679
  mean =      0.103 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 4213650 
    [ 25.000,  50.000) = 26 
    [ 50.000,  75.000) = 2 
    [ 75.000, 100.000) = 0 
    [100.000, 125.000) = 0 
    [125.000, 150.000) = 0 
    [150.000, 175.000) = 0 
    [175.000, 200.000) = 0 
    [200.000, 225.000) = 0 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.088 us/op
     p(50.0000) =      0.099 us/op
     p(90.0000) =      0.110 us/op
     p(95.0000) =      0.111 us/op
     p(99.0000) =      0.113 us/op
     p(99.9000) =      0.225 us/op
     p(99.9900) =      8.101 us/op
     p(99.9990) =     20.308 us/op
     p(99.9999) =     47.612 us/op
    p(100.0000) =    279.040 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 85.50% complete, ETA 01:10:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.974 ±(99.9%) 0.195 us/op
# Warmup Iteration   2: 0.677 ±(99.9%) 0.011 us/op
# Warmup Iteration   3: 0.710 ±(99.9%) 0.004 us/op
# Warmup Iteration   4: 0.697 ±(99.9%) 0.003 us/op
# Warmup Iteration   5: 0.714 ±(99.9%) 0.003 us/op
Iteration   1: 0.701 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.631 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.680 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.688 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.690 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.696 us/op
                 findLastPrefixUsingScanner2·p0.999:  7.155 us/op
                 findLastPrefixUsingScanner2·p0.9999: 26.038 us/op
                 findLastPrefixUsingScanner2·p1.00:   109.824 us/op

Iteration   2: 0.713 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.661 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.693 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.702 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.703 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.705 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.723 us/op
                 findLastPrefixUsingScanner2·p0.9999: 18.743 us/op
                 findLastPrefixUsingScanner2·p1.00:   293.376 us/op

Iteration   3: 0.738 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.693 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.722 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.729 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.731 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.741 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.425 us/op
                 findLastPrefixUsingScanner2·p0.9999: 15.888 us/op
                 findLastPrefixUsingScanner2·p1.00:   79.744 us/op

Iteration   4: 0.709 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.653 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.695 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.705 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.707 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.715 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.352 us/op
                 findLastPrefixUsingScanner2·p0.9999: 12.720 us/op
                 findLastPrefixUsingScanner2·p1.00:   35.968 us/op

Iteration   5: 0.708 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.664 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.693 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.701 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.703 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.706 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.178 us/op
                 findLastPrefixUsingScanner2·p0.9999: 12.997 us/op
                 findLastPrefixUsingScanner2·p1.00:   78.464 us/op

Iteration   6: 0.753 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.715 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.737 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.742 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.744 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.752 us/op
                 findLastPrefixUsingScanner2·p0.999:  7.084 us/op
                 findLastPrefixUsingScanner2·p0.9999: 16.924 us/op
                 findLastPrefixUsingScanner2·p1.00:   83.072 us/op

Iteration   7: 0.724 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.679 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.705 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.714 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.715 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.721 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.790 us/op
                 findLastPrefixUsingScanner2·p0.9999: 17.304 us/op
                 findLastPrefixUsingScanner2·p1.00:   98.688 us/op

Iteration   8: 0.725 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.678 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.707 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.716 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.717 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.722 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.793 us/op
                 findLastPrefixUsingScanner2·p0.9999: 16.721 us/op
                 findLastPrefixUsingScanner2·p1.00:   79.360 us/op

Iteration   9: 0.712 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.670 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.698 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.703 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.704 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.711 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.153 us/op
                 findLastPrefixUsingScanner2·p0.9999: 14.025 us/op
                 findLastPrefixUsingScanner2·p1.00:   173.312 us/op

Iteration  10: 0.712 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.653 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.694 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.702 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.703 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.710 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.800 us/op
                 findLastPrefixUsingScanner2·p0.9999: 20.314 us/op
                 findLastPrefixUsingScanner2·p1.00:   64.896 us/op

Iteration  11: 0.724 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.678 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.707 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.715 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.716 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.721 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.389 us/op
                 findLastPrefixUsingScanner2·p0.9999: 15.771 us/op
                 findLastPrefixUsingScanner2·p1.00:   110.464 us/op

Iteration  12: 0.710 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.663 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.694 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.702 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.703 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.706 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.235 us/op
                 findLastPrefixUsingScanner2·p0.9999: 14.382 us/op
                 findLastPrefixUsingScanner2·p1.00:   40.960 us/op

Iteration  13: 0.724 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.679 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.707 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.715 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.718 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.731 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.294 us/op
                 findLastPrefixUsingScanner2·p0.9999: 15.270 us/op
                 findLastPrefixUsingScanner2·p1.00:   75.520 us/op

Iteration  14: 0.789 ±(99.9%) 0.044 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.718 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.760 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.769 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.775 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.779 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.461 us/op
                 findLastPrefixUsingScanner2·p0.9999: 13.906 us/op
                 findLastPrefixUsingScanner2·p1.00:   2834.432 us/op

Iteration  15: 0.726 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.671 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.714 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.720 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.720 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.723 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.678 us/op
                 findLastPrefixUsingScanner2·p0.9999: 13.541 us/op
                 findLastPrefixUsingScanner2·p1.00:   59.328 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 3441784
  mean =      0.724 ±(99.9%) 0.003 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 3441782 
    [ 250.000,  500.000) = 1 
    [ 500.000,  750.000) = 0 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.631 us/op
     p(50.0000) =      0.703 us/op
     p(90.0000) =      0.737 us/op
     p(95.0000) =      0.753 us/op
     p(99.0000) =      0.771 us/op
     p(99.9000) =      6.360 us/op
     p(99.9900) =     16.133 us/op
     p(99.9990) =     41.312 us/op
     p(99.9999) =    145.547 us/op
    p(100.0000) =   2834.432 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 86.23% complete, ETA 01:07:23
# Fork: 1 of 1
# Warmup Iteration   1: 6.718 ±(99.9%) 0.259 us/op
# Warmup Iteration   2: 6.318 ±(99.9%) 0.013 us/op
# Warmup Iteration   3: 6.709 ±(99.9%) 0.008 us/op
# Warmup Iteration   4: 6.669 ±(99.9%) 0.020 us/op
# Warmup Iteration   5: 6.683 ±(99.9%) 0.008 us/op
Iteration   1: 6.860 ±(99.9%) 0.011 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.704 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.768 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.776 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.784 us/op
                 findLastPrefixUsingScanner2·p0.99:   10.080 us/op
                 findLastPrefixUsingScanner2·p0.999:  25.346 us/op
                 findLastPrefixUsingScanner2·p0.9999: 50.590 us/op
                 findLastPrefixUsingScanner2·p1.00:   313.344 us/op

Iteration   2: 6.698 ±(99.9%) 0.010 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.560 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.608 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.616 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.624 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.920 us/op
                 findLastPrefixUsingScanner2·p0.999:  22.995 us/op
                 findLastPrefixUsingScanner2·p0.9999: 49.970 us/op
                 findLastPrefixUsingScanner2·p1.00:   178.944 us/op

Iteration   3: 6.702 ±(99.9%) 0.051 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.544 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.600 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.616 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.616 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.776 us/op
                 findLastPrefixUsingScanner2·p0.999:  22.929 us/op
                 findLastPrefixUsingScanner2·p0.9999: 48.166 us/op
                 findLastPrefixUsingScanner2·p1.00:   2846.720 us/op

Iteration   4: 6.733 ±(99.9%) 0.052 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.576 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.632 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.648 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.656 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.664 us/op
                 findLastPrefixUsingScanner2·p0.999:  23.889 us/op
                 findLastPrefixUsingScanner2·p0.9999: 51.207 us/op
                 findLastPrefixUsingScanner2·p1.00:   2883.584 us/op

Iteration   5: 6.698 ±(99.9%) 0.010 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.560 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.624 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.632 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.640 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.728 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.584 us/op
                 findLastPrefixUsingScanner2·p0.9999: 54.662 us/op
                 findLastPrefixUsingScanner2·p1.00:   332.288 us/op

Iteration   6: 6.748 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.616 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.680 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.688 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.696 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.840 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.536 us/op
                 findLastPrefixUsingScanner2·p0.9999: 40.447 us/op
                 findLastPrefixUsingScanner2·p1.00:   139.520 us/op

Iteration   7: 6.724 ±(99.9%) 0.055 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.496 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.632 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.648 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.656 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.808 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.630 us/op
                 findLastPrefixUsingScanner2·p0.9999: 56.737 us/op
                 findLastPrefixUsingScanner2·p1.00:   3084.288 us/op

Iteration   8: 6.878 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.768 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.808 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.816 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.824 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.984 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.755 us/op
                 findLastPrefixUsingScanner2·p0.9999: 42.505 us/op
                 findLastPrefixUsingScanner2·p1.00:   114.304 us/op

Iteration   9: 6.802 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.672 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.728 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.744 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.752 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.872 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.394 us/op
                 findLastPrefixUsingScanner2·p0.9999: 48.378 us/op
                 findLastPrefixUsingScanner2·p1.00:   168.704 us/op

Iteration  10: 6.772 ±(99.9%) 0.010 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.616 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.696 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.704 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.712 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.872 us/op
                 findLastPrefixUsingScanner2·p0.999:  19.035 us/op
                 findLastPrefixUsingScanner2·p0.9999: 56.703 us/op
                 findLastPrefixUsingScanner2·p1.00:   154.624 us/op

Iteration  11: 6.672 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.552 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.608 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.616 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.632 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.680 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.637 us/op
                 findLastPrefixUsingScanner2·p0.9999: 40.800 us/op
                 findLastPrefixUsingScanner2·p1.00:   111.616 us/op

Iteration  12: 6.628 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.456 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.560 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.568 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.568 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.344 us/op
                 findLastPrefixUsingScanner2·p0.999:  19.131 us/op
                 findLastPrefixUsingScanner2·p0.9999: 43.159 us/op
                 findLastPrefixUsingScanner2·p1.00:   280.576 us/op

Iteration  13: 6.931 ±(99.9%) 0.013 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.792 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.856 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.872 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.880 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.744 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.726 us/op
                 findLastPrefixUsingScanner2·p0.9999: 52.357 us/op
                 findLastPrefixUsingScanner2·p1.00:   428.032 us/op

Iteration  14: 6.731 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.624 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.664 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.680 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.696 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.067 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.820 us/op
                 findLastPrefixUsingScanner2·p0.9999: 38.992 us/op
                 findLastPrefixUsingScanner2·p1.00:   165.376 us/op

Iteration  15: 6.758 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.632 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.688 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.704 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.712 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.680 us/op
                 findLastPrefixUsingScanner2·p0.999:  19.715 us/op
                 findLastPrefixUsingScanner2·p0.9999: 37.918 us/op
                 findLastPrefixUsingScanner2·p1.00:   110.848 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 2785567
  mean =      6.755 ±(99.9%) 0.006 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 2785559 
    [ 250.000,  500.000) = 5 
    [ 500.000,  750.000) = 0 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 
    [2750.000, 3000.000) = 2 
    [3000.000, 3250.000) = 1 
    [3250.000, 3500.000) = 0 
    [3500.000, 3750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      6.456 us/op
     p(50.0000) =      6.664 us/op
     p(90.0000) =      6.808 us/op
     p(95.0000) =      6.856 us/op
     p(99.0000) =      9.776 us/op
     p(99.9000) =     19.488 us/op
     p(99.9900) =     47.893 us/op
     p(99.9990) =    122.317 us/op
     p(99.9999) =   2854.625 us/op
    p(100.0000) =   3084.288 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 86.95% complete, ETA 01:03:50
# Fork: 1 of 1
# Warmup Iteration   1: 15250.582 ±(99.9%) 505.134 us/op
# Warmup Iteration   2: 14788.523 ±(99.9%) 13.359 us/op
# Warmup Iteration   3: 14787.699 ±(99.9%) 15.144 us/op
# Warmup Iteration   4: 14793.928 ±(99.9%) 5.493 us/op
# Warmup Iteration   5: 14778.029 ±(99.9%) 4.655 us/op
Iteration   1: 14781.321 ±(99.9%) 4.932 us/op
                 runAlgorithm·p0.00:   14712.832 us/op
                 runAlgorithm·p0.50:   14778.368 us/op
                 runAlgorithm·p0.90:   14827.520 us/op
                 runAlgorithm·p0.95:   14843.904 us/op
                 runAlgorithm·p0.99:   14945.812 us/op
                 runAlgorithm·p0.999:  15007.744 us/op
                 runAlgorithm·p0.9999: 15007.744 us/op
                 runAlgorithm·p1.00:   15007.744 us/op

Iteration   2: 14782.216 ±(99.9%) 5.782 us/op
                 runAlgorithm·p0.00:   14712.832 us/op
                 runAlgorithm·p0.50:   14778.368 us/op
                 runAlgorithm·p0.90:   14827.520 us/op
                 runAlgorithm·p0.95:   14845.542 us/op
                 runAlgorithm·p0.99:   14994.964 us/op
                 runAlgorithm·p0.999:  15073.280 us/op
                 runAlgorithm·p0.9999: 15073.280 us/op
                 runAlgorithm·p1.00:   15073.280 us/op

Iteration   3: 14784.742 ±(99.9%) 4.933 us/op
                 runAlgorithm·p0.00:   14696.448 us/op
                 runAlgorithm·p0.50:   14778.368 us/op
                 runAlgorithm·p0.90:   14827.520 us/op
                 runAlgorithm·p0.95:   14843.904 us/op
                 runAlgorithm·p0.99:   14945.976 us/op
                 runAlgorithm·p0.999:  15040.512 us/op
                 runAlgorithm·p0.9999: 15040.512 us/op
                 runAlgorithm·p1.00:   15040.512 us/op

Iteration   4: 14784.064 ±(99.9%) 5.593 us/op
                 runAlgorithm·p0.00:   14712.832 us/op
                 runAlgorithm·p0.50:   14778.368 us/op
                 runAlgorithm·p0.90:   14832.435 us/op
                 runAlgorithm·p0.95:   14860.288 us/op
                 runAlgorithm·p0.99:   14974.976 us/op
                 runAlgorithm·p0.999:  15024.128 us/op
                 runAlgorithm·p0.9999: 15024.128 us/op
                 runAlgorithm·p1.00:   15024.128 us/op

Iteration   5: 14785.047 ±(99.9%) 14.865 us/op
                 runAlgorithm·p0.00:   14712.832 us/op
                 runAlgorithm·p0.50:   14778.368 us/op
                 runAlgorithm·p0.90:   14827.520 us/op
                 runAlgorithm·p0.95:   14860.288 us/op
                 runAlgorithm·p0.99:   14978.580 us/op
                 runAlgorithm·p0.999:  17596.416 us/op
                 runAlgorithm·p0.9999: 17596.416 us/op
                 runAlgorithm·p1.00:   17596.416 us/op

Iteration   6: 14778.562 ±(99.9%) 5.163 us/op
                 runAlgorithm·p0.00:   14712.832 us/op
                 runAlgorithm·p0.50:   14761.984 us/op
                 runAlgorithm·p0.90:   14827.520 us/op
                 runAlgorithm·p0.95:   14843.904 us/op
                 runAlgorithm·p0.99:   14942.208 us/op
                 runAlgorithm·p0.999:  15171.584 us/op
                 runAlgorithm·p0.9999: 15171.584 us/op
                 runAlgorithm·p1.00:   15171.584 us/op

Iteration   7: 14799.430 ±(99.9%) 11.071 us/op
                 runAlgorithm·p0.00:   14729.216 us/op
                 runAlgorithm·p0.50:   14778.368 us/op
                 runAlgorithm·p0.90:   14860.288 us/op
                 runAlgorithm·p0.95:   14925.824 us/op
                 runAlgorithm·p0.99:   15142.584 us/op
                 runAlgorithm·p0.999:  16171.008 us/op
                 runAlgorithm·p0.9999: 16171.008 us/op
                 runAlgorithm·p1.00:   16171.008 us/op

Iteration   8: 14783.450 ±(99.9%) 5.082 us/op
                 runAlgorithm·p0.00:   14712.832 us/op
                 runAlgorithm·p0.50:   14778.368 us/op
                 runAlgorithm·p0.90:   14827.520 us/op
                 runAlgorithm·p0.95:   14843.904 us/op
                 runAlgorithm·p0.99:   14945.812 us/op
                 runAlgorithm·p0.999:  15073.280 us/op
                 runAlgorithm·p0.9999: 15073.280 us/op
                 runAlgorithm·p1.00:   15073.280 us/op

Iteration   9: 14781.321 ±(99.9%) 6.149 us/op
                 runAlgorithm·p0.00:   14712.832 us/op
                 runAlgorithm·p0.50:   14778.368 us/op
                 runAlgorithm·p0.90:   14827.520 us/op
                 runAlgorithm·p0.95:   14843.904 us/op
                 runAlgorithm·p0.99:   14958.592 us/op
                 runAlgorithm·p0.999:  15417.344 us/op
                 runAlgorithm·p0.9999: 15417.344 us/op
                 runAlgorithm·p1.00:   15417.344 us/op

Iteration  10: 14802.387 ±(99.9%) 6.621 us/op
                 runAlgorithm·p0.00:   14712.832 us/op
                 runAlgorithm·p0.50:   14794.752 us/op
                 runAlgorithm·p0.90:   14860.288 us/op
                 runAlgorithm·p0.95:   14876.672 us/op
                 runAlgorithm·p0.99:   14991.360 us/op
                 runAlgorithm·p0.999:  15319.040 us/op
                 runAlgorithm·p0.9999: 15319.040 us/op
                 runAlgorithm·p1.00:   15319.040 us/op

Iteration  11: 14786.439 ±(99.9%) 5.488 us/op
                 runAlgorithm·p0.00:   14696.448 us/op
                 runAlgorithm·p0.50:   14778.368 us/op
                 runAlgorithm·p0.90:   14827.520 us/op
                 runAlgorithm·p0.95:   14860.288 us/op
                 runAlgorithm·p0.99:   14974.976 us/op
                 runAlgorithm·p0.999:  15040.512 us/op
                 runAlgorithm·p0.9999: 15040.512 us/op
                 runAlgorithm·p1.00:   15040.512 us/op

Iteration  12: 14787.772 ±(99.9%) 5.254 us/op
                 runAlgorithm·p0.00:   14729.216 us/op
                 runAlgorithm·p0.50:   14778.368 us/op
                 runAlgorithm·p0.90:   14827.520 us/op
                 runAlgorithm·p0.95:   14860.288 us/op
                 runAlgorithm·p0.99:   14962.360 us/op
                 runAlgorithm·p0.999:  15073.280 us/op
                 runAlgorithm·p0.9999: 15073.280 us/op
                 runAlgorithm·p1.00:   15073.280 us/op

Iteration  13: 14797.927 ±(99.9%) 11.058 us/op
                 runAlgorithm·p0.00:   14712.832 us/op
                 runAlgorithm·p0.50:   14778.368 us/op
                 runAlgorithm·p0.90:   14832.435 us/op
                 runAlgorithm·p0.95:   14925.824 us/op
                 runAlgorithm·p0.99:   15257.272 us/op
                 runAlgorithm·p0.999:  15335.424 us/op
                 runAlgorithm·p0.9999: 15335.424 us/op
                 runAlgorithm·p1.00:   15335.424 us/op

Iteration  14: 14786.536 ±(99.9%) 5.879 us/op
                 runAlgorithm·p0.00:   14712.832 us/op
                 runAlgorithm·p0.50:   14778.368 us/op
                 runAlgorithm·p0.90:   14827.520 us/op
                 runAlgorithm·p0.95:   14860.288 us/op
                 runAlgorithm·p0.99:   15027.896 us/op
                 runAlgorithm·p0.999:  15106.048 us/op
                 runAlgorithm·p0.9999: 15106.048 us/op
                 runAlgorithm·p1.00:   15106.048 us/op

Iteration  15: 14793.080 ±(99.9%) 5.962 us/op
                 runAlgorithm·p0.00:   14712.832 us/op
                 runAlgorithm·p0.50:   14778.368 us/op
                 runAlgorithm·p0.90:   14843.904 us/op
                 runAlgorithm·p0.95:   14893.056 us/op
                 runAlgorithm·p0.99:   14966.129 us/op
                 runAlgorithm·p0.999:  15073.280 us/op
                 runAlgorithm·p0.9999: 15073.280 us/op
                 runAlgorithm·p1.00:   15073.280 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  N = 10146
  mean =  14787.616 ±(99.9%) 1.938 us/op

  Histogram, us/op:
    [14000.000, 14250.000) = 0 
    [14250.000, 14500.000) = 0 
    [14500.000, 14750.000) = 1862 
    [14750.000, 15000.000) = 8193 
    [15000.000, 15250.000) = 77 
    [15250.000, 15500.000) = 12 
    [15500.000, 15750.000) = 0 
    [15750.000, 16000.000) = 0 
    [16000.000, 16250.000) = 1 
    [16250.000, 16500.000) = 0 
    [16500.000, 16750.000) = 0 
    [16750.000, 17000.000) = 0 
    [17000.000, 17250.000) = 0 
    [17250.000, 17500.000) = 0 
    [17500.000, 17750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  14696.448 us/op
     p(50.0000) =  14778.368 us/op
     p(90.0000) =  14827.520 us/op
     p(95.0000) =  14860.288 us/op
     p(99.0000) =  14991.360 us/op
     p(99.9000) =  15269.888 us/op
     p(99.9900) =  17575.463 us/op
     p(99.9990) =  17596.416 us/op
     p(99.9999) =  17596.416 us/op
    p(100.0000) =  17596.416 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 87.68% complete, ETA 01:00:18
# Fork: 1 of 1
# Warmup Iteration   1: 411.758 ±(99.9%) 11.073 us/op
# Warmup Iteration   2: 418.964 ±(99.9%) 3.236 us/op
# Warmup Iteration   3: 420.080 ±(99.9%) 5.272 us/op
# Warmup Iteration   4: 417.468 ±(99.9%) 4.541 us/op
# Warmup Iteration   5: 416.803 ±(99.9%) 4.130 us/op
Iteration   1: 420.331 ±(99.9%) 4.701 us/op
                 runAlgorithm·p0.00:   397.312 us/op
                 runAlgorithm·p0.50:   411.648 us/op
                 runAlgorithm·p0.90:   425.984 us/op
                 runAlgorithm·p0.95:   432.128 us/op
                 runAlgorithm·p0.99:   456.192 us/op
                 runAlgorithm·p0.999:  3135.967 us/op
                 runAlgorithm·p0.9999: 11661.523 us/op
                 runAlgorithm·p1.00:   15876.096 us/op

Iteration   2: 416.134 ±(99.9%) 3.368 us/op
                 runAlgorithm·p0.00:   397.824 us/op
                 runAlgorithm·p0.50:   409.088 us/op
                 runAlgorithm·p0.90:   423.424 us/op
                 runAlgorithm·p0.95:   429.568 us/op
                 runAlgorithm·p0.99:   451.584 us/op
                 runAlgorithm·p0.999:  3005.948 us/op
                 runAlgorithm·p0.9999: 8767.323 us/op
                 runAlgorithm·p1.00:   9879.552 us/op

Iteration   3: 419.094 ±(99.9%) 3.617 us/op
                 runAlgorithm·p0.00:   400.384 us/op
                 runAlgorithm·p0.50:   412.160 us/op
                 runAlgorithm·p0.90:   425.472 us/op
                 runAlgorithm·p0.95:   431.616 us/op
                 runAlgorithm·p0.99:   453.120 us/op
                 runAlgorithm·p0.999:  3099.075 us/op
                 runAlgorithm·p0.9999: 10457.101 us/op
                 runAlgorithm·p1.00:   11419.648 us/op

Iteration   4: 416.378 ±(99.9%) 3.944 us/op
                 runAlgorithm·p0.00:   396.800 us/op
                 runAlgorithm·p0.50:   408.576 us/op
                 runAlgorithm·p0.90:   423.424 us/op
                 runAlgorithm·p0.95:   430.080 us/op
                 runAlgorithm·p0.99:   453.120 us/op
                 runAlgorithm·p0.999:  3068.690 us/op
                 runAlgorithm·p0.9999: 10401.183 us/op
                 runAlgorithm·p1.00:   10878.976 us/op

Iteration   5: 418.114 ±(99.9%) 4.646 us/op
                 runAlgorithm·p0.00:   398.336 us/op
                 runAlgorithm·p0.50:   409.600 us/op
                 runAlgorithm·p0.90:   423.936 us/op
                 runAlgorithm·p0.95:   430.592 us/op
                 runAlgorithm·p0.99:   453.120 us/op
                 runAlgorithm·p0.999:  3274.793 us/op
                 runAlgorithm·p0.9999: 10702.363 us/op
                 runAlgorithm·p1.00:   19300.352 us/op

Iteration   6: 418.878 ±(99.9%) 3.808 us/op
                 runAlgorithm·p0.00:   398.336 us/op
                 runAlgorithm·p0.50:   410.624 us/op
                 runAlgorithm·p0.90:   425.984 us/op
                 runAlgorithm·p0.95:   433.152 us/op
                 runAlgorithm·p0.99:   462.336 us/op
                 runAlgorithm·p0.999:  3150.529 us/op
                 runAlgorithm·p0.9999: 9571.815 us/op
                 runAlgorithm·p1.00:   10469.376 us/op

Iteration   7: 419.929 ±(99.9%) 3.866 us/op
                 runAlgorithm·p0.00:   400.896 us/op
                 runAlgorithm·p0.50:   412.160 us/op
                 runAlgorithm·p0.90:   426.496 us/op
                 runAlgorithm·p0.95:   433.152 us/op
                 runAlgorithm·p0.99:   459.817 us/op
                 runAlgorithm·p0.999:  3087.696 us/op
                 runAlgorithm·p0.9999: 9223.799 us/op
                 runAlgorithm·p1.00:   14073.856 us/op

Iteration   8: 418.414 ±(99.9%) 2.993 us/op
                 runAlgorithm·p0.00:   399.872 us/op
                 runAlgorithm·p0.50:   411.136 us/op
                 runAlgorithm·p0.90:   426.496 us/op
                 runAlgorithm·p0.95:   433.152 us/op
                 runAlgorithm·p0.99:   458.240 us/op
                 runAlgorithm·p0.999:  3058.418 us/op
                 runAlgorithm·p0.9999: 6691.989 us/op
                 runAlgorithm·p1.00:   7110.656 us/op

Iteration   9: 419.103 ±(99.9%) 3.765 us/op
                 runAlgorithm·p0.00:   400.384 us/op
                 runAlgorithm·p0.50:   411.648 us/op
                 runAlgorithm·p0.90:   425.472 us/op
                 runAlgorithm·p0.95:   431.616 us/op
                 runAlgorithm·p0.99:   455.168 us/op
                 runAlgorithm·p0.999:  3008.442 us/op
                 runAlgorithm·p0.9999: 10039.183 us/op
                 runAlgorithm·p1.00:   12713.984 us/op

Iteration  10: 419.160 ±(99.9%) 4.352 us/op
                 runAlgorithm·p0.00:   398.336 us/op
                 runAlgorithm·p0.50:   411.136 us/op
                 runAlgorithm·p0.90:   424.960 us/op
                 runAlgorithm·p0.95:   431.104 us/op
                 runAlgorithm·p0.99:   452.608 us/op
                 runAlgorithm·p0.999:  3031.384 us/op
                 runAlgorithm·p0.9999: 10977.496 us/op
                 runAlgorithm·p1.00:   13991.936 us/op

Iteration  11: 419.266 ±(99.9%) 4.401 us/op
                 runAlgorithm·p0.00:   401.408 us/op
                 runAlgorithm·p0.50:   411.648 us/op
                 runAlgorithm·p0.90:   425.984 us/op
                 runAlgorithm·p0.95:   432.128 us/op
                 runAlgorithm·p0.99:   453.120 us/op
                 runAlgorithm·p0.999:  3208.561 us/op
                 runAlgorithm·p0.9999: 14299.890 us/op
                 runAlgorithm·p1.00:   18808.832 us/op

Iteration  12: 418.647 ±(99.9%) 3.566 us/op
                 runAlgorithm·p0.00:   398.336 us/op
                 runAlgorithm·p0.50:   411.648 us/op
                 runAlgorithm·p0.90:   425.984 us/op
                 runAlgorithm·p0.95:   431.616 us/op
                 runAlgorithm·p0.99:   452.608 us/op
                 runAlgorithm·p0.999:  3126.354 us/op
                 runAlgorithm·p0.9999: 9190.220 us/op
                 runAlgorithm·p1.00:   10436.608 us/op

Iteration  13: 418.768 ±(99.9%) 4.176 us/op
                 runAlgorithm·p0.00:   398.848 us/op
                 runAlgorithm·p0.50:   410.624 us/op
                 runAlgorithm·p0.90:   425.472 us/op
                 runAlgorithm·p0.95:   432.128 us/op
                 runAlgorithm·p0.99:   458.240 us/op
                 runAlgorithm·p0.999:  3002.319 us/op
                 runAlgorithm·p0.9999: 11166.810 us/op
                 runAlgorithm·p1.00:   13729.792 us/op

Iteration  14: 417.339 ±(99.9%) 3.662 us/op
                 runAlgorithm·p0.00:   398.336 us/op
                 runAlgorithm·p0.50:   409.600 us/op
                 runAlgorithm·p0.90:   424.960 us/op
                 runAlgorithm·p0.95:   431.104 us/op
                 runAlgorithm·p0.99:   452.608 us/op
                 runAlgorithm·p0.999:  3027.681 us/op
                 runAlgorithm·p0.9999: 9857.696 us/op
                 runAlgorithm·p1.00:   10633.216 us/op

Iteration  15: 420.262 ±(99.9%) 5.273 us/op
                 runAlgorithm·p0.00:   398.848 us/op
                 runAlgorithm·p0.50:   411.136 us/op
                 runAlgorithm·p0.90:   423.936 us/op
                 runAlgorithm·p0.95:   429.568 us/op
                 runAlgorithm·p0.99:   450.560 us/op
                 runAlgorithm·p0.999:  3367.641 us/op
                 runAlgorithm·p0.9999: 11756.677 us/op
                 runAlgorithm·p1.00:   17465.344 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 357956
  mean =    418.651 ±(99.9%) 1.045 us/op

  Histogram, us/op:
    [    0.000,  1250.000) = 357548 
    [ 1250.000,  2500.000) = 3 
    [ 2500.000,  3750.000) = 181 
    [ 3750.000,  5000.000) = 71 
    [ 5000.000,  6250.000) = 47 
    [ 6250.000,  7500.000) = 31 
    [ 7500.000,  8750.000) = 23 
    [ 8750.000, 10000.000) = 15 
    [10000.000, 11250.000) = 24 
    [11250.000, 12500.000) = 4 
    [12500.000, 13750.000) = 2 
    [13750.000, 15000.000) = 2 
    [15000.000, 16250.000) = 1 
    [16250.000, 17500.000) = 1 
    [17500.000, 18750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    396.800 us/op
     p(50.0000) =    410.624 us/op
     p(90.0000) =    425.472 us/op
     p(95.0000) =    431.616 us/op
     p(99.0000) =    455.168 us/op
     p(99.9000) =   3072.176 us/op
     p(99.9900) =  10295.847 us/op
     p(99.9990) =  17685.770 us/op
     p(99.9999) =  19300.352 us/op
    p(100.0000) =  19300.352 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 88.40% complete, ETA 00:56:45
# Fork: 1 of 1
# Warmup Iteration   1: 44135.753 ±(99.9%) 5877.594 us/op
# Warmup Iteration   2: 60966.862 ±(99.9%) 757.873 us/op
# Warmup Iteration   3: 60745.914 ±(99.9%) 685.903 us/op
# Warmup Iteration   4: 60839.253 ±(99.9%) 786.910 us/op
# Warmup Iteration   5: 60587.833 ±(99.9%) 554.158 us/op
Iteration   1: 60595.777 ±(99.9%) 532.486 us/op
                 runAlgorithm·p0.00:   59572.224 us/op
                 runAlgorithm·p0.50:   59834.368 us/op
                 runAlgorithm·p0.90:   63727.206 us/op
                 runAlgorithm·p0.95:   64716.800 us/op
                 runAlgorithm·p0.99:   71054.131 us/op
                 runAlgorithm·p0.999:  72351.744 us/op
                 runAlgorithm·p0.9999: 72351.744 us/op
                 runAlgorithm·p1.00:   72351.744 us/op

Iteration   2: 60730.027 ±(99.9%) 726.609 us/op
                 runAlgorithm·p0.00:   59506.688 us/op
                 runAlgorithm·p0.50:   59768.832 us/op
                 runAlgorithm·p0.90:   63569.920 us/op
                 runAlgorithm·p0.95:   67043.328 us/op
                 runAlgorithm·p0.99:   75481.743 us/op
                 runAlgorithm·p0.999:  78249.984 us/op
                 runAlgorithm·p0.9999: 78249.984 us/op
                 runAlgorithm·p1.00:   78249.984 us/op

Iteration   3: 60778.881 ±(99.9%) 598.537 us/op
                 runAlgorithm·p0.00:   59506.688 us/op
                 runAlgorithm·p0.50:   59965.440 us/op
                 runAlgorithm·p0.90:   63884.493 us/op
                 runAlgorithm·p0.95:   65332.838 us/op
                 runAlgorithm·p0.99:   71371.325 us/op
                 runAlgorithm·p0.999:  73793.536 us/op
                 runAlgorithm·p0.9999: 73793.536 us/op
                 runAlgorithm·p1.00:   73793.536 us/op

Iteration   4: 60708.181 ±(99.9%) 697.713 us/op
                 runAlgorithm·p0.00:   59506.688 us/op
                 runAlgorithm·p0.50:   59768.832 us/op
                 runAlgorithm·p0.90:   63465.062 us/op
                 runAlgorithm·p0.95:   66387.968 us/op
                 runAlgorithm·p0.99:   76176.425 us/op
                 runAlgorithm·p0.999:  78512.128 us/op
                 runAlgorithm·p0.9999: 78512.128 us/op
                 runAlgorithm·p1.00:   78512.128 us/op

Iteration   5: 60695.471 ±(99.9%) 614.489 us/op
                 runAlgorithm·p0.00:   59506.688 us/op
                 runAlgorithm·p0.50:   59834.368 us/op
                 runAlgorithm·p0.90:   63438.848 us/op
                 runAlgorithm·p0.95:   64801.997 us/op
                 runAlgorithm·p0.99:   71706.870 us/op
                 runAlgorithm·p0.999:  72744.960 us/op
                 runAlgorithm·p0.9999: 72744.960 us/op
                 runAlgorithm·p1.00:   72744.960 us/op

Iteration   6: 60616.431 ±(99.9%) 527.759 us/op
                 runAlgorithm·p0.00:   59572.224 us/op
                 runAlgorithm·p0.50:   59899.904 us/op
                 runAlgorithm·p0.90:   63465.062 us/op
                 runAlgorithm·p0.95:   64120.422 us/op
                 runAlgorithm·p0.99:   70566.543 us/op
                 runAlgorithm·p0.999:  71172.096 us/op
                 runAlgorithm·p0.9999: 71172.096 us/op
                 runAlgorithm·p1.00:   71172.096 us/op

Iteration   7: 60718.905 ±(99.9%) 611.077 us/op
                 runAlgorithm·p0.00:   59506.688 us/op
                 runAlgorithm·p0.50:   59834.368 us/op
                 runAlgorithm·p0.90:   63465.062 us/op
                 runAlgorithm·p0.95:   64801.997 us/op
                 runAlgorithm·p0.99:   72616.509 us/op
                 runAlgorithm·p0.999:  72876.032 us/op
                 runAlgorithm·p0.9999: 72876.032 us/op
                 runAlgorithm·p1.00:   72876.032 us/op

Iteration   8: 60900.817 ±(99.9%) 692.396 us/op
                 runAlgorithm·p0.00:   59637.760 us/op
                 runAlgorithm·p0.50:   59899.904 us/op
                 runAlgorithm·p0.90:   63897.600 us/op
                 runAlgorithm·p0.95:   67901.850 us/op
                 runAlgorithm·p0.99:   73397.699 us/op
                 runAlgorithm·p0.999:  77463.552 us/op
                 runAlgorithm·p0.9999: 77463.552 us/op
                 runAlgorithm·p1.00:   77463.552 us/op

Iteration   9: 60780.867 ±(99.9%) 613.338 us/op
                 runAlgorithm·p0.00:   59572.224 us/op
                 runAlgorithm·p0.50:   59899.904 us/op
                 runAlgorithm·p0.90:   63596.134 us/op
                 runAlgorithm·p0.95:   64533.299 us/op
                 runAlgorithm·p0.99:   73164.390 us/op
                 runAlgorithm·p0.999:  75759.616 us/op
                 runAlgorithm·p0.9999: 75759.616 us/op
                 runAlgorithm·p1.00:   75759.616 us/op

Iteration  10: 60819.791 ±(99.9%) 654.189 us/op
                 runAlgorithm·p0.00:   59572.224 us/op
                 runAlgorithm·p0.50:   59899.904 us/op
                 runAlgorithm·p0.90:   63714.099 us/op
                 runAlgorithm·p0.95:   68124.672 us/op
                 runAlgorithm·p0.99:   71392.297 us/op
                 runAlgorithm·p0.999:  71565.312 us/op
                 runAlgorithm·p0.9999: 71565.312 us/op
                 runAlgorithm·p1.00:   71565.312 us/op

Iteration  11: 60629.538 ±(99.9%) 595.620 us/op
                 runAlgorithm·p0.00:   59375.616 us/op
                 runAlgorithm·p0.50:   59768.832 us/op
                 runAlgorithm·p0.90:   63609.242 us/op
                 runAlgorithm·p0.95:   65221.427 us/op
                 runAlgorithm·p0.99:   70694.994 us/op
                 runAlgorithm·p0.999:  71041.024 us/op
                 runAlgorithm·p0.9999: 71041.024 us/op
                 runAlgorithm·p1.00:   71041.024 us/op

Iteration  12: 60531.181 ±(99.9%) 519.284 us/op
                 runAlgorithm·p0.00:   59441.152 us/op
                 runAlgorithm·p0.50:   59768.832 us/op
                 runAlgorithm·p0.90:   63478.170 us/op
                 runAlgorithm·p0.95:   65044.480 us/op
                 runAlgorithm·p0.99:   69156.209 us/op
                 runAlgorithm·p0.999:  70385.664 us/op
                 runAlgorithm·p0.9999: 70385.664 us/op
                 runAlgorithm·p1.00:   70385.664 us/op

Iteration  13: 60812.642 ±(99.9%) 668.479 us/op
                 runAlgorithm·p0.00:   59637.760 us/op
                 runAlgorithm·p0.50:   59965.440 us/op
                 runAlgorithm·p0.90:   63700.992 us/op
                 runAlgorithm·p0.95:   64952.730 us/op
                 runAlgorithm·p0.99:   74645.504 us/op
                 runAlgorithm·p0.999:  81133.568 us/op
                 runAlgorithm·p0.9999: 81133.568 us/op
                 runAlgorithm·p1.00:   81133.568 us/op

Iteration  14: 60860.304 ±(99.9%) 586.955 us/op
                 runAlgorithm·p0.00:   59572.224 us/op
                 runAlgorithm·p0.50:   59965.440 us/op
                 runAlgorithm·p0.90:   63871.386 us/op
                 runAlgorithm·p0.95:   65536.000 us/op
                 runAlgorithm·p0.99:   70755.287 us/op
                 runAlgorithm·p0.999:  72744.960 us/op
                 runAlgorithm·p0.9999: 72744.960 us/op
                 runAlgorithm·p1.00:   72744.960 us/op

Iteration  15: 60793.577 ±(99.9%) 647.175 us/op
                 runAlgorithm·p0.00:   59572.224 us/op
                 runAlgorithm·p0.50:   59899.904 us/op
                 runAlgorithm·p0.90:   64120.422 us/op
                 runAlgorithm·p0.95:   65319.731 us/op
                 runAlgorithm·p0.99:   73169.633 us/op
                 runAlgorithm·p0.999:  76283.904 us/op
                 runAlgorithm·p0.9999: 76283.904 us/op
                 runAlgorithm·p1.00:   76283.904 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 2476
  mean =  60731.412 ±(99.9%) 157.588 us/op

  Histogram, us/op:
    [50000.000, 52500.000) = 0 
    [52500.000, 55000.000) = 0 
    [55000.000, 57500.000) = 0 
    [57500.000, 60000.000) = 1685 
    [60000.000, 62500.000) = 414 
    [62500.000, 65000.000) = 252 
    [65000.000, 67500.000) = 38 
    [67500.000, 70000.000) = 43 
    [70000.000, 72500.000) = 32 
    [72500.000, 75000.000) = 6 
    [75000.000, 77500.000) = 3 
    [77500.000, 80000.000) = 2 
    [80000.000, 82500.000) = 1 
    [82500.000, 85000.000) = 0 
    [85000.000, 87500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  59375.616 us/op
     p(50.0000) =  59899.904 us/op
     p(90.0000) =  63569.920 us/op
     p(95.0000) =  65011.712 us/op
     p(99.0000) =  71172.096 us/op
     p(99.9000) =  78387.085 us/op
     p(99.9900) =  81133.568 us/op
     p(99.9990) =  81133.568 us/op
     p(99.9999) =  81133.568 us/op
    p(100.0000) =  81133.568 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 89.13% complete, ETA 00:53:13
# Fork: 1 of 1
# Warmup Iteration   1: 3997171.712 ±(99.9%) 6825713.341 us/op
# Warmup Iteration   2: 4212479.317 ±(99.9%) 233771.603 us/op
# Warmup Iteration   3: 4205488.811 ±(99.9%) 309250.762 us/op
# Warmup Iteration   4: 4222266.027 ±(99.9%) 116885.801 us/op
# Warmup Iteration   5: 4208285.013 ±(99.9%) 361618.084 us/op
Iteration   1: 4205488.811 ±(99.9%) 44178.680 us/op
                 runAlgorithm·p0.00:   4202692.608 us/op
                 runAlgorithm·p0.50:   4206886.912 us/op
                 runAlgorithm·p0.90:   4206886.912 us/op
                 runAlgorithm·p0.95:   4206886.912 us/op
                 runAlgorithm·p0.99:   4206886.912 us/op
                 runAlgorithm·p0.999:  4206886.912 us/op
                 runAlgorithm·p0.9999: 4206886.912 us/op
                 runAlgorithm·p1.00:   4206886.912 us/op

Iteration   2: 4199896.405 ±(99.9%) 377462.810 us/op
                 runAlgorithm·p0.00:   4185915.392 us/op
                 runAlgorithm·p0.50:   4190109.696 us/op
                 runAlgorithm·p0.90:   4223664.128 us/op
                 runAlgorithm·p0.95:   4223664.128 us/op
                 runAlgorithm·p0.99:   4223664.128 us/op
                 runAlgorithm·p0.999:  4223664.128 us/op
                 runAlgorithm·p0.9999: 4223664.128 us/op
                 runAlgorithm·p1.00:   4223664.128 us/op

Iteration   3: 4206886.912 ±(99.9%) 459118.314 us/op
                 runAlgorithm·p0.00:   4181721.088 us/op
                 runAlgorithm·p0.50:   4206886.912 us/op
                 runAlgorithm·p0.90:   4232052.736 us/op
                 runAlgorithm·p0.95:   4232052.736 us/op
                 runAlgorithm·p0.99:   4232052.736 us/op
                 runAlgorithm·p0.999:  4232052.736 us/op
                 runAlgorithm·p0.9999: 4232052.736 us/op
                 runAlgorithm·p1.00:   4232052.736 us/op

Iteration   4: 4220867.925 ±(99.9%) 245976.482 us/op
                 runAlgorithm·p0.00:   4211081.216 us/op
                 runAlgorithm·p0.50:   4215275.520 us/op
                 runAlgorithm·p0.90:   4236247.040 us/op
                 runAlgorithm·p0.95:   4236247.040 us/op
                 runAlgorithm·p0.99:   4236247.040 us/op
                 runAlgorithm·p0.999:  4236247.040 us/op
                 runAlgorithm·p0.9999: 4236247.040 us/op
                 runAlgorithm·p1.00:   4236247.040 us/op

Iteration   5: 4206886.912 ±(99.9%) 350657.404 us/op
                 runAlgorithm·p0.00:   4190109.696 us/op
                 runAlgorithm·p0.50:   4202692.608 us/op
                 runAlgorithm·p0.90:   4227858.432 us/op
                 runAlgorithm·p0.95:   4227858.432 us/op
                 runAlgorithm·p0.99:   4227858.432 us/op
                 runAlgorithm·p0.999:  4227858.432 us/op
                 runAlgorithm·p0.9999: 4227858.432 us/op
                 runAlgorithm·p1.00:   4227858.432 us/op

Iteration   6: 4220867.925 ±(99.9%) 392668.700 us/op
                 runAlgorithm·p0.00:   4202692.608 us/op
                 runAlgorithm·p0.50:   4215275.520 us/op
                 runAlgorithm·p0.90:   4244635.648 us/op
                 runAlgorithm·p0.95:   4244635.648 us/op
                 runAlgorithm·p0.99:   4244635.648 us/op
                 runAlgorithm·p0.999:  4244635.648 us/op
                 runAlgorithm·p0.9999: 4244635.648 us/op
                 runAlgorithm·p1.00:   4244635.648 us/op

Iteration   7: 4218071.723 ±(99.9%) 88357.361 us/op
                 runAlgorithm·p0.00:   4215275.520 us/op
                 runAlgorithm·p0.50:   4215275.520 us/op
                 runAlgorithm·p0.90:   4223664.128 us/op
                 runAlgorithm·p0.95:   4223664.128 us/op
                 runAlgorithm·p0.99:   4223664.128 us/op
                 runAlgorithm·p0.999:  4223664.128 us/op
                 runAlgorithm·p0.9999: 4223664.128 us/op
                 runAlgorithm·p1.00:   4223664.128 us/op

Iteration   8: 4225062.229 ±(99.9%) 461238.964 us/op
                 runAlgorithm·p0.00:   4198498.304 us/op
                 runAlgorithm·p0.50:   4227858.432 us/op
                 runAlgorithm·p0.90:   4248829.952 us/op
                 runAlgorithm·p0.95:   4248829.952 us/op
                 runAlgorithm·p0.99:   4248829.952 us/op
                 runAlgorithm·p0.999:  4248829.952 us/op
                 runAlgorithm·p0.9999: 4248829.952 us/op
                 runAlgorithm·p1.00:   4248829.952 us/op

Iteration   9: 4222266.027 ±(99.9%) 448364.636 us/op
                 runAlgorithm·p0.00:   4194304.000 us/op
                 runAlgorithm·p0.50:   4232052.736 us/op
                 runAlgorithm·p0.90:   4240441.344 us/op
                 runAlgorithm·p0.95:   4240441.344 us/op
                 runAlgorithm·p0.99:   4240441.344 us/op
                 runAlgorithm·p0.999:  4240441.344 us/op
                 runAlgorithm·p0.9999: 4240441.344 us/op
                 runAlgorithm·p1.00:   4240441.344 us/op

Iteration  10: 4213877.419 ±(99.9%) 579397.961 us/op
                 runAlgorithm·p0.00:   4177526.784 us/op
                 runAlgorithm·p0.50:   4227858.432 us/op
                 runAlgorithm·p0.90:   4236247.040 us/op
                 runAlgorithm·p0.95:   4236247.040 us/op
                 runAlgorithm·p0.99:   4236247.040 us/op
                 runAlgorithm·p0.999:  4236247.040 us/op
                 runAlgorithm·p0.9999: 4236247.040 us/op
                 runAlgorithm·p1.00:   4236247.040 us/op

Iteration  11: 4218071.723 ±(99.9%) 392668.700 us/op
                 runAlgorithm·p0.00:   4194304.000 us/op
                 runAlgorithm·p0.50:   4223664.128 us/op
                 runAlgorithm·p0.90:   4236247.040 us/op
                 runAlgorithm·p0.95:   4236247.040 us/op
                 runAlgorithm·p0.99:   4236247.040 us/op
                 runAlgorithm·p0.999:  4236247.040 us/op
                 runAlgorithm·p0.9999: 4236247.040 us/op
                 runAlgorithm·p1.00:   4236247.040 us/op

Iteration  12: 4225062.229 ±(99.9%) 584429.007 us/op
                 runAlgorithm·p0.00:   4190109.696 us/op
                 runAlgorithm·p0.50:   4232052.736 us/op
                 runAlgorithm·p0.90:   4253024.256 us/op
                 runAlgorithm·p0.95:   4253024.256 us/op
                 runAlgorithm·p0.99:   4253024.256 us/op
                 runAlgorithm·p0.999:  4253024.256 us/op
                 runAlgorithm·p0.9999: 4253024.256 us/op
                 runAlgorithm·p1.00:   4253024.256 us/op

Iteration  13: 4213877.419 ±(99.9%) 88357.361 us/op
                 runAlgorithm·p0.00:   4211081.216 us/op
                 runAlgorithm·p0.50:   4211081.216 us/op
                 runAlgorithm·p0.90:   4219469.824 us/op
                 runAlgorithm·p0.95:   4219469.824 us/op
                 runAlgorithm·p0.99:   4219469.824 us/op
                 runAlgorithm·p0.999:  4219469.824 us/op
                 runAlgorithm·p0.9999: 4219469.824 us/op
                 runAlgorithm·p1.00:   4219469.824 us/op

Iteration  14: 4213877.419 ±(99.9%) 542876.713 us/op
                 runAlgorithm·p0.00:   4181721.088 us/op
                 runAlgorithm·p0.50:   4219469.824 us/op
                 runAlgorithm·p0.90:   4240441.344 us/op
                 runAlgorithm·p0.95:   4240441.344 us/op
                 runAlgorithm·p0.99:   4240441.344 us/op
                 runAlgorithm·p0.999:  4240441.344 us/op
                 runAlgorithm·p0.9999: 4240441.344 us/op
                 runAlgorithm·p1.00:   4240441.344 us/op

Iteration  15: 4199896.405 ±(99.9%) 233771.603 us/op
                 runAlgorithm·p0.00:   4185915.392 us/op
                 runAlgorithm·p0.50:   4202692.608 us/op
                 runAlgorithm·p0.90:   4211081.216 us/op
                 runAlgorithm·p0.95:   4211081.216 us/op
                 runAlgorithm·p0.99:   4211081.216 us/op
                 runAlgorithm·p0.999:  4211081.216 us/op
                 runAlgorithm·p0.9999: 4211081.216 us/op
                 runAlgorithm·p1.00:   4211081.216 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 45
  mean = 4214063.832 ±(99.9%) 10293.185 us/op

  Histogram, us/op:
    [4170000.000, 4175000.000) = 0 
    [4175000.000, 4180000.000) = 1 
    [4180000.000, 4185000.000) = 2 
    [4185000.000, 4190000.000) = 2 
    [4190000.000, 4195000.000) = 5 
    [4195000.000, 4200000.000) = 1 
    [4200000.000, 4205000.000) = 4 
    [4205000.000, 4210000.000) = 3 
    [4210000.000, 4215000.000) = 4 
    [4215000.000, 4220000.000) = 6 
    [4220000.000, 4225000.000) = 3 
    [4225000.000, 4230000.000) = 3 
    [4230000.000, 4235000.000) = 3 
    [4235000.000, 4240000.000) = 3 
    [4240000.000, 4245000.000) = 3 
    [4245000.000, 4250000.000) = 1 
    [4250000.000, 4255000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 4177526.784 us/op
     p(50.0000) = 4215275.520 us/op
     p(90.0000) = 4240441.344 us/op
     p(95.0000) = 4247571.661 us/op
     p(99.0000) = 4253024.256 us/op
     p(99.9000) = 4253024.256 us/op
     p(99.9900) = 4253024.256 us/op
     p(99.9990) = 4253024.256 us/op
     p(99.9999) = 4253024.256 us/op
    p(100.0000) = 4253024.256 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 89.85% complete, ETA 00:49:46
# Fork: 1 of 1
# Warmup Iteration   1: 3066.179 ±(99.9%) 109.652 us/op
# Warmup Iteration   2: 2998.925 ±(99.9%) 1.531 us/op
# Warmup Iteration   3: 2999.829 ±(99.9%) 1.911 us/op
# Warmup Iteration   4: 2996.281 ±(99.9%) 1.326 us/op
# Warmup Iteration   5: 2996.438 ±(99.9%) 1.235 us/op
Iteration   1: 2995.069 ±(99.9%) 1.119 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3006.464 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3027.558 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3076.096 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3201.647 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3366.912 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3366.912 us/op

Iteration   2: 2995.938 ±(99.9%) 1.086 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3010.560 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3026.944 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3078.717 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3209.822 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3252.224 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3252.224 us/op

Iteration   3: 2996.739 ±(99.9%) 1.106 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3022.848 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3035.136 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3066.470 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3168.932 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3198.976 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3198.976 us/op

Iteration   4: 2997.209 ±(99.9%) 1.053 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3022.848 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3039.232 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3059.712 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3136.164 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3186.688 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3186.688 us/op

Iteration   5: 2997.127 ±(99.9%) 1.436 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3022.848 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3039.232 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3063.808 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3396.465 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3596.288 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3596.288 us/op

Iteration   6: 2995.993 ±(99.9%) 1.081 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2990.080 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3018.752 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3035.136 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3059.712 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3144.258 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3264.512 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3264.512 us/op

Iteration   7: 2997.543 ±(99.9%) 1.992 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2990.080 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3010.560 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3031.040 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3122.381 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3432.428 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3526.656 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3526.656 us/op

Iteration   8: 2994.532 ±(99.9%) 1.127 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2990.080 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3006.464 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3026.944 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3058.156 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3220.726 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3248.128 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3248.128 us/op

Iteration   9: 2995.045 ±(99.9%) 1.824 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2990.080 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3006.464 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3026.944 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3076.096 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3196.207 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 4497.408 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   4497.408 us/op

Iteration  10: 2994.995 ±(99.9%) 1.082 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2990.080 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3006.464 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3027.354 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3076.096 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3189.400 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3256.320 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3256.320 us/op

Iteration  11: 2997.532 ±(99.9%) 1.258 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3022.848 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3039.232 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3072.000 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3216.712 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3424.256 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3424.256 us/op

Iteration  12: 3001.663 ±(99.9%) 3.964 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3022.848 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3035.136 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3095.347 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  4524.769 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 4603.904 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   4603.904 us/op

Iteration  13: 2998.877 ±(99.9%) 2.520 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3014.656 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3035.136 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3084.288 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3514.368 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 4816.896 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   4816.896 us/op

Iteration  14: 2996.804 ±(99.9%) 1.399 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3010.560 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3031.040 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3074.621 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3372.089 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3518.464 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3518.464 us/op

Iteration  15: 2995.119 ±(99.9%) 0.863 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3010.560 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3026.944 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3051.520 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3112.845 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3153.920 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3153.920 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  N = 50021
  mean =   2996.678 ±(99.9%) 0.443 us/op

  Histogram, us/op:
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 
    [2750.000, 3000.000) = 38944 
    [3000.000, 3250.000) = 11022 
    [3250.000, 3500.000) = 38 
    [3500.000, 3750.000) = 8 
    [3750.000, 4000.000) = 1 
    [4000.000, 4250.000) = 1 
    [4250.000, 4500.000) = 2 
    [4500.000, 4750.000) = 4 

  Percentiles, us/op:
      p(0.0000) =   2969.600 us/op
     p(50.0000) =   2994.176 us/op
     p(90.0000) =   3014.656 us/op
     p(95.0000) =   3035.136 us/op
     p(99.0000) =   3072.000 us/op
     p(99.9000) =   3264.422 us/op
     p(99.9900) =   4513.756 us/op
     p(99.9990) =   4816.896 us/op
     p(99.9999) =   4816.896 us/op
    p(100.0000) =   4816.896 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 90.58% complete, ETA 00:46:13
# Fork: 1 of 1
# Warmup Iteration   1: 32265.593 ±(99.9%) 1003.111 us/op
# Warmup Iteration   2: 31489.739 ±(99.9%) 14.772 us/op
# Warmup Iteration   3: 31491.800 ±(99.9%) 14.528 us/op
# Warmup Iteration   4: 31493.242 ±(99.9%) 9.623 us/op
# Warmup Iteration   5: 31505.195 ±(99.9%) 15.675 us/op
Iteration   1: 31507.565 ±(99.9%) 21.819 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31588.352 us/op
                 extractOperationOutOfLoop·p0.99:   31897.354 us/op
                 extractOperationOutOfLoop·p0.999:  33259.520 us/op
                 extractOperationOutOfLoop·p0.9999: 33259.520 us/op
                 extractOperationOutOfLoop·p1.00:   33259.520 us/op

Iteration   2: 31507.050 ±(99.9%) 29.388 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31588.352 us/op
                 extractOperationOutOfLoop·p0.99:   31778.734 us/op
                 extractOperationOutOfLoop·p0.999:  34144.256 us/op
                 extractOperationOutOfLoop·p0.9999: 34144.256 us/op
                 extractOperationOutOfLoop·p1.00:   34144.256 us/op

Iteration   3: 31504.165 ±(99.9%) 29.457 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31588.352 us/op
                 extractOperationOutOfLoop·p0.99:   31719.424 us/op
                 extractOperationOutOfLoop·p0.999:  34144.256 us/op
                 extractOperationOutOfLoop·p0.9999: 34144.256 us/op
                 extractOperationOutOfLoop·p1.00:   34144.256 us/op

Iteration   4: 31493.345 ±(99.9%) 8.852 us/op
                 extractOperationOutOfLoop·p0.00:   31424.512 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31588.352 us/op
                 extractOperationOutOfLoop·p0.99:   31680.430 us/op
                 extractOperationOutOfLoop·p0.999:  31719.424 us/op
                 extractOperationOutOfLoop·p0.9999: 31719.424 us/op
                 extractOperationOutOfLoop·p1.00:   31719.424 us/op

Iteration   5: 31495.818 ±(99.9%) 8.440 us/op
                 extractOperationOutOfLoop·p0.00:   31424.512 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31555.584 us/op
                 extractOperationOutOfLoop·p0.99:   31680.430 us/op
                 extractOperationOutOfLoop·p0.999:  31752.192 us/op
                 extractOperationOutOfLoop·p0.9999: 31752.192 us/op
                 extractOperationOutOfLoop·p1.00:   31752.192 us/op

Iteration   6: 31498.601 ±(99.9%) 10.826 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31588.352 us/op
                 extractOperationOutOfLoop·p0.99:   31680.430 us/op
                 extractOperationOutOfLoop·p0.999:  31883.264 us/op
                 extractOperationOutOfLoop·p0.9999: 31883.264 us/op
                 extractOperationOutOfLoop·p1.00:   31883.264 us/op

Iteration   7: 31505.195 ±(99.9%) 12.173 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31621.120 us/op
                 extractOperationOutOfLoop·p0.99:   31884.902 us/op
                 extractOperationOutOfLoop·p0.999:  31948.800 us/op
                 extractOperationOutOfLoop·p0.9999: 31948.800 us/op
                 extractOperationOutOfLoop·p1.00:   31948.800 us/op

Iteration   8: 31494.891 ±(99.9%) 9.057 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31588.352 us/op
                 extractOperationOutOfLoop·p0.99:   31680.430 us/op
                 extractOperationOutOfLoop·p0.999:  31686.656 us/op
                 extractOperationOutOfLoop·p0.9999: 31686.656 us/op
                 extractOperationOutOfLoop·p1.00:   31686.656 us/op

Iteration   9: 31492.212 ±(99.9%) 13.043 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31588.352 us/op
                 extractOperationOutOfLoop·p0.99:   31686.656 us/op
                 extractOperationOutOfLoop·p0.999:  32342.016 us/op
                 extractOperationOutOfLoop·p0.9999: 32342.016 us/op
                 extractOperationOutOfLoop·p1.00:   32342.016 us/op

Iteration  10: 31482.320 ±(99.9%) 14.231 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31522.816 us/op
                 extractOperationOutOfLoop·p0.95:   31555.584 us/op
                 extractOperationOutOfLoop·p0.99:   31653.888 us/op
                 extractOperationOutOfLoop·p0.999:  32571.392 us/op
                 extractOperationOutOfLoop·p0.9999: 32571.392 us/op
                 extractOperationOutOfLoop·p1.00:   32571.392 us/op

Iteration  11: 31487.369 ±(99.9%) 9.450 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31588.352 us/op
                 extractOperationOutOfLoop·p0.99:   31647.662 us/op
                 extractOperationOutOfLoop·p0.999:  31719.424 us/op
                 extractOperationOutOfLoop·p0.9999: 31719.424 us/op
                 extractOperationOutOfLoop·p1.00:   31719.424 us/op

Iteration  12: 31498.085 ±(99.9%) 11.102 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31558.861 us/op
                 extractOperationOutOfLoop·p0.95:   31588.352 us/op
                 extractOperationOutOfLoop·p0.99:   31686.656 us/op
                 extractOperationOutOfLoop·p0.999:  31719.424 us/op
                 extractOperationOutOfLoop·p0.9999: 31719.424 us/op
                 extractOperationOutOfLoop·p1.00:   31719.424 us/op

Iteration  13: 31511.481 ±(99.9%) 54.456 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31557.222 us/op
                 extractOperationOutOfLoop·p0.99:   31811.502 us/op
                 extractOperationOutOfLoop·p0.999:  36241.408 us/op
                 extractOperationOutOfLoop·p0.9999: 36241.408 us/op
                 extractOperationOutOfLoop·p1.00:   36241.408 us/op

Iteration  14: 31515.191 ±(99.9%) 14.212 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31588.352 us/op
                 extractOperationOutOfLoop·p0.95:   31653.888 us/op
                 extractOperationOutOfLoop·p0.99:   31877.038 us/op
                 extractOperationOutOfLoop·p0.999:  31981.568 us/op
                 extractOperationOutOfLoop·p0.9999: 31981.568 us/op
                 extractOperationOutOfLoop·p1.00:   31981.568 us/op

Iteration  15: 31488.811 ±(99.9%) 9.802 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31557.222 us/op
                 extractOperationOutOfLoop·p0.99:   31686.656 us/op
                 extractOperationOutOfLoop·p0.999:  31784.960 us/op
                 extractOperationOutOfLoop·p0.9999: 31784.960 us/op
                 extractOperationOutOfLoop·p1.00:   31784.960 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  N = 4770
  mean =  31498.807 ±(99.9%) 5.360 us/op

  Histogram, us/op:
    [31000.000, 31500.000) = 3200 
    [31500.000, 32000.000) = 1563 
    [32000.000, 32500.000) = 1 
    [32500.000, 33000.000) = 1 
    [33000.000, 33500.000) = 2 
    [33500.000, 34000.000) = 0 
    [34000.000, 34500.000) = 2 
    [34500.000, 35000.000) = 0 
    [35000.000, 35500.000) = 0 
    [35500.000, 36000.000) = 0 
    [36000.000, 36500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  31391.744 us/op
     p(50.0000) =  31490.048 us/op
     p(90.0000) =  31555.584 us/op
     p(95.0000) =  31588.352 us/op
     p(99.0000) =  31686.656 us/op
     p(99.9000) =  33304.543 us/op
     p(99.9900) =  36241.408 us/op
     p(99.9990) =  36241.408 us/op
     p(99.9999) =  36241.408 us/op
    p(100.0000) =  36241.408 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 91.30% complete, ETA 00:42:40
# Fork: 1 of 1
# Warmup Iteration   1: 2928672.768 ±(99.9%) 14956822.496 us/op
# Warmup Iteration   2: 1758811.477 ±(99.9%) 3036.835 us/op
# Warmup Iteration   3: 1760109.714 ±(99.9%) 2304.710 us/op
# Warmup Iteration   4: 1764603.611 ±(99.9%) 9390.101 us/op
# Warmup Iteration   5: 1759510.528 ±(99.9%) 2726.969 us/op
Iteration   1: 1759210.935 ±(99.9%) 1785.220 us/op
                 reduceLoops·p0.00:   1757413.376 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1759510.528 us/op
                 reduceLoops·p0.95:   1759510.528 us/op
                 reduceLoops·p0.99:   1759510.528 us/op
                 reduceLoops·p0.999:  1759510.528 us/op
                 reduceLoops·p0.9999: 1759510.528 us/op
                 reduceLoops·p1.00:   1759510.528 us/op

Iteration   2: 1760109.714 ±(99.9%) 2304.710 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1761607.680 us/op
                 reduceLoops·p0.95:   1761607.680 us/op
                 reduceLoops·p0.99:   1761607.680 us/op
                 reduceLoops·p0.999:  1761607.680 us/op
                 reduceLoops·p0.9999: 1761607.680 us/op
                 reduceLoops·p1.00:   1761607.680 us/op

Iteration   3: 1759810.121 ±(99.9%) 1785.220 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1761607.680 us/op
                 reduceLoops·p0.95:   1761607.680 us/op
                 reduceLoops·p0.99:   1761607.680 us/op
                 reduceLoops·p0.999:  1761607.680 us/op
                 reduceLoops·p0.9999: 1761607.680 us/op
                 reduceLoops·p1.00:   1761607.680 us/op

Iteration   4: 1760109.714 ±(99.9%) 2304.710 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1761607.680 us/op
                 reduceLoops·p0.95:   1761607.680 us/op
                 reduceLoops·p0.99:   1761607.680 us/op
                 reduceLoops·p0.999:  1761607.680 us/op
                 reduceLoops·p0.9999: 1761607.680 us/op
                 reduceLoops·p1.00:   1761607.680 us/op

Iteration   5: 1761308.087 ±(99.9%) 10711.323 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1772093.440 us/op
                 reduceLoops·p0.95:   1772093.440 us/op
                 reduceLoops·p0.99:   1772093.440 us/op
                 reduceLoops·p0.999:  1772093.440 us/op
                 reduceLoops·p0.9999: 1772093.440 us/op
                 reduceLoops·p1.00:   1772093.440 us/op

Iteration   6: 1761907.273 ±(99.9%) 4249.675 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1761607.680 us/op
                 reduceLoops·p0.90:   1765801.984 us/op
                 reduceLoops·p0.95:   1765801.984 us/op
                 reduceLoops·p0.99:   1765801.984 us/op
                 reduceLoops·p0.999:  1765801.984 us/op
                 reduceLoops·p0.9999: 1765801.984 us/op
                 reduceLoops·p1.00:   1765801.984 us/op

Iteration   7: 1760409.307 ±(99.9%) 2524.683 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1761607.680 us/op
                 reduceLoops·p0.95:   1761607.680 us/op
                 reduceLoops·p0.99:   1761607.680 us/op
                 reduceLoops·p0.999:  1761607.680 us/op
                 reduceLoops·p0.9999: 1761607.680 us/op
                 reduceLoops·p1.00:   1761607.680 us/op

Iteration   8: 1763105.646 ±(99.9%) 11148.698 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1761607.680 us/op
                 reduceLoops·p0.90:   1774190.592 us/op
                 reduceLoops·p0.95:   1774190.592 us/op
                 reduceLoops·p0.99:   1774190.592 us/op
                 reduceLoops·p0.999:  1774190.592 us/op
                 reduceLoops·p0.9999: 1774190.592 us/op
                 reduceLoops·p1.00:   1774190.592 us/op

Iteration   9: 1759860.053 ±(99.9%) 2400.829 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1761607.680 us/op
                 reduceLoops·p0.95:   1761607.680 us/op
                 reduceLoops·p0.99:   1761607.680 us/op
                 reduceLoops·p0.999:  1761607.680 us/op
                 reduceLoops·p0.9999: 1761607.680 us/op
                 reduceLoops·p1.00:   1761607.680 us/op

Iteration  10: 1759860.053 ±(99.9%) 2400.829 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1761607.680 us/op
                 reduceLoops·p0.95:   1761607.680 us/op
                 reduceLoops·p0.99:   1761607.680 us/op
                 reduceLoops·p0.999:  1761607.680 us/op
                 reduceLoops·p0.9999: 1761607.680 us/op
                 reduceLoops·p1.00:   1761607.680 us/op

Iteration  11: 1760209.579 ±(99.9%) 3036.835 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1761607.680 us/op
                 reduceLoops·p0.95:   1761607.680 us/op
                 reduceLoops·p0.99:   1761607.680 us/op
                 reduceLoops·p0.999:  1761607.680 us/op
                 reduceLoops·p0.9999: 1761607.680 us/op
                 reduceLoops·p1.00:   1761607.680 us/op

Iteration  12: 1759161.003 ±(99.9%) 2400.829 us/op
                 reduceLoops·p0.00:   1757413.376 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1759510.528 us/op
                 reduceLoops·p0.95:   1759510.528 us/op
                 reduceLoops·p0.99:   1759510.528 us/op
                 reduceLoops·p0.999:  1759510.528 us/op
                 reduceLoops·p0.9999: 1759510.528 us/op
                 reduceLoops·p1.00:   1759510.528 us/op

Iteration  13: 1759510.528 ±(99.9%) 0.001 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1759510.528 us/op
                 reduceLoops·p0.95:   1759510.528 us/op
                 reduceLoops·p0.99:   1759510.528 us/op
                 reduceLoops·p0.999:  1759510.528 us/op
                 reduceLoops·p0.9999: 1759510.528 us/op
                 reduceLoops·p1.00:   1759510.528 us/op

Iteration  14: 1760109.714 ±(99.9%) 2304.710 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1761607.680 us/op
                 reduceLoops·p0.95:   1761607.680 us/op
                 reduceLoops·p0.99:   1761607.680 us/op
                 reduceLoops·p0.999:  1761607.680 us/op
                 reduceLoops·p0.9999: 1761607.680 us/op
                 reduceLoops·p1.00:   1761607.680 us/op

Iteration  15: 1758611.749 ±(99.9%) 6009.948 us/op
                 reduceLoops·p0.00:   1753219.072 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1761607.680 us/op
                 reduceLoops·p0.95:   1761607.680 us/op
                 reduceLoops·p0.99:   1761607.680 us/op
                 reduceLoops·p0.999:  1761607.680 us/op
                 reduceLoops·p0.9999: 1761607.680 us/op
                 reduceLoops·p1.00:   1761607.680 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  N = 101
  mean = 1760237.264 ±(99.9%) 771.383 us/op

  Histogram, us/op:
    [1750000.000, 1752500.000) = 0 
    [1752500.000, 1755000.000) = 1 
    [1755000.000, 1757500.000) = 3 
    [1757500.000, 1760000.000) = 69 
    [1760000.000, 1762500.000) = 25 
    [1762500.000, 1765000.000) = 0 
    [1765000.000, 1767500.000) = 1 
    [1767500.000, 1770000.000) = 0 
    [1770000.000, 1772500.000) = 1 
    [1772500.000, 1775000.000) = 1 
    [1775000.000, 1777500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1753219.072 us/op
     p(50.0000) = 1759510.528 us/op
     p(90.0000) = 1761607.680 us/op
     p(95.0000) = 1761607.680 us/op
     p(99.0000) = 1774148.649 us/op
     p(99.9000) = 1774190.592 us/op
     p(99.9900) = 1774190.592 us/op
     p(99.9990) = 1774190.592 us/op
     p(99.9999) = 1774190.592 us/op
    p(100.0000) = 1774190.592 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 92.03% complete, ETA 00:39:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.444 ±(99.9%) 0.238 us/op
# Warmup Iteration   2: 0.064 ±(99.9%) 0.001 us/op
# Warmup Iteration   3: 0.063 ±(99.9%) 0.001 us/op
# Warmup Iteration   4: 0.063 ±(99.9%) 0.001 us/op
# Warmup Iteration   5: 0.062 ±(99.9%) 0.001 us/op
Iteration   1: 0.063 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.059 us/op
                 reduceSynchronizedBlocks·p0.90:   0.073 us/op
                 reduceSynchronizedBlocks·p0.95:   0.074 us/op
                 reduceSynchronizedBlocks·p0.99:   0.076 us/op
                 reduceSynchronizedBlocks·p0.999:  0.125 us/op
                 reduceSynchronizedBlocks·p0.9999: 5.967 us/op
                 reduceSynchronizedBlocks·p1.00:   47.040 us/op

Iteration   2: 0.063 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.059 us/op
                 reduceSynchronizedBlocks·p0.90:   0.073 us/op
                 reduceSynchronizedBlocks·p0.95:   0.074 us/op
                 reduceSynchronizedBlocks·p0.99:   0.079 us/op
                 reduceSynchronizedBlocks·p0.999:  0.125 us/op
                 reduceSynchronizedBlocks·p0.9999: 7.018 us/op
                 reduceSynchronizedBlocks·p1.00:   48.384 us/op

Iteration   3: 0.063 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.059 us/op
                 reduceSynchronizedBlocks·p0.90:   0.074 us/op
                 reduceSynchronizedBlocks·p0.95:   0.074 us/op
                 reduceSynchronizedBlocks·p0.99:   0.078 us/op
                 reduceSynchronizedBlocks·p0.999:  0.126 us/op
                 reduceSynchronizedBlocks·p0.9999: 7.150 us/op
                 reduceSynchronizedBlocks·p1.00:   60.480 us/op

Iteration   4: 0.063 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.059 us/op
                 reduceSynchronizedBlocks·p0.90:   0.073 us/op
                 reduceSynchronizedBlocks·p0.95:   0.074 us/op
                 reduceSynchronizedBlocks·p0.99:   0.075 us/op
                 reduceSynchronizedBlocks·p0.999:  0.127 us/op
                 reduceSynchronizedBlocks·p0.9999: 7.543 us/op
                 reduceSynchronizedBlocks·p1.00:   47.616 us/op

Iteration   5: 0.063 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.059 us/op
                 reduceSynchronizedBlocks·p0.90:   0.074 us/op
                 reduceSynchronizedBlocks·p0.95:   0.074 us/op
                 reduceSynchronizedBlocks·p0.99:   0.078 us/op
                 reduceSynchronizedBlocks·p0.999:  0.110 us/op
                 reduceSynchronizedBlocks·p0.9999: 6.137 us/op
                 reduceSynchronizedBlocks·p1.00:   19.552 us/op

Iteration   6: 0.063 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.059 us/op
                 reduceSynchronizedBlocks·p0.90:   0.073 us/op
                 reduceSynchronizedBlocks·p0.95:   0.074 us/op
                 reduceSynchronizedBlocks·p0.99:   0.075 us/op
                 reduceSynchronizedBlocks·p0.999:  0.098 us/op
                 reduceSynchronizedBlocks·p0.9999: 4.522 us/op
                 reduceSynchronizedBlocks·p1.00:   40.128 us/op

Iteration   7: 0.063 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.059 us/op
                 reduceSynchronizedBlocks·p0.90:   0.073 us/op
                 reduceSynchronizedBlocks·p0.95:   0.074 us/op
                 reduceSynchronizedBlocks·p0.99:   0.077 us/op
                 reduceSynchronizedBlocks·p0.999:  0.115 us/op
                 reduceSynchronizedBlocks·p0.9999: 6.139 us/op
                 reduceSynchronizedBlocks·p1.00:   41.344 us/op

Iteration   8: 0.062 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.059 us/op
                 reduceSynchronizedBlocks·p0.90:   0.073 us/op
                 reduceSynchronizedBlocks·p0.95:   0.074 us/op
                 reduceSynchronizedBlocks·p0.99:   0.078 us/op
                 reduceSynchronizedBlocks·p0.999:  0.103 us/op
                 reduceSynchronizedBlocks·p0.9999: 4.620 us/op
                 reduceSynchronizedBlocks·p1.00:   46.336 us/op

Iteration   9: 0.063 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.059 us/op
                 reduceSynchronizedBlocks·p0.90:   0.074 us/op
                 reduceSynchronizedBlocks·p0.95:   0.074 us/op
                 reduceSynchronizedBlocks·p0.99:   0.076 us/op
                 reduceSynchronizedBlocks·p0.999:  0.117 us/op
                 reduceSynchronizedBlocks·p0.9999: 6.630 us/op
                 reduceSynchronizedBlocks·p1.00:   26.720 us/op

Iteration  10: 0.063 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.059 us/op
                 reduceSynchronizedBlocks·p0.90:   0.074 us/op
                 reduceSynchronizedBlocks·p0.95:   0.075 us/op
                 reduceSynchronizedBlocks·p0.99:   0.081 us/op
                 reduceSynchronizedBlocks·p0.999:  0.118 us/op
                 reduceSynchronizedBlocks·p0.9999: 5.677 us/op
                 reduceSynchronizedBlocks·p1.00:   22.432 us/op

Iteration  11: 0.063 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.059 us/op
                 reduceSynchronizedBlocks·p0.90:   0.073 us/op
                 reduceSynchronizedBlocks·p0.95:   0.074 us/op
                 reduceSynchronizedBlocks·p0.99:   0.075 us/op
                 reduceSynchronizedBlocks·p0.999:  0.111 us/op
                 reduceSynchronizedBlocks·p0.9999: 7.310 us/op
                 reduceSynchronizedBlocks·p1.00:   86.528 us/op

Iteration  12: 0.063 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.059 us/op
                 reduceSynchronizedBlocks·p0.90:   0.073 us/op
                 reduceSynchronizedBlocks·p0.95:   0.074 us/op
                 reduceSynchronizedBlocks·p0.99:   0.076 us/op
                 reduceSynchronizedBlocks·p0.999:  0.125 us/op
                 reduceSynchronizedBlocks·p0.9999: 5.809 us/op
                 reduceSynchronizedBlocks·p1.00:   13.232 us/op

Iteration  13: 0.062 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.059 us/op
                 reduceSynchronizedBlocks·p0.90:   0.074 us/op
                 reduceSynchronizedBlocks·p0.95:   0.074 us/op
                 reduceSynchronizedBlocks·p0.99:   0.077 us/op
                 reduceSynchronizedBlocks·p0.999:  0.126 us/op
                 reduceSynchronizedBlocks·p0.9999: 5.621 us/op
                 reduceSynchronizedBlocks·p1.00:   26.528 us/op

Iteration  14: 0.063 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.059 us/op
                 reduceSynchronizedBlocks·p0.90:   0.073 us/op
                 reduceSynchronizedBlocks·p0.95:   0.074 us/op
                 reduceSynchronizedBlocks·p0.99:   0.078 us/op
                 reduceSynchronizedBlocks·p0.999:  0.120 us/op
                 reduceSynchronizedBlocks·p0.9999: 6.438 us/op
                 reduceSynchronizedBlocks·p1.00:   38.208 us/op

Iteration  15: 0.064 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.059 us/op
                 reduceSynchronizedBlocks·p0.90:   0.073 us/op
                 reduceSynchronizedBlocks·p0.95:   0.074 us/op
                 reduceSynchronizedBlocks·p0.99:   0.077 us/op
                 reduceSynchronizedBlocks·p0.999:  0.128 us/op
                 reduceSynchronizedBlocks·p0.9999: 6.579 us/op
                 reduceSynchronizedBlocks·p1.00:   94.336 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  N = 5219079
  mean =      0.063 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  10.000) = 5218960 
    [ 10.000,  20.000) = 74 
    [ 20.000,  30.000) = 29 
    [ 30.000,  40.000) = 5 
    [ 40.000,  50.000) = 7 
    [ 50.000,  60.000) = 0 
    [ 60.000,  70.000) = 1 
    [ 70.000,  80.000) = 0 
    [ 80.000,  90.000) = 2 

  Percentiles, us/op:
      p(0.0000) =      0.048 us/op
     p(50.0000) =      0.059 us/op
     p(90.0000) =      0.073 us/op
     p(95.0000) =      0.074 us/op
     p(99.0000) =      0.078 us/op
     p(99.9000) =      0.121 us/op
     p(99.9900) =      6.329 us/op
     p(99.9990) =     18.514 us/op
     p(99.9999) =     48.216 us/op
    p(100.0000) =     94.336 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 92.75% complete, ETA 00:35:37
# Fork: 1 of 1
# Warmup Iteration   1: 10802.175 ±(99.9%) 498.133 us/op
# Warmup Iteration   2: 10830.818 ±(99.9%) 4.032 us/op
# Warmup Iteration   3: 10825.675 ±(99.9%) 5.031 us/op
# Warmup Iteration   4: 10601.647 ±(99.9%) 29.456 us/op
# Warmup Iteration   5: 10586.372 ±(99.9%) 4.794 us/op
Iteration   1: 10586.615 ±(99.9%) 3.938 us/op
                 reduceYoungObjects·p0.00:   10223.616 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10616.832 us/op
                 reduceYoungObjects·p0.95:   10633.216 us/op
                 reduceYoungObjects·p0.99:   10715.136 us/op
                 reduceYoungObjects·p0.999:  10846.208 us/op
                 reduceYoungObjects·p0.9999: 10846.208 us/op
                 reduceYoungObjects·p1.00:   10846.208 us/op

Iteration   2: 10583.787 ±(99.9%) 5.349 us/op
                 reduceYoungObjects·p0.00:   10321.920 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10628.301 us/op
                 reduceYoungObjects·p0.99:   10747.904 us/op
                 reduceYoungObjects·p0.999:  11517.952 us/op
                 reduceYoungObjects·p0.9999: 11517.952 us/op
                 reduceYoungObjects·p1.00:   11517.952 us/op

Iteration   3: 10584.688 ±(99.9%) 5.982 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10633.216 us/op
                 reduceYoungObjects·p0.99:   10723.983 us/op
                 reduceYoungObjects·p0.999:  11436.032 us/op
                 reduceYoungObjects·p0.9999: 11436.032 us/op
                 reduceYoungObjects·p1.00:   11436.032 us/op

Iteration   4: 10579.140 ±(99.9%) 3.967 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10658.447 us/op
                 reduceYoungObjects·p0.999:  10862.592 us/op
                 reduceYoungObjects·p0.9999: 10862.592 us/op
                 reduceYoungObjects·p1.00:   10862.592 us/op

Iteration   5: 10571.473 ±(99.9%) 16.579 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10633.216 us/op
                 reduceYoungObjects·p0.99:   10740.204 us/op
                 reduceYoungObjects·p0.999:  14352.384 us/op
                 reduceYoungObjects·p0.9999: 14352.384 us/op
                 reduceYoungObjects·p1.00:   14352.384 us/op

Iteration   6: 10578.447 ±(99.9%) 3.734 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10682.368 us/op
                 reduceYoungObjects·p0.999:  10813.440 us/op
                 reduceYoungObjects·p0.9999: 10813.440 us/op
                 reduceYoungObjects·p1.00:   10813.440 us/op

Iteration   7: 10579.712 ±(99.9%) 3.557 us/op
                 reduceYoungObjects·p0.00:   10240.000 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10674.831 us/op
                 reduceYoungObjects·p0.999:  10797.056 us/op
                 reduceYoungObjects·p0.9999: 10797.056 us/op
                 reduceYoungObjects·p1.00:   10797.056 us/op

Iteration   8: 10566.000 ±(99.9%) 8.254 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10682.368 us/op
                 reduceYoungObjects·p0.999:  10780.672 us/op
                 reduceYoungObjects·p0.9999: 10780.672 us/op
                 reduceYoungObjects·p1.00:   10780.672 us/op

Iteration   9: 10586.806 ±(99.9%) 8.585 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10616.832 us/op
                 reduceYoungObjects·p0.95:   10649.600 us/op
                 reduceYoungObjects·p0.99:   10953.523 us/op
                 reduceYoungObjects·p0.999:  11124.736 us/op
                 reduceYoungObjects·p0.9999: 11124.736 us/op
                 reduceYoungObjects·p1.00:   11124.736 us/op

Iteration  10: 10582.954 ±(99.9%) 3.566 us/op
                 reduceYoungObjects·p0.00:   10305.536 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10731.520 us/op
                 reduceYoungObjects·p0.999:  11141.120 us/op
                 reduceYoungObjects·p0.9999: 11141.120 us/op
                 reduceYoungObjects·p1.00:   11141.120 us/op

Iteration  11: 10573.904 ±(99.9%) 5.736 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10665.984 us/op
                 reduceYoungObjects·p0.999:  10813.440 us/op
                 reduceYoungObjects·p0.9999: 10813.440 us/op
                 reduceYoungObjects·p1.00:   10813.440 us/op

Iteration  12: 10577.701 ±(99.9%) 4.296 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10674.831 us/op
                 reduceYoungObjects·p0.999:  10878.976 us/op
                 reduceYoungObjects·p0.9999: 10878.976 us/op
                 reduceYoungObjects·p1.00:   10878.976 us/op

Iteration  13: 10574.164 ±(99.9%) 6.892 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10691.215 us/op
                 reduceYoungObjects·p0.999:  11403.264 us/op
                 reduceYoungObjects·p0.9999: 11403.264 us/op
                 reduceYoungObjects·p1.00:   11403.264 us/op

Iteration  14: 10583.665 ±(99.9%) 10.689 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10731.520 us/op
                 reduceYoungObjects·p0.999:  13385.728 us/op
                 reduceYoungObjects·p0.9999: 13385.728 us/op
                 reduceYoungObjects·p1.00:   13385.728 us/op

Iteration  15: 10575.100 ±(99.9%) 7.639 us/op
                 reduceYoungObjects·p0.00:   10174.464 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10780.672 us/op
                 reduceYoungObjects·p0.999:  11108.352 us/op
                 reduceYoungObjects·p0.9999: 11108.352 us/op
                 reduceYoungObjects·p1.00:   11108.352 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  N = 14175
  mean =  10578.941 ±(99.9%) 1.913 us/op

  Histogram, us/op:
    [10000.000, 10500.000) = 314 
    [10500.000, 11000.000) = 13840 
    [11000.000, 11500.000) = 18 
    [11500.000, 12000.000) = 1 
    [12000.000, 12500.000) = 0 
    [12500.000, 13000.000) = 0 
    [13000.000, 13500.000) = 1 
    [13500.000, 14000.000) = 0 
    [14000.000, 14500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  10174.464 us/op
     p(50.0000) =  10584.064 us/op
     p(90.0000) =  10600.448 us/op
     p(95.0000) =  10616.832 us/op
     p(99.0000) =  10715.136 us/op
     p(99.9000) =  11089.084 us/op
     p(99.9900) =  13948.708 us/op
     p(99.9990) =  14352.384 us/op
     p(99.9999) =  14352.384 us/op
    p(100.0000) =  14352.384 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 93.48% complete, ETA 00:32:03
# Fork: 1 of 1
# Warmup Iteration   1: 31370.994 ±(99.9%) 2535.940 us/op
# Warmup Iteration   2: 43063.059 ±(99.9%) 108.952 us/op
# Warmup Iteration   3: 33004.405 ±(99.9%) 80.963 us/op
# Warmup Iteration   4: 34076.045 ±(99.9%) 148.286 us/op
# Warmup Iteration   5: 35131.435 ±(99.9%) 196.418 us/op
Iteration   1: 44861.596 ±(99.9%) 168.068 us/op
                 redundantCode·p0.00:   44564.480 us/op
                 redundantCode·p0.50:   44826.624 us/op
                 redundantCode·p0.90:   44957.696 us/op
                 redundantCode·p0.95:   44957.696 us/op
                 redundantCode·p0.99:   45516.063 us/op
                 redundantCode·p0.999:  55902.208 us/op
                 redundantCode·p0.9999: 55902.208 us/op
                 redundantCode·p1.00:   55902.208 us/op

Iteration   2: 32989.806 ±(99.9%) 113.098 us/op
                 redundantCode·p0.00:   32800.768 us/op
                 redundantCode·p0.50:   32931.840 us/op
                 redundantCode·p0.90:   33062.912 us/op
                 redundantCode·p0.95:   33121.894 us/op
                 redundantCode·p0.99:   33617.347 us/op
                 redundantCode·p0.999:  42336.256 us/op
                 redundantCode·p0.9999: 42336.256 us/op
                 redundantCode·p1.00:   42336.256 us/op

Iteration   3: 37511.874 ±(99.9%) 69.689 us/op
                 redundantCode·p0.00:   37289.984 us/op
                 redundantCode·p0.50:   37486.592 us/op
                 redundantCode·p0.90:   37617.664 us/op
                 redundantCode·p0.95:   37722.522 us/op
                 redundantCode·p0.99:   38975.570 us/op
                 redundantCode·p0.999:  41418.752 us/op
                 redundantCode·p0.9999: 41418.752 us/op
                 redundantCode·p1.00:   41418.752 us/op

Iteration   4: 39848.238 ±(99.9%) 117.915 us/op
                 redundantCode·p0.00:   39649.280 us/op
                 redundantCode·p0.50:   39780.352 us/op
                 redundantCode·p0.90:   39911.424 us/op
                 redundantCode·p0.95:   39976.960 us/op
                 redundantCode·p0.99:   42024.305 us/op
                 redundantCode·p0.999:  47710.208 us/op
                 redundantCode·p0.9999: 47710.208 us/op
                 redundantCode·p1.00:   47710.208 us/op

Iteration   5: 36217.188 ±(99.9%) 250.514 us/op
                 redundantCode·p0.00:   35979.264 us/op
                 redundantCode·p0.50:   36110.336 us/op
                 redundantCode·p0.90:   36241.408 us/op
                 redundantCode·p0.95:   36251.238 us/op
                 redundantCode·p0.99:   38313.001 us/op
                 redundantCode·p0.999:  55443.456 us/op
                 redundantCode·p0.9999: 55443.456 us/op
                 redundantCode·p1.00:   55443.456 us/op

Iteration   6: 35548.864 ±(99.9%) 81.352 us/op
                 redundantCode·p0.00:   35389.440 us/op
                 redundantCode·p0.50:   35520.512 us/op
                 redundantCode·p0.90:   35586.048 us/op
                 redundantCode·p0.95:   35651.584 us/op
                 redundantCode·p0.99:   36928.225 us/op
                 redundantCode·p0.999:  41091.072 us/op
                 redundantCode·p0.9999: 41091.072 us/op
                 redundantCode·p1.00:   41091.072 us/op

Iteration   7: 32021.978 ±(99.9%) 83.054 us/op
                 redundantCode·p0.00:   31784.960 us/op
                 redundantCode·p0.50:   31981.568 us/op
                 redundantCode·p0.90:   32112.640 us/op
                 redundantCode·p0.95:   32145.408 us/op
                 redundantCode·p0.99:   32304.660 us/op
                 redundantCode·p0.999:  38535.168 us/op
                 redundantCode·p0.9999: 38535.168 us/op
                 redundantCode·p1.00:   38535.168 us/op

Iteration   8: 36837.015 ±(99.9%) 77.691 us/op
                 redundantCode·p0.00:   36634.624 us/op
                 redundantCode·p0.50:   36765.696 us/op
                 redundantCode·p0.90:   36896.768 us/op
                 redundantCode·p0.95:   36985.242 us/op
                 redundantCode·p0.99:   38282.854 us/op
                 redundantCode·p0.999:  41746.432 us/op
                 redundantCode·p0.9999: 41746.432 us/op
                 redundantCode·p1.00:   41746.432 us/op

Iteration   9: 33240.795 ±(99.9%) 62.102 us/op
                 redundantCode·p0.00:   33062.912 us/op
                 redundantCode·p0.50:   33193.984 us/op
                 redundantCode·p0.90:   33292.288 us/op
                 redundantCode·p0.95:   33357.824 us/op
                 redundantCode·p0.99:   34139.013 us/op
                 redundantCode·p0.999:  37027.840 us/op
                 redundantCode·p0.9999: 37027.840 us/op
                 redundantCode·p1.00:   37027.840 us/op

Iteration  10: 32785.620 ±(99.9%) 204.967 us/op
                 redundantCode·p0.00:   32505.856 us/op
                 redundantCode·p0.50:   32702.464 us/op
                 redundantCode·p0.90:   32800.768 us/op
                 redundantCode·p0.95:   32866.304 us/op
                 redundantCode·p0.99:   33657.979 us/op
                 redundantCode·p0.999:  51249.152 us/op
                 redundantCode·p0.9999: 51249.152 us/op
                 redundantCode·p1.00:   51249.152 us/op

Iteration  11: 42340.421 ±(99.9%) 261.420 us/op
                 redundantCode·p0.00:   42074.112 us/op
                 redundantCode·p0.50:   42205.184 us/op
                 redundantCode·p0.90:   42336.256 us/op
                 redundantCode·p0.95:   42401.792 us/op
                 redundantCode·p0.99:   50197.299 us/op
                 redundantCode·p0.999:  56295.424 us/op
                 redundantCode·p0.9999: 56295.424 us/op
                 redundantCode·p1.00:   56295.424 us/op

Iteration  12: 38143.953 ±(99.9%) 154.378 us/op
                 redundantCode·p0.00:   37879.808 us/op
                 redundantCode·p0.50:   38076.416 us/op
                 redundantCode·p0.90:   38207.488 us/op
                 redundantCode·p0.95:   38263.194 us/op
                 redundantCode·p0.99:   40541.225 us/op
                 redundantCode·p0.999:  49152.000 us/op
                 redundantCode·p0.9999: 49152.000 us/op
                 redundantCode·p1.00:   49152.000 us/op

Iteration  13: 37405.406 ±(99.9%) 163.477 us/op
                 redundantCode·p0.00:   37158.912 us/op
                 redundantCode·p0.50:   37355.520 us/op
                 redundantCode·p0.90:   37486.592 us/op
                 redundantCode·p0.95:   37522.637 us/op
                 redundantCode·p0.99:   39223.296 us/op
                 redundantCode·p0.999:  49741.824 us/op
                 redundantCode·p0.9999: 49741.824 us/op
                 redundantCode·p1.00:   49741.824 us/op

Iteration  14: 35682.245 ±(99.9%) 97.222 us/op
                 redundantCode·p0.00:   35520.512 us/op
                 redundantCode·p0.50:   35651.584 us/op
                 redundantCode·p0.90:   35717.120 us/op
                 redundantCode·p0.95:   35782.656 us/op
                 redundantCode·p0.99:   36963.615 us/op
                 redundantCode·p0.999:  42401.792 us/op
                 redundantCode·p0.9999: 42401.792 us/op
                 redundantCode·p1.00:   42401.792 us/op

Iteration  15: 33394.633 ±(99.9%) 123.772 us/op
                 redundantCode·p0.00:   33095.680 us/op
                 redundantCode·p0.50:   33325.056 us/op
                 redundantCode·p0.90:   33423.360 us/op
                 redundantCode·p0.95:   33552.794 us/op
                 redundantCode·p0.99:   37205.443 us/op
                 redundantCode·p0.999:  41811.968 us/op
                 redundantCode·p0.9999: 41811.968 us/op
                 redundantCode·p1.00:   41811.968 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  N = 4139
  mean =  36266.275 ±(99.9%) 178.612 us/op

  Histogram, us/op:
    [30000.000, 32500.000) = 311 
    [32500.000, 35000.000) = 1199 
    [35000.000, 37500.000) = 1554 
    [37500.000, 40000.000) = 590 
    [40000.000, 42500.000) = 247 
    [42500.000, 45000.000) = 222 
    [45000.000, 47500.000) = 8 
    [47500.000, 50000.000) = 3 
    [50000.000, 52500.000) = 1 
    [52500.000, 55000.000) = 1 
    [55000.000, 57500.000) = 3 

  Percentiles, us/op:
      p(0.0000) =  31784.960 us/op
     p(50.0000) =  35979.264 us/op
     p(90.0000) =  42139.648 us/op
     p(95.0000) =  44695.552 us/op
     p(99.0000) =  44892.160 us/op
     p(99.9000) =  53785.395 us/op
     p(99.9900) =  56295.424 us/op
     p(99.9990) =  56295.424 us/op
     p(99.9999) =  56295.424 us/op
    p(100.0000) =  56295.424 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 94.20% complete, ETA 00:28:30
# Fork: 1 of 1
# Warmup Iteration   1: 34288.009 ±(99.9%) 2385.179 us/op
# Warmup Iteration   2: 32750.438 ±(99.9%) 901.184 us/op
# Warmup Iteration   3: 32613.553 ±(99.9%) 777.860 us/op
# Warmup Iteration   4: 32530.964 ±(99.9%) 549.972 us/op
# Warmup Iteration   5: 32528.411 ±(99.9%) 517.869 us/op
Iteration   1: 32567.016 ±(99.9%) 588.384 us/op
                 split·p0.00:   31916.032 us/op
                 split·p0.50:   32079.872 us/op
                 split·p0.90:   32243.712 us/op
                 split·p0.95:   32348.570 us/op
                 split·p0.99:   52261.028 us/op
                 split·p0.999:  61079.552 us/op
                 split·p0.9999: 61079.552 us/op
                 split·p1.00:   61079.552 us/op

Iteration   2: 32610.244 ±(99.9%) 577.027 us/op
                 split·p0.00:   31916.032 us/op
                 split·p0.50:   32145.408 us/op
                 split·p0.90:   32309.248 us/op
                 split·p0.95:   32512.410 us/op
                 split·p0.99:   50643.599 us/op
                 split·p0.999:  58982.400 us/op
                 split·p0.9999: 58982.400 us/op
                 split·p1.00:   58982.400 us/op

Iteration   3: 32531.815 ±(99.9%) 581.442 us/op
                 split·p0.00:   31850.496 us/op
                 split·p0.50:   32047.104 us/op
                 split·p0.90:   32210.944 us/op
                 split·p0.95:   32309.248 us/op
                 split·p0.99:   51285.197 us/op
                 split·p0.999:  62128.128 us/op
                 split·p0.9999: 62128.128 us/op
                 split·p1.00:   62128.128 us/op

Iteration   4: 32622.946 ±(99.9%) 572.727 us/op
                 split·p0.00:   31916.032 us/op
                 split·p0.50:   32112.640 us/op
                 split·p0.90:   32243.712 us/op
                 split·p0.95:   32374.784 us/op
                 split·p0.99:   50205.819 us/op
                 split·p0.999:  59113.472 us/op
                 split·p0.9999: 59113.472 us/op
                 split·p1.00:   59113.472 us/op

Iteration   5: 32565.948 ±(99.9%) 612.121 us/op
                 split·p0.00:   31916.032 us/op
                 split·p0.50:   32079.872 us/op
                 split·p0.90:   32210.944 us/op
                 split·p0.95:   32276.480 us/op
                 split·p0.99:   50446.991 us/op
                 split·p0.999:  65798.144 us/op
                 split·p0.9999: 65798.144 us/op
                 split·p1.00:   65798.144 us/op

Iteration   6: 32490.536 ±(99.9%) 504.115 us/op
                 split·p0.00:   31916.032 us/op
                 split·p0.50:   32079.872 us/op
                 split·p0.90:   32210.944 us/op
                 split·p0.95:   32327.270 us/op
                 split·p0.99:   50387.354 us/op
                 split·p0.999:  55312.384 us/op
                 split·p0.9999: 55312.384 us/op
                 split·p1.00:   55312.384 us/op

Iteration   7: 32661.343 ±(99.9%) 625.101 us/op
                 split·p0.00:   31916.032 us/op
                 split·p0.50:   32145.408 us/op
                 split·p0.90:   32374.784 us/op
                 split·p0.95:   32571.392 us/op
                 split·p0.99:   55940.874 us/op
                 split·p0.999:  62390.272 us/op
                 split·p0.9999: 62390.272 us/op
                 split·p1.00:   62390.272 us/op

Iteration   8: 32669.053 ±(99.9%) 636.675 us/op
                 split·p0.00:   31948.800 us/op
                 split·p0.50:   32145.408 us/op
                 split·p0.90:   32374.784 us/op
                 split·p0.95:   32527.155 us/op
                 split·p0.99:   58357.187 us/op
                 split·p0.999:  59637.760 us/op
                 split·p0.9999: 59637.760 us/op
                 split·p1.00:   59637.760 us/op

Iteration   9: 32651.658 ±(99.9%) 697.840 us/op
                 split·p0.00:   31916.032 us/op
                 split·p0.50:   32079.872 us/op
                 split·p0.90:   32243.712 us/op
                 split·p0.95:   32342.016 us/op
                 split·p0.99:   59532.902 us/op
                 split·p0.999:  62914.560 us/op
                 split·p0.9999: 62914.560 us/op
                 split·p1.00:   62914.560 us/op

Iteration  10: 32501.920 ±(99.9%) 514.041 us/op
                 split·p0.00:   31850.496 us/op
                 split·p0.50:   32079.872 us/op
                 split·p0.90:   32210.944 us/op
                 split·p0.95:   32327.270 us/op
                 split·p0.99:   50975.867 us/op
                 split·p0.999:  51970.048 us/op
                 split·p0.9999: 51970.048 us/op
                 split·p1.00:   51970.048 us/op

Iteration  11: 32579.611 ±(99.9%) 585.747 us/op
                 split·p0.00:   31916.032 us/op
                 split·p0.50:   32112.640 us/op
                 split·p0.90:   32243.712 us/op
                 split·p0.95:   32309.248 us/op
                 split·p0.99:   50208.440 us/op
                 split·p0.999:  59899.904 us/op
                 split·p0.9999: 59899.904 us/op
                 split·p1.00:   59899.904 us/op

Iteration  12: 32435.336 ±(99.9%) 551.843 us/op
                 split·p0.00:   31817.728 us/op
                 split·p0.50:   31981.568 us/op
                 split·p0.90:   32112.640 us/op
                 split·p0.95:   32194.560 us/op
                 split·p0.99:   51589.939 us/op
                 split·p0.999:  55771.136 us/op
                 split·p0.9999: 55771.136 us/op
                 split·p1.00:   55771.136 us/op

Iteration  13: 32561.252 ±(99.9%) 580.662 us/op
                 split·p0.00:   31817.728 us/op
                 split·p0.50:   32079.872 us/op
                 split·p0.90:   32243.712 us/op
                 split·p0.95:   32374.784 us/op
                 split·p0.99:   52169.277 us/op
                 split·p0.999:  58523.648 us/op
                 split·p0.9999: 58523.648 us/op
                 split·p1.00:   58523.648 us/op

Iteration  14: 32495.111 ±(99.9%) 551.897 us/op
                 split·p0.00:   31883.264 us/op
                 split·p0.50:   32047.104 us/op
                 split·p0.90:   32178.176 us/op
                 split·p0.95:   32294.502 us/op
                 split·p0.99:   50880.184 us/op
                 split·p0.999:  56295.424 us/op
                 split·p0.9999: 56295.424 us/op
                 split·p1.00:   56295.424 us/op

Iteration  15: 32525.113 ±(99.9%) 604.888 us/op
                 split·p0.00:   31916.032 us/op
                 split·p0.50:   32047.104 us/op
                 split·p0.90:   32145.408 us/op
                 split·p0.95:   32210.944 us/op
                 split·p0.99:   55912.038 us/op
                 split·p0.999:  58195.968 us/op
                 split·p0.9999: 58195.968 us/op
                 split·p1.00:   58195.968 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  N = 4610
  mean =  32564.433 ±(99.9%) 150.086 us/op

  Histogram, us/op:
    [30000.000, 32500.000) = 4462 
    [32500.000, 35000.000) = 41 
    [35000.000, 37500.000) = 0 
    [37500.000, 40000.000) = 1 
    [40000.000, 42500.000) = 1 
    [42500.000, 45000.000) = 0 
    [45000.000, 47500.000) = 3 
    [47500.000, 50000.000) = 33 
    [50000.000, 52500.000) = 38 
    [52500.000, 55000.000) = 2 
    [55000.000, 57500.000) = 11 
    [57500.000, 60000.000) = 12 
    [60000.000, 62500.000) = 4 
    [62500.000, 65000.000) = 1 
    [65000.000, 67500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  31817.728 us/op
     p(50.0000) =  32079.872 us/op
     p(90.0000) =  32243.712 us/op
     p(95.0000) =  32342.016 us/op
     p(99.0000) =  50979.799 us/op
     p(99.9000) =  61527.491 us/op
     p(99.9900) =  65798.144 us/op
     p(99.9990) =  65798.144 us/op
     p(99.9999) =  65798.144 us/op
    p(100.0000) =  65798.144 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 94.92% complete, ETA 00:24:56
# Fork: 1 of 1
# Warmup Iteration   1: 68025.031 ±(99.9%) 20149.515 us/op
# Warmup Iteration   2: 66619.715 ±(99.9%) 22045.771 us/op
# Warmup Iteration   3: 67163.984 ±(99.9%) 22146.498 us/op
# Warmup Iteration   4: 66848.445 ±(99.9%) 21985.013 us/op
# Warmup Iteration   5: 67149.444 ±(99.9%) 22447.395 us/op
Iteration   1: 67121.667 ±(99.9%) 22434.736 us/op
                 mapToPair·p0.00:   23068.672 us/op
                 mapToPair·p0.50:   23396.352 us/op
                 mapToPair·p0.90:   221144.678 us/op
                 mapToPair·p0.95:   241172.480 us/op
                 mapToPair·p0.99:   260833.280 us/op
                 mapToPair·p0.999:  264241.152 us/op
                 mapToPair·p0.9999: 264241.152 us/op
                 mapToPair·p1.00:   264241.152 us/op

Iteration   2: 66928.209 ±(99.9%) 22176.222 us/op
                 mapToPair·p0.00:   22052.864 us/op
                 mapToPair·p0.50:   23363.584 us/op
                 mapToPair·p0.90:   219886.387 us/op
                 mapToPair·p0.95:   235706.778 us/op
                 mapToPair·p0.99:   255527.485 us/op
                 mapToPair·p0.999:  256638.976 us/op
                 mapToPair·p0.9999: 256638.976 us/op
                 mapToPair·p1.00:   256638.976 us/op

Iteration   3: 66381.115 ±(99.9%) 22060.088 us/op
                 mapToPair·p0.00:   23101.440 us/op
                 mapToPair·p0.50:   23363.584 us/op
                 mapToPair·p0.90:   218995.098 us/op
                 mapToPair·p0.95:   234199.450 us/op
                 mapToPair·p0.99:   257682.309 us/op
                 mapToPair·p0.999:  259522.560 us/op
                 mapToPair·p0.9999: 259522.560 us/op
                 mapToPair·p1.00:   259522.560 us/op

Iteration   4: 65842.553 ±(99.9%) 21807.428 us/op
                 mapToPair·p0.00:   23101.440 us/op
                 mapToPair·p0.50:   23330.816 us/op
                 mapToPair·p0.90:   221197.107 us/op
                 mapToPair·p0.95:   241591.910 us/op
                 mapToPair·p0.99:   255524.864 us/op
                 mapToPair·p0.999:  258998.272 us/op
                 mapToPair·p0.9999: 258998.272 us/op
                 mapToPair·p1.00:   258998.272 us/op

Iteration   5: 66634.602 ±(99.9%) 21987.901 us/op
                 mapToPair·p0.00:   23134.208 us/op
                 mapToPair·p0.50:   23330.816 us/op
                 mapToPair·p0.90:   225155.482 us/op
                 mapToPair·p0.95:   232888.730 us/op
                 mapToPair·p0.99:   261797.970 us/op
                 mapToPair·p0.999:  266076.160 us/op
                 mapToPair·p0.9999: 266076.160 us/op
                 mapToPair·p1.00:   266076.160 us/op

Iteration   6: 66921.310 ±(99.9%) 22195.807 us/op
                 mapToPair·p0.00:   23101.440 us/op
                 mapToPair·p0.50:   23314.432 us/op
                 mapToPair·p0.90:   220934.963 us/op
                 mapToPair·p0.95:   236309.709 us/op
                 mapToPair·p0.99:   262587.023 us/op
                 mapToPair·p0.999:  266338.304 us/op
                 mapToPair·p0.9999: 266338.304 us/op
                 mapToPair·p1.00:   266338.304 us/op

Iteration   7: 66578.500 ±(99.9%) 22597.020 us/op
                 mapToPair·p0.00:   23134.208 us/op
                 mapToPair·p0.50:   23330.816 us/op
                 mapToPair·p0.90:   218365.952 us/op
                 mapToPair·p0.95:   245891.072 us/op
                 mapToPair·p0.99:   259585.475 us/op
                 mapToPair·p0.999:  264765.440 us/op
                 mapToPair·p0.9999: 264765.440 us/op
                 mapToPair·p1.00:   264765.440 us/op

Iteration   8: 66794.510 ±(99.9%) 22738.237 us/op
                 mapToPair·p0.00:   23003.136 us/op
                 mapToPair·p0.50:   23298.048 us/op
                 mapToPair·p0.90:   221721.395 us/op
                 mapToPair·p0.95:   241893.376 us/op
                 mapToPair·p0.99:   252022.620 us/op
                 mapToPair·p0.999:  253493.248 us/op
                 mapToPair·p0.9999: 253493.248 us/op
                 mapToPair·p1.00:   253493.248 us/op

Iteration   9: 66317.658 ±(99.9%) 22429.776 us/op
                 mapToPair·p0.00:   23035.904 us/op
                 mapToPair·p0.50:   23298.048 us/op
                 mapToPair·p0.90:   218365.952 us/op
                 mapToPair·p0.95:   233727.590 us/op
                 mapToPair·p0.99:   263360.348 us/op
                 mapToPair·p0.999:  265814.016 us/op
                 mapToPair·p0.9999: 265814.016 us/op
                 mapToPair·p1.00:   265814.016 us/op

Iteration  10: 66562.658 ±(99.9%) 22259.110 us/op
                 mapToPair·p0.00:   23101.440 us/op
                 mapToPair·p0.50:   23396.352 us/op
                 mapToPair·p0.90:   219886.387 us/op
                 mapToPair·p0.95:   228432.282 us/op
                 mapToPair·p0.99:   258065.039 us/op
                 mapToPair·p0.999:  265289.728 us/op
                 mapToPair·p0.9999: 265289.728 us/op
                 mapToPair·p1.00:   265289.728 us/op

Iteration  11: 67001.603 ±(99.9%) 22648.298 us/op
                 mapToPair·p0.00:   23101.440 us/op
                 mapToPair·p0.50:   23298.048 us/op
                 mapToPair·p0.90:   222481.613 us/op
                 mapToPair·p0.95:   232010.547 us/op
                 mapToPair·p0.99:   261465.047 us/op
                 mapToPair·p0.999:  262668.288 us/op
                 mapToPair·p0.9999: 262668.288 us/op
                 mapToPair·p1.00:   262668.288 us/op

Iteration  12: 66755.625 ±(99.9%) 22299.371 us/op
                 mapToPair·p0.00:   23068.672 us/op
                 mapToPair·p0.50:   23330.816 us/op
                 mapToPair·p0.90:   218103.808 us/op
                 mapToPair·p0.95:   224840.909 us/op
                 mapToPair·p0.99:   259973.448 us/op
                 mapToPair·p0.999:  263716.864 us/op
                 mapToPair·p0.9999: 263716.864 us/op
                 mapToPair·p1.00:   263716.864 us/op

Iteration  13: 66799.097 ±(99.9%) 22491.569 us/op
                 mapToPair·p0.00:   22118.400 us/op
                 mapToPair·p0.50:   23330.816 us/op
                 mapToPair·p0.90:   219886.387 us/op
                 mapToPair·p0.95:   232036.762 us/op
                 mapToPair·p0.99:   258148.925 us/op
                 mapToPair·p0.999:  261357.568 us/op
                 mapToPair·p0.9999: 261357.568 us/op
                 mapToPair·p1.00:   261357.568 us/op

Iteration  14: 66871.405 ±(99.9%) 22516.823 us/op
                 mapToPair·p0.00:   23068.672 us/op
                 mapToPair·p0.50:   23330.816 us/op
                 mapToPair·p0.90:   220384.461 us/op
                 mapToPair·p0.95:   227776.922 us/op
                 mapToPair·p0.99:   260828.037 us/op
                 mapToPair·p0.999:  261095.424 us/op
                 mapToPair·p0.9999: 261095.424 us/op
                 mapToPair·p1.00:   261095.424 us/op

Iteration  15: 66739.896 ±(99.9%) 22445.278 us/op
                 mapToPair·p0.00:   23101.440 us/op
                 mapToPair·p0.50:   23330.816 us/op
                 mapToPair·p0.90:   217002.803 us/op
                 mapToPair·p0.95:   225417.626 us/op
                 mapToPair·p0.99:   259614.310 us/op
                 mapToPair·p0.999:  261619.712 us/op
                 mapToPair·p0.9999: 261619.712 us/op
                 mapToPair·p1.00:   261619.712 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  N = 2263
  mean =  66682.576 ±(99.9%) 5644.239 us/op

  Histogram, us/op:
    [     0.000,  25000.000) = 1577 
    [ 25000.000,  50000.000) = 182 
    [ 50000.000,  75000.000) = 16 
    [ 75000.000, 100000.000) = 2 
    [100000.000, 125000.000) = 0 
    [125000.000, 150000.000) = 0 
    [150000.000, 175000.000) = 13 
    [175000.000, 200000.000) = 31 
    [200000.000, 225000.000) = 293 
    [225000.000, 250000.000) = 96 
    [250000.000, 275000.000) = 53 

  Percentiles, us/op:
      p(0.0000) =  22052.864 us/op
     p(50.0000) =  23330.816 us/op
     p(90.0000) = 219938.816 us/op
     p(95.0000) = 230634.291 us/op
     p(99.0000) = 256733.348 us/op
     p(99.9000) = 266006.954 us/op
     p(99.9900) = 266338.304 us/op
     p(99.9990) = 266338.304 us/op
     p(99.9999) = 266338.304 us/op
    p(100.0000) = 266338.304 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 95.65% complete, ETA 00:21:22
# Fork: 1 of 1
# Warmup Iteration   1: 24223.565 ±(99.9%) 901.265 us/op
# Warmup Iteration   2: 22646.988 ±(99.9%) 249.110 us/op
# Warmup Iteration   3: 22637.498 ±(99.9%) 415.098 us/op
# Warmup Iteration   4: 22313.472 ±(99.9%) 261.906 us/op
# Warmup Iteration   5: 22477.228 ±(99.9%) 410.373 us/op
Iteration   1: 22523.424 ±(99.9%) 492.775 us/op
                 plusOne·p0.00:   21823.488 us/op
                 plusOne·p0.50:   21987.328 us/op
                 plusOne·p0.90:   22233.088 us/op
                 plusOne·p0.95:   23494.656 us/op
                 plusOne·p0.99:   44394.086 us/op
                 plusOne·p0.999:  54263.808 us/op
                 plusOne·p0.9999: 54263.808 us/op
                 plusOne·p1.00:   54263.808 us/op

Iteration   2: 22522.908 ±(99.9%) 497.224 us/op
                 plusOne·p0.00:   21790.720 us/op
                 plusOne·p0.50:   21987.328 us/op
                 plusOne·p0.90:   22183.936 us/op
                 plusOne·p0.95:   23093.248 us/op
                 plusOne·p0.99:   42595.123 us/op
                 plusOne·p0.999:  52690.944 us/op
                 plusOne·p0.9999: 52690.944 us/op
                 plusOne·p1.00:   52690.944 us/op

Iteration   3: 22722.076 ±(99.9%) 776.898 us/op
                 plusOne·p0.00:   21790.720 us/op
                 plusOne·p0.50:   21954.560 us/op
                 plusOne·p0.90:   22118.400 us/op
                 plusOne·p0.95:   23461.888 us/op
                 plusOne·p0.99:   59553.874 us/op
                 plusOne·p0.999:  67502.080 us/op
                 plusOne·p0.9999: 67502.080 us/op
                 plusOne·p1.00:   67502.080 us/op

Iteration   4: 22626.749 ±(99.9%) 697.306 us/op
                 plusOne·p0.00:   21757.952 us/op
                 plusOne·p0.50:   21987.328 us/op
                 plusOne·p0.90:   22085.632 us/op
                 plusOne·p0.95:   22408.397 us/op
                 plusOne·p0.99:   55741.645 us/op
                 plusOne·p0.999:  66650.112 us/op
                 plusOne·p0.9999: 66650.112 us/op
                 plusOne·p1.00:   66650.112 us/op

Iteration   5: 22715.075 ±(99.9%) 723.186 us/op
                 plusOne·p0.00:   21790.720 us/op
                 plusOne·p0.50:   22020.096 us/op
                 plusOne·p0.90:   22151.168 us/op
                 plusOne·p0.95:   22608.282 us/op
                 plusOne·p0.99:   58167.788 us/op
                 plusOne·p0.999:  63373.312 us/op
                 plusOne·p0.9999: 63373.312 us/op
                 plusOne·p1.00:   63373.312 us/op

Iteration   6: 22791.823 ±(99.9%) 724.226 us/op
                 plusOne·p0.00:   21790.720 us/op
                 plusOne·p0.50:   22020.096 us/op
                 plusOne·p0.90:   22249.472 us/op
                 plusOne·p0.95:   23691.264 us/op
                 plusOne·p0.99:   54958.490 us/op
                 plusOne·p0.999:  64749.568 us/op
                 plusOne·p0.9999: 64749.568 us/op
                 plusOne·p1.00:   64749.568 us/op

Iteration   7: 22933.391 ±(99.9%) 797.004 us/op
                 plusOne·p0.00:   21823.488 us/op
                 plusOne·p0.50:   22052.864 us/op
                 plusOne·p0.90:   22511.616 us/op
                 plusOne·p0.95:   23837.082 us/op
                 plusOne·p0.99:   59180.974 us/op
                 plusOne·p0.999:  71696.384 us/op
                 plusOne·p0.9999: 71696.384 us/op
                 plusOne·p1.00:   71696.384 us/op

Iteration   8: 22752.908 ±(99.9%) 717.961 us/op
                 plusOne·p0.00:   21823.488 us/op
                 plusOne·p0.50:   22020.096 us/op
                 plusOne·p0.90:   22278.963 us/op
                 plusOne·p0.95:   23527.424 us/op
                 plusOne·p0.99:   56289.526 us/op
                 plusOne·p0.999:  63438.848 us/op
                 plusOne·p0.9999: 63438.848 us/op
                 plusOne·p1.00:   63438.848 us/op

Iteration   9: 22832.862 ±(99.9%) 756.660 us/op
                 plusOne·p0.00:   21823.488 us/op
                 plusOne·p0.50:   22052.864 us/op
                 plusOne·p0.90:   22383.821 us/op
                 plusOne·p0.95:   23625.728 us/op
                 plusOne·p0.99:   53546.189 us/op
                 plusOne·p0.999:  77201.408 us/op
                 plusOne·p0.9999: 77201.408 us/op
                 plusOne·p1.00:   77201.408 us/op

Iteration  10: 22865.090 ±(99.9%) 719.462 us/op
                 plusOne·p0.00:   21889.024 us/op
                 plusOne·p0.50:   22085.632 us/op
                 plusOne·p0.90:   22315.008 us/op
                 plusOne·p0.95:   22580.429 us/op
                 plusOne·p0.99:   55081.697 us/op
                 plusOne·p0.999:  64421.888 us/op
                 plusOne·p0.9999: 64421.888 us/op
                 plusOne·p1.00:   64421.888 us/op

Iteration  11: 23043.228 ±(99.9%) 711.358 us/op
                 plusOne·p0.00:   21889.024 us/op
                 plusOne·p0.50:   22151.168 us/op
                 plusOne·p0.90:   23724.032 us/op
                 plusOne·p0.95:   23855.104 us/op
                 plusOne·p0.99:   54388.326 us/op
                 plusOne·p0.999:  65339.392 us/op
                 plusOne·p0.9999: 65339.392 us/op
                 plusOne·p1.00:   65339.392 us/op

Iteration  12: 22924.072 ±(99.9%) 797.420 us/op
                 plusOne·p0.00:   21889.024 us/op
                 plusOne·p0.50:   22151.168 us/op
                 plusOne·p0.90:   22347.776 us/op
                 plusOne·p0.95:   23134.208 us/op
                 plusOne·p0.99:   60735.488 us/op
                 plusOne·p0.999:  69599.232 us/op
                 plusOne·p0.9999: 69599.232 us/op
                 plusOne·p1.00:   69599.232 us/op

Iteration  13: 22847.451 ±(99.9%) 735.204 us/op
                 plusOne·p0.00:   21856.256 us/op
                 plusOne·p0.50:   22151.168 us/op
                 plusOne·p0.90:   22347.776 us/op
                 plusOne·p0.95:   23026.074 us/op
                 plusOne·p0.99:   54044.918 us/op
                 plusOne·p0.999:  66912.256 us/op
                 plusOne·p0.9999: 66912.256 us/op
                 plusOne·p1.00:   66912.256 us/op

Iteration  14: 22749.556 ±(99.9%) 680.394 us/op
                 plusOne·p0.00:   21823.488 us/op
                 plusOne·p0.50:   22085.632 us/op
                 plusOne·p0.90:   22380.544 us/op
                 plusOne·p0.95:   22801.613 us/op
                 plusOne·p0.99:   51877.642 us/op
                 plusOne·p0.999:  66322.432 us/op
                 plusOne·p0.9999: 66322.432 us/op
                 plusOne·p1.00:   66322.432 us/op

Iteration  15: 22882.337 ±(99.9%) 664.658 us/op
                 plusOne·p0.00:   21856.256 us/op
                 plusOne·p0.50:   22118.400 us/op
                 plusOne·p0.90:   22380.544 us/op
                 plusOne·p0.95:   23481.549 us/op
                 plusOne·p0.99:   52091.945 us/op
                 plusOne·p0.999:  55967.744 us/op
                 plusOne·p0.9999: 55967.744 us/op
                 plusOne·p1.00:   55967.744 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  N = 6585
  mean =  22781.299 ±(99.9%) 180.599 us/op

  Histogram, us/op:
    [20000.000, 25000.000) = 6382 
    [25000.000, 30000.000) = 56 
    [30000.000, 35000.000) = 27 
    [35000.000, 40000.000) = 15 
    [40000.000, 45000.000) = 7 
    [45000.000, 50000.000) = 9 
    [50000.000, 55000.000) = 40 
    [55000.000, 60000.000) = 20 
    [60000.000, 65000.000) = 19 
    [65000.000, 70000.000) = 8 
    [70000.000, 75000.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  21757.952 us/op
     p(50.0000) =  22052.864 us/op
     p(90.0000) =  22347.776 us/op
     p(95.0000) =  23625.728 us/op
     p(99.0000) =  53289.943 us/op
     p(99.9000) =  66758.640 us/op
     p(99.9900) =  77201.408 us/op
     p(99.9990) =  77201.408 us/op
     p(99.9999) =  77201.408 us/op
    p(100.0000) =  77201.408 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 96.37% complete, ETA 00:17:49
# Fork: 1 of 1
# Warmup Iteration   1: 43563.204 ±(99.9%) 2214.195 us/op
# Warmup Iteration   2: 41548.192 ±(99.9%) 434.357 us/op
# Warmup Iteration   3: 41175.756 ±(99.9%) 510.041 us/op
# Warmup Iteration   4: 38523.825 ±(99.9%) 570.021 us/op
# Warmup Iteration   5: 40146.196 ±(99.9%) 636.239 us/op
Iteration   1: 39769.949 ±(99.9%) 572.589 us/op
                 sort·p0.00:   39059.456 us/op
                 sort·p0.50:   39321.600 us/op
                 sort·p0.90:   39452.672 us/op
                 sort·p0.95:   39803.290 us/op
                 sort·p0.99:   56383.898 us/op
                 sort·p0.999:  68550.656 us/op
                 sort·p0.9999: 68550.656 us/op
                 sort·p1.00:   68550.656 us/op

Iteration   2: 39548.256 ±(99.9%) 859.867 us/op
                 sort·p0.00:   38600.704 us/op
                 sort·p0.50:   38862.848 us/op
                 sort·p0.90:   39059.456 us/op
                 sort·p0.95:   40258.765 us/op
                 sort·p0.99:   71006.945 us/op
                 sort·p0.999:  73924.608 us/op
                 sort·p0.9999: 73924.608 us/op
                 sort·p1.00:   73924.608 us/op

Iteration   3: 40001.077 ±(99.9%) 642.657 us/op
                 sort·p0.00:   39256.064 us/op
                 sort·p0.50:   39485.440 us/op
                 sort·p0.90:   39773.798 us/op
                 sort·p0.95:   40006.451 us/op
                 sort·p0.99:   60449.096 us/op
                 sort·p0.999:  67764.224 us/op
                 sort·p0.9999: 67764.224 us/op
                 sort·p1.00:   67764.224 us/op

Iteration   4: 41847.067 ±(99.9%) 880.636 us/op
                 sort·p0.00:   40828.928 us/op
                 sort·p0.50:   41091.072 us/op
                 sort·p0.90:   41484.288 us/op
                 sort·p0.95:   42008.576 us/op
                 sort·p0.99:   72377.958 us/op
                 sort·p0.999:  72876.032 us/op
                 sort·p0.9999: 72876.032 us/op
                 sort·p1.00:   72876.032 us/op

Iteration   5: 39624.931 ±(99.9%) 1101.414 us/op
                 sort·p0.00:   38469.632 us/op
                 sort·p0.50:   38797.312 us/op
                 sort·p0.90:   38993.920 us/op
                 sort·p0.95:   39124.992 us/op
                 sort·p0.99:   77489.766 us/op
                 sort·p0.999:  85065.728 us/op
                 sort·p0.9999: 85065.728 us/op
                 sort·p1.00:   85065.728 us/op

Iteration   6: 42833.377 ±(99.9%) 1406.417 us/op
                 sort·p0.00:   41484.288 us/op
                 sort·p0.50:   41811.968 us/op
                 sort·p0.90:   42074.112 us/op
                 sort·p0.95:   44023.808 us/op
                 sort·p0.99:   85216.461 us/op
                 sort·p0.999:  104333.312 us/op
                 sort·p0.9999: 104333.312 us/op
                 sort·p1.00:   104333.312 us/op

Iteration   7: 40952.479 ±(99.9%) 1123.488 us/op
                 sort·p0.00:   39911.424 us/op
                 sort·p0.50:   40108.032 us/op
                 sort·p0.90:   40370.176 us/op
                 sort·p0.95:   40632.320 us/op
                 sort·p0.99:   79252.685 us/op
                 sort·p0.999:  80216.064 us/op
                 sort·p0.9999: 80216.064 us/op
                 sort·p1.00:   80216.064 us/op

Iteration   8: 41365.132 ±(99.9%) 1401.069 us/op
                 sort·p0.00:   40042.496 us/op
                 sort·p0.50:   40304.640 us/op
                 sort·p0.90:   40566.784 us/op
                 sort·p0.95:   40874.803 us/op
                 sort·p0.99:   88376.607 us/op
                 sort·p0.999:  92012.544 us/op
                 sort·p0.9999: 92012.544 us/op
                 sort·p1.00:   92012.544 us/op

Iteration   9: 41693.730 ±(99.9%) 1207.246 us/op
                 sort·p0.00:   40435.712 us/op
                 sort·p0.50:   40632.320 us/op
                 sort·p0.90:   40960.000 us/op
                 sort·p0.95:   46989.312 us/op
                 sort·p0.99:   81532.027 us/op
                 sort·p0.999:  84541.440 us/op
                 sort·p0.9999: 84541.440 us/op
                 sort·p1.00:   84541.440 us/op

Iteration  10: 40838.023 ±(99.9%) 1282.641 us/op
                 sort·p0.00:   39714.816 us/op
                 sort·p0.50:   39911.424 us/op
                 sort·p0.90:   40108.032 us/op
                 sort·p0.95:   40547.123 us/op
                 sort·p0.99:   84129.874 us/op
                 sort·p0.999:  88342.528 us/op
                 sort·p0.9999: 88342.528 us/op
                 sort·p1.00:   88342.528 us/op

Iteration  11: 41031.714 ±(99.9%) 1450.061 us/op
                 sort·p0.00:   39649.280 us/op
                 sort·p0.50:   39911.424 us/op
                 sort·p0.90:   40075.264 us/op
                 sort·p0.95:   42221.568 us/op
                 sort·p0.99:   87713.382 us/op
                 sort·p0.999:  89522.176 us/op
                 sort·p0.9999: 89522.176 us/op
                 sort·p1.00:   89522.176 us/op

Iteration  12: 41034.668 ±(99.9%) 1384.583 us/op
                 sort·p0.00:   39321.600 us/op
                 sort·p0.50:   39976.960 us/op
                 sort·p0.90:   40239.104 us/op
                 sort·p0.95:   44400.640 us/op
                 sort·p0.99:   87117.005 us/op
                 sort·p0.999:  89784.320 us/op
                 sort·p0.9999: 89784.320 us/op
                 sort·p1.00:   89784.320 us/op

Iteration  13: 41324.510 ±(99.9%) 1175.716 us/op
                 sort·p0.00:   39714.816 us/op
                 sort·p0.50:   40435.712 us/op
                 sort·p0.90:   40697.856 us/op
                 sort·p0.95:   41212.314 us/op
                 sort·p0.99:   79691.776 us/op
                 sort·p0.999:  79953.920 us/op
                 sort·p0.9999: 79953.920 us/op
                 sort·p1.00:   79953.920 us/op

Iteration  14: 40131.457 ±(99.9%) 1109.263 us/op
                 sort·p0.00:   38600.704 us/op
                 sort·p0.50:   39321.600 us/op
                 sort·p0.90:   39583.744 us/op
                 sort·p0.95:   39813.120 us/op
                 sort·p0.99:   77856.768 us/op
                 sort·p0.999:  81920.000 us/op
                 sort·p0.9999: 81920.000 us/op
                 sort·p1.00:   81920.000 us/op

Iteration  15: 41062.064 ±(99.9%) 1170.828 us/op
                 sort·p0.00:   39518.208 us/op
                 sort·p0.50:   40239.104 us/op
                 sort·p0.90:   40501.248 us/op
                 sort·p0.95:   42565.632 us/op
                 sort·p0.99:   79554.150 us/op
                 sort·p0.999:  86638.592 us/op
                 sort·p0.9999: 86638.592 us/op
                 sort·p1.00:   86638.592 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  N = 3675
  mean =  40851.362 ±(99.9%) 295.031 us/op

  Histogram, us/op:
    [ 30000.000,  35000.000) = 0 
    [ 35000.000,  40000.000) = 1844 
    [ 40000.000,  45000.000) = 1709 
    [ 45000.000,  50000.000) = 45 
    [ 50000.000,  55000.000) = 5 
    [ 55000.000,  60000.000) = 5 
    [ 60000.000,  65000.000) = 4 
    [ 65000.000,  70000.000) = 6 
    [ 70000.000,  75000.000) = 13 
    [ 75000.000,  80000.000) = 20 
    [ 80000.000,  85000.000) = 6 
    [ 85000.000,  90000.000) = 16 
    [ 90000.000,  95000.000) = 1 
    [ 95000.000, 100000.000) = 0 
    [100000.000, 105000.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  38469.632 us/op
     p(50.0000) =  39976.960 us/op
     p(90.0000) =  41615.360 us/op
     p(95.0000) =  41943.040 us/op
     p(99.0000) =  77578.895 us/op
     p(99.9000) =  89607.111 us/op
     p(99.9900) = 104333.312 us/op
     p(99.9990) = 104333.312 us/op
     p(99.9999) = 104333.312 us/op
    p(100.0000) = 104333.312 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 97.10% complete, ETA 00:14:15
# Fork: 1 of 1
# Warmup Iteration   1: 829.908 ±(99.9%) 15.393 us/op
# Warmup Iteration   2: 817.561 ±(99.9%) 11.679 us/op
# Warmup Iteration   3: 815.294 ±(99.9%) 9.444 us/op
# Warmup Iteration   4: 818.100 ±(99.9%) 13.914 us/op
# Warmup Iteration   5: 814.993 ±(99.9%) 10.781 us/op
Iteration   1: 743.441 ±(99.9%) 8.630 us/op
                 concatenateStrings·p0.00:   680.960 us/op
                 concatenateStrings·p0.50:   723.968 us/op
                 concatenateStrings·p0.90:   747.520 us/op
                 concatenateStrings·p0.95:   757.760 us/op
                 concatenateStrings·p0.99:   788.480 us/op
                 concatenateStrings·p0.999:  6035.538 us/op
                 concatenateStrings·p0.9999: 10407.379 us/op
                 concatenateStrings·p1.00:   10469.376 us/op

Iteration   2: 745.249 ±(99.9%) 9.959 us/op
                 concatenateStrings·p0.00:   683.008 us/op
                 concatenateStrings·p0.50:   723.968 us/op
                 concatenateStrings·p0.90:   747.520 us/op
                 concatenateStrings·p0.95:   756.736 us/op
                 concatenateStrings·p0.99:   787.456 us/op
                 concatenateStrings·p0.999:  7040.139 us/op
                 concatenateStrings·p0.9999: 10993.297 us/op
                 concatenateStrings·p1.00:   11010.048 us/op

Iteration   3: 745.386 ±(99.9%) 9.640 us/op
                 concatenateStrings·p0.00:   681.984 us/op
                 concatenateStrings·p0.50:   723.968 us/op
                 concatenateStrings·p0.90:   747.520 us/op
                 concatenateStrings·p0.95:   756.736 us/op
                 concatenateStrings·p0.99:   794.624 us/op
                 concatenateStrings·p0.999:  5838.078 us/op
                 concatenateStrings·p0.9999: 13456.638 us/op
                 concatenateStrings·p1.00:   13959.168 us/op

Iteration   4: 743.414 ±(99.9%) 11.413 us/op
                 concatenateStrings·p0.00:   677.888 us/op
                 concatenateStrings·p0.50:   719.872 us/op
                 concatenateStrings·p0.90:   742.400 us/op
                 concatenateStrings·p0.95:   750.592 us/op
                 concatenateStrings·p0.99:   781.312 us/op
                 concatenateStrings·p0.999:  7745.372 us/op
                 concatenateStrings·p0.9999: 17913.348 us/op
                 concatenateStrings·p1.00:   21430.272 us/op

Iteration   5: 742.174 ±(99.9%) 9.742 us/op
                 concatenateStrings·p0.00:   676.864 us/op
                 concatenateStrings·p0.50:   720.896 us/op
                 concatenateStrings·p0.90:   744.448 us/op
                 concatenateStrings·p0.95:   752.640 us/op
                 concatenateStrings·p0.99:   778.240 us/op
                 concatenateStrings·p0.999:  7261.143 us/op
                 concatenateStrings·p0.9999: 10849.970 us/op
                 concatenateStrings·p1.00:   10895.360 us/op

Iteration   6: 742.213 ±(99.9%) 8.913 us/op
                 concatenateStrings·p0.00:   671.744 us/op
                 concatenateStrings·p0.50:   722.944 us/op
                 concatenateStrings·p0.90:   745.472 us/op
                 concatenateStrings·p0.95:   754.688 us/op
                 concatenateStrings·p0.99:   778.240 us/op
                 concatenateStrings·p0.999:  5826.953 us/op
                 concatenateStrings·p0.9999: 12080.028 us/op
                 concatenateStrings·p1.00:   12238.848 us/op

Iteration   7: 741.771 ±(99.9%) 9.474 us/op
                 concatenateStrings·p0.00:   679.936 us/op
                 concatenateStrings·p0.50:   720.896 us/op
                 concatenateStrings·p0.90:   744.448 us/op
                 concatenateStrings·p0.95:   752.640 us/op
                 concatenateStrings·p0.99:   786.729 us/op
                 concatenateStrings·p0.999:  6223.790 us/op
                 concatenateStrings·p0.9999: 14257.896 us/op
                 concatenateStrings·p1.00:   15400.960 us/op

Iteration   8: 745.780 ±(99.9%) 12.656 us/op
                 concatenateStrings·p0.00:   675.840 us/op
                 concatenateStrings·p0.50:   719.872 us/op
                 concatenateStrings·p0.90:   742.400 us/op
                 concatenateStrings·p0.95:   750.592 us/op
                 concatenateStrings·p0.99:   775.168 us/op
                 concatenateStrings·p0.999:  8677.327 us/op
                 concatenateStrings·p0.9999: 19991.042 us/op
                 concatenateStrings·p1.00:   21004.288 us/op

Iteration   9: 741.794 ±(99.9%) 9.973 us/op
                 concatenateStrings·p0.00:   677.888 us/op
                 concatenateStrings·p0.50:   719.872 us/op
                 concatenateStrings·p0.90:   743.424 us/op
                 concatenateStrings·p0.95:   752.640 us/op
                 concatenateStrings·p0.99:   779.264 us/op
                 concatenateStrings·p0.999:  7412.531 us/op
                 concatenateStrings·p0.9999: 10752.205 us/op
                 concatenateStrings·p1.00:   10780.672 us/op

Iteration  10: 745.287 ±(99.9%) 12.209 us/op
                 concatenateStrings·p0.00:   679.936 us/op
                 concatenateStrings·p0.50:   720.896 us/op
                 concatenateStrings·p0.90:   745.472 us/op
                 concatenateStrings·p0.95:   753.664 us/op
                 concatenateStrings·p0.99:   780.288 us/op
                 concatenateStrings·p0.999:  8798.290 us/op
                 concatenateStrings·p0.9999: 20668.318 us/op
                 concatenateStrings·p1.00:   21037.056 us/op

Iteration  11: 743.390 ±(99.9%) 11.082 us/op
                 concatenateStrings·p0.00:   674.816 us/op
                 concatenateStrings·p0.50:   720.896 us/op
                 concatenateStrings·p0.90:   744.448 us/op
                 concatenateStrings·p0.95:   753.664 us/op
                 concatenateStrings·p0.99:   779.264 us/op
                 concatenateStrings·p0.999:  7497.155 us/op
                 concatenateStrings·p0.9999: 16301.875 us/op
                 concatenateStrings·p1.00:   17006.592 us/op

Iteration  12: 743.468 ±(99.9%) 10.806 us/op
                 concatenateStrings·p0.00:   684.032 us/op
                 concatenateStrings·p0.50:   720.896 us/op
                 concatenateStrings·p0.90:   743.424 us/op
                 concatenateStrings·p0.95:   752.640 us/op
                 concatenateStrings·p0.99:   775.168 us/op
                 concatenateStrings·p0.999:  6763.995 us/op
                 concatenateStrings·p0.9999: 16677.811 us/op
                 concatenateStrings·p1.00:   19202.048 us/op

Iteration  13: 738.153 ±(99.9%) 9.267 us/op
                 concatenateStrings·p0.00:   675.840 us/op
                 concatenateStrings·p0.50:   718.848 us/op
                 concatenateStrings·p0.90:   741.376 us/op
                 concatenateStrings·p0.95:   749.568 us/op
                 concatenateStrings·p0.99:   774.144 us/op
                 concatenateStrings·p0.999:  5433.000 us/op
                 concatenateStrings·p0.9999: 15572.166 us/op
                 concatenateStrings·p1.00:   17825.792 us/op

Iteration  14: 739.860 ±(99.9%) 9.415 us/op
                 concatenateStrings·p0.00:   679.936 us/op
                 concatenateStrings·p0.50:   719.872 us/op
                 concatenateStrings·p0.90:   743.424 us/op
                 concatenateStrings·p0.95:   751.616 us/op
                 concatenateStrings·p0.99:   781.312 us/op
                 concatenateStrings·p0.999:  5852.348 us/op
                 concatenateStrings·p0.9999: 14603.620 us/op
                 concatenateStrings·p1.00:   15712.256 us/op

Iteration  15: 740.419 ±(99.9%) 11.405 us/op
                 concatenateStrings·p0.00:   677.888 us/op
                 concatenateStrings·p0.50:   719.872 us/op
                 concatenateStrings·p0.90:   741.376 us/op
                 concatenateStrings·p0.95:   750.592 us/op
                 concatenateStrings·p0.99:   777.216 us/op
                 concatenateStrings·p0.999:  5922.980 us/op
                 concatenateStrings·p0.9999: 25428.673 us/op
                 concatenateStrings·p1.00:   27066.368 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 201777
  mean =    742.781 ±(99.9%) 2.677 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 200982 
    [ 2500.000,  5000.000) = 478 
    [ 5000.000,  7500.000) = 151 
    [ 7500.000, 10000.000) = 65 
    [10000.000, 12500.000) = 83 
    [12500.000, 15000.000) = 6 
    [15000.000, 17500.000) = 3 
    [17500.000, 20000.000) = 4 
    [20000.000, 22500.000) = 4 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    671.744 us/op
     p(50.0000) =    720.896 us/op
     p(90.0000) =    744.448 us/op
     p(95.0000) =    752.640 us/op
     p(99.0000) =    780.288 us/op
     p(99.9000) =   6639.157 us/op
     p(99.9900) =  12387.028 us/op
     p(99.9990) =  22363.648 us/op
     p(99.9999) =  27066.368 us/op
    p(100.0000) =  27066.368 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 97.82% complete, ETA 00:10:42
# Fork: 1 of 1
# Warmup Iteration   1: 11022.259 ±(99.9%) 176.704 us/op
# Warmup Iteration   2: 10852.132 ±(99.9%) 127.449 us/op
# Warmup Iteration   3: 10858.394 ±(99.9%) 132.828 us/op
# Warmup Iteration   4: 10816.667 ±(99.9%) 118.710 us/op
# Warmup Iteration   5: 10784.437 ±(99.9%) 115.545 us/op
Iteration   1: 10826.824 ±(99.9%) 155.639 us/op
                 concatenateStrings·p0.00:   10289.152 us/op
                 concatenateStrings·p0.50:   10584.064 us/op
                 concatenateStrings·p0.90:   10764.288 us/op
                 concatenateStrings·p0.95:   10842.931 us/op
                 concatenateStrings·p0.99:   17262.182 us/op
                 concatenateStrings·p0.999:  36962.304 us/op
                 concatenateStrings·p0.9999: 36962.304 us/op
                 concatenateStrings·p1.00:   36962.304 us/op

Iteration   2: 10846.546 ±(99.9%) 103.629 us/op
                 concatenateStrings·p0.00:   10289.152 us/op
                 concatenateStrings·p0.50:   10698.752 us/op
                 concatenateStrings·p0.90:   10797.056 us/op
                 concatenateStrings·p0.95:   10846.208 us/op
                 concatenateStrings·p0.99:   15551.037 us/op
                 concatenateStrings·p0.999:  25198.592 us/op
                 concatenateStrings·p0.9999: 25198.592 us/op
                 concatenateStrings·p1.00:   25198.592 us/op

Iteration   3: 10816.774 ±(99.9%) 135.730 us/op
                 concatenateStrings·p0.00:   10240.000 us/op
                 concatenateStrings·p0.50:   10584.064 us/op
                 concatenateStrings·p0.90:   10829.824 us/op
                 concatenateStrings·p0.95:   11108.352 us/op
                 concatenateStrings·p0.99:   17063.936 us/op
                 concatenateStrings·p0.999:  30670.848 us/op
                 concatenateStrings·p0.9999: 30670.848 us/op
                 concatenateStrings·p1.00:   30670.848 us/op

Iteration   4: 10827.836 ±(99.9%) 123.580 us/op
                 concatenateStrings·p0.00:   10289.152 us/op
                 concatenateStrings·p0.50:   10616.832 us/op
                 concatenateStrings·p0.90:   10797.056 us/op
                 concatenateStrings·p0.95:   10937.958 us/op
                 concatenateStrings·p0.99:   18956.943 us/op
                 concatenateStrings·p0.999:  21331.968 us/op
                 concatenateStrings·p0.9999: 21331.968 us/op
                 concatenateStrings·p1.00:   21331.968 us/op

Iteration   5: 10803.716 ±(99.9%) 112.612 us/op
                 concatenateStrings·p0.00:   10256.384 us/op
                 concatenateStrings·p0.50:   10616.832 us/op
                 concatenateStrings·p0.90:   10780.672 us/op
                 concatenateStrings·p0.95:   10846.208 us/op
                 concatenateStrings·p0.99:   15928.852 us/op
                 concatenateStrings·p0.999:  24870.912 us/op
                 concatenateStrings·p0.9999: 24870.912 us/op
                 concatenateStrings·p1.00:   24870.912 us/op

Iteration   6: 10691.480 ±(99.9%) 84.875 us/op
                 concatenateStrings·p0.00:   10338.304 us/op
                 concatenateStrings·p0.50:   10534.912 us/op
                 concatenateStrings·p0.90:   10731.520 us/op
                 concatenateStrings·p0.95:   10829.824 us/op
                 concatenateStrings·p0.99:   14164.951 us/op
                 concatenateStrings·p0.999:  21692.416 us/op
                 concatenateStrings·p0.9999: 21692.416 us/op
                 concatenateStrings·p1.00:   21692.416 us/op

Iteration   7: 10798.295 ±(99.9%) 132.643 us/op
                 concatenateStrings·p0.00:   10305.536 us/op
                 concatenateStrings·p0.50:   10567.680 us/op
                 concatenateStrings·p0.90:   10764.288 us/op
                 concatenateStrings·p0.95:   10998.579 us/op
                 concatenateStrings·p0.99:   18053.857 us/op
                 concatenateStrings·p0.999:  27590.656 us/op
                 concatenateStrings·p0.9999: 27590.656 us/op
                 concatenateStrings·p1.00:   27590.656 us/op

Iteration   8: 10776.029 ±(99.9%) 105.906 us/op
                 concatenateStrings·p0.00:   10305.536 us/op
                 concatenateStrings·p0.50:   10600.448 us/op
                 concatenateStrings·p0.90:   10764.288 us/op
                 concatenateStrings·p0.95:   10887.987 us/op
                 concatenateStrings·p0.99:   15480.259 us/op
                 concatenateStrings·p0.999:  21626.880 us/op
                 concatenateStrings·p0.9999: 21626.880 us/op
                 concatenateStrings·p1.00:   21626.880 us/op

Iteration   9: 10850.477 ±(99.9%) 141.677 us/op
                 concatenateStrings·p0.00:   10305.536 us/op
                 concatenateStrings·p0.50:   10633.216 us/op
                 concatenateStrings·p0.90:   10747.904 us/op
                 concatenateStrings·p0.95:   10860.954 us/op
                 concatenateStrings·p0.99:   19526.451 us/op
                 concatenateStrings·p0.999:  26673.152 us/op
                 concatenateStrings·p0.9999: 26673.152 us/op
                 concatenateStrings·p1.00:   26673.152 us/op

Iteration  10: 10820.018 ±(99.9%) 124.435 us/op
                 concatenateStrings·p0.00:   10354.688 us/op
                 concatenateStrings·p0.50:   10600.448 us/op
                 concatenateStrings·p0.90:   10797.056 us/op
                 concatenateStrings·p0.95:   11014.144 us/op
                 concatenateStrings·p0.99:   15605.760 us/op
                 concatenateStrings·p0.999:  28966.912 us/op
                 concatenateStrings·p0.9999: 28966.912 us/op
                 concatenateStrings·p1.00:   28966.912 us/op

Iteration  11: 10880.759 ±(99.9%) 115.036 us/op
                 concatenateStrings·p0.00:   10387.456 us/op
                 concatenateStrings·p0.50:   10698.752 us/op
                 concatenateStrings·p0.90:   10829.824 us/op
                 concatenateStrings·p0.95:   10960.896 us/op
                 concatenateStrings·p0.99:   16809.984 us/op
                 concatenateStrings·p0.999:  23265.280 us/op
                 concatenateStrings·p0.9999: 23265.280 us/op
                 concatenateStrings·p1.00:   23265.280 us/op

Iteration  12: 10875.303 ±(99.9%) 160.318 us/op
                 concatenateStrings·p0.00:   10338.304 us/op
                 concatenateStrings·p0.50:   10649.600 us/op
                 concatenateStrings·p0.90:   10780.672 us/op
                 concatenateStrings·p0.95:   10862.592 us/op
                 concatenateStrings·p0.99:   19116.851 us/op
                 concatenateStrings·p0.999:  40435.712 us/op
                 concatenateStrings·p0.9999: 40435.712 us/op
                 concatenateStrings·p1.00:   40435.712 us/op

Iteration  13: 10804.424 ±(99.9%) 99.186 us/op
                 concatenateStrings·p0.00:   10321.920 us/op
                 concatenateStrings·p0.50:   10633.216 us/op
                 concatenateStrings·p0.90:   10813.440 us/op
                 concatenateStrings·p0.95:   11141.120 us/op
                 concatenateStrings·p0.99:   15581.839 us/op
                 concatenateStrings·p0.999:  21692.416 us/op
                 concatenateStrings·p0.9999: 21692.416 us/op
                 concatenateStrings·p1.00:   21692.416 us/op

Iteration  14: 10810.216 ±(99.9%) 123.894 us/op
                 concatenateStrings·p0.00:   10289.152 us/op
                 concatenateStrings·p0.50:   10616.832 us/op
                 concatenateStrings·p0.90:   10797.056 us/op
                 concatenateStrings·p0.95:   10928.128 us/op
                 concatenateStrings·p0.99:   15924.593 us/op
                 concatenateStrings·p0.999:  28049.408 us/op
                 concatenateStrings·p0.9999: 28049.408 us/op
                 concatenateStrings·p1.00:   28049.408 us/op

Iteration  15: 10794.101 ±(99.9%) 110.538 us/op
                 concatenateStrings·p0.00:   10289.152 us/op
                 concatenateStrings·p0.50:   10649.600 us/op
                 concatenateStrings·p0.90:   10764.288 us/op
                 concatenateStrings·p0.95:   10873.242 us/op
                 concatenateStrings·p0.99:   15272.182 us/op
                 concatenateStrings·p0.999:  22839.296 us/op
                 concatenateStrings·p0.9999: 22839.296 us/op
                 concatenateStrings·p1.00:   22839.296 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 13864
  mean =  10814.675 ±(99.9%) 31.807 us/op

  Histogram, us/op:
    [10000.000, 12500.000) = 13308 
    [12500.000, 15000.000) = 362 
    [15000.000, 17500.000) = 90 
    [17500.000, 20000.000) = 49 
    [20000.000, 22500.000) = 42 
    [22500.000, 25000.000) = 5 
    [25000.000, 27500.000) = 2 
    [27500.000, 30000.000) = 3 
    [30000.000, 32500.000) = 1 
    [32500.000, 35000.000) = 0 
    [35000.000, 37500.000) = 1 
    [37500.000, 40000.000) = 0 
    [40000.000, 42500.000) = 1 
    [42500.000, 45000.000) = 0 
    [45000.000, 47500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  10240.000 us/op
     p(50.0000) =  10616.832 us/op
     p(90.0000) =  10797.056 us/op
     p(95.0000) =  10895.360 us/op
     p(99.0000) =  16187.392 us/op
     p(99.9000) =  22320.251 us/op
     p(99.9900) =  39093.240 us/op
     p(99.9990) =  40435.712 us/op
     p(99.9999) =  40435.712 us/op
    p(100.0000) =  40435.712 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 98.55% complete, ETA 00:07:08
# Fork: 1 of 1
# Warmup Iteration   1: 121443.735 ±(99.9%) 4010.216 us/op
# Warmup Iteration   2: 119345.737 ±(99.9%) 3277.563 us/op
# Warmup Iteration   3: 119787.325 ±(99.9%) 3601.819 us/op
# Warmup Iteration   4: 119997.976 ±(99.9%) 3627.968 us/op
# Warmup Iteration   5: 119943.363 ±(99.9%) 3645.367 us/op
Iteration   1: 120100.962 ±(99.9%) 3666.229 us/op
                 concatenateStrings·p0.00:   109314.048 us/op
                 concatenateStrings·p0.50:   120455.168 us/op
                 concatenateStrings·p0.90:   136445.952 us/op
                 concatenateStrings·p0.95:   139919.360 us/op
                 concatenateStrings·p0.99:   145489.920 us/op
                 concatenateStrings·p0.999:  145489.920 us/op
                 concatenateStrings·p0.9999: 145489.920 us/op
                 concatenateStrings·p1.00:   145489.920 us/op

Iteration   2: 119083.593 ±(99.9%) 3357.573 us/op
                 concatenateStrings·p0.00:   109182.976 us/op
                 concatenateStrings·p0.50:   119144.448 us/op
                 concatenateStrings·p0.90:   131923.968 us/op
                 concatenateStrings·p0.95:   136445.952 us/op
                 concatenateStrings·p0.99:   145489.920 us/op
                 concatenateStrings·p0.999:  145489.920 us/op
                 concatenateStrings·p0.9999: 145489.920 us/op
                 concatenateStrings·p1.00:   145489.920 us/op

Iteration   3: 122509.162 ±(99.9%) 4726.441 us/op
                 concatenateStrings·p0.00:   109182.976 us/op
                 concatenateStrings·p0.50:   120782.848 us/op
                 concatenateStrings·p0.90:   141400.474 us/op
                 concatenateStrings·p0.95:   145319.526 us/op
                 concatenateStrings·p0.99:   152043.520 us/op
                 concatenateStrings·p0.999:  152043.520 us/op
                 concatenateStrings·p0.9999: 152043.520 us/op
                 concatenateStrings·p1.00:   152043.520 us/op

Iteration   4: 119136.646 ±(99.9%) 3407.581 us/op
                 concatenateStrings·p0.00:   109707.264 us/op
                 concatenateStrings·p0.50:   118816.768 us/op
                 concatenateStrings·p0.90:   132055.040 us/op
                 concatenateStrings·p0.95:   139657.216 us/op
                 concatenateStrings·p0.99:   144703.488 us/op
                 concatenateStrings·p0.999:  144703.488 us/op
                 concatenateStrings·p0.9999: 144703.488 us/op
                 concatenateStrings·p1.00:   144703.488 us/op

Iteration   5: 119862.223 ±(99.9%) 3802.888 us/op
                 concatenateStrings·p0.00:   109182.976 us/op
                 concatenateStrings·p0.50:   118685.696 us/op
                 concatenateStrings·p0.90:   137887.744 us/op
                 concatenateStrings·p0.95:   140771.328 us/op
                 concatenateStrings·p0.99:   143917.056 us/op
                 concatenateStrings·p0.999:  143917.056 us/op
                 concatenateStrings·p0.9999: 143917.056 us/op
                 concatenateStrings·p1.00:   143917.056 us/op

Iteration   6: 118828.333 ±(99.9%) 3188.511 us/op
                 concatenateStrings·p0.00:   109314.048 us/op
                 concatenateStrings·p0.50:   115474.432 us/op
                 concatenateStrings·p0.90:   131334.144 us/op
                 concatenateStrings·p0.95:   135856.128 us/op
                 concatenateStrings·p0.99:   145752.064 us/op
                 concatenateStrings·p0.999:  145752.064 us/op
                 concatenateStrings·p0.9999: 145752.064 us/op
                 concatenateStrings·p1.00:   145752.064 us/op

Iteration   7: 119170.974 ±(99.9%) 3522.350 us/op
                 concatenateStrings·p0.00:   108920.832 us/op
                 concatenateStrings·p0.50:   116523.008 us/op
                 concatenateStrings·p0.90:   134021.120 us/op
                 concatenateStrings·p0.95:   138412.032 us/op
                 concatenateStrings·p0.99:   144965.632 us/op
                 concatenateStrings·p0.999:  144965.632 us/op
                 concatenateStrings·p0.9999: 144965.632 us/op
                 concatenateStrings·p1.00:   144965.632 us/op

Iteration   8: 119902.793 ±(99.9%) 3917.198 us/op
                 concatenateStrings·p0.00:   108658.688 us/op
                 concatenateStrings·p0.50:   118030.336 us/op
                 concatenateStrings·p0.90:   135659.520 us/op
                 concatenateStrings·p0.95:   141295.616 us/op
                 concatenateStrings·p0.99:   152043.520 us/op
                 concatenateStrings·p0.999:  152043.520 us/op
                 concatenateStrings·p0.9999: 152043.520 us/op
                 concatenateStrings·p1.00:   152043.520 us/op

Iteration   9: 121192.645 ±(99.9%) 4324.435 us/op
                 concatenateStrings·p0.00:   109576.192 us/op
                 concatenateStrings·p0.50:   117440.512 us/op
                 concatenateStrings·p0.90:   137625.600 us/op
                 concatenateStrings·p0.95:   146800.640 us/op
                 concatenateStrings·p0.99:   154927.104 us/op
                 concatenateStrings·p0.999:  154927.104 us/op
                 concatenateStrings·p0.9999: 154927.104 us/op
                 concatenateStrings·p1.00:   154927.104 us/op

Iteration  10: 121091.578 ±(99.9%) 4167.091 us/op
                 concatenateStrings·p0.00:   109051.904 us/op
                 concatenateStrings·p0.50:   118358.016 us/op
                 concatenateStrings·p0.90:   137363.456 us/op
                 concatenateStrings·p0.95:   141767.475 us/op
                 concatenateStrings·p0.99:   152567.808 us/op
                 concatenateStrings·p0.999:  152567.808 us/op
                 concatenateStrings·p0.9999: 152567.808 us/op
                 concatenateStrings·p1.00:   152567.808 us/op

Iteration  11: 120715.733 ±(99.9%) 4036.813 us/op
                 concatenateStrings·p0.00:   109838.336 us/op
                 concatenateStrings·p0.50:   120455.168 us/op
                 concatenateStrings·p0.90:   139303.322 us/op
                 concatenateStrings·p0.95:   141662.618 us/op
                 concatenateStrings·p0.99:   149422.080 us/op
                 concatenateStrings·p0.999:  149422.080 us/op
                 concatenateStrings·p0.9999: 149422.080 us/op
                 concatenateStrings·p1.00:   149422.080 us/op

Iteration  12: 119798.248 ±(99.9%) 3596.367 us/op
                 concatenateStrings·p0.00:   109576.192 us/op
                 concatenateStrings·p0.50:   119406.592 us/op
                 concatenateStrings·p0.90:   133234.688 us/op
                 concatenateStrings·p0.95:   138280.960 us/op
                 concatenateStrings·p0.99:   152567.808 us/op
                 concatenateStrings·p0.999:  152567.808 us/op
                 concatenateStrings·p0.9999: 152567.808 us/op
                 concatenateStrings·p1.00:   152567.808 us/op

Iteration  13: 120253.879 ±(99.9%) 3847.426 us/op
                 concatenateStrings·p0.00:   109051.904 us/op
                 concatenateStrings·p0.50:   120717.312 us/op
                 concatenateStrings·p0.90:   137363.456 us/op
                 concatenateStrings·p0.95:   140050.432 us/op
                 concatenateStrings·p0.99:   147849.216 us/op
                 concatenateStrings·p0.999:  147849.216 us/op
                 concatenateStrings·p0.9999: 147849.216 us/op
                 concatenateStrings·p1.00:   147849.216 us/op

Iteration  14: 120506.661 ±(99.9%) 3904.496 us/op
                 concatenateStrings·p0.00:   109314.048 us/op
                 concatenateStrings·p0.50:   120127.488 us/op
                 concatenateStrings·p0.90:   135528.448 us/op
                 concatenateStrings·p0.95:   144310.272 us/op
                 concatenateStrings·p0.99:   146538.496 us/op
                 concatenateStrings·p0.999:  146538.496 us/op
                 concatenateStrings·p0.9999: 146538.496 us/op
                 concatenateStrings·p1.00:   146538.496 us/op

Iteration  15: 119149.129 ±(99.9%) 3348.472 us/op
                 concatenateStrings·p0.00:   109576.192 us/op
                 concatenateStrings·p0.50:   118161.408 us/op
                 concatenateStrings·p0.90:   131072.000 us/op
                 concatenateStrings·p0.95:   136052.736 us/op
                 concatenateStrings·p0.99:   143917.056 us/op
                 concatenateStrings·p0.999:  143917.056 us/op
                 concatenateStrings·p0.9999: 143917.056 us/op
                 concatenateStrings·p1.00:   143917.056 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 1256
  mean = 120079.797 ±(99.9%) 948.063 us/op

  Histogram, us/op:
    [100000.000, 105000.000) = 0 
    [105000.000, 110000.000) = 98 
    [110000.000, 115000.000) = 467 
    [115000.000, 120000.000) = 78 
    [120000.000, 125000.000) = 268 
    [125000.000, 130000.000) = 121 
    [130000.000, 135000.000) = 91 
    [135000.000, 140000.000) = 70 
    [140000.000, 145000.000) = 40 
    [145000.000, 150000.000) = 15 
    [150000.000, 155000.000) = 8 

  Percentiles, us/op:
      p(0.0000) = 108658.688 us/op
     p(50.0000) = 119341.056 us/op
     p(90.0000) = 135344.947 us/op
     p(95.0000) = 140247.040 us/op
     p(99.0000) = 147400.950 us/op
     p(99.9000) = 154320.765 us/op
     p(99.9900) = 154927.104 us/op
     p(99.9990) = 154927.104 us/op
     p(99.9999) = 154927.104 us/op
    p(100.0000) = 154927.104 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 99.27% complete, ETA 00:03:34
# Fork: 1 of 1
# Warmup Iteration   1: 898717.013 ±(99.9%) 137019.405 us/op
# Warmup Iteration   2: 845501.781 ±(99.9%) 56307.818 us/op
# Warmup Iteration   3: 608482.485 ±(99.9%) 64377.289 us/op
# Warmup Iteration   4: 594789.316 ±(99.9%) 56747.646 us/op
# Warmup Iteration   5: 584085.959 ±(99.9%) 46129.431 us/op
Iteration   1: 583998.578 ±(99.9%) 46274.758 us/op
                 createNewObjectsWithRecursive·p0.00:   532676.608 us/op
                 createNewObjectsWithRecursive·p0.50:   566231.040 us/op
                 createNewObjectsWithRecursive·p0.90:   686083.277 us/op
                 createNewObjectsWithRecursive·p0.95:   698351.616 us/op
                 createNewObjectsWithRecursive·p0.99:   698351.616 us/op
                 createNewObjectsWithRecursive·p0.999:  698351.616 us/op
                 createNewObjectsWithRecursive·p0.9999: 698351.616 us/op
                 createNewObjectsWithRecursive·p1.00:   698351.616 us/op

Iteration   2: 589947.362 ±(99.9%) 51474.055 us/op
                 createNewObjectsWithRecursive·p0.00:   529530.880 us/op
                 createNewObjectsWithRecursive·p0.50:   579862.528 us/op
                 createNewObjectsWithRecursive·p0.90:   688495.002 us/op
                 createNewObjectsWithRecursive·p0.95:   716177.408 us/op
                 createNewObjectsWithRecursive·p0.99:   716177.408 us/op
                 createNewObjectsWithRecursive·p0.999:  716177.408 us/op
                 createNewObjectsWithRecursive·p0.9999: 716177.408 us/op
                 createNewObjectsWithRecursive·p1.00:   716177.408 us/op

Iteration   3: 595344.444 ±(99.9%) 51151.683 us/op
                 createNewObjectsWithRecursive·p0.00:   543162.368 us/op
                 createNewObjectsWithRecursive·p0.50:   572522.496 us/op
                 createNewObjectsWithRecursive·p0.90:   696254.464 us/op
                 createNewObjectsWithRecursive·p0.95:   696254.464 us/op
                 createNewObjectsWithRecursive·p0.99:   696254.464 us/op
                 createNewObjectsWithRecursive·p0.999:  696254.464 us/op
                 createNewObjectsWithRecursive·p0.9999: 696254.464 us/op
                 createNewObjectsWithRecursive·p1.00:   696254.464 us/op

Iteration   4: 602684.476 ±(99.9%) 52484.668 us/op
                 createNewObjectsWithRecursive·p0.00:   553648.128 us/op
                 createNewObjectsWithRecursive·p0.50:   581959.680 us/op
                 createNewObjectsWithRecursive·p0.90:   687236.710 us/op
                 createNewObjectsWithRecursive·p0.95:   688914.432 us/op
                 createNewObjectsWithRecursive·p0.99:   688914.432 us/op
                 createNewObjectsWithRecursive·p0.999:  688914.432 us/op
                 createNewObjectsWithRecursive·p0.9999: 688914.432 us/op
                 createNewObjectsWithRecursive·p1.00:   688914.432 us/op

Iteration   5: 579804.274 ±(99.9%) 37294.825 us/op
                 createNewObjectsWithRecursive·p0.00:   553648.128 us/op
                 createNewObjectsWithRecursive·p0.50:   566755.328 us/op
                 createNewObjectsWithRecursive·p0.90:   673080.934 us/op
                 createNewObjectsWithRecursive·p0.95:   700448.768 us/op
                 createNewObjectsWithRecursive·p0.99:   700448.768 us/op
                 createNewObjectsWithRecursive·p0.999:  700448.768 us/op
                 createNewObjectsWithRecursive·p0.9999: 700448.768 us/op
                 createNewObjectsWithRecursive·p1.00:   700448.768 us/op

Iteration   6: 612183.341 ±(99.9%) 51010.984 us/op
                 createNewObjectsWithRecursive·p0.00:   553648.128 us/op
                 createNewObjectsWithRecursive·p0.50:   594542.592 us/op
                 createNewObjectsWithRecursive·p0.90:   697722.470 us/op
                 createNewObjectsWithRecursive·p0.95:   703594.496 us/op
                 createNewObjectsWithRecursive·p0.99:   703594.496 us/op
                 createNewObjectsWithRecursive·p0.999:  703594.496 us/op
                 createNewObjectsWithRecursive·p0.9999: 703594.496 us/op
                 createNewObjectsWithRecursive·p1.00:   703594.496 us/op

Iteration   7: 600679.846 ±(99.9%) 54986.877 us/op
                 createNewObjectsWithRecursive·p0.00:   512229.376 us/op
                 createNewObjectsWithRecursive·p0.50:   575668.224 us/op
                 createNewObjectsWithRecursive·p0.90:   696673.894 us/op
                 createNewObjectsWithRecursive·p0.95:   706740.224 us/op
                 createNewObjectsWithRecursive·p0.99:   706740.224 us/op
                 createNewObjectsWithRecursive·p0.999:  706740.224 us/op
                 createNewObjectsWithRecursive·p0.9999: 706740.224 us/op
                 createNewObjectsWithRecursive·p1.00:   706740.224 us/op

Iteration   8: 610332.913 ±(99.9%) 61318.576 us/op
                 createNewObjectsWithRecursive·p0.00:   550502.400 us/op
                 createNewObjectsWithRecursive·p0.50:   572522.496 us/op
                 createNewObjectsWithRecursive·p0.90:   721630.003 us/op
                 createNewObjectsWithRecursive·p0.95:   726663.168 us/op
                 createNewObjectsWithRecursive·p0.99:   726663.168 us/op
                 createNewObjectsWithRecursive·p0.999:  726663.168 us/op
                 createNewObjectsWithRecursive·p0.9999: 726663.168 us/op
                 createNewObjectsWithRecursive·p1.00:   726663.168 us/op

Iteration   9: 595375.285 ±(99.9%) 56866.067 us/op
                 createNewObjectsWithRecursive·p0.00:   514326.528 us/op
                 createNewObjectsWithRecursive·p0.50:   574619.648 us/op
                 createNewObjectsWithRecursive·p0.90:   700868.198 us/op
                 createNewObjectsWithRecursive·p0.95:   710934.528 us/op
                 createNewObjectsWithRecursive·p0.99:   710934.528 us/op
                 createNewObjectsWithRecursive·p0.999:  710934.528 us/op
                 createNewObjectsWithRecursive·p0.9999: 710934.528 us/op
                 createNewObjectsWithRecursive·p1.00:   710934.528 us/op

Iteration  10: 611936.617 ±(99.9%) 55172.757 us/op
                 createNewObjectsWithRecursive·p0.00:   553648.128 us/op
                 createNewObjectsWithRecursive·p0.50:   576716.800 us/op
                 createNewObjectsWithRecursive·p0.90:   701497.344 us/op
                 createNewObjectsWithRecursive·p0.95:   714080.256 us/op
                 createNewObjectsWithRecursive·p0.99:   714080.256 us/op
                 createNewObjectsWithRecursive·p0.999:  714080.256 us/op
                 createNewObjectsWithRecursive·p0.9999: 714080.256 us/op
                 createNewObjectsWithRecursive·p1.00:   714080.256 us/op

Iteration  11: 598983.620 ±(99.9%) 45285.200 us/op
                 createNewObjectsWithRecursive·p0.00:   553648.128 us/op
                 createNewObjectsWithRecursive·p0.50:   581959.680 us/op
                 createNewObjectsWithRecursive·p0.90:   686817.280 us/op
                 createNewObjectsWithRecursive·p0.95:   691011.584 us/op
                 createNewObjectsWithRecursive·p0.99:   691011.584 us/op
                 createNewObjectsWithRecursive·p0.999:  691011.584 us/op
                 createNewObjectsWithRecursive·p0.9999: 691011.584 us/op
                 createNewObjectsWithRecursive·p1.00:   691011.584 us/op

Iteration  12: 589241.458 ±(99.9%) 42333.382 us/op
                 createNewObjectsWithRecursive·p0.00:   549453.824 us/op
                 createNewObjectsWithRecursive·p0.50:   570949.632 us/op
                 createNewObjectsWithRecursive·p0.90:   692060.160 us/op
                 createNewObjectsWithRecursive·p0.95:   692060.160 us/op
                 createNewObjectsWithRecursive·p0.99:   692060.160 us/op
                 createNewObjectsWithRecursive·p0.999:  692060.160 us/op
                 createNewObjectsWithRecursive·p0.9999: 692060.160 us/op
                 createNewObjectsWithRecursive·p1.00:   692060.160 us/op

Iteration  13: 600032.196 ±(99.9%) 52807.721 us/op
                 createNewObjectsWithRecursive·p0.00:   552599.552 us/op
                 createNewObjectsWithRecursive·p0.50:   578813.952 us/op
                 createNewObjectsWithRecursive·p0.90:   698351.616 us/op
                 createNewObjectsWithRecursive·p0.95:   706740.224 us/op
                 createNewObjectsWithRecursive·p0.99:   706740.224 us/op
                 createNewObjectsWithRecursive·p0.999:  706740.224 us/op
                 createNewObjectsWithRecursive·p0.9999: 706740.224 us/op
                 createNewObjectsWithRecursive·p1.00:   706740.224 us/op

Iteration  14: 600093.877 ±(99.9%) 50236.772 us/op
                 createNewObjectsWithRecursive·p0.00:   549453.824 us/op
                 createNewObjectsWithRecursive·p0.50:   575668.224 us/op
                 createNewObjectsWithRecursive·p0.90:   691431.014 us/op
                 createNewObjectsWithRecursive·p0.95:   697303.040 us/op
                 createNewObjectsWithRecursive·p0.99:   697303.040 us/op
                 createNewObjectsWithRecursive·p0.999:  697303.040 us/op
                 createNewObjectsWithRecursive·p0.9999: 697303.040 us/op
                 createNewObjectsWithRecursive·p1.00:   697303.040 us/op

Iteration  15: 605891.885 ±(99.9%) 56854.000 us/op
                 createNewObjectsWithRecursive·p0.00:   553648.128 us/op
                 createNewObjectsWithRecursive·p0.50:   578813.952 us/op
                 createNewObjectsWithRecursive·p0.90:   696883.610 us/op
                 createNewObjectsWithRecursive·p0.95:   720371.712 us/op
                 createNewObjectsWithRecursive·p0.99:   720371.712 us/op
                 createNewObjectsWithRecursive·p0.999:  720371.712 us/op
                 createNewObjectsWithRecursive·p0.9999: 720371.712 us/op
                 createNewObjectsWithRecursive·p1.00:   720371.712 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  N = 258
  mean = 598271.540 ±(99.9%) 10856.264 us/op

  Histogram, us/op:
    [500000.000, 525000.000) = 2 
    [525000.000, 550000.000) = 9 
    [550000.000, 575000.000) = 111 
    [575000.000, 600000.000) = 68 
    [600000.000, 625000.000) = 7 
    [625000.000, 650000.000) = 0 
    [650000.000, 675000.000) = 17 
    [675000.000, 700000.000) = 33 
    [700000.000, 725000.000) = 10 
    [725000.000, 750000.000) = 1 
    [750000.000, 775000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 512229.376 us/op
     p(50.0000) = 576716.800 us/op
     p(90.0000) = 691011.584 us/op
     p(95.0000) = 698351.616 us/op
     p(99.0000) = 720371.712 us/op
     p(99.9000) = 726663.168 us/op
     p(99.9900) = 726663.168 us/op
     p(99.9990) = 726663.168 us/op
     p(99.9999) = 726663.168 us/op
    p(100.0000) = 726663.168 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 365220.395 us/op
# Warmup Iteration   2: 220646.426 us/op
# Warmup Iteration   3: 204763.149 us/op
# Warmup Iteration   4: 203660.873 us/op
# Warmup Iteration   5: 203969.811 us/op
Iteration   1: 204276.464 us/op
Iteration   2: 204856.615 us/op
Iteration   3: 204633.897 us/op
Iteration   4: 205939.431 us/op
Iteration   5: 201527.722 us/op
Iteration   6: 203860.600 us/op
Iteration   7: 202965.963 us/op
Iteration   8: 205305.371 us/op
Iteration   9: 203434.173 us/op
Iteration  10: 206070.063 us/op
Iteration  11: 212129.990 us/op
Iteration  12: 204933.296 us/op
Iteration  13: 203124.091 us/op
Iteration  14: 207073.779 us/op
Iteration  15: 206343.506 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 205098.331 ±(99.9%) 2604.019 us/op

  Histogram, us/op:
    [200000.000, 201250.000) = 0 
    [201250.000, 202500.000) = 1 
    [202500.000, 203750.000) = 3 
    [203750.000, 205000.000) = 5 
    [205000.000, 206250.000) = 3 
    [206250.000, 207500.000) = 2 
    [207500.000, 208750.000) = 0 
    [208750.000, 210000.000) = 0 
    [210000.000, 211250.000) = 0 
    [211250.000, 212500.000) = 1 
    [212500.000, 213750.000) = 0 
    [213750.000, 215000.000) = 0 
    [215000.000, 216250.000) = 0 
    [216250.000, 217500.000) = 0 
    [217500.000, 218750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 201527.722 us/op
     p(50.0000) = 204856.615 us/op
     p(90.0000) = 209096.263 us/op
     p(95.0000) = 212129.990 us/op
     p(99.0000) = 212129.990 us/op
     p(99.9000) = 212129.990 us/op
     p(99.9900) = 212129.990 us/op
     p(99.9990) = 212129.990 us/op
     p(99.9999) = 212129.990 us/op
    p(100.0000) = 212129.990 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 322346.679 us/op
# Warmup Iteration   2: 177367.379 us/op
# Warmup Iteration   3: 181582.810 us/op
# Warmup Iteration   4: 161315.386 us/op
# Warmup Iteration   5: 161470.627 us/op
Iteration   1: 161428.000 us/op
Iteration   2: 161332.622 us/op
Iteration   3: 160736.414 us/op
Iteration   4: 160499.401 us/op
Iteration   5: 160250.189 us/op
Iteration   6: 160139.988 us/op
Iteration   7: 159265.532 us/op
Iteration   8: 159424.082 us/op
Iteration   9: 159504.127 us/op
Iteration  10: 159501.113 us/op
Iteration  11: 159858.496 us/op
Iteration  12: 159394.118 us/op
Iteration  13: 160435.284 us/op
Iteration  14: 160066.424 us/op
Iteration  15: 163182.449 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 160334.549 ±(99.9%) 1109.714 us/op

  Histogram, us/op:
    [159000.000, 159500.000) = 3 
    [159500.000, 160000.000) = 3 
    [160000.000, 160500.000) = 5 
    [160500.000, 161000.000) = 1 
    [161000.000, 161500.000) = 2 
    [161500.000, 162000.000) = 0 
    [162000.000, 162500.000) = 0 
    [162500.000, 163000.000) = 0 
    [163000.000, 163500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 159265.532 us/op
     p(50.0000) = 160139.988 us/op
     p(90.0000) = 162129.780 us/op
     p(95.0000) = 163182.449 us/op
     p(99.0000) = 163182.449 us/op
     p(99.9000) = 163182.449 us/op
     p(99.9900) = 163182.449 us/op
     p(99.9990) = 163182.449 us/op
     p(99.9999) = 163182.449 us/op
    p(100.0000) = 163182.449 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 268648.231 us/op
# Warmup Iteration   2: 208221.232 us/op
# Warmup Iteration   3: 207134.147 us/op
# Warmup Iteration   4: 207331.204 us/op
# Warmup Iteration   5: 207977.243 us/op
Iteration   1: 207098.771 us/op
Iteration   2: 207337.628 us/op
Iteration   3: 215763.537 us/op
Iteration   4: 207406.181 us/op
Iteration   5: 208232.167 us/op
Iteration   6: 208475.819 us/op
Iteration   7: 207363.661 us/op
Iteration   8: 207574.663 us/op
Iteration   9: 207477.508 us/op
Iteration  10: 208298.569 us/op
Iteration  11: 212333.617 us/op
Iteration  12: 207323.393 us/op
Iteration  13: 206475.672 us/op
Iteration  14: 207835.092 us/op
Iteration  15: 207365.144 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 208424.095 ±(99.9%) 2593.568 us/op

  Histogram, us/op:
    [206000.000, 207000.000) = 1 
    [207000.000, 208000.000) = 9 
    [208000.000, 209000.000) = 3 
    [209000.000, 210000.000) = 0 
    [210000.000, 211000.000) = 0 
    [211000.000, 212000.000) = 0 
    [212000.000, 213000.000) = 1 
    [213000.000, 214000.000) = 0 
    [214000.000, 215000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 206475.672 us/op
     p(50.0000) = 207477.508 us/op
     p(90.0000) = 213705.585 us/op
     p(95.0000) = 215763.537 us/op
     p(99.0000) = 215763.537 us/op
     p(99.9000) = 215763.537 us/op
     p(99.9900) = 215763.537 us/op
     p(99.9990) = 215763.537 us/op
     p(99.9999) = 215763.537 us/op
    p(100.0000) = 215763.537 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 276108.880 us/op
# Warmup Iteration   2: 230526.253 us/op
# Warmup Iteration   3: 247082.991 us/op
# Warmup Iteration   4: 233034.628 us/op
# Warmup Iteration   5: 242488.938 us/op
Iteration   1: 235282.823 us/op
Iteration   2: 231593.110 us/op
Iteration   3: 235248.055 us/op
Iteration   4: 232701.555 us/op
Iteration   5: 241909.117 us/op
Iteration   6: 234079.576 us/op
Iteration   7: 243938.579 us/op
Iteration   8: 232319.106 us/op
Iteration   9: 224431.934 us/op
Iteration  10: 247939.365 us/op
Iteration  11: 225849.339 us/op
Iteration  12: 224376.178 us/op
Iteration  13: 252309.445 us/op
Iteration  14: 240479.935 us/op
Iteration  15: 231531.044 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 235599.277 ±(99.9%) 8874.327 us/op

  Histogram, us/op:
    [220000.000, 222500.000) = 0 
    [222500.000, 225000.000) = 2 
    [225000.000, 227500.000) = 1 
    [227500.000, 230000.000) = 0 
    [230000.000, 232500.000) = 3 
    [232500.000, 235000.000) = 2 
    [235000.000, 237500.000) = 2 
    [237500.000, 240000.000) = 0 
    [240000.000, 242500.000) = 2 
    [242500.000, 245000.000) = 1 
    [245000.000, 247500.000) = 0 
    [247500.000, 250000.000) = 1 
    [250000.000, 252500.000) = 1 
    [252500.000, 255000.000) = 0 
    [255000.000, 257500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 224376.178 us/op
     p(50.0000) = 234079.576 us/op
     p(90.0000) = 249687.397 us/op
     p(95.0000) = 252309.445 us/op
     p(99.0000) = 252309.445 us/op
     p(99.9000) = 252309.445 us/op
     p(99.9900) = 252309.445 us/op
     p(99.9990) = 252309.445 us/op
     p(99.9999) = 252309.445 us/op
    p(100.0000) = 252309.445 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 247404.287 us/op
# Warmup Iteration   2: 211629.860 us/op
# Warmup Iteration   3: 214307.615 us/op
# Warmup Iteration   4: 211342.929 us/op
# Warmup Iteration   5: 213153.929 us/op
Iteration   1: 212535.914 us/op
Iteration   2: 219045.024 us/op
Iteration   3: 207481.879 us/op
Iteration   4: 212739.298 us/op
Iteration   5: 209034.866 us/op
Iteration   6: 211660.015 us/op
Iteration   7: 208979.400 us/op
Iteration   8: 212489.308 us/op
Iteration   9: 217168.346 us/op
Iteration  10: 207581.812 us/op
Iteration  11: 215008.361 us/op
Iteration  12: 210292.867 us/op
Iteration  13: 215789.200 us/op
Iteration  14: 211553.537 us/op
Iteration  15: 211990.656 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 212223.366 ±(99.9%) 3627.121 us/op

  Histogram, us/op:
    [200000.000, 201250.000) = 0 
    [201250.000, 202500.000) = 0 
    [202500.000, 203750.000) = 0 
    [203750.000, 205000.000) = 0 
    [205000.000, 206250.000) = 0 
    [206250.000, 207500.000) = 1 
    [207500.000, 208750.000) = 1 
    [208750.000, 210000.000) = 2 
    [210000.000, 211250.000) = 1 
    [211250.000, 212500.000) = 4 
    [212500.000, 213750.000) = 2 
    [213750.000, 215000.000) = 0 
    [215000.000, 216250.000) = 2 
    [216250.000, 217500.000) = 1 
    [217500.000, 218750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 207481.879 us/op
     p(50.0000) = 211990.656 us/op
     p(90.0000) = 217919.017 us/op
     p(95.0000) = 219045.024 us/op
     p(99.0000) = 219045.024 us/op
     p(99.9000) = 219045.024 us/op
     p(99.9900) = 219045.024 us/op
     p(99.9990) = 219045.024 us/op
     p(99.9999) = 219045.024 us/op
    p(100.0000) = 219045.024 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 216243.231 us/op
# Warmup Iteration   2: 213490.052 us/op
# Warmup Iteration   3: 207735.327 us/op
# Warmup Iteration   4: 202232.566 us/op
# Warmup Iteration   5: 211488.446 us/op
Iteration   1: 226777.429 us/op
Iteration   2: 208752.651 us/op
Iteration   3: 205493.815 us/op
Iteration   4: 207709.914 us/op
Iteration   5: 206329.384 us/op
Iteration   6: 207036.047 us/op
Iteration   7: 206367.796 us/op
Iteration   8: 206175.055 us/op
Iteration   9: 212539.949 us/op
Iteration  10: 213695.859 us/op
Iteration  11: 208630.513 us/op
Iteration  12: 206034.953 us/op
Iteration  13: 208460.450 us/op
Iteration  14: 204579.625 us/op
Iteration  15: 211516.383 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 209339.988 ±(99.9%) 5882.564 us/op

  Histogram, us/op:
    [200000.000, 202500.000) = 0 
    [202500.000, 205000.000) = 1 
    [205000.000, 207500.000) = 6 
    [207500.000, 210000.000) = 4 
    [210000.000, 212500.000) = 1 
    [212500.000, 215000.000) = 2 
    [215000.000, 217500.000) = 0 
    [217500.000, 220000.000) = 0 
    [220000.000, 222500.000) = 0 
    [222500.000, 225000.000) = 0 
    [225000.000, 227500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 204579.625 us/op
     p(50.0000) = 207709.914 us/op
     p(90.0000) = 218928.487 us/op
     p(95.0000) = 226777.429 us/op
     p(99.0000) = 226777.429 us/op
     p(99.9000) = 226777.429 us/op
     p(99.9900) = 226777.429 us/op
     p(99.9990) = 226777.429 us/op
     p(99.9999) = 226777.429 us/op
    p(100.0000) = 226777.429 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1232325.441 us/op
# Warmup Iteration   2: 802717.150 us/op
# Warmup Iteration   3: 782243.502 us/op
# Warmup Iteration   4: 785820.940 us/op
# Warmup Iteration   5: 771521.185 us/op
Iteration   1: 757483.698 us/op
Iteration   2: 762381.927 us/op
Iteration   3: 774940.829 us/op
Iteration   4: 763713.194 us/op
Iteration   5: 762299.224 us/op
Iteration   6: 773687.315 us/op
Iteration   7: 776833.965 us/op
Iteration   8: 774905.866 us/op
Iteration   9: 780257.685 us/op
Iteration  10: 756453.769 us/op
Iteration  11: 764307.920 us/op
Iteration  12: 754592.917 us/op
Iteration  13: 770547.310 us/op
Iteration  14: 756607.248 us/op
Iteration  15: 773057.125 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 766804.666 ±(99.9%) 9110.141 us/op

  Histogram, us/op:
    [750000.000, 752500.000) = 0 
    [752500.000, 755000.000) = 1 
    [755000.000, 757500.000) = 3 
    [757500.000, 760000.000) = 0 
    [760000.000, 762500.000) = 2 
    [762500.000, 765000.000) = 2 
    [765000.000, 767500.000) = 0 
    [767500.000, 770000.000) = 0 
    [770000.000, 772500.000) = 1 
    [772500.000, 775000.000) = 4 
    [775000.000, 777500.000) = 1 
    [777500.000, 780000.000) = 0 
    [780000.000, 782500.000) = 1 
    [782500.000, 785000.000) = 0 
    [785000.000, 787500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 754592.917 us/op
     p(50.0000) = 764307.920 us/op
     p(90.0000) = 778203.453 us/op
     p(95.0000) = 780257.685 us/op
     p(99.0000) = 780257.685 us/op
     p(99.9000) = 780257.685 us/op
     p(99.9900) = 780257.685 us/op
     p(99.9990) = 780257.685 us/op
     p(99.9999) = 780257.685 us/op
    p(100.0000) = 780257.685 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1096077.008 us/op
# Warmup Iteration   2: 885847.390 us/op
# Warmup Iteration   3: 838088.956 us/op
# Warmup Iteration   4: 864474.329 us/op
# Warmup Iteration   5: 822161.181 us/op
Iteration   1: 794181.774 us/op
Iteration   2: 818916.387 us/op
Iteration   3: 866284.807 us/op
Iteration   4: 828736.293 us/op
Iteration   5: 825204.882 us/op
Iteration   6: 838019.188 us/op
Iteration   7: 840903.252 us/op
Iteration   8: 822428.349 us/op
Iteration   9: 820664.623 us/op
Iteration  10: 822277.231 us/op
Iteration  11: 874472.443 us/op
Iteration  12: 812544.207 us/op
Iteration  13: 861796.095 us/op
Iteration  14: 830532.972 us/op
Iteration  15: 858236.598 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 834346.607 ±(99.9%) 23805.626 us/op

  Histogram, us/op:
    [790000.000, 795000.000) = 1 
    [795000.000, 800000.000) = 0 
    [800000.000, 805000.000) = 0 
    [805000.000, 810000.000) = 0 
    [810000.000, 815000.000) = 1 
    [815000.000, 820000.000) = 1 
    [820000.000, 825000.000) = 3 
    [825000.000, 830000.000) = 2 
    [830000.000, 835000.000) = 1 
    [835000.000, 840000.000) = 1 
    [840000.000, 845000.000) = 1 
    [845000.000, 850000.000) = 0 
    [850000.000, 855000.000) = 0 
    [855000.000, 860000.000) = 1 
    [860000.000, 865000.000) = 1 
    [865000.000, 870000.000) = 1 
    [870000.000, 875000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 794181.774 us/op
     p(50.0000) = 828736.293 us/op
     p(90.0000) = 869559.861 us/op
     p(95.0000) = 874472.443 us/op
     p(99.0000) = 874472.443 us/op
     p(99.9000) = 874472.443 us/op
     p(99.9900) = 874472.443 us/op
     p(99.9990) = 874472.443 us/op
     p(99.9999) = 874472.443 us/op
    p(100.0000) = 874472.443 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 770065.414 us/op
# Warmup Iteration   2: 626868.881 us/op
# Warmup Iteration   3: 620438.766 us/op
# Warmup Iteration   4: 625649.978 us/op
# Warmup Iteration   5: 619181.491 us/op
Iteration   1: 621334.771 us/op
Iteration   2: 619178.780 us/op
Iteration   3: 639344.663 us/op
Iteration   4: 618494.954 us/op
Iteration   5: 618101.451 us/op
Iteration   6: 630506.050 us/op
Iteration   7: 639205.832 us/op
Iteration   8: 639548.709 us/op
Iteration   9: 637101.607 us/op
Iteration  10: 632806.509 us/op
Iteration  11: 629863.988 us/op
Iteration  12: 654397.332 us/op
Iteration  13: 646269.386 us/op
Iteration  14: 633899.457 us/op
Iteration  15: 615775.842 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 631721.955 ±(99.9%) 12192.303 us/op

  Histogram, us/op:
    [610000.000, 615000.000) = 0 
    [615000.000, 620000.000) = 4 
    [620000.000, 625000.000) = 1 
    [625000.000, 630000.000) = 1 
    [630000.000, 635000.000) = 3 
    [635000.000, 640000.000) = 4 
    [640000.000, 645000.000) = 0 
    [645000.000, 650000.000) = 1 
    [650000.000, 655000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 615775.842 us/op
     p(50.0000) = 632806.509 us/op
     p(90.0000) = 649520.564 us/op
     p(95.0000) = 654397.332 us/op
     p(99.0000) = 654397.332 us/op
     p(99.9000) = 654397.332 us/op
     p(99.9900) = 654397.332 us/op
     p(99.9990) = 654397.332 us/op
     p(99.9999) = 654397.332 us/op
    p(100.0000) = 654397.332 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap(AllocationBenchmark.java:52)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_ss_jmhStub(AllocationBenchmark_fillHeap_jmhTest.java:485)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_SingleShotTime(AllocationBenchmark_fillHeap_jmhTest.java:443)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)




# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 626090.126 us/op
# Warmup Iteration   2: 514763.952 us/op
# Warmup Iteration   3: 503548.913 us/op
# Warmup Iteration   4: 560859.373 us/op
# Warmup Iteration   5: 529201.758 us/op
Iteration   1: 554503.917 us/op
Iteration   2: 579359.634 us/op
Iteration   3: 540190.181 us/op
Iteration   4: 527073.381 us/op
Iteration   5: 539567.329 us/op
Iteration   6: 549420.869 us/op
Iteration   7: 542132.266 us/op
Iteration   8: 485836.272 us/op
Iteration   9: 529525.445 us/op
Iteration  10: 542510.994 us/op
Iteration  11: 543720.457 us/op
Iteration  12: 488657.577 us/op
Iteration  13: 563209.418 us/op
Iteration  14: 568016.513 us/op
Iteration  15: 545150.713 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 539924.998 ±(99.9%) 27210.585 us/op

  Histogram, us/op:
    [480000.000, 490000.000) = 2 
    [490000.000, 500000.000) = 0 
    [500000.000, 510000.000) = 0 
    [510000.000, 520000.000) = 0 
    [520000.000, 530000.000) = 2 
    [530000.000, 540000.000) = 1 
    [540000.000, 550000.000) = 6 
    [550000.000, 560000.000) = 1 
    [560000.000, 570000.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 485836.272 us/op
     p(50.0000) = 542510.994 us/op
     p(90.0000) = 572553.761 us/op
     p(95.0000) = 579359.634 us/op
     p(99.0000) = 579359.634 us/op
     p(99.9000) = 579359.634 us/op
     p(99.9900) = 579359.634 us/op
     p(99.9990) = 579359.634 us/op
     p(99.9999) = 579359.634 us/op
    p(100.0000) = 579359.634 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 462670.493 us/op
# Warmup Iteration   2: 500018.573 us/op
# Warmup Iteration   3: 470904.090 us/op
# Warmup Iteration   4: 465473.766 us/op
# Warmup Iteration   5: 486952.918 us/op
Iteration   1: 484007.073 us/op
Iteration   2: 490542.651 us/op
Iteration   3: 440547.071 us/op
Iteration   4: 453123.851 us/op
Iteration   5: 481745.443 us/op
Iteration   6: 462286.601 us/op
Iteration   7: 459782.700 us/op
Iteration   8: 492268.063 us/op
Iteration   9: 481217.139 us/op
Iteration  10: 478704.666 us/op
Iteration  11: 475295.990 us/op
Iteration  12: 465075.262 us/op
Iteration  13: 478435.302 us/op
Iteration  14: 482979.593 us/op
Iteration  15: 474204.058 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 473347.698 ±(99.9%) 15416.300 us/op

  Histogram, us/op:
    [440000.000, 445000.000) = 1 
    [445000.000, 450000.000) = 0 
    [450000.000, 455000.000) = 1 
    [455000.000, 460000.000) = 1 
    [460000.000, 465000.000) = 1 
    [465000.000, 470000.000) = 1 
    [470000.000, 475000.000) = 1 
    [475000.000, 480000.000) = 3 
    [480000.000, 485000.000) = 4 
    [485000.000, 490000.000) = 0 
    [490000.000, 495000.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 440547.071 us/op
     p(50.0000) = 478435.302 us/op
     p(90.0000) = 491232.816 us/op
     p(95.0000) = 492268.063 us/op
     p(99.0000) = 492268.063 us/op
     p(99.9000) = 492268.063 us/op
     p(99.9900) = 492268.063 us/op
     p(99.9990) = 492268.063 us/op
     p(99.9999) = 492268.063 us/op
    p(100.0000) = 492268.063 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 15204.479 us/op
# Warmup Iteration   2: 783.586 us/op
# Warmup Iteration   3: 602.803 us/op
# Warmup Iteration   4: 612.285 us/op
# Warmup Iteration   5: 636.093 us/op
Iteration   1: 595.182 us/op
Iteration   2: 596.835 us/op
Iteration   3: 600.926 us/op
Iteration   4: 649.384 us/op
Iteration   5: 589.535 us/op
Iteration   6: 630.149 us/op
Iteration   7: 648.620 us/op
Iteration   8: 642.299 us/op
Iteration   9: 623.646 us/op
Iteration  10: 611.029 us/op
Iteration  11: 651.115 us/op
Iteration  12: 647.944 us/op
Iteration  13: 657.222 us/op
Iteration  14: 630.238 us/op
Iteration  15: 636.748 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  N = 15
  mean =    627.391 ±(99.9%) 24.779 us/op

  Histogram, us/op:
    [580.000, 585.000) = 0 
    [585.000, 590.000) = 1 
    [590.000, 595.000) = 0 
    [595.000, 600.000) = 2 
    [600.000, 605.000) = 1 
    [605.000, 610.000) = 0 
    [610.000, 615.000) = 1 
    [615.000, 620.000) = 0 
    [620.000, 625.000) = 1 
    [625.000, 630.000) = 0 
    [630.000, 635.000) = 2 
    [635.000, 640.000) = 1 
    [640.000, 645.000) = 1 
    [645.000, 650.000) = 3 
    [650.000, 655.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    589.535 us/op
     p(50.0000) =    630.238 us/op
     p(90.0000) =    653.558 us/op
     p(95.0000) =    657.222 us/op
     p(99.0000) =    657.222 us/op
     p(99.9000) =    657.222 us/op
     p(99.9900) =    657.222 us/op
     p(99.9990) =    657.222 us/op
     p(99.9999) =    657.222 us/op
    p(100.0000) =    657.222 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 18976.299 us/op
# Warmup Iteration   2: 789.933 us/op
# Warmup Iteration   3: 684.353 us/op
# Warmup Iteration   4: 685.177 us/op
# Warmup Iteration   5: 674.372 us/op
Iteration   1: 715.229 us/op
Iteration   2: 688.666 us/op
Iteration   3: 725.658 us/op
Iteration   4: 681.252 us/op
Iteration   5: 733.511 us/op
Iteration   6: 679.940 us/op
Iteration   7: 685.550 us/op
Iteration   8: 737.007 us/op
Iteration   9: 731.613 us/op
Iteration  10: 721.756 us/op
Iteration  11: 751.979 us/op
Iteration  12: 762.544 us/op
Iteration  13: 763.423 us/op
Iteration  14: 751.272 us/op
Iteration  15: 702.749 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  N = 15
  mean =    722.143 ±(99.9%) 31.121 us/op

  Histogram, us/op:
    [670.000, 680.000) = 1 
    [680.000, 690.000) = 3 
    [690.000, 700.000) = 0 
    [700.000, 710.000) = 1 
    [710.000, 720.000) = 1 
    [720.000, 730.000) = 2 
    [730.000, 740.000) = 3 
    [740.000, 750.000) = 0 
    [750.000, 760.000) = 2 

  Percentiles, us/op:
      p(0.0000) =    679.940 us/op
     p(50.0000) =    725.658 us/op
     p(90.0000) =    762.896 us/op
     p(95.0000) =    763.423 us/op
     p(99.0000) =    763.423 us/op
     p(99.9000) =    763.423 us/op
     p(99.9900) =    763.423 us/op
     p(99.9990) =    763.423 us/op
     p(99.9999) =    763.423 us/op
    p(100.0000) =    763.423 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 28942.182 us/op
# Warmup Iteration   2: 2596.367 us/op
# Warmup Iteration   3: 2757.410 us/op
# Warmup Iteration   4: 957.092 us/op
# Warmup Iteration   5: 957.590 us/op
Iteration   1: 946.882 us/op
Iteration   2: 1014.672 us/op
Iteration   3: 970.326 us/op
Iteration   4: 941.437 us/op
Iteration   5: 941.782 us/op
Iteration   6: 942.353 us/op
Iteration   7: 961.700 us/op
Iteration   8: 944.539 us/op
Iteration   9: 942.938 us/op
Iteration  10: 956.141 us/op
Iteration  11: 967.480 us/op
Iteration  12: 944.162 us/op
Iteration  13: 944.842 us/op
Iteration  14: 944.160 us/op
Iteration  15: 943.671 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  N = 15
  mean =    953.806 ±(99.9%) 20.766 us/op

  Histogram, us/op:
    [ 940.000,  945.000) = 9 
    [ 945.000,  950.000) = 1 
    [ 950.000,  955.000) = 0 
    [ 955.000,  960.000) = 1 
    [ 960.000,  965.000) = 1 
    [ 965.000,  970.000) = 1 
    [ 970.000,  975.000) = 1 
    [ 975.000,  980.000) = 0 
    [ 980.000,  985.000) = 0 
    [ 985.000,  990.000) = 0 
    [ 990.000,  995.000) = 0 
    [ 995.000, 1000.000) = 0 
    [1000.000, 1005.000) = 0 
    [1005.000, 1010.000) = 0 
    [1010.000, 1015.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    941.437 us/op
     p(50.0000) =    944.539 us/op
     p(90.0000) =    988.064 us/op
     p(95.0000) =   1014.672 us/op
     p(99.0000) =   1014.672 us/op
     p(99.9000) =   1014.672 us/op
     p(99.9900) =   1014.672 us/op
     p(99.9990) =   1014.672 us/op
     p(99.9999) =   1014.672 us/op
    p(100.0000) =   1014.672 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 13076.572 us/op
# Warmup Iteration   2: 1321.966 us/op
# Warmup Iteration   3: 618.733 us/op
# Warmup Iteration   4: 588.192 us/op
# Warmup Iteration   5: 622.565 us/op
Iteration   1: 603.800 us/op
Iteration   2: 591.192 us/op
Iteration   3: 565.279 us/op
Iteration   4: 593.133 us/op
Iteration   5: 598.905 us/op
Iteration   6: 612.365 us/op
Iteration   7: 624.199 us/op
Iteration   8: 624.029 us/op
Iteration   9: 611.268 us/op
Iteration  10: 610.282 us/op
Iteration  11: 635.453 us/op
Iteration  12: 617.762 us/op
Iteration  13: 589.823 us/op
Iteration  14: 621.510 us/op
Iteration  15: 615.519 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  N = 15
  mean =    607.635 ±(99.9%) 18.952 us/op

  Histogram, us/op:
    [560.000, 565.000) = 0 
    [565.000, 570.000) = 1 
    [570.000, 575.000) = 0 
    [575.000, 580.000) = 0 
    [580.000, 585.000) = 0 
    [585.000, 590.000) = 1 
    [590.000, 595.000) = 2 
    [595.000, 600.000) = 1 
    [600.000, 605.000) = 1 
    [605.000, 610.000) = 0 
    [610.000, 615.000) = 3 
    [615.000, 620.000) = 2 
    [620.000, 625.000) = 3 
    [625.000, 630.000) = 0 
    [630.000, 635.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    565.279 us/op
     p(50.0000) =    611.268 us/op
     p(90.0000) =    628.701 us/op
     p(95.0000) =    635.453 us/op
     p(99.0000) =    635.453 us/op
     p(99.9000) =    635.453 us/op
     p(99.9900) =    635.453 us/op
     p(99.9990) =    635.453 us/op
     p(99.9999) =    635.453 us/op
    p(100.0000) =    635.453 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1408149.065 us/op
# Warmup Iteration   2: 936313.057 us/op
# Warmup Iteration   3: 936089.286 us/op
# Warmup Iteration   4: 924001.594 us/op
# Warmup Iteration   5: 924465.858 us/op
Iteration   1: 937377.680 us/op
Iteration   2: 929450.630 us/op
Iteration   3: 920597.456 us/op
Iteration   4: 919915.828 us/op
Iteration   5: 920164.103 us/op
Iteration   6: 920960.070 us/op
Iteration   7: 924232.735 us/op
Iteration   8: 920085.314 us/op
Iteration   9: 920577.279 us/op
Iteration  10: 921345.094 us/op
Iteration  11: 917909.933 us/op
Iteration  12: 920496.841 us/op
Iteration  13: 920957.915 us/op
Iteration  14: 921584.941 us/op
Iteration  15: 917979.832 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  N = 15
  mean = 922242.377 ±(99.9%) 5340.558 us/op

  Histogram, us/op:
    [910000.000, 912500.000) = 0 
    [912500.000, 915000.000) = 0 
    [915000.000, 917500.000) = 0 
    [917500.000, 920000.000) = 3 
    [920000.000, 922500.000) = 9 
    [922500.000, 925000.000) = 1 
    [925000.000, 927500.000) = 0 
    [927500.000, 930000.000) = 1 
    [930000.000, 932500.000) = 0 
    [932500.000, 935000.000) = 0 
    [935000.000, 937500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 917909.933 us/op
     p(50.0000) = 920597.456 us/op
     p(90.0000) = 932621.450 us/op
     p(95.0000) = 937377.680 us/op
     p(99.0000) = 937377.680 us/op
     p(99.9000) = 937377.680 us/op
     p(99.9900) = 937377.680 us/op
     p(99.9990) = 937377.680 us/op
     p(99.9999) = 937377.680 us/op
    p(100.0000) = 937377.680 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 697764.751 us/op
# Warmup Iteration   2: 242937.761 us/op
# Warmup Iteration   3: 223894.404 us/op
# Warmup Iteration   4: 221909.659 us/op
# Warmup Iteration   5: 222929.446 us/op
Iteration   1: 214302.504 us/op
Iteration   2: 214327.978 us/op
Iteration   3: 221558.639 us/op
Iteration   4: 218778.015 us/op
Iteration   5: 217673.442 us/op
Iteration   6: 224349.806 us/op
Iteration   7: 211839.678 us/op
Iteration   8: 229311.454 us/op
Iteration   9: 226384.924 us/op
Iteration  10: 216758.120 us/op
Iteration  11: 217126.741 us/op
Iteration  12: 209964.908 us/op
Iteration  13: 211084.958 us/op
Iteration  14: 225171.439 us/op
Iteration  15: 217697.208 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 15
  mean = 218421.988 ±(99.9%) 6263.638 us/op

  Histogram, us/op:
    [200000.000, 202500.000) = 0 
    [202500.000, 205000.000) = 0 
    [205000.000, 207500.000) = 0 
    [207500.000, 210000.000) = 1 
    [210000.000, 212500.000) = 2 
    [212500.000, 215000.000) = 2 
    [215000.000, 217500.000) = 2 
    [217500.000, 220000.000) = 3 
    [220000.000, 222500.000) = 1 
    [222500.000, 225000.000) = 1 
    [225000.000, 227500.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 209964.908 us/op
     p(50.0000) = 217673.442 us/op
     p(90.0000) = 227555.536 us/op
     p(95.0000) = 229311.454 us/op
     p(99.0000) = 229311.454 us/op
     p(99.9000) = 229311.454 us/op
     p(99.9900) = 229311.454 us/op
     p(99.9990) = 229311.454 us/op
     p(99.9999) = 229311.454 us/op
    p(100.0000) = 229311.454 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2277325.002 us/op
# Warmup Iteration   2: 1979761.308 us/op
# Warmup Iteration   3: 1953759.200 us/op
# Warmup Iteration   4: 2003875.667 us/op
# Warmup Iteration   5: 1948848.199 us/op
Iteration   1: 1983926.515 us/op
Iteration   2: 2009305.842 us/op
Iteration   3: 1997642.831 us/op
Iteration   4: 1934803.879 us/op
Iteration   5: 1953414.788 us/op
Iteration   6: 1996175.142 us/op
Iteration   7: 1951098.639 us/op
Iteration   8: 1976659.494 us/op
Iteration   9: 2000143.576 us/op
Iteration  10: 1927817.900 us/op
Iteration  11: 1988290.677 us/op
Iteration  12: 1946141.948 us/op
Iteration  13: 1961819.338 us/op
Iteration  14: 1945029.102 us/op
Iteration  15: 1972906.021 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 15
  mean = 1969678.379 ±(99.9%) 27690.661 us/op

  Histogram, us/op:
    [1920000.000, 1925000.000) = 0 
    [1925000.000, 1930000.000) = 1 
    [1930000.000, 1935000.000) = 1 
    [1935000.000, 1940000.000) = 0 
    [1940000.000, 1945000.000) = 0 
    [1945000.000, 1950000.000) = 2 
    [1950000.000, 1955000.000) = 2 
    [1955000.000, 1960000.000) = 0 
    [1960000.000, 1965000.000) = 1 
    [1965000.000, 1970000.000) = 0 
    [1970000.000, 1975000.000) = 1 
    [1975000.000, 1980000.000) = 1 
    [1980000.000, 1985000.000) = 1 
    [1985000.000, 1990000.000) = 1 
    [1990000.000, 1995000.000) = 0 
    [1995000.000, 2000000.000) = 2 
    [2000000.000, 2005000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 1927817.900 us/op
     p(50.0000) = 1972906.021 us/op
     p(90.0000) = 2003808.482 us/op
     p(95.0000) = 2009305.842 us/op
     p(99.0000) = 2009305.842 us/op
     p(99.9000) = 2009305.842 us/op
     p(99.9900) = 2009305.842 us/op
     p(99.9990) = 2009305.842 us/op
     p(99.9999) = 2009305.842 us/op
    p(100.0000) = 2009305.842 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 139.963 us/op
# Warmup Iteration   2: 137.224 us/op
# Warmup Iteration   3: 18.861 us/op
# Warmup Iteration   4: 22.042 us/op
# Warmup Iteration   5: 14.916 us/op
Iteration   1: 22.728 us/op
Iteration   2: 35.250 us/op
Iteration   3: 20.792 us/op
Iteration   4: 14.641 us/op
Iteration   5: 22.414 us/op
Iteration   6: 18.402 us/op
Iteration   7: 61.710 us/op
Iteration   8: 9.401 us/op
Iteration   9: 4.889 us/op
Iteration  10: 5.465 us/op
Iteration  11: 4.465 us/op
Iteration  12: 5.604 us/op
Iteration  13: 5.298 us/op
Iteration  14: 5.469 us/op
Iteration  15: 5.372 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     16.127 ±(99.9%) 16.744 us/op

  Histogram, us/op:
    [ 0.000,  5.000) = 2 
    [ 5.000, 10.000) = 6 
    [10.000, 15.000) = 1 
    [15.000, 20.000) = 1 
    [20.000, 25.000) = 3 
    [25.000, 30.000) = 0 
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 1 
    [40.000, 45.000) = 0 
    [45.000, 50.000) = 0 
    [50.000, 55.000) = 0 
    [55.000, 60.000) = 0 
    [60.000, 65.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      4.465 us/op
     p(50.0000) =      9.401 us/op
     p(90.0000) =     45.834 us/op
     p(95.0000) =     61.710 us/op
     p(99.0000) =     61.710 us/op
     p(99.9000) =     61.710 us/op
     p(99.9900) =     61.710 us/op
     p(99.9990) =     61.710 us/op
     p(99.9999) =     61.710 us/op
    p(100.0000) =     61.710 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 264.993 us/op
# Warmup Iteration   2: 64.150 us/op
# Warmup Iteration   3: 35.612 us/op
# Warmup Iteration   4: 27.511 us/op
# Warmup Iteration   5: 33.892 us/op
Iteration   1: 26.930 us/op
Iteration   2: 63.307 us/op
Iteration   3: 15.515 us/op
Iteration   4: 6.244 us/op
Iteration   5: 6.424 us/op
Iteration   6: 6.255 us/op
Iteration   7: 5.263 us/op
Iteration   8: 5.287 us/op
Iteration   9: 6.572 us/op
Iteration  10: 6.118 us/op
Iteration  11: 6.503 us/op
Iteration  12: 6.229 us/op
Iteration  13: 5.969 us/op
Iteration  14: 6.764 us/op
Iteration  15: 6.758 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     12.009 ±(99.9%) 16.349 us/op

  Histogram, us/op:
    [ 0.000,  5.000) = 0 
    [ 5.000, 10.000) = 12 
    [10.000, 15.000) = 0 
    [15.000, 20.000) = 1 
    [20.000, 25.000) = 0 
    [25.000, 30.000) = 1 
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 0 
    [40.000, 45.000) = 0 
    [45.000, 50.000) = 0 
    [50.000, 55.000) = 0 
    [55.000, 60.000) = 0 
    [60.000, 65.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      5.263 us/op
     p(50.0000) =      6.424 us/op
     p(90.0000) =     41.481 us/op
     p(95.0000) =     63.307 us/op
     p(99.0000) =     63.307 us/op
     p(99.9000) =     63.307 us/op
     p(99.9900) =     63.307 us/op
     p(99.9990) =     63.307 us/op
     p(99.9999) =     63.307 us/op
    p(100.0000) =     63.307 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 367.687 us/op
# Warmup Iteration   2: 47.995 us/op
# Warmup Iteration   3: 52.070 us/op
# Warmup Iteration   4: 37.646 us/op
# Warmup Iteration   5: 65.557 us/op
Iteration   1: 18.805 us/op
Iteration   2: 8.557 us/op
Iteration   3: 7.483 us/op
Iteration   4: 8.259 us/op
Iteration   5: 8.849 us/op
Iteration   6: 7.562 us/op
Iteration   7: 8.436 us/op
Iteration   8: 8.538 us/op
Iteration   9: 8.751 us/op
Iteration  10: 8.306 us/op
Iteration  11: 7.238 us/op
Iteration  12: 9.200 us/op
Iteration  13: 9.087 us/op
Iteration  14: 9.638 us/op
Iteration  15: 9.450 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =      9.211 ±(99.9%) 2.934 us/op

  Histogram, us/op:
    [ 0.000,  1.250) = 0 
    [ 1.250,  2.500) = 0 
    [ 2.500,  3.750) = 0 
    [ 3.750,  5.000) = 0 
    [ 5.000,  6.250) = 0 
    [ 6.250,  7.500) = 2 
    [ 7.500,  8.750) = 6 
    [ 8.750, 10.000) = 6 
    [10.000, 11.250) = 0 
    [11.250, 12.500) = 0 
    [12.500, 13.750) = 0 
    [13.750, 15.000) = 0 
    [15.000, 16.250) = 0 
    [16.250, 17.500) = 0 
    [17.500, 18.750) = 0 

  Percentiles, us/op:
      p(0.0000) =      7.238 us/op
     p(50.0000) =      8.557 us/op
     p(90.0000) =     13.305 us/op
     p(95.0000) =     18.805 us/op
     p(99.0000) =     18.805 us/op
     p(99.9000) =     18.805 us/op
     p(99.9900) =     18.805 us/op
     p(99.9990) =     18.805 us/op
     p(99.9999) =     18.805 us/op
    p(100.0000) =     18.805 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 362.995 us/op
# Warmup Iteration   2: 22.469 us/op
# Warmup Iteration   3: 5.899 us/op
# Warmup Iteration   4: 6.499 us/op
# Warmup Iteration   5: 6.732 us/op
Iteration   1: 6.196 us/op
Iteration   2: 6.060 us/op
Iteration   3: 6.407 us/op
Iteration   4: 6.961 us/op
Iteration   5: 6.092 us/op
Iteration   6: 7.247 us/op
Iteration   7: 6.857 us/op
Iteration   8: 10.580 us/op
Iteration   9: 6.093 us/op
Iteration  10: 5.839 us/op
Iteration  11: 6.090 us/op
Iteration  12: 5.487 us/op
Iteration  13: 5.821 us/op
Iteration  14: 8.047 us/op
Iteration  15: 8.858 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =      6.842 ±(99.9%) 1.470 us/op

  Histogram, us/op:
    [ 5.000,  5.500) = 1 
    [ 5.500,  6.000) = 2 
    [ 6.000,  6.500) = 6 
    [ 6.500,  7.000) = 2 
    [ 7.000,  7.500) = 1 
    [ 7.500,  8.000) = 0 
    [ 8.000,  8.500) = 1 
    [ 8.500,  9.000) = 1 
    [ 9.000,  9.500) = 0 
    [ 9.500, 10.000) = 0 
    [10.000, 10.500) = 0 

  Percentiles, us/op:
      p(0.0000) =      5.487 us/op
     p(50.0000) =      6.196 us/op
     p(90.0000) =      9.547 us/op
     p(95.0000) =     10.580 us/op
     p(99.0000) =     10.580 us/op
     p(99.9000) =     10.580 us/op
     p(99.9900) =     10.580 us/op
     p(99.9990) =     10.580 us/op
     p(99.9999) =     10.580 us/op
    p(100.0000) =     10.580 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 283.547 us/op
# Warmup Iteration   2: 28.068 us/op
# Warmup Iteration   3: 18.094 us/op
# Warmup Iteration   4: 29.512 us/op
# Warmup Iteration   5: 16.166 us/op
Iteration   1: 19.758 us/op
Iteration   2: 17.712 us/op
Iteration   3: 17.135 us/op
Iteration   4: 17.972 us/op
Iteration   5: 21.556 us/op
Iteration   6: 15.337 us/op
Iteration   7: 13.573 us/op
Iteration   8: 13.616 us/op
Iteration   9: 12.902 us/op
Iteration  10: 13.304 us/op
Iteration  11: 13.705 us/op
Iteration  12: 12.761 us/op
Iteration  13: 12.714 us/op
Iteration  14: 13.071 us/op
Iteration  15: 13.319 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =     15.229 ±(99.9%) 3.069 us/op

  Histogram, us/op:
    [12.000, 13.000) = 3 
    [13.000, 14.000) = 6 
    [14.000, 15.000) = 0 
    [15.000, 16.000) = 1 
    [16.000, 17.000) = 0 
    [17.000, 18.000) = 3 
    [18.000, 19.000) = 0 
    [19.000, 20.000) = 1 
    [20.000, 21.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     12.714 us/op
     p(50.0000) =     13.616 us/op
     p(90.0000) =     20.477 us/op
     p(95.0000) =     21.556 us/op
     p(99.0000) =     21.556 us/op
     p(99.9000) =     21.556 us/op
     p(99.9900) =     21.556 us/op
     p(99.9990) =     21.556 us/op
     p(99.9999) =     21.556 us/op
    p(100.0000) =     21.556 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 608.673 us/op
# Warmup Iteration   2: 156.588 us/op
# Warmup Iteration   3: 107.893 us/op
# Warmup Iteration   4: 95.021 us/op
# Warmup Iteration   5: 95.425 us/op
Iteration   1: 92.926 us/op
Iteration   2: 173.010 us/op
Iteration   3: 101.404 us/op
Iteration   4: 164.584 us/op
Iteration   5: 89.973 us/op
Iteration   6: 119.327 us/op
Iteration   7: 89.385 us/op
Iteration   8: 85.957 us/op
Iteration   9: 106.949 us/op
Iteration  10: 85.766 us/op
Iteration  11: 86.871 us/op
Iteration  12: 85.020 us/op
Iteration  13: 86.821 us/op
Iteration  14: 90.161 us/op
Iteration  15: 92.599 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =    103.384 ±(99.9%) 30.155 us/op

  Histogram, us/op:
    [ 80.000,  90.000) = 7 
    [ 90.000, 100.000) = 3 
    [100.000, 110.000) = 2 
    [110.000, 120.000) = 1 
    [120.000, 130.000) = 0 
    [130.000, 140.000) = 0 
    [140.000, 150.000) = 0 
    [150.000, 160.000) = 0 
    [160.000, 170.000) = 1 

  Percentiles, us/op:
      p(0.0000) =     85.020 us/op
     p(50.0000) =     90.161 us/op
     p(90.0000) =    167.954 us/op
     p(95.0000) =    173.010 us/op
     p(99.0000) =    173.010 us/op
     p(99.9000) =    173.010 us/op
     p(99.9900) =    173.010 us/op
     p(99.9990) =    173.010 us/op
     p(99.9999) =    173.010 us/op
    p(100.0000) =    173.010 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 355.470 us/op
# Warmup Iteration   2: 18.698 us/op
# Warmup Iteration   3: 6.873 us/op
# Warmup Iteration   4: 6.699 us/op
# Warmup Iteration   5: 6.346 us/op
Iteration   1: 6.567 us/op
Iteration   2: 5.990 us/op
Iteration   3: 6.424 us/op
Iteration   4: 6.639 us/op
Iteration   5: 6.465 us/op
Iteration   6: 7.223 us/op
Iteration   7: 6.837 us/op
Iteration   8: 9.215 us/op
Iteration   9: 6.751 us/op
Iteration  10: 8.655 us/op
Iteration  11: 6.795 us/op
Iteration  12: 9.756 us/op
Iteration  13: 7.406 us/op
Iteration  14: 10.030 us/op
Iteration  15: 7.627 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =      7.492 ±(99.9%) 1.385 us/op

  Histogram, us/op:
    [ 5.000,  5.500) = 0 
    [ 5.500,  6.000) = 1 
    [ 6.000,  6.500) = 2 
    [ 6.500,  7.000) = 5 
    [ 7.000,  7.500) = 2 
    [ 7.500,  8.000) = 1 
    [ 8.000,  8.500) = 0 
    [ 8.500,  9.000) = 1 
    [ 9.000,  9.500) = 1 
    [ 9.500, 10.000) = 1 
    [10.000, 10.500) = 1 

  Percentiles, us/op:
      p(0.0000) =      5.990 us/op
     p(50.0000) =      6.837 us/op
     p(90.0000) =      9.866 us/op
     p(95.0000) =     10.030 us/op
     p(99.0000) =     10.030 us/op
     p(99.9000) =     10.030 us/op
     p(99.9900) =     10.030 us/op
     p(99.9990) =     10.030 us/op
     p(99.9999) =     10.030 us/op
    p(100.0000) =     10.030 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1368.473 us/op
# Warmup Iteration   2: 24.116 us/op
# Warmup Iteration   3: 37.060 us/op
# Warmup Iteration   4: 22.823 us/op
# Warmup Iteration   5: 21.067 us/op
Iteration   1: 54.780 us/op
Iteration   2: 24.718 us/op
Iteration   3: 23.821 us/op
Iteration   4: 12.789 us/op
Iteration   5: 13.153 us/op
Iteration   6: 15.076 us/op
Iteration   7: 15.059 us/op
Iteration   8: 12.755 us/op
Iteration   9: 19.892 us/op
Iteration  10: 12.778 us/op
Iteration  11: 15.651 us/op
Iteration  12: 12.606 us/op
Iteration  13: 15.596 us/op
Iteration  14: 13.355 us/op
Iteration  15: 12.850 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =     18.325 ±(99.9%) 11.588 us/op

  Histogram, us/op:
    [10.000, 15.000) = 7 
    [15.000, 20.000) = 5 
    [20.000, 25.000) = 2 
    [25.000, 30.000) = 0 
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 0 
    [40.000, 45.000) = 0 
    [45.000, 50.000) = 0 
    [50.000, 55.000) = 1 

  Percentiles, us/op:
      p(0.0000) =     12.606 us/op
     p(50.0000) =     15.059 us/op
     p(90.0000) =     36.743 us/op
     p(95.0000) =     54.780 us/op
     p(99.0000) =     54.780 us/op
     p(99.9000) =     54.780 us/op
     p(99.9900) =     54.780 us/op
     p(99.9990) =     54.780 us/op
     p(99.9999) =     54.780 us/op
    p(100.0000) =     54.780 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 613.735 us/op
# Warmup Iteration   2: 330.692 us/op
# Warmup Iteration   3: 135.361 us/op
# Warmup Iteration   4: 99.858 us/op
# Warmup Iteration   5: 91.711 us/op
Iteration   1: 91.575 us/op
Iteration   2: 101.168 us/op
Iteration   3: 105.630 us/op
Iteration   4: 162.431 us/op
Iteration   5: 100.062 us/op
Iteration   6: 166.175 us/op
Iteration   7: 85.983 us/op
Iteration   8: 83.533 us/op
Iteration   9: 83.894 us/op
Iteration  10: 84.220 us/op
Iteration  11: 81.951 us/op
Iteration  12: 82.122 us/op
Iteration  13: 93.261 us/op
Iteration  14: 83.564 us/op
Iteration  15: 84.212 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =     99.319 ±(99.9%) 29.361 us/op

  Histogram, us/op:
    [ 80.000,  85.000) = 7 
    [ 85.000,  90.000) = 1 
    [ 90.000,  95.000) = 2 
    [ 95.000, 100.000) = 0 
    [100.000, 105.000) = 2 
    [105.000, 110.000) = 1 
    [110.000, 115.000) = 0 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 0 
    [150.000, 155.000) = 0 
    [155.000, 160.000) = 0 
    [160.000, 165.000) = 1 

  Percentiles, us/op:
      p(0.0000) =     81.951 us/op
     p(50.0000) =     85.983 us/op
     p(90.0000) =    163.929 us/op
     p(95.0000) =    166.175 us/op
     p(99.0000) =    166.175 us/op
     p(99.9000) =    166.175 us/op
     p(99.9900) =    166.175 us/op
     p(99.9990) =    166.175 us/op
     p(99.9999) =    166.175 us/op
    p(100.0000) =    166.175 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 83171.202 us/op
# Warmup Iteration   2: 39089.067 us/op
# Warmup Iteration   3: 20070.562 us/op
# Warmup Iteration   4: 15608.260 us/op
# Warmup Iteration   5: 15175.202 us/op
Iteration   1: 15015.176 us/op
Iteration   2: 14939.818 us/op
Iteration   3: 15029.488 us/op
Iteration   4: 14901.031 us/op
Iteration   5: 14899.061 us/op
Iteration   6: 14926.611 us/op
Iteration   7: 15845.853 us/op
Iteration   8: 14901.408 us/op
Iteration   9: 15070.300 us/op
Iteration  10: 14908.613 us/op
Iteration  11: 15065.037 us/op
Iteration  12: 14885.629 us/op
Iteration  13: 14908.213 us/op
Iteration  14: 14771.053 us/op
Iteration  15: 14842.334 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  N = 15
  mean =  14993.975 ±(99.9%) 266.660 us/op

  Histogram, us/op:
    [14000.000, 14125.000) = 0 
    [14125.000, 14250.000) = 0 
    [14250.000, 14375.000) = 0 
    [14375.000, 14500.000) = 0 
    [14500.000, 14625.000) = 0 
    [14625.000, 14750.000) = 0 
    [14750.000, 14875.000) = 2 
    [14875.000, 15000.000) = 8 
    [15000.000, 15125.000) = 4 
    [15125.000, 15250.000) = 0 
    [15250.000, 15375.000) = 0 
    [15375.000, 15500.000) = 0 
    [15500.000, 15625.000) = 0 
    [15625.000, 15750.000) = 0 
    [15750.000, 15875.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  14771.053 us/op
     p(50.0000) =  14908.613 us/op
     p(90.0000) =  15380.521 us/op
     p(95.0000) =  15845.853 us/op
     p(99.0000) =  15845.853 us/op
     p(99.9000) =  15845.853 us/op
     p(99.9900) =  15845.853 us/op
     p(99.9990) =  15845.853 us/op
     p(99.9999) =  15845.853 us/op
    p(100.0000) =  15845.853 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 32201.524 us/op
# Warmup Iteration   2: 6944.301 us/op
# Warmup Iteration   3: 4806.317 us/op
# Warmup Iteration   4: 2699.908 us/op
# Warmup Iteration   5: 2718.615 us/op
Iteration   1: 2755.119 us/op
Iteration   2: 1587.587 us/op
Iteration   3: 1563.537 us/op
Iteration   4: 1523.019 us/op
Iteration   5: 1582.408 us/op
Iteration   6: 1929.274 us/op
Iteration   7: 669.660 us/op
Iteration   8: 765.436 us/op
Iteration   9: 1104.968 us/op
Iteration  10: 644.312 us/op
Iteration  11: 1029.857 us/op
Iteration  12: 861.826 us/op
Iteration  13: 646.833 us/op
Iteration  14: 625.698 us/op
Iteration  15: 666.186 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean =   1197.048 ±(99.9%) 659.946 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 0 
    [ 250.000,  500.000) = 0 
    [ 500.000,  750.000) = 5 
    [ 750.000, 1000.000) = 2 
    [1000.000, 1250.000) = 2 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 4 
    [1750.000, 2000.000) = 1 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    625.698 us/op
     p(50.0000) =   1029.857 us/op
     p(90.0000) =   2259.612 us/op
     p(95.0000) =   2755.119 us/op
     p(99.0000) =   2755.119 us/op
     p(99.9000) =   2755.119 us/op
     p(99.9900) =   2755.119 us/op
     p(99.9990) =   2755.119 us/op
     p(99.9999) =   2755.119 us/op
    p(100.0000) =   2755.119 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 451687.525 us/op
# Warmup Iteration   2: 80549.545 us/op
# Warmup Iteration   3: 41500.288 us/op
# Warmup Iteration   4: 51278.750 us/op
# Warmup Iteration   5: 41603.608 us/op
Iteration   1: 41431.669 us/op
Iteration   2: 41469.410 us/op
Iteration   3: 41556.359 us/op
Iteration   4: 41523.448 us/op
Iteration   5: 41476.875 us/op
Iteration   6: 41658.483 us/op
Iteration   7: 41438.566 us/op
Iteration   8: 41583.675 us/op
Iteration   9: 41557.077 us/op
Iteration  10: 41634.639 us/op
Iteration  11: 41622.973 us/op
Iteration  12: 41554.541 us/op
Iteration  13: 41950.483 us/op
Iteration  14: 41513.331 us/op
Iteration  15: 41565.040 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean =  41569.105 ±(99.9%) 134.303 us/op

  Histogram, us/op:
    [41400.000, 41450.000) = 2 
    [41450.000, 41500.000) = 2 
    [41500.000, 41550.000) = 2 
    [41550.000, 41600.000) = 5 
    [41600.000, 41650.000) = 2 
    [41650.000, 41700.000) = 1 
    [41700.000, 41750.000) = 0 
    [41750.000, 41800.000) = 0 
    [41800.000, 41850.000) = 0 
    [41850.000, 41900.000) = 0 
    [41900.000, 41950.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  41431.669 us/op
     p(50.0000) =  41556.359 us/op
     p(90.0000) =  41775.283 us/op
     p(95.0000) =  41950.483 us/op
     p(99.0000) =  41950.483 us/op
     p(99.9000) =  41950.483 us/op
     p(99.9900) =  41950.483 us/op
     p(99.9990) =  41950.483 us/op
     p(99.9999) =  41950.483 us/op
    p(100.0000) =  41950.483 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4315850.887 us/op
# Warmup Iteration   2: 6837585.142 us/op
# Warmup Iteration   3: 6719613.271 us/op
# Warmup Iteration   4: 6758907.478 us/op
# Warmup Iteration   5: 6753344.644 us/op
Iteration   1: 6749941.621 us/op
Iteration   2: 6741694.495 us/op
Iteration   3: 6733279.791 us/op
Iteration   4: 6725743.614 us/op
Iteration   5: 6741639.059 us/op
Iteration   6: 6785717.242 us/op
Iteration   7: 6747249.767 us/op
Iteration   8: 6758484.368 us/op
Iteration   9: 6756641.366 us/op
Iteration  10: 6742020.767 us/op
Iteration  11: 6789087.049 us/op
Iteration  12: 6752158.046 us/op
Iteration  13: 6756814.016 us/op
Iteration  14: 6749937.678 us/op
Iteration  15: 6763680.878 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean = 6752939.317 ±(99.9%) 18309.038 us/op

  Histogram, us/op:
    [6720000.000, 6725000.000) = 0 
    [6725000.000, 6730000.000) = 1 
    [6730000.000, 6735000.000) = 1 
    [6735000.000, 6740000.000) = 0 
    [6740000.000, 6745000.000) = 3 
    [6745000.000, 6750000.000) = 3 
    [6750000.000, 6755000.000) = 1 
    [6755000.000, 6760000.000) = 3 
    [6760000.000, 6765000.000) = 1 
    [6765000.000, 6770000.000) = 0 
    [6770000.000, 6775000.000) = 0 
    [6775000.000, 6780000.000) = 0 
    [6780000.000, 6785000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 6725743.614 us/op
     p(50.0000) = 6749941.621 us/op
     p(90.0000) = 6787065.165 us/op
     p(95.0000) = 6789087.049 us/op
     p(99.0000) = 6789087.049 us/op
     p(99.9000) = 6789087.049 us/op
     p(99.9900) = 6789087.049 us/op
     p(99.9990) = 6789087.049 us/op
     p(99.9999) = 6789087.049 us/op
    p(100.0000) = 6789087.049 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 121265.060 us/op
# Warmup Iteration   2: 3687.882 us/op
# Warmup Iteration   3: 2995.687 us/op
# Warmup Iteration   4: 2998.360 us/op
# Warmup Iteration   5: 3002.314 us/op
Iteration   1: 2988.969 us/op
Iteration   2: 3017.773 us/op
Iteration   3: 2990.720 us/op
Iteration   4: 3003.409 us/op
Iteration   5: 2999.895 us/op
Iteration   6: 3016.305 us/op
Iteration   7: 2997.380 us/op
Iteration   8: 3014.608 us/op
Iteration   9: 2997.182 us/op
Iteration  10: 3001.511 us/op
Iteration  11: 3006.355 us/op
Iteration  12: 3004.286 us/op
Iteration  13: 3013.988 us/op
Iteration  14: 3000.582 us/op
Iteration  15: 2997.643 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  N = 15
  mean =   3003.374 ±(99.9%) 9.567 us/op

  Histogram, us/op:
    [2980.000, 2982.500) = 0 
    [2982.500, 2985.000) = 0 
    [2985.000, 2987.500) = 0 
    [2987.500, 2990.000) = 1 
    [2990.000, 2992.500) = 1 
    [2992.500, 2995.000) = 0 
    [2995.000, 2997.500) = 2 
    [2997.500, 3000.000) = 2 
    [3000.000, 3002.500) = 2 
    [3002.500, 3005.000) = 2 
    [3005.000, 3007.500) = 1 
    [3007.500, 3010.000) = 0 
    [3010.000, 3012.500) = 0 
    [3012.500, 3015.000) = 2 
    [3015.000, 3017.500) = 1 

  Percentiles, us/op:
      p(0.0000) =   2988.969 us/op
     p(50.0000) =   3001.511 us/op
     p(90.0000) =   3016.892 us/op
     p(95.0000) =   3017.773 us/op
     p(99.0000) =   3017.773 us/op
     p(99.9000) =   3017.773 us/op
     p(99.9900) =   3017.773 us/op
     p(99.9990) =   3017.773 us/op
     p(99.9999) =   3017.773 us/op
    p(100.0000) =   3017.773 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 134721.442 us/op
# Warmup Iteration   2: 48249.224 us/op
# Warmup Iteration   3: 31504.977 us/op
# Warmup Iteration   4: 31468.519 us/op
# Warmup Iteration   5: 31466.700 us/op
Iteration   1: 31547.597 us/op
Iteration   2: 31453.511 us/op
Iteration   3: 31550.399 us/op
Iteration   4: 31528.427 us/op
Iteration   5: 31537.855 us/op
Iteration   6: 31463.344 us/op
Iteration   7: 31533.341 us/op
Iteration   8: 31462.596 us/op
Iteration   9: 31576.298 us/op
Iteration  10: 31520.683 us/op
Iteration  11: 31538.403 us/op
Iteration  12: 31657.040 us/op
Iteration  13: 31480.245 us/op
Iteration  14: 31811.280 us/op
Iteration  15: 31499.484 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  N = 15
  mean =  31544.034 ±(99.9%) 96.321 us/op

  Histogram, us/op:
    [31400.000, 31450.000) = 0 
    [31450.000, 31500.000) = 5 
    [31500.000, 31550.000) = 6 
    [31550.000, 31600.000) = 2 
    [31600.000, 31650.000) = 0 
    [31650.000, 31700.000) = 1 
    [31700.000, 31750.000) = 0 
    [31750.000, 31800.000) = 0 
    [31800.000, 31850.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  31453.511 us/op
     p(50.0000) =  31533.341 us/op
     p(90.0000) =  31718.736 us/op
     p(95.0000) =  31811.280 us/op
     p(99.0000) =  31811.280 us/op
     p(99.9000) =  31811.280 us/op
     p(99.9900) =  31811.280 us/op
     p(99.9990) =  31811.280 us/op
     p(99.9999) =  31811.280 us/op
    p(100.0000) =  31811.280 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6347836.709 us/op
# Warmup Iteration   2: 1779791.750 us/op
# Warmup Iteration   3: 1767127.514 us/op
# Warmup Iteration   4: 1760507.957 us/op
# Warmup Iteration   5: 1760228.738 us/op
Iteration   1: 1760494.155 us/op
Iteration   2: 1760384.425 us/op
Iteration   3: 1761261.949 us/op
Iteration   4: 1774083.100 us/op
Iteration   5: 1760799.035 us/op
Iteration   6: 1760867.761 us/op
Iteration   7: 1759930.446 us/op
Iteration   8: 1760934.464 us/op
Iteration   9: 1759521.605 us/op
Iteration  10: 1759920.914 us/op
Iteration  11: 1760125.767 us/op
Iteration  12: 1760904.040 us/op
Iteration  13: 1760570.181 us/op
Iteration  14: 1759341.138 us/op
Iteration  15: 1760052.497 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  N = 15
  mean = 1761279.432 ±(99.9%) 3831.864 us/op

  Histogram, us/op:
    [1750000.000, 1752500.000) = 0 
    [1752500.000, 1755000.000) = 0 
    [1755000.000, 1757500.000) = 0 
    [1757500.000, 1760000.000) = 4 
    [1760000.000, 1762500.000) = 10 
    [1762500.000, 1765000.000) = 0 
    [1765000.000, 1767500.000) = 0 
    [1767500.000, 1770000.000) = 0 
    [1770000.000, 1772500.000) = 0 
    [1772500.000, 1775000.000) = 1 
    [1775000.000, 1777500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1759341.138 us/op
     p(50.0000) = 1760494.155 us/op
     p(90.0000) = 1766390.409 us/op
     p(95.0000) = 1774083.100 us/op
     p(99.0000) = 1774083.100 us/op
     p(99.9000) = 1774083.100 us/op
     p(99.9900) = 1774083.100 us/op
     p(99.9990) = 1774083.100 us/op
     p(99.9999) = 1774083.100 us/op
    p(100.0000) = 1774083.100 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 70.138 us/op
# Warmup Iteration   2: 10.822 us/op
# Warmup Iteration   3: 14.604 us/op
# Warmup Iteration   4: 14.425 us/op
# Warmup Iteration   5: 14.986 us/op
Iteration   1: 15.756 us/op
Iteration   2: 13.206 us/op
Iteration   3: 12.704 us/op
Iteration   4: 12.635 us/op
Iteration   5: 11.794 us/op
Iteration   6: 11.758 us/op
Iteration   7: 11.101 us/op
Iteration   8: 12.321 us/op
Iteration   9: 10.787 us/op
Iteration  10: 13.034 us/op
Iteration  11: 21.161 us/op
Iteration  12: 11.263 us/op
Iteration  13: 14.241 us/op
Iteration  14: 16.906 us/op
Iteration  15: 15.086 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  N = 15
  mean =     13.584 ±(99.9%) 2.934 us/op

  Histogram, us/op:
    [10.000, 11.250) = 2 
    [11.250, 12.500) = 4 
    [12.500, 13.750) = 4 
    [13.750, 15.000) = 1 
    [15.000, 16.250) = 2 
    [16.250, 17.500) = 1 
    [17.500, 18.750) = 0 
    [18.750, 20.000) = 0 
    [20.000, 21.250) = 1 
    [21.250, 22.500) = 0 
    [22.500, 23.750) = 0 
    [23.750, 25.000) = 0 
    [25.000, 26.250) = 0 
    [26.250, 27.500) = 0 
    [27.500, 28.750) = 0 

  Percentiles, us/op:
      p(0.0000) =     10.787 us/op
     p(50.0000) =     12.704 us/op
     p(90.0000) =     18.608 us/op
     p(95.0000) =     21.161 us/op
     p(99.0000) =     21.161 us/op
     p(99.9000) =     21.161 us/op
     p(99.9900) =     21.161 us/op
     p(99.9990) =     21.161 us/op
     p(99.9999) =     21.161 us/op
    p(100.0000) =     21.161 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 187251.254 us/op
# Warmup Iteration   2: 11197.094 us/op
# Warmup Iteration   3: 8850.241 us/op
# Warmup Iteration   4: 8970.553 us/op
# Warmup Iteration   5: 8865.510 us/op
Iteration   1: 8873.537 us/op
Iteration   2: 37399.653 us/op
Iteration   3: 12685.525 us/op
Iteration   4: 10408.805 us/op
Iteration   5: 10390.752 us/op
Iteration   6: 10396.300 us/op
Iteration   7: 10456.153 us/op
Iteration   8: 10466.266 us/op
Iteration   9: 10403.030 us/op
Iteration  10: 10424.297 us/op
Iteration  11: 10400.028 us/op
Iteration  12: 10430.454 us/op
Iteration  13: 10457.390 us/op
Iteration  14: 10394.186 us/op
Iteration  15: 10388.910 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  N = 15
  mean =  12265.019 ±(99.9%) 7474.546 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 0 
    [ 2500.000,  5000.000) = 0 
    [ 5000.000,  7500.000) = 0 
    [ 7500.000, 10000.000) = 1 
    [10000.000, 12500.000) = 12 
    [12500.000, 15000.000) = 1 
    [15000.000, 17500.000) = 0 
    [17500.000, 20000.000) = 0 
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 0 
    [27500.000, 30000.000) = 0 
    [30000.000, 32500.000) = 0 
    [32500.000, 35000.000) = 0 
    [35000.000, 37500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   8873.537 us/op
     p(50.0000) =  10408.805 us/op
     p(90.0000) =  22571.176 us/op
     p(95.0000) =  37399.653 us/op
     p(99.0000) =  37399.653 us/op
     p(99.9000) =  37399.653 us/op
     p(99.9900) =  37399.653 us/op
     p(99.9990) =  37399.653 us/op
     p(99.9999) =  37399.653 us/op
    p(100.0000) =  37399.653 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 207639.783 us/op
# Warmup Iteration   2: 49987.430 us/op
# Warmup Iteration   3: 31682.495 us/op
# Warmup Iteration   4: 30322.888 us/op
# Warmup Iteration   5: 42383.226 us/op
Iteration   1: 36603.121 us/op
Iteration   2: 45176.075 us/op
Iteration   3: 49923.641 us/op
Iteration   4: 45103.580 us/op
Iteration   5: 38438.103 us/op
Iteration   6: 41230.023 us/op
Iteration   7: 35972.813 us/op
Iteration   8: 40724.245 us/op
Iteration   9: 36597.861 us/op
Iteration  10: 36243.854 us/op
Iteration  11: 39469.306 us/op
Iteration  12: 33088.940 us/op
Iteration  13: 35893.823 us/op
Iteration  14: 38844.226 us/op
Iteration  15: 31905.929 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  N = 15
  mean =  39014.369 ±(99.9%) 5162.080 us/op

  Histogram, us/op:
    [30000.000, 31250.000) = 0 
    [31250.000, 32500.000) = 1 
    [32500.000, 33750.000) = 1 
    [33750.000, 35000.000) = 0 
    [35000.000, 36250.000) = 3 
    [36250.000, 37500.000) = 2 
    [37500.000, 38750.000) = 1 
    [38750.000, 40000.000) = 2 
    [40000.000, 41250.000) = 2 
    [41250.000, 42500.000) = 0 
    [42500.000, 43750.000) = 0 
    [43750.000, 45000.000) = 0 
    [45000.000, 46250.000) = 2 
    [46250.000, 47500.000) = 0 
    [47500.000, 48750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  31905.929 us/op
     p(50.0000) =  38438.103 us/op
     p(90.0000) =  47075.101 us/op
     p(95.0000) =  49923.641 us/op
     p(99.0000) =  49923.641 us/op
     p(99.9000) =  49923.641 us/op
     p(99.9900) =  49923.641 us/op
     p(99.9990) =  49923.641 us/op
     p(99.9999) =  49923.641 us/op
    p(100.0000) =  49923.641 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 183477.060 us/op
# Warmup Iteration   2: 51545.828 us/op
# Warmup Iteration   3: 40632.370 us/op
# Warmup Iteration   4: 40431.049 us/op
# Warmup Iteration   5: 40330.594 us/op
Iteration   1: 40396.872 us/op
Iteration   2: 40340.027 us/op
Iteration   3: 40287.738 us/op
Iteration   4: 40427.361 us/op
Iteration   5: 40389.011 us/op
Iteration   6: 40448.944 us/op
Iteration   7: 40356.639 us/op
Iteration   8: 40344.315 us/op
Iteration   9: 40487.298 us/op
Iteration  10: 40394.033 us/op
Iteration  11: 40379.021 us/op
Iteration  12: 40415.402 us/op
Iteration  13: 40333.584 us/op
Iteration  14: 40474.099 us/op
Iteration  15: 40382.255 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  N = 15
  mean =  40390.440 ±(99.9%) 58.300 us/op

  Histogram, us/op:
    [40200.000, 40225.000) = 0 
    [40225.000, 40250.000) = 0 
    [40250.000, 40275.000) = 0 
    [40275.000, 40300.000) = 1 
    [40300.000, 40325.000) = 0 
    [40325.000, 40350.000) = 3 
    [40350.000, 40375.000) = 1 
    [40375.000, 40400.000) = 5 
    [40400.000, 40425.000) = 1 
    [40425.000, 40450.000) = 2 
    [40450.000, 40475.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  40287.738 us/op
     p(50.0000) =  40389.011 us/op
     p(90.0000) =  40479.379 us/op
     p(95.0000) =  40487.298 us/op
     p(99.0000) =  40487.298 us/op
     p(99.9000) =  40487.298 us/op
     p(99.9900) =  40487.298 us/op
     p(99.9990) =  40487.298 us/op
     p(99.9999) =  40487.298 us/op
    p(100.0000) =  40487.298 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 177902.147 us/op
# Warmup Iteration   2: 25393.506 us/op
# Warmup Iteration   3: 29700.590 us/op
# Warmup Iteration   4: 29182.657 us/op
# Warmup Iteration   5: 40248.393 us/op
Iteration   1: 29106.321 us/op
Iteration   2: 33193.107 us/op
Iteration   3: 33319.005 us/op
Iteration   4: 49198.103 us/op
Iteration   5: 33213.176 us/op
Iteration   6: 33628.602 us/op
Iteration   7: 33202.654 us/op
Iteration   8: 33052.826 us/op
Iteration   9: 32871.550 us/op
Iteration  10: 32928.985 us/op
Iteration  11: 32436.311 us/op
Iteration  12: 32704.168 us/op
Iteration  13: 34939.396 us/op
Iteration  14: 34996.870 us/op
Iteration  15: 31263.316 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  N = 15
  mean =  34003.626 ±(99.9%) 4731.600 us/op

  Histogram, us/op:
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 0 
    [27500.000, 30000.000) = 1 
    [30000.000, 32500.000) = 2 
    [32500.000, 35000.000) = 11 
    [35000.000, 37500.000) = 0 
    [37500.000, 40000.000) = 0 
    [40000.000, 42500.000) = 0 
    [42500.000, 45000.000) = 0 
    [45000.000, 47500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  29106.321 us/op
     p(50.0000) =  33193.107 us/op
     p(90.0000) =  40677.363 us/op
     p(95.0000) =  49198.103 us/op
     p(99.0000) =  49198.103 us/op
     p(99.9000) =  49198.103 us/op
     p(99.9900) =  49198.103 us/op
     p(99.9990) =  49198.103 us/op
     p(99.9999) =  49198.103 us/op
    p(100.0000) =  49198.103 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 88993.100 us/op
# Warmup Iteration   2: 31785.415 us/op
# Warmup Iteration   3: 29867.015 us/op
# Warmup Iteration   4: 23898.723 us/op
# Warmup Iteration   5: 37139.872 us/op
Iteration   1: 34849.952 us/op
Iteration   2: 23907.291 us/op
Iteration   3: 30012.440 us/op
Iteration   4: 29987.217 us/op
Iteration   5: 29817.576 us/op
Iteration   6: 23750.731 us/op
Iteration   7: 23768.175 us/op
Iteration   8: 26988.083 us/op
Iteration   9: 33653.334 us/op
Iteration  10: 23900.456 us/op
Iteration  11: 34934.186 us/op
Iteration  12: 27331.584 us/op
Iteration  13: 26459.578 us/op
Iteration  14: 25688.697 us/op
Iteration  15: 25463.734 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  N = 15
  mean =  28034.202 ±(99.9%) 4270.412 us/op

  Histogram, us/op:
    [20000.000, 21250.000) = 0 
    [21250.000, 22500.000) = 0 
    [22500.000, 23750.000) = 0 
    [23750.000, 25000.000) = 4 
    [25000.000, 26250.000) = 2 
    [26250.000, 27500.000) = 3 
    [27500.000, 28750.000) = 0 
    [28750.000, 30000.000) = 2 
    [30000.000, 31250.000) = 1 
    [31250.000, 32500.000) = 0 
    [32500.000, 33750.000) = 1 
    [33750.000, 35000.000) = 2 
    [35000.000, 36250.000) = 0 
    [36250.000, 37500.000) = 0 
    [37500.000, 38750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  23750.731 us/op
     p(50.0000) =  26988.083 us/op
     p(90.0000) =  34883.646 us/op
     p(95.0000) =  34934.186 us/op
     p(99.0000) =  34934.186 us/op
     p(99.9000) =  34934.186 us/op
     p(99.9900) =  34934.186 us/op
     p(99.9990) =  34934.186 us/op
     p(99.9999) =  34934.186 us/op
    p(100.0000) =  34934.186 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 141374.919 us/op
# Warmup Iteration   2: 51792.363 us/op
# Warmup Iteration   3: 51055.859 us/op
# Warmup Iteration   4: 68466.718 us/op
# Warmup Iteration   5: 98168.471 us/op
Iteration   1: 42133.649 us/op
Iteration   2: 54065.681 us/op
Iteration   3: 40692.628 us/op
Iteration   4: 42213.994 us/op
Iteration   5: 41809.949 us/op
Iteration   6: 40133.393 us/op
Iteration   7: 57794.266 us/op
Iteration   8: 42259.284 us/op
Iteration   9: 53965.327 us/op
Iteration  10: 41735.373 us/op
Iteration  11: 40549.289 us/op
Iteration  12: 40460.199 us/op
Iteration  13: 40304.285 us/op
Iteration  14: 40819.399 us/op
Iteration  15: 40170.210 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  N = 15
  mean =  43940.462 ±(99.9%) 6384.073 us/op

  Histogram, us/op:
    [40000.000, 41250.000) = 7 
    [41250.000, 42500.000) = 5 
    [42500.000, 43750.000) = 0 
    [43750.000, 45000.000) = 0 
    [45000.000, 46250.000) = 0 
    [46250.000, 47500.000) = 0 
    [47500.000, 48750.000) = 0 
    [48750.000, 50000.000) = 0 
    [50000.000, 51250.000) = 0 
    [51250.000, 52500.000) = 0 
    [52500.000, 53750.000) = 0 
    [53750.000, 55000.000) = 2 
    [55000.000, 56250.000) = 0 
    [56250.000, 57500.000) = 0 
    [57500.000, 58750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  40133.393 us/op
     p(50.0000) =  41735.373 us/op
     p(90.0000) =  55557.115 us/op
     p(95.0000) =  57794.266 us/op
     p(99.0000) =  57794.266 us/op
     p(99.9000) =  57794.266 us/op
     p(99.9900) =  57794.266 us/op
     p(99.9990) =  57794.266 us/op
     p(99.9999) =  57794.266 us/op
    p(100.0000) =  57794.266 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 20425.422 us/op
# Warmup Iteration   2: 3676.271 us/op
# Warmup Iteration   3: 1293.629 us/op
# Warmup Iteration   4: 1161.356 us/op
# Warmup Iteration   5: 1074.868 us/op
Iteration   1: 1052.711 us/op
Iteration   2: 1038.362 us/op
Iteration   3: 1037.350 us/op
Iteration   4: 1071.635 us/op
Iteration   5: 1107.939 us/op
Iteration   6: 1029.055 us/op
Iteration   7: 882.622 us/op
Iteration   8: 967.097 us/op
Iteration   9: 915.999 us/op
Iteration  10: 914.300 us/op
Iteration  11: 1015.814 us/op
Iteration  12: 985.339 us/op
Iteration  13: 950.600 us/op
Iteration  14: 947.943 us/op
Iteration  15: 915.706 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean =    988.831 ±(99.9%) 71.932 us/op

  Histogram, us/op:
    [ 800.000,  825.000) = 0 
    [ 825.000,  850.000) = 0 
    [ 850.000,  875.000) = 0 
    [ 875.000,  900.000) = 1 
    [ 900.000,  925.000) = 3 
    [ 925.000,  950.000) = 1 
    [ 950.000,  975.000) = 2 
    [ 975.000, 1000.000) = 1 
    [1000.000, 1025.000) = 1 
    [1025.000, 1050.000) = 3 
    [1050.000, 1075.000) = 2 
    [1075.000, 1100.000) = 0 
    [1100.000, 1125.000) = 1 
    [1125.000, 1150.000) = 0 
    [1150.000, 1175.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    882.622 us/op
     p(50.0000) =    985.339 us/op
     p(90.0000) =   1086.157 us/op
     p(95.0000) =   1107.939 us/op
     p(99.0000) =   1107.939 us/op
     p(99.9000) =   1107.939 us/op
     p(99.9900) =   1107.939 us/op
     p(99.9990) =   1107.939 us/op
     p(99.9999) =   1107.939 us/op
    p(100.0000) =   1107.939 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 41283.326 us/op
# Warmup Iteration   2: 12700.068 us/op
# Warmup Iteration   3: 11055.515 us/op
# Warmup Iteration   4: 11273.750 us/op
# Warmup Iteration   5: 11028.420 us/op
Iteration   1: 10926.703 us/op
Iteration   2: 10721.614 us/op
Iteration   3: 10918.483 us/op
Iteration   4: 14481.420 us/op
Iteration   5: 12092.371 us/op
Iteration   6: 10810.274 us/op
Iteration   7: 10959.229 us/op
Iteration   8: 10788.788 us/op
Iteration   9: 10824.866 us/op
Iteration  10: 10682.257 us/op
Iteration  11: 10860.146 us/op
Iteration  12: 10767.073 us/op
Iteration  13: 10792.771 us/op
Iteration  14: 10741.686 us/op
Iteration  15: 10799.210 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean =  11144.459 ±(99.9%) 1050.875 us/op

  Histogram, us/op:
    [10000.000, 10500.000) = 0 
    [10500.000, 11000.000) = 13 
    [11000.000, 11500.000) = 0 
    [11500.000, 12000.000) = 0 
    [12000.000, 12500.000) = 1 
    [12500.000, 13000.000) = 0 
    [13000.000, 13500.000) = 0 
    [13500.000, 14000.000) = 0 
    [14000.000, 14500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  10682.257 us/op
     p(50.0000) =  10810.274 us/op
     p(90.0000) =  13047.991 us/op
     p(95.0000) =  14481.420 us/op
     p(99.0000) =  14481.420 us/op
     p(99.9000) =  14481.420 us/op
     p(99.9900) =  14481.420 us/op
     p(99.9990) =  14481.420 us/op
     p(99.9999) =  14481.420 us/op
    p(100.0000) =  14481.420 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 129014.385 us/op
# Warmup Iteration   2: 115628.413 us/op
# Warmup Iteration   3: 112088.919 us/op
# Warmup Iteration   4: 111034.976 us/op
# Warmup Iteration   5: 111006.233 us/op
Iteration   1: 110837.380 us/op
Iteration   2: 112015.755 us/op
Iteration   3: 112312.706 us/op
Iteration   4: 112046.411 us/op
Iteration   5: 110359.961 us/op
Iteration   6: 110526.137 us/op
Iteration   7: 110529.557 us/op
Iteration   8: 112371.781 us/op
Iteration   9: 110943.964 us/op
Iteration  10: 112713.373 us/op
Iteration  11: 112875.312 us/op
Iteration  12: 112511.227 us/op
Iteration  13: 112713.872 us/op
Iteration  14: 112592.237 us/op
Iteration  15: 112915.529 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean = 111884.347 ±(99.9%) 1020.773 us/op

  Histogram, us/op:
    [110000.000, 110250.000) = 0 
    [110250.000, 110500.000) = 1 
    [110500.000, 110750.000) = 2 
    [110750.000, 111000.000) = 2 
    [111000.000, 111250.000) = 0 
    [111250.000, 111500.000) = 0 
    [111500.000, 111750.000) = 0 
    [111750.000, 112000.000) = 0 
    [112000.000, 112250.000) = 2 
    [112250.000, 112500.000) = 2 
    [112500.000, 112750.000) = 4 

  Percentiles, us/op:
      p(0.0000) = 110359.961 us/op
     p(50.0000) = 112312.706 us/op
     p(90.0000) = 112891.399 us/op
     p(95.0000) = 112915.529 us/op
     p(99.0000) = 112915.529 us/op
     p(99.9000) = 112915.529 us/op
     p(99.9900) = 112915.529 us/op
     p(99.9990) = 112915.529 us/op
     p(99.9999) = 112915.529 us/op
    p(100.0000) = 112915.529 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1247682.147 us/op
# Warmup Iteration   2: 720078.852 us/op
# Warmup Iteration   3: 687092.338 us/op
# Warmup Iteration   4: 712306.464 us/op
# Warmup Iteration   5: 698398.603 us/op
Iteration   1: 687934.103 us/op
Iteration   2: 694666.565 us/op
Iteration   3: 693310.416 us/op
Iteration   4: 677853.222 us/op
Iteration   5: 700563.654 us/op
Iteration   6: 678369.162 us/op
Iteration   7: 715664.544 us/op
Iteration   8: 715643.979 us/op
Iteration   9: 686986.247 us/op
Iteration  10: 695385.461 us/op
Iteration  11: 691936.453 us/op
Iteration  12: 679674.365 us/op
Iteration  13: 700665.355 us/op
Iteration  14: 715622.977 us/op
Iteration  15: 694176.919 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  N = 15
  mean = 695230.228 ±(99.9%) 13623.577 us/op

  Histogram, us/op:
    [670000.000, 675000.000) = 0 
    [675000.000, 680000.000) = 3 
    [680000.000, 685000.000) = 0 
    [685000.000, 690000.000) = 2 
    [690000.000, 695000.000) = 4 
    [695000.000, 700000.000) = 1 
    [700000.000, 705000.000) = 2 
    [705000.000, 710000.000) = 0 
    [710000.000, 715000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 677853.222 us/op
     p(50.0000) = 694176.919 us/op
     p(90.0000) = 715652.205 us/op
     p(95.0000) = 715664.544 us/op
     p(99.0000) = 715664.544 us/op
     p(99.9000) = 715664.544 us/op
     p(99.9900) = 715664.544 us/op
     p(99.9990) = 715664.544 us/op
     p(99.9999) = 715664.544 us/op
    p(100.0000) = 715664.544 us/op


# Run complete. Total time: 08:28:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                    (iterations)  (length)     (size)    Mode      Cnt        Score       Error   Units
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A   thrpt       15        0.002 ±     0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A   thrpt       15        0.002 ±     0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A   thrpt       15        0.001 ±     0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A   thrpt       15        0.002 ±     0.001  ops/us
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A   thrpt       15        1.475 ±     0.001  ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A   thrpt       15        0.621 ±     0.001  ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A   thrpt       15        0.358 ±     0.001  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10   thrpt       15       19.482 ±     0.008  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100   thrpt       15        2.025 ±     0.026  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000   thrpt       15        0.196 ±     0.002  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10   thrpt       15       20.908 ±     0.312  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100   thrpt       15        2.352 ±     0.022  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000   thrpt       15        0.220 ±     0.008  ops/us
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁴              ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A   thrpt       15        0.002 ±     0.001  ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A   thrpt       15       ≈ 10⁻⁷              ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A   thrpt       15       ≈ 10⁻³              ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁴              ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A   thrpt       15       46.161 ±     0.031  ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁴              ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁴              ops/us
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A   thrpt       15        0.001 ±     0.001  ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A   thrpt       15       ≈ 10⁻⁴              ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024    avgt       15   205646.430 ±   637.148   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240    avgt       15   162105.729 ±   750.856   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400    avgt       15   208406.451 ±   746.180   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576    avgt       15   251035.644 ±  2484.864   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760    avgt       15   225227.640 ±  2495.024   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600    avgt       15   215430.995 ±  1705.745   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024    avgt       15   877294.962 ±  5614.285   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240    avgt       15   868060.421 ±  7388.021   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400    avgt       15   645066.322 ±  2692.387   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760    avgt       15   550587.047 ±  5826.312   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600    avgt       15   474280.893 ±  5479.232   us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A    avgt       15      534.801 ±     0.402   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A    avgt       15      658.027 ±     3.998   us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A    avgt       15      822.814 ±    94.750   us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A    avgt       15      535.048 ±     0.218   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A    avgt       15   886775.769 ±   741.609   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A    avgt       15   240348.177 ±  3399.691   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A    avgt       15  2191465.004 ± 26791.916   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A    avgt       15        0.678 ±     0.001   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A    avgt       15        1.610 ±     0.001   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A    avgt       15        2.797 ±     0.002   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10    avgt       15        0.051 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100    avgt       15        0.492 ±     0.005   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000    avgt       15        5.095 ±     0.056   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10    avgt       15        0.048 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100    avgt       15        0.426 ±     0.006   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000    avgt       15        4.607 ±     0.180   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A    avgt       15    14795.686 ±    10.197   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A    avgt       15      421.349 ±     1.427   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A    avgt       15    60412.466 ±   137.101   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A    avgt       15  4196254.452 ± 12770.135   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A    avgt       15     2999.325 ±     2.156   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A    avgt       15    31521.122 ±    15.056   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A    avgt       15  1760637.258 ±  1226.304   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A    avgt       15        0.022 ±     0.001   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A    avgt       15    10589.508 ±     3.870   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A    avgt       15    35958.003 ±  4011.816   us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A    avgt       15    41959.541 ±    98.424   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A    avgt       15    67371.245 ±   721.375   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A    avgt       15    24329.650 ±    95.868   us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A    avgt       15    41478.738 ±   886.178   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A    avgt       15      805.523 ±     2.810   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A    avgt       15    10864.433 ±    32.647   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A    avgt       15   120579.226 ±   982.925   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A    avgt       15   843497.114 ±  7279.116   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024  sample      736   205066.774 ±   433.195   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A       1024  sample            199229.440               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A       1024  sample            203948.032               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A       1024  sample            210239.488               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A       1024  sample            211550.208               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A       1024  sample            216774.738               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A       1024  sample            228589.568               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A       1024  sample            228589.568               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A       1024  sample            228589.568               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240  sample      933   161730.485 ±   410.217   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A      10240  sample            156762.112               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A      10240  sample            160432.128               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A      10240  sample            166880.870               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A      10240  sample            168637.235               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A      10240  sample            175809.495               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A      10240  sample            184287.232               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A      10240  sample            184287.232               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A      10240  sample            184287.232               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400  sample      731   207724.914 ±   452.235   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A     102400  sample            201850.880               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A     102400  sample            206569.472               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A     102400  sample            213070.643               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A     102400  sample            214276.506               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A     102400  sample            220913.992               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A     102400  sample            229638.144               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A     102400  sample            229638.144               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A     102400  sample            229638.144               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576  sample      605   250114.840 ±  2072.958   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A    1048576  sample            224657.408               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A    1048576  sample            247726.080               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A    1048576  sample            271790.899               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A    1048576  sample            279288.218               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A    1048576  sample            292521.247               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A    1048576  sample            303562.752               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A    1048576  sample            303562.752               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A    1048576  sample            303562.752               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760  sample      672   225843.298 ±  1582.740   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A   10485760  sample            205520.896               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A   10485760  sample            223346.688               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A   10485760  sample            243453.133               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A   10485760  sample            249482.445               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A   10485760  sample            262285.558               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A   10485760  sample            283115.520               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A   10485760  sample            283115.520               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A   10485760  sample            283115.520               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600  sample      696   217703.059 ±  1490.282   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A  104857600  sample            200540.160               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A  104857600  sample            215482.368               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A  104857600  sample            234514.022               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A  104857600  sample            242221.056               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A  104857600  sample            256916.849               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A  104857600  sample            268959.744               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A  104857600  sample            268959.744               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A  104857600  sample            268959.744               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024  sample      180   876947.410 ± 10315.165   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A       1024  sample            732954.624               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A       1024  sample            886571.008               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A       1024  sample            909010.534               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A       1024  sample            914305.843               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A       1024  sample            949758.198               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A       1024  sample            953155.584               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A       1024  sample            953155.584               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A       1024  sample            953155.584               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240  sample      180   858894.427 ±  5303.990   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A      10240  sample            780140.544               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A      10240  sample            859832.320               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A      10240  sample            881852.416               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A      10240  sample            887042.867               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A      10240  sample            894833.787               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A      10240  sample            896532.480               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A      10240  sample            896532.480               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A      10240  sample            896532.480               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400  sample      240   648330.172 ±  3095.641   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A     102400  sample            597688.320               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A     102400  sample            649068.544               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A     102400  sample            664797.184               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A     102400  sample            668991.488               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A     102400  sample            688243.343               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A     102400  sample            692060.160               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A     102400  sample            692060.160               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A     102400  sample            692060.160               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760  sample      282   552701.807 ±  5237.163   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A   10485760  sample            493879.296               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A   10485760  sample            550502.400               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A   10485760  sample            590033.715               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A   10485760  sample            600676.762               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A   10485760  sample            621113.508               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A   10485760  sample            650117.120               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A   10485760  sample            650117.120               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A   10485760  sample            650117.120               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600  sample      323   476608.632 ±  4024.995   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A  104857600  sample            431489.024               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A  104857600  sample            474480.640               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A  104857600  sample            506252.493               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A  104857600  sample            517891.686               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A  104857600  sample            535843.308               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A  104857600  sample            541065.216               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A  104857600  sample            541065.216               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A  104857600  sample            541065.216               us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A  sample   280120      534.832 ±     0.074   us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.00                                                                        N/A       N/A        N/A  sample               525.312               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.50                                                                        N/A       N/A        N/A  sample               533.504               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.90                                                                        N/A       N/A        N/A  sample               545.792               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.95                                                                        N/A       N/A        N/A  sample               549.888               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.99                                                                        N/A       N/A        N/A  sample               574.464               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.999                                                                       N/A       N/A        N/A  sample               623.616               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.9999                                                                      N/A       N/A        N/A  sample               862.196               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p1.00                                                                        N/A       N/A        N/A  sample              3190.784               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A  sample   229060      654.213 ±     0.094   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.00                                                        N/A       N/A        N/A  sample               644.096               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.50                                                        N/A       N/A        N/A  sample               651.264               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.90                                                        N/A       N/A        N/A  sample               665.600               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.95                                                        N/A       N/A        N/A  sample               670.720               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.99                                                        N/A       N/A        N/A  sample               697.344               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.999                                                       N/A       N/A        N/A  sample               752.640               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.9999                                                      N/A       N/A        N/A  sample               998.688               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p1.00                                                        N/A       N/A        N/A  sample              3272.704               us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A  sample   160250      935.485 ±     0.280   us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.00                                                                        N/A       N/A        N/A  sample               749.568               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.50                                                                        N/A       N/A        N/A  sample               937.984               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.90                                                                        N/A       N/A        N/A  sample               948.224               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.95                                                                        N/A       N/A        N/A  sample               952.320               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.99                                                                        N/A       N/A        N/A  sample               967.680               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.999                                                                       N/A       N/A        N/A  sample              1041.408               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.9999                                                                      N/A       N/A        N/A  sample              1167.309               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p1.00                                                                        N/A       N/A        N/A  sample              2777.088               us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A  sample   279975      535.127 ±     0.083   us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.00                                                                      N/A       N/A        N/A  sample               514.560               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.50                                                                      N/A       N/A        N/A  sample               533.504               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.90                                                                      N/A       N/A        N/A  sample               545.792               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.95                                                                      N/A       N/A        N/A  sample               550.912               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.99                                                                      N/A       N/A        N/A  sample               578.560               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.999                                                                     N/A       N/A        N/A  sample               641.049               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.9999                                                                    N/A       N/A        N/A  sample               801.792               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p1.00                                                                      N/A       N/A        N/A  sample              2924.544               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A  sample      180   885464.178 ±   484.470   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.00                                          N/A       N/A        N/A  sample            880803.840               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.50                                          N/A       N/A        N/A  sample            886046.720               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.90                                          N/A       N/A        N/A  sample            888143.872               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.95                                          N/A       N/A        N/A  sample            888143.872               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.99                                          N/A       N/A        N/A  sample            890241.024               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.999                                         N/A       N/A        N/A  sample            890241.024               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.9999                                        N/A       N/A        N/A  sample            890241.024               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p1.00                                          N/A       N/A        N/A  sample            890241.024               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A  sample      582   260906.698 ±   507.325   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.00                                  N/A       100        N/A  sample            255852.544               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.50                                  N/A       100        N/A  sample            260571.136               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.90                                  N/A       100        N/A  sample            265289.728               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.95                                  N/A       100        N/A  sample            266600.448               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.99                                  N/A       100        N/A  sample            272986.276               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.999                                 N/A       100        N/A  sample            284688.384               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.9999                                N/A       100        N/A  sample            284688.384               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p1.00                                  N/A       100        N/A  sample            284688.384               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A  sample       75  2173712.029 ± 14263.930   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.00                                  N/A      1000        N/A  sample           2113929.216               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.50                                  N/A      1000        N/A  sample           2168455.168               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.90                                  N/A      1000        N/A  sample           2231369.728               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.95                                  N/A      1000        N/A  sample           2236402.893               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.99                                  N/A      1000        N/A  sample           2256535.552               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.999                                 N/A      1000        N/A  sample           2256535.552               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.9999                                N/A      1000        N/A  sample           2256535.552               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p1.00                                  N/A      1000        N/A  sample           2256535.552               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A  sample  3396150        0.728 ±     0.004   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                                521       N/A        N/A  sample                 0.677               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                                521       N/A        N/A  sample                 0.709               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                                521       N/A        N/A  sample                 0.718               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                                521       N/A        N/A  sample                 0.721               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                                521       N/A        N/A  sample                 0.727               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                               521       N/A        N/A  sample                 5.999               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                              521       N/A        N/A  sample                17.836               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                                521       N/A        N/A  sample              2736.128               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A  sample  5765354        1.652 ±     0.001   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                               1153       N/A        N/A  sample                 1.604               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                               1153       N/A        N/A  sample                 1.632               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                               1153       N/A        N/A  sample                 1.642               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                               1153       N/A        N/A  sample                 1.646               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                               1153       N/A        N/A  sample                 1.656               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                              1153       N/A        N/A  sample                 7.800               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                             1153       N/A        N/A  sample                19.488               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                               1153       N/A        N/A  sample               427.008               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A  sample  3327986        2.849 ±     0.002   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                               2021       N/A        N/A  sample                 2.772               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                               2021       N/A        N/A  sample                 2.812               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                               2021       N/A        N/A  sample                 2.828               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                               2021       N/A        N/A  sample                 2.832               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                               2021       N/A        N/A  sample                 2.844               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                              2021       N/A        N/A  sample                11.744               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                             2021       N/A        N/A  sample                30.912               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                               2021       N/A        N/A  sample               486.400               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10  sample  3687378        0.111 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A         10  sample                 0.098               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A         10  sample                 0.103               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A         10  sample                 0.112               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A         10  sample                 0.113               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A         10  sample                 0.120               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A         10  sample                 0.314               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A         10  sample                 8.480               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A         10  sample               278.016               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100  sample  3112575        0.792 ±     0.003   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A        100  sample                 0.741               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A        100  sample                 0.768               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A        100  sample                 0.796               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A        100  sample                 0.804               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A        100  sample                 0.810               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A        100  sample                 7.016               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A        100  sample                18.112               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A        100  sample              2809.856               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000  sample  4905340        7.647 ±     0.002   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A       1000  sample                 7.288               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A       1000  sample                 7.440               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A       1000  sample                 7.936               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A       1000  sample                 7.992               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A       1000  sample                10.656               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A       1000  sample                17.152               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A       1000  sample                41.566               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A       1000  sample               539.648               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10  sample  4213679        0.103 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A         10  sample                 0.088               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A         10  sample                 0.099               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A         10  sample                 0.110               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A         10  sample                 0.111               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A         10  sample                 0.113               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A         10  sample                 0.225               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A         10  sample                 8.101               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A         10  sample               279.040               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100  sample  3441784        0.724 ±     0.003   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A        100  sample                 0.631               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A        100  sample                 0.703               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A        100  sample                 0.737               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A        100  sample                 0.753               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A        100  sample                 0.771               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A        100  sample                 6.360               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A        100  sample                16.133               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A        100  sample              2834.432               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000  sample  2785567        6.755 ±     0.006   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A       1000  sample                 6.456               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A       1000  sample                 6.664               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A       1000  sample                 6.808               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A       1000  sample                 6.856               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A       1000  sample                 9.776               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A       1000  sample                19.488               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A       1000  sample                47.893               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A       1000  sample              3084.288               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A  sample    10146    14787.616 ±     1.938   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.00                                  N/A       N/A        N/A  sample             14696.448               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.50                                  N/A       N/A        N/A  sample             14778.368               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.90                                  N/A       N/A        N/A  sample             14827.520               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.95                                  N/A       N/A        N/A  sample             14860.288               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.99                                  N/A       N/A        N/A  sample             14991.360               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.999                                 N/A       N/A        N/A  sample             15269.888               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.9999                                N/A       N/A        N/A  sample             17575.463               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p1.00                                  N/A       N/A        N/A  sample             17596.416               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A  sample   357956      418.651 ±     1.045   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A       100        N/A  sample               396.800               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A       100        N/A  sample               410.624               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A       100        N/A  sample               425.472               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A       100        N/A  sample               431.616               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A       100        N/A  sample               455.168               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A       100        N/A  sample              3072.176               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A       100        N/A  sample             10295.847               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A       100        N/A  sample             19300.352               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A  sample     2476    60731.412 ±   157.588   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A      1000        N/A  sample             59375.616               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A      1000        N/A  sample             59899.904               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A      1000        N/A  sample             63569.920               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A      1000        N/A  sample             65011.712               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A      1000        N/A  sample             71172.096               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A      1000        N/A  sample             78387.085               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A      1000        N/A  sample             81133.568               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A      1000        N/A  sample             81133.568               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A  sample       45  4214063.832 ± 10293.185   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A     10000        N/A  sample           4177526.784               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A     10000        N/A  sample           4215275.520               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A     10000        N/A  sample           4240441.344               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A     10000        N/A  sample           4247571.661               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A     10000        N/A  sample           4253024.256               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A     10000        N/A  sample           4253024.256               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A     10000        N/A  sample           4253024.256               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A     10000        N/A  sample           4253024.256               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A  sample    50021     2996.678 ±     0.443   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.00             N/A       N/A        N/A  sample              2969.600               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.50             N/A       N/A        N/A  sample              2994.176               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.90             N/A       N/A        N/A  sample              3014.656               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.95             N/A       N/A        N/A  sample              3035.136               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.99             N/A       N/A        N/A  sample              3072.000               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.999            N/A       N/A        N/A  sample              3264.422               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.9999           N/A       N/A        N/A  sample              4513.756               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p1.00             N/A       N/A        N/A  sample              4816.896               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A  sample     4770    31498.807 ±     5.360   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.00                     N/A       N/A        N/A  sample             31391.744               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.50                     N/A       N/A        N/A  sample             31490.048               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.90                     N/A       N/A        N/A  sample             31555.584               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.95                     N/A       N/A        N/A  sample             31588.352               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.99                     N/A       N/A        N/A  sample             31686.656               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.999                    N/A       N/A        N/A  sample             33304.543               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.9999                   N/A       N/A        N/A  sample             36241.408               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p1.00                     N/A       N/A        N/A  sample             36241.408               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A  sample      101  1760237.264 ±   771.383   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.00                                                 N/A       N/A        N/A  sample           1753219.072               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.50                                                 N/A       N/A        N/A  sample           1759510.528               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.90                                                 N/A       N/A        N/A  sample           1761607.680               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.95                                                 N/A       N/A        N/A  sample           1761607.680               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.99                                                 N/A       N/A        N/A  sample           1774148.649               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.999                                                N/A       N/A        N/A  sample           1774190.592               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.9999                                               N/A       N/A        N/A  sample           1774190.592               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p1.00                                                 N/A       N/A        N/A  sample           1774190.592               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A  sample  5219079        0.063 ±     0.001   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.00                       N/A       N/A        N/A  sample                 0.048               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.50                       N/A       N/A        N/A  sample                 0.059               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.90                       N/A       N/A        N/A  sample                 0.073               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.95                       N/A       N/A        N/A  sample                 0.074               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.99                       N/A       N/A        N/A  sample                 0.078               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.999                      N/A       N/A        N/A  sample                 0.121               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.9999                     N/A       N/A        N/A  sample                 6.329               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p1.00                       N/A       N/A        N/A  sample                94.336               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A  sample    14175    10578.941 ±     1.913   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.00                                   N/A       N/A        N/A  sample             10174.464               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.50                                   N/A       N/A        N/A  sample             10584.064               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.90                                   N/A       N/A        N/A  sample             10600.448               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.95                                   N/A       N/A        N/A  sample             10616.832               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.99                                   N/A       N/A        N/A  sample             10715.136               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.999                                  N/A       N/A        N/A  sample             11089.084               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.9999                                 N/A       N/A        N/A  sample             13948.708               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p1.00                                   N/A       N/A        N/A  sample             14352.384               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A  sample     4139    36266.275 ±   178.612   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.00                                             N/A       N/A        N/A  sample             31784.960               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.50                                             N/A       N/A        N/A  sample             35979.264               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.90                                             N/A       N/A        N/A  sample             42139.648               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.95                                             N/A       N/A        N/A  sample             44695.552               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.99                                             N/A       N/A        N/A  sample             44892.160               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.999                                            N/A       N/A        N/A  sample             53785.395               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.9999                                           N/A       N/A        N/A  sample             56295.424               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p1.00                                             N/A       N/A        N/A  sample             56295.424               us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A  sample     4610    32564.433 ±   150.086   us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.00                                                              N/A       N/A        N/A  sample             31817.728               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.50                                                              N/A       N/A        N/A  sample             32079.872               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.90                                                              N/A       N/A        N/A  sample             32243.712               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.95                                                              N/A       N/A        N/A  sample             32342.016               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.99                                                              N/A       N/A        N/A  sample             50979.799               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.999                                                             N/A       N/A        N/A  sample             61527.491               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.9999                                                            N/A       N/A        N/A  sample             65798.144               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p1.00                                                              N/A       N/A        N/A  sample             65798.144               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A  sample     2263    66682.576 ±  5644.239   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.00                                                            N/A       N/A        N/A  sample             22052.864               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.50                                                            N/A       N/A        N/A  sample             23330.816               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.90                                                            N/A       N/A        N/A  sample            219938.816               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.95                                                            N/A       N/A        N/A  sample            230634.291               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.99                                                            N/A       N/A        N/A  sample            256733.348               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.999                                                           N/A       N/A        N/A  sample            266006.954               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.9999                                                          N/A       N/A        N/A  sample            266338.304               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p1.00                                                            N/A       N/A        N/A  sample            266338.304               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A  sample     6585    22781.299 ±   180.599   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.00                                                                N/A       N/A        N/A  sample             21757.952               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.50                                                                N/A       N/A        N/A  sample             22052.864               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.90                                                                N/A       N/A        N/A  sample             22347.776               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.95                                                                N/A       N/A        N/A  sample             23625.728               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.99                                                                N/A       N/A        N/A  sample             53289.943               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.999                                                               N/A       N/A        N/A  sample             66758.640               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.9999                                                              N/A       N/A        N/A  sample             77201.408               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p1.00                                                                N/A       N/A        N/A  sample             77201.408               us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A  sample     3675    40851.362 ±   295.031   us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.00                                                                      N/A       N/A        N/A  sample             38469.632               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.50                                                                      N/A       N/A        N/A  sample             39976.960               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.90                                                                      N/A       N/A        N/A  sample             41615.360               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.95                                                                      N/A       N/A        N/A  sample             41943.040               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.99                                                                      N/A       N/A        N/A  sample             77578.895               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.999                                                                     N/A       N/A        N/A  sample             89607.111               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.9999                                                                    N/A       N/A        N/A  sample            104333.312               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p1.00                                                                      N/A       N/A        N/A  sample            104333.312               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A  sample   201777      742.781 ±     2.677   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A        10        N/A  sample               671.744               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A        10        N/A  sample               720.896               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A        10        N/A  sample               744.448               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A        10        N/A  sample               752.640               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A        10        N/A  sample               780.288               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A        10        N/A  sample              6639.157               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A        10        N/A  sample             12387.028               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A        10        N/A  sample             27066.368               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A  sample    13864    10814.675 ±    31.807   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A       100        N/A  sample             10240.000               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A       100        N/A  sample             10616.832               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A       100        N/A  sample             10797.056               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A       100        N/A  sample             10895.360               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A       100        N/A  sample             16187.392               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A       100        N/A  sample             22320.251               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A       100        N/A  sample             39093.240               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A       100        N/A  sample             40435.712               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A  sample     1256   120079.797 ±   948.063   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A      1000        N/A  sample            108658.688               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A      1000        N/A  sample            119341.056               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A      1000        N/A  sample            135344.947               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A      1000        N/A  sample            140247.040               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A      1000        N/A  sample            147400.950               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A      1000        N/A  sample            154320.765               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A      1000        N/A  sample            154927.104               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A      1000        N/A  sample            154927.104               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A  sample      258   598271.540 ± 10856.264   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.00                        N/A       N/A        N/A  sample            512229.376               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.50                        N/A       N/A        N/A  sample            576716.800               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.90                        N/A       N/A        N/A  sample            691011.584               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.95                        N/A       N/A        N/A  sample            698351.616               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.99                        N/A       N/A        N/A  sample            720371.712               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.999                       N/A       N/A        N/A  sample            726663.168               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.9999                      N/A       N/A        N/A  sample            726663.168               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p1.00                        N/A       N/A        N/A  sample            726663.168               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024      ss       15   205098.331 ±  2604.019   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240      ss       15   160334.549 ±  1109.714   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400      ss       15   208424.095 ±  2593.568   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576      ss       15   235599.277 ±  8874.327   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760      ss       15   212223.366 ±  3627.121   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600      ss       15   209339.988 ±  5882.564   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024      ss       15   766804.666 ±  9110.141   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240      ss       15   834346.607 ± 23805.626   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400      ss       15   631721.955 ± 12192.303   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760      ss       15   539924.998 ± 27210.585   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600      ss       15   473347.698 ± 15416.300   us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A      ss       15      627.391 ±    24.779   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A      ss       15      722.143 ±    31.121   us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A      ss       15      953.806 ±    20.766   us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A      ss       15      607.635 ±    18.952   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A      ss       15   922242.377 ±  5340.558   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A      ss       15   218421.988 ±  6263.638   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A      ss       15  1969678.379 ± 27690.661   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A      ss       15       16.127 ±    16.744   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A      ss       15       12.009 ±    16.349   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A      ss       15        9.211 ±     2.934   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10      ss       15        6.842 ±     1.470   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100      ss       15       15.229 ±     3.069   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000      ss       15      103.384 ±    30.155   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10      ss       15        7.492 ±     1.385   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100      ss       15       18.325 ±    11.588   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000      ss       15       99.319 ±    29.361   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A      ss       15    14993.975 ±   266.660   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A      ss       15     1197.048 ±   659.946   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A      ss       15    41569.105 ±   134.303   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A      ss       15  6752939.317 ± 18309.038   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A      ss       15     3003.374 ±     9.567   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A      ss       15    31544.034 ±    96.321   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A      ss       15  1761279.432 ±  3831.864   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A      ss       15       13.584 ±     2.934   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A      ss       15    12265.019 ±  7474.546   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A      ss       15    39014.369 ±  5162.080   us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A      ss       15    40390.440 ±    58.300   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A      ss       15    34003.626 ±  4731.600   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A      ss       15    28034.202 ±  4270.412   us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A      ss       15    43940.462 ±  6384.073   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A      ss       15      988.831 ±    71.932   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A      ss       15    11144.459 ±  1050.875   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A      ss       15   111884.347 ±  1020.773   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A      ss       15   695230.228 ± 13623.577   us/op
