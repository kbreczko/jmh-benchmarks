# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 0.00% complete, ETA 07:40:00
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 0.72% complete, ETA 08:20:19
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 1.45% complete, ETA 08:13:59
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 2.17% complete, ETA 08:09:34
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 2.90% complete, ETA 08:05:48
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 3.62% complete, ETA 08:02:08
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 4.35% complete, ETA 07:58:14
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 5.07% complete, ETA 07:58:43
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 5.80% complete, ETA 07:57:02
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 6.52% complete, ETA 07:52:52
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 7.25% complete, ETA 07:51:19
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 7.97% complete, ETA 07:47:42
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 8.70% complete, ETA 07:45:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ops/us
# Warmup Iteration   2: 0.002 ops/us
# Warmup Iteration   3: 0.002 ops/us
# Warmup Iteration   4: 0.002 ops/us
# Warmup Iteration   5: 0.002 ops/us
Iteration   1: 0.002 ops/us
Iteration   2: 0.002 ops/us
Iteration   3: 0.002 ops/us
Iteration   4: 0.002 ops/us
Iteration   5: 0.002 ops/us
Iteration   6: 0.002 ops/us
Iteration   7: 0.002 ops/us
Iteration   8: 0.002 ops/us
Iteration   9: 0.002 ops/us
Iteration  10: 0.002 ops/us
Iteration  11: 0.002 ops/us
Iteration  12: 0.002 ops/us
Iteration  13: 0.002 ops/us
Iteration  14: 0.002 ops/us
Iteration  15: 0.002 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  0.002 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 9.42% complete, ETA 07:41:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ops/us
# Warmup Iteration   2: 0.002 ops/us
# Warmup Iteration   3: 0.002 ops/us
# Warmup Iteration   4: 0.002 ops/us
# Warmup Iteration   5: 0.002 ops/us
Iteration   1: 0.002 ops/us
Iteration   2: 0.001 ops/us
Iteration   3: 0.002 ops/us
Iteration   4: 0.002 ops/us
Iteration   5: 0.002 ops/us
Iteration   6: 0.002 ops/us
Iteration   7: 0.002 ops/us
Iteration   8: 0.002 ops/us
Iteration   9: 0.002 ops/us
Iteration  10: 0.002 ops/us
Iteration  11: 0.002 ops/us
Iteration  12: 0.002 ops/us
Iteration  13: 0.002 ops/us
Iteration  14: 0.002 ops/us
Iteration  15: 0.002 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  0.002 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 10.14% complete, ETA 07:36:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ops/us
# Warmup Iteration   2: 0.001 ops/us
# Warmup Iteration   3: 0.001 ops/us
# Warmup Iteration   4: 0.001 ops/us
# Warmup Iteration   5: 0.001 ops/us
Iteration   1: 0.001 ops/us
Iteration   2: 0.001 ops/us
Iteration   3: 0.001 ops/us
Iteration   4: 0.001 ops/us
Iteration   5: 0.001 ops/us
Iteration   6: 0.001 ops/us
Iteration   7: 0.001 ops/us
Iteration   8: 0.001 ops/us
Iteration   9: 0.001 ops/us
Iteration  10: 0.001 ops/us
Iteration  11: 0.001 ops/us
Iteration  12: 0.001 ops/us
Iteration  13: 0.001 ops/us
Iteration  14: 0.001 ops/us
Iteration  15: 0.001 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  0.001 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 10.87% complete, ETA 07:32:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ops/us
# Warmup Iteration   2: 0.002 ops/us
# Warmup Iteration   3: 0.002 ops/us
# Warmup Iteration   4: 0.002 ops/us
# Warmup Iteration   5: 0.002 ops/us
Iteration   1: 0.002 ops/us
Iteration   2: 0.002 ops/us
Iteration   3: 0.002 ops/us
Iteration   4: 0.002 ops/us
Iteration   5: 0.002 ops/us
Iteration   6: 0.002 ops/us
Iteration   7: 0.002 ops/us
Iteration   8: 0.002 ops/us
Iteration   9: 0.002 ops/us
Iteration  10: 0.002 ops/us
Iteration  11: 0.002 ops/us
Iteration  12: 0.002 ops/us
Iteration  13: 0.002 ops/us
Iteration  14: 0.002 ops/us
Iteration  15: 0.002 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  0.002 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 11.59% complete, ETA 07:27:47
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 12.32% complete, ETA 07:23:52
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 13.04% complete, ETA 07:19:57
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 13.77% complete, ETA 07:19:07
# Fork: 1 of 1
# Warmup Iteration   1: 1.434 ops/us
# Warmup Iteration   2: 1.474 ops/us
# Warmup Iteration   3: 1.476 ops/us
# Warmup Iteration   4: 1.475 ops/us
# Warmup Iteration   5: 1.476 ops/us
Iteration   1: 1.476 ops/us
Iteration   2: 1.476 ops/us
Iteration   3: 1.476 ops/us
Iteration   4: 1.476 ops/us
Iteration   5: 1.476 ops/us
Iteration   6: 1.475 ops/us
Iteration   7: 1.475 ops/us
Iteration   8: 1.476 ops/us
Iteration   9: 1.476 ops/us
Iteration  10: 1.475 ops/us
Iteration  11: 1.475 ops/us
Iteration  12: 1.476 ops/us
Iteration  13: 1.476 ops/us
Iteration  14: 1.476 ops/us
Iteration  15: 1.476 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  1.476 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (1.475, 1.476, 1.476), stdev = 0.001
  CI (99.9%): [1.475, 1.476] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 14.49% complete, ETA 07:14:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.607 ops/us
# Warmup Iteration   2: 0.621 ops/us
# Warmup Iteration   3: 0.621 ops/us
# Warmup Iteration   4: 0.621 ops/us
# Warmup Iteration   5: 0.621 ops/us
Iteration   1: 0.621 ops/us
Iteration   2: 0.621 ops/us
Iteration   3: 0.621 ops/us
Iteration   4: 0.621 ops/us
Iteration   5: 0.621 ops/us
Iteration   6: 0.621 ops/us
Iteration   7: 0.621 ops/us
Iteration   8: 0.621 ops/us
Iteration   9: 0.621 ops/us
Iteration  10: 0.621 ops/us
Iteration  11: 0.621 ops/us
Iteration  12: 0.621 ops/us
Iteration  13: 0.621 ops/us
Iteration  14: 0.621 ops/us
Iteration  15: 0.621 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.621 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.621, 0.621, 0.621), stdev = 0.001
  CI (99.9%): [0.621, 0.621] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 15.22% complete, ETA 07:10:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.350 ops/us
# Warmup Iteration   2: 0.358 ops/us
# Warmup Iteration   3: 0.358 ops/us
# Warmup Iteration   4: 0.358 ops/us
# Warmup Iteration   5: 0.358 ops/us
Iteration   1: 0.358 ops/us
Iteration   2: 0.358 ops/us
Iteration   3: 0.358 ops/us
Iteration   4: 0.358 ops/us
Iteration   5: 0.357 ops/us
Iteration   6: 0.357 ops/us
Iteration   7: 0.357 ops/us
Iteration   8: 0.358 ops/us
Iteration   9: 0.357 ops/us
Iteration  10: 0.357 ops/us
Iteration  11: 0.357 ops/us
Iteration  12: 0.358 ops/us
Iteration  13: 0.357 ops/us
Iteration  14: 0.357 ops/us
Iteration  15: 0.358 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.358 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.357, 0.358, 0.358), stdev = 0.001
  CI (99.9%): [0.357, 0.358] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 15.94% complete, ETA 07:06:21
# Fork: 1 of 1
# Warmup Iteration   1: 19.943 ops/us
# Warmup Iteration   2: 20.105 ops/us
# Warmup Iteration   3: 19.492 ops/us
# Warmup Iteration   4: 19.215 ops/us
# Warmup Iteration   5: 19.491 ops/us
Iteration   1: 19.488 ops/us
Iteration   2: 19.214 ops/us
Iteration   3: 19.480 ops/us
Iteration   4: 19.487 ops/us
Iteration   5: 19.484 ops/us
Iteration   6: 19.483 ops/us
Iteration   7: 18.775 ops/us
Iteration   8: 19.480 ops/us
Iteration   9: 19.473 ops/us
Iteration  10: 19.492 ops/us
Iteration  11: 19.496 ops/us
Iteration  12: 19.486 ops/us
Iteration  13: 19.492 ops/us
Iteration  14: 19.493 ops/us
Iteration  15: 19.489 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  19.421 ±(99.9%) 0.205 ops/us [Average]
  (min, avg, max) = (18.775, 19.421, 19.496), stdev = 0.192
  CI (99.9%): [19.215, 19.626] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 16.67% complete, ETA 07:02:12
# Fork: 1 of 1
# Warmup Iteration   1: 2.088 ops/us
# Warmup Iteration   2: 2.157 ops/us
# Warmup Iteration   3: 2.007 ops/us
# Warmup Iteration   4: 1.993 ops/us
# Warmup Iteration   5: 2.040 ops/us
Iteration   1: 2.045 ops/us
Iteration   2: 2.046 ops/us
Iteration   3: 2.006 ops/us
Iteration   4: 2.044 ops/us
Iteration   5: 2.037 ops/us
Iteration   6: 2.046 ops/us
Iteration   7: 2.043 ops/us
Iteration   8: 2.039 ops/us
Iteration   9: 2.045 ops/us
Iteration  10: 2.046 ops/us
Iteration  11: 2.040 ops/us
Iteration  12: 2.042 ops/us
Iteration  13: 2.046 ops/us
Iteration  14: 1.977 ops/us
Iteration  15: 2.040 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  2.036 ±(99.9%) 0.020 ops/us [Average]
  (min, avg, max) = (1.977, 2.036, 2.046), stdev = 0.019
  CI (99.9%): [2.016, 2.056] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 17.39% complete, ETA 06:58:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.206 ops/us
# Warmup Iteration   2: 0.212 ops/us
# Warmup Iteration   3: 0.196 ops/us
# Warmup Iteration   4: 0.195 ops/us
# Warmup Iteration   5: 0.191 ops/us
Iteration   1: 0.193 ops/us
Iteration   2: 0.194 ops/us
Iteration   3: 0.196 ops/us
Iteration   4: 0.197 ops/us
Iteration   5: 0.199 ops/us
Iteration   6: 0.195 ops/us
Iteration   7: 0.196 ops/us
Iteration   8: 0.190 ops/us
Iteration   9: 0.195 ops/us
Iteration  10: 0.199 ops/us
Iteration  11: 0.198 ops/us
Iteration  12: 0.193 ops/us
Iteration  13: 0.197 ops/us
Iteration  14: 0.196 ops/us
Iteration  15: 0.193 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.195 ±(99.9%) 0.003 ops/us [Average]
  (min, avg, max) = (0.190, 0.195, 0.199), stdev = 0.002
  CI (99.9%): [0.193, 0.198] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 18.12% complete, ETA 06:54:06
# Fork: 1 of 1
# Warmup Iteration   1: 18.318 ops/us
# Warmup Iteration   2: 17.253 ops/us
# Warmup Iteration   3: 20.963 ops/us
# Warmup Iteration   4: 20.954 ops/us
# Warmup Iteration   5: 20.962 ops/us
Iteration   1: 20.961 ops/us
Iteration   2: 20.963 ops/us
Iteration   3: 20.964 ops/us
Iteration   4: 20.957 ops/us
Iteration   5: 20.968 ops/us
Iteration   6: 20.965 ops/us
Iteration   7: 20.959 ops/us
Iteration   8: 20.948 ops/us
Iteration   9: 19.617 ops/us
Iteration  10: 19.835 ops/us
Iteration  11: 20.953 ops/us
Iteration  12: 20.960 ops/us
Iteration  13: 20.961 ops/us
Iteration  14: 20.963 ops/us
Iteration  15: 19.606 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  20.705 ±(99.9%) 0.567 ops/us [Average]
  (min, avg, max) = (19.606, 20.705, 20.968), stdev = 0.530
  CI (99.9%): [20.139, 21.272] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 18.84% complete, ETA 06:50:05
# Fork: 1 of 1
# Warmup Iteration   1: 1.914 ops/us
# Warmup Iteration   2: 1.881 ops/us
# Warmup Iteration   3: 2.335 ops/us
# Warmup Iteration   4: 2.305 ops/us
# Warmup Iteration   5: 2.336 ops/us
Iteration   1: 2.328 ops/us
Iteration   2: 2.358 ops/us
Iteration   3: 2.331 ops/us
Iteration   4: 2.334 ops/us
Iteration   5: 2.334 ops/us
Iteration   6: 2.363 ops/us
Iteration   7: 2.378 ops/us
Iteration   8: 2.271 ops/us
Iteration   9: 2.362 ops/us
Iteration  10: 2.288 ops/us
Iteration  11: 2.380 ops/us
Iteration  12: 2.322 ops/us
Iteration  13: 2.364 ops/us
Iteration  14: 2.377 ops/us
Iteration  15: 2.302 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  2.339 ±(99.9%) 0.036 ops/us [Average]
  (min, avg, max) = (2.271, 2.339, 2.380), stdev = 0.034
  CI (99.9%): [2.303, 2.376] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 19.56% complete, ETA 06:46:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.190 ops/us
# Warmup Iteration   2: 0.183 ops/us
# Warmup Iteration   3: 0.217 ops/us
# Warmup Iteration   4: 0.211 ops/us
# Warmup Iteration   5: 0.209 ops/us
Iteration   1: 0.205 ops/us
Iteration   2: 0.205 ops/us
Iteration   3: 0.210 ops/us
Iteration   4: 0.209 ops/us
Iteration   5: 0.208 ops/us
Iteration   6: 0.201 ops/us
Iteration   7: 0.223 ops/us
Iteration   8: 0.204 ops/us
Iteration   9: 0.206 ops/us
Iteration  10: 0.218 ops/us
Iteration  11: 0.213 ops/us
Iteration  12: 0.197 ops/us
Iteration  13: 0.222 ops/us
Iteration  14: 0.201 ops/us
Iteration  15: 0.209 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.209 ±(99.9%) 0.008 ops/us [Average]
  (min, avg, max) = (0.197, 0.209, 0.223), stdev = 0.007
  CI (99.9%): [0.201, 0.217] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 20.29% complete, ETA 06:42:09
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 21.01% complete, ETA 06:38:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ops/us
# Warmup Iteration   2: 0.002 ops/us
# Warmup Iteration   3: 0.002 ops/us
# Warmup Iteration   4: 0.002 ops/us
# Warmup Iteration   5: 0.002 ops/us
Iteration   1: 0.002 ops/us
Iteration   2: 0.002 ops/us
Iteration   3: 0.002 ops/us
Iteration   4: 0.002 ops/us
Iteration   5: 0.002 ops/us
Iteration   6: 0.002 ops/us
Iteration   7: 0.002 ops/us
Iteration   8: 0.002 ops/us
Iteration   9: 0.002 ops/us
Iteration  10: 0.002 ops/us
Iteration  11: 0.002 ops/us
Iteration  12: 0.002 ops/us
Iteration  13: 0.002 ops/us
Iteration  14: 0.002 ops/us
Iteration  15: 0.002 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  0.002 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 21.74% complete, ETA 06:34:20
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 22.46% complete, ETA 06:30:29
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁷ ops/us
# Warmup Iteration   2: ≈ 10⁻⁷ ops/us
# Warmup Iteration   3: ≈ 10⁻⁷ ops/us
# Warmup Iteration   4: ≈ 10⁻⁷ ops/us
# Warmup Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   1: ≈ 10⁻⁷ ops/us
Iteration   2: ≈ 10⁻⁷ ops/us
Iteration   3: ≈ 10⁻⁷ ops/us
Iteration   4: ≈ 10⁻⁷ ops/us
Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   6: ≈ 10⁻⁷ ops/us
Iteration   7: ≈ 10⁻⁷ ops/us
Iteration   8: ≈ 10⁻⁷ ops/us
Iteration   9: ≈ 10⁻⁷ ops/us
Iteration  10: ≈ 10⁻⁷ ops/us
Iteration  11: ≈ 10⁻⁷ ops/us
Iteration  12: ≈ 10⁻⁷ ops/us
Iteration  13: ≈ 10⁻⁷ ops/us
Iteration  14: ≈ 10⁻⁷ ops/us
Iteration  15: ≈ 10⁻⁷ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  ≈ 10⁻⁷ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 23.19% complete, ETA 06:29:27
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻³ ops/us
# Warmup Iteration   2: ≈ 10⁻³ ops/us
# Warmup Iteration   3: ≈ 10⁻³ ops/us
# Warmup Iteration   4: ≈ 10⁻³ ops/us
# Warmup Iteration   5: ≈ 10⁻³ ops/us
Iteration   1: ≈ 10⁻³ ops/us
Iteration   2: ≈ 10⁻³ ops/us
Iteration   3: ≈ 10⁻³ ops/us
Iteration   4: ≈ 10⁻³ ops/us
Iteration   5: ≈ 10⁻³ ops/us
Iteration   6: ≈ 10⁻³ ops/us
Iteration   7: ≈ 10⁻³ ops/us
Iteration   8: ≈ 10⁻³ ops/us
Iteration   9: ≈ 10⁻³ ops/us
Iteration  10: ≈ 10⁻³ ops/us
Iteration  11: ≈ 10⁻³ ops/us
Iteration  12: ≈ 10⁻³ ops/us
Iteration  13: ≈ 10⁻³ ops/us
Iteration  14: ≈ 10⁻³ ops/us
Iteration  15: ≈ 10⁻³ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  ≈ 10⁻³ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 23.91% complete, ETA 06:25:31
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 24.64% complete, ETA 06:21:38
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 25.36% complete, ETA 06:18:22
# Fork: 1 of 1
# Warmup Iteration   1: 41.975 ops/us
# Warmup Iteration   2: 47.559 ops/us
# Warmup Iteration   3: 46.173 ops/us
# Warmup Iteration   4: 46.174 ops/us
# Warmup Iteration   5: 46.170 ops/us
Iteration   1: 46.169 ops/us
Iteration   2: 46.163 ops/us
Iteration   3: 46.152 ops/us
Iteration   4: 46.160 ops/us
Iteration   5: 46.158 ops/us
Iteration   6: 46.193 ops/us
Iteration   7: 46.153 ops/us
Iteration   8: 46.164 ops/us
Iteration   9: 46.188 ops/us
Iteration  10: 46.191 ops/us
Iteration  11: 46.176 ops/us
Iteration  12: 46.184 ops/us
Iteration  13: 46.185 ops/us
Iteration  14: 46.176 ops/us
Iteration  15: 46.157 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  46.171 ±(99.9%) 0.015 ops/us [Average]
  (min, avg, max) = (46.152, 46.171, 46.193), stdev = 0.014
  CI (99.9%): [46.156, 46.187] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 26.09% complete, ETA 06:14:26
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 26.81% complete, ETA 06:10:33
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 27.54% complete, ETA 06:06:42
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 28.26% complete, ETA 06:02:51
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 28.98% complete, ETA 05:59:00
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 29.71% complete, ETA 05:55:10
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 30.43% complete, ETA 05:51:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ops/us
# Warmup Iteration   2: 0.001 ops/us
# Warmup Iteration   3: 0.001 ops/us
# Warmup Iteration   4: 0.001 ops/us
# Warmup Iteration   5: 0.001 ops/us
Iteration   1: 0.001 ops/us
Iteration   2: 0.001 ops/us
Iteration   3: 0.001 ops/us
Iteration   4: 0.001 ops/us
Iteration   5: 0.001 ops/us
Iteration   6: 0.001 ops/us
Iteration   7: 0.001 ops/us
Iteration   8: 0.001 ops/us
Iteration   9: 0.001 ops/us
Iteration  10: 0.001 ops/us
Iteration  11: 0.001 ops/us
Iteration  12: 0.001 ops/us
Iteration  13: 0.001 ops/us
Iteration  14: 0.001 ops/us
Iteration  15: 0.001 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  0.001 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 31.16% complete, ETA 05:47:32
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 31.88% complete, ETA 05:43:43
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 32.61% complete, ETA 05:39:59
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 33.33% complete, ETA 05:36:32
# Fork: 1 of 1
# Warmup Iteration   1: 204946.310 us/op
# Warmup Iteration   2: 200763.506 us/op
# Warmup Iteration   3: 199866.331 us/op
# Warmup Iteration   4: 201326.515 us/op
# Warmup Iteration   5: 200141.081 us/op
Iteration   1: 201394.926 us/op
Iteration   2: 200088.451 us/op
Iteration   3: 201550.531 us/op
Iteration   4: 201175.472 us/op
Iteration   5: 199665.467 us/op
Iteration   6: 199830.118 us/op
Iteration   7: 202031.083 us/op
Iteration   8: 201117.679 us/op
Iteration   9: 199447.227 us/op
Iteration  10: 200272.539 us/op
Iteration  11: 200715.072 us/op
Iteration  12: 200036.896 us/op
Iteration  13: 199632.058 us/op
Iteration  14: 201114.973 us/op
Iteration  15: 201890.168 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  200664.177 ±(99.9%) 925.024 us/op [Average]
  (min, avg, max) = (199447.227, 200664.177, 202031.083), stdev = 865.268
  CI (99.9%): [199739.154, 201589.201] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 34.06% complete, ETA 05:32:47
# Fork: 1 of 1
# Warmup Iteration   1: 159858.495 us/op
# Warmup Iteration   2: 156266.187 us/op
# Warmup Iteration   3: 156219.752 us/op
# Warmup Iteration   4: 155302.376 us/op
# Warmup Iteration   5: 156402.094 us/op
Iteration   1: 156900.973 us/op
Iteration   2: 158458.697 us/op
Iteration   3: 156670.929 us/op
Iteration   4: 156806.957 us/op
Iteration   5: 156964.802 us/op
Iteration   6: 155151.501 us/op
Iteration   7: 157035.837 us/op
Iteration   8: 157472.758 us/op
Iteration   9: 157679.474 us/op
Iteration  10: 156877.222 us/op
Iteration  11: 156359.026 us/op
Iteration  12: 155924.992 us/op
Iteration  13: 155615.782 us/op
Iteration  14: 155029.467 us/op
Iteration  15: 156348.343 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  156619.784 ±(99.9%) 990.773 us/op [Average]
  (min, avg, max) = (155029.467, 156619.784, 158458.697), stdev = 926.770
  CI (99.9%): [155629.011, 157610.557] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 34.78% complete, ETA 05:29:02
# Fork: 1 of 1
# Warmup Iteration   1: 158033.266 us/op
# Warmup Iteration   2: 151806.068 us/op
# Warmup Iteration   3: 150355.492 us/op
# Warmup Iteration   4: 151682.363 us/op
# Warmup Iteration   5: 150618.063 us/op
Iteration   1: 151672.922 us/op
Iteration   2: 151611.123 us/op
Iteration   3: 150583.772 us/op
Iteration   4: 151549.085 us/op
Iteration   5: 151019.784 us/op
Iteration   6: 151262.911 us/op
Iteration   7: 152131.252 us/op
Iteration   8: 152173.549 us/op
Iteration   9: 151382.135 us/op
Iteration  10: 152527.485 us/op
Iteration  11: 151633.166 us/op
Iteration  12: 149866.341 us/op
Iteration  13: 150928.688 us/op
Iteration  14: 150343.345 us/op
Iteration  15: 150011.467 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  151246.468 ±(99.9%) 842.511 us/op [Average]
  (min, avg, max) = (149866.341, 151246.468, 152527.485), stdev = 788.085
  CI (99.9%): [150403.957, 152088.979] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 35.51% complete, ETA 05:25:17
# Fork: 1 of 1
# Warmup Iteration   1: 207358.205 us/op
# Warmup Iteration   2: 205943.337 us/op
# Warmup Iteration   3: 204115.312 us/op
# Warmup Iteration   4: 203780.856 us/op
# Warmup Iteration   5: 203831.038 us/op
Iteration   1: 204477.362 us/op
Iteration   2: 205141.953 us/op
Iteration   3: 203958.549 us/op
Iteration   4: 204227.620 us/op
Iteration   5: 205375.343 us/op
Iteration   6: 204622.093 us/op
Iteration   7: 203754.587 us/op
Iteration   8: 203728.188 us/op
Iteration   9: 203508.165 us/op
Iteration  10: 204936.334 us/op
Iteration  11: 204554.714 us/op
Iteration  12: 204242.772 us/op
Iteration  13: 203419.278 us/op
Iteration  14: 204529.561 us/op
Iteration  15: 203993.083 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  204297.973 ±(99.9%) 623.973 us/op [Average]
  (min, avg, max) = (203419.278, 204297.973, 205375.343), stdev = 583.665
  CI (99.9%): [203674.000, 204921.947] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 36.23% complete, ETA 05:21:34
# Fork: 1 of 1
# Warmup Iteration   1: 206362.697 us/op
# Warmup Iteration   2: 204898.747 us/op
# Warmup Iteration   3: 202971.673 us/op
# Warmup Iteration   4: 205045.559 us/op
# Warmup Iteration   5: 203769.811 us/op
Iteration   1: 203733.841 us/op
Iteration   2: 202561.230 us/op
Iteration   3: 204087.502 us/op
Iteration   4: 203218.837 us/op
Iteration   5: 203586.730 us/op
Iteration   6: 203634.916 us/op
Iteration   7: 204925.595 us/op
Iteration   8: 203851.584 us/op
Iteration   9: 205548.853 us/op
Iteration  10: 204223.813 us/op
Iteration  11: 204731.133 us/op
Iteration  12: 203966.001 us/op
Iteration  13: 204155.613 us/op
Iteration  14: 202950.884 us/op
Iteration  15: 204415.755 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  203972.819 ±(99.9%) 818.821 us/op [Average]
  (min, avg, max) = (202561.230, 203972.819, 205548.853), stdev = 765.925
  CI (99.9%): [203153.999, 204791.640] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 36.96% complete, ETA 05:17:51
# Fork: 1 of 1
# Warmup Iteration   1: 204022.632 us/op
# Warmup Iteration   2: 200836.352 us/op
# Warmup Iteration   3: 201204.489 us/op
# Warmup Iteration   4: 202189.685 us/op
# Warmup Iteration   5: 201184.995 us/op
Iteration   1: 201630.611 us/op
Iteration   2: 202100.944 us/op
Iteration   3: 202180.524 us/op
Iteration   4: 200583.911 us/op
Iteration   5: 201151.938 us/op
Iteration   6: 202184.302 us/op
Iteration   7: 201571.473 us/op
Iteration   8: 202453.211 us/op
Iteration   9: 200674.759 us/op
Iteration  10: 200722.510 us/op
Iteration  11: 201064.167 us/op
Iteration  12: 200497.230 us/op
Iteration  13: 200533.149 us/op
Iteration  14: 202387.553 us/op
Iteration  15: 201028.711 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  201384.333 ±(99.9%) 777.692 us/op [Average]
  (min, avg, max) = (200497.230, 201384.333, 202453.211), stdev = 727.454
  CI (99.9%): [200606.640, 202162.025] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 37.68% complete, ETA 05:14:07
# Fork: 1 of 1
# Warmup Iteration   1: 2173492.184 us/op
# Warmup Iteration   2: 1934292.157 us/op
# Warmup Iteration   3: 1772987.089 us/op
# Warmup Iteration   4: 1789619.406 us/op
# Warmup Iteration   5: 1788977.420 us/op
Iteration   1: 1812737.568 us/op
Iteration   2: 1750390.793 us/op
Iteration   3: 1769309.082 us/op
Iteration   4: 1787224.064 us/op
Iteration   5: 1791864.334 us/op
Iteration   6: 1775252.523 us/op
Iteration   7: 1769606.119 us/op
Iteration   8: 1778585.138 us/op
Iteration   9: 1840399.611 us/op
Iteration  10: 1802565.236 us/op
Iteration  11: 1789980.024 us/op
Iteration  12: 1755258.276 us/op
Iteration  13: 1772856.751 us/op
Iteration  14: 1788831.588 us/op
Iteration  15: 1807626.463 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1786165.838 ±(99.9%) 24874.431 us/op [Average]
  (min, avg, max) = (1750390.793, 1786165.838, 1840399.611), stdev = 23267.558
  CI (99.9%): [1761291.407, 1811040.269] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 38.40% complete, ETA 05:10:46
# Fork: 1 of 1
# Warmup Iteration   1: 1009800.212 us/op
# Warmup Iteration   2: 1000799.667 us/op
# Warmup Iteration   3: 1019716.044 us/op
# Warmup Iteration   4: 1014776.991 us/op
# Warmup Iteration   5: 1007824.097 us/op
Iteration   1: 1014283.310 us/op
Iteration   2: 842438.741 us/op
Iteration   3: 843687.590 us/op
Iteration   4: 844203.982 us/op
Iteration   5: 838692.869 us/op
Iteration   6: 848291.050 us/op
Iteration   7: 834338.049 us/op
Iteration   8: 840714.821 us/op
Iteration   9: 834865.948 us/op
Iteration  10: 845265.532 us/op
Iteration  11: 843484.141 us/op
Iteration  12: 841636.767 us/op
Iteration  13: 836078.758 us/op
Iteration  14: 847113.252 us/op
Iteration  15: 976537.538 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  862108.823 ±(99.9%) 58527.173 us/op [Average]
  (min, avg, max) = (834338.049, 862108.823, 1014283.310), stdev = 54746.354
  CI (99.9%): [803581.651, 920635.996] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 39.13% complete, ETA 05:07:15
# Fork: 1 of 1
# Warmup Iteration   1: 1031842.481 us/op
# Warmup Iteration   2: 1024524.691 us/op
# Warmup Iteration   3: 1032600.534 us/op
# Warmup Iteration   4: 1029020.538 us/op
# Warmup Iteration   5: 1033408.989 us/op
Iteration   1: 1038070.904 us/op
Iteration   2: 1037079.750 us/op
Iteration   3: 1028657.057 us/op
Iteration   4: 1034491.244 us/op
Iteration   5: 1027565.734 us/op
Iteration   6: 1035087.391 us/op
Iteration   7: 1040145.343 us/op
Iteration   8: 1020429.906 us/op
Iteration   9: 1038575.372 us/op
Iteration  10: 1029057.763 us/op
Iteration  11: 1018464.958 us/op
Iteration  12: 1015327.583 us/op
Iteration  13: 1019256.802 us/op
Iteration  14: 1022264.723 us/op
Iteration  15: 1019562.313 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1028269.123 ±(99.9%) 9150.033 us/op [Average]
  (min, avg, max) = (1015327.583, 1028269.123, 1040145.343), stdev = 8558.946
  CI (99.9%): [1019119.090, 1037419.156] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 39.85% complete, ETA 05:03:37
# Fork: 1 of 1
# Warmup Iteration   1: 1054945.769 us/op
# Warmup Iteration   2: 1049057.792 us/op
# Warmup Iteration   3: 1040868.765 us/op
# Warmup Iteration   4: 1042754.482 us/op
# Warmup Iteration   5: 1047359.765 us/op
Iteration   1: 1028419.214 us/op
Iteration   2: 1035909.061 us/op
Iteration   3: 1026431.595 us/op
Iteration   4: 1026515.570 us/op
Iteration   5: 1029589.122 us/op
Iteration   6: 1031039.758 us/op
Iteration   7: 1032972.797 us/op
Iteration   8: 1030640.244 us/op
Iteration   9: 1029347.986 us/op
Iteration  10: 1033771.144 us/op
Iteration  11: 1029420.211 us/op
Iteration  12: 1028208.268 us/op
Iteration  13: 1034454.855 us/op
Iteration  14: 1036550.990 us/op
Iteration  15: 1026090.114 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1030624.062 ±(99.9%) 3649.909 us/op [Average]
  (min, avg, max) = (1026090.114, 1030624.062, 1036550.990), stdev = 3414.127
  CI (99.9%): [1026974.153, 1034273.971] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 40.58% complete, ETA 05:00:02
# Fork: 1 of 1
# Warmup Iteration   1: 1014647.847 us/op
# Warmup Iteration   2: 1036723.147 us/op
# Warmup Iteration   3: 1042099.709 us/op
# Warmup Iteration   4: 1048275.136 us/op
# Warmup Iteration   5: 1037659.734 us/op
Iteration   1: 1033459.164 us/op
Iteration   2: 1027024.239 us/op
Iteration   3: 1033871.729 us/op
Iteration   4: 1033519.746 us/op
Iteration   5: 1033859.591 us/op
Iteration   6: 1031513.676 us/op
Iteration   7: 1031304.832 us/op
Iteration   8: 1021211.384 us/op
Iteration   9: 1030571.410 us/op
Iteration  10: 1032702.660 us/op
Iteration  11: 1028943.643 us/op
Iteration  12: 1022875.558 us/op
Iteration  13: 1033306.345 us/op
Iteration  14: 1018350.945 us/op
Iteration  15: 1026297.697 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1029254.175 ±(99.9%) 5389.638 us/op [Average]
  (min, avg, max) = (1018350.945, 1029254.175, 1033871.729), stdev = 5041.470
  CI (99.9%): [1023864.537, 1034643.812] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 41.30% complete, ETA 04:56:24
# Fork: 1 of 1
# Warmup Iteration   1: 842584.560 us/op
# Warmup Iteration   2: 843271.338 us/op
# Warmup Iteration   3: 841988.516 us/op
# Warmup Iteration   4: 837978.700 us/op
# Warmup Iteration   5: 841731.550 us/op
Iteration   1: 843865.856 us/op
Iteration   2: 842798.274 us/op
Iteration   3: 829499.165 us/op
Iteration   4: 839740.054 us/op
Iteration   5: 841059.392 us/op
Iteration   6: 835800.095 us/op
Iteration   7: 834462.994 us/op
Iteration   8: 837826.558 us/op
Iteration   9: 827929.242 us/op
Iteration  10: 837851.376 us/op
Iteration  11: 829645.727 us/op
Iteration  12: 837474.225 us/op
Iteration  13: 835030.268 us/op
Iteration  14: 841471.214 us/op
Iteration  15: 829150.651 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  836240.339 ±(99.9%) 5596.799 us/op [Average]
  (min, avg, max) = (827929.242, 836240.339, 843865.856), stdev = 5235.250
  CI (99.9%): [830643.540, 841837.139] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 42.03% complete, ETA 04:52:52
# Fork: 1 of 1
# Warmup Iteration   1: 547.925 us/op
# Warmup Iteration   2: 535.966 us/op
# Warmup Iteration   3: 535.978 us/op
# Warmup Iteration   4: 535.333 us/op
# Warmup Iteration   5: 535.087 us/op
Iteration   1: 534.917 us/op
Iteration   2: 534.519 us/op
Iteration   3: 534.473 us/op
Iteration   4: 534.771 us/op
Iteration   5: 534.563 us/op
Iteration   6: 534.408 us/op
Iteration   7: 534.755 us/op
Iteration   8: 534.508 us/op
Iteration   9: 534.912 us/op
Iteration  10: 534.724 us/op
Iteration  11: 535.558 us/op
Iteration  12: 535.237 us/op
Iteration  13: 534.479 us/op
Iteration  14: 534.582 us/op
Iteration  15: 534.682 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  534.739 ±(99.9%) 0.337 us/op [Average]
  (min, avg, max) = (534.408, 534.739, 535.558), stdev = 0.315
  CI (99.9%): [534.402, 535.076] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 42.75% complete, ETA 04:49:06
# Fork: 1 of 1
# Warmup Iteration   1: 671.282 us/op
# Warmup Iteration   2: 656.595 us/op
# Warmup Iteration   3: 656.512 us/op
# Warmup Iteration   4: 656.607 us/op
# Warmup Iteration   5: 666.189 us/op
Iteration   1: 666.901 us/op
Iteration   2: 666.975 us/op
Iteration   3: 659.116 us/op
Iteration   4: 656.366 us/op
Iteration   5: 656.326 us/op
Iteration   6: 656.859 us/op
Iteration   7: 656.627 us/op
Iteration   8: 656.933 us/op
Iteration   9: 656.744 us/op
Iteration  10: 656.401 us/op
Iteration  11: 655.991 us/op
Iteration  12: 655.870 us/op
Iteration  13: 656.325 us/op
Iteration  14: 655.932 us/op
Iteration  15: 655.792 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  657.944 ±(99.9%) 3.994 us/op [Average]
  (min, avg, max) = (655.792, 657.944, 666.975), stdev = 3.736
  CI (99.9%): [653.949, 661.938] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 43.48% complete, ETA 04:45:21
# Fork: 1 of 1
# Warmup Iteration   1: 960.726 us/op
# Warmup Iteration   2: 940.752 us/op
# Warmup Iteration   3: 940.723 us/op
# Warmup Iteration   4: 940.931 us/op
# Warmup Iteration   5: 941.229 us/op
Iteration   1: 940.517 us/op
Iteration   2: 940.357 us/op
Iteration   3: 940.676 us/op
Iteration   4: 940.978 us/op
Iteration   5: 941.324 us/op
Iteration   6: 825.129 us/op
Iteration   7: 756.186 us/op
Iteration   8: 756.400 us/op
Iteration   9: 756.256 us/op
Iteration  10: 756.249 us/op
Iteration  11: 756.706 us/op
Iteration  12: 756.242 us/op
Iteration  13: 756.837 us/op
Iteration  14: 756.155 us/op
Iteration  15: 756.066 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  822.405 ±(99.9%) 94.476 us/op [Average]
  (min, avg, max) = (756.066, 822.405, 941.324), stdev = 88.373
  CI (99.9%): [727.929, 916.881] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 44.20% complete, ETA 04:41:37
# Fork: 1 of 1
# Warmup Iteration   1: 545.957 us/op
# Warmup Iteration   2: 536.982 us/op
# Warmup Iteration   3: 536.469 us/op
# Warmup Iteration   4: 535.820 us/op
# Warmup Iteration   5: 535.049 us/op
Iteration   1: 535.723 us/op
Iteration   2: 535.036 us/op
Iteration   3: 534.811 us/op
Iteration   4: 534.838 us/op
Iteration   5: 534.429 us/op
Iteration   6: 534.904 us/op
Iteration   7: 534.563 us/op
Iteration   8: 535.145 us/op
Iteration   9: 534.779 us/op
Iteration  10: 534.883 us/op
Iteration  11: 534.871 us/op
Iteration  12: 534.765 us/op
Iteration  13: 534.948 us/op
Iteration  14: 535.354 us/op
Iteration  15: 534.870 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  534.928 ±(99.9%) 0.330 us/op [Average]
  (min, avg, max) = (534.429, 534.928, 535.723), stdev = 0.309
  CI (99.9%): [534.598, 535.258] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 44.93% complete, ETA 04:37:52
# Fork: 1 of 1
# Warmup Iteration   1: 948472.404 us/op
# Warmup Iteration   2: 920336.130 us/op
# Warmup Iteration   3: 920110.576 us/op
# Warmup Iteration   4: 920442.521 us/op
# Warmup Iteration   5: 913582.131 us/op
Iteration   1: 920545.182 us/op
Iteration   2: 912653.296 us/op
Iteration   3: 919857.950 us/op
Iteration   4: 919011.058 us/op
Iteration   5: 915773.122 us/op
Iteration   6: 917915.875 us/op
Iteration   7: 920979.467 us/op
Iteration   8: 919869.477 us/op
Iteration   9: 917976.368 us/op
Iteration  10: 913048.164 us/op
Iteration  11: 925653.489 us/op
Iteration  12: 915516.570 us/op
Iteration  13: 913720.548 us/op
Iteration  14: 920964.289 us/op
Iteration  15: 921987.175 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  918364.802 ±(99.9%) 3908.648 us/op [Average]
  (min, avg, max) = (912653.296, 918364.802, 925653.489), stdev = 3656.152
  CI (99.9%): [914456.154, 922273.450] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 45.65% complete, ETA 04:34:11
# Fork: 1 of 1
# Warmup Iteration   1: 215717.430 us/op
# Warmup Iteration   2: 223383.591 us/op
# Warmup Iteration   3: 220486.149 us/op
# Warmup Iteration   4: 217035.383 us/op
# Warmup Iteration   5: 219385.551 us/op
Iteration   1: 217514.158 us/op
Iteration   2: 214423.616 us/op
Iteration   3: 216668.444 us/op
Iteration   4: 220480.769 us/op
Iteration   5: 222420.878 us/op
Iteration   6: 216172.079 us/op
Iteration   7: 215587.478 us/op
Iteration   8: 214233.815 us/op
Iteration   9: 214044.857 us/op
Iteration  10: 220909.810 us/op
Iteration  11: 217755.008 us/op
Iteration  12: 225677.270 us/op
Iteration  13: 219485.416 us/op
Iteration  14: 216713.431 us/op
Iteration  15: 217592.186 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  217978.615 ±(99.9%) 3510.683 us/op [Average]
  (min, avg, max) = (214044.857, 217978.615, 225677.270), stdev = 3283.895
  CI (99.9%): [214467.932, 221489.297] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 46.38% complete, ETA 04:30:29
# Fork: 1 of 1
# Warmup Iteration   1: 2087456.415 us/op
# Warmup Iteration   2: 1928227.215 us/op
# Warmup Iteration   3: 1933814.094 us/op
# Warmup Iteration   4: 1908224.741 us/op
# Warmup Iteration   5: 1901908.466 us/op
Iteration   1: 1932459.718 us/op
Iteration   2: 1976922.326 us/op
Iteration   3: 2015463.728 us/op
Iteration   4: 1979184.459 us/op
Iteration   5: 1966040.341 us/op
Iteration   6: 1918530.070 us/op
Iteration   7: 1920444.832 us/op
Iteration   8: 1908813.033 us/op
Iteration   9: 1912527.099 us/op
Iteration  10: 2002033.888 us/op
Iteration  11: 1981211.988 us/op
Iteration  12: 1969208.608 us/op
Iteration  13: 1956126.217 us/op
Iteration  14: 1935728.464 us/op
Iteration  15: 1969732.113 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  1956295.125 ±(99.9%) 35546.715 us/op [Average]
  (min, avg, max) = (1908813.033, 1956295.125, 2015463.728), stdev = 33250.420
  CI (99.9%): [1920748.410, 1991841.841] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 47.10% complete, ETA 04:27:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.697 us/op
# Warmup Iteration   2: 0.679 us/op
# Warmup Iteration   3: 0.678 us/op
# Warmup Iteration   4: 0.678 us/op
# Warmup Iteration   5: 0.678 us/op
Iteration   1: 0.678 us/op
Iteration   2: 0.678 us/op
Iteration   3: 0.678 us/op
Iteration   4: 0.678 us/op
Iteration   5: 0.678 us/op
Iteration   6: 0.678 us/op
Iteration   7: 0.678 us/op
Iteration   8: 0.677 us/op
Iteration   9: 0.678 us/op
Iteration  10: 0.678 us/op
Iteration  11: 0.678 us/op
Iteration  12: 0.678 us/op
Iteration  13: 0.678 us/op
Iteration  14: 0.678 us/op
Iteration  15: 0.678 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.678 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.677, 0.678, 0.678), stdev = 0.001
  CI (99.9%): [0.678, 0.678] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 47.82% complete, ETA 04:23:35
# Fork: 1 of 1
# Warmup Iteration   1: 1.656 us/op
# Warmup Iteration   2: 1.611 us/op
# Warmup Iteration   3: 1.610 us/op
# Warmup Iteration   4: 1.611 us/op
# Warmup Iteration   5: 1.609 us/op
Iteration   1: 1.609 us/op
Iteration   2: 1.610 us/op
Iteration   3: 1.610 us/op
Iteration   4: 1.610 us/op
Iteration   5: 1.610 us/op
Iteration   6: 1.610 us/op
Iteration   7: 1.610 us/op
Iteration   8: 1.609 us/op
Iteration   9: 1.610 us/op
Iteration  10: 1.610 us/op
Iteration  11: 1.611 us/op
Iteration  12: 1.611 us/op
Iteration  13: 1.610 us/op
Iteration  14: 1.611 us/op
Iteration  15: 1.610 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  1.610 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (1.609, 1.610, 1.611), stdev = 0.001
  CI (99.9%): [1.609, 1.611] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 48.55% complete, ETA 04:19:50
# Fork: 1 of 1
# Warmup Iteration   1: 2.885 us/op
# Warmup Iteration   2: 2.799 us/op
# Warmup Iteration   3: 2.795 us/op
# Warmup Iteration   4: 2.797 us/op
# Warmup Iteration   5: 2.798 us/op
Iteration   1: 2.798 us/op
Iteration   2: 2.796 us/op
Iteration   3: 2.796 us/op
Iteration   4: 2.795 us/op
Iteration   5: 2.795 us/op
Iteration   6: 2.795 us/op
Iteration   7: 2.795 us/op
Iteration   8: 2.795 us/op
Iteration   9: 2.795 us/op
Iteration  10: 2.796 us/op
Iteration  11: 2.796 us/op
Iteration  12: 2.798 us/op
Iteration  13: 2.796 us/op
Iteration  14: 2.796 us/op
Iteration  15: 2.795 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  2.796 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (2.795, 2.796, 2.798), stdev = 0.001
  CI (99.9%): [2.795, 2.797] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 49.27% complete, ETA 04:16:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.054 us/op
# Warmup Iteration   2: 0.050 us/op
# Warmup Iteration   3: 0.052 us/op
# Warmup Iteration   4: 0.052 us/op
# Warmup Iteration   5: 0.053 us/op
Iteration   1: 0.052 us/op
Iteration   2: 0.052 us/op
Iteration   3: 0.052 us/op
Iteration   4: 0.052 us/op
Iteration   5: 0.052 us/op
Iteration   6: 0.052 us/op
Iteration   7: 0.052 us/op
Iteration   8: 0.052 us/op
Iteration   9: 0.052 us/op
Iteration  10: 0.052 us/op
Iteration  11: 0.053 us/op
Iteration  12: 0.052 us/op
Iteration  13: 0.052 us/op
Iteration  14: 0.052 us/op
Iteration  15: 0.052 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.052 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.052, 0.052, 0.053), stdev = 0.001
  CI (99.9%): [0.052, 0.052] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 50.00% complete, ETA 04:12:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.472 us/op
# Warmup Iteration   2: 0.456 us/op
# Warmup Iteration   3: 0.499 us/op
# Warmup Iteration   4: 0.489 us/op
# Warmup Iteration   5: 0.499 us/op
Iteration   1: 0.490 us/op
Iteration   2: 0.490 us/op
Iteration   3: 0.499 us/op
Iteration   4: 0.490 us/op
Iteration   5: 0.500 us/op
Iteration   6: 0.499 us/op
Iteration   7: 0.498 us/op
Iteration   8: 0.498 us/op
Iteration   9: 0.489 us/op
Iteration  10: 0.498 us/op
Iteration  11: 0.500 us/op
Iteration  12: 0.499 us/op
Iteration  13: 0.489 us/op
Iteration  14: 0.500 us/op
Iteration  15: 0.489 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.495 ±(99.9%) 0.005 us/op [Average]
  (min, avg, max) = (0.489, 0.495, 0.500), stdev = 0.005
  CI (99.9%): [0.490, 0.501] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 50.72% complete, ETA 04:08:38
# Fork: 1 of 1
# Warmup Iteration   1: 5.038 us/op
# Warmup Iteration   2: 4.827 us/op
# Warmup Iteration   3: 5.134 us/op
# Warmup Iteration   4: 5.133 us/op
# Warmup Iteration   5: 5.069 us/op
Iteration   1: 5.106 us/op
Iteration   2: 5.079 us/op
Iteration   3: 5.143 us/op
Iteration   4: 5.116 us/op
Iteration   5: 5.077 us/op
Iteration   6: 5.073 us/op
Iteration   7: 5.068 us/op
Iteration   8: 5.199 us/op
Iteration   9: 5.128 us/op
Iteration  10: 5.116 us/op
Iteration  11: 5.050 us/op
Iteration  12: 5.030 us/op
Iteration  13: 5.131 us/op
Iteration  14: 5.051 us/op
Iteration  15: 5.129 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  5.100 ±(99.9%) 0.047 us/op [Average]
  (min, avg, max) = (5.030, 5.100, 5.199), stdev = 0.044
  CI (99.9%): [5.053, 5.147] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 51.45% complete, ETA 04:04:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.059 us/op
# Warmup Iteration   2: 0.058 us/op
# Warmup Iteration   3: 0.048 us/op
# Warmup Iteration   4: 0.048 us/op
# Warmup Iteration   5: 0.048 us/op
Iteration   1: 0.051 us/op
Iteration   2: 0.049 us/op
Iteration   3: 0.048 us/op
Iteration   4: 0.048 us/op
Iteration   5: 0.048 us/op
Iteration   6: 0.051 us/op
Iteration   7: 0.052 us/op
Iteration   8: 0.048 us/op
Iteration   9: 0.048 us/op
Iteration  10: 0.051 us/op
Iteration  11: 0.048 us/op
Iteration  12: 0.048 us/op
Iteration  13: 0.048 us/op
Iteration  14: 0.048 us/op
Iteration  15: 0.048 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.049 ±(99.9%) 0.002 us/op [Average]
  (min, avg, max) = (0.048, 0.049, 0.052), stdev = 0.002
  CI (99.9%): [0.047, 0.051] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 52.17% complete, ETA 04:01:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.513 us/op
# Warmup Iteration   2: 0.541 us/op
# Warmup Iteration   3: 0.435 us/op
# Warmup Iteration   4: 0.452 us/op
# Warmup Iteration   5: 0.426 us/op
Iteration   1: 0.420 us/op
Iteration   2: 0.449 us/op
Iteration   3: 0.448 us/op
Iteration   4: 0.428 us/op
Iteration   5: 0.456 us/op
Iteration   6: 0.438 us/op
Iteration   7: 0.428 us/op
Iteration   8: 0.447 us/op
Iteration   9: 0.435 us/op
Iteration  10: 0.448 us/op
Iteration  11: 0.431 us/op
Iteration  12: 0.438 us/op
Iteration  13: 0.434 us/op
Iteration  14: 0.445 us/op
Iteration  15: 0.448 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.439 ±(99.9%) 0.011 us/op [Average]
  (min, avg, max) = (0.420, 0.439, 0.456), stdev = 0.010
  CI (99.9%): [0.429, 0.450] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 52.90% complete, ETA 03:57:28
# Fork: 1 of 1
# Warmup Iteration   1: 5.390 us/op
# Warmup Iteration   2: 5.437 us/op
# Warmup Iteration   3: 4.650 us/op
# Warmup Iteration   4: 4.654 us/op
# Warmup Iteration   5: 4.669 us/op
Iteration   1: 4.701 us/op
Iteration   2: 4.634 us/op
Iteration   3: 4.713 us/op
Iteration   4: 4.745 us/op
Iteration   5: 4.800 us/op
Iteration   6: 4.727 us/op
Iteration   7: 4.812 us/op
Iteration   8: 4.379 us/op
Iteration   9: 4.749 us/op
Iteration  10: 4.461 us/op
Iteration  11: 4.733 us/op
Iteration  12: 4.716 us/op
Iteration  13: 4.370 us/op
Iteration  14: 4.822 us/op
Iteration  15: 4.778 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  4.676 ±(99.9%) 0.160 us/op [Average]
  (min, avg, max) = (4.370, 4.676, 4.822), stdev = 0.150
  CI (99.9%): [4.516, 4.836] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 53.62% complete, ETA 03:53:45
# Fork: 1 of 1
# Warmup Iteration   1: 14753.121 us/op
# Warmup Iteration   2: 14472.201 us/op
# Warmup Iteration   3: 14460.346 us/op
# Warmup Iteration   4: 14440.539 us/op
# Warmup Iteration   5: 14441.555 us/op
Iteration   1: 14447.339 us/op
Iteration   2: 14445.437 us/op
Iteration   3: 14453.114 us/op
Iteration   4: 14449.086 us/op
Iteration   5: 14447.959 us/op
Iteration   6: 14448.510 us/op
Iteration   7: 14463.203 us/op
Iteration   8: 14490.139 us/op
Iteration   9: 14447.838 us/op
Iteration  10: 14459.106 us/op
Iteration  11: 14457.594 us/op
Iteration  12: 14458.329 us/op
Iteration  13: 14457.819 us/op
Iteration  14: 14464.098 us/op
Iteration  15: 14462.640 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  14456.814 ±(99.9%) 12.014 us/op [Average]
  (min, avg, max) = (14445.437, 14456.814, 14490.139), stdev = 11.238
  CI (99.9%): [14444.800, 14468.828] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 54.35% complete, ETA 03:50:03
# Fork: 1 of 1
# Warmup Iteration   1: 419.376 us/op
# Warmup Iteration   2: 431.022 us/op
# Warmup Iteration   3: 428.117 us/op
# Warmup Iteration   4: 426.095 us/op
# Warmup Iteration   5: 428.328 us/op
Iteration   1: 426.843 us/op
Iteration   2: 423.056 us/op
Iteration   3: 429.881 us/op
Iteration   4: 428.574 us/op
Iteration   5: 428.794 us/op
Iteration   6: 425.773 us/op
Iteration   7: 427.295 us/op
Iteration   8: 424.893 us/op
Iteration   9: 425.183 us/op
Iteration  10: 430.313 us/op
Iteration  11: 429.085 us/op
Iteration  12: 425.059 us/op
Iteration  13: 426.690 us/op
Iteration  14: 428.244 us/op
Iteration  15: 426.273 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  427.064 ±(99.9%) 2.215 us/op [Average]
  (min, avg, max) = (423.056, 427.064, 430.313), stdev = 2.072
  CI (99.9%): [424.849, 429.279] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 55.07% complete, ETA 03:46:21
# Fork: 1 of 1
# Warmup Iteration   1: 40998.363 us/op
# Warmup Iteration   2: 42502.489 us/op
# Warmup Iteration   3: 42247.480 us/op
# Warmup Iteration   4: 42527.591 us/op
# Warmup Iteration   5: 42419.967 us/op
Iteration   1: 42358.196 us/op
Iteration   2: 42255.140 us/op
Iteration   3: 42305.457 us/op
Iteration   4: 42210.448 us/op
Iteration   5: 42437.667 us/op
Iteration   6: 42549.918 us/op
Iteration   7: 42539.851 us/op
Iteration   8: 42589.904 us/op
Iteration   9: 42240.715 us/op
Iteration  10: 42391.966 us/op
Iteration  11: 42356.909 us/op
Iteration  12: 42539.759 us/op
Iteration  13: 42402.594 us/op
Iteration  14: 42171.254 us/op
Iteration  15: 42317.316 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  42377.806 ±(99.9%) 141.632 us/op [Average]
  (min, avg, max) = (42171.254, 42377.806, 42589.904), stdev = 132.482
  CI (99.9%): [42236.175, 42519.438] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 55.80% complete, ETA 03:42:39
# Fork: 1 of 1
# Warmup Iteration   1: 4238189.057 us/op
# Warmup Iteration   2: 4335297.870 us/op
# Warmup Iteration   3: 4375369.827 us/op
# Warmup Iteration   4: 4336493.569 us/op
# Warmup Iteration   5: 4334810.776 us/op
Iteration   1: 4365837.845 us/op
Iteration   2: 4341864.409 us/op
Iteration   3: 4328920.967 us/op
Iteration   4: 4344733.841 us/op
Iteration   5: 4357322.643 us/op
Iteration   6: 4324835.076 us/op
Iteration   7: 4353440.416 us/op
Iteration   8: 4312869.923 us/op
Iteration   9: 4336501.723 us/op
Iteration  10: 4369692.640 us/op
Iteration  11: 4330199.430 us/op
Iteration  12: 4326497.113 us/op
Iteration  13: 4328897.247 us/op
Iteration  14: 4308159.264 us/op
Iteration  15: 4350438.577 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  4338680.741 ±(99.9%) 19494.272 us/op [Average]
  (min, avg, max) = (4308159.264, 4338680.741, 4369692.640), stdev = 18234.955
  CI (99.9%): [4319186.468, 4358175.013] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 56.52% complete, ETA 03:39:43
# Fork: 1 of 1
# Warmup Iteration   1: 3085.245 us/op
# Warmup Iteration   2: 3002.703 us/op
# Warmup Iteration   3: 2998.530 us/op
# Warmup Iteration   4: 2998.209 us/op
# Warmup Iteration   5: 2998.010 us/op
Iteration   1: 2998.818 us/op
Iteration   2: 2998.331 us/op
Iteration   3: 2996.224 us/op
Iteration   4: 2997.377 us/op
Iteration   5: 2997.117 us/op
Iteration   6: 3003.353 us/op
Iteration   7: 2996.515 us/op
Iteration   8: 2996.539 us/op
Iteration   9: 2999.329 us/op
Iteration  10: 2997.090 us/op
Iteration  11: 2997.617 us/op
Iteration  12: 2997.059 us/op
Iteration  13: 2996.843 us/op
Iteration  14: 2997.196 us/op
Iteration  15: 2995.415 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  2997.655 ±(99.9%) 1.992 us/op [Average]
  (min, avg, max) = (2995.415, 2997.655, 3003.353), stdev = 1.863
  CI (99.9%): [2995.663, 2999.647] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 57.24% complete, ETA 03:36:00
# Fork: 1 of 1
# Warmup Iteration   1: 32044.915 us/op
# Warmup Iteration   2: 31532.414 us/op
# Warmup Iteration   3: 31497.878 us/op
# Warmup Iteration   4: 31497.986 us/op
# Warmup Iteration   5: 31501.612 us/op
Iteration   1: 31503.766 us/op
Iteration   2: 31501.712 us/op
Iteration   3: 31514.889 us/op
Iteration   4: 31496.815 us/op
Iteration   5: 31498.921 us/op
Iteration   6: 31493.772 us/op
Iteration   7: 31498.499 us/op
Iteration   8: 31501.986 us/op
Iteration   9: 31521.839 us/op
Iteration  10: 31502.860 us/op
Iteration  11: 31495.780 us/op
Iteration  12: 31511.973 us/op
Iteration  13: 31527.162 us/op
Iteration  14: 31506.215 us/op
Iteration  15: 31527.140 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  31506.889 ±(99.9%) 11.927 us/op [Average]
  (min, avg, max) = (31493.772, 31506.889, 31527.162), stdev = 11.157
  CI (99.9%): [31494.962, 31518.816] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 57.97% complete, ETA 03:32:18
# Fork: 1 of 1
# Warmup Iteration   1: 2692153.156 us/op
# Warmup Iteration   2: 1760296.343 us/op
# Warmup Iteration   3: 1759800.798 us/op
# Warmup Iteration   4: 1761503.629 us/op
# Warmup Iteration   5: 1760683.291 us/op
Iteration   1: 1761352.763 us/op
Iteration   2: 1759877.149 us/op
Iteration   3: 1760425.042 us/op
Iteration   4: 1760573.668 us/op
Iteration   5: 1760381.499 us/op
Iteration   6: 1760326.798 us/op
Iteration   7: 1760727.565 us/op
Iteration   8: 1760392.755 us/op
Iteration   9: 1760258.652 us/op
Iteration  10: 1760318.129 us/op
Iteration  11: 1760344.723 us/op
Iteration  12: 1760423.994 us/op
Iteration  13: 1760711.342 us/op
Iteration  14: 1760442.782 us/op
Iteration  15: 1760651.957 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  1760480.588 ±(99.9%) 340.487 us/op [Average]
  (min, avg, max) = (1759877.149, 1760480.588, 1761352.763), stdev = 318.491
  CI (99.9%): [1760140.101, 1760821.074] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 58.69% complete, ETA 03:28:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 us/op
# Warmup Iteration   2: 0.021 us/op
# Warmup Iteration   3: 0.022 us/op
# Warmup Iteration   4: 0.022 us/op
# Warmup Iteration   5: 0.022 us/op
Iteration   1: 0.022 us/op
Iteration   2: 0.022 us/op
Iteration   3: 0.022 us/op
Iteration   4: 0.022 us/op
Iteration   5: 0.022 us/op
Iteration   6: 0.022 us/op
Iteration   7: 0.022 us/op
Iteration   8: 0.022 us/op
Iteration   9: 0.022 us/op
Iteration  10: 0.022 us/op
Iteration  11: 0.022 us/op
Iteration  12: 0.022 us/op
Iteration  13: 0.022 us/op
Iteration  14: 0.022 us/op
Iteration  15: 0.022 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  0.022 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.022, 0.022, 0.022), stdev = 0.001
  CI (99.9%): [0.022, 0.022] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 59.42% complete, ETA 03:25:03
# Fork: 1 of 1
# Warmup Iteration   1: 10434.692 us/op
# Warmup Iteration   2: 10614.837 us/op
# Warmup Iteration   3: 10591.558 us/op
# Warmup Iteration   4: 10588.281 us/op
# Warmup Iteration   5: 10595.741 us/op
Iteration   1: 10591.270 us/op
Iteration   2: 10592.148 us/op
Iteration   3: 10589.502 us/op
Iteration   4: 10592.739 us/op
Iteration   5: 10590.941 us/op
Iteration   6: 10594.894 us/op
Iteration   7: 10591.131 us/op
Iteration   8: 10586.415 us/op
Iteration   9: 10593.390 us/op
Iteration  10: 10590.648 us/op
Iteration  11: 10593.094 us/op
Iteration  12: 10593.625 us/op
Iteration  13: 10591.975 us/op
Iteration  14: 10590.137 us/op
Iteration  15: 10591.598 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  10591.567 ±(99.9%) 2.161 us/op [Average]
  (min, avg, max) = (10586.415, 10591.567, 10594.894), stdev = 2.021
  CI (99.9%): [10589.406, 10593.728] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 60.14% complete, ETA 03:21:20
# Fork: 1 of 1
# Warmup Iteration   1: 38861.564 us/op
# Warmup Iteration   2: 38973.547 us/op
# Warmup Iteration   3: 34755.828 us/op
# Warmup Iteration   4: 35790.179 us/op
# Warmup Iteration   5: 40131.556 us/op
Iteration   1: 31085.763 us/op
Iteration   2: 45022.040 us/op
Iteration   3: 37099.270 us/op
Iteration   4: 41755.175 us/op
Iteration   5: 34606.602 us/op
Iteration   6: 33167.175 us/op
Iteration   7: 39066.019 us/op
Iteration   8: 36455.417 us/op
Iteration   9: 34583.744 us/op
Iteration  10: 38545.550 us/op
Iteration  11: 37843.620 us/op
Iteration  12: 39853.710 us/op
Iteration  13: 40583.121 us/op
Iteration  14: 37070.929 us/op
Iteration  15: 34600.993 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  37422.608 ±(99.9%) 3832.668 us/op [Average]
  (min, avg, max) = (31085.763, 37422.608, 45022.040), stdev = 3585.080
  CI (99.9%): [33589.940, 41255.276] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 60.87% complete, ETA 03:17:38
# Fork: 1 of 1
# Warmup Iteration   1: 39328.085 us/op
# Warmup Iteration   2: 38557.888 us/op
# Warmup Iteration   3: 38337.610 us/op
# Warmup Iteration   4: 38226.129 us/op
# Warmup Iteration   5: 38811.860 us/op
Iteration   1: 38726.462 us/op
Iteration   2: 38268.618 us/op
Iteration   3: 38384.670 us/op
Iteration   4: 38141.391 us/op
Iteration   5: 38018.328 us/op
Iteration   6: 38365.802 us/op
Iteration   7: 38274.265 us/op
Iteration   8: 38523.529 us/op
Iteration   9: 38532.427 us/op
Iteration  10: 38638.683 us/op
Iteration  11: 38338.599 us/op
Iteration  12: 38344.324 us/op
Iteration  13: 38226.926 us/op
Iteration  14: 38332.936 us/op
Iteration  15: 38367.120 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  38365.605 ±(99.9%) 195.468 us/op [Average]
  (min, avg, max) = (38018.328, 38365.605, 38726.462), stdev = 182.841
  CI (99.9%): [38170.138, 38561.073] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 61.59% complete, ETA 03:13:56
# Fork: 1 of 1
# Warmup Iteration   1: 20536.285 us/op
# Warmup Iteration   2: 19697.467 us/op
# Warmup Iteration   3: 19733.806 us/op
# Warmup Iteration   4: 19628.833 us/op
# Warmup Iteration   5: 19583.322 us/op
Iteration   1: 19786.156 us/op
Iteration   2: 19851.759 us/op
Iteration   3: 19766.389 us/op
Iteration   4: 19741.138 us/op
Iteration   5: 19794.185 us/op
Iteration   6: 19712.343 us/op
Iteration   7: 19935.275 us/op
Iteration   8: 19694.356 us/op
Iteration   9: 19764.457 us/op
Iteration  10: 19966.591 us/op
Iteration  11: 19651.689 us/op
Iteration  12: 19836.778 us/op
Iteration  13: 19797.160 us/op
Iteration  14: 19820.917 us/op
Iteration  15: 19768.504 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  19792.513 ±(99.9%) 89.263 us/op [Average]
  (min, avg, max) = (19651.689, 19792.513, 19966.591), stdev = 83.497
  CI (99.9%): [19703.250, 19881.776] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 62.32% complete, ETA 03:10:14
# Fork: 1 of 1
# Warmup Iteration   1: 14201.824 us/op
# Warmup Iteration   2: 13754.103 us/op
# Warmup Iteration   3: 13770.881 us/op
# Warmup Iteration   4: 13866.847 us/op
# Warmup Iteration   5: 13818.228 us/op
Iteration   1: 13767.765 us/op
Iteration   2: 13815.001 us/op
Iteration   3: 13786.655 us/op
Iteration   4: 13782.970 us/op
Iteration   5: 13797.872 us/op
Iteration   6: 13816.841 us/op
Iteration   7: 13777.846 us/op
Iteration   8: 13765.929 us/op
Iteration   9: 13802.915 us/op
Iteration  10: 13875.073 us/op
Iteration  11: 13829.270 us/op
Iteration  12: 13780.292 us/op
Iteration  13: 13773.386 us/op
Iteration  14: 13795.837 us/op
Iteration  15: 13815.705 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  13798.891 ±(99.9%) 30.661 us/op [Average]
  (min, avg, max) = (13765.929, 13798.891, 13875.073), stdev = 28.680
  CI (99.9%): [13768.230, 13829.551] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 63.04% complete, ETA 03:06:32
# Fork: 1 of 1
# Warmup Iteration   1: 32881.517 us/op
# Warmup Iteration   2: 30252.597 us/op
# Warmup Iteration   3: 31695.913 us/op
# Warmup Iteration   4: 31752.671 us/op
# Warmup Iteration   5: 31853.524 us/op
Iteration   1: 31882.685 us/op
Iteration   2: 32287.011 us/op
Iteration   3: 32020.539 us/op
Iteration   4: 30058.534 us/op
Iteration   5: 32157.578 us/op
Iteration   6: 32308.186 us/op
Iteration   7: 32080.193 us/op
Iteration   8: 31967.681 us/op
Iteration   9: 32325.732 us/op
Iteration  10: 32123.210 us/op
Iteration  11: 31360.602 us/op
Iteration  12: 30006.631 us/op
Iteration  13: 30989.605 us/op
Iteration  14: 31033.251 us/op
Iteration  15: 31784.161 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  31625.707 ±(99.9%) 827.964 us/op [Average]
  (min, avg, max) = (30006.631, 31625.707, 32325.732), stdev = 774.478
  CI (99.9%): [30797.743, 32453.670] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 63.77% complete, ETA 03:02:51
# Fork: 1 of 1
# Warmup Iteration   1: 822.976 us/op
# Warmup Iteration   2: 805.640 us/op
# Warmup Iteration   3: 801.771 us/op
# Warmup Iteration   4: 801.994 us/op
# Warmup Iteration   5: 799.754 us/op
Iteration   1: 799.288 us/op
Iteration   2: 802.378 us/op
Iteration   3: 798.089 us/op
Iteration   4: 802.687 us/op
Iteration   5: 783.342 us/op
Iteration   6: 784.363 us/op
Iteration   7: 786.355 us/op
Iteration   8: 790.259 us/op
Iteration   9: 780.705 us/op
Iteration  10: 779.489 us/op
Iteration  11: 782.636 us/op
Iteration  12: 782.110 us/op
Iteration  13: 786.852 us/op
Iteration  14: 781.814 us/op
Iteration  15: 784.745 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  788.341 ±(99.9%) 8.722 us/op [Average]
  (min, avg, max) = (779.489, 788.341, 802.687), stdev = 8.159
  CI (99.9%): [779.619, 797.063] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 64.49% complete, ETA 02:59:09
# Fork: 1 of 1
# Warmup Iteration   1: 8297.244 us/op
# Warmup Iteration   2: 8097.960 us/op
# Warmup Iteration   3: 8098.870 us/op
# Warmup Iteration   4: 8108.166 us/op
# Warmup Iteration   5: 8099.234 us/op
Iteration   1: 8153.091 us/op
Iteration   2: 8129.842 us/op
Iteration   3: 8159.168 us/op
Iteration   4: 8121.376 us/op
Iteration   5: 8106.272 us/op
Iteration   6: 8117.991 us/op
Iteration   7: 8113.435 us/op
Iteration   8: 8139.672 us/op
Iteration   9: 8145.011 us/op
Iteration  10: 8132.402 us/op
Iteration  11: 8118.146 us/op
Iteration  12: 8117.781 us/op
Iteration  13: 8121.321 us/op
Iteration  14: 8160.105 us/op
Iteration  15: 8079.096 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  8127.647 ±(99.9%) 23.114 us/op [Average]
  (min, avg, max) = (8079.096, 8127.647, 8160.105), stdev = 21.620
  CI (99.9%): [8104.534, 8150.761] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 65.22% complete, ETA 02:55:27
# Fork: 1 of 1
# Warmup Iteration   1: 109479.789 us/op
# Warmup Iteration   2: 109213.898 us/op
# Warmup Iteration   3: 109679.750 us/op
# Warmup Iteration   4: 109602.602 us/op
# Warmup Iteration   5: 109611.050 us/op
Iteration   1: 109446.172 us/op
Iteration   2: 109087.633 us/op
Iteration   3: 110507.803 us/op
Iteration   4: 109849.425 us/op
Iteration   5: 109541.332 us/op
Iteration   6: 109341.717 us/op
Iteration   7: 109099.856 us/op
Iteration   8: 108873.928 us/op
Iteration   9: 108713.710 us/op
Iteration  10: 109571.724 us/op
Iteration  11: 110208.501 us/op
Iteration  12: 108902.383 us/op
Iteration  13: 108911.176 us/op
Iteration  14: 109812.581 us/op
Iteration  15: 109210.085 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  109405.202 ±(99.9%) 554.451 us/op [Average]
  (min, avg, max) = (108713.710, 109405.202, 110507.803), stdev = 518.634
  CI (99.9%): [108850.750, 109959.653] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 65.94% complete, ETA 02:51:47
# Fork: 1 of 1
# Warmup Iteration   1: 929384.309 us/op
# Warmup Iteration   2: 814259.687 us/op
# Warmup Iteration   3: 811882.483 us/op
# Warmup Iteration   4: 816502.507 us/op
# Warmup Iteration   5: 816857.381 us/op
Iteration   1: 806004.818 us/op
Iteration   2: 806226.536 us/op
Iteration   3: 808043.223 us/op
Iteration   4: 813062.320 us/op
Iteration   5: 813063.103 us/op
Iteration   6: 805431.749 us/op
Iteration   7: 810740.776 us/op
Iteration   8: 809219.873 us/op
Iteration   9: 810825.689 us/op
Iteration  10: 806308.704 us/op
Iteration  11: 809985.805 us/op
Iteration  12: 811669.310 us/op
Iteration  13: 809089.892 us/op
Iteration  14: 815511.074 us/op
Iteration  15: 814705.422 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  809992.553 ±(99.9%) 3443.480 us/op [Average]
  (min, avg, max) = (805431.749, 809992.553, 815511.074), stdev = 3221.033
  CI (99.9%): [806549.073, 813436.033] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 66.66% complete, ETA 02:48:11
# Fork: 1 of 1
# Warmup Iteration   1: 207468.251 ±(99.9%) 13862.575 us/op
# Warmup Iteration   2: 200938.619 ±(99.9%) 1902.951 us/op
# Warmup Iteration   3: 201976.709 ±(99.9%) 2375.308 us/op
# Warmup Iteration   4: 200676.475 ±(99.9%) 2848.002 us/op
# Warmup Iteration   5: 201012.019 ±(99.9%) 2000.465 us/op
Iteration   1: 200561.132 ±(99.9%) 1532.524 us/op
                 createNewObjects·p0.00:   195559.424 us/op
                 createNewObjects·p0.50:   199884.800 us/op
                 createNewObjects·p0.90:   204996.608 us/op
                 createNewObjects·p0.95:   206949.581 us/op
                 createNewObjects·p0.99:   208404.480 us/op
                 createNewObjects·p0.999:  208404.480 us/op
                 createNewObjects·p0.9999: 208404.480 us/op
                 createNewObjects·p1.00:   208404.480 us/op

Iteration   2: 200561.132 ±(99.9%) 2229.869 us/op
                 createNewObjects·p0.00:   194772.992 us/op
                 createNewObjects·p0.50:   198574.080 us/op
                 createNewObjects·p0.90:   206831.616 us/op
                 createNewObjects·p0.95:   211523.994 us/op
                 createNewObjects·p0.99:   214171.648 us/op
                 createNewObjects·p0.999:  214171.648 us/op
                 createNewObjects·p0.9999: 214171.648 us/op
                 createNewObjects·p1.00:   214171.648 us/op

Iteration   3: 200241.316 ±(99.9%) 1877.271 us/op
                 createNewObjects·p0.00:   195297.280 us/op
                 createNewObjects·p0.50:   198705.152 us/op
                 createNewObjects·p0.90:   207277.261 us/op
                 createNewObjects·p0.95:   208784.589 us/op
                 createNewObjects·p0.99:   208928.768 us/op
                 createNewObjects·p0.999:  208928.768 us/op
                 createNewObjects·p0.9999: 208928.768 us/op
                 createNewObjects·p1.00:   208928.768 us/op

Iteration   4: 200639.775 ±(99.9%) 1633.911 us/op
                 createNewObjects·p0.00:   196083.712 us/op
                 createNewObjects·p0.50:   199622.656 us/op
                 createNewObjects·p0.90:   205468.467 us/op
                 createNewObjects·p0.95:   207486.976 us/op
                 createNewObjects·p0.99:   212074.496 us/op
                 createNewObjects·p0.999:  212074.496 us/op
                 createNewObjects·p0.9999: 212074.496 us/op
                 createNewObjects·p1.00:   212074.496 us/op

Iteration   5: 201756.508 ±(99.9%) 2683.030 us/op
                 createNewObjects·p0.00:   195035.136 us/op
                 createNewObjects·p0.50:   200015.872 us/op
                 createNewObjects·p0.90:   212729.856 us/op
                 createNewObjects·p0.95:   214289.613 us/op
                 createNewObjects·p0.99:   217055.232 us/op
                 createNewObjects·p0.999:  217055.232 us/op
                 createNewObjects·p0.9999: 217055.232 us/op
                 createNewObjects·p1.00:   217055.232 us/op

Iteration   6: 202343.711 ±(99.9%) 2077.271 us/op
                 createNewObjects·p0.00:   196083.712 us/op
                 createNewObjects·p0.50:   201457.664 us/op
                 createNewObjects·p0.90:   208928.768 us/op
                 createNewObjects·p0.95:   210095.309 us/op
                 createNewObjects·p0.99:   212598.784 us/op
                 createNewObjects·p0.999:  212598.784 us/op
                 createNewObjects·p0.9999: 212598.784 us/op
                 createNewObjects·p1.00:   212598.784 us/op

Iteration   7: 201085.420 ±(99.9%) 2059.191 us/op
                 createNewObjects·p0.00:   195559.424 us/op
                 createNewObjects·p0.50:   199753.728 us/op
                 createNewObjects·p0.90:   206831.616 us/op
                 createNewObjects·p0.95:   210488.525 us/op
                 createNewObjects·p0.99:   213909.504 us/op
                 createNewObjects·p0.999:  213909.504 us/op
                 createNewObjects·p0.9999: 213909.504 us/op
                 createNewObjects·p1.00:   213909.504 us/op

Iteration   8: 200928.133 ±(99.9%) 2292.400 us/op
                 createNewObjects·p0.00:   194510.848 us/op
                 createNewObjects·p0.50:   199491.584 us/op
                 createNewObjects·p0.90:   207565.619 us/op
                 createNewObjects·p0.95:   211510.886 us/op
                 createNewObjects·p0.99:   215220.224 us/op
                 createNewObjects·p0.999:  215220.224 us/op
                 createNewObjects·p0.9999: 215220.224 us/op
                 createNewObjects·p1.00:   215220.224 us/op

Iteration   9: 200665.989 ±(99.9%) 2071.239 us/op
                 createNewObjects·p0.00:   195297.280 us/op
                 createNewObjects·p0.50:   199491.584 us/op
                 createNewObjects·p0.90:   205756.826 us/op
                 createNewObjects·p0.95:   206949.581 us/op
                 createNewObjects·p0.99:   218628.096 us/op
                 createNewObjects·p0.999:  218628.096 us/op
                 createNewObjects·p0.9999: 218628.096 us/op
                 createNewObjects·p1.00:   218628.096 us/op

Iteration  10: 201247.949 ±(99.9%) 2038.122 us/op
                 createNewObjects·p0.00:   196083.712 us/op
                 createNewObjects·p0.50:   199622.656 us/op
                 createNewObjects·p0.90:   207696.691 us/op
                 createNewObjects·p0.95:   210173.952 us/op
                 createNewObjects·p0.99:   213385.216 us/op
                 createNewObjects·p0.999:  213385.216 us/op
                 createNewObjects·p0.9999: 213385.216 us/op
                 createNewObjects·p1.00:   213385.216 us/op

Iteration  11: 201064.448 ±(99.9%) 2526.305 us/op
                 createNewObjects·p0.00:   195821.568 us/op
                 createNewObjects·p0.50:   198836.224 us/op
                 createNewObjects·p0.90:   207041.331 us/op
                 createNewObjects·p0.95:   214446.899 us/op
                 createNewObjects·p0.99:   217317.376 us/op
                 createNewObjects·p0.999:  217317.376 us/op
                 createNewObjects·p0.9999: 217317.376 us/op
                 createNewObjects·p1.00:   217317.376 us/op

Iteration  12: 200555.889 ±(99.9%) 2268.008 us/op
                 createNewObjects·p0.00:   194248.704 us/op
                 createNewObjects·p0.50:   199360.512 us/op
                 createNewObjects·p0.90:   206726.758 us/op
                 createNewObjects·p0.95:   209951.130 us/op
                 createNewObjects·p0.99:   218365.952 us/op
                 createNewObjects·p0.999:  218365.952 us/op
                 createNewObjects·p0.9999: 218365.952 us/op
                 createNewObjects·p1.00:   218365.952 us/op

Iteration  13: 200587.346 ±(99.9%) 2149.803 us/op
                 createNewObjects·p0.00:   195035.136 us/op
                 createNewObjects·p0.50:   198705.152 us/op
                 createNewObjects·p0.90:   207303.475 us/op
                 createNewObjects·p0.95:   210305.024 us/op
                 createNewObjects·p0.99:   214171.648 us/op
                 createNewObjects·p0.999:  214171.648 us/op
                 createNewObjects·p0.9999: 214171.648 us/op
                 createNewObjects·p1.00:   214171.648 us/op

Iteration  14: 199835.969 ±(99.9%) 2576.651 us/op
                 createNewObjects·p0.00:   194772.992 us/op
                 createNewObjects·p0.50:   198180.864 us/op
                 createNewObjects·p0.90:   205678.182 us/op
                 createNewObjects·p0.95:   213647.360 us/op
                 createNewObjects·p0.99:   222298.112 us/op
                 createNewObjects·p0.999:  222298.112 us/op
                 createNewObjects·p0.9999: 222298.112 us/op
                 createNewObjects·p1.00:   222298.112 us/op

Iteration  15: 201814.180 ±(99.9%) 2540.686 us/op
                 createNewObjects·p0.00:   195559.424 us/op
                 createNewObjects·p0.50:   200540.160 us/op
                 createNewObjects·p0.90:   208981.197 us/op
                 createNewObjects·p0.95:   212952.678 us/op
                 createNewObjects·p0.99:   221249.536 us/op
                 createNewObjects·p0.999:  221249.536 us/op
                 createNewObjects·p0.9999: 221249.536 us/op
                 createNewObjects·p1.00:   221249.536 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 751
  mean = 200924.475 ±(99.9%) 535.415 us/op

  Histogram, us/op:
    [190000.000, 192500.000) = 0 
    [192500.000, 195000.000) = 5 
    [195000.000, 197500.000) = 150 
    [197500.000, 200000.000) = 251 
    [200000.000, 202500.000) = 127 
    [202500.000, 205000.000) = 96 
    [205000.000, 207500.000) = 62 
    [207500.000, 210000.000) = 27 
    [210000.000, 212500.000) = 9 
    [212500.000, 215000.000) = 15 
    [215000.000, 217500.000) = 5 
    [217500.000, 220000.000) = 2 
    [220000.000, 222500.000) = 2 
    [222500.000, 225000.000) = 0 
    [225000.000, 227500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 194248.704 us/op
     p(50.0000) = 199491.584 us/op
     p(90.0000) = 206831.616 us/op
     p(95.0000) = 209400.627 us/op
     p(99.0000) = 215471.882 us/op
     p(99.9000) = 222298.112 us/op
     p(99.9900) = 222298.112 us/op
     p(99.9990) = 222298.112 us/op
     p(99.9999) = 222298.112 us/op
    p(100.0000) = 222298.112 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 67.39% complete, ETA 02:44:30
# Fork: 1 of 1
# Warmup Iteration   1: 160353.069 ±(99.9%) 9639.197 us/op
# Warmup Iteration   2: 155475.590 ±(99.9%) 1458.435 us/op
# Warmup Iteration   3: 155451.392 ±(99.9%) 1745.976 us/op
# Warmup Iteration   4: 155955.515 ±(99.9%) 1852.291 us/op
# Warmup Iteration   5: 155862.756 ±(99.9%) 1780.744 us/op
Iteration   1: 156798.976 ±(99.9%) 1979.176 us/op
                 createNewObjects·p0.00:   150732.800 us/op
                 createNewObjects·p0.50:   154927.104 us/op
                 createNewObjects·p0.90:   162791.424 us/op
                 createNewObjects·p0.95:   165609.472 us/op
                 createNewObjects·p0.99:   173277.184 us/op
                 createNewObjects·p0.999:  173277.184 us/op
                 createNewObjects·p0.9999: 173277.184 us/op
                 createNewObjects·p1.00:   173277.184 us/op

Iteration   2: 157196.288 ±(99.9%) 2012.584 us/op
                 createNewObjects·p0.00:   151257.088 us/op
                 createNewObjects·p0.50:   157679.616 us/op
                 createNewObjects·p0.90:   162398.208 us/op
                 createNewObjects·p0.95:   163446.784 us/op
                 createNewObjects·p0.99:   176685.056 us/op
                 createNewObjects·p0.999:  176685.056 us/op
                 createNewObjects·p0.9999: 176685.056 us/op
                 createNewObjects·p1.00:   176685.056 us/op

Iteration   3: 156520.448 ±(99.9%) 2402.444 us/op
                 createNewObjects·p0.00:   149946.368 us/op
                 createNewObjects·p0.50:   154927.104 us/op
                 createNewObjects·p0.90:   162791.424 us/op
                 createNewObjects·p0.95:   172490.752 us/op
                 createNewObjects·p0.99:   174850.048 us/op
                 createNewObjects·p0.999:  174850.048 us/op
                 createNewObjects·p0.9999: 174850.048 us/op
                 createNewObjects·p1.00:   174850.048 us/op

Iteration   4: 156995.584 ±(99.9%) 1769.911 us/op
                 createNewObjects·p0.00:   150732.800 us/op
                 createNewObjects·p0.50:   156893.184 us/op
                 createNewObjects·p0.90:   161742.848 us/op
                 createNewObjects·p0.95:   163840.000 us/op
                 createNewObjects·p0.99:   171704.320 us/op
                 createNewObjects·p0.999:  171704.320 us/op
                 createNewObjects·p0.9999: 171704.320 us/op
                 createNewObjects·p1.00:   171704.320 us/op

Iteration   5: 155923.251 ±(99.9%) 1878.407 us/op
                 createNewObjects·p0.00:   151257.088 us/op
                 createNewObjects·p0.50:   154402.816 us/op
                 createNewObjects·p0.90:   162371.994 us/op
                 createNewObjects·p0.95:   164233.216 us/op
                 createNewObjects·p0.99:   175898.624 us/op
                 createNewObjects·p0.999:  175898.624 us/op
                 createNewObjects·p0.9999: 175898.624 us/op
                 createNewObjects·p1.00:   175898.624 us/op

Iteration   6: 157388.800 ±(99.9%) 2165.528 us/op
                 createNewObjects·p0.00:   150470.656 us/op
                 createNewObjects·p0.50:   155844.608 us/op
                 createNewObjects·p0.90:   165675.008 us/op
                 createNewObjects·p0.95:   167510.016 us/op
                 createNewObjects·p0.99:   172490.752 us/op
                 createNewObjects·p0.999:  172490.752 us/op
                 createNewObjects·p0.9999: 172490.752 us/op
                 createNewObjects·p1.00:   172490.752 us/op

Iteration   7: 156651.520 ±(99.9%) 1528.272 us/op
                 createNewObjects·p0.00:   150994.944 us/op
                 createNewObjects·p0.50:   155844.608 us/op
                 createNewObjects·p0.90:   161087.488 us/op
                 createNewObjects·p0.95:   164757.504 us/op
                 createNewObjects·p0.99:   169082.880 us/op
                 createNewObjects·p0.999:  169082.880 us/op
                 createNewObjects·p0.9999: 169082.880 us/op
                 createNewObjects·p1.00:   169082.880 us/op

Iteration   8: 156467.200 ±(99.9%) 1608.381 us/op
                 createNewObjects·p0.00:   152043.520 us/op
                 createNewObjects·p0.50:   155582.464 us/op
                 createNewObjects·p0.90:   161087.488 us/op
                 createNewObjects·p0.95:   163512.320 us/op
                 createNewObjects·p0.99:   171966.464 us/op
                 createNewObjects·p0.999:  171966.464 us/op
                 createNewObjects·p0.9999: 171966.464 us/op
                 createNewObjects·p1.00:   171966.464 us/op

Iteration   9: 156835.840 ±(99.9%) 1964.305 us/op
                 createNewObjects·p0.00:   152043.520 us/op
                 createNewObjects·p0.50:   154927.104 us/op
                 createNewObjects·p0.90:   162398.208 us/op
                 createNewObjects·p0.95:   165609.472 us/op
                 createNewObjects·p0.99:   174587.904 us/op
                 createNewObjects·p0.999:  174587.904 us/op
                 createNewObjects·p0.9999: 174587.904 us/op
                 createNewObjects·p1.00:   174587.904 us/op

Iteration  10: 156250.112 ±(99.9%) 1589.577 us/op
                 createNewObjects·p0.00:   149946.368 us/op
                 createNewObjects·p0.50:   155320.320 us/op
                 createNewObjects·p0.90:   160169.984 us/op
                 createNewObjects·p0.95:   165019.648 us/op
                 createNewObjects·p0.99:   168296.448 us/op
                 createNewObjects·p0.999:  168296.448 us/op
                 createNewObjects·p0.9999: 168296.448 us/op
                 createNewObjects·p1.00:   168296.448 us/op

Iteration  11: 156454.912 ±(99.9%) 1645.953 us/op
                 createNewObjects·p0.00:   150732.800 us/op
                 createNewObjects·p0.50:   155975.680 us/op
                 createNewObjects·p0.90:   160169.984 us/op
                 createNewObjects·p0.95:   166658.048 us/op
                 createNewObjects·p0.99:   170655.744 us/op
                 createNewObjects·p0.999:  170655.744 us/op
                 createNewObjects·p0.9999: 170655.744 us/op
                 createNewObjects·p1.00:   170655.744 us/op

Iteration  12: 157294.592 ±(99.9%) 2087.252 us/op
                 createNewObjects·p0.00:   151519.232 us/op
                 createNewObjects·p0.50:   156237.824 us/op
                 createNewObjects·p0.90:   164233.216 us/op
                 createNewObjects·p0.95:   167247.872 us/op
                 createNewObjects·p0.99:   173277.184 us/op
                 createNewObjects·p0.999:  173277.184 us/op
                 createNewObjects·p0.9999: 173277.184 us/op
                 createNewObjects·p1.00:   173277.184 us/op

Iteration  13: 156528.640 ±(99.9%) 1510.135 us/op
                 createNewObjects·p0.00:   151781.376 us/op
                 createNewObjects·p0.50:   155844.608 us/op
                 createNewObjects·p0.90:   161873.920 us/op
                 createNewObjects·p0.95:   163577.856 us/op
                 createNewObjects·p0.99:   165150.720 us/op
                 createNewObjects·p0.999:  165150.720 us/op
                 createNewObjects·p0.9999: 165150.720 us/op
                 createNewObjects·p1.00:   165150.720 us/op

Iteration  14: 155870.822 ±(99.9%) 1612.662 us/op
                 createNewObjects·p0.00:   151257.088 us/op
                 createNewObjects·p0.50:   154140.672 us/op
                 createNewObjects·p0.90:   161637.990 us/op
                 createNewObjects·p0.95:   164128.358 us/op
                 createNewObjects·p0.99:   164626.432 us/op
                 createNewObjects·p0.999:  164626.432 us/op
                 createNewObjects·p0.9999: 164626.432 us/op
                 createNewObjects·p1.00:   164626.432 us/op

Iteration  15: 155915.185 ±(99.9%) 1868.607 us/op
                 createNewObjects·p0.00:   150732.800 us/op
                 createNewObjects·p0.50:   154140.672 us/op
                 createNewObjects·p0.90:   161795.277 us/op
                 createNewObjects·p0.95:   164914.790 us/op
                 createNewObjects·p0.99:   171966.464 us/op
                 createNewObjects·p0.999:  171966.464 us/op
                 createNewObjects·p0.9999: 171966.464 us/op
                 createNewObjects·p1.00:   171966.464 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 963
  mean = 156603.955 ±(99.9%) 458.365 us/op

  Histogram, us/op:
    [140000.000, 142500.000) = 0 
    [142500.000, 145000.000) = 0 
    [145000.000, 147500.000) = 0 
    [147500.000, 150000.000) = 2 
    [150000.000, 152500.000) = 101 
    [152500.000, 155000.000) = 358 
    [155000.000, 157500.000) = 164 
    [157500.000, 160000.000) = 150 
    [160000.000, 162500.000) = 102 
    [162500.000, 165000.000) = 41 
    [165000.000, 167500.000) = 16 
    [167500.000, 170000.000) = 13 
    [170000.000, 172500.000) = 8 
    [172500.000, 175000.000) = 6 
    [175000.000, 177500.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 149946.368 us/op
     p(50.0000) = 155189.248 us/op
     p(90.0000) = 161742.848 us/op
     p(95.0000) = 164626.432 us/op
     p(99.0000) = 172155.208 us/op
     p(99.9000) = 176685.056 us/op
     p(99.9900) = 176685.056 us/op
     p(99.9990) = 176685.056 us/op
     p(99.9999) = 176685.056 us/op
    p(100.0000) = 176685.056 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 68.11% complete, ETA 02:40:50
# Fork: 1 of 1
# Warmup Iteration   1: 159608.247 ±(99.9%) 10339.681 us/op
# Warmup Iteration   2: 151057.546 ±(99.9%) 1830.770 us/op
# Warmup Iteration   3: 151408.019 ±(99.9%) 1758.884 us/op
# Warmup Iteration   4: 152432.764 ±(99.9%) 2337.097 us/op
# Warmup Iteration   5: 151499.373 ±(99.9%) 1763.125 us/op
Iteration   1: 150470.656 ±(99.9%) 1847.799 us/op
                 createNewObjects·p0.00:   146276.352 us/op
                 createNewObjects·p0.50:   148897.792 us/op
                 createNewObjects·p0.90:   155136.819 us/op
                 createNewObjects·p0.95:   163577.856 us/op
                 createNewObjects·p0.99:   164888.576 us/op
                 createNewObjects·p0.999:  164888.576 us/op
                 createNewObjects·p0.9999: 164888.576 us/op
                 createNewObjects·p1.00:   164888.576 us/op

Iteration   2: 152337.439 ±(99.9%) 2369.865 us/op
                 createNewObjects·p0.00:   145489.920 us/op
                 createNewObjects·p0.50:   150601.728 us/op
                 createNewObjects·p0.90:   160012.698 us/op
                 createNewObjects·p0.95:   166448.333 us/op
                 createNewObjects·p0.99:   170131.456 us/op
                 createNewObjects·p0.999:  170131.456 us/op
                 createNewObjects·p0.9999: 170131.456 us/op
                 createNewObjects·p1.00:   170131.456 us/op

Iteration   3: 150920.605 ±(99.9%) 1794.434 us/op
                 createNewObjects·p0.00:   145489.920 us/op
                 createNewObjects·p0.50:   149422.080 us/op
                 createNewObjects·p0.90:   156447.539 us/op
                 createNewObjects·p0.95:   160536.986 us/op
                 createNewObjects·p0.99:   164626.432 us/op
                 createNewObjects·p0.999:  164626.432 us/op
                 createNewObjects·p0.9999: 164626.432 us/op
                 createNewObjects·p1.00:   164626.432 us/op

Iteration   4: 150286.764 ±(99.9%) 2033.957 us/op
                 createNewObjects·p0.00:   145752.064 us/op
                 createNewObjects·p0.50:   148635.648 us/op
                 createNewObjects·p0.90:   155713.536 us/op
                 createNewObjects·p0.95:   161166.131 us/op
                 createNewObjects·p0.99:   172752.896 us/op
                 createNewObjects·p0.999:  172752.896 us/op
                 createNewObjects·p0.9999: 172752.896 us/op
                 createNewObjects·p1.00:   172752.896 us/op

Iteration   5: 150963.643 ±(99.9%) 1590.509 us/op
                 createNewObjects·p0.00:   144441.344 us/op
                 createNewObjects·p0.50:   149946.368 us/op
                 createNewObjects·p0.90:   156552.397 us/op
                 createNewObjects·p0.95:   159068.979 us/op
                 createNewObjects·p0.99:   161480.704 us/op
                 createNewObjects·p0.999:  161480.704 us/op
                 createNewObjects·p0.9999: 161480.704 us/op
                 createNewObjects·p1.00:   161480.704 us/op

Iteration   6: 151206.224 ±(99.9%) 1734.830 us/op
                 createNewObjects·p0.00:   144965.632 us/op
                 createNewObjects·p0.50:   149684.224 us/op
                 createNewObjects·p0.90:   157076.685 us/op
                 createNewObjects·p0.95:   161113.702 us/op
                 createNewObjects·p0.99:   165937.152 us/op
                 createNewObjects·p0.999:  165937.152 us/op
                 createNewObjects·p0.9999: 165937.152 us/op
                 createNewObjects·p1.00:   165937.152 us/op

Iteration   7: 151190.574 ±(99.9%) 1905.396 us/op
                 createNewObjects·p0.00:   145752.064 us/op
                 createNewObjects·p0.50:   150470.656 us/op
                 createNewObjects·p0.90:   156919.398 us/op
                 createNewObjects·p0.95:   161742.848 us/op
                 createNewObjects·p0.99:   163315.712 us/op
                 createNewObjects·p0.999:  163315.712 us/op
                 createNewObjects·p0.9999: 163315.712 us/op
                 createNewObjects·p1.00:   163315.712 us/op

Iteration   8: 150458.918 ±(99.9%) 1909.850 us/op
                 createNewObjects·p0.00:   145752.064 us/op
                 createNewObjects·p0.50:   149422.080 us/op
                 createNewObjects·p0.90:   155608.678 us/op
                 createNewObjects·p0.95:   162004.992 us/op
                 createNewObjects·p0.99:   169082.880 us/op
                 createNewObjects·p0.999:  169082.880 us/op
                 createNewObjects·p0.9999: 169082.880 us/op
                 createNewObjects·p1.00:   169082.880 us/op

Iteration   9: 151304.039 ±(99.9%) 1910.573 us/op
                 createNewObjects·p0.00:   146014.208 us/op
                 createNewObjects·p0.50:   149684.224 us/op
                 createNewObjects·p0.90:   157600.973 us/op
                 createNewObjects·p0.95:   161113.702 us/op
                 createNewObjects·p0.99:   172490.752 us/op
                 createNewObjects·p0.999:  172490.752 us/op
                 createNewObjects·p0.9999: 172490.752 us/op
                 createNewObjects·p1.00:   172490.752 us/op

Iteration  10: 151924.364 ±(99.9%) 2567.620 us/op
                 createNewObjects·p0.00:   145489.920 us/op
                 createNewObjects·p0.50:   149684.224 us/op
                 createNewObjects·p0.90:   158675.763 us/op
                 createNewObjects·p0.95:   163971.072 us/op
                 createNewObjects·p0.99:   176685.056 us/op
                 createNewObjects·p0.999:  176685.056 us/op
                 createNewObjects·p0.9999: 176685.056 us/op
                 createNewObjects·p1.00:   176685.056 us/op

Iteration  11: 149985.494 ±(99.9%) 1511.926 us/op
                 createNewObjects·p0.00:   144703.488 us/op
                 createNewObjects·p0.50:   148635.648 us/op
                 createNewObjects·p0.90:   155765.965 us/op
                 createNewObjects·p0.95:   157705.830 us/op
                 createNewObjects·p0.99:   161742.848 us/op
                 createNewObjects·p0.999:  161742.848 us/op
                 createNewObjects·p0.9999: 161742.848 us/op
                 createNewObjects·p1.00:   161742.848 us/op

Iteration  12: 150517.607 ±(99.9%) 1537.637 us/op
                 createNewObjects·p0.00:   145489.920 us/op
                 createNewObjects·p0.50:   149422.080 us/op
                 createNewObjects·p0.90:   154612.531 us/op
                 createNewObjects·p0.95:   157758.259 us/op
                 createNewObjects·p0.99:   164364.288 us/op
                 createNewObjects·p0.999:  164364.288 us/op
                 createNewObjects·p0.9999: 164364.288 us/op
                 createNewObjects·p1.00:   164364.288 us/op

Iteration  13: 152134.873 ±(99.9%) 2403.508 us/op
                 createNewObjects·p0.00:   144703.488 us/op
                 createNewObjects·p0.50:   150339.584 us/op
                 createNewObjects·p0.90:   160484.557 us/op
                 createNewObjects·p0.95:   165203.149 us/op
                 createNewObjects·p0.99:   172490.752 us/op
                 createNewObjects·p0.999:  172490.752 us/op
                 createNewObjects·p0.9999: 172490.752 us/op
                 createNewObjects·p1.00:   172490.752 us/op

Iteration  14: 150631.072 ±(99.9%) 1859.727 us/op
                 createNewObjects·p0.00:   144703.488 us/op
                 createNewObjects·p0.50:   149422.080 us/op
                 createNewObjects·p0.90:   155608.678 us/op
                 createNewObjects·p0.95:   157391.258 us/op
                 createNewObjects·p0.99:   172752.896 us/op
                 createNewObjects·p0.999:  172752.896 us/op
                 createNewObjects·p0.9999: 172752.896 us/op
                 createNewObjects·p1.00:   172752.896 us/op

Iteration  15: 151487.457 ±(99.9%) 1633.398 us/op
                 createNewObjects·p0.00:   145752.064 us/op
                 createNewObjects·p0.50:   150601.728 us/op
                 createNewObjects·p0.90:   155975.680 us/op
                 createNewObjects·p0.95:   158072.832 us/op
                 createNewObjects·p0.99:   164888.576 us/op
                 createNewObjects·p0.999:  164888.576 us/op
                 createNewObjects·p0.9999: 164888.576 us/op
                 createNewObjects·p1.00:   164888.576 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 1001
  mean = 151050.987 ±(99.9%) 479.003 us/op

  Histogram, us/op:
    [140000.000, 142500.000) = 0 
    [142500.000, 145000.000) = 6 
    [145000.000, 147500.000) = 167 
    [147500.000, 150000.000) = 395 
    [150000.000, 152500.000) = 130 
    [152500.000, 155000.000) = 149 
    [155000.000, 157500.000) = 65 
    [157500.000, 160000.000) = 36 
    [160000.000, 162500.000) = 22 
    [162500.000, 165000.000) = 16 
    [165000.000, 167500.000) = 5 
    [167500.000, 170000.000) = 3 
    [170000.000, 172500.000) = 3 
    [172500.000, 175000.000) = 2 
    [175000.000, 177500.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 144441.344 us/op
     p(50.0000) = 149422.080 us/op
     p(90.0000) = 156499.968 us/op
     p(95.0000) = 160930.202 us/op
     p(99.0000) = 168275.476 us/op
     p(99.9000) = 176682.959 us/op
     p(99.9900) = 176685.056 us/op
     p(99.9990) = 176685.056 us/op
     p(99.9999) = 176685.056 us/op
    p(100.0000) = 176685.056 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 68.84% complete, ETA 02:37:09
# Fork: 1 of 1
# Warmup Iteration   1: 208349.867 ±(99.9%) 5199.239 us/op
# Warmup Iteration   2: 204761.213 ±(99.9%) 2209.018 us/op
# Warmup Iteration   3: 203795.988 ±(99.9%) 1928.222 us/op
# Warmup Iteration   4: 204204.826 ±(99.9%) 2142.573 us/op
# Warmup Iteration   5: 206542.723 ±(99.9%) 2653.151 us/op
Iteration   1: 203329.372 ±(99.9%) 1994.918 us/op
                 createNewObjects·p0.00:   198705.152 us/op
                 createNewObjects·p0.50:   202244.096 us/op
                 createNewObjects·p0.90:   208640.410 us/op
                 createNewObjects·p0.95:   213359.002 us/op
                 createNewObjects·p0.99:   214171.648 us/op
                 createNewObjects·p0.999:  214171.648 us/op
                 createNewObjects·p0.9999: 214171.648 us/op
                 createNewObjects·p1.00:   214171.648 us/op

Iteration   2: 204113.878 ±(99.9%) 2344.976 us/op
                 createNewObjects·p0.00:   198967.296 us/op
                 createNewObjects·p0.50:   202637.312 us/op
                 createNewObjects·p0.90:   211550.208 us/op
                 createNewObjects·p0.95:   215744.512 us/op
                 createNewObjects·p0.99:   217579.520 us/op
                 createNewObjects·p0.999:  217579.520 us/op
                 createNewObjects·p0.9999: 217579.520 us/op
                 createNewObjects·p1.00:   217579.520 us/op

Iteration   3: 204686.315 ±(99.9%) 2095.684 us/op
                 createNewObjects·p0.00:   198443.008 us/op
                 createNewObjects·p0.50:   202899.456 us/op
                 createNewObjects·p0.90:   211288.064 us/op
                 createNewObjects·p0.95:   213385.216 us/op
                 createNewObjects·p0.99:   215220.224 us/op
                 createNewObjects·p0.999:  215220.224 us/op
                 createNewObjects·p0.9999: 215220.224 us/op
                 createNewObjects·p1.00:   215220.224 us/op

Iteration   4: 206911.864 ±(99.9%) 2589.470 us/op
                 createNewObjects·p0.00:   200015.872 us/op
                 createNewObjects·p0.50:   206307.328 us/op
                 createNewObjects·p0.90:   214695.936 us/op
                 createNewObjects·p0.95:   218234.880 us/op
                 createNewObjects·p0.99:   223608.832 us/op
                 createNewObjects·p0.999:  223608.832 us/op
                 createNewObjects·p0.9999: 223608.832 us/op
                 createNewObjects·p1.00:   223608.832 us/op

Iteration   5: 206430.375 ±(99.9%) 2510.629 us/op
                 createNewObjects·p0.00:   198967.296 us/op
                 createNewObjects·p0.50:   205520.896 us/op
                 createNewObjects·p0.90:   211812.352 us/op
                 createNewObjects·p0.95:   216924.160 us/op
                 createNewObjects·p0.99:   227016.704 us/op
                 createNewObjects·p0.999:  227016.704 us/op
                 createNewObjects·p0.9999: 227016.704 us/op
                 createNewObjects·p1.00:   227016.704 us/op

Iteration   6: 205419.248 ±(99.9%) 2546.926 us/op
                 createNewObjects·p0.00:   198443.008 us/op
                 createNewObjects·p0.50:   203948.032 us/op
                 createNewObjects·p0.90:   212074.496 us/op
                 createNewObjects·p0.95:   216399.872 us/op
                 createNewObjects·p0.99:   227540.992 us/op
                 createNewObjects·p0.999:  227540.992 us/op
                 createNewObjects·p0.9999: 227540.992 us/op
                 createNewObjects·p1.00:   227540.992 us/op

Iteration   7: 205098.256 ±(99.9%) 2564.903 us/op
                 createNewObjects·p0.00:   199229.440 us/op
                 createNewObjects·p0.50:   203161.600 us/op
                 createNewObjects·p0.90:   213909.504 us/op
                 createNewObjects·p0.95:   216793.088 us/op
                 createNewObjects·p0.99:   218365.952 us/op
                 createNewObjects·p0.999:  218365.952 us/op
                 createNewObjects·p0.9999: 218365.952 us/op
                 createNewObjects·p1.00:   218365.952 us/op

Iteration   8: 204220.876 ±(99.9%) 2178.867 us/op
                 createNewObjects·p0.00:   199229.440 us/op
                 createNewObjects·p0.50:   203423.744 us/op
                 createNewObjects·p0.90:   209715.200 us/op
                 createNewObjects·p0.95:   216006.656 us/op
                 createNewObjects·p0.99:   218890.240 us/op
                 createNewObjects·p0.999:  218890.240 us/op
                 createNewObjects·p0.9999: 218890.240 us/op
                 createNewObjects·p1.00:   218890.240 us/op

Iteration   9: 203476.173 ±(99.9%) 2040.608 us/op
                 createNewObjects·p0.00:   199229.440 us/op
                 createNewObjects·p0.50:   202244.096 us/op
                 createNewObjects·p0.90:   208116.122 us/op
                 createNewObjects·p0.95:   213018.214 us/op
                 createNewObjects·p0.99:   220725.248 us/op
                 createNewObjects·p0.999:  220725.248 us/op
                 createNewObjects·p0.9999: 220725.248 us/op
                 createNewObjects·p1.00:   220725.248 us/op

Iteration  10: 203916.575 ±(99.9%) 2061.993 us/op
                 createNewObjects·p0.00:   198705.152 us/op
                 createNewObjects·p0.50:   203161.600 us/op
                 createNewObjects·p0.90:   209400.627 us/op
                 createNewObjects·p0.95:   212284.211 us/op
                 createNewObjects·p0.99:   218890.240 us/op
                 createNewObjects·p0.999:  218890.240 us/op
                 createNewObjects·p0.9999: 218890.240 us/op
                 createNewObjects·p1.00:   218890.240 us/op

Iteration  11: 203680.645 ±(99.9%) 1672.906 us/op
                 createNewObjects·p0.00:   198180.864 us/op
                 createNewObjects·p0.50:   202899.456 us/op
                 createNewObjects·p0.90:   209426.842 us/op
                 createNewObjects·p0.95:   210855.526 us/op
                 createNewObjects·p0.99:   212860.928 us/op
                 createNewObjects·p0.999:  212860.928 us/op
                 createNewObjects·p0.9999: 212860.928 us/op
                 createNewObjects·p1.00:   212860.928 us/op

Iteration  12: 204937.759 ±(99.9%) 2534.132 us/op
                 createNewObjects·p0.00:   198705.152 us/op
                 createNewObjects·p0.50:   203161.600 us/op
                 createNewObjects·p0.90:   210501.632 us/op
                 createNewObjects·p0.95:   217055.232 us/op
                 createNewObjects·p0.99:   220725.248 us/op
                 createNewObjects·p0.999:  220725.248 us/op
                 createNewObjects·p0.9999: 220725.248 us/op
                 createNewObjects·p1.00:   220725.248 us/op

Iteration  13: 203895.603 ±(99.9%) 1746.383 us/op
                 createNewObjects·p0.00:   199491.584 us/op
                 createNewObjects·p0.50:   203030.528 us/op
                 createNewObjects·p0.90:   209453.056 us/op
                 createNewObjects·p0.95:   211327.386 us/op
                 createNewObjects·p0.99:   212598.784 us/op
                 createNewObjects·p0.999:  212598.784 us/op
                 createNewObjects·p0.9999: 212598.784 us/op
                 createNewObjects·p1.00:   212598.784 us/op

Iteration  14: 204659.566 ±(99.9%) 2363.775 us/op
                 createNewObjects·p0.00:   197656.576 us/op
                 createNewObjects·p0.50:   202899.456 us/op
                 createNewObjects·p0.90:   212074.496 us/op
                 createNewObjects·p0.95:   214564.864 us/op
                 createNewObjects·p0.99:   216268.800 us/op
                 createNewObjects·p0.999:  216268.800 us/op
                 createNewObjects·p0.9999: 216268.800 us/op
                 createNewObjects·p1.00:   216268.800 us/op

Iteration  15: 204322.523 ±(99.9%) 2141.821 us/op
                 createNewObjects·p0.00:   197656.576 us/op
                 createNewObjects·p0.50:   203423.744 us/op
                 createNewObjects·p0.90:   209977.344 us/op
                 createNewObjects·p0.95:   214695.936 us/op
                 createNewObjects·p0.99:   218628.096 us/op
                 createNewObjects·p0.999:  218628.096 us/op
                 createNewObjects·p0.9999: 218628.096 us/op
                 createNewObjects·p1.00:   218628.096 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 740
  mean = 204600.204 ±(99.9%) 553.566 us/op

  Histogram, us/op:
    [190000.000, 192500.000) = 0 
    [192500.000, 195000.000) = 0 
    [195000.000, 197500.000) = 0 
    [197500.000, 200000.000) = 65 
    [200000.000, 202500.000) = 221 
    [202500.000, 205000.000) = 200 
    [205000.000, 207500.000) = 86 
    [207500.000, 210000.000) = 84 
    [210000.000, 212500.000) = 36 
    [212500.000, 215000.000) = 18 
    [215000.000, 217500.000) = 15 
    [217500.000, 220000.000) = 10 
    [220000.000, 222500.000) = 2 
    [222500.000, 225000.000) = 1 
    [225000.000, 227500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 197656.576 us/op
     p(50.0000) = 203292.672 us/op
     p(90.0000) = 210501.632 us/op
     p(95.0000) = 213909.504 us/op
     p(99.0000) = 218890.240 us/op
     p(99.9000) = 227540.992 us/op
     p(99.9900) = 227540.992 us/op
     p(99.9990) = 227540.992 us/op
     p(99.9999) = 227540.992 us/op
    p(100.0000) = 227540.992 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 69.56% complete, ETA 02:33:29
# Fork: 1 of 1
# Warmup Iteration   1: 207703.646 ±(99.9%) 4052.532 us/op
# Warmup Iteration   2: 206762.068 ±(99.9%) 2213.811 us/op
# Warmup Iteration   3: 204878.911 ±(99.9%) 2346.409 us/op
# Warmup Iteration   4: 203743.560 ±(99.9%) 1901.876 us/op
# Warmup Iteration   5: 205552.995 ±(99.9%) 2736.716 us/op
Iteration   1: 204504.419 ±(99.9%) 2859.107 us/op
                 createNewObjects·p0.00:   199229.440 us/op
                 createNewObjects·p0.50:   202899.456 us/op
                 createNewObjects·p0.90:   212860.928 us/op
                 createNewObjects·p0.95:   216399.872 us/op
                 createNewObjects·p0.99:   230948.864 us/op
                 createNewObjects·p0.999:  230948.864 us/op
                 createNewObjects·p0.9999: 230948.864 us/op
                 createNewObjects·p1.00:   230948.864 us/op

Iteration   2: 205044.757 ±(99.9%) 2007.682 us/op
                 createNewObjects·p0.00:   198180.864 us/op
                 createNewObjects·p0.50:   204210.176 us/op
                 createNewObjects·p0.90:   211812.352 us/op
                 createNewObjects·p0.95:   212598.784 us/op
                 createNewObjects·p0.99:   217317.376 us/op
                 createNewObjects·p0.999:  217317.376 us/op
                 createNewObjects·p0.9999: 217317.376 us/op
                 createNewObjects·p1.00:   217317.376 us/op

Iteration   3: 204126.290 ±(99.9%) 2316.887 us/op
                 createNewObjects·p0.00:   198443.008 us/op
                 createNewObjects·p0.50:   202506.240 us/op
                 createNewObjects·p0.90:   210685.133 us/op
                 createNewObjects·p0.95:   214420.685 us/op
                 createNewObjects·p0.99:   220987.392 us/op
                 createNewObjects·p0.999:  220987.392 us/op
                 createNewObjects·p0.9999: 220987.392 us/op
                 createNewObjects·p1.00:   220987.392 us/op

Iteration   4: 204766.563 ±(99.9%) 1921.808 us/op
                 createNewObjects·p0.00:   199753.728 us/op
                 createNewObjects·p0.50:   203685.888 us/op
                 createNewObjects·p0.90:   211288.064 us/op
                 createNewObjects·p0.95:   212729.856 us/op
                 createNewObjects·p0.99:   215744.512 us/op
                 createNewObjects·p0.999:  215744.512 us/op
                 createNewObjects·p0.9999: 215744.512 us/op
                 createNewObjects·p1.00:   215744.512 us/op

Iteration   5: 205296.201 ±(99.9%) 2403.830 us/op
                 createNewObjects·p0.00:   199229.440 us/op
                 createNewObjects·p0.50:   204472.320 us/op
                 createNewObjects·p0.90:   212336.640 us/op
                 createNewObjects·p0.95:   217055.232 us/op
                 createNewObjects·p0.99:   221511.680 us/op
                 createNewObjects·p0.999:  221511.680 us/op
                 createNewObjects·p0.9999: 221511.680 us/op
                 createNewObjects·p1.00:   221511.680 us/op

Iteration   6: 203313.644 ±(99.9%) 1861.659 us/op
                 createNewObjects·p0.00:   198443.008 us/op
                 createNewObjects·p0.50:   202244.096 us/op
                 createNewObjects·p0.90:   208089.907 us/op
                 createNewObjects·p0.95:   213621.146 us/op
                 createNewObjects·p0.99:   216793.088 us/op
                 createNewObjects·p0.999:  216793.088 us/op
                 createNewObjects·p0.9999: 216793.088 us/op
                 createNewObjects·p1.00:   216793.088 us/op

Iteration   7: 204354.623 ±(99.9%) 2614.146 us/op
                 createNewObjects·p0.00:   198180.864 us/op
                 createNewObjects·p0.50:   203161.600 us/op
                 createNewObjects·p0.90:   211025.920 us/op
                 createNewObjects·p0.95:   218365.952 us/op
                 createNewObjects·p0.99:   222822.400 us/op
                 createNewObjects·p0.999:  222822.400 us/op
                 createNewObjects·p0.9999: 222822.400 us/op
                 createNewObjects·p1.00:   222822.400 us/op

Iteration   8: 203785.503 ±(99.9%) 2786.598 us/op
                 createNewObjects·p0.00:   198180.864 us/op
                 createNewObjects·p0.50:   202113.024 us/op
                 createNewObjects·p0.90:   209374.413 us/op
                 createNewObjects·p0.95:   212389.069 us/op
                 createNewObjects·p0.99:   233308.160 us/op
                 createNewObjects·p0.999:  233308.160 us/op
                 createNewObjects·p0.9999: 233308.160 us/op
                 createNewObjects·p1.00:   233308.160 us/op

Iteration   9: 204787.963 ±(99.9%) 2040.192 us/op
                 createNewObjects·p0.00:   198705.152 us/op
                 createNewObjects·p0.50:   203948.032 us/op
                 createNewObjects·p0.90:   212074.496 us/op
                 createNewObjects·p0.95:   212467.712 us/op
                 createNewObjects·p0.99:   213647.360 us/op
                 createNewObjects·p0.999:  213647.360 us/op
                 createNewObjects·p0.9999: 213647.360 us/op
                 createNewObjects·p1.00:   213647.360 us/op

Iteration  10: 203276.943 ±(99.9%) 2184.765 us/op
                 createNewObjects·p0.00:   199753.728 us/op
                 createNewObjects·p0.50:   201588.736 us/op
                 createNewObjects·p0.90:   208116.122 us/op
                 createNewObjects·p0.95:   214446.899 us/op
                 createNewObjects·p0.99:   220725.248 us/op
                 createNewObjects·p0.999:  220725.248 us/op
                 createNewObjects·p0.9999: 220725.248 us/op
                 createNewObjects·p1.00:   220725.248 us/op

Iteration  11: 204680.965 ±(99.9%) 2519.745 us/op
                 createNewObjects·p0.00:   198443.008 us/op
                 createNewObjects·p0.50:   203161.600 us/op
                 createNewObjects·p0.90:   213385.216 us/op
                 createNewObjects·p0.95:   218365.952 us/op
                 createNewObjects·p0.99:   219938.816 us/op
                 createNewObjects·p0.999:  219938.816 us/op
                 createNewObjects·p0.9999: 219938.816 us/op
                 createNewObjects·p1.00:   219938.816 us/op

Iteration  12: 204713.064 ±(99.9%) 2097.595 us/op
                 createNewObjects·p0.00:   198443.008 us/op
                 createNewObjects·p0.50:   204472.320 us/op
                 createNewObjects·p0.90:   210501.632 us/op
                 createNewObjects·p0.95:   212860.928 us/op
                 createNewObjects·p0.99:   213909.504 us/op
                 createNewObjects·p0.999:  213909.504 us/op
                 createNewObjects·p0.9999: 213909.504 us/op
                 createNewObjects·p1.00:   213909.504 us/op

Iteration  13: 204563.268 ±(99.9%) 2140.237 us/op
                 createNewObjects·p0.00:   198180.864 us/op
                 createNewObjects·p0.50:   202899.456 us/op
                 createNewObjects·p0.90:   210763.776 us/op
                 createNewObjects·p0.95:   211681.280 us/op
                 createNewObjects·p0.99:   217055.232 us/op
                 createNewObjects·p0.999:  217055.232 us/op
                 createNewObjects·p0.9999: 217055.232 us/op
                 createNewObjects·p1.00:   217055.232 us/op

Iteration  14: 204001.531 ±(99.9%) 1819.602 us/op
                 createNewObjects·p0.00:   197918.720 us/op
                 createNewObjects·p0.50:   203423.744 us/op
                 createNewObjects·p0.90:   208142.336 us/op
                 createNewObjects·p0.95:   212860.928 us/op
                 createNewObjects·p0.99:   214171.648 us/op
                 createNewObjects·p0.999:  214171.648 us/op
                 createNewObjects·p0.9999: 214171.648 us/op
                 createNewObjects·p1.00:   214171.648 us/op

Iteration  15: 204279.724 ±(99.9%) 2430.822 us/op
                 createNewObjects·p0.00:   198443.008 us/op
                 createNewObjects·p0.50:   202899.456 us/op
                 createNewObjects·p0.90:   211812.352 us/op
                 createNewObjects·p0.95:   213385.216 us/op
                 createNewObjects·p0.99:   216793.088 us/op
                 createNewObjects·p0.999:  216793.088 us/op
                 createNewObjects·p0.9999: 216793.088 us/op
                 createNewObjects·p1.00:   216793.088 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 739
  mean = 204362.354 ±(99.9%) 556.326 us/op

  Histogram, us/op:
    [190000.000, 195000.000) = 0 
    [195000.000, 200000.000) = 72 
    [200000.000, 205000.000) = 408 
    [205000.000, 210000.000) = 181 
    [210000.000, 215000.000) = 56 
    [215000.000, 220000.000) = 16 
    [220000.000, 225000.000) = 4 
    [225000.000, 230000.000) = 0 
    [230000.000, 235000.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 197918.720 us/op
     p(50.0000) = 202899.456 us/op
     p(90.0000) = 210501.632 us/op
     p(95.0000) = 212860.928 us/op
     p(99.0000) = 219938.816 us/op
     p(99.9000) = 233308.160 us/op
     p(99.9900) = 233308.160 us/op
     p(99.9990) = 233308.160 us/op
     p(99.9999) = 233308.160 us/op
    p(100.0000) = 233308.160 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 70.29% complete, ETA 02:29:49
# Fork: 1 of 1
# Warmup Iteration   1: 203586.273 ±(99.9%) 3115.156 us/op
# Warmup Iteration   2: 200786.575 ±(99.9%) 2661.119 us/op
# Warmup Iteration   3: 201814.180 ±(99.9%) 2388.981 us/op
# Warmup Iteration   4: 201373.778 ±(99.9%) 2283.455 us/op
# Warmup Iteration   5: 200519.188 ±(99.9%) 1916.556 us/op
Iteration   1: 201122.120 ±(99.9%) 2923.750 us/op
                 createNewObjects·p0.00:   195035.136 us/op
                 createNewObjects·p0.50:   199360.512 us/op
                 createNewObjects·p0.90:   210449.203 us/op
                 createNewObjects·p0.95:   216242.586 us/op
                 createNewObjects·p0.99:   222298.112 us/op
                 createNewObjects·p0.999:  222298.112 us/op
                 createNewObjects·p0.9999: 222298.112 us/op
                 createNewObjects·p1.00:   222298.112 us/op

Iteration   2: 201452.421 ±(99.9%) 1945.284 us/op
                 createNewObjects·p0.00:   196083.712 us/op
                 createNewObjects·p0.50:   200146.944 us/op
                 createNewObjects·p0.90:   207041.331 us/op
                 createNewObjects·p0.95:   210291.917 us/op
                 createNewObjects·p0.99:   213647.360 us/op
                 createNewObjects·p0.999:  213647.360 us/op
                 createNewObjects·p0.9999: 213647.360 us/op
                 createNewObjects·p1.00:   213647.360 us/op

Iteration   3: 201006.776 ±(99.9%) 2549.501 us/op
                 createNewObjects·p0.00:   194772.992 us/op
                 createNewObjects·p0.50:   199098.368 us/op
                 createNewObjects·p0.90:   207618.048 us/op
                 createNewObjects·p0.95:   212769.178 us/op
                 createNewObjects·p0.99:   218628.096 us/op
                 createNewObjects·p0.999:  218628.096 us/op
                 createNewObjects·p0.9999: 218628.096 us/op
                 createNewObjects·p1.00:   218628.096 us/op

Iteration   4: 202249.339 ±(99.9%) 2740.879 us/op
                 createNewObjects·p0.00:   195035.136 us/op
                 createNewObjects·p0.50:   201588.736 us/op
                 createNewObjects·p0.90:   210082.202 us/op
                 createNewObjects·p0.95:   213961.933 us/op
                 createNewObjects·p0.99:   219938.816 us/op
                 createNewObjects·p0.999:  219938.816 us/op
                 createNewObjects·p0.9999: 219938.816 us/op
                 createNewObjects·p1.00:   219938.816 us/op

Iteration   5: 201892.823 ±(99.9%) 2541.410 us/op
                 createNewObjects·p0.00:   194510.848 us/op
                 createNewObjects·p0.50:   200409.088 us/op
                 createNewObjects·p0.90:   208063.693 us/op
                 createNewObjects·p0.95:   213686.682 us/op
                 createNewObjects·p0.99:   217841.664 us/op
                 createNewObjects·p0.999:  217841.664 us/op
                 createNewObjects·p0.9999: 217841.664 us/op
                 createNewObjects·p1.00:   217841.664 us/op

Iteration   6: 199799.989 ±(99.9%) 2058.358 us/op
                 createNewObjects·p0.00:   194248.704 us/op
                 createNewObjects·p0.50:   198443.008 us/op
                 createNewObjects·p0.90:   205992.755 us/op
                 createNewObjects·p0.95:   208771.482 us/op
                 createNewObjects·p0.99:   215220.224 us/op
                 createNewObjects·p0.999:  215220.224 us/op
                 createNewObjects·p0.9999: 215220.224 us/op
                 createNewObjects·p1.00:   215220.224 us/op

Iteration   7: 202930.913 ±(99.9%) 3198.093 us/op
                 createNewObjects·p0.00:   196083.712 us/op
                 createNewObjects·p0.50:   200146.944 us/op
                 createNewObjects·p0.90:   212546.355 us/op
                 createNewObjects·p0.95:   219466.957 us/op
                 createNewObjects·p0.99:   224919.552 us/op
                 createNewObjects·p0.999:  224919.552 us/op
                 createNewObjects·p0.9999: 224919.552 us/op
                 createNewObjects·p1.00:   224919.552 us/op

Iteration   8: 201887.580 ±(99.9%) 2540.145 us/op
                 createNewObjects·p0.00:   195559.424 us/op
                 createNewObjects·p0.50:   199884.800 us/op
                 createNewObjects·p0.90:   209977.344 us/op
                 createNewObjects·p0.95:   213765.325 us/op
                 createNewObjects·p0.99:   216006.656 us/op
                 createNewObjects·p0.999:  216006.656 us/op
                 createNewObjects·p0.9999: 216006.656 us/op
                 createNewObjects·p1.00:   216006.656 us/op

Iteration   9: 200167.916 ±(99.9%) 2167.539 us/op
                 createNewObjects·p0.00:   195559.424 us/op
                 createNewObjects·p0.50:   198705.152 us/op
                 createNewObjects·p0.90:   205704.397 us/op
                 createNewObjects·p0.95:   210396.774 us/op
                 createNewObjects·p0.99:   217317.376 us/op
                 createNewObjects·p0.999:  217317.376 us/op
                 createNewObjects·p0.9999: 217317.376 us/op
                 createNewObjects·p1.00:   217317.376 us/op

Iteration  10: 201095.905 ±(99.9%) 2060.826 us/op
                 createNewObjects·p0.00:   195297.280 us/op
                 createNewObjects·p0.50:   199753.728 us/op
                 createNewObjects·p0.90:   206543.258 us/op
                 createNewObjects·p0.95:   209177.805 us/op
                 createNewObjects·p0.99:   216006.656 us/op
                 createNewObjects·p0.999:  216006.656 us/op
                 createNewObjects·p0.9999: 216006.656 us/op
                 createNewObjects·p1.00:   216006.656 us/op

Iteration  11: 200036.844 ±(99.9%) 2517.289 us/op
                 createNewObjects·p0.00:   194772.992 us/op
                 createNewObjects·p0.50:   198180.864 us/op
                 createNewObjects·p0.90:   206752.973 us/op
                 createNewObjects·p0.95:   213359.002 us/op
                 createNewObjects·p0.99:   217841.664 us/op
                 createNewObjects·p0.999:  217841.664 us/op
                 createNewObjects·p0.9999: 217841.664 us/op
                 createNewObjects·p1.00:   217841.664 us/op

Iteration  12: 202810.327 ±(99.9%) 2678.780 us/op
                 createNewObjects·p0.00:   195035.136 us/op
                 createNewObjects·p0.50:   202637.312 us/op
                 createNewObjects·p0.90:   209400.627 us/op
                 createNewObjects·p0.95:   216386.765 us/op
                 createNewObjects·p0.99:   219414.528 us/op
                 createNewObjects·p0.999:  219414.528 us/op
                 createNewObjects·p0.9999: 219414.528 us/op
                 createNewObjects·p1.00:   219414.528 us/op

Iteration  13: 202018.652 ±(99.9%) 2270.333 us/op
                 createNewObjects·p0.00:   195821.568 us/op
                 createNewObjects·p0.50:   201064.448 us/op
                 createNewObjects·p0.90:   208299.622 us/op
                 createNewObjects·p0.95:   210540.954 us/op
                 createNewObjects·p0.99:   217841.664 us/op
                 createNewObjects·p0.999:  217841.664 us/op
                 createNewObjects·p0.9999: 217841.664 us/op
                 createNewObjects·p1.00:   217841.664 us/op

Iteration  14: 199931.986 ±(99.9%) 2308.714 us/op
                 createNewObjects·p0.00:   194772.992 us/op
                 createNewObjects·p0.50:   198180.864 us/op
                 createNewObjects·p0.90:   208456.909 us/op
                 createNewObjects·p0.95:   211379.814 us/op
                 createNewObjects·p0.99:   213123.072 us/op
                 createNewObjects·p0.999:  213123.072 us/op
                 createNewObjects·p0.9999: 213123.072 us/op
                 createNewObjects·p1.00:   213123.072 us/op

Iteration  15: 200760.361 ±(99.9%) 2071.591 us/op
                 createNewObjects·p0.00:   195559.424 us/op
                 createNewObjects·p0.50:   198967.296 us/op
                 createNewObjects·p0.90:   206779.187 us/op
                 createNewObjects·p0.95:   209571.021 us/op
                 createNewObjects·p0.99:   213123.072 us/op
                 createNewObjects·p0.999:  213123.072 us/op
                 createNewObjects·p0.9999: 213123.072 us/op
                 createNewObjects·p1.00:   213123.072 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 751
  mean = 201275.629 ±(99.9%) 605.967 us/op

  Histogram, us/op:
    [190000.000, 192500.000) = 0 
    [192500.000, 195000.000) = 9 
    [195000.000, 197500.000) = 157 
    [197500.000, 200000.000) = 234 
    [200000.000, 202500.000) = 111 
    [202500.000, 205000.000) = 95 
    [205000.000, 207500.000) = 67 
    [207500.000, 210000.000) = 31 
    [210000.000, 212500.000) = 15 
    [212500.000, 215000.000) = 12 
    [215000.000, 217500.000) = 9 
    [217500.000, 220000.000) = 8 
    [220000.000, 222500.000) = 1 
    [222500.000, 225000.000) = 2 
    [225000.000, 227500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 194248.704 us/op
     p(50.0000) = 199491.584 us/op
     p(90.0000) = 207618.048 us/op
     p(95.0000) = 211655.066 us/op
     p(99.0000) = 218219.151 us/op
     p(99.9000) = 224919.552 us/op
     p(99.9900) = 224919.552 us/op
     p(99.9990) = 224919.552 us/op
     p(99.9999) = 224919.552 us/op
    p(100.0000) = 224919.552 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 71.01% complete, ETA 02:26:08
# Fork: 1 of 1
# Warmup Iteration   1: 2228014.285 ±(99.9%) 764939.810 us/op
# Warmup Iteration   2: 1798657.365 ±(99.9%) 202889.221 us/op
# Warmup Iteration   3: 1823473.664 ±(99.9%) 211864.140 us/op
# Warmup Iteration   4: 1807045.973 ±(99.9%) 126603.610 us/op
# Warmup Iteration   5: 1783278.251 ±(99.9%) 106289.227 us/op
Iteration   1: 1819978.411 ±(99.9%) 309788.808 us/op
                 fillHeap·p0.00:   1736441.856 us/op
                 fillHeap·p0.50:   1786773.504 us/op
                 fillHeap·p0.90:   2040528.896 us/op
                 fillHeap·p0.95:   2040528.896 us/op
                 fillHeap·p0.99:   2040528.896 us/op
                 fillHeap·p0.999:  2040528.896 us/op
                 fillHeap·p0.9999: 2040528.896 us/op
                 fillHeap·p1.00:   2040528.896 us/op

Iteration   2: 1859824.299 ±(99.9%) 265234.556 us/op
                 fillHeap·p0.00:   1755316.224 us/op
                 fillHeap·p0.50:   1825570.816 us/op
                 fillHeap·p0.90:   2000683.008 us/op
                 fillHeap·p0.95:   2000683.008 us/op
                 fillHeap·p0.99:   2000683.008 us/op
                 fillHeap·p0.999:  2000683.008 us/op
                 fillHeap·p0.9999: 2000683.008 us/op
                 fillHeap·p1.00:   2000683.008 us/op

Iteration   3: 1792715.435 ±(99.9%) 104500.888 us/op
                 fillHeap·p0.00:   1746927.616 us/op
                 fillHeap·p0.50:   1792016.384 us/op
                 fillHeap·p0.90:   1841299.456 us/op
                 fillHeap·p0.95:   1841299.456 us/op
                 fillHeap·p0.99:   1841299.456 us/op
                 fillHeap·p0.999:  1841299.456 us/op
                 fillHeap·p0.9999: 1841299.456 us/op
                 fillHeap·p1.00:   1841299.456 us/op

Iteration   4: 1785724.928 ±(99.9%) 138804.459 us/op
                 fillHeap·p0.00:   1719664.640 us/op
                 fillHeap·p0.50:   1781530.624 us/op
                 fillHeap·p0.90:   1870659.584 us/op
                 fillHeap·p0.95:   1870659.584 us/op
                 fillHeap·p0.99:   1870659.584 us/op
                 fillHeap·p0.999:  1870659.584 us/op
                 fillHeap·p0.9999: 1870659.584 us/op
                 fillHeap·p1.00:   1870659.584 us/op

Iteration   5: 1778734.421 ±(99.9%) 105881.727 us/op
                 fillHeap·p0.00:   1709178.880 us/op
                 fillHeap·p0.50:   1785724.928 us/op
                 fillHeap·p0.90:   1814036.480 us/op
                 fillHeap·p0.95:   1814036.480 us/op
                 fillHeap·p0.99:   1814036.480 us/op
                 fillHeap·p0.999:  1814036.480 us/op
                 fillHeap·p0.9999: 1814036.480 us/op
                 fillHeap·p1.00:   1814036.480 us/op

Iteration   6: 1765102.933 ±(99.9%) 126603.610 us/op
                 fillHeap·p0.00:   1698693.120 us/op
                 fillHeap·p0.50:   1762656.256 us/op
                 fillHeap·p0.90:   1835008.000 us/op
                 fillHeap·p0.95:   1835008.000 us/op
                 fillHeap·p0.99:   1835008.000 us/op
                 fillHeap·p0.999:  1835008.000 us/op
                 fillHeap·p0.9999: 1835008.000 us/op
                 fillHeap·p1.00:   1835008.000 us/op

Iteration   7: 1779433.472 ±(99.9%) 135832.611 us/op
                 fillHeap·p0.00:   1721761.792 us/op
                 fillHeap·p0.50:   1775239.168 us/op
                 fillHeap·p0.90:   1839202.304 us/op
                 fillHeap·p0.95:   1839202.304 us/op
                 fillHeap·p0.99:   1839202.304 us/op
                 fillHeap·p0.999:  1839202.304 us/op
                 fillHeap·p0.9999: 1839202.304 us/op
                 fillHeap·p1.00:   1839202.304 us/op

Iteration   8: 1798657.365 ±(99.9%) 106614.106 us/op
                 fillHeap·p0.00:   1744830.464 us/op
                 fillHeap·p0.50:   1790967.808 us/op
                 fillHeap·p0.90:   1847590.912 us/op
                 fillHeap·p0.95:   1847590.912 us/op
                 fillHeap·p0.99:   1847590.912 us/op
                 fillHeap·p0.999:  1847590.912 us/op
                 fillHeap·p0.9999: 1847590.912 us/op
                 fillHeap·p1.00:   1847590.912 us/op

Iteration   9: 1788521.131 ±(99.9%) 105489.046 us/op
                 fillHeap·p0.00:   1721761.792 us/op
                 fillHeap·p0.50:   1793064.960 us/op
                 fillHeap·p0.90:   1830813.696 us/op
                 fillHeap·p0.95:   1830813.696 us/op
                 fillHeap·p0.99:   1830813.696 us/op
                 fillHeap·p0.999:  1830813.696 us/op
                 fillHeap·p0.9999: 1830813.696 us/op
                 fillHeap·p1.00:   1830813.696 us/op

Iteration  10: 1839901.355 ±(99.9%) 235369.411 us/op
                 fillHeap·p0.00:   1763704.832 us/op
                 fillHeap·p0.50:   1808793.600 us/op
                 fillHeap·p0.90:   1990197.248 us/op
                 fillHeap·p0.95:   1990197.248 us/op
                 fillHeap·p0.99:   1990197.248 us/op
                 fillHeap·p0.999:  1990197.248 us/op
                 fillHeap·p0.9999: 1990197.248 us/op
                 fillHeap·p1.00:   1990197.248 us/op

Iteration  11: 1792365.909 ±(99.9%) 90240.513 us/op
                 fillHeap·p0.00:   1734344.704 us/op
                 fillHeap·p0.50:   1796210.688 us/op
                 fillHeap·p0.90:   1824522.240 us/op
                 fillHeap·p0.95:   1824522.240 us/op
                 fillHeap·p0.99:   1824522.240 us/op
                 fillHeap·p0.999:  1824522.240 us/op
                 fillHeap·p0.9999: 1824522.240 us/op
                 fillHeap·p1.00:   1824522.240 us/op

Iteration  12: 1799356.416 ±(99.9%) 125909.687 us/op
                 fillHeap·p0.00:   1746927.616 us/op
                 fillHeap·p0.50:   1799356.416 us/op
                 fillHeap·p0.90:   1870659.584 us/op
                 fillHeap·p0.95:   1870659.584 us/op
                 fillHeap·p0.99:   1870659.584 us/op
                 fillHeap·p0.999:  1870659.584 us/op
                 fillHeap·p0.9999: 1870659.584 us/op
                 fillHeap·p1.00:   1870659.584 us/op

Iteration  13: 1772442.965 ±(99.9%) 89991.062 us/op
                 fillHeap·p0.00:   1713373.184 us/op
                 fillHeap·p0.50:   1775239.168 us/op
                 fillHeap·p0.90:   1803550.720 us/op
                 fillHeap·p0.95:   1803550.720 us/op
                 fillHeap·p0.99:   1803550.720 us/op
                 fillHeap·p0.999:  1803550.720 us/op
                 fillHeap·p0.9999: 1803550.720 us/op
                 fillHeap·p1.00:   1803550.720 us/op

Iteration  14: 1765801.984 ±(99.9%) 106700.573 us/op
                 fillHeap·p0.00:   1700790.272 us/op
                 fillHeap·p0.50:   1768947.712 us/op
                 fillHeap·p0.90:   1820327.936 us/op
                 fillHeap·p0.95:   1820327.936 us/op
                 fillHeap·p0.99:   1820327.936 us/op
                 fillHeap·p0.999:  1820327.936 us/op
                 fillHeap·p0.9999: 1820327.936 us/op
                 fillHeap·p1.00:   1820327.936 us/op

Iteration  15: 1796560.213 ±(99.9%) 179828.336 us/op
                 fillHeap·p0.00:   1671430.144 us/op
                 fillHeap·p0.50:   1811939.328 us/op
                 fillHeap·p0.90:   1847590.912 us/op
                 fillHeap·p0.95:   1847590.912 us/op
                 fillHeap·p0.99:   1847590.912 us/op
                 fillHeap·p0.999:  1847590.912 us/op
                 fillHeap·p0.9999: 1847590.912 us/op
                 fillHeap·p1.00:   1847590.912 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 90
  mean = 1795674.749 ±(99.9%) 21184.409 us/op

  Histogram, us/op:
    [1600000.000, 1650000.000) = 0 
    [1650000.000, 1700000.000) = 2 
    [1700000.000, 1750000.000) = 14 
    [1750000.000, 1800000.000) = 39 
    [1800000.000, 1850000.000) = 28 
    [1850000.000, 1900000.000) = 3 
    [1900000.000, 1950000.000) = 0 
    [1950000.000, 2000000.000) = 2 
    [2000000.000, 2050000.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 1671430.144 us/op
     p(50.0000) = 1790967.808 us/op
     p(90.0000) = 1846961.766 us/op
     p(95.0000) = 1912288.051 us/op
     p(99.0000) = 2040528.896 us/op
     p(99.9000) = 2040528.896 us/op
     p(99.9900) = 2040528.896 us/op
     p(99.9990) = 2040528.896 us/op
     p(99.9999) = 2040528.896 us/op
    p(100.0000) = 2040528.896 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 71.74% complete, ETA 02:22:34
# Fork: 1 of 1
# Warmup Iteration   1: 1042389.402 ±(99.9%) 231861.373 us/op
# Warmup Iteration   2: 1051302.298 ±(99.9%) 108947.338 us/op
# Warmup Iteration   3: 1045010.842 ±(99.9%) 191816.168 us/op
# Warmup Iteration   4: 1043647.693 ±(99.9%) 196299.738 us/op
# Warmup Iteration   5: 1033476.506 ±(99.9%) 161247.586 us/op
Iteration   1: 1028862.771 ±(99.9%) 192931.830 us/op
                 fillHeap·p0.00:   819986.432 us/op
                 fillHeap·p0.50:   1063780.352 us/op
                 fillHeap·p0.90:   1180277.146 us/op
                 fillHeap·p0.95:   1180696.576 us/op
                 fillHeap·p0.99:   1180696.576 us/op
                 fillHeap·p0.999:  1180696.576 us/op
                 fillHeap·p0.9999: 1180696.576 us/op
                 fillHeap·p1.00:   1180696.576 us/op

Iteration   2: 1025402.470 ±(99.9%) 182007.119 us/op
                 fillHeap·p0.00:   831520.768 us/op
                 fillHeap·p0.50:   1054343.168 us/op
                 fillHeap·p0.90:   1171259.392 us/op
                 fillHeap·p0.95:   1174405.120 us/op
                 fillHeap·p0.99:   1174405.120 us/op
                 fillHeap·p0.999:  1174405.120 us/op
                 fillHeap·p0.9999: 1174405.120 us/op
                 fillHeap·p1.00:   1174405.120 us/op

Iteration   3: 1030855.066 ±(99.9%) 179023.127 us/op
                 fillHeap·p0.00:   845152.256 us/op
                 fillHeap·p0.50:   1066926.080 us/op
                 fillHeap·p0.90:   1187197.747 us/op
                 fillHeap·p0.95:   1191182.336 us/op
                 fillHeap·p0.99:   1191182.336 us/op
                 fillHeap·p0.999:  1191182.336 us/op
                 fillHeap·p0.9999: 1191182.336 us/op
                 fillHeap·p1.00:   1191182.336 us/op

Iteration   4: 1038195.098 ±(99.9%) 193026.826 us/op
                 fillHeap·p0.00:   829423.616 us/op
                 fillHeap·p0.50:   1075838.976 us/op
                 fillHeap·p0.90:   1174195.405 us/op
                 fillHeap·p0.95:   1174405.120 us/op
                 fillHeap·p0.99:   1174405.120 us/op
                 fillHeap·p0.999:  1174405.120 us/op
                 fillHeap·p0.9999: 1174405.120 us/op
                 fillHeap·p1.00:   1174405.120 us/op

Iteration   5: 1029701.632 ±(99.9%) 183546.423 us/op
                 fillHeap·p0.00:   830472.192 us/op
                 fillHeap·p0.50:   1069547.520 us/op
                 fillHeap·p0.90:   1181325.722 us/op
                 fillHeap·p0.95:   1184890.880 us/op
                 fillHeap·p0.99:   1184890.880 us/op
                 fillHeap·p0.999:  1184890.880 us/op
                 fillHeap·p0.9999: 1184890.880 us/op
                 fillHeap·p1.00:   1184890.880 us/op

Iteration   6: 1026031.616 ±(99.9%) 192712.359 us/op
                 fillHeap·p0.00:   828375.040 us/op
                 fillHeap·p0.50:   1081081.856 us/op
                 fillHeap·p0.90:   1163290.214 us/op
                 fillHeap·p0.95:   1163919.360 us/op
                 fillHeap·p0.99:   1163919.360 us/op
                 fillHeap·p0.999:  1163919.360 us/op
                 fillHeap·p0.9999: 1163919.360 us/op
                 fillHeap·p1.00:   1163919.360 us/op

Iteration   7: 1037356.237 ±(99.9%) 195490.076 us/op
                 fillHeap·p0.00:   830472.192 us/op
                 fillHeap·p0.50:   1073217.536 us/op
                 fillHeap·p0.90:   1192230.912 us/op
                 fillHeap·p0.95:   1193279.488 us/op
                 fillHeap·p0.99:   1193279.488 us/op
                 fillHeap·p0.999:  1193279.488 us/op
                 fillHeap·p0.9999: 1193279.488 us/op
                 fillHeap·p1.00:   1193279.488 us/op

Iteration   8: 1022885.888 ±(99.9%) 188018.382 us/op
                 fillHeap·p0.00:   824180.736 us/op
                 fillHeap·p0.50:   1058537.472 us/op
                 fillHeap·p0.90:   1181325.722 us/op
                 fillHeap·p0.95:   1184890.880 us/op
                 fillHeap·p0.99:   1184890.880 us/op
                 fillHeap·p0.999:  1184890.880 us/op
                 fillHeap·p0.9999: 1184890.880 us/op
                 fillHeap·p1.00:   1184890.880 us/op

Iteration   9: 1022571.315 ±(99.9%) 183523.297 us/op
                 fillHeap·p0.00:   829423.616 us/op
                 fillHeap·p0.50:   1062207.488 us/op
                 fillHeap·p0.90:   1152594.739 us/op
                 fillHeap·p0.95:   1153433.600 us/op
                 fillHeap·p0.99:   1153433.600 us/op
                 fillHeap·p0.999:  1153433.600 us/op
                 fillHeap·p0.9999: 1153433.600 us/op
                 fillHeap·p1.00:   1153433.600 us/op

Iteration  10: 1028338.483 ±(99.9%) 190451.402 us/op
                 fillHeap·p0.00:   827326.464 us/op
                 fillHeap·p0.50:   1063256.064 us/op
                 fillHeap·p0.90:   1169791.386 us/op
                 fillHeap·p0.95:   1170210.816 us/op
                 fillHeap·p0.99:   1170210.816 us/op
                 fillHeap·p0.999:  1170210.816 us/op
                 fillHeap·p0.9999: 1170210.816 us/op
                 fillHeap·p1.00:   1170210.816 us/op

Iteration  11: 1022885.888 ±(99.9%) 180418.084 us/op
                 fillHeap·p0.00:   831520.768 us/op
                 fillHeap·p0.50:   1064304.640 us/op
                 fillHeap·p0.90:   1148190.720 us/op
                 fillHeap·p0.95:   1149239.296 us/op
                 fillHeap·p0.99:   1149239.296 us/op
                 fillHeap·p0.999:  1149239.296 us/op
                 fillHeap·p0.9999: 1149239.296 us/op
                 fillHeap·p1.00:   1149239.296 us/op

Iteration  12: 1028023.910 ±(99.9%) 191424.164 us/op
                 fillHeap·p0.00:   828375.040 us/op
                 fillHeap·p0.50:   1069023.232 us/op
                 fillHeap·p0.90:   1177341.133 us/op
                 fillHeap·p0.95:   1178599.424 us/op
                 fillHeap·p0.99:   1178599.424 us/op
                 fillHeap·p0.999:  1178599.424 us/op
                 fillHeap·p0.9999: 1178599.424 us/op
                 fillHeap·p1.00:   1178599.424 us/op

Iteration  13: 1029701.632 ±(99.9%) 181402.471 us/op
                 fillHeap·p0.00:   839909.376 us/op
                 fillHeap·p0.50:   1064828.928 us/op
                 fillHeap·p0.90:   1170420.531 us/op
                 fillHeap·p0.95:   1172307.968 us/op
                 fillHeap·p0.99:   1172307.968 us/op
                 fillHeap·p0.999:  1172307.968 us/op
                 fillHeap·p0.9999: 1172307.968 us/op
                 fillHeap·p1.00:   1172307.968 us/op

Iteration  14: 1025821.901 ±(99.9%) 194313.809 us/op
                 fillHeap·p0.00:   821035.008 us/op
                 fillHeap·p0.50:   1072168.960 us/op
                 fillHeap·p0.90:   1189504.614 us/op
                 fillHeap·p0.95:   1193279.488 us/op
                 fillHeap·p0.99:   1193279.488 us/op
                 fillHeap·p0.999:  1193279.488 us/op
                 fillHeap·p0.9999: 1193279.488 us/op
                 fillHeap·p1.00:   1193279.488 us/op

Iteration  15: 1020579.021 ±(99.9%) 188292.643 us/op
                 fillHeap·p0.00:   822083.584 us/op
                 fillHeap·p0.50:   1064828.928 us/op
                 fillHeap·p0.90:   1156789.043 us/op
                 fillHeap·p0.95:   1157627.904 us/op
                 fillHeap·p0.99:   1157627.904 us/op
                 fillHeap·p0.999:  1157627.904 us/op
                 fillHeap·p0.9999: 1157627.904 us/op
                 fillHeap·p1.00:   1157627.904 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 150
  mean = 1027814.195 ±(99.9%) 32445.656 us/op

  Histogram, us/op:
    [ 800000.000,  825000.000) = 5 
    [ 825000.000,  850000.000) = 22 
    [ 850000.000,  875000.000) = 3 
    [ 875000.000,  900000.000) = 2 
    [ 900000.000,  925000.000) = 12 
    [ 925000.000,  950000.000) = 1 
    [ 950000.000,  975000.000) = 0 
    [ 975000.000, 1000000.000) = 0 
    [1000000.000, 1025000.000) = 0 
    [1025000.000, 1050000.000) = 19 
    [1050000.000, 1075000.000) = 12 
    [1075000.000, 1100000.000) = 36 
    [1100000.000, 1125000.000) = 8 
    [1125000.000, 1150000.000) = 7 
    [1150000.000, 1175000.000) = 14 

  Percentiles, us/op:
      p(0.0000) = 819986.432 us/op
     p(50.0000) = 1073741.824 us/op
     p(90.0000) = 1166016.512 us/op
     p(95.0000) = 1179543.142 us/op
     p(99.0000) = 1193279.488 us/op
     p(99.9000) = 1193279.488 us/op
     p(99.9900) = 1193279.488 us/op
     p(99.9990) = 1193279.488 us/op
     p(99.9999) = 1193279.488 us/op
    p(100.0000) = 1193279.488 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 72.46% complete, ETA 02:18:56
# Fork: 1 of 1
# Warmup Iteration   1: 1035783.373 ±(99.9%) 83478.276 us/op
# Warmup Iteration   2: 1002819.956 ±(99.9%) 143251.583 us/op
# Warmup Iteration   3: 1000341.504 ±(99.9%) 172937.981 us/op
# Warmup Iteration   4: 864376.149 ±(99.9%) 117682.580 us/op
# Warmup Iteration   5: 1019320.730 ±(99.9%) 168667.569 us/op
Iteration   1: 1012714.701 ±(99.9%) 174715.137 us/op
                 fillHeap·p0.00:   793772.032 us/op
                 fillHeap·p0.50:   1056964.608 us/op
                 fillHeap·p0.90:   1149449.011 us/op
                 fillHeap·p0.95:   1153433.600 us/op
                 fillHeap·p0.99:   1153433.600 us/op
                 fillHeap·p0.999:  1153433.600 us/op
                 fillHeap·p0.9999: 1153433.600 us/op
                 fillHeap·p1.00:   1153433.600 us/op

Iteration   2: 1009568.973 ±(99.9%) 178526.968 us/op
                 fillHeap·p0.00:   767557.632 us/op
                 fillHeap·p0.50:   1032847.360 us/op
                 fillHeap·p0.90:   1143157.555 us/op
                 fillHeap·p0.95:   1145044.992 us/op
                 fillHeap·p0.99:   1145044.992 us/op
                 fillHeap·p0.999:  1145044.992 us/op
                 fillHeap·p0.9999: 1145044.992 us/op
                 fillHeap·p1.00:   1145044.992 us/op

Iteration   3: 1005479.526 ±(99.9%) 168281.379 us/op
                 fillHeap·p0.00:   784334.848 us/op
                 fillHeap·p0.50:   1043333.120 us/op
                 fillHeap·p0.90:   1131413.504 us/op
                 fillHeap·p0.95:   1134559.232 us/op
                 fillHeap·p0.99:   1134559.232 us/op
                 fillHeap·p0.999:  1134559.232 us/op
                 fillHeap·p0.9999: 1134559.232 us/op
                 fillHeap·p1.00:   1134559.232 us/op

Iteration   4: 1007366.963 ±(99.9%) 160535.737 us/op
                 fillHeap·p0.00:   804257.792 us/op
                 fillHeap·p0.50:   1031798.784 us/op
                 fillHeap·p0.90:   1117362.586 us/op
                 fillHeap·p0.95:   1117782.016 us/op
                 fillHeap·p0.99:   1117782.016 us/op
                 fillHeap·p0.999:  1117782.016 us/op
                 fillHeap·p0.9999: 1117782.016 us/op
                 fillHeap·p1.00:   1117782.016 us/op

Iteration   5: 1019740.160 ±(99.9%) 187573.788 us/op
                 fillHeap·p0.00:   793772.032 us/op
                 fillHeap·p0.50:   1039138.816 us/op
                 fillHeap·p0.90:   1209217.843 us/op
                 fillHeap·p0.95:   1216348.160 us/op
                 fillHeap·p0.99:   1216348.160 us/op
                 fillHeap·p0.999:  1216348.160 us/op
                 fillHeap·p0.9999: 1216348.160 us/op
                 fillHeap·p1.00:   1216348.160 us/op

Iteration   6: 1010407.834 ±(99.9%) 163710.379 us/op
                 fillHeap·p0.00:   787480.576 us/op
                 fillHeap·p0.50:   1038090.240 us/op
                 fillHeap·p0.90:   1136446.669 us/op
                 fillHeap·p0.95:   1140850.688 us/op
                 fillHeap·p0.99:   1140850.688 us/op
                 fillHeap·p0.999:  1140850.688 us/op
                 fillHeap·p0.9999: 1140850.688 us/op
                 fillHeap·p1.00:   1140850.688 us/op

Iteration   7: 1007366.963 ±(99.9%) 177674.433 us/op
                 fillHeap·p0.00:   792723.456 us/op
                 fillHeap·p0.50:   1031274.496 us/op
                 fillHeap·p0.90:   1139802.112 us/op
                 fillHeap·p0.95:   1140850.688 us/op
                 fillHeap·p0.99:   1140850.688 us/op
                 fillHeap·p0.999:  1140850.688 us/op
                 fillHeap·p0.9999: 1140850.688 us/op
                 fillHeap·p1.00:   1140850.688 us/op

Iteration   8: 1009254.400 ±(99.9%) 187442.737 us/op
                 fillHeap·p0.00:   776994.816 us/op
                 fillHeap·p0.50:   1051197.440 us/op
                 fillHeap·p0.90:   1148190.720 us/op
                 fillHeap·p0.95:   1149239.296 us/op
                 fillHeap·p0.99:   1149239.296 us/op
                 fillHeap·p0.999:  1149239.296 us/op
                 fillHeap·p0.9999: 1149239.296 us/op
                 fillHeap·p1.00:   1149239.296 us/op

Iteration   9: 1009464.115 ±(99.9%) 185521.255 us/op
                 fillHeap·p0.00:   791674.880 us/op
                 fillHeap·p0.50:   1032323.072 us/op
                 fillHeap·p0.90:   1187826.893 us/op
                 fillHeap·p0.95:   1195376.640 us/op
                 fillHeap·p0.99:   1195376.640 us/op
                 fillHeap·p0.999:  1195376.640 us/op
                 fillHeap·p0.9999: 1195376.640 us/op
                 fillHeap·p1.00:   1195376.640 us/op

Iteration  10: 1004116.378 ±(99.9%) 181856.318 us/op
                 fillHeap·p0.00:   770703.360 us/op
                 fillHeap·p0.50:   1043333.120 us/op
                 fillHeap·p0.90:   1154482.176 us/op
                 fillHeap·p0.95:   1161822.208 us/op
                 fillHeap·p0.99:   1161822.208 us/op
                 fillHeap·p0.999:  1161822.208 us/op
                 fillHeap·p0.9999: 1161822.208 us/op
                 fillHeap·p1.00:   1161822.208 us/op

Iteration  11: 1011246.694 ±(99.9%) 171857.080 us/op
                 fillHeap·p0.00:   805306.368 us/op
                 fillHeap·p0.50:   1023934.464 us/op
                 fillHeap·p0.90:   1150287.872 us/op
                 fillHeap·p0.95:   1153433.600 us/op
                 fillHeap·p0.99:   1153433.600 us/op
                 fillHeap·p0.999:  1153433.600 us/op
                 fillHeap·p0.9999: 1153433.600 us/op
                 fillHeap·p1.00:   1153433.600 us/op

Iteration  12: 1009464.115 ±(99.9%) 170329.191 us/op
                 fillHeap·p0.00:   797966.336 us/op
                 fillHeap·p0.50:   1043857.408 us/op
                 fillHeap·p0.90:   1132881.510 us/op
                 fillHeap·p0.95:   1134559.232 us/op
                 fillHeap·p0.99:   1134559.232 us/op
                 fillHeap·p0.999:  1134559.232 us/op
                 fillHeap·p0.9999: 1134559.232 us/op
                 fillHeap·p1.00:   1134559.232 us/op

Iteration  13: 1007262.106 ±(99.9%) 164718.754 us/op
                 fillHeap·p0.00:   801112.064 us/op
                 fillHeap·p0.50:   1033371.648 us/op
                 fillHeap·p0.90:   1145044.992 us/op
                 fillHeap·p0.95:   1149239.296 us/op
                 fillHeap·p0.99:   1149239.296 us/op
                 fillHeap·p0.999:  1149239.296 us/op
                 fillHeap·p0.9999: 1149239.296 us/op
                 fillHeap·p1.00:   1149239.296 us/op

Iteration  14: 1004955.238 ±(99.9%) 179138.126 us/op
                 fillHeap·p0.00:   774897.664 us/op
                 fillHeap·p0.50:   1033895.936 us/op
                 fillHeap·p0.90:   1158257.050 us/op
                 fillHeap·p0.95:   1161822.208 us/op
                 fillHeap·p0.99:   1161822.208 us/op
                 fillHeap·p0.999:  1161822.208 us/op
                 fillHeap·p0.9999: 1161822.208 us/op
                 fillHeap·p1.00:   1161822.208 us/op

Iteration  15: 1006423.245 ±(99.9%) 166184.732 us/op
                 fillHeap·p0.00:   782237.696 us/op
                 fillHeap·p0.50:   1036517.376 us/op
                 fillHeap·p0.90:   1137495.245 us/op
                 fillHeap·p0.95:   1138753.536 us/op
                 fillHeap·p0.99:   1138753.536 us/op
                 fillHeap·p0.999:  1138753.536 us/op
                 fillHeap·p0.9999: 1138753.536 us/op
                 fillHeap·p1.00:   1138753.536 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 150
  mean = 1008988.761 ±(99.9%) 30173.761 us/op

  Histogram, us/op:
    [ 700000.000,  750000.000) = 0 
    [ 750000.000,  800000.000) = 12 
    [ 800000.000,  850000.000) = 3 
    [ 850000.000,  900000.000) = 17 
    [ 900000.000,  950000.000) = 13 
    [ 950000.000, 1000000.000) = 5 
    [1000000.000, 1050000.000) = 36 
    [1050000.000, 1100000.000) = 34 
    [1100000.000, 1150000.000) = 24 
    [1150000.000, 1200000.000) = 5 
    [1200000.000, 1250000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 767557.632 us/op
     p(50.0000) = 1041235.968 us/op
     p(90.0000) = 1134559.232 us/op
     p(95.0000) = 1149239.296 us/op
     p(99.0000) = 1205652.685 us/op
     p(99.9000) = 1216348.160 us/op
     p(99.9900) = 1216348.160 us/op
     p(99.9990) = 1216348.160 us/op
     p(99.9999) = 1216348.160 us/op
    p(100.0000) = 1216348.160 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 73.19% complete, ETA 02:15:16
# Fork: 1 of 1
# Warmup Iteration   1: 1073007.821 ±(99.9%) 173728.219 us/op
# Warmup Iteration   2: 1064828.928 ±(99.9%) 214924.909 us/op
# Warmup Iteration   3: 1054552.883 ±(99.9%) 177594.261 us/op
# Warmup Iteration   4: 1063046.349 ±(99.9%) 181551.419 us/op
# Warmup Iteration   5: 1067345.510 ±(99.9%) 142591.496 us/op
Iteration   1: 1067030.938 ±(99.9%) 153587.956 us/op
                 fillHeap·p0.00:   913309.696 us/op
                 fillHeap·p0.50:   1090519.040 us/op
                 fillHeap·p0.90:   1197683.507 us/op
                 fillHeap·p0.95:   1201668.096 us/op
                 fillHeap·p0.99:   1201668.096 us/op
                 fillHeap·p0.999:  1201668.096 us/op
                 fillHeap·p0.9999: 1201668.096 us/op
                 fillHeap·p1.00:   1201668.096 us/op

Iteration   2: 1058013.184 ±(99.9%) 174489.956 us/op
                 fillHeap·p0.00:   853540.864 us/op
                 fillHeap·p0.50:   1086324.736 us/op
                 fillHeap·p0.90:   1205023.539 us/op
                 fillHeap·p0.95:   1207959.552 us/op
                 fillHeap·p0.99:   1207959.552 us/op
                 fillHeap·p0.999:  1207959.552 us/op
                 fillHeap·p0.9999: 1207959.552 us/op
                 fillHeap·p1.00:   1207959.552 us/op

Iteration   3: 1052875.162 ±(99.9%) 177070.524 us/op
                 fillHeap·p0.00:   854589.440 us/op
                 fillHeap·p0.50:   1086324.736 us/op
                 fillHeap·p0.90:   1190972.621 us/op
                 fillHeap·p0.95:   1193279.488 us/op
                 fillHeap·p0.99:   1193279.488 us/op
                 fillHeap·p0.999:  1193279.488 us/op
                 fillHeap·p0.9999: 1193279.488 us/op
                 fillHeap·p1.00:   1193279.488 us/op

Iteration   4: 1053818.880 ±(99.9%) 173374.162 us/op
                 fillHeap·p0.00:   851443.712 us/op
                 fillHeap·p0.50:   1084751.872 us/op
                 fillHeap·p0.90:   1210895.565 us/op
                 fillHeap·p0.95:   1216348.160 us/op
                 fillHeap·p0.99:   1216348.160 us/op
                 fillHeap·p0.999:  1216348.160 us/op
                 fillHeap·p0.9999: 1216348.160 us/op
                 fillHeap·p1.00:   1216348.160 us/op

Iteration   5: 1060005.478 ±(99.9%) 190848.915 us/op
                 fillHeap·p0.00:   852492.288 us/op
                 fillHeap·p0.50:   1093664.768 us/op
                 fillHeap·p0.90:   1258710.630 us/op
                 fillHeap·p0.95:   1268776.960 us/op
                 fillHeap·p0.99:   1268776.960 us/op
                 fillHeap·p0.999:  1268776.960 us/op
                 fillHeap·p0.9999: 1268776.960 us/op
                 fillHeap·p1.00:   1268776.960 us/op

Iteration   6: 1039243.674 ±(99.9%) 163160.647 us/op
                 fillHeap·p0.00:   842006.528 us/op
                 fillHeap·p0.50:   1074266.112 us/op
                 fillHeap·p0.90:   1175663.411 us/op
                 fillHeap·p0.95:   1180696.576 us/op
                 fillHeap·p0.99:   1180696.576 us/op
                 fillHeap·p0.999:  1180696.576 us/op
                 fillHeap·p0.9999: 1180696.576 us/op
                 fillHeap·p1.00:   1180696.576 us/op

Iteration   7: 1058852.045 ±(99.9%) 166835.416 us/op
                 fillHeap·p0.00:   893386.752 us/op
                 fillHeap·p0.50:   1077936.128 us/op
                 fillHeap·p0.90:   1229560.218 us/op
                 fillHeap·p0.95:   1237319.680 us/op
                 fillHeap·p0.99:   1237319.680 us/op
                 fillHeap·p0.999:  1237319.680 us/op
                 fillHeap·p0.9999: 1237319.680 us/op
                 fillHeap·p1.00:   1237319.680 us/op

Iteration   8: 1054133.453 ±(99.9%) 186522.500 us/op
                 fillHeap·p0.00:   843055.104 us/op
                 fillHeap·p0.50:   1071120.384 us/op
                 fillHeap·p0.90:   1225575.629 us/op
                 fillHeap·p0.95:   1231028.224 us/op
                 fillHeap·p0.99:   1231028.224 us/op
                 fillHeap·p0.999:  1231028.224 us/op
                 fillHeap·p0.9999: 1231028.224 us/op
                 fillHeap·p1.00:   1231028.224 us/op

Iteration   9: 1054133.453 ±(99.9%) 170646.942 us/op
                 fillHeap·p0.00:   870318.080 us/op
                 fillHeap·p0.50:   1078984.704 us/op
                 fillHeap·p0.90:   1215509.299 us/op
                 fillHeap·p0.95:   1224736.768 us/op
                 fillHeap·p0.99:   1224736.768 us/op
                 fillHeap·p0.999:  1224736.768 us/op
                 fillHeap·p0.9999: 1224736.768 us/op
                 fillHeap·p1.00:   1224736.768 us/op

Iteration  10: 1063046.349 ±(99.9%) 177593.868 us/op
                 fillHeap·p0.00:   846200.832 us/op
                 fillHeap·p0.50:   1108344.832 us/op
                 fillHeap·p0.90:   1228092.211 us/op
                 fillHeap·p0.95:   1237319.680 us/op
                 fillHeap·p0.99:   1237319.680 us/op
                 fillHeap·p0.999:  1237319.680 us/op
                 fillHeap·p0.9999: 1237319.680 us/op
                 fillHeap·p1.00:   1237319.680 us/op

Iteration  11: 1052246.016 ±(99.9%) 180365.453 us/op
                 fillHeap·p0.00:   856686.592 us/op
                 fillHeap·p0.50:   1077936.128 us/op
                 fillHeap·p0.90:   1216767.590 us/op
                 fillHeap·p0.95:   1222639.616 us/op
                 fillHeap·p0.99:   1222639.616 us/op
                 fillHeap·p0.999:  1222639.616 us/op
                 fillHeap·p0.9999: 1222639.616 us/op
                 fillHeap·p1.00:   1222639.616 us/op

Iteration  12: 1050044.006 ±(99.9%) 186319.010 us/op
                 fillHeap·p0.00:   846200.832 us/op
                 fillHeap·p0.50:   1080033.280 us/op
                 fillHeap·p0.90:   1224736.768 us/op
                 fillHeap·p0.95:   1233125.376 us/op
                 fillHeap·p0.99:   1233125.376 us/op
                 fillHeap·p0.999:  1233125.376 us/op
                 fillHeap·p0.9999: 1233125.376 us/op
                 fillHeap·p1.00:   1233125.376 us/op

Iteration  13: 1052455.731 ±(99.9%) 172888.765 us/op
                 fillHeap·p0.00:   853540.864 us/op
                 fillHeap·p0.50:   1074266.112 us/op
                 fillHeap·p0.90:   1216977.306 us/op
                 fillHeap·p0.95:   1222639.616 us/op
                 fillHeap·p0.99:   1222639.616 us/op
                 fillHeap·p0.999:  1222639.616 us/op
                 fillHeap·p0.9999: 1222639.616 us/op
                 fillHeap·p1.00:   1222639.616 us/op

Iteration  14: 1060424.909 ±(99.9%) 175477.842 us/op
                 fillHeap·p0.00:   868220.928 us/op
                 fillHeap·p0.50:   1093664.768 us/op
                 fillHeap·p0.90:   1209637.274 us/op
                 fillHeap·p0.95:   1216348.160 us/op
                 fillHeap·p0.99:   1216348.160 us/op
                 fillHeap·p0.999:  1216348.160 us/op
                 fillHeap·p0.9999: 1216348.160 us/op
                 fillHeap·p1.00:   1216348.160 us/op

Iteration  15: 1055286.886 ±(99.9%) 178643.302 us/op
                 fillHeap·p0.00:   866123.776 us/op
                 fillHeap·p0.50:   1075838.976 us/op
                 fillHeap·p0.90:   1214880.154 us/op
                 fillHeap·p0.95:   1218445.312 us/op
                 fillHeap·p0.99:   1218445.312 us/op
                 fillHeap·p0.999:  1218445.312 us/op
                 fillHeap·p0.9999: 1218445.312 us/op
                 fillHeap·p1.00:   1218445.312 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 150
  mean = 1055440.678 ±(99.9%) 30322.108 us/op

  Histogram, us/op:
    [ 800000.000,  850000.000) = 4 
    [ 850000.000,  900000.000) = 10 
    [ 900000.000,  950000.000) = 28 
    [ 950000.000, 1000000.000) = 3 
    [1000000.000, 1050000.000) = 8 
    [1050000.000, 1100000.000) = 35 
    [1100000.000, 1150000.000) = 35 
    [1150000.000, 1200000.000) = 14 
    [1200000.000, 1250000.000) = 12 

  Percentiles, us/op:
      p(0.0000) = 842006.528 us/op
     p(50.0000) = 1083179.008 us/op
     p(90.0000) = 1182584.013 us/op
     p(95.0000) = 1222639.616 us/op
     p(99.0000) = 1252733.747 us/op
     p(99.9000) = 1268776.960 us/op
     p(99.9900) = 1268776.960 us/op
     p(99.9990) = 1268776.960 us/op
     p(99.9999) = 1268776.960 us/op
    p(100.0000) = 1268776.960 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 73.91% complete, ETA 02:11:40
# Fork: 1 of 1
# Warmup Iteration   1: 1025087.898 ±(99.9%) 183561.940 us/op
# Warmup Iteration   2: 1023619.891 ±(99.9%) 90840.593 us/op
# Warmup Iteration   3: 1013029.274 ±(99.9%) 117769.202 us/op
# Warmup Iteration   4: 1022466.458 ±(99.9%) 123778.345 us/op
# Warmup Iteration   5: 1039453.389 ±(99.9%) 105535.907 us/op
Iteration   1: 1020788.736 ±(99.9%) 115651.273 us/op
                 fillHeap·p0.00:   884998.144 us/op
                 fillHeap·p0.50:   1033371.648 us/op
                 fillHeap·p0.90:   1129526.067 us/op
                 fillHeap·p0.95:   1134559.232 us/op
                 fillHeap·p0.99:   1134559.232 us/op
                 fillHeap·p0.999:  1134559.232 us/op
                 fillHeap·p0.9999: 1134559.232 us/op
                 fillHeap·p1.00:   1134559.232 us/op

Iteration   2: 1024668.467 ±(99.9%) 113357.809 us/op
                 fillHeap·p0.00:   882900.992 us/op
                 fillHeap·p0.50:   1038614.528 us/op
                 fillHeap·p0.90:   1142318.694 us/op
                 fillHeap·p0.95:   1149239.296 us/op
                 fillHeap·p0.99:   1149239.296 us/op
                 fillHeap·p0.999:  1149239.296 us/op
                 fillHeap·p0.9999: 1149239.296 us/op
                 fillHeap·p1.00:   1149239.296 us/op

Iteration   3: 1028233.626 ±(99.9%) 121183.279 us/op
                 fillHeap·p0.00:   869269.504 us/op
                 fillHeap·p0.50:   1050673.152 us/op
                 fillHeap·p0.90:   1133510.656 us/op
                 fillHeap·p0.95:   1138753.536 us/op
                 fillHeap·p0.99:   1138753.536 us/op
                 fillHeap·p0.999:  1138753.536 us/op
                 fillHeap·p0.9999: 1138753.536 us/op
                 fillHeap·p1.00:   1138753.536 us/op

Iteration   4: 1019949.875 ±(99.9%) 117300.216 us/op
                 fillHeap·p0.00:   887095.296 us/op
                 fillHeap·p0.50:   1026031.616 us/op
                 fillHeap·p0.90:   1143996.416 us/op
                 fillHeap·p0.95:   1149239.296 us/op
                 fillHeap·p0.99:   1149239.296 us/op
                 fillHeap·p0.999:  1149239.296 us/op
                 fillHeap·p0.9999: 1149239.296 us/op
                 fillHeap·p1.00:   1149239.296 us/op

Iteration   5: 1024773.325 ±(99.9%) 107631.840 us/op
                 fillHeap·p0.00:   901775.360 us/op
                 fillHeap·p0.50:   1032847.360 us/op
                 fillHeap·p0.90:   1130784.358 us/op
                 fillHeap·p0.95:   1136656.384 us/op
                 fillHeap·p0.99:   1136656.384 us/op
                 fillHeap·p0.999:  1136656.384 us/op
                 fillHeap·p0.9999: 1136656.384 us/op
                 fillHeap·p1.00:   1136656.384 us/op

Iteration   6: 1022885.888 ±(99.9%) 108351.201 us/op
                 fillHeap·p0.00:   877658.112 us/op
                 fillHeap·p0.50:   1025507.328 us/op
                 fillHeap·p0.90:   1124912.333 us/op
                 fillHeap·p0.95:   1130364.928 us/op
                 fillHeap·p0.99:   1130364.928 us/op
                 fillHeap·p0.999:  1130364.928 us/op
                 fillHeap·p0.9999: 1130364.928 us/op
                 fillHeap·p1.00:   1130364.928 us/op

Iteration   7: 1038509.670 ±(99.9%) 115856.204 us/op
                 fillHeap·p0.00:   899678.208 us/op
                 fillHeap·p0.50:   1036517.376 us/op
                 fillHeap·p0.90:   1158047.334 us/op
                 fillHeap·p0.95:   1163919.360 us/op
                 fillHeap·p0.99:   1163919.360 us/op
                 fillHeap·p0.999:  1163919.360 us/op
                 fillHeap·p0.9999: 1163919.360 us/op
                 fillHeap·p1.00:   1163919.360 us/op

Iteration   8: 1022885.888 ±(99.9%) 111686.291 us/op
                 fillHeap·p0.00:   883949.568 us/op
                 fillHeap·p0.50:   1033371.648 us/op
                 fillHeap·p0.90:   1133091.226 us/op
                 fillHeap·p0.95:   1138753.536 us/op
                 fillHeap·p0.99:   1138753.536 us/op
                 fillHeap·p0.999:  1138753.536 us/op
                 fillHeap·p0.9999: 1138753.536 us/op
                 fillHeap·p1.00:   1138753.536 us/op

Iteration   9: 1020264.448 ±(99.9%) 120521.988 us/op
                 fillHeap·p0.00:   874512.384 us/op
                 fillHeap·p0.50:   1027604.480 us/op
                 fillHeap·p0.90:   1163709.645 us/op
                 fillHeap·p0.95:   1172307.968 us/op
                 fillHeap·p0.99:   1172307.968 us/op
                 fillHeap·p0.999:  1172307.968 us/op
                 fillHeap·p0.9999: 1172307.968 us/op
                 fillHeap·p1.00:   1172307.968 us/op

Iteration  10: 1017643.008 ±(99.9%) 106458.480 us/op
                 fillHeap·p0.00:   889192.448 us/op
                 fillHeap·p0.50:   1029701.632 us/op
                 fillHeap·p0.90:   1117886.874 us/op
                 fillHeap·p0.95:   1124073.472 us/op
                 fillHeap·p0.99:   1124073.472 us/op
                 fillHeap·p0.999:  1124073.472 us/op
                 fillHeap·p0.9999: 1124073.472 us/op
                 fillHeap·p1.00:   1124073.472 us/op

Iteration  11: 1025297.613 ±(99.9%) 127054.322 us/op
                 fillHeap·p0.00:   873463.808 us/op
                 fillHeap·p0.50:   1042808.832 us/op
                 fillHeap·p0.90:   1146932.429 us/op
                 fillHeap·p0.95:   1153433.600 us/op
                 fillHeap·p0.99:   1153433.600 us/op
                 fillHeap·p0.999:  1153433.600 us/op
                 fillHeap·p0.9999: 1153433.600 us/op
                 fillHeap·p1.00:   1153433.600 us/op

Iteration  12: 1030435.635 ±(99.9%) 122220.035 us/op
                 fillHeap·p0.00:   907018.240 us/op
                 fillHeap·p0.50:   1033371.648 us/op
                 fillHeap·p0.90:   1162031.923 us/op
                 fillHeap·p0.95:   1168113.664 us/op
                 fillHeap·p0.99:   1168113.664 us/op
                 fillHeap·p0.999:  1168113.664 us/op
                 fillHeap·p0.9999: 1168113.664 us/op
                 fillHeap·p1.00:   1168113.664 us/op

Iteration  13: 1024249.037 ±(99.9%) 137381.862 us/op
                 fillHeap·p0.00:   851443.712 us/op
                 fillHeap·p0.50:   1047003.136 us/op
                 fillHeap·p0.90:   1151126.733 us/op
                 fillHeap·p0.95:   1157627.904 us/op
                 fillHeap·p0.99:   1157627.904 us/op
                 fillHeap·p0.999:  1157627.904 us/op
                 fillHeap·p0.9999: 1157627.904 us/op
                 fillHeap·p1.00:   1157627.904 us/op

Iteration  14: 1027499.622 ±(99.9%) 108619.411 us/op
                 fillHeap·p0.00:   922746.880 us/op
                 fillHeap·p0.50:   1030225.920 us/op
                 fillHeap·p0.90:   1156579.328 us/op
                 fillHeap·p0.95:   1163919.360 us/op
                 fillHeap·p0.99:   1163919.360 us/op
                 fillHeap·p0.999:  1163919.360 us/op
                 fillHeap·p0.9999: 1163919.360 us/op
                 fillHeap·p1.00:   1163919.360 us/op

Iteration  15: 1033266.790 ±(99.9%) 118199.361 us/op
                 fillHeap·p0.00:   897581.056 us/op
                 fillHeap·p0.50:   1052246.016 us/op
                 fillHeap·p0.90:   1140431.258 us/op
                 fillHeap·p0.95:   1145044.992 us/op
                 fillHeap·p0.99:   1145044.992 us/op
                 fillHeap·p0.999:  1145044.992 us/op
                 fillHeap·p0.9999: 1145044.992 us/op
                 fillHeap·p1.00:   1145044.992 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 150
  mean = 1025423.442 ±(99.9%) 20250.630 us/op

  Histogram, us/op:
    [ 800000.000,  825000.000) = 0 
    [ 825000.000,  850000.000) = 0 
    [ 850000.000,  875000.000) = 4 
    [ 875000.000,  900000.000) = 9 
    [ 900000.000,  925000.000) = 12 
    [ 925000.000,  950000.000) = 5 
    [ 950000.000,  975000.000) = 0 
    [ 975000.000, 1000000.000) = 8 
    [1000000.000, 1025000.000) = 25 
    [1025000.000, 1050000.000) = 30 
    [1050000.000, 1075000.000) = 25 
    [1075000.000, 1100000.000) = 15 
    [1100000.000, 1125000.000) = 3 
    [1125000.000, 1150000.000) = 8 
    [1150000.000, 1175000.000) = 6 

  Percentiles, us/op:
      p(0.0000) = 851443.712 us/op
     p(50.0000) = 1037041.664 us/op
     p(90.0000) = 1122395.750 us/op
     p(95.0000) = 1149239.296 us/op
     p(99.0000) = 1170168.873 us/op
     p(99.9000) = 1172307.968 us/op
     p(99.9900) = 1172307.968 us/op
     p(99.9990) = 1172307.968 us/op
     p(99.9999) = 1172307.968 us/op
    p(100.0000) = 1172307.968 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 74.64% complete, ETA 02:08:00
# Fork: 1 of 1
# Warmup Iteration   1: 700099.243 ±(99.9%) 92359.334 us/op
# Warmup Iteration   2: 836279.690 ±(99.9%) 116593.808 us/op
# Warmup Iteration   3: 833456.601 ±(99.9%) 116701.083 us/op
# Warmup Iteration   4: 832811.323 ±(99.9%) 109826.498 us/op
# Warmup Iteration   5: 834263.198 ±(99.9%) 111603.652 us/op
Iteration   1: 836360.350 ±(99.9%) 111410.393 us/op
                 fillHeap·p0.00:   661651.456 us/op
                 fillHeap·p0.50:   815792.128 us/op
                 fillHeap·p0.90:   956930.458 us/op
                 fillHeap·p0.95:   961544.192 us/op
                 fillHeap·p0.99:   961544.192 us/op
                 fillHeap·p0.999:  961544.192 us/op
                 fillHeap·p0.9999: 961544.192 us/op
                 fillHeap·p1.00:   961544.192 us/op

Iteration   2: 829988.234 ±(99.9%) 115171.882 us/op
                 fillHeap·p0.00:   665845.760 us/op
                 fillHeap·p0.50:   817889.280 us/op
                 fillHeap·p0.90:   946444.698 us/op
                 fillHeap·p0.95:   946864.128 us/op
                 fillHeap·p0.99:   946864.128 us/op
                 fillHeap·p0.999:  946864.128 us/op
                 fillHeap·p0.9999: 946864.128 us/op
                 fillHeap·p1.00:   946864.128 us/op

Iteration   3: 1128850.318 ±(99.9%) 74535.051 us/op
                 fillHeap·p0.00:   1055916.032 us/op
                 fillHeap·p0.50:   1126170.624 us/op
                 fillHeap·p0.90:   1207959.552 us/op
                 fillHeap·p0.95:   1207959.552 us/op
                 fillHeap·p0.99:   1207959.552 us/op
                 fillHeap·p0.999:  1207959.552 us/op
                 fillHeap·p0.9999: 1207959.552 us/op
                 fillHeap·p1.00:   1207959.552 us/op

Iteration   4: 1102577.664 ±(99.9%) 124515.658 us/op
                 fillHeap·p0.00:   873463.808 us/op
                 fillHeap·p0.50:   1130364.928 us/op
                 fillHeap·p0.90:   1149029.581 us/op
                 fillHeap·p0.95:   1149239.296 us/op
                 fillHeap·p0.99:   1149239.296 us/op
                 fillHeap·p0.999:  1149239.296 us/op
                 fillHeap·p0.9999: 1149239.296 us/op
                 fillHeap·p1.00:   1149239.296 us/op

Iteration   5: 942479.174 ±(99.9%) 45508.054 us/op
                 fillHeap·p0.00:   895483.904 us/op
                 fillHeap·p0.50:   934281.216 us/op
                 fillHeap·p0.90:   989016.883 us/op
                 fillHeap·p0.95:   989855.744 us/op
                 fillHeap·p0.99:   989855.744 us/op
                 fillHeap·p0.999:  989855.744 us/op
                 fillHeap·p0.9999: 989855.744 us/op
                 fillHeap·p1.00:   989855.744 us/op

Iteration   6: 936759.668 ±(99.9%) 33494.305 us/op
                 fillHeap·p0.00:   880803.840 us/op
                 fillHeap·p0.50:   938475.520 us/op
                 fillHeap·p0.90:   967416.218 us/op
                 fillHeap·p0.95:   969932.800 us/op
                 fillHeap·p0.99:   969932.800 us/op
                 fillHeap·p0.999:  969932.800 us/op
                 fillHeap·p0.9999: 969932.800 us/op
                 fillHeap·p1.00:   969932.800 us/op

Iteration   7: 941049.297 ±(99.9%) 34594.427 us/op
                 fillHeap·p0.00:   875560.960 us/op
                 fillHeap·p0.50:   944766.976 us/op
                 fillHeap·p0.90:   973497.958 us/op
                 fillHeap·p0.95:   977272.832 us/op
                 fillHeap·p0.99:   977272.832 us/op
                 fillHeap·p0.999:  977272.832 us/op
                 fillHeap·p0.9999: 977272.832 us/op
                 fillHeap·p1.00:   977272.832 us/op

Iteration   8: 926750.534 ±(99.9%) 29894.972 us/op
                 fillHeap·p0.00:   883949.568 us/op
                 fillHeap·p0.50:   922746.880 us/op
                 fillHeap·p0.90:   958608.179 us/op
                 fillHeap·p0.95:   959447.040 us/op
                 fillHeap·p0.99:   959447.040 us/op
                 fillHeap·p0.999:  959447.040 us/op
                 fillHeap·p0.9999: 959447.040 us/op
                 fillHeap·p1.00:   959447.040 us/op

Iteration   9: 932946.665 ±(99.9%) 27401.064 us/op
                 fillHeap·p0.00:   895483.904 us/op
                 fillHeap·p0.50:   938475.520 us/op
                 fillHeap·p0.90:   955462.451 us/op
                 fillHeap·p0.95:   956301.312 us/op
                 fillHeap·p0.99:   956301.312 us/op
                 fillHeap·p0.999:  956301.312 us/op
                 fillHeap·p0.9999: 956301.312 us/op
                 fillHeap·p1.00:   956301.312 us/op

Iteration  10: 939047.471 ±(99.9%) 24587.852 us/op
                 fillHeap·p0.00:   907018.240 us/op
                 fillHeap·p0.50:   939524.096 us/op
                 fillHeap·p0.90:   966996.787 us/op
                 fillHeap·p0.95:   969932.800 us/op
                 fillHeap·p0.99:   969932.800 us/op
                 fillHeap·p0.999:  969932.800 us/op
                 fillHeap·p0.9999: 969932.800 us/op
                 fillHeap·p1.00:   969932.800 us/op

Iteration  11: 945529.577 ±(99.9%) 35581.730 us/op
                 fillHeap·p0.00:   908066.816 us/op
                 fillHeap·p0.50:   939524.096 us/op
                 fillHeap·p0.90:   994679.194 us/op
                 fillHeap·p0.95:   1000341.504 us/op
                 fillHeap·p0.99:   1000341.504 us/op
                 fillHeap·p0.999:  1000341.504 us/op
                 fillHeap·p0.9999: 1000341.504 us/op
                 fillHeap·p1.00:   1000341.504 us/op

Iteration  12: 936759.668 ±(99.9%) 23901.808 us/op
                 fillHeap·p0.00:   896532.480 us/op
                 fillHeap·p0.50:   941621.248 us/op
                 fillHeap·p0.90:   957140.173 us/op
                 fillHeap·p0.95:   958398.464 us/op
                 fillHeap·p0.99:   958398.464 us/op
                 fillHeap·p0.999:  958398.464 us/op
                 fillHeap·p0.9999: 958398.464 us/op
                 fillHeap·p1.00:   958398.464 us/op

Iteration  13: 936092.393 ±(99.9%) 37402.817 us/op
                 fillHeap·p0.00:   878706.688 us/op
                 fillHeap·p0.50:   943718.400 us/op
                 fillHeap·p0.90:   968464.794 us/op
                 fillHeap·p0.95:   968884.224 us/op
                 fillHeap·p0.99:   968884.224 us/op
                 fillHeap·p0.999:  968884.224 us/op
                 fillHeap·p0.9999: 968884.224 us/op
                 fillHeap·p1.00:   968884.224 us/op

Iteration  14: 933423.290 ±(99.9%) 18387.224 us/op
                 fillHeap·p0.00:   914358.272 us/op
                 fillHeap·p0.50:   932184.064 us/op
                 fillHeap·p0.90:   955043.021 us/op
                 fillHeap·p0.95:   956301.312 us/op
                 fillHeap·p0.99:   956301.312 us/op
                 fillHeap·p0.999:  956301.312 us/op
                 fillHeap·p0.9999: 956301.312 us/op
                 fillHeap·p1.00:   956301.312 us/op

Iteration  15: 922746.880 ±(99.9%) 42075.252 us/op
                 fillHeap·p0.00:   858783.744 us/op
                 fillHeap·p0.50:   921698.304 us/op
                 fillHeap·p0.90:   972449.382 us/op
                 fillHeap·p0.95:   977272.832 us/op
                 fillHeap·p0.99:   977272.832 us/op
                 fillHeap·p0.999:  977272.832 us/op
                 fillHeap·p0.9999: 977272.832 us/op
                 fillHeap·p1.00:   977272.832 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 166
  mean = 940225.252 ±(99.9%) 22576.149 us/op

  Histogram, us/op:
    [ 600000.000,  650000.000) = 0 
    [ 650000.000,  700000.000) = 2 
    [ 700000.000,  750000.000) = 4 
    [ 750000.000,  800000.000) = 4 
    [ 800000.000,  850000.000) = 6 
    [ 850000.000,  900000.000) = 12 
    [ 900000.000,  950000.000) = 84 
    [ 950000.000, 1000000.000) = 35 
    [1000000.000, 1050000.000) = 1 
    [1050000.000, 1100000.000) = 4 
    [1100000.000, 1150000.000) = 10 
    [1150000.000, 1200000.000) = 3 
    [1200000.000, 1250000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 661651.456 us/op
     p(50.0000) = 938475.520 us/op
     p(90.0000) = 1094503.629 us/op
     p(95.0000) = 1132462.080 us/op
     p(99.0000) = 1172832.256 us/op
     p(99.9000) = 1207959.552 us/op
     p(99.9900) = 1207959.552 us/op
     p(99.9990) = 1207959.552 us/op
     p(99.9999) = 1207959.552 us/op
    p(100.0000) = 1207959.552 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 75.36% complete, ETA 02:04:23
# Fork: 1 of 1
# Warmup Iteration   1: 547.645 ±(99.9%) 4.154 us/op
# Warmup Iteration   2: 535.536 ±(99.9%) 0.372 us/op
# Warmup Iteration   3: 535.011 ±(99.9%) 0.665 us/op
# Warmup Iteration   4: 541.123 ±(99.9%) 0.227 us/op
# Warmup Iteration   5: 540.862 ±(99.9%) 0.226 us/op
Iteration   1: 541.084 ±(99.9%) 0.229 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   550.912 us/op
                 read·p0.95:   555.008 us/op
                 read·p0.99:   581.632 us/op
                 read·p0.999:  645.120 us/op
                 read·p0.9999: 728.065 us/op
                 read·p1.00:   739.328 us/op

Iteration   2: 540.641 ±(99.9%) 0.207 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   549.888 us/op
                 read·p0.95:   552.960 us/op
                 read·p0.99:   578.816 us/op
                 read·p0.999:  615.526 us/op
                 read·p0.9999: 748.836 us/op
                 read·p1.00:   813.056 us/op

Iteration   3: 540.814 ±(99.9%) 0.224 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   550.912 us/op
                 read·p0.95:   553.984 us/op
                 read·p0.99:   579.584 us/op
                 read·p0.999:  649.275 us/op
                 read·p0.9999: 718.425 us/op
                 read·p1.00:   744.448 us/op

Iteration   4: 541.071 ±(99.9%) 0.230 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   550.912 us/op
                 read·p0.95:   555.008 us/op
                 read·p0.99:   579.584 us/op
                 read·p0.999:  651.344 us/op
                 read·p0.9999: 721.526 us/op
                 read·p1.00:   724.992 us/op

Iteration   5: 540.878 ±(99.9%) 0.225 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   550.912 us/op
                 read·p0.95:   555.008 us/op
                 read·p0.99:   581.960 us/op
                 read·p0.999:  641.221 us/op
                 read·p0.9999: 688.738 us/op
                 read·p1.00:   714.752 us/op

Iteration   6: 540.718 ±(99.9%) 0.316 us/op
                 read·p0.00:   527.360 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   549.888 us/op
                 read·p0.95:   553.984 us/op
                 read·p0.99:   580.608 us/op
                 read·p0.999:  660.480 us/op
                 read·p0.9999: 1071.729 us/op
                 read·p1.00:   1075.200 us/op

Iteration   7: 540.412 ±(99.9%) 0.224 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   550.912 us/op
                 read·p0.95:   553.984 us/op
                 read·p0.99:   579.584 us/op
                 read·p0.999:  644.131 us/op
                 read·p0.9999: 715.063 us/op
                 read·p1.00:   716.800 us/op

Iteration   8: 540.435 ±(99.9%) 0.210 us/op
                 read·p0.00:   527.360 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   549.888 us/op
                 read·p0.95:   552.960 us/op
                 read·p0.99:   578.560 us/op
                 read·p0.999:  645.650 us/op
                 read·p0.9999: 709.861 us/op
                 read·p1.00:   745.472 us/op

Iteration   9: 540.613 ±(99.9%) 0.207 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   549.888 us/op
                 read·p0.95:   553.984 us/op
                 read·p0.99:   579.584 us/op
                 read·p0.999:  606.744 us/op
                 read·p0.9999: 725.554 us/op
                 read·p1.00:   762.880 us/op

Iteration  10: 540.428 ±(99.9%) 0.211 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   549.888 us/op
                 read·p0.95:   552.960 us/op
                 read·p0.99:   581.632 us/op
                 read·p0.999:  612.881 us/op
                 read·p0.9999: 696.291 us/op
                 read·p1.00:   707.584 us/op

Iteration  11: 540.797 ±(99.9%) 0.229 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   550.912 us/op
                 read·p0.95:   553.984 us/op
                 read·p0.99:   582.656 us/op
                 read·p0.999:  641.024 us/op
                 read·p0.9999: 700.696 us/op
                 read·p1.00:   736.256 us/op

Iteration  12: 540.649 ±(99.9%) 0.290 us/op
                 read·p0.00:   527.360 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   549.888 us/op
                 read·p0.95:   552.960 us/op
                 read·p0.99:   578.560 us/op
                 read·p0.999:  641.715 us/op
                 read·p0.9999: 1069.819 us/op
                 read·p1.00:   1085.440 us/op

Iteration  13: 540.970 ±(99.9%) 0.247 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   549.888 us/op
                 read·p0.95:   553.984 us/op
                 read·p0.99:   587.776 us/op
                 read·p0.999:  643.692 us/op
                 read·p0.9999: 725.827 us/op
                 read·p1.00:   803.840 us/op

Iteration  14: 540.982 ±(99.9%) 0.244 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   549.888 us/op
                 read·p0.95:   555.008 us/op
                 read·p0.99:   588.800 us/op
                 read·p0.999:  639.599 us/op
                 read·p0.9999: 704.653 us/op
                 read·p1.00:   761.856 us/op

Iteration  15: 540.427 ±(99.9%) 0.209 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   549.888 us/op
                 read·p0.95:   552.960 us/op
                 read·p0.99:   578.724 us/op
                 read·p0.999:  633.360 us/op
                 read·p0.9999: 700.389 us/op
                 read·p1.00:   740.352 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  N = 277078
  mean =    540.728 ±(99.9%) 0.061 us/op

  Histogram, us/op:
    [ 500.000,  550.000) = 249825 
    [ 550.000,  600.000) = 26586 
    [ 600.000,  650.000) = 466 
    [ 650.000,  700.000) = 158 
    [ 700.000,  750.000) = 23 
    [ 750.000,  800.000) = 4 
    [ 800.000,  850.000) = 2 
    [ 850.000,  900.000) = 1 
    [ 900.000,  950.000) = 5 
    [ 950.000, 1000.000) = 1 
    [1000.000, 1050.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    526.336 us/op
     p(50.0000) =    538.624 us/op
     p(90.0000) =    549.888 us/op
     p(95.0000) =    553.984 us/op
     p(99.0000) =    581.632 us/op
     p(99.9000) =    639.919 us/op
     p(99.9900) =    726.016 us/op
     p(99.9990) =   1072.043 us/op
     p(99.9999) =   1085.440 us/op
    p(100.0000) =   1085.440 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 76.08% complete, ETA 02:00:42
# Fork: 1 of 1
# Warmup Iteration   1: 669.469 ±(99.9%) 5.346 us/op
# Warmup Iteration   2: 657.006 ±(99.9%) 0.287 us/op
# Warmup Iteration   3: 656.508 ±(99.9%) 0.343 us/op
# Warmup Iteration   4: 656.653 ±(99.9%) 0.368 us/op
# Warmup Iteration   5: 654.544 ±(99.9%) 0.339 us/op
Iteration   1: 653.972 ±(99.9%) 0.303 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   665.600 us/op
                 readAndWrite·p0.95:   670.720 us/op
                 readAndWrite·p0.99:   700.416 us/op
                 readAndWrite·p0.999:  768.173 us/op
                 readAndWrite·p0.9999: 835.103 us/op
                 readAndWrite·p1.00:   854.016 us/op

Iteration   2: 653.856 ±(99.9%) 0.284 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   664.576 us/op
                 readAndWrite·p0.95:   668.672 us/op
                 readAndWrite·p0.99:   698.368 us/op
                 readAndWrite·p0.999:  747.233 us/op
                 readAndWrite·p0.9999: 825.303 us/op
                 readAndWrite·p1.00:   855.040 us/op

Iteration   3: 653.931 ±(99.9%) 0.288 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   664.576 us/op
                 readAndWrite·p0.95:   669.696 us/op
                 readAndWrite·p0.99:   698.368 us/op
                 readAndWrite·p0.999:  751.783 us/op
                 readAndWrite·p0.9999: 832.481 us/op
                 readAndWrite·p1.00:   842.752 us/op

Iteration   4: 653.814 ±(99.9%) 0.293 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   664.576 us/op
                 readAndWrite·p0.95:   668.672 us/op
                 readAndWrite·p0.99:   696.320 us/op
                 readAndWrite·p0.999:  757.185 us/op
                 readAndWrite·p0.9999: 961.799 us/op
                 readAndWrite·p1.00:   1043.456 us/op

Iteration   5: 654.063 ±(99.9%) 0.297 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   664.576 us/op
                 readAndWrite·p0.95:   668.672 us/op
                 readAndWrite·p0.99:   699.392 us/op
                 readAndWrite·p0.999:  765.670 us/op
                 readAndWrite·p0.9999: 906.611 us/op
                 readAndWrite·p1.00:   909.312 us/op

Iteration   6: 654.587 ±(99.9%) 0.865 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   665.600 us/op
                 readAndWrite·p0.95:   669.696 us/op
                 readAndWrite·p0.99:   700.416 us/op
                 readAndWrite·p0.999:  790.259 us/op
                 readAndWrite·p0.9999: 3098.516 us/op
                 readAndWrite·p1.00:   3100.672 us/op

Iteration   7: 653.996 ±(99.9%) 0.489 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   664.576 us/op
                 readAndWrite·p0.95:   668.672 us/op
                 readAndWrite·p0.99:   701.440 us/op
                 readAndWrite·p0.999:  737.169 us/op
                 readAndWrite·p0.9999: 1912.024 us/op
                 readAndWrite·p1.00:   2220.032 us/op

Iteration   8: 653.368 ±(99.9%) 0.268 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   664.576 us/op
                 readAndWrite·p0.95:   667.648 us/op
                 readAndWrite·p0.99:   695.296 us/op
                 readAndWrite·p0.999:  765.952 us/op
                 readAndWrite·p0.9999: 842.037 us/op
                 readAndWrite·p1.00:   855.040 us/op

Iteration   9: 653.590 ±(99.9%) 0.259 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   664.576 us/op
                 readAndWrite·p0.95:   668.672 us/op
                 readAndWrite·p0.99:   693.248 us/op
                 readAndWrite·p0.999:  739.471 us/op
                 readAndWrite·p0.9999: 847.052 us/op
                 readAndWrite·p1.00:   862.208 us/op

Iteration  10: 654.713 ±(99.9%) 0.551 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   664.576 us/op
                 readAndWrite·p0.95:   668.672 us/op
                 readAndWrite·p0.99:   703.488 us/op
                 readAndWrite·p0.999:  945.377 us/op
                 readAndWrite·p0.9999: 1083.636 us/op
                 readAndWrite·p1.00:   1130.496 us/op

Iteration  11: 653.178 ±(99.9%) 0.236 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   663.552 us/op
                 readAndWrite·p0.95:   667.648 us/op
                 readAndWrite·p0.99:   691.200 us/op
                 readAndWrite·p0.999:  719.569 us/op
                 readAndWrite·p0.9999: 776.367 us/op
                 readAndWrite·p1.00:   791.552 us/op

Iteration  12: 653.510 ±(99.9%) 0.377 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   664.576 us/op
                 readAndWrite·p0.95:   667.648 us/op
                 readAndWrite·p0.99:   691.313 us/op
                 readAndWrite·p0.999:  801.928 us/op
                 readAndWrite·p0.9999: 1121.239 us/op
                 readAndWrite·p1.00:   1140.736 us/op

Iteration  13: 653.643 ±(99.9%) 0.384 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   664.576 us/op
                 readAndWrite·p0.95:   667.648 us/op
                 readAndWrite·p0.99:   697.344 us/op
                 readAndWrite·p0.999:  758.057 us/op
                 readAndWrite·p0.9999: 1185.675 us/op
                 readAndWrite·p1.00:   1187.840 us/op

Iteration  14: 653.127 ±(99.9%) 0.243 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   663.552 us/op
                 readAndWrite·p0.95:   666.624 us/op
                 readAndWrite·p0.99:   689.183 us/op
                 readAndWrite·p0.999:  721.616 us/op
                 readAndWrite·p0.9999: 868.215 us/op
                 readAndWrite·p1.00:   898.048 us/op

Iteration  15: 654.398 ±(99.9%) 0.317 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   667.648 us/op
                 readAndWrite·p0.95:   671.744 us/op
                 readAndWrite·p0.99:   702.464 us/op
                 readAndWrite·p0.999:  735.436 us/op
                 readAndWrite·p0.9999: 971.480 us/op
                 readAndWrite·p1.00:   1007.616 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  N = 229188
  mean =    653.849 ±(99.9%) 0.102 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 0 
    [ 250.000,  500.000) = 0 
    [ 500.000,  750.000) = 228877 
    [ 750.000, 1000.000) = 279 
    [1000.000, 1250.000) = 27 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 2 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 1 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 
    [2750.000, 3000.000) = 0 
    [3000.000, 3250.000) = 2 
    [3250.000, 3500.000) = 0 
    [3500.000, 3750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    644.096 us/op
     p(50.0000) =    651.264 us/op
     p(90.0000) =    664.576 us/op
     p(95.0000) =    668.672 us/op
     p(99.0000) =    698.368 us/op
     p(99.9000) =    767.806 us/op
     p(99.9900) =   1044.702 us/op
     p(99.9990) =   2840.722 us/op
     p(99.9999) =   3100.672 us/op
    p(100.0000) =   3100.672 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 76.81% complete, ETA 01:57:02
# Fork: 1 of 1
# Warmup Iteration   1: 956.625 ±(99.9%) 8.458 us/op
# Warmup Iteration   2: 942.166 ±(99.9%) 0.786 us/op
# Warmup Iteration   3: 940.887 ±(99.9%) 0.860 us/op
# Warmup Iteration   4: 941.042 ±(99.9%) 0.357 us/op
# Warmup Iteration   5: 940.804 ±(99.9%) 0.247 us/op
Iteration   1: 858.667 ±(99.9%) 2.836 us/op
                 swap·p0.00:   749.568 us/op
                 swap·p0.50:   935.936 us/op
                 swap·p0.90:   945.152 us/op
                 swap·p0.95:   947.200 us/op
                 swap·p0.99:   956.416 us/op
                 swap·p0.999:  1040.384 us/op
                 swap·p0.9999: 1792.642 us/op
                 swap·p1.00:   1810.432 us/op

Iteration   2: 567.983 ±(99.9%) 0.142 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   574.464 us/op
                 swap·p0.95:   576.512 us/op
                 swap·p0.99:   584.806 us/op
                 swap·p0.999:  609.700 us/op
                 swap·p0.9999: 792.219 us/op
                 swap·p1.00:   800.768 us/op

Iteration   3: 567.858 ±(99.9%) 0.135 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   574.464 us/op
                 swap·p0.95:   576.512 us/op
                 swap·p0.99:   584.704 us/op
                 swap·p0.999:  614.816 us/op
                 swap·p0.9999: 743.801 us/op
                 swap·p1.00:   754.688 us/op

Iteration   4: 568.082 ±(99.9%) 0.139 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   574.464 us/op
                 swap·p0.95:   576.512 us/op
                 swap·p0.99:   587.776 us/op
                 swap·p0.999:  618.496 us/op
                 swap·p0.9999: 715.771 us/op
                 swap·p1.00:   760.832 us/op

Iteration   5: 568.029 ±(99.9%) 0.211 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   574.464 us/op
                 swap·p0.95:   576.512 us/op
                 swap·p0.99:   588.800 us/op
                 swap·p0.999:  636.326 us/op
                 swap·p0.9999: 1046.739 us/op
                 swap·p1.00:   1050.624 us/op

Iteration   6: 567.832 ±(99.9%) 0.174 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   574.464 us/op
                 swap·p0.95:   576.512 us/op
                 swap·p0.99:   584.704 us/op
                 swap·p0.999:  627.738 us/op
                 swap·p0.9999: 940.264 us/op
                 swap·p1.00:   1044.480 us/op

Iteration   7: 567.937 ±(99.9%) 0.137 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   574.464 us/op
                 swap·p0.95:   576.512 us/op
                 swap·p0.99:   584.704 us/op
                 swap·p0.999:  621.382 us/op
                 swap·p0.9999: 746.072 us/op
                 swap·p1.00:   802.816 us/op

Iteration   8: 567.719 ±(99.9%) 0.136 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   573.440 us/op
                 swap·p0.95:   575.488 us/op
                 swap·p0.99:   582.656 us/op
                 swap·p0.999:  611.539 us/op
                 swap·p0.9999: 776.333 us/op
                 swap·p1.00:   844.800 us/op

Iteration   9: 567.853 ±(99.9%) 0.137 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   574.464 us/op
                 swap·p0.95:   576.512 us/op
                 swap·p0.99:   584.704 us/op
                 swap·p0.999:  611.328 us/op
                 swap·p0.9999: 767.099 us/op
                 swap·p1.00:   819.200 us/op

Iteration  10: 567.875 ±(99.9%) 0.139 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   574.464 us/op
                 swap·p0.95:   576.512 us/op
                 swap·p0.99:   583.680 us/op
                 swap·p0.999:  625.056 us/op
                 swap·p0.9999: 756.166 us/op
                 swap·p1.00:   760.832 us/op

Iteration  11: 567.864 ±(99.9%) 0.137 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   574.464 us/op
                 swap·p0.95:   575.488 us/op
                 swap·p0.99:   584.704 us/op
                 swap·p0.999:  628.165 us/op
                 swap·p0.9999: 708.776 us/op
                 swap·p1.00:   757.760 us/op

Iteration  12: 568.935 ±(99.9%) 0.417 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   574.464 us/op
                 swap·p0.95:   577.536 us/op
                 swap·p0.99:   592.896 us/op
                 swap·p0.999:  817.152 us/op
                 swap·p0.9999: 1147.789 us/op
                 swap·p1.00:   1226.752 us/op

Iteration  13: 567.812 ±(99.9%) 0.141 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   574.464 us/op
                 swap·p0.95:   576.512 us/op
                 swap·p0.99:   583.680 us/op
                 swap·p0.999:  615.450 us/op
                 swap·p0.9999: 782.815 us/op
                 swap·p1.00:   826.368 us/op

Iteration  14: 568.193 ±(99.9%) 0.185 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   575.488 us/op
                 swap·p0.95:   577.536 us/op
                 swap·p0.99:   588.800 us/op
                 swap·p0.999:  663.978 us/op
                 swap·p0.9999: 806.809 us/op
                 swap·p1.00:   816.128 us/op

Iteration  15: 567.843 ±(99.9%) 0.150 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   574.464 us/op
                 swap·p0.95:   576.512 us/op
                 swap·p0.99:   585.728 us/op
                 swap·p0.999:  625.056 us/op
                 swap·p0.9999: 767.276 us/op
                 swap·p1.00:   784.384 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  N = 257881
  mean =    581.105 ±(99.9%) 0.414 us/op

  Histogram, us/op:
    [   0.000,  125.000) = 0 
    [ 125.000,  250.000) = 0 
    [ 250.000,  375.000) = 0 
    [ 375.000,  500.000) = 0 
    [ 500.000,  625.000) = 245952 
    [ 625.000,  750.000) = 897 
    [ 750.000,  875.000) = 4525 
    [ 875.000, 1000.000) = 6482 
    [1000.000, 1125.000) = 21 
    [1125.000, 1250.000) = 2 
    [1250.000, 1375.000) = 0 
    [1375.000, 1500.000) = 0 
    [1500.000, 1625.000) = 0 
    [1625.000, 1750.000) = 1 
    [1750.000, 1875.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    563.200 us/op
     p(50.0000) =    567.296 us/op
     p(90.0000) =    576.512 us/op
     p(95.0000) =    591.872 us/op
     p(99.0000) =    937.984 us/op
     p(99.9000) =    951.296 us/op
     p(99.9900) =   1000.725 us/op
     p(99.9990) =   1426.870 us/op
     p(99.9999) =   1810.432 us/op
    p(100.0000) =   1810.432 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 77.53% complete, ETA 01:53:21
# Fork: 1 of 1
# Warmup Iteration   1: 546.527 ±(99.9%) 4.923 us/op
# Warmup Iteration   2: 535.467 ±(99.9%) 0.249 us/op
# Warmup Iteration   3: 535.132 ±(99.9%) 0.300 us/op
# Warmup Iteration   4: 535.406 ±(99.9%) 0.277 us/op
# Warmup Iteration   5: 534.920 ±(99.9%) 0.250 us/op
Iteration   1: 534.929 ±(99.9%) 0.232 us/op
                 write·p0.00:   516.096 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   544.768 us/op
                 write·p0.95:   549.888 us/op
                 write·p0.99:   573.440 us/op
                 write·p0.999:  599.375 us/op
                 write·p0.9999: 683.678 us/op
                 write·p1.00:   701.440 us/op

Iteration   2: 534.982 ±(99.9%) 0.237 us/op
                 write·p0.00:   515.584 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   544.768 us/op
                 write·p0.95:   549.888 us/op
                 write·p0.99:   575.488 us/op
                 write·p0.999:  607.569 us/op
                 write·p0.9999: 675.490 us/op
                 write·p1.00:   693.248 us/op

Iteration   3: 535.066 ±(99.9%) 0.328 us/op
                 write·p0.00:   516.096 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   544.768 us/op
                 write·p0.95:   550.912 us/op
                 write·p0.99:   578.560 us/op
                 write·p0.999:  610.644 us/op
                 write·p0.9999: 825.335 us/op
                 write·p1.00:   1771.520 us/op

Iteration   4: 535.566 ±(99.9%) 0.530 us/op
                 write·p0.00:   516.096 us/op
                 write·p0.50:   534.528 us/op
                 write·p0.90:   544.768 us/op
                 write·p0.95:   549.888 us/op
                 write·p0.99:   576.512 us/op
                 write·p0.999:  634.880 us/op
                 write·p0.9999: 2145.591 us/op
                 write·p1.00:   2732.032 us/op

Iteration   5: 534.825 ±(99.9%) 0.260 us/op
                 write·p0.00:   516.096 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   544.768 us/op
                 write·p0.95:   548.864 us/op
                 write·p0.99:   576.512 us/op
                 write·p0.999:  639.638 us/op
                 write·p0.9999: 908.619 us/op
                 write·p1.00:   917.504 us/op

Iteration   6: 534.827 ±(99.9%) 0.227 us/op
                 write·p0.00:   515.584 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   544.768 us/op
                 write·p0.95:   548.864 us/op
                 write·p0.99:   570.368 us/op
                 write·p0.999:  604.822 us/op
                 write·p0.9999: 708.289 us/op
                 write·p1.00:   746.496 us/op

Iteration   7: 534.891 ±(99.9%) 0.452 us/op
                 write·p0.00:   516.096 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   544.768 us/op
                 write·p0.95:   548.864 us/op
                 write·p0.99:   573.440 us/op
                 write·p0.999:  609.280 us/op
                 write·p0.9999: 1020.239 us/op
                 write·p1.00:   2732.032 us/op

Iteration   8: 534.768 ±(99.9%) 0.263 us/op
                 write·p0.00:   516.096 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   544.768 us/op
                 write·p0.95:   549.888 us/op
                 write·p0.99:   576.512 us/op
                 write·p0.999:  651.264 us/op
                 write·p0.9999: 761.779 us/op
                 write·p1.00:   768.000 us/op

Iteration   9: 534.777 ±(99.9%) 0.246 us/op
                 write·p0.00:   516.096 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   545.792 us/op
                 write·p0.95:   550.912 us/op
                 write·p0.99:   576.737 us/op
                 write·p0.999:  615.059 us/op
                 write·p0.9999: 710.850 us/op
                 write·p1.00:   718.848 us/op

Iteration  10: 534.875 ±(99.9%) 0.227 us/op
                 write·p0.00:   516.608 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   544.768 us/op
                 write·p0.95:   548.864 us/op
                 write·p0.99:   570.368 us/op
                 write·p0.999:  603.136 us/op
                 write·p0.9999: 737.070 us/op
                 write·p1.00:   742.400 us/op

Iteration  11: 535.101 ±(99.9%) 0.259 us/op
                 write·p0.00:   516.096 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   544.768 us/op
                 write·p0.95:   549.888 us/op
                 write·p0.99:   570.368 us/op
                 write·p0.999:  601.770 us/op
                 write·p0.9999: 921.189 us/op
                 write·p1.00:   958.464 us/op

Iteration  12: 535.247 ±(99.9%) 0.317 us/op
                 write·p0.00:   515.584 us/op
                 write·p0.50:   534.528 us/op
                 write·p0.90:   544.768 us/op
                 write·p0.95:   549.888 us/op
                 write·p0.99:   572.416 us/op
                 write·p0.999:  632.529 us/op
                 write·p0.9999: 1054.460 us/op
                 write·p1.00:   1079.296 us/op

Iteration  13: 534.447 ±(99.9%) 0.226 us/op
                 write·p0.00:   517.120 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   543.744 us/op
                 write·p0.95:   548.864 us/op
                 write·p0.99:   572.518 us/op
                 write·p0.999:  601.088 us/op
                 write·p0.9999: 708.550 us/op
                 write·p1.00:   755.712 us/op

Iteration  14: 534.779 ±(99.9%) 0.225 us/op
                 write·p0.00:   515.584 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   544.768 us/op
                 write·p0.95:   549.888 us/op
                 write·p0.99:   573.440 us/op
                 write·p0.999:  600.394 us/op
                 write·p0.9999: 666.277 us/op
                 write·p1.00:   670.720 us/op

Iteration  15: 535.274 ±(99.9%) 0.230 us/op
                 write·p0.00:   516.096 us/op
                 write·p0.50:   534.528 us/op
                 write·p0.90:   545.792 us/op
                 write·p0.95:   549.888 us/op
                 write·p0.99:   573.440 us/op
                 write·p0.999:  597.339 us/op
                 write·p0.9999: 693.519 us/op
                 write·p1.00:   794.624 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  N = 280067
  mean =    534.957 ±(99.9%) 0.077 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 0 
    [ 250.000,  500.000) = 0 
    [ 500.000,  750.000) = 280042 
    [ 750.000, 1000.000) = 18 
    [1000.000, 1250.000) = 3 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 1 
    [2000.000, 2250.000) = 1 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 2 

  Percentiles, us/op:
      p(0.0000) =    515.584 us/op
     p(50.0000) =    533.504 us/op
     p(90.0000) =    544.768 us/op
     p(95.0000) =    549.888 us/op
     p(99.0000) =    574.464 us/op
     p(99.9000) =    608.256 us/op
     p(99.9900) =    743.417 us/op
     p(99.9990) =   2189.261 us/op
     p(99.9999) =   2732.032 us/op
    p(100.0000) =   2732.032 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 78.26% complete, ETA 01:49:41
# Fork: 1 of 1
# Warmup Iteration   1: 929419.636 ±(99.9%) 191308.824 us/op
# Warmup Iteration   2: 888143.872 ±(99.9%) 3188.572 us/op
# Warmup Iteration   3: 884299.093 ±(99.9%) 2824.985 us/op
# Warmup Iteration   4: 885959.339 ±(99.9%) 2889.551 us/op
# Warmup Iteration   5: 884561.237 ±(99.9%) 2323.316 us/op
Iteration   1: 888930.304 ±(99.9%) 2982.636 us/op
                 sumBigDecimals·p0.00:   884998.144 us/op
                 sumBigDecimals·p0.50:   888668.160 us/op
                 sumBigDecimals·p0.90:   891289.600 us/op
                 sumBigDecimals·p0.95:   891289.600 us/op
                 sumBigDecimals·p0.99:   891289.600 us/op
                 sumBigDecimals·p0.999:  891289.600 us/op
                 sumBigDecimals·p0.9999: 891289.600 us/op
                 sumBigDecimals·p1.00:   891289.600 us/op

Iteration   2: 885522.432 ±(99.9%) 2716.481 us/op
                 sumBigDecimals·p0.00:   881852.416 us/op
                 sumBigDecimals·p0.50:   885522.432 us/op
                 sumBigDecimals·p0.90:   888143.872 us/op
                 sumBigDecimals·p0.95:   888143.872 us/op
                 sumBigDecimals·p0.99:   888143.872 us/op
                 sumBigDecimals·p0.999:  888143.872 us/op
                 sumBigDecimals·p0.9999: 888143.872 us/op
                 sumBigDecimals·p1.00:   888143.872 us/op

Iteration   3: 884299.093 ±(99.9%) 2824.985 us/op
                 sumBigDecimals·p0.00:   880803.840 us/op
                 sumBigDecimals·p0.50:   884998.144 us/op
                 sumBigDecimals·p0.90:   886780.723 us/op
                 sumBigDecimals·p0.95:   887095.296 us/op
                 sumBigDecimals·p0.99:   887095.296 us/op
                 sumBigDecimals·p0.999:  887095.296 us/op
                 sumBigDecimals·p0.9999: 887095.296 us/op
                 sumBigDecimals·p1.00:   887095.296 us/op

Iteration   4: 884299.093 ±(99.9%) 2384.275 us/op
                 sumBigDecimals·p0.00:   881852.416 us/op
                 sumBigDecimals·p0.50:   883949.568 us/op
                 sumBigDecimals·p0.90:   887514.726 us/op
                 sumBigDecimals·p0.95:   888143.872 us/op
                 sumBigDecimals·p0.99:   888143.872 us/op
                 sumBigDecimals·p0.999:  888143.872 us/op
                 sumBigDecimals·p0.9999: 888143.872 us/op
                 sumBigDecimals·p1.00:   888143.872 us/op

Iteration   5: 886483.627 ±(99.9%) 2177.582 us/op
                 sumBigDecimals·p0.00:   883949.568 us/op
                 sumBigDecimals·p0.50:   886571.008 us/op
                 sumBigDecimals·p0.90:   888143.872 us/op
                 sumBigDecimals·p0.95:   888143.872 us/op
                 sumBigDecimals·p0.99:   888143.872 us/op
                 sumBigDecimals·p0.999:  888143.872 us/op
                 sumBigDecimals·p0.9999: 888143.872 us/op
                 sumBigDecimals·p1.00:   888143.872 us/op

Iteration   6: 884299.093 ±(99.9%) 2766.328 us/op
                 sumBigDecimals·p0.00:   880803.840 us/op
                 sumBigDecimals·p0.50:   883949.568 us/op
                 sumBigDecimals·p0.90:   887095.296 us/op
                 sumBigDecimals·p0.95:   887095.296 us/op
                 sumBigDecimals·p0.99:   887095.296 us/op
                 sumBigDecimals·p0.999:  887095.296 us/op
                 sumBigDecimals·p0.9999: 887095.296 us/op
                 sumBigDecimals·p1.00:   887095.296 us/op

Iteration   7: 885435.051 ±(99.9%) 2323.316 us/op
                 sumBigDecimals·p0.00:   882900.992 us/op
                 sumBigDecimals·p0.50:   884998.144 us/op
                 sumBigDecimals·p0.90:   888877.875 us/op
                 sumBigDecimals·p0.95:   889192.448 us/op
                 sumBigDecimals·p0.99:   889192.448 us/op
                 sumBigDecimals·p0.999:  889192.448 us/op
                 sumBigDecimals·p0.9999: 889192.448 us/op
                 sumBigDecimals·p1.00:   889192.448 us/op

Iteration   8: 883774.805 ±(99.9%) 3021.329 us/op
                 sumBigDecimals·p0.00:   879755.264 us/op
                 sumBigDecimals·p0.50:   883949.568 us/op
                 sumBigDecimals·p0.90:   887514.726 us/op
                 sumBigDecimals·p0.95:   888143.872 us/op
                 sumBigDecimals·p0.99:   888143.872 us/op
                 sumBigDecimals·p0.999:  888143.872 us/op
                 sumBigDecimals·p0.9999: 888143.872 us/op
                 sumBigDecimals·p1.00:   888143.872 us/op

Iteration   9: 884211.712 ±(99.9%) 3037.118 us/op
                 sumBigDecimals·p0.00:   880803.840 us/op
                 sumBigDecimals·p0.50:   884473.856 us/op
                 sumBigDecimals·p0.90:   887095.296 us/op
                 sumBigDecimals·p0.95:   887095.296 us/op
                 sumBigDecimals·p0.99:   887095.296 us/op
                 sumBigDecimals·p0.999:  887095.296 us/op
                 sumBigDecimals·p0.9999: 887095.296 us/op
                 sumBigDecimals·p1.00:   887095.296 us/op

Iteration  10: 884211.712 ±(99.9%) 2982.636 us/op
                 sumBigDecimals·p0.00:   880803.840 us/op
                 sumBigDecimals·p0.50:   883949.568 us/op
                 sumBigDecimals·p0.90:   887829.299 us/op
                 sumBigDecimals·p0.95:   888143.872 us/op
                 sumBigDecimals·p0.99:   888143.872 us/op
                 sumBigDecimals·p0.999:  888143.872 us/op
                 sumBigDecimals·p0.9999: 888143.872 us/op
                 sumBigDecimals·p1.00:   888143.872 us/op

Iteration  11: 890852.693 ±(99.9%) 3775.304 us/op
                 sumBigDecimals·p0.00:   884998.144 us/op
                 sumBigDecimals·p0.50:   891289.600 us/op
                 sumBigDecimals·p0.90:   895169.331 us/op
                 sumBigDecimals·p0.95:   895483.904 us/op
                 sumBigDecimals·p0.99:   895483.904 us/op
                 sumBigDecimals·p0.999:  895483.904 us/op
                 sumBigDecimals·p0.9999: 895483.904 us/op
                 sumBigDecimals·p1.00:   895483.904 us/op

Iteration  12: 883512.661 ±(99.9%) 2832.232 us/op
                 sumBigDecimals·p0.00:   879755.264 us/op
                 sumBigDecimals·p0.50:   883949.568 us/op
                 sumBigDecimals·p0.90:   886046.720 us/op
                 sumBigDecimals·p0.95:   886046.720 us/op
                 sumBigDecimals·p0.99:   886046.720 us/op
                 sumBigDecimals·p0.999:  886046.720 us/op
                 sumBigDecimals·p0.9999: 886046.720 us/op
                 sumBigDecimals·p1.00:   886046.720 us/op

Iteration  13: 883425.280 ±(99.9%) 1765.132 us/op
                 sumBigDecimals·p0.00:   880803.840 us/op
                 sumBigDecimals·p0.50:   883949.568 us/op
                 sumBigDecimals·p0.90:   884998.144 us/op
                 sumBigDecimals·p0.95:   884998.144 us/op
                 sumBigDecimals·p0.99:   884998.144 us/op
                 sumBigDecimals·p0.999:  884998.144 us/op
                 sumBigDecimals·p0.9999: 884998.144 us/op
                 sumBigDecimals·p1.00:   884998.144 us/op

Iteration  14: 884561.237 ±(99.9%) 2392.857 us/op
                 sumBigDecimals·p0.00:   880803.840 us/op
                 sumBigDecimals·p0.50:   884998.144 us/op
                 sumBigDecimals·p0.90:   886780.723 us/op
                 sumBigDecimals·p0.95:   887095.296 us/op
                 sumBigDecimals·p0.99:   887095.296 us/op
                 sumBigDecimals·p0.999:  887095.296 us/op
                 sumBigDecimals·p0.9999: 887095.296 us/op
                 sumBigDecimals·p1.00:   887095.296 us/op

Iteration  15: 885347.669 ±(99.9%) 2645.116 us/op
                 sumBigDecimals·p0.00:   882900.992 us/op
                 sumBigDecimals·p0.50:   884998.144 us/op
                 sumBigDecimals·p0.90:   889611.878 us/op
                 sumBigDecimals·p0.95:   890241.024 us/op
                 sumBigDecimals·p0.99:   890241.024 us/op
                 sumBigDecimals·p0.999:  890241.024 us/op
                 sumBigDecimals·p0.9999: 890241.024 us/op
                 sumBigDecimals·p1.00:   890241.024 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  N = 180
  mean = 885277.764 ±(99.9%) 717.899 us/op

  Histogram, us/op:
    [870000.000, 872500.000) = 0 
    [872500.000, 875000.000) = 0 
    [875000.000, 877500.000) = 0 
    [877500.000, 880000.000) = 2 
    [880000.000, 882500.000) = 23 
    [882500.000, 885000.000) = 79 
    [885000.000, 887500.000) = 43 
    [887500.000, 890000.000) = 19 
    [890000.000, 892500.000) = 12 
    [892500.000, 895000.000) = 1 
    [895000.000, 897500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 879755.264 us/op
     p(50.0000) = 884998.144 us/op
     p(90.0000) = 889087.590 us/op
     p(95.0000) = 891289.600 us/op
     p(99.0000) = 894634.557 us/op
     p(99.9000) = 895483.904 us/op
     p(99.9900) = 895483.904 us/op
     p(99.9990) = 895483.904 us/op
     p(99.9999) = 895483.904 us/op
    p(100.0000) = 895483.904 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 78.98% complete, ETA 01:46:04
# Fork: 1 of 1
# Warmup Iteration   1: 300555.806 ±(99.9%) 53850.183 us/op
# Warmup Iteration   2: 234612.784 ±(99.9%) 1331.536 us/op
# Warmup Iteration   3: 237222.031 ±(99.9%) 836.349 us/op
# Warmup Iteration   4: 235576.010 ±(99.9%) 1116.537 us/op
# Warmup Iteration   5: 233545.919 ±(99.9%) 1622.471 us/op
Iteration   1: 236770.899 ±(99.9%) 1916.809 us/op
                 countUppercase·p0.00:   234356.736 us/op
                 countUppercase·p0.50:   235405.312 us/op
                 countUppercase·p0.90:   240700.621 us/op
                 countUppercase·p0.95:   247306.650 us/op
                 countUppercase·p0.99:   250347.520 us/op
                 countUppercase·p0.999:  250347.520 us/op
                 countUppercase·p0.9999: 250347.520 us/op
                 countUppercase·p1.00:   250347.520 us/op

Iteration   2: 236484.370 ±(99.9%) 2087.964 us/op
                 countUppercase·p0.00:   234094.592 us/op
                 countUppercase·p0.50:   234881.024 us/op
                 countUppercase·p0.90:   241067.622 us/op
                 countUppercase·p0.95:   248669.798 us/op
                 countUppercase·p0.99:   250347.520 us/op
                 countUppercase·p0.999:  250347.520 us/op
                 countUppercase·p0.9999: 250347.520 us/op
                 countUppercase·p1.00:   250347.520 us/op

Iteration   3: 232235.753 ±(99.9%) 1603.754 us/op
                 countUppercase·p0.00:   230424.576 us/op
                 countUppercase·p0.50:   230948.864 us/op
                 countUppercase·p0.90:   236847.104 us/op
                 countUppercase·p0.95:   241238.016 us/op
                 countUppercase·p0.99:   242745.344 us/op
                 countUppercase·p0.999:  242745.344 us/op
                 countUppercase·p0.9999: 242745.344 us/op
                 countUppercase·p1.00:   242745.344 us/op

Iteration   4: 237819.475 ±(99.9%) 2194.573 us/op
                 countUppercase·p0.00:   234356.736 us/op
                 countUppercase·p0.50:   236191.744 us/op
                 countUppercase·p0.90:   244370.637 us/op
                 countUppercase·p0.95:   247254.221 us/op
                 countUppercase·p0.99:   252182.528 us/op
                 countUppercase·p0.999:  252182.528 us/op
                 countUppercase·p0.9999: 252182.528 us/op
                 countUppercase·p1.00:   252182.528 us/op

Iteration   5: 237795.090 ±(99.9%) 2062.491 us/op
                 countUppercase·p0.00:   235143.168 us/op
                 countUppercase·p0.50:   236191.744 us/op
                 countUppercase·p0.90:   244056.064 us/op
                 countUppercase·p0.95:   247778.509 us/op
                 countUppercase·p0.99:   252182.528 us/op
                 countUppercase·p0.999:  252182.528 us/op
                 countUppercase·p0.9999: 252182.528 us/op
                 countUppercase·p1.00:   252182.528 us/op

Iteration   6: 238844.392 ±(99.9%) 934.575 us/op
                 countUppercase·p0.00:   237502.464 us/op
                 countUppercase·p0.50:   238026.752 us/op
                 countUppercase·p0.90:   241618.125 us/op
                 countUppercase·p0.95:   243479.347 us/op
                 countUppercase·p0.99:   244842.496 us/op
                 countUppercase·p0.999:  244842.496 us/op
                 countUppercase·p0.9999: 244842.496 us/op
                 countUppercase·p1.00:   244842.496 us/op

Iteration   7: 238713.320 ±(99.9%) 1146.431 us/op
                 countUppercase·p0.00:   237240.320 us/op
                 countUppercase·p0.50:   237764.608 us/op
                 countUppercase·p0.90:   242352.128 us/op
                 countUppercase·p0.95:   244200.243 us/op
                 countUppercase·p0.99:   245628.928 us/op
                 countUppercase·p0.999:  245628.928 us/op
                 countUppercase·p0.9999: 245628.928 us/op
                 countUppercase·p1.00:   245628.928 us/op

Iteration   8: 236508.755 ±(99.9%) 2419.769 us/op
                 countUppercase·p0.00:   234356.736 us/op
                 countUppercase·p0.50:   235143.168 us/op
                 countUppercase·p0.90:   240648.192 us/op
                 countUppercase·p0.95:   244213.350 us/op
                 countUppercase·p0.99:   261095.424 us/op
                 countUppercase·p0.999:  261095.424 us/op
                 countUppercase·p0.9999: 261095.424 us/op
                 countUppercase·p1.00:   261095.424 us/op

Iteration   9: 234905.409 ±(99.9%) 2480.078 us/op
                 countUppercase·p0.00:   230948.864 us/op
                 countUppercase·p0.50:   233046.016 us/op
                 countUppercase·p0.90:   243007.488 us/op
                 countUppercase·p0.95:   244737.638 us/op
                 countUppercase·p0.99:   246939.648 us/op
                 countUppercase·p0.999:  246939.648 us/op
                 countUppercase·p0.9999: 246939.648 us/op
                 countUppercase·p1.00:   246939.648 us/op

Iteration  10: 234070.207 ±(99.9%) 1692.857 us/op
                 countUppercase·p0.00:   231211.008 us/op
                 countUppercase·p0.50:   232783.872 us/op
                 countUppercase·p0.90:   239652.045 us/op
                 countUppercase·p0.95:   240386.048 us/op
                 countUppercase·p0.99:   243531.776 us/op
                 countUppercase·p0.999:  243531.776 us/op
                 countUppercase·p0.9999: 243531.776 us/op
                 countUppercase·p1.00:   243531.776 us/op

Iteration  11: 234137.267 ±(99.9%) 1777.423 us/op
                 countUppercase·p0.00:   231735.296 us/op
                 countUppercase·p0.50:   232521.728 us/op
                 countUppercase·p0.90:   238970.470 us/op
                 countUppercase·p0.95:   242850.202 us/op
                 countUppercase·p0.99:   245366.784 us/op
                 countUppercase·p0.999:  245366.784 us/op
                 countUppercase·p0.9999: 245366.784 us/op
                 countUppercase·p1.00:   245366.784 us/op

Iteration  12: 236770.899 ±(99.9%) 1529.629 us/op
                 countUppercase·p0.00:   234618.880 us/op
                 countUppercase·p0.50:   235929.600 us/op
                 countUppercase·p0.90:   238865.613 us/op
                 countUppercase·p0.95:   243374.490 us/op
                 countUppercase·p0.99:   251133.952 us/op
                 countUppercase·p0.999:  251133.952 us/op
                 countUppercase·p0.9999: 251133.952 us/op
                 countUppercase·p1.00:   251133.952 us/op

Iteration  13: 237642.681 ±(99.9%) 2239.423 us/op
                 countUppercase·p0.00:   235143.168 us/op
                 countUppercase·p0.50:   235929.600 us/op
                 countUppercase·p0.90:   244213.350 us/op
                 countUppercase·p0.95:   249613.517 us/op
                 countUppercase·p0.99:   254017.536 us/op
                 countUppercase·p0.999:  254017.536 us/op
                 countUppercase·p0.9999: 254017.536 us/op
                 countUppercase·p1.00:   254017.536 us/op

Iteration  14: 233795.870 ±(99.9%) 1952.995 us/op
                 countUppercase·p0.00:   231735.296 us/op
                 countUppercase·p0.50:   232259.584 us/op
                 countUppercase·p0.90:   239966.618 us/op
                 countUppercase·p0.95:   241382.195 us/op
                 countUppercase·p0.99:   249298.944 us/op
                 countUppercase·p0.999:  249298.944 us/op
                 countUppercase·p0.9999: 249298.944 us/op
                 countUppercase·p1.00:   249298.944 us/op

Iteration  15: 233655.653 ±(99.9%) 1677.003 us/op
                 countUppercase·p0.00:   231997.440 us/op
                 countUppercase·p0.50:   232521.728 us/op
                 countUppercase·p0.90:   235562.598 us/op
                 countUppercase·p0.95:   240700.621 us/op
                 countUppercase·p0.99:   249823.232 us/op
                 countUppercase·p0.999:  249823.232 us/op
                 countUppercase·p0.9999: 249823.232 us/op
                 countUppercase·p1.00:   249823.232 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 644
  mean = 235995.543 ±(99.9%) 521.999 us/op

  Histogram, us/op:
    [230000.000, 232500.000) = 134 
    [232500.000, 235000.000) = 141 
    [235000.000, 237500.000) = 170 
    [237500.000, 240000.000) = 123 
    [240000.000, 242500.000) = 33 
    [242500.000, 245000.000) = 20 
    [245000.000, 247500.000) = 9 
    [247500.000, 250000.000) = 6 
    [250000.000, 252500.000) = 6 
    [252500.000, 255000.000) = 1 
    [255000.000, 257500.000) = 0 
    [257500.000, 260000.000) = 0 
    [260000.000, 262500.000) = 1 
    [262500.000, 265000.000) = 0 
    [265000.000, 267500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 230424.576 us/op
     p(50.0000) = 235405.312 us/op
     p(90.0000) = 240779.264 us/op
     p(95.0000) = 244056.064 us/op
     p(99.0000) = 250491.699 us/op
     p(99.9000) = 261095.424 us/op
     p(99.9900) = 261095.424 us/op
     p(99.9990) = 261095.424 us/op
     p(99.9999) = 261095.424 us/op
    p(100.0000) = 261095.424 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 79.71% complete, ETA 01:42:24
# Fork: 1 of 1
# Warmup Iteration   1: 2162583.142 ±(99.9%) 809985.733 us/op
# Warmup Iteration   2: 1950700.885 ±(99.9%) 67403.031 us/op
# Warmup Iteration   3: 1905961.643 ±(99.9%) 14122.099 us/op
# Warmup Iteration   4: 1984604.843 ±(99.9%) 33611.605 us/op
# Warmup Iteration   5: 1898971.136 ±(99.9%) 6167.841 us/op
Iteration   1: 1953147.563 ±(99.9%) 37317.254 us/op
                 countUppercase·p0.00:   1939865.600 us/op
                 countUppercase·p0.50:   1951399.936 us/op
                 countUppercase·p0.90:   1969225.728 us/op
                 countUppercase·p0.95:   1969225.728 us/op
                 countUppercase·p0.99:   1969225.728 us/op
                 countUppercase·p0.999:  1969225.728 us/op
                 countUppercase·p0.9999: 1969225.728 us/op
                 countUppercase·p1.00:   1969225.728 us/op

Iteration   2: 1941962.752 ±(99.9%) 38831.135 us/op
                 countUppercase·p0.00:   1925185.536 us/op
                 countUppercase·p0.50:   1941962.752 us/op
                 countUppercase·p0.90:   1960837.120 us/op
                 countUppercase·p0.95:   1960837.120 us/op
                 countUppercase·p0.99:   1960837.120 us/op
                 countUppercase·p0.999:  1960837.120 us/op
                 countUppercase·p0.9999: 1960837.120 us/op
                 countUppercase·p1.00:   1960837.120 us/op

Iteration   3: 1925884.587 ±(99.9%) 37869.224 us/op
                 countUppercase·p0.00:   1908408.320 us/op
                 countUppercase·p0.50:   1923088.384 us/op
                 countUppercase·p0.90:   1946157.056 us/op
                 countUppercase·p0.95:   1946157.056 us/op
                 countUppercase·p0.99:   1946157.056 us/op
                 countUppercase·p0.999:  1946157.056 us/op
                 countUppercase·p0.9999: 1946157.056 us/op
                 countUppercase·p1.00:   1946157.056 us/op

Iteration   4: 1921690.283 ±(99.9%) 36756.996 us/op
                 countUppercase·p0.00:   1908408.320 us/op
                 countUppercase·p0.50:   1919942.656 us/op
                 countUppercase·p0.90:   1944059.904 us/op
                 countUppercase·p0.95:   1944059.904 us/op
                 countUppercase·p0.99:   1944059.904 us/op
                 countUppercase·p0.999:  1944059.904 us/op
                 countUppercase·p0.9999: 1944059.904 us/op
                 countUppercase·p1.00:   1944059.904 us/op

Iteration   5: 1934622.720 ±(99.9%) 38066.579 us/op
                 countUppercase·p0.00:   1914699.776 us/op
                 countUppercase·p0.50:   1932525.568 us/op
                 countUppercase·p0.90:   1954545.664 us/op
                 countUppercase·p0.95:   1954545.664 us/op
                 countUppercase·p0.99:   1954545.664 us/op
                 countUppercase·p0.999:  1954545.664 us/op
                 countUppercase·p0.9999: 1954545.664 us/op
                 countUppercase·p1.00:   1954545.664 us/op

Iteration   6: 1934622.720 ±(99.9%) 25968.935 us/op
                 countUppercase·p0.00:   1925185.536 us/op
                 countUppercase·p0.50:   1930428.416 us/op
                 countUppercase·p0.90:   1948254.208 us/op
                 countUppercase·p0.95:   1948254.208 us/op
                 countUppercase·p0.99:   1948254.208 us/op
                 countUppercase·p0.999:  1948254.208 us/op
                 countUppercase·p0.9999: 1948254.208 us/op
                 countUppercase·p1.00:   1948254.208 us/op

Iteration   7: 1939166.549 ±(99.9%) 56488.397 us/op
                 countUppercase·p0.00:   1918894.080 us/op
                 countUppercase·p0.50:   1939865.600 us/op
                 countUppercase·p0.90:   1973420.032 us/op
                 countUppercase·p0.95:   1973420.032 us/op
                 countUppercase·p0.99:   1973420.032 us/op
                 countUppercase·p0.999:  1973420.032 us/op
                 countUppercase·p0.9999: 1973420.032 us/op
                 countUppercase·p1.00:   1973420.032 us/op

Iteration   8: 1910155.947 ±(99.9%) 29618.874 us/op
                 countUppercase·p0.00:   1889533.952 us/op
                 countUppercase·p0.50:   1913651.200 us/op
                 countUppercase·p0.90:   1916796.928 us/op
                 countUppercase·p0.95:   1916796.928 us/op
                 countUppercase·p0.99:   1916796.928 us/op
                 countUppercase·p0.999:  1916796.928 us/op
                 countUppercase·p0.9999: 1916796.928 us/op
                 countUppercase·p1.00:   1916796.928 us/op

Iteration   9: 1940914.176 ±(99.9%) 59596.679 us/op
                 countUppercase·p0.00:   1908408.320 us/op
                 countUppercase·p0.50:   1943011.328 us/op
                 countUppercase·p0.90:   1965031.424 us/op
                 countUppercase·p0.95:   1965031.424 us/op
                 countUppercase·p0.99:   1965031.424 us/op
                 countUppercase·p0.999:  1965031.424 us/op
                 countUppercase·p0.9999: 1965031.424 us/op
                 countUppercase·p1.00:   1965031.424 us/op

Iteration  10: 1936020.821 ±(99.9%) 39610.039 us/op
                 countUppercase·p0.00:   1916796.928 us/op
                 countUppercase·p0.50:   1932525.568 us/op
                 countUppercase·p0.90:   1958739.968 us/op
                 countUppercase·p0.95:   1958739.968 us/op
                 countUppercase·p0.99:   1958739.968 us/op
                 countUppercase·p0.999:  1958739.968 us/op
                 countUppercase·p0.9999: 1958739.968 us/op
                 countUppercase·p1.00:   1958739.968 us/op

Iteration  11: 1940564.651 ±(99.9%) 52159.355 us/op
                 countUppercase·p0.00:   1920991.232 us/op
                 countUppercase·p0.50:   1937768.448 us/op
                 countUppercase·p0.90:   1969225.728 us/op
                 countUppercase·p0.95:   1969225.728 us/op
                 countUppercase·p0.99:   1969225.728 us/op
                 countUppercase·p0.999:  1969225.728 us/op
                 countUppercase·p0.9999: 1969225.728 us/op
                 countUppercase·p1.00:   1969225.728 us/op

Iteration  12: 1900369.237 ±(99.9%) 28909.808 us/op
                 countUppercase·p0.00:   1887436.800 us/op
                 countUppercase·p0.50:   1897922.560 us/op
                 countUppercase·p0.90:   1912602.624 us/op
                 countUppercase·p0.95:   1912602.624 us/op
                 countUppercase·p0.99:   1912602.624 us/op
                 countUppercase·p0.999:  1912602.624 us/op
                 countUppercase·p0.9999: 1912602.624 us/op
                 countUppercase·p1.00:   1912602.624 us/op

Iteration  13: 1956642.816 ±(99.9%) 37747.261 us/op
                 countUppercase·p0.00:   1941962.752 us/op
                 countUppercase·p0.50:   1954545.664 us/op
                 countUppercase·p0.90:   1981808.640 us/op
                 countUppercase·p0.95:   1981808.640 us/op
                 countUppercase·p0.99:   1981808.640 us/op
                 countUppercase·p0.999:  1981808.640 us/op
                 countUppercase·p0.9999: 1981808.640 us/op
                 countUppercase·p1.00:   1981808.640 us/op

Iteration  14: 1943011.328 ±(99.9%) 33005.941 us/op
                 countUppercase·p0.00:   1927282.688 us/op
                 countUppercase·p0.50:   1944059.904 us/op
                 countUppercase·p0.90:   1960837.120 us/op
                 countUppercase·p0.95:   1960837.120 us/op
                 countUppercase·p0.99:   1960837.120 us/op
                 countUppercase·p0.999:  1960837.120 us/op
                 countUppercase·p0.9999: 1960837.120 us/op
                 countUppercase·p1.00:   1960837.120 us/op

Iteration  15: 1911204.523 ±(99.9%) 32566.428 us/op
                 countUppercase·p0.00:   1897922.560 us/op
                 countUppercase·p0.50:   1909456.896 us/op
                 countUppercase·p0.90:   1927282.688 us/op
                 countUppercase·p0.95:   1927282.688 us/op
                 countUppercase·p0.99:   1927282.688 us/op
                 countUppercase·p0.999:  1927282.688 us/op
                 countUppercase·p0.9999: 1927282.688 us/op
                 countUppercase·p1.00:   1927282.688 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 90
  mean = 1932665.378 ±(99.9%) 7282.659 us/op

  Histogram, us/op:
    [1880000.000, 1890000.000) = 2 
    [1890000.000, 1900000.000) = 3 
    [1900000.000, 1910000.000) = 6 
    [1910000.000, 1920000.000) = 16 
    [1920000.000, 1930000.000) = 14 
    [1930000.000, 1940000.000) = 15 
    [1940000.000, 1950000.000) = 14 
    [1950000.000, 1960000.000) = 11 
    [1960000.000, 1970000.000) = 7 
    [1970000.000, 1980000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 1887436.800 us/op
     p(50.0000) = 1931476.992 us/op
     p(90.0000) = 1960627.405 us/op
     p(95.0000) = 1966918.861 us/op
     p(99.0000) = 1981808.640 us/op
     p(99.9000) = 1981808.640 us/op
     p(99.9900) = 1981808.640 us/op
     p(99.9990) = 1981808.640 us/op
     p(99.9999) = 1981808.640 us/op
    p(100.0000) = 1981808.640 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 80.43% complete, ETA 01:38:51
# Fork: 1 of 1
# Warmup Iteration   1: 1.176 ±(99.9%) 0.267 us/op
# Warmup Iteration   2: 0.743 ±(99.9%) 0.025 us/op
# Warmup Iteration   3: 0.726 ±(99.9%) 0.003 us/op
# Warmup Iteration   4: 0.725 ±(99.9%) 0.002 us/op
# Warmup Iteration   5: 0.727 ±(99.9%) 0.004 us/op
Iteration   1: 0.726 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   0.678 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.717 us/op
                 runFibonacci·p0.95:   0.720 us/op
                 runFibonacci·p0.99:   0.723 us/op
                 runFibonacci·p0.999:  6.818 us/op
                 runFibonacci·p0.9999: 14.922 us/op
                 runFibonacci·p1.00:   59.520 us/op

Iteration   2: 0.731 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   0.678 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.717 us/op
                 runFibonacci·p0.95:   0.719 us/op
                 runFibonacci·p0.99:   0.723 us/op
                 runFibonacci·p0.999:  7.045 us/op
                 runFibonacci·p0.9999: 25.184 us/op
                 runFibonacci·p1.00:   204.288 us/op

Iteration   3: 0.727 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   0.678 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.718 us/op
                 runFibonacci·p0.95:   0.721 us/op
                 runFibonacci·p0.99:   0.728 us/op
                 runFibonacci·p0.999:  6.858 us/op
                 runFibonacci·p0.9999: 18.580 us/op
                 runFibonacci·p1.00:   156.160 us/op

Iteration   4: 0.726 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   0.680 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.718 us/op
                 runFibonacci·p0.95:   0.721 us/op
                 runFibonacci·p0.99:   0.728 us/op
                 runFibonacci·p0.999:  6.686 us/op
                 runFibonacci·p0.9999: 15.374 us/op
                 runFibonacci·p1.00:   40.576 us/op

Iteration   5: 0.726 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   0.677 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.718 us/op
                 runFibonacci·p0.95:   0.721 us/op
                 runFibonacci·p0.99:   0.729 us/op
                 runFibonacci·p0.999:  6.325 us/op
                 runFibonacci·p0.9999: 14.679 us/op
                 runFibonacci·p1.00:   91.904 us/op

Iteration   6: 0.732 ±(99.9%) 0.009 us/op
                 runFibonacci·p0.00:   0.679 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.718 us/op
                 runFibonacci·p0.95:   0.720 us/op
                 runFibonacci·p0.99:   0.726 us/op
                 runFibonacci·p0.999:  6.724 us/op
                 runFibonacci·p0.9999: 20.988 us/op
                 runFibonacci·p1.00:   374.784 us/op

Iteration   7: 0.734 ±(99.9%) 0.011 us/op
                 runFibonacci·p0.00:   0.678 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.718 us/op
                 runFibonacci·p0.95:   0.721 us/op
                 runFibonacci·p0.99:   0.728 us/op
                 runFibonacci·p0.999:  7.198 us/op
                 runFibonacci·p0.9999: 20.689 us/op
                 runFibonacci·p1.00:   485.376 us/op

Iteration   8: 0.729 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   0.678 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.718 us/op
                 runFibonacci·p0.95:   0.720 us/op
                 runFibonacci·p0.99:   0.727 us/op
                 runFibonacci·p0.999:  7.297 us/op
                 runFibonacci·p0.9999: 22.283 us/op
                 runFibonacci·p1.00:   136.192 us/op

Iteration   9: 0.731 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   0.679 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.717 us/op
                 runFibonacci·p0.95:   0.720 us/op
                 runFibonacci·p0.99:   0.723 us/op
                 runFibonacci·p0.999:  7.571 us/op
                 runFibonacci·p0.9999: 24.524 us/op
                 runFibonacci·p1.00:   106.624 us/op

Iteration  10: 0.726 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   0.677 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.717 us/op
                 runFibonacci·p0.95:   0.720 us/op
                 runFibonacci·p0.99:   0.723 us/op
                 runFibonacci·p0.999:  6.231 us/op
                 runFibonacci·p0.9999: 15.017 us/op
                 runFibonacci·p1.00:   59.136 us/op

Iteration  11: 0.724 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   0.677 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.717 us/op
                 runFibonacci·p0.95:   0.720 us/op
                 runFibonacci·p0.99:   0.723 us/op
                 runFibonacci·p0.999:  5.570 us/op
                 runFibonacci·p0.9999: 12.991 us/op
                 runFibonacci·p1.00:   113.664 us/op

Iteration  12: 0.726 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   0.678 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.718 us/op
                 runFibonacci·p0.95:   0.720 us/op
                 runFibonacci·p0.99:   0.727 us/op
                 runFibonacci·p0.999:  6.642 us/op
                 runFibonacci·p0.9999: 16.954 us/op
                 runFibonacci·p1.00:   55.680 us/op

Iteration  13: 0.726 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   0.677 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.717 us/op
                 runFibonacci·p0.95:   0.719 us/op
                 runFibonacci·p0.99:   0.726 us/op
                 runFibonacci·p0.999:  6.641 us/op
                 runFibonacci·p0.9999: 16.638 us/op
                 runFibonacci·p1.00:   128.128 us/op

Iteration  14: 0.727 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   0.679 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.718 us/op
                 runFibonacci·p0.95:   0.720 us/op
                 runFibonacci·p0.99:   0.725 us/op
                 runFibonacci·p0.999:  6.253 us/op
                 runFibonacci·p0.9999: 17.414 us/op
                 runFibonacci·p1.00:   96.640 us/op

Iteration  15: 0.725 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   0.679 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.718 us/op
                 runFibonacci·p0.95:   0.720 us/op
                 runFibonacci·p0.99:   0.725 us/op
                 runFibonacci·p0.999:  6.071 us/op
                 runFibonacci·p0.9999: 14.457 us/op
                 runFibonacci·p1.00:   111.360 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 3401629
  mean =      0.728 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 3401593 
    [ 50.000, 100.000) = 22 
    [100.000, 150.000) = 5 
    [150.000, 200.000) = 1 
    [200.000, 250.000) = 2 
    [250.000, 300.000) = 1 
    [300.000, 350.000) = 2 
    [350.000, 400.000) = 2 
    [400.000, 450.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.677 us/op
     p(50.0000) =      0.709 us/op
     p(90.0000) =      0.718 us/op
     p(95.0000) =      0.720 us/op
     p(99.0000) =      0.726 us/op
     p(99.9000) =      6.715 us/op
     p(99.9900) =     17.744 us/op
     p(99.9990) =     52.158 us/op
     p(99.9999) =    356.483 us/op
    p(100.0000) =    485.376 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 81.16% complete, ETA 01:35:10
# Fork: 1 of 1
# Warmup Iteration   1: 1.997 ±(99.9%) 0.168 us/op
# Warmup Iteration   2: 1.654 ±(99.9%) 0.003 us/op
# Warmup Iteration   3: 1.660 ±(99.9%) 0.025 us/op
# Warmup Iteration   4: 1.653 ±(99.9%) 0.005 us/op
# Warmup Iteration   5: 1.650 ±(99.9%) 0.003 us/op
Iteration   1: 1.651 ±(99.9%) 0.002 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.646 us/op
                 runFibonacci·p0.99:   1.654 us/op
                 runFibonacci·p0.999:  7.946 us/op
                 runFibonacci·p0.9999: 16.484 us/op
                 runFibonacci·p1.00:   48.064 us/op

Iteration   2: 1.652 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.654 us/op
                 runFibonacci·p0.999:  7.545 us/op
                 runFibonacci·p0.9999: 20.673 us/op
                 runFibonacci·p1.00:   148.480 us/op

Iteration   3: 1.651 ±(99.9%) 0.002 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.654 us/op
                 runFibonacci·p0.999:  7.451 us/op
                 runFibonacci·p0.9999: 16.258 us/op
                 runFibonacci·p1.00:   136.448 us/op

Iteration   4: 1.650 ±(99.9%) 0.002 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.646 us/op
                 runFibonacci·p0.99:   1.656 us/op
                 runFibonacci·p0.999:  6.823 us/op
                 runFibonacci·p0.9999: 16.943 us/op
                 runFibonacci·p1.00:   54.720 us/op

Iteration   5: 1.652 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.654 us/op
                 runFibonacci·p0.999:  7.736 us/op
                 runFibonacci·p0.9999: 19.655 us/op
                 runFibonacci·p1.00:   90.112 us/op

Iteration   6: 1.650 ±(99.9%) 0.002 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.654 us/op
                 runFibonacci·p0.999:  6.915 us/op
                 runFibonacci·p0.9999: 17.554 us/op
                 runFibonacci·p1.00:   87.168 us/op

Iteration   7: 1.651 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.654 us/op
                 runFibonacci·p0.999:  7.643 us/op
                 runFibonacci·p0.9999: 20.401 us/op
                 runFibonacci·p1.00:   136.448 us/op

Iteration   8: 1.651 ±(99.9%) 0.002 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.656 us/op
                 runFibonacci·p0.999:  6.921 us/op
                 runFibonacci·p0.9999: 18.555 us/op
                 runFibonacci·p1.00:   80.768 us/op

Iteration   9: 1.651 ±(99.9%) 0.002 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.654 us/op
                 runFibonacci·p0.999:  7.037 us/op
                 runFibonacci·p0.9999: 18.369 us/op
                 runFibonacci·p1.00:   78.592 us/op

Iteration  10: 1.651 ±(99.9%) 0.002 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.654 us/op
                 runFibonacci·p0.999:  7.787 us/op
                 runFibonacci·p0.9999: 17.779 us/op
                 runFibonacci·p1.00:   73.472 us/op

Iteration  11: 1.650 ±(99.9%) 0.002 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.656 us/op
                 runFibonacci·p0.999:  6.832 us/op
                 runFibonacci·p0.9999: 15.960 us/op
                 runFibonacci·p1.00:   117.504 us/op

Iteration  12: 1.651 ±(99.9%) 0.002 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.654 us/op
                 runFibonacci·p0.999:  7.423 us/op
                 runFibonacci·p0.9999: 15.965 us/op
                 runFibonacci·p1.00:   111.104 us/op

Iteration  13: 1.653 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.646 us/op
                 runFibonacci·p0.99:   1.654 us/op
                 runFibonacci·p0.999:  7.081 us/op
                 runFibonacci·p0.9999: 21.782 us/op
                 runFibonacci·p1.00:   740.352 us/op

Iteration  14: 1.651 ±(99.9%) 0.002 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.656 us/op
                 runFibonacci·p0.999:  7.308 us/op
                 runFibonacci·p0.9999: 15.693 us/op
                 runFibonacci·p1.00:   102.400 us/op

Iteration  15: 1.653 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.660 us/op
                 runFibonacci·p0.999:  7.716 us/op
                 runFibonacci·p0.9999: 26.154 us/op
                 runFibonacci·p1.00:   47.936 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 5767643
  mean =      1.651 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 5767595 
    [ 50.000, 100.000) = 41 
    [100.000, 150.000) = 6 
    [150.000, 200.000) = 0 
    [200.000, 250.000) = 0 
    [250.000, 300.000) = 0 
    [300.000, 350.000) = 0 
    [350.000, 400.000) = 0 
    [400.000, 450.000) = 0 
    [450.000, 500.000) = 0 
    [500.000, 550.000) = 0 
    [550.000, 600.000) = 0 
    [600.000, 650.000) = 0 
    [650.000, 700.000) = 0 
    [700.000, 750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      1.606 us/op
     p(50.0000) =      1.632 us/op
     p(90.0000) =      1.644 us/op
     p(95.0000) =      1.648 us/op
     p(99.0000) =      1.654 us/op
     p(99.9000) =      7.408 us/op
     p(99.9900) =     18.208 us/op
     p(99.9990) =     46.357 us/op
     p(99.9999) =    112.591 us/op
    p(100.0000) =    740.352 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 81.88% complete, ETA 01:31:30
# Fork: 1 of 1
# Warmup Iteration   1: 3.748 ±(99.9%) 0.411 us/op
# Warmup Iteration   2: 2.850 ±(99.9%) 0.007 us/op
# Warmup Iteration   3: 2.845 ±(99.9%) 0.005 us/op
# Warmup Iteration   4: 2.855 ±(99.9%) 0.026 us/op
# Warmup Iteration   5: 2.843 ±(99.9%) 0.004 us/op
Iteration   1: 2.843 ±(99.9%) 0.005 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.848 us/op
                 runFibonacci·p0.999:  11.615 us/op
                 runFibonacci·p0.9999: 25.049 us/op
                 runFibonacci·p1.00:   140.288 us/op

Iteration   2: 2.854 ±(99.9%) 0.021 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.836 us/op
                 runFibonacci·p0.99:   2.848 us/op
                 runFibonacci·p0.999:  11.809 us/op
                 runFibonacci·p0.9999: 38.759 us/op
                 runFibonacci·p1.00:   1402.880 us/op

Iteration   3: 2.850 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.836 us/op
                 runFibonacci·p0.99:   2.856 us/op
                 runFibonacci·p0.999:  12.369 us/op
                 runFibonacci·p0.9999: 36.623 us/op
                 runFibonacci·p1.00:   176.640 us/op

Iteration   4: 2.850 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.848 us/op
                 runFibonacci·p0.999:  12.289 us/op
                 runFibonacci·p0.9999: 33.153 us/op
                 runFibonacci·p1.00:   156.160 us/op

Iteration   5: 2.847 ±(99.9%) 0.005 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.836 us/op
                 runFibonacci·p0.99:   2.860 us/op
                 runFibonacci·p0.999:  11.826 us/op
                 runFibonacci·p0.9999: 30.502 us/op
                 runFibonacci·p1.00:   108.928 us/op

Iteration   6: 2.849 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.836 us/op
                 runFibonacci·p0.99:   2.856 us/op
                 runFibonacci·p0.999:  12.100 us/op
                 runFibonacci·p0.9999: 30.069 us/op
                 runFibonacci·p1.00:   436.736 us/op

Iteration   7: 2.848 ±(99.9%) 0.005 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.836 us/op
                 runFibonacci·p0.99:   2.856 us/op
                 runFibonacci·p0.999:  11.954 us/op
                 runFibonacci·p0.9999: 35.012 us/op
                 runFibonacci·p1.00:   100.352 us/op

Iteration   8: 2.843 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.836 us/op
                 runFibonacci·p0.99:   2.852 us/op
                 runFibonacci·p0.999:  11.695 us/op
                 runFibonacci·p0.9999: 26.063 us/op
                 runFibonacci·p1.00:   80.896 us/op

Iteration   9: 2.842 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.836 us/op
                 runFibonacci·p0.99:   2.848 us/op
                 runFibonacci·p0.999:  11.584 us/op
                 runFibonacci·p0.9999: 27.747 us/op
                 runFibonacci·p1.00:   91.648 us/op

Iteration  10: 2.845 ±(99.9%) 0.005 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.836 us/op
                 runFibonacci·p0.99:   2.852 us/op
                 runFibonacci·p0.999:  11.902 us/op
                 runFibonacci·p0.9999: 27.891 us/op
                 runFibonacci·p1.00:   111.232 us/op

Iteration  11: 2.844 ±(99.9%) 0.005 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.848 us/op
                 runFibonacci·p0.999:  11.855 us/op
                 runFibonacci·p0.9999: 27.493 us/op
                 runFibonacci·p1.00:   183.040 us/op

Iteration  12: 2.843 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.836 us/op
                 runFibonacci·p0.99:   2.852 us/op
                 runFibonacci·p0.999:  11.278 us/op
                 runFibonacci·p0.9999: 24.729 us/op
                 runFibonacci·p1.00:   220.672 us/op

Iteration  13: 2.849 ±(99.9%) 0.005 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.836 us/op
                 runFibonacci·p0.99:   2.868 us/op
                 runFibonacci·p0.999:  11.836 us/op
                 runFibonacci·p0.9999: 27.365 us/op
                 runFibonacci·p1.00:   116.992 us/op

Iteration  14: 2.846 ±(99.9%) 0.005 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.852 us/op
                 runFibonacci·p0.999:  12.255 us/op
                 runFibonacci·p0.9999: 29.169 us/op
                 runFibonacci·p1.00:   81.408 us/op

Iteration  15: 2.843 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.852 us/op
                 runFibonacci·p0.999:  11.792 us/op
                 runFibonacci·p0.9999: 27.929 us/op
                 runFibonacci·p1.00:   71.424 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 3329612
  mean =      2.846 ±(99.9%) 0.002 us/op

  Histogram, us/op:
    [   0.000,  125.000) = 3329604 
    [ 125.000,  250.000) = 6 
    [ 250.000,  375.000) = 0 
    [ 375.000,  500.000) = 1 
    [ 500.000,  625.000) = 0 
    [ 625.000,  750.000) = 0 
    [ 750.000,  875.000) = 0 
    [ 875.000, 1000.000) = 0 
    [1000.000, 1125.000) = 0 
    [1125.000, 1250.000) = 0 
    [1250.000, 1375.000) = 0 
    [1375.000, 1500.000) = 1 
    [1500.000, 1625.000) = 0 
    [1625.000, 1750.000) = 0 
    [1750.000, 1875.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      2.772 us/op
     p(50.0000) =      2.808 us/op
     p(90.0000) =      2.828 us/op
     p(95.0000) =      2.836 us/op
     p(99.0000) =      2.852 us/op
     p(99.9000) =     11.856 us/op
     p(99.9900) =     29.952 us/op
     p(99.9990) =     73.643 us/op
     p(99.9999) =    208.268 us/op
    p(100.0000) =   1402.880 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 82.61% complete, ETA 01:27:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.292 ±(99.9%) 0.168 us/op
# Warmup Iteration   2: 0.127 ±(99.9%) 0.028 us/op
# Warmup Iteration   3: 0.148 ±(99.9%) 0.002 us/op
# Warmup Iteration   4: 0.151 ±(99.9%) 0.005 us/op
# Warmup Iteration   5: 0.168 ±(99.9%) 0.002 us/op
Iteration   1: 0.150 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.129 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.140 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.154 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.155 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.156 us/op
                 findLastPrefixUsingScanner1·p0.999:  3.260 us/op
                 findLastPrefixUsingScanner1·p0.9999: 10.402 us/op
                 findLastPrefixUsingScanner1·p1.00:   40.960 us/op

Iteration   2: 0.149 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.128 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.139 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.149 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.158 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.161 us/op
                 findLastPrefixUsingScanner1·p0.999:  3.368 us/op
                 findLastPrefixUsingScanner1·p0.9999: 10.962 us/op
                 findLastPrefixUsingScanner1·p1.00:   100.352 us/op

Iteration   3: 0.167 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.137 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.161 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.169 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.170 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.175 us/op
                 findLastPrefixUsingScanner1·p0.999:  3.474 us/op
                 findLastPrefixUsingScanner1·p0.9999: 10.777 us/op
                 findLastPrefixUsingScanner1·p1.00:   80.000 us/op

Iteration   4: 0.150 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.129 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.143 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.151 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.154 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.157 us/op
                 findLastPrefixUsingScanner1·p0.999:  3.349 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.959 us/op
                 findLastPrefixUsingScanner1·p1.00:   27.808 us/op

Iteration   5: 0.152 ±(99.9%) 0.010 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.129 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.142 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.146 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.149 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.155 us/op
                 findLastPrefixUsingScanner1·p0.999:  3.354 us/op
                 findLastPrefixUsingScanner1·p0.9999: 10.171 us/op
                 findLastPrefixUsingScanner1·p1.00:   703.488 us/op

Iteration   6: 0.149 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.129 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.140 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.151 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.155 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.160 us/op
                 findLastPrefixUsingScanner1·p0.999:  3.261 us/op
                 findLastPrefixUsingScanner1·p0.9999: 10.455 us/op
                 findLastPrefixUsingScanner1·p1.00:   54.208 us/op

Iteration   7: 0.151 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.129 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.143 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.151 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.154 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.163 us/op
                 findLastPrefixUsingScanner1·p0.999:  3.341 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.972 us/op
                 findLastPrefixUsingScanner1·p1.00:   30.880 us/op

Iteration   8: 0.147 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.128 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.140 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.145 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.147 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.155 us/op
                 findLastPrefixUsingScanner1·p0.999:  3.185 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.292 us/op
                 findLastPrefixUsingScanner1·p1.00:   29.952 us/op

Iteration   9: 0.170 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.130 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.165 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.170 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.170 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.175 us/op
                 findLastPrefixUsingScanner1·p0.999:  3.518 us/op
                 findLastPrefixUsingScanner1·p0.9999: 10.220 us/op
                 findLastPrefixUsingScanner1·p1.00:   26.592 us/op

Iteration  10: 0.150 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.128 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.143 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.150 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.151 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.154 us/op
                 findLastPrefixUsingScanner1·p0.999:  3.408 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.435 us/op
                 findLastPrefixUsingScanner1·p1.00:   39.808 us/op

Iteration  11: 0.150 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.128 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.141 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.151 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.157 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.170 us/op
                 findLastPrefixUsingScanner1·p0.999:  3.324 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.907 us/op
                 findLastPrefixUsingScanner1·p1.00:   50.432 us/op

Iteration  12: 0.149 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.128 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.142 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.145 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.146 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.154 us/op
                 findLastPrefixUsingScanner1·p0.999:  3.348 us/op
                 findLastPrefixUsingScanner1·p0.9999: 11.731 us/op
                 findLastPrefixUsingScanner1·p1.00:   130.304 us/op

Iteration  13: 0.148 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.128 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.139 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.148 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.154 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.155 us/op
                 findLastPrefixUsingScanner1·p0.999:  3.280 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.765 us/op
                 findLastPrefixUsingScanner1·p1.00:   41.984 us/op

Iteration  14: 0.150 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.128 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.141 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.151 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.155 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.161 us/op
                 findLastPrefixUsingScanner1·p0.999:  3.365 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.866 us/op
                 findLastPrefixUsingScanner1·p1.00:   42.816 us/op

Iteration  15: 0.149 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.129 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.141 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.152 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.154 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.173 us/op
                 findLastPrefixUsingScanner1·p0.999:  3.243 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.146 us/op
                 findLastPrefixUsingScanner1·p1.00:   47.040 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 3424338
  mean =      0.152 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 3424331 
    [ 50.000, 100.000) = 4 
    [100.000, 150.000) = 2 
    [150.000, 200.000) = 0 
    [200.000, 250.000) = 0 
    [250.000, 300.000) = 0 
    [300.000, 350.000) = 0 
    [350.000, 400.000) = 0 
    [400.000, 450.000) = 0 
    [450.000, 500.000) = 0 
    [500.000, 550.000) = 0 
    [550.000, 600.000) = 0 
    [600.000, 650.000) = 0 
    [650.000, 700.000) = 0 
    [700.000, 750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      0.128 us/op
     p(50.0000) =      0.142 us/op
     p(90.0000) =      0.158 us/op
     p(95.0000) =      0.166 us/op
     p(99.0000) =      0.170 us/op
     p(99.9000) =      3.343 us/op
     p(99.9900) =     10.025 us/op
     p(99.9990) =     26.319 us/op
     p(99.9999) =     91.716 us/op
    p(100.0000) =    703.488 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 83.33% complete, ETA 01:24:09
# Fork: 1 of 1
# Warmup Iteration   1: 1.218 ±(99.9%) 0.245 us/op
# Warmup Iteration   2: 0.788 ±(99.9%) 0.015 us/op
# Warmup Iteration   3: 0.819 ±(99.9%) 0.005 us/op
# Warmup Iteration   4: 0.792 ±(99.9%) 0.042 us/op
# Warmup Iteration   5: 0.792 ±(99.9%) 0.004 us/op
Iteration   1: 0.793 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.754 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.770 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.783 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.784 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.792 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.158 us/op
                 findLastPrefixUsingScanner1·p0.9999: 17.223 us/op
                 findLastPrefixUsingScanner1·p1.00:   153.344 us/op

Iteration   2: 0.829 ±(99.9%) 0.050 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.768 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.787 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.792 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.794 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.800 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.986 us/op
                 findLastPrefixUsingScanner1·p0.9999: 24.982 us/op
                 findLastPrefixUsingScanner1·p1.00:   2686.976 us/op

Iteration   3: 0.819 ±(99.9%) 0.073 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.744 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.758 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.770 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.772 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.779 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.214 us/op
                 findLastPrefixUsingScanner1·p0.9999: 19.416 us/op
                 findLastPrefixUsingScanner1·p1.00:   2772.992 us/op

Iteration   4: 0.819 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.780 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.802 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.807 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.809 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.820 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.844 us/op
                 findLastPrefixUsingScanner1·p0.9999: 17.710 us/op
                 findLastPrefixUsingScanner1·p1.00:   83.456 us/op

Iteration   5: 0.802 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.765 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.786 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.791 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.796 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.802 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.241 us/op
                 findLastPrefixUsingScanner1·p0.9999: 16.907 us/op
                 findLastPrefixUsingScanner1·p1.00:   43.072 us/op

Iteration   6: 0.803 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.765 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.783 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.792 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.793 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.800 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.278 us/op
                 findLastPrefixUsingScanner1·p0.9999: 17.417 us/op
                 findLastPrefixUsingScanner1·p1.00:   105.344 us/op

Iteration   7: 0.777 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.740 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.756 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.768 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.769 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.776 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.680 us/op
                 findLastPrefixUsingScanner1·p0.9999: 15.068 us/op
                 findLastPrefixUsingScanner1·p1.00:   71.552 us/op

Iteration   8: 0.778 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.740 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.754 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.768 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.773 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.776 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.170 us/op
                 findLastPrefixUsingScanner1·p0.9999: 20.798 us/op
                 findLastPrefixUsingScanner1·p1.00:   145.664 us/op

Iteration   9: 0.793 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.756 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.772 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.782 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.782 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.790 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.206 us/op
                 findLastPrefixUsingScanner1·p0.9999: 17.824 us/op
                 findLastPrefixUsingScanner1·p1.00:   127.104 us/op

Iteration  10: 0.776 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.740 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.755 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.767 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.768 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.776 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.846 us/op
                 findLastPrefixUsingScanner1·p0.9999: 16.160 us/op
                 findLastPrefixUsingScanner1·p1.00:   128.384 us/op

Iteration  11: 0.792 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.752 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.770 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.780 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.782 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.789 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.380 us/op
                 findLastPrefixUsingScanner1·p0.9999: 15.193 us/op
                 findLastPrefixUsingScanner1·p1.00:   246.272 us/op

Iteration  12: 0.793 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.752 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.769 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.780 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.783 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.789 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.886 us/op
                 findLastPrefixUsingScanner1·p0.9999: 22.030 us/op
                 findLastPrefixUsingScanner1·p1.00:   382.464 us/op

Iteration  13: 0.779 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.742 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.756 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.770 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.775 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.777 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.262 us/op
                 findLastPrefixUsingScanner1·p0.9999: 18.288 us/op
                 findLastPrefixUsingScanner1·p1.00:   44.032 us/op

Iteration  14: 0.794 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.752 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.769 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.780 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.781 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.786 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.830 us/op
                 findLastPrefixUsingScanner1·p0.9999: 21.933 us/op
                 findLastPrefixUsingScanner1·p1.00:   83.200 us/op

Iteration  15: 0.804 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.766 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.784 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.793 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.794 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.801 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.666 us/op
                 findLastPrefixUsingScanner1·p0.9999: 16.578 us/op
                 findLastPrefixUsingScanner1·p1.00:   77.952 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 3132308
  mean =      0.796 ±(99.9%) 0.006 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 3132302 
    [ 250.000,  500.000) = 1 
    [ 500.000,  750.000) = 0 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 1 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 3 

  Percentiles, us/op:
      p(0.0000) =      0.740 us/op
     p(50.0000) =      0.772 us/op
     p(90.0000) =      0.792 us/op
     p(95.0000) =      0.795 us/op
     p(99.0000) =      0.808 us/op
     p(99.9000) =      7.304 us/op
     p(99.9900) =     18.400 us/op
     p(99.9990) =     67.732 us/op
     p(99.9999) =   2674.146 us/op
    p(100.0000) =   2772.992 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 84.06% complete, ETA 01:20:29
# Fork: 1 of 1
# Warmup Iteration   1: 7.785 ±(99.9%) 0.381 us/op
# Warmup Iteration   2: 7.596 ±(99.9%) 0.030 us/op
# Warmup Iteration   3: 7.177 ±(99.9%) 0.026 us/op
# Warmup Iteration   4: 7.281 ±(99.9%) 0.027 us/op
# Warmup Iteration   5: 7.175 ±(99.9%) 0.005 us/op
Iteration   1: 7.345 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.024 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.072 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.856 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.864 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.688 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.024 us/op
                 findLastPrefixUsingScanner1·p0.9999: 39.083 us/op
                 findLastPrefixUsingScanner1·p1.00:   137.984 us/op

Iteration   2: 7.302 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   6.960 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.000 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.792 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.792 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.752 us/op
                 findLastPrefixUsingScanner1·p0.999:  16.864 us/op
                 findLastPrefixUsingScanner1·p0.9999: 32.744 us/op
                 findLastPrefixUsingScanner1·p1.00:   154.112 us/op

Iteration   3: 7.107 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner1·p0.00:   6.968 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.008 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.016 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.080 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.448 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.844 us/op
                 findLastPrefixUsingScanner1·p0.9999: 45.876 us/op
                 findLastPrefixUsingScanner1·p1.00:   188.672 us/op

Iteration   4: 7.143 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.024 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.072 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.088 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.096 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.112 us/op
                 findLastPrefixUsingScanner1·p0.999:  16.240 us/op
                 findLastPrefixUsingScanner1·p0.9999: 34.625 us/op
                 findLastPrefixUsingScanner1·p1.00:   446.976 us/op

Iteration   5: 7.304 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner1·p0.00:   6.968 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.016 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.808 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.816 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.448 us/op
                 findLastPrefixUsingScanner1·p0.999:  16.672 us/op
                 findLastPrefixUsingScanner1·p0.9999: 35.713 us/op
                 findLastPrefixUsingScanner1·p1.00:   470.528 us/op

Iteration   6: 7.117 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner1·p0.00:   6.992 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.040 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.056 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.064 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.032 us/op
                 findLastPrefixUsingScanner1·p0.999:  19.043 us/op
                 findLastPrefixUsingScanner1·p0.9999: 55.212 us/op
                 findLastPrefixUsingScanner1·p1.00:   219.136 us/op

Iteration   7: 7.093 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner1·p0.00:   6.976 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.016 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.024 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.032 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.032 us/op
                 findLastPrefixUsingScanner1·p0.999:  19.280 us/op
                 findLastPrefixUsingScanner1·p0.9999: 51.184 us/op
                 findLastPrefixUsingScanner1·p1.00:   130.176 us/op

Iteration   8: 7.344 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   6.992 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.040 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.832 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.840 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.656 us/op
                 findLastPrefixUsingScanner1·p0.999:  16.896 us/op
                 findLastPrefixUsingScanner1·p0.9999: 38.258 us/op
                 findLastPrefixUsingScanner1·p1.00:   192.256 us/op

Iteration   9: 7.062 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner1·p0.00:   6.944 us/op
                 findLastPrefixUsingScanner1·p0.50:   6.984 us/op
                 findLastPrefixUsingScanner1·p0.90:   6.992 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.000 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.224 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.326 us/op
                 findLastPrefixUsingScanner1·p0.9999: 43.512 us/op
                 findLastPrefixUsingScanner1·p1.00:   129.920 us/op

Iteration  10: 7.088 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner1·p0.00:   6.968 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.008 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.016 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.024 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.320 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.993 us/op
                 findLastPrefixUsingScanner1·p0.9999: 42.383 us/op
                 findLastPrefixUsingScanner1·p1.00:   167.680 us/op

Iteration  11: 7.088 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner1·p0.00:   6.944 us/op
                 findLastPrefixUsingScanner1·p0.50:   6.984 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.000 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.072 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.352 us/op
                 findLastPrefixUsingScanner1·p0.999:  19.120 us/op
                 findLastPrefixUsingScanner1·p0.9999: 53.184 us/op
                 findLastPrefixUsingScanner1·p1.00:   125.312 us/op

Iteration  12: 7.300 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   6.888 us/op
                 findLastPrefixUsingScanner1·p0.50:   6.936 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.736 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.736 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.176 us/op
                 findLastPrefixUsingScanner1·p0.999:  16.960 us/op
                 findLastPrefixUsingScanner1·p0.9999: 38.038 us/op
                 findLastPrefixUsingScanner1·p1.00:   146.944 us/op

Iteration  13: 7.393 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.080 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.128 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.920 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.928 us/op
                 findLastPrefixUsingScanner1·p0.99:   9.312 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.120 us/op
                 findLastPrefixUsingScanner1·p0.9999: 37.027 us/op
                 findLastPrefixUsingScanner1·p1.00:   155.904 us/op

Iteration  14: 7.360 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.016 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.064 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.848 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.856 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.864 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.442 us/op
                 findLastPrefixUsingScanner1·p0.9999: 37.632 us/op
                 findLastPrefixUsingScanner1·p1.00:   189.696 us/op

Iteration  15: 7.147 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.032 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.072 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.088 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.096 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.112 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.408 us/op
                 findLastPrefixUsingScanner1·p0.9999: 38.405 us/op
                 findLastPrefixUsingScanner1·p1.00:   146.432 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 4145870
  mean =      7.241 ±(99.9%) 0.002 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 4145645 
    [ 50.000, 100.000) = 166 
    [100.000, 150.000) = 46 
    [150.000, 200.000) = 8 
    [200.000, 250.000) = 1 
    [250.000, 300.000) = 0 
    [300.000, 350.000) = 1 
    [350.000, 400.000) = 0 
    [400.000, 450.000) = 2 

  Percentiles, us/op:
      p(0.0000) =      6.888 us/op
     p(50.0000) =      7.056 us/op
     p(90.0000) =      7.816 us/op
     p(95.0000) =      7.848 us/op
     p(99.0000) =     10.416 us/op
     p(99.9000) =     17.312 us/op
     p(99.9900) =     39.168 us/op
     p(99.9990) =    117.957 us/op
     p(99.9999) =    300.914 us/op
    p(100.0000) =    470.528 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 84.78% complete, ETA 01:16:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.336 ±(99.9%) 0.174 us/op
# Warmup Iteration   2: 0.106 ±(99.9%) 0.004 us/op
# Warmup Iteration   3: 0.099 ±(99.9%) 0.001 us/op
# Warmup Iteration   4: 0.098 ±(99.9%) 0.001 us/op
# Warmup Iteration   5: 0.099 ±(99.9%) 0.001 us/op
Iteration   1: 0.098 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.094 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.099 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.246 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.145 us/op
                 findLastPrefixUsingScanner2·p1.00:   18.656 us/op

Iteration   2: 0.098 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.094 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.095 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.100 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.225 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.891 us/op
                 findLastPrefixUsingScanner2·p1.00:   20.224 us/op

Iteration   3: 0.100 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.094 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.113 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.287 us/op
                 findLastPrefixUsingScanner2·p0.9999: 9.526 us/op
                 findLastPrefixUsingScanner2·p1.00:   125.824 us/op

Iteration   4: 0.099 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.094 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.111 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.209 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.046 us/op
                 findLastPrefixUsingScanner2·p1.00:   218.624 us/op

Iteration   5: 0.098 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.094 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.113 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.197 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.194 us/op
                 findLastPrefixUsingScanner2·p1.00:   25.408 us/op

Iteration   6: 0.098 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.094 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.104 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.208 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.198 us/op
                 findLastPrefixUsingScanner2·p1.00:   24.736 us/op

Iteration   7: 0.099 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.094 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.105 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.269 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.474 us/op
                 findLastPrefixUsingScanner2·p1.00:   84.608 us/op

Iteration   8: 0.098 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.094 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.095 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.097 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.225 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.150 us/op
                 findLastPrefixUsingScanner2·p1.00:   25.344 us/op

Iteration   9: 0.099 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.094 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.095 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.097 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.234 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.041 us/op
                 findLastPrefixUsingScanner2·p1.00:   81.664 us/op

Iteration  10: 0.100 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.090 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.095 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.098 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.108 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.226 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.191 us/op
                 findLastPrefixUsingScanner2·p1.00:   81.024 us/op

Iteration  11: 0.098 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.094 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.095 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.097 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.224 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.293 us/op
                 findLastPrefixUsingScanner2·p1.00:   54.272 us/op

Iteration  12: 0.099 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.094 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.095 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.099 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.182 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.877 us/op
                 findLastPrefixUsingScanner2·p1.00:   151.808 us/op

Iteration  13: 0.098 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.094 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.095 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.098 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.287 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.345 us/op
                 findLastPrefixUsingScanner2·p1.00:   46.080 us/op

Iteration  14: 0.098 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.090 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.094 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.101 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.226 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.026 us/op
                 findLastPrefixUsingScanner2·p1.00:   32.000 us/op

Iteration  15: 0.098 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.094 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.097 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.218 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.684 us/op
                 findLastPrefixUsingScanner2·p1.00:   27.616 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 3969585
  mean =      0.098 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 3969558 
    [ 25.000,  50.000) = 17 
    [ 50.000,  75.000) = 3 
    [ 75.000, 100.000) = 3 
    [100.000, 125.000) = 1 
    [125.000, 150.000) = 1 
    [150.000, 175.000) = 1 
    [175.000, 200.000) = 0 
    [200.000, 225.000) = 1 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.089 us/op
     p(50.0000) =      0.094 us/op
     p(90.0000) =      0.096 us/op
     p(95.0000) =      0.096 us/op
     p(99.0000) =      0.106 us/op
     p(99.9000) =      0.228 us/op
     p(99.9900) =      8.272 us/op
     p(99.9990) =     21.988 us/op
     p(99.9999) =    102.864 us/op
    p(100.0000) =    218.624 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 85.50% complete, ETA 01:13:08
# Fork: 1 of 1
# Warmup Iteration   1: 1.313 ±(99.9%) 0.299 us/op
# Warmup Iteration   2: 0.594 ±(99.9%) 0.003 us/op
# Warmup Iteration   3: 0.665 ±(99.9%) 0.003 us/op
# Warmup Iteration   4: 0.698 ±(99.9%) 0.005 us/op
# Warmup Iteration   5: 0.691 ±(99.9%) 0.004 us/op
Iteration   1: 0.708 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.644 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.687 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.691 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.697 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.703 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.960 us/op
                 findLastPrefixUsingScanner2·p0.9999: 25.510 us/op
                 findLastPrefixUsingScanner2·p1.00:   169.984 us/op

Iteration   2: 0.665 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.601 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.648 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.651 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.652 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.660 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.190 us/op
                 findLastPrefixUsingScanner2·p0.9999: 22.990 us/op
                 findLastPrefixUsingScanner2·p1.00:   108.416 us/op

Iteration   3: 0.681 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.629 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.663 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.666 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.667 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.676 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.784 us/op
                 findLastPrefixUsingScanner2·p0.9999: 27.171 us/op
                 findLastPrefixUsingScanner2·p1.00:   155.904 us/op

Iteration   4: 0.693 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.633 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.675 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.680 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.686 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.693 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.107 us/op
                 findLastPrefixUsingScanner2·p0.9999: 18.988 us/op
                 findLastPrefixUsingScanner2·p1.00:   139.520 us/op

Iteration   5: 0.703 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.639 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.687 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.690 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.690 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.696 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.395 us/op
                 findLastPrefixUsingScanner2·p0.9999: 18.172 us/op
                 findLastPrefixUsingScanner2·p1.00:   120.704 us/op

Iteration   6: 0.665 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.602 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.650 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.653 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.654 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.660 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.153 us/op
                 findLastPrefixUsingScanner2·p0.9999: 19.174 us/op
                 findLastPrefixUsingScanner2·p1.00:   117.376 us/op

Iteration   7: 0.676 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.615 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.661 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.664 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.665 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.670 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.377 us/op
                 findLastPrefixUsingScanner2·p0.9999: 13.814 us/op
                 findLastPrefixUsingScanner2·p1.00:   113.920 us/op

Iteration   8: 0.663 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.596 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.648 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.651 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.652 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.659 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.227 us/op
                 findLastPrefixUsingScanner2·p0.9999: 18.388 us/op
                 findLastPrefixUsingScanner2·p1.00:   67.200 us/op

Iteration   9: 0.664 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.605 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.648 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.651 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.652 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.659 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.445 us/op
                 findLastPrefixUsingScanner2·p0.9999: 18.519 us/op
                 findLastPrefixUsingScanner2·p1.00:   136.448 us/op

Iteration  10: 0.703 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.656 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.687 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.690 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.691 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.697 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.587 us/op
                 findLastPrefixUsingScanner2·p0.9999: 14.060 us/op
                 findLastPrefixUsingScanner2·p1.00:   174.848 us/op

Iteration  11: 0.677 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.615 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.661 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.664 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.665 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.671 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.578 us/op
                 findLastPrefixUsingScanner2·p0.9999: 15.948 us/op
                 findLastPrefixUsingScanner2·p1.00:   111.744 us/op

Iteration  12: 0.662 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.602 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.648 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.651 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.652 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.666 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.187 us/op
                 findLastPrefixUsingScanner2·p0.9999: 13.976 us/op
                 findLastPrefixUsingScanner2·p1.00:   64.960 us/op

Iteration  13: 0.664 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.596 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.648 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.651 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.651 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.656 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.712 us/op
                 findLastPrefixUsingScanner2·p0.9999: 16.218 us/op
                 findLastPrefixUsingScanner2·p1.00:   104.960 us/op

Iteration  14: 0.690 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.639 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.673 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.677 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.682 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.688 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.023 us/op
                 findLastPrefixUsingScanner2·p0.9999: 14.667 us/op
                 findLastPrefixUsingScanner2·p1.00:   80.640 us/op

Iteration  15: 0.664 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.606 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.651 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.653 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.654 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.657 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.344 us/op
                 findLastPrefixUsingScanner2·p0.9999: 14.135 us/op
                 findLastPrefixUsingScanner2·p1.00:   45.632 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 3673704
  mean =      0.678 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  12.500) = 3673036 
    [ 12.500,  25.000) = 467 
    [ 25.000,  37.500) = 128 
    [ 37.500,  50.000) = 31 
    [ 50.000,  62.500) = 10 
    [ 62.500,  75.000) = 6 
    [ 75.000,  87.500) = 5 
    [ 87.500, 100.000) = 5 
    [100.000, 112.500) = 7 
    [112.500, 125.000) = 4 
    [125.000, 137.500) = 1 
    [137.500, 150.000) = 1 
    [150.000, 162.500) = 1 
    [162.500, 175.000) = 2 
    [175.000, 187.500) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.596 us/op
     p(50.0000) =      0.656 us/op
     p(90.0000) =      0.687 us/op
     p(95.0000) =      0.689 us/op
     p(99.0000) =      0.696 us/op
     p(99.9000) =      5.592 us/op
     p(99.9900) =     18.516 us/op
     p(99.9990) =     60.264 us/op
     p(99.9999) =    144.866 us/op
    p(100.0000) =    174.848 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 86.23% complete, ETA 01:09:28
# Fork: 1 of 1
# Warmup Iteration   1: 6.440 ±(99.9%) 0.217 us/op
# Warmup Iteration   2: 6.495 ±(99.9%) 0.158 us/op
# Warmup Iteration   3: 6.801 ±(99.9%) 0.052 us/op
# Warmup Iteration   4: 6.629 ±(99.9%) 0.010 us/op
# Warmup Iteration   5: 6.658 ±(99.9%) 0.008 us/op
Iteration   1: 6.770 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.560 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.696 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.704 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.712 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.872 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.847 us/op
                 findLastPrefixUsingScanner2·p0.9999: 42.016 us/op
                 findLastPrefixUsingScanner2·p1.00:   199.680 us/op

Iteration   2: 6.796 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.360 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.720 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.728 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.736 us/op
                 findLastPrefixUsingScanner2·p0.99:   10.016 us/op
                 findLastPrefixUsingScanner2·p0.999:  19.947 us/op
                 findLastPrefixUsingScanner2·p0.9999: 47.420 us/op
                 findLastPrefixUsingScanner2·p1.00:   174.080 us/op

Iteration   3: 6.758 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.328 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.680 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.688 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.696 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.792 us/op
                 findLastPrefixUsingScanner2·p0.999:  19.677 us/op
                 findLastPrefixUsingScanner2·p0.9999: 48.050 us/op
                 findLastPrefixUsingScanner2·p1.00:   134.400 us/op

Iteration   4: 7.010 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.592 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.936 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.952 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.960 us/op
                 findLastPrefixUsingScanner2·p0.99:   10.080 us/op
                 findLastPrefixUsingScanner2·p0.999:  20.265 us/op
                 findLastPrefixUsingScanner2·p0.9999: 45.318 us/op
                 findLastPrefixUsingScanner2·p1.00:   245.248 us/op

Iteration   5: 6.779 ±(99.9%) 0.010 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.392 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.696 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.704 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.704 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.968 us/op
                 findLastPrefixUsingScanner2·p0.999:  21.765 us/op
                 findLastPrefixUsingScanner2·p0.9999: 54.047 us/op
                 findLastPrefixUsingScanner2·p1.00:   195.584 us/op

Iteration   6: 6.715 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.280 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.640 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.648 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.656 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.350 us/op
                 findLastPrefixUsingScanner2·p0.999:  19.190 us/op
                 findLastPrefixUsingScanner2·p0.9999: 47.147 us/op
                 findLastPrefixUsingScanner2·p1.00:   161.280 us/op

Iteration   7: 6.653 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.216 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.584 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.592 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.600 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.270 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.876 us/op
                 findLastPrefixUsingScanner2·p0.9999: 47.485 us/op
                 findLastPrefixUsingScanner2·p1.00:   180.736 us/op

Iteration   8: 6.758 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.320 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.688 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.696 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.704 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.479 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.153 us/op
                 findLastPrefixUsingScanner2·p0.9999: 48.013 us/op
                 findLastPrefixUsingScanner2·p1.00:   119.936 us/op

Iteration   9: 6.682 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.272 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.616 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.624 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.624 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.210 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.034 us/op
                 findLastPrefixUsingScanner2·p0.9999: 52.056 us/op
                 findLastPrefixUsingScanner2·p1.00:   156.160 us/op

Iteration  10: 6.845 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.424 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.768 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.784 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.792 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.760 us/op
                 findLastPrefixUsingScanner2·p0.999:  19.514 us/op
                 findLastPrefixUsingScanner2·p0.9999: 59.730 us/op
                 findLastPrefixUsingScanner2·p1.00:   158.720 us/op

Iteration  11: 6.708 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.280 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.648 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.656 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.656 us/op
                 findLastPrefixUsingScanner2·p0.99:   8.928 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.844 us/op
                 findLastPrefixUsingScanner2·p0.9999: 43.986 us/op
                 findLastPrefixUsingScanner2·p1.00:   110.336 us/op

Iteration  12: 6.706 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.296 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.640 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.648 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.656 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.008 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.800 us/op
                 findLastPrefixUsingScanner2·p0.9999: 48.206 us/op
                 findLastPrefixUsingScanner2·p1.00:   171.776 us/op

Iteration  13: 6.696 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.256 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.632 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.640 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.640 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.529 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.239 us/op
                 findLastPrefixUsingScanner2·p0.9999: 43.394 us/op
                 findLastPrefixUsingScanner2·p1.00:   180.992 us/op

Iteration  14: 6.597 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.168 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.536 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.544 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.544 us/op
                 findLastPrefixUsingScanner2·p0.99:   8.528 us/op
                 findLastPrefixUsingScanner2·p0.999:  16.800 us/op
                 findLastPrefixUsingScanner2·p0.9999: 39.526 us/op
                 findLastPrefixUsingScanner2·p1.00:   104.320 us/op

Iteration  15: 6.563 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.144 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.504 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.512 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.512 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.092 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.162 us/op
                 findLastPrefixUsingScanner2·p0.9999: 41.279 us/op
                 findLastPrefixUsingScanner2·p1.00:   91.520 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 2790305
  mean =      6.734 ±(99.9%) 0.002 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 2788779 
    [ 25.000,  50.000) = 1292 
    [ 50.000,  75.000) = 157 
    [ 75.000, 100.000) = 33 
    [100.000, 125.000) = 26 
    [125.000, 150.000) = 4 
    [150.000, 175.000) = 9 
    [175.000, 200.000) = 4 
    [200.000, 225.000) = 0 
    [225.000, 250.000) = 1 
    [250.000, 275.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      6.144 us/op
     p(50.0000) =      6.648 us/op
     p(90.0000) =      6.776 us/op
     p(95.0000) =      6.928 us/op
     p(99.0000) =      9.600 us/op
     p(99.9000) =     18.528 us/op
     p(99.9900) =     46.720 us/op
     p(99.9990) =    112.161 us/op
     p(99.9999) =    196.443 us/op
    p(100.0000) =    245.248 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 86.95% complete, ETA 01:05:48
# Fork: 1 of 1
# Warmup Iteration   1: 14721.422 ±(99.9%) 273.628 us/op
# Warmup Iteration   2: 14465.981 ±(99.9%) 32.551 us/op
# Warmup Iteration   3: 14456.749 ±(99.9%) 6.427 us/op
# Warmup Iteration   4: 14451.895 ±(99.9%) 5.023 us/op
# Warmup Iteration   5: 14456.134 ±(99.9%) 5.141 us/op
Iteration   1: 14461.626 ±(99.9%) 5.231 us/op
                 runAlgorithm·p0.00:   14385.152 us/op
                 runAlgorithm·p0.50:   14450.688 us/op
                 runAlgorithm·p0.90:   14499.840 us/op
                 runAlgorithm·p0.95:   14532.608 us/op
                 runAlgorithm·p0.99:   14630.912 us/op
                 runAlgorithm·p0.999:  14778.368 us/op
                 runAlgorithm·p0.9999: 14778.368 us/op
                 runAlgorithm·p1.00:   14778.368 us/op

Iteration   2: 14461.366 ±(99.9%) 5.620 us/op
                 runAlgorithm·p0.00:   14385.152 us/op
                 runAlgorithm·p0.50:   14450.688 us/op
                 runAlgorithm·p0.90:   14499.840 us/op
                 runAlgorithm·p0.95:   14538.342 us/op
                 runAlgorithm·p0.99:   14648.443 us/op
                 runAlgorithm·p0.999:  14745.600 us/op
                 runAlgorithm·p0.9999: 14745.600 us/op
                 runAlgorithm·p1.00:   14745.600 us/op

Iteration   3: 14504.043 ±(99.9%) 24.178 us/op
                 runAlgorithm·p0.00:   14385.152 us/op
                 runAlgorithm·p0.50:   14467.072 us/op
                 runAlgorithm·p0.90:   14565.376 us/op
                 runAlgorithm·p0.95:   14647.296 us/op
                 runAlgorithm·p0.99:   15502.213 us/op
                 runAlgorithm·p0.999:  17104.896 us/op
                 runAlgorithm·p0.9999: 17104.896 us/op
                 runAlgorithm·p1.00:   17104.896 us/op

Iteration   4: 14502.143 ±(99.9%) 31.445 us/op
                 runAlgorithm·p0.00:   14401.536 us/op
                 runAlgorithm·p0.50:   14467.072 us/op
                 runAlgorithm·p0.90:   14532.608 us/op
                 runAlgorithm·p0.95:   14581.760 us/op
                 runAlgorithm·p0.99:   15579.546 us/op
                 runAlgorithm·p0.999:  17629.184 us/op
                 runAlgorithm·p0.9999: 17629.184 us/op
                 runAlgorithm·p1.00:   17629.184 us/op

Iteration   5: 14466.005 ±(99.9%) 6.273 us/op
                 runAlgorithm·p0.00:   14385.152 us/op
                 runAlgorithm·p0.50:   14450.688 us/op
                 runAlgorithm·p0.90:   14516.224 us/op
                 runAlgorithm·p0.95:   14565.376 us/op
                 runAlgorithm·p0.99:   14680.064 us/op
                 runAlgorithm·p0.999:  14745.600 us/op
                 runAlgorithm·p0.9999: 14745.600 us/op
                 runAlgorithm·p1.00:   14745.600 us/op

Iteration   6: 14467.641 ±(99.9%) 5.686 us/op
                 runAlgorithm·p0.00:   14401.536 us/op
                 runAlgorithm·p0.50:   14467.072 us/op
                 runAlgorithm·p0.90:   14516.224 us/op
                 runAlgorithm·p0.95:   14532.608 us/op
                 runAlgorithm·p0.99:   14663.680 us/op
                 runAlgorithm·p0.999:  14778.368 us/op
                 runAlgorithm·p0.9999: 14778.368 us/op
                 runAlgorithm·p1.00:   14778.368 us/op

Iteration   7: 14474.802 ±(99.9%) 11.474 us/op
                 runAlgorithm·p0.00:   14385.152 us/op
                 runAlgorithm·p0.50:   14450.688 us/op
                 runAlgorithm·p0.90:   14516.224 us/op
                 runAlgorithm·p0.95:   14588.314 us/op
                 runAlgorithm·p0.99:   14991.360 us/op
                 runAlgorithm·p0.999:  15319.040 us/op
                 runAlgorithm·p0.9999: 15319.040 us/op
                 runAlgorithm·p1.00:   15319.040 us/op

Iteration   8: 14462.923 ±(99.9%) 5.559 us/op
                 runAlgorithm·p0.00:   14385.152 us/op
                 runAlgorithm·p0.50:   14450.688 us/op
                 runAlgorithm·p0.90:   14499.840 us/op
                 runAlgorithm·p0.95:   14532.608 us/op
                 runAlgorithm·p0.99:   14649.917 us/op
                 runAlgorithm·p0.999:  14745.600 us/op
                 runAlgorithm·p0.9999: 14745.600 us/op
                 runAlgorithm·p1.00:   14745.600 us/op

Iteration   9: 14456.039 ±(99.9%) 4.900 us/op
                 runAlgorithm·p0.00:   14385.152 us/op
                 runAlgorithm·p0.50:   14450.688 us/op
                 runAlgorithm·p0.90:   14499.840 us/op
                 runAlgorithm·p0.95:   14516.224 us/op
                 runAlgorithm·p0.99:   14630.912 us/op
                 runAlgorithm·p0.999:  14745.600 us/op
                 runAlgorithm·p0.9999: 14745.600 us/op
                 runAlgorithm·p1.00:   14745.600 us/op

Iteration  10: 14466.147 ±(99.9%) 7.599 us/op
                 runAlgorithm·p0.00:   14385.152 us/op
                 runAlgorithm·p0.50:   14450.688 us/op
                 runAlgorithm·p0.90:   14499.840 us/op
                 runAlgorithm·p0.95:   14532.608 us/op
                 runAlgorithm·p0.99:   14812.447 us/op
                 runAlgorithm·p0.999:  15024.128 us/op
                 runAlgorithm·p0.9999: 15024.128 us/op
                 runAlgorithm·p1.00:   15024.128 us/op

Iteration  11: 14466.669 ±(99.9%) 6.406 us/op
                 runAlgorithm·p0.00:   14401.536 us/op
                 runAlgorithm·p0.50:   14450.688 us/op
                 runAlgorithm·p0.90:   14516.224 us/op
                 runAlgorithm·p0.95:   14555.546 us/op
                 runAlgorithm·p0.99:   14663.680 us/op
                 runAlgorithm·p0.999:  15024.128 us/op
                 runAlgorithm·p0.9999: 15024.128 us/op
                 runAlgorithm·p1.00:   15024.128 us/op

Iteration  12: 14492.764 ±(99.9%) 30.703 us/op
                 runAlgorithm·p0.00:   14385.152 us/op
                 runAlgorithm·p0.50:   14467.072 us/op
                 runAlgorithm·p0.90:   14516.224 us/op
                 runAlgorithm·p0.95:   14556.365 us/op
                 runAlgorithm·p0.99:   14881.423 us/op
                 runAlgorithm·p0.999:  17301.504 us/op
                 runAlgorithm·p0.9999: 17301.504 us/op
                 runAlgorithm·p1.00:   17301.504 us/op

Iteration  13: 14473.924 ±(99.9%) 6.086 us/op
                 runAlgorithm·p0.00:   14401.536 us/op
                 runAlgorithm·p0.50:   14467.072 us/op
                 runAlgorithm·p0.90:   14532.608 us/op
                 runAlgorithm·p0.95:   14565.376 us/op
                 runAlgorithm·p0.99:   14663.680 us/op
                 runAlgorithm·p0.999:  14778.368 us/op
                 runAlgorithm·p0.9999: 14778.368 us/op
                 runAlgorithm·p1.00:   14778.368 us/op

Iteration  14: 14468.732 ±(99.9%) 5.807 us/op
                 runAlgorithm·p0.00:   14401.536 us/op
                 runAlgorithm·p0.50:   14467.072 us/op
                 runAlgorithm·p0.90:   14516.224 us/op
                 runAlgorithm·p0.95:   14548.992 us/op
                 runAlgorithm·p0.99:   14663.680 us/op
                 runAlgorithm·p0.999:  14843.904 us/op
                 runAlgorithm·p0.9999: 14843.904 us/op
                 runAlgorithm·p1.00:   14843.904 us/op

Iteration  15: 14466.503 ±(99.9%) 5.737 us/op
                 runAlgorithm·p0.00:   14401.536 us/op
                 runAlgorithm·p0.50:   14450.688 us/op
                 runAlgorithm·p0.90:   14516.224 us/op
                 runAlgorithm·p0.95:   14548.992 us/op
                 runAlgorithm·p0.99:   14647.296 us/op
                 runAlgorithm·p0.999:  14811.136 us/op
                 runAlgorithm·p0.9999: 14811.136 us/op
                 runAlgorithm·p1.00:   14811.136 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  N = 10365
  mean =  14472.744 ±(99.9%) 3.681 us/op

  Histogram, us/op:
    [14000.000, 14250.000) = 0 
    [14250.000, 14500.000) = 9073 
    [14500.000, 14750.000) = 1214 
    [14750.000, 15000.000) = 40 
    [15000.000, 15250.000) = 12 
    [15250.000, 15500.000) = 7 
    [15500.000, 15750.000) = 4 
    [15750.000, 16000.000) = 1 
    [16000.000, 16250.000) = 2 
    [16250.000, 16500.000) = 1 
    [16500.000, 16750.000) = 1 
    [16750.000, 17000.000) = 0 
    [17000.000, 17250.000) = 7 
    [17250.000, 17500.000) = 2 
    [17500.000, 17750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  14385.152 us/op
     p(50.0000) =  14450.688 us/op
     p(90.0000) =  14516.224 us/op
     p(95.0000) =  14548.992 us/op
     p(99.0000) =  14712.832 us/op
     p(99.9000) =  16936.993 us/op
     p(99.9900) =  17617.191 us/op
     p(99.9990) =  17629.184 us/op
     p(99.9999) =  17629.184 us/op
    p(100.0000) =  17629.184 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 87.68% complete, ETA 01:02:09
# Fork: 1 of 1
# Warmup Iteration   1: 414.855 ±(99.9%) 10.222 us/op
# Warmup Iteration   2: 430.744 ±(99.9%) 5.338 us/op
# Warmup Iteration   3: 426.468 ±(99.9%) 4.219 us/op
# Warmup Iteration   4: 425.881 ±(99.9%) 3.907 us/op
# Warmup Iteration   5: 429.902 ±(99.9%) 5.023 us/op
Iteration   1: 428.659 ±(99.9%) 5.249 us/op
                 runAlgorithm·p0.00:   401.920 us/op
                 runAlgorithm·p0.50:   418.304 us/op
                 runAlgorithm·p0.90:   432.128 us/op
                 runAlgorithm·p0.95:   437.760 us/op
                 runAlgorithm·p0.99:   461.824 us/op
                 runAlgorithm·p0.999:  2733.588 us/op
                 runAlgorithm·p0.9999: 12841.006 us/op
                 runAlgorithm·p1.00:   13484.032 us/op

Iteration   2: 427.645 ±(99.9%) 4.085 us/op
                 runAlgorithm·p0.00:   402.432 us/op
                 runAlgorithm·p0.50:   419.328 us/op
                 runAlgorithm·p0.90:   433.152 us/op
                 runAlgorithm·p0.95:   438.784 us/op
                 runAlgorithm·p0.99:   464.573 us/op
                 runAlgorithm·p0.999:  2697.413 us/op
                 runAlgorithm·p0.9999: 11623.599 us/op
                 runAlgorithm·p1.00:   14237.696 us/op

Iteration   3: 428.596 ±(99.9%) 5.350 us/op
                 runAlgorithm·p0.00:   401.920 us/op
                 runAlgorithm·p0.50:   418.304 us/op
                 runAlgorithm·p0.90:   432.128 us/op
                 runAlgorithm·p0.95:   437.760 us/op
                 runAlgorithm·p0.99:   463.360 us/op
                 runAlgorithm·p0.999:  2835.743 us/op
                 runAlgorithm·p0.9999: 13387.327 us/op
                 runAlgorithm·p1.00:   20905.984 us/op

Iteration   4: 427.976 ±(99.9%) 4.488 us/op
                 runAlgorithm·p0.00:   401.920 us/op
                 runAlgorithm·p0.50:   418.816 us/op
                 runAlgorithm·p0.90:   432.128 us/op
                 runAlgorithm·p0.95:   438.272 us/op
                 runAlgorithm·p0.99:   463.360 us/op
                 runAlgorithm·p0.999:  2779.611 us/op
                 runAlgorithm·p0.9999: 11908.117 us/op
                 runAlgorithm·p1.00:   14434.304 us/op

Iteration   5: 428.733 ±(99.9%) 4.692 us/op
                 runAlgorithm·p0.00:   402.944 us/op
                 runAlgorithm·p0.50:   418.816 us/op
                 runAlgorithm·p0.90:   432.640 us/op
                 runAlgorithm·p0.95:   438.272 us/op
                 runAlgorithm·p0.99:   462.336 us/op
                 runAlgorithm·p0.999:  2996.265 us/op
                 runAlgorithm·p0.9999: 12087.386 us/op
                 runAlgorithm·p1.00:   13860.864 us/op

Iteration   6: 426.186 ±(99.9%) 3.931 us/op
                 runAlgorithm·p0.00:   401.408 us/op
                 runAlgorithm·p0.50:   417.792 us/op
                 runAlgorithm·p0.90:   431.104 us/op
                 runAlgorithm·p0.95:   436.736 us/op
                 runAlgorithm·p0.99:   461.599 us/op
                 runAlgorithm·p0.999:  2560.918 us/op
                 runAlgorithm·p0.9999: 9242.411 us/op
                 runAlgorithm·p1.00:   14172.160 us/op

Iteration   7: 428.802 ±(99.9%) 5.610 us/op
                 runAlgorithm·p0.00:   402.432 us/op
                 runAlgorithm·p0.50:   417.792 us/op
                 runAlgorithm·p0.90:   432.128 us/op
                 runAlgorithm·p0.95:   437.760 us/op
                 runAlgorithm·p0.99:   463.360 us/op
                 runAlgorithm·p0.999:  2851.213 us/op
                 runAlgorithm·p0.9999: 16002.862 us/op
                 runAlgorithm·p1.00:   20086.784 us/op

Iteration   8: 431.616 ±(99.9%) 6.450 us/op
                 runAlgorithm·p0.00:   402.432 us/op
                 runAlgorithm·p0.50:   419.328 us/op
                 runAlgorithm·p0.90:   432.640 us/op
                 runAlgorithm·p0.95:   438.272 us/op
                 runAlgorithm·p0.99:   470.016 us/op
                 runAlgorithm·p0.999:  3249.816 us/op
                 runAlgorithm·p0.9999: 15990.797 us/op
                 runAlgorithm·p1.00:   19431.424 us/op

Iteration   9: 424.998 ±(99.9%) 4.192 us/op
                 runAlgorithm·p0.00:   400.896 us/op
                 runAlgorithm·p0.50:   416.256 us/op
                 runAlgorithm·p0.90:   430.080 us/op
                 runAlgorithm·p0.95:   435.456 us/op
                 runAlgorithm·p0.99:   459.776 us/op
                 runAlgorithm·p0.999:  2745.754 us/op
                 runAlgorithm·p0.9999: 12650.578 us/op
                 runAlgorithm·p1.00:   16072.704 us/op

Iteration  10: 428.734 ±(99.9%) 4.347 us/op
                 runAlgorithm·p0.00:   403.968 us/op
                 runAlgorithm·p0.50:   419.328 us/op
                 runAlgorithm·p0.90:   432.128 us/op
                 runAlgorithm·p0.95:   437.248 us/op
                 runAlgorithm·p0.99:   461.824 us/op
                 runAlgorithm·p0.999:  2982.142 us/op
                 runAlgorithm·p0.9999: 9241.321 us/op
                 runAlgorithm·p1.00:   9846.784 us/op

Iteration  11: 428.852 ±(99.9%) 4.693 us/op
                 runAlgorithm·p0.00:   402.944 us/op
                 runAlgorithm·p0.50:   419.328 us/op
                 runAlgorithm·p0.90:   432.128 us/op
                 runAlgorithm·p0.95:   437.760 us/op
                 runAlgorithm·p0.99:   464.384 us/op
                 runAlgorithm·p0.999:  2835.771 us/op
                 runAlgorithm·p0.9999: 12120.098 us/op
                 runAlgorithm·p1.00:   15892.480 us/op

Iteration  12: 427.471 ±(99.9%) 4.248 us/op
                 runAlgorithm·p0.00:   402.432 us/op
                 runAlgorithm·p0.50:   418.304 us/op
                 runAlgorithm·p0.90:   431.616 us/op
                 runAlgorithm·p0.95:   437.248 us/op
                 runAlgorithm·p0.99:   462.848 us/op
                 runAlgorithm·p0.999:  2847.785 us/op
                 runAlgorithm·p0.9999: 9095.850 us/op
                 runAlgorithm·p1.00:   12861.440 us/op

Iteration  13: 428.749 ±(99.9%) 6.240 us/op
                 runAlgorithm·p0.00:   400.896 us/op
                 runAlgorithm·p0.50:   417.792 us/op
                 runAlgorithm·p0.90:   431.616 us/op
                 runAlgorithm·p0.95:   437.248 us/op
                 runAlgorithm·p0.99:   462.848 us/op
                 runAlgorithm·p0.999:  3141.636 us/op
                 runAlgorithm·p0.9999: 20875.767 us/op
                 runAlgorithm·p1.00:   23035.904 us/op

Iteration  14: 428.765 ±(99.9%) 6.128 us/op
                 runAlgorithm·p0.00:   401.920 us/op
                 runAlgorithm·p0.50:   417.792 us/op
                 runAlgorithm·p0.90:   432.128 us/op
                 runAlgorithm·p0.95:   438.272 us/op
                 runAlgorithm·p0.99:   468.992 us/op
                 runAlgorithm·p0.999:  2532.762 us/op
                 runAlgorithm·p0.9999: 19577.930 us/op
                 runAlgorithm·p1.00:   22839.296 us/op

Iteration  15: 428.496 ±(99.9%) 5.139 us/op
                 runAlgorithm·p0.00:   401.920 us/op
                 runAlgorithm·p0.50:   417.792 us/op
                 runAlgorithm·p0.90:   431.616 us/op
                 runAlgorithm·p0.95:   437.760 us/op
                 runAlgorithm·p0.99:   460.288 us/op
                 runAlgorithm·p0.999:  3431.457 us/op
                 runAlgorithm·p0.9999: 10262.541 us/op
                 runAlgorithm·p1.00:   17858.560 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 349926
  mean =    428.281 ±(99.9%) 1.304 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 349479 
    [ 2500.000,  5000.000) = 286 
    [ 5000.000,  7500.000) = 50 
    [ 7500.000, 10000.000) = 67 
    [10000.000, 12500.000) = 13 
    [12500.000, 15000.000) = 16 
    [15000.000, 17500.000) = 6 
    [17500.000, 20000.000) = 3 
    [20000.000, 22500.000) = 3 
    [22500.000, 25000.000) = 3 
    [25000.000, 27500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    400.896 us/op
     p(50.0000) =    418.304 us/op
     p(90.0000) =    432.128 us/op
     p(95.0000) =    437.760 us/op
     p(99.0000) =    463.360 us/op
     p(99.9000) =   2793.771 us/op
     p(99.9900) =  11946.806 us/op
     p(99.9990) =  21874.051 us/op
     p(99.9999) =  23035.904 us/op
    p(100.0000) =  23035.904 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 88.40% complete, ETA 00:58:29
# Fork: 1 of 1
# Warmup Iteration   1: 47530.062 ±(99.9%) 8196.865 us/op
# Warmup Iteration   2: 62834.278 ±(99.9%) 933.772 us/op
# Warmup Iteration   3: 62610.227 ±(99.9%) 770.081 us/op
# Warmup Iteration   4: 62967.319 ±(99.9%) 862.568 us/op
# Warmup Iteration   5: 62748.262 ±(99.9%) 763.479 us/op
Iteration   1: 62773.658 ±(99.9%) 857.258 us/op
                 runAlgorithm·p0.00:   61079.552 us/op
                 runAlgorithm·p0.50:   61341.696 us/op
                 runAlgorithm·p0.90:   65463.910 us/op
                 runAlgorithm·p0.95:   69972.787 us/op
                 runAlgorithm·p0.99:   78588.150 us/op
                 runAlgorithm·p0.999:  80347.136 us/op
                 runAlgorithm·p0.9999: 80347.136 us/op
                 runAlgorithm·p1.00:   80347.136 us/op

Iteration   2: 62368.291 ±(99.9%) 562.297 us/op
                 runAlgorithm·p0.00:   61014.016 us/op
                 runAlgorithm·p0.50:   61341.696 us/op
                 runAlgorithm·p0.90:   64775.782 us/op
                 runAlgorithm·p0.95:   66945.024 us/op
                 runAlgorithm·p0.99:   71919.206 us/op
                 runAlgorithm·p0.999:  73138.176 us/op
                 runAlgorithm·p0.9999: 73138.176 us/op
                 runAlgorithm·p1.00:   73138.176 us/op

Iteration   3: 62810.522 ±(99.9%) 959.526 us/op
                 runAlgorithm·p0.00:   61014.016 us/op
                 runAlgorithm·p0.50:   61407.232 us/op
                 runAlgorithm·p0.90:   65667.072 us/op
                 runAlgorithm·p0.95:   68413.030 us/op
                 runAlgorithm·p0.99:   87267.738 us/op
                 runAlgorithm·p0.999:  88866.816 us/op
                 runAlgorithm·p0.9999: 88866.816 us/op
                 runAlgorithm·p1.00:   88866.816 us/op

Iteration   4: 62785.946 ±(99.9%) 810.690 us/op
                 runAlgorithm·p0.00:   61079.552 us/op
                 runAlgorithm·p0.50:   61407.232 us/op
                 runAlgorithm·p0.90:   65536.000 us/op
                 runAlgorithm·p0.95:   69959.680 us/op
                 runAlgorithm·p0.99:   77411.123 us/op
                 runAlgorithm·p0.999:  80609.280 us/op
                 runAlgorithm·p0.9999: 80609.280 us/op
                 runAlgorithm·p1.00:   80609.280 us/op

Iteration   5: 62765.056 ±(99.9%) 735.520 us/op
                 runAlgorithm·p0.00:   61014.016 us/op
                 runAlgorithm·p0.50:   61505.536 us/op
                 runAlgorithm·p0.90:   66184.806 us/op
                 runAlgorithm·p0.95:   68393.370 us/op
                 runAlgorithm·p0.99:   75308.728 us/op
                 runAlgorithm·p0.999:  75628.544 us/op
                 runAlgorithm·p0.9999: 75628.544 us/op
                 runAlgorithm·p1.00:   75628.544 us/op

Iteration   6: 62769.971 ±(99.9%) 795.624 us/op
                 runAlgorithm·p0.00:   61079.552 us/op
                 runAlgorithm·p0.50:   61472.768 us/op
                 runAlgorithm·p0.90:   65719.501 us/op
                 runAlgorithm·p0.95:   69559.910 us/op
                 runAlgorithm·p0.99:   79170.109 us/op
                 runAlgorithm·p0.999:  80609.280 us/op
                 runAlgorithm·p0.9999: 80609.280 us/op
                 runAlgorithm·p1.00:   80609.280 us/op

Iteration   7: 62603.674 ±(99.9%) 665.383 us/op
                 runAlgorithm·p0.00:   61014.016 us/op
                 runAlgorithm·p0.50:   61472.768 us/op
                 runAlgorithm·p0.90:   64998.605 us/op
                 runAlgorithm·p0.95:   67603.661 us/op
                 runAlgorithm·p0.99:   75758.305 us/op
                 runAlgorithm·p0.999:  79036.416 us/op
                 runAlgorithm·p0.9999: 79036.416 us/op
                 runAlgorithm·p1.00:   79036.416 us/op

Iteration   8: 62729.011 ±(99.9%) 770.347 us/op
                 runAlgorithm·p0.00:   61014.016 us/op
                 runAlgorithm·p0.50:   61374.464 us/op
                 runAlgorithm·p0.90:   66433.843 us/op
                 runAlgorithm·p0.95:   69828.608 us/op
                 runAlgorithm·p0.99:   76333.711 us/op
                 runAlgorithm·p0.999:  79691.776 us/op
                 runAlgorithm·p0.9999: 79691.776 us/op
                 runAlgorithm·p1.00:   79691.776 us/op

Iteration   9: 62629.478 ±(99.9%) 640.920 us/op
                 runAlgorithm·p0.00:   61079.552 us/op
                 runAlgorithm·p0.50:   61538.304 us/op
                 runAlgorithm·p0.90:   65516.339 us/op
                 runAlgorithm·p0.95:   67764.224 us/op
                 runAlgorithm·p0.99:   73465.856 us/op
                 runAlgorithm·p0.999:  77463.552 us/op
                 runAlgorithm·p0.9999: 77463.552 us/op
                 runAlgorithm·p1.00:   77463.552 us/op

Iteration  10: 62810.931 ±(99.9%) 899.342 us/op
                 runAlgorithm·p0.00:   61079.552 us/op
                 runAlgorithm·p0.50:   61407.232 us/op
                 runAlgorithm·p0.90:   65005.158 us/op
                 runAlgorithm·p0.95:   70359.450 us/op
                 runAlgorithm·p0.99:   81560.863 us/op
                 runAlgorithm·p0.999:  84279.296 us/op
                 runAlgorithm·p0.9999: 84279.296 us/op
                 runAlgorithm·p1.00:   84279.296 us/op

Iteration  11: 62819.533 ±(99.9%) 895.951 us/op
                 runAlgorithm·p0.00:   60948.480 us/op
                 runAlgorithm·p0.50:   61341.696 us/op
                 runAlgorithm·p0.90:   66053.734 us/op
                 runAlgorithm·p0.95:   70896.845 us/op
                 runAlgorithm·p0.99:   80716.759 us/op
                 runAlgorithm·p0.999:  83755.008 us/op
                 runAlgorithm·p0.9999: 83755.008 us/op
                 runAlgorithm·p1.00:   83755.008 us/op

Iteration  12: 62579.507 ±(99.9%) 675.970 us/op
                 runAlgorithm·p0.00:   60882.944 us/op
                 runAlgorithm·p0.50:   61341.696 us/op
                 runAlgorithm·p0.90:   66112.717 us/op
                 runAlgorithm·p0.95:   69179.802 us/op
                 runAlgorithm·p0.99:   72665.006 us/op
                 runAlgorithm·p0.999:  72744.960 us/op
                 runAlgorithm·p0.9999: 72744.960 us/op
                 runAlgorithm·p1.00:   72744.960 us/op

Iteration  13: 62347.124 ±(99.9%) 599.870 us/op
                 runAlgorithm·p0.00:   61014.016 us/op
                 runAlgorithm·p0.50:   61276.160 us/op
                 runAlgorithm·p0.90:   64605.389 us/op
                 runAlgorithm·p0.95:   66315.878 us/op
                 runAlgorithm·p0.99:   72501.166 us/op
                 runAlgorithm·p0.999:  72744.960 us/op
                 runAlgorithm·p0.9999: 72744.960 us/op
                 runAlgorithm·p1.00:   72744.960 us/op

Iteration  14: 62822.400 ±(99.9%) 859.615 us/op
                 runAlgorithm·p0.00:   61014.016 us/op
                 runAlgorithm·p0.50:   61276.160 us/op
                 runAlgorithm·p0.90:   67076.096 us/op
                 runAlgorithm·p0.95:   70739.558 us/op
                 runAlgorithm·p0.99:   76203.950 us/op
                 runAlgorithm·p0.999:  76283.904 us/op
                 runAlgorithm·p0.9999: 76283.904 us/op
                 runAlgorithm·p1.00:   76283.904 us/op

Iteration  15: 62641.357 ±(99.9%) 728.132 us/op
                 runAlgorithm·p0.00:   60948.480 us/op
                 runAlgorithm·p0.50:   61341.696 us/op
                 runAlgorithm·p0.90:   66014.413 us/op
                 runAlgorithm·p0.95:   68799.693 us/op
                 runAlgorithm·p0.99:   74429.235 us/op
                 runAlgorithm·p0.999:  75628.544 us/op
                 runAlgorithm·p0.9999: 75628.544 us/op
                 runAlgorithm·p1.00:   75628.544 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 2402
  mean =  62683.492 ±(99.9%) 195.575 us/op

  Histogram, us/op:
    [60000.000, 62500.000) = 1740 
    [62500.000, 65000.000) = 367 
    [65000.000, 67500.000) = 137 
    [67500.000, 70000.000) = 68 
    [70000.000, 72500.000) = 46 
    [72500.000, 75000.000) = 22 
    [75000.000, 77500.000) = 10 
    [77500.000, 80000.000) = 5 
    [80000.000, 82500.000) = 3 
    [82500.000, 85000.000) = 2 
    [85000.000, 87500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  60882.944 us/op
     p(50.0000) =  61407.232 us/op
     p(90.0000) =  65712.947 us/op
     p(95.0000) =  68943.872 us/op
     p(99.0000) =  74707.108 us/op
     p(99.9000) =  85453.046 us/op
     p(99.9900) =  88866.816 us/op
     p(99.9990) =  88866.816 us/op
     p(99.9999) =  88866.816 us/op
    p(100.0000) =  88866.816 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 89.13% complete, ETA 00:54:49
# Fork: 1 of 1
# Warmup Iteration   1: 4136981.845 ±(99.9%) 4652205.931 us/op
# Warmup Iteration   2: 4359279.957 ±(99.9%) 579397.961 us/op
# Warmup Iteration   3: 4387241.984 ±(99.9%) 404904.293 us/op
# Warmup Iteration   4: 4364872.363 ±(99.9%) 318576.994 us/op
# Warmup Iteration   5: 4348095.147 ±(99.9%) 690093.048 us/op
Iteration   1: 4362076.160 ±(99.9%) 701314.809 us/op
                 runAlgorithm·p0.00:   4320133.120 us/op
                 runAlgorithm·p0.50:   4370464.768 us/op
                 runAlgorithm·p0.90:   4395630.592 us/op
                 runAlgorithm·p0.95:   4395630.592 us/op
                 runAlgorithm·p0.99:   4395630.592 us/op
                 runAlgorithm·p0.999:  4395630.592 us/op
                 runAlgorithm·p0.9999: 4395630.592 us/op
                 runAlgorithm·p1.00:   4395630.592 us/op

Iteration   2: 4348095.147 ±(99.9%) 618501.525 us/op
                 runAlgorithm·p0.00:   4311744.512 us/op
                 runAlgorithm·p0.50:   4353687.552 us/op
                 runAlgorithm·p0.90:   4378853.376 us/op
                 runAlgorithm·p0.95:   4378853.376 us/op
                 runAlgorithm·p0.99:   4378853.376 us/op
                 runAlgorithm·p0.999:  4378853.376 us/op
                 runAlgorithm·p0.9999: 4378853.376 us/op
                 runAlgorithm·p1.00:   4378853.376 us/op

Iteration   3: 4350891.349 ±(99.9%) 690093.048 us/op
                 runAlgorithm·p0.00:   4311744.512 us/op
                 runAlgorithm·p0.50:   4353687.552 us/op
                 runAlgorithm·p0.90:   4387241.984 us/op
                 runAlgorithm·p0.95:   4387241.984 us/op
                 runAlgorithm·p0.99:   4387241.984 us/op
                 runAlgorithm·p0.999:  4387241.984 us/op
                 runAlgorithm·p0.9999: 4387241.984 us/op
                 runAlgorithm·p1.00:   4387241.984 us/op

Iteration   4: 4342502.741 ±(99.9%) 491952.964 us/op
                 runAlgorithm·p0.00:   4311744.512 us/op
                 runAlgorithm·p0.50:   4353687.552 us/op
                 runAlgorithm·p0.90:   4362076.160 us/op
                 runAlgorithm·p0.95:   4362076.160 us/op
                 runAlgorithm·p0.99:   4362076.160 us/op
                 runAlgorithm·p0.999:  4362076.160 us/op
                 runAlgorithm·p0.9999: 4362076.160 us/op
                 runAlgorithm·p1.00:   4362076.160 us/op

Iteration   5: 4373260.971 ±(99.9%) 870219.081 us/op
                 runAlgorithm·p0.00:   4320133.120 us/op
                 runAlgorithm·p0.50:   4387241.984 us/op
                 runAlgorithm·p0.90:   4412407.808 us/op
                 runAlgorithm·p0.95:   4412407.808 us/op
                 runAlgorithm·p0.99:   4412407.808 us/op
                 runAlgorithm·p0.999:  4412407.808 us/op
                 runAlgorithm·p0.9999: 4412407.808 us/op
                 runAlgorithm·p1.00:   4412407.808 us/op

Iteration   6: 4387241.984 ±(99.9%) 1071276.065 us/op
                 runAlgorithm·p0.00:   4328521.728 us/op
                 runAlgorithm·p0.50:   4387241.984 us/op
                 runAlgorithm·p0.90:   4445962.240 us/op
                 runAlgorithm·p0.95:   4445962.240 us/op
                 runAlgorithm·p0.99:   4445962.240 us/op
                 runAlgorithm·p0.999:  4445962.240 us/op
                 runAlgorithm·p0.9999: 4445962.240 us/op
                 runAlgorithm·p1.00:   4445962.240 us/op

Iteration   7: 4348095.147 ±(99.9%) 318576.994 us/op
                 runAlgorithm·p0.00:   4328521.728 us/op
                 runAlgorithm·p0.50:   4353687.552 us/op
                 runAlgorithm·p0.90:   4362076.160 us/op
                 runAlgorithm·p0.95:   4362076.160 us/op
                 runAlgorithm·p0.99:   4362076.160 us/op
                 runAlgorithm·p0.999:  4362076.160 us/op
                 runAlgorithm·p0.9999: 4362076.160 us/op
                 runAlgorithm·p1.00:   4362076.160 us/op

Iteration   8: 4370464.768 ±(99.9%) 765197.190 us/op
                 runAlgorithm·p0.00:   4328521.728 us/op
                 runAlgorithm·p0.50:   4370464.768 us/op
                 runAlgorithm·p0.90:   4412407.808 us/op
                 runAlgorithm·p0.95:   4412407.808 us/op
                 runAlgorithm·p0.99:   4412407.808 us/op
                 runAlgorithm·p0.999:  4412407.808 us/op
                 runAlgorithm·p0.9999: 4412407.808 us/op
                 runAlgorithm·p1.00:   4412407.808 us/op

Iteration   9: 4350891.349 ±(99.9%) 754925.620 us/op
                 runAlgorithm·p0.00:   4303355.904 us/op
                 runAlgorithm·p0.50:   4370464.768 us/op
                 runAlgorithm·p0.90:   4378853.376 us/op
                 runAlgorithm·p0.95:   4378853.376 us/op
                 runAlgorithm·p0.99:   4378853.376 us/op
                 runAlgorithm·p0.999:  4378853.376 us/op
                 runAlgorithm·p0.9999: 4378853.376 us/op
                 runAlgorithm·p1.00:   4378853.376 us/op

Iteration  10: 4345298.944 ±(99.9%) 809808.587 us/op
                 runAlgorithm·p0.00:   4294967.296 us/op
                 runAlgorithm·p0.50:   4362076.160 us/op
                 runAlgorithm·p0.90:   4378853.376 us/op
                 runAlgorithm·p0.95:   4378853.376 us/op
                 runAlgorithm·p0.99:   4378853.376 us/op
                 runAlgorithm·p0.999:  4378853.376 us/op
                 runAlgorithm·p0.9999: 4378853.376 us/op
                 runAlgorithm·p1.00:   4378853.376 us/op

Iteration  11: 4350891.349 ±(99.9%) 618501.525 us/op
                 runAlgorithm·p0.00:   4311744.512 us/op
                 runAlgorithm·p0.50:   4370464.768 us/op
                 runAlgorithm·p0.90:   4370464.768 us/op
                 runAlgorithm·p0.95:   4370464.768 us/op
                 runAlgorithm·p0.99:   4370464.768 us/op
                 runAlgorithm·p0.999:  4370464.768 us/op
                 runAlgorithm·p0.9999: 4370464.768 us/op
                 runAlgorithm·p1.00:   4370464.768 us/op

Iteration  12: 4370464.768 ±(99.9%) 530144.164 us/op
                 runAlgorithm·p0.00:   4336910.336 us/op
                 runAlgorithm·p0.50:   4387241.984 us/op
                 runAlgorithm·p0.90:   4387241.984 us/op
                 runAlgorithm·p0.95:   4387241.984 us/op
                 runAlgorithm·p0.99:   4387241.984 us/op
                 runAlgorithm·p0.999:  4387241.984 us/op
                 runAlgorithm·p0.9999: 4387241.984 us/op
                 runAlgorithm·p1.00:   4387241.984 us/op

Iteration  13: 4356483.755 ±(99.9%) 579397.961 us/op
                 runAlgorithm·p0.00:   4320133.120 us/op
                 runAlgorithm·p0.50:   4370464.768 us/op
                 runAlgorithm·p0.90:   4378853.376 us/op
                 runAlgorithm·p0.95:   4378853.376 us/op
                 runAlgorithm·p0.99:   4378853.376 us/op
                 runAlgorithm·p0.999:  4378853.376 us/op
                 runAlgorithm·p0.9999: 4378853.376 us/op
                 runAlgorithm·p1.00:   4378853.376 us/op

Iteration  14: 4345298.944 ±(99.9%) 795216.246 us/op
                 runAlgorithm·p0.00:   4294967.296 us/op
                 runAlgorithm·p0.50:   4370464.768 us/op
                 runAlgorithm·p0.90:   4370464.768 us/op
                 runAlgorithm·p0.95:   4370464.768 us/op
                 runAlgorithm·p0.99:   4370464.768 us/op
                 runAlgorithm·p0.999:  4370464.768 us/op
                 runAlgorithm·p0.9999: 4370464.768 us/op
                 runAlgorithm·p1.00:   4370464.768 us/op

Iteration  15: 4322929.323 ±(99.9%) 441786.803 us/op
                 runAlgorithm·p0.00:   4294967.296 us/op
                 runAlgorithm·p0.50:   4336910.336 us/op
                 runAlgorithm·p0.90:   4336910.336 us/op
                 runAlgorithm·p0.95:   4336910.336 us/op
                 runAlgorithm·p0.99:   4336910.336 us/op
                 runAlgorithm·p0.999:  4336910.336 us/op
                 runAlgorithm·p0.9999: 4336910.336 us/op
                 runAlgorithm·p1.00:   4336910.336 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 45
  mean = 4354992.447 ±(99.9%) 18371.159 us/op

  Histogram, us/op:
    [4200000.000, 4225000.000) = 0 
    [4225000.000, 4250000.000) = 0 
    [4250000.000, 4275000.000) = 0 
    [4275000.000, 4300000.000) = 3 
    [4300000.000, 4325000.000) = 8 
    [4325000.000, 4350000.000) = 6 
    [4350000.000, 4375000.000) = 15 
    [4375000.000, 4400000.000) = 10 
    [4400000.000, 4425000.000) = 2 
    [4425000.000, 4450000.000) = 1 
    [4450000.000, 4475000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 4294967.296 us/op
     p(50.0000) = 4362076.160 us/op
     p(90.0000) = 4390597.427 us/op
     p(95.0000) = 4412407.808 us/op
     p(99.0000) = 4445962.240 us/op
     p(99.9000) = 4445962.240 us/op
     p(99.9900) = 4445962.240 us/op
     p(99.9990) = 4445962.240 us/op
     p(99.9999) = 4445962.240 us/op
    p(100.0000) = 4445962.240 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 89.85% complete, ETA 00:51:16
# Fork: 1 of 1
# Warmup Iteration   1: 3088.579 ±(99.9%) 127.958 us/op
# Warmup Iteration   2: 2997.956 ±(99.9%) 1.320 us/op
# Warmup Iteration   3: 2995.866 ±(99.9%) 1.073 us/op
# Warmup Iteration   4: 3002.785 ±(99.9%) 4.803 us/op
# Warmup Iteration   5: 2995.792 ±(99.9%) 1.051 us/op
Iteration   1: 2996.126 ±(99.9%) 0.957 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3010.560 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3026.944 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3051.520 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3179.708 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3239.936 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3239.936 us/op

Iteration   2: 2996.004 ±(99.9%) 0.943 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3010.560 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3031.040 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3055.616 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3148.448 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3170.304 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3170.304 us/op

Iteration   3: 2996.715 ±(99.9%) 1.520 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3010.560 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3026.944 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3059.712 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3425.608 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3547.136 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3547.136 us/op

Iteration   4: 2996.626 ±(99.9%) 1.013 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3010.560 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3031.040 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3051.520 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3156.644 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3375.104 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3375.104 us/op

Iteration   5: 2995.256 ±(99.9%) 1.089 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3010.560 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3026.944 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3051.520 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3205.743 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3510.272 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3510.272 us/op

Iteration   6: 2993.961 ±(99.9%) 0.920 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2990.080 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3006.874 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3026.944 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3047.424 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3162.112 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3227.648 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3227.648 us/op

Iteration   7: 2994.614 ±(99.9%) 0.951 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3006.464 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3026.944 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3051.520 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3171.574 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3276.800 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3276.800 us/op

Iteration   8: 2995.164 ±(99.9%) 1.127 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3010.560 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3026.944 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3051.520 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3183.919 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3555.328 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3555.328 us/op

Iteration   9: 2994.534 ±(99.9%) 0.927 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3006.464 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3022.848 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3047.424 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3148.325 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3231.744 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3231.744 us/op

Iteration  10: 2993.841 ±(99.9%) 0.864 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2973.696 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2990.080 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3006.464 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3022.848 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3043.328 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3141.493 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3166.208 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3166.208 us/op

Iteration  11: 2994.841 ±(99.9%) 0.987 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2973.696 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3006.464 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3026.944 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3051.520 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3166.208 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3194.880 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3194.880 us/op

Iteration  12: 2995.132 ±(99.9%) 1.116 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2990.080 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3006.464 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3026.944 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3062.252 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3237.167 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3309.568 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3309.568 us/op

Iteration  13: 2996.207 ±(99.9%) 1.196 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2973.696 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3006.464 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3031.040 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3067.904 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3242.656 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3395.584 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3395.584 us/op

Iteration  14: 2996.098 ±(99.9%) 1.184 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3010.560 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3031.040 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3074.580 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3276.710 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3321.856 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3321.856 us/op

Iteration  15: 2995.996 ±(99.9%) 1.102 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3010.560 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3026.944 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3063.808 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3190.739 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3260.416 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3260.416 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  N = 50042
  mean =   2995.407 ±(99.9%) 0.277 us/op

  Histogram, us/op:
    [2900.000, 2950.000) = 0 
    [2950.000, 3000.000) = 39665 
    [3000.000, 3050.000) = 9756 
    [3050.000, 3100.000) = 406 
    [3100.000, 3150.000) = 130 
    [3150.000, 3200.000) = 49 
    [3200.000, 3250.000) = 15 
    [3250.000, 3300.000) = 7 
    [3300.000, 3350.000) = 2 
    [3350.000, 3400.000) = 4 
    [3400.000, 3450.000) = 5 
    [3450.000, 3500.000) = 0 
    [3500.000, 3550.000) = 2 

  Percentiles, us/op:
      p(0.0000) =   2969.600 us/op
     p(50.0000) =   2994.176 us/op
     p(90.0000) =   3010.560 us/op
     p(95.0000) =   3026.944 us/op
     p(99.0000) =   3051.520 us/op
     p(99.9000) =   3182.592 us/op
     p(99.9900) =   3428.317 us/op
     p(99.9990) =   3555.328 us/op
     p(99.9999) =   3555.328 us/op
    p(100.0000) =   3555.328 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 90.58% complete, ETA 00:47:36
# Fork: 1 of 1
# Warmup Iteration   1: 32260.730 ±(99.9%) 1171.187 us/op
# Warmup Iteration   2: 31508.596 ±(99.9%) 32.394 us/op
# Warmup Iteration   3: 31492.624 ±(99.9%) 13.587 us/op
# Warmup Iteration   4: 31509.626 ±(99.9%) 19.229 us/op
# Warmup Iteration   5: 31491.078 ±(99.9%) 14.815 us/op
Iteration   1: 31490.151 ±(99.9%) 14.213 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31526.093 us/op
                 extractOperationOutOfLoop·p0.95:   31588.352 us/op
                 extractOperationOutOfLoop·p0.99:   31647.662 us/op
                 extractOperationOutOfLoop·p0.999:  32604.160 us/op
                 extractOperationOutOfLoop·p0.9999: 32604.160 us/op
                 extractOperationOutOfLoop·p1.00:   32604.160 us/op

Iteration   2: 31487.369 ±(99.9%) 12.196 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31522.816 us/op
                 extractOperationOutOfLoop·p0.95:   31557.222 us/op
                 extractOperationOutOfLoop·p0.99:   31850.496 us/op
                 extractOperationOutOfLoop·p0.999:  31916.032 us/op
                 extractOperationOutOfLoop·p0.9999: 31916.032 us/op
                 extractOperationOutOfLoop·p1.00:   31916.032 us/op

Iteration   3: 31481.598 ±(99.9%) 8.276 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31522.816 us/op
                 extractOperationOutOfLoop·p0.95:   31555.584 us/op
                 extractOperationOutOfLoop·p0.99:   31674.204 us/op
                 extractOperationOutOfLoop·p0.999:  31686.656 us/op
                 extractOperationOutOfLoop·p0.9999: 31686.656 us/op
                 extractOperationOutOfLoop·p1.00:   31686.656 us/op

Iteration   4: 31483.762 ±(99.9%) 9.384 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31588.352 us/op
                 extractOperationOutOfLoop·p0.99:   31647.662 us/op
                 extractOperationOutOfLoop·p0.999:  31817.728 us/op
                 extractOperationOutOfLoop·p0.9999: 31817.728 us/op
                 extractOperationOutOfLoop·p1.00:   31817.728 us/op

Iteration   5: 31486.957 ±(99.9%) 9.654 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31555.584 us/op
                 extractOperationOutOfLoop·p0.99:   31719.424 us/op
                 extractOperationOutOfLoop·p0.999:  31784.960 us/op
                 extractOperationOutOfLoop·p0.9999: 31784.960 us/op
                 extractOperationOutOfLoop·p1.00:   31784.960 us/op

Iteration   6: 31498.085 ±(99.9%) 15.486 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31653.888 us/op
                 extractOperationOutOfLoop·p0.99:   31852.134 us/op
                 extractOperationOutOfLoop·p0.999:  32309.248 us/op
                 extractOperationOutOfLoop·p0.9999: 32309.248 us/op
                 extractOperationOutOfLoop·p1.00:   32309.248 us/op

Iteration   7: 31486.648 ±(99.9%) 11.106 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31522.816 us/op
                 extractOperationOutOfLoop·p0.95:   31555.584 us/op
                 extractOperationOutOfLoop·p0.99:   31778.734 us/op
                 extractOperationOutOfLoop·p0.999:  31981.568 us/op
                 extractOperationOutOfLoop·p0.9999: 31981.568 us/op
                 extractOperationOutOfLoop·p1.00:   31981.568 us/op

Iteration   8: 31484.381 ±(99.9%) 10.224 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31588.352 us/op
                 extractOperationOutOfLoop·p0.99:   31719.424 us/op
                 extractOperationOutOfLoop·p0.999:  31752.192 us/op
                 extractOperationOutOfLoop·p0.9999: 31752.192 us/op
                 extractOperationOutOfLoop·p1.00:   31752.192 us/op

Iteration   9: 31481.083 ±(99.9%) 9.859 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31522.816 us/op
                 extractOperationOutOfLoop·p0.95:   31555.584 us/op
                 extractOperationOutOfLoop·p0.99:   31653.888 us/op
                 extractOperationOutOfLoop·p0.999:  31883.264 us/op
                 extractOperationOutOfLoop·p0.9999: 31883.264 us/op
                 extractOperationOutOfLoop·p1.00:   31883.264 us/op

Iteration  10: 31476.549 ±(99.9%) 9.037 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31457.280 us/op
                 extractOperationOutOfLoop·p0.90:   31522.816 us/op
                 extractOperationOutOfLoop·p0.95:   31555.584 us/op
                 extractOperationOutOfLoop·p0.99:   31621.120 us/op
                 extractOperationOutOfLoop·p0.999:  31784.960 us/op
                 extractOperationOutOfLoop·p0.9999: 31784.960 us/op
                 extractOperationOutOfLoop·p1.00:   31784.960 us/op

Iteration  11: 31494.170 ±(99.9%) 28.374 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31621.120 us/op
                 extractOperationOutOfLoop·p0.99:   31745.966 us/op
                 extractOperationOutOfLoop·p0.999:  33816.576 us/op
                 extractOperationOutOfLoop·p0.9999: 33816.576 us/op
                 extractOperationOutOfLoop·p1.00:   33816.576 us/op

Iteration  12: 31475.210 ±(99.9%) 13.253 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31457.280 us/op
                 extractOperationOutOfLoop·p0.90:   31522.816 us/op
                 extractOperationOutOfLoop·p0.95:   31555.584 us/op
                 extractOperationOutOfLoop·p0.99:   31647.662 us/op
                 extractOperationOutOfLoop·p0.999:  32505.856 us/op
                 extractOperationOutOfLoop·p0.9999: 32505.856 us/op
                 extractOperationOutOfLoop·p1.00:   32505.856 us/op

Iteration  13: 31483.762 ±(99.9%) 8.735 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31555.584 us/op
                 extractOperationOutOfLoop·p0.99:   31686.656 us/op
                 extractOperationOutOfLoop·p0.999:  31752.192 us/op
                 extractOperationOutOfLoop·p0.9999: 31752.192 us/op
                 extractOperationOutOfLoop·p1.00:   31752.192 us/op

Iteration  14: 31471.500 ±(99.9%) 8.453 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31457.280 us/op
                 extractOperationOutOfLoop·p0.90:   31522.816 us/op
                 extractOperationOutOfLoop·p0.95:   31555.584 us/op
                 extractOperationOutOfLoop·p0.99:   31706.972 us/op
                 extractOperationOutOfLoop·p0.999:  31752.192 us/op
                 extractOperationOutOfLoop·p0.9999: 31752.192 us/op
                 extractOperationOutOfLoop·p1.00:   31752.192 us/op

Iteration  15: 31479.641 ±(99.9%) 14.450 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31457.280 us/op
                 extractOperationOutOfLoop·p0.90:   31522.816 us/op
                 extractOperationOutOfLoop·p0.95:   31555.584 us/op
                 extractOperationOutOfLoop·p0.99:   31641.436 us/op
                 extractOperationOutOfLoop·p0.999:  32669.696 us/op
                 extractOperationOutOfLoop·p0.9999: 32669.696 us/op
                 extractOperationOutOfLoop·p1.00:   32669.696 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  N = 4770
  mean =  31484.058 ±(99.9%) 3.370 us/op

  Histogram, us/op:
    [31000.000, 31250.000) = 0 
    [31250.000, 31500.000) = 3763 
    [31500.000, 31750.000) = 980 
    [31750.000, 32000.000) = 20 
    [32000.000, 32250.000) = 1 
    [32250.000, 32500.000) = 1 
    [32500.000, 32750.000) = 4 
    [32750.000, 33000.000) = 0 
    [33000.000, 33250.000) = 0 
    [33250.000, 33500.000) = 0 
    [33500.000, 33750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  31391.744 us/op
     p(50.0000) =  31490.048 us/op
     p(90.0000) =  31522.816 us/op
     p(95.0000) =  31555.584 us/op
     p(99.0000) =  31686.656 us/op
     p(99.9000) =  32505.856 us/op
     p(99.9900) =  33816.576 us/op
     p(99.9990) =  33816.576 us/op
     p(99.9999) =  33816.576 us/op
    p(100.0000) =  33816.576 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 91.30% complete, ETA 00:43:56
# Fork: 1 of 1
# Warmup Iteration   1: 2931294.208 ±(99.9%) 15089965.061 us/op
# Warmup Iteration   2: 1761607.680 ±(99.9%) 6442.100 us/op
# Warmup Iteration   3: 1760908.629 ±(99.9%) 3036.835 us/op
# Warmup Iteration   4: 1760559.104 ±(99.9%) 3221.050 us/op
# Warmup Iteration   5: 1760908.629 ±(99.9%) 3036.835 us/op
Iteration   1: 1759860.053 ±(99.9%) 2400.829 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1761607.680 us/op
                 reduceLoops·p0.95:   1761607.680 us/op
                 reduceLoops·p0.99:   1761607.680 us/op
                 reduceLoops·p0.999:  1761607.680 us/op
                 reduceLoops·p0.9999: 1761607.680 us/op
                 reduceLoops·p1.00:   1761607.680 us/op

Iteration   2: 1759510.528 ±(99.9%) 0.001 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1759510.528 us/op
                 reduceLoops·p0.95:   1759510.528 us/op
                 reduceLoops·p0.99:   1759510.528 us/op
                 reduceLoops·p0.999:  1759510.528 us/op
                 reduceLoops·p0.9999: 1759510.528 us/op
                 reduceLoops·p1.00:   1759510.528 us/op

Iteration   3: 1760908.629 ±(99.9%) 3036.835 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1761607.680 us/op
                 reduceLoops·p0.90:   1761607.680 us/op
                 reduceLoops·p0.95:   1761607.680 us/op
                 reduceLoops·p0.99:   1761607.680 us/op
                 reduceLoops·p0.999:  1761607.680 us/op
                 reduceLoops·p0.9999: 1761607.680 us/op
                 reduceLoops·p1.00:   1761607.680 us/op

Iteration   4: 1759510.528 ±(99.9%) 0.001 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1759510.528 us/op
                 reduceLoops·p0.95:   1759510.528 us/op
                 reduceLoops·p0.99:   1759510.528 us/op
                 reduceLoops·p0.999:  1759510.528 us/op
                 reduceLoops·p0.9999: 1759510.528 us/op
                 reduceLoops·p1.00:   1759510.528 us/op

Iteration   5: 1760209.579 ±(99.9%) 3036.835 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1761607.680 us/op
                 reduceLoops·p0.95:   1761607.680 us/op
                 reduceLoops·p0.99:   1761607.680 us/op
                 reduceLoops·p0.999:  1761607.680 us/op
                 reduceLoops·p0.9999: 1761607.680 us/op
                 reduceLoops·p1.00:   1761607.680 us/op

Iteration   6: 1760209.579 ±(99.9%) 3036.835 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1761607.680 us/op
                 reduceLoops·p0.95:   1761607.680 us/op
                 reduceLoops·p0.99:   1761607.680 us/op
                 reduceLoops·p0.999:  1761607.680 us/op
                 reduceLoops·p0.9999: 1761607.680 us/op
                 reduceLoops·p1.00:   1761607.680 us/op

Iteration   7: 1759860.053 ±(99.9%) 2400.829 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1761607.680 us/op
                 reduceLoops·p0.95:   1761607.680 us/op
                 reduceLoops·p0.99:   1761607.680 us/op
                 reduceLoops·p0.999:  1761607.680 us/op
                 reduceLoops·p0.9999: 1761607.680 us/op
                 reduceLoops·p1.00:   1761607.680 us/op

Iteration   8: 1760908.629 ±(99.9%) 4801.658 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1760559.104 us/op
                 reduceLoops·p0.90:   1763704.832 us/op
                 reduceLoops·p0.95:   1763704.832 us/op
                 reduceLoops·p0.99:   1763704.832 us/op
                 reduceLoops·p0.999:  1763704.832 us/op
                 reduceLoops·p0.9999: 1763704.832 us/op
                 reduceLoops·p1.00:   1763704.832 us/op

Iteration   9: 1759510.528 ±(99.9%) 3719.348 us/op
                 reduceLoops·p0.00:   1757413.376 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1761607.680 us/op
                 reduceLoops·p0.95:   1761607.680 us/op
                 reduceLoops·p0.99:   1761607.680 us/op
                 reduceLoops·p0.999:  1761607.680 us/op
                 reduceLoops·p0.9999: 1761607.680 us/op
                 reduceLoops·p1.00:   1761607.680 us/op

Iteration  10: 1760109.714 ±(99.9%) 2304.710 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1761607.680 us/op
                 reduceLoops·p0.95:   1761607.680 us/op
                 reduceLoops·p0.99:   1761607.680 us/op
                 reduceLoops·p0.999:  1761607.680 us/op
                 reduceLoops·p0.9999: 1761607.680 us/op
                 reduceLoops·p1.00:   1761607.680 us/op

Iteration  11: 1759810.121 ±(99.9%) 1785.220 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1761607.680 us/op
                 reduceLoops·p0.95:   1761607.680 us/op
                 reduceLoops·p0.99:   1761607.680 us/op
                 reduceLoops·p0.999:  1761607.680 us/op
                 reduceLoops·p0.9999: 1761607.680 us/op
                 reduceLoops·p1.00:   1761607.680 us/op

Iteration  12: 1759810.121 ±(99.9%) 1785.220 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1761607.680 us/op
                 reduceLoops·p0.95:   1761607.680 us/op
                 reduceLoops·p0.99:   1761607.680 us/op
                 reduceLoops·p0.999:  1761607.680 us/op
                 reduceLoops·p0.9999: 1761607.680 us/op
                 reduceLoops·p1.00:   1761607.680 us/op

Iteration  13: 1761008.494 ±(99.9%) 2304.710 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1761607.680 us/op
                 reduceLoops·p0.90:   1761607.680 us/op
                 reduceLoops·p0.95:   1761607.680 us/op
                 reduceLoops·p0.99:   1761607.680 us/op
                 reduceLoops·p0.999:  1761607.680 us/op
                 reduceLoops·p0.9999: 1761607.680 us/op
                 reduceLoops·p1.00:   1761607.680 us/op

Iteration  14: 1759860.053 ±(99.9%) 2400.829 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1761607.680 us/op
                 reduceLoops·p0.95:   1761607.680 us/op
                 reduceLoops·p0.99:   1761607.680 us/op
                 reduceLoops·p0.999:  1761607.680 us/op
                 reduceLoops·p0.9999: 1761607.680 us/op
                 reduceLoops·p1.00:   1761607.680 us/op

Iteration  15: 1759510.528 ±(99.9%) 0.001 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1759510.528 us/op
                 reduceLoops·p0.95:   1759510.528 us/op
                 reduceLoops·p0.99:   1759510.528 us/op
                 reduceLoops·p0.999:  1759510.528 us/op
                 reduceLoops·p0.9999: 1759510.528 us/op
                 reduceLoops·p1.00:   1759510.528 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  N = 94
  mean = 1760045.971 ±(99.9%) 356.472 us/op

  Histogram, us/op:
    [1757000.000, 1757500.000) = 1 
    [1757500.000, 1758000.000) = 0 
    [1758000.000, 1758500.000) = 0 
    [1758500.000, 1759000.000) = 0 
    [1759000.000, 1759500.000) = 0 
    [1759500.000, 1760000.000) = 69 
    [1760000.000, 1760500.000) = 0 
    [1760500.000, 1761000.000) = 0 
    [1761000.000, 1761500.000) = 0 
    [1761500.000, 1762000.000) = 23 
    [1762000.000, 1762500.000) = 0 
    [1762500.000, 1763000.000) = 0 
    [1763000.000, 1763500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1757413.376 us/op
     p(50.0000) = 1759510.528 us/op
     p(90.0000) = 1761607.680 us/op
     p(95.0000) = 1761607.680 us/op
     p(99.0000) = 1763704.832 us/op
     p(99.9000) = 1763704.832 us/op
     p(99.9900) = 1763704.832 us/op
     p(99.9990) = 1763704.832 us/op
     p(99.9999) = 1763704.832 us/op
    p(100.0000) = 1763704.832 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 92.03% complete, ETA 00:40:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.434 ±(99.9%) 0.221 us/op
# Warmup Iteration   2: 0.064 ±(99.9%) 0.001 us/op
# Warmup Iteration   3: 0.062 ±(99.9%) 0.001 us/op
# Warmup Iteration   4: 0.062 ±(99.9%) 0.001 us/op
# Warmup Iteration   5: 0.062 ±(99.9%) 0.001 us/op
Iteration   1: 0.061 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.047 us/op
                 reduceSynchronizedBlocks·p0.50:   0.060 us/op
                 reduceSynchronizedBlocks·p0.90:   0.064 us/op
                 reduceSynchronizedBlocks·p0.95:   0.065 us/op
                 reduceSynchronizedBlocks·p0.99:   0.073 us/op
                 reduceSynchronizedBlocks·p0.999:  0.128 us/op
                 reduceSynchronizedBlocks·p0.9999: 6.328 us/op
                 reduceSynchronizedBlocks·p1.00:   28.512 us/op

Iteration   2: 0.061 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.047 us/op
                 reduceSynchronizedBlocks·p0.50:   0.060 us/op
                 reduceSynchronizedBlocks·p0.90:   0.064 us/op
                 reduceSynchronizedBlocks·p0.95:   0.066 us/op
                 reduceSynchronizedBlocks·p0.99:   0.076 us/op
                 reduceSynchronizedBlocks·p0.999:  0.130 us/op
                 reduceSynchronizedBlocks·p0.9999: 4.698 us/op
                 reduceSynchronizedBlocks·p1.00:   36.928 us/op

Iteration   3: 0.061 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.047 us/op
                 reduceSynchronizedBlocks·p0.50:   0.060 us/op
                 reduceSynchronizedBlocks·p0.90:   0.065 us/op
                 reduceSynchronizedBlocks·p0.95:   0.066 us/op
                 reduceSynchronizedBlocks·p0.99:   0.077 us/op
                 reduceSynchronizedBlocks·p0.999:  0.127 us/op
                 reduceSynchronizedBlocks·p0.9999: 4.304 us/op
                 reduceSynchronizedBlocks·p1.00:   36.224 us/op

Iteration   4: 0.062 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.047 us/op
                 reduceSynchronizedBlocks·p0.50:   0.060 us/op
                 reduceSynchronizedBlocks·p0.90:   0.065 us/op
                 reduceSynchronizedBlocks·p0.95:   0.072 us/op
                 reduceSynchronizedBlocks·p0.99:   0.082 us/op
                 reduceSynchronizedBlocks·p0.999:  0.132 us/op
                 reduceSynchronizedBlocks·p0.9999: 5.076 us/op
                 reduceSynchronizedBlocks·p1.00:   31.488 us/op

Iteration   5: 0.062 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.047 us/op
                 reduceSynchronizedBlocks·p0.50:   0.060 us/op
                 reduceSynchronizedBlocks·p0.90:   0.064 us/op
                 reduceSynchronizedBlocks·p0.95:   0.066 us/op
                 reduceSynchronizedBlocks·p0.99:   0.078 us/op
                 reduceSynchronizedBlocks·p0.999:  0.127 us/op
                 reduceSynchronizedBlocks·p0.9999: 6.843 us/op
                 reduceSynchronizedBlocks·p1.00:   85.888 us/op

Iteration   6: 0.062 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.047 us/op
                 reduceSynchronizedBlocks·p0.50:   0.060 us/op
                 reduceSynchronizedBlocks·p0.90:   0.064 us/op
                 reduceSynchronizedBlocks·p0.95:   0.066 us/op
                 reduceSynchronizedBlocks·p0.99:   0.077 us/op
                 reduceSynchronizedBlocks·p0.999:  0.130 us/op
                 reduceSynchronizedBlocks·p0.9999: 7.404 us/op
                 reduceSynchronizedBlocks·p1.00:   48.640 us/op

Iteration   7: 0.062 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.047 us/op
                 reduceSynchronizedBlocks·p0.50:   0.060 us/op
                 reduceSynchronizedBlocks·p0.90:   0.064 us/op
                 reduceSynchronizedBlocks·p0.95:   0.066 us/op
                 reduceSynchronizedBlocks·p0.99:   0.076 us/op
                 reduceSynchronizedBlocks·p0.999:  0.132 us/op
                 reduceSynchronizedBlocks·p0.9999: 6.746 us/op
                 reduceSynchronizedBlocks·p1.00:   22.944 us/op

Iteration   8: 0.062 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.047 us/op
                 reduceSynchronizedBlocks·p0.50:   0.060 us/op
                 reduceSynchronizedBlocks·p0.90:   0.065 us/op
                 reduceSynchronizedBlocks·p0.95:   0.066 us/op
                 reduceSynchronizedBlocks·p0.99:   0.077 us/op
                 reduceSynchronizedBlocks·p0.999:  0.133 us/op
                 reduceSynchronizedBlocks·p0.9999: 4.954 us/op
                 reduceSynchronizedBlocks·p1.00:   54.976 us/op

Iteration   9: 0.062 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.047 us/op
                 reduceSynchronizedBlocks·p0.50:   0.060 us/op
                 reduceSynchronizedBlocks·p0.90:   0.064 us/op
                 reduceSynchronizedBlocks·p0.95:   0.065 us/op
                 reduceSynchronizedBlocks·p0.99:   0.074 us/op
                 reduceSynchronizedBlocks·p0.999:  0.133 us/op
                 reduceSynchronizedBlocks·p0.9999: 7.145 us/op
                 reduceSynchronizedBlocks·p1.00:   29.088 us/op

Iteration  10: 0.062 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.047 us/op
                 reduceSynchronizedBlocks·p0.50:   0.059 us/op
                 reduceSynchronizedBlocks·p0.90:   0.065 us/op
                 reduceSynchronizedBlocks·p0.95:   0.067 us/op
                 reduceSynchronizedBlocks·p0.99:   0.076 us/op
                 reduceSynchronizedBlocks·p0.999:  0.134 us/op
                 reduceSynchronizedBlocks·p0.9999: 5.988 us/op
                 reduceSynchronizedBlocks·p1.00:   52.032 us/op

Iteration  11: 0.062 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.047 us/op
                 reduceSynchronizedBlocks·p0.50:   0.059 us/op
                 reduceSynchronizedBlocks·p0.90:   0.065 us/op
                 reduceSynchronizedBlocks·p0.95:   0.067 us/op
                 reduceSynchronizedBlocks·p0.99:   0.079 us/op
                 reduceSynchronizedBlocks·p0.999:  0.132 us/op
                 reduceSynchronizedBlocks·p0.9999: 5.572 us/op
                 reduceSynchronizedBlocks·p1.00:   42.688 us/op

Iteration  12: 0.062 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.047 us/op
                 reduceSynchronizedBlocks·p0.50:   0.059 us/op
                 reduceSynchronizedBlocks·p0.90:   0.066 us/op
                 reduceSynchronizedBlocks·p0.95:   0.068 us/op
                 reduceSynchronizedBlocks·p0.99:   0.080 us/op
                 reduceSynchronizedBlocks·p0.999:  0.131 us/op
                 reduceSynchronizedBlocks·p0.9999: 4.108 us/op
                 reduceSynchronizedBlocks·p1.00:   54.208 us/op

Iteration  13: 0.063 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.047 us/op
                 reduceSynchronizedBlocks·p0.50:   0.059 us/op
                 reduceSynchronizedBlocks·p0.90:   0.065 us/op
                 reduceSynchronizedBlocks·p0.95:   0.068 us/op
                 reduceSynchronizedBlocks·p0.99:   0.077 us/op
                 reduceSynchronizedBlocks·p0.999:  0.129 us/op
                 reduceSynchronizedBlocks·p0.9999: 5.210 us/op
                 reduceSynchronizedBlocks·p1.00:   317.440 us/op

Iteration  14: 0.061 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.047 us/op
                 reduceSynchronizedBlocks·p0.50:   0.059 us/op
                 reduceSynchronizedBlocks·p0.90:   0.065 us/op
                 reduceSynchronizedBlocks·p0.95:   0.066 us/op
                 reduceSynchronizedBlocks·p0.99:   0.076 us/op
                 reduceSynchronizedBlocks·p0.999:  0.127 us/op
                 reduceSynchronizedBlocks·p0.9999: 5.086 us/op
                 reduceSynchronizedBlocks·p1.00:   26.208 us/op

Iteration  15: 0.061 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.047 us/op
                 reduceSynchronizedBlocks·p0.50:   0.059 us/op
                 reduceSynchronizedBlocks·p0.90:   0.064 us/op
                 reduceSynchronizedBlocks·p0.95:   0.066 us/op
                 reduceSynchronizedBlocks·p0.99:   0.077 us/op
                 reduceSynchronizedBlocks·p0.999:  0.132 us/op
                 reduceSynchronizedBlocks·p0.9999: 6.787 us/op
                 reduceSynchronizedBlocks·p1.00:   21.952 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  N = 5666213
  mean =      0.062 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 5666186 
    [ 25.000,  50.000) = 21 
    [ 50.000,  75.000) = 4 
    [ 75.000, 100.000) = 1 
    [100.000, 125.000) = 0 
    [125.000, 150.000) = 0 
    [150.000, 175.000) = 0 
    [175.000, 200.000) = 0 
    [200.000, 225.000) = 0 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 0 
    [275.000, 300.000) = 0 
    [300.000, 325.000) = 1 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.047 us/op
     p(50.0000) =      0.059 us/op
     p(90.0000) =      0.065 us/op
     p(95.0000) =      0.066 us/op
     p(99.0000) =      0.077 us/op
     p(99.9000) =      0.131 us/op
     p(99.9900) =      5.568 us/op
     p(99.9990) =     17.664 us/op
     p(99.9999) =     52.758 us/op
    p(100.0000) =    317.440 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 92.75% complete, ETA 00:36:38
# Fork: 1 of 1
# Warmup Iteration   1: 10758.027 ±(99.9%) 433.754 us/op
# Warmup Iteration   2: 10577.944 ±(99.9%) 6.673 us/op
# Warmup Iteration   3: 10580.614 ±(99.9%) 5.698 us/op
# Warmup Iteration   4: 10585.971 ±(99.9%) 15.255 us/op
# Warmup Iteration   5: 10584.047 ±(99.9%) 4.416 us/op
Iteration   1: 10586.025 ±(99.9%) 4.861 us/op
                 reduceYoungObjects·p0.00:   10240.000 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10616.832 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10749.542 us/op
                 reduceYoungObjects·p0.999:  11386.880 us/op
                 reduceYoungObjects·p0.9999: 11386.880 us/op
                 reduceYoungObjects·p1.00:   11386.880 us/op

Iteration   2: 10583.024 ±(99.9%) 4.401 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10698.752 us/op
                 reduceYoungObjects·p0.999:  10813.440 us/op
                 reduceYoungObjects·p0.9999: 10813.440 us/op
                 reduceYoungObjects·p1.00:   10813.440 us/op

Iteration   3: 10580.042 ±(99.9%) 5.511 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10616.832 us/op
                 reduceYoungObjects·p0.95:   10633.216 us/op
                 reduceYoungObjects·p0.99:   10715.136 us/op
                 reduceYoungObjects·p0.999:  10829.824 us/op
                 reduceYoungObjects·p0.9999: 10829.824 us/op
                 reduceYoungObjects·p1.00:   10829.824 us/op

Iteration   4: 10578.603 ±(99.9%) 4.907 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10665.984 us/op
                 reduceYoungObjects·p0.999:  10862.592 us/op
                 reduceYoungObjects·p0.9999: 10862.592 us/op
                 reduceYoungObjects·p1.00:   10862.592 us/op

Iteration   5: 10560.673 ±(99.9%) 9.659 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10658.120 us/op
                 reduceYoungObjects·p0.999:  10780.672 us/op
                 reduceYoungObjects·p0.9999: 10780.672 us/op
                 reduceYoungObjects·p1.00:   10780.672 us/op

Iteration   6: 10584.914 ±(99.9%) 4.192 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10698.752 us/op
                 reduceYoungObjects·p0.999:  11091.968 us/op
                 reduceYoungObjects·p0.9999: 11091.968 us/op
                 reduceYoungObjects·p1.00:   11091.968 us/op

Iteration   7: 10584.775 ±(99.9%) 4.824 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10616.832 us/op
                 reduceYoungObjects·p0.95:   10633.216 us/op
                 reduceYoungObjects·p0.99:   10731.520 us/op
                 reduceYoungObjects·p0.999:  11059.200 us/op
                 reduceYoungObjects·p0.9999: 11059.200 us/op
                 reduceYoungObjects·p1.00:   11059.200 us/op

Iteration   8: 10584.463 ±(99.9%) 2.707 us/op
                 reduceYoungObjects·p0.00:   10354.688 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10665.984 us/op
                 reduceYoungObjects·p0.999:  10747.904 us/op
                 reduceYoungObjects·p0.9999: 10747.904 us/op
                 reduceYoungObjects·p1.00:   10747.904 us/op

Iteration   9: 10581.446 ±(99.9%) 4.143 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10682.368 us/op
                 reduceYoungObjects·p0.999:  10764.288 us/op
                 reduceYoungObjects·p0.9999: 10764.288 us/op
                 reduceYoungObjects·p1.00:   10764.288 us/op

Iteration  10: 10581.481 ±(99.9%) 3.908 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10682.368 us/op
                 reduceYoungObjects·p0.999:  10813.440 us/op
                 reduceYoungObjects·p0.9999: 10813.440 us/op
                 reduceYoungObjects·p1.00:   10813.440 us/op

Iteration  11: 10570.122 ±(99.9%) 6.980 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10649.600 us/op
                 reduceYoungObjects·p0.999:  10764.288 us/op
                 reduceYoungObjects·p0.9999: 10764.288 us/op
                 reduceYoungObjects·p1.00:   10764.288 us/op

Iteration  12: 10578.429 ±(99.9%) 6.004 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10731.520 us/op
                 reduceYoungObjects·p0.999:  10846.208 us/op
                 reduceYoungObjects·p0.9999: 10846.208 us/op
                 reduceYoungObjects·p1.00:   10846.208 us/op

Iteration  13: 10578.429 ±(99.9%) 5.307 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10723.983 us/op
                 reduceYoungObjects·p0.999:  10813.440 us/op
                 reduceYoungObjects·p0.9999: 10813.440 us/op
                 reduceYoungObjects·p1.00:   10813.440 us/op

Iteration  14: 10566.797 ±(99.9%) 8.924 us/op
                 reduceYoungObjects·p0.00:   10174.464 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10715.136 us/op
                 reduceYoungObjects·p0.999:  10846.208 us/op
                 reduceYoungObjects·p0.9999: 10846.208 us/op
                 reduceYoungObjects·p1.00:   10846.208 us/op

Iteration  15: 10576.886 ±(99.9%) 6.362 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10616.832 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10682.368 us/op
                 reduceYoungObjects·p0.999:  10846.208 us/op
                 reduceYoungObjects·p0.9999: 10846.208 us/op
                 reduceYoungObjects·p1.00:   10846.208 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  N = 14177
  mean =  10578.402 ±(99.9%) 1.505 us/op

  Histogram, us/op:
    [10000.000, 10125.000) = 0 
    [10125.000, 10250.000) = 181 
    [10250.000, 10375.000) = 59 
    [10375.000, 10500.000) = 93 
    [10500.000, 10625.000) = 13229 
    [10625.000, 10750.000) = 574 
    [10750.000, 10875.000) = 35 
    [10875.000, 11000.000) = 3 
    [11000.000, 11125.000) = 2 
    [11125.000, 11250.000) = 0 
    [11250.000, 11375.000) = 0 
    [11375.000, 11500.000) = 1 
    [11500.000, 11625.000) = 0 
    [11625.000, 11750.000) = 0 
    [11750.000, 11875.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  10174.464 us/op
     p(50.0000) =  10584.064 us/op
     p(90.0000) =  10600.448 us/op
     p(95.0000) =  10616.832 us/op
     p(99.0000) =  10698.752 us/op
     p(99.9000) =  10813.440 us/op
     p(99.9900) =  11263.666 us/op
     p(99.9990) =  11386.880 us/op
     p(99.9999) =  11386.880 us/op
    p(100.0000) =  11386.880 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 93.48% complete, ETA 00:32:58
# Fork: 1 of 1
# Warmup Iteration   1: 37541.819 ±(99.9%) 3197.346 us/op
# Warmup Iteration   2: 36336.495 ±(99.9%) 70.979 us/op
# Warmup Iteration   3: 33472.348 ±(99.9%) 58.484 us/op
# Warmup Iteration   4: 46614.995 ±(99.9%) 93.721 us/op
# Warmup Iteration   5: 40243.052 ±(99.9%) 65.488 us/op
Iteration   1: 34104.890 ±(99.9%) 53.086 us/op
                 redundantCode·p0.00:   33882.112 us/op
                 redundantCode·p0.50:   34078.720 us/op
                 redundantCode·p0.90:   34209.792 us/op
                 redundantCode·p0.95:   34209.792 us/op
                 redundantCode·p0.99:   34352.660 us/op
                 redundantCode·p0.999:  38535.168 us/op
                 redundantCode·p0.9999: 38535.168 us/op
                 redundantCode·p1.00:   38535.168 us/op

Iteration   2: 38904.159 ±(99.9%) 71.789 us/op
                 redundantCode·p0.00:   38666.240 us/op
                 redundantCode·p0.50:   38862.848 us/op
                 redundantCode·p0.90:   38941.491 us/op
                 redundantCode·p0.95:   38993.920 us/op
                 redundantCode·p0.99:   39180.042 us/op
                 redundantCode·p0.999:  44302.336 us/op
                 redundantCode·p0.9999: 44302.336 us/op
                 redundantCode·p1.00:   44302.336 us/op

Iteration   3: 37897.433 ±(99.9%) 82.744 us/op
                 redundantCode·p0.00:   37683.200 us/op
                 redundantCode·p0.50:   37879.808 us/op
                 redundantCode·p0.90:   38010.880 us/op
                 redundantCode·p0.95:   38076.416 us/op
                 redundantCode·p0.99:   39203.635 us/op
                 redundantCode·p0.999:  43581.440 us/op
                 redundantCode·p0.9999: 43581.440 us/op
                 redundantCode·p1.00:   43581.440 us/op

Iteration   4: 35664.878 ±(99.9%) 111.372 us/op
                 redundantCode·p0.00:   35454.976 us/op
                 redundantCode·p0.50:   35651.584 us/op
                 redundantCode·p0.90:   35717.120 us/op
                 redundantCode·p0.95:   35782.656 us/op
                 redundantCode·p0.99:   36276.797 us/op
                 redundantCode·p0.999:  44892.160 us/op
                 redundantCode·p0.9999: 44892.160 us/op
                 redundantCode·p1.00:   44892.160 us/op

Iteration   5: 35454.976 ±(99.9%) 68.218 us/op
                 redundantCode·p0.00:   35323.904 us/op
                 redundantCode·p0.50:   35454.976 us/op
                 redundantCode·p0.90:   35520.512 us/op
                 redundantCode·p0.95:   35586.048 us/op
                 redundantCode·p0.99:   36034.970 us/op
                 redundantCode·p0.999:  40960.000 us/op
                 redundantCode·p0.9999: 40960.000 us/op
                 redundantCode·p1.00:   40960.000 us/op

Iteration   6: 30203.978 ±(99.9%) 50.041 us/op
                 redundantCode·p0.00:   30015.488 us/op
                 redundantCode·p0.50:   30179.328 us/op
                 redundantCode·p0.90:   30277.632 us/op
                 redundantCode·p0.95:   30375.936 us/op
                 redundantCode·p0.99:   30605.312 us/op
                 redundantCode·p0.999:  34865.152 us/op
                 redundantCode·p0.9999: 34865.152 us/op
                 redundantCode·p1.00:   34865.152 us/op

Iteration   7: 38420.417 ±(99.9%) 66.276 us/op
                 redundantCode·p0.00:   38207.488 us/op
                 redundantCode·p0.50:   38404.096 us/op
                 redundantCode·p0.90:   38469.632 us/op
                 redundantCode·p0.95:   38535.168 us/op
                 redundantCode·p0.99:   38847.119 us/op
                 redundantCode·p0.999:  43384.832 us/op
                 redundantCode·p0.9999: 43384.832 us/op
                 redundantCode·p1.00:   43384.832 us/op

Iteration   8: 37955.025 ±(99.9%) 161.014 us/op
                 redundantCode·p0.00:   37748.736 us/op
                 redundantCode·p0.50:   37879.808 us/op
                 redundantCode·p0.90:   38010.880 us/op
                 redundantCode·p0.95:   38010.880 us/op
                 redundantCode·p0.99:   38453.248 us/op
                 redundantCode·p0.999:  50593.792 us/op
                 redundantCode·p0.9999: 50593.792 us/op
                 redundantCode·p1.00:   50593.792 us/op

Iteration   9: 35383.651 ±(99.9%) 136.905 us/op
                 redundantCode·p0.00:   35192.832 us/op
                 redundantCode·p0.50:   35323.904 us/op
                 redundantCode·p0.90:   35454.976 us/op
                 redundantCode·p0.95:   35520.512 us/op
                 redundantCode·p0.99:   36044.800 us/op
                 redundantCode·p0.999:  46858.240 us/op
                 redundantCode·p0.9999: 46858.240 us/op
                 redundantCode·p1.00:   46858.240 us/op

Iteration  10: 35838.796 ±(99.9%) 63.361 us/op
                 redundantCode·p0.00:   35586.048 us/op
                 redundantCode·p0.50:   35782.656 us/op
                 redundantCode·p0.90:   35913.728 us/op
                 redundantCode·p0.95:   36044.800 us/op
                 redundantCode·p0.99:   36241.408 us/op
                 redundantCode·p0.999:  40828.928 us/op
                 redundantCode·p0.9999: 40828.928 us/op
                 redundantCode·p1.00:   40828.928 us/op

Iteration  11: 32462.343 ±(99.9%) 53.322 us/op
                 redundantCode·p0.00:   32309.248 us/op
                 redundantCode·p0.50:   32440.320 us/op
                 redundantCode·p0.90:   32571.392 us/op
                 redundantCode·p0.95:   32604.160 us/op
                 redundantCode·p0.99:   32732.283 us/op
                 redundantCode·p0.999:  37158.912 us/op
                 redundantCode·p0.9999: 37158.912 us/op
                 redundantCode·p1.00:   37158.912 us/op

Iteration  12: 34439.731 ±(99.9%) 136.719 us/op
                 redundantCode·p0.00:   34209.792 us/op
                 redundantCode·p0.50:   34406.400 us/op
                 redundantCode·p0.90:   34471.936 us/op
                 redundantCode·p0.95:   34603.008 us/op
                 redundantCode·p0.99:   34865.152 us/op
                 redundantCode·p0.999:  46268.416 us/op
                 redundantCode·p0.9999: 46268.416 us/op
                 redundantCode·p1.00:   46268.416 us/op

Iteration  13: 42058.692 ±(99.9%) 90.634 us/op
                 redundantCode·p0.00:   41877.504 us/op
                 redundantCode·p0.50:   42008.576 us/op
                 redundantCode·p0.90:   42139.648 us/op
                 redundantCode·p0.95:   42205.184 us/op
                 redundantCode·p0.99:   43986.452 us/op
                 redundantCode·p0.999:  47644.672 us/op
                 redundantCode·p0.9999: 47644.672 us/op
                 redundantCode·p1.00:   47644.672 us/op

Iteration  14: 35372.303 ±(99.9%) 58.020 us/op
                 redundantCode·p0.00:   35192.832 us/op
                 redundantCode·p0.50:   35323.904 us/op
                 redundantCode·p0.90:   35454.976 us/op
                 redundantCode·p0.95:   35520.512 us/op
                 redundantCode·p0.99:   35596.534 us/op
                 redundantCode·p0.999:  40108.032 us/op
                 redundantCode·p0.9999: 40108.032 us/op
                 redundantCode·p1.00:   40108.032 us/op

Iteration  15: 40021.787 ±(99.9%) 196.867 us/op
                 redundantCode·p0.00:   39780.352 us/op
                 redundantCode·p0.50:   39976.960 us/op
                 redundantCode·p0.90:   40042.496 us/op
                 redundantCode·p0.95:   40108.032 us/op
                 redundantCode·p0.99:   41220.833 us/op
                 redundantCode·p0.999:  54591.488 us/op
                 redundantCode·p0.9999: 54591.488 us/op
                 redundantCode·p1.00:   54591.488 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  N = 4165
  mean =  36043.282 ±(99.9%) 151.167 us/op

  Histogram, us/op:
    [30000.000, 32500.000) = 557 
    [32500.000, 35000.000) = 663 
    [35000.000, 37500.000) = 1404 
    [37500.000, 40000.000) = 1252 
    [40000.000, 42500.000) = 279 
    [42500.000, 45000.000) = 5 
    [45000.000, 47500.000) = 2 
    [47500.000, 50000.000) = 1 
    [50000.000, 52500.000) = 1 
    [52500.000, 55000.000) = 1 
    [55000.000, 57500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  30015.488 us/op
     p(50.0000) =  35586.048 us/op
     p(90.0000) =  39911.424 us/op
     p(95.0000) =  41943.040 us/op
     p(99.0000) =  42074.112 us/op
     p(99.9000) =  46760.329 us/op
     p(99.9900) =  54591.488 us/op
     p(99.9990) =  54591.488 us/op
     p(99.9999) =  54591.488 us/op
    p(100.0000) =  54591.488 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 94.20% complete, ETA 00:29:18
# Fork: 1 of 1
# Warmup Iteration   1: 40158.303 ±(99.9%) 2957.828 us/op
# Warmup Iteration   2: 38723.648 ±(99.9%) 1419.278 us/op
# Warmup Iteration   3: 38578.943 ±(99.9%) 1250.529 us/op
# Warmup Iteration   4: 39126.272 ±(99.9%) 1836.691 us/op
# Warmup Iteration   5: 38954.139 ±(99.9%) 1595.539 us/op
Iteration   1: 39038.464 ±(99.9%) 1685.719 us/op
                 split·p0.00:   37093.376 us/op
                 split·p0.50:   37224.448 us/op
                 split·p0.90:   37355.520 us/op
                 split·p0.95:   55328.768 us/op
                 split·p0.99:   83427.328 us/op
                 split·p0.999:  96862.208 us/op
                 split·p0.9999: 96862.208 us/op
                 split·p1.00:   96862.208 us/op

Iteration   2: 38636.382 ±(99.9%) 1386.480 us/op
                 split·p0.00:   37093.376 us/op
                 split·p0.50:   37224.448 us/op
                 split·p0.90:   37355.520 us/op
                 split·p0.95:   48562.176 us/op
                 split·p0.99:   79534.490 us/op
                 split·p0.999:  86769.664 us/op
                 split·p0.9999: 86769.664 us/op
                 split·p1.00:   86769.664 us/op

Iteration   3: 38673.831 ±(99.9%) 1465.361 us/op
                 split·p0.00:   37027.840 us/op
                 split·p0.50:   37224.448 us/op
                 split·p0.90:   37355.520 us/op
                 split·p0.95:   46792.704 us/op
                 split·p0.99:   81369.498 us/op
                 split·p0.999:  97648.640 us/op
                 split·p0.9999: 97648.640 us/op
                 split·p1.00:   97648.640 us/op

Iteration   4: 38591.848 ±(99.9%) 1276.473 us/op
                 split·p0.00:   37093.376 us/op
                 split·p0.50:   37289.984 us/op
                 split·p0.90:   37355.520 us/op
                 split·p0.95:   48300.032 us/op
                 split·p0.99:   75759.616 us/op
                 split·p0.999:  78249.984 us/op
                 split·p0.9999: 78249.984 us/op
                 split·p1.00:   78249.984 us/op

Iteration   5: 38689.519 ±(99.9%) 1416.020 us/op
                 split·p0.00:   37158.912 us/op
                 split·p0.50:   37289.984 us/op
                 split·p0.90:   37486.592 us/op
                 split·p0.95:   47120.384 us/op
                 split·p0.99:   84829.798 us/op
                 split·p0.999:  90832.896 us/op
                 split·p0.9999: 90832.896 us/op
                 split·p1.00:   90832.896 us/op

Iteration   6: 38711.027 ±(99.9%) 1421.404 us/op
                 split·p0.00:   37093.376 us/op
                 split·p0.50:   37289.984 us/op
                 split·p0.90:   37355.520 us/op
                 split·p0.95:   42663.936 us/op
                 split·p0.99:   78249.984 us/op
                 split·p0.999:  91226.112 us/op
                 split·p0.9999: 91226.112 us/op
                 split·p1.00:   91226.112 us/op

Iteration   7: 38485.764 ±(99.9%) 1177.539 us/op
                 split·p0.00:   37093.376 us/op
                 split·p0.50:   37289.984 us/op
                 split·p0.90:   37421.056 us/op
                 split·p0.95:   46491.238 us/op
                 split·p0.99:   72422.523 us/op
                 split·p0.999:  81788.928 us/op
                 split·p0.9999: 81788.928 us/op
                 split·p1.00:   81788.928 us/op

Iteration   8: 38525.590 ±(99.9%) 1306.841 us/op
                 split·p0.00:   37093.376 us/op
                 split·p0.50:   37224.448 us/op
                 split·p0.90:   37421.056 us/op
                 split·p0.95:   41205.760 us/op
                 split·p0.99:   77923.615 us/op
                 split·p0.999:  83361.792 us/op
                 split·p0.9999: 83361.792 us/op
                 split·p1.00:   83361.792 us/op

Iteration   9: 38682.181 ±(99.9%) 1377.517 us/op
                 split·p0.00:   37158.912 us/op
                 split·p0.50:   37289.984 us/op
                 split·p0.90:   37421.056 us/op
                 split·p0.95:   45613.056 us/op
                 split·p0.99:   78643.200 us/op
                 split·p0.999:  85196.800 us/op
                 split·p0.9999: 85196.800 us/op
                 split·p1.00:   85196.800 us/op

Iteration  10: 38734.316 ±(99.9%) 1505.904 us/op
                 split·p0.00:   37093.376 us/op
                 split·p0.50:   37224.448 us/op
                 split·p0.90:   37421.056 us/op
                 split·p0.95:   45213.286 us/op
                 split·p0.99:   81885.921 us/op
                 split·p0.999:  90832.896 us/op
                 split·p0.9999: 90832.896 us/op
                 split·p1.00:   90832.896 us/op

Iteration  11: 38762.258 ±(99.9%) 1522.749 us/op
                 split·p0.00:   37093.376 us/op
                 split·p0.50:   37224.448 us/op
                 split·p0.90:   37355.520 us/op
                 split·p0.95:   43529.011 us/op
                 split·p0.99:   80128.246 us/op
                 split·p0.999:  93061.120 us/op
                 split·p0.9999: 93061.120 us/op
                 split·p1.00:   93061.120 us/op

Iteration  12: 38584.763 ±(99.9%) 1297.962 us/op
                 split·p0.00:   37093.376 us/op
                 split·p0.50:   37224.448 us/op
                 split·p0.90:   37617.664 us/op
                 split·p0.95:   46268.416 us/op
                 split·p0.99:   77542.195 us/op
                 split·p0.999:  82051.072 us/op
                 split·p0.9999: 82051.072 us/op
                 split·p1.00:   82051.072 us/op

Iteration  13: 38638.912 ±(99.9%) 1402.526 us/op
                 split·p0.00:   37093.376 us/op
                 split·p0.50:   37224.448 us/op
                 split·p0.90:   37289.984 us/op
                 split·p0.95:   46399.488 us/op
                 split·p0.99:   79639.347 us/op
                 split·p0.999:  86507.520 us/op
                 split·p0.9999: 86507.520 us/op
                 split·p1.00:   86507.520 us/op

Iteration  14: 38685.471 ±(99.9%) 1407.052 us/op
                 split·p0.00:   37093.376 us/op
                 split·p0.50:   37289.984 us/op
                 split·p0.90:   37421.056 us/op
                 split·p0.95:   41811.968 us/op
                 split·p0.99:   80137.421 us/op
                 split·p0.999:  89391.104 us/op
                 split·p0.9999: 89391.104 us/op
                 split·p1.00:   89391.104 us/op

Iteration  15: 38710.268 ±(99.9%) 1454.405 us/op
                 split·p0.00:   37093.376 us/op
                 split·p0.50:   37224.448 us/op
                 split·p0.90:   37421.056 us/op
                 split·p0.95:   43581.440 us/op
                 split·p0.99:   83440.435 us/op
                 split·p0.999:  86769.664 us/op
                 split·p0.9999: 86769.664 us/op
                 split·p1.00:   86769.664 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  N = 3882
  mean =  38676.302 ±(99.9%) 359.805 us/op

  Histogram, us/op:
    [ 30000.000,  35000.000) = 0 
    [ 35000.000,  40000.000) = 3677 
    [ 40000.000,  45000.000) = 13 
    [ 45000.000,  50000.000) = 27 
    [ 50000.000,  55000.000) = 26 
    [ 55000.000,  60000.000) = 21 
    [ 60000.000,  65000.000) = 20 
    [ 65000.000,  70000.000) = 25 
    [ 70000.000,  75000.000) = 21 
    [ 75000.000,  80000.000) = 22 
    [ 80000.000,  85000.000) = 14 
    [ 85000.000,  90000.000) = 9 
    [ 90000.000,  95000.000) = 5 

  Percentiles, us/op:
      p(0.0000) =  37027.840 us/op
     p(50.0000) =  37224.448 us/op
     p(90.0000) =  37421.056 us/op
     p(95.0000) =  44361.318 us/op
     p(99.0000) =  78927.626 us/op
     p(99.9000) =  92598.174 us/op
     p(99.9900) =  97648.640 us/op
     p(99.9990) =  97648.640 us/op
     p(99.9999) =  97648.640 us/op
    p(100.0000) =  97648.640 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 94.92% complete, ETA 00:25:38
# Fork: 1 of 1
# Warmup Iteration   1: 18983.336 ±(99.9%) 1393.202 us/op
# Warmup Iteration   2: 18594.470 ±(99.9%) 1032.580 us/op
# Warmup Iteration   3: 18437.623 ±(99.9%) 968.812 us/op
# Warmup Iteration   4: 18308.280 ±(99.9%) 910.300 us/op
# Warmup Iteration   5: 18258.234 ±(99.9%) 886.257 us/op
Iteration   1: 18322.443 ±(99.9%) 922.654 us/op
                 mapToPair·p0.00:   16269.312 us/op
                 mapToPair·p0.50:   16465.920 us/op
                 mapToPair·p0.90:   17367.040 us/op
                 mapToPair·p0.95:   35933.389 us/op
                 mapToPair·p0.99:   49395.139 us/op
                 mapToPair·p0.999:  56754.176 us/op
                 mapToPair·p0.9999: 56754.176 us/op
                 mapToPair·p1.00:   56754.176 us/op

Iteration   2: 18253.361 ±(99.9%) 900.592 us/op
                 mapToPair·p0.00:   16252.928 us/op
                 mapToPair·p0.50:   16465.920 us/op
                 mapToPair·p0.90:   17576.755 us/op
                 mapToPair·p0.95:   35491.021 us/op
                 mapToPair·p0.99:   48465.838 us/op
                 mapToPair·p0.999:  60030.976 us/op
                 mapToPair·p0.9999: 60030.976 us/op
                 mapToPair·p1.00:   60030.976 us/op

Iteration   3: 18337.897 ±(99.9%) 930.000 us/op
                 mapToPair·p0.00:   16236.544 us/op
                 mapToPair·p0.50:   16449.536 us/op
                 mapToPair·p0.90:   17661.952 us/op
                 mapToPair·p0.95:   34603.008 us/op
                 mapToPair·p0.99:   50177.638 us/op
                 mapToPair·p0.999:  56950.784 us/op
                 mapToPair·p0.9999: 56950.784 us/op
                 mapToPair·p1.00:   56950.784 us/op

Iteration   4: 18305.879 ±(99.9%) 930.383 us/op
                 mapToPair·p0.00:   16252.928 us/op
                 mapToPair·p0.50:   16449.536 us/op
                 mapToPair·p0.90:   17704.550 us/op
                 mapToPair·p0.95:   33741.210 us/op
                 mapToPair·p0.99:   50393.907 us/op
                 mapToPair·p0.999:  52756.480 us/op
                 mapToPair·p0.9999: 52756.480 us/op
                 mapToPair·p1.00:   52756.480 us/op

Iteration   5: 18280.201 ±(99.9%) 922.008 us/op
                 mapToPair·p0.00:   16252.928 us/op
                 mapToPair·p0.50:   16449.536 us/op
                 mapToPair·p0.90:   18874.368 us/op
                 mapToPair·p0.95:   32132.301 us/op
                 mapToPair·p0.99:   51579.453 us/op
                 mapToPair·p0.999:  60293.120 us/op
                 mapToPair·p0.9999: 60293.120 us/op
                 mapToPair·p1.00:   60293.120 us/op

Iteration   6: 18297.454 ±(99.9%) 932.323 us/op
                 mapToPair·p0.00:   16252.928 us/op
                 mapToPair·p0.50:   16449.536 us/op
                 mapToPair·p0.90:   19202.048 us/op
                 mapToPair·p0.95:   35389.440 us/op
                 mapToPair·p0.99:   50124.554 us/op
                 mapToPair·p0.999:  60358.656 us/op
                 mapToPair·p0.9999: 60358.656 us/op
                 mapToPair·p1.00:   60358.656 us/op

Iteration   7: 18238.412 ±(99.9%) 904.901 us/op
                 mapToPair·p0.00:   16203.776 us/op
                 mapToPair·p0.50:   16449.536 us/op
                 mapToPair·p0.90:   17334.272 us/op
                 mapToPair·p0.95:   37194.957 us/op
                 mapToPair·p0.99:   48699.802 us/op
                 mapToPair·p0.999:  59310.080 us/op
                 mapToPair·p0.9999: 59310.080 us/op
                 mapToPair·p1.00:   59310.080 us/op

Iteration   8: 18383.752 ±(99.9%) 979.363 us/op
                 mapToPair·p0.00:   16252.928 us/op
                 mapToPair·p0.50:   16449.536 us/op
                 mapToPair·p0.90:   17907.712 us/op
                 mapToPair·p0.95:   36306.944 us/op
                 mapToPair·p0.99:   51940.557 us/op
                 mapToPair·p0.999:  65142.784 us/op
                 mapToPair·p0.9999: 65142.784 us/op
                 mapToPair·p1.00:   65142.784 us/op

Iteration   9: 18298.142 ±(99.9%) 919.269 us/op
                 mapToPair·p0.00:   16236.544 us/op
                 mapToPair·p0.50:   16449.536 us/op
                 mapToPair·p0.90:   18232.115 us/op
                 mapToPair·p0.95:   35310.797 us/op
                 mapToPair·p0.99:   49301.422 us/op
                 mapToPair·p0.999:  57802.752 us/op
                 mapToPair·p0.9999: 57802.752 us/op
                 mapToPair·p1.00:   57802.752 us/op

Iteration  10: 18311.641 ±(99.9%) 917.899 us/op
                 mapToPair·p0.00:   16252.928 us/op
                 mapToPair·p0.50:   16433.152 us/op
                 mapToPair·p0.90:   17878.221 us/op
                 mapToPair·p0.95:   37224.448 us/op
                 mapToPair·p0.99:   48463.872 us/op
                 mapToPair·p0.999:  53411.840 us/op
                 mapToPair·p0.9999: 53411.840 us/op
                 mapToPair·p1.00:   53411.840 us/op

Iteration  11: 18146.068 ±(99.9%) 863.959 us/op
                 mapToPair·p0.00:   16252.928 us/op
                 mapToPair·p0.50:   16433.152 us/op
                 mapToPair·p0.90:   17917.542 us/op
                 mapToPair·p0.95:   33252.966 us/op
                 mapToPair·p0.99:   50294.948 us/op
                 mapToPair·p0.999:  56426.496 us/op
                 mapToPair·p0.9999: 56426.496 us/op
                 mapToPair·p1.00:   56426.496 us/op

Iteration  12: 18393.660 ±(99.9%) 968.842 us/op
                 mapToPair·p0.00:   16220.160 us/op
                 mapToPair·p0.50:   16433.152 us/op
                 mapToPair·p0.90:   17825.792 us/op
                 mapToPair·p0.95:   36896.768 us/op
                 mapToPair·p0.99:   51173.786 us/op
                 mapToPair·p0.999:  57606.144 us/op
                 mapToPair·p0.9999: 57606.144 us/op
                 mapToPair·p1.00:   57606.144 us/op

Iteration  13: 18315.422 ±(99.9%) 953.808 us/op
                 mapToPair·p0.00:   16252.928 us/op
                 mapToPair·p0.50:   16416.768 us/op
                 mapToPair·p0.90:   17612.800 us/op
                 mapToPair·p0.95:   35179.725 us/op
                 mapToPair·p0.99:   51426.755 us/op
                 mapToPair·p0.999:  59244.544 us/op
                 mapToPair·p0.9999: 59244.544 us/op
                 mapToPair·p1.00:   59244.544 us/op

Iteration  14: 18285.233 ±(99.9%) 915.723 us/op
                 mapToPair·p0.00:   16252.928 us/op
                 mapToPair·p0.50:   16433.152 us/op
                 mapToPair·p0.90:   17694.720 us/op
                 mapToPair·p0.95:   35363.226 us/op
                 mapToPair·p0.99:   48994.714 us/op
                 mapToPair·p0.999:  58720.256 us/op
                 mapToPair·p0.9999: 58720.256 us/op
                 mapToPair·p1.00:   58720.256 us/op

Iteration  15: 18381.493 ±(99.9%) 987.863 us/op
                 mapToPair·p0.00:   16187.392 us/op
                 mapToPair·p0.50:   16400.384 us/op
                 mapToPair·p0.90:   18055.168 us/op
                 mapToPair·p0.95:   34750.464 us/op
                 mapToPair·p0.99:   53146.419 us/op
                 mapToPair·p0.999:  58261.504 us/op
                 mapToPair·p0.9999: 58261.504 us/op
                 mapToPair·p1.00:   58261.504 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  N = 8197
  mean =  18303.213 ±(99.9%) 238.794 us/op

  Histogram, us/op:
    [10000.000, 15000.000) = 0 
    [15000.000, 20000.000) = 7470 
    [20000.000, 25000.000) = 114 
    [25000.000, 30000.000) = 117 
    [30000.000, 35000.000) = 93 
    [35000.000, 40000.000) = 107 
    [40000.000, 45000.000) = 116 
    [45000.000, 50000.000) = 97 
    [50000.000, 55000.000) = 59 
    [55000.000, 60000.000) = 19 
    [60000.000, 65000.000) = 4 

  Percentiles, us/op:
      p(0.0000) =  16187.392 us/op
     p(50.0000) =  16449.536 us/op
     p(90.0000) =  17832.346 us/op
     p(95.0000) =  34799.616 us/op
     p(99.0000) =  50003.968 us/op
     p(99.9000) =  59140.735 us/op
     p(99.9900) =  65142.784 us/op
     p(99.9990) =  65142.784 us/op
     p(99.9999) =  65142.784 us/op
    p(100.0000) =  65142.784 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 95.65% complete, ETA 00:21:58
# Fork: 1 of 1
# Warmup Iteration   1: 15062.670 ±(99.9%) 721.854 us/op
# Warmup Iteration   2: 14602.952 ±(99.9%) 121.719 us/op
# Warmup Iteration   3: 14609.498 ±(99.9%) 135.838 us/op
# Warmup Iteration   4: 14654.383 ±(99.9%) 124.764 us/op
# Warmup Iteration   5: 14626.337 ±(99.9%) 109.143 us/op
Iteration   1: 14634.174 ±(99.9%) 105.655 us/op
                 plusOne·p0.00:   14319.616 us/op
                 plusOne·p0.50:   14499.840 us/op
                 plusOne·p0.90:   14647.296 us/op
                 plusOne·p0.95:   14919.270 us/op
                 plusOne·p0.99:   18764.268 us/op
                 plusOne·p0.999:  26345.472 us/op
                 plusOne·p0.9999: 26345.472 us/op
                 plusOne·p1.00:   26345.472 us/op

Iteration   2: 14607.687 ±(99.9%) 123.040 us/op
                 plusOne·p0.00:   14286.848 us/op
                 plusOne·p0.50:   14467.072 us/op
                 plusOne·p0.90:   14598.144 us/op
                 plusOne·p0.95:   14691.533 us/op
                 plusOne·p0.99:   18786.550 us/op
                 plusOne·p0.999:  29720.576 us/op
                 plusOne·p0.9999: 29720.576 us/op
                 plusOne·p1.00:   29720.576 us/op

Iteration   3: 14683.601 ±(99.9%) 175.991 us/op
                 plusOne·p0.00:   14254.080 us/op
                 plusOne·p0.50:   14483.456 us/op
                 plusOne·p0.90:   14614.528 us/op
                 plusOne·p0.95:   14970.061 us/op
                 plusOne·p0.99:   21175.992 us/op
                 plusOne·p0.999:  33816.576 us/op
                 plusOne·p0.9999: 33816.576 us/op
                 plusOne·p1.00:   33816.576 us/op

Iteration   4: 14598.622 ±(99.9%) 140.352 us/op
                 plusOne·p0.00:   14254.080 us/op
                 plusOne·p0.50:   14450.688 us/op
                 plusOne·p0.90:   14581.760 us/op
                 plusOne·p0.95:   14745.600 us/op
                 plusOne·p0.99:   18780.652 us/op
                 plusOne·p0.999:  31752.192 us/op
                 plusOne·p0.9999: 31752.192 us/op
                 plusOne·p1.00:   31752.192 us/op

Iteration   5: 14611.606 ±(99.9%) 117.377 us/op
                 plusOne·p0.00:   14237.696 us/op
                 plusOne·p0.50:   14467.072 us/op
                 plusOne·p0.90:   14614.528 us/op
                 plusOne·p0.95:   14839.808 us/op
                 plusOne·p0.99:   18682.675 us/op
                 plusOne·p0.999:  26836.992 us/op
                 plusOne·p0.9999: 26836.992 us/op
                 plusOne·p1.00:   26836.992 us/op

Iteration   6: 14608.118 ±(99.9%) 125.746 us/op
                 plusOne·p0.00:   14254.080 us/op
                 plusOne·p0.50:   14450.688 us/op
                 plusOne·p0.90:   14581.760 us/op
                 plusOne·p0.95:   14915.994 us/op
                 plusOne·p0.99:   18989.056 us/op
                 plusOne·p0.999:  26378.240 us/op
                 plusOne·p0.9999: 26378.240 us/op
                 plusOne·p1.00:   26378.240 us/op

Iteration   7: 14587.659 ±(99.9%) 108.360 us/op
                 plusOne·p0.00:   14270.464 us/op
                 plusOne·p0.50:   14450.688 us/op
                 plusOne·p0.90:   14598.144 us/op
                 plusOne·p0.95:   14821.786 us/op
                 plusOne·p0.99:   18942.198 us/op
                 plusOne·p0.999:  25362.432 us/op
                 plusOne·p0.9999: 25362.432 us/op
                 plusOne·p1.00:   25362.432 us/op

Iteration   8: 14640.939 ±(99.9%) 139.605 us/op
                 plusOne·p0.00:   14237.696 us/op
                 plusOne·p0.50:   14467.072 us/op
                 plusOne·p0.90:   14598.144 us/op
                 plusOne·p0.95:   14775.091 us/op
                 plusOne·p0.99:   21560.033 us/op
                 plusOne·p0.999:  27918.336 us/op
                 plusOne·p0.9999: 27918.336 us/op
                 plusOne·p1.00:   27918.336 us/op

Iteration   9: 14598.766 ±(99.9%) 99.743 us/op
                 plusOne·p0.00:   14319.616 us/op
                 plusOne·p0.50:   14467.072 us/op
                 plusOne·p0.90:   14598.144 us/op
                 plusOne·p0.95:   14680.064 us/op
                 plusOne·p0.99:   19337.708 us/op
                 plusOne·p0.999:  23134.208 us/op
                 plusOne·p0.9999: 23134.208 us/op
                 plusOne·p1.00:   23134.208 us/op

Iteration  10: 14625.714 ±(99.9%) 130.221 us/op
                 plusOne·p0.00:   14286.848 us/op
                 plusOne·p0.50:   14483.456 us/op
                 plusOne·p0.90:   14614.528 us/op
                 plusOne·p0.95:   14725.120 us/op
                 plusOne·p0.99:   20545.536 us/op
                 plusOne·p0.999:  29622.272 us/op
                 plusOne·p0.9999: 29622.272 us/op
                 plusOne·p1.00:   29622.272 us/op

Iteration  11: 14616.085 ±(99.9%) 123.366 us/op
                 plusOne·p0.00:   14270.464 us/op
                 plusOne·p0.50:   14467.072 us/op
                 plusOne·p0.90:   14598.144 us/op
                 plusOne·p0.95:   14913.536 us/op
                 plusOne·p0.99:   19067.699 us/op
                 plusOne·p0.999:  25722.880 us/op
                 plusOne·p0.9999: 25722.880 us/op
                 plusOne·p1.00:   25722.880 us/op

Iteration  12: 14644.945 ±(99.9%) 151.568 us/op
                 plusOne·p0.00:   14303.232 us/op
                 plusOne·p0.50:   14467.072 us/op
                 plusOne·p0.90:   14581.760 us/op
                 plusOne·p0.95:   14680.064 us/op
                 plusOne·p0.99:   22303.212 us/op
                 plusOne·p0.999:  31358.976 us/op
                 plusOne·p0.9999: 31358.976 us/op
                 plusOne·p1.00:   31358.976 us/op

Iteration  13: 14611.270 ±(99.9%) 126.890 us/op
                 plusOne·p0.00:   14237.696 us/op
                 plusOne·p0.50:   14467.072 us/op
                 plusOne·p0.90:   14598.144 us/op
                 plusOne·p0.95:   14675.968 us/op
                 plusOne·p0.99:   18874.368 us/op
                 plusOne·p0.999:  30179.328 us/op
                 plusOne·p0.9999: 30179.328 us/op
                 plusOne·p1.00:   30179.328 us/op

Iteration  14: 14629.547 ±(99.9%) 113.236 us/op
                 plusOne·p0.00:   14286.848 us/op
                 plusOne·p0.50:   14483.456 us/op
                 plusOne·p0.90:   14614.528 us/op
                 plusOne·p0.95:   14737.408 us/op
                 plusOne·p0.99:   20106.445 us/op
                 plusOne·p0.999:  23920.640 us/op
                 plusOne·p0.9999: 23920.640 us/op
                 plusOne·p1.00:   23920.640 us/op

Iteration  15: 14591.232 ±(99.9%) 115.950 us/op
                 plusOne·p0.00:   14270.464 us/op
                 plusOne·p0.50:   14450.688 us/op
                 plusOne·p0.90:   14598.144 us/op
                 plusOne·p0.95:   14696.448 us/op
                 plusOne·p0.99:   18452.972 us/op
                 plusOne·p0.999:  30310.400 us/op
                 plusOne·p0.9999: 30310.400 us/op
                 plusOne·p1.00:   30310.400 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  N = 10261
  mean =  14619.291 ±(99.9%) 32.856 us/op

  Histogram, us/op:
    [10000.000, 12500.000) = 0 
    [12500.000, 15000.000) = 9887 
    [15000.000, 17500.000) = 166 
    [17500.000, 20000.000) = 128 
    [20000.000, 22500.000) = 26 
    [22500.000, 25000.000) = 33 
    [25000.000, 27500.000) = 10 
    [27500.000, 30000.000) = 5 
    [30000.000, 32500.000) = 5 
    [32500.000, 35000.000) = 1 
    [35000.000, 37500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  14237.696 us/op
     p(50.0000) =  14467.072 us/op
     p(90.0000) =  14598.144 us/op
     p(95.0000) =  14761.984 us/op
     p(99.0000) =  19042.796 us/op
     p(99.9000) =  28619.637 us/op
     p(99.9900) =  33762.489 us/op
     p(99.9990) =  33816.576 us/op
     p(99.9999) =  33816.576 us/op
    p(100.0000) =  33816.576 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 96.37% complete, ETA 00:18:18
# Fork: 1 of 1
# Warmup Iteration   1: 35490.300 ±(99.9%) 2003.903 us/op
# Warmup Iteration   2: 35524.695 ±(99.9%) 325.557 us/op
# Warmup Iteration   3: 33951.536 ±(99.9%) 247.355 us/op
# Warmup Iteration   4: 34894.837 ±(99.9%) 272.736 us/op
# Warmup Iteration   5: 33997.189 ±(99.9%) 225.853 us/op
Iteration   1: 34962.081 ±(99.9%) 310.114 us/op
                 sort·p0.00:   34406.400 us/op
                 sort·p0.50:   34668.544 us/op
                 sort·p0.90:   35015.885 us/op
                 sort·p0.95:   35717.120 us/op
                 sort·p0.99:   44176.507 us/op
                 sort·p0.999:  54657.024 us/op
                 sort·p0.9999: 54657.024 us/op
                 sort·p1.00:   54657.024 us/op

Iteration   2: 35319.967 ±(99.9%) 191.512 us/op
                 sort·p0.00:   34799.616 us/op
                 sort·p0.50:   35127.296 us/op
                 sort·p0.90:   35454.976 us/op
                 sort·p0.95:   36097.229 us/op
                 sort·p0.99:   41544.581 us/op
                 sort·p0.999:  44695.552 us/op
                 sort·p0.9999: 44695.552 us/op
                 sort·p1.00:   44695.552 us/op

Iteration   3: 34814.459 ±(99.9%) 275.124 us/op
                 sort·p0.00:   34275.328 us/op
                 sort·p0.50:   34537.472 us/op
                 sort·p0.90:   35061.760 us/op
                 sort·p0.95:   35756.442 us/op
                 sort·p0.99:   42409.656 us/op
                 sort·p0.999:  52625.408 us/op
                 sort·p0.9999: 52625.408 us/op
                 sort·p1.00:   52625.408 us/op

Iteration   4: 33542.996 ±(99.9%) 322.345 us/op
                 sort·p0.00:   32964.608 us/op
                 sort·p0.50:   33259.520 us/op
                 sort·p0.90:   33626.522 us/op
                 sort·p0.95:   34471.936 us/op
                 sort·p0.99:   43386.143 us/op
                 sort·p0.999:  54788.096 us/op
                 sort·p0.9999: 54788.096 us/op
                 sort·p1.00:   54788.096 us/op

Iteration   5: 33920.989 ±(99.9%) 197.899 us/op
                 sort·p0.00:   33488.896 us/op
                 sort·p0.50:   33685.504 us/op
                 sort·p0.90:   34013.184 us/op
                 sort·p0.95:   34760.294 us/op
                 sort·p0.99:   40270.561 us/op
                 sort·p0.999:  43778.048 us/op
                 sort·p0.9999: 43778.048 us/op
                 sort·p1.00:   43778.048 us/op

Iteration   6: 33676.016 ±(99.9%) 175.885 us/op
                 sort·p0.00:   33226.752 us/op
                 sort·p0.50:   33488.896 us/op
                 sort·p0.90:   33816.576 us/op
                 sort·p0.95:   34537.472 us/op
                 sort·p0.99:   38338.560 us/op
                 sort·p0.999:  42467.328 us/op
                 sort·p0.9999: 42467.328 us/op
                 sort·p1.00:   42467.328 us/op

Iteration   7: 34782.322 ±(99.9%) 300.223 us/op
                 sort·p0.00:   34275.328 us/op
                 sort·p0.50:   34537.472 us/op
                 sort·p0.90:   34930.688 us/op
                 sort·p0.95:   35389.440 us/op
                 sort·p0.99:   44883.640 us/op
                 sort·p0.999:  53477.376 us/op
                 sort·p0.9999: 53477.376 us/op
                 sort·p1.00:   53477.376 us/op

Iteration   8: 33757.218 ±(99.9%) 304.190 us/op
                 sort·p0.00:   33259.520 us/op
                 sort·p0.50:   33488.896 us/op
                 sort·p0.90:   33829.683 us/op
                 sort·p0.95:   34609.562 us/op
                 sort·p0.99:   44356.076 us/op
                 sort·p0.999:  52166.656 us/op
                 sort·p0.9999: 52166.656 us/op
                 sort·p1.00:   52166.656 us/op

Iteration   9: 33674.140 ±(99.9%) 254.146 us/op
                 sort·p0.00:   33193.984 us/op
                 sort·p0.50:   33423.360 us/op
                 sort·p0.90:   33816.576 us/op
                 sort·p0.95:   34485.043 us/op
                 sort·p0.99:   38683.279 us/op
                 sort·p0.999:  51314.688 us/op
                 sort·p0.9999: 51314.688 us/op
                 sort·p1.00:   51314.688 us/op

Iteration  10: 34886.160 ±(99.9%) 224.737 us/op
                 sort·p0.00:   34406.400 us/op
                 sort·p0.50:   34668.544 us/op
                 sort·p0.90:   35074.867 us/op
                 sort·p0.95:   35625.370 us/op
                 sort·p0.99:   41479.045 us/op
                 sort·p0.999:  46661.632 us/op
                 sort·p0.9999: 46661.632 us/op
                 sort·p1.00:   46661.632 us/op

Iteration  11: 34975.372 ±(99.9%) 220.870 us/op
                 sort·p0.00:   34537.472 us/op
                 sort·p0.50:   34734.080 us/op
                 sort·p0.90:   35127.296 us/op
                 sort·p0.95:   35717.120 us/op
                 sort·p0.99:   42698.015 us/op
                 sort·p0.999:  46071.808 us/op
                 sort·p0.9999: 46071.808 us/op
                 sort·p1.00:   46071.808 us/op

Iteration  12: 35380.409 ±(99.9%) 208.935 us/op
                 sort·p0.00:   34930.688 us/op
                 sort·p0.50:   35192.832 us/op
                 sort·p0.90:   35454.976 us/op
                 sort·p0.95:   35717.120 us/op
                 sort·p0.99:   41290.301 us/op
                 sort·p0.999:  46399.488 us/op
                 sort·p0.9999: 46399.488 us/op
                 sort·p1.00:   46399.488 us/op

Iteration  13: 34563.324 ±(99.9%) 194.648 us/op
                 sort·p0.00:   34144.256 us/op
                 sort·p0.50:   34406.400 us/op
                 sort·p0.90:   34603.008 us/op
                 sort·p0.95:   35160.064 us/op
                 sort·p0.99:   40252.211 us/op
                 sort·p0.999:  44040.192 us/op
                 sort·p0.9999: 44040.192 us/op
                 sort·p1.00:   44040.192 us/op

Iteration  14: 34371.267 ±(99.9%) 267.965 us/op
                 sort·p0.00:   33816.576 us/op
                 sort·p0.50:   34144.256 us/op
                 sort·p0.90:   34537.472 us/op
                 sort·p0.95:   35520.512 us/op
                 sort·p0.99:   39817.052 us/op
                 sort·p0.999:  52494.336 us/op
                 sort·p0.9999: 52494.336 us/op
                 sort·p1.00:   52494.336 us/op

Iteration  15: 35031.742 ±(99.9%) 276.888 us/op
                 sort·p0.00:   34471.936 us/op
                 sort·p0.50:   34734.080 us/op
                 sort·p0.90:   35258.368 us/op
                 sort·p0.95:   36306.944 us/op
                 sort·p0.99:   40549.089 us/op
                 sort·p0.999:  54394.880 us/op
                 sort·p0.9999: 54394.880 us/op
                 sort·p1.00:   54394.880 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  N = 4350
  mean =  34499.544 ±(99.9%) 71.624 us/op

  Histogram, us/op:
    [30000.000, 32500.000) = 0 
    [32500.000, 35000.000) = 3558 
    [35000.000, 37500.000) = 697 
    [37500.000, 40000.000) = 48 
    [40000.000, 42500.000) = 16 
    [42500.000, 45000.000) = 15 
    [45000.000, 47500.000) = 8 
    [47500.000, 50000.000) = 0 
    [50000.000, 52500.000) = 3 
    [52500.000, 55000.000) = 5 
    [55000.000, 57500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  32964.608 us/op
     p(50.0000) =  34537.472 us/op
     p(90.0000) =  35192.832 us/op
     p(95.0000) =  35520.512 us/op
     p(99.0000) =  40402.289 us/op
     p(99.9000) =  53178.335 us/op
     p(99.9900) =  54788.096 us/op
     p(99.9990) =  54788.096 us/op
     p(99.9999) =  54788.096 us/op
    p(100.0000) =  54788.096 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 97.10% complete, ETA 00:14:39
# Fork: 1 of 1
# Warmup Iteration   1: 830.488 ±(99.9%) 15.639 us/op
# Warmup Iteration   2: 806.496 ±(99.9%) 11.351 us/op
# Warmup Iteration   3: 803.719 ±(99.9%) 12.388 us/op
# Warmup Iteration   4: 800.449 ±(99.9%) 11.829 us/op
# Warmup Iteration   5: 808.123 ±(99.9%) 16.819 us/op
Iteration   1: 787.064 ±(99.9%) 11.767 us/op
                 concatenateStrings·p0.00:   728.064 us/op
                 concatenateStrings·p0.50:   759.808 us/op
                 concatenateStrings·p0.90:   781.312 us/op
                 concatenateStrings·p0.95:   791.552 us/op
                 concatenateStrings·p0.99:   828.457 us/op
                 concatenateStrings·p0.999:  7345.996 us/op
                 concatenateStrings·p0.9999: 18693.764 us/op
                 concatenateStrings·p1.00:   19431.424 us/op

Iteration   2: 784.825 ±(99.9%) 9.039 us/op
                 concatenateStrings·p0.00:   728.064 us/op
                 concatenateStrings·p0.50:   760.832 us/op
                 concatenateStrings·p0.90:   782.336 us/op
                 concatenateStrings·p0.95:   792.576 us/op
                 concatenateStrings·p0.99:   835.584 us/op
                 concatenateStrings·p0.999:  5548.892 us/op
                 concatenateStrings·p0.9999: 13511.991 us/op
                 concatenateStrings·p1.00:   14385.152 us/op

Iteration   3: 794.913 ±(99.9%) 12.851 us/op
                 concatenateStrings·p0.00:   730.112 us/op
                 concatenateStrings·p0.50:   763.904 us/op
                 concatenateStrings·p0.90:   786.432 us/op
                 concatenateStrings·p0.95:   796.672 us/op
                 concatenateStrings·p0.99:   847.872 us/op
                 concatenateStrings·p0.999:  9090.990 us/op
                 concatenateStrings·p0.9999: 19152.011 us/op
                 concatenateStrings·p1.00:   20086.784 us/op

Iteration   4: 791.550 ±(99.9%) 11.138 us/op
                 concatenateStrings·p0.00:   726.016 us/op
                 concatenateStrings·p0.50:   761.856 us/op
                 concatenateStrings·p0.90:   783.360 us/op
                 concatenateStrings·p0.95:   794.624 us/op
                 concatenateStrings·p0.99:   1120.256 us/op
                 concatenateStrings·p0.999:  7436.304 us/op
                 concatenateStrings·p0.9999: 13420.252 us/op
                 concatenateStrings·p1.00:   13729.792 us/op

Iteration   5: 790.416 ±(99.9%) 10.634 us/op
                 concatenateStrings·p0.00:   728.064 us/op
                 concatenateStrings·p0.50:   763.904 us/op
                 concatenateStrings·p0.90:   785.408 us/op
                 concatenateStrings·p0.95:   796.672 us/op
                 concatenateStrings·p0.99:   852.552 us/op
                 concatenateStrings·p0.999:  5812.134 us/op
                 concatenateStrings·p0.9999: 13760.686 us/op
                 concatenateStrings·p1.00:   13795.328 us/op

Iteration   6: 800.074 ±(99.9%) 14.210 us/op
                 concatenateStrings·p0.00:   732.160 us/op
                 concatenateStrings·p0.50:   764.928 us/op
                 concatenateStrings·p0.90:   788.480 us/op
                 concatenateStrings·p0.95:   800.768 us/op
                 concatenateStrings·p0.99:   854.221 us/op
                 concatenateStrings·p0.999:  9390.653 us/op
                 concatenateStrings·p0.9999: 20104.282 us/op
                 concatenateStrings·p1.00:   20381.696 us/op

Iteration   7: 790.749 ±(99.9%) 11.058 us/op
                 concatenateStrings·p0.00:   728.064 us/op
                 concatenateStrings·p0.50:   763.904 us/op
                 concatenateStrings·p0.90:   786.432 us/op
                 concatenateStrings·p0.95:   797.696 us/op
                 concatenateStrings·p0.99:   846.848 us/op
                 concatenateStrings·p0.999:  6650.331 us/op
                 concatenateStrings·p0.9999: 18819.768 us/op
                 concatenateStrings·p1.00:   19791.872 us/op

Iteration   8: 794.052 ±(99.9%) 12.193 us/op
                 concatenateStrings·p0.00:   727.040 us/op
                 concatenateStrings·p0.50:   763.904 us/op
                 concatenateStrings·p0.90:   786.432 us/op
                 concatenateStrings·p0.95:   797.696 us/op
                 concatenateStrings·p0.99:   848.036 us/op
                 concatenateStrings·p0.999:  8044.544 us/op
                 concatenateStrings·p0.9999: 20466.853 us/op
                 concatenateStrings·p1.00:   23265.280 us/op

Iteration   9: 790.283 ±(99.9%) 10.067 us/op
                 concatenateStrings·p0.00:   720.896 us/op
                 concatenateStrings·p0.50:   763.904 us/op
                 concatenateStrings·p0.90:   785.408 us/op
                 concatenateStrings·p0.95:   796.672 us/op
                 concatenateStrings·p0.99:   843.776 us/op
                 concatenateStrings·p0.999:  7111.311 us/op
                 concatenateStrings·p0.9999: 12518.785 us/op
                 concatenateStrings·p1.00:   13090.816 us/op

Iteration  10: 797.519 ±(99.9%) 13.856 us/op
                 concatenateStrings·p0.00:   728.064 us/op
                 concatenateStrings·p0.50:   762.880 us/op
                 concatenateStrings·p0.90:   785.408 us/op
                 concatenateStrings·p0.95:   797.696 us/op
                 concatenateStrings·p0.99:   851.968 us/op
                 concatenateStrings·p0.999:  8731.689 us/op
                 concatenateStrings·p0.9999: 19500.925 us/op
                 concatenateStrings·p1.00:   19857.408 us/op

Iteration  11: 791.008 ±(99.9%) 12.599 us/op
                 concatenateStrings·p0.00:   730.112 us/op
                 concatenateStrings·p0.50:   762.880 us/op
                 concatenateStrings·p0.90:   784.384 us/op
                 concatenateStrings·p0.95:   796.672 us/op
                 concatenateStrings·p0.99:   843.776 us/op
                 concatenateStrings·p0.999:  6616.293 us/op
                 concatenateStrings·p0.9999: 25433.172 us/op
                 concatenateStrings·p1.00:   28573.696 us/op

Iteration  12: 788.716 ±(99.9%) 10.812 us/op
                 concatenateStrings·p0.00:   730.112 us/op
                 concatenateStrings·p0.50:   761.856 us/op
                 concatenateStrings·p0.90:   783.360 us/op
                 concatenateStrings·p0.95:   795.648 us/op
                 concatenateStrings·p0.99:   842.035 us/op
                 concatenateStrings·p0.999:  5892.506 us/op
                 concatenateStrings·p0.9999: 16347.447 us/op
                 concatenateStrings·p1.00:   17629.184 us/op

Iteration  13: 792.063 ±(99.9%) 11.778 us/op
                 concatenateStrings·p0.00:   724.992 us/op
                 concatenateStrings·p0.50:   762.880 us/op
                 concatenateStrings·p0.90:   784.384 us/op
                 concatenateStrings·p0.95:   795.648 us/op
                 concatenateStrings·p0.99:   840.704 us/op
                 concatenateStrings·p0.999:  8856.142 us/op
                 concatenateStrings·p0.9999: 13370.589 us/op
                 concatenateStrings·p1.00:   13434.880 us/op

Iteration  14: 790.662 ±(99.9%) 11.174 us/op
                 concatenateStrings·p0.00:   728.064 us/op
                 concatenateStrings·p0.50:   761.856 us/op
                 concatenateStrings·p0.90:   783.360 us/op
                 concatenateStrings·p0.95:   793.600 us/op
                 concatenateStrings·p0.99:   833.147 us/op
                 concatenateStrings·p0.999:  8081.687 us/op
                 concatenateStrings·p0.9999: 15138.826 us/op
                 concatenateStrings·p1.00:   15843.328 us/op

Iteration  15: 788.822 ±(99.9%) 11.423 us/op
                 concatenateStrings·p0.00:   720.896 us/op
                 concatenateStrings·p0.50:   761.856 us/op
                 concatenateStrings·p0.90:   782.336 us/op
                 concatenateStrings·p0.95:   792.576 us/op
                 concatenateStrings·p0.99:   846.848 us/op
                 concatenateStrings·p0.999:  6269.141 us/op
                 concatenateStrings·p0.9999: 17329.540 us/op
                 concatenateStrings·p1.00:   18055.168 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 189362
  mean =    791.497 ±(99.9%) 3.021 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 188230 
    [ 2500.000,  5000.000) = 804 
    [ 5000.000,  7500.000) = 139 
    [ 7500.000, 10000.000) = 106 
    [10000.000, 12500.000) = 49 
    [12500.000, 15000.000) = 16 
    [15000.000, 17500.000) = 7 
    [17500.000, 20000.000) = 7 
    [20000.000, 22500.000) = 2 
    [22500.000, 25000.000) = 1 
    [25000.000, 27500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    720.896 us/op
     p(50.0000) =    762.880 us/op
     p(90.0000) =    784.384 us/op
     p(95.0000) =    795.648 us/op
     p(99.0000) =    845.824 us/op
     p(99.9000) =   7494.222 us/op
     p(99.9900) =  14445.684 us/op
     p(99.9990) =  23829.936 us/op
     p(99.9999) =  28573.696 us/op
    p(100.0000) =  28573.696 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 97.82% complete, ETA 00:10:59
# Fork: 1 of 1
# Warmup Iteration   1: 8280.402 ±(99.9%) 193.516 us/op
# Warmup Iteration   2: 8156.713 ±(99.9%) 115.787 us/op
# Warmup Iteration   3: 8126.697 ±(99.9%) 111.915 us/op
# Warmup Iteration   4: 8180.429 ±(99.9%) 133.156 us/op
# Warmup Iteration   5: 8138.372 ±(99.9%) 106.702 us/op
Iteration   1: 8143.602 ±(99.9%) 111.743 us/op
                 concatenateStrings·p0.00:   7741.440 us/op
                 concatenateStrings·p0.50:   7880.704 us/op
                 concatenateStrings·p0.90:   8019.968 us/op
                 concatenateStrings·p0.95:   9888.563 us/op
                 concatenateStrings·p0.99:   13796.475 us/op
                 concatenateStrings·p0.999:  21416.280 us/op
                 concatenateStrings·p0.9999: 21889.024 us/op
                 concatenateStrings·p1.00:   21889.024 us/op

Iteration   2: 8127.370 ±(99.9%) 104.213 us/op
                 concatenateStrings·p0.00:   7757.824 us/op
                 concatenateStrings·p0.50:   7880.704 us/op
                 concatenateStrings·p0.90:   8044.544 us/op
                 concatenateStrings·p0.95:   9852.518 us/op
                 concatenateStrings·p0.99:   13158.646 us/op
                 concatenateStrings·p0.999:  25279.889 us/op
                 concatenateStrings·p0.9999: 27164.672 us/op
                 concatenateStrings·p1.00:   27164.672 us/op

Iteration   3: 8152.290 ±(99.9%) 112.193 us/op
                 concatenateStrings·p0.00:   7749.632 us/op
                 concatenateStrings·p0.50:   7888.896 us/op
                 concatenateStrings·p0.90:   8077.312 us/op
                 concatenateStrings·p0.95:   10010.624 us/op
                 concatenateStrings·p0.99:   13886.259 us/op
                 concatenateStrings·p0.999:  24132.911 us/op
                 concatenateStrings·p0.9999: 24772.608 us/op
                 concatenateStrings·p1.00:   24772.608 us/op

Iteration   4: 8200.985 ±(99.9%) 135.137 us/op
                 concatenateStrings·p0.00:   7757.824 us/op
                 concatenateStrings·p0.50:   7888.896 us/op
                 concatenateStrings·p0.90:   8044.544 us/op
                 concatenateStrings·p0.95:   10076.160 us/op
                 concatenateStrings·p0.99:   16734.618 us/op
                 concatenateStrings·p0.999:  24568.791 us/op
                 concatenateStrings·p0.9999: 25296.896 us/op
                 concatenateStrings·p1.00:   25296.896 us/op

Iteration   5: 8227.856 ±(99.9%) 150.353 us/op
                 concatenateStrings·p0.00:   7708.672 us/op
                 concatenateStrings·p0.50:   7888.896 us/op
                 concatenateStrings·p0.90:   8052.736 us/op
                 concatenateStrings·p0.95:   9971.302 us/op
                 concatenateStrings·p0.99:   16330.260 us/op
                 concatenateStrings·p0.999:  27949.269 us/op
                 concatenateStrings·p0.9999: 28770.304 us/op
                 concatenateStrings·p1.00:   28770.304 us/op

Iteration   6: 8173.245 ±(99.9%) 128.218 us/op
                 concatenateStrings·p0.00:   7757.824 us/op
                 concatenateStrings·p0.50:   7888.896 us/op
                 concatenateStrings·p0.90:   8074.035 us/op
                 concatenateStrings·p0.95:   9958.195 us/op
                 concatenateStrings·p0.99:   14959.903 us/op
                 concatenateStrings·p0.999:  25820.135 us/op
                 concatenateStrings·p0.9999: 25952.256 us/op
                 concatenateStrings·p1.00:   25952.256 us/op

Iteration   7: 8171.255 ±(99.9%) 134.806 us/op
                 concatenateStrings·p0.00:   7749.632 us/op
                 concatenateStrings·p0.50:   7888.896 us/op
                 concatenateStrings·p0.90:   8036.352 us/op
                 concatenateStrings·p0.95:   9856.614 us/op
                 concatenateStrings·p0.99:   16072.049 us/op
                 concatenateStrings·p0.999:  32516.342 us/op
                 concatenateStrings·p0.9999: 35782.656 us/op
                 concatenateStrings·p1.00:   35782.656 us/op

Iteration   8: 8130.853 ±(99.9%) 111.827 us/op
                 concatenateStrings·p0.00:   7741.440 us/op
                 concatenateStrings·p0.50:   7880.704 us/op
                 concatenateStrings·p0.90:   8052.736 us/op
                 concatenateStrings·p0.95:   9781.248 us/op
                 concatenateStrings·p0.99:   15086.879 us/op
                 concatenateStrings·p0.999:  22801.154 us/op
                 concatenateStrings·p0.9999: 23134.208 us/op
                 concatenateStrings·p1.00:   23134.208 us/op

Iteration   9: 8155.189 ±(99.9%) 113.717 us/op
                 concatenateStrings·p0.00:   7692.288 us/op
                 concatenateStrings·p0.50:   7880.704 us/op
                 concatenateStrings·p0.90:   8030.618 us/op
                 concatenateStrings·p0.95:   10027.008 us/op
                 concatenateStrings·p0.99:   16207.380 us/op
                 concatenateStrings·p0.999:  18720.981 us/op
                 concatenateStrings·p0.9999: 18743.296 us/op
                 concatenateStrings·p1.00:   18743.296 us/op

Iteration  10: 8182.326 ±(99.9%) 133.811 us/op
                 concatenateStrings·p0.00:   7741.440 us/op
                 concatenateStrings·p0.50:   7880.704 us/op
                 concatenateStrings·p0.90:   8036.352 us/op
                 concatenateStrings·p0.95:   9912.320 us/op
                 concatenateStrings·p0.99:   16654.008 us/op
                 concatenateStrings·p0.999:  25552.519 us/op
                 concatenateStrings·p0.9999: 26378.240 us/op
                 concatenateStrings·p1.00:   26378.240 us/op

Iteration  11: 8137.785 ±(99.9%) 109.349 us/op
                 concatenateStrings·p0.00:   7733.248 us/op
                 concatenateStrings·p0.50:   7880.704 us/op
                 concatenateStrings·p0.90:   8044.544 us/op
                 concatenateStrings·p0.95:   9963.110 us/op
                 concatenateStrings·p0.99:   15178.301 us/op
                 concatenateStrings·p0.999:  23538.467 us/op
                 concatenateStrings·p0.9999: 24641.536 us/op
                 concatenateStrings·p1.00:   24641.536 us/op

Iteration  12: 8148.122 ±(99.9%) 114.314 us/op
                 concatenateStrings·p0.00:   7774.208 us/op
                 concatenateStrings·p0.50:   7880.704 us/op
                 concatenateStrings·p0.90:   8036.352 us/op
                 concatenateStrings·p0.95:   9912.320 us/op
                 concatenateStrings·p0.99:   14523.433 us/op
                 concatenateStrings·p0.999:  26703.561 us/op
                 concatenateStrings·p0.9999: 28377.088 us/op
                 concatenateStrings·p1.00:   28377.088 us/op

Iteration  13: 8187.693 ±(99.9%) 135.350 us/op
                 concatenateStrings·p0.00:   7733.248 us/op
                 concatenateStrings·p0.50:   7880.704 us/op
                 concatenateStrings·p0.90:   8028.160 us/op
                 concatenateStrings·p0.95:   9909.043 us/op
                 concatenateStrings·p0.99:   15559.557 us/op
                 concatenateStrings·p0.999:  27073.970 us/op
                 concatenateStrings·p0.9999: 27394.048 us/op
                 concatenateStrings·p1.00:   27394.048 us/op

Iteration  14: 8197.372 ±(99.9%) 131.533 us/op
                 concatenateStrings·p0.00:   7766.016 us/op
                 concatenateStrings·p0.50:   7888.896 us/op
                 concatenateStrings·p0.90:   8043.725 us/op
                 concatenateStrings·p0.95:   10040.115 us/op
                 concatenateStrings·p0.99:   15050.015 us/op
                 concatenateStrings·p0.999:  26278.658 us/op
                 concatenateStrings·p0.9999: 26705.920 us/op
                 concatenateStrings·p1.00:   26705.920 us/op

Iteration  15: 8151.374 ±(99.9%) 115.565 us/op
                 concatenateStrings·p0.00:   7741.440 us/op
                 concatenateStrings·p0.50:   7880.704 us/op
                 concatenateStrings·p0.90:   8047.002 us/op
                 concatenateStrings·p0.95:   9943.450 us/op
                 concatenateStrings·p0.99:   15691.121 us/op
                 concatenateStrings·p0.999:  24801.903 us/op
                 concatenateStrings·p0.9999: 26869.760 us/op
                 concatenateStrings·p1.00:   26869.760 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 18364
  mean =   8165.726 ±(99.9%) 31.787 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 0 
    [ 2500.000,  5000.000) = 0 
    [ 5000.000,  7500.000) = 0 
    [ 7500.000, 10000.000) = 17509 
    [10000.000, 12500.000) = 538 
    [12500.000, 15000.000) = 114 
    [15000.000, 17500.000) = 130 
    [17500.000, 20000.000) = 41 
    [20000.000, 22500.000) = 13 
    [22500.000, 25000.000) = 7 
    [25000.000, 27500.000) = 9 
    [27500.000, 30000.000) = 2 
    [30000.000, 32500.000) = 0 
    [32500.000, 35000.000) = 0 
    [35000.000, 37500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   7692.288 us/op
     p(50.0000) =   7880.704 us/op
     p(90.0000) =   8044.544 us/op
     p(95.0000) =   9928.704 us/op
     p(99.0000) =  15450.112 us/op
     p(99.9000) =  22966.764 us/op
     p(99.9900) =  29916.824 us/op
     p(99.9990) =  35782.656 us/op
     p(99.9999) =  35782.656 us/op
    p(100.0000) =  35782.656 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 98.55% complete, ETA 00:07:19
# Fork: 1 of 1
# Warmup Iteration   1: 110629.089 ±(99.9%) 2636.990 us/op
# Warmup Iteration   2: 109308.349 ±(99.9%) 1112.530 us/op
# Warmup Iteration   3: 110045.747 ±(99.9%) 1384.919 us/op
# Warmup Iteration   4: 110176.819 ±(99.9%) 1426.063 us/op
# Warmup Iteration   5: 109372.461 ±(99.9%) 1060.402 us/op
Iteration   1: 110336.698 ±(99.9%) 1324.678 us/op
                 concatenateStrings·p0.00:   105381.888 us/op
                 concatenateStrings·p0.50:   109182.976 us/op
                 concatenateStrings·p0.90:   116496.794 us/op
                 concatenateStrings·p0.95:   118043.443 us/op
                 concatenateStrings·p0.99:   121372.672 us/op
                 concatenateStrings·p0.999:  121372.672 us/op
                 concatenateStrings·p0.9999: 121372.672 us/op
                 concatenateStrings·p1.00:   121372.672 us/op

Iteration   2: 109019.136 ±(99.9%) 1010.021 us/op
                 concatenateStrings·p0.00:   105250.816 us/op
                 concatenateStrings·p0.50:   108396.544 us/op
                 concatenateStrings·p0.90:   112905.421 us/op
                 concatenateStrings·p0.95:   116699.955 us/op
                 concatenateStrings·p0.99:   119144.448 us/op
                 concatenateStrings·p0.999:  119144.448 us/op
                 concatenateStrings·p0.9999: 119144.448 us/op
                 concatenateStrings·p1.00:   119144.448 us/op

Iteration   3: 109653.126 ±(99.9%) 1268.963 us/op
                 concatenateStrings·p0.00:   105119.744 us/op
                 concatenateStrings·p0.50:   108658.688 us/op
                 concatenateStrings·p0.90:   114871.501 us/op
                 concatenateStrings·p0.95:   116411.597 us/op
                 concatenateStrings·p0.99:   123994.112 us/op
                 concatenateStrings·p0.999:  123994.112 us/op
                 concatenateStrings·p0.9999: 123994.112 us/op
                 concatenateStrings·p1.00:   123994.112 us/op

Iteration   4: 109516.355 ±(99.9%) 1290.663 us/op
                 concatenateStrings·p0.00:   104333.312 us/op
                 concatenateStrings·p0.50:   108396.544 us/op
                 concatenateStrings·p0.90:   114819.072 us/op
                 concatenateStrings·p0.95:   116831.027 us/op
                 concatenateStrings·p0.99:   125173.760 us/op
                 concatenateStrings·p0.999:  125173.760 us/op
                 concatenateStrings·p0.9999: 125173.760 us/op
                 concatenateStrings·p1.00:   125173.760 us/op

Iteration   5: 109533.451 ±(99.9%) 1159.311 us/op
                 concatenateStrings·p0.00:   105381.888 us/op
                 concatenateStrings·p0.50:   108724.224 us/op
                 concatenateStrings·p0.90:   113665.638 us/op
                 concatenateStrings·p0.95:   116149.453 us/op
                 concatenateStrings·p0.99:   126746.624 us/op
                 concatenateStrings·p0.999:  126746.624 us/op
                 concatenateStrings·p0.9999: 126746.624 us/op
                 concatenateStrings·p1.00:   126746.624 us/op

Iteration   6: 109690.168 ±(99.9%) 1267.842 us/op
                 concatenateStrings·p0.00:   105250.816 us/op
                 concatenateStrings·p0.50:   108658.688 us/op
                 concatenateStrings·p0.90:   115172.966 us/op
                 concatenateStrings·p0.95:   118010.675 us/op
                 concatenateStrings·p0.99:   124518.400 us/op
                 concatenateStrings·p0.999:  124518.400 us/op
                 concatenateStrings·p0.9999: 124518.400 us/op
                 concatenateStrings·p1.00:   124518.400 us/op

Iteration   7: 108963.573 ±(99.9%) 912.387 us/op
                 concatenateStrings·p0.00:   105775.104 us/op
                 concatenateStrings·p0.50:   108658.688 us/op
                 concatenateStrings·p0.90:   113586.995 us/op
                 concatenateStrings·p0.95:   115055.002 us/op
                 concatenateStrings·p0.99:   118882.304 us/op
                 concatenateStrings·p0.999:  118882.304 us/op
                 concatenateStrings·p0.9999: 118882.304 us/op
                 concatenateStrings·p1.00:   118882.304 us/op

Iteration   8: 109734.333 ±(99.9%) 1296.756 us/op
                 concatenateStrings·p0.00:   106037.248 us/op
                 concatenateStrings·p0.50:   108462.080 us/op
                 concatenateStrings·p0.90:   115172.966 us/op
                 concatenateStrings·p0.95:   118272.819 us/op
                 concatenateStrings·p0.99:   123600.896 us/op
                 concatenateStrings·p0.999:  123600.896 us/op
                 concatenateStrings·p0.9999: 123600.896 us/op
                 concatenateStrings·p1.00:   123600.896 us/op

Iteration   9: 110037.105 ±(99.9%) 1336.685 us/op
                 concatenateStrings·p0.00:   106037.248 us/op
                 concatenateStrings·p0.50:   108789.760 us/op
                 concatenateStrings·p0.90:   115526.861 us/op
                 concatenateStrings·p0.95:   118095.872 us/op
                 concatenateStrings·p0.99:   124256.256 us/op
                 concatenateStrings·p0.999:  124256.256 us/op
                 concatenateStrings·p0.9999: 124256.256 us/op
                 concatenateStrings·p1.00:   124256.256 us/op

Iteration  10: 109923.317 ±(99.9%) 1357.482 us/op
                 concatenateStrings·p0.00:   105512.960 us/op
                 concatenateStrings·p0.50:   108658.688 us/op
                 concatenateStrings·p0.90:   115264.717 us/op
                 concatenateStrings·p0.95:   119065.805 us/op
                 concatenateStrings·p0.99:   124780.544 us/op
                 concatenateStrings·p0.999:  124780.544 us/op
                 concatenateStrings·p0.9999: 124780.544 us/op
                 concatenateStrings·p1.00:   124780.544 us/op

Iteration  11: 109828.254 ±(99.9%) 1409.439 us/op
                 concatenateStrings·p0.00:   105644.032 us/op
                 concatenateStrings·p0.50:   109051.904 us/op
                 concatenateStrings·p0.90:   114163.712 us/op
                 concatenateStrings·p0.95:   117624.013 us/op
                 concatenateStrings·p0.99:   128974.848 us/op
                 concatenateStrings·p0.999:  128974.848 us/op
                 concatenateStrings·p0.9999: 128974.848 us/op
                 concatenateStrings·p1.00:   128974.848 us/op

Iteration  12: 110094.719 ±(99.9%) 1263.978 us/op
                 concatenateStrings·p0.00:   104726.528 us/op
                 concatenateStrings·p0.50:   109051.904 us/op
                 concatenateStrings·p0.90:   115736.576 us/op
                 concatenateStrings·p0.95:   117571.584 us/op
                 concatenateStrings·p0.99:   121634.816 us/op
                 concatenateStrings·p0.999:  121634.816 us/op
                 concatenateStrings·p0.9999: 121634.816 us/op
                 concatenateStrings·p1.00:   121634.816 us/op

Iteration  13: 109590.439 ±(99.9%) 1080.379 us/op
                 concatenateStrings·p0.00:   106168.320 us/op
                 concatenateStrings·p0.50:   108789.760 us/op
                 concatenateStrings·p0.90:   113953.997 us/op
                 concatenateStrings·p0.95:   116405.043 us/op
                 concatenateStrings·p0.99:   123863.040 us/op
                 concatenateStrings·p0.999:  123863.040 us/op
                 concatenateStrings·p0.9999: 123863.040 us/op
                 concatenateStrings·p1.00:   123863.040 us/op

Iteration  14: 109829.694 ±(99.9%) 1016.657 us/op
                 concatenateStrings·p0.00:   105775.104 us/op
                 concatenateStrings·p0.50:   109314.048 us/op
                 concatenateStrings·p0.90:   114399.642 us/op
                 concatenateStrings·p0.95:   116549.222 us/op
                 concatenateStrings·p0.99:   118751.232 us/op
                 concatenateStrings·p0.999:  118751.232 us/op
                 concatenateStrings·p0.9999: 118751.232 us/op
                 concatenateStrings·p1.00:   118751.232 us/op

Iteration  15: 109228.566 ±(99.9%) 858.470 us/op
                 concatenateStrings·p0.00:   105250.816 us/op
                 concatenateStrings·p0.50:   108724.224 us/op
                 concatenateStrings·p0.90:   111817.523 us/op
                 concatenateStrings·p0.95:   114779.750 us/op
                 concatenateStrings·p0.99:   119275.520 us/op
                 concatenateStrings·p0.999:  119275.520 us/op
                 concatenateStrings·p0.9999: 119275.520 us/op
                 concatenateStrings·p1.00:   119275.520 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 1374
  mean = 109663.764 ±(99.9%) 300.934 us/op

  Histogram, us/op:
    [100000.000, 102500.000) = 0 
    [102500.000, 105000.000) = 3 
    [105000.000, 107500.000) = 323 
    [107500.000, 110000.000) = 665 
    [110000.000, 112500.000) = 171 
    [112500.000, 115000.000) = 92 
    [115000.000, 117500.000) = 71 
    [117500.000, 120000.000) = 24 
    [120000.000, 122500.000) = 11 
    [122500.000, 125000.000) = 10 
    [125000.000, 127500.000) = 3 

  Percentiles, us/op:
      p(0.0000) = 104333.312 us/op
     p(50.0000) = 108789.760 us/op
     p(90.0000) = 114688.000 us/op
     p(95.0000) = 116785.152 us/op
     p(99.0000) = 122683.392 us/op
     p(99.9000) = 128139.264 us/op
     p(99.9900) = 128974.848 us/op
     p(99.9990) = 128974.848 us/op
     p(99.9999) = 128974.848 us/op
    p(100.0000) = 128974.848 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 99.27% complete, ETA 00:03:40
# Fork: 1 of 1
# Warmup Iteration   1: 943146.449 ±(99.9%) 285847.861 us/op
# Warmup Iteration   2: 818050.599 ±(99.9%) 35708.184 us/op
# Warmup Iteration   3: 815308.170 ±(99.9%) 25044.103 us/op
# Warmup Iteration   4: 816598.725 ±(99.9%) 27702.383 us/op
# Warmup Iteration   5: 820067.092 ±(99.9%) 40033.578 us/op
Iteration   1: 825713.270 ±(99.9%) 37136.011 us/op
                 createNewObjectsWithRecursive·p0.00:   769654.784 us/op
                 createNewObjectsWithRecursive·p0.50:   824180.736 us/op
                 createNewObjectsWithRecursive·p0.90:   869898.650 us/op
                 createNewObjectsWithRecursive·p0.95:   874512.384 us/op
                 createNewObjectsWithRecursive·p0.99:   874512.384 us/op
                 createNewObjectsWithRecursive·p0.999:  874512.384 us/op
                 createNewObjectsWithRecursive·p0.9999: 874512.384 us/op
                 createNewObjectsWithRecursive·p1.00:   874512.384 us/op

Iteration   2: 816437.406 ±(99.9%) 29254.479 us/op
                 createNewObjectsWithRecursive·p0.00:   754974.720 us/op
                 createNewObjectsWithRecursive·p0.50:   818937.856 us/op
                 createNewObjectsWithRecursive·p0.90:   847039.693 us/op
                 createNewObjectsWithRecursive·p0.95:   848297.984 us/op
                 createNewObjectsWithRecursive·p0.99:   848297.984 us/op
                 createNewObjectsWithRecursive·p0.999:  848297.984 us/op
                 createNewObjectsWithRecursive·p0.9999: 848297.984 us/op
                 createNewObjectsWithRecursive·p1.00:   848297.984 us/op

Iteration   3: 815711.468 ±(99.9%) 32290.191 us/op
                 createNewObjectsWithRecursive·p0.00:   758120.448 us/op
                 createNewObjectsWithRecursive·p0.50:   812646.400 us/op
                 createNewObjectsWithRecursive·p0.90:   856476.877 us/op
                 createNewObjectsWithRecursive·p0.95:   868220.928 us/op
                 createNewObjectsWithRecursive·p0.99:   868220.928 us/op
                 createNewObjectsWithRecursive·p0.999:  868220.928 us/op
                 createNewObjectsWithRecursive·p0.9999: 868220.928 us/op
                 createNewObjectsWithRecursive·p1.00:   868220.928 us/op

Iteration   4: 816840.704 ±(99.9%) 30668.682 us/op
                 createNewObjectsWithRecursive·p0.00:   767557.632 us/op
                 createNewObjectsWithRecursive·p0.50:   813694.976 us/op
                 createNewObjectsWithRecursive·p0.90:   854379.725 us/op
                 createNewObjectsWithRecursive·p0.95:   861929.472 us/op
                 createNewObjectsWithRecursive·p0.99:   861929.472 us/op
                 createNewObjectsWithRecursive·p0.999:  861929.472 us/op
                 createNewObjectsWithRecursive·p0.9999: 861929.472 us/op
                 createNewObjectsWithRecursive·p1.00:   861929.472 us/op

Iteration   5: 813936.955 ±(99.9%) 29680.843 us/op
                 createNewObjectsWithRecursive·p0.00:   749731.840 us/op
                 createNewObjectsWithRecursive·p0.50:   815792.128 us/op
                 createNewObjectsWithRecursive·p0.90:   841587.098 us/op
                 createNewObjectsWithRecursive·p0.95:   844103.680 us/op
                 createNewObjectsWithRecursive·p0.99:   844103.680 us/op
                 createNewObjectsWithRecursive·p0.999:  844103.680 us/op
                 createNewObjectsWithRecursive·p0.9999: 844103.680 us/op
                 createNewObjectsWithRecursive·p1.00:   844103.680 us/op

Iteration   6: 821922.265 ±(99.9%) 33752.124 us/op
                 createNewObjectsWithRecursive·p0.00:   751828.992 us/op
                 createNewObjectsWithRecursive·p0.50:   817889.280 us/op
                 createNewObjectsWithRecursive·p0.90:   861719.757 us/op
                 createNewObjectsWithRecursive·p0.95:   862978.048 us/op
                 createNewObjectsWithRecursive·p0.99:   862978.048 us/op
                 createNewObjectsWithRecursive·p0.999:  862978.048 us/op
                 createNewObjectsWithRecursive·p0.9999: 862978.048 us/op
                 createNewObjectsWithRecursive·p1.00:   862978.048 us/op

Iteration   7: 823777.438 ±(99.9%) 36142.316 us/op
                 createNewObjectsWithRecursive·p0.00:   757071.872 us/op
                 createNewObjectsWithRecursive·p0.50:   829423.616 us/op
                 createNewObjectsWithRecursive·p0.90:   870947.226 us/op
                 createNewObjectsWithRecursive·p0.95:   875560.960 us/op
                 createNewObjectsWithRecursive·p0.99:   875560.960 us/op
                 createNewObjectsWithRecursive·p0.999:  875560.960 us/op
                 createNewObjectsWithRecursive·p0.9999: 875560.960 us/op
                 createNewObjectsWithRecursive·p1.00:   875560.960 us/op

Iteration   8: 816598.725 ±(99.9%) 35595.062 us/op
                 createNewObjectsWithRecursive·p0.00:   758120.448 us/op
                 createNewObjectsWithRecursive·p0.50:   817889.280 us/op
                 createNewObjectsWithRecursive·p0.90:   862768.333 us/op
                 createNewObjectsWithRecursive·p0.95:   866123.776 us/op
                 createNewObjectsWithRecursive·p0.99:   866123.776 us/op
                 createNewObjectsWithRecursive·p0.999:  866123.776 us/op
                 createNewObjectsWithRecursive·p0.9999: 866123.776 us/op
                 createNewObjectsWithRecursive·p1.00:   866123.776 us/op

Iteration   9: 822728.862 ±(99.9%) 40105.974 us/op
                 createNewObjectsWithRecursive·p0.00:   753926.144 us/op
                 createNewObjectsWithRecursive·p0.50:   825229.312 us/op
                 createNewObjectsWithRecursive·p0.90:   871366.656 us/op
                 createNewObjectsWithRecursive·p0.95:   871366.656 us/op
                 createNewObjectsWithRecursive·p0.99:   871366.656 us/op
                 createNewObjectsWithRecursive·p0.999:  871366.656 us/op
                 createNewObjectsWithRecursive·p0.9999: 871366.656 us/op
                 createNewObjectsWithRecursive·p1.00:   871366.656 us/op

Iteration  10: 810629.908 ±(99.9%) 33641.437 us/op
                 createNewObjectsWithRecursive·p0.00:   753926.144 us/op
                 createNewObjectsWithRecursive·p0.50:   805306.368 us/op
                 createNewObjectsWithRecursive·p0.90:   853960.294 us/op
                 createNewObjectsWithRecursive·p0.95:   855638.016 us/op
                 createNewObjectsWithRecursive·p0.99:   855638.016 us/op
                 createNewObjectsWithRecursive·p0.999:  855638.016 us/op
                 createNewObjectsWithRecursive·p0.9999: 855638.016 us/op
                 createNewObjectsWithRecursive·p1.00:   855638.016 us/op

Iteration  11: 817485.982 ±(99.9%) 29995.207 us/op
                 createNewObjectsWithRecursive·p0.00:   757071.872 us/op
                 createNewObjectsWithRecursive·p0.50:   818937.856 us/op
                 createNewObjectsWithRecursive·p0.90:   847249.408 us/op
                 createNewObjectsWithRecursive·p0.95:   853540.864 us/op
                 createNewObjectsWithRecursive·p0.99:   853540.864 us/op
                 createNewObjectsWithRecursive·p0.999:  853540.864 us/op
                 createNewObjectsWithRecursive·p0.9999: 853540.864 us/op
                 createNewObjectsWithRecursive·p1.00:   853540.864 us/op

Iteration  12: 816598.725 ±(99.9%) 29382.728 us/op
                 createNewObjectsWithRecursive·p0.00:   760217.600 us/op
                 createNewObjectsWithRecursive·p0.50:   822083.584 us/op
                 createNewObjectsWithRecursive·p0.90:   851653.427 us/op
                 createNewObjectsWithRecursive·p0.95:   852492.288 us/op
                 createNewObjectsWithRecursive·p0.99:   852492.288 us/op
                 createNewObjectsWithRecursive·p0.999:  852492.288 us/op
                 createNewObjectsWithRecursive·p0.9999: 852492.288 us/op
                 createNewObjectsWithRecursive·p1.00:   852492.288 us/op

Iteration  13: 820631.710 ±(99.9%) 31628.556 us/op
                 createNewObjectsWithRecursive·p0.00:   759169.024 us/op
                 createNewObjectsWithRecursive·p0.50:   821035.008 us/op
                 createNewObjectsWithRecursive·p0.90:   860671.181 us/op
                 createNewObjectsWithRecursive·p0.95:   870318.080 us/op
                 createNewObjectsWithRecursive·p0.99:   870318.080 us/op
                 createNewObjectsWithRecursive·p0.999:  870318.080 us/op
                 createNewObjectsWithRecursive·p0.9999: 870318.080 us/op
                 createNewObjectsWithRecursive·p1.00:   870318.080 us/op

Iteration  14: 820309.071 ±(99.9%) 28220.398 us/op
                 createNewObjectsWithRecursive·p0.00:   762314.752 us/op
                 createNewObjectsWithRecursive·p0.50:   818937.856 us/op
                 createNewObjectsWithRecursive·p0.90:   851863.142 us/op
                 createNewObjectsWithRecursive·p0.95:   855638.016 us/op
                 createNewObjectsWithRecursive·p0.99:   855638.016 us/op
                 createNewObjectsWithRecursive·p0.999:  855638.016 us/op
                 createNewObjectsWithRecursive·p0.9999: 855638.016 us/op
                 createNewObjectsWithRecursive·p1.00:   855638.016 us/op

Iteration  15: 826681.186 ±(99.9%) 31946.851 us/op
                 createNewObjectsWithRecursive·p0.00:   752877.568 us/op
                 createNewObjectsWithRecursive·p0.50:   826277.888 us/op
                 createNewObjectsWithRecursive·p0.90:   859412.890 us/op
                 createNewObjectsWithRecursive·p0.95:   866123.776 us/op
                 createNewObjectsWithRecursive·p0.99:   866123.776 us/op
                 createNewObjectsWithRecursive·p0.999:  866123.776 us/op
                 createNewObjectsWithRecursive·p0.9999: 866123.776 us/op
                 createNewObjectsWithRecursive·p1.00:   866123.776 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  N = 195
  mean = 819066.912 ±(99.9%) 6397.930 us/op

  Histogram, us/op:
    [700000.000, 712500.000) = 0 
    [712500.000, 725000.000) = 0 
    [725000.000, 737500.000) = 0 
    [737500.000, 750000.000) = 1 
    [750000.000, 762500.000) = 12 
    [762500.000, 775000.000) = 2 
    [775000.000, 787500.000) = 4 
    [787500.000, 800000.000) = 18 
    [800000.000, 812500.000) = 27 
    [812500.000, 825000.000) = 50 
    [825000.000, 837500.000) = 36 
    [837500.000, 850000.000) = 24 
    [850000.000, 862500.000) = 10 
    [862500.000, 875000.000) = 10 
    [875000.000, 887500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 749731.840 us/op
     p(50.0000) = 819986.432 us/op
     p(90.0000) = 851863.142 us/op
     p(95.0000) = 863187.763 us/op
     p(99.0000) = 874554.327 us/op
     p(99.9000) = 875560.960 us/op
     p(99.9900) = 875560.960 us/op
     p(99.9990) = 875560.960 us/op
     p(99.9999) = 875560.960 us/op
    p(100.0000) = 875560.960 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 100.00% complete, ETA 00:00:01
# Fork: 1 of 1
# Warmup Iteration   1: 349081.013 us/op
# Warmup Iteration   2: 229744.179 us/op
# Warmup Iteration   3: 205618.930 us/op
# Warmup Iteration   4: 204744.549 us/op
# Warmup Iteration   5: 203000.381 us/op
Iteration   1: 203701.333 us/op
Iteration   2: 210237.557 us/op
Iteration   3: 200055.720 us/op
Iteration   4: 200404.719 us/op
Iteration   5: 201140.160 us/op
Iteration   6: 198482.247 us/op
Iteration   7: 200074.863 us/op
Iteration   8: 198143.866 us/op
Iteration   9: 196818.756 us/op
Iteration  10: 212428.572 us/op
Iteration  11: 201215.470 us/op
Iteration  12: 197371.459 us/op
Iteration  13: 199253.713 us/op
Iteration  14: 204626.382 us/op
Iteration  15: 213088.375 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 202469.546 ±(99.9%) 5717.876 us/op

  Histogram, us/op:
    [190000.000, 192500.000) = 0 
    [192500.000, 195000.000) = 0 
    [195000.000, 197500.000) = 2 
    [197500.000, 200000.000) = 3 
    [200000.000, 202500.000) = 5 
    [202500.000, 205000.000) = 2 
    [205000.000, 207500.000) = 0 
    [207500.000, 210000.000) = 0 
    [210000.000, 212500.000) = 2 
    [212500.000, 215000.000) = 1 
    [215000.000, 217500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 196818.756 us/op
     p(50.0000) = 200404.719 us/op
     p(90.0000) = 212692.493 us/op
     p(95.0000) = 213088.375 us/op
     p(99.0000) = 213088.375 us/op
     p(99.9000) = 213088.375 us/op
     p(99.9900) = 213088.375 us/op
     p(99.9990) = 213088.375 us/op
     p(99.9999) = 213088.375 us/op
    p(100.0000) = 213088.375 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 307638.864 us/op
# Warmup Iteration   2: 188949.962 us/op
# Warmup Iteration   3: 177037.941 us/op
# Warmup Iteration   4: 155717.760 us/op
# Warmup Iteration   5: 155304.348 us/op
Iteration   1: 158024.060 us/op
Iteration   2: 158195.283 us/op
Iteration   3: 161800.701 us/op
Iteration   4: 161634.742 us/op
Iteration   5: 151616.165 us/op
Iteration   6: 161559.951 us/op
Iteration   7: 155276.364 us/op
Iteration   8: 154792.230 us/op
Iteration   9: 154646.515 us/op
Iteration  10: 161217.244 us/op
Iteration  11: 153674.506 us/op
Iteration  12: 156493.374 us/op
Iteration  13: 171602.513 us/op
Iteration  14: 155005.451 us/op
Iteration  15: 158702.370 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 158282.765 ±(99.9%) 5227.133 us/op

  Histogram, us/op:
    [150000.000, 152500.000) = 1 
    [152500.000, 155000.000) = 3 
    [155000.000, 157500.000) = 3 
    [157500.000, 160000.000) = 3 
    [160000.000, 162500.000) = 4 
    [162500.000, 165000.000) = 0 
    [165000.000, 167500.000) = 0 
    [167500.000, 170000.000) = 0 
    [170000.000, 172500.000) = 1 
    [172500.000, 175000.000) = 0 
    [175000.000, 177500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 151616.165 us/op
     p(50.0000) = 158024.060 us/op
     p(90.0000) = 165721.426 us/op
     p(95.0000) = 171602.513 us/op
     p(99.0000) = 171602.513 us/op
     p(99.9000) = 171602.513 us/op
     p(99.9900) = 171602.513 us/op
     p(99.9990) = 171602.513 us/op
     p(99.9999) = 171602.513 us/op
    p(100.0000) = 171602.513 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 267522.645 us/op
# Warmup Iteration   2: 216162.031 us/op
# Warmup Iteration   3: 207848.626 us/op
# Warmup Iteration   4: 209554.975 us/op
# Warmup Iteration   5: 184756.898 us/op
Iteration   1: 153372.079 us/op
Iteration   2: 154039.048 us/op
Iteration   3: 164941.225 us/op
Iteration   4: 171444.737 us/op
Iteration   5: 155007.895 us/op
Iteration   6: 152294.545 us/op
Iteration   7: 151908.026 us/op
Iteration   8: 151039.654 us/op
Iteration   9: 150720.197 us/op
Iteration  10: 156575.131 us/op
Iteration  11: 153024.262 us/op
Iteration  12: 149382.428 us/op
Iteration  13: 150182.766 us/op
Iteration  14: 156747.820 us/op
Iteration  15: 150998.898 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 154778.581 ±(99.9%) 6409.192 us/op

  Histogram, us/op:
    [140000.000, 142500.000) = 0 
    [142500.000, 145000.000) = 0 
    [145000.000, 147500.000) = 0 
    [147500.000, 150000.000) = 1 
    [150000.000, 152500.000) = 6 
    [152500.000, 155000.000) = 3 
    [155000.000, 157500.000) = 3 
    [157500.000, 160000.000) = 0 
    [160000.000, 162500.000) = 0 
    [162500.000, 165000.000) = 1 
    [165000.000, 167500.000) = 0 
    [167500.000, 170000.000) = 0 
    [170000.000, 172500.000) = 1 
    [172500.000, 175000.000) = 0 
    [175000.000, 177500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 149382.428 us/op
     p(50.0000) = 153024.262 us/op
     p(90.0000) = 167542.630 us/op
     p(95.0000) = 171444.737 us/op
     p(99.0000) = 171444.737 us/op
     p(99.9000) = 171444.737 us/op
     p(99.9900) = 171444.737 us/op
     p(99.9990) = 171444.737 us/op
     p(99.9999) = 171444.737 us/op
    p(100.0000) = 171444.737 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 267928.971 us/op
# Warmup Iteration   2: 209392.848 us/op
# Warmup Iteration   3: 201437.662 us/op
# Warmup Iteration   4: 213206.231 us/op
# Warmup Iteration   5: 205348.165 us/op
Iteration   1: 201840.146 us/op
Iteration   2: 204998.034 us/op
Iteration   3: 202723.247 us/op
Iteration   4: 200467.398 us/op
Iteration   5: 206787.436 us/op
Iteration   6: 203952.795 us/op
Iteration   7: 203387.889 us/op
Iteration   8: 201261.100 us/op
Iteration   9: 206730.953 us/op
Iteration  10: 200122.070 us/op
Iteration  11: 202457.368 us/op
Iteration  12: 201823.264 us/op
Iteration  13: 204225.253 us/op
Iteration  14: 202124.655 us/op
Iteration  15: 202172.401 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 203004.934 ±(99.9%) 2158.800 us/op

  Histogram, us/op:
    [200000.000, 200500.000) = 2 
    [200500.000, 201000.000) = 0 
    [201000.000, 201500.000) = 1 
    [201500.000, 202000.000) = 2 
    [202000.000, 202500.000) = 3 
    [202500.000, 203000.000) = 1 
    [203000.000, 203500.000) = 1 
    [203500.000, 204000.000) = 1 
    [204000.000, 204500.000) = 1 
    [204500.000, 205000.000) = 1 
    [205000.000, 205500.000) = 0 
    [205500.000, 206000.000) = 0 
    [206000.000, 206500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 200122.070 us/op
     p(50.0000) = 202457.368 us/op
     p(90.0000) = 206753.546 us/op
     p(95.0000) = 206787.436 us/op
     p(99.0000) = 206787.436 us/op
     p(99.9000) = 206787.436 us/op
     p(99.9900) = 206787.436 us/op
     p(99.9990) = 206787.436 us/op
     p(99.9999) = 206787.436 us/op
    p(100.0000) = 206787.436 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 228404.016 us/op
# Warmup Iteration   2: 206423.846 us/op
# Warmup Iteration   3: 205829.792 us/op
# Warmup Iteration   4: 206271.473 us/op
# Warmup Iteration   5: 208580.459 us/op
Iteration   1: 199190.666 us/op
Iteration   2: 201430.650 us/op
Iteration   3: 216874.665 us/op
Iteration   4: 202757.379 us/op
Iteration   5: 203106.086 us/op
Iteration   6: 199780.826 us/op
Iteration   7: 199348.959 us/op
Iteration   8: 207608.753 us/op
Iteration   9: 204522.843 us/op
Iteration  10: 200814.141 us/op
Iteration  11: 204986.196 us/op
Iteration  12: 218466.322 us/op
Iteration  13: 214626.536 us/op
Iteration  14: 208558.965 us/op
Iteration  15: 200194.226 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 205484.481 ±(99.9%) 6917.069 us/op

  Histogram, us/op:
    [190000.000, 192500.000) = 0 
    [192500.000, 195000.000) = 0 
    [195000.000, 197500.000) = 0 
    [197500.000, 200000.000) = 3 
    [200000.000, 202500.000) = 3 
    [202500.000, 205000.000) = 4 
    [205000.000, 207500.000) = 0 
    [207500.000, 210000.000) = 2 
    [210000.000, 212500.000) = 0 
    [212500.000, 215000.000) = 1 
    [215000.000, 217500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 199190.666 us/op
     p(50.0000) = 203106.086 us/op
     p(90.0000) = 217511.328 us/op
     p(95.0000) = 218466.322 us/op
     p(99.0000) = 218466.322 us/op
     p(99.9000) = 218466.322 us/op
     p(99.9900) = 218466.322 us/op
     p(99.9990) = 218466.322 us/op
     p(99.9999) = 218466.322 us/op
    p(100.0000) = 218466.322 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 216193.918 us/op
# Warmup Iteration   2: 200669.605 us/op
# Warmup Iteration   3: 203933.652 us/op
# Warmup Iteration   4: 208379.462 us/op
# Warmup Iteration   5: 198254.179 us/op
Iteration   1: 198081.132 us/op
Iteration   2: 202220.193 us/op
Iteration   3: 204581.539 us/op
Iteration   4: 209710.678 us/op
Iteration   5: 213732.707 us/op
Iteration   6: 195885.978 us/op
Iteration   7: 197432.894 us/op
Iteration   8: 197557.147 us/op
Iteration   9: 216104.127 us/op
Iteration  10: 210969.850 us/op
Iteration  11: 195938.639 us/op
Iteration  12: 206190.129 us/op
Iteration  13: 198566.977 us/op
Iteration  14: 201607.206 us/op
Iteration  15: 198058.058 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 203109.150 ±(99.9%) 7227.421 us/op

  Histogram, us/op:
    [190000.000, 192500.000) = 0 
    [192500.000, 195000.000) = 0 
    [195000.000, 197500.000) = 3 
    [197500.000, 200000.000) = 4 
    [200000.000, 202500.000) = 2 
    [202500.000, 205000.000) = 1 
    [205000.000, 207500.000) = 1 
    [207500.000, 210000.000) = 1 
    [210000.000, 212500.000) = 1 
    [212500.000, 215000.000) = 1 
    [215000.000, 217500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 195885.978 us/op
     p(50.0000) = 201607.206 us/op
     p(90.0000) = 214681.275 us/op
     p(95.0000) = 216104.127 us/op
     p(99.0000) = 216104.127 us/op
     p(99.9000) = 216104.127 us/op
     p(99.9900) = 216104.127 us/op
     p(99.9990) = 216104.127 us/op
     p(99.9999) = 216104.127 us/op
    p(100.0000) = 216104.127 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1885651.259 us/op
# Warmup Iteration   2: 2135163.694 us/op
# Warmup Iteration   3: 1941999.510 us/op
# Warmup Iteration   4: 1808241.632 us/op
# Warmup Iteration   5: 1764159.754 us/op
Iteration   1: 1763013.701 us/op
Iteration   2: 1730778.023 us/op
Iteration   3: 1692690.566 us/op
Iteration   4: 1736884.144 us/op
Iteration   5: 1717727.198 us/op
Iteration   6: 1722188.683 us/op
Iteration   7: 1841743.629 us/op
Iteration   8: 1686851.600 us/op
Iteration   9: 1743980.045 us/op
Iteration  10: 1774751.856 us/op
Iteration  11: 1718239.224 us/op
Iteration  12: 1788312.433 us/op
Iteration  13: 1704666.355 us/op
Iteration  14: 1785539.858 us/op
Iteration  15: 1748985.619 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 1743756.862 ±(99.9%) 44332.365 us/op

  Histogram, us/op:
    [1600000.000, 1625000.000) = 0 
    [1625000.000, 1650000.000) = 0 
    [1650000.000, 1675000.000) = 0 
    [1675000.000, 1700000.000) = 2 
    [1700000.000, 1725000.000) = 4 
    [1725000.000, 1750000.000) = 4 
    [1750000.000, 1775000.000) = 2 
    [1775000.000, 1800000.000) = 2 
    [1800000.000, 1825000.000) = 0 
    [1825000.000, 1850000.000) = 1 
    [1850000.000, 1875000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1686851.600 us/op
     p(50.0000) = 1736884.144 us/op
     p(90.0000) = 1809684.911 us/op
     p(95.0000) = 1841743.629 us/op
     p(99.0000) = 1841743.629 us/op
     p(99.9000) = 1841743.629 us/op
     p(99.9900) = 1841743.629 us/op
     p(99.9990) = 1841743.629 us/op
     p(99.9999) = 1841743.629 us/op
    p(100.0000) = 1841743.629 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1222597.263 us/op
# Warmup Iteration   2: 1061274.334 us/op
# Warmup Iteration   3: 998422.510 us/op
# Warmup Iteration   4: 871393.841 us/op
# Warmup Iteration   5: 873914.272 us/op
Iteration   1: 876256.969 us/op
Iteration   2: 869528.173 us/op
Iteration   3: 876875.277 us/op
Iteration   4: 884646.486 us/op
Iteration   5: 876232.561 us/op
Iteration   6: 893718.980 us/op
Iteration   7: 869356.859 us/op
Iteration   8: 894549.593 us/op
Iteration   9: 892707.274 us/op
Iteration  10: 877810.543 us/op
Iteration  11: 884077.957 us/op
Iteration  12: 894032.533 us/op
Iteration  13: 869517.034 us/op
Iteration  14: 886046.612 us/op
Iteration  15: 870253.062 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 881040.661 ±(99.9%) 10251.748 us/op

  Histogram, us/op:
    [860000.000, 862500.000) = 0 
    [862500.000, 865000.000) = 0 
    [865000.000, 867500.000) = 0 
    [867500.000, 870000.000) = 3 
    [870000.000, 872500.000) = 1 
    [872500.000, 875000.000) = 0 
    [875000.000, 877500.000) = 3 
    [877500.000, 880000.000) = 1 
    [880000.000, 882500.000) = 0 
    [882500.000, 885000.000) = 2 
    [885000.000, 887500.000) = 1 
    [887500.000, 890000.000) = 0 
    [890000.000, 892500.000) = 0 
    [892500.000, 895000.000) = 4 
    [895000.000, 897500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 869356.859 us/op
     p(50.0000) = 877810.543 us/op
     p(90.0000) = 894239.357 us/op
     p(95.0000) = 894549.593 us/op
     p(99.0000) = 894549.593 us/op
     p(99.9000) = 894549.593 us/op
     p(99.9900) = 894549.593 us/op
     p(99.9990) = 894549.593 us/op
     p(99.9999) = 894549.593 us/op
    p(100.0000) = 894549.593 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1047140.027 us/op
# Warmup Iteration   2: 1044353.437 us/op
# Warmup Iteration   3: 878386.840 us/op
# Warmup Iteration   4: 907678.672 us/op
# Warmup Iteration   5: 885424.913 us/op
Iteration   1: 872872.318 us/op
Iteration   2: 824406.092 us/op
Iteration   3: 860111.621 us/op
Iteration   4: 866002.306 us/op
Iteration   5: 869827.500 us/op
Iteration   6: 870468.785 us/op
Iteration   7: 852385.097 us/op
Iteration   8: 887128.971 us/op
Iteration   9: 865837.565 us/op
Iteration  10: 886100.397 us/op
Iteration  11: 857171.225 us/op
Iteration  12: 896480.048 us/op
Iteration  13: 851420.733 us/op
Iteration  14: 854141.596 us/op
Iteration  15: 859700.149 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 864936.960 ±(99.9%) 18660.109 us/op

  Histogram, us/op:
    [820000.000, 825000.000) = 1 
    [825000.000, 830000.000) = 0 
    [830000.000, 835000.000) = 0 
    [835000.000, 840000.000) = 0 
    [840000.000, 845000.000) = 0 
    [845000.000, 850000.000) = 0 
    [850000.000, 855000.000) = 3 
    [855000.000, 860000.000) = 2 
    [860000.000, 865000.000) = 1 
    [865000.000, 870000.000) = 3 
    [870000.000, 875000.000) = 2 
    [875000.000, 880000.000) = 0 
    [880000.000, 885000.000) = 0 
    [885000.000, 890000.000) = 2 
    [890000.000, 895000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 824406.092 us/op
     p(50.0000) = 865837.565 us/op
     p(90.0000) = 890869.402 us/op
     p(95.0000) = 896480.048 us/op
     p(99.0000) = 896480.048 us/op
     p(99.9000) = 896480.048 us/op
     p(99.9900) = 896480.048 us/op
     p(99.9990) = 896480.048 us/op
     p(99.9999) = 896480.048 us/op
    p(100.0000) = 896480.048 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1041929.262 us/op
# Warmup Iteration   2: 1045819.170 us/op
# Warmup Iteration   3: 902535.112 us/op
# Warmup Iteration   4: 919917.460 us/op
# Warmup Iteration   5: 939377.836 us/op
Iteration   1: 924853.368 us/op
Iteration   2: 898697.219 us/op
Iteration   3: 921761.380 us/op
Iteration   4: 942485.356 us/op
Iteration   5: 899766.873 us/op
Iteration   6: 901866.662 us/op
Iteration   7: 905504.573 us/op
Iteration   8: 906779.864 us/op
Iteration   9: 916306.787 us/op
Iteration  10: 916841.824 us/op
Iteration  11: 916799.267 us/op
Iteration  12: 923534.783 us/op
Iteration  13: 910568.312 us/op
Iteration  14: 900508.417 us/op
Iteration  15: 944708.269 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 915398.864 ±(99.9%) 15432.283 us/op

  Histogram, us/op:
    [890000.000, 895000.000) = 0 
    [895000.000, 900000.000) = 2 
    [900000.000, 905000.000) = 2 
    [905000.000, 910000.000) = 2 
    [910000.000, 915000.000) = 1 
    [915000.000, 920000.000) = 3 
    [920000.000, 925000.000) = 3 
    [925000.000, 930000.000) = 0 
    [930000.000, 935000.000) = 0 
    [935000.000, 940000.000) = 0 
    [940000.000, 945000.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 898697.219 us/op
     p(50.0000) = 916306.787 us/op
     p(90.0000) = 943374.521 us/op
     p(95.0000) = 944708.269 us/op
     p(99.0000) = 944708.269 us/op
     p(99.9000) = 944708.269 us/op
     p(99.9900) = 944708.269 us/op
     p(99.9990) = 944708.269 us/op
     p(99.9999) = 944708.269 us/op
    p(100.0000) = 944708.269 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 967652.642 us/op
# Warmup Iteration   2: 1052269.118 us/op
# Warmup Iteration   3: 975376.082 us/op
# Warmup Iteration   4: 1006029.877 us/op
# Warmup Iteration   5: 1025706.778 us/op
Iteration   1: 1016654.430 us/op
Iteration   2: 1008192.337 us/op
Iteration   3: 1026281.443 us/op
Iteration   4: 1000100.689 us/op
Iteration   5: 1022067.455 us/op
Iteration   6: 985676.869 us/op
Iteration   7: 982738.901 us/op
Iteration   8: 1006371.666 us/op
Iteration   9: 1010135.577 us/op
Iteration  10: 1021581.922 us/op
Iteration  11: 995381.467 us/op
Iteration  12: 979278.981 us/op
Iteration  13: 1015970.104 us/op
Iteration  14: 1019222.693 us/op
Iteration  15: 991037.427 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 1005379.464 ±(99.9%) 16551.665 us/op

  Histogram, us/op:
    [ 970000.000,  975000.000) = 0 
    [ 975000.000,  980000.000) = 1 
    [ 980000.000,  985000.000) = 1 
    [ 985000.000,  990000.000) = 1 
    [ 990000.000,  995000.000) = 1 
    [ 995000.000, 1000000.000) = 1 
    [1000000.000, 1005000.000) = 1 
    [1005000.000, 1010000.000) = 2 
    [1010000.000, 1015000.000) = 1 
    [1015000.000, 1020000.000) = 3 
    [1020000.000, 1025000.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 979278.981 us/op
     p(50.0000) = 1008192.337 us/op
     p(90.0000) = 1023753.050 us/op
     p(95.0000) = 1026281.443 us/op
     p(99.0000) = 1026281.443 us/op
     p(99.9000) = 1026281.443 us/op
     p(99.9900) = 1026281.443 us/op
     p(99.9990) = 1026281.443 us/op
     p(99.9999) = 1026281.443 us/op
    p(100.0000) = 1026281.443 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 970743.346 us/op
# Warmup Iteration   2: 875763.060 us/op
# Warmup Iteration   3: 840011.325 us/op
# Warmup Iteration   4: 842506.272 us/op
# Warmup Iteration   5: 859213.758 us/op
Iteration   1: 848413.132 us/op
Iteration   2: 860275.756 us/op
Iteration   3: 843144.290 us/op
Iteration   4: 831751.055 us/op
Iteration   5: 832232.581 us/op
Iteration   6: 835236.240 us/op
Iteration   7: 846265.767 us/op
Iteration   8: 824829.459 us/op
Iteration   9: 838739.800 us/op
Iteration  10: 844312.031 us/op
Iteration  11: 879036.584 us/op
Iteration  12: 832384.575 us/op
Iteration  13: 846124.211 us/op
Iteration  14: 837309.634 us/op
Iteration  15: 838295.176 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 842556.686 ±(99.9%) 14182.353 us/op

  Histogram, us/op:
    [820000.000, 825000.000) = 1 
    [825000.000, 830000.000) = 0 
    [830000.000, 835000.000) = 3 
    [835000.000, 840000.000) = 4 
    [840000.000, 845000.000) = 2 
    [845000.000, 850000.000) = 3 
    [850000.000, 855000.000) = 0 
    [855000.000, 860000.000) = 0 
    [860000.000, 865000.000) = 1 
    [865000.000, 870000.000) = 0 
    [870000.000, 875000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 824829.459 us/op
     p(50.0000) = 838739.800 us/op
     p(90.0000) = 867780.087 us/op
     p(95.0000) = 879036.584 us/op
     p(99.0000) = 879036.584 us/op
     p(99.9000) = 879036.584 us/op
     p(99.9900) = 879036.584 us/op
     p(99.9990) = 879036.584 us/op
     p(99.9999) = 879036.584 us/op
    p(100.0000) = 879036.584 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 25615.718 us/op
# Warmup Iteration   2: 841.675 us/op
# Warmup Iteration   3: 595.391 us/op
# Warmup Iteration   4: 562.019 us/op
# Warmup Iteration   5: 595.790 us/op
Iteration   1: 564.162 us/op
Iteration   2: 557.124 us/op
Iteration   3: 583.744 us/op
Iteration   4: 580.627 us/op
Iteration   5: 564.390 us/op
Iteration   6: 579.365 us/op
Iteration   7: 571.352 us/op
Iteration   8: 605.487 us/op
Iteration   9: 592.680 us/op
Iteration  10: 568.465 us/op
Iteration  11: 610.031 us/op
Iteration  12: 620.062 us/op
Iteration  13: 595.332 us/op
Iteration  14: 623.208 us/op
Iteration  15: 633.930 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  N = 15
  mean =    589.997 ±(99.9%) 25.665 us/op

  Histogram, us/op:
    [550.000, 555.000) = 0 
    [555.000, 560.000) = 1 
    [560.000, 565.000) = 2 
    [565.000, 570.000) = 1 
    [570.000, 575.000) = 1 
    [575.000, 580.000) = 1 
    [580.000, 585.000) = 2 
    [585.000, 590.000) = 0 
    [590.000, 595.000) = 1 
    [595.000, 600.000) = 1 
    [600.000, 605.000) = 0 
    [605.000, 610.000) = 1 
    [610.000, 615.000) = 1 
    [615.000, 620.000) = 0 
    [620.000, 625.000) = 2 
    [625.000, 630.000) = 0 
    [630.000, 635.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    557.124 us/op
     p(50.0000) =    583.744 us/op
     p(90.0000) =    627.497 us/op
     p(95.0000) =    633.930 us/op
     p(99.0000) =    633.930 us/op
     p(99.9000) =    633.930 us/op
     p(99.9900) =    633.930 us/op
     p(99.9990) =    633.930 us/op
     p(99.9999) =    633.930 us/op
    p(100.0000) =    633.930 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 12684.102 us/op
# Warmup Iteration   2: 772.224 us/op
# Warmup Iteration   3: 718.689 us/op
# Warmup Iteration   4: 694.920 us/op
# Warmup Iteration   5: 674.739 us/op
Iteration   1: 677.529 us/op
Iteration   2: 694.797 us/op
Iteration   3: 689.887 us/op
Iteration   4: 669.120 us/op
Iteration   5: 671.375 us/op
Iteration   6: 679.107 us/op
Iteration   7: 682.440 us/op
Iteration   8: 711.652 us/op
Iteration   9: 681.409 us/op
Iteration  10: 668.657 us/op
Iteration  11: 724.068 us/op
Iteration  12: 685.103 us/op
Iteration  13: 690.775 us/op
Iteration  14: 707.299 us/op
Iteration  15: 683.174 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  N = 15
  mean =    687.759 ±(99.9%) 17.122 us/op

  Histogram, us/op:
    [660.000, 665.000) = 0 
    [665.000, 670.000) = 2 
    [670.000, 675.000) = 1 
    [675.000, 680.000) = 2 
    [680.000, 685.000) = 3 
    [685.000, 690.000) = 2 
    [690.000, 695.000) = 2 
    [695.000, 700.000) = 0 
    [700.000, 705.000) = 0 
    [705.000, 710.000) = 1 
    [710.000, 715.000) = 1 
    [715.000, 720.000) = 0 
    [720.000, 725.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    668.657 us/op
     p(50.0000) =    683.174 us/op
     p(90.0000) =    716.618 us/op
     p(95.0000) =    724.068 us/op
     p(99.0000) =    724.068 us/op
     p(99.9000) =    724.068 us/op
     p(99.9900) =    724.068 us/op
     p(99.9990) =    724.068 us/op
     p(99.9999) =    724.068 us/op
    p(100.0000) =    724.068 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8974.133 us/op
# Warmup Iteration   2: 906.186 us/op
# Warmup Iteration   3: 941.675 us/op
# Warmup Iteration   4: 946.849 us/op
# Warmup Iteration   5: 938.255 us/op
Iteration   1: 953.866 us/op
Iteration   2: 941.728 us/op
Iteration   3: 941.736 us/op
Iteration   4: 953.775 us/op
Iteration   5: 958.206 us/op
Iteration   6: 942.599 us/op
Iteration   7: 955.408 us/op
Iteration   8: 942.639 us/op
Iteration   9: 943.700 us/op
Iteration  10: 954.789 us/op
Iteration  11: 942.420 us/op
Iteration  12: 942.009 us/op
Iteration  13: 943.394 us/op
Iteration  14: 942.816 us/op
Iteration  15: 944.044 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  N = 15
  mean =    946.875 ±(99.9%) 6.637 us/op

  Histogram, us/op:
    [940.000, 941.250) = 0 
    [941.250, 942.500) = 4 
    [942.500, 943.750) = 5 
    [943.750, 945.000) = 1 
    [945.000, 946.250) = 0 
    [946.250, 947.500) = 0 
    [947.500, 948.750) = 0 
    [948.750, 950.000) = 0 
    [950.000, 951.250) = 0 
    [951.250, 952.500) = 0 
    [952.500, 953.750) = 0 
    [953.750, 955.000) = 3 
    [955.000, 956.250) = 1 
    [956.250, 957.500) = 0 
    [957.500, 958.750) = 1 

  Percentiles, us/op:
      p(0.0000) =    941.728 us/op
     p(50.0000) =    943.394 us/op
     p(90.0000) =    956.527 us/op
     p(95.0000) =    958.206 us/op
     p(99.0000) =    958.206 us/op
     p(99.9000) =    958.206 us/op
     p(99.9900) =    958.206 us/op
     p(99.9990) =    958.206 us/op
     p(99.9999) =    958.206 us/op
    p(100.0000) =    958.206 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 9751.150 us/op
# Warmup Iteration   2: 706.445 us/op
# Warmup Iteration   3: 557.380 us/op
# Warmup Iteration   4: 579.217 us/op
# Warmup Iteration   5: 603.114 us/op
Iteration   1: 585.081 us/op
Iteration   2: 620.306 us/op
Iteration   3: 610.549 us/op
Iteration   4: 578.017 us/op
Iteration   5: 591.380 us/op
Iteration   6: 576.912 us/op
Iteration   7: 602.713 us/op
Iteration   8: 601.424 us/op
Iteration   9: 611.631 us/op
Iteration  10: 586.461 us/op
Iteration  11: 632.329 us/op
Iteration  12: 668.128 us/op
Iteration  13: 597.925 us/op
Iteration  14: 623.938 us/op
Iteration  15: 577.424 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  N = 15
  mean =    604.281 ±(99.9%) 26.594 us/op

  Histogram, us/op:
    [570.000, 580.000) = 3 
    [580.000, 590.000) = 2 
    [590.000, 600.000) = 2 
    [600.000, 610.000) = 2 
    [610.000, 620.000) = 2 
    [620.000, 630.000) = 2 
    [630.000, 640.000) = 1 
    [640.000, 650.000) = 0 
    [650.000, 660.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    576.912 us/op
     p(50.0000) =    601.424 us/op
     p(90.0000) =    646.649 us/op
     p(95.0000) =    668.128 us/op
     p(99.0000) =    668.128 us/op
     p(99.9000) =    668.128 us/op
     p(99.9900) =    668.128 us/op
     p(99.9990) =    668.128 us/op
     p(99.9999) =    668.128 us/op
    p(100.0000) =    668.128 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1330548.535 us/op
# Warmup Iteration   2: 896496.987 us/op
# Warmup Iteration   3: 897436.495 us/op
# Warmup Iteration   4: 885900.780 us/op
# Warmup Iteration   5: 897379.922 us/op
Iteration   1: 901498.190 us/op
Iteration   2: 882508.053 us/op
Iteration   3: 885836.460 us/op
Iteration   4: 888320.412 us/op
Iteration   5: 883269.086 us/op
Iteration   6: 900660.457 us/op
Iteration   7: 915493.126 us/op
Iteration   8: 889249.718 us/op
Iteration   9: 884280.536 us/op
Iteration  10: 881857.816 us/op
Iteration  11: 888211.494 us/op
Iteration  12: 890232.747 us/op
Iteration  13: 884909.706 us/op
Iteration  14: 883283.782 us/op
Iteration  15: 880555.332 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  N = 15
  mean = 889344.461 ±(99.9%) 10197.954 us/op

  Histogram, us/op:
    [880000.000, 882500.000) = 2 
    [882500.000, 885000.000) = 5 
    [885000.000, 887500.000) = 1 
    [887500.000, 890000.000) = 3 
    [890000.000, 892500.000) = 1 
    [892500.000, 895000.000) = 0 
    [895000.000, 897500.000) = 0 
    [897500.000, 900000.000) = 0 
    [900000.000, 902500.000) = 2 
    [902500.000, 905000.000) = 0 
    [905000.000, 907500.000) = 0 
    [907500.000, 910000.000) = 0 
    [910000.000, 912500.000) = 0 
    [912500.000, 915000.000) = 0 
    [915000.000, 917500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 880555.332 us/op
     p(50.0000) = 885836.460 us/op
     p(90.0000) = 907096.164 us/op
     p(95.0000) = 915493.126 us/op
     p(99.0000) = 915493.126 us/op
     p(99.9000) = 915493.126 us/op
     p(99.9900) = 915493.126 us/op
     p(99.9990) = 915493.126 us/op
     p(99.9999) = 915493.126 us/op
    p(100.0000) = 915493.126 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 684833.951 us/op
# Warmup Iteration   2: 280930.357 us/op
# Warmup Iteration   3: 276115.367 us/op
# Warmup Iteration   4: 260477.279 us/op
# Warmup Iteration   5: 256042.480 us/op
Iteration   1: 253752.030 us/op
Iteration   2: 260072.163 us/op
Iteration   3: 259188.153 us/op
Iteration   4: 253478.264 us/op
Iteration   5: 269662.486 us/op
Iteration   6: 254811.778 us/op
Iteration   7: 261400.953 us/op
Iteration   8: 255417.455 us/op
Iteration   9: 261780.953 us/op
Iteration  10: 259010.332 us/op
Iteration  11: 264165.066 us/op
Iteration  12: 251807.846 us/op
Iteration  13: 257942.080 us/op
Iteration  14: 260146.472 us/op
Iteration  15: 255074.799 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 15
  mean = 258514.055 ±(99.9%) 5026.390 us/op

  Histogram, us/op:
    [250000.000, 251250.000) = 0 
    [251250.000, 252500.000) = 1 
    [252500.000, 253750.000) = 1 
    [253750.000, 255000.000) = 2 
    [255000.000, 256250.000) = 2 
    [256250.000, 257500.000) = 0 
    [257500.000, 258750.000) = 1 
    [258750.000, 260000.000) = 2 
    [260000.000, 261250.000) = 2 
    [261250.000, 262500.000) = 2 
    [262500.000, 263750.000) = 0 
    [263750.000, 265000.000) = 1 
    [265000.000, 266250.000) = 0 
    [266250.000, 267500.000) = 0 
    [267500.000, 268750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 251807.846 us/op
     p(50.0000) = 259010.332 us/op
     p(90.0000) = 266364.034 us/op
     p(95.0000) = 269662.486 us/op
     p(99.0000) = 269662.486 us/op
     p(99.9000) = 269662.486 us/op
     p(99.9900) = 269662.486 us/op
     p(99.9990) = 269662.486 us/op
     p(99.9999) = 269662.486 us/op
    p(100.0000) = 269662.486 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2376412.764 us/op
# Warmup Iteration   2: 1936956.749 us/op
# Warmup Iteration   3: 1947251.769 us/op
# Warmup Iteration   4: 1958277.013 us/op
# Warmup Iteration   5: 1942456.623 us/op
Iteration   1: 1933484.691 us/op
Iteration   2: 1908909.317 us/op
Iteration   3: 1924699.403 us/op
Iteration   4: 1957847.057 us/op
Iteration   5: 1976529.980 us/op
Iteration   6: 1956264.464 us/op
Iteration   7: 1949681.767 us/op
Iteration   8: 1923580.023 us/op
Iteration   9: 1904721.414 us/op
Iteration  10: 1911725.538 us/op
Iteration  11: 1929049.772 us/op
Iteration  12: 1951268.189 us/op
Iteration  13: 1947456.511 us/op
Iteration  14: 1945845.134 us/op
Iteration  15: 1959696.865 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 15
  mean = 1938717.342 ±(99.9%) 22620.509 us/op

  Histogram, us/op:
    [1900000.000, 1905000.000) = 1 
    [1905000.000, 1910000.000) = 1 
    [1910000.000, 1915000.000) = 1 
    [1915000.000, 1920000.000) = 0 
    [1920000.000, 1925000.000) = 2 
    [1925000.000, 1930000.000) = 1 
    [1930000.000, 1935000.000) = 1 
    [1935000.000, 1940000.000) = 0 
    [1940000.000, 1945000.000) = 0 
    [1945000.000, 1950000.000) = 3 
    [1950000.000, 1955000.000) = 1 
    [1955000.000, 1960000.000) = 3 
    [1960000.000, 1965000.000) = 0 
    [1965000.000, 1970000.000) = 0 
    [1970000.000, 1975000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1904721.414 us/op
     p(50.0000) = 1945845.134 us/op
     p(90.0000) = 1966430.111 us/op
     p(95.0000) = 1976529.980 us/op
     p(99.0000) = 1976529.980 us/op
     p(99.9000) = 1976529.980 us/op
     p(99.9900) = 1976529.980 us/op
     p(99.9990) = 1976529.980 us/op
     p(99.9999) = 1976529.980 us/op
    p(100.0000) = 1976529.980 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 129.339 us/op
# Warmup Iteration   2: 158.993 us/op
# Warmup Iteration   3: 20.242 us/op
# Warmup Iteration   4: 19.527 us/op
# Warmup Iteration   5: 11.706 us/op
Iteration   1: 24.713 us/op
Iteration   2: 12.214 us/op
Iteration   3: 13.891 us/op
Iteration   4: 11.862 us/op
Iteration   5: 20.097 us/op
Iteration   6: 13.460 us/op
Iteration   7: 54.967 us/op
Iteration   8: 9.784 us/op
Iteration   9: 5.048 us/op
Iteration  10: 3.665 us/op
Iteration  11: 4.616 us/op
Iteration  12: 5.353 us/op
Iteration  13: 5.719 us/op
Iteration  14: 4.865 us/op
Iteration  15: 5.233 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     13.032 ±(99.9%) 14.058 us/op

  Histogram, us/op:
    [ 0.000,  5.000) = 3 
    [ 5.000, 10.000) = 5 
    [10.000, 15.000) = 4 
    [15.000, 20.000) = 0 
    [20.000, 25.000) = 2 
    [25.000, 30.000) = 0 
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 0 
    [40.000, 45.000) = 0 
    [45.000, 50.000) = 0 
    [50.000, 55.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      3.665 us/op
     p(50.0000) =      9.784 us/op
     p(90.0000) =     36.815 us/op
     p(95.0000) =     54.967 us/op
     p(99.0000) =     54.967 us/op
     p(99.9000) =     54.967 us/op
     p(99.9900) =     54.967 us/op
     p(99.9990) =     54.967 us/op
     p(99.9999) =     54.967 us/op
    p(100.0000) =     54.967 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 265.203 us/op
# Warmup Iteration   2: 33.827 us/op
# Warmup Iteration   3: 33.857 us/op
# Warmup Iteration   4: 59.512 us/op
# Warmup Iteration   5: 30.288 us/op
Iteration   1: 22.756 us/op
Iteration   2: 130.097 us/op
Iteration   3: 15.047 us/op
Iteration   4: 7.611 us/op
Iteration   5: 6.036 us/op
Iteration   6: 5.854 us/op
Iteration   7: 6.458 us/op
Iteration   8: 6.239 us/op
Iteration   9: 6.357 us/op
Iteration  10: 6.403 us/op
Iteration  11: 6.585 us/op
Iteration  12: 7.087 us/op
Iteration  13: 6.439 us/op
Iteration  14: 6.915 us/op
Iteration  15: 6.540 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     16.428 ±(99.9%) 33.972 us/op

  Histogram, us/op:
    [  0.000,  12.500) = 12 
    [ 12.500,  25.000) = 2 
    [ 25.000,  37.500) = 0 
    [ 37.500,  50.000) = 0 
    [ 50.000,  62.500) = 0 
    [ 62.500,  75.000) = 0 
    [ 75.000,  87.500) = 0 
    [ 87.500, 100.000) = 0 
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 1 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 0 

  Percentiles, us/op:
      p(0.0000) =      5.854 us/op
     p(50.0000) =      6.540 us/op
     p(90.0000) =     65.692 us/op
     p(95.0000) =    130.097 us/op
     p(99.0000) =    130.097 us/op
     p(99.9000) =    130.097 us/op
     p(99.9900) =    130.097 us/op
     p(99.9990) =    130.097 us/op
     p(99.9999) =    130.097 us/op
    p(100.0000) =    130.097 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 347.167 us/op
# Warmup Iteration   2: 45.747 us/op
# Warmup Iteration   3: 48.249 us/op
# Warmup Iteration   4: 36.811 us/op
# Warmup Iteration   5: 102.593 us/op
Iteration   1: 19.426 us/op
Iteration   2: 6.448 us/op
Iteration   3: 6.514 us/op
Iteration   4: 9.500 us/op
Iteration   5: 7.681 us/op
Iteration   6: 7.498 us/op
Iteration   7: 7.566 us/op
Iteration   8: 7.821 us/op
Iteration   9: 8.208 us/op
Iteration  10: 6.989 us/op
Iteration  11: 7.074 us/op
Iteration  12: 7.918 us/op
Iteration  13: 8.718 us/op
Iteration  14: 6.821 us/op
Iteration  15: 7.641 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =      8.388 ±(99.9%) 3.377 us/op

  Histogram, us/op:
    [ 0.000,  1.250) = 0 
    [ 1.250,  2.500) = 0 
    [ 2.500,  3.750) = 0 
    [ 3.750,  5.000) = 0 
    [ 5.000,  6.250) = 0 
    [ 6.250,  7.500) = 6 
    [ 7.500,  8.750) = 7 
    [ 8.750, 10.000) = 1 
    [10.000, 11.250) = 0 
    [11.250, 12.500) = 0 
    [12.500, 13.750) = 0 
    [13.750, 15.000) = 0 
    [15.000, 16.250) = 0 
    [16.250, 17.500) = 0 
    [17.500, 18.750) = 0 

  Percentiles, us/op:
      p(0.0000) =      6.448 us/op
     p(50.0000) =      7.641 us/op
     p(90.0000) =     13.470 us/op
     p(95.0000) =     19.426 us/op
     p(99.0000) =     19.426 us/op
     p(99.9000) =     19.426 us/op
     p(99.9900) =     19.426 us/op
     p(99.9990) =     19.426 us/op
     p(99.9999) =     19.426 us/op
    p(100.0000) =     19.426 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 247.173 us/op
# Warmup Iteration   2: 5.916 us/op
# Warmup Iteration   3: 6.027 us/op
# Warmup Iteration   4: 6.756 us/op
# Warmup Iteration   5: 6.455 us/op
Iteration   1: 9.040 us/op
Iteration   2: 6.251 us/op
Iteration   3: 6.365 us/op
Iteration   4: 8.102 us/op
Iteration   5: 6.616 us/op
Iteration   6: 44.787 us/op
Iteration   7: 7.534 us/op
Iteration   8: 10.835 us/op
Iteration   9: 5.982 us/op
Iteration  10: 5.823 us/op
Iteration  11: 6.064 us/op
Iteration  12: 6.056 us/op
Iteration  13: 5.917 us/op
Iteration  14: 6.878 us/op
Iteration  15: 6.556 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =      9.520 ±(99.9%) 10.535 us/op

  Histogram, us/op:
    [ 0.000,  5.000) = 0 
    [ 5.000, 10.000) = 13 
    [10.000, 15.000) = 1 
    [15.000, 20.000) = 0 
    [20.000, 25.000) = 0 
    [25.000, 30.000) = 0 
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 0 
    [40.000, 45.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      5.823 us/op
     p(50.0000) =      6.556 us/op
     p(90.0000) =     24.416 us/op
     p(95.0000) =     44.787 us/op
     p(99.0000) =     44.787 us/op
     p(99.9000) =     44.787 us/op
     p(99.9900) =     44.787 us/op
     p(99.9990) =     44.787 us/op
     p(99.9999) =     44.787 us/op
    p(100.0000) =     44.787 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 356.890 us/op
# Warmup Iteration   2: 38.779 us/op
# Warmup Iteration   3: 19.500 us/op
# Warmup Iteration   4: 17.881 us/op
# Warmup Iteration   5: 16.628 us/op
Iteration   1: 40.552 us/op
Iteration   2: 18.825 us/op
Iteration   3: 20.638 us/op
Iteration   4: 12.924 us/op
Iteration   5: 13.032 us/op
Iteration   6: 15.282 us/op
Iteration   7: 13.224 us/op
Iteration   8: 13.478 us/op
Iteration   9: 13.189 us/op
Iteration  10: 13.839 us/op
Iteration  11: 14.328 us/op
Iteration  12: 12.754 us/op
Iteration  13: 14.972 us/op
Iteration  14: 13.081 us/op
Iteration  15: 14.010 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =     16.275 ±(99.9%) 7.578 us/op

  Histogram, us/op:
    [10.000, 12.500) = 0 
    [12.500, 15.000) = 11 
    [15.000, 17.500) = 1 
    [17.500, 20.000) = 1 
    [20.000, 22.500) = 1 
    [22.500, 25.000) = 0 
    [25.000, 27.500) = 0 
    [27.500, 30.000) = 0 
    [30.000, 32.500) = 0 
    [32.500, 35.000) = 0 
    [35.000, 37.500) = 0 
    [37.500, 40.000) = 0 
    [40.000, 42.500) = 1 
    [42.500, 45.000) = 0 
    [45.000, 47.500) = 0 

  Percentiles, us/op:
      p(0.0000) =     12.754 us/op
     p(50.0000) =     13.839 us/op
     p(90.0000) =     28.604 us/op
     p(95.0000) =     40.552 us/op
     p(99.0000) =     40.552 us/op
     p(99.9000) =     40.552 us/op
     p(99.9900) =     40.552 us/op
     p(99.9990) =     40.552 us/op
     p(99.9999) =     40.552 us/op
    p(100.0000) =     40.552 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 841.629 us/op
# Warmup Iteration   2: 259.056 us/op
# Warmup Iteration   3: 116.212 us/op
# Warmup Iteration   4: 98.856 us/op
# Warmup Iteration   5: 92.826 us/op
Iteration   1: 96.303 us/op
Iteration   2: 175.808 us/op
Iteration   3: 94.126 us/op
Iteration   4: 184.121 us/op
Iteration   5: 108.548 us/op
Iteration   6: 138.369 us/op
Iteration   7: 89.603 us/op
Iteration   8: 97.183 us/op
Iteration   9: 104.422 us/op
Iteration  10: 87.687 us/op
Iteration  11: 87.519 us/op
Iteration  12: 96.451 us/op
Iteration  13: 88.025 us/op
Iteration  14: 87.807 us/op
Iteration  15: 88.206 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =    108.279 ±(99.9%) 34.137 us/op

  Histogram, us/op:
    [ 80.000,  90.000) = 6 
    [ 90.000, 100.000) = 4 
    [100.000, 110.000) = 2 
    [110.000, 120.000) = 0 
    [120.000, 130.000) = 0 
    [130.000, 140.000) = 1 
    [140.000, 150.000) = 0 
    [150.000, 160.000) = 0 
    [160.000, 170.000) = 0 
    [170.000, 180.000) = 1 

  Percentiles, us/op:
      p(0.0000) =     87.519 us/op
     p(50.0000) =     96.303 us/op
     p(90.0000) =    179.133 us/op
     p(95.0000) =    184.121 us/op
     p(99.0000) =    184.121 us/op
     p(99.9000) =    184.121 us/op
     p(99.9900) =    184.121 us/op
     p(99.9990) =    184.121 us/op
     p(99.9999) =    184.121 us/op
    p(100.0000) =    184.121 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 273.578 us/op
# Warmup Iteration   2: 24.758 us/op
# Warmup Iteration   3: 20.778 us/op
# Warmup Iteration   4: 5.972 us/op
# Warmup Iteration   5: 5.662 us/op
Iteration   1: 5.649 us/op
Iteration   2: 6.184 us/op
Iteration   3: 6.334 us/op
Iteration   4: 6.048 us/op
Iteration   5: 8.567 us/op
Iteration   6: 8.968 us/op
Iteration   7: 5.998 us/op
Iteration   8: 8.443 us/op
Iteration   9: 6.588 us/op
Iteration  10: 5.862 us/op
Iteration  11: 5.451 us/op
Iteration  12: 5.974 us/op
Iteration  13: 5.895 us/op
Iteration  14: 6.058 us/op
Iteration  15: 6.572 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =      6.573 ±(99.9%) 1.203 us/op

  Histogram, us/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 1 
    [5.500, 5.750) = 1 
    [5.750, 6.000) = 4 
    [6.000, 6.250) = 3 
    [6.250, 6.500) = 1 
    [6.500, 6.750) = 2 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 
    [7.750, 8.000) = 0 
    [8.000, 8.250) = 0 
    [8.250, 8.500) = 1 
    [8.500, 8.750) = 1 

  Percentiles, us/op:
      p(0.0000) =      5.451 us/op
     p(50.0000) =      6.058 us/op
     p(90.0000) =      8.727 us/op
     p(95.0000) =      8.968 us/op
     p(99.0000) =      8.968 us/op
     p(99.9000) =      8.968 us/op
     p(99.9900) =      8.968 us/op
     p(99.9990) =      8.968 us/op
     p(99.9999) =      8.968 us/op
    p(100.0000) =      8.968 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 425.010 us/op
# Warmup Iteration   2: 35.334 us/op
# Warmup Iteration   3: 53.653 us/op
# Warmup Iteration   4: 23.909 us/op
# Warmup Iteration   5: 23.095 us/op
Iteration   1: 26.044 us/op
Iteration   2: 22.620 us/op
Iteration   3: 31.770 us/op
Iteration   4: 79.154 us/op
Iteration   5: 13.687 us/op
Iteration   6: 15.375 us/op
Iteration   7: 13.556 us/op
Iteration   8: 13.495 us/op
Iteration   9: 13.818 us/op
Iteration  10: 13.887 us/op
Iteration  11: 15.545 us/op
Iteration  12: 14.090 us/op
Iteration  13: 13.827 us/op
Iteration  14: 13.375 us/op
Iteration  15: 14.138 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =     20.959 ±(99.9%) 18.204 us/op

  Histogram, us/op:
    [10.000, 15.000) = 9 
    [15.000, 20.000) = 2 
    [20.000, 25.000) = 1 
    [25.000, 30.000) = 1 
    [30.000, 35.000) = 1 
    [35.000, 40.000) = 0 
    [40.000, 45.000) = 0 
    [45.000, 50.000) = 0 
    [50.000, 55.000) = 0 
    [55.000, 60.000) = 0 
    [60.000, 65.000) = 0 
    [65.000, 70.000) = 0 
    [70.000, 75.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     13.375 us/op
     p(50.0000) =     14.090 us/op
     p(90.0000) =     50.724 us/op
     p(95.0000) =     79.154 us/op
     p(99.0000) =     79.154 us/op
     p(99.9000) =     79.154 us/op
     p(99.9900) =     79.154 us/op
     p(99.9990) =     79.154 us/op
     p(99.9999) =     79.154 us/op
    p(100.0000) =     79.154 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 840.928 us/op
# Warmup Iteration   2: 334.880 us/op
# Warmup Iteration   3: 103.449 us/op
# Warmup Iteration   4: 101.742 us/op
# Warmup Iteration   5: 92.882 us/op
Iteration   1: 145.408 us/op
Iteration   2: 163.871 us/op
Iteration   3: 110.335 us/op
Iteration   4: 91.938 us/op
Iteration   5: 87.358 us/op
Iteration   6: 125.547 us/op
Iteration   7: 84.935 us/op
Iteration   8: 137.384 us/op
Iteration   9: 85.100 us/op
Iteration  10: 84.973 us/op
Iteration  11: 86.574 us/op
Iteration  12: 86.461 us/op
Iteration  13: 85.396 us/op
Iteration  14: 83.687 us/op
Iteration  15: 94.053 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =    103.535 ±(99.9%) 28.413 us/op

  Histogram, us/op:
    [ 80.000,  85.000) = 3 
    [ 85.000,  90.000) = 5 
    [ 90.000,  95.000) = 2 
    [ 95.000, 100.000) = 0 
    [100.000, 105.000) = 0 
    [105.000, 110.000) = 0 
    [110.000, 115.000) = 1 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 1 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 1 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 1 
    [150.000, 155.000) = 0 
    [155.000, 160.000) = 0 
    [160.000, 165.000) = 1 

  Percentiles, us/op:
      p(0.0000) =     83.687 us/op
     p(50.0000) =     87.358 us/op
     p(90.0000) =    152.793 us/op
     p(95.0000) =    163.871 us/op
     p(99.0000) =    163.871 us/op
     p(99.9000) =    163.871 us/op
     p(99.9900) =    163.871 us/op
     p(99.9990) =    163.871 us/op
     p(99.9999) =    163.871 us/op
    p(100.0000) =    163.871 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 87238.411 us/op
# Warmup Iteration   2: 28184.359 us/op
# Warmup Iteration   3: 24473.100 us/op
# Warmup Iteration   4: 15343.418 us/op
# Warmup Iteration   5: 14806.406 us/op
Iteration   1: 14712.442 us/op
Iteration   2: 14649.324 us/op
Iteration   3: 14854.298 us/op
Iteration   4: 14692.475 us/op
Iteration   5: 14596.876 us/op
Iteration   6: 14644.782 us/op
Iteration   7: 14644.410 us/op
Iteration   8: 14751.486 us/op
Iteration   9: 16450.782 us/op
Iteration  10: 15034.530 us/op
Iteration  11: 14579.047 us/op
Iteration  12: 14590.349 us/op
Iteration  13: 14656.695 us/op
Iteration  14: 14577.026 us/op
Iteration  15: 14597.933 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  N = 15
  mean =  14802.164 ±(99.9%) 504.733 us/op

  Histogram, us/op:
    [14000.000, 14250.000) = 0 
    [14250.000, 14500.000) = 0 
    [14500.000, 14750.000) = 11 
    [14750.000, 15000.000) = 2 
    [15000.000, 15250.000) = 1 
    [15250.000, 15500.000) = 0 
    [15500.000, 15750.000) = 0 
    [15750.000, 16000.000) = 0 
    [16000.000, 16250.000) = 0 
    [16250.000, 16500.000) = 1 
    [16500.000, 16750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  14577.026 us/op
     p(50.0000) =  14649.324 us/op
     p(90.0000) =  15601.031 us/op
     p(95.0000) =  16450.782 us/op
     p(99.0000) =  16450.782 us/op
     p(99.9000) =  16450.782 us/op
     p(99.9900) =  16450.782 us/op
     p(99.9990) =  16450.782 us/op
     p(99.9999) =  16450.782 us/op
    p(100.0000) =  16450.782 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 33906.780 us/op
# Warmup Iteration   2: 6887.338 us/op
# Warmup Iteration   3: 3015.149 us/op
# Warmup Iteration   4: 3177.870 us/op
# Warmup Iteration   5: 4893.374 us/op
Iteration   1: 4792.700 us/op
Iteration   2: 2655.557 us/op
Iteration   3: 1527.950 us/op
Iteration   4: 1483.997 us/op
Iteration   5: 1460.732 us/op
Iteration   6: 1782.504 us/op
Iteration   7: 663.581 us/op
Iteration   8: 622.536 us/op
Iteration   9: 621.901 us/op
Iteration  10: 657.906 us/op
Iteration  11: 662.924 us/op
Iteration  12: 636.124 us/op
Iteration  13: 666.520 us/op
Iteration  14: 632.353 us/op
Iteration  15: 647.506 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean =   1300.986 ±(99.9%) 1220.136 us/op

  Histogram, us/op:
    [   0.000,  500.000) = 0 
    [ 500.000, 1000.000) = 9 
    [1000.000, 1500.000) = 2 
    [1500.000, 2000.000) = 2 
    [2000.000, 2500.000) = 0 
    [2500.000, 3000.000) = 1 
    [3000.000, 3500.000) = 0 
    [3500.000, 4000.000) = 0 
    [4000.000, 4500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    621.901 us/op
     p(50.0000) =    663.581 us/op
     p(90.0000) =   3510.414 us/op
     p(95.0000) =   4792.700 us/op
     p(99.0000) =   4792.700 us/op
     p(99.9000) =   4792.700 us/op
     p(99.9900) =   4792.700 us/op
     p(99.9990) =   4792.700 us/op
     p(99.9999) =   4792.700 us/op
    p(100.0000) =   4792.700 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 452750.144 us/op
# Warmup Iteration   2: 71521.799 us/op
# Warmup Iteration   3: 42260.122 us/op
# Warmup Iteration   4: 54255.850 us/op
# Warmup Iteration   5: 42159.352 us/op
Iteration   1: 42149.025 us/op
Iteration   2: 41930.319 us/op
Iteration   3: 42076.661 us/op
Iteration   4: 41881.865 us/op
Iteration   5: 42090.181 us/op
Iteration   6: 42001.042 us/op
Iteration   7: 41937.515 us/op
Iteration   8: 41838.441 us/op
Iteration   9: 41898.028 us/op
Iteration  10: 42021.199 us/op
Iteration  11: 42049.566 us/op
Iteration  12: 42053.339 us/op
Iteration  13: 42066.304 us/op
Iteration  14: 41861.623 us/op
Iteration  15: 42050.321 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean =  41993.695 ±(99.9%) 101.688 us/op

  Histogram, us/op:
    [41800.000, 41825.000) = 0 
    [41825.000, 41850.000) = 1 
    [41850.000, 41875.000) = 1 
    [41875.000, 41900.000) = 2 
    [41900.000, 41925.000) = 0 
    [41925.000, 41950.000) = 2 
    [41950.000, 41975.000) = 0 
    [41975.000, 42000.000) = 0 
    [42000.000, 42025.000) = 2 
    [42025.000, 42050.000) = 1 
    [42050.000, 42075.000) = 3 
    [42075.000, 42100.000) = 2 
    [42100.000, 42125.000) = 0 
    [42125.000, 42150.000) = 1 
    [42150.000, 42175.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  41838.441 us/op
     p(50.0000) =  42021.199 us/op
     p(90.0000) =  42113.719 us/op
     p(95.0000) =  42149.025 us/op
     p(99.0000) =  42149.025 us/op
     p(99.9000) =  42149.025 us/op
     p(99.9900) =  42149.025 us/op
     p(99.9990) =  42149.025 us/op
     p(99.9999) =  42149.025 us/op
    p(100.0000) =  42149.025 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4375082.516 us/op
# Warmup Iteration   2: 6757172.504 us/op
# Warmup Iteration   3: 6762399.913 us/op
# Warmup Iteration   4: 6739878.754 us/op
# Warmup Iteration   5: 6803540.803 us/op
Iteration   1: 6776584.985 us/op
Iteration   2: 6740004.509 us/op
Iteration   3: 6731367.700 us/op
Iteration   4: 6743455.975 us/op
Iteration   5: 6730844.163 us/op
Iteration   6: 6743649.339 us/op
Iteration   7: 6736533.975 us/op
Iteration   8: 6774077.049 us/op
Iteration   9: 6714903.358 us/op
Iteration  10: 6748842.281 us/op
Iteration  11: 6728245.652 us/op
Iteration  12: 6772907.142 us/op
Iteration  13: 6735868.648 us/op
Iteration  14: 6755299.483 us/op
Iteration  15: 6771363.482 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean = 6746929.849 ±(99.9%) 20481.984 us/op

  Histogram, us/op:
    [6710000.000, 6715000.000) = 1 
    [6715000.000, 6720000.000) = 0 
    [6720000.000, 6725000.000) = 0 
    [6725000.000, 6730000.000) = 1 
    [6730000.000, 6735000.000) = 2 
    [6735000.000, 6740000.000) = 2 
    [6740000.000, 6745000.000) = 3 
    [6745000.000, 6750000.000) = 1 
    [6750000.000, 6755000.000) = 0 
    [6755000.000, 6760000.000) = 1 
    [6760000.000, 6765000.000) = 0 
    [6765000.000, 6770000.000) = 0 
    [6770000.000, 6775000.000) = 3 

  Percentiles, us/op:
      p(0.0000) = 6714903.358 us/op
     p(50.0000) = 6743455.975 us/op
     p(90.0000) = 6775080.223 us/op
     p(95.0000) = 6776584.985 us/op
     p(99.0000) = 6776584.985 us/op
     p(99.9000) = 6776584.985 us/op
     p(99.9900) = 6776584.985 us/op
     p(99.9990) = 6776584.985 us/op
     p(99.9999) = 6776584.985 us/op
    p(100.0000) = 6776584.985 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 80299.231 us/op
# Warmup Iteration   2: 8566.624 us/op
# Warmup Iteration   3: 3007.940 us/op
# Warmup Iteration   4: 3004.404 us/op
# Warmup Iteration   5: 3002.306 us/op
Iteration   1: 3005.527 us/op
Iteration   2: 2985.131 us/op
Iteration   3: 3004.683 us/op
Iteration   4: 3006.040 us/op
Iteration   5: 3032.335 us/op
Iteration   6: 2984.684 us/op
Iteration   7: 2997.743 us/op
Iteration   8: 3008.028 us/op
Iteration   9: 3012.595 us/op
Iteration  10: 3011.712 us/op
Iteration  11: 3058.687 us/op
Iteration  12: 2984.548 us/op
Iteration  13: 3005.101 us/op
Iteration  14: 3003.848 us/op
Iteration  15: 3005.154 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  N = 15
  mean =   3007.054 ±(99.9%) 20.121 us/op

  Histogram, us/op:
    [2980.000, 2985.000) = 2 
    [2985.000, 2990.000) = 1 
    [2990.000, 2995.000) = 0 
    [2995.000, 3000.000) = 1 
    [3000.000, 3005.000) = 2 
    [3005.000, 3010.000) = 5 
    [3010.000, 3015.000) = 2 
    [3015.000, 3020.000) = 0 
    [3020.000, 3025.000) = 0 
    [3025.000, 3030.000) = 0 
    [3030.000, 3035.000) = 1 
    [3035.000, 3040.000) = 0 
    [3040.000, 3045.000) = 0 
    [3045.000, 3050.000) = 0 
    [3050.000, 3055.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   2984.548 us/op
     p(50.0000) =   3005.154 us/op
     p(90.0000) =   3042.876 us/op
     p(95.0000) =   3058.687 us/op
     p(99.0000) =   3058.687 us/op
     p(99.9000) =   3058.687 us/op
     p(99.9900) =   3058.687 us/op
     p(99.9990) =   3058.687 us/op
     p(99.9999) =   3058.687 us/op
    p(100.0000) =   3058.687 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 78721.416 us/op
# Warmup Iteration   2: 48095.980 us/op
# Warmup Iteration   3: 31489.488 us/op
# Warmup Iteration   4: 31480.382 us/op
# Warmup Iteration   5: 31520.957 us/op
Iteration   1: 31526.823 us/op
Iteration   2: 31536.391 us/op
Iteration   3: 31484.206 us/op
Iteration   4: 31422.374 us/op
Iteration   5: 31532.072 us/op
Iteration   6: 31490.311 us/op
Iteration   7: 31456.595 us/op
Iteration   8: 31499.383 us/op
Iteration   9: 31499.866 us/op
Iteration  10: 31479.628 us/op
Iteration  11: 31488.109 us/op
Iteration  12: 31542.322 us/op
Iteration  13: 31444.896 us/op
Iteration  14: 31514.301 us/op
Iteration  15: 31485.088 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  N = 15
  mean =  31493.491 ±(99.9%) 36.703 us/op

  Histogram, us/op:
    [31400.000, 31412.500) = 0 
    [31412.500, 31425.000) = 1 
    [31425.000, 31437.500) = 0 
    [31437.500, 31450.000) = 1 
    [31450.000, 31462.500) = 1 
    [31462.500, 31475.000) = 0 
    [31475.000, 31487.500) = 3 
    [31487.500, 31500.000) = 4 
    [31500.000, 31512.500) = 0 
    [31512.500, 31525.000) = 1 
    [31525.000, 31537.500) = 3 
    [31537.500, 31550.000) = 1 
    [31550.000, 31562.500) = 0 
    [31562.500, 31575.000) = 0 
    [31575.000, 31587.500) = 0 

  Percentiles, us/op:
      p(0.0000) =  31422.374 us/op
     p(50.0000) =  31490.311 us/op
     p(90.0000) =  31538.763 us/op
     p(95.0000) =  31542.322 us/op
     p(99.0000) =  31542.322 us/op
     p(99.9000) =  31542.322 us/op
     p(99.9900) =  31542.322 us/op
     p(99.9990) =  31542.322 us/op
     p(99.9999) =  31542.322 us/op
    p(100.0000) =  31542.322 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6393911.513 us/op
# Warmup Iteration   2: 1778676.311 us/op
# Warmup Iteration   3: 1759750.284 us/op
# Warmup Iteration   4: 1758754.364 us/op
# Warmup Iteration   5: 1759580.929 us/op
Iteration   1: 1760857.767 us/op
Iteration   2: 1759915.831 us/op
Iteration   3: 1765559.125 us/op
Iteration   4: 1762515.160 us/op
Iteration   5: 1762909.828 us/op
Iteration   6: 1763193.865 us/op
Iteration   7: 1762862.555 us/op
Iteration   8: 1761549.499 us/op
Iteration   9: 1762101.257 us/op
Iteration  10: 1761587.870 us/op
Iteration  11: 1761121.089 us/op
Iteration  12: 1761203.457 us/op
Iteration  13: 1761825.954 us/op
Iteration  14: 1761420.364 us/op
Iteration  15: 1761931.529 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  N = 15
  mean = 1762037.010 ±(99.9%) 1391.503 us/op

  Histogram, us/op:
    [1759000.000, 1759500.000) = 0 
    [1759500.000, 1760000.000) = 1 
    [1760000.000, 1760500.000) = 0 
    [1760500.000, 1761000.000) = 1 
    [1761000.000, 1761500.000) = 3 
    [1761500.000, 1762000.000) = 4 
    [1762000.000, 1762500.000) = 1 
    [1762500.000, 1763000.000) = 3 
    [1763000.000, 1763500.000) = 1 
    [1763500.000, 1764000.000) = 0 
    [1764000.000, 1764500.000) = 0 
    [1764500.000, 1765000.000) = 0 
    [1765000.000, 1765500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1759915.831 us/op
     p(50.0000) = 1761825.954 us/op
     p(90.0000) = 1764139.969 us/op
     p(95.0000) = 1765559.125 us/op
     p(99.0000) = 1765559.125 us/op
     p(99.9000) = 1765559.125 us/op
     p(99.9900) = 1765559.125 us/op
     p(99.9990) = 1765559.125 us/op
     p(99.9999) = 1765559.125 us/op
    p(100.0000) = 1765559.125 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 50.827 us/op
# Warmup Iteration   2: 11.797 us/op
# Warmup Iteration   3: 13.613 us/op
# Warmup Iteration   4: 12.324 us/op
# Warmup Iteration   5: 12.991 us/op
Iteration   1: 13.011 us/op
Iteration   2: 13.450 us/op
Iteration   3: 11.636 us/op
Iteration   4: 11.646 us/op
Iteration   5: 13.853 us/op
Iteration   6: 12.893 us/op
Iteration   7: 11.686 us/op
Iteration   8: 9.947 us/op
Iteration   9: 13.066 us/op
Iteration  10: 13.320 us/op
Iteration  11: 12.404 us/op
Iteration  12: 22.575 us/op
Iteration  13: 12.837 us/op
Iteration  14: 13.053 us/op
Iteration  15: 14.168 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  N = 15
  mean =     13.303 ±(99.9%) 2.967 us/op

  Histogram, us/op:
    [ 0.000,  2.500) = 0 
    [ 2.500,  5.000) = 0 
    [ 5.000,  7.500) = 0 
    [ 7.500, 10.000) = 1 
    [10.000, 12.500) = 4 
    [12.500, 15.000) = 9 
    [15.000, 17.500) = 0 
    [17.500, 20.000) = 0 
    [20.000, 22.500) = 0 
    [22.500, 25.000) = 1 
    [25.000, 27.500) = 0 

  Percentiles, us/op:
      p(0.0000) =      9.947 us/op
     p(50.0000) =     13.011 us/op
     p(90.0000) =     17.531 us/op
     p(95.0000) =     22.575 us/op
     p(99.0000) =     22.575 us/op
     p(99.9000) =     22.575 us/op
     p(99.9900) =     22.575 us/op
     p(99.9990) =     22.575 us/op
     p(99.9999) =     22.575 us/op
    p(100.0000) =     22.575 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 105135.177 us/op
# Warmup Iteration   2: 16751.623 us/op
# Warmup Iteration   3: 8867.333 us/op
# Warmup Iteration   4: 8889.534 us/op
# Warmup Iteration   5: 8928.288 us/op
Iteration   1: 8868.651 us/op
Iteration   2: 8859.830 us/op
Iteration   3: 8882.604 us/op
Iteration   4: 8746.192 us/op
Iteration   5: 8860.283 us/op
Iteration   6: 8853.954 us/op
Iteration   7: 8934.566 us/op
Iteration   8: 8878.042 us/op
Iteration   9: 8900.331 us/op
Iteration  10: 8864.744 us/op
Iteration  11: 8881.721 us/op
Iteration  12: 8872.462 us/op
Iteration  13: 8838.691 us/op
Iteration  14: 8874.051 us/op
Iteration  15: 8859.709 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  N = 15
  mean =   8865.055 ±(99.9%) 42.383 us/op

  Histogram, us/op:
    [8700.000, 8725.000) = 0 
    [8725.000, 8750.000) = 1 
    [8750.000, 8775.000) = 0 
    [8775.000, 8800.000) = 0 
    [8800.000, 8825.000) = 0 
    [8825.000, 8850.000) = 1 
    [8850.000, 8875.000) = 8 
    [8875.000, 8900.000) = 3 
    [8900.000, 8925.000) = 1 
    [8925.000, 8950.000) = 1 
    [8950.000, 8975.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   8746.192 us/op
     p(50.0000) =   8868.651 us/op
     p(90.0000) =   8914.025 us/op
     p(95.0000) =   8934.566 us/op
     p(99.0000) =   8934.566 us/op
     p(99.9000) =   8934.566 us/op
     p(99.9900) =   8934.566 us/op
     p(99.9990) =   8934.566 us/op
     p(99.9999) =   8934.566 us/op
    p(100.0000) =   8934.566 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 237090.733 us/op
# Warmup Iteration   2: 42840.138 us/op
# Warmup Iteration   3: 47351.765 us/op
# Warmup Iteration   4: 27780.655 us/op
# Warmup Iteration   5: 41590.852 us/op
Iteration   1: 32914.392 us/op
Iteration   2: 45871.955 us/op
Iteration   3: 34599.859 us/op
Iteration   4: 36752.544 us/op
Iteration   5: 38711.393 us/op
Iteration   6: 31690.823 us/op
Iteration   7: 41981.911 us/op
Iteration   8: 37444.823 us/op
Iteration   9: 29886.165 us/op
Iteration  10: 35233.933 us/op
Iteration  11: 37426.790 us/op
Iteration  12: 32500.891 us/op
Iteration  13: 32783.400 us/op
Iteration  14: 33022.514 us/op
Iteration  15: 31435.500 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  N = 15
  mean =  35483.793 ±(99.9%) 4621.133 us/op

  Histogram, us/op:
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 0 
    [27500.000, 30000.000) = 1 
    [30000.000, 32500.000) = 2 
    [32500.000, 35000.000) = 5 
    [35000.000, 37500.000) = 4 
    [37500.000, 40000.000) = 1 
    [40000.000, 42500.000) = 1 
    [42500.000, 45000.000) = 0 
    [45000.000, 47500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  29886.165 us/op
     p(50.0000) =  34599.859 us/op
     p(90.0000) =  43537.929 us/op
     p(95.0000) =  45871.955 us/op
     p(99.0000) =  45871.955 us/op
     p(99.9000) =  45871.955 us/op
     p(99.9900) =  45871.955 us/op
     p(99.9990) =  45871.955 us/op
     p(99.9999) =  45871.955 us/op
    p(100.0000) =  45871.955 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 188742.230 us/op
# Warmup Iteration   2: 57701.474 us/op
# Warmup Iteration   3: 38500.535 us/op
# Warmup Iteration   4: 37152.945 us/op
# Warmup Iteration   5: 37184.829 us/op
Iteration   1: 37359.033 us/op
Iteration   2: 37283.434 us/op
Iteration   3: 37147.203 us/op
Iteration   4: 37072.667 us/op
Iteration   5: 37178.084 us/op
Iteration   6: 37182.457 us/op
Iteration   7: 37228.912 us/op
Iteration   8: 37139.126 us/op
Iteration   9: 37134.806 us/op
Iteration  10: 37082.828 us/op
Iteration  11: 37166.857 us/op
Iteration  12: 37311.253 us/op
Iteration  13: 37158.252 us/op
Iteration  14: 37296.602 us/op
Iteration  15: 37184.743 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  N = 15
  mean =  37195.084 ±(99.9%) 89.892 us/op

  Histogram, us/op:
    [37000.000, 37025.000) = 0 
    [37025.000, 37050.000) = 0 
    [37050.000, 37075.000) = 1 
    [37075.000, 37100.000) = 1 
    [37100.000, 37125.000) = 0 
    [37125.000, 37150.000) = 3 
    [37150.000, 37175.000) = 2 
    [37175.000, 37200.000) = 3 
    [37200.000, 37225.000) = 0 
    [37225.000, 37250.000) = 1 
    [37250.000, 37275.000) = 0 
    [37275.000, 37300.000) = 2 
    [37300.000, 37325.000) = 1 
    [37325.000, 37350.000) = 0 
    [37350.000, 37375.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  37072.667 us/op
     p(50.0000) =  37178.084 us/op
     p(90.0000) =  37330.365 us/op
     p(95.0000) =  37359.033 us/op
     p(99.0000) =  37359.033 us/op
     p(99.9000) =  37359.033 us/op
     p(99.9900) =  37359.033 us/op
     p(99.9990) =  37359.033 us/op
     p(99.9999) =  37359.033 us/op
    p(100.0000) =  37359.033 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 143201.272 us/op
# Warmup Iteration   2: 15973.395 us/op
# Warmup Iteration   3: 15954.319 us/op
# Warmup Iteration   4: 15785.263 us/op
# Warmup Iteration   5: 15829.382 us/op
Iteration   1: 15801.228 us/op
Iteration   2: 15897.559 us/op
Iteration   3: 15689.590 us/op
Iteration   4: 15784.741 us/op
Iteration   5: 15781.162 us/op
Iteration   6: 15936.913 us/op
Iteration   7: 15780.979 us/op
Iteration   8: 15844.573 us/op
Iteration   9: 15792.963 us/op
Iteration  10: 15772.674 us/op
Iteration  11: 15783.747 us/op
Iteration  12: 16118.032 us/op
Iteration  13: 16006.020 us/op
Iteration  14: 15985.363 us/op
Iteration  15: 15997.214 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  N = 15
  mean =  15864.851 ±(99.9%) 127.204 us/op

  Histogram, us/op:
    [15600.000, 15650.000) = 0 
    [15650.000, 15700.000) = 1 
    [15700.000, 15750.000) = 0 
    [15750.000, 15800.000) = 6 
    [15800.000, 15850.000) = 2 
    [15850.000, 15900.000) = 1 
    [15900.000, 15950.000) = 1 
    [15950.000, 16000.000) = 2 
    [16000.000, 16050.000) = 1 
    [16050.000, 16100.000) = 0 
    [16100.000, 16150.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  15689.590 us/op
     p(50.0000) =  15801.228 us/op
     p(90.0000) =  16050.825 us/op
     p(95.0000) =  16118.032 us/op
     p(99.0000) =  16118.032 us/op
     p(99.9000) =  16118.032 us/op
     p(99.9900) =  16118.032 us/op
     p(99.9990) =  16118.032 us/op
     p(99.9999) =  16118.032 us/op
    p(100.0000) =  16118.032 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 147863.494 us/op
# Warmup Iteration   2: 16796.245 us/op
# Warmup Iteration   3: 14754.719 us/op
# Warmup Iteration   4: 14857.967 us/op
# Warmup Iteration   5: 14779.473 us/op
Iteration   1: 14938.820 us/op
Iteration   2: 15007.077 us/op
Iteration   3: 14784.384 us/op
Iteration   4: 14667.403 us/op
Iteration   5: 14731.568 us/op
Iteration   6: 14799.137 us/op
Iteration   7: 14718.398 us/op
Iteration   8: 14794.401 us/op
Iteration   9: 14916.303 us/op
Iteration  10: 14731.655 us/op
Iteration  11: 18462.177 us/op
Iteration  12: 14828.665 us/op
Iteration  13: 14929.938 us/op
Iteration  14: 14931.093 us/op
Iteration  15: 14816.447 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  N = 15
  mean =  15070.498 ±(99.9%) 1008.498 us/op

  Histogram, us/op:
    [14000.000, 14500.000) = 0 
    [14500.000, 15000.000) = 13 
    [15000.000, 15500.000) = 1 
    [15500.000, 16000.000) = 0 
    [16000.000, 16500.000) = 0 
    [16500.000, 17000.000) = 0 
    [17000.000, 17500.000) = 0 
    [17500.000, 18000.000) = 0 
    [18000.000, 18500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  14667.403 us/op
     p(50.0000) =  14816.447 us/op
     p(90.0000) =  16389.117 us/op
     p(95.0000) =  18462.177 us/op
     p(99.0000) =  18462.177 us/op
     p(99.9000) =  18462.177 us/op
     p(99.9900) =  18462.177 us/op
     p(99.9990) =  18462.177 us/op
     p(99.9999) =  18462.177 us/op
    p(100.0000) =  18462.177 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 163408.134 us/op
# Warmup Iteration   2: 45339.838 us/op
# Warmup Iteration   3: 41436.327 us/op
# Warmup Iteration   4: 34913.727 us/op
# Warmup Iteration   5: 34400.593 us/op
Iteration   1: 34704.171 us/op
Iteration   2: 39456.271 us/op
Iteration   3: 35210.826 us/op
Iteration   4: 34631.694 us/op
Iteration   5: 34128.485 us/op
Iteration   6: 33624.558 us/op
Iteration   7: 34320.675 us/op
Iteration   8: 34723.973 us/op
Iteration   9: 34678.376 us/op
Iteration  10: 33259.415 us/op
Iteration  11: 35341.929 us/op
Iteration  12: 34803.621 us/op
Iteration  13: 34913.377 us/op
Iteration  14: 34375.652 us/op
Iteration  15: 33125.623 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  N = 15
  mean =  34753.243 ±(99.9%) 1554.499 us/op

  Histogram, us/op:
    [33000.000, 33500.000) = 2 
    [33500.000, 34000.000) = 1 
    [34000.000, 34500.000) = 3 
    [34500.000, 35000.000) = 6 
    [35000.000, 35500.000) = 2 
    [35500.000, 36000.000) = 0 
    [36000.000, 36500.000) = 0 
    [36500.000, 37000.000) = 0 
    [37000.000, 37500.000) = 0 
    [37500.000, 38000.000) = 0 
    [38000.000, 38500.000) = 0 
    [38500.000, 39000.000) = 0 
    [39000.000, 39500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  33125.623 us/op
     p(50.0000) =  34678.376 us/op
     p(90.0000) =  36987.666 us/op
     p(95.0000) =  39456.271 us/op
     p(99.0000) =  39456.271 us/op
     p(99.9000) =  39456.271 us/op
     p(99.9900) =  39456.271 us/op
     p(99.9990) =  39456.271 us/op
     p(99.9999) =  39456.271 us/op
    p(100.0000) =  39456.271 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 20172.764 us/op
# Warmup Iteration   2: 2380.569 us/op
# Warmup Iteration   3: 1257.680 us/op
# Warmup Iteration   4: 1182.830 us/op
# Warmup Iteration   5: 1102.043 us/op
Iteration   1: 1201.345 us/op
Iteration   2: 1052.579 us/op
Iteration   3: 1069.494 us/op
Iteration   4: 1050.879 us/op
Iteration   5: 1131.387 us/op
Iteration   6: 938.577 us/op
Iteration   7: 951.794 us/op
Iteration   8: 944.585 us/op
Iteration   9: 921.271 us/op
Iteration  10: 928.549 us/op
Iteration  11: 951.936 us/op
Iteration  12: 946.184 us/op
Iteration  13: 1006.445 us/op
Iteration  14: 986.125 us/op
Iteration  15: 1000.986 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean =   1005.476 ±(99.9%) 87.342 us/op

  Histogram, us/op:
    [ 900.000,  925.000) = 1 
    [ 925.000,  950.000) = 4 
    [ 950.000,  975.000) = 2 
    [ 975.000, 1000.000) = 1 
    [1000.000, 1025.000) = 2 
    [1025.000, 1050.000) = 0 
    [1050.000, 1075.000) = 3 
    [1075.000, 1100.000) = 0 
    [1100.000, 1125.000) = 0 
    [1125.000, 1150.000) = 1 
    [1150.000, 1175.000) = 0 
    [1175.000, 1200.000) = 0 
    [1200.000, 1225.000) = 1 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    921.271 us/op
     p(50.0000) =    986.125 us/op
     p(90.0000) =   1159.370 us/op
     p(95.0000) =   1201.345 us/op
     p(99.0000) =   1201.345 us/op
     p(99.9000) =   1201.345 us/op
     p(99.9900) =   1201.345 us/op
     p(99.9990) =   1201.345 us/op
     p(99.9999) =   1201.345 us/op
    p(100.0000) =   1201.345 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 30324.993 us/op
# Warmup Iteration   2: 9858.254 us/op
# Warmup Iteration   3: 12252.681 us/op
# Warmup Iteration   4: 8626.443 us/op
# Warmup Iteration   5: 8502.408 us/op
Iteration   1: 8449.432 us/op
Iteration   2: 8531.925 us/op
Iteration   3: 8475.064 us/op
Iteration   4: 9696.335 us/op
Iteration   5: 9918.749 us/op
Iteration   6: 8678.148 us/op
Iteration   7: 8716.158 us/op
Iteration   8: 8698.367 us/op
Iteration   9: 8678.263 us/op
Iteration  10: 8671.527 us/op
Iteration  11: 8448.130 us/op
Iteration  12: 8654.040 us/op
Iteration  13: 8600.354 us/op
Iteration  14: 8668.977 us/op
Iteration  15: 8581.018 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean =   8764.432 ±(99.9%) 465.117 us/op

  Histogram, us/op:
    [ 8000.000,  8125.000) = 0 
    [ 8125.000,  8250.000) = 0 
    [ 8250.000,  8375.000) = 0 
    [ 8375.000,  8500.000) = 3 
    [ 8500.000,  8625.000) = 3 
    [ 8625.000,  8750.000) = 7 
    [ 8750.000,  8875.000) = 0 
    [ 8875.000,  9000.000) = 0 
    [ 9000.000,  9125.000) = 0 
    [ 9125.000,  9250.000) = 0 
    [ 9250.000,  9375.000) = 0 
    [ 9375.000,  9500.000) = 0 
    [ 9500.000,  9625.000) = 0 
    [ 9625.000,  9750.000) = 1 
    [ 9750.000,  9875.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   8448.130 us/op
     p(50.0000) =   8668.977 us/op
     p(90.0000) =   9785.301 us/op
     p(95.0000) =   9918.749 us/op
     p(99.0000) =   9918.749 us/op
     p(99.9000) =   9918.749 us/op
     p(99.9900) =   9918.749 us/op
     p(99.9990) =   9918.749 us/op
     p(99.9999) =   9918.749 us/op
    p(100.0000) =   9918.749 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 165221.294 us/op
# Warmup Iteration   2: 112235.333 us/op
# Warmup Iteration   3: 107521.571 us/op
# Warmup Iteration   4: 109104.334 us/op
# Warmup Iteration   5: 111125.118 us/op
Iteration   1: 109145.328 us/op
Iteration   2: 108607.430 us/op
Iteration   3: 109627.302 us/op
Iteration   4: 109744.966 us/op
Iteration   5: 109264.032 us/op
Iteration   6: 108409.062 us/op
Iteration   7: 108151.881 us/op
Iteration   8: 108688.337 us/op
Iteration   9: 108276.742 us/op
Iteration  10: 109037.261 us/op
Iteration  11: 109462.211 us/op
Iteration  12: 108760.015 us/op
Iteration  13: 108470.690 us/op
Iteration  14: 108465.703 us/op
Iteration  15: 109349.139 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean = 108897.340 ±(99.9%) 548.420 us/op

  Histogram, us/op:
    [108000.000, 108125.000) = 0 
    [108125.000, 108250.000) = 1 
    [108250.000, 108375.000) = 1 
    [108375.000, 108500.000) = 3 
    [108500.000, 108625.000) = 1 
    [108625.000, 108750.000) = 1 
    [108750.000, 108875.000) = 1 
    [108875.000, 109000.000) = 0 
    [109000.000, 109125.000) = 1 
    [109125.000, 109250.000) = 1 
    [109250.000, 109375.000) = 2 
    [109375.000, 109500.000) = 1 
    [109500.000, 109625.000) = 0 
    [109625.000, 109750.000) = 2 
    [109750.000, 109875.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 108151.881 us/op
     p(50.0000) = 108760.015 us/op
     p(90.0000) = 109674.368 us/op
     p(95.0000) = 109744.966 us/op
     p(99.0000) = 109744.966 us/op
     p(99.9000) = 109744.966 us/op
     p(99.9900) = 109744.966 us/op
     p(99.9990) = 109744.966 us/op
     p(99.9999) = 109744.966 us/op
    p(100.0000) = 109744.966 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 906608.065 us/op
# Warmup Iteration   2: 1118356.466 us/op
# Warmup Iteration   3: 720374.438 us/op
# Warmup Iteration   4: 748340.525 us/op
# Warmup Iteration   5: 763640.785 us/op
Iteration   1: 717310.817 us/op
Iteration   2: 703619.739 us/op
Iteration   3: 707386.215 us/op
Iteration   4: 707432.616 us/op
Iteration   5: 722466.709 us/op
Iteration   6: 716261.573 us/op
Iteration   7: 698517.542 us/op
Iteration   8: 724209.858 us/op
Iteration   9: 713027.172 us/op
Iteration  10: 715540.054 us/op
Iteration  11: 708683.159 us/op
Iteration  12: 702199.321 us/op
Iteration  13: 723438.781 us/op
Iteration  14: 707981.819 us/op
Iteration  15: 725724.009 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  N = 15
  mean = 712919.959 ±(99.9%) 9224.941 us/op

  Histogram, us/op:
    [690000.000, 692500.000) = 0 
    [692500.000, 695000.000) = 0 
    [695000.000, 697500.000) = 0 
    [697500.000, 700000.000) = 1 
    [700000.000, 702500.000) = 1 
    [702500.000, 705000.000) = 1 
    [705000.000, 707500.000) = 2 
    [707500.000, 710000.000) = 2 
    [710000.000, 712500.000) = 0 
    [712500.000, 715000.000) = 1 
    [715000.000, 717500.000) = 3 
    [717500.000, 720000.000) = 0 
    [720000.000, 722500.000) = 1 
    [722500.000, 725000.000) = 2 
    [725000.000, 727500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 698517.542 us/op
     p(50.0000) = 713027.172 us/op
     p(90.0000) = 724815.518 us/op
     p(95.0000) = 725724.009 us/op
     p(99.0000) = 725724.009 us/op
     p(99.9000) = 725724.009 us/op
     p(99.9900) = 725724.009 us/op
     p(99.9990) = 725724.009 us/op
     p(99.9999) = 725724.009 us/op
    p(100.0000) = 725724.009 us/op


# Run complete. Total time: 08:43:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                    (iterations)  (length)     (size)    Mode      Cnt        Score       Error   Units
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A   thrpt       15        0.002 ±     0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A   thrpt       15        0.002 ±     0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A   thrpt       15        0.001 ±     0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A   thrpt       15        0.002 ±     0.001  ops/us
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A   thrpt       15        1.476 ±     0.001  ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A   thrpt       15        0.621 ±     0.001  ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A   thrpt       15        0.358 ±     0.001  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10   thrpt       15       19.421 ±     0.205  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100   thrpt       15        2.036 ±     0.020  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000   thrpt       15        0.195 ±     0.003  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10   thrpt       15       20.705 ±     0.567  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100   thrpt       15        2.339 ±     0.036  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000   thrpt       15        0.209 ±     0.008  ops/us
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁴              ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A   thrpt       15        0.002 ±     0.001  ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A   thrpt       15       ≈ 10⁻⁷              ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A   thrpt       15       ≈ 10⁻³              ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁴              ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A   thrpt       15       46.171 ±     0.015  ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁴              ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁴              ops/us
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁴              ops/us
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A   thrpt       15        0.001 ±     0.001  ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A   thrpt       15       ≈ 10⁻⁴              ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024    avgt       15   200664.177 ±   925.024   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240    avgt       15   156619.784 ±   990.773   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400    avgt       15   151246.468 ±   842.511   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576    avgt       15   204297.973 ±   623.973   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760    avgt       15   203972.819 ±   818.821   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600    avgt       15   201384.333 ±   777.692   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024    avgt       15  1786165.838 ± 24874.431   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240    avgt       15   862108.823 ± 58527.173   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400    avgt       15  1028269.123 ±  9150.033   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576    avgt       15  1030624.062 ±  3649.909   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760    avgt       15  1029254.175 ±  5389.638   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600    avgt       15   836240.339 ±  5596.799   us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A    avgt       15      534.739 ±     0.337   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A    avgt       15      657.944 ±     3.994   us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A    avgt       15      822.405 ±    94.476   us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A    avgt       15      534.928 ±     0.330   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A    avgt       15   918364.802 ±  3908.648   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A    avgt       15   217978.615 ±  3510.683   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A    avgt       15  1956295.125 ± 35546.715   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A    avgt       15        0.678 ±     0.001   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A    avgt       15        1.610 ±     0.001   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A    avgt       15        2.796 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10    avgt       15        0.052 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100    avgt       15        0.495 ±     0.005   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000    avgt       15        5.100 ±     0.047   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10    avgt       15        0.049 ±     0.002   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100    avgt       15        0.439 ±     0.011   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000    avgt       15        4.676 ±     0.160   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A    avgt       15    14456.814 ±    12.014   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A    avgt       15      427.064 ±     2.215   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A    avgt       15    42377.806 ±   141.632   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A    avgt       15  4338680.741 ± 19494.272   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A    avgt       15     2997.655 ±     1.992   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A    avgt       15    31506.889 ±    11.927   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A    avgt       15  1760480.588 ±   340.487   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A    avgt       15        0.022 ±     0.001   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A    avgt       15    10591.567 ±     2.161   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A    avgt       15    37422.608 ±  3832.668   us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A    avgt       15    38365.605 ±   195.468   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A    avgt       15    19792.513 ±    89.263   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A    avgt       15    13798.891 ±    30.661   us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A    avgt       15    31625.707 ±   827.964   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A    avgt       15      788.341 ±     8.722   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A    avgt       15     8127.647 ±    23.114   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A    avgt       15   109405.202 ±   554.451   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A    avgt       15   809992.553 ±  3443.480   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024  sample      751   200924.475 ±   535.415   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A       1024  sample            194248.704               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A       1024  sample            199491.584               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A       1024  sample            206831.616               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A       1024  sample            209400.627               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A       1024  sample            215471.882               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A       1024  sample            222298.112               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A       1024  sample            222298.112               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A       1024  sample            222298.112               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240  sample      963   156603.955 ±   458.365   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A      10240  sample            149946.368               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A      10240  sample            155189.248               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A      10240  sample            161742.848               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A      10240  sample            164626.432               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A      10240  sample            172155.208               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A      10240  sample            176685.056               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A      10240  sample            176685.056               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A      10240  sample            176685.056               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400  sample     1001   151050.987 ±   479.003   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A     102400  sample            144441.344               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A     102400  sample            149422.080               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A     102400  sample            156499.968               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A     102400  sample            160930.202               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A     102400  sample            168275.476               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A     102400  sample            176682.959               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A     102400  sample            176685.056               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A     102400  sample            176685.056               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576  sample      740   204600.204 ±   553.566   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A    1048576  sample            197656.576               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A    1048576  sample            203292.672               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A    1048576  sample            210501.632               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A    1048576  sample            213909.504               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A    1048576  sample            218890.240               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A    1048576  sample            227540.992               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A    1048576  sample            227540.992               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A    1048576  sample            227540.992               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760  sample      739   204362.354 ±   556.326   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A   10485760  sample            197918.720               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A   10485760  sample            202899.456               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A   10485760  sample            210501.632               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A   10485760  sample            212860.928               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A   10485760  sample            219938.816               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A   10485760  sample            233308.160               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A   10485760  sample            233308.160               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A   10485760  sample            233308.160               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600  sample      751   201275.629 ±   605.967   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A  104857600  sample            194248.704               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A  104857600  sample            199491.584               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A  104857600  sample            207618.048               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A  104857600  sample            211655.066               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A  104857600  sample            218219.151               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A  104857600  sample            224919.552               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A  104857600  sample            224919.552               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A  104857600  sample            224919.552               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024  sample       90  1795674.749 ± 21184.409   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A       1024  sample           1671430.144               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A       1024  sample           1790967.808               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A       1024  sample           1846961.766               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A       1024  sample           1912288.051               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A       1024  sample           2040528.896               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A       1024  sample           2040528.896               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A       1024  sample           2040528.896               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A       1024  sample           2040528.896               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240  sample      150  1027814.195 ± 32445.656   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A      10240  sample            819986.432               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A      10240  sample           1073741.824               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A      10240  sample           1166016.512               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A      10240  sample           1179543.142               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A      10240  sample           1193279.488               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A      10240  sample           1193279.488               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A      10240  sample           1193279.488               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A      10240  sample           1193279.488               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400  sample      150  1008988.761 ± 30173.761   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A     102400  sample            767557.632               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A     102400  sample           1041235.968               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A     102400  sample           1134559.232               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A     102400  sample           1149239.296               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A     102400  sample           1205652.685               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A     102400  sample           1216348.160               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A     102400  sample           1216348.160               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A     102400  sample           1216348.160               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576  sample      150  1055440.678 ± 30322.108   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A    1048576  sample            842006.528               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A    1048576  sample           1083179.008               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A    1048576  sample           1182584.013               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A    1048576  sample           1222639.616               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A    1048576  sample           1252733.747               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A    1048576  sample           1268776.960               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A    1048576  sample           1268776.960               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A    1048576  sample           1268776.960               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760  sample      150  1025423.442 ± 20250.630   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A   10485760  sample            851443.712               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A   10485760  sample           1037041.664               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A   10485760  sample           1122395.750               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A   10485760  sample           1149239.296               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A   10485760  sample           1170168.873               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A   10485760  sample           1172307.968               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A   10485760  sample           1172307.968               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A   10485760  sample           1172307.968               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600  sample      166   940225.252 ± 22576.149   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A  104857600  sample            661651.456               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A  104857600  sample            938475.520               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A  104857600  sample           1094503.629               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A  104857600  sample           1132462.080               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A  104857600  sample           1172832.256               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A  104857600  sample           1207959.552               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A  104857600  sample           1207959.552               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A  104857600  sample           1207959.552               us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A  sample   277078      540.728 ±     0.061   us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.00                                                                        N/A       N/A        N/A  sample               526.336               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.50                                                                        N/A       N/A        N/A  sample               538.624               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.90                                                                        N/A       N/A        N/A  sample               549.888               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.95                                                                        N/A       N/A        N/A  sample               553.984               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.99                                                                        N/A       N/A        N/A  sample               581.632               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.999                                                                       N/A       N/A        N/A  sample               639.919               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.9999                                                                      N/A       N/A        N/A  sample               726.016               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p1.00                                                                        N/A       N/A        N/A  sample              1085.440               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A  sample   229188      653.849 ±     0.102   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.00                                                        N/A       N/A        N/A  sample               644.096               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.50                                                        N/A       N/A        N/A  sample               651.264               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.90                                                        N/A       N/A        N/A  sample               664.576               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.95                                                        N/A       N/A        N/A  sample               668.672               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.99                                                        N/A       N/A        N/A  sample               698.368               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.999                                                       N/A       N/A        N/A  sample               767.806               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.9999                                                      N/A       N/A        N/A  sample              1044.702               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p1.00                                                        N/A       N/A        N/A  sample              3100.672               us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A  sample   257881      581.105 ±     0.414   us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.00                                                                        N/A       N/A        N/A  sample               563.200               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.50                                                                        N/A       N/A        N/A  sample               567.296               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.90                                                                        N/A       N/A        N/A  sample               576.512               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.95                                                                        N/A       N/A        N/A  sample               591.872               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.99                                                                        N/A       N/A        N/A  sample               937.984               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.999                                                                       N/A       N/A        N/A  sample               951.296               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.9999                                                                      N/A       N/A        N/A  sample              1000.725               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p1.00                                                                        N/A       N/A        N/A  sample              1810.432               us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A  sample   280067      534.957 ±     0.077   us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.00                                                                      N/A       N/A        N/A  sample               515.584               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.50                                                                      N/A       N/A        N/A  sample               533.504               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.90                                                                      N/A       N/A        N/A  sample               544.768               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.95                                                                      N/A       N/A        N/A  sample               549.888               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.99                                                                      N/A       N/A        N/A  sample               574.464               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.999                                                                     N/A       N/A        N/A  sample               608.256               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.9999                                                                    N/A       N/A        N/A  sample               743.417               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p1.00                                                                      N/A       N/A        N/A  sample              2732.032               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A  sample      180   885277.764 ±   717.899   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.00                                          N/A       N/A        N/A  sample            879755.264               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.50                                          N/A       N/A        N/A  sample            884998.144               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.90                                          N/A       N/A        N/A  sample            889087.590               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.95                                          N/A       N/A        N/A  sample            891289.600               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.99                                          N/A       N/A        N/A  sample            894634.557               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.999                                         N/A       N/A        N/A  sample            895483.904               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.9999                                        N/A       N/A        N/A  sample            895483.904               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p1.00                                          N/A       N/A        N/A  sample            895483.904               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A  sample      644   235995.543 ±   521.999   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.00                                  N/A       100        N/A  sample            230424.576               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.50                                  N/A       100        N/A  sample            235405.312               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.90                                  N/A       100        N/A  sample            240779.264               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.95                                  N/A       100        N/A  sample            244056.064               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.99                                  N/A       100        N/A  sample            250491.699               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.999                                 N/A       100        N/A  sample            261095.424               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.9999                                N/A       100        N/A  sample            261095.424               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p1.00                                  N/A       100        N/A  sample            261095.424               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A  sample       90  1932665.378 ±  7282.659   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.00                                  N/A      1000        N/A  sample           1887436.800               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.50                                  N/A      1000        N/A  sample           1931476.992               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.90                                  N/A      1000        N/A  sample           1960627.405               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.95                                  N/A      1000        N/A  sample           1966918.861               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.99                                  N/A      1000        N/A  sample           1981808.640               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.999                                 N/A      1000        N/A  sample           1981808.640               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.9999                                N/A      1000        N/A  sample           1981808.640               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p1.00                                  N/A      1000        N/A  sample           1981808.640               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A  sample  3401629        0.728 ±     0.001   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                                521       N/A        N/A  sample                 0.677               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                                521       N/A        N/A  sample                 0.709               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                                521       N/A        N/A  sample                 0.718               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                                521       N/A        N/A  sample                 0.720               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                                521       N/A        N/A  sample                 0.726               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                               521       N/A        N/A  sample                 6.715               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                              521       N/A        N/A  sample                17.744               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                                521       N/A        N/A  sample               485.376               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A  sample  5767643        1.651 ±     0.001   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                               1153       N/A        N/A  sample                 1.606               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                               1153       N/A        N/A  sample                 1.632               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                               1153       N/A        N/A  sample                 1.644               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                               1153       N/A        N/A  sample                 1.648               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                               1153       N/A        N/A  sample                 1.654               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                              1153       N/A        N/A  sample                 7.408               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                             1153       N/A        N/A  sample                18.208               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                               1153       N/A        N/A  sample               740.352               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A  sample  3329612        2.846 ±     0.002   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                               2021       N/A        N/A  sample                 2.772               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                               2021       N/A        N/A  sample                 2.808               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                               2021       N/A        N/A  sample                 2.828               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                               2021       N/A        N/A  sample                 2.836               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                               2021       N/A        N/A  sample                 2.852               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                              2021       N/A        N/A  sample                11.856               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                             2021       N/A        N/A  sample                29.952               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                               2021       N/A        N/A  sample              1402.880               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10  sample  3424338        0.152 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A         10  sample                 0.128               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A         10  sample                 0.142               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A         10  sample                 0.158               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A         10  sample                 0.166               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A         10  sample                 0.170               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A         10  sample                 3.343               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A         10  sample                10.025               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A         10  sample               703.488               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100  sample  3132308        0.796 ±     0.006   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A        100  sample                 0.740               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A        100  sample                 0.772               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A        100  sample                 0.792               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A        100  sample                 0.795               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A        100  sample                 0.808               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A        100  sample                 7.304               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A        100  sample                18.400               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A        100  sample              2772.992               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000  sample  4145870        7.241 ±     0.002   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A       1000  sample                 6.888               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A       1000  sample                 7.056               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A       1000  sample                 7.816               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A       1000  sample                 7.848               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A       1000  sample                10.416               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A       1000  sample                17.312               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A       1000  sample                39.168               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A       1000  sample               470.528               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10  sample  3969585        0.098 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A         10  sample                 0.089               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A         10  sample                 0.094               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A         10  sample                 0.096               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A         10  sample                 0.096               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A         10  sample                 0.106               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A         10  sample                 0.228               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A         10  sample                 8.272               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A         10  sample               218.624               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100  sample  3673704        0.678 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A        100  sample                 0.596               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A        100  sample                 0.656               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A        100  sample                 0.687               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A        100  sample                 0.689               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A        100  sample                 0.696               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A        100  sample                 5.592               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A        100  sample                18.516               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A        100  sample               174.848               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000  sample  2790305        6.734 ±     0.002   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A       1000  sample                 6.144               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A       1000  sample                 6.648               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A       1000  sample                 6.776               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A       1000  sample                 6.928               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A       1000  sample                 9.600               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A       1000  sample                18.528               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A       1000  sample                46.720               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A       1000  sample               245.248               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A  sample    10365    14472.744 ±     3.681   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.00                                  N/A       N/A        N/A  sample             14385.152               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.50                                  N/A       N/A        N/A  sample             14450.688               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.90                                  N/A       N/A        N/A  sample             14516.224               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.95                                  N/A       N/A        N/A  sample             14548.992               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.99                                  N/A       N/A        N/A  sample             14712.832               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.999                                 N/A       N/A        N/A  sample             16936.993               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.9999                                N/A       N/A        N/A  sample             17617.191               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p1.00                                  N/A       N/A        N/A  sample             17629.184               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A  sample   349926      428.281 ±     1.304   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A       100        N/A  sample               400.896               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A       100        N/A  sample               418.304               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A       100        N/A  sample               432.128               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A       100        N/A  sample               437.760               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A       100        N/A  sample               463.360               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A       100        N/A  sample              2793.771               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A       100        N/A  sample             11946.806               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A       100        N/A  sample             23035.904               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A  sample     2402    62683.492 ±   195.575   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A      1000        N/A  sample             60882.944               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A      1000        N/A  sample             61407.232               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A      1000        N/A  sample             65712.947               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A      1000        N/A  sample             68943.872               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A      1000        N/A  sample             74707.108               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A      1000        N/A  sample             85453.046               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A      1000        N/A  sample             88866.816               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A      1000        N/A  sample             88866.816               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A  sample       45  4354992.447 ± 18371.159   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A     10000        N/A  sample           4294967.296               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A     10000        N/A  sample           4362076.160               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A     10000        N/A  sample           4390597.427               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A     10000        N/A  sample           4412407.808               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A     10000        N/A  sample           4445962.240               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A     10000        N/A  sample           4445962.240               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A     10000        N/A  sample           4445962.240               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A     10000        N/A  sample           4445962.240               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A  sample    50042     2995.407 ±     0.277   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.00             N/A       N/A        N/A  sample              2969.600               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.50             N/A       N/A        N/A  sample              2994.176               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.90             N/A       N/A        N/A  sample              3010.560               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.95             N/A       N/A        N/A  sample              3026.944               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.99             N/A       N/A        N/A  sample              3051.520               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.999            N/A       N/A        N/A  sample              3182.592               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.9999           N/A       N/A        N/A  sample              3428.317               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p1.00             N/A       N/A        N/A  sample              3555.328               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A  sample     4770    31484.058 ±     3.370   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.00                     N/A       N/A        N/A  sample             31391.744               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.50                     N/A       N/A        N/A  sample             31490.048               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.90                     N/A       N/A        N/A  sample             31522.816               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.95                     N/A       N/A        N/A  sample             31555.584               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.99                     N/A       N/A        N/A  sample             31686.656               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.999                    N/A       N/A        N/A  sample             32505.856               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.9999                   N/A       N/A        N/A  sample             33816.576               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p1.00                     N/A       N/A        N/A  sample             33816.576               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A  sample       94  1760045.971 ±   356.472   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.00                                                 N/A       N/A        N/A  sample           1757413.376               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.50                                                 N/A       N/A        N/A  sample           1759510.528               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.90                                                 N/A       N/A        N/A  sample           1761607.680               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.95                                                 N/A       N/A        N/A  sample           1761607.680               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.99                                                 N/A       N/A        N/A  sample           1763704.832               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.999                                                N/A       N/A        N/A  sample           1763704.832               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.9999                                               N/A       N/A        N/A  sample           1763704.832               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p1.00                                                 N/A       N/A        N/A  sample           1763704.832               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A  sample  5666213        0.062 ±     0.001   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.00                       N/A       N/A        N/A  sample                 0.047               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.50                       N/A       N/A        N/A  sample                 0.059               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.90                       N/A       N/A        N/A  sample                 0.065               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.95                       N/A       N/A        N/A  sample                 0.066               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.99                       N/A       N/A        N/A  sample                 0.077               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.999                      N/A       N/A        N/A  sample                 0.131               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.9999                     N/A       N/A        N/A  sample                 5.568               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p1.00                       N/A       N/A        N/A  sample               317.440               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A  sample    14177    10578.402 ±     1.505   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.00                                   N/A       N/A        N/A  sample             10174.464               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.50                                   N/A       N/A        N/A  sample             10584.064               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.90                                   N/A       N/A        N/A  sample             10600.448               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.95                                   N/A       N/A        N/A  sample             10616.832               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.99                                   N/A       N/A        N/A  sample             10698.752               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.999                                  N/A       N/A        N/A  sample             10813.440               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.9999                                 N/A       N/A        N/A  sample             11263.666               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p1.00                                   N/A       N/A        N/A  sample             11386.880               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A  sample     4165    36043.282 ±   151.167   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.00                                             N/A       N/A        N/A  sample             30015.488               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.50                                             N/A       N/A        N/A  sample             35586.048               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.90                                             N/A       N/A        N/A  sample             39911.424               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.95                                             N/A       N/A        N/A  sample             41943.040               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.99                                             N/A       N/A        N/A  sample             42074.112               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.999                                            N/A       N/A        N/A  sample             46760.329               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.9999                                           N/A       N/A        N/A  sample             54591.488               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p1.00                                             N/A       N/A        N/A  sample             54591.488               us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A  sample     3882    38676.302 ±   359.805   us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.00                                                              N/A       N/A        N/A  sample             37027.840               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.50                                                              N/A       N/A        N/A  sample             37224.448               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.90                                                              N/A       N/A        N/A  sample             37421.056               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.95                                                              N/A       N/A        N/A  sample             44361.318               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.99                                                              N/A       N/A        N/A  sample             78927.626               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.999                                                             N/A       N/A        N/A  sample             92598.174               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.9999                                                            N/A       N/A        N/A  sample             97648.640               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p1.00                                                              N/A       N/A        N/A  sample             97648.640               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A  sample     8197    18303.213 ±   238.794   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.00                                                            N/A       N/A        N/A  sample             16187.392               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.50                                                            N/A       N/A        N/A  sample             16449.536               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.90                                                            N/A       N/A        N/A  sample             17832.346               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.95                                                            N/A       N/A        N/A  sample             34799.616               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.99                                                            N/A       N/A        N/A  sample             50003.968               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.999                                                           N/A       N/A        N/A  sample             59140.735               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.9999                                                          N/A       N/A        N/A  sample             65142.784               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p1.00                                                            N/A       N/A        N/A  sample             65142.784               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A  sample    10261    14619.291 ±    32.856   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.00                                                                N/A       N/A        N/A  sample             14237.696               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.50                                                                N/A       N/A        N/A  sample             14467.072               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.90                                                                N/A       N/A        N/A  sample             14598.144               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.95                                                                N/A       N/A        N/A  sample             14761.984               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.99                                                                N/A       N/A        N/A  sample             19042.796               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.999                                                               N/A       N/A        N/A  sample             28619.637               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.9999                                                              N/A       N/A        N/A  sample             33762.489               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p1.00                                                                N/A       N/A        N/A  sample             33816.576               us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A  sample     4350    34499.544 ±    71.624   us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.00                                                                      N/A       N/A        N/A  sample             32964.608               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.50                                                                      N/A       N/A        N/A  sample             34537.472               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.90                                                                      N/A       N/A        N/A  sample             35192.832               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.95                                                                      N/A       N/A        N/A  sample             35520.512               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.99                                                                      N/A       N/A        N/A  sample             40402.289               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.999                                                                     N/A       N/A        N/A  sample             53178.335               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.9999                                                                    N/A       N/A        N/A  sample             54788.096               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p1.00                                                                      N/A       N/A        N/A  sample             54788.096               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A  sample   189362      791.497 ±     3.021   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A        10        N/A  sample               720.896               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A        10        N/A  sample               762.880               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A        10        N/A  sample               784.384               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A        10        N/A  sample               795.648               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A        10        N/A  sample               845.824               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A        10        N/A  sample              7494.222               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A        10        N/A  sample             14445.684               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A        10        N/A  sample             28573.696               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A  sample    18364     8165.726 ±    31.787   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A       100        N/A  sample              7692.288               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A       100        N/A  sample              7880.704               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A       100        N/A  sample              8044.544               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A       100        N/A  sample              9928.704               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A       100        N/A  sample             15450.112               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A       100        N/A  sample             22966.764               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A       100        N/A  sample             29916.824               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A       100        N/A  sample             35782.656               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A  sample     1374   109663.764 ±   300.934   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A      1000        N/A  sample            104333.312               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A      1000        N/A  sample            108789.760               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A      1000        N/A  sample            114688.000               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A      1000        N/A  sample            116785.152               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A      1000        N/A  sample            122683.392               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A      1000        N/A  sample            128139.264               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A      1000        N/A  sample            128974.848               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A      1000        N/A  sample            128974.848               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A  sample      195   819066.912 ±  6397.930   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.00                        N/A       N/A        N/A  sample            749731.840               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.50                        N/A       N/A        N/A  sample            819986.432               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.90                        N/A       N/A        N/A  sample            851863.142               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.95                        N/A       N/A        N/A  sample            863187.763               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.99                        N/A       N/A        N/A  sample            874554.327               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.999                       N/A       N/A        N/A  sample            875560.960               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.9999                      N/A       N/A        N/A  sample            875560.960               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p1.00                        N/A       N/A        N/A  sample            875560.960               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024      ss       15   202469.546 ±  5717.876   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240      ss       15   158282.765 ±  5227.133   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400      ss       15   154778.581 ±  6409.192   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576      ss       15   203004.934 ±  2158.800   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760      ss       15   205484.481 ±  6917.069   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600      ss       15   203109.150 ±  7227.421   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024      ss       15  1743756.862 ± 44332.365   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240      ss       15   881040.661 ± 10251.748   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400      ss       15   864936.960 ± 18660.109   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576      ss       15   915398.864 ± 15432.283   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760      ss       15  1005379.464 ± 16551.665   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600      ss       15   842556.686 ± 14182.353   us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A      ss       15      589.997 ±    25.665   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A      ss       15      687.759 ±    17.122   us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A      ss       15      946.875 ±     6.637   us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A      ss       15      604.281 ±    26.594   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A      ss       15   889344.461 ± 10197.954   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A      ss       15   258514.055 ±  5026.390   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A      ss       15  1938717.342 ± 22620.509   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A      ss       15       13.032 ±    14.058   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A      ss       15       16.428 ±    33.972   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A      ss       15        8.388 ±     3.377   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10      ss       15        9.520 ±    10.535   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100      ss       15       16.275 ±     7.578   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000      ss       15      108.279 ±    34.137   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10      ss       15        6.573 ±     1.203   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100      ss       15       20.959 ±    18.204   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000      ss       15      103.535 ±    28.413   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A      ss       15    14802.164 ±   504.733   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A      ss       15     1300.986 ±  1220.136   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A      ss       15    41993.695 ±   101.688   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A      ss       15  6746929.849 ± 20481.984   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A      ss       15     3007.054 ±    20.121   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A      ss       15    31493.491 ±    36.703   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A      ss       15  1762037.010 ±  1391.503   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A      ss       15       13.303 ±     2.967   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A      ss       15     8865.055 ±    42.383   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A      ss       15    35483.793 ±  4621.133   us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A      ss       15    37195.084 ±    89.892   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A      ss       15    15864.851 ±   127.204   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A      ss       15    15070.498 ±  1008.498   us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A      ss       15    34753.243 ±  1554.499   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A      ss       15     1005.476 ±    87.342   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A      ss       15     8764.432 ±   465.117   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A      ss       15   108897.340 ±   548.420   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A      ss       15   712919.959 ±  9224.941   us/op
