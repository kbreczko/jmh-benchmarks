# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 512)

# Run progress: 39.44% complete, ETA 02:25:24
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 2936012
4989831.509 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 2936012
5117688.311 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 2936012
5270865.696 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 2936012
5172169.159 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 2936012
5218626.239 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 2936012
5247071.882 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 2936012
5194749.172 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 2936012
5185659.681 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 2936012
5148453.926 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 2936012
5210429.484 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 2936012
5183456.564 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 2936012
5164995.349 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 2936012
5180806.704 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 2936012
5225593.615 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 2936012
5241223.375 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 2936012
5210941.701 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 2936012
5148490.303 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 2936012
5249373.382 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 2936012
5295841.907 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 2936012
5179068.334 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  5204410.358 ±(99.9%) 44244.206 us/op [Average]
  (min, avg, max) = (5148453.926, 5204410.358, 5295841.907), stdev = 41386.058
  CI (99.9%): [5160166.153, 5248654.564] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 40.85% complete, ETA 02:22:18
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 1468006
3034800.652 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 1468006
2646295.244 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 1468006
2782394.689 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 1468006
2832247.382 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 1468006
1958124.627 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 1468006
2061291.873 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 1468006
1918534.983 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 1468006
1948428.466 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 1468006
1933580.432 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 1468006
2031430.958 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 1468006
2004712.490 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 1468006
1937121.756 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 1468006
1936488.055 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 1468006
1917396.725 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 1468006
1945183.982 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 1468006
1931113.905 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 1468006
1937638.048 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 1468006
1910247.427 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 1468006
1924546.468 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 1468006
1970227.261 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1953862.855 ±(99.9%) 47492.923 us/op [Average]
  (min, avg, max) = (1910247.427, 1953862.855, 2061291.873), stdev = 44424.909
  CI (99.9%): [1906369.932, 2001355.778] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 2048)

# Run progress: 42.25% complete, ETA 02:19:32
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 734003
3016954.815 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 734003
2137752.186 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 734003
1977019.621 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 734003
1909616.858 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 734003
1988196.585 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 734003
1927284.504 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 734003
1916926.720 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 734003
1926416.749 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 734003
1899222.817 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 734003
1977592.611 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 734003
1902703.079 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 734003
1901860.364 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 734003
1921594.536 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 734003
1908045.356 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 734003
1979984.990 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 734003
1911093.475 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 734003
1982445.275 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 734003
1910109.880 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 734003
1910348.590 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 734003
1922014.094 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1926509.536 ±(99.9%) 30987.374 us/op [Average]
  (min, avg, max) = (1899222.817, 1926509.536, 1982445.275), stdev = 28985.609
  CI (99.9%): [1895522.162, 1957496.910] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 43.66% complete, ETA 02:16:45
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 146800
2353777.392 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 146800
2374896.591 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 146800
2143296.766 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 146800
1858955.297 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 146800
1825258.771 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 146800
1657049.561 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 146800
1678995.893 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 146800
1646614.795 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 146800
1662274.035 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 146800
1711947.084 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 146800
1702745.432 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 146800
1683942.611 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 146800
1671577.902 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 146800
1674125.547 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 146800
1696748.383 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 146800
1695823.102 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 146800
1705308.028 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 146800
1719987.893 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 146800
1722031.169 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 146800
1702925.223 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1688806.444 ±(99.9%) 24768.280 us/op [Average]
  (min, avg, max) = (1646614.795, 1688806.444, 1722031.169), stdev = 23168.264
  CI (99.9%): [1664038.164, 1713574.724] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 45.07% complete, ETA 02:13:34
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 14680
1645648.740 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 14680
1619143.199 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 14680
1662119.640 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 14680
1642006.313 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 14680
1652573.693 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 14680
1661218.523 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 14680
1645414.145 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 14680
1678418.186 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 14680
1649141.979 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 14680
1672792.556 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 14680
1629623.090 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 14680
1641974.932 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 14680
1672024.910 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 14680
1675645.010 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 14680
1698415.465 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 14680
1655688.780 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 14680
1663233.070 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 14680
1668085.485 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 14680
1673463.594 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 14680
1668841.347 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1663598.738 ±(99.9%) 18311.342 us/op [Average]
  (min, avg, max) = (1629623.090, 1663598.738, 1698415.465), stdev = 17128.440
  CI (99.9%): [1645287.396, 1681910.080] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 46.48% complete, ETA 02:10:25
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 1433
<failure>

java.lang.OutOfMemoryError: Java heap space
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap(AllocationBenchmark.java:34)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_avgt_jmhStub(AllocationBenchmark_fillHeap_jmhTest.java:269)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_AverageTime(AllocationBenchmark_fillHeap_jmhTest.java:212)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 2097152)

# Run progress: 47.89% complete, ETA 02:03:17
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 716
<failure>

java.lang.OutOfMemoryError: Java heap space
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap(AllocationBenchmark.java:34)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_avgt_jmhStub(AllocationBenchmark_fillHeap_jmhTest.java:269)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_AverageTime(AllocationBenchmark_fillHeap_jmhTest.java:212)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 49.30% complete, ETA 01:56:34
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 143
1069686.488 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 143
1054734.971 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 143
1052444.698 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 143
1071463.444 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 143
1063049.823 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 143
1069085.838 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 143
1067509.711 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 143
1060908.295 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 143
1068713.728 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 143
1059044.986 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 143
1068073.165 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 143
1069112.033 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 143
1076529.516 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 143
1074767.226 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 143
1067693.839 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 143
1068286.037 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 143
1066686.059 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 143
1057580.253 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 143
1115359.118 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 143
1285678.516 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1085001.888 ±(99.9%) 61048.576 us/op [Average]
  (min, avg, max) = (1057580.253, 1085001.888, 1285678.516), stdev = 57104.876
  CI (99.9%): [1023953.312, 1146050.464] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 50.70% complete, ETA 01:53:40
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 14
1051519.072 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 14
1053062.376 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 14
1064183.347 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 14
1052043.519 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 14
1062033.625 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 14
1049704.827 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 14
1039136.966 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 14
1042817.566 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 14
1052017.109 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 14
1054011.339 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 14
1048506.081 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 14
1054491.022 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 14
1045938.317 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 14
1053969.839 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 14
1055865.388 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 14
1053064.392 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 14
1062415.967 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 14
1045066.080 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 14
1039064.432 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 14
1041959.935 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1049201.951 ±(99.9%) 7236.447 us/op [Average]
  (min, avg, max) = (1039064.432, 1049201.951, 1062415.967), stdev = 6768.977
  CI (99.9%): [1041965.504, 1056438.397] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 52.11% complete, ETA 01:50:40
# Fork: 1 of 1
# Warmup Iteration   1: 383.355 us/op
# Warmup Iteration   2: 383.635 us/op
# Warmup Iteration   3: 382.414 us/op
# Warmup Iteration   4: 384.369 us/op
# Warmup Iteration   5: 383.211 us/op
Iteration   1: 384.228 us/op
Iteration   2: 383.323 us/op
Iteration   3: 382.703 us/op
Iteration   4: 382.728 us/op
Iteration   5: 383.095 us/op
Iteration   6: 383.532 us/op
Iteration   7: 383.676 us/op
Iteration   8: 383.300 us/op
Iteration   9: 382.336 us/op
Iteration  10: 383.286 us/op
Iteration  11: 383.400 us/op
Iteration  12: 383.204 us/op
Iteration  13: 383.216 us/op
Iteration  14: 383.266 us/op
Iteration  15: 383.266 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  383.237 ±(99.9%) 0.468 us/op [Average]
  (min, avg, max) = (382.336, 383.237, 384.228), stdev = 0.438
  CI (99.9%): [382.769, 383.705] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 53.52% complete, ETA 01:47:31
# Fork: 1 of 1
# Warmup Iteration   1: 170.385 us/op
# Warmup Iteration   2: 170.028 us/op
# Warmup Iteration   3: 169.154 us/op
# Warmup Iteration   4: 169.405 us/op
# Warmup Iteration   5: 168.702 us/op
Iteration   1: 170.845 us/op
Iteration   2: 169.955 us/op
Iteration   3: 169.955 us/op
Iteration   4: 169.440 us/op
Iteration   5: 170.304 us/op
Iteration   6: 169.700 us/op
Iteration   7: 169.466 us/op
Iteration   8: 170.642 us/op
Iteration   9: 168.612 us/op
Iteration  10: 169.557 us/op
Iteration  11: 168.494 us/op
Iteration  12: 168.333 us/op
Iteration  13: 169.337 us/op
Iteration  14: 169.796 us/op
Iteration  15: 169.680 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  169.608 ±(99.9%) 0.775 us/op [Average]
  (min, avg, max) = (168.333, 169.608, 170.845), stdev = 0.725
  CI (99.9%): [168.833, 170.383] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 56.34% complete, ETA 01:41:10
# Fork: 1 of 1
# Warmup Iteration   1: 184.461 us/op
# Warmup Iteration   2: 183.417 us/op
# Warmup Iteration   3: 184.113 us/op
# Warmup Iteration   4: 185.073 us/op
# Warmup Iteration   5: 184.006 us/op
Iteration   1: 185.373 us/op
Iteration   2: 184.334 us/op
Iteration   3: 184.342 us/op
Iteration   4: 185.252 us/op
Iteration   5: 184.738 us/op
Iteration   6: 183.366 us/op
Iteration   7: 183.067 us/op
Iteration   8: 184.226 us/op
Iteration   9: 184.376 us/op
Iteration  10: 183.954 us/op
Iteration  11: 185.375 us/op
Iteration  12: 185.601 us/op
Iteration  13: 184.415 us/op
Iteration  14: 184.995 us/op
Iteration  15: 183.832 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  184.483 ±(99.9%) 0.800 us/op [Average]
  (min, avg, max) = (183.067, 184.483, 185.601), stdev = 0.748
  CI (99.9%): [183.683, 185.283] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 57.75% complete, ETA 01:37:59
# Fork: 1 of 1
# Warmup Iteration   1: 1229546.610 us/op
# Warmup Iteration   2: 1223558.034 us/op
# Warmup Iteration   3: 1225492.684 us/op
# Warmup Iteration   4: 1225944.422 us/op
# Warmup Iteration   5: 1233581.575 us/op
Iteration   1: 1225795.947 us/op
Iteration   2: 1228664.930 us/op
Iteration   3: 1231174.023 us/op
Iteration   4: 1231395.378 us/op
Iteration   5: 1231490.607 us/op
Iteration   6: 1227360.812 us/op
Iteration   7: 1222035.497 us/op
Iteration   8: 1235174.744 us/op
Iteration   9: 1228153.596 us/op
Iteration  10: 1225451.715 us/op
Iteration  11: 1226331.585 us/op
Iteration  12: 1226558.251 us/op
Iteration  13: 1232971.431 us/op
Iteration  14: 1228514.402 us/op
Iteration  15: 1263510.818 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  1230972.249 ±(99.9%) 10267.641 us/op [Average]
  (min, avg, max) = (1222035.497, 1230972.249, 1263510.818), stdev = 9604.358
  CI (99.9%): [1220704.608, 1241239.890] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 59.15% complete, ETA 01:35:01
# Fork: 1 of 1
# Warmup Iteration   1: 1445674.522 us/op
# Warmup Iteration   2: 1458740.482 us/op
# Warmup Iteration   3: 1415147.702 us/op
# Warmup Iteration   4: 1471117.988 us/op
# Warmup Iteration   5: 1318475.119 us/op
Iteration   1: 1310049.416 us/op
Iteration   2: 1352557.205 us/op
Iteration   3: 1310507.592 us/op
Iteration   4: 957145.595 us/op
Iteration   5: 826671.041 us/op
Iteration   6: 793785.927 us/op
Iteration   7: 789589.719 us/op
Iteration   8: 794361.840 us/op
Iteration   9: 788462.761 us/op
Iteration  10: 777352.839 us/op
Iteration  11: 773561.490 us/op
Iteration  12: 766367.852 us/op
Iteration  13: 778142.407 us/op
Iteration  14: 799014.563 us/op
Iteration  15: 786300.277 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  906924.702 ±(99.9%) 236184.282 us/op [Average]
  (min, avg, max) = (766367.852, 906924.702, 1352557.205), stdev = 220926.924
  CI (99.9%): [670740.419, 1143108.984] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 60.56% complete, ETA 01:31:53
# Fork: 1 of 1
# Warmup Iteration   1: 19813373.807 us/op
# Warmup Iteration   2: 19895668.981 us/op
# Warmup Iteration   3: 19589282.234 us/op
# Warmup Iteration   4: 19638621.014 us/op
# Warmup Iteration   5: 20509204.811 us/op
Iteration   1: 20617589.014 us/op
Iteration   2: 20507110.509 us/op
Iteration   3: 20101806.585 us/op
Iteration   4: 20089071.526 us/op
Iteration   5: 20570904.602 us/op
Iteration   6: 20196353.204 us/op
Iteration   7: 20872672.319 us/op
Iteration   8: 20485393.572 us/op
Iteration   9: 20821751.810 us/op
Iteration  10: 20092028.254 us/op
Iteration  11: 20021639.562 us/op
Iteration  12: 19807950.216 us/op
Iteration  13: 20761886.990 us/op
Iteration  14: 20362508.480 us/op
Iteration  15: 20009611.139 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  20354551.852 ±(99.9%) 357547.202 us/op [Average]
  (min, avg, max) = (19807950.216, 20354551.852, 20872672.319), stdev = 334449.875
  CI (99.9%): [19997004.650, 20712099.055] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 61.97% complete, ETA 01:30:44
# Fork: 1 of 1
# Warmup Iteration   1: 1.877 us/op
# Warmup Iteration   2: 1.872 us/op
# Warmup Iteration   3: 1.871 us/op
# Warmup Iteration   4: 1.869 us/op
# Warmup Iteration   5: 1.871 us/op
Iteration   1: 1.869 us/op
Iteration   2: 1.871 us/op
Iteration   3: 1.873 us/op
Iteration   4: 1.871 us/op
Iteration   5: 1.870 us/op
Iteration   6: 1.870 us/op
Iteration   7: 1.872 us/op
Iteration   8: 1.870 us/op
Iteration   9: 1.871 us/op
Iteration  10: 1.870 us/op
Iteration  11: 1.871 us/op
Iteration  12: 1.870 us/op
Iteration  13: 1.871 us/op
Iteration  14: 1.871 us/op
Iteration  15: 1.871 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  1.871 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (1.869, 1.871, 1.873), stdev = 0.001
  CI (99.9%): [1.870, 1.872] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 63.38% complete, ETA 01:27:23
# Fork: 1 of 1
# Warmup Iteration   1: 5.251 us/op
# Warmup Iteration   2: 5.243 us/op
# Warmup Iteration   3: 5.253 us/op
# Warmup Iteration   4: 5.234 us/op
# Warmup Iteration   5: 5.247 us/op
Iteration   1: 5.243 us/op
Iteration   2: 5.222 us/op
Iteration   3: 5.250 us/op
Iteration   4: 5.238 us/op
Iteration   5: 5.224 us/op
Iteration   6: 5.257 us/op
Iteration   7: 5.254 us/op
Iteration   8: 5.226 us/op
Iteration   9: 5.234 us/op
Iteration  10: 5.241 us/op
Iteration  11: 5.225 us/op
Iteration  12: 5.231 us/op
Iteration  13: 5.231 us/op
Iteration  14: 5.231 us/op
Iteration  15: 5.209 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  5.235 ±(99.9%) 0.014 us/op [Average]
  (min, avg, max) = (5.209, 5.235, 5.257), stdev = 0.013
  CI (99.9%): [5.220, 5.249] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 64.79% complete, ETA 01:24:01
# Fork: 1 of 1
# Warmup Iteration   1: 9.141 us/op
# Warmup Iteration   2: 9.178 us/op
# Warmup Iteration   3: 9.157 us/op
# Warmup Iteration   4: 9.202 us/op
# Warmup Iteration   5: 9.219 us/op
Iteration   1: 9.147 us/op
Iteration   2: 9.122 us/op
Iteration   3: 9.145 us/op
Iteration   4: 9.166 us/op
Iteration   5: 9.144 us/op
Iteration   6: 9.158 us/op
Iteration   7: 9.145 us/op
Iteration   8: 9.160 us/op
Iteration   9: 9.158 us/op
Iteration  10: 9.161 us/op
Iteration  11: 9.154 us/op
Iteration  12: 9.146 us/op
Iteration  13: 9.159 us/op
Iteration  14: 9.128 us/op
Iteration  15: 9.136 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  9.149 ±(99.9%) 0.014 us/op [Average]
  (min, avg, max) = (9.122, 9.149, 9.166), stdev = 0.013
  CI (99.9%): [9.135, 9.162] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 76.06% complete, ETA 00:57:08
# Fork: 1 of 1
# Warmup Iteration   1: 370.522 us/op
# Warmup Iteration   2: 363.579 us/op
# Warmup Iteration   3: 365.560 us/op
# Warmup Iteration   4: 364.413 us/op
# Warmup Iteration   5: 363.830 us/op
Iteration   1: 362.551 us/op
Iteration   2: 362.920 us/op
Iteration   3: 363.653 us/op
Iteration   4: 365.995 us/op
Iteration   5: 364.446 us/op
Iteration   6: 367.282 us/op
Iteration   7: 366.415 us/op
Iteration   8: 366.126 us/op
Iteration   9: 364.934 us/op
Iteration  10: 363.054 us/op
Iteration  11: 361.726 us/op
Iteration  12: 360.637 us/op
Iteration  13: 362.209 us/op
Iteration  14: 365.592 us/op
Iteration  15: 364.764 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  364.154 ±(99.9%) 2.078 us/op [Average]
  (min, avg, max) = (360.637, 364.154, 367.282), stdev = 1.944
  CI (99.9%): [362.075, 366.232] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 77.46% complete, ETA 00:53:46
# Fork: 1 of 1
# Warmup Iteration   1: 37474.429 us/op
# Warmup Iteration   2: 37115.723 us/op
# Warmup Iteration   3: 36465.974 us/op
# Warmup Iteration   4: 36420.586 us/op
# Warmup Iteration   5: 36458.870 us/op
Iteration   1: 36585.130 us/op
Iteration   2: 36432.027 us/op
Iteration   3: 36595.458 us/op
Iteration   4: 36709.216 us/op
Iteration   5: 37014.388 us/op
Iteration   6: 36407.008 us/op
Iteration   7: 36524.929 us/op
Iteration   8: 36699.401 us/op
Iteration   9: 36636.772 us/op
Iteration  10: 36877.698 us/op
Iteration  11: 36599.726 us/op
Iteration  12: 36413.665 us/op
Iteration  13: 36550.212 us/op
Iteration  14: 36810.104 us/op
Iteration  15: 36702.801 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  36637.236 ±(99.9%) 183.939 us/op [Average]
  (min, avg, max) = (36407.008, 36637.236, 37014.388), stdev = 172.056
  CI (99.9%): [36453.297, 36821.174] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 78.87% complete, ETA 00:50:25
# Fork: 1 of 1
# Warmup Iteration   1: 3683536.900 us/op
# Warmup Iteration   2: 3635225.098 us/op
# Warmup Iteration   3: 3650456.747 us/op
# Warmup Iteration   4: 3658715.593 us/op
# Warmup Iteration   5: 3658887.196 us/op
Iteration   1: 3675162.660 us/op
Iteration   2: 3621839.296 us/op
Iteration   3: 3662857.252 us/op
Iteration   4: 3623569.997 us/op
Iteration   5: 3694607.546 us/op
Iteration   6: 3661319.338 us/op
Iteration   7: 3692784.460 us/op
Iteration   8: 3618307.621 us/op
Iteration   9: 3728827.429 us/op
Iteration  10: 3631513.630 us/op
Iteration  11: 3653064.629 us/op
Iteration  12: 3682606.324 us/op
Iteration  13: 3648905.495 us/op
Iteration  14: 3619950.827 us/op
Iteration  15: 3653496.946 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  3657920.897 ±(99.9%) 34813.434 us/op [Average]
  (min, avg, max) = (3618307.621, 3657920.897, 3728827.429), stdev = 32564.508
  CI (99.9%): [3623107.463, 3692734.331] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 80.28% complete, ETA 00:47:08
# Fork: 1 of 1
# Warmup Iteration   1: 1909.460 us/op
# Warmup Iteration   2: 1902.040 us/op
# Warmup Iteration   3: 1903.427 us/op
# Warmup Iteration   4: 1899.304 us/op
# Warmup Iteration   5: 1901.139 us/op
Iteration   1: 1902.889 us/op
Iteration   2: 1906.243 us/op
Iteration   3: 1904.005 us/op
Iteration   4: 1905.339 us/op
Iteration   5: 1900.343 us/op
Iteration   6: 1903.607 us/op
Iteration   7: 1903.255 us/op
Iteration   8: 1903.341 us/op
Iteration   9: 1901.384 us/op
Iteration  10: 1904.288 us/op
Iteration  11: 1901.814 us/op
Iteration  12: 1900.078 us/op
Iteration  13: 1902.718 us/op
Iteration  14: 1903.336 us/op
Iteration  15: 1903.727 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  1903.091 ±(99.9%) 1.794 us/op [Average]
  (min, avg, max) = (1900.078, 1903.091, 1906.243), stdev = 1.678
  CI (99.9%): [1901.297, 1904.885] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 81.69% complete, ETA 00:43:46
# Fork: 1 of 1
# Warmup Iteration   1: 47134.533 us/op
# Warmup Iteration   2: 47001.667 us/op
# Warmup Iteration   3: 47052.754 us/op
# Warmup Iteration   4: 47056.083 us/op
# Warmup Iteration   5: 46989.785 us/op
Iteration   1: 47001.185 us/op
Iteration   2: 46978.024 us/op
Iteration   3: 46978.784 us/op
Iteration   4: 46968.814 us/op
Iteration   5: 46979.527 us/op
Iteration   6: 47019.317 us/op
Iteration   7: 46987.853 us/op
Iteration   8: 47010.319 us/op
Iteration   9: 46974.699 us/op
Iteration  10: 46939.954 us/op
Iteration  11: 47055.025 us/op
Iteration  12: 46985.621 us/op
Iteration  13: 46959.834 us/op
Iteration  14: 46977.724 us/op
Iteration  15: 46961.571 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  46985.217 ±(99.9%) 29.612 us/op [Average]
  (min, avg, max) = (46939.954, 46985.217, 47055.025), stdev = 27.699
  CI (99.9%): [46955.604, 47014.829] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 83.10% complete, ETA 00:40:24
# Fork: 1 of 1
# Warmup Iteration   1: 1725728.251 us/op
# Warmup Iteration   2: 1715208.579 us/op
# Warmup Iteration   3: 1714874.382 us/op
# Warmup Iteration   4: 1714966.609 us/op
# Warmup Iteration   5: 1714671.679 us/op
Iteration   1: 1714983.105 us/op
Iteration   2: 1716807.517 us/op
Iteration   3: 1715854.676 us/op
Iteration   4: 1714320.165 us/op
Iteration   5: 1715781.765 us/op
Iteration   6: 1716250.154 us/op
Iteration   7: 1713473.128 us/op
Iteration   8: 1714188.844 us/op
Iteration   9: 1715994.043 us/op
Iteration  10: 1717356.865 us/op
Iteration  11: 1715330.540 us/op
Iteration  12: 1716176.728 us/op
Iteration  13: 1715852.012 us/op
Iteration  14: 1713303.066 us/op
Iteration  15: 1714358.358 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  1715335.398 ±(99.9%) 1277.456 us/op [Average]
  (min, avg, max) = (1713303.066, 1715335.398, 1717356.865), stdev = 1194.933
  CI (99.9%): [1714057.941, 1716612.854] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 84.51% complete, ETA 00:37:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.505 us/op
# Warmup Iteration   2: 0.502 us/op
# Warmup Iteration   3: 0.505 us/op
# Warmup Iteration   4: 0.504 us/op
# Warmup Iteration   5: 0.504 us/op
Iteration   1: 0.505 us/op
Iteration   2: 0.503 us/op
Iteration   3: 0.505 us/op
Iteration   4: 0.504 us/op
Iteration   5: 0.505 us/op
Iteration   6: 0.505 us/op
Iteration   7: 0.504 us/op
Iteration   8: 0.505 us/op
Iteration   9: 0.503 us/op
Iteration  10: 0.504 us/op
Iteration  11: 0.503 us/op
Iteration  12: 0.500 us/op
Iteration  13: 0.500 us/op
Iteration  14: 0.500 us/op
Iteration  15: 0.518 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  0.504 ±(99.9%) 0.004 us/op [Average]
  (min, avg, max) = (0.500, 0.504, 0.518), stdev = 0.004
  CI (99.9%): [0.500, 0.509] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 85.92% complete, ETA 00:33:41
# Fork: 1 of 1
# Warmup Iteration   1: 8430.515 us/op
# Warmup Iteration   2: 8361.779 us/op
# Warmup Iteration   3: 8363.063 us/op
# Warmup Iteration   4: 8365.006 us/op
# Warmup Iteration   5: 8371.004 us/op
Iteration   1: 8361.019 us/op
Iteration   2: 8373.842 us/op
Iteration   3: 8366.548 us/op
Iteration   4: 8377.306 us/op
Iteration   5: 8372.009 us/op
Iteration   6: 8371.950 us/op
Iteration   7: 8365.738 us/op
Iteration   8: 8363.750 us/op
Iteration   9: 8356.575 us/op
Iteration  10: 8371.594 us/op
Iteration  11: 8368.729 us/op
Iteration  12: 8370.899 us/op
Iteration  13: 8360.927 us/op
Iteration  14: 8358.671 us/op
Iteration  15: 8367.045 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  8367.107 ±(99.9%) 6.420 us/op [Average]
  (min, avg, max) = (8356.575, 8367.107, 8377.306), stdev = 6.005
  CI (99.9%): [8360.687, 8373.527] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 87.32% complete, ETA 00:30:19
# Fork: 1 of 1
# Warmup Iteration   1: 34158.658 us/op
# Warmup Iteration   2: 34235.570 us/op
# Warmup Iteration   3: 40299.383 us/op
# Warmup Iteration   4: 35073.178 us/op
# Warmup Iteration   5: 38355.768 us/op
Iteration   1: 35097.691 us/op
Iteration   2: 35744.191 us/op
Iteration   3: 32596.830 us/op
Iteration   4: 38753.889 us/op
Iteration   5: 33588.378 us/op
Iteration   6: 38213.123 us/op
Iteration   7: 33367.578 us/op
Iteration   8: 39988.486 us/op
Iteration   9: 43161.229 us/op
Iteration  10: 37821.166 us/op
Iteration  11: 36228.757 us/op
Iteration  12: 37531.755 us/op
Iteration  13: 34418.449 us/op
Iteration  14: 34427.423 us/op
Iteration  15: 36150.136 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  36472.606 ±(99.9%) 3027.019 us/op [Average]
  (min, avg, max) = (32596.830, 36472.606, 43161.229), stdev = 2831.475
  CI (99.9%): [33445.587, 39499.624] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 88.73% complete, ETA 00:26:57
# Fork: 1 of 1
# Warmup Iteration   1: 242389.613 us/op
# Warmup Iteration   2: 244356.638 us/op
# Warmup Iteration   3: 248422.753 us/op
# Warmup Iteration   4: 226919.537 us/op
# Warmup Iteration   5: 201400.314 us/op
Iteration   1: 228033.299 us/op
Iteration   2: 209707.546 us/op
Iteration   3: 211904.649 us/op
Iteration   4: 214372.889 us/op
Iteration   5: 241719.170 us/op
Iteration   6: 226695.881 us/op
Iteration   7: 202302.725 us/op
Iteration   8: 213250.493 us/op
Iteration   9: 238828.746 us/op
Iteration  10: 224794.691 us/op
Iteration  11: 218642.295 us/op
Iteration  12: 211403.253 us/op
Iteration  13: 223476.778 us/op
Iteration  14: 221885.873 us/op
Iteration  15: 213048.265 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  220004.437 ±(99.9%) 11641.768 us/op [Average]
  (min, avg, max) = (202302.725, 220004.437, 241719.170), stdev = 10889.717
  CI (99.9%): [208362.669, 231646.205] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 90.14% complete, ETA 00:23:35
# Fork: 1 of 1
# Warmup Iteration   1: 174210.341 us/op
# Warmup Iteration   2: 154654.144 us/op
# Warmup Iteration   3: 156472.172 us/op
# Warmup Iteration   4: 158775.238 us/op
# Warmup Iteration   5: 156732.855 us/op
Iteration   1: 160689.772 us/op
Iteration   2: 156675.295 us/op
Iteration   3: 156673.924 us/op
Iteration   4: 161125.371 us/op
Iteration   5: 155836.912 us/op
Iteration   6: 157189.705 us/op
Iteration   7: 152854.179 us/op
Iteration   8: 152209.138 us/op
Iteration   9: 157420.409 us/op
Iteration  10: 157877.290 us/op
Iteration  11: 159531.581 us/op
Iteration  12: 156232.461 us/op
Iteration  13: 156797.663 us/op
Iteration  14: 156087.472 us/op
Iteration  15: 158912.609 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  157074.252 ±(99.9%) 2630.585 us/op [Average]
  (min, avg, max) = (152209.138, 157074.252, 161125.371), stdev = 2460.651
  CI (99.9%): [154443.667, 159704.837] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 91.55% complete, ETA 00:20:13
# Fork: 1 of 1
# Warmup Iteration   1: 131150.522 us/op
# Warmup Iteration   2: 133505.533 us/op
# Warmup Iteration   3: 103158.719 us/op
# Warmup Iteration   4: 88670.844 us/op
# Warmup Iteration   5: 222615.295 us/op
Iteration   1: 185472.734 us/op
Iteration   2: 149303.181 us/op
Iteration   3: 40363.593 us/op
Iteration   4: 20030.908 us/op
Iteration   5: 19566.289 us/op
Iteration   6: 19117.804 us/op
Iteration   7: 19757.901 us/op
Iteration   8: 18848.273 us/op
Iteration   9: 19370.759 us/op
Iteration  10: 18663.200 us/op
Iteration  11: 18819.069 us/op
Iteration  12: 18663.699 us/op
Iteration  13: 18944.140 us/op
Iteration  14: 18833.095 us/op
Iteration  15: 18924.107 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  40311.917 ±(99.9%) 55943.908 us/op [Average]
  (min, avg, max) = (18663.200, 40311.917, 185472.734), stdev = 52329.966
  CI (99.9%): [≈ 0, 96255.824] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 92.96% complete, ETA 00:16:51
# Fork: 1 of 1
# Warmup Iteration   1: 138428.625 us/op
# Warmup Iteration   2: 162216.903 us/op
# Warmup Iteration   3: 158096.578 us/op
# Warmup Iteration   4: 151897.324 us/op
# Warmup Iteration   5: 156000.953 us/op
Iteration   1: 156523.499 us/op
Iteration   2: 156734.553 us/op
Iteration   3: 76391.058 us/op
Iteration   4: 40071.183 us/op
Iteration   5: 41896.772 us/op
Iteration   6: 39692.385 us/op
Iteration   7: 39263.226 us/op
Iteration   8: 39567.623 us/op
Iteration   9: 39478.755 us/op
Iteration  10: 39826.350 us/op
Iteration  11: 42259.468 us/op
Iteration  12: 40586.414 us/op
Iteration  13: 41966.435 us/op
Iteration  14: 40531.047 us/op
Iteration  15: 41924.025 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  58447.520 ±(99.9%) 43746.060 us/op [Average]
  (min, avg, max) = (39263.226, 58447.520, 156734.553), stdev = 40920.092
  CI (99.9%): [14701.459, 102193.580] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 94.37% complete, ETA 00:13:30
# Fork: 1 of 1
# Warmup Iteration   1: 1816.468 us/op
# Warmup Iteration   2: 1714.047 us/op
# Warmup Iteration   3: 1719.627 us/op
# Warmup Iteration   4: 1709.667 us/op
# Warmup Iteration   5: 1700.731 us/op
Iteration   1: 1698.576 us/op
Iteration   2: 1691.735 us/op
Iteration   3: 1696.520 us/op
Iteration   4: 1701.640 us/op
Iteration   5: 1707.017 us/op
Iteration   6: 1721.538 us/op
Iteration   7: 1695.933 us/op
Iteration   8: 1678.390 us/op
Iteration   9: 1693.735 us/op
Iteration  10: 1693.120 us/op
Iteration  11: 1689.813 us/op
Iteration  12: 1714.347 us/op
Iteration  13: 1722.154 us/op
Iteration  14: 1696.399 us/op
Iteration  15: 1735.290 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  1702.414 ±(99.9%) 16.010 us/op [Average]
  (min, avg, max) = (1678.390, 1702.414, 1735.290), stdev = 14.976
  CI (99.9%): [1686.404, 1718.423] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 95.77% complete, ETA 00:10:07
# Fork: 1 of 1
# Warmup Iteration   1: 46347.584 us/op
# Warmup Iteration   2: 21812.040 us/op
# Warmup Iteration   3: 21727.969 us/op
# Warmup Iteration   4: 21683.309 us/op
# Warmup Iteration   5: 22043.415 us/op
Iteration   1: 21977.386 us/op
Iteration   2: 21754.741 us/op
Iteration   3: 21664.368 us/op
Iteration   4: 21695.507 us/op
Iteration   5: 21801.012 us/op
Iteration   6: 21872.588 us/op
Iteration   7: 21757.685 us/op
Iteration   8: 22070.776 us/op
Iteration   9: 22071.589 us/op
Iteration  10: 21937.450 us/op
Iteration  11: 21738.638 us/op
Iteration  12: 21709.580 us/op
Iteration  13: 21957.048 us/op
Iteration  14: 21853.871 us/op
Iteration  15: 22045.065 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  21860.487 ±(99.9%) 151.335 us/op [Average]
  (min, avg, max) = (21664.368, 21860.487, 22071.589), stdev = 141.559
  CI (99.9%): [21709.152, 22011.822] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 97.18% complete, ETA 00:06:45
# Fork: 1 of 1
# Warmup Iteration   1: 893547.380 us/op
# Warmup Iteration   2: 938272.143 us/op
# Warmup Iteration   3: 951036.758 us/op
# Warmup Iteration   4: 952945.176 us/op
# Warmup Iteration   5: 948010.922 us/op
Iteration   1: 947823.284 us/op
Iteration   2: 944418.014 us/op
Iteration   3: 945616.632 us/op
Iteration   4: 954420.169 us/op
Iteration   5: 845854.857 us/op
Iteration   6: 304086.022 us/op
Iteration   7: 305638.553 us/op
Iteration   8: 304664.248 us/op
Iteration   9: 302358.274 us/op
Iteration  10: 303144.096 us/op
Iteration  11: 303999.925 us/op
Iteration  12: 303190.193 us/op
Iteration  13: 303884.405 us/op
Iteration  14: 306304.190 us/op
Iteration  15: 305078.920 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  512032.119 ±(99.9%) 326247.705 us/op [Average]
  (min, avg, max) = (302358.274, 512032.119, 954420.169), stdev = 305172.306
  CI (99.9%): [185784.414, 838279.824] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 98.59% complete, ETA 00:03:22
# Fork: 1 of 1
# Warmup Iteration   1: 12694662.824 us/op
# Warmup Iteration   2: 13550770.887 us/op
# Warmup Iteration   3: 13751310.035 us/op
# Warmup Iteration   4: 13726523.217 us/op
# Warmup Iteration   5: 13642880.974 us/op
Iteration   1: 13617571.227 us/op
Iteration   2: 13683368.497 us/op
Iteration   3: 13656324.371 us/op
Iteration   4: 13578818.406 us/op
Iteration   5: 13673558.585 us/op
Iteration   6: 13651495.309 us/op
Iteration   7: 13657155.711 us/op
Iteration   8: 13693548.622 us/op
Iteration   9: 13698919.961 us/op
Iteration  10: 13659667.326 us/op
Iteration  11: 13531456.396 us/op
Iteration  12: 13546066.723 us/op
Iteration  13: 13563849.842 us/op
Iteration  14: 13670039.563 us/op
Iteration  15: 6815498.697 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  13179822.616 ±(99.9%) 1883128.594 us/op [Average]
  (min, avg, max) = (6815498.697, 13179822.616, 13698919.961), stdev = 1761479.655
  CI (99.9%): [11296694.022, 15062951.210] (assumes normal distribution)


# Run complete. Total time: 04:00:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (iterations)  (length)     (size)   Mode  Cnt         Score         Error   Units
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A        512   avgt   15   5204410.358 ±   44244.206   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A       1024   avgt   15   1953862.855 ±   47492.923   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A       2048   avgt   15   1926509.536 ±   30987.374   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A      10240   avgt   15   1688806.444 ±   24768.280   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A     102400   avgt   15   1663598.738 ±   18311.342   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A   10485760   avgt   15   1085001.888 ±   61048.576   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A  104857600   avgt   15   1049201.951 ±    7236.447   us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                     N/A       N/A        N/A   avgt   15       383.237 ±       0.468   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                             N/A       N/A        N/A   avgt   15       169.608 ±       0.775   us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                    N/A       N/A        N/A   avgt   15       184.483 ±       0.800   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                 N/A       N/A        N/A   avgt   15   1230972.249 ±   10267.641   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                         N/A       100        N/A   avgt   15    906924.702 ±  236184.282   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                         N/A      1000        N/A   avgt   15  20354551.852 ±  357547.202   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                     521       N/A        N/A   avgt   15         1.871 ±       0.001   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                    1153       N/A        N/A   avgt   15         5.235 ±       0.014   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                    2021       N/A        N/A   avgt   15         9.149 ±       0.014   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                         N/A       100        N/A   avgt   15       364.154 ±       2.078   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                         N/A      1000        N/A   avgt   15     36637.236 ±     183.939   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                         N/A     10000        N/A   avgt   15   3657920.897 ±   34813.434   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                   N/A       N/A        N/A   avgt   15      1903.091 ±       1.794   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                       N/A       N/A        N/A   avgt   15     46985.217 ±      29.612   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                     N/A       N/A        N/A   avgt   15   1715335.398 ±    1277.456   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                        N/A       N/A        N/A   avgt   15         0.504 ±       0.004   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                              N/A       N/A        N/A   avgt   15      8367.107 ±       6.420   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                   N/A       N/A        N/A   avgt   15     36472.606 ±    3027.019   us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                            N/A       N/A        N/A   avgt   15    220004.437 ±   11641.768   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                              N/A       N/A        N/A   avgt   15    157074.252 ±    2630.585   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                N/A       N/A        N/A   avgt   15     40311.917 ±   55943.908   us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                   N/A       N/A        N/A   avgt   15     58447.520 ±   43746.060   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings           N/A        10        N/A   avgt   15      1702.414 ±      16.010   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings           N/A       100        N/A   avgt   15     21860.487 ±     151.335   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings           N/A      1000        N/A   avgt   15    512032.119 ±  326247.705   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                              N/A       N/A        N/A   avgt   15  13179822.616 ± 1883128.594   us/op
