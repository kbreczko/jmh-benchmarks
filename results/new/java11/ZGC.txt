# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 0.00% complete, ETA 03:56:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ops/us
# Warmup Iteration   2: 0.003 ops/us
# Warmup Iteration   3: 0.003 ops/us
# Warmup Iteration   4: 0.003 ops/us
# Warmup Iteration   5: 0.003 ops/us
Iteration   1: 0.003 ops/us
Iteration   2: 0.003 ops/us
Iteration   3: 0.003 ops/us
Iteration   4: 0.003 ops/us
Iteration   5: 0.003 ops/us
Iteration   6: 0.003 ops/us
Iteration   7: 0.003 ops/us
Iteration   8: 0.003 ops/us
Iteration   9: 0.003 ops/us
Iteration  10: 0.003 ops/us
Iteration  11: 0.003 ops/us
Iteration  12: 0.003 ops/us
Iteration  13: 0.003 ops/us
Iteration  14: 0.003 ops/us
Iteration  15: 0.003 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  0.003 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 1.41% complete, ETA 03:58:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ops/us
# Warmup Iteration   2: 0.006 ops/us
# Warmup Iteration   3: 0.006 ops/us
# Warmup Iteration   4: 0.006 ops/us
# Warmup Iteration   5: 0.006 ops/us
Iteration   1: 0.006 ops/us
Iteration   2: 0.006 ops/us
Iteration   3: 0.006 ops/us
Iteration   4: 0.006 ops/us
Iteration   5: 0.006 ops/us
Iteration   6: 0.006 ops/us
Iteration   7: 0.006 ops/us
Iteration   8: 0.006 ops/us
Iteration   9: 0.006 ops/us
Iteration  10: 0.006 ops/us
Iteration  11: 0.006 ops/us
Iteration  12: 0.006 ops/us
Iteration  13: 0.006 ops/us
Iteration  14: 0.006 ops/us
Iteration  15: 0.006 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  0.006 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.006] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 2.82% complete, ETA 03:54:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ops/us
# Warmup Iteration   2: 0.003 ops/us
# Warmup Iteration   3: 0.003 ops/us
# Warmup Iteration   4: 0.003 ops/us
# Warmup Iteration   5: 0.003 ops/us
Iteration   1: 0.003 ops/us
Iteration   2: 0.003 ops/us
Iteration   3: 0.003 ops/us
Iteration   4: 0.003 ops/us
Iteration   5: 0.003 ops/us
Iteration   6: 0.003 ops/us
Iteration   7: 0.003 ops/us
Iteration   8: 0.003 ops/us
Iteration   9: 0.003 ops/us
Iteration  10: 0.003 ops/us
Iteration  11: 0.003 ops/us
Iteration  12: 0.003 ops/us
Iteration  13: 0.003 ops/us
Iteration  14: 0.003 ops/us
Iteration  15: 0.003 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  0.003 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 4.23% complete, ETA 03:51:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ops/us
# Warmup Iteration   2: 0.006 ops/us
# Warmup Iteration   3: 0.006 ops/us
# Warmup Iteration   4: 0.006 ops/us
# Warmup Iteration   5: 0.006 ops/us
Iteration   1: 0.006 ops/us
Iteration   2: 0.006 ops/us
Iteration   3: 0.006 ops/us
Iteration   4: 0.006 ops/us
Iteration   5: 0.006 ops/us
Iteration   6: 0.006 ops/us
Iteration   7: 0.006 ops/us
Iteration   8: 0.006 ops/us
Iteration   9: 0.006 ops/us
Iteration  10: 0.006 ops/us
Iteration  11: 0.006 ops/us
Iteration  12: 0.006 ops/us
Iteration  13: 0.006 ops/us
Iteration  14: 0.006 ops/us
Iteration  15: 0.006 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  0.006 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.006] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 5.63% complete, ETA 03:47:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.540 ops/us
# Warmup Iteration   2: 0.541 ops/us
# Warmup Iteration   3: 0.542 ops/us
# Warmup Iteration   4: 0.542 ops/us
# Warmup Iteration   5: 0.542 ops/us
Iteration   1: 0.542 ops/us
Iteration   2: 0.542 ops/us
Iteration   3: 0.542 ops/us
Iteration   4: 0.542 ops/us
Iteration   5: 0.541 ops/us
Iteration   6: 0.542 ops/us
Iteration   7: 0.542 ops/us
Iteration   8: 0.542 ops/us
Iteration   9: 0.542 ops/us
Iteration  10: 0.542 ops/us
Iteration  11: 0.541 ops/us
Iteration  12: 0.541 ops/us
Iteration  13: 0.542 ops/us
Iteration  14: 0.542 ops/us
Iteration  15: 0.542 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.542 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.541, 0.542, 0.542), stdev = 0.001
  CI (99.9%): [0.541, 0.542] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 7.04% complete, ETA 03:44:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.203 ops/us
# Warmup Iteration   2: 0.204 ops/us
# Warmup Iteration   3: 0.203 ops/us
# Warmup Iteration   4: 0.203 ops/us
# Warmup Iteration   5: 0.203 ops/us
Iteration   1: 0.204 ops/us
Iteration   2: 0.203 ops/us
Iteration   3: 0.203 ops/us
Iteration   4: 0.204 ops/us
Iteration   5: 0.204 ops/us
Iteration   6: 0.203 ops/us
Iteration   7: 0.203 ops/us
Iteration   8: 0.203 ops/us
Iteration   9: 0.204 ops/us
Iteration  10: 0.204 ops/us
Iteration  11: 0.203 ops/us
Iteration  12: 0.203 ops/us
Iteration  13: 0.203 ops/us
Iteration  14: 0.204 ops/us
Iteration  15: 0.204 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.203 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.203, 0.203, 0.204), stdev = 0.001
  CI (99.9%): [0.203, 0.204] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 8.45% complete, ETA 03:40:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.111 ops/us
# Warmup Iteration   2: 0.111 ops/us
# Warmup Iteration   3: 0.112 ops/us
# Warmup Iteration   4: 0.112 ops/us
# Warmup Iteration   5: 0.112 ops/us
Iteration   1: 0.112 ops/us
Iteration   2: 0.111 ops/us
Iteration   3: 0.112 ops/us
Iteration   4: 0.112 ops/us
Iteration   5: 0.111 ops/us
Iteration   6: 0.111 ops/us
Iteration   7: 0.112 ops/us
Iteration   8: 0.112 ops/us
Iteration   9: 0.112 ops/us
Iteration  10: 0.111 ops/us
Iteration  11: 0.111 ops/us
Iteration  12: 0.111 ops/us
Iteration  13: 0.111 ops/us
Iteration  14: 0.111 ops/us
Iteration  15: 0.111 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.111 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.111, 0.111, 0.112), stdev = 0.001
  CI (99.9%): [0.111, 0.112] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 9.86% complete, ETA 03:37:23
# Fork: 1 of 1
# Warmup Iteration   1: 14.763 ops/us
# Warmup Iteration   2: 15.652 ops/us
# Warmup Iteration   3: 13.526 ops/us
# Warmup Iteration   4: 13.522 ops/us
# Warmup Iteration   5: 13.522 ops/us
Iteration   1: 13.277 ops/us
Iteration   2: 13.519 ops/us
Iteration   3: 13.511 ops/us
Iteration   4: 13.517 ops/us
Iteration   5: 13.517 ops/us
Iteration   6: 13.519 ops/us
Iteration   7: 13.514 ops/us
Iteration   8: 13.509 ops/us
Iteration   9: 13.521 ops/us
Iteration  10: 13.512 ops/us
Iteration  11: 13.513 ops/us
Iteration  12: 13.261 ops/us
Iteration  13: 13.305 ops/us
Iteration  14: 13.514 ops/us
Iteration  15: 13.513 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  13.468 ±(99.9%) 0.104 ops/us [Average]
  (min, avg, max) = (13.261, 13.468, 13.521), stdev = 0.097
  CI (99.9%): [13.364, 13.572] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 11.27% complete, ETA 03:33:57
# Fork: 1 of 1
# Warmup Iteration   1: 1.560 ops/us
# Warmup Iteration   2: 1.660 ops/us
# Warmup Iteration   3: 1.535 ops/us
# Warmup Iteration   4: 1.535 ops/us
# Warmup Iteration   5: 1.557 ops/us
Iteration   1: 1.533 ops/us
Iteration   2: 1.534 ops/us
Iteration   3: 1.537 ops/us
Iteration   4: 1.560 ops/us
Iteration   5: 1.560 ops/us
Iteration   6: 1.560 ops/us
Iteration   7: 1.553 ops/us
Iteration   8: 1.533 ops/us
Iteration   9: 1.561 ops/us
Iteration  10: 1.533 ops/us
Iteration  11: 1.560 ops/us
Iteration  12: 1.552 ops/us
Iteration  13: 1.538 ops/us
Iteration  14: 1.556 ops/us
Iteration  15: 1.554 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  1.548 ±(99.9%) 0.013 ops/us [Average]
  (min, avg, max) = (1.533, 1.548, 1.561), stdev = 0.012
  CI (99.9%): [1.535, 1.561] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 12.68% complete, ETA 03:30:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.151 ops/us
# Warmup Iteration   2: 0.159 ops/us
# Warmup Iteration   3: 0.160 ops/us
# Warmup Iteration   4: 0.160 ops/us
# Warmup Iteration   5: 0.158 ops/us
Iteration   1: 0.162 ops/us
Iteration   2: 0.162 ops/us
Iteration   3: 0.161 ops/us
Iteration   4: 0.159 ops/us
Iteration   5: 0.160 ops/us
Iteration   6: 0.162 ops/us
Iteration   7: 0.160 ops/us
Iteration   8: 0.162 ops/us
Iteration   9: 0.161 ops/us
Iteration  10: 0.161 ops/us
Iteration  11: 0.160 ops/us
Iteration  12: 0.160 ops/us
Iteration  13: 0.162 ops/us
Iteration  14: 0.159 ops/us
Iteration  15: 0.161 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.161 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.159, 0.161, 0.162), stdev = 0.001
  CI (99.9%): [0.160, 0.162] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 14.08% complete, ETA 03:27:07
# Fork: 1 of 1
# Warmup Iteration   1: 16.272 ops/us
# Warmup Iteration   2: 15.384 ops/us
# Warmup Iteration   3: 14.093 ops/us
# Warmup Iteration   4: 14.080 ops/us
# Warmup Iteration   5: 14.071 ops/us
Iteration   1: 14.089 ops/us
Iteration   2: 14.091 ops/us
Iteration   3: 14.082 ops/us
Iteration   4: 14.094 ops/us
Iteration   5: 14.092 ops/us
Iteration   6: 14.093 ops/us
Iteration   7: 14.078 ops/us
Iteration   8: 14.090 ops/us
Iteration   9: 14.086 ops/us
Iteration  10: 14.083 ops/us
Iteration  11: 14.089 ops/us
Iteration  12: 14.086 ops/us
Iteration  13: 14.090 ops/us
Iteration  14: 13.941 ops/us
Iteration  15: 14.084 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  14.078 ±(99.9%) 0.041 ops/us [Average]
  (min, avg, max) = (13.941, 14.078, 14.094), stdev = 0.038
  CI (99.9%): [14.037, 14.119] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 15.49% complete, ETA 03:23:42
# Fork: 1 of 1
# Warmup Iteration   1: 1.741 ops/us
# Warmup Iteration   2: 1.625 ops/us
# Warmup Iteration   3: 1.476 ops/us
# Warmup Iteration   4: 1.475 ops/us
# Warmup Iteration   5: 1.478 ops/us
Iteration   1: 1.475 ops/us
Iteration   2: 1.476 ops/us
Iteration   3: 1.449 ops/us
Iteration   4: 1.476 ops/us
Iteration   5: 1.449 ops/us
Iteration   6: 1.475 ops/us
Iteration   7: 1.475 ops/us
Iteration   8: 1.476 ops/us
Iteration   9: 1.473 ops/us
Iteration  10: 1.477 ops/us
Iteration  11: 1.475 ops/us
Iteration  12: 1.457 ops/us
Iteration  13: 1.454 ops/us
Iteration  14: 1.475 ops/us
Iteration  15: 1.478 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  1.469 ±(99.9%) 0.012 ops/us [Average]
  (min, avg, max) = (1.449, 1.469, 1.478), stdev = 0.011
  CI (99.9%): [1.458, 1.481] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 16.90% complete, ETA 03:20:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.159 ops/us
# Warmup Iteration   2: 0.130 ops/us
# Warmup Iteration   3: 0.137 ops/us
# Warmup Iteration   4: 0.137 ops/us
# Warmup Iteration   5: 0.137 ops/us
Iteration   1: 0.138 ops/us
Iteration   2: 0.138 ops/us
Iteration   3: 0.138 ops/us
Iteration   4: 0.137 ops/us
Iteration   5: 0.138 ops/us
Iteration   6: 0.138 ops/us
Iteration   7: 0.139 ops/us
Iteration   8: 0.137 ops/us
Iteration   9: 0.138 ops/us
Iteration  10: 0.137 ops/us
Iteration  11: 0.137 ops/us
Iteration  12: 0.137 ops/us
Iteration  13: 0.137 ops/us
Iteration  14: 0.137 ops/us
Iteration  15: 0.138 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.138 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.137, 0.138, 0.139), stdev = 0.001
  CI (99.9%): [0.137, 0.138] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 18.31% complete, ETA 03:16:52
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻³ ops/us
# Warmup Iteration   2: ≈ 10⁻³ ops/us
# Warmup Iteration   3: ≈ 10⁻³ ops/us
# Warmup Iteration   4: ≈ 10⁻³ ops/us
# Warmup Iteration   5: ≈ 10⁻³ ops/us
Iteration   1: ≈ 10⁻³ ops/us
Iteration   2: ≈ 10⁻³ ops/us
Iteration   3: ≈ 10⁻³ ops/us
Iteration   4: ≈ 10⁻³ ops/us
Iteration   5: ≈ 10⁻³ ops/us
Iteration   6: ≈ 10⁻³ ops/us
Iteration   7: ≈ 10⁻³ ops/us
Iteration   8: ≈ 10⁻³ ops/us
Iteration   9: ≈ 10⁻³ ops/us
Iteration  10: ≈ 10⁻³ ops/us
Iteration  11: ≈ 10⁻³ ops/us
Iteration  12: ≈ 10⁻³ ops/us
Iteration  13: ≈ 10⁻³ ops/us
Iteration  14: ≈ 10⁻³ ops/us
Iteration  15: ≈ 10⁻³ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  ≈ 10⁻³ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 19.72% complete, ETA 03:13:30
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 21.13% complete, ETA 03:10:11
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 22.54% complete, ETA 03:07:03
# Fork: 1 of 1
# Warmup Iteration   1: 1.775 ops/us
# Warmup Iteration   2: 1.781 ops/us
# Warmup Iteration   3: 1.781 ops/us
# Warmup Iteration   4: 1.781 ops/us
# Warmup Iteration   5: 1.780 ops/us
Iteration   1: 1.781 ops/us
Iteration   2: 1.782 ops/us
Iteration   3: 1.782 ops/us
Iteration   4: 1.781 ops/us
Iteration   5: 1.782 ops/us
Iteration   6: 1.781 ops/us
Iteration   7: 1.779 ops/us
Iteration   8: 1.777 ops/us
Iteration   9: 1.781 ops/us
Iteration  10: 1.781 ops/us
Iteration  11: 1.781 ops/us
Iteration  12: 1.781 ops/us
Iteration  13: 1.782 ops/us
Iteration  14: 1.777 ops/us
Iteration  15: 1.782 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  1.781 ±(99.9%) 0.002 ops/us [Average]
  (min, avg, max) = (1.777, 1.781, 1.782), stdev = 0.002
  CI (99.9%): [1.779, 1.782] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 23.94% complete, ETA 03:03:38
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 25.35% complete, ETA 03:00:14
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 512)

# Run progress: 26.76% complete, ETA 02:56:51
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 2936012
177232.694 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 2936012
177264.303 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 2936012
177921.539 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 2936012
177626.008 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 2936012
177837.946 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 2936012
178445.802 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 2936012
178845.696 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 2936012
177738.517 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 2936012
178025.944 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 2936012
177441.475 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 2936012
178404.286 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 2936012
177731.188 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 2936012
177775.523 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 2936012
178040.254 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 2936012
178019.637 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 2936012
177372.676 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 2936012
178535.465 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 2936012
178426.908 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 2936012
177838.010 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 2936012
177296.493 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  177995.858 ±(99.9%) 492.104 us/op [Average]
  (min, avg, max) = (177296.493, 177995.858, 178845.696), stdev = 460.315
  CI (99.9%): [177503.754, 178487.963] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 28.17% complete, ETA 02:53:32
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 1468006
241152.863 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 1468006
240650.920 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 1468006
238838.414 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 1468006
239500.524 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 1468006
239245.375 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 1468006
239114.393 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 1468006
239728.111 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 1468006
238998.336 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 1468006
239506.277 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 1468006
238804.417 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 1468006
239372.918 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 1468006
238662.646 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 1468006
238726.176 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 1468006
239343.911 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 1468006
238614.404 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 1468006
239704.222 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 1468006
242161.523 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 1468006
242739.826 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 1468006
241814.848 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 1468006
241857.246 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  239943.284 ±(99.9%) 1529.343 us/op [Average]
  (min, avg, max) = (238614.404, 239943.284, 242739.826), stdev = 1430.548
  CI (99.9%): [238413.941, 241472.626] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 2048)

# Run progress: 29.58% complete, ETA 02:50:10
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 734003
261667.422 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 734003
260046.884 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 734003
259941.853 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 734003
260157.089 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 734003
260682.002 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 734003
260711.645 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 734003
260947.776 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 734003
261069.656 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 734003
260951.228 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 734003
260169.664 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 734003
260489.223 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 734003
261902.436 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 734003
260636.131 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 734003
260750.347 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 734003
259666.331 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 734003
260916.396 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 734003
261605.883 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 734003
260646.800 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 734003
260862.944 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 734003
260774.483 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  260806.730 ±(99.9%) 559.849 us/op [Average]
  (min, avg, max) = (259666.331, 260806.730, 261902.436), stdev = 523.683
  CI (99.9%): [260246.880, 261366.579] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 30.99% complete, ETA 02:46:51
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 146800
240081.621 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 146800
241585.864 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 146800
241050.982 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 146800
240778.830 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 146800
240502.598 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 146800
240712.481 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 146800
241523.367 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 146800
241233.030 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 146800
241589.256 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 146800
240648.312 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 146800
241141.972 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 146800
241393.725 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 146800
241714.874 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 146800
240778.196 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 146800
241074.857 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 146800
240693.032 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 146800
241148.414 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 146800
241453.233 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 146800
241319.759 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 146800
240804.180 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  241148.579 ±(99.9%) 378.395 us/op [Average]
  (min, avg, max) = (240648.312, 241148.579, 241714.874), stdev = 353.951
  CI (99.9%): [240770.184, 241526.975] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 32.39% complete, ETA 02:43:30
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 14680
220956.616 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 14680
221694.938 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 14680
220538.849 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 14680
220826.825 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 14680
221483.995 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 14680
220933.512 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 14680
220805.937 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 14680
221262.010 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 14680
220975.443 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 14680
221639.776 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 14680
221583.046 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 14680
220477.172 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 14680
220838.374 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 14680
220926.548 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 14680
220580.698 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 14680
220545.753 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 14680
221506.998 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 14680
220829.136 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 14680
221195.564 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 14680
220645.142 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  220983.007 ±(99.9%) 403.429 us/op [Average]
  (min, avg, max) = (220477.172, 220983.007, 221639.776), stdev = 377.368
  CI (99.9%): [220579.578, 221386.436] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 33.80% complete, ETA 02:40:11
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 1433
216262.460 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 1433
217098.371 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 1433
216643.422 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 1433
216703.891 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 1433
216530.105 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 1433
216094.287 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 1433
215778.150 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 1433
215836.977 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 1433
216212.698 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 1433
216813.888 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 1433
215966.747 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 1433
216306.373 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 1433
216586.900 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 1433
215958.302 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 1433
216322.633 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 1433
216340.734 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 1433
216044.257 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 1433
215911.316 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 1433
215809.538 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 1433
215257.223 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  216082.668 ±(99.9%) 398.881 us/op [Average]
  (min, avg, max) = (215257.223, 216082.668, 216813.888), stdev = 373.114
  CI (99.9%): [215683.787, 216481.550] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 2097152)

# Run progress: 35.21% complete, ETA 02:36:50
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 716
215693.079 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 716
216143.629 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 716
216158.083 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 716
215748.677 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 716
215784.433 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 716
215751.351 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 716
216032.262 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 716
216134.583 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 716
215731.113 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 716
215926.412 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 716
216786.568 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 716
216027.234 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 716
215899.007 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 716
216136.387 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 716
216545.744 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 716
215472.211 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 716
216638.686 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 716
216175.054 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 716
216113.349 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 716
216119.905 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  216099.324 ±(99.9%) 372.656 us/op [Average]
  (min, avg, max) = (215472.211, 216099.324, 216786.568), stdev = 348.582
  CI (99.9%): [215726.669, 216471.980] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 36.62% complete, ETA 02:33:29
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 143
215779.896 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 143
215278.623 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 143
215808.656 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 143
215869.140 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 143
215430.547 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 143
215268.394 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 143
215763.060 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 143
214899.063 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 143
215547.921 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 143
215478.683 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 143
215299.693 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 143
215561.897 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 143
215503.235 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 143
215033.069 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 143
215563.688 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 143
215590.493 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 143
216286.496 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 143
216095.804 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 143
215684.059 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 143
215768.776 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  215556.289 ±(99.9%) 382.596 us/op [Average]
  (min, avg, max) = (214899.063, 215556.289, 216286.496), stdev = 357.881
  CI (99.9%): [215173.692, 215938.885] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 38.03% complete, ETA 02:30:07
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 14
211370.959 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 14
211740.469 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 14
211152.740 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 14
210991.846 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 14
211704.449 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 14
211005.089 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 14
211256.657 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 14
211559.724 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 14
211635.432 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 14
211661.152 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 14
210826.971 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 14
210761.697 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 14
211336.800 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 14
211522.487 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 14
210723.275 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 14
211054.794 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 14
210256.798 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 14
211117.159 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 14
211235.039 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 14
211249.674 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  211146.850 ±(99.9%) 417.286 us/op [Average]
  (min, avg, max) = (210256.798, 211146.850, 211661.152), stdev = 390.330
  CI (99.9%): [210729.564, 211564.136] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 512)

# Run progress: 39.44% complete, ETA 02:26:44
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 2936012
879878.714 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 2936012
1058725.154 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 2936012
909318.988 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 2936012
945616.847 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 2936012
944445.675 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 2936012
849870.119 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 2936012
959696.799 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 2936012
1003346.303 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 2936012
963436.219 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 2936012
923677.721 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 2936012
945371.096 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 2936012
987060.024 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 2936012
829015.759 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 2936012
884229.550 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 2936012
1062093.164 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 2936012
1032654.139 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 2936012
931384.002 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 2936012
927438.393 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 2936012
963439.474 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 2936012
1126257.063 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  959264.655 ±(99.9%) 83010.381 us/op [Average]
  (min, avg, max) = (829015.759, 959264.655, 1126257.063), stdev = 77647.962
  CI (99.9%): [876254.274, 1042275.036] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 40.85% complete, ETA 02:23:30
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 1468006
1186053.985 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 1468006
1198366.589 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 1468006
1200925.060 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 1468006
1176461.132 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 1468006
1200582.625 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 1468006
1199833.808 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 1468006
1199824.018 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 1468006
1199455.831 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 1468006
1199817.712 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 1468006
1201031.029 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 1468006
1198550.176 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 1468006
1199274.382 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 1468006
1200862.546 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 1468006
1200115.511 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 1468006
1188368.004 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 1468006
1200984.768 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 1468006
1199079.430 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 1468006
1199786.623 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 1468006
1199725.641 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 1468006
1200205.437 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1199127.661 ±(99.9%) 3266.522 us/op [Average]
  (min, avg, max) = (1188368.004, 1199127.661, 1201031.029), stdev = 3055.507
  CI (99.9%): [1195861.139, 1202394.183] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 2048)

# Run progress: 42.25% complete, ETA 02:20:24
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 734003
1065738.226 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 734003
1057279.634 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 734003
1061096.892 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 734003
1061661.192 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 734003
1048429.196 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 734003
1055178.541 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 734003
1054086.334 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 734003
1055280.497 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 734003
1053680.109 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 734003
1045087.990 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 734003
1050321.932 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 734003
1046202.721 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 734003
1048507.005 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 734003
1050872.352 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 734003
1055424.297 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 734003
1053959.177 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 734003
1052117.018 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 734003
1053001.895 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 734003
1053527.391 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 734003
1052903.877 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1052010.076 ±(99.9%) 3445.761 us/op [Average]
  (min, avg, max) = (1045087.990, 1052010.076, 1055424.297), stdev = 3223.167
  CI (99.9%): [1048564.315, 1055455.836] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 43.66% complete, ETA 02:17:10
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 146800
995159.085 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 146800
994041.466 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 146800
987845.175 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 146800
999029.470 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 146800
995352.333 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 146800
995098.105 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 146800
997784.281 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 146800
996760.084 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 146800
996015.100 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 146800
990699.987 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 146800
998395.170 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 146800
992326.962 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 146800
994687.930 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 146800
996003.241 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 146800
994630.138 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 146800
989198.133 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 146800
997615.063 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 146800
994918.419 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 146800
994147.253 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 146800
992628.272 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  994727.209 ±(99.9%) 2799.985 us/op [Average]
  (min, avg, max) = (989198.133, 994727.209, 998395.170), stdev = 2619.108
  CI (99.9%): [991927.224, 997527.195] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 45.07% complete, ETA 02:14:04
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 14680
886831.346 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 14680
889911.312 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 14680
887453.750 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 14680
887357.949 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 14680
887842.948 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 14680
888475.767 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 14680
887820.178 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 14680
886062.707 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 14680
886139.928 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 14680
891219.204 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 14680
888096.518 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 14680
887987.842 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 14680
889996.523 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 14680
889011.576 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 14680
888865.907 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 14680
887990.668 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 14680
888133.486 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 14680
888610.179 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 14680
890495.877 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 14680
887918.176 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  888454.969 ±(99.9%) 1488.068 us/op [Average]
  (min, avg, max) = (886062.707, 888454.969, 891219.204), stdev = 1391.940
  CI (99.9%): [886966.901, 889943.037] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 46.48% complete, ETA 02:10:50
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 1433
871959.568 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 1433
887015.010 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 1433
876308.629 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 1433
875149.330 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 1433
878554.126 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 1433
878841.216 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 1433
875764.966 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 1433
877941.417 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 1433
870969.840 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 1433
873514.736 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 1433
877713.027 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 1433
871579.072 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 1433
876483.282 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 1433
891349.737 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 1433
875359.876 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 1433
873324.170 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 1433
869707.981 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 1433
870406.657 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 1433
871910.294 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 1433
872115.348 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  875132.108 ±(99.9%) 5719.121 us/op [Average]
  (min, avg, max) = (869707.981, 875132.108, 891349.737), stdev = 5349.669
  CI (99.9%): [869412.987, 880851.228] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 2097152)

# Run progress: 47.89% complete, ETA 02:07:31
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 716
868253.901 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 716
872328.463 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 716
869336.052 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 716
873302.320 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 716
873170.261 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 716
867921.850 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 716
871977.853 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 716
873543.674 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 716
872400.540 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 716
872569.783 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 716
870893.886 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 716
873997.000 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 716
868506.594 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 716
873278.462 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 716
867997.003 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 716
868175.472 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 716
874138.428 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 716
876478.668 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 716
871868.579 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 716
874794.207 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  871902.800 ±(99.9%) 2878.749 us/op [Average]
  (min, avg, max) = (867921.850, 871902.800, 876478.668), stdev = 2692.783
  CI (99.9%): [869024.051, 874781.549] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 49.30% complete, ETA 02:04:10
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 143
916501.423 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 143
891095.232 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 143
874555.149 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 143
874083.311 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 143
877170.634 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 143
876214.046 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 143
873554.196 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 143
875961.304 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 143
873879.206 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 143
877003.464 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 143
876131.775 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 143
876556.588 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 143
875828.406 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 143
876807.420 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 143
876482.444 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 143
874503.130 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 143
875546.385 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 143
874787.281 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 143
876998.817 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 143
873553.585 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  875587.203 ±(99.9%) 1313.028 us/op [Average]
  (min, avg, max) = (873553.585, 875587.203, 877003.464), stdev = 1228.207
  CI (99.9%): [874274.175, 876900.231] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 50.70% complete, ETA 02:00:49
# Fork: 1 of 1
# Warmup Iteration   1: MaxHeap:2147483648, numberOfObjects: 14
854579.639 us/op
# Warmup Iteration   2: MaxHeap:2147483648, numberOfObjects: 14
856495.579 us/op
# Warmup Iteration   3: MaxHeap:2147483648, numberOfObjects: 14
854164.105 us/op
# Warmup Iteration   4: MaxHeap:2147483648, numberOfObjects: 14
857581.584 us/op
# Warmup Iteration   5: MaxHeap:2147483648, numberOfObjects: 14
854642.585 us/op
Iteration   1: MaxHeap:2147483648, numberOfObjects: 14
853094.518 us/op
Iteration   2: MaxHeap:2147483648, numberOfObjects: 14
855719.686 us/op
Iteration   3: MaxHeap:2147483648, numberOfObjects: 14
856872.641 us/op
Iteration   4: MaxHeap:2147483648, numberOfObjects: 14
853671.271 us/op
Iteration   5: MaxHeap:2147483648, numberOfObjects: 14
857003.126 us/op
Iteration   6: MaxHeap:2147483648, numberOfObjects: 14
854916.891 us/op
Iteration   7: MaxHeap:2147483648, numberOfObjects: 14
857173.828 us/op
Iteration   8: MaxHeap:2147483648, numberOfObjects: 14
855873.566 us/op
Iteration   9: MaxHeap:2147483648, numberOfObjects: 14
852393.938 us/op
Iteration  10: MaxHeap:2147483648, numberOfObjects: 14
855541.058 us/op
Iteration  11: MaxHeap:2147483648, numberOfObjects: 14
853621.714 us/op
Iteration  12: MaxHeap:2147483648, numberOfObjects: 14
854312.263 us/op
Iteration  13: MaxHeap:2147483648, numberOfObjects: 14
854934.169 us/op
Iteration  14: MaxHeap:2147483648, numberOfObjects: 14
854535.073 us/op
Iteration  15: MaxHeap:2147483648, numberOfObjects: 14
854092.563 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  854917.087 ±(99.9%) 1547.290 us/op [Average]
  (min, avg, max) = (852393.938, 854917.087, 857173.828), stdev = 1447.336
  CI (99.9%): [853369.797, 856464.377] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 52.11% complete, ETA 01:57:23
# Fork: 1 of 1
# Warmup Iteration   1: 376.542 us/op
# Warmup Iteration   2: 375.912 us/op
# Warmup Iteration   3: 375.639 us/op
# Warmup Iteration   4: 375.658 us/op
# Warmup Iteration   5: 375.568 us/op
Iteration   1: 375.660 us/op
Iteration   2: 375.644 us/op
Iteration   3: 375.483 us/op
Iteration   4: 375.383 us/op
Iteration   5: 375.914 us/op
Iteration   6: 375.291 us/op
Iteration   7: 375.496 us/op
Iteration   8: 375.276 us/op
Iteration   9: 375.572 us/op
Iteration  10: 375.345 us/op
Iteration  11: 375.194 us/op
Iteration  12: 375.884 us/op
Iteration  13: 375.440 us/op
Iteration  14: 375.255 us/op
Iteration  15: 375.321 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  375.477 ±(99.9%) 0.236 us/op [Average]
  (min, avg, max) = (375.194, 375.477, 375.914), stdev = 0.221
  CI (99.9%): [375.241, 375.713] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 53.52% complete, ETA 01:53:53
# Fork: 1 of 1
# Warmup Iteration   1: 166.783 us/op
# Warmup Iteration   2: 165.100 us/op
# Warmup Iteration   3: 165.124 us/op
# Warmup Iteration   4: 164.022 us/op
# Warmup Iteration   5: 164.476 us/op
Iteration   1: 165.632 us/op
Iteration   2: 165.536 us/op
Iteration   3: 164.531 us/op
Iteration   4: 164.496 us/op
Iteration   5: 166.463 us/op
Iteration   6: 165.872 us/op
Iteration   7: 165.183 us/op
Iteration   8: 165.522 us/op
Iteration   9: 166.467 us/op
Iteration  10: 165.756 us/op
Iteration  11: 165.940 us/op
Iteration  12: 165.008 us/op
Iteration  13: 165.276 us/op
Iteration  14: 166.905 us/op
Iteration  15: 166.669 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  165.684 ±(99.9%) 0.780 us/op [Average]
  (min, avg, max) = (164.496, 165.684, 166.905), stdev = 0.730
  CI (99.9%): [164.904, 166.464] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 54.93% complete, ETA 01:50:24
# Fork: 1 of 1
# Warmup Iteration   1: 292.976 us/op
# Warmup Iteration   2: 292.776 us/op
# Warmup Iteration   3: 292.645 us/op
# Warmup Iteration   4: 303.088 us/op
# Warmup Iteration   5: 300.833 us/op
Iteration   1: 300.918 us/op
Iteration   2: 300.841 us/op
Iteration   3: 300.715 us/op
Iteration   4: 300.721 us/op
Iteration   5: 300.734 us/op
Iteration   6: 300.752 us/op
Iteration   7: 300.930 us/op
Iteration   8: 300.706 us/op
Iteration   9: 300.916 us/op
Iteration  10: 300.879 us/op
Iteration  11: 300.733 us/op
Iteration  12: 300.848 us/op
Iteration  13: 300.756 us/op
Iteration  14: 300.962 us/op
Iteration  15: 300.758 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  300.811 ±(99.9%) 0.097 us/op [Average]
  (min, avg, max) = (300.706, 300.811, 300.962), stdev = 0.091
  CI (99.9%): [300.714, 300.909] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 56.34% complete, ETA 01:46:54
# Fork: 1 of 1
# Warmup Iteration   1: 172.362 us/op
# Warmup Iteration   2: 171.632 us/op
# Warmup Iteration   3: 173.202 us/op
# Warmup Iteration   4: 171.914 us/op
# Warmup Iteration   5: 171.225 us/op
Iteration   1: 170.271 us/op
Iteration   2: 173.298 us/op
Iteration   3: 172.276 us/op
Iteration   4: 171.054 us/op
Iteration   5: 171.635 us/op
Iteration   6: 171.778 us/op
Iteration   7: 171.142 us/op
Iteration   8: 171.398 us/op
Iteration   9: 172.361 us/op
Iteration  10: 172.386 us/op
Iteration  11: 170.240 us/op
Iteration  12: 171.858 us/op
Iteration  13: 170.191 us/op
Iteration  14: 172.837 us/op
Iteration  15: 171.221 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  171.596 ±(99.9%) 1.009 us/op [Average]
  (min, avg, max) = (170.191, 171.596, 173.298), stdev = 0.943
  CI (99.9%): [170.588, 172.605] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 57.75% complete, ETA 01:43:25
# Fork: 1 of 1
# Warmup Iteration   1: 823850.897 us/op
# Warmup Iteration   2: 786919.706 us/op
# Warmup Iteration   3: 782841.701 us/op
# Warmup Iteration   4: 793985.465 us/op
# Warmup Iteration   5: 789931.087 us/op
Iteration   1: 781010.291 us/op
Iteration   2: 788739.803 us/op
Iteration   3: 785104.357 us/op
Iteration   4: 786590.030 us/op
Iteration   5: 787572.293 us/op
Iteration   6: 789971.226 us/op
Iteration   7: 792243.849 us/op
Iteration   8: 792044.530 us/op
Iteration   9: 789668.206 us/op
Iteration  10: 786741.500 us/op
Iteration  11: 794574.728 us/op
Iteration  12: 797000.484 us/op
Iteration  13: 786545.400 us/op
Iteration  14: 762128.226 us/op
Iteration  15: 782458.417 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  786826.223 ±(99.9%) 8611.098 us/op [Average]
  (min, avg, max) = (762128.226, 786826.223, 797000.484), stdev = 8054.826
  CI (99.9%): [778215.125, 795437.320] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 59.15% complete, ETA 01:40:00
# Fork: 1 of 1
# Warmup Iteration   1: 153929.669 us/op
# Warmup Iteration   2: 155656.968 us/op
# Warmup Iteration   3: 154401.257 us/op
# Warmup Iteration   4: 153373.996 us/op
# Warmup Iteration   5: 153700.759 us/op
Iteration   1: 152156.600 us/op
Iteration   2: 152914.532 us/op
Iteration   3: 153948.684 us/op
Iteration   4: 156519.816 us/op
Iteration   5: 156177.241 us/op
Iteration   6: 153262.755 us/op
Iteration   7: 156084.071 us/op
Iteration   8: 153975.625 us/op
Iteration   9: 156458.796 us/op
Iteration  10: 152533.860 us/op
Iteration  11: 153618.231 us/op
Iteration  12: 154547.586 us/op
Iteration  13: 155484.040 us/op
Iteration  14: 157540.767 us/op
Iteration  15: 156380.245 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  154773.523 ±(99.9%) 1821.151 us/op [Average]
  (min, avg, max) = (152156.600, 154773.523, 157540.767), stdev = 1703.506
  CI (99.9%): [152952.372, 156594.675] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 60.56% complete, ETA 01:36:32
# Fork: 1 of 1
# Warmup Iteration   1: 4045367.243 us/op
# Warmup Iteration   2: 3985975.414 us/op
# Warmup Iteration   3: 3977647.668 us/op
# Warmup Iteration   4: 4016651.138 us/op
# Warmup Iteration   5: 4431930.994 us/op
Iteration   1: 4460812.410 us/op
Iteration   2: 4429800.253 us/op
Iteration   3: 4416570.745 us/op
Iteration   4: 4441248.864 us/op
Iteration   5: 4433743.928 us/op
Iteration   6: 4439773.624 us/op
Iteration   7: 4417822.956 us/op
Iteration   8: 4450014.779 us/op
Iteration   9: 4437173.551 us/op
Iteration  10: 4440957.201 us/op
Iteration  11: 4418180.768 us/op
Iteration  12: 4438570.872 us/op
Iteration  13: 4417456.748 us/op
Iteration  14: 4442744.535 us/op
Iteration  15: 4435644.034 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  4434701.018 ±(99.9%) 13760.633 us/op [Average]
  (min, avg, max) = (4416570.745, 4434701.018, 4460812.410), stdev = 12871.705
  CI (99.9%): [4420940.385, 4448461.651] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 61.97% complete, ETA 01:33:40
# Fork: 1 of 1
# Warmup Iteration   1: 1.848 us/op
# Warmup Iteration   2: 1.846 us/op
# Warmup Iteration   3: 1.843 us/op
# Warmup Iteration   4: 1.844 us/op
# Warmup Iteration   5: 1.845 us/op
Iteration   1: 1.845 us/op
Iteration   2: 1.845 us/op
Iteration   3: 1.844 us/op
Iteration   4: 1.846 us/op
Iteration   5: 1.845 us/op
Iteration   6: 1.845 us/op
Iteration   7: 1.844 us/op
Iteration   8: 1.845 us/op
Iteration   9: 1.845 us/op
Iteration  10: 1.845 us/op
Iteration  11: 1.846 us/op
Iteration  12: 1.846 us/op
Iteration  13: 1.846 us/op
Iteration  14: 1.845 us/op
Iteration  15: 1.846 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  1.845 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (1.844, 1.845, 1.846), stdev = 0.001
  CI (99.9%): [1.845, 1.846] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 63.38% complete, ETA 01:30:09
# Fork: 1 of 1
# Warmup Iteration   1: 4.916 us/op
# Warmup Iteration   2: 4.918 us/op
# Warmup Iteration   3: 4.922 us/op
# Warmup Iteration   4: 4.906 us/op
# Warmup Iteration   5: 4.909 us/op
Iteration   1: 4.913 us/op
Iteration   2: 4.919 us/op
Iteration   3: 4.907 us/op
Iteration   4: 4.922 us/op
Iteration   5: 4.909 us/op
Iteration   6: 4.906 us/op
Iteration   7: 4.905 us/op
Iteration   8: 4.905 us/op
Iteration   9: 4.908 us/op
Iteration  10: 4.910 us/op
Iteration  11: 4.916 us/op
Iteration  12: 4.923 us/op
Iteration  13: 4.914 us/op
Iteration  14: 4.912 us/op
Iteration  15: 4.914 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  4.912 ±(99.9%) 0.006 us/op [Average]
  (min, avg, max) = (4.905, 4.912, 4.923), stdev = 0.006
  CI (99.9%): [4.906, 4.918] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 64.79% complete, ETA 01:26:39
# Fork: 1 of 1
# Warmup Iteration   1: 8.975 us/op
# Warmup Iteration   2: 8.977 us/op
# Warmup Iteration   3: 8.966 us/op
# Warmup Iteration   4: 8.963 us/op
# Warmup Iteration   5: 8.957 us/op
Iteration   1: 8.958 us/op
Iteration   2: 8.959 us/op
Iteration   3: 8.964 us/op
Iteration   4: 8.985 us/op
Iteration   5: 8.967 us/op
Iteration   6: 8.970 us/op
Iteration   7: 8.963 us/op
Iteration   8: 8.966 us/op
Iteration   9: 8.975 us/op
Iteration  10: 8.957 us/op
Iteration  11: 8.959 us/op
Iteration  12: 9.007 us/op
Iteration  13: 8.972 us/op
Iteration  14: 8.978 us/op
Iteration  15: 8.976 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  8.971 ±(99.9%) 0.014 us/op [Average]
  (min, avg, max) = (8.957, 8.971, 9.007), stdev = 0.013
  CI (99.9%): [8.956, 8.985] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 66.20% complete, ETA 01:23:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.068 us/op
# Warmup Iteration   2: 0.064 us/op
# Warmup Iteration   3: 0.074 us/op
# Warmup Iteration   4: 0.074 us/op
# Warmup Iteration   5: 0.074 us/op
Iteration   1: 0.074 us/op
Iteration   2: 0.074 us/op
Iteration   3: 0.074 us/op
Iteration   4: 0.074 us/op
Iteration   5: 0.074 us/op
Iteration   6: 0.074 us/op
Iteration   7: 0.074 us/op
Iteration   8: 0.074 us/op
Iteration   9: 0.074 us/op
Iteration  10: 0.074 us/op
Iteration  11: 0.074 us/op
Iteration  12: 0.076 us/op
Iteration  13: 0.076 us/op
Iteration  14: 0.074 us/op
Iteration  15: 0.074 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.074 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.074, 0.074, 0.076), stdev = 0.001
  CI (99.9%): [0.074, 0.075] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 67.61% complete, ETA 01:19:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.639 us/op
# Warmup Iteration   2: 0.603 us/op
# Warmup Iteration   3: 0.641 us/op
# Warmup Iteration   4: 0.649 us/op
# Warmup Iteration   5: 0.655 us/op
Iteration   1: 0.653 us/op
Iteration   2: 0.654 us/op
Iteration   3: 0.653 us/op
Iteration   4: 0.643 us/op
Iteration   5: 0.645 us/op
Iteration   6: 0.642 us/op
Iteration   7: 0.652 us/op
Iteration   8: 0.644 us/op
Iteration   9: 0.653 us/op
Iteration  10: 0.641 us/op
Iteration  11: 0.664 us/op
Iteration  12: 0.651 us/op
Iteration  13: 0.651 us/op
Iteration  14: 0.648 us/op
Iteration  15: 0.641 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.649 ±(99.9%) 0.007 us/op [Average]
  (min, avg, max) = (0.641, 0.649, 0.664), stdev = 0.006
  CI (99.9%): [0.642, 0.656] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 69.01% complete, ETA 01:16:09
# Fork: 1 of 1
# Warmup Iteration   1: 6.680 us/op
# Warmup Iteration   2: 6.228 us/op
# Warmup Iteration   3: 6.208 us/op
# Warmup Iteration   4: 6.221 us/op
# Warmup Iteration   5: 6.213 us/op
Iteration   1: 6.194 us/op
Iteration   2: 6.223 us/op
Iteration   3: 6.213 us/op
Iteration   4: 6.158 us/op
Iteration   5: 6.198 us/op
Iteration   6: 6.164 us/op
Iteration   7: 6.129 us/op
Iteration   8: 6.199 us/op
Iteration   9: 6.234 us/op
Iteration  10: 6.217 us/op
Iteration  11: 6.196 us/op
Iteration  12: 6.188 us/op
Iteration  13: 6.233 us/op
Iteration  14: 6.205 us/op
Iteration  15: 6.229 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  6.199 ±(99.9%) 0.032 us/op [Average]
  (min, avg, max) = (6.129, 6.199, 6.234), stdev = 0.030
  CI (99.9%): [6.167, 6.230] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 70.42% complete, ETA 01:12:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.061 us/op
# Warmup Iteration   2: 0.065 us/op
# Warmup Iteration   3: 0.071 us/op
# Warmup Iteration   4: 0.071 us/op
# Warmup Iteration   5: 0.071 us/op
Iteration   1: 0.071 us/op
Iteration   2: 0.071 us/op
Iteration   3: 0.072 us/op
Iteration   4: 0.071 us/op
Iteration   5: 0.072 us/op
Iteration   6: 0.071 us/op
Iteration   7: 0.072 us/op
Iteration   8: 0.071 us/op
Iteration   9: 0.071 us/op
Iteration  10: 0.072 us/op
Iteration  11: 0.071 us/op
Iteration  12: 0.072 us/op
Iteration  13: 0.071 us/op
Iteration  14: 0.072 us/op
Iteration  15: 0.072 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.071 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.071, 0.071, 0.072), stdev = 0.001
  CI (99.9%): [0.071, 0.072] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 71.83% complete, ETA 01:09:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.577 us/op
# Warmup Iteration   2: 0.606 us/op
# Warmup Iteration   3: 0.715 us/op
# Warmup Iteration   4: 0.727 us/op
# Warmup Iteration   5: 0.725 us/op
Iteration   1: 0.715 us/op
Iteration   2: 0.716 us/op
Iteration   3: 0.717 us/op
Iteration   4: 0.715 us/op
Iteration   5: 0.717 us/op
Iteration   6: 0.725 us/op
Iteration   7: 0.714 us/op
Iteration   8: 0.726 us/op
Iteration   9: 0.714 us/op
Iteration  10: 0.716 us/op
Iteration  11: 0.724 us/op
Iteration  12: 0.715 us/op
Iteration  13: 0.716 us/op
Iteration  14: 0.716 us/op
Iteration  15: 0.714 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.717 ±(99.9%) 0.004 us/op [Average]
  (min, avg, max) = (0.714, 0.717, 0.726), stdev = 0.004
  CI (99.9%): [0.713, 0.722] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 73.24% complete, ETA 01:05:41
# Fork: 1 of 1
# Warmup Iteration   1: 6.282 us/op
# Warmup Iteration   2: 7.655 us/op
# Warmup Iteration   3: 7.205 us/op
# Warmup Iteration   4: 7.252 us/op
# Warmup Iteration   5: 7.302 us/op
Iteration   1: 7.281 us/op
Iteration   2: 7.224 us/op
Iteration   3: 7.301 us/op
Iteration   4: 7.326 us/op
Iteration   5: 7.233 us/op
Iteration   6: 7.261 us/op
Iteration   7: 7.276 us/op
Iteration   8: 7.243 us/op
Iteration   9: 7.308 us/op
Iteration  10: 7.230 us/op
Iteration  11: 7.244 us/op
Iteration  12: 7.305 us/op
Iteration  13: 7.264 us/op
Iteration  14: 7.243 us/op
Iteration  15: 7.320 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  7.270 ±(99.9%) 0.037 us/op [Average]
  (min, avg, max) = (7.224, 7.270, 7.326), stdev = 0.035
  CI (99.9%): [7.233, 7.307] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 74.65% complete, ETA 01:02:12
# Fork: 1 of 1
# Warmup Iteration   1: 14381.499 us/op
# Warmup Iteration   2: 14328.855 us/op
# Warmup Iteration   3: 14331.508 us/op
# Warmup Iteration   4: 14318.916 us/op
# Warmup Iteration   5: 14325.608 us/op
Iteration   1: 14322.678 us/op
Iteration   2: 14329.521 us/op
Iteration   3: 14329.702 us/op
Iteration   4: 14334.835 us/op
Iteration   5: 14330.054 us/op
Iteration   6: 14334.953 us/op
Iteration   7: 14330.920 us/op
Iteration   8: 14332.941 us/op
Iteration   9: 14325.824 us/op
Iteration  10: 14333.532 us/op
Iteration  11: 14321.394 us/op
Iteration  12: 14339.070 us/op
Iteration  13: 14331.407 us/op
Iteration  14: 14329.301 us/op
Iteration  15: 14322.176 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  14329.887 ±(99.9%) 5.429 us/op [Average]
  (min, avg, max) = (14321.394, 14329.887, 14339.070), stdev = 5.078
  CI (99.9%): [14324.458, 14335.316] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 76.06% complete, ETA 00:58:44
# Fork: 1 of 1
# Warmup Iteration   1: 349.083 us/op
# Warmup Iteration   2: 346.063 us/op
# Warmup Iteration   3: 345.657 us/op
# Warmup Iteration   4: 345.006 us/op
# Warmup Iteration   5: 344.147 us/op
Iteration   1: 345.148 us/op
Iteration   2: 344.088 us/op
Iteration   3: 343.604 us/op
Iteration   4: 343.525 us/op
Iteration   5: 345.424 us/op
Iteration   6: 345.757 us/op
Iteration   7: 344.281 us/op
Iteration   8: 343.966 us/op
Iteration   9: 343.814 us/op
Iteration  10: 343.462 us/op
Iteration  11: 343.777 us/op
Iteration  12: 346.385 us/op
Iteration  13: 345.283 us/op
Iteration  14: 344.885 us/op
Iteration  15: 345.130 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  344.569 ±(99.9%) 0.982 us/op [Average]
  (min, avg, max) = (343.462, 344.569, 346.385), stdev = 0.919
  CI (99.9%): [343.586, 345.551] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 77.46% complete, ETA 00:55:15
# Fork: 1 of 1
# Warmup Iteration   1: 34434.729 us/op
# Warmup Iteration   2: 34190.783 us/op
# Warmup Iteration   3: 34282.281 us/op
# Warmup Iteration   4: 34159.574 us/op
# Warmup Iteration   5: 34320.071 us/op
Iteration   1: 34194.689 us/op
Iteration   2: 34167.206 us/op
Iteration   3: 34211.952 us/op
Iteration   4: 34132.864 us/op
Iteration   5: 34157.480 us/op
Iteration   6: 34100.413 us/op
Iteration   7: 34135.447 us/op
Iteration   8: 34139.061 us/op
Iteration   9: 34164.615 us/op
Iteration  10: 34396.370 us/op
Iteration  11: 34224.009 us/op
Iteration  12: 34150.170 us/op
Iteration  13: 34220.383 us/op
Iteration  14: 34125.327 us/op
Iteration  15: 34183.044 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  34180.202 ±(99.9%) 74.852 us/op [Average]
  (min, avg, max) = (34100.413, 34180.202, 34396.370), stdev = 70.016
  CI (99.9%): [34105.350, 34255.054] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 78.87% complete, ETA 00:51:47
# Fork: 1 of 1
# Warmup Iteration   1: 3430264.645 us/op
# Warmup Iteration   2: 3409002.314 us/op
# Warmup Iteration   3: 5731639.662 us/op
# Warmup Iteration   4: 3404225.333 us/op
# Warmup Iteration   5: 3401423.195 us/op
Iteration   1: 7818495.318 us/op
Iteration   2: 7811045.285 us/op
Iteration   3: 7803196.099 us/op
Iteration   4: 7812819.556 us/op
Iteration   5: 7824585.897 us/op
Iteration   6: 7803706.339 us/op
Iteration   7: 7814017.911 us/op
Iteration   8: 7806303.575 us/op
Iteration   9: 7831688.419 us/op
Iteration  10: 7806107.789 us/op
Iteration  11: 7820236.372 us/op
Iteration  12: 7824191.836 us/op
Iteration  13: 7821219.127 us/op
Iteration  14: 7801785.654 us/op
Iteration  15: 7816147.220 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  7814369.760 ±(99.9%) 9672.787 us/op [Average]
  (min, avg, max) = (7801785.654, 7814369.760, 7831688.419), stdev = 9047.931
  CI (99.9%): [7804696.973, 7824042.546] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 80.28% complete, ETA 00:48:40
# Fork: 1 of 1
# Warmup Iteration   1: 2261.519 us/op
# Warmup Iteration   2: 2257.378 us/op
# Warmup Iteration   3: 2255.772 us/op
# Warmup Iteration   4: 2257.981 us/op
# Warmup Iteration   5: 2256.804 us/op
Iteration   1: 2260.191 us/op
Iteration   2: 2256.842 us/op
Iteration   3: 2254.508 us/op
Iteration   4: 2252.852 us/op
Iteration   5: 2256.560 us/op
Iteration   6: 2257.009 us/op
Iteration   7: 2257.389 us/op
Iteration   8: 2257.184 us/op
Iteration   9: 2255.460 us/op
Iteration  10: 2253.810 us/op
Iteration  11: 2254.064 us/op
Iteration  12: 2265.297 us/op
Iteration  13: 2256.632 us/op
Iteration  14: 2254.131 us/op
Iteration  15: 2254.817 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  2256.450 ±(99.9%) 3.290 us/op [Average]
  (min, avg, max) = (2252.852, 2256.450, 2265.297), stdev = 3.078
  CI (99.9%): [2253.159, 2259.740] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 81.69% complete, ETA 00:45:11
# Fork: 1 of 1
# Warmup Iteration   1: 62140.948 us/op
# Warmup Iteration   2: 62122.699 us/op
# Warmup Iteration   3: 62140.973 us/op
# Warmup Iteration   4: 62105.342 us/op
# Warmup Iteration   5: 62199.845 us/op
Iteration   1: 62127.916 us/op
Iteration   2: 62072.191 us/op
Iteration   3: 62051.861 us/op
Iteration   4: 62099.957 us/op
Iteration   5: 62051.109 us/op
Iteration   6: 62069.657 us/op
Iteration   7: 62112.814 us/op
Iteration   8: 62092.685 us/op
Iteration   9: 62090.398 us/op
Iteration  10: 62131.231 us/op
Iteration  11: 62091.445 us/op
Iteration  12: 62121.465 us/op
Iteration  13: 62077.376 us/op
Iteration  14: 62126.551 us/op
Iteration  15: 62118.265 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  62095.661 ±(99.9%) 28.953 us/op [Average]
  (min, avg, max) = (62051.109, 62095.661, 62131.231), stdev = 27.082
  CI (99.9%): [62066.709, 62124.614] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 83.10% complete, ETA 00:41:41
# Fork: 1 of 1
# Warmup Iteration   1: 1709021.331 us/op
# Warmup Iteration   2: 1703542.416 us/op
# Warmup Iteration   3: 1704926.010 us/op
# Warmup Iteration   4: 1702674.782 us/op
# Warmup Iteration   5: 1703908.066 us/op
Iteration   1: 1704989.403 us/op
Iteration   2: 1703915.062 us/op
Iteration   3: 1704441.424 us/op
Iteration   4: 1704108.917 us/op
Iteration   5: 1703193.436 us/op
Iteration   6: 1703362.712 us/op
Iteration   7: 1703396.842 us/op
Iteration   8: 1704873.228 us/op
Iteration   9: 1703696.549 us/op
Iteration  10: 1703506.109 us/op
Iteration  11: 1703609.109 us/op
Iteration  12: 1703620.503 us/op
Iteration  13: 1704836.484 us/op
Iteration  14: 1704718.743 us/op
Iteration  15: 1704218.665 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  1704032.479 ±(99.9%) 655.098 us/op [Average]
  (min, avg, max) = (1703193.436, 1704032.479, 1704989.403), stdev = 612.779
  CI (99.9%): [1703377.381, 1704687.577] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 84.51% complete, ETA 00:38:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.565 us/op
# Warmup Iteration   2: 0.563 us/op
# Warmup Iteration   3: 0.561 us/op
# Warmup Iteration   4: 0.561 us/op
# Warmup Iteration   5: 0.562 us/op
Iteration   1: 0.562 us/op
Iteration   2: 0.562 us/op
Iteration   3: 0.563 us/op
Iteration   4: 0.561 us/op
Iteration   5: 0.561 us/op
Iteration   6: 0.561 us/op
Iteration   7: 0.562 us/op
Iteration   8: 0.562 us/op
Iteration   9: 0.563 us/op
Iteration  10: 0.561 us/op
Iteration  11: 0.562 us/op
Iteration  12: 0.567 us/op
Iteration  13: 0.566 us/op
Iteration  14: 0.567 us/op
Iteration  15: 0.567 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  0.563 ±(99.9%) 0.002 us/op [Average]
  (min, avg, max) = (0.561, 0.563, 0.567), stdev = 0.002
  CI (99.9%): [0.561, 0.566] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 85.92% complete, ETA 00:34:44
# Fork: 1 of 1
# Warmup Iteration   1: 7697.433 us/op
# Warmup Iteration   2: 7851.081 us/op
# Warmup Iteration   3: 7848.962 us/op
# Warmup Iteration   4: 7845.086 us/op
# Warmup Iteration   5: 7851.045 us/op
Iteration   1: 7847.884 us/op
Iteration   2: 7845.317 us/op
Iteration   3: 7847.234 us/op
Iteration   4: 7842.301 us/op
Iteration   5: 7845.406 us/op
Iteration   6: 7846.577 us/op
Iteration   7: 7845.727 us/op
Iteration   8: 7847.604 us/op
Iteration   9: 7854.522 us/op
Iteration  10: 7848.070 us/op
Iteration  11: 7846.123 us/op
Iteration  12: 7849.383 us/op
Iteration  13: 7854.143 us/op
Iteration  14: 7847.810 us/op
Iteration  15: 7850.155 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  7847.884 ±(99.9%) 3.435 us/op [Average]
  (min, avg, max) = (7842.301, 7847.884, 7854.522), stdev = 3.213
  CI (99.9%): [7844.449, 7851.319] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 87.32% complete, ETA 00:31:15
# Fork: 1 of 1
# Warmup Iteration   1: 37838.542 us/op
# Warmup Iteration   2: 37668.744 us/op
# Warmup Iteration   3: 39533.939 us/op
# Warmup Iteration   4: 38440.071 us/op
# Warmup Iteration   5: 37371.033 us/op
Iteration   1: 42738.440 us/op
Iteration   2: 40612.292 us/op
Iteration   3: 37199.229 us/op
Iteration   4: 38560.986 us/op
Iteration   5: 37998.863 us/op
Iteration   6: 36786.839 us/op
Iteration   7: 36754.630 us/op
Iteration   8: 37807.904 us/op
Iteration   9: 35423.788 us/op
Iteration  10: 35753.745 us/op
Iteration  11: 37122.667 us/op
Iteration  12: 34999.829 us/op
Iteration  13: 41660.461 us/op
Iteration  14: 40452.580 us/op
Iteration  15: 33944.022 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  37854.418 ±(99.9%) 2714.970 us/op [Average]
  (min, avg, max) = (33944.022, 37854.418, 42738.440), stdev = 2539.585
  CI (99.9%): [35139.448, 40569.389] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 88.73% complete, ETA 00:27:46
# Fork: 1 of 1
# Warmup Iteration   1: 35680.395 us/op
# Warmup Iteration   2: 35457.912 us/op
# Warmup Iteration   3: 35495.911 us/op
# Warmup Iteration   4: 35490.788 us/op
# Warmup Iteration   5: 35442.540 us/op
Iteration   1: 35451.638 us/op
Iteration   2: 35551.548 us/op
Iteration   3: 35522.244 us/op
Iteration   4: 35549.836 us/op
Iteration   5: 35672.802 us/op
Iteration   6: 35513.036 us/op
Iteration   7: 35492.709 us/op
Iteration   8: 35550.515 us/op
Iteration   9: 35524.103 us/op
Iteration  10: 35445.371 us/op
Iteration  11: 35498.304 us/op
Iteration  12: 35515.050 us/op
Iteration  13: 35583.574 us/op
Iteration  14: 35485.679 us/op
Iteration  15: 35439.976 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  35519.759 ±(99.9%) 63.466 us/op [Average]
  (min, avg, max) = (35439.976, 35519.759, 35672.802), stdev = 59.366
  CI (99.9%): [35456.293, 35583.225] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 90.14% complete, ETA 00:24:17
# Fork: 1 of 1
# Warmup Iteration   1: 27635.305 us/op
# Warmup Iteration   2: 27471.303 us/op
# Warmup Iteration   3: 27365.011 us/op
# Warmup Iteration   4: 27429.818 us/op
# Warmup Iteration   5: 27574.225 us/op
Iteration   1: 27378.833 us/op
Iteration   2: 27592.074 us/op
Iteration   3: 27375.230 us/op
Iteration   4: 27458.709 us/op
Iteration   5: 27554.923 us/op
Iteration   6: 27388.837 us/op
Iteration   7: 27337.967 us/op
Iteration   8: 27350.678 us/op
Iteration   9: 27384.262 us/op
Iteration  10: 27421.248 us/op
Iteration  11: 27428.957 us/op
Iteration  12: 27345.084 us/op
Iteration  13: 27409.436 us/op
Iteration  14: 27340.680 us/op
Iteration  15: 27450.828 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  27414.516 ±(99.9%) 80.505 us/op [Average]
  (min, avg, max) = (27337.967, 27414.516, 27592.074), stdev = 75.305
  CI (99.9%): [27334.011, 27495.022] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 91.55% complete, ETA 00:20:48
# Fork: 1 of 1
# Warmup Iteration   1: 21885.812 us/op
# Warmup Iteration   2: 21902.257 us/op
# Warmup Iteration   3: 21873.368 us/op
# Warmup Iteration   4: 21894.531 us/op
# Warmup Iteration   5: 21873.187 us/op
Iteration   1: 22016.072 us/op
Iteration   2: 21851.235 us/op
Iteration   3: 21895.877 us/op
Iteration   4: 21816.165 us/op
Iteration   5: 21857.966 us/op
Iteration   6: 21837.997 us/op
Iteration   7: 21862.867 us/op
Iteration   8: 21740.899 us/op
Iteration   9: 21838.788 us/op
Iteration  10: 21771.627 us/op
Iteration  11: 21812.521 us/op
Iteration  12: 21905.892 us/op
Iteration  13: 21907.577 us/op
Iteration  14: 21781.348 us/op
Iteration  15: 21772.839 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  21844.645 ±(99.9%) 74.207 us/op [Average]
  (min, avg, max) = (21740.899, 21844.645, 22016.072), stdev = 69.414
  CI (99.9%): [21770.437, 21918.852] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 92.96% complete, ETA 00:17:20
# Fork: 1 of 1
# Warmup Iteration   1: 39402.411 us/op
# Warmup Iteration   2: 40614.482 us/op
# Warmup Iteration   3: 38995.548 us/op
# Warmup Iteration   4: 41480.334 us/op
# Warmup Iteration   5: 41821.705 us/op
Iteration   1: 38888.848 us/op
Iteration   2: 38454.560 us/op
Iteration   3: 39297.310 us/op
Iteration   4: 38711.496 us/op
Iteration   5: 38952.238 us/op
Iteration   6: 40751.810 us/op
Iteration   7: 38993.966 us/op
Iteration   8: 40026.106 us/op
Iteration   9: 40265.498 us/op
Iteration  10: 39231.508 us/op
Iteration  11: 40144.518 us/op
Iteration  12: 37912.138 us/op
Iteration  13: 38437.352 us/op
Iteration  14: 39221.552 us/op
Iteration  15: 40984.779 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  39351.579 ±(99.9%) 956.405 us/op [Average]
  (min, avg, max) = (37912.138, 39351.579, 40984.779), stdev = 894.622
  CI (99.9%): [38395.173, 40307.984] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 94.37% complete, ETA 00:13:52
# Fork: 1 of 1
# Warmup Iteration   1: 664.801 us/op
# Warmup Iteration   2: 658.877 us/op
# Warmup Iteration   3: 659.551 us/op
# Warmup Iteration   4: 660.574 us/op
# Warmup Iteration   5: 658.938 us/op
Iteration   1: 661.547 us/op
Iteration   2: 661.467 us/op
Iteration   3: 659.019 us/op
Iteration   4: 661.149 us/op
Iteration   5: 658.445 us/op
Iteration   6: 660.302 us/op
Iteration   7: 662.027 us/op
Iteration   8: 659.938 us/op
Iteration   9: 658.765 us/op
Iteration  10: 659.364 us/op
Iteration  11: 659.759 us/op
Iteration  12: 662.866 us/op
Iteration  13: 659.544 us/op
Iteration  14: 657.454 us/op
Iteration  15: 657.200 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  659.923 ±(99.9%) 1.763 us/op [Average]
  (min, avg, max) = (657.200, 659.923, 662.866), stdev = 1.649
  CI (99.9%): [658.160, 661.686] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 95.77% complete, ETA 00:10:23
# Fork: 1 of 1
# Warmup Iteration   1: 10017.691 us/op
# Warmup Iteration   2: 9947.518 us/op
# Warmup Iteration   3: 9967.797 us/op
# Warmup Iteration   4: 10005.115 us/op
# Warmup Iteration   5: 9992.785 us/op
Iteration   1: 10021.819 us/op
Iteration   2: 9997.859 us/op
Iteration   3: 10059.537 us/op
Iteration   4: 10069.128 us/op
Iteration   5: 9960.489 us/op
Iteration   6: 10023.711 us/op
Iteration   7: 9976.787 us/op
Iteration   8: 10011.281 us/op
Iteration   9: 10026.483 us/op
Iteration  10: 9996.963 us/op
Iteration  11: 10047.369 us/op
Iteration  12: 9977.001 us/op
Iteration  13: 10039.851 us/op
Iteration  14: 9985.965 us/op
Iteration  15: 9996.754 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  10012.733 ±(99.9%) 34.334 us/op [Average]
  (min, avg, max) = (9960.489, 10012.733, 10069.128), stdev = 32.116
  CI (99.9%): [9978.399, 10047.067] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 97.18% complete, ETA 00:06:55
# Fork: 1 of 1
# Warmup Iteration   1: 111325.287 us/op
# Warmup Iteration   2: 110454.207 us/op
# Warmup Iteration   3: 109857.396 us/op
# Warmup Iteration   4: 110247.489 us/op
# Warmup Iteration   5: 110082.131 us/op
Iteration   1: 109751.035 us/op
Iteration   2: 109832.172 us/op
Iteration   3: 110404.640 us/op
Iteration   4: 110192.744 us/op
Iteration   5: 110185.487 us/op
Iteration   6: 109902.287 us/op
Iteration   7: 110018.807 us/op
Iteration   8: 109709.314 us/op
Iteration   9: 109742.903 us/op
Iteration  10: 110578.672 us/op
Iteration  11: 109979.941 us/op
Iteration  12: 109993.421 us/op
Iteration  13: 110226.371 us/op
Iteration  14: 109967.851 us/op
Iteration  15: 109932.002 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  110027.843 ±(99.9%) 265.966 us/op [Average]
  (min, avg, max) = (109709.314, 110027.843, 110578.672), stdev = 248.785
  CI (99.9%): [109761.877, 110293.810] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 98.59% complete, ETA 00:03:27
# Fork: 1 of 1
# Warmup Iteration   1: 3080137.714 us/op
# Warmup Iteration   2: 2761907.390 us/op
# Warmup Iteration   3: 3047129.210 us/op
# Warmup Iteration   4: 3114801.507 us/op
# Warmup Iteration   5: 2922107.233 us/op
Iteration   1: 2987800.596 us/op
Iteration   2: 2945414.095 us/op
Iteration   3: 2885792.768 us/op
Iteration   4: 2914981.741 us/op
Iteration   5: 2811204.618 us/op
Iteration   6: 3009411.453 us/op
Iteration   7: 3156289.838 us/op
Iteration   8: 3039675.772 us/op
Iteration   9: 3071471.291 us/op
Iteration  10: 3109741.522 us/op
Iteration  11: 2626814.417 us/op
Iteration  12: 2798051.505 us/op
Iteration  13: 2872248.053 us/op
Iteration  14: 2946180.777 us/op
Iteration  15: 3094739.244 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  2951321.179 ±(99.9%) 149827.401 us/op [Average]
  (min, avg, max) = (2626814.417, 2951321.179, 3156289.838), stdev = 140148.644
  CI (99.9%): [2801493.778, 3101148.581] (assumes normal distribution)


# Run complete. Total time: 04:06:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (iterations)  (length)     (size)   Mode  Cnt        Score        Error   Units
c.g.k.j.b.array.ArrayBenchmark.read                                                     N/A       N/A        N/A  thrpt   15        0.003 ±      0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                             N/A       N/A        N/A  thrpt   15        0.006 ±      0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.swap                                                     N/A       N/A        N/A  thrpt   15        0.003 ±      0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.write                                                    N/A       N/A        N/A  thrpt   15        0.006 ±      0.001  ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                     521       N/A        N/A  thrpt   15        0.542 ±      0.001  ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                    1153       N/A        N/A  thrpt   15        0.203 ±      0.001  ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                    2021       N/A        N/A  thrpt   15        0.111 ±      0.001  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                        N/A       N/A         10  thrpt   15       13.468 ±      0.104  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                        N/A       N/A        100  thrpt   15        1.548 ±      0.013  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                        N/A       N/A       1000  thrpt   15        0.161 ±      0.001  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                        N/A       N/A         10  thrpt   15       14.078 ±      0.041  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                        N/A       N/A        100  thrpt   15        1.469 ±      0.012  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                        N/A       N/A       1000  thrpt   15        0.138 ±      0.001  ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                   N/A       N/A        N/A  thrpt   15       ≈ 10⁻³               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                       N/A       N/A        N/A  thrpt   15       ≈ 10⁻⁵               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                     N/A       N/A        N/A  thrpt   15       ≈ 10⁻⁶               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                        N/A       N/A        N/A  thrpt   15        1.781 ±      0.002  ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                              N/A       N/A        N/A  thrpt   15       ≈ 10⁻⁴               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                   N/A       N/A        N/A  thrpt   15       ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                               N/A       N/A        512   avgt   15   177995.858 ±    492.104   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                               N/A       N/A       1024   avgt   15   239943.284 ±   1529.343   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                               N/A       N/A       2048   avgt   15   260806.730 ±    559.849   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                               N/A       N/A      10240   avgt   15   241148.579 ±    378.395   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                               N/A       N/A     102400   avgt   15   220983.007 ±    403.429   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                               N/A       N/A    1048576   avgt   15   216082.668 ±    398.881   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                               N/A       N/A    2097152   avgt   15   216099.324 ±    372.656   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                               N/A       N/A   10485760   avgt   15   215556.289 ±    382.596   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                               N/A       N/A  104857600   avgt   15   211146.850 ±    417.286   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A        512   avgt   15   959264.655 ±  83010.381   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A       1024   avgt   15  1199127.661 ±   3266.522   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A       2048   avgt   15  1052010.076 ±   3445.761   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A      10240   avgt   15   994727.209 ±   2799.985   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A     102400   avgt   15   888454.969 ±   1488.068   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A    1048576   avgt   15   875132.108 ±   5719.121   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A    2097152   avgt   15   871902.800 ±   2878.749   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A   10485760   avgt   15   875587.203 ±   1313.028   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                       N/A       N/A  104857600   avgt   15   854917.087 ±   1547.290   us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                     N/A       N/A        N/A   avgt   15      375.477 ±      0.236   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                             N/A       N/A        N/A   avgt   15      165.684 ±      0.780   us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                     N/A       N/A        N/A   avgt   15      300.811 ±      0.097   us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                    N/A       N/A        N/A   avgt   15      171.596 ±      1.009   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                 N/A       N/A        N/A   avgt   15   786826.223 ±   8611.098   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                         N/A       100        N/A   avgt   15   154773.523 ±   1821.151   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                         N/A      1000        N/A   avgt   15  4434701.018 ±  13760.633   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                     521       N/A        N/A   avgt   15        1.845 ±      0.001   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                    1153       N/A        N/A   avgt   15        4.912 ±      0.006   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                    2021       N/A        N/A   avgt   15        8.971 ±      0.014   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                        N/A       N/A         10   avgt   15        0.074 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                        N/A       N/A        100   avgt   15        0.649 ±      0.007   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                        N/A       N/A       1000   avgt   15        6.199 ±      0.032   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                        N/A       N/A         10   avgt   15        0.071 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                        N/A       N/A        100   avgt   15        0.717 ±      0.004   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                        N/A       N/A       1000   avgt   15        7.270 ±      0.037   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                       N/A       N/A        N/A   avgt   15    14329.887 ±      5.429   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                         N/A       100        N/A   avgt   15      344.569 ±      0.982   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                         N/A      1000        N/A   avgt   15    34180.202 ±     74.852   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                         N/A     10000        N/A   avgt   15  7814369.760 ±   9672.787   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                   N/A       N/A        N/A   avgt   15     2256.450 ±      3.290   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                       N/A       N/A        N/A   avgt   15    62095.661 ±     28.953   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                     N/A       N/A        N/A   avgt   15  1704032.479 ±    655.098   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                        N/A       N/A        N/A   avgt   15        0.563 ±      0.002   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                              N/A       N/A        N/A   avgt   15     7847.884 ±      3.435   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                   N/A       N/A        N/A   avgt   15    37854.418 ±   2714.970   us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                            N/A       N/A        N/A   avgt   15    35519.759 ±     63.466   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                              N/A       N/A        N/A   avgt   15    27414.516 ±     80.505   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                N/A       N/A        N/A   avgt   15    21844.645 ±     74.207   us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                   N/A       N/A        N/A   avgt   15    39351.579 ±    956.405   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings           N/A        10        N/A   avgt   15      659.923 ±      1.763   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings           N/A       100        N/A   avgt   15    10012.733 ±     34.334   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings           N/A      1000        N/A   avgt   15   110027.843 ±    265.966   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                              N/A       N/A        N/A   avgt   15  2951321.179 ± 149827.401   us/op
