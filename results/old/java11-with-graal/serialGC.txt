# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 0.00% complete, ETA 07:40:00
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 0.72% complete, ETA 08:19:26
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 1.45% complete, ETA 08:13:31
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 2.17% complete, ETA 08:08:12
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 2.90% complete, ETA 08:04:29
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 3.62% complete, ETA 08:00:23
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 4.35% complete, ETA 07:56:32
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 5.07% complete, ETA 07:56:50
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 5.80% complete, ETA 07:52:50
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 6.52% complete, ETA 07:49:17
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 7.25% complete, ETA 07:46:31
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 7.97% complete, ETA 07:42:55
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 8.70% complete, ETA 07:39:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ops/us
# Warmup Iteration   2: 0.002 ops/us
# Warmup Iteration   3: 0.002 ops/us
# Warmup Iteration   4: 0.002 ops/us
# Warmup Iteration   5: 0.002 ops/us
Iteration   1: 0.002 ops/us
Iteration   2: 0.002 ops/us
Iteration   3: 0.002 ops/us
Iteration   4: 0.002 ops/us
Iteration   5: 0.002 ops/us
Iteration   6: 0.002 ops/us
Iteration   7: 0.002 ops/us
Iteration   8: 0.002 ops/us
Iteration   9: 0.002 ops/us
Iteration  10: 0.002 ops/us
Iteration  11: 0.002 ops/us
Iteration  12: 0.002 ops/us
Iteration  13: 0.002 ops/us
Iteration  14: 0.002 ops/us
Iteration  15: 0.002 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  0.002 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 9.42% complete, ETA 07:35:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ops/us
# Warmup Iteration   2: 0.002 ops/us
# Warmup Iteration   3: 0.002 ops/us
# Warmup Iteration   4: 0.002 ops/us
# Warmup Iteration   5: 0.002 ops/us
Iteration   1: 0.001 ops/us
Iteration   2: 0.001 ops/us
Iteration   3: 0.002 ops/us
Iteration   4: 0.002 ops/us
Iteration   5: 0.002 ops/us
Iteration   6: 0.002 ops/us
Iteration   7: 0.002 ops/us
Iteration   8: 0.002 ops/us
Iteration   9: 0.002 ops/us
Iteration  10: 0.002 ops/us
Iteration  11: 0.002 ops/us
Iteration  12: 0.002 ops/us
Iteration  13: 0.002 ops/us
Iteration  14: 0.002 ops/us
Iteration  15: 0.002 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  0.002 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 10.14% complete, ETA 07:31:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ops/us
# Warmup Iteration   2: 0.001 ops/us
# Warmup Iteration   3: 0.001 ops/us
# Warmup Iteration   4: 0.001 ops/us
# Warmup Iteration   5: 0.001 ops/us
Iteration   1: 0.001 ops/us
Iteration   2: 0.001 ops/us
Iteration   3: 0.001 ops/us
Iteration   4: 0.001 ops/us
Iteration   5: 0.001 ops/us
Iteration   6: 0.001 ops/us
Iteration   7: 0.001 ops/us
Iteration   8: 0.001 ops/us
Iteration   9: 0.001 ops/us
Iteration  10: 0.001 ops/us
Iteration  11: 0.001 ops/us
Iteration  12: 0.001 ops/us
Iteration  13: 0.001 ops/us
Iteration  14: 0.001 ops/us
Iteration  15: 0.001 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  0.001 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 10.87% complete, ETA 07:27:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ops/us
# Warmup Iteration   2: 0.002 ops/us
# Warmup Iteration   3: 0.002 ops/us
# Warmup Iteration   4: 0.002 ops/us
# Warmup Iteration   5: 0.002 ops/us
Iteration   1: 0.002 ops/us
Iteration   2: 0.002 ops/us
Iteration   3: 0.002 ops/us
Iteration   4: 0.002 ops/us
Iteration   5: 0.002 ops/us
Iteration   6: 0.002 ops/us
Iteration   7: 0.002 ops/us
Iteration   8: 0.002 ops/us
Iteration   9: 0.002 ops/us
Iteration  10: 0.002 ops/us
Iteration  11: 0.002 ops/us
Iteration  12: 0.002 ops/us
Iteration  13: 0.002 ops/us
Iteration  14: 0.002 ops/us
Iteration  15: 0.002 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  0.002 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 11.59% complete, ETA 07:23:10
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 12.32% complete, ETA 07:19:30
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 13.04% complete, ETA 07:15:51
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 13.77% complete, ETA 07:13:47
# Fork: 1 of 1
# Warmup Iteration   1: 1.430 ops/us
# Warmup Iteration   2: 1.474 ops/us
# Warmup Iteration   3: 1.474 ops/us
# Warmup Iteration   4: 1.475 ops/us
# Warmup Iteration   5: 1.475 ops/us
Iteration   1: 1.475 ops/us
Iteration   2: 1.475 ops/us
Iteration   3: 1.476 ops/us
Iteration   4: 1.476 ops/us
Iteration   5: 1.474 ops/us
Iteration   6: 1.473 ops/us
Iteration   7: 1.476 ops/us
Iteration   8: 1.476 ops/us
Iteration   9: 1.476 ops/us
Iteration  10: 1.476 ops/us
Iteration  11: 1.474 ops/us
Iteration  12: 1.476 ops/us
Iteration  13: 1.476 ops/us
Iteration  14: 1.476 ops/us
Iteration  15: 1.476 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  1.475 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (1.473, 1.475, 1.476), stdev = 0.001
  CI (99.9%): [1.474, 1.476] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 14.49% complete, ETA 07:09:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.604 ops/us
# Warmup Iteration   2: 0.621 ops/us
# Warmup Iteration   3: 0.621 ops/us
# Warmup Iteration   4: 0.622 ops/us
# Warmup Iteration   5: 0.621 ops/us
Iteration   1: 0.621 ops/us
Iteration   2: 0.621 ops/us
Iteration   3: 0.621 ops/us
Iteration   4: 0.621 ops/us
Iteration   5: 0.621 ops/us
Iteration   6: 0.621 ops/us
Iteration   7: 0.621 ops/us
Iteration   8: 0.621 ops/us
Iteration   9: 0.621 ops/us
Iteration  10: 0.621 ops/us
Iteration  11: 0.621 ops/us
Iteration  12: 0.621 ops/us
Iteration  13: 0.621 ops/us
Iteration  14: 0.621 ops/us
Iteration  15: 0.621 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.621 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.621, 0.621, 0.621), stdev = 0.001
  CI (99.9%): [0.621, 0.621] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 15.22% complete, ETA 07:05:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.348 ops/us
# Warmup Iteration   2: 0.358 ops/us
# Warmup Iteration   3: 0.358 ops/us
# Warmup Iteration   4: 0.358 ops/us
# Warmup Iteration   5: 0.358 ops/us
Iteration   1: 0.358 ops/us
Iteration   2: 0.358 ops/us
Iteration   3: 0.358 ops/us
Iteration   4: 0.357 ops/us
Iteration   5: 0.357 ops/us
Iteration   6: 0.358 ops/us
Iteration   7: 0.357 ops/us
Iteration   8: 0.358 ops/us
Iteration   9: 0.358 ops/us
Iteration  10: 0.358 ops/us
Iteration  11: 0.358 ops/us
Iteration  12: 0.358 ops/us
Iteration  13: 0.358 ops/us
Iteration  14: 0.358 ops/us
Iteration  15: 0.358 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.358 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.357, 0.358, 0.358), stdev = 0.001
  CI (99.9%): [0.357, 0.358] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 15.94% complete, ETA 07:01:44
# Fork: 1 of 1
# Warmup Iteration   1: 20.371 ops/us
# Warmup Iteration   2: 20.077 ops/us
# Warmup Iteration   3: 19.464 ops/us
# Warmup Iteration   4: 19.469 ops/us
# Warmup Iteration   5: 19.471 ops/us
Iteration   1: 19.464 ops/us
Iteration   2: 19.470 ops/us
Iteration   3: 18.929 ops/us
Iteration   4: 19.466 ops/us
Iteration   5: 19.186 ops/us
Iteration   6: 19.481 ops/us
Iteration   7: 19.489 ops/us
Iteration   8: 19.488 ops/us
Iteration   9: 19.483 ops/us
Iteration  10: 19.471 ops/us
Iteration  11: 19.213 ops/us
Iteration  12: 19.486 ops/us
Iteration  13: 19.195 ops/us
Iteration  14: 19.489 ops/us
Iteration  15: 19.489 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  19.387 ±(99.9%) 0.184 ops/us [Average]
  (min, avg, max) = (18.929, 19.387, 19.489), stdev = 0.172
  CI (99.9%): [19.203, 19.570] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 16.67% complete, ETA 06:57:50
# Fork: 1 of 1
# Warmup Iteration   1: 2.121 ops/us
# Warmup Iteration   2: 2.022 ops/us
# Warmup Iteration   3: 2.182 ops/us
# Warmup Iteration   4: 2.046 ops/us
# Warmup Iteration   5: 2.046 ops/us
Iteration   1: 2.043 ops/us
Iteration   2: 1.988 ops/us
Iteration   3: 1.984 ops/us
Iteration   4: 2.035 ops/us
Iteration   5: 2.002 ops/us
Iteration   6: 2.043 ops/us
Iteration   7: 2.005 ops/us
Iteration   8: 2.039 ops/us
Iteration   9: 2.043 ops/us
Iteration  10: 1.984 ops/us
Iteration  11: 2.048 ops/us
Iteration  12: 2.041 ops/us
Iteration  13: 2.041 ops/us
Iteration  14: 2.040 ops/us
Iteration  15: 2.045 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  2.025 ±(99.9%) 0.026 ops/us [Average]
  (min, avg, max) = (1.984, 2.025, 2.048), stdev = 0.025
  CI (99.9%): [1.999, 2.052] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 17.39% complete, ETA 06:53:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.200 ops/us
# Warmup Iteration   2: 0.212 ops/us
# Warmup Iteration   3: 0.197 ops/us
# Warmup Iteration   4: 0.195 ops/us
# Warmup Iteration   5: 0.195 ops/us
Iteration   1: 0.192 ops/us
Iteration   2: 0.198 ops/us
Iteration   3: 0.192 ops/us
Iteration   4: 0.192 ops/us
Iteration   5: 0.193 ops/us
Iteration   6: 0.198 ops/us
Iteration   7: 0.197 ops/us
Iteration   8: 0.195 ops/us
Iteration   9: 0.194 ops/us
Iteration  10: 0.194 ops/us
Iteration  11: 0.195 ops/us
Iteration  12: 0.196 ops/us
Iteration  13: 0.196 ops/us
Iteration  14: 0.198 ops/us
Iteration  15: 0.194 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.195 ±(99.9%) 0.002 ops/us [Average]
  (min, avg, max) = (0.192, 0.195, 0.198), stdev = 0.002
  CI (99.9%): [0.193, 0.197] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 18.12% complete, ETA 06:50:04
# Fork: 1 of 1
# Warmup Iteration   1: 17.271 ops/us
# Warmup Iteration   2: 17.209 ops/us
# Warmup Iteration   3: 20.995 ops/us
# Warmup Iteration   4: 20.999 ops/us
# Warmup Iteration   5: 20.984 ops/us
Iteration   1: 19.369 ops/us
Iteration   2: 20.993 ops/us
Iteration   3: 20.991 ops/us
Iteration   4: 20.990 ops/us
Iteration   5: 20.994 ops/us
Iteration   6: 19.480 ops/us
Iteration   7: 20.984 ops/us
Iteration   8: 20.987 ops/us
Iteration   9: 20.984 ops/us
Iteration  10: 20.977 ops/us
Iteration  11: 20.984 ops/us
Iteration  12: 19.527 ops/us
Iteration  13: 20.990 ops/us
Iteration  14: 20.984 ops/us
Iteration  15: 20.992 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  20.682 ±(99.9%) 0.678 ops/us [Average]
  (min, avg, max) = (19.369, 20.682, 20.994), stdev = 0.634
  CI (99.9%): [20.004, 21.359] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 18.84% complete, ETA 06:46:12
# Fork: 1 of 1
# Warmup Iteration   1: 1.955 ops/us
# Warmup Iteration   2: 2.327 ops/us
# Warmup Iteration   3: 1.864 ops/us
# Warmup Iteration   4: 2.312 ops/us
# Warmup Iteration   5: 2.334 ops/us
Iteration   1: 2.315 ops/us
Iteration   2: 2.280 ops/us
Iteration   3: 2.286 ops/us
Iteration   4: 2.302 ops/us
Iteration   5: 2.382 ops/us
Iteration   6: 2.286 ops/us
Iteration   7: 2.347 ops/us
Iteration   8: 2.288 ops/us
Iteration   9: 2.340 ops/us
Iteration  10: 2.311 ops/us
Iteration  11: 2.334 ops/us
Iteration  12: 2.336 ops/us
Iteration  13: 2.303 ops/us
Iteration  14: 2.333 ops/us
Iteration  15: 2.304 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  2.317 ±(99.9%) 0.030 ops/us [Average]
  (min, avg, max) = (2.280, 2.317, 2.382), stdev = 0.028
  CI (99.9%): [2.286, 2.347] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 19.56% complete, ETA 06:42:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.184 ops/us
# Warmup Iteration   2: 0.181 ops/us
# Warmup Iteration   3: 0.210 ops/us
# Warmup Iteration   4: 0.226 ops/us
# Warmup Iteration   5: 0.217 ops/us
Iteration   1: 0.211 ops/us
Iteration   2: 0.214 ops/us
Iteration   3: 0.211 ops/us
Iteration   4: 0.217 ops/us
Iteration   5: 0.214 ops/us
Iteration   6: 0.216 ops/us
Iteration   7: 0.214 ops/us
Iteration   8: 0.217 ops/us
Iteration   9: 0.210 ops/us
Iteration  10: 0.215 ops/us
Iteration  11: 0.216 ops/us
Iteration  12: 0.211 ops/us
Iteration  13: 0.216 ops/us
Iteration  14: 0.215 ops/us
Iteration  15: 0.211 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.214 ±(99.9%) 0.003 ops/us [Average]
  (min, avg, max) = (0.210, 0.214, 0.217), stdev = 0.002
  CI (99.9%): [0.211, 0.216] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 20.29% complete, ETA 06:38:34
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 21.01% complete, ETA 06:34:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ops/us
# Warmup Iteration   2: 0.002 ops/us
# Warmup Iteration   3: 0.002 ops/us
# Warmup Iteration   4: 0.002 ops/us
# Warmup Iteration   5: 0.002 ops/us
Iteration   1: 0.002 ops/us
Iteration   2: 0.002 ops/us
Iteration   3: 0.002 ops/us
Iteration   4: 0.002 ops/us
Iteration   5: 0.002 ops/us
Iteration   6: 0.002 ops/us
Iteration   7: 0.002 ops/us
Iteration   8: 0.002 ops/us
Iteration   9: 0.002 ops/us
Iteration  10: 0.002 ops/us
Iteration  11: 0.002 ops/us
Iteration  12: 0.002 ops/us
Iteration  13: 0.002 ops/us
Iteration  14: 0.002 ops/us
Iteration  15: 0.002 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  0.002 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 21.74% complete, ETA 06:31:10
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 22.46% complete, ETA 06:27:28
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁷ ops/us
# Warmup Iteration   2: ≈ 10⁻⁷ ops/us
# Warmup Iteration   3: ≈ 10⁻⁷ ops/us
# Warmup Iteration   4: ≈ 10⁻⁷ ops/us
# Warmup Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   1: ≈ 10⁻⁷ ops/us
Iteration   2: ≈ 10⁻⁷ ops/us
Iteration   3: ≈ 10⁻⁷ ops/us
Iteration   4: ≈ 10⁻⁷ ops/us
Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   6: ≈ 10⁻⁷ ops/us
Iteration   7: ≈ 10⁻⁷ ops/us
Iteration   8: ≈ 10⁻⁷ ops/us
Iteration   9: ≈ 10⁻⁷ ops/us
Iteration  10: ≈ 10⁻⁷ ops/us
Iteration  11: ≈ 10⁻⁷ ops/us
Iteration  12: ≈ 10⁻⁷ ops/us
Iteration  13: ≈ 10⁻⁷ ops/us
Iteration  14: ≈ 10⁻⁷ ops/us
Iteration  15: ≈ 10⁻⁷ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  ≈ 10⁻⁷ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 23.19% complete, ETA 06:27:12
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻³ ops/us
# Warmup Iteration   2: ≈ 10⁻³ ops/us
# Warmup Iteration   3: ≈ 10⁻³ ops/us
# Warmup Iteration   4: ≈ 10⁻³ ops/us
# Warmup Iteration   5: ≈ 10⁻³ ops/us
Iteration   1: ≈ 10⁻³ ops/us
Iteration   2: ≈ 10⁻³ ops/us
Iteration   3: ≈ 10⁻³ ops/us
Iteration   4: ≈ 10⁻³ ops/us
Iteration   5: ≈ 10⁻³ ops/us
Iteration   6: ≈ 10⁻³ ops/us
Iteration   7: ≈ 10⁻³ ops/us
Iteration   8: ≈ 10⁻³ ops/us
Iteration   9: ≈ 10⁻³ ops/us
Iteration  10: ≈ 10⁻³ ops/us
Iteration  11: ≈ 10⁻³ ops/us
Iteration  12: ≈ 10⁻³ ops/us
Iteration  13: ≈ 10⁻³ ops/us
Iteration  14: ≈ 10⁻³ ops/us
Iteration  15: ≈ 10⁻³ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  ≈ 10⁻³ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 23.91% complete, ETA 06:23:20
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 24.64% complete, ETA 06:19:30
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 25.36% complete, ETA 06:16:17
# Fork: 1 of 1
# Warmup Iteration   1: 42.533 ops/us
# Warmup Iteration   2: 47.631 ops/us
# Warmup Iteration   3: 46.197 ops/us
# Warmup Iteration   4: 46.135 ops/us
# Warmup Iteration   5: 46.160 ops/us
Iteration   1: 46.159 ops/us
Iteration   2: 46.146 ops/us
Iteration   3: 46.152 ops/us
Iteration   4: 46.162 ops/us
Iteration   5: 46.140 ops/us
Iteration   6: 46.084 ops/us
Iteration   7: 46.155 ops/us
Iteration   8: 46.149 ops/us
Iteration   9: 46.149 ops/us
Iteration  10: 46.151 ops/us
Iteration  11: 46.164 ops/us
Iteration  12: 46.165 ops/us
Iteration  13: 46.156 ops/us
Iteration  14: 46.153 ops/us
Iteration  15: 46.182 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  46.151 ±(99.9%) 0.023 ops/us [Average]
  (min, avg, max) = (46.084, 46.151, 46.182), stdev = 0.021
  CI (99.9%): [46.129, 46.174] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 26.09% complete, ETA 06:12:25
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 26.81% complete, ETA 06:08:35
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 27.54% complete, ETA 06:04:48
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 28.26% complete, ETA 06:01:04
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 28.98% complete, ETA 05:57:20
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 29.71% complete, ETA 05:53:33
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 30.43% complete, ETA 05:49:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ops/us
# Warmup Iteration   2: 0.001 ops/us
# Warmup Iteration   3: 0.001 ops/us
# Warmup Iteration   4: 0.001 ops/us
# Warmup Iteration   5: 0.001 ops/us
Iteration   1: 0.001 ops/us
Iteration   2: 0.001 ops/us
Iteration   3: 0.001 ops/us
Iteration   4: 0.001 ops/us
Iteration   5: 0.001 ops/us
Iteration   6: 0.001 ops/us
Iteration   7: 0.001 ops/us
Iteration   8: 0.001 ops/us
Iteration   9: 0.001 ops/us
Iteration  10: 0.001 ops/us
Iteration  11: 0.001 ops/us
Iteration  12: 0.001 ops/us
Iteration  13: 0.001 ops/us
Iteration  14: 0.001 ops/us
Iteration  15: 0.001 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  0.001 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 31.16% complete, ETA 05:45:59
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 31.88% complete, ETA 05:42:13
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 32.61% complete, ETA 05:38:31
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 33.33% complete, ETA 05:35:57
# Fork: 1 of 1
# Warmup Iteration   1: 201874.272 us/op
# Warmup Iteration   2: 195009.016 us/op
# Warmup Iteration   3: 194493.942 us/op
# Warmup Iteration   4: 194464.776 us/op
# Warmup Iteration   5: 196266.191 us/op
Iteration   1: 194832.315 us/op
Iteration   2: 195540.660 us/op
Iteration   3: 195457.562 us/op
Iteration   4: 195107.149 us/op
Iteration   5: 195657.537 us/op
Iteration   6: 195374.333 us/op
Iteration   7: 194767.745 us/op
Iteration   8: 194482.099 us/op
Iteration   9: 194872.094 us/op
Iteration  10: 195379.479 us/op
Iteration  11: 195410.274 us/op
Iteration  12: 194898.072 us/op
Iteration  13: 195314.451 us/op
Iteration  14: 194833.323 us/op
Iteration  15: 194930.906 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  195123.867 ±(99.9%) 369.924 us/op [Average]
  (min, avg, max) = (194482.099, 195123.867, 195657.537), stdev = 346.027
  CI (99.9%): [194753.943, 195493.791] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 34.06% complete, ETA 05:32:15
# Fork: 1 of 1
# Warmup Iteration   1: 154880.514 us/op
# Warmup Iteration   2: 148561.375 us/op
# Warmup Iteration   3: 148558.592 us/op
# Warmup Iteration   4: 148500.661 us/op
# Warmup Iteration   5: 148276.800 us/op
Iteration   1: 148361.262 us/op
Iteration   2: 148435.376 us/op
Iteration   3: 148316.783 us/op
Iteration   4: 148161.316 us/op
Iteration   5: 148581.760 us/op
Iteration   6: 148799.400 us/op
Iteration   7: 148287.768 us/op
Iteration   8: 148520.839 us/op
Iteration   9: 147951.630 us/op
Iteration  10: 148271.454 us/op
Iteration  11: 148329.900 us/op
Iteration  12: 148223.017 us/op
Iteration  13: 147840.194 us/op
Iteration  14: 149269.959 us/op
Iteration  15: 147803.786 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  148343.630 ±(99.9%) 395.719 us/op [Average]
  (min, avg, max) = (147803.786, 148343.630, 149269.959), stdev = 370.156
  CI (99.9%): [147947.910, 148739.349] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 34.78% complete, ETA 05:28:30
# Fork: 1 of 1
# Warmup Iteration   1: 152735.587 us/op
# Warmup Iteration   2: 144673.662 us/op
# Warmup Iteration   3: 144495.343 us/op
# Warmup Iteration   4: 143691.145 us/op
# Warmup Iteration   5: 145194.232 us/op
Iteration   1: 144918.529 us/op
Iteration   2: 144690.071 us/op
Iteration   3: 144169.726 us/op
Iteration   4: 145139.197 us/op
Iteration   5: 144698.244 us/op
Iteration   6: 144942.893 us/op
Iteration   7: 145599.044 us/op
Iteration   8: 145341.501 us/op
Iteration   9: 145384.342 us/op
Iteration  10: 145059.625 us/op
Iteration  11: 145161.643 us/op
Iteration  12: 144569.281 us/op
Iteration  13: 143933.486 us/op
Iteration  14: 145308.065 us/op
Iteration  15: 145133.431 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  144936.605 ±(99.9%) 489.406 us/op [Average]
  (min, avg, max) = (143933.486, 144936.605, 145599.044), stdev = 457.791
  CI (99.9%): [144447.199, 145426.012] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 35.51% complete, ETA 05:24:45
# Fork: 1 of 1
# Warmup Iteration   1: 202867.347 us/op
# Warmup Iteration   2: 198602.756 us/op
# Warmup Iteration   3: 198407.913 us/op
# Warmup Iteration   4: 197632.376 us/op
# Warmup Iteration   5: 198318.125 us/op
Iteration   1: 198610.033 us/op
Iteration   2: 198144.604 us/op
Iteration   3: 197754.064 us/op
Iteration   4: 197817.771 us/op
Iteration   5: 197734.324 us/op
Iteration   6: 198518.547 us/op
Iteration   7: 198022.052 us/op
Iteration   8: 199008.764 us/op
Iteration   9: 197778.868 us/op
Iteration  10: 197989.507 us/op
Iteration  11: 198324.739 us/op
Iteration  12: 197776.136 us/op
Iteration  13: 197776.841 us/op
Iteration  14: 198444.171 us/op
Iteration  15: 197649.348 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  198089.985 ±(99.9%) 433.076 us/op [Average]
  (min, avg, max) = (197649.348, 198089.985, 199008.764), stdev = 405.099
  CI (99.9%): [197656.909, 198523.060] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 36.23% complete, ETA 05:21:02
# Fork: 1 of 1
# Warmup Iteration   1: 200435.792 us/op
# Warmup Iteration   2: 198285.063 us/op
# Warmup Iteration   3: 197353.691 us/op
# Warmup Iteration   4: 197388.235 us/op
# Warmup Iteration   5: 196371.129 us/op
Iteration   1: 197496.514 us/op
Iteration   2: 196921.202 us/op
Iteration   3: 196764.296 us/op
Iteration   4: 197163.554 us/op
Iteration   5: 197116.939 us/op
Iteration   6: 197611.957 us/op
Iteration   7: 197206.654 us/op
Iteration   8: 196879.162 us/op
Iteration   9: 197513.775 us/op
Iteration  10: 198261.180 us/op
Iteration  11: 196619.651 us/op
Iteration  12: 197273.503 us/op
Iteration  13: 198347.270 us/op
Iteration  14: 197656.020 us/op
Iteration  15: 196828.725 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  197310.693 ±(99.9%) 548.207 us/op [Average]
  (min, avg, max) = (196619.651, 197310.693, 198347.270), stdev = 512.793
  CI (99.9%): [196762.486, 197858.901] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 36.96% complete, ETA 05:17:18
# Fork: 1 of 1
# Warmup Iteration   1: 197494.354 us/op
# Warmup Iteration   2: 194649.762 us/op
# Warmup Iteration   3: 193281.272 us/op
# Warmup Iteration   4: 193591.009 us/op
# Warmup Iteration   5: 193891.466 us/op
Iteration   1: 193257.535 us/op
Iteration   2: 194375.744 us/op
Iteration   3: 193429.181 us/op
Iteration   4: 193811.632 us/op
Iteration   5: 194306.578 us/op
Iteration   6: 193556.373 us/op
Iteration   7: 193359.606 us/op
Iteration   8: 193891.032 us/op
Iteration   9: 194125.983 us/op
Iteration  10: 194321.179 us/op
Iteration  11: 193480.270 us/op
Iteration  12: 194035.156 us/op
Iteration  13: 194344.220 us/op
Iteration  14: 193179.774 us/op
Iteration  15: 193997.156 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  193831.428 ±(99.9%) 453.738 us/op [Average]
  (min, avg, max) = (193179.774, 193831.428, 194375.744), stdev = 424.427
  CI (99.9%): [193377.690, 194285.166] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 37.68% complete, ETA 05:13:34
# Fork: 1 of 1
# Warmup Iteration   1: 1444916.755 us/op
# Warmup Iteration   2: 1346128.802 us/op
# Warmup Iteration   3: 1335018.317 us/op
# Warmup Iteration   4: 1344107.105 us/op
# Warmup Iteration   5: 1337141.735 us/op
Iteration   1: 1342249.712 us/op
Iteration   2: 1339433.627 us/op
Iteration   3: 1328755.464 us/op
Iteration   4: 1335056.155 us/op
Iteration   5: 1329261.963 us/op
Iteration   6: 1337285.982 us/op
Iteration   7: 1347799.127 us/op
Iteration   8: 1340215.129 us/op
Iteration   9: 1347837.129 us/op
Iteration  10: 1348852.234 us/op
Iteration  11: 1351156.291 us/op
Iteration  12: 1353393.375 us/op
Iteration  13: 1338677.775 us/op
Iteration  14: 1347090.505 us/op
Iteration  15: 1329074.549 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1341075.934 ±(99.9%) 8748.118 us/op [Average]
  (min, avg, max) = (1328755.464, 1341075.934, 1353393.375), stdev = 8182.995
  CI (99.9%): [1332327.817, 1349824.052] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 38.40% complete, ETA 05:10:14
# Fork: 1 of 1
# Warmup Iteration   1: 930196.931 us/op
# Warmup Iteration   2: 880314.840 us/op
# Warmup Iteration   3: 891937.537 us/op
# Warmup Iteration   4: 896792.865 us/op
# Warmup Iteration   5: 898775.452 us/op
Iteration   1: 903072.340 us/op
Iteration   2: 894614.200 us/op
Iteration   3: 892624.799 us/op
Iteration   4: 901194.468 us/op
Iteration   5: 892713.581 us/op
Iteration   6: 890303.601 us/op
Iteration   7: 897563.028 us/op
Iteration   8: 898557.679 us/op
Iteration   9: 898678.022 us/op
Iteration  10: 892500.234 us/op
Iteration  11: 894272.246 us/op
Iteration  12: 893528.076 us/op
Iteration  13: 895531.553 us/op
Iteration  14: 891004.556 us/op
Iteration  15: 895290.862 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  895429.950 ±(99.9%) 3957.643 us/op [Average]
  (min, avg, max) = (890303.601, 895429.950, 903072.340), stdev = 3701.981
  CI (99.9%): [891472.307, 899387.592] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 39.13% complete, ETA 05:06:51
# Fork: 1 of 1
# Warmup Iteration   1: 819474.448 us/op
# Warmup Iteration   2: 786894.981 us/op
# Warmup Iteration   3: 782800.116 us/op
# Warmup Iteration   4: 786702.113 us/op
# Warmup Iteration   5: 785515.111 us/op
Iteration   1: 786865.243 us/op
Iteration   2: 782563.643 us/op
Iteration   3: 785617.247 us/op
Iteration   4: 783671.821 us/op
Iteration   5: 784481.851 us/op
Iteration   6: 785576.596 us/op
Iteration   7: 785416.987 us/op
Iteration   8: 782271.734 us/op
Iteration   9: 782551.330 us/op
Iteration  10: 784929.255 us/op
Iteration  11: 784768.390 us/op
Iteration  12: 788150.537 us/op
Iteration  13: 788024.125 us/op
Iteration  14: 786525.604 us/op
Iteration  15: 789042.511 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  785363.792 ±(99.9%) 2242.268 us/op [Average]
  (min, avg, max) = (782271.734, 785363.792, 789042.511), stdev = 2097.419
  CI (99.9%): [783121.524, 787606.059] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 39.85% complete, ETA 05:03:11
# Fork: 1 of 1
# Warmup Iteration   1: 866487.008 us/op
# Warmup Iteration   2: 861403.769 us/op
# Warmup Iteration   3: 865187.639 us/op
# Warmup Iteration   4: 859277.977 us/op
# Warmup Iteration   5: 862109.916 us/op
Iteration   1: 861967.907 us/op
Iteration   2: 860484.892 us/op
Iteration   3: 865274.876 us/op
Iteration   4: 858048.566 us/op
Iteration   5: 861861.967 us/op
Iteration   6: 861963.036 us/op
Iteration   7: 863875.056 us/op
Iteration   8: 861554.434 us/op
Iteration   9: 863531.156 us/op
Iteration  10: 862354.970 us/op
Iteration  11: 863530.506 us/op
Iteration  12: 865559.364 us/op
Iteration  13: 864421.990 us/op
Iteration  14: 863809.471 us/op
Iteration  15: 860082.124 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  862554.688 ±(99.9%) 2177.004 us/op [Average]
  (min, avg, max) = (858048.566, 862554.688, 865559.364), stdev = 2036.371
  CI (99.9%): [860377.684, 864731.691] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 40.58% complete, ETA 04:59:36
# Fork: 1 of 1
# Warmup Iteration   1: 871165.963 us/op
# Warmup Iteration   2: 855620.473 us/op
# Warmup Iteration   3: 851597.741 us/op
# Warmup Iteration   4: 850710.656 us/op
# Warmup Iteration   5: 849402.946 us/op
Iteration   1: 850337.640 us/op
Iteration   2: 854252.351 us/op
Iteration   3: 855022.660 us/op
Iteration   4: 853511.436 us/op
Iteration   5: 850119.993 us/op
Iteration   6: 845095.858 us/op
Iteration   7: 843893.948 us/op
Iteration   8: 846724.627 us/op
Iteration   9: 849017.445 us/op
Iteration  10: 847927.663 us/op
Iteration  11: 848235.257 us/op
Iteration  12: 847462.750 us/op
Iteration  13: 850389.686 us/op
Iteration  14: 851293.590 us/op
Iteration  15: 849748.973 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  849535.592 ±(99.9%) 3396.276 us/op [Average]
  (min, avg, max) = (843893.948, 849535.592, 855022.660), stdev = 3176.878
  CI (99.9%): [846139.316, 852931.867] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 41.30% complete, ETA 04:55:56
# Fork: 1 of 1
# Warmup Iteration   1: 944465.247 us/op
# Warmup Iteration   2: 940199.497 us/op
# Warmup Iteration   3: 942237.936 us/op
# Warmup Iteration   4: 938718.159 us/op
# Warmup Iteration   5: 938941.552 us/op
Iteration   1: 941125.012 us/op
Iteration   2: 938624.322 us/op
Iteration   3: 942065.132 us/op
Iteration   4: 942854.015 us/op
Iteration   5: 939941.290 us/op
Iteration   6: 940858.338 us/op
Iteration   7: 940286.499 us/op
Iteration   8: 940165.848 us/op
Iteration   9: 934195.956 us/op
Iteration  10: 935149.663 us/op
Iteration  11: 941838.965 us/op
Iteration  12: 941575.676 us/op
Iteration  13: 939062.494 us/op
Iteration  14: 935823.826 us/op
Iteration  15: 940935.184 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  939633.481 ±(99.9%) 2809.271 us/op [Average]
  (min, avg, max) = (934195.956, 939633.481, 942854.015), stdev = 2627.794
  CI (99.9%): [936824.210, 942442.752] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 42.03% complete, ETA 04:52:19
# Fork: 1 of 1
# Warmup Iteration   1: 550.319 us/op
# Warmup Iteration   2: 535.967 us/op
# Warmup Iteration   3: 536.218 us/op
# Warmup Iteration   4: 535.465 us/op
# Warmup Iteration   5: 535.460 us/op
Iteration   1: 535.985 us/op
Iteration   2: 535.671 us/op
Iteration   3: 534.952 us/op
Iteration   4: 536.153 us/op
Iteration   5: 535.762 us/op
Iteration   6: 535.515 us/op
Iteration   7: 535.679 us/op
Iteration   8: 535.418 us/op
Iteration   9: 535.484 us/op
Iteration  10: 534.803 us/op
Iteration  11: 534.755 us/op
Iteration  12: 534.887 us/op
Iteration  13: 534.970 us/op
Iteration  14: 534.759 us/op
Iteration  15: 534.699 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  535.300 ±(99.9%) 0.526 us/op [Average]
  (min, avg, max) = (534.699, 535.300, 536.153), stdev = 0.492
  CI (99.9%): [534.774, 535.825] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 42.75% complete, ETA 04:48:34
# Fork: 1 of 1
# Warmup Iteration   1: 663.256 us/op
# Warmup Iteration   2: 656.976 us/op
# Warmup Iteration   3: 657.451 us/op
# Warmup Iteration   4: 657.272 us/op
# Warmup Iteration   5: 666.395 us/op
Iteration   1: 666.751 us/op
Iteration   2: 667.315 us/op
Iteration   3: 659.052 us/op
Iteration   4: 656.395 us/op
Iteration   5: 656.122 us/op
Iteration   6: 656.468 us/op
Iteration   7: 656.162 us/op
Iteration   8: 656.574 us/op
Iteration   9: 657.755 us/op
Iteration  10: 656.118 us/op
Iteration  11: 655.943 us/op
Iteration  12: 655.952 us/op
Iteration  13: 656.703 us/op
Iteration  14: 657.374 us/op
Iteration  15: 657.163 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  658.123 ±(99.9%) 3.968 us/op [Average]
  (min, avg, max) = (655.943, 658.123, 667.315), stdev = 3.712
  CI (99.9%): [654.155, 662.091] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 43.48% complete, ETA 04:44:50
# Fork: 1 of 1
# Warmup Iteration   1: 961.681 us/op
# Warmup Iteration   2: 940.545 us/op
# Warmup Iteration   3: 940.732 us/op
# Warmup Iteration   4: 940.518 us/op
# Warmup Iteration   5: 940.574 us/op
Iteration   1: 940.658 us/op
Iteration   2: 941.077 us/op
Iteration   3: 940.547 us/op
Iteration   4: 940.245 us/op
Iteration   5: 940.172 us/op
Iteration   6: 823.790 us/op
Iteration   7: 755.471 us/op
Iteration   8: 755.405 us/op
Iteration   9: 755.646 us/op
Iteration  10: 755.726 us/op
Iteration  11: 755.503 us/op
Iteration  12: 755.546 us/op
Iteration  13: 755.590 us/op
Iteration  14: 755.592 us/op
Iteration  15: 755.372 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  821.756 ±(99.9%) 94.769 us/op [Average]
  (min, avg, max) = (755.372, 821.756, 941.077), stdev = 88.647
  CI (99.9%): [726.987, 916.525] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 44.20% complete, ETA 04:41:06
# Fork: 1 of 1
# Warmup Iteration   1: 542.413 us/op
# Warmup Iteration   2: 534.311 us/op
# Warmup Iteration   3: 533.666 us/op
# Warmup Iteration   4: 533.285 us/op
# Warmup Iteration   5: 532.744 us/op
Iteration   1: 533.468 us/op
Iteration   2: 533.397 us/op
Iteration   3: 533.561 us/op
Iteration   4: 534.263 us/op
Iteration   5: 533.574 us/op
Iteration   6: 533.448 us/op
Iteration   7: 533.673 us/op
Iteration   8: 534.457 us/op
Iteration   9: 533.415 us/op
Iteration  10: 533.082 us/op
Iteration  11: 534.113 us/op
Iteration  12: 534.147 us/op
Iteration  13: 534.063 us/op
Iteration  14: 534.608 us/op
Iteration  15: 535.108 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  533.892 ±(99.9%) 0.596 us/op [Average]
  (min, avg, max) = (533.082, 533.892, 535.108), stdev = 0.558
  CI (99.9%): [533.295, 534.488] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 44.93% complete, ETA 04:37:22
# Fork: 1 of 1
# Warmup Iteration   1: 934938.413 us/op
# Warmup Iteration   2: 893207.520 us/op
# Warmup Iteration   3: 885344.713 us/op
# Warmup Iteration   4: 885733.168 us/op
# Warmup Iteration   5: 886109.723 us/op
Iteration   1: 884297.775 us/op
Iteration   2: 884286.677 us/op
Iteration   3: 885908.231 us/op
Iteration   4: 884730.251 us/op
Iteration   5: 885723.892 us/op
Iteration   6: 884811.547 us/op
Iteration   7: 885162.225 us/op
Iteration   8: 887069.055 us/op
Iteration   9: 884881.931 us/op
Iteration  10: 885390.941 us/op
Iteration  11: 890405.870 us/op
Iteration  12: 883855.858 us/op
Iteration  13: 886358.103 us/op
Iteration  14: 885387.620 us/op
Iteration  15: 883950.656 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  885481.375 ±(99.9%) 1739.969 us/op [Average]
  (min, avg, max) = (883855.858, 885481.375, 890405.870), stdev = 1627.568
  CI (99.9%): [883741.407, 887221.344] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 45.65% complete, ETA 04:33:53
# Fork: 1 of 1
# Warmup Iteration   1: 294459.612 us/op
# Warmup Iteration   2: 234810.824 us/op
# Warmup Iteration   3: 238474.348 us/op
# Warmup Iteration   4: 235806.372 us/op
# Warmup Iteration   5: 235681.426 us/op
Iteration   1: 231881.051 us/op
Iteration   2: 232776.723 us/op
Iteration   3: 235819.995 us/op
Iteration   4: 234915.387 us/op
Iteration   5: 237967.709 us/op
Iteration   6: 232428.435 us/op
Iteration   7: 238590.473 us/op
Iteration   8: 233706.483 us/op
Iteration   9: 238529.278 us/op
Iteration  10: 233151.725 us/op
Iteration  11: 235501.961 us/op
Iteration  12: 235263.849 us/op
Iteration  13: 236467.064 us/op
Iteration  14: 234687.806 us/op
Iteration  15: 230809.978 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  234833.195 ±(99.9%) 2570.156 us/op [Average]
  (min, avg, max) = (230809.978, 234833.195, 238590.473), stdev = 2404.125
  CI (99.9%): [232263.039, 237403.350] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 46.38% complete, ETA 04:30:11
# Fork: 1 of 1
# Warmup Iteration   1: 1969340.362 us/op
# Warmup Iteration   2: 2011317.105 us/op
# Warmup Iteration   3: 1980923.686 us/op
# Warmup Iteration   4: 1945903.330 us/op
# Warmup Iteration   5: 1946285.431 us/op
Iteration   1: 2015015.805 us/op
Iteration   2: 2010035.104 us/op
Iteration   3: 2006671.498 us/op
Iteration   4: 1943558.115 us/op
Iteration   5: 2016212.644 us/op
Iteration   6: 1951787.975 us/op
Iteration   7: 2009601.334 us/op
Iteration   8: 1954637.515 us/op
Iteration   9: 1968916.613 us/op
Iteration  10: 2008527.109 us/op
Iteration  11: 2089232.390 us/op
Iteration  12: 1967620.677 us/op
Iteration  13: 2040063.506 us/op
Iteration  14: 2026435.211 us/op
Iteration  15: 2022474.545 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  2002052.669 ±(99.9%) 41492.285 us/op [Average]
  (min, avg, max) = (1943558.115, 2002052.669, 2089232.390), stdev = 38811.909
  CI (99.9%): [1960560.385, 2043544.954] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 47.10% complete, ETA 04:26:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.698 us/op
# Warmup Iteration   2: 0.678 us/op
# Warmup Iteration   3: 0.677 us/op
# Warmup Iteration   4: 0.678 us/op
# Warmup Iteration   5: 0.677 us/op
Iteration   1: 0.677 us/op
Iteration   2: 0.677 us/op
Iteration   3: 0.678 us/op
Iteration   4: 0.677 us/op
Iteration   5: 0.677 us/op
Iteration   6: 0.677 us/op
Iteration   7: 0.678 us/op
Iteration   8: 0.677 us/op
Iteration   9: 0.677 us/op
Iteration  10: 0.677 us/op
Iteration  11: 0.677 us/op
Iteration  12: 0.678 us/op
Iteration  13: 0.678 us/op
Iteration  14: 0.677 us/op
Iteration  15: 0.678 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.677 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.677, 0.677, 0.678), stdev = 0.001
  CI (99.9%): [0.677, 0.678] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 47.82% complete, ETA 04:23:03
# Fork: 1 of 1
# Warmup Iteration   1: 1.641 us/op
# Warmup Iteration   2: 1.610 us/op
# Warmup Iteration   3: 1.610 us/op
# Warmup Iteration   4: 1.609 us/op
# Warmup Iteration   5: 1.610 us/op
Iteration   1: 1.610 us/op
Iteration   2: 1.610 us/op
Iteration   3: 1.611 us/op
Iteration   4: 1.610 us/op
Iteration   5: 1.610 us/op
Iteration   6: 1.610 us/op
Iteration   7: 1.609 us/op
Iteration   8: 1.611 us/op
Iteration   9: 1.611 us/op
Iteration  10: 1.611 us/op
Iteration  11: 1.611 us/op
Iteration  12: 1.611 us/op
Iteration  13: 1.611 us/op
Iteration  14: 1.611 us/op
Iteration  15: 1.611 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  1.611 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (1.609, 1.611, 1.611), stdev = 0.001
  CI (99.9%): [1.610, 1.611] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 48.55% complete, ETA 04:19:19
# Fork: 1 of 1
# Warmup Iteration   1: 2.869 us/op
# Warmup Iteration   2: 2.801 us/op
# Warmup Iteration   3: 2.794 us/op
# Warmup Iteration   4: 2.795 us/op
# Warmup Iteration   5: 2.795 us/op
Iteration   1: 2.794 us/op
Iteration   2: 2.794 us/op
Iteration   3: 2.795 us/op
Iteration   4: 2.796 us/op
Iteration   5: 2.796 us/op
Iteration   6: 2.795 us/op
Iteration   7: 2.798 us/op
Iteration   8: 2.795 us/op
Iteration   9: 2.795 us/op
Iteration  10: 2.795 us/op
Iteration  11: 2.796 us/op
Iteration  12: 2.795 us/op
Iteration  13: 2.794 us/op
Iteration  14: 2.795 us/op
Iteration  15: 2.793 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  2.795 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (2.793, 2.795, 2.798), stdev = 0.001
  CI (99.9%): [2.794, 2.796] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 49.27% complete, ETA 04:15:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.050 us/op
# Warmup Iteration   2: 0.050 us/op
# Warmup Iteration   3: 0.051 us/op
# Warmup Iteration   4: 0.051 us/op
# Warmup Iteration   5: 0.051 us/op
Iteration   1: 0.051 us/op
Iteration   2: 0.051 us/op
Iteration   3: 0.051 us/op
Iteration   4: 0.051 us/op
Iteration   5: 0.052 us/op
Iteration   6: 0.051 us/op
Iteration   7: 0.052 us/op
Iteration   8: 0.051 us/op
Iteration   9: 0.051 us/op
Iteration  10: 0.051 us/op
Iteration  11: 0.052 us/op
Iteration  12: 0.051 us/op
Iteration  13: 0.051 us/op
Iteration  14: 0.051 us/op
Iteration  15: 0.051 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.051 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.051, 0.051, 0.052), stdev = 0.001
  CI (99.9%): [0.051, 0.052] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 50.00% complete, ETA 04:11:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.470 us/op
# Warmup Iteration   2: 0.460 us/op
# Warmup Iteration   3: 0.490 us/op
# Warmup Iteration   4: 0.491 us/op
# Warmup Iteration   5: 0.489 us/op
Iteration   1: 0.489 us/op
Iteration   2: 0.489 us/op
Iteration   3: 0.488 us/op
Iteration   4: 0.491 us/op
Iteration   5: 0.489 us/op
Iteration   6: 0.490 us/op
Iteration   7: 0.488 us/op
Iteration   8: 0.490 us/op
Iteration   9: 0.489 us/op
Iteration  10: 0.489 us/op
Iteration  11: 0.498 us/op
Iteration  12: 0.488 us/op
Iteration  13: 0.489 us/op
Iteration  14: 0.489 us/op
Iteration  15: 0.488 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.490 ±(99.9%) 0.003 us/op [Average]
  (min, avg, max) = (0.488, 0.490, 0.498), stdev = 0.003
  CI (99.9%): [0.487, 0.492] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 50.72% complete, ETA 04:08:09
# Fork: 1 of 1
# Warmup Iteration   1: 4.819 us/op
# Warmup Iteration   2: 4.728 us/op
# Warmup Iteration   3: 5.189 us/op
# Warmup Iteration   4: 5.061 us/op
# Warmup Iteration   5: 5.173 us/op
Iteration   1: 5.116 us/op
Iteration   2: 5.052 us/op
Iteration   3: 5.196 us/op
Iteration   4: 5.148 us/op
Iteration   5: 5.188 us/op
Iteration   6: 5.129 us/op
Iteration   7: 5.078 us/op
Iteration   8: 5.048 us/op
Iteration   9: 5.034 us/op
Iteration  10: 5.122 us/op
Iteration  11: 5.107 us/op
Iteration  12: 5.089 us/op
Iteration  13: 5.180 us/op
Iteration  14: 5.075 us/op
Iteration  15: 5.155 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  5.115 ±(99.9%) 0.055 us/op [Average]
  (min, avg, max) = (5.034, 5.115, 5.196), stdev = 0.052
  CI (99.9%): [5.059, 5.170] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 51.45% complete, ETA 04:04:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.054 us/op
# Warmup Iteration   2: 0.060 us/op
# Warmup Iteration   3: 0.048 us/op
# Warmup Iteration   4: 0.048 us/op
# Warmup Iteration   5: 0.048 us/op
Iteration   1: 0.048 us/op
Iteration   2: 0.048 us/op
Iteration   3: 0.048 us/op
Iteration   4: 0.048 us/op
Iteration   5: 0.048 us/op
Iteration   6: 0.048 us/op
Iteration   7: 0.048 us/op
Iteration   8: 0.048 us/op
Iteration   9: 0.048 us/op
Iteration  10: 0.048 us/op
Iteration  11: 0.048 us/op
Iteration  12: 0.048 us/op
Iteration  13: 0.048 us/op
Iteration  14: 0.048 us/op
Iteration  15: 0.048 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.048 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.048, 0.048, 0.048), stdev = 0.001
  CI (99.9%): [0.048, 0.048] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 52.17% complete, ETA 04:00:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.515 us/op
# Warmup Iteration   2: 0.532 us/op
# Warmup Iteration   3: 0.421 us/op
# Warmup Iteration   4: 0.428 us/op
# Warmup Iteration   5: 0.434 us/op
Iteration   1: 0.437 us/op
Iteration   2: 0.421 us/op
Iteration   3: 0.420 us/op
Iteration   4: 0.432 us/op
Iteration   5: 0.432 us/op
Iteration   6: 0.421 us/op
Iteration   7: 0.428 us/op
Iteration   8: 0.423 us/op
Iteration   9: 0.427 us/op
Iteration  10: 0.429 us/op
Iteration  11: 0.424 us/op
Iteration  12: 0.420 us/op
Iteration  13: 0.421 us/op
Iteration  14: 0.420 us/op
Iteration  15: 0.439 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.426 ±(99.9%) 0.007 us/op [Average]
  (min, avg, max) = (0.420, 0.426, 0.439), stdev = 0.006
  CI (99.9%): [0.419, 0.433] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 52.90% complete, ETA 03:57:00
# Fork: 1 of 1
# Warmup Iteration   1: 5.329 us/op
# Warmup Iteration   2: 5.379 us/op
# Warmup Iteration   3: 4.694 us/op
# Warmup Iteration   4: 4.710 us/op
# Warmup Iteration   5: 4.629 us/op
Iteration   1: 4.709 us/op
Iteration   2: 4.789 us/op
Iteration   3: 4.933 us/op
Iteration   4: 4.926 us/op
Iteration   5: 4.571 us/op
Iteration   6: 4.867 us/op
Iteration   7: 4.591 us/op
Iteration   8: 4.964 us/op
Iteration   9: 4.802 us/op
Iteration  10: 4.965 us/op
Iteration  11: 4.841 us/op
Iteration  12: 4.884 us/op
Iteration  13: 4.816 us/op
Iteration  14: 4.450 us/op
Iteration  15: 4.884 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  4.799 ±(99.9%) 0.166 us/op [Average]
  (min, avg, max) = (4.450, 4.799, 4.965), stdev = 0.155
  CI (99.9%): [4.634, 4.965] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 53.62% complete, ETA 03:53:18
# Fork: 1 of 1
# Warmup Iteration   1: 14888.380 us/op
# Warmup Iteration   2: 14447.287 us/op
# Warmup Iteration   3: 14450.277 us/op
# Warmup Iteration   4: 14449.495 us/op
# Warmup Iteration   5: 14451.491 us/op
Iteration   1: 14448.257 us/op
Iteration   2: 14455.963 us/op
Iteration   3: 14450.053 us/op
Iteration   4: 14456.271 us/op
Iteration   5: 14451.005 us/op
Iteration   6: 14445.507 us/op
Iteration   7: 14443.514 us/op
Iteration   8: 14445.977 us/op
Iteration   9: 14469.078 us/op
Iteration  10: 14473.368 us/op
Iteration  11: 14454.655 us/op
Iteration  12: 14463.923 us/op
Iteration  13: 14456.202 us/op
Iteration  14: 14461.143 us/op
Iteration  15: 14475.599 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  14456.701 ±(99.9%) 10.794 us/op [Average]
  (min, avg, max) = (14443.514, 14456.701, 14475.599), stdev = 10.097
  CI (99.9%): [14445.907, 14467.495] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 54.35% complete, ETA 03:49:37
# Fork: 1 of 1
# Warmup Iteration   1: 415.772 us/op
# Warmup Iteration   2: 422.775 us/op
# Warmup Iteration   3: 419.502 us/op
# Warmup Iteration   4: 418.583 us/op
# Warmup Iteration   5: 418.514 us/op
Iteration   1: 418.903 us/op
Iteration   2: 420.126 us/op
Iteration   3: 417.842 us/op
Iteration   4: 418.816 us/op
Iteration   5: 418.516 us/op
Iteration   6: 417.915 us/op
Iteration   7: 418.862 us/op
Iteration   8: 417.819 us/op
Iteration   9: 420.244 us/op
Iteration  10: 417.639 us/op
Iteration  11: 418.729 us/op
Iteration  12: 417.600 us/op
Iteration  13: 418.266 us/op
Iteration  14: 416.685 us/op
Iteration  15: 417.644 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  418.374 ±(99.9%) 1.021 us/op [Average]
  (min, avg, max) = (416.685, 418.374, 420.244), stdev = 0.955
  CI (99.9%): [417.353, 419.394] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 55.07% complete, ETA 03:45:56
# Fork: 1 of 1
# Warmup Iteration   1: 44426.035 us/op
# Warmup Iteration   2: 66270.095 us/op
# Warmup Iteration   3: 65987.091 us/op
# Warmup Iteration   4: 66133.173 us/op
# Warmup Iteration   5: 66031.276 us/op
Iteration   1: 66106.271 us/op
Iteration   2: 66078.080 us/op
Iteration   3: 66001.017 us/op
Iteration   4: 66077.988 us/op
Iteration   5: 66129.354 us/op
Iteration   6: 66057.919 us/op
Iteration   7: 66128.681 us/op
Iteration   8: 66083.503 us/op
Iteration   9: 66053.597 us/op
Iteration  10: 66135.548 us/op
Iteration  11: 66061.041 us/op
Iteration  12: 66152.127 us/op
Iteration  13: 66091.129 us/op
Iteration  14: 66064.187 us/op
Iteration  15: 66045.403 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  66084.390 ±(99.9%) 43.207 us/op [Average]
  (min, avg, max) = (66001.017, 66084.390, 66152.127), stdev = 40.416
  CI (99.9%): [66041.183, 66127.596] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 55.80% complete, ETA 03:42:15
# Fork: 1 of 1
# Warmup Iteration   1: 4117036.446 us/op
# Warmup Iteration   2: 4306868.463 us/op
# Warmup Iteration   3: 4307580.637 us/op
# Warmup Iteration   4: 4297202.425 us/op
# Warmup Iteration   5: 4296910.770 us/op
Iteration   1: 4301375.479 us/op
Iteration   2: 4300764.246 us/op
Iteration   3: 4296927.528 us/op
Iteration   4: 4304067.619 us/op
Iteration   5: 4300829.875 us/op
Iteration   6: 4301397.616 us/op
Iteration   7: 4301437.949 us/op
Iteration   8: 4297279.706 us/op
Iteration   9: 4298586.342 us/op
Iteration  10: 4297549.439 us/op
Iteration  11: 4299475.038 us/op
Iteration  12: 4322666.911 us/op
Iteration  13: 4320919.281 us/op
Iteration  14: 4319088.555 us/op
Iteration  15: 4317315.652 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  4305312.082 ±(99.9%) 10066.001 us/op [Average]
  (min, avg, max) = (4296927.528, 4305312.082, 4322666.911), stdev = 9415.744
  CI (99.9%): [4295246.081, 4315378.084] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 56.52% complete, ETA 03:39:19
# Fork: 1 of 1
# Warmup Iteration   1: 3082.196 us/op
# Warmup Iteration   2: 2998.053 us/op
# Warmup Iteration   3: 2997.245 us/op
# Warmup Iteration   4: 2996.029 us/op
# Warmup Iteration   5: 2996.808 us/op
Iteration   1: 2996.716 us/op
Iteration   2: 2997.144 us/op
Iteration   3: 2997.288 us/op
Iteration   4: 2996.383 us/op
Iteration   5: 2995.852 us/op
Iteration   6: 2996.317 us/op
Iteration   7: 2996.895 us/op
Iteration   8: 2998.840 us/op
Iteration   9: 2999.801 us/op
Iteration  10: 2996.897 us/op
Iteration  11: 3000.033 us/op
Iteration  12: 3000.815 us/op
Iteration  13: 2998.078 us/op
Iteration  14: 2998.131 us/op
Iteration  15: 2999.118 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  2997.887 ±(99.9%) 1.628 us/op [Average]
  (min, avg, max) = (2995.852, 2997.887, 3000.815), stdev = 1.523
  CI (99.9%): [2996.259, 2999.515] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 57.24% complete, ETA 03:35:37
# Fork: 1 of 1
# Warmup Iteration   1: 31899.543 us/op
# Warmup Iteration   2: 31524.772 us/op
# Warmup Iteration   3: 31508.726 us/op
# Warmup Iteration   4: 31499.507 us/op
# Warmup Iteration   5: 31503.832 us/op
Iteration   1: 31495.288 us/op
Iteration   2: 31497.471 us/op
Iteration   3: 31504.794 us/op
Iteration   4: 31492.943 us/op
Iteration   5: 31493.259 us/op
Iteration   6: 31487.899 us/op
Iteration   7: 31490.146 us/op
Iteration   8: 31489.776 us/op
Iteration   9: 31487.387 us/op
Iteration  10: 31490.639 us/op
Iteration  11: 31480.723 us/op
Iteration  12: 31480.525 us/op
Iteration  13: 31486.301 us/op
Iteration  14: 31485.727 us/op
Iteration  15: 31477.516 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  31489.360 ±(99.9%) 7.511 us/op [Average]
  (min, avg, max) = (31477.516, 31489.360, 31504.794), stdev = 7.026
  CI (99.9%): [31481.848, 31496.871] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 57.97% complete, ETA 03:31:55
# Fork: 1 of 1
# Warmup Iteration   1: 2897502.190 us/op
# Warmup Iteration   2: 1760164.633 us/op
# Warmup Iteration   3: 1760217.787 us/op
# Warmup Iteration   4: 1759813.122 us/op
# Warmup Iteration   5: 1760058.232 us/op
Iteration   1: 1758879.961 us/op
Iteration   2: 1759648.371 us/op
Iteration   3: 1759855.214 us/op
Iteration   4: 1759834.357 us/op
Iteration   5: 1760215.085 us/op
Iteration   6: 1759270.297 us/op
Iteration   7: 1761547.126 us/op
Iteration   8: 1760098.295 us/op
Iteration   9: 1759102.141 us/op
Iteration  10: 1759933.201 us/op
Iteration  11: 1759839.115 us/op
Iteration  12: 1759430.167 us/op
Iteration  13: 1758966.260 us/op
Iteration  14: 1758997.362 us/op
Iteration  15: 1760131.957 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  1759716.594 ±(99.9%) 725.987 us/op [Average]
  (min, avg, max) = (1758879.961, 1759716.594, 1761547.126), stdev = 679.088
  CI (99.9%): [1758990.607, 1760442.581] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 58.69% complete, ETA 03:28:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 us/op
# Warmup Iteration   2: 0.021 us/op
# Warmup Iteration   3: 0.022 us/op
# Warmup Iteration   4: 0.022 us/op
# Warmup Iteration   5: 0.022 us/op
Iteration   1: 0.022 us/op
Iteration   2: 0.022 us/op
Iteration   3: 0.022 us/op
Iteration   4: 0.022 us/op
Iteration   5: 0.022 us/op
Iteration   6: 0.022 us/op
Iteration   7: 0.022 us/op
Iteration   8: 0.022 us/op
Iteration   9: 0.022 us/op
Iteration  10: 0.022 us/op
Iteration  11: 0.022 us/op
Iteration  12: 0.022 us/op
Iteration  13: 0.022 us/op
Iteration  14: 0.022 us/op
Iteration  15: 0.022 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  0.022 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.022, 0.022, 0.022), stdev = 0.001
  CI (99.9%): [0.022, 0.022] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 59.42% complete, ETA 03:24:39
# Fork: 1 of 1
# Warmup Iteration   1: 10297.452 us/op
# Warmup Iteration   2: 10588.600 us/op
# Warmup Iteration   3: 10590.840 us/op
# Warmup Iteration   4: 10588.886 us/op
# Warmup Iteration   5: 10600.127 us/op
Iteration   1: 10594.119 us/op
Iteration   2: 10586.711 us/op
Iteration   3: 10596.062 us/op
Iteration   4: 10588.124 us/op
Iteration   5: 10590.073 us/op
Iteration   6: 10583.351 us/op
Iteration   7: 10583.581 us/op
Iteration   8: 10590.078 us/op
Iteration   9: 10589.148 us/op
Iteration  10: 10587.269 us/op
Iteration  11: 10592.035 us/op
Iteration  12: 10588.781 us/op
Iteration  13: 10831.630 us/op
Iteration  14: 10828.681 us/op
Iteration  15: 10826.829 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  10637.098 ±(99.9%) 106.269 us/op [Average]
  (min, avg, max) = (10583.351, 10637.098, 10831.630), stdev = 99.404
  CI (99.9%): [10530.829, 10743.367] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 60.14% complete, ETA 03:20:57
# Fork: 1 of 1
# Warmup Iteration   1: 41644.755 us/op
# Warmup Iteration   2: 39341.471 us/op
# Warmup Iteration   3: 32012.099 us/op
# Warmup Iteration   4: 37265.682 us/op
# Warmup Iteration   5: 32143.690 us/op
Iteration   1: 28606.042 us/op
Iteration   2: 29878.712 us/op
Iteration   3: 29219.333 us/op
Iteration   4: 35941.560 us/op
Iteration   5: 45826.986 us/op
Iteration   6: 31362.502 us/op
Iteration   7: 34699.691 us/op
Iteration   8: 40773.747 us/op
Iteration   9: 43568.541 us/op
Iteration  10: 34552.416 us/op
Iteration  11: 34452.583 us/op
Iteration  12: 37092.522 us/op
Iteration  13: 38943.116 us/op
Iteration  14: 41909.080 us/op
Iteration  15: 41349.589 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  36545.095 ±(99.9%) 5795.114 us/op [Average]
  (min, avg, max) = (28606.042, 36545.095, 45826.986), stdev = 5420.753
  CI (99.9%): [30749.981, 42340.208] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 60.87% complete, ETA 03:17:15
# Fork: 1 of 1
# Warmup Iteration   1: 33907.939 us/op
# Warmup Iteration   2: 32194.769 us/op
# Warmup Iteration   3: 32103.781 us/op
# Warmup Iteration   4: 32109.440 us/op
# Warmup Iteration   5: 32116.716 us/op
Iteration   1: 32141.474 us/op
Iteration   2: 32224.595 us/op
Iteration   3: 32206.618 us/op
Iteration   4: 32235.076 us/op
Iteration   5: 32141.263 us/op
Iteration   6: 32064.176 us/op
Iteration   7: 32197.240 us/op
Iteration   8: 32248.941 us/op
Iteration   9: 32196.537 us/op
Iteration  10: 32181.673 us/op
Iteration  11: 32178.207 us/op
Iteration  12: 32149.337 us/op
Iteration  13: 32081.151 us/op
Iteration  14: 32163.294 us/op
Iteration  15: 32245.366 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  32176.996 ±(99.9%) 58.963 us/op [Average]
  (min, avg, max) = (32064.176, 32176.996, 32248.941), stdev = 55.154
  CI (99.9%): [32118.033, 32235.960] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 61.59% complete, ETA 03:13:35
# Fork: 1 of 1
# Warmup Iteration   1: 18909.253 us/op
# Warmup Iteration   2: 18125.949 us/op
# Warmup Iteration   3: 18090.203 us/op
# Warmup Iteration   4: 18233.309 us/op
# Warmup Iteration   5: 18221.099 us/op
Iteration   1: 18195.020 us/op
Iteration   2: 18089.731 us/op
Iteration   3: 18153.885 us/op
Iteration   4: 18190.322 us/op
Iteration   5: 18457.227 us/op
Iteration   6: 18142.665 us/op
Iteration   7: 18259.648 us/op
Iteration   8: 18196.689 us/op
Iteration   9: 18173.066 us/op
Iteration  10: 18198.962 us/op
Iteration  11: 18126.401 us/op
Iteration  12: 18078.201 us/op
Iteration  13: 18174.604 us/op
Iteration  14: 18141.626 us/op
Iteration  15: 18071.895 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  18176.663 ±(99.9%) 99.263 us/op [Average]
  (min, avg, max) = (18071.895, 18176.663, 18457.227), stdev = 92.851
  CI (99.9%): [18077.399, 18275.926] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 62.32% complete, ETA 03:09:54
# Fork: 1 of 1
# Warmup Iteration   1: 16264.311 us/op
# Warmup Iteration   2: 15889.581 us/op
# Warmup Iteration   3: 15833.607 us/op
# Warmup Iteration   4: 15839.929 us/op
# Warmup Iteration   5: 15824.515 us/op
Iteration   1: 15824.639 us/op
Iteration   2: 15864.227 us/op
Iteration   3: 15819.302 us/op
Iteration   4: 15863.762 us/op
Iteration   5: 15837.795 us/op
Iteration   6: 15823.821 us/op
Iteration   7: 15846.598 us/op
Iteration   8: 15822.807 us/op
Iteration   9: 15848.018 us/op
Iteration  10: 15885.142 us/op
Iteration  11: 15813.190 us/op
Iteration  12: 16024.442 us/op
Iteration  13: 15998.581 us/op
Iteration  14: 16074.803 us/op
Iteration  15: 16017.238 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  15890.958 ±(99.9%) 95.622 us/op [Average]
  (min, avg, max) = (15813.190, 15890.958, 16074.803), stdev = 89.445
  CI (99.9%): [15795.336, 15986.579] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 63.04% complete, ETA 03:06:12
# Fork: 1 of 1
# Warmup Iteration   1: 36565.862 us/op
# Warmup Iteration   2: 35879.794 us/op
# Warmup Iteration   3: 35331.391 us/op
# Warmup Iteration   4: 35812.758 us/op
# Warmup Iteration   5: 35035.827 us/op
Iteration   1: 36256.948 us/op
Iteration   2: 34425.273 us/op
Iteration   3: 35118.031 us/op
Iteration   4: 34721.166 us/op
Iteration   5: 34268.803 us/op
Iteration   6: 34818.462 us/op
Iteration   7: 34099.565 us/op
Iteration   8: 34428.351 us/op
Iteration   9: 33705.608 us/op
Iteration  10: 33323.573 us/op
Iteration  11: 34611.385 us/op
Iteration  12: 34357.837 us/op
Iteration  13: 34373.560 us/op
Iteration  14: 35004.836 us/op
Iteration  15: 33868.716 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  34492.141 ±(99.9%) 731.784 us/op [Average]
  (min, avg, max) = (33323.573, 34492.141, 36256.948), stdev = 684.511
  CI (99.9%): [33760.357, 35223.925] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 63.77% complete, ETA 03:02:31
# Fork: 1 of 1
# Warmup Iteration   1: 799.734 us/op
# Warmup Iteration   2: 773.831 us/op
# Warmup Iteration   3: 773.345 us/op
# Warmup Iteration   4: 772.381 us/op
# Warmup Iteration   5: 770.786 us/op
Iteration   1: 770.600 us/op
Iteration   2: 770.105 us/op
Iteration   3: 772.010 us/op
Iteration   4: 767.370 us/op
Iteration   5: 762.158 us/op
Iteration   6: 761.646 us/op
Iteration   7: 760.650 us/op
Iteration   8: 761.202 us/op
Iteration   9: 760.358 us/op
Iteration  10: 760.693 us/op
Iteration  11: 761.174 us/op
Iteration  12: 759.975 us/op
Iteration  13: 760.393 us/op
Iteration  14: 759.168 us/op
Iteration  15: 760.047 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  763.170 ±(99.9%) 4.733 us/op [Average]
  (min, avg, max) = (759.168, 763.170, 772.010), stdev = 4.427
  CI (99.9%): [758.437, 767.903] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 64.49% complete, ETA 02:58:50
# Fork: 1 of 1
# Warmup Iteration   1: 8015.635 us/op
# Warmup Iteration   2: 7901.782 us/op
# Warmup Iteration   3: 7904.317 us/op
# Warmup Iteration   4: 7890.054 us/op
# Warmup Iteration   5: 7898.389 us/op
Iteration   1: 7893.509 us/op
Iteration   2: 7895.894 us/op
Iteration   3: 7897.875 us/op
Iteration   4: 7892.700 us/op
Iteration   5: 7888.771 us/op
Iteration   6: 7885.405 us/op
Iteration   7: 7891.802 us/op
Iteration   8: 7879.142 us/op
Iteration   9: 7886.898 us/op
Iteration  10: 7883.732 us/op
Iteration  11: 7872.105 us/op
Iteration  12: 7894.495 us/op
Iteration  13: 7892.373 us/op
Iteration  14: 7888.471 us/op
Iteration  15: 7885.644 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  7888.588 ±(99.9%) 7.265 us/op [Average]
  (min, avg, max) = (7872.105, 7888.588, 7897.875), stdev = 6.795
  CI (99.9%): [7881.323, 7895.852] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 65.22% complete, ETA 02:55:09
# Fork: 1 of 1
# Warmup Iteration   1: 108868.463 us/op
# Warmup Iteration   2: 107383.551 us/op
# Warmup Iteration   3: 107212.304 us/op
# Warmup Iteration   4: 107152.363 us/op
# Warmup Iteration   5: 106782.551 us/op
Iteration   1: 106574.148 us/op
Iteration   2: 106764.609 us/op
Iteration   3: 107860.163 us/op
Iteration   4: 107380.836 us/op
Iteration   5: 106919.029 us/op
Iteration   6: 107206.097 us/op
Iteration   7: 107447.972 us/op
Iteration   8: 107025.257 us/op
Iteration   9: 107088.342 us/op
Iteration  10: 107078.463 us/op
Iteration  11: 107142.057 us/op
Iteration  12: 106859.646 us/op
Iteration  13: 106558.591 us/op
Iteration  14: 107047.224 us/op
Iteration  15: 106921.774 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  107058.281 ±(99.9%) 358.927 us/op [Average]
  (min, avg, max) = (106558.591, 107058.281, 107860.163), stdev = 335.741
  CI (99.9%): [106699.353, 107417.208] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 65.94% complete, ETA 02:51:29
# Fork: 1 of 1
# Warmup Iteration   1: 1974825.422 us/op
# Warmup Iteration   2: 1716996.365 us/op
# Warmup Iteration   3: 1683368.893 us/op
# Warmup Iteration   4: 1680971.708 us/op
# Warmup Iteration   5: 1677417.364 us/op
Iteration   1: 1694931.078 us/op
Iteration   2: 1685978.406 us/op
Iteration   3: 1711462.517 us/op
Iteration   4: 1694685.950 us/op
Iteration   5: 1694838.261 us/op
Iteration   6: 1688283.493 us/op
Iteration   7: 1686853.285 us/op
Iteration   8: 1682492.772 us/op
Iteration   9: 1689194.510 us/op
Iteration  10: 1685928.716 us/op
Iteration  11: 1690924.827 us/op
Iteration  12: 1692700.484 us/op
Iteration  13: 1689286.376 us/op
Iteration  14: 1673632.862 us/op
Iteration  15: 1675555.472 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  1689116.601 ±(99.9%) 9503.758 us/op [Average]
  (min, avg, max) = (1673632.862, 1689116.601, 1711462.517), stdev = 8889.822
  CI (99.9%): [1679612.842, 1698620.359] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 66.66% complete, ETA 02:48:07
# Fork: 1 of 1
# Warmup Iteration   1: 201253.192 ±(99.9%) 15089.886 us/op
# Warmup Iteration   2: 194697.374 ±(99.9%) 731.282 us/op
# Warmup Iteration   3: 194798.198 ±(99.9%) 603.947 us/op
# Warmup Iteration   4: 194460.436 ±(99.9%) 627.941 us/op
# Warmup Iteration   5: 194767.951 ±(99.9%) 1463.459 us/op
Iteration   1: 194772.992 ±(99.9%) 661.729 us/op
                 createNewObjects·p0.00:   192675.840 us/op
                 createNewObjects·p0.50:   194510.848 us/op
                 createNewObjects·p0.90:   196529.357 us/op
                 createNewObjects·p0.95:   197669.683 us/op
                 createNewObjects·p0.99:   198967.296 us/op
                 createNewObjects·p0.999:  198967.296 us/op
                 createNewObjects·p0.9999: 198967.296 us/op
                 createNewObjects·p1.00:   198967.296 us/op

Iteration   2: 195272.074 ±(99.9%) 930.836 us/op
                 createNewObjects·p0.00:   192151.552 us/op
                 createNewObjects·p0.50:   194772.992 us/op
                 createNewObjects·p0.90:   198443.008 us/op
                 createNewObjects·p0.95:   199675.085 us/op
                 createNewObjects·p0.99:   200540.160 us/op
                 createNewObjects·p0.999:  200540.160 us/op
                 createNewObjects·p0.9999: 200540.160 us/op
                 createNewObjects·p1.00:   200540.160 us/op

Iteration   3: 194404.982 ±(99.9%) 695.827 us/op
                 createNewObjects·p0.00:   191627.264 us/op
                 createNewObjects·p0.50:   194117.632 us/op
                 createNewObjects·p0.90:   196608.000 us/op
                 createNewObjects·p0.95:   197053.645 us/op
                 createNewObjects·p0.99:   197656.576 us/op
                 createNewObjects·p0.999:  197656.576 us/op
                 createNewObjects·p0.9999: 197656.576 us/op
                 createNewObjects·p1.00:   197656.576 us/op

Iteration   4: 194591.508 ±(99.9%) 656.234 us/op
                 createNewObjects·p0.00:   192413.696 us/op
                 createNewObjects·p0.50:   194641.920 us/op
                 createNewObjects·p0.90:   196345.856 us/op
                 createNewObjects·p0.95:   196975.002 us/op
                 createNewObjects·p0.99:   197918.720 us/op
                 createNewObjects·p0.999:  197918.720 us/op
                 createNewObjects·p0.9999: 197918.720 us/op
                 createNewObjects·p1.00:   197918.720 us/op

Iteration   5: 194399.941 ±(99.9%) 697.227 us/op
                 createNewObjects·p0.00:   191889.408 us/op
                 createNewObjects·p0.50:   194510.848 us/op
                 createNewObjects·p0.90:   196267.213 us/op
                 createNewObjects·p0.95:   197224.038 us/op
                 createNewObjects·p0.99:   197918.720 us/op
                 createNewObjects·p0.999:  197918.720 us/op
                 createNewObjects·p0.9999: 197918.720 us/op
                 createNewObjects·p1.00:   197918.720 us/op

Iteration   6: 195171.249 ±(99.9%) 652.347 us/op
                 createNewObjects·p0.00:   192675.840 us/op
                 createNewObjects·p0.50:   195297.280 us/op
                 createNewObjects·p0.90:   196870.144 us/op
                 createNewObjects·p0.95:   197394.432 us/op
                 createNewObjects·p0.99:   198705.152 us/op
                 createNewObjects·p0.999:  198705.152 us/op
                 createNewObjects·p0.9999: 198705.152 us/op
                 createNewObjects·p1.00:   198705.152 us/op

Iteration   7: 194571.343 ±(99.9%) 531.227 us/op
                 createNewObjects·p0.00:   192675.840 us/op
                 createNewObjects·p0.50:   194248.704 us/op
                 createNewObjects·p0.90:   196345.856 us/op
                 createNewObjects·p0.95:   196699.750 us/op
                 createNewObjects·p0.99:   197132.288 us/op
                 createNewObjects·p0.999:  197132.288 us/op
                 createNewObjects·p0.9999: 197132.288 us/op
                 createNewObjects·p1.00:   197132.288 us/op

Iteration   8: 195720.743 ±(99.9%) 607.543 us/op
                 createNewObjects·p0.00:   192937.984 us/op
                 createNewObjects·p0.50:   195559.424 us/op
                 createNewObjects·p0.90:   197315.789 us/op
                 createNewObjects·p0.95:   198272.614 us/op
                 createNewObjects·p0.99:   198705.152 us/op
                 createNewObjects·p0.999:  198705.152 us/op
                 createNewObjects·p0.9999: 198705.152 us/op
                 createNewObjects·p1.00:   198705.152 us/op

Iteration   9: 194626.796 ±(99.9%) 577.830 us/op
                 createNewObjects·p0.00:   192413.696 us/op
                 createNewObjects·p0.50:   194510.848 us/op
                 createNewObjects·p0.90:   196267.213 us/op
                 createNewObjects·p0.95:   196529.357 us/op
                 createNewObjects·p0.99:   197394.432 us/op
                 createNewObjects·p0.999:  197394.432 us/op
                 createNewObjects·p0.9999: 197394.432 us/op
                 createNewObjects·p1.00:   197394.432 us/op

Iteration  10: 194772.992 ±(99.9%) 745.260 us/op
                 createNewObjects·p0.00:   191889.408 us/op
                 createNewObjects·p0.50:   194641.920 us/op
                 createNewObjects·p0.90:   196870.144 us/op
                 createNewObjects·p0.95:   197315.789 us/op
                 createNewObjects·p0.99:   198443.008 us/op
                 createNewObjects·p0.999:  198443.008 us/op
                 createNewObjects·p0.9999: 198443.008 us/op
                 createNewObjects·p1.00:   198443.008 us/op

Iteration  11: 193739.540 ±(99.9%) 653.278 us/op
                 createNewObjects·p0.00:   191102.976 us/op
                 createNewObjects·p0.50:   193724.416 us/op
                 createNewObjects·p0.90:   195559.424 us/op
                 createNewObjects·p0.95:   196437.606 us/op
                 createNewObjects·p0.99:   196608.000 us/op
                 createNewObjects·p0.999:  196608.000 us/op
                 createNewObjects·p0.9999: 196608.000 us/op
                 createNewObjects·p1.00:   196608.000 us/op

Iteration  12: 194909.105 ±(99.9%) 607.198 us/op
                 createNewObjects·p0.00:   192937.984 us/op
                 createNewObjects·p0.50:   194772.992 us/op
                 createNewObjects·p0.90:   196870.144 us/op
                 createNewObjects·p0.95:   197394.432 us/op
                 createNewObjects·p0.99:   197918.720 us/op
                 createNewObjects·p0.999:  197918.720 us/op
                 createNewObjects·p0.9999: 197918.720 us/op
                 createNewObjects·p1.00:   197918.720 us/op

Iteration  13: 195060.342 ±(99.9%) 735.556 us/op
                 createNewObjects·p0.00:   191889.408 us/op
                 createNewObjects·p0.50:   195035.136 us/op
                 createNewObjects·p0.90:   196608.000 us/op
                 createNewObjects·p0.95:   197315.789 us/op
                 createNewObjects·p0.99:   200802.304 us/op
                 createNewObjects·p0.999:  200802.304 us/op
                 createNewObjects·p0.9999: 200802.304 us/op
                 createNewObjects·p1.00:   200802.304 us/op

Iteration  14: 194727.621 ±(99.9%) 545.375 us/op
                 createNewObjects·p0.00:   192937.984 us/op
                 createNewObjects·p0.50:   194641.920 us/op
                 createNewObjects·p0.90:   196529.357 us/op
                 createNewObjects·p0.95:   196883.251 us/op
                 createNewObjects·p0.99:   198180.864 us/op
                 createNewObjects·p0.999:  198180.864 us/op
                 createNewObjects·p0.9999: 198180.864 us/op
                 createNewObjects·p1.00:   198180.864 us/op

Iteration  15: 194808.281 ±(99.9%) 578.713 us/op
                 createNewObjects·p0.00:   192151.552 us/op
                 createNewObjects·p0.50:   195035.136 us/op
                 createNewObjects·p0.90:   196345.856 us/op
                 createNewObjects·p0.95:   196961.894 us/op
                 createNewObjects·p0.99:   197394.432 us/op
                 createNewObjects·p0.999:  197394.432 us/op
                 createNewObjects·p0.9999: 197394.432 us/op
                 createNewObjects·p1.00:   197394.432 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 780
  mean = 194769.967 ±(99.9%) 169.095 us/op

  Histogram, us/op:
    [191000.000, 192000.000) = 11 
    [192000.000, 193000.000) = 75 
    [193000.000, 194000.000) = 177 
    [194000.000, 195000.000) = 173 
    [195000.000, 196000.000) = 185 
    [196000.000, 197000.000) = 111 
    [197000.000, 198000.000) = 32 
    [198000.000, 199000.000) = 12 
    [199000.000, 200000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 191102.976 us/op
     p(50.0000) = 194772.992 us/op
     p(90.0000) = 196608.000 us/op
     p(95.0000) = 197132.288 us/op
     p(99.0000) = 198705.152 us/op
     p(99.9000) = 200802.304 us/op
     p(99.9900) = 200802.304 us/op
     p(99.9990) = 200802.304 us/op
     p(99.9999) = 200802.304 us/op
    p(100.0000) = 200802.304 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 67.39% complete, ETA 02:44:26
# Fork: 1 of 1
# Warmup Iteration   1: 154818.213 ±(99.9%) 10450.740 us/op
# Warmup Iteration   2: 148685.764 ±(99.9%) 521.907 us/op
# Warmup Iteration   3: 149075.125 ±(99.9%) 343.108 us/op
# Warmup Iteration   4: 149500.332 ±(99.9%) 530.039 us/op
# Warmup Iteration   5: 149508.157 ±(99.9%) 424.769 us/op
Iteration   1: 149055.849 ±(99.9%) 542.349 us/op
                 createNewObjects·p0.00:   146800.640 us/op
                 createNewObjects·p0.50:   149159.936 us/op
                 createNewObjects·p0.90:   150470.656 us/op
                 createNewObjects·p0.95:   151925.555 us/op
                 createNewObjects·p0.99:   152305.664 us/op
                 createNewObjects·p0.999:  152305.664 us/op
                 createNewObjects·p0.9999: 152305.664 us/op
                 createNewObjects·p1.00:   152305.664 us/op

Iteration   2: 149633.360 ±(99.9%) 567.729 us/op
                 createNewObjects·p0.00:   147324.928 us/op
                 createNewObjects·p0.50:   149684.224 us/op
                 createNewObjects·p0.90:   151571.661 us/op
                 createNewObjects·p0.95:   152620.237 us/op
                 createNewObjects·p0.99:   153616.384 us/op
                 createNewObjects·p0.999:  153616.384 us/op
                 createNewObjects·p0.9999: 153616.384 us/op
                 createNewObjects·p1.00:   153616.384 us/op

Iteration   3: 149590.322 ±(99.9%) 348.118 us/op
                 createNewObjects·p0.00:   147849.216 us/op
                 createNewObjects·p0.50:   149684.224 us/op
                 createNewObjects·p0.90:   150732.800 us/op
                 createNewObjects·p0.95:   151152.230 us/op
                 createNewObjects·p0.99:   151781.376 us/op
                 createNewObjects·p0.999:  151781.376 us/op
                 createNewObjects·p0.9999: 151781.376 us/op
                 createNewObjects·p1.00:   151781.376 us/op

Iteration   4: 148666.488 ±(99.9%) 340.541 us/op
                 createNewObjects·p0.00:   147062.784 us/op
                 createNewObjects·p0.50:   148635.648 us/op
                 createNewObjects·p0.90:   149684.224 us/op
                 createNewObjects·p0.95:   150208.512 us/op
                 createNewObjects·p0.99:   150994.944 us/op
                 createNewObjects·p0.999:  150994.944 us/op
                 createNewObjects·p0.9999: 150994.944 us/op
                 createNewObjects·p1.00:   150994.944 us/op

Iteration   5: 149040.429 ±(99.9%) 437.825 us/op
                 createNewObjects·p0.00:   147062.784 us/op
                 createNewObjects·p0.50:   149028.864 us/op
                 createNewObjects·p0.90:   150470.656 us/op
                 createNewObjects·p0.95:   150876.979 us/op
                 createNewObjects·p0.99:   151257.088 us/op
                 createNewObjects·p0.999:  151257.088 us/op
                 createNewObjects·p0.9999: 151257.088 us/op
                 createNewObjects·p1.00:   151257.088 us/op

Iteration   6: 148404.344 ±(99.9%) 334.186 us/op
                 createNewObjects·p0.00:   146800.640 us/op
                 createNewObjects·p0.50:   148373.504 us/op
                 createNewObjects·p0.90:   149422.080 us/op
                 createNewObjects·p0.95:   149684.224 us/op
                 createNewObjects·p0.99:   150208.512 us/op
                 createNewObjects·p0.999:  150208.512 us/op
                 createNewObjects·p0.9999: 150208.512 us/op
                 createNewObjects·p1.00:   150208.512 us/op

Iteration   7: 148693.474 ±(99.9%) 538.284 us/op
                 createNewObjects·p0.00:   146538.496 us/op
                 createNewObjects·p0.50:   148504.576 us/op
                 createNewObjects·p0.90:   150759.014 us/op
                 createNewObjects·p0.95:   151257.088 us/op
                 createNewObjects·p0.99:   151781.376 us/op
                 createNewObjects·p0.999:  151781.376 us/op
                 createNewObjects·p0.9999: 151781.376 us/op
                 createNewObjects·p1.00:   151781.376 us/op

Iteration   8: 148693.474 ±(99.9%) 1123.581 us/op
                 createNewObjects·p0.00:   147062.784 us/op
                 createNewObjects·p0.50:   148111.360 us/op
                 createNewObjects·p0.90:   149946.368 us/op
                 createNewObjects·p0.95:   150234.726 us/op
                 createNewObjects·p0.99:   169345.024 us/op
                 createNewObjects·p0.999:  169345.024 us/op
                 createNewObjects·p0.9999: 169345.024 us/op
                 createNewObjects·p1.00:   169345.024 us/op

Iteration   9: 148173.041 ±(99.9%) 354.216 us/op
                 createNewObjects·p0.00:   146800.640 us/op
                 createNewObjects·p0.50:   148111.360 us/op
                 createNewObjects·p0.90:   149422.080 us/op
                 createNewObjects·p0.95:   149566.259 us/op
                 createNewObjects·p0.99:   150994.944 us/op
                 createNewObjects·p0.999:  150994.944 us/op
                 createNewObjects·p0.9999: 150994.944 us/op
                 createNewObjects·p1.00:   150994.944 us/op

Iteration  10: 149075.125 ±(99.9%) 420.339 us/op
                 createNewObjects·p0.00:   146800.640 us/op
                 createNewObjects·p0.50:   149159.936 us/op
                 createNewObjects·p0.90:   150234.726 us/op
                 createNewObjects·p0.95:   150732.800 us/op
                 createNewObjects·p0.99:   150994.944 us/op
                 createNewObjects·p0.999:  150994.944 us/op
                 createNewObjects·p0.9999: 150994.944 us/op
                 createNewObjects·p1.00:   150994.944 us/op

Iteration  11: 148982.603 ±(99.9%) 334.138 us/op
                 createNewObjects·p0.00:   147324.928 us/op
                 createNewObjects·p0.50:   149159.936 us/op
                 createNewObjects·p0.90:   149946.368 us/op
                 createNewObjects·p0.95:   150208.512 us/op
                 createNewObjects·p0.99:   150732.800 us/op
                 createNewObjects·p0.999:  150732.800 us/op
                 createNewObjects·p0.9999: 150732.800 us/op
                 createNewObjects·p1.00:   150732.800 us/op

Iteration  12: 149059.704 ±(99.9%) 374.761 us/op
                 createNewObjects·p0.00:   147062.784 us/op
                 createNewObjects·p0.50:   149159.936 us/op
                 createNewObjects·p0.90:   150234.726 us/op
                 createNewObjects·p0.95:   150470.656 us/op
                 createNewObjects·p0.99:   151519.232 us/op
                 createNewObjects·p0.999:  151519.232 us/op
                 createNewObjects·p0.9999: 151519.232 us/op
                 createNewObjects·p1.00:   151519.232 us/op

Iteration  13: 148944.053 ±(99.9%) 454.448 us/op
                 createNewObjects·p0.00:   147062.784 us/op
                 createNewObjects·p0.50:   148897.792 us/op
                 createNewObjects·p0.90:   150234.726 us/op
                 createNewObjects·p0.95:   150876.979 us/op
                 createNewObjects·p0.99:   152829.952 us/op
                 createNewObjects·p0.999:  152829.952 us/op
                 createNewObjects·p0.9999: 152829.952 us/op
                 createNewObjects·p1.00:   152829.952 us/op

Iteration  14: 148870.807 ±(99.9%) 373.381 us/op
                 createNewObjects·p0.00:   147062.784 us/op
                 createNewObjects·p0.50:   148897.792 us/op
                 createNewObjects·p0.90:   150208.512 us/op
                 createNewObjects·p0.95:   150470.656 us/op
                 createNewObjects·p0.99:   150732.800 us/op
                 createNewObjects·p0.999:  150732.800 us/op
                 createNewObjects·p0.9999: 150732.800 us/op
                 createNewObjects·p1.00:   150732.800 us/op

Iteration  15: 148936.343 ±(99.9%) 343.016 us/op
                 createNewObjects·p0.00:   147062.784 us/op
                 createNewObjects·p0.50:   148897.792 us/op
                 createNewObjects·p0.90:   149684.224 us/op
                 createNewObjects·p0.95:   150090.547 us/op
                 createNewObjects·p0.99:   151781.376 us/op
                 createNewObjects·p0.999:  151781.376 us/op
                 createNewObjects·p0.9999: 151781.376 us/op
                 createNewObjects·p1.00:   151781.376 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 1018
  mean = 148919.938 ±(99.9%) 128.327 us/op

  Histogram, us/op:
    [140000.000, 142500.000) = 0 
    [142500.000, 145000.000) = 0 
    [145000.000, 147500.000) = 84 
    [147500.000, 150000.000) = 805 
    [150000.000, 152500.000) = 124 
    [152500.000, 155000.000) = 4 
    [155000.000, 157500.000) = 0 
    [157500.000, 160000.000) = 0 
    [160000.000, 162500.000) = 0 
    [162500.000, 165000.000) = 0 
    [165000.000, 167500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 146538.496 us/op
     p(50.0000) = 148897.792 us/op
     p(90.0000) = 150208.512 us/op
     p(95.0000) = 150732.800 us/op
     p(99.0000) = 151993.713 us/op
     p(99.9000) = 169046.180 us/op
     p(99.9900) = 169345.024 us/op
     p(99.9990) = 169345.024 us/op
     p(99.9999) = 169345.024 us/op
    p(100.0000) = 169345.024 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 68.11% complete, ETA 02:40:46
# Fork: 1 of 1
# Warmup Iteration   1: 153354.240 ±(99.9%) 10872.836 us/op
# Warmup Iteration   2: 144714.723 ±(99.9%) 478.978 us/op
# Warmup Iteration   3: 145128.997 ±(99.9%) 387.845 us/op
# Warmup Iteration   4: 144821.263 ±(99.9%) 461.087 us/op
# Warmup Iteration   5: 144710.978 ±(99.9%) 360.216 us/op
Iteration   1: 145714.072 ±(99.9%) 460.237 us/op
                 createNewObjects·p0.00:   143654.912 us/op
                 createNewObjects·p0.50:   145489.920 us/op
                 createNewObjects·p0.90:   147324.928 us/op
                 createNewObjects·p0.95:   147718.144 us/op
                 createNewObjects·p0.99:   148373.504 us/op
                 createNewObjects·p0.999:  148373.504 us/op
                 createNewObjects·p0.9999: 148373.504 us/op
                 createNewObjects·p1.00:   148373.504 us/op

Iteration   2: 145311.358 ±(99.9%) 554.244 us/op
                 createNewObjects·p0.00:   143130.624 us/op
                 createNewObjects·p0.50:   144965.632 us/op
                 createNewObjects·p0.90:   147324.928 us/op
                 createNewObjects·p0.95:   148111.360 us/op
                 createNewObjects·p0.99:   149159.936 us/op
                 createNewObjects·p0.999:  149159.936 us/op
                 createNewObjects·p0.9999: 149159.936 us/op
                 createNewObjects·p1.00:   149159.936 us/op

Iteration   3: 144809.865 ±(99.9%) 405.414 us/op
                 createNewObjects·p0.00:   143130.624 us/op
                 createNewObjects·p0.50:   144703.488 us/op
                 createNewObjects·p0.90:   146276.352 us/op
                 createNewObjects·p0.95:   146669.568 us/op
                 createNewObjects·p0.99:   148111.360 us/op
                 createNewObjects·p0.999:  148111.360 us/op
                 createNewObjects·p0.9999: 148111.360 us/op
                 createNewObjects·p1.00:   148111.360 us/op

Iteration   4: 144815.835 ±(99.9%) 437.966 us/op
                 createNewObjects·p0.00:   142868.480 us/op
                 createNewObjects·p0.50:   144703.488 us/op
                 createNewObjects·p0.90:   146512.282 us/op
                 createNewObjects·p0.95:   146800.640 us/op
                 createNewObjects·p0.99:   147062.784 us/op
                 createNewObjects·p0.999:  147062.784 us/op
                 createNewObjects·p0.9999: 147062.784 us/op
                 createNewObjects·p1.00:   147062.784 us/op

Iteration   5: 145315.157 ±(99.9%) 377.690 us/op
                 createNewObjects·p0.00:   143392.768 us/op
                 createNewObjects·p0.50:   145227.776 us/op
                 createNewObjects·p0.90:   146538.496 us/op
                 createNewObjects·p0.95:   147062.784 us/op
                 createNewObjects·p0.99:   147849.216 us/op
                 createNewObjects·p0.999:  147849.216 us/op
                 createNewObjects·p0.9999: 147849.216 us/op
                 createNewObjects·p1.00:   147849.216 us/op

Iteration   6: 144681.019 ±(99.9%) 443.750 us/op
                 createNewObjects·p0.00:   142868.480 us/op
                 createNewObjects·p0.50:   144441.344 us/op
                 createNewObjects·p0.90:   146276.352 us/op
                 createNewObjects·p0.95:   146918.605 us/op
                 createNewObjects·p0.99:   147324.928 us/op
                 createNewObjects·p0.999:  147324.928 us/op
                 createNewObjects·p0.9999: 147324.928 us/op
                 createNewObjects·p1.00:   147324.928 us/op

Iteration   7: 144859.255 ±(99.9%) 330.551 us/op
                 createNewObjects·p0.00:   143130.624 us/op
                 createNewObjects·p0.50:   144703.488 us/op
                 createNewObjects·p0.90:   146014.208 us/op
                 createNewObjects·p0.95:   146276.352 us/op
                 createNewObjects·p0.99:   146800.640 us/op
                 createNewObjects·p0.999:  146800.640 us/op
                 createNewObjects·p0.9999: 146800.640 us/op
                 createNewObjects·p1.00:   146800.640 us/op

Iteration   8: 144897.247 ±(99.9%) 354.493 us/op
                 createNewObjects·p0.00:   143130.624 us/op
                 createNewObjects·p0.50:   144703.488 us/op
                 createNewObjects·p0.90:   146276.352 us/op
                 createNewObjects·p0.95:   146407.424 us/op
                 createNewObjects·p0.99:   146800.640 us/op
                 createNewObjects·p0.999:  146800.640 us/op
                 createNewObjects·p0.9999: 146800.640 us/op
                 createNewObjects·p1.00:   146800.640 us/op

Iteration   9: 145360.748 ±(99.9%) 591.484 us/op
                 createNewObjects·p0.00:   143130.624 us/op
                 createNewObjects·p0.50:   145227.776 us/op
                 createNewObjects·p0.90:   147587.072 us/op
                 createNewObjects·p0.95:   147980.288 us/op
                 createNewObjects·p0.99:   148373.504 us/op
                 createNewObjects·p0.999:  148373.504 us/op
                 createNewObjects·p0.9999: 148373.504 us/op
                 createNewObjects·p1.00:   148373.504 us/op

Iteration  10: 145930.626 ±(99.9%) 370.664 us/op
                 createNewObjects·p0.00:   144441.344 us/op
                 createNewObjects·p0.50:   146014.208 us/op
                 createNewObjects·p0.90:   147062.784 us/op
                 createNewObjects·p0.95:   147587.072 us/op
                 createNewObjects·p0.99:   148111.360 us/op
                 createNewObjects·p0.999:  148111.360 us/op
                 createNewObjects·p0.9999: 148111.360 us/op
                 createNewObjects·p1.00:   148111.360 us/op

Iteration  11: 146154.778 ±(99.9%) 384.020 us/op
                 createNewObjects·p0.00:   144441.344 us/op
                 createNewObjects·p0.50:   146014.208 us/op
                 createNewObjects·p0.90:   147324.928 us/op
                 createNewObjects·p0.95:   147849.216 us/op
                 createNewObjects·p0.99:   148635.648 us/op
                 createNewObjects·p0.999:  148635.648 us/op
                 createNewObjects·p0.9999: 148635.648 us/op
                 createNewObjects·p1.00:   148635.648 us/op

Iteration  12: 146052.200 ±(99.9%) 471.395 us/op
                 createNewObjects·p0.00:   143654.912 us/op
                 createNewObjects·p0.50:   146276.352 us/op
                 createNewObjects·p0.90:   147324.928 us/op
                 createNewObjects·p0.95:   147849.216 us/op
                 createNewObjects·p0.99:   148111.360 us/op
                 createNewObjects·p0.999:  148111.360 us/op
                 createNewObjects·p0.9999: 148111.360 us/op
                 createNewObjects·p1.00:   148111.360 us/op

Iteration  13: 145622.892 ±(99.9%) 355.943 us/op
                 createNewObjects·p0.00:   143917.056 us/op
                 createNewObjects·p0.50:   145752.064 us/op
                 createNewObjects·p0.90:   146800.640 us/op
                 createNewObjects·p0.95:   147193.856 us/op
                 createNewObjects·p0.99:   147587.072 us/op
                 createNewObjects·p0.999:  147587.072 us/op
                 createNewObjects·p0.9999: 147587.072 us/op
                 createNewObjects·p1.00:   147587.072 us/op

Iteration  14: 145869.839 ±(99.9%) 377.171 us/op
                 createNewObjects·p0.00:   144179.200 us/op
                 createNewObjects·p0.50:   145752.064 us/op
                 createNewObjects·p0.90:   147062.784 us/op
                 createNewObjects·p0.95:   147324.928 us/op
                 createNewObjects·p0.99:   148111.360 us/op
                 createNewObjects·p0.999:  148111.360 us/op
                 createNewObjects·p0.9999: 148111.360 us/op
                 createNewObjects·p1.00:   148111.360 us/op

Iteration  15: 146150.979 ±(99.9%) 473.717 us/op
                 createNewObjects·p0.00:   143654.912 us/op
                 createNewObjects·p0.50:   146276.352 us/op
                 createNewObjects·p0.90:   147587.072 us/op
                 createNewObjects·p0.95:   147849.216 us/op
                 createNewObjects·p0.99:   148373.504 us/op
                 createNewObjects·p0.999:  148373.504 us/op
                 createNewObjects·p0.9999: 148373.504 us/op
                 createNewObjects·p1.00:   148373.504 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 1037
  mean = 145435.064 ±(99.9%) 118.670 us/op

  Histogram, us/op:
    [142000.000, 142500.000) = 0 
    [142500.000, 143000.000) = 2 
    [143000.000, 143500.000) = 40 
    [143500.000, 144000.000) = 84 
    [144000.000, 144500.000) = 127 
    [144500.000, 145000.000) = 170 
    [145000.000, 145500.000) = 186 
    [145500.000, 146000.000) = 70 
    [146000.000, 146500.000) = 137 
    [146500.000, 147000.000) = 97 
    [147000.000, 147500.000) = 81 
    [147500.000, 148000.000) = 27 
    [148000.000, 148500.000) = 13 
    [148500.000, 149000.000) = 2 
    [149000.000, 149500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 142868.480 us/op
     p(50.0000) = 145489.920 us/op
     p(90.0000) = 147062.784 us/op
     p(95.0000) = 147324.928 us/op
     p(99.0000) = 148111.360 us/op
     p(99.9000) = 149149.975 us/op
     p(99.9900) = 149159.936 us/op
     p(99.9990) = 149159.936 us/op
     p(99.9999) = 149159.936 us/op
    p(100.0000) = 149159.936 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 68.84% complete, ETA 02:37:05
# Fork: 1 of 1
# Warmup Iteration   1: 203109.171 ±(99.9%) 5844.199 us/op
# Warmup Iteration   2: 199635.506 ±(99.9%) 854.455 us/op
# Warmup Iteration   3: 198566.370 ±(99.9%) 782.435 us/op
# Warmup Iteration   4: 198150.024 ±(99.9%) 570.251 us/op
# Warmup Iteration   5: 198787.393 ±(99.9%) 738.311 us/op
Iteration   1: 198879.915 ±(99.9%) 700.858 us/op
                 createNewObjects·p0.00:   196608.000 us/op
                 createNewObjects·p0.50:   199229.440 us/op
                 createNewObjects·p0.90:   200487.731 us/op
                 createNewObjects·p0.95:   200802.304 us/op
                 createNewObjects·p0.99:   201326.592 us/op
                 createNewObjects·p0.999:  201326.592 us/op
                 createNewObjects·p0.9999: 201326.592 us/op
                 createNewObjects·p1.00:   201326.592 us/op

Iteration   2: 198299.086 ±(99.9%) 685.966 us/op
                 createNewObjects·p0.00:   196870.144 us/op
                 createNewObjects·p0.50:   197656.576 us/op
                 createNewObjects·p0.90:   200802.304 us/op
                 createNewObjects·p0.95:   201012.019 us/op
                 createNewObjects·p0.99:   201850.880 us/op
                 createNewObjects·p0.999:  201850.880 us/op
                 createNewObjects·p0.9999: 201850.880 us/op
                 createNewObjects·p1.00:   201850.880 us/op

Iteration   3: 197733.677 ±(99.9%) 649.960 us/op
                 createNewObjects·p0.00:   196083.712 us/op
                 createNewObjects·p0.50:   197394.432 us/op
                 createNewObjects·p0.90:   199491.584 us/op
                 createNewObjects·p0.95:   200382.874 us/op
                 createNewObjects·p0.99:   201850.880 us/op
                 createNewObjects·p0.999:  201850.880 us/op
                 createNewObjects·p0.9999: 201850.880 us/op
                 createNewObjects·p1.00:   201850.880 us/op

Iteration   4: 198915.895 ±(99.9%) 546.884 us/op
                 createNewObjects·p0.00:   196345.856 us/op
                 createNewObjects·p0.50:   199491.584 us/op
                 createNewObjects·p0.90:   200015.872 us/op
                 createNewObjects·p0.95:   200225.587 us/op
                 createNewObjects·p0.99:   200802.304 us/op
                 createNewObjects·p0.999:  200802.304 us/op
                 createNewObjects·p0.9999: 200802.304 us/op
                 createNewObjects·p1.00:   200802.304 us/op

Iteration   5: 198443.008 ±(99.9%) 568.141 us/op
                 createNewObjects·p0.00:   195821.568 us/op
                 createNewObjects·p0.50:   198705.152 us/op
                 createNewObjects·p0.90:   199753.728 us/op
                 createNewObjects·p0.95:   199858.586 us/op
                 createNewObjects·p0.99:   200015.872 us/op
                 createNewObjects·p0.999:  200015.872 us/op
                 createNewObjects·p0.9999: 200015.872 us/op
                 createNewObjects·p1.00:   200015.872 us/op

Iteration   6: 198237.405 ±(99.9%) 674.343 us/op
                 createNewObjects·p0.00:   196345.856 us/op
                 createNewObjects·p0.50:   198180.864 us/op
                 createNewObjects·p0.90:   200015.872 us/op
                 createNewObjects·p0.95:   200120.730 us/op
                 createNewObjects·p0.99:   201326.592 us/op
                 createNewObjects·p0.999:  201326.592 us/op
                 createNewObjects·p0.9999: 201326.592 us/op
                 createNewObjects·p1.00:   201326.592 us/op

Iteration   7: 197625.736 ±(99.9%) 509.227 us/op
                 createNewObjects·p0.00:   195821.568 us/op
                 createNewObjects·p0.50:   197656.576 us/op
                 createNewObjects·p0.90:   199439.155 us/op
                 createNewObjects·p0.95:   199596.442 us/op
                 createNewObjects·p0.99:   199753.728 us/op
                 createNewObjects·p0.999:  199753.728 us/op
                 createNewObjects·p0.9999: 199753.728 us/op
                 createNewObjects·p1.00:   199753.728 us/op

Iteration   8: 197553.774 ±(99.9%) 576.816 us/op
                 createNewObjects·p0.00:   195821.568 us/op
                 createNewObjects·p0.50:   197132.288 us/op
                 createNewObjects·p0.90:   199753.728 us/op
                 createNewObjects·p0.95:   199753.728 us/op
                 createNewObjects·p0.99:   200015.872 us/op
                 createNewObjects·p0.999:  200015.872 us/op
                 createNewObjects·p0.9999: 200015.872 us/op
                 createNewObjects·p1.00:   200015.872 us/op

Iteration   9: 198833.654 ±(99.9%) 574.696 us/op
                 createNewObjects·p0.00:   196083.712 us/op
                 createNewObjects·p0.50:   199229.440 us/op
                 createNewObjects·p0.90:   200225.587 us/op
                 createNewObjects·p0.95:   200278.016 us/op
                 createNewObjects·p0.99:   200540.160 us/op
                 createNewObjects·p0.999:  200540.160 us/op
                 createNewObjects·p0.9999: 200540.160 us/op
                 createNewObjects·p1.00:   200540.160 us/op

Iteration  10: 198283.666 ±(99.9%) 813.283 us/op
                 createNewObjects·p0.00:   195821.568 us/op
                 createNewObjects·p0.50:   198180.864 us/op
                 createNewObjects·p0.90:   200487.731 us/op
                 createNewObjects·p0.95:   200802.304 us/op
                 createNewObjects·p0.99:   201064.448 us/op
                 createNewObjects·p0.999:  201064.448 us/op
                 createNewObjects·p0.9999: 201064.448 us/op
                 createNewObjects·p1.00:   201064.448 us/op

Iteration  11: 199707.467 ±(99.9%) 448.755 us/op
                 createNewObjects·p0.00:   196870.144 us/op
                 createNewObjects·p0.50:   199753.728 us/op
                 createNewObjects·p0.90:   200540.160 us/op
                 createNewObjects·p0.95:   200802.304 us/op
                 createNewObjects·p0.99:   201064.448 us/op
                 createNewObjects·p0.999:  201064.448 us/op
                 createNewObjects·p0.9999: 201064.448 us/op
                 createNewObjects·p1.00:   201064.448 us/op

Iteration  12: 198463.568 ±(99.9%) 565.726 us/op
                 createNewObjects·p0.00:   196608.000 us/op
                 createNewObjects·p0.50:   199229.440 us/op
                 createNewObjects·p0.90:   199911.014 us/op
                 createNewObjects·p0.95:   200015.872 us/op
                 createNewObjects·p0.99:   200015.872 us/op
                 createNewObjects·p0.999:  200015.872 us/op
                 createNewObjects·p0.9999: 200015.872 us/op
                 createNewObjects·p1.00:   200015.872 us/op

Iteration  13: 198751.413 ±(99.9%) 538.194 us/op
                 createNewObjects·p0.00:   196608.000 us/op
                 createNewObjects·p0.50:   198705.152 us/op
                 createNewObjects·p0.90:   200540.160 us/op
                 createNewObjects·p0.95:   200540.160 us/op
                 createNewObjects·p0.99:   200802.304 us/op
                 createNewObjects·p0.999:  200802.304 us/op
                 createNewObjects·p0.9999: 200802.304 us/op
                 createNewObjects·p1.00:   200802.304 us/op

Iteration  14: 198196.284 ±(99.9%) 650.526 us/op
                 createNewObjects·p0.00:   196608.000 us/op
                 createNewObjects·p0.50:   197918.720 us/op
                 createNewObjects·p0.90:   200749.875 us/op
                 createNewObjects·p0.95:   201169.306 us/op
                 createNewObjects·p0.99:   201326.592 us/op
                 createNewObjects·p0.999:  201326.592 us/op
                 createNewObjects·p0.9999: 201326.592 us/op
                 createNewObjects·p1.00:   201326.592 us/op

Iteration  15: 198638.331 ±(99.9%) 644.131 us/op
                 createNewObjects·p0.00:   196083.712 us/op
                 createNewObjects·p0.50:   198443.008 us/op
                 createNewObjects·p0.90:   200540.160 us/op
                 createNewObjects·p0.95:   200907.162 us/op
                 createNewObjects·p0.99:   201064.448 us/op
                 createNewObjects·p0.999:  201064.448 us/op
                 createNewObjects·p0.9999: 201064.448 us/op
                 createNewObjects·p1.00:   201064.448 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 765
  mean = 198437.525 ±(99.9%) 162.413 us/op

  Histogram, us/op:
    [195000.000, 195500.000) = 0 
    [195500.000, 196000.000) = 15 
    [196000.000, 196500.000) = 32 
    [196500.000, 197000.000) = 83 
    [197000.000, 197500.000) = 106 
    [197500.000, 198000.000) = 100 
    [198000.000, 198500.000) = 87 
    [198500.000, 199000.000) = 37 
    [199000.000, 199500.000) = 120 
    [199500.000, 200000.000) = 58 
    [200000.000, 200500.000) = 71 
    [200500.000, 201000.000) = 44 
    [201000.000, 201500.000) = 10 

  Percentiles, us/op:
      p(0.0000) = 195821.568 us/op
     p(50.0000) = 198180.864 us/op
     p(90.0000) = 200278.016 us/op
     p(95.0000) = 200540.160 us/op
     p(99.0000) = 201153.577 us/op
     p(99.9000) = 201850.880 us/op
     p(99.9900) = 201850.880 us/op
     p(99.9990) = 201850.880 us/op
     p(99.9999) = 201850.880 us/op
    p(100.0000) = 201850.880 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 69.56% complete, ETA 02:33:25
# Fork: 1 of 1
# Warmup Iteration   1: 201143.091 ±(99.9%) 5066.213 us/op
# Warmup Iteration   2: 199661.207 ±(99.9%) 625.968 us/op
# Warmup Iteration   3: 199039.257 ±(99.9%) 457.026 us/op
# Warmup Iteration   4: 197486.953 ±(99.9%) 841.838 us/op
# Warmup Iteration   5: 197985.541 ±(99.9%) 655.284 us/op
Iteration   1: 197985.541 ±(99.9%) 560.461 us/op
                 createNewObjects·p0.00:   196083.712 us/op
                 createNewObjects·p0.50:   197918.720 us/op
                 createNewObjects·p0.90:   199963.443 us/op
                 createNewObjects·p0.95:   200015.872 us/op
                 createNewObjects·p0.99:   200278.016 us/op
                 createNewObjects·p0.999:  200278.016 us/op
                 createNewObjects·p0.9999: 200278.016 us/op
                 createNewObjects·p1.00:   200278.016 us/op

Iteration   2: 197707.977 ±(99.9%) 542.044 us/op
                 createNewObjects·p0.00:   196345.856 us/op
                 createNewObjects·p0.50:   197656.576 us/op
                 createNewObjects·p0.90:   199229.440 us/op
                 createNewObjects·p0.95:   199491.584 us/op
                 createNewObjects·p0.99:   200015.872 us/op
                 createNewObjects·p0.999:  200015.872 us/op
                 createNewObjects·p0.9999: 200015.872 us/op
                 createNewObjects·p1.00:   200015.872 us/op

Iteration   3: 198679.452 ±(99.9%) 664.474 us/op
                 createNewObjects·p0.00:   196345.856 us/op
                 createNewObjects·p0.50:   198967.296 us/op
                 createNewObjects·p0.90:   200225.587 us/op
                 createNewObjects·p0.95:   201274.163 us/op
                 createNewObjects·p0.99:   201588.736 us/op
                 createNewObjects·p0.999:  201588.736 us/op
                 createNewObjects·p0.9999: 201588.736 us/op
                 createNewObjects·p1.00:   201588.736 us/op

Iteration   4: 198273.385 ±(99.9%) 661.776 us/op
                 createNewObjects·p0.00:   195297.280 us/op
                 createNewObjects·p0.50:   198967.296 us/op
                 createNewObjects·p0.90:   199491.584 us/op
                 createNewObjects·p0.95:   200015.872 us/op
                 createNewObjects·p0.99:   200540.160 us/op
                 createNewObjects·p0.999:  200540.160 us/op
                 createNewObjects·p0.9999: 200540.160 us/op
                 createNewObjects·p1.00:   200540.160 us/op

Iteration   5: 198391.607 ±(99.9%) 682.454 us/op
                 createNewObjects·p0.00:   195559.424 us/op
                 createNewObjects·p0.50:   198705.152 us/op
                 createNewObjects·p0.90:   200015.872 us/op
                 createNewObjects·p0.95:   200382.874 us/op
                 createNewObjects·p0.99:   200802.304 us/op
                 createNewObjects·p0.999:  200802.304 us/op
                 createNewObjects·p0.9999: 200802.304 us/op
                 createNewObjects·p1.00:   200802.304 us/op

Iteration   6: 197887.880 ±(99.9%) 625.348 us/op
                 createNewObjects·p0.00:   196083.712 us/op
                 createNewObjects·p0.50:   197394.432 us/op
                 createNewObjects·p0.90:   199491.584 us/op
                 createNewObjects·p0.95:   199753.728 us/op
                 createNewObjects·p0.99:   200278.016 us/op
                 createNewObjects·p0.999:  200278.016 us/op
                 createNewObjects·p0.9999: 200278.016 us/op
                 createNewObjects·p1.00:   200278.016 us/op

Iteration   7: 197353.311 ±(99.9%) 653.033 us/op
                 createNewObjects·p0.00:   195821.568 us/op
                 createNewObjects·p0.50:   196608.000 us/op
                 createNewObjects·p0.90:   199491.584 us/op
                 createNewObjects·p0.95:   200120.730 us/op
                 createNewObjects·p0.99:   200278.016 us/op
                 createNewObjects·p0.999:  200278.016 us/op
                 createNewObjects·p0.9999: 200278.016 us/op
                 createNewObjects·p1.00:   200278.016 us/op

Iteration   8: 198340.206 ±(99.9%) 592.589 us/op
                 createNewObjects·p0.00:   196345.856 us/op
                 createNewObjects·p0.50:   198705.152 us/op
                 createNewObjects·p0.90:   199753.728 us/op
                 createNewObjects·p0.95:   200015.872 us/op
                 createNewObjects·p0.99:   200015.872 us/op
                 createNewObjects·p0.999:  200015.872 us/op
                 createNewObjects·p0.9999: 200015.872 us/op
                 createNewObjects·p1.00:   200015.872 us/op

Iteration   9: 197517.794 ±(99.9%) 654.534 us/op
                 createNewObjects·p0.00:   195821.568 us/op
                 createNewObjects·p0.50:   196870.144 us/op
                 createNewObjects·p0.90:   199229.440 us/op
                 createNewObjects·p0.95:   199858.586 us/op
                 createNewObjects·p0.99:   200015.872 us/op
                 createNewObjects·p0.999:  200015.872 us/op
                 createNewObjects·p0.9999: 200015.872 us/op
                 createNewObjects·p1.00:   200015.872 us/op

Iteration  10: 197029.486 ±(99.9%) 599.771 us/op
                 createNewObjects·p0.00:   195297.280 us/op
                 createNewObjects·p0.50:   196608.000 us/op
                 createNewObjects·p0.90:   198967.296 us/op
                 createNewObjects·p0.95:   199229.440 us/op
                 createNewObjects·p0.99:   199229.440 us/op
                 createNewObjects·p0.999:  199229.440 us/op
                 createNewObjects·p0.9999: 199229.440 us/op
                 createNewObjects·p1.00:   199229.440 us/op

Iteration  11: 198319.646 ±(99.9%) 474.198 us/op
                 createNewObjects·p0.00:   196608.000 us/op
                 createNewObjects·p0.50:   198705.152 us/op
                 createNewObjects·p0.90:   199229.440 us/op
                 createNewObjects·p0.95:   199963.443 us/op
                 createNewObjects·p0.99:   200540.160 us/op
                 createNewObjects·p0.999:  200540.160 us/op
                 createNewObjects·p0.9999: 200540.160 us/op
                 createNewObjects·p1.00:   200540.160 us/op

Iteration  12: 198078.062 ±(99.9%) 437.135 us/op
                 createNewObjects·p0.00:   196083.712 us/op
                 createNewObjects·p0.50:   198443.008 us/op
                 createNewObjects·p0.90:   198967.296 us/op
                 createNewObjects·p0.95:   199072.154 us/op
                 createNewObjects·p0.99:   199491.584 us/op
                 createNewObjects·p0.999:  199491.584 us/op
                 createNewObjects·p0.9999: 199491.584 us/op
                 createNewObjects·p1.00:   199491.584 us/op

Iteration  13: 197528.074 ±(99.9%) 494.610 us/op
                 createNewObjects·p0.00:   195821.568 us/op
                 createNewObjects·p0.50:   197132.288 us/op
                 createNewObjects·p0.90:   198705.152 us/op
                 createNewObjects·p0.95:   198967.296 us/op
                 createNewObjects·p0.99:   199491.584 us/op
                 createNewObjects·p0.999:  199491.584 us/op
                 createNewObjects·p0.9999: 199491.584 us/op
                 createNewObjects·p1.00:   199491.584 us/op

Iteration  14: 197492.093 ±(99.9%) 573.312 us/op
                 createNewObjects·p0.00:   195821.568 us/op
                 createNewObjects·p0.50:   197132.288 us/op
                 createNewObjects·p0.90:   199229.440 us/op
                 createNewObjects·p0.95:   199701.299 us/op
                 createNewObjects·p0.99:   200015.872 us/op
                 createNewObjects·p0.999:  200015.872 us/op
                 createNewObjects·p0.9999: 200015.872 us/op
                 createNewObjects·p1.00:   200015.872 us/op

Iteration  15: 197995.821 ±(99.9%) 685.476 us/op
                 createNewObjects·p0.00:   195297.280 us/op
                 createNewObjects·p0.50:   197656.576 us/op
                 createNewObjects·p0.90:   200015.872 us/op
                 createNewObjects·p0.95:   200015.872 us/op
                 createNewObjects·p0.99:   201850.880 us/op
                 createNewObjects·p0.999:  201850.880 us/op
                 createNewObjects·p0.9999: 201850.880 us/op
                 createNewObjects·p1.00:   201850.880 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 765
  mean = 197905.356 ±(99.9%) 154.025 us/op

  Histogram, us/op:
    [195000.000, 195500.000) = 6 
    [195500.000, 196000.000) = 20 
    [196000.000, 196500.000) = 95 
    [196500.000, 197000.000) = 141 
    [197000.000, 197500.000) = 66 
    [197500.000, 198000.000) = 75 
    [198000.000, 198500.000) = 45 
    [198500.000, 199000.000) = 166 
    [199000.000, 199500.000) = 91 
    [199500.000, 200000.000) = 17 
    [200000.000, 200500.000) = 34 
    [200500.000, 201000.000) = 5 
    [201000.000, 201500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 195297.280 us/op
     p(50.0000) = 197918.720 us/op
     p(90.0000) = 199491.584 us/op
     p(95.0000) = 200015.872 us/op
     p(99.0000) = 200540.160 us/op
     p(99.9000) = 201850.880 us/op
     p(99.9900) = 201850.880 us/op
     p(99.9990) = 201850.880 us/op
     p(99.9999) = 201850.880 us/op
    p(100.0000) = 201850.880 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 70.29% complete, ETA 02:29:45
# Fork: 1 of 1
# Warmup Iteration   1: 198571.510 ±(99.9%) 4193.964 us/op
# Warmup Iteration   2: 193754.663 ±(99.9%) 724.039 us/op
# Warmup Iteration   3: 194788.116 ±(99.9%) 770.035 us/op
# Warmup Iteration   4: 193769.787 ±(99.9%) 682.746 us/op
# Warmup Iteration   5: 194354.570 ±(99.9%) 667.083 us/op
Iteration   1: 193613.509 ±(99.9%) 529.279 us/op
                 createNewObjects·p0.00:   191627.264 us/op
                 createNewObjects·p0.50:   193200.128 us/op
                 createNewObjects·p0.90:   195297.280 us/op
                 createNewObjects·p0.95:   195651.174 us/op
                 createNewObjects·p0.99:   195821.568 us/op
                 createNewObjects·p0.999:  195821.568 us/op
                 createNewObjects·p0.9999: 195821.568 us/op
                 createNewObjects·p1.00:   195821.568 us/op

Iteration   2: 194707.456 ±(99.9%) 698.372 us/op
                 createNewObjects·p0.00:   192413.696 us/op
                 createNewObjects·p0.50:   194904.064 us/op
                 createNewObjects·p0.90:   196608.000 us/op
                 createNewObjects·p0.95:   196870.144 us/op
                 createNewObjects·p0.99:   197132.288 us/op
                 createNewObjects·p0.999:  197132.288 us/op
                 createNewObjects·p0.9999: 197132.288 us/op
                 createNewObjects·p1.00:   197132.288 us/op

Iteration   3: 194309.199 ±(99.9%) 736.996 us/op
                 createNewObjects·p0.00:   191365.120 us/op
                 createNewObjects·p0.50:   194772.992 us/op
                 createNewObjects·p0.90:   195821.568 us/op
                 createNewObjects·p0.95:   196083.712 us/op
                 createNewObjects·p0.99:   196345.856 us/op
                 createNewObjects·p0.999:  196345.856 us/op
                 createNewObjects·p0.9999: 196345.856 us/op
                 createNewObjects·p1.00:   196345.856 us/op

Iteration   4: 193739.540 ±(99.9%) 516.633 us/op
                 createNewObjects·p0.00:   192413.696 us/op
                 createNewObjects·p0.50:   193462.272 us/op
                 createNewObjects·p0.90:   195821.568 us/op
                 createNewObjects·p0.95:   196083.712 us/op
                 createNewObjects·p0.99:   196083.712 us/op
                 createNewObjects·p0.999:  196083.712 us/op
                 createNewObjects·p0.9999: 196083.712 us/op
                 createNewObjects·p1.00:   196083.712 us/op

Iteration   5: 194510.848 ±(99.9%) 607.983 us/op
                 createNewObjects·p0.00:   191627.264 us/op
                 createNewObjects·p0.50:   194772.992 us/op
                 createNewObjects·p0.90:   196005.069 us/op
                 createNewObjects·p0.95:   196437.606 us/op
                 createNewObjects·p0.99:   196608.000 us/op
                 createNewObjects·p0.999:  196608.000 us/op
                 createNewObjects·p0.9999: 196608.000 us/op
                 createNewObjects·p1.00:   196608.000 us/op

Iteration   6: 194127.714 ±(99.9%) 640.605 us/op
                 createNewObjects·p0.00:   191365.120 us/op
                 createNewObjects·p0.50:   194117.632 us/op
                 createNewObjects·p0.90:   195559.424 us/op
                 createNewObjects·p0.95:   195821.568 us/op
                 createNewObjects·p0.99:   196608.000 us/op
                 createNewObjects·p0.999:  196608.000 us/op
                 createNewObjects·p0.9999: 196608.000 us/op
                 createNewObjects·p1.00:   196608.000 us/op

Iteration   7: 194309.199 ±(99.9%) 589.844 us/op
                 createNewObjects·p0.00:   192675.840 us/op
                 createNewObjects·p0.50:   193986.560 us/op
                 createNewObjects·p0.90:   196345.856 us/op
                 createNewObjects·p0.95:   196437.606 us/op
                 createNewObjects·p0.99:   196608.000 us/op
                 createNewObjects·p0.999:  196608.000 us/op
                 createNewObjects·p0.9999: 196608.000 us/op
                 createNewObjects·p1.00:   196608.000 us/op

Iteration   8: 193749.622 ±(99.9%) 721.681 us/op
                 createNewObjects·p0.00:   191365.120 us/op
                 createNewObjects·p0.50:   193462.272 us/op
                 createNewObjects·p0.90:   196267.213 us/op
                 createNewObjects·p0.95:   196437.606 us/op
                 createNewObjects·p0.99:   196870.144 us/op
                 createNewObjects·p0.999:  196870.144 us/op
                 createNewObjects·p0.9999: 196870.144 us/op
                 createNewObjects·p1.00:   196870.144 us/op

Iteration   9: 193900.859 ±(99.9%) 544.795 us/op
                 createNewObjects·p0.00:   191365.120 us/op
                 createNewObjects·p0.50:   193724.416 us/op
                 createNewObjects·p0.90:   195559.424 us/op
                 createNewObjects·p0.95:   195913.318 us/op
                 createNewObjects·p0.99:   196608.000 us/op
                 createNewObjects·p0.999:  196608.000 us/op
                 createNewObjects·p0.9999: 196608.000 us/op
                 createNewObjects·p1.00:   196608.000 us/op

Iteration  10: 194652.002 ±(99.9%) 752.206 us/op
                 createNewObjects·p0.00:   191365.120 us/op
                 createNewObjects·p0.50:   195035.136 us/op
                 createNewObjects·p0.90:   196608.000 us/op
                 createNewObjects·p0.95:   197315.789 us/op
                 createNewObjects·p0.99:   197918.720 us/op
                 createNewObjects·p0.999:  197918.720 us/op
                 createNewObjects·p0.9999: 197918.720 us/op
                 createNewObjects·p1.00:   197918.720 us/op

Iteration  11: 193694.169 ±(99.9%) 613.494 us/op
                 createNewObjects·p0.00:   191365.120 us/op
                 createNewObjects·p0.50:   193200.128 us/op
                 createNewObjects·p0.90:   195559.424 us/op
                 createNewObjects·p0.95:   196175.462 us/op
                 createNewObjects·p0.99:   196608.000 us/op
                 createNewObjects·p0.999:  196608.000 us/op
                 createNewObjects·p0.9999: 196608.000 us/op
                 createNewObjects·p1.00:   196608.000 us/op

Iteration  12: 194137.797 ±(99.9%) 603.992 us/op
                 createNewObjects·p0.00:   191889.408 us/op
                 createNewObjects·p0.50:   194248.704 us/op
                 createNewObjects·p0.90:   195559.424 us/op
                 createNewObjects·p0.95:   196267.213 us/op
                 createNewObjects·p0.99:   196608.000 us/op
                 createNewObjects·p0.999:  196608.000 us/op
                 createNewObjects·p0.9999: 196608.000 us/op
                 createNewObjects·p1.00:   196608.000 us/op

Iteration  13: 193638.715 ±(99.9%) 447.354 us/op
                 createNewObjects·p0.00:   191889.408 us/op
                 createNewObjects·p0.50:   193462.272 us/op
                 createNewObjects·p0.90:   195035.136 us/op
                 createNewObjects·p0.95:   195297.280 us/op
                 createNewObjects·p0.99:   195297.280 us/op
                 createNewObjects·p0.999:  195297.280 us/op
                 createNewObjects·p0.9999: 195297.280 us/op
                 createNewObjects·p1.00:   195297.280 us/op

Iteration  14: 194460.436 ±(99.9%) 622.382 us/op
                 createNewObjects·p0.00:   191627.264 us/op
                 createNewObjects·p0.50:   195035.136 us/op
                 createNewObjects·p0.90:   195821.568 us/op
                 createNewObjects·p0.95:   196083.712 us/op
                 createNewObjects·p0.99:   196345.856 us/op
                 createNewObjects·p0.999:  196345.856 us/op
                 createNewObjects·p0.9999: 196345.856 us/op
                 createNewObjects·p1.00:   196345.856 us/op

Iteration  15: 194263.828 ±(99.9%) 652.310 us/op
                 createNewObjects·p0.00:   191889.408 us/op
                 createNewObjects·p0.50:   194379.776 us/op
                 createNewObjects·p0.90:   196083.712 us/op
                 createNewObjects·p0.95:   196437.606 us/op
                 createNewObjects·p0.99:   196870.144 us/op
                 createNewObjects·p0.999:  196870.144 us/op
                 createNewObjects·p0.9999: 196870.144 us/op
                 createNewObjects·p1.00:   196870.144 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 780
  mean = 194120.993 ±(99.9%) 157.096 us/op

  Histogram, us/op:
    [191000.000, 191500.000) = 10 
    [191500.000, 192000.000) = 27 
    [192000.000, 192500.000) = 44 
    [192500.000, 193000.000) = 103 
    [193000.000, 193500.000) = 135 
    [193500.000, 194000.000) = 104 
    [194000.000, 194500.000) = 34 
    [194500.000, 195000.000) = 65 
    [195000.000, 195500.000) = 95 
    [195500.000, 196000.000) = 93 
    [196000.000, 196500.000) = 43 
    [196500.000, 197000.000) = 23 
    [197000.000, 197500.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 191365.120 us/op
     p(50.0000) = 193986.560 us/op
     p(90.0000) = 195821.568 us/op
     p(95.0000) = 196345.856 us/op
     p(99.0000) = 196870.144 us/op
     p(99.9000) = 197918.720 us/op
     p(99.9900) = 197918.720 us/op
     p(99.9990) = 197918.720 us/op
     p(99.9999) = 197918.720 us/op
    p(100.0000) = 197918.720 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 71.01% complete, ETA 02:26:05
# Fork: 1 of 1
# Warmup Iteration   1: 1451229.184 ±(99.9%) 133482.292 us/op
# Warmup Iteration   2: 1351352.320 ±(99.9%) 120041.406 us/op
# Warmup Iteration   3: 1339293.696 ±(99.9%) 128183.999 us/op
# Warmup Iteration   4: 1331167.232 ±(99.9%) 131698.175 us/op
# Warmup Iteration   5: 1333264.384 ±(99.9%) 132809.645 us/op
Iteration   1: 1333788.672 ±(99.9%) 126089.505 us/op
                 fillHeap·p0.00:   1184890.880 us/op
                 fillHeap·p0.50:   1347420.160 us/op
                 fillHeap·p0.90:   1394606.080 us/op
                 fillHeap·p0.95:   1394606.080 us/op
                 fillHeap·p0.99:   1394606.080 us/op
                 fillHeap·p0.999:  1394606.080 us/op
                 fillHeap·p0.9999: 1394606.080 us/op
                 fillHeap·p1.00:   1394606.080 us/op

Iteration   2: 1339293.696 ±(99.9%) 126488.483 us/op
                 fillHeap·p0.00:   1186988.032 us/op
                 fillHeap·p0.50:   1347420.160 us/op
                 fillHeap·p0.90:   1394606.080 us/op
                 fillHeap·p0.95:   1394606.080 us/op
                 fillHeap·p0.99:   1394606.080 us/op
                 fillHeap·p0.999:  1394606.080 us/op
                 fillHeap·p0.9999: 1394606.080 us/op
                 fillHeap·p1.00:   1394606.080 us/op

Iteration   3: 1355022.336 ±(99.9%) 36839.265 us/op
                 fillHeap·p0.00:   1331691.520 us/op
                 fillHeap·p0.50:   1354760.192 us/op
                 fillHeap·p0.90:   1386217.472 us/op
                 fillHeap·p0.95:   1386217.472 us/op
                 fillHeap·p0.99:   1386217.472 us/op
                 fillHeap·p0.999:  1386217.472 us/op
                 fillHeap·p0.9999: 1386217.472 us/op
                 fillHeap·p1.00:   1386217.472 us/op

Iteration   4: 1329070.080 ±(99.9%) 136947.635 us/op
                 fillHeap·p0.00:   1168113.664 us/op
                 fillHeap·p0.50:   1349517.312 us/op
                 fillHeap·p0.90:   1400897.536 us/op
                 fillHeap·p0.95:   1400897.536 us/op
                 fillHeap·p0.99:   1400897.536 us/op
                 fillHeap·p0.999:  1400897.536 us/op
                 fillHeap·p0.9999: 1400897.536 us/op
                 fillHeap·p1.00:   1400897.536 us/op

Iteration   5: 1324875.776 ±(99.9%) 124212.980 us/op
                 fillHeap·p0.00:   1178599.424 us/op
                 fillHeap·p0.50:   1337982.976 us/op
                 fillHeap·p0.90:   1384120.320 us/op
                 fillHeap·p0.95:   1384120.320 us/op
                 fillHeap·p0.99:   1384120.320 us/op
                 fillHeap·p0.999:  1384120.320 us/op
                 fillHeap·p0.9999: 1384120.320 us/op
                 fillHeap·p1.00:   1384120.320 us/op

Iteration   6: 1324089.344 ±(99.9%) 131858.308 us/op
                 fillHeap·p0.00:   1166016.512 us/op
                 fillHeap·p0.50:   1341128.704 us/op
                 fillHeap·p0.90:   1386217.472 us/op
                 fillHeap·p0.95:   1386217.472 us/op
                 fillHeap·p0.99:   1386217.472 us/op
                 fillHeap·p0.999:  1386217.472 us/op
                 fillHeap·p0.9999: 1386217.472 us/op
                 fillHeap·p1.00:   1386217.472 us/op

Iteration   7: 1325137.920 ±(99.9%) 129919.271 us/op
                 fillHeap·p0.00:   1172307.968 us/op
                 fillHeap·p0.50:   1339031.552 us/op
                 fillHeap·p0.90:   1390411.776 us/op
                 fillHeap·p0.95:   1390411.776 us/op
                 fillHeap·p0.99:   1390411.776 us/op
                 fillHeap·p0.999:  1390411.776 us/op
                 fillHeap·p0.9999: 1390411.776 us/op
                 fillHeap·p1.00:   1390411.776 us/op

Iteration   8: 1327235.072 ±(99.9%) 126606.457 us/op
                 fillHeap·p0.00:   1174405.120 us/op
                 fillHeap·p0.50:   1342177.280 us/op
                 fillHeap·p0.90:   1384120.320 us/op
                 fillHeap·p0.95:   1384120.320 us/op
                 fillHeap·p0.99:   1384120.320 us/op
                 fillHeap·p0.999:  1384120.320 us/op
                 fillHeap·p0.9999: 1384120.320 us/op
                 fillHeap·p1.00:   1384120.320 us/op

Iteration   9: 1327759.360 ±(99.9%) 135729.428 us/op
                 fillHeap·p0.00:   1170210.816 us/op
                 fillHeap·p0.50:   1337982.976 us/op
                 fillHeap·p0.90:   1394606.080 us/op
                 fillHeap·p0.95:   1394606.080 us/op
                 fillHeap·p0.99:   1394606.080 us/op
                 fillHeap·p0.999:  1394606.080 us/op
                 fillHeap·p0.9999: 1394606.080 us/op
                 fillHeap·p1.00:   1394606.080 us/op

Iteration  10: 1328807.936 ±(99.9%) 134120.764 us/op
                 fillHeap·p0.00:   1170210.816 us/op
                 fillHeap·p0.50:   1342177.280 us/op
                 fillHeap·p0.90:   1396703.232 us/op
                 fillHeap·p0.95:   1396703.232 us/op
                 fillHeap·p0.99:   1396703.232 us/op
                 fillHeap·p0.999:  1396703.232 us/op
                 fillHeap·p0.9999: 1396703.232 us/op
                 fillHeap·p1.00:   1396703.232 us/op

Iteration  11: 1324875.776 ±(99.9%) 124729.652 us/op
                 fillHeap·p0.00:   1174405.120 us/op
                 fillHeap·p0.50:   1335885.824 us/op
                 fillHeap·p0.90:   1382023.168 us/op
                 fillHeap·p0.95:   1382023.168 us/op
                 fillHeap·p0.99:   1382023.168 us/op
                 fillHeap·p0.999:  1382023.168 us/op
                 fillHeap·p0.9999: 1382023.168 us/op
                 fillHeap·p1.00:   1382023.168 us/op

Iteration  12: 1324875.776 ±(99.9%) 125920.897 us/op
                 fillHeap·p0.00:   1174405.120 us/op
                 fillHeap·p0.50:   1343225.856 us/op
                 fillHeap·p0.90:   1388314.624 us/op
                 fillHeap·p0.95:   1388314.624 us/op
                 fillHeap·p0.99:   1388314.624 us/op
                 fillHeap·p0.999:  1388314.624 us/op
                 fillHeap·p0.9999: 1388314.624 us/op
                 fillHeap·p1.00:   1388314.624 us/op

Iteration  13: 1330380.800 ±(99.9%) 126343.133 us/op
                 fillHeap·p0.00:   1178599.424 us/op
                 fillHeap·p0.50:   1343225.856 us/op
                 fillHeap·p0.90:   1384120.320 us/op
                 fillHeap·p0.95:   1384120.320 us/op
                 fillHeap·p0.99:   1384120.320 us/op
                 fillHeap·p0.999:  1384120.320 us/op
                 fillHeap·p0.9999: 1384120.320 us/op
                 fillHeap·p1.00:   1384120.320 us/op

Iteration  14: 1324613.632 ±(99.9%) 125302.634 us/op
                 fillHeap·p0.00:   1172307.968 us/op
                 fillHeap·p0.50:   1340080.128 us/op
                 fillHeap·p0.90:   1384120.320 us/op
                 fillHeap·p0.95:   1384120.320 us/op
                 fillHeap·p0.99:   1384120.320 us/op
                 fillHeap·p0.999:  1384120.320 us/op
                 fillHeap·p0.9999: 1384120.320 us/op
                 fillHeap·p1.00:   1384120.320 us/op

Iteration  15: 1343488.000 ±(99.9%) 130773.882 us/op
                 fillHeap·p0.00:   1186988.032 us/op
                 fillHeap·p0.50:   1356857.344 us/op
                 fillHeap·p0.90:   1402994.688 us/op
                 fillHeap·p0.95:   1402994.688 us/op
                 fillHeap·p0.99:   1402994.688 us/op
                 fillHeap·p0.999:  1402994.688 us/op
                 fillHeap·p0.9999: 1402994.688 us/op
                 fillHeap·p1.00:   1402994.688 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 120
  mean = 1330887.612 ±(99.9%) 19094.671 us/op

  Histogram, us/op:
    [1100000.000, 1125000.000) = 0 
    [1125000.000, 1150000.000) = 0 
    [1150000.000, 1175000.000) = 9 
    [1175000.000, 1200000.000) = 5 
    [1200000.000, 1225000.000) = 0 
    [1225000.000, 1250000.000) = 0 
    [1250000.000, 1275000.000) = 0 
    [1275000.000, 1300000.000) = 0 
    [1300000.000, 1325000.000) = 20 
    [1325000.000, 1350000.000) = 31 
    [1350000.000, 1375000.000) = 30 
    [1375000.000, 1400000.000) = 23 
    [1400000.000, 1425000.000) = 2 
    [1425000.000, 1450000.000) = 0 
    [1450000.000, 1475000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1166016.512 us/op
     p(50.0000) = 1345323.008 us/op
     p(90.0000) = 1386217.472 us/op
     p(95.0000) = 1394501.222 us/op
     p(99.0000) = 1402554.286 us/op
     p(99.9000) = 1402994.688 us/op
     p(99.9900) = 1402994.688 us/op
     p(99.9990) = 1402994.688 us/op
     p(99.9999) = 1402994.688 us/op
    p(100.0000) = 1402994.688 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 71.74% complete, ETA 02:22:30
# Fork: 1 of 1
# Warmup Iteration   1: 925606.633 ±(99.9%) 131074.384 us/op
# Warmup Iteration   2: 878357.163 ±(99.9%) 58820.385 us/op
# Warmup Iteration   3: 903785.131 ±(99.9%) 56124.410 us/op
# Warmup Iteration   4: 909377.536 ±(99.9%) 68401.931 us/op
# Warmup Iteration   5: 899503.445 ±(99.9%) 70581.658 us/op
Iteration   1: 909020.067 ±(99.9%) 77782.869 us/op
                 fillHeap·p0.00:   822083.584 us/op
                 fillHeap·p0.50:   907018.240 us/op
                 fillHeap·p0.90:   994259.763 us/op
                 fillHeap·p0.95:   997195.776 us/op
                 fillHeap·p0.99:   997195.776 us/op
                 fillHeap·p0.999:  997195.776 us/op
                 fillHeap·p0.9999: 997195.776 us/op
                 fillHeap·p1.00:   997195.776 us/op

Iteration   2: 904921.088 ±(99.9%) 57285.618 us/op
                 fillHeap·p0.00:   814743.552 us/op
                 fillHeap·p0.50:   908066.816 us/op
                 fillHeap·p0.90:   965109.350 us/op
                 fillHeap·p0.95:   968884.224 us/op
                 fillHeap·p0.99:   968884.224 us/op
                 fillHeap·p0.999:  968884.224 us/op
                 fillHeap·p0.9999: 968884.224 us/op
                 fillHeap·p1.00:   968884.224 us/op

Iteration   3: 909592.017 ±(99.9%) 81236.979 us/op
                 fillHeap·p0.00:   814743.552 us/op
                 fillHeap·p0.50:   913309.696 us/op
                 fillHeap·p0.90:   1001180.365 us/op
                 fillHeap·p0.95:   1005584.384 us/op
                 fillHeap·p0.99:   1005584.384 us/op
                 fillHeap·p0.999:  1005584.384 us/op
                 fillHeap·p0.9999: 1005584.384 us/op
                 fillHeap·p1.00:   1005584.384 us/op

Iteration   4: 910354.618 ±(99.9%) 82108.480 us/op
                 fillHeap·p0.00:   811597.824 us/op
                 fillHeap·p0.50:   908066.816 us/op
                 fillHeap·p0.90:   999502.643 us/op
                 fillHeap·p0.95:   1004535.808 us/op
                 fillHeap·p0.99:   1004535.808 us/op
                 fillHeap·p0.999:  1004535.808 us/op
                 fillHeap·p0.9999: 1004535.808 us/op
                 fillHeap·p1.00:   1004535.808 us/op

Iteration   5: 915502.173 ±(99.9%) 79430.897 us/op
                 fillHeap·p0.00:   821035.008 us/op
                 fillHeap·p0.50:   913309.696 us/op
                 fillHeap·p0.90:   1000341.504 us/op
                 fillHeap·p0.95:   1002438.656 us/op
                 fillHeap·p0.99:   1002438.656 us/op
                 fillHeap·p0.999:  1002438.656 us/op
                 fillHeap·p0.9999: 1002438.656 us/op
                 fillHeap·p1.00:   1002438.656 us/op

Iteration   6: 903872.512 ±(99.9%) 68435.187 us/op
                 fillHeap·p0.00:   811597.824 us/op
                 fillHeap·p0.50:   909115.392 us/op
                 fillHeap·p0.90:   983669.146 us/op
                 fillHeap·p0.95:   987758.592 us/op
                 fillHeap·p0.99:   987758.592 us/op
                 fillHeap·p0.999:  987758.592 us/op
                 fillHeap·p0.9999: 987758.592 us/op
                 fillHeap·p1.00:   987758.592 us/op

Iteration   7: 913500.346 ±(99.9%) 81669.327 us/op
                 fillHeap·p0.00:   809500.672 us/op
                 fillHeap·p0.50:   911212.544 us/op
                 fillHeap·p0.90:   1001809.510 us/op
                 fillHeap·p0.95:   1005584.384 us/op
                 fillHeap·p0.99:   1005584.384 us/op
                 fillHeap·p0.999:  1005584.384 us/op
                 fillHeap·p0.9999: 1005584.384 us/op
                 fillHeap·p1.00:   1005584.384 us/op

Iteration   8: 910640.593 ±(99.9%) 74082.441 us/op
                 fillHeap·p0.00:   828375.040 us/op
                 fillHeap·p0.50:   904921.088 us/op
                 fillHeap·p0.90:   992791.757 us/op
                 fillHeap·p0.95:   997195.776 us/op
                 fillHeap·p0.99:   997195.776 us/op
                 fillHeap·p0.999:  997195.776 us/op
                 fillHeap·p0.9999: 997195.776 us/op
                 fillHeap·p1.00:   997195.776 us/op

Iteration   9: 908940.629 ±(99.9%) 70073.344 us/op
                 fillHeap·p0.00:   812646.400 us/op
                 fillHeap·p0.50:   909115.392 us/op
                 fillHeap·p0.90:   992162.611 us/op
                 fillHeap·p0.95:   997195.776 us/op
                 fillHeap·p0.99:   997195.776 us/op
                 fillHeap·p0.999:  997195.776 us/op
                 fillHeap·p0.9999: 997195.776 us/op
                 fillHeap·p1.00:   997195.776 us/op

Iteration  10: 904484.181 ±(99.9%) 68653.988 us/op
                 fillHeap·p0.00:   811597.824 us/op
                 fillHeap·p0.50:   906493.952 us/op
                 fillHeap·p0.90:   987758.592 us/op
                 fillHeap·p0.95:   994050.048 us/op
                 fillHeap·p0.99:   994050.048 us/op
                 fillHeap·p0.999:  994050.048 us/op
                 fillHeap·p0.9999: 994050.048 us/op
                 fillHeap·p1.00:   994050.048 us/op

Iteration  11: 906930.859 ±(99.9%) 68001.198 us/op
                 fillHeap·p0.00:   817889.280 us/op
                 fillHeap·p0.50:   908591.104 us/op
                 fillHeap·p0.90:   988597.453 us/op
                 fillHeap·p0.95:   993001.472 us/op
                 fillHeap·p0.99:   993001.472 us/op
                 fillHeap·p0.999:  993001.472 us/op
                 fillHeap·p0.9999: 993001.472 us/op
                 fillHeap·p1.00:   993001.472 us/op

Iteration  12: 900639.403 ±(99.9%) 67957.778 us/op
                 fillHeap·p0.00:   810549.248 us/op
                 fillHeap·p0.50:   908591.104 us/op
                 fillHeap·p0.90:   978111.693 us/op
                 fillHeap·p0.95:   979369.984 us/op
                 fillHeap·p0.99:   979369.984 us/op
                 fillHeap·p0.999:  979369.984 us/op
                 fillHeap·p0.9999: 979369.984 us/op
                 fillHeap·p1.00:   979369.984 us/op

Iteration  13: 905969.664 ±(99.9%) 68617.055 us/op
                 fillHeap·p0.00:   810549.248 us/op
                 fillHeap·p0.50:   912261.120 us/op
                 fillHeap·p0.90:   983564.288 us/op
                 fillHeap·p0.95:   989855.744 us/op
                 fillHeap·p0.99:   989855.744 us/op
                 fillHeap·p0.999:  989855.744 us/op
                 fillHeap·p0.9999: 989855.744 us/op
                 fillHeap·p1.00:   989855.744 us/op

Iteration  14: 898717.013 ±(99.9%) 69492.033 us/op
                 fillHeap·p0.00:   805306.368 us/op
                 fillHeap·p0.50:   900726.784 us/op
                 fillHeap·p0.90:   981781.709 us/op
                 fillHeap·p0.95:   987758.592 us/op
                 fillHeap·p0.99:   987758.592 us/op
                 fillHeap·p0.999:  987758.592 us/op
                 fillHeap·p0.9999: 987758.592 us/op
                 fillHeap·p1.00:   987758.592 us/op

Iteration  15: 904396.800 ±(99.9%) 67716.146 us/op
                 fillHeap·p0.00:   807403.520 us/op
                 fillHeap·p0.50:   906493.952 us/op
                 fillHeap·p0.90:   982830.285 us/op
                 fillHeap·p0.95:   985661.440 us/op
                 fillHeap·p0.99:   985661.440 us/op
                 fillHeap·p0.999:  985661.440 us/op
                 fillHeap·p0.9999: 985661.440 us/op
                 fillHeap·p1.00:   985661.440 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 174
  mean = 907018.240 ±(99.9%) 13310.308 us/op

  Histogram, us/op:
    [ 800000.000,  825000.000) = 18 
    [ 825000.000,  850000.000) = 11 
    [ 850000.000,  875000.000) = 10 
    [ 875000.000,  900000.000) = 38 
    [ 900000.000,  925000.000) = 38 
    [ 925000.000,  950000.000) = 24 
    [ 950000.000,  975000.000) = 11 
    [ 975000.000, 1000000.000) = 20 
    [1000000.000, 1025000.000) = 4 
    [1025000.000, 1050000.000) = 0 
    [1050000.000, 1075000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 805306.368 us/op
     p(50.0000) = 907542.528 us/op
     p(90.0000) = 981467.136 us/op
     p(95.0000) = 993263.616 us/op
     p(99.0000) = 1005584.384 us/op
     p(99.9000) = 1005584.384 us/op
     p(99.9900) = 1005584.384 us/op
     p(99.9990) = 1005584.384 us/op
     p(99.9999) = 1005584.384 us/op
    p(100.0000) = 1005584.384 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 72.46% complete, ETA 02:18:53
# Fork: 1 of 1
# Warmup Iteration   1: 820309.071 ±(99.9%) 86671.973 us/op
# Warmup Iteration   2: 786351.340 ±(99.9%) 46459.804 us/op
# Warmup Iteration   3: 789013.110 ±(99.9%) 51613.195 us/op
# Warmup Iteration   4: 782802.314 ±(99.9%) 50167.248 us/op
# Warmup Iteration   5: 785544.743 ±(99.9%) 49375.833 us/op
Iteration   1: 787641.895 ±(99.9%) 52236.307 us/op
                 fillHeap·p0.00:   716177.408 us/op
                 fillHeap·p0.50:   788529.152 us/op
                 fillHeap·p0.90:   847249.408 us/op
                 fillHeap·p0.95:   855638.016 us/op
                 fillHeap·p0.99:   855638.016 us/op
                 fillHeap·p0.999:  855638.016 us/op
                 fillHeap·p0.9999: 855638.016 us/op
                 fillHeap·p1.00:   855638.016 us/op

Iteration   2: 784980.126 ±(99.9%) 51008.631 us/op
                 fillHeap·p0.00:   722468.864 us/op
                 fillHeap·p0.50:   780140.544 us/op
                 fillHeap·p0.90:   850814.566 us/op
                 fillHeap·p0.95:   862978.048 us/op
                 fillHeap·p0.99:   862978.048 us/op
                 fillHeap·p0.999:  862978.048 us/op
                 fillHeap·p0.9999: 862978.048 us/op
                 fillHeap·p1.00:   862978.048 us/op

Iteration   3: 791674.880 ±(99.9%) 47285.501 us/op
                 fillHeap·p0.00:   716177.408 us/op
                 fillHeap·p0.50:   797966.336 us/op
                 fillHeap·p0.90:   842006.528 us/op
                 fillHeap·p0.95:   848297.984 us/op
                 fillHeap·p0.99:   848297.984 us/op
                 fillHeap·p0.999:  848297.984 us/op
                 fillHeap·p0.9999: 848297.984 us/op
                 fillHeap·p1.00:   848297.984 us/op

Iteration   4: 786190.021 ±(99.9%) 50746.786 us/op
                 fillHeap·p0.00:   718274.560 us/op
                 fillHeap·p0.50:   786432.000 us/op
                 fillHeap·p0.90:   846410.547 us/op
                 fillHeap·p0.95:   851443.712 us/op
                 fillHeap·p0.99:   851443.712 us/op
                 fillHeap·p0.999:  851443.712 us/op
                 fillHeap·p0.9999: 851443.712 us/op
                 fillHeap·p1.00:   851443.712 us/op

Iteration   5: 789577.728 ±(99.9%) 48530.719 us/op
                 fillHeap·p0.00:   721420.288 us/op
                 fillHeap·p0.50:   788529.152 us/op
                 fillHeap·p0.90:   849346.560 us/op
                 fillHeap·p0.95:   855638.016 us/op
                 fillHeap·p0.99:   855638.016 us/op
                 fillHeap·p0.999:  855638.016 us/op
                 fillHeap·p0.9999: 855638.016 us/op
                 fillHeap·p1.00:   855638.016 us/op

Iteration   6: 790384.325 ±(99.9%) 55187.424 us/op
                 fillHeap·p0.00:   711983.104 us/op
                 fillHeap·p0.50:   790626.304 us/op
                 fillHeap·p0.90:   861929.472 us/op
                 fillHeap·p0.95:   868220.928 us/op
                 fillHeap·p0.99:   868220.928 us/op
                 fillHeap·p0.999:  868220.928 us/op
                 fillHeap·p0.9999: 868220.928 us/op
                 fillHeap·p1.00:   868220.928 us/op

Iteration   7: 791029.602 ±(99.9%) 50677.823 us/op
                 fillHeap·p0.00:   725614.592 us/op
                 fillHeap·p0.50:   788529.152 us/op
                 fillHeap·p0.90:   851443.712 us/op
                 fillHeap·p0.95:   861929.472 us/op
                 fillHeap·p0.99:   861929.472 us/op
                 fillHeap·p0.999:  861929.472 us/op
                 fillHeap·p0.9999: 861929.472 us/op
                 fillHeap·p1.00:   861929.472 us/op

Iteration   8: 790303.665 ±(99.9%) 50796.557 us/op
                 fillHeap·p0.00:   717225.984 us/op
                 fillHeap·p0.50:   786432.000 us/op
                 fillHeap·p0.90:   849136.845 us/op
                 fillHeap·p0.95:   854589.440 us/op
                 fillHeap·p0.99:   854589.440 us/op
                 fillHeap·p0.999:  854589.440 us/op
                 fillHeap·p0.9999: 854589.440 us/op
                 fillHeap·p1.00:   854589.440 us/op

Iteration   9: 788609.812 ±(99.9%) 49262.908 us/op
                 fillHeap·p0.00:   717225.984 us/op
                 fillHeap·p0.50:   782237.696 us/op
                 fillHeap·p0.90:   851863.142 us/op
                 fillHeap·p0.95:   861929.472 us/op
                 fillHeap·p0.99:   861929.472 us/op
                 fillHeap·p0.999:  861929.472 us/op
                 fillHeap·p0.9999: 861929.472 us/op
                 fillHeap·p1.00:   861929.472 us/op

Iteration  10: 789255.089 ±(99.9%) 51622.790 us/op
                 fillHeap·p0.00:   721420.288 us/op
                 fillHeap·p0.50:   787480.576 us/op
                 fillHeap·p0.90:   852072.858 us/op
                 fillHeap·p0.95:   856686.592 us/op
                 fillHeap·p0.99:   856686.592 us/op
                 fillHeap·p0.999:  856686.592 us/op
                 fillHeap·p0.9999: 856686.592 us/op
                 fillHeap·p1.00:   856686.592 us/op

Iteration  11: 789013.110 ±(99.9%) 52579.226 us/op
                 fillHeap·p0.00:   713031.680 us/op
                 fillHeap·p0.50:   790626.304 us/op
                 fillHeap·p0.90:   856686.592 us/op
                 fillHeap·p0.95:   862978.048 us/op
                 fillHeap·p0.99:   862978.048 us/op
                 fillHeap·p0.999:  862978.048 us/op
                 fillHeap·p0.9999: 862978.048 us/op
                 fillHeap·p1.00:   862978.048 us/op

Iteration  12: 789577.728 ±(99.9%) 51748.927 us/op
                 fillHeap·p0.00:   716177.408 us/op
                 fillHeap·p0.50:   790626.304 us/op
                 fillHeap·p0.90:   851443.712 us/op
                 fillHeap·p0.95:   859832.320 us/op
                 fillHeap·p0.99:   859832.320 us/op
                 fillHeap·p0.999:  859832.320 us/op
                 fillHeap·p0.9999: 859832.320 us/op
                 fillHeap·p1.00:   859832.320 us/op

Iteration  13: 790868.283 ±(99.9%) 48650.122 us/op
                 fillHeap·p0.00:   720371.712 us/op
                 fillHeap·p0.50:   790626.304 us/op
                 fillHeap·p0.90:   849346.560 us/op
                 fillHeap·p0.95:   855638.016 us/op
                 fillHeap·p0.99:   855638.016 us/op
                 fillHeap·p0.999:  855638.016 us/op
                 fillHeap·p0.9999: 855638.016 us/op
                 fillHeap·p1.00:   855638.016 us/op

Iteration  14: 786270.681 ±(99.9%) 49915.774 us/op
                 fillHeap·p0.00:   721420.288 us/op
                 fillHeap·p0.50:   784334.848 us/op
                 fillHeap·p0.90:   847878.554 us/op
                 fillHeap·p0.95:   852492.288 us/op
                 fillHeap·p0.99:   852492.288 us/op
                 fillHeap·p0.999:  852492.288 us/op
                 fillHeap·p0.9999: 852492.288 us/op
                 fillHeap·p1.00:   852492.288 us/op

Iteration  15: 783205.612 ±(99.9%) 51505.764 us/op
                 fillHeap·p0.00:   714080.256 us/op
                 fillHeap·p0.50:   787480.576 us/op
                 fillHeap·p0.90:   845991.117 us/op
                 fillHeap·p0.95:   853540.864 us/op
                 fillHeap·p0.99:   853540.864 us/op
                 fillHeap·p0.999:  853540.864 us/op
                 fillHeap·p0.9999: 853540.864 us/op
                 fillHeap·p1.00:   853540.864 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 195
  mean = 788572.171 ±(99.9%) 9797.041 us/op

  Histogram, us/op:
    [700000.000, 712500.000) = 1 
    [712500.000, 725000.000) = 17 
    [725000.000, 737500.000) = 11 
    [737500.000, 750000.000) = 12 
    [750000.000, 762500.000) = 12 
    [762500.000, 775000.000) = 20 
    [775000.000, 787500.000) = 23 
    [787500.000, 800000.000) = 15 
    [800000.000, 812500.000) = 23 
    [812500.000, 825000.000) = 17 
    [825000.000, 837500.000) = 20 
    [837500.000, 850000.000) = 9 
    [850000.000, 862500.000) = 12 
    [862500.000, 875000.000) = 3 
    [875000.000, 887500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 711983.104 us/op
     p(50.0000) = 788529.152 us/op
     p(90.0000) = 840957.952 us/op
     p(95.0000) = 855638.016 us/op
     p(99.0000) = 863187.763 us/op
     p(99.9000) = 868220.928 us/op
     p(99.9900) = 868220.928 us/op
     p(99.9990) = 868220.928 us/op
     p(99.9999) = 868220.928 us/op
    p(100.0000) = 868220.928 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 73.19% complete, ETA 02:15:14
# Fork: 1 of 1
# Warmup Iteration   1: 863851.861 ±(99.9%) 72060.069 us/op
# Warmup Iteration   2: 854851.584 ±(99.9%) 44673.513 us/op
# Warmup Iteration   3: 861579.947 ±(99.9%) 53964.174 us/op
# Warmup Iteration   4: 860356.608 ±(99.9%) 58748.320 us/op
# Warmup Iteration   5: 864638.293 ±(99.9%) 53833.730 us/op
Iteration   1: 869094.741 ±(99.9%) 57456.639 us/op
                 fillHeap·p0.00:   803209.216 us/op
                 fillHeap·p0.50:   868745.216 us/op
                 fillHeap·p0.90:   941726.106 us/op
                 fillHeap·p0.95:   945815.552 us/op
                 fillHeap·p0.99:   945815.552 us/op
                 fillHeap·p0.999:  945815.552 us/op
                 fillHeap·p0.9999: 945815.552 us/op
                 fillHeap·p1.00:   945815.552 us/op

Iteration   2: 864900.437 ±(99.9%) 52863.558 us/op
                 fillHeap·p0.00:   800063.488 us/op
                 fillHeap·p0.50:   871890.944 us/op
                 fillHeap·p0.90:   923480.883 us/op
                 fillHeap·p0.95:   926941.184 us/op
                 fillHeap·p0.99:   926941.184 us/op
                 fillHeap·p0.999:  926941.184 us/op
                 fillHeap·p0.9999: 926941.184 us/op
                 fillHeap·p1.00:   926941.184 us/op

Iteration   3: 857385.643 ±(99.9%) 55648.699 us/op
                 fillHeap·p0.00:   786432.000 us/op
                 fillHeap·p0.50:   856686.592 us/op
                 fillHeap·p0.90:   923795.456 us/op
                 fillHeap·p0.95:   930086.912 us/op
                 fillHeap·p0.99:   930086.912 us/op
                 fillHeap·p0.999:  930086.912 us/op
                 fillHeap·p0.9999: 930086.912 us/op
                 fillHeap·p1.00:   930086.912 us/op

Iteration   4: 863589.717 ±(99.9%) 54727.953 us/op
                 fillHeap·p0.00:   793772.032 us/op
                 fillHeap·p0.50:   862978.048 us/op
                 fillHeap·p0.90:   923900.314 us/op
                 fillHeap·p0.95:   924844.032 us/op
                 fillHeap·p0.99:   924844.032 us/op
                 fillHeap·p0.999:  924844.032 us/op
                 fillHeap·p0.9999: 924844.032 us/op
                 fillHeap·p1.00:   924844.032 us/op

Iteration   5: 863414.955 ±(99.9%) 55504.489 us/op
                 fillHeap·p0.00:   789577.728 us/op
                 fillHeap·p0.50:   865599.488 us/op
                 fillHeap·p0.90:   933966.643 us/op
                 fillHeap·p0.95:   937426.944 us/op
                 fillHeap·p0.99:   937426.944 us/op
                 fillHeap·p0.999:  937426.944 us/op
                 fillHeap·p0.9999: 937426.944 us/op
                 fillHeap·p1.00:   937426.944 us/op

Iteration   6: 862541.141 ±(99.9%) 59098.861 us/op
                 fillHeap·p0.00:   784334.848 us/op
                 fillHeap·p0.50:   864550.912 us/op
                 fillHeap·p0.90:   928723.763 us/op
                 fillHeap·p0.95:   932184.064 us/op
                 fillHeap·p0.99:   932184.064 us/op
                 fillHeap·p0.999:  932184.064 us/op
                 fillHeap·p0.9999: 932184.064 us/op
                 fillHeap·p1.00:   932184.064 us/op

Iteration   7: 862803.285 ±(99.9%) 56210.172 us/op
                 fillHeap·p0.00:   789577.728 us/op
                 fillHeap·p0.50:   859308.032 us/op
                 fillHeap·p0.90:   933232.640 us/op
                 fillHeap·p0.95:   939524.096 us/op
                 fillHeap·p0.99:   939524.096 us/op
                 fillHeap·p0.999:  939524.096 us/op
                 fillHeap·p0.9999: 939524.096 us/op
                 fillHeap·p1.00:   939524.096 us/op

Iteration   8: 870929.749 ±(99.9%) 57186.655 us/op
                 fillHeap·p0.00:   799014.912 us/op
                 fillHeap·p0.50:   868745.216 us/op
                 fillHeap·p0.90:   941411.533 us/op
                 fillHeap·p0.95:   948961.280 us/op
                 fillHeap·p0.99:   948961.280 us/op
                 fillHeap·p0.999:  948961.280 us/op
                 fillHeap·p0.9999: 948961.280 us/op
                 fillHeap·p1.00:   948961.280 us/op

Iteration   9: 869269.504 ±(99.9%) 59556.424 us/op
                 fillHeap·p0.00:   789577.728 us/op
                 fillHeap·p0.50:   867172.352 us/op
                 fillHeap·p0.90:   946130.125 us/op
                 fillHeap·p0.95:   955252.736 us/op
                 fillHeap·p0.99:   955252.736 us/op
                 fillHeap·p0.999:  955252.736 us/op
                 fillHeap·p0.9999: 955252.736 us/op
                 fillHeap·p1.00:   955252.736 us/op

Iteration  10: 870580.224 ±(99.9%) 60712.987 us/op
                 fillHeap·p0.00:   790626.304 us/op
                 fillHeap·p0.50:   873988.096 us/op
                 fillHeap·p0.90:   935854.080 us/op
                 fillHeap·p0.95:   937426.944 us/op
                 fillHeap·p0.99:   937426.944 us/op
                 fillHeap·p0.999:  937426.944 us/op
                 fillHeap·p0.9999: 937426.944 us/op
                 fillHeap·p1.00:   937426.944 us/op

Iteration  11: 869793.792 ±(99.9%) 57969.976 us/op
                 fillHeap·p0.00:   799014.912 us/op
                 fillHeap·p0.50:   873988.096 us/op
                 fillHeap·p0.90:   936588.083 us/op
                 fillHeap·p0.95:   938475.520 us/op
                 fillHeap·p0.99:   938475.520 us/op
                 fillHeap·p0.999:  938475.520 us/op
                 fillHeap·p0.9999: 938475.520 us/op
                 fillHeap·p1.00:   938475.520 us/op

Iteration  12: 864900.437 ±(99.9%) 55197.488 us/op
                 fillHeap·p0.00:   793772.032 us/op
                 fillHeap·p0.50:   862978.048 us/op
                 fillHeap·p0.90:   931345.203 us/op
                 fillHeap·p0.95:   939524.096 us/op
                 fillHeap·p0.99:   939524.096 us/op
                 fillHeap·p0.999:  939524.096 us/op
                 fillHeap·p0.9999: 939524.096 us/op
                 fillHeap·p1.00:   939524.096 us/op

Iteration  13: 864288.768 ±(99.9%) 58355.177 us/op
                 fillHeap·p0.00:   789577.728 us/op
                 fillHeap·p0.50:   862453.760 us/op
                 fillHeap·p0.90:   940048.384 us/op
                 fillHeap·p0.95:   947912.704 us/op
                 fillHeap·p0.99:   947912.704 us/op
                 fillHeap·p0.999:  947912.704 us/op
                 fillHeap·p0.9999: 947912.704 us/op
                 fillHeap·p1.00:   947912.704 us/op

Iteration  14: 865075.200 ±(99.9%) 56102.614 us/op
                 fillHeap·p0.00:   797966.336 us/op
                 fillHeap·p0.50:   861405.184 us/op
                 fillHeap·p0.90:   933652.070 us/op
                 fillHeap·p0.95:   937426.944 us/op
                 fillHeap·p0.99:   937426.944 us/op
                 fillHeap·p0.999:  937426.944 us/op
                 fillHeap·p0.9999: 937426.944 us/op
                 fillHeap·p1.00:   937426.944 us/op

Iteration  15: 866211.157 ±(99.9%) 55687.362 us/op
                 fillHeap·p0.00:   791674.880 us/op
                 fillHeap·p0.50:   870842.368 us/op
                 fillHeap·p0.90:   933442.355 us/op
                 fillHeap·p0.95:   944766.976 us/op
                 fillHeap·p0.99:   944766.976 us/op
                 fillHeap·p0.999:  944766.976 us/op
                 fillHeap·p0.9999: 944766.976 us/op
                 fillHeap·p1.00:   944766.976 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 180
  mean = 865651.917 ±(99.9%) 10665.306 us/op

  Histogram, us/op:
    [ 700000.000,  725000.000) = 0 
    [ 725000.000,  750000.000) = 0 
    [ 750000.000,  775000.000) = 0 
    [ 775000.000,  800000.000) = 19 
    [ 800000.000,  825000.000) = 11 
    [ 825000.000,  850000.000) = 34 
    [ 850000.000,  875000.000) = 38 
    [ 875000.000,  900000.000) = 45 
    [ 900000.000,  925000.000) = 15 
    [ 925000.000,  950000.000) = 17 
    [ 950000.000,  975000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 784334.848 us/op
     p(50.0000) = 865075.200 us/op
     p(90.0000) = 925787.750 us/op
     p(95.0000) = 937426.944 us/op
     p(99.0000) = 950156.657 us/op
     p(99.9000) = 955252.736 us/op
     p(99.9900) = 955252.736 us/op
     p(99.9990) = 955252.736 us/op
     p(99.9999) = 955252.736 us/op
    p(100.0000) = 955252.736 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 73.91% complete, ETA 02:11:36
# Fork: 1 of 1
# Warmup Iteration   1: 873463.808 ±(99.9%) 43745.741 us/op
# Warmup Iteration   2: 855201.109 ±(99.9%) 53094.541 us/op
# Warmup Iteration   3: 855026.347 ±(99.9%) 46434.988 us/op
# Warmup Iteration   4: 849433.941 ±(99.9%) 46713.141 us/op
# Warmup Iteration   5: 852667.051 ±(99.9%) 41659.920 us/op
Iteration   1: 851356.331 ±(99.9%) 46825.341 us/op
                 fillHeap·p0.00:   783286.272 us/op
                 fillHeap·p0.50:   848822.272 us/op
                 fillHeap·p0.90:   913624.269 us/op
                 fillHeap·p0.95:   922746.880 us/op
                 fillHeap·p0.99:   922746.880 us/op
                 fillHeap·p0.999:  922746.880 us/op
                 fillHeap·p0.9999: 922746.880 us/op
                 fillHeap·p1.00:   922746.880 us/op

Iteration   2: 860094.464 ±(99.9%) 44980.796 us/op
                 fillHeap·p0.00:   795869.184 us/op
                 fillHeap·p0.50:   860880.896 us/op
                 fillHeap·p0.90:   910897.971 us/op
                 fillHeap·p0.95:   917504.000 us/op
                 fillHeap·p0.99:   917504.000 us/op
                 fillHeap·p0.999:  917504.000 us/op
                 fillHeap·p0.9999: 917504.000 us/op
                 fillHeap·p1.00:   917504.000 us/op

Iteration   3: 872939.520 ±(99.9%) 48965.353 us/op
                 fillHeap·p0.00:   802160.640 us/op
                 fillHeap·p0.50:   869793.792 us/op
                 fillHeap·p0.90:   931659.776 us/op
                 fillHeap·p0.95:   933232.640 us/op
                 fillHeap·p0.99:   933232.640 us/op
                 fillHeap·p0.999:  933232.640 us/op
                 fillHeap·p0.9999: 933232.640 us/op
                 fillHeap·p1.00:   933232.640 us/op

Iteration   4: 855113.728 ±(99.9%) 45345.250 us/op
                 fillHeap·p0.00:   792723.456 us/op
                 fillHeap·p0.50:   854589.440 us/op
                 fillHeap·p0.90:   911317.402 us/op
                 fillHeap·p0.95:   921698.304 us/op
                 fillHeap·p0.99:   921698.304 us/op
                 fillHeap·p0.999:  921698.304 us/op
                 fillHeap·p0.9999: 921698.304 us/op
                 fillHeap·p1.00:   921698.304 us/op

Iteration   5: 859657.557 ±(99.9%) 43061.272 us/op
                 fillHeap·p0.00:   797966.336 us/op
                 fillHeap·p0.50:   858259.456 us/op
                 fillHeap·p0.90:   913729.126 us/op
                 fillHeap·p0.95:   923795.456 us/op
                 fillHeap·p0.99:   923795.456 us/op
                 fillHeap·p0.999:  923795.456 us/op
                 fillHeap·p0.9999: 923795.456 us/op
                 fillHeap·p1.00:   923795.456 us/op

Iteration   6: 858434.219 ±(99.9%) 45492.678 us/op
                 fillHeap·p0.00:   789577.728 us/op
                 fillHeap·p0.50:   860880.896 us/op
                 fillHeap·p0.90:   908171.674 us/op
                 fillHeap·p0.95:   912261.120 us/op
                 fillHeap·p0.99:   912261.120 us/op
                 fillHeap·p0.999:  912261.120 us/op
                 fillHeap·p0.9999: 912261.120 us/op
                 fillHeap·p1.00:   912261.120 us/op

Iteration   7: 855638.016 ±(99.9%) 42235.232 us/op
                 fillHeap·p0.00:   797966.336 us/op
                 fillHeap·p0.50:   857735.168 us/op
                 fillHeap·p0.90:   905130.803 us/op
                 fillHeap·p0.95:   907018.240 us/op
                 fillHeap·p0.99:   907018.240 us/op
                 fillHeap·p0.999:  907018.240 us/op
                 fillHeap·p0.9999: 907018.240 us/op
                 fillHeap·p1.00:   907018.240 us/op

Iteration   8: 862191.616 ±(99.9%) 45202.633 us/op
                 fillHeap·p0.00:   794820.608 us/op
                 fillHeap·p0.50:   868745.216 us/op
                 fillHeap·p0.90:   910163.968 us/op
                 fillHeap·p0.95:   913309.696 us/op
                 fillHeap·p0.99:   913309.696 us/op
                 fillHeap·p0.999:  913309.696 us/op
                 fillHeap·p0.9999: 913309.696 us/op
                 fillHeap·p1.00:   913309.696 us/op

Iteration   9: 851705.856 ±(99.9%) 42963.259 us/op
                 fillHeap·p0.00:   791674.880 us/op
                 fillHeap·p0.50:   855638.016 us/op
                 fillHeap·p0.90:   901355.930 us/op
                 fillHeap·p0.95:   903872.512 us/op
                 fillHeap·p0.99:   903872.512 us/op
                 fillHeap·p0.999:  903872.512 us/op
                 fillHeap·p0.9999: 903872.512 us/op
                 fillHeap·p1.00:   903872.512 us/op

Iteration  10: 853103.957 ±(99.9%) 45134.864 us/op
                 fillHeap·p0.00:   784334.848 us/op
                 fillHeap·p0.50:   854065.152 us/op
                 fillHeap·p0.90:   905025.946 us/op
                 fillHeap·p0.95:   909115.392 us/op
                 fillHeap·p0.99:   909115.392 us/op
                 fillHeap·p0.999:  909115.392 us/op
                 fillHeap·p0.9999: 909115.392 us/op
                 fillHeap·p1.00:   909115.392 us/op

Iteration  11: 853890.389 ±(99.9%) 45944.615 us/op
                 fillHeap·p0.00:   793772.032 us/op
                 fillHeap·p0.50:   851443.712 us/op
                 fillHeap·p0.90:   907123.098 us/op
                 fillHeap·p0.95:   911212.544 us/op
                 fillHeap·p0.99:   911212.544 us/op
                 fillHeap·p0.999:  911212.544 us/op
                 fillHeap·p0.9999: 911212.544 us/op
                 fillHeap·p1.00:   911212.544 us/op

Iteration  12: 852317.525 ±(99.9%) 45803.416 us/op
                 fillHeap·p0.00:   785383.424 us/op
                 fillHeap·p0.50:   852492.288 us/op
                 fillHeap·p0.90:   904711.373 us/op
                 fillHeap·p0.95:   912261.120 us/op
                 fillHeap·p0.99:   912261.120 us/op
                 fillHeap·p0.999:  912261.120 us/op
                 fillHeap·p0.9999: 912261.120 us/op
                 fillHeap·p1.00:   912261.120 us/op

Iteration  13: 852404.907 ±(99.9%) 44420.742 us/op
                 fillHeap·p0.00:   780140.544 us/op
                 fillHeap·p0.50:   857210.880 us/op
                 fillHeap·p0.90:   897476.198 us/op
                 fillHeap·p0.95:   902823.936 us/op
                 fillHeap·p0.99:   902823.936 us/op
                 fillHeap·p0.999:  902823.936 us/op
                 fillHeap·p0.9999: 902823.936 us/op
                 fillHeap·p1.00:   902823.936 us/op

Iteration  14: 858783.744 ±(99.9%) 44728.081 us/op
                 fillHeap·p0.00:   799014.912 us/op
                 fillHeap·p0.50:   862453.760 us/op
                 fillHeap·p0.90:   913938.842 us/op
                 fillHeap·p0.95:   922746.880 us/op
                 fillHeap·p0.99:   922746.880 us/op
                 fillHeap·p0.999:  922746.880 us/op
                 fillHeap·p0.9999: 922746.880 us/op
                 fillHeap·p1.00:   922746.880 us/op

Iteration  15: 853103.957 ±(99.9%) 45406.536 us/op
                 fillHeap·p0.00:   788529.152 us/op
                 fillHeap·p0.50:   851968.000 us/op
                 fillHeap·p0.90:   904396.800 us/op
                 fillHeap·p0.95:   909115.392 us/op
                 fillHeap·p0.99:   909115.392 us/op
                 fillHeap·p0.999:  909115.392 us/op
                 fillHeap·p0.9999: 909115.392 us/op
                 fillHeap·p1.00:   909115.392 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 180
  mean = 856715.719 ±(99.9%) 8546.097 us/op

  Histogram, us/op:
    [ 700000.000,  725000.000) = 0 
    [ 725000.000,  750000.000) = 0 
    [ 750000.000,  775000.000) = 0 
    [ 775000.000,  800000.000) = 14 
    [ 800000.000,  825000.000) = 18 
    [ 825000.000,  850000.000) = 47 
    [ 850000.000,  875000.000) = 43 
    [ 875000.000,  900000.000) = 39 
    [ 900000.000,  925000.000) = 17 
    [ 925000.000,  950000.000) = 2 
    [ 950000.000,  975000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 780140.544 us/op
     p(50.0000) = 856686.592 us/op
     p(90.0000) = 902614.221 us/op
     p(95.0000) = 912261.120 us/op
     p(99.0000) = 928985.907 us/op
     p(99.9000) = 933232.640 us/op
     p(99.9900) = 933232.640 us/op
     p(99.9990) = 933232.640 us/op
     p(99.9999) = 933232.640 us/op
    p(100.0000) = 933232.640 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 74.64% complete, ETA 02:07:57
# Fork: 1 of 1
# Warmup Iteration   1: 947626.729 ±(99.9%) 95448.124 us/op
# Warmup Iteration   2: 945052.951 ±(99.9%) 90512.895 us/op
# Warmup Iteration   3: 944957.626 ±(99.9%) 93930.593 us/op
# Warmup Iteration   4: 946673.478 ±(99.9%) 94330.508 us/op
# Warmup Iteration   5: 942097.873 ±(99.9%) 91945.063 us/op
Iteration   1: 942669.824 ±(99.9%) 92439.239 us/op
                 fillHeap·p0.00:   872415.232 us/op
                 fillHeap·p0.50:   920649.728 us/op
                 fillHeap·p0.90:   1067030.938 us/op
                 fillHeap·p0.95:   1069547.520 us/op
                 fillHeap·p0.99:   1069547.520 us/op
                 fillHeap·p0.999:  1069547.520 us/op
                 fillHeap·p0.9999: 1069547.520 us/op
                 fillHeap·p1.00:   1069547.520 us/op

Iteration   2: 943337.100 ±(99.9%) 91477.062 us/op
                 fillHeap·p0.00:   871366.656 us/op
                 fillHeap·p0.50:   922746.880 us/op
                 fillHeap·p0.90:   1062626.918 us/op
                 fillHeap·p0.95:   1063256.064 us/op
                 fillHeap·p0.99:   1063256.064 us/op
                 fillHeap·p0.999:  1063256.064 us/op
                 fillHeap·p0.9999: 1063256.064 us/op
                 fillHeap·p1.00:   1063256.064 us/op

Iteration   3: 943718.400 ±(99.9%) 91471.837 us/op
                 fillHeap·p0.00:   878706.688 us/op
                 fillHeap·p0.50:   922746.880 us/op
                 fillHeap·p0.90:   1066401.792 us/op
                 fillHeap·p0.95:   1067450.368 us/op
                 fillHeap·p0.99:   1067450.368 us/op
                 fillHeap·p0.999:  1067450.368 us/op
                 fillHeap·p0.9999: 1067450.368 us/op
                 fillHeap·p1.00:   1067450.368 us/op

Iteration   4: 944004.375 ±(99.9%) 90273.262 us/op
                 fillHeap·p0.00:   871366.656 us/op
                 fillHeap·p0.50:   922746.880 us/op
                 fillHeap·p0.90:   1061788.058 us/op
                 fillHeap·p0.95:   1062207.488 us/op
                 fillHeap·p0.99:   1062207.488 us/op
                 fillHeap·p0.999:  1062207.488 us/op
                 fillHeap·p0.9999: 1062207.488 us/op
                 fillHeap·p1.00:   1062207.488 us/op

Iteration   5: 948389.329 ±(99.9%) 92930.170 us/op
                 fillHeap·p0.00:   880803.840 us/op
                 fillHeap·p0.50:   929038.336 us/op
                 fillHeap·p0.90:   1072273.818 us/op
                 fillHeap·p0.95:   1073741.824 us/op
                 fillHeap·p0.99:   1073741.824 us/op
                 fillHeap·p0.999:  1073741.824 us/op
                 fillHeap·p0.9999: 1073741.824 us/op
                 fillHeap·p1.00:   1073741.824 us/op

Iteration   6: 953060.259 ±(99.9%) 91688.740 us/op
                 fillHeap·p0.00:   883949.568 us/op
                 fillHeap·p0.50:   932184.064 us/op
                 fillHeap·p0.90:   1073741.824 us/op
                 fillHeap·p0.95:   1073741.824 us/op
                 fillHeap·p0.99:   1073741.824 us/op
                 fillHeap·p0.999:  1073741.824 us/op
                 fillHeap·p0.9999: 1073741.824 us/op
                 fillHeap·p1.00:   1073741.824 us/op

Iteration   7: 950009.856 ±(99.9%) 93655.210 us/op
                 fillHeap·p0.00:   881852.416 us/op
                 fillHeap·p0.50:   931135.488 us/op
                 fillHeap·p0.90:   1074161.254 us/op
                 fillHeap·p0.95:   1075838.976 us/op
                 fillHeap·p0.99:   1075838.976 us/op
                 fillHeap·p0.999:  1075838.976 us/op
                 fillHeap·p0.9999: 1075838.976 us/op
                 fillHeap·p1.00:   1075838.976 us/op

Iteration   8: 951153.757 ±(99.9%) 93257.935 us/op
                 fillHeap·p0.00:   881852.416 us/op
                 fillHeap·p0.50:   931135.488 us/op
                 fillHeap·p0.90:   1073322.394 us/op
                 fillHeap·p0.95:   1073741.824 us/op
                 fillHeap·p0.99:   1073741.824 us/op
                 fillHeap·p0.999:  1073741.824 us/op
                 fillHeap·p0.9999: 1073741.824 us/op
                 fillHeap·p1.00:   1073741.824 us/op

Iteration   9: 947722.054 ±(99.9%) 89711.771 us/op
                 fillHeap·p0.00:   878706.688 us/op
                 fillHeap·p0.50:   926941.184 us/op
                 fillHeap·p0.90:   1066192.077 us/op
                 fillHeap·p0.95:   1066401.792 us/op
                 fillHeap·p0.99:   1066401.792 us/op
                 fillHeap·p0.999:  1066401.792 us/op
                 fillHeap·p0.9999: 1066401.792 us/op
                 fillHeap·p1.00:   1066401.792 us/op

Iteration  10: 950105.181 ±(99.9%) 92080.120 us/op
                 fillHeap·p0.00:   881852.416 us/op
                 fillHeap·p0.50:   930086.912 us/op
                 fillHeap·p0.90:   1071015.526 us/op
                 fillHeap·p0.95:   1071644.672 us/op
                 fillHeap·p0.99:   1071644.672 us/op
                 fillHeap·p0.999:  1071644.672 us/op
                 fillHeap·p0.9999: 1071644.672 us/op
                 fillHeap·p1.00:   1071644.672 us/op

Iteration  11: 947245.428 ±(99.9%) 91800.644 us/op
                 fillHeap·p0.00:   878706.688 us/op
                 fillHeap·p0.50:   925892.608 us/op
                 fillHeap·p0.90:   1067450.368 us/op
                 fillHeap·p0.95:   1068498.944 us/op
                 fillHeap·p0.99:   1068498.944 us/op
                 fillHeap·p0.999:  1068498.944 us/op
                 fillHeap·p0.9999: 1068498.944 us/op
                 fillHeap·p1.00:   1068498.944 us/op

Iteration  12: 946387.503 ±(99.9%) 93352.395 us/op
                 fillHeap·p0.00:   872415.232 us/op
                 fillHeap·p0.50:   924844.032 us/op
                 fillHeap·p0.90:   1067660.083 us/op
                 fillHeap·p0.95:   1068498.944 us/op
                 fillHeap·p0.99:   1068498.944 us/op
                 fillHeap·p0.999:  1068498.944 us/op
                 fillHeap·p0.9999: 1068498.944 us/op
                 fillHeap·p1.00:   1068498.944 us/op

Iteration  13: 948484.655 ±(99.9%) 94222.420 us/op
                 fillHeap·p0.00:   877658.112 us/op
                 fillHeap·p0.50:   923795.456 us/op
                 fillHeap·p0.90:   1072693.248 us/op
                 fillHeap·p0.95:   1073741.824 us/op
                 fillHeap·p0.99:   1073741.824 us/op
                 fillHeap·p0.999:  1073741.824 us/op
                 fillHeap·p0.9999: 1073741.824 us/op
                 fillHeap·p1.00:   1073741.824 us/op

Iteration  14: 947340.753 ±(99.9%) 91306.989 us/op
                 fillHeap·p0.00:   875560.960 us/op
                 fillHeap·p0.50:   926941.184 us/op
                 fillHeap·p0.90:   1066821.222 us/op
                 fillHeap·p0.95:   1067450.368 us/op
                 fillHeap·p0.99:   1067450.368 us/op
                 fillHeap·p0.999:  1067450.368 us/op
                 fillHeap·p0.9999: 1067450.368 us/op
                 fillHeap·p1.00:   1067450.368 us/op

Iteration  15: 949437.905 ±(99.9%) 93916.141 us/op
                 fillHeap·p0.00:   879755.264 us/op
                 fillHeap·p0.50:   925892.608 us/op
                 fillHeap·p0.90:   1073112.678 us/op
                 fillHeap·p0.95:   1073741.824 us/op
                 fillHeap·p0.99:   1073741.824 us/op
                 fillHeap·p0.999:  1073741.824 us/op
                 fillHeap·p0.9999: 1073741.824 us/op
                 fillHeap·p1.00:   1073741.824 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 165
  mean = 947537.759 ±(99.9%) 16658.594 us/op

  Histogram, us/op:
    [ 800000.000,  825000.000) = 0 
    [ 825000.000,  850000.000) = 0 
    [ 850000.000,  875000.000) = 5 
    [ 875000.000,  900000.000) = 30 
    [ 900000.000,  925000.000) = 41 
    [ 925000.000,  950000.000) = 29 
    [ 950000.000,  975000.000) = 24 
    [ 975000.000, 1000000.000) = 6 
    [1000000.000, 1025000.000) = 0 
    [1025000.000, 1050000.000) = 0 
    [1050000.000, 1075000.000) = 29 

  Percentiles, us/op:
      p(0.0000) = 871366.656 us/op
     p(50.0000) = 926941.184 us/op
     p(90.0000) = 1067450.368 us/op
     p(95.0000) = 1071644.672 us/op
     p(99.0000) = 1074454.856 us/op
     p(99.9000) = 1075838.976 us/op
     p(99.9900) = 1075838.976 us/op
     p(99.9990) = 1075838.976 us/op
     p(99.9999) = 1075838.976 us/op
    p(100.0000) = 1075838.976 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 75.36% complete, ETA 02:04:19
# Fork: 1 of 1
# Warmup Iteration   1: 548.399 ±(99.9%) 5.505 us/op
# Warmup Iteration   2: 536.700 ±(99.9%) 0.364 us/op
# Warmup Iteration   3: 536.165 ±(99.9%) 0.699 us/op
# Warmup Iteration   4: 541.911 ±(99.9%) 0.323 us/op
# Warmup Iteration   5: 541.882 ±(99.9%) 0.268 us/op
Iteration   1: 541.755 ±(99.9%) 0.262 us/op
                 read·p0.00:   527.360 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   551.936 us/op
                 read·p0.95:   557.056 us/op
                 read·p0.99:   587.776 us/op
                 read·p0.999:  631.808 us/op
                 read·p0.9999: 766.274 us/op
                 read·p1.00:   795.648 us/op

Iteration   2: 541.626 ±(99.9%) 0.254 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   549.888 us/op
                 read·p0.95:   555.008 us/op
                 read·p0.99:   592.896 us/op
                 read·p0.999:  630.784 us/op
                 read·p0.9999: 720.896 us/op
                 read·p1.00:   720.896 us/op

Iteration   3: 541.706 ±(99.9%) 0.277 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   551.936 us/op
                 read·p0.95:   556.032 us/op
                 read·p0.99:   594.944 us/op
                 read·p0.999:  647.293 us/op
                 read·p0.9999: 738.074 us/op
                 read·p1.00:   770.048 us/op

Iteration   4: 541.641 ±(99.9%) 0.352 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   550.912 us/op
                 read·p0.95:   555.008 us/op
                 read·p0.99:   594.944 us/op
                 read·p0.999:  646.716 us/op
                 read·p0.9999: 1132.092 us/op
                 read·p1.00:   1140.736 us/op

Iteration   5: 541.650 ±(99.9%) 0.352 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   551.936 us/op
                 read·p0.95:   556.032 us/op
                 read·p0.99:   585.728 us/op
                 read·p0.999:  653.312 us/op
                 read·p0.9999: 946.370 us/op
                 read·p1.00:   1867.776 us/op

Iteration   6: 541.240 ±(99.9%) 0.254 us/op
                 read·p0.00:   527.360 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   550.912 us/op
                 read·p0.95:   555.008 us/op
                 read·p0.99:   582.656 us/op
                 read·p0.999:  660.014 us/op
                 read·p0.9999: 802.126 us/op
                 read·p1.00:   826.368 us/op

Iteration   7: 540.770 ±(99.9%) 0.239 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   549.888 us/op
                 read·p0.95:   552.960 us/op
                 read·p0.99:   580.608 us/op
                 read·p0.999:  650.297 us/op
                 read·p0.9999: 795.549 us/op
                 read·p1.00:   812.032 us/op

Iteration   8: 541.177 ±(99.9%) 0.580 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   549.888 us/op
                 read·p0.95:   553.984 us/op
                 read·p0.99:   579.584 us/op
                 read·p0.999:  692.576 us/op
                 read·p0.9999: 1421.762 us/op
                 read·p1.00:   3141.632 us/op

Iteration   9: 540.690 ±(99.9%) 0.207 us/op
                 read·p0.00:   527.360 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   550.912 us/op
                 read·p0.95:   553.984 us/op
                 read·p0.99:   573.440 us/op
                 read·p0.999:  639.029 us/op
                 read·p0.9999: 736.851 us/op
                 read·p1.00:   814.080 us/op

Iteration  10: 541.000 ±(99.9%) 0.249 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   550.912 us/op
                 read·p0.95:   553.984 us/op
                 read·p0.99:   575.488 us/op
                 read·p0.999:  661.504 us/op
                 read·p0.9999: 924.590 us/op
                 read·p1.00:   941.056 us/op

Iteration  11: 540.961 ±(99.9%) 0.207 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   550.912 us/op
                 read·p0.95:   555.008 us/op
                 read·p0.99:   575.488 us/op
                 read·p0.999:  611.402 us/op
                 read·p0.9999: 713.561 us/op
                 read·p1.00:   746.496 us/op

Iteration  12: 540.723 ±(99.9%) 0.210 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   550.912 us/op
                 read·p0.95:   553.984 us/op
                 read·p0.99:   574.464 us/op
                 read·p0.999:  643.072 us/op
                 read·p0.9999: 711.282 us/op
                 read·p1.00:   714.752 us/op

Iteration  13: 541.122 ±(99.9%) 0.273 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   549.888 us/op
                 read·p0.95:   552.960 us/op
                 read·p0.99:   573.440 us/op
                 read·p0.999:  630.314 us/op
                 read·p0.9999: 998.189 us/op
                 read·p1.00:   1081.344 us/op

Iteration  14: 541.132 ±(99.9%) 0.310 us/op
                 read·p0.00:   526.336 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   550.912 us/op
                 read·p0.95:   555.008 us/op
                 read·p0.99:   576.932 us/op
                 read·p0.999:  623.146 us/op
                 read·p0.9999: 1075.838 us/op
                 read·p1.00:   1101.824 us/op

Iteration  15: 540.743 ±(99.9%) 0.218 us/op
                 read·p0.00:   527.360 us/op
                 read·p0.50:   538.624 us/op
                 read·p0.90:   549.888 us/op
                 read·p0.95:   553.984 us/op
                 read·p0.99:   575.488 us/op
                 read·p0.999:  652.943 us/op
                 read·p0.9999: 735.048 us/op
                 read·p1.00:   756.736 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  N = 276832
  mean =    541.195 ±(99.9%) 0.077 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 0 
    [ 250.000,  500.000) = 0 
    [ 500.000,  750.000) = 276772 
    [ 750.000, 1000.000) = 43 
    [1000.000, 1250.000) = 15 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 1 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 
    [2750.000, 3000.000) = 0 
    [3000.000, 3250.000) = 1 
    [3250.000, 3500.000) = 0 
    [3500.000, 3750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    526.336 us/op
     p(50.0000) =    538.624 us/op
     p(90.0000) =    550.912 us/op
     p(95.0000) =    555.008 us/op
     p(99.0000) =    581.632 us/op
     p(99.9000) =    647.168 us/op
     p(99.9900) =    918.477 us/op
     p(99.9990) =   1309.169 us/op
     p(99.9999) =   3141.632 us/op
    p(100.0000) =   3141.632 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 76.08% complete, ETA 02:00:38
# Fork: 1 of 1
# Warmup Iteration   1: 671.207 ±(99.9%) 5.962 us/op
# Warmup Iteration   2: 657.206 ±(99.9%) 0.748 us/op
# Warmup Iteration   3: 656.182 ±(99.9%) 0.274 us/op
# Warmup Iteration   4: 657.209 ±(99.9%) 1.226 us/op
# Warmup Iteration   5: 654.531 ±(99.9%) 0.473 us/op
Iteration   1: 653.765 ±(99.9%) 0.803 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   664.576 us/op
                 readAndWrite·p0.95:   667.648 us/op
                 readAndWrite·p0.99:   694.272 us/op
                 readAndWrite·p0.999:  778.124 us/op
                 readAndWrite·p0.9999: 3045.106 us/op
                 readAndWrite·p1.00:   3317.760 us/op

Iteration   2: 653.163 ±(99.9%) 0.261 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   664.576 us/op
                 readAndWrite·p0.95:   667.648 us/op
                 readAndWrite·p0.99:   691.200 us/op
                 readAndWrite·p0.999:  771.793 us/op
                 readAndWrite·p0.9999: 835.884 us/op
                 readAndWrite·p1.00:   839.680 us/op

Iteration   3: 653.339 ±(99.9%) 0.271 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   664.576 us/op
                 readAndWrite·p0.95:   667.648 us/op
                 readAndWrite·p0.99:   688.128 us/op
                 readAndWrite·p0.999:  747.983 us/op
                 readAndWrite·p0.9999: 1017.878 us/op
                 readAndWrite·p1.00:   1073.152 us/op

Iteration   4: 653.137 ±(99.9%) 0.249 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   663.552 us/op
                 readAndWrite·p0.95:   667.648 us/op
                 readAndWrite·p0.99:   688.128 us/op
                 readAndWrite·p0.999:  750.815 us/op
                 readAndWrite·p0.9999: 857.479 us/op
                 readAndWrite·p1.00:   914.432 us/op

Iteration   5: 653.148 ±(99.9%) 0.261 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   663.552 us/op
                 readAndWrite·p0.95:   667.648 us/op
                 readAndWrite·p0.99:   691.200 us/op
                 readAndWrite·p0.999:  765.198 us/op
                 readAndWrite·p0.9999: 872.368 us/op
                 readAndWrite·p1.00:   928.768 us/op

Iteration   6: 653.990 ±(99.9%) 0.784 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   664.576 us/op
                 readAndWrite·p0.95:   668.672 us/op
                 readAndWrite·p0.99:   694.272 us/op
                 readAndWrite·p0.999:  776.144 us/op
                 readAndWrite·p0.9999: 2926.479 us/op
                 readAndWrite·p1.00:   2928.640 us/op

Iteration   7: 654.128 ±(99.9%) 0.378 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   665.600 us/op
                 readAndWrite·p0.95:   669.696 us/op
                 readAndWrite·p0.99:   696.320 us/op
                 readAndWrite·p0.999:  783.823 us/op
                 readAndWrite·p0.9999: 1172.157 us/op
                 readAndWrite·p1.00:   1198.080 us/op

Iteration   8: 653.904 ±(99.9%) 0.426 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   665.600 us/op
                 readAndWrite·p0.95:   669.696 us/op
                 readAndWrite·p0.99:   693.248 us/op
                 readAndWrite·p0.999:  777.669 us/op
                 readAndWrite·p0.9999: 1319.703 us/op
                 readAndWrite·p1.00:   1343.488 us/op

Iteration   9: 654.094 ±(99.9%) 0.471 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   665.600 us/op
                 readAndWrite·p0.95:   669.696 us/op
                 readAndWrite·p0.99:   692.224 us/op
                 readAndWrite·p0.999:  781.670 us/op
                 readAndWrite·p0.9999: 1450.163 us/op
                 readAndWrite·p1.00:   1466.368 us/op

Iteration  10: 654.480 ±(99.9%) 0.473 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   665.600 us/op
                 readAndWrite·p0.95:   669.696 us/op
                 readAndWrite·p0.99:   696.320 us/op
                 readAndWrite·p0.999:  979.630 us/op
                 readAndWrite·p0.9999: 1260.261 us/op
                 readAndWrite·p1.00:   1286.144 us/op

Iteration  11: 654.026 ±(99.9%) 0.454 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   665.600 us/op
                 readAndWrite·p0.95:   669.696 us/op
                 readAndWrite·p0.99:   694.272 us/op
                 readAndWrite·p0.999:  772.555 us/op
                 readAndWrite·p0.9999: 1421.804 us/op
                 readAndWrite·p1.00:   1529.856 us/op

Iteration  12: 654.224 ±(99.9%) 0.415 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   665.600 us/op
                 readAndWrite·p0.95:   669.696 us/op
                 readAndWrite·p0.99:   695.296 us/op
                 readAndWrite·p0.999:  770.515 us/op
                 readAndWrite·p0.9999: 1279.520 us/op
                 readAndWrite·p1.00:   1308.672 us/op

Iteration  13: 653.584 ±(99.9%) 0.281 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   664.576 us/op
                 readAndWrite·p0.95:   668.672 us/op
                 readAndWrite·p0.99:   691.343 us/op
                 readAndWrite·p0.999:  762.587 us/op
                 readAndWrite·p0.9999: 942.502 us/op
                 readAndWrite·p1.00:   982.016 us/op

Iteration  14: 653.303 ±(99.9%) 0.277 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   664.576 us/op
                 readAndWrite·p0.95:   668.672 us/op
                 readAndWrite·p0.99:   692.296 us/op
                 readAndWrite·p0.999:  770.048 us/op
                 readAndWrite·p0.9999: 860.102 us/op
                 readAndWrite·p1.00:   870.400 us/op

Iteration  15: 653.464 ±(99.9%) 0.280 us/op
                 readAndWrite·p0.00:   644.096 us/op
                 readAndWrite·p0.50:   651.264 us/op
                 readAndWrite·p0.90:   664.576 us/op
                 readAndWrite·p0.95:   667.648 us/op
                 readAndWrite·p0.99:   693.248 us/op
                 readAndWrite·p0.999:  787.456 us/op
                 readAndWrite·p0.9999: 846.736 us/op
                 readAndWrite·p1.00:   858.112 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  N = 229237
  mean =    653.716 ±(99.9%) 0.114 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 0 
    [ 250.000,  500.000) = 0 
    [ 500.000,  750.000) = 228867 
    [ 750.000, 1000.000) = 311 
    [1000.000, 1250.000) = 39 
    [1250.000, 1500.000) = 14 
    [1500.000, 1750.000) = 2 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 
    [2750.000, 3000.000) = 3 
    [3000.000, 3250.000) = 0 
    [3250.000, 3500.000) = 1 
    [3500.000, 3750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    644.096 us/op
     p(50.0000) =    651.264 us/op
     p(90.0000) =    664.576 us/op
     p(95.0000) =    668.672 us/op
     p(99.0000) =    692.224 us/op
     p(99.9000) =    774.144 us/op
     p(99.9900) =   1219.340 us/op
     p(99.9990) =   2927.442 us/op
     p(99.9999) =   3317.760 us/op
    p(100.0000) =   3317.760 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 76.81% complete, ETA 01:56:58
# Fork: 1 of 1
# Warmup Iteration   1: 963.103 ±(99.9%) 10.966 us/op
# Warmup Iteration   2: 942.931 ±(99.9%) 1.649 us/op
# Warmup Iteration   3: 940.531 ±(99.9%) 0.246 us/op
# Warmup Iteration   4: 940.282 ±(99.9%) 0.231 us/op
# Warmup Iteration   5: 940.223 ±(99.9%) 0.905 us/op
Iteration   1: 859.447 ±(99.9%) 2.816 us/op
                 swap·p0.00:   749.568 us/op
                 swap·p0.50:   935.936 us/op
                 swap·p0.90:   944.128 us/op
                 swap·p0.95:   946.176 us/op
                 swap·p0.99:   955.392 us/op
                 swap·p0.999:  1015.808 us/op
                 swap·p0.9999: 1620.901 us/op
                 swap·p1.00:   1720.320 us/op

Iteration   2: 567.850 ±(99.9%) 0.160 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   574.464 us/op
                 swap·p0.95:   576.512 us/op
                 swap·p0.99:   584.704 us/op
                 swap·p0.999:  652.958 us/op
                 swap·p0.9999: 773.328 us/op
                 swap·p1.00:   777.216 us/op

Iteration   3: 567.996 ±(99.9%) 0.242 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   574.464 us/op
                 swap·p0.95:   576.512 us/op
                 swap·p0.99:   584.704 us/op
                 swap·p0.999:  672.039 us/op
                 swap·p0.9999: 1042.396 us/op
                 swap·p1.00:   1045.504 us/op

Iteration   4: 567.757 ±(99.9%) 0.155 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   574.464 us/op
                 swap·p0.95:   576.512 us/op
                 swap·p0.99:   584.704 us/op
                 swap·p0.999:  636.546 us/op
                 swap·p0.9999: 739.915 us/op
                 swap·p1.00:   774.144 us/op

Iteration   5: 567.821 ±(99.9%) 0.159 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   574.464 us/op
                 swap·p0.95:   576.512 us/op
                 swap·p0.99:   583.680 us/op
                 swap·p0.999:  651.264 us/op
                 swap·p0.9999: 749.827 us/op
                 swap·p1.00:   770.048 us/op

Iteration   6: 567.766 ±(99.9%) 0.145 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   574.464 us/op
                 swap·p0.95:   575.488 us/op
                 swap·p0.99:   583.680 us/op
                 swap·p0.999:  634.743 us/op
                 swap·p0.9999: 760.919 us/op
                 swap·p1.00:   774.144 us/op

Iteration   7: 567.772 ±(99.9%) 0.169 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   574.464 us/op
                 swap·p0.95:   575.488 us/op
                 swap·p0.99:   584.704 us/op
                 swap·p0.999:  661.721 us/op
                 swap·p0.9999: 785.300 us/op
                 swap·p1.00:   814.080 us/op

Iteration   8: 567.923 ±(99.9%) 0.164 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   574.464 us/op
                 swap·p0.95:   576.512 us/op
                 swap·p0.99:   587.776 us/op
                 swap·p0.999:  645.349 us/op
                 swap·p0.9999: 755.181 us/op
                 swap·p1.00:   756.736 us/op

Iteration   9: 567.918 ±(99.9%) 0.226 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   574.464 us/op
                 swap·p0.95:   575.488 us/op
                 swap·p0.99:   583.680 us/op
                 swap·p0.999:  634.503 us/op
                 swap·p0.9999: 1010.808 us/op
                 swap·p1.00:   1085.440 us/op

Iteration  10: 567.890 ±(99.9%) 0.233 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   573.440 us/op
                 swap·p0.95:   575.488 us/op
                 swap·p0.99:   583.680 us/op
                 swap·p0.999:  640.226 us/op
                 swap·p0.9999: 970.028 us/op
                 swap·p1.00:   1029.120 us/op

Iteration  11: 567.810 ±(99.9%) 0.141 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   574.464 us/op
                 swap·p0.95:   576.512 us/op
                 swap·p0.99:   584.704 us/op
                 swap·p0.999:  625.055 us/op
                 swap·p0.9999: 727.804 us/op
                 swap·p1.00:   769.024 us/op

Iteration  12: 567.660 ±(99.9%) 0.128 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   573.440 us/op
                 swap·p0.95:   575.488 us/op
                 swap·p0.99:   582.656 us/op
                 swap·p0.999:  610.714 us/op
                 swap·p0.9999: 718.356 us/op
                 swap·p1.00:   755.712 us/op

Iteration  13: 567.800 ±(99.9%) 0.164 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   574.464 us/op
                 swap·p0.95:   576.512 us/op
                 swap·p0.99:   584.704 us/op
                 swap·p0.999:  636.979 us/op
                 swap·p0.9999: 842.428 us/op
                 swap·p1.00:   847.872 us/op

Iteration  14: 567.694 ±(99.9%) 0.130 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   574.464 us/op
                 swap·p0.95:   576.512 us/op
                 swap·p0.99:   584.704 us/op
                 swap·p0.999:  614.197 us/op
                 swap·p0.9999: 700.791 us/op
                 swap·p1.00:   750.592 us/op

Iteration  15: 567.730 ±(99.9%) 0.134 us/op
                 swap·p0.00:   563.200 us/op
                 swap·p0.50:   567.296 us/op
                 swap·p0.90:   574.464 us/op
                 swap·p0.95:   575.488 us/op
                 swap·p0.99:   584.704 us/op
                 swap·p0.999:  623.616 us/op
                 swap·p0.9999: 721.724 us/op
                 swap·p1.00:   756.736 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  N = 257946
  mean =    580.960 ±(99.9%) 0.414 us/op

  Histogram, us/op:
    [   0.000,  125.000) = 0 
    [ 125.000,  250.000) = 0 
    [ 250.000,  375.000) = 0 
    [ 375.000,  500.000) = 0 
    [ 500.000,  625.000) = 246035 
    [ 625.000,  750.000) = 930 
    [ 750.000,  875.000) = 4416 
    [ 875.000, 1000.000) = 6547 
    [1000.000, 1125.000) = 17 
    [1125.000, 1250.000) = 0 
    [1250.000, 1375.000) = 0 
    [1375.000, 1500.000) = 0 
    [1500.000, 1625.000) = 0 
    [1625.000, 1750.000) = 1 
    [1750.000, 1875.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    563.200 us/op
     p(50.0000) =    567.296 us/op
     p(90.0000) =    575.488 us/op
     p(95.0000) =    589.824 us/op
     p(99.0000) =    939.008 us/op
     p(99.9000) =    949.248 us/op
     p(99.9900) =    982.016 us/op
     p(99.9990) =   1108.829 us/op
     p(99.9999) =   1720.320 us/op
    p(100.0000) =   1720.320 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 77.53% complete, ETA 01:53:17
# Fork: 1 of 1
# Warmup Iteration   1: 547.574 ±(99.9%) 6.019 us/op
# Warmup Iteration   2: 535.838 ±(99.9%) 0.533 us/op
# Warmup Iteration   3: 534.882 ±(99.9%) 0.507 us/op
# Warmup Iteration   4: 534.267 ±(99.9%) 0.229 us/op
# Warmup Iteration   5: 534.132 ±(99.9%) 0.208 us/op
Iteration   1: 534.141 ±(99.9%) 0.208 us/op
                 write·p0.00:   516.096 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   543.744 us/op
                 write·p0.95:   547.840 us/op
                 write·p0.99:   565.248 us/op
                 write·p0.999:  598.322 us/op
                 write·p0.9999: 652.687 us/op
                 write·p1.00:   655.360 us/op

Iteration   2: 534.340 ±(99.9%) 0.244 us/op
                 write·p0.00:   516.096 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   543.744 us/op
                 write·p0.95:   548.864 us/op
                 write·p0.99:   569.344 us/op
                 write·p0.999:  604.787 us/op
                 write·p0.9999: 744.564 us/op
                 write·p1.00:   1120.256 us/op

Iteration   3: 535.135 ±(99.9%) 0.324 us/op
                 write·p0.00:   516.096 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   545.792 us/op
                 write·p0.95:   549.888 us/op
                 write·p0.99:   572.416 us/op
                 write·p0.999:  660.822 us/op
                 write·p0.9999: 1055.677 us/op
                 write·p1.00:   1075.200 us/op

Iteration   4: 534.512 ±(99.9%) 0.229 us/op
                 write·p0.00:   516.096 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   545.792 us/op
                 write·p0.95:   549.888 us/op
                 write·p0.99:   569.344 us/op
                 write·p0.999:  598.016 us/op
                 write·p0.9999: 673.037 us/op
                 write·p1.00:   674.816 us/op

Iteration   5: 534.553 ±(99.9%) 0.220 us/op
                 write·p0.00:   516.096 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   544.768 us/op
                 write·p0.95:   549.888 us/op
                 write·p0.99:   568.320 us/op
                 write·p0.999:  594.242 us/op
                 write·p0.9999: 655.495 us/op
                 write·p1.00:   656.384 us/op

Iteration   6: 534.517 ±(99.9%) 0.231 us/op
                 write·p0.00:   516.096 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   544.768 us/op
                 write·p0.95:   548.864 us/op
                 write·p0.99:   569.344 us/op
                 write·p0.999:  617.980 us/op
                 write·p0.9999: 715.442 us/op
                 write·p1.00:   740.352 us/op

Iteration   7: 534.777 ±(99.9%) 0.209 us/op
                 write·p0.00:   515.072 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   544.768 us/op
                 write·p0.95:   548.864 us/op
                 write·p0.99:   566.487 us/op
                 write·p0.999:  590.848 us/op
                 write·p0.9999: 672.131 us/op
                 write·p1.00:   688.128 us/op

Iteration   8: 534.792 ±(99.9%) 0.227 us/op
                 write·p0.00:   515.072 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   545.792 us/op
                 write·p0.95:   549.888 us/op
                 write·p0.99:   568.535 us/op
                 write·p0.999:  602.074 us/op
                 write·p0.9999: 686.874 us/op
                 write·p1.00:   752.640 us/op

Iteration   9: 534.525 ±(99.9%) 0.206 us/op
                 write·p0.00:   516.608 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   543.744 us/op
                 write·p0.95:   548.864 us/op
                 write·p0.99:   564.224 us/op
                 write·p0.999:  586.752 us/op
                 write·p0.9999: 650.550 us/op
                 write·p1.00:   693.248 us/op

Iteration  10: 534.430 ±(99.9%) 0.214 us/op
                 write·p0.00:   516.608 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   544.768 us/op
                 write·p0.95:   549.888 us/op
                 write·p0.99:   565.248 us/op
                 write·p0.999:  591.165 us/op
                 write·p0.9999: 692.970 us/op
                 write·p1.00:   745.472 us/op

Iteration  11: 534.892 ±(99.9%) 0.220 us/op
                 write·p0.00:   516.096 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   545.792 us/op
                 write·p0.95:   549.888 us/op
                 write·p0.99:   566.272 us/op
                 write·p0.999:  595.278 us/op
                 write·p0.9999: 683.331 us/op
                 write·p1.00:   705.536 us/op

Iteration  12: 534.235 ±(99.9%) 0.204 us/op
                 write·p0.00:   516.096 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   543.744 us/op
                 write·p0.95:   548.864 us/op
                 write·p0.99:   565.248 us/op
                 write·p0.999:  588.394 us/op
                 write·p0.9999: 661.450 us/op
                 write·p1.00:   695.296 us/op

Iteration  13: 534.067 ±(99.9%) 0.203 us/op
                 write·p0.00:   514.560 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   543.744 us/op
                 write·p0.95:   547.840 us/op
                 write·p0.99:   566.272 us/op
                 write·p0.999:  587.056 us/op
                 write·p0.9999: 636.607 us/op
                 write·p1.00:   648.192 us/op

Iteration  14: 534.500 ±(99.9%) 0.204 us/op
                 write·p0.00:   515.072 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   543.744 us/op
                 write·p0.95:   548.864 us/op
                 write·p0.99:   565.371 us/op
                 write·p0.999:  588.800 us/op
                 write·p0.9999: 625.145 us/op
                 write·p1.00:   642.048 us/op

Iteration  15: 533.921 ±(99.9%) 0.221 us/op
                 write·p0.00:   516.608 us/op
                 write·p0.50:   533.504 us/op
                 write·p0.90:   543.744 us/op
                 write·p0.95:   548.864 us/op
                 write·p0.99:   565.248 us/op
                 write·p0.999:  592.468 us/op
                 write·p0.9999: 742.337 us/op
                 write·p1.00:   783.360 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  N = 280315
  mean =    534.489 ±(99.9%) 0.058 us/op

  Histogram, us/op:
    [ 500.000,  550.000) = 269145 
    [ 550.000,  600.000) = 10943 
    [ 600.000,  650.000) = 154 
    [ 650.000,  700.000) = 51 
    [ 700.000,  750.000) = 10 
    [ 750.000,  800.000) = 2 
    [ 800.000,  850.000) = 0 
    [ 850.000,  900.000) = 3 
    [ 900.000,  950.000) = 2 
    [ 950.000, 1000.000) = 2 
    [1000.000, 1050.000) = 0 
    [1050.000, 1100.000) = 2 
    [1100.000, 1150.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    514.560 us/op
     p(50.0000) =    533.504 us/op
     p(90.0000) =    544.768 us/op
     p(95.0000) =    548.864 us/op
     p(99.0000) =    567.296 us/op
     p(99.9000) =    594.620 us/op
     p(99.9900) =    686.080 us/op
     p(99.9990) =   1057.106 us/op
     p(99.9999) =   1120.256 us/op
    p(100.0000) =   1120.256 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 78.26% complete, ETA 01:49:37
# Fork: 1 of 1
# Warmup Iteration   1: 926655.209 ±(99.9%) 184868.343 us/op
# Warmup Iteration   2: 886658.389 ±(99.9%) 2460.433 us/op
# Warmup Iteration   3: 884998.144 ±(99.9%) 2746.498 us/op
# Warmup Iteration   4: 884036.949 ±(99.9%) 1337.967 us/op
# Warmup Iteration   5: 885085.525 ±(99.9%) 2100.927 us/op
Iteration   1: 891376.981 ±(99.9%) 2177.582 us/op
                 sumBigDecimals·p0.00:   888143.872 us/op
                 sumBigDecimals·p0.50:   891289.600 us/op
                 sumBigDecimals·p0.90:   893386.752 us/op
                 sumBigDecimals·p0.95:   893386.752 us/op
                 sumBigDecimals·p0.99:   893386.752 us/op
                 sumBigDecimals·p0.999:  893386.752 us/op
                 sumBigDecimals·p0.9999: 893386.752 us/op
                 sumBigDecimals·p1.00:   893386.752 us/op

Iteration   2: 885784.576 ±(99.9%) 3760.797 us/op
                 sumBigDecimals·p0.00:   880803.840 us/op
                 sumBigDecimals·p0.50:   887095.296 us/op
                 sumBigDecimals·p0.90:   890345.882 us/op
                 sumBigDecimals·p0.95:   891289.600 us/op
                 sumBigDecimals·p0.99:   891289.600 us/op
                 sumBigDecimals·p0.999:  891289.600 us/op
                 sumBigDecimals·p0.9999: 891289.600 us/op
                 sumBigDecimals·p1.00:   891289.600 us/op

Iteration   3: 884299.093 ±(99.9%) 2582.377 us/op
                 sumBigDecimals·p0.00:   880803.840 us/op
                 sumBigDecimals·p0.50:   884998.144 us/op
                 sumBigDecimals·p0.90:   886780.723 us/op
                 sumBigDecimals·p0.95:   887095.296 us/op
                 sumBigDecimals·p0.99:   887095.296 us/op
                 sumBigDecimals·p0.999:  887095.296 us/op
                 sumBigDecimals·p0.9999: 887095.296 us/op
                 sumBigDecimals·p1.00:   887095.296 us/op

Iteration   4: 890066.261 ±(99.9%) 2613.935 us/op
                 sumBigDecimals·p0.00:   887095.296 us/op
                 sumBigDecimals·p0.50:   889192.448 us/op
                 sumBigDecimals·p0.90:   893072.179 us/op
                 sumBigDecimals·p0.95:   893386.752 us/op
                 sumBigDecimals·p0.99:   893386.752 us/op
                 sumBigDecimals·p0.999:  893386.752 us/op
                 sumBigDecimals·p0.9999: 893386.752 us/op
                 sumBigDecimals·p1.00:   893386.752 us/op

Iteration   5: 892163.413 ±(99.9%) 4001.967 us/op
                 sumBigDecimals·p0.00:   886046.720 us/op
                 sumBigDecimals·p0.50:   892862.464 us/op
                 sumBigDecimals·p0.90:   897371.341 us/op
                 sumBigDecimals·p0.95:   898629.632 us/op
                 sumBigDecimals·p0.99:   898629.632 us/op
                 sumBigDecimals·p0.999:  898629.632 us/op
                 sumBigDecimals·p0.9999: 898629.632 us/op
                 sumBigDecimals·p1.00:   898629.632 us/op

Iteration   6: 885871.957 ±(99.9%) 2736.529 us/op
                 sumBigDecimals·p0.00:   882900.992 us/op
                 sumBigDecimals·p0.50:   886046.720 us/op
                 sumBigDecimals·p0.90:   888877.875 us/op
                 sumBigDecimals·p0.95:   889192.448 us/op
                 sumBigDecimals·p0.99:   889192.448 us/op
                 sumBigDecimals·p0.999:  889192.448 us/op
                 sumBigDecimals·p0.9999: 889192.448 us/op
                 sumBigDecimals·p1.00:   889192.448 us/op

Iteration   7: 887182.677 ±(99.9%) 1455.377 us/op
                 sumBigDecimals·p0.00:   884998.144 us/op
                 sumBigDecimals·p0.50:   887095.296 us/op
                 sumBigDecimals·p0.90:   888877.875 us/op
                 sumBigDecimals·p0.95:   889192.448 us/op
                 sumBigDecimals·p0.99:   889192.448 us/op
                 sumBigDecimals·p0.999:  889192.448 us/op
                 sumBigDecimals·p0.9999: 889192.448 us/op
                 sumBigDecimals·p1.00:   889192.448 us/op

Iteration   8: 886396.245 ±(99.9%) 2384.275 us/op
                 sumBigDecimals·p0.00:   884998.144 us/op
                 sumBigDecimals·p0.50:   886046.720 us/op
                 sumBigDecimals·p0.90:   890345.882 us/op
                 sumBigDecimals·p0.95:   891289.600 us/op
                 sumBigDecimals·p0.99:   891289.600 us/op
                 sumBigDecimals·p0.999:  891289.600 us/op
                 sumBigDecimals·p0.9999: 891289.600 us/op
                 sumBigDecimals·p1.00:   891289.600 us/op

Iteration   9: 885172.907 ±(99.9%) 1884.935 us/op
                 sumBigDecimals·p0.00:   882900.992 us/op
                 sumBigDecimals·p0.50:   885522.432 us/op
                 sumBigDecimals·p0.90:   887095.296 us/op
                 sumBigDecimals·p0.95:   887095.296 us/op
                 sumBigDecimals·p0.99:   887095.296 us/op
                 sumBigDecimals·p0.999:  887095.296 us/op
                 sumBigDecimals·p0.9999: 887095.296 us/op
                 sumBigDecimals·p1.00:   887095.296 us/op

Iteration  10: 885172.907 ±(99.9%) 1259.038 us/op
                 sumBigDecimals·p0.00:   883949.568 us/op
                 sumBigDecimals·p0.50:   884998.144 us/op
                 sumBigDecimals·p0.90:   886780.723 us/op
                 sumBigDecimals·p0.95:   887095.296 us/op
                 sumBigDecimals·p0.99:   887095.296 us/op
                 sumBigDecimals·p0.999:  887095.296 us/op
                 sumBigDecimals·p0.9999: 887095.296 us/op
                 sumBigDecimals·p1.00:   887095.296 us/op

Iteration  11: 889367.211 ±(99.9%) 2910.754 us/op
                 sumBigDecimals·p0.00:   884998.144 us/op
                 sumBigDecimals·p0.50:   889192.448 us/op
                 sumBigDecimals·p0.90:   893072.179 us/op
                 sumBigDecimals·p0.95:   893386.752 us/op
                 sumBigDecimals·p0.99:   893386.752 us/op
                 sumBigDecimals·p0.999:  893386.752 us/op
                 sumBigDecimals·p0.9999: 893386.752 us/op
                 sumBigDecimals·p1.00:   893386.752 us/op

Iteration  12: 886745.771 ±(99.9%) 3048.345 us/op
                 sumBigDecimals·p0.00:   883949.568 us/op
                 sumBigDecimals·p0.50:   886571.008 us/op
                 sumBigDecimals·p0.90:   891394.458 us/op
                 sumBigDecimals·p0.95:   892338.176 us/op
                 sumBigDecimals·p0.99:   892338.176 us/op
                 sumBigDecimals·p0.999:  892338.176 us/op
                 sumBigDecimals·p0.9999: 892338.176 us/op
                 sumBigDecimals·p1.00:   892338.176 us/op

Iteration  13: 885172.907 ±(99.9%) 2205.641 us/op
                 sumBigDecimals·p0.00:   882900.992 us/op
                 sumBigDecimals·p0.50:   884998.144 us/op
                 sumBigDecimals·p0.90:   887829.299 us/op
                 sumBigDecimals·p0.95:   888143.872 us/op
                 sumBigDecimals·p0.99:   888143.872 us/op
                 sumBigDecimals·p0.999:  888143.872 us/op
                 sumBigDecimals·p0.9999: 888143.872 us/op
                 sumBigDecimals·p1.00:   888143.872 us/op

Iteration  14: 884473.856 ±(99.9%) 2592.939 us/op
                 sumBigDecimals·p0.00:   881852.416 us/op
                 sumBigDecimals·p0.50:   883949.568 us/op
                 sumBigDecimals·p0.90:   887829.299 us/op
                 sumBigDecimals·p0.95:   888143.872 us/op
                 sumBigDecimals·p0.99:   888143.872 us/op
                 sumBigDecimals·p0.999:  888143.872 us/op
                 sumBigDecimals·p0.9999: 888143.872 us/op
                 sumBigDecimals·p1.00:   888143.872 us/op

Iteration  15: 884036.949 ±(99.9%) 2773.728 us/op
                 sumBigDecimals·p0.00:   880803.840 us/op
                 sumBigDecimals·p0.50:   883425.280 us/op
                 sumBigDecimals·p0.90:   887829.299 us/op
                 sumBigDecimals·p0.95:   888143.872 us/op
                 sumBigDecimals·p0.99:   888143.872 us/op
                 sumBigDecimals·p0.999:  888143.872 us/op
                 sumBigDecimals·p0.9999: 888143.872 us/op
                 sumBigDecimals·p1.00:   888143.872 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  N = 180
  mean = 886885.581 ±(99.9%) 805.083 us/op

  Histogram, us/op:
    [880000.000, 881250.000) = 3 
    [881250.000, 882500.000) = 6 
    [882500.000, 883750.000) = 13 
    [883750.000, 885000.000) = 45 
    [885000.000, 886250.000) = 25 
    [886250.000, 887500.000) = 27 
    [887500.000, 888750.000) = 16 
    [888750.000, 890000.000) = 13 
    [890000.000, 891250.000) = 6 
    [891250.000, 892500.000) = 15 
    [892500.000, 893750.000) = 9 
    [893750.000, 895000.000) = 1 
    [895000.000, 896250.000) = 0 
    [896250.000, 897500.000) = 0 
    [897500.000, 898750.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 880803.840 us/op
     p(50.0000) = 886046.720 us/op
     p(90.0000) = 892338.176 us/op
     p(95.0000) = 893386.752 us/op
     p(99.0000) = 895232.246 us/op
     p(99.9000) = 898629.632 us/op
     p(99.9900) = 898629.632 us/op
     p(99.9990) = 898629.632 us/op
     p(99.9999) = 898629.632 us/op
    p(100.0000) = 898629.632 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 78.98% complete, ETA 01:46:00
# Fork: 1 of 1
# Warmup Iteration   1: 296700.747 ±(99.9%) 45260.924 us/op
# Warmup Iteration   2: 232844.836 ±(99.9%) 474.950 us/op
# Warmup Iteration   3: 231133.556 ±(99.9%) 270.198 us/op
# Warmup Iteration   4: 234106.785 ±(99.9%) 192.618 us/op
# Warmup Iteration   5: 232527.824 ±(99.9%) 155.809 us/op
Iteration   1: 238370.036 ±(99.9%) 344.661 us/op
                 countUppercase·p0.00:   237502.464 us/op
                 countUppercase·p0.50:   238288.896 us/op
                 countUppercase·p0.90:   238996.685 us/op
                 countUppercase·p0.95:   239743.795 us/op
                 countUppercase·p0.99:   241172.480 us/op
                 countUppercase·p0.999:  241172.480 us/op
                 countUppercase·p0.9999: 241172.480 us/op
                 countUppercase·p1.00:   241172.480 us/op

Iteration   2: 239225.125 ±(99.9%) 1637.982 us/op
                 countUppercase·p0.00:   236453.888 us/op
                 countUppercase·p0.50:   238026.752 us/op
                 countUppercase·p0.90:   244344.422 us/op
                 countUppercase·p0.95:   245891.072 us/op
                 countUppercase·p0.99:   246677.504 us/op
                 countUppercase·p0.999:  246677.504 us/op
                 countUppercase·p0.9999: 246677.504 us/op
                 countUppercase·p1.00:   246677.504 us/op

Iteration   3: 237222.031 ±(99.9%) 267.975 us/op
                 countUppercase·p0.00:   236453.888 us/op
                 countUppercase·p0.50:   236978.176 us/op
                 countUppercase·p0.90:   237921.894 us/op
                 countUppercase·p0.95:   238498.611 us/op
                 countUppercase·p0.99:   238813.184 us/op
                 countUppercase·p0.999:  238813.184 us/op
                 countUppercase·p0.9999: 238813.184 us/op
                 countUppercase·p1.00:   238813.184 us/op

Iteration   4: 235996.660 ±(99.9%) 267.438 us/op
                 countUppercase·p0.00:   235405.312 us/op
                 countUppercase·p0.50:   235929.600 us/op
                 countUppercase·p0.90:   236453.888 us/op
                 countUppercase·p0.95:   237135.462 us/op
                 countUppercase·p0.99:   237502.464 us/op
                 countUppercase·p0.999:  237502.464 us/op
                 countUppercase·p0.9999: 237502.464 us/op
                 countUppercase·p1.00:   237502.464 us/op

Iteration   5: 235258.999 ±(99.9%) 1526.121 us/op
                 countUppercase·p0.00:   233832.448 us/op
                 countUppercase·p0.50:   234618.880 us/op
                 countUppercase·p0.90:   236401.459 us/op
                 countUppercase·p0.95:   239180.186 us/op
                 countUppercase·p0.99:   251920.384 us/op
                 countUppercase·p0.999:  251920.384 us/op
                 countUppercase·p0.9999: 251920.384 us/op
                 countUppercase·p1.00:   251920.384 us/op

Iteration   6: 238095.409 ±(99.9%) 155.310 us/op
                 countUppercase·p0.00:   237502.464 us/op
                 countUppercase·p0.50:   238026.752 us/op
                 countUppercase·p0.90:   238551.040 us/op
                 countUppercase·p0.95:   238551.040 us/op
                 countUppercase·p0.99:   238813.184 us/op
                 countUppercase·p0.999:  238813.184 us/op
                 countUppercase·p0.9999: 238813.184 us/op
                 countUppercase·p1.00:   238813.184 us/op

Iteration   7: 234728.615 ±(99.9%) 216.545 us/op
                 countUppercase·p0.00:   234094.592 us/op
                 countUppercase·p0.50:   234618.880 us/op
                 countUppercase·p0.90:   235300.454 us/op
                 countUppercase·p0.95:   235615.027 us/op
                 countUppercase·p0.99:   235929.600 us/op
                 countUppercase·p0.999:  235929.600 us/op
                 countUppercase·p0.9999: 235929.600 us/op
                 countUppercase·p1.00:   235929.600 us/op

Iteration   8: 234454.278 ±(99.9%) 141.505 us/op
                 countUppercase·p0.00:   234094.592 us/op
                 countUppercase·p0.50:   234356.736 us/op
                 countUppercase·p0.90:   234881.024 us/op
                 countUppercase·p0.95:   234881.024 us/op
                 countUppercase·p0.99:   235143.168 us/op
                 countUppercase·p0.999:  235143.168 us/op
                 countUppercase·p0.9999: 235143.168 us/op
                 countUppercase·p1.00:   235143.168 us/op

Iteration   9: 234015.339 ±(99.9%) 189.078 us/op
                 countUppercase·p0.00:   233570.304 us/op
                 countUppercase·p0.50:   233832.448 us/op
                 countUppercase·p0.90:   234356.736 us/op
                 countUppercase·p0.95:   234618.880 us/op
                 countUppercase·p0.99:   235405.312 us/op
                 countUppercase·p0.999:  235405.312 us/op
                 countUppercase·p0.9999: 235405.312 us/op
                 countUppercase·p1.00:   235405.312 us/op

Iteration  10: 233923.894 ±(99.9%) 339.318 us/op
                 countUppercase·p0.00:   233308.160 us/op
                 countUppercase·p0.50:   233832.448 us/op
                 countUppercase·p0.90:   234356.736 us/op
                 countUppercase·p0.95:   234356.736 us/op
                 countUppercase·p0.99:   237502.464 us/op
                 countUppercase·p0.999:  237502.464 us/op
                 countUppercase·p0.9999: 237502.464 us/op
                 countUppercase·p1.00:   237502.464 us/op

Iteration  11: 235222.421 ±(99.9%) 178.719 us/op
                 countUppercase·p0.00:   234618.880 us/op
                 countUppercase·p0.50:   235143.168 us/op
                 countUppercase·p0.90:   235667.456 us/op
                 countUppercase·p0.95:   235877.171 us/op
                 countUppercase·p0.99:   235929.600 us/op
                 countUppercase·p0.999:  235929.600 us/op
                 countUppercase·p0.9999: 235929.600 us/op
                 countUppercase·p1.00:   235929.600 us/op

Iteration  12: 232414.487 ±(99.9%) 195.809 us/op
                 countUppercase·p0.00:   231997.440 us/op
                 countUppercase·p0.50:   232259.584 us/op
                 countUppercase·p0.90:   232783.872 us/op
                 countUppercase·p0.95:   233242.624 us/op
                 countUppercase·p0.99:   233570.304 us/op
                 countUppercase·p0.999:  233570.304 us/op
                 countUppercase·p0.9999: 233570.304 us/op
                 countUppercase·p1.00:   233570.304 us/op

Iteration  13: 236142.973 ±(99.9%) 940.278 us/op
                 countUppercase·p0.00:   234618.880 us/op
                 countUppercase·p0.50:   235405.312 us/op
                 countUppercase·p0.90:   238970.470 us/op
                 countUppercase·p0.95:   241015.194 us/op
                 countUppercase·p0.99:   241172.480 us/op
                 countUppercase·p0.999:  241172.480 us/op
                 countUppercase·p0.9999: 241172.480 us/op
                 countUppercase·p1.00:   241172.480 us/op

Iteration  14: 234740.807 ±(99.9%) 216.801 us/op
                 countUppercase·p0.00:   234094.592 us/op
                 countUppercase·p0.50:   234618.880 us/op
                 countUppercase·p0.90:   235300.454 us/op
                 countUppercase·p0.95:   235667.456 us/op
                 countUppercase·p0.99:   235929.600 us/op
                 countUppercase·p0.999:  235929.600 us/op
                 countUppercase·p0.9999: 235929.600 us/op
                 countUppercase·p1.00:   235929.600 us/op

Iteration  15: 232194.048 ±(99.9%) 199.945 us/op
                 countUppercase·p0.00:   231735.296 us/op
                 countUppercase·p0.50:   231997.440 us/op
                 countUppercase·p0.90:   232521.728 us/op
                 countUppercase·p0.95:   232783.872 us/op
                 countUppercase·p0.99:   233832.448 us/op
                 countUppercase·p0.999:  233832.448 us/op
                 countUppercase·p0.9999: 233832.448 us/op
                 countUppercase·p1.00:   233832.448 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 644
  mean = 235442.761 ±(99.9%) 303.763 us/op

  Histogram, us/op:
    [230000.000, 232500.000) = 58 
    [232500.000, 235000.000) = 277 
    [235000.000, 237500.000) = 171 
    [237500.000, 240000.000) = 120 
    [240000.000, 242500.000) = 9 
    [242500.000, 245000.000) = 5 
    [245000.000, 247500.000) = 3 
    [247500.000, 250000.000) = 0 
    [250000.000, 252500.000) = 1 
    [252500.000, 255000.000) = 0 
    [255000.000, 257500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 231735.296 us/op
     p(50.0000) = 234881.024 us/op
     p(90.0000) = 238288.896 us/op
     p(95.0000) = 238747.648 us/op
     p(99.0000) = 243793.920 us/op
     p(99.9000) = 251920.384 us/op
     p(99.9900) = 251920.384 us/op
     p(99.9990) = 251920.384 us/op
     p(99.9999) = 251920.384 us/op
    p(100.0000) = 251920.384 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 79.71% complete, ETA 01:42:20
# Fork: 1 of 1
# Warmup Iteration   1: 2777677.824 ±(99.9%) 1029310.526 us/op
# Warmup Iteration   2: 2158388.838 ±(99.9%) 105042.113 us/op
# Warmup Iteration   3: 2166777.446 ±(99.9%) 124764.054 us/op
# Warmup Iteration   4: 2160066.560 ±(99.9%) 59341.723 us/op
# Warmup Iteration   5: 2236402.893 ±(99.9%) 107375.302 us/op
Iteration   1: 2141611.622 ±(99.9%) 66444.281 us/op
                 countUppercase·p0.00:   2116026.368 us/op
                 countUppercase·p0.50:   2143289.344 us/op
                 countUppercase·p0.90:   2164260.864 us/op
                 countUppercase·p0.95:   2164260.864 us/op
                 countUppercase·p0.99:   2164260.864 us/op
                 countUppercase·p0.999:  2164260.864 us/op
                 countUppercase·p0.9999: 2164260.864 us/op
                 countUppercase·p1.00:   2164260.864 us/op

Iteration   2: 2144967.066 ±(99.9%) 40938.303 us/op
                 countUppercase·p0.00:   2132803.584 us/op
                 countUppercase·p0.50:   2147483.648 us/op
                 countUppercase·p0.90:   2160066.560 us/op
                 countUppercase·p0.95:   2160066.560 us/op
                 countUppercase·p0.99:   2160066.560 us/op
                 countUppercase·p0.999:  2160066.560 us/op
                 countUppercase·p0.9999: 2160066.560 us/op
                 countUppercase·p1.00:   2160066.560 us/op

Iteration   3: 2126512.128 ±(99.9%) 63328.737 us/op
                 countUppercase·p0.00:   2113929.216 us/op
                 countUppercase·p0.50:   2116026.368 us/op
                 countUppercase·p0.90:   2147483.648 us/op
                 countUppercase·p0.95:   2147483.648 us/op
                 countUppercase·p0.99:   2147483.648 us/op
                 countUppercase·p0.999:  2147483.648 us/op
                 countUppercase·p0.9999: 2147483.648 us/op
                 countUppercase·p1.00:   2147483.648 us/op

Iteration   4: 2214592.512 ±(99.9%) 104044.066 us/op
                 countUppercase·p0.00:   2181038.080 us/op
                 countUppercase·p0.50:   2206203.904 us/op
                 countUppercase·p0.90:   2248146.944 us/op
                 countUppercase·p0.95:   2248146.944 us/op
                 countUppercase·p0.99:   2248146.944 us/op
                 countUppercase·p0.999:  2248146.944 us/op
                 countUppercase·p0.9999: 2248146.944 us/op
                 countUppercase·p1.00:   2248146.944 us/op

Iteration   5: 2172649.472 ±(99.9%) 25536.612 us/op
                 countUppercase·p0.00:   2164260.864 us/op
                 countUppercase·p0.50:   2172649.472 us/op
                 countUppercase·p0.90:   2181038.080 us/op
                 countUppercase·p0.95:   2181038.080 us/op
                 countUppercase·p0.99:   2181038.080 us/op
                 countUppercase·p0.999:  2181038.080 us/op
                 countUppercase·p0.9999: 2181038.080 us/op
                 countUppercase·p1.00:   2181038.080 us/op

Iteration   6: 2150000.230 ±(99.9%) 33000.575 us/op
                 countUppercase·p0.00:   2136997.888 us/op
                 countUppercase·p0.50:   2155872.256 us/op
                 countUppercase·p0.90:   2155872.256 us/op
                 countUppercase·p0.95:   2155872.256 us/op
                 countUppercase·p0.99:   2155872.256 us/op
                 countUppercase·p0.999:  2155872.256 us/op
                 countUppercase·p0.9999: 2155872.256 us/op
                 countUppercase·p1.00:   2155872.256 us/op

Iteration   7: 2167196.877 ±(99.9%) 75667.699 us/op
                 countUppercase·p0.00:   2145386.496 us/op
                 countUppercase·p0.50:   2164260.864 us/op
                 countUppercase·p0.90:   2189426.688 us/op
                 countUppercase·p0.95:   2189426.688 us/op
                 countUppercase·p0.99:   2189426.688 us/op
                 countUppercase·p0.999:  2189426.688 us/op
                 countUppercase·p0.9999: 2189426.688 us/op
                 countUppercase·p1.00:   2189426.688 us/op

Iteration   8: 2228853.146 ±(99.9%) 117911.692 us/op
                 countUppercase·p0.00:   2197815.296 us/op
                 countUppercase·p0.50:   2222981.120 us/op
                 countUppercase·p0.90:   2260729.856 us/op
                 countUppercase·p0.95:   2260729.856 us/op
                 countUppercase·p0.99:   2260729.856 us/op
                 countUppercase·p0.999:  2260729.856 us/op
                 countUppercase·p0.9999: 2260729.856 us/op
                 countUppercase·p1.00:   2260729.856 us/op

Iteration   9: 2155033.395 ±(99.9%) 110517.782 us/op
                 countUppercase·p0.00:   2124414.976 us/op
                 countUppercase·p0.50:   2164260.864 us/op
                 countUppercase·p0.90:   2193620.992 us/op
                 countUppercase·p0.95:   2193620.992 us/op
                 countUppercase·p0.99:   2193620.992 us/op
                 countUppercase·p0.999:  2193620.992 us/op
                 countUppercase·p0.9999: 2193620.992 us/op
                 countUppercase·p1.00:   2193620.992 us/op

Iteration  10: 2194459.853 ±(99.9%) 56412.219 us/op
                 countUppercase·p0.00:   2176843.776 us/op
                 countUppercase·p0.50:   2193620.992 us/op
                 countUppercase·p0.90:   2214592.512 us/op
                 countUppercase·p0.95:   2214592.512 us/op
                 countUppercase·p0.99:   2214592.512 us/op
                 countUppercase·p0.999:  2214592.512 us/op
                 countUppercase·p0.9999: 2214592.512 us/op
                 countUppercase·p1.00:   2214592.512 us/op

Iteration  11: 2163002.573 ±(99.9%) 60322.644 us/op
                 countUppercase·p0.00:   2141192.192 us/op
                 countUppercase·p0.50:   2172649.472 us/op
                 countUppercase·p0.90:   2176843.776 us/op
                 countUppercase·p0.95:   2176843.776 us/op
                 countUppercase·p0.99:   2176843.776 us/op
                 countUppercase·p0.999:  2176843.776 us/op
                 countUppercase·p0.9999: 2176843.776 us/op
                 countUppercase·p1.00:   2176843.776 us/op

Iteration  12: 2163422.003 ±(99.9%) 41805.235 us/op
                 countUppercase·p0.00:   2151677.952 us/op
                 countUppercase·p0.50:   2160066.560 us/op
                 countUppercase·p0.90:   2176843.776 us/op
                 countUppercase·p0.95:   2176843.776 us/op
                 countUppercase·p0.99:   2176843.776 us/op
                 countUppercase·p0.999:  2176843.776 us/op
                 countUppercase·p0.9999: 2176843.776 us/op
                 countUppercase·p1.00:   2176843.776 us/op

Iteration  13: 2144967.066 ±(99.9%) 33000.575 us/op
                 countUppercase·p0.00:   2134900.736 us/op
                 countUppercase·p0.50:   2141192.192 us/op
                 countUppercase·p0.90:   2155872.256 us/op
                 countUppercase·p0.95:   2155872.256 us/op
                 countUppercase·p0.99:   2155872.256 us/op
                 countUppercase·p0.999:  2155872.256 us/op
                 countUppercase·p0.9999: 2155872.256 us/op
                 countUppercase·p1.00:   2155872.256 us/op

Iteration  14: 2135320.166 ±(99.9%) 34450.772 us/op
                 countUppercase·p0.00:   2122317.824 us/op
                 countUppercase·p0.50:   2134900.736 us/op
                 countUppercase·p0.90:   2147483.648 us/op
                 countUppercase·p0.95:   2147483.648 us/op
                 countUppercase·p0.99:   2147483.648 us/op
                 countUppercase·p0.999:  2147483.648 us/op
                 countUppercase·p0.9999: 2147483.648 us/op
                 countUppercase·p1.00:   2147483.648 us/op

Iteration  15: 2155872.256 ±(99.9%) 59066.354 us/op
                 countUppercase·p0.00:   2136997.888 us/op
                 countUppercase·p0.50:   2160066.560 us/op
                 countUppercase·p0.90:   2176843.776 us/op
                 countUppercase·p0.95:   2176843.776 us/op
                 countUppercase·p0.99:   2176843.776 us/op
                 countUppercase·p0.999:  2176843.776 us/op
                 countUppercase·p0.9999: 2176843.776 us/op
                 countUppercase·p1.00:   2176843.776 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 75
  mean = 2163897.358 ±(99.9%) 12718.797 us/op

  Histogram, us/op:
    [2100000.000, 2112500.000) = 0 
    [2112500.000, 2125000.000) = 6 
    [2125000.000, 2137500.000) = 9 
    [2137500.000, 2150000.000) = 14 
    [2150000.000, 2162500.000) = 13 
    [2162500.000, 2175000.000) = 10 
    [2175000.000, 2187500.000) = 9 
    [2187500.000, 2200000.000) = 4 
    [2200000.000, 2212500.000) = 4 
    [2212500.000, 2225000.000) = 2 
    [2225000.000, 2237500.000) = 1 
    [2237500.000, 2250000.000) = 1 
    [2250000.000, 2262500.000) = 2 
    [2262500.000, 2275000.000) = 0 
    [2275000.000, 2287500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 2113929.216 us/op
     p(50.0000) = 2155872.256 us/op
     p(90.0000) = 2203687.322 us/op
     p(95.0000) = 2238080.614 us/op
     p(99.0000) = 2260729.856 us/op
     p(99.9000) = 2260729.856 us/op
     p(99.9900) = 2260729.856 us/op
     p(99.9990) = 2260729.856 us/op
     p(99.9999) = 2260729.856 us/op
    p(100.0000) = 2260729.856 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 80.43% complete, ETA 01:38:44
# Fork: 1 of 1
# Warmup Iteration   1: 1.200 ±(99.9%) 0.257 us/op
# Warmup Iteration   2: 0.744 ±(99.9%) 0.043 us/op
# Warmup Iteration   3: 0.725 ±(99.9%) 0.003 us/op
# Warmup Iteration   4: 0.726 ±(99.9%) 0.003 us/op
# Warmup Iteration   5: 0.727 ±(99.9%) 0.003 us/op
Iteration   1: 0.727 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   0.678 us/op
                 runFibonacci·p0.50:   0.708 us/op
                 runFibonacci·p0.90:   0.722 us/op
                 runFibonacci·p0.95:   0.725 us/op
                 runFibonacci·p0.99:   0.732 us/op
                 runFibonacci·p0.999:  6.303 us/op
                 runFibonacci·p0.9999: 14.839 us/op
                 runFibonacci·p1.00:   228.608 us/op

Iteration   2: 0.727 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   0.680 us/op
                 runFibonacci·p0.50:   0.708 us/op
                 runFibonacci·p0.90:   0.721 us/op
                 runFibonacci·p0.95:   0.724 us/op
                 runFibonacci·p0.99:   0.731 us/op
                 runFibonacci·p0.999:  6.655 us/op
                 runFibonacci·p0.9999: 18.471 us/op
                 runFibonacci·p1.00:   38.592 us/op

Iteration   3: 0.728 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   0.680 us/op
                 runFibonacci·p0.50:   0.708 us/op
                 runFibonacci·p0.90:   0.721 us/op
                 runFibonacci·p0.95:   0.724 us/op
                 runFibonacci·p0.99:   0.733 us/op
                 runFibonacci·p0.999:  6.578 us/op
                 runFibonacci·p0.9999: 22.122 us/op
                 runFibonacci·p1.00:   80.896 us/op

Iteration   4: 0.731 ±(99.9%) 0.005 us/op
                 runFibonacci·p0.00:   0.680 us/op
                 runFibonacci·p0.50:   0.708 us/op
                 runFibonacci·p0.90:   0.721 us/op
                 runFibonacci·p0.95:   0.724 us/op
                 runFibonacci·p0.99:   0.732 us/op
                 runFibonacci·p0.999:  7.089 us/op
                 runFibonacci·p0.9999: 26.196 us/op
                 runFibonacci·p1.00:   152.576 us/op

Iteration   5: 0.731 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   0.679 us/op
                 runFibonacci·p0.50:   0.708 us/op
                 runFibonacci·p0.90:   0.721 us/op
                 runFibonacci·p0.95:   0.724 us/op
                 runFibonacci·p0.99:   0.732 us/op
                 runFibonacci·p0.999:  6.770 us/op
                 runFibonacci·p0.9999: 26.986 us/op
                 runFibonacci·p1.00:   318.976 us/op

Iteration   6: 0.731 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   0.679 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.721 us/op
                 runFibonacci·p0.95:   0.724 us/op
                 runFibonacci·p0.99:   0.734 us/op
                 runFibonacci·p0.999:  7.184 us/op
                 runFibonacci·p0.9999: 26.220 us/op
                 runFibonacci·p1.00:   119.424 us/op

Iteration   7: 0.726 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   0.677 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.722 us/op
                 runFibonacci·p0.95:   0.725 us/op
                 runFibonacci·p0.99:   0.731 us/op
                 runFibonacci·p0.999:  6.016 us/op
                 runFibonacci·p0.9999: 14.078 us/op
                 runFibonacci·p1.00:   129.152 us/op

Iteration   8: 0.740 ±(99.9%) 0.039 us/op
                 runFibonacci·p0.00:   0.679 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.726 us/op
                 runFibonacci·p0.95:   0.730 us/op
                 runFibonacci·p0.99:   0.741 us/op
                 runFibonacci·p0.999:  6.557 us/op
                 runFibonacci·p0.9999: 16.450 us/op
                 runFibonacci·p1.00:   2691.072 us/op

Iteration   9: 0.739 ±(99.9%) 0.040 us/op
                 runFibonacci·p0.00:   0.679 us/op
                 runFibonacci·p0.50:   0.708 us/op
                 runFibonacci·p0.90:   0.722 us/op
                 runFibonacci·p0.95:   0.725 us/op
                 runFibonacci·p0.99:   0.733 us/op
                 runFibonacci·p0.999:  6.607 us/op
                 runFibonacci·p0.9999: 16.477 us/op
                 runFibonacci·p1.00:   2727.936 us/op

Iteration  10: 0.725 ±(99.9%) 0.002 us/op
                 runFibonacci·p0.00:   0.679 us/op
                 runFibonacci·p0.50:   0.708 us/op
                 runFibonacci·p0.90:   0.722 us/op
                 runFibonacci·p0.95:   0.725 us/op
                 runFibonacci·p0.99:   0.732 us/op
                 runFibonacci·p0.999:  5.697 us/op
                 runFibonacci·p0.9999: 14.640 us/op
                 runFibonacci·p1.00:   32.384 us/op

Iteration  11: 0.725 ±(99.9%) 0.002 us/op
                 runFibonacci·p0.00:   0.680 us/op
                 runFibonacci·p0.50:   0.708 us/op
                 runFibonacci·p0.90:   0.721 us/op
                 runFibonacci·p0.95:   0.724 us/op
                 runFibonacci·p0.99:   0.731 us/op
                 runFibonacci·p0.999:  5.661 us/op
                 runFibonacci·p0.9999: 13.585 us/op
                 runFibonacci·p1.00:   40.576 us/op

Iteration  12: 0.728 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   0.680 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.723 us/op
                 runFibonacci·p0.95:   0.726 us/op
                 runFibonacci·p0.99:   0.733 us/op
                 runFibonacci·p0.999:  6.446 us/op
                 runFibonacci·p0.9999: 16.767 us/op
                 runFibonacci·p1.00:   56.576 us/op

Iteration  13: 0.726 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   0.678 us/op
                 runFibonacci·p0.50:   0.708 us/op
                 runFibonacci·p0.90:   0.721 us/op
                 runFibonacci·p0.95:   0.724 us/op
                 runFibonacci·p0.99:   0.732 us/op
                 runFibonacci·p0.999:  6.695 us/op
                 runFibonacci·p0.9999: 18.565 us/op
                 runFibonacci·p1.00:   73.856 us/op

Iteration  14: 0.725 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   0.681 us/op
                 runFibonacci·p0.50:   0.708 us/op
                 runFibonacci·p0.90:   0.722 us/op
                 runFibonacci·p0.95:   0.725 us/op
                 runFibonacci·p0.99:   0.733 us/op
                 runFibonacci·p0.999:  5.678 us/op
                 runFibonacci·p0.9999: 13.458 us/op
                 runFibonacci·p1.00:   94.080 us/op

Iteration  15: 0.725 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   0.679 us/op
                 runFibonacci·p0.50:   0.709 us/op
                 runFibonacci·p0.90:   0.722 us/op
                 runFibonacci·p0.95:   0.725 us/op
                 runFibonacci·p0.99:   0.732 us/op
                 runFibonacci·p0.999:  5.842 us/op
                 runFibonacci·p0.9999: 14.256 us/op
                 runFibonacci·p1.00:   60.800 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 3404598
  mean =      0.729 ±(99.9%) 0.004 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 3404595 
    [ 250.000,  500.000) = 1 
    [ 500.000,  750.000) = 0 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 2 

  Percentiles, us/op:
      p(0.0000) =      0.677 us/op
     p(50.0000) =      0.709 us/op
     p(90.0000) =      0.722 us/op
     p(95.0000) =      0.725 us/op
     p(99.0000) =      0.733 us/op
     p(99.9000) =      6.448 us/op
     p(99.9900) =     18.417 us/op
     p(99.9990) =     49.105 us/op
     p(99.9999) =    282.413 us/op
    p(100.0000) =   2727.936 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 81.16% complete, ETA 01:35:03
# Fork: 1 of 1
# Warmup Iteration   1: 1.857 ±(99.9%) 0.127 us/op
# Warmup Iteration   2: 1.654 ±(99.9%) 0.002 us/op
# Warmup Iteration   3: 1.656 ±(99.9%) 0.003 us/op
# Warmup Iteration   4: 1.650 ±(99.9%) 0.003 us/op
# Warmup Iteration   5: 1.650 ±(99.9%) 0.002 us/op
Iteration   1: 1.652 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.660 us/op
                 runFibonacci·p0.999:  7.168 us/op
                 runFibonacci·p0.9999: 17.193 us/op
                 runFibonacci·p1.00:   215.296 us/op

Iteration   2: 1.653 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.660 us/op
                 runFibonacci·p0.999:  7.429 us/op
                 runFibonacci·p0.9999: 20.835 us/op
                 runFibonacci·p1.00:   221.440 us/op

Iteration   3: 1.652 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.660 us/op
                 runFibonacci·p0.999:  7.358 us/op
                 runFibonacci·p0.9999: 18.931 us/op
                 runFibonacci·p1.00:   142.080 us/op

Iteration   4: 1.654 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.660 us/op
                 runFibonacci·p0.999:  7.904 us/op
                 runFibonacci·p0.9999: 24.348 us/op
                 runFibonacci·p1.00:   136.704 us/op

Iteration   5: 1.654 ±(99.9%) 0.005 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.646 us/op
                 runFibonacci·p0.99:   1.656 us/op
                 runFibonacci·p0.999:  7.542 us/op
                 runFibonacci·p0.9999: 27.207 us/op
                 runFibonacci·p1.00:   368.640 us/op

Iteration   6: 1.653 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.660 us/op
                 runFibonacci·p0.999:  7.883 us/op
                 runFibonacci·p0.9999: 25.361 us/op
                 runFibonacci·p1.00:   127.872 us/op

Iteration   7: 1.651 ±(99.9%) 0.002 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.660 us/op
                 runFibonacci·p0.999:  7.392 us/op
                 runFibonacci·p0.9999: 15.456 us/op
                 runFibonacci·p1.00:   119.040 us/op

Iteration   8: 1.652 ±(99.9%) 0.002 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.650 us/op
                 runFibonacci·p0.99:   1.662 us/op
                 runFibonacci·p0.999:  7.686 us/op
                 runFibonacci·p0.9999: 18.227 us/op
                 runFibonacci·p1.00:   30.656 us/op

Iteration   9: 1.652 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.662 us/op
                 runFibonacci·p0.999:  7.250 us/op
                 runFibonacci·p0.9999: 16.818 us/op
                 runFibonacci·p1.00:   168.192 us/op

Iteration  10: 1.653 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.650 us/op
                 runFibonacci·p0.99:   1.662 us/op
                 runFibonacci·p0.999:  7.693 us/op
                 runFibonacci·p0.9999: 16.123 us/op
                 runFibonacci·p1.00:   159.744 us/op

Iteration  11: 1.655 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.650 us/op
                 runFibonacci·p0.99:   1.662 us/op
                 runFibonacci·p0.999:  7.817 us/op
                 runFibonacci·p0.9999: 20.276 us/op
                 runFibonacci·p1.00:   165.888 us/op

Iteration  12: 1.653 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.650 us/op
                 runFibonacci·p0.99:   1.662 us/op
                 runFibonacci·p0.999:  7.758 us/op
                 runFibonacci·p0.9999: 21.611 us/op
                 runFibonacci·p1.00:   185.600 us/op

Iteration  13: 1.651 ±(99.9%) 0.002 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.660 us/op
                 runFibonacci·p0.999:  7.205 us/op
                 runFibonacci·p0.9999: 19.140 us/op
                 runFibonacci·p1.00:   100.864 us/op

Iteration  14: 1.652 ±(99.9%) 0.002 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.660 us/op
                 runFibonacci·p0.999:  7.760 us/op
                 runFibonacci·p0.9999: 16.172 us/op
                 runFibonacci·p1.00:   83.328 us/op

Iteration  15: 1.650 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.606 us/op
                 runFibonacci·p0.50:   1.632 us/op
                 runFibonacci·p0.90:   1.644 us/op
                 runFibonacci·p0.95:   1.648 us/op
                 runFibonacci·p0.99:   1.656 us/op
                 runFibonacci·p0.999:  7.332 us/op
                 runFibonacci·p0.9999: 15.232 us/op
                 runFibonacci·p1.00:   119.168 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 5764137
  mean =      1.652 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 5763809 
    [ 25.000,  50.000) = 252 
    [ 50.000,  75.000) = 16 
    [ 75.000, 100.000) = 27 
    [100.000, 125.000) = 15 
    [125.000, 150.000) = 7 
    [150.000, 175.000) = 5 
    [175.000, 200.000) = 2 
    [200.000, 225.000) = 2 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 0 
    [275.000, 300.000) = 1 
    [300.000, 325.000) = 0 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      1.606 us/op
     p(50.0000) =      1.632 us/op
     p(90.0000) =      1.644 us/op
     p(95.0000) =      1.648 us/op
     p(99.0000) =      1.660 us/op
     p(99.9000) =      7.592 us/op
     p(99.9900) =     19.872 us/op
     p(99.9990) =     76.718 us/op
     p(99.9999) =    182.470 us/op
    p(100.0000) =    368.640 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 81.88% complete, ETA 01:31:23
# Fork: 1 of 1
# Warmup Iteration   1: 3.631 ±(99.9%) 0.410 us/op
# Warmup Iteration   2: 2.856 ±(99.9%) 0.007 us/op
# Warmup Iteration   3: 2.864 ±(99.9%) 0.041 us/op
# Warmup Iteration   4: 2.847 ±(99.9%) 0.007 us/op
# Warmup Iteration   5: 2.842 ±(99.9%) 0.005 us/op
Iteration   1: 2.844 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.844 us/op
                 runFibonacci·p0.999:  11.392 us/op
                 runFibonacci·p0.9999: 29.299 us/op
                 runFibonacci·p1.00:   205.568 us/op

Iteration   2: 2.845 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.848 us/op
                 runFibonacci·p0.999:  11.648 us/op
                 runFibonacci·p0.9999: 30.262 us/op
                 runFibonacci·p1.00:   219.136 us/op

Iteration   3: 2.859 ±(99.9%) 0.041 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.848 us/op
                 runFibonacci·p0.999:  11.986 us/op
                 runFibonacci·p0.9999: 30.138 us/op
                 runFibonacci·p1.00:   2723.840 us/op

Iteration   4: 2.851 ±(99.9%) 0.005 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.864 us/op
                 runFibonacci·p0.999:  12.149 us/op
                 runFibonacci·p0.9999: 31.323 us/op
                 runFibonacci·p1.00:   80.256 us/op

Iteration   5: 2.845 ±(99.9%) 0.005 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.828 us/op
                 runFibonacci·p0.99:   2.848 us/op
                 runFibonacci·p0.999:  11.889 us/op
                 runFibonacci·p0.9999: 28.603 us/op
                 runFibonacci·p1.00:   94.592 us/op

Iteration   6: 2.854 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.852 us/op
                 runFibonacci·p0.999:  12.802 us/op
                 runFibonacci·p0.9999: 40.052 us/op
                 runFibonacci·p1.00:   128.256 us/op

Iteration   7: 2.851 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.852 us/op
                 runFibonacci·p0.999:  12.340 us/op
                 runFibonacci·p0.9999: 37.553 us/op
                 runFibonacci·p1.00:   117.760 us/op

Iteration   8: 2.845 ±(99.9%) 0.005 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.852 us/op
                 runFibonacci·p0.999:  11.760 us/op
                 runFibonacci·p0.9999: 27.435 us/op
                 runFibonacci·p1.00:   101.760 us/op

Iteration   9: 2.843 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.852 us/op
                 runFibonacci·p0.999:  11.490 us/op
                 runFibonacci·p0.9999: 26.587 us/op
                 runFibonacci·p1.00:   80.512 us/op

Iteration  10: 2.845 ±(99.9%) 0.005 us/op
                 runFibonacci·p0.00:   2.776 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.848 us/op
                 runFibonacci·p0.999:  11.602 us/op
                 runFibonacci·p0.9999: 27.520 us/op
                 runFibonacci·p1.00:   183.040 us/op

Iteration  11: 2.850 ±(99.9%) 0.012 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.844 us/op
                 runFibonacci·p0.999:  11.633 us/op
                 runFibonacci·p0.9999: 27.572 us/op
                 runFibonacci·p1.00:   483.840 us/op

Iteration  12: 2.844 ±(99.9%) 0.005 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.848 us/op
                 runFibonacci·p0.999:  11.650 us/op
                 runFibonacci·p0.9999: 26.564 us/op
                 runFibonacci·p1.00:   152.576 us/op

Iteration  13: 2.846 ±(99.9%) 0.005 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.848 us/op
                 runFibonacci·p0.999:  11.808 us/op
                 runFibonacci·p0.9999: 26.099 us/op
                 runFibonacci·p1.00:   148.992 us/op

Iteration  14: 2.843 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.844 us/op
                 runFibonacci·p0.999:  11.264 us/op
                 runFibonacci·p0.9999: 26.342 us/op
                 runFibonacci·p1.00:   102.400 us/op

Iteration  15: 2.842 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   2.772 us/op
                 runFibonacci·p0.50:   2.808 us/op
                 runFibonacci·p0.90:   2.828 us/op
                 runFibonacci·p0.95:   2.832 us/op
                 runFibonacci·p0.99:   2.852 us/op
                 runFibonacci·p0.999:  11.312 us/op
                 runFibonacci·p0.9999: 25.882 us/op
                 runFibonacci·p1.00:   82.560 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 3328937
  mean =      2.847 ±(99.9%) 0.003 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 3328932 
    [ 250.000,  500.000) = 4 
    [ 500.000,  750.000) = 0 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      2.772 us/op
     p(50.0000) =      2.808 us/op
     p(90.0000) =      2.828 us/op
     p(95.0000) =      2.832 us/op
     p(99.0000) =      2.848 us/op
     p(99.9000) =     11.760 us/op
     p(99.9900) =     30.243 us/op
     p(99.9990) =     89.428 us/op
     p(99.9999) =    361.351 us/op
    p(100.0000) =   2723.840 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 82.61% complete, ETA 01:27:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.299 ±(99.9%) 0.164 us/op
# Warmup Iteration   2: 0.133 ±(99.9%) 0.041 us/op
# Warmup Iteration   3: 0.114 ±(99.9%) 0.002 us/op
# Warmup Iteration   4: 0.113 ±(99.9%) 0.001 us/op
# Warmup Iteration   5: 0.116 ±(99.9%) 0.001 us/op
Iteration   1: 0.115 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.102 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.105 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner1·p0.999:  2.707 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.671 us/op
                 findLastPrefixUsingScanner1·p1.00:   34.304 us/op

Iteration   2: 0.114 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.102 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.105 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.300 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.081 us/op
                 findLastPrefixUsingScanner1·p1.00:   33.792 us/op

Iteration   3: 0.115 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.102 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.105 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.523 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.576 us/op
                 findLastPrefixUsingScanner1·p1.00:   21.792 us/op

Iteration   4: 0.116 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.102 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.105 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner1·p0.999:  2.866 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.034 us/op
                 findLastPrefixUsingScanner1·p1.00:   81.408 us/op

Iteration   5: 0.115 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.102 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.105 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner1·p0.999:  2.769 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.788 us/op
                 findLastPrefixUsingScanner1·p1.00:   38.080 us/op

Iteration   6: 0.114 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.102 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.105 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.341 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.607 us/op
                 findLastPrefixUsingScanner1·p1.00:   43.520 us/op

Iteration   7: 0.115 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.102 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.105 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.445 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.548 us/op
                 findLastPrefixUsingScanner1·p1.00:   139.776 us/op

Iteration   8: 0.124 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.130 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.132 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.137 us/op
                 findLastPrefixUsingScanner1·p0.999:  2.741 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.230 us/op
                 findLastPrefixUsingScanner1·p1.00:   38.016 us/op

Iteration   9: 0.114 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.102 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.105 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner1·p0.999:  2.456 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.030 us/op
                 findLastPrefixUsingScanner1·p1.00:   26.592 us/op

Iteration  10: 0.115 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.102 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.105 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.120 us/op
                 findLastPrefixUsingScanner1·p0.999:  3.089 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.302 us/op
                 findLastPrefixUsingScanner1·p1.00:   36.672 us/op

Iteration  11: 0.114 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.102 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.105 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner1·p0.999:  2.402 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.343 us/op
                 findLastPrefixUsingScanner1·p1.00:   17.792 us/op

Iteration  12: 0.114 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.101 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.105 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.120 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.297 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.067 us/op
                 findLastPrefixUsingScanner1·p1.00:   35.840 us/op

Iteration  13: 0.125 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.127 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.127 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.138 us/op
                 findLastPrefixUsingScanner1·p0.999:  2.719 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.706 us/op
                 findLastPrefixUsingScanner1·p1.00:   60.992 us/op

Iteration  14: 0.115 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.102 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.105 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner1·p0.999:  2.643 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.190 us/op
                 findLastPrefixUsingScanner1·p1.00:   33.472 us/op

Iteration  15: 0.114 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.102 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.105 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.285 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.364 us/op
                 findLastPrefixUsingScanner1·p1.00:   33.472 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 3479728
  mean =      0.116 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  12.500) = 3479615 
    [ 12.500,  25.000) = 77 
    [ 25.000,  37.500) = 24 
    [ 37.500,  50.000) = 8 
    [ 50.000,  62.500) = 1 
    [ 62.500,  75.000) = 0 
    [ 75.000,  87.500) = 2 
    [ 87.500, 100.000) = 0 
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 0 
    [137.500, 150.000) = 1 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.101 us/op
     p(50.0000) =      0.106 us/op
     p(90.0000) =      0.117 us/op
     p(95.0000) =      0.124 us/op
     p(99.0000) =      0.131 us/op
     p(99.9000) =      0.583 us/op
     p(99.9900) =      8.480 us/op
     p(99.9990) =     25.485 us/op
     p(99.9999) =     69.749 us/op
    p(100.0000) =    139.776 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 83.33% complete, ETA 01:24:03
# Fork: 1 of 1
# Warmup Iteration   1: 1.389 ±(99.9%) 0.358 us/op
# Warmup Iteration   2: 0.760 ±(99.9%) 0.005 us/op
# Warmup Iteration   3: 0.774 ±(99.9%) 0.003 us/op
# Warmup Iteration   4: 0.775 ±(99.9%) 0.004 us/op
# Warmup Iteration   5: 0.801 ±(99.9%) 0.004 us/op
Iteration   1: 0.803 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.730 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.754 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.838 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.839 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.841 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.187 us/op
                 findLastPrefixUsingScanner1·p0.9999: 19.778 us/op
                 findLastPrefixUsingScanner1·p1.00:   145.920 us/op

Iteration   2: 0.823 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.756 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.779 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.861 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.861 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.864 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.201 us/op
                 findLastPrefixUsingScanner1·p0.9999: 16.488 us/op
                 findLastPrefixUsingScanner1·p1.00:   89.856 us/op

Iteration   3: 0.800 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.718 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.813 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.824 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.825 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.828 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.934 us/op
                 findLastPrefixUsingScanner1·p0.9999: 18.939 us/op
                 findLastPrefixUsingScanner1·p1.00:   94.464 us/op

Iteration   4: 0.799 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.718 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.812 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.824 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.824 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.829 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.298 us/op
                 findLastPrefixUsingScanner1·p0.9999: 19.475 us/op
                 findLastPrefixUsingScanner1·p1.00:   54.144 us/op

Iteration   5: 0.817 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.732 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.769 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.848 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.849 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.851 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.804 us/op
                 findLastPrefixUsingScanner1·p0.9999: 24.283 us/op
                 findLastPrefixUsingScanner1·p1.00:   78.720 us/op

Iteration   6: 0.783 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.747 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.768 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.771 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.772 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.776 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.599 us/op
                 findLastPrefixUsingScanner1·p0.9999: 20.387 us/op
                 findLastPrefixUsingScanner1·p1.00:   34.304 us/op

Iteration   7: 0.768 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.732 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.752 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.755 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.755 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.762 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.012 us/op
                 findLastPrefixUsingScanner1·p0.9999: 21.867 us/op
                 findLastPrefixUsingScanner1·p1.00:   88.320 us/op

Iteration   8: 0.778 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.705 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.728 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.812 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.812 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.819 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.129 us/op
                 findLastPrefixUsingScanner1·p0.9999: 18.137 us/op
                 findLastPrefixUsingScanner1·p1.00:   35.200 us/op

Iteration   9: 0.775 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.720 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.758 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.769 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.770 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.806 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.477 us/op
                 findLastPrefixUsingScanner1·p0.9999: 14.124 us/op
                 findLastPrefixUsingScanner1·p1.00:   128.384 us/op

Iteration  10: 0.776 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.705 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.728 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.812 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.812 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.820 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.912 us/op
                 findLastPrefixUsingScanner1·p0.9999: 16.149 us/op
                 findLastPrefixUsingScanner1·p1.00:   109.568 us/op

Iteration  11: 0.795 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.718 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.812 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.824 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.824 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.829 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.680 us/op
                 findLastPrefixUsingScanner1·p0.9999: 16.032 us/op
                 findLastPrefixUsingScanner1·p1.00:   49.280 us/op

Iteration  12: 0.797 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.718 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.813 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.824 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.824 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.828 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.793 us/op
                 findLastPrefixUsingScanner1·p0.9999: 16.374 us/op
                 findLastPrefixUsingScanner1·p1.00:   60.800 us/op

Iteration  13: 0.801 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.760 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.783 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.790 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.790 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.871 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.909 us/op
                 findLastPrefixUsingScanner1·p0.9999: 20.704 us/op
                 findLastPrefixUsingScanner1·p1.00:   85.248 us/op

Iteration  14: 0.761 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.719 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.741 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.744 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.815 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.827 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.980 us/op
                 findLastPrefixUsingScanner1·p0.9999: 18.896 us/op
                 findLastPrefixUsingScanner1·p1.00:   78.976 us/op

Iteration  15: 0.773 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.705 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.728 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.813 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.814 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.821 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.550 us/op
                 findLastPrefixUsingScanner1·p0.9999: 13.366 us/op
                 findLastPrefixUsingScanner1·p1.00:   68.608 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 3142785
  mean =      0.789 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  12.500) = 3142169 
    [ 12.500,  25.000) = 483 
    [ 25.000,  37.500) = 79 
    [ 37.500,  50.000) = 26 
    [ 50.000,  62.500) = 9 
    [ 62.500,  75.000) = 6 
    [ 75.000,  87.500) = 5 
    [ 87.500, 100.000) = 5 
    [100.000, 112.500) = 1 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 1 
    [137.500, 150.000) = 1 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.705 us/op
     p(50.0000) =      0.765 us/op
     p(90.0000) =      0.824 us/op
     p(95.0000) =      0.838 us/op
     p(99.0000) =      0.861 us/op
     p(99.9000) =      6.952 us/op
     p(99.9900) =     18.167 us/op
     p(99.9990) =     48.009 us/op
     p(99.9999) =    108.088 us/op
    p(100.0000) =    145.920 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 84.06% complete, ETA 01:20:23
# Fork: 1 of 1
# Warmup Iteration   1: 7.710 ±(99.9%) 0.191 us/op
# Warmup Iteration   2: 7.216 ±(99.9%) 0.019 us/op
# Warmup Iteration   3: 7.276 ±(99.9%) 0.005 us/op
# Warmup Iteration   4: 7.152 ±(99.9%) 0.004 us/op
# Warmup Iteration   5: 7.096 ±(99.9%) 0.007 us/op
Iteration   1: 7.126 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.000 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.056 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.064 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.072 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.352 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.188 us/op
                 findLastPrefixUsingScanner1·p0.9999: 38.896 us/op
                 findLastPrefixUsingScanner1·p1.00:   237.824 us/op

Iteration   2: 7.250 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.032 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.080 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.864 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.872 us/op
                 findLastPrefixUsingScanner1·p0.99:   9.856 us/op
                 findLastPrefixUsingScanner1·p0.999:  15.808 us/op
                 findLastPrefixUsingScanner1·p0.9999: 30.332 us/op
                 findLastPrefixUsingScanner1·p1.00:   277.504 us/op

Iteration   3: 7.139 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.016 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.056 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.072 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.080 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.312 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.069 us/op
                 findLastPrefixUsingScanner1·p0.9999: 54.697 us/op
                 findLastPrefixUsingScanner1·p1.00:   168.448 us/op

Iteration   4: 7.309 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.192 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.232 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.248 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.248 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.416 us/op
                 findLastPrefixUsingScanner1·p0.999:  16.125 us/op
                 findLastPrefixUsingScanner1·p0.9999: 46.245 us/op
                 findLastPrefixUsingScanner1·p1.00:   524.288 us/op

Iteration   5: 7.197 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   6.984 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.024 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.808 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.816 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.256 us/op
                 findLastPrefixUsingScanner1·p0.999:  15.904 us/op
                 findLastPrefixUsingScanner1·p0.9999: 32.937 us/op
                 findLastPrefixUsingScanner1·p1.00:   250.368 us/op

Iteration   6: 7.188 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.072 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.112 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.128 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.136 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.448 us/op
                 findLastPrefixUsingScanner1·p0.999:  16.355 us/op
                 findLastPrefixUsingScanner1·p0.9999: 33.258 us/op
                 findLastPrefixUsingScanner1·p1.00:   114.048 us/op

Iteration   7: 7.179 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   6.968 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.008 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.776 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.792 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.416 us/op
                 findLastPrefixUsingScanner1·p0.999:  16.358 us/op
                 findLastPrefixUsingScanner1·p0.9999: 35.209 us/op
                 findLastPrefixUsingScanner1·p1.00:   196.864 us/op

Iteration   8: 7.347 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.136 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.184 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.952 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.968 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.608 us/op
                 findLastPrefixUsingScanner1·p0.999:  16.746 us/op
                 findLastPrefixUsingScanner1·p0.9999: 35.823 us/op
                 findLastPrefixUsingScanner1·p1.00:   191.232 us/op

Iteration   9: 7.134 ±(99.9%) 0.013 us/op
                 findLastPrefixUsingScanner1·p0.00:   6.904 us/op
                 findLastPrefixUsingScanner1·p0.50:   6.952 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.728 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.744 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.624 us/op
                 findLastPrefixUsingScanner1·p0.999:  19.083 us/op
                 findLastPrefixUsingScanner1·p0.9999: 47.502 us/op
                 findLastPrefixUsingScanner1·p1.00:   479.744 us/op

Iteration  10: 7.159 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.040 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.080 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.096 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.104 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.416 us/op
                 findLastPrefixUsingScanner1·p0.999:  16.832 us/op
                 findLastPrefixUsingScanner1·p0.9999: 38.277 us/op
                 findLastPrefixUsingScanner1·p1.00:   120.576 us/op

Iteration  11: 7.174 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.048 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.088 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.104 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.144 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.448 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.036 us/op
                 findLastPrefixUsingScanner1·p0.9999: 39.441 us/op
                 findLastPrefixUsingScanner1·p1.00:   123.776 us/op

Iteration  12: 7.174 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   6.952 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.000 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.776 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.792 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.320 us/op
                 findLastPrefixUsingScanner1·p0.999:  16.520 us/op
                 findLastPrefixUsingScanner1·p0.9999: 35.976 us/op
                 findLastPrefixUsingScanner1·p1.00:   148.224 us/op

Iteration  13: 7.233 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.032 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.080 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.848 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.872 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.224 us/op
                 findLastPrefixUsingScanner1·p0.999:  16.240 us/op
                 findLastPrefixUsingScanner1·p0.9999: 36.634 us/op
                 findLastPrefixUsingScanner1·p1.00:   185.088 us/op

Iteration  14: 7.268 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.096 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.152 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.176 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.920 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.480 us/op
                 findLastPrefixUsingScanner1·p0.999:  16.576 us/op
                 findLastPrefixUsingScanner1·p0.9999: 34.731 us/op
                 findLastPrefixUsingScanner1·p1.00:   152.576 us/op

Iteration  15: 7.121 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner1·p0.00:   7.000 us/op
                 findLastPrefixUsingScanner1·p0.50:   7.032 us/op
                 findLastPrefixUsingScanner1·p0.90:   7.040 us/op
                 findLastPrefixUsingScanner1·p0.95:   7.048 us/op
                 findLastPrefixUsingScanner1·p0.99:   10.256 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.945 us/op
                 findLastPrefixUsingScanner1·p0.9999: 38.439 us/op
                 findLastPrefixUsingScanner1·p1.00:   129.408 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 4511604
  mean =      7.210 ±(99.9%) 0.002 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 4511399 
    [ 50.000, 100.000) = 153 
    [100.000, 150.000) = 37 
    [150.000, 200.000) = 10 
    [200.000, 250.000) = 1 
    [250.000, 300.000) = 2 
    [300.000, 350.000) = 0 
    [350.000, 400.000) = 0 
    [400.000, 450.000) = 0 
    [450.000, 500.000) = 1 
    [500.000, 550.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      6.904 us/op
     p(50.0000) =      7.088 us/op
     p(90.0000) =      7.240 us/op
     p(95.0000) =      7.824 us/op
     p(99.0000) =     10.384 us/op
     p(99.9000) =     16.608 us/op
     p(99.9900) =     36.672 us/op
     p(99.9990) =    104.787 us/op
     p(99.9999) =    243.950 us/op
    p(100.0000) =    524.288 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 84.78% complete, ETA 01:16:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.318 ±(99.9%) 0.161 us/op
# Warmup Iteration   2: 0.107 ±(99.9%) 0.004 us/op
# Warmup Iteration   3: 0.103 ±(99.9%) 0.002 us/op
# Warmup Iteration   4: 0.105 ±(99.9%) 0.001 us/op
# Warmup Iteration   5: 0.101 ±(99.9%) 0.001 us/op
Iteration   1: 0.104 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.098 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.105 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.105 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.113 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.226 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.170 us/op
                 findLastPrefixUsingScanner2·p1.00:   175.104 us/op

Iteration   2: 0.104 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.100 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.104 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.105 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.356 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.557 us/op
                 findLastPrefixUsingScanner2·p1.00:   86.912 us/op

Iteration   3: 0.103 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.105 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.105 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.113 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.232 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.574 us/op
                 findLastPrefixUsingScanner2·p1.00:   45.760 us/op

Iteration   4: 0.102 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.104 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.105 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.118 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.238 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.620 us/op
                 findLastPrefixUsingScanner2·p1.00:   29.088 us/op

Iteration   5: 0.103 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.104 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.105 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.223 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.070 us/op
                 findLastPrefixUsingScanner2·p1.00:   64.896 us/op

Iteration   6: 0.103 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.104 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.105 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.113 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.246 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.942 us/op
                 findLastPrefixUsingScanner2·p1.00:   145.152 us/op

Iteration   7: 0.103 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.105 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.111 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.113 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.194 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.188 us/op
                 findLastPrefixUsingScanner2·p1.00:   34.240 us/op

Iteration   8: 0.103 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.090 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.097 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.105 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.240 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.872 us/op
                 findLastPrefixUsingScanner2·p1.00:   21.696 us/op

Iteration   9: 0.102 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.095 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.104 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.105 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.211 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.605 us/op
                 findLastPrefixUsingScanner2·p1.00:   36.224 us/op

Iteration  10: 0.102 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.104 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.105 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.220 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.881 us/op
                 findLastPrefixUsingScanner2·p1.00:   22.272 us/op

Iteration  11: 0.102 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.095 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.104 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.105 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.105 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.279 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.472 us/op
                 findLastPrefixUsingScanner2·p1.00:   38.080 us/op

Iteration  12: 0.102 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.104 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.105 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.216 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.516 us/op
                 findLastPrefixUsingScanner2·p1.00:   24.608 us/op

Iteration  13: 0.102 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.097 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.104 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.105 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.203 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.973 us/op
                 findLastPrefixUsingScanner2·p1.00:   21.344 us/op

Iteration  14: 0.103 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.096 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.104 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.105 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.205 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.877 us/op
                 findLastPrefixUsingScanner2·p1.00:   49.664 us/op

Iteration  15: 0.102 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.095 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.104 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.105 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.216 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.674 us/op
                 findLastPrefixUsingScanner2·p1.00:   38.144 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 3956985
  mean =      0.103 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  12.500) = 3956880 
    [ 12.500,  25.000) = 79 
    [ 25.000,  37.500) = 17 
    [ 37.500,  50.000) = 4 
    [ 50.000,  62.500) = 0 
    [ 62.500,  75.000) = 1 
    [ 75.000,  87.500) = 2 
    [ 87.500, 100.000) = 0 
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 0 
    [137.500, 150.000) = 1 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 1 

  Percentiles, us/op:
      p(0.0000) =      0.088 us/op
     p(50.0000) =      0.096 us/op
     p(90.0000) =      0.105 us/op
     p(95.0000) =      0.105 us/op
     p(99.0000) =      0.112 us/op
     p(99.9000) =      0.226 us/op
     p(99.9900) =      7.920 us/op
     p(99.9990) =     20.654 us/op
     p(99.9999) =     76.745 us/op
    p(100.0000) =    175.104 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 85.50% complete, ETA 01:13:03
# Fork: 1 of 1
# Warmup Iteration   1: 1.059 ±(99.9%) 0.236 us/op
# Warmup Iteration   2: 0.694 ±(99.9%) 0.005 us/op
# Warmup Iteration   3: 0.695 ±(99.9%) 0.004 us/op
# Warmup Iteration   4: 0.681 ±(99.9%) 0.004 us/op
# Warmup Iteration   5: 0.697 ±(99.9%) 0.003 us/op
Iteration   1: 0.682 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.630 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.668 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.672 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.672 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.680 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.600 us/op
                 findLastPrefixUsingScanner2·p0.9999: 13.739 us/op
                 findLastPrefixUsingScanner2·p1.00:   192.768 us/op

Iteration   2: 0.721 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.671 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.706 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.708 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.710 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.715 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.743 us/op
                 findLastPrefixUsingScanner2·p0.9999: 16.073 us/op
                 findLastPrefixUsingScanner2·p1.00:   151.552 us/op

Iteration   3: 0.666 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.603 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.656 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.659 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.660 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.664 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.976 us/op
                 findLastPrefixUsingScanner2·p0.9999: 13.856 us/op
                 findLastPrefixUsingScanner2·p1.00:   29.376 us/op

Iteration   4: 0.680 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.616 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.668 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.670 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.671 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.676 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.367 us/op
                 findLastPrefixUsingScanner2·p0.9999: 16.701 us/op
                 findLastPrefixUsingScanner2·p1.00:   80.768 us/op

Iteration   5: 0.680 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.621 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.667 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.669 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.671 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.679 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.334 us/op
                 findLastPrefixUsingScanner2·p0.9999: 18.351 us/op
                 findLastPrefixUsingScanner2·p1.00:   96.128 us/op

Iteration   6: 0.692 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.626 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.681 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.683 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.685 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.692 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.240 us/op
                 findLastPrefixUsingScanner2·p0.9999: 13.840 us/op
                 findLastPrefixUsingScanner2·p1.00:   90.496 us/op

Iteration   7: 0.679 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.612 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.666 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.668 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.670 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.676 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.554 us/op
                 findLastPrefixUsingScanner2·p0.9999: 15.530 us/op
                 findLastPrefixUsingScanner2·p1.00:   104.064 us/op

Iteration   8: 0.670 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.610 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.657 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.660 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.662 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.668 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.927 us/op
                 findLastPrefixUsingScanner2·p0.9999: 14.405 us/op
                 findLastPrefixUsingScanner2·p1.00:   121.600 us/op

Iteration   9: 0.690 ±(99.9%) 0.036 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.618 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.668 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.671 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.672 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.677 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.917 us/op
                 findLastPrefixUsingScanner2·p0.9999: 13.901 us/op
                 findLastPrefixUsingScanner2·p1.00:   2699.264 us/op

Iteration  10: 0.719 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.667 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.705 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.708 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.710 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.719 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.367 us/op
                 findLastPrefixUsingScanner2·p0.9999: 15.206 us/op
                 findLastPrefixUsingScanner2·p1.00:   90.880 us/op

Iteration  11: 0.670 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.603 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.657 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.660 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.661 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.667 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.046 us/op
                 findLastPrefixUsingScanner2·p0.9999: 17.708 us/op
                 findLastPrefixUsingScanner2·p1.00:   110.720 us/op

Iteration  12: 0.698 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.640 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.681 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.693 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.695 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.705 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.870 us/op
                 findLastPrefixUsingScanner2·p0.9999: 20.098 us/op
                 findLastPrefixUsingScanner2·p1.00:   93.440 us/op

Iteration  13: 0.682 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.617 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.669 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.671 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.672 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.678 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.333 us/op
                 findLastPrefixUsingScanner2·p0.9999: 14.162 us/op
                 findLastPrefixUsingScanner2·p1.00:   106.112 us/op

Iteration  14: 0.708 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.660 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.694 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.696 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.698 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.703 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.389 us/op
                 findLastPrefixUsingScanner2·p0.9999: 15.315 us/op
                 findLastPrefixUsingScanner2·p1.00:   113.280 us/op

Iteration  15: 0.694 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.644 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.681 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.683 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.685 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.690 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.289 us/op
                 findLastPrefixUsingScanner2·p0.9999: 19.490 us/op
                 findLastPrefixUsingScanner2·p1.00:   91.904 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 3633463
  mean =      0.688 ±(99.9%) 0.003 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 3633462 
    [ 250.000,  500.000) = 0 
    [ 500.000,  750.000) = 0 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      0.603 us/op
     p(50.0000) =      0.669 us/op
     p(90.0000) =      0.696 us/op
     p(95.0000) =      0.707 us/op
     p(99.0000) =      0.711 us/op
     p(99.9000) =      5.280 us/op
     p(99.9900) =     14.986 us/op
     p(99.9990) =     60.173 us/op
     p(99.9999) =    132.578 us/op
    p(100.0000) =   2699.264 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 86.23% complete, ETA 01:09:23
# Fork: 1 of 1
# Warmup Iteration   1: 6.764 ±(99.9%) 0.304 us/op
# Warmup Iteration   2: 6.110 ±(99.9%) 0.025 us/op
# Warmup Iteration   3: 6.687 ±(99.9%) 0.007 us/op
# Warmup Iteration   4: 6.672 ±(99.9%) 0.008 us/op
# Warmup Iteration   5: 6.723 ±(99.9%) 0.008 us/op
Iteration   1: 6.688 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.576 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.624 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.632 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.640 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.046 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.492 us/op
                 findLastPrefixUsingScanner2·p0.9999: 47.653 us/op
                 findLastPrefixUsingScanner2·p1.00:   145.152 us/op

Iteration   2: 6.773 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.632 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.704 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.720 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.720 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.520 us/op
                 findLastPrefixUsingScanner2·p0.999:  16.930 us/op
                 findLastPrefixUsingScanner2·p0.9999: 49.844 us/op
                 findLastPrefixUsingScanner2·p1.00:   193.280 us/op

Iteration   3: 6.913 ±(99.9%) 0.011 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.768 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.848 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.856 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.864 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.456 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.440 us/op
                 findLastPrefixUsingScanner2·p0.9999: 36.106 us/op
                 findLastPrefixUsingScanner2·p1.00:   385.536 us/op

Iteration   4: 6.877 ±(99.9%) 0.011 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.728 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.808 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.816 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.816 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.235 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.847 us/op
                 findLastPrefixUsingScanner2·p0.9999: 57.507 us/op
                 findLastPrefixUsingScanner2·p1.00:   212.736 us/op

Iteration   5: 6.903 ±(99.9%) 0.065 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.744 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.808 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.824 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.824 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.664 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.079 us/op
                 findLastPrefixUsingScanner2·p0.9999: 64.357 us/op
                 findLastPrefixUsingScanner2·p1.00:   3543.040 us/op

Iteration   6: 6.711 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.560 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.648 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.656 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.656 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.456 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.323 us/op
                 findLastPrefixUsingScanner2·p0.9999: 41.260 us/op
                 findLastPrefixUsingScanner2·p1.00:   232.192 us/op

Iteration   7: 6.785 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.648 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.720 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.728 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.736 us/op
                 findLastPrefixUsingScanner2·p0.99:   8.592 us/op
                 findLastPrefixUsingScanner2·p0.999:  16.526 us/op
                 findLastPrefixUsingScanner2·p0.9999: 51.959 us/op
                 findLastPrefixUsingScanner2·p1.00:   177.408 us/op

Iteration   8: 6.789 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.664 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.728 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.736 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.736 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.232 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.072 us/op
                 findLastPrefixUsingScanner2·p0.9999: 45.421 us/op
                 findLastPrefixUsingScanner2·p1.00:   148.480 us/op

Iteration   9: 6.766 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.632 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.696 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.712 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.712 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.395 us/op
                 findLastPrefixUsingScanner2·p0.999:  16.954 us/op
                 findLastPrefixUsingScanner2·p0.9999: 51.896 us/op
                 findLastPrefixUsingScanner2·p1.00:   241.664 us/op

Iteration  10: 6.698 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.568 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.632 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.640 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.640 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.181 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.465 us/op
                 findLastPrefixUsingScanner2·p0.9999: 48.880 us/op
                 findLastPrefixUsingScanner2·p1.00:   158.976 us/op

Iteration  11: 6.827 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.704 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.760 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.776 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.776 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.276 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.458 us/op
                 findLastPrefixUsingScanner2·p0.9999: 47.377 us/op
                 findLastPrefixUsingScanner2·p1.00:   221.440 us/op

Iteration  12: 6.704 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.568 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.640 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.648 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.648 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.168 us/op
                 findLastPrefixUsingScanner2·p0.999:  16.806 us/op
                 findLastPrefixUsingScanner2·p0.9999: 43.298 us/op
                 findLastPrefixUsingScanner2·p1.00:   181.760 us/op

Iteration  13: 6.690 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.560 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.624 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.632 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.640 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.152 us/op
                 findLastPrefixUsingScanner2·p0.999:  16.762 us/op
                 findLastPrefixUsingScanner2·p0.9999: 40.029 us/op
                 findLastPrefixUsingScanner2·p1.00:   252.928 us/op

Iteration  14: 6.705 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.560 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.640 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.648 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.656 us/op
                 findLastPrefixUsingScanner2·p0.99:   8.576 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.354 us/op
                 findLastPrefixUsingScanner2·p0.9999: 44.367 us/op
                 findLastPrefixUsingScanner2·p1.00:   158.720 us/op

Iteration  15: 6.770 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner2·p0.00:   6.592 us/op
                 findLastPrefixUsingScanner2·p0.50:   6.704 us/op
                 findLastPrefixUsingScanner2·p0.90:   6.712 us/op
                 findLastPrefixUsingScanner2·p0.95:   6.712 us/op
                 findLastPrefixUsingScanner2·p0.99:   9.567 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.635 us/op
                 findLastPrefixUsingScanner2·p0.9999: 46.413 us/op
                 findLastPrefixUsingScanner2·p1.00:   140.288 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 2774803
  mean =      6.772 ±(99.9%) 0.005 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 2774800 
    [ 250.000,  500.000) = 2 
    [ 500.000,  750.000) = 0 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 
    [2750.000, 3000.000) = 0 
    [3000.000, 3250.000) = 0 
    [3250.000, 3500.000) = 0 
    [3500.000, 3750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      6.560 us/op
     p(50.0000) =      6.704 us/op
     p(90.0000) =      6.816 us/op
     p(95.0000) =      6.848 us/op
     p(99.0000) =      9.264 us/op
     p(99.9000) =     17.248 us/op
     p(99.9900) =     46.697 us/op
     p(99.9990) =    156.801 us/op
     p(99.9999) =    282.791 us/op
    p(100.0000) =   3543.040 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 86.95% complete, ETA 01:05:44
# Fork: 1 of 1
# Warmup Iteration   1: 14884.547 ±(99.9%) 432.871 us/op
# Warmup Iteration   2: 14445.313 ±(99.9%) 6.573 us/op
# Warmup Iteration   3: 14439.623 ±(99.9%) 4.541 us/op
# Warmup Iteration   4: 14434.233 ±(99.9%) 5.245 us/op
# Warmup Iteration   5: 14434.706 ±(99.9%) 5.571 us/op
Iteration   1: 14433.193 ±(99.9%) 3.920 us/op
                 runAlgorithm·p0.00:   14368.768 us/op
                 runAlgorithm·p0.50:   14434.304 us/op
                 runAlgorithm·p0.90:   14467.072 us/op
                 runAlgorithm·p0.95:   14483.456 us/op
                 runAlgorithm·p0.99:   14549.975 us/op
                 runAlgorithm·p0.999:  14614.528 us/op
                 runAlgorithm·p0.9999: 14614.528 us/op
                 runAlgorithm·p1.00:   14614.528 us/op

Iteration   2: 14444.793 ±(99.9%) 4.650 us/op
                 runAlgorithm·p0.00:   14368.768 us/op
                 runAlgorithm·p0.50:   14434.304 us/op
                 runAlgorithm·p0.90:   14483.456 us/op
                 runAlgorithm·p0.95:   14499.840 us/op
                 runAlgorithm·p0.99:   14581.760 us/op
                 runAlgorithm·p0.999:  14680.064 us/op
                 runAlgorithm·p0.9999: 14680.064 us/op
                 runAlgorithm·p1.00:   14680.064 us/op

Iteration   3: 14438.418 ±(99.9%) 4.416 us/op
                 runAlgorithm·p0.00:   14368.768 us/op
                 runAlgorithm·p0.50:   14434.304 us/op
                 runAlgorithm·p0.90:   14483.456 us/op
                 runAlgorithm·p0.95:   14499.840 us/op
                 runAlgorithm·p0.99:   14548.992 us/op
                 runAlgorithm·p0.999:  14614.528 us/op
                 runAlgorithm·p0.9999: 14614.528 us/op
                 runAlgorithm·p1.00:   14614.528 us/op

Iteration   4: 14439.529 ±(99.9%) 7.956 us/op
                 runAlgorithm·p0.00:   14368.768 us/op
                 runAlgorithm·p0.50:   14434.304 us/op
                 runAlgorithm·p0.90:   14483.456 us/op
                 runAlgorithm·p0.95:   14499.840 us/op
                 runAlgorithm·p0.99:   14630.912 us/op
                 runAlgorithm·p0.999:  15597.568 us/op
                 runAlgorithm·p0.9999: 15597.568 us/op
                 runAlgorithm·p1.00:   15597.568 us/op

Iteration   5: 14437.779 ±(99.9%) 7.292 us/op
                 runAlgorithm·p0.00:   14368.768 us/op
                 runAlgorithm·p0.50:   14434.304 us/op
                 runAlgorithm·p0.90:   14483.456 us/op
                 runAlgorithm·p0.95:   14499.840 us/op
                 runAlgorithm·p0.99:   14598.144 us/op
                 runAlgorithm·p0.999:  15630.336 us/op
                 runAlgorithm·p0.9999: 15630.336 us/op
                 runAlgorithm·p1.00:   15630.336 us/op

Iteration   6: 14431.798 ±(99.9%) 4.274 us/op
                 runAlgorithm·p0.00:   14385.152 us/op
                 runAlgorithm·p0.50:   14417.920 us/op
                 runAlgorithm·p0.90:   14467.072 us/op
                 runAlgorithm·p0.95:   14483.456 us/op
                 runAlgorithm·p0.99:   14549.975 us/op
                 runAlgorithm·p0.999:  14761.984 us/op
                 runAlgorithm·p0.9999: 14761.984 us/op
                 runAlgorithm·p1.00:   14761.984 us/op

Iteration   7: 14431.207 ±(99.9%) 4.186 us/op
                 runAlgorithm·p0.00:   14368.768 us/op
                 runAlgorithm·p0.50:   14417.920 us/op
                 runAlgorithm·p0.90:   14467.072 us/op
                 runAlgorithm·p0.95:   14483.456 us/op
                 runAlgorithm·p0.99:   14548.992 us/op
                 runAlgorithm·p0.999:  14745.600 us/op
                 runAlgorithm·p0.9999: 14745.600 us/op
                 runAlgorithm·p1.00:   14745.600 us/op

Iteration   8: 14433.689 ±(99.9%) 4.847 us/op
                 runAlgorithm·p0.00:   14368.768 us/op
                 runAlgorithm·p0.50:   14417.920 us/op
                 runAlgorithm·p0.90:   14467.072 us/op
                 runAlgorithm·p0.95:   14483.456 us/op
                 runAlgorithm·p0.99:   14599.127 us/op
                 runAlgorithm·p0.999:  14745.600 us/op
                 runAlgorithm·p0.9999: 14745.600 us/op
                 runAlgorithm·p1.00:   14745.600 us/op

Iteration   9: 14442.685 ±(99.9%) 7.363 us/op
                 runAlgorithm·p0.00:   14385.152 us/op
                 runAlgorithm·p0.50:   14434.304 us/op
                 runAlgorithm·p0.90:   14483.456 us/op
                 runAlgorithm·p0.95:   14516.224 us/op
                 runAlgorithm·p0.99:   14745.600 us/op
                 runAlgorithm·p0.999:  14909.440 us/op
                 runAlgorithm·p0.9999: 14909.440 us/op
                 runAlgorithm·p1.00:   14909.440 us/op

Iteration  10: 14431.774 ±(99.9%) 4.591 us/op
                 runAlgorithm·p0.00:   14368.768 us/op
                 runAlgorithm·p0.50:   14417.920 us/op
                 runAlgorithm·p0.90:   14467.072 us/op
                 runAlgorithm·p0.95:   14483.456 us/op
                 runAlgorithm·p0.99:   14582.743 us/op
                 runAlgorithm·p0.999:  14696.448 us/op
                 runAlgorithm·p0.9999: 14696.448 us/op
                 runAlgorithm·p1.00:   14696.448 us/op

Iteration  11: 14431.372 ±(99.9%) 4.528 us/op
                 runAlgorithm·p0.00:   14368.768 us/op
                 runAlgorithm·p0.50:   14417.920 us/op
                 runAlgorithm·p0.90:   14467.072 us/op
                 runAlgorithm·p0.95:   14483.456 us/op
                 runAlgorithm·p0.99:   14581.760 us/op
                 runAlgorithm·p0.999:  14712.832 us/op
                 runAlgorithm·p0.9999: 14712.832 us/op
                 runAlgorithm·p1.00:   14712.832 us/op

Iteration  12: 14430.900 ±(99.9%) 4.567 us/op
                 runAlgorithm·p0.00:   14368.768 us/op
                 runAlgorithm·p0.50:   14417.920 us/op
                 runAlgorithm·p0.90:   14467.072 us/op
                 runAlgorithm·p0.95:   14483.456 us/op
                 runAlgorithm·p0.99:   14566.359 us/op
                 runAlgorithm·p0.999:  14729.216 us/op
                 runAlgorithm·p0.9999: 14729.216 us/op
                 runAlgorithm·p1.00:   14729.216 us/op

Iteration  13: 14443.632 ±(99.9%) 8.726 us/op
                 runAlgorithm·p0.00:   14368.768 us/op
                 runAlgorithm·p0.50:   14434.304 us/op
                 runAlgorithm·p0.90:   14483.456 us/op
                 runAlgorithm·p0.95:   14499.840 us/op
                 runAlgorithm·p0.99:   14632.059 us/op
                 runAlgorithm·p0.999:  15826.944 us/op
                 runAlgorithm·p0.9999: 15826.944 us/op
                 runAlgorithm·p1.00:   15826.944 us/op

Iteration  14: 14431.443 ±(99.9%) 4.357 us/op
                 runAlgorithm·p0.00:   14352.384 us/op
                 runAlgorithm·p0.50:   14417.920 us/op
                 runAlgorithm·p0.90:   14467.072 us/op
                 runAlgorithm·p0.95:   14483.456 us/op
                 runAlgorithm·p0.99:   14566.359 us/op
                 runAlgorithm·p0.999:  14860.288 us/op
                 runAlgorithm·p0.9999: 14860.288 us/op
                 runAlgorithm·p1.00:   14860.288 us/op

Iteration  15: 14432.389 ±(99.9%) 4.249 us/op
                 runAlgorithm·p0.00:   14368.768 us/op
                 runAlgorithm·p0.50:   14417.920 us/op
                 runAlgorithm·p0.90:   14467.072 us/op
                 runAlgorithm·p0.95:   14499.840 us/op
                 runAlgorithm·p0.99:   14549.975 us/op
                 runAlgorithm·p0.999:  14680.064 us/op
                 runAlgorithm·p0.9999: 14680.064 us/op
                 runAlgorithm·p1.00:   14680.064 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  N = 10392
  mean =  14435.638 ±(99.9%) 1.435 us/op

  Histogram, us/op:
    [14000.000, 14125.000) = 0 
    [14125.000, 14250.000) = 0 
    [14250.000, 14375.000) = 41 
    [14375.000, 14500.000) = 10007 
    [14500.000, 14625.000) = 285 
    [14625.000, 14750.000) = 44 
    [14750.000, 14875.000) = 7 
    [14875.000, 15000.000) = 5 
    [15000.000, 15125.000) = 0 
    [15125.000, 15250.000) = 0 
    [15250.000, 15375.000) = 0 
    [15375.000, 15500.000) = 0 
    [15500.000, 15625.000) = 1 
    [15625.000, 15750.000) = 1 
    [15750.000, 15875.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  14352.384 us/op
     p(50.0000) =  14434.304 us/op
     p(90.0000) =  14467.072 us/op
     p(95.0000) =  14483.456 us/op
     p(99.0000) =  14581.760 us/op
     p(99.9000) =  14853.849 us/op
     p(99.9900) =  15819.217 us/op
     p(99.9990) =  15826.944 us/op
     p(99.9999) =  15826.944 us/op
    p(100.0000) =  15826.944 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 87.68% complete, ETA 01:02:04
# Fork: 1 of 1
# Warmup Iteration   1: 407.684 ±(99.9%) 9.483 us/op
# Warmup Iteration   2: 425.327 ±(99.9%) 0.943 us/op
# Warmup Iteration   3: 422.578 ±(99.9%) 1.006 us/op
# Warmup Iteration   4: 420.968 ±(99.9%) 0.633 us/op
# Warmup Iteration   5: 421.109 ±(99.9%) 0.541 us/op
Iteration   1: 420.830 ±(99.9%) 0.721 us/op
                 runAlgorithm·p0.00:   407.040 us/op
                 runAlgorithm·p0.50:   417.280 us/op
                 runAlgorithm·p0.90:   430.592 us/op
                 runAlgorithm·p0.95:   436.224 us/op
                 runAlgorithm·p0.99:   459.776 us/op
                 runAlgorithm·p0.999:  951.857 us/op
                 runAlgorithm·p0.9999: 1405.985 us/op
                 runAlgorithm·p1.00:   1597.440 us/op

Iteration   2: 420.693 ±(99.9%) 0.629 us/op
                 runAlgorithm·p0.00:   406.528 us/op
                 runAlgorithm·p0.50:   416.768 us/op
                 runAlgorithm·p0.90:   430.592 us/op
                 runAlgorithm·p0.95:   436.224 us/op
                 runAlgorithm·p0.99:   461.312 us/op
                 runAlgorithm·p0.999:  918.785 us/op
                 runAlgorithm·p0.9999: 1000.321 us/op
                 runAlgorithm·p1.00:   1026.048 us/op

Iteration   3: 419.797 ±(99.9%) 0.555 us/op
                 runAlgorithm·p0.00:   406.528 us/op
                 runAlgorithm·p0.50:   416.768 us/op
                 runAlgorithm·p0.90:   429.568 us/op
                 runAlgorithm·p0.95:   435.712 us/op
                 runAlgorithm·p0.99:   458.240 us/op
                 runAlgorithm·p0.999:  889.446 us/op
                 runAlgorithm·p0.9999: 1019.679 us/op
                 runAlgorithm·p1.00:   1037.312 us/op

Iteration   4: 420.101 ±(99.9%) 0.555 us/op
                 runAlgorithm·p0.00:   406.016 us/op
                 runAlgorithm·p0.50:   417.280 us/op
                 runAlgorithm·p0.90:   429.568 us/op
                 runAlgorithm·p0.95:   435.712 us/op
                 runAlgorithm·p0.99:   457.728 us/op
                 runAlgorithm·p0.999:  889.135 us/op
                 runAlgorithm·p0.9999: 1039.387 us/op
                 runAlgorithm·p1.00:   1060.864 us/op

Iteration   5: 420.396 ±(99.9%) 0.540 us/op
                 runAlgorithm·p0.00:   407.040 us/op
                 runAlgorithm·p0.50:   417.280 us/op
                 runAlgorithm·p0.90:   430.080 us/op
                 runAlgorithm·p0.95:   435.712 us/op
                 runAlgorithm·p0.99:   457.728 us/op
                 runAlgorithm·p0.999:  863.232 us/op
                 runAlgorithm·p0.9999: 1046.781 us/op
                 runAlgorithm·p1.00:   1101.824 us/op

Iteration   6: 419.916 ±(99.9%) 1.044 us/op
                 runAlgorithm·p0.00:   406.016 us/op
                 runAlgorithm·p0.50:   416.256 us/op
                 runAlgorithm·p0.90:   429.056 us/op
                 runAlgorithm·p0.95:   434.176 us/op
                 runAlgorithm·p0.99:   457.728 us/op
                 runAlgorithm·p0.999:  857.299 us/op
                 runAlgorithm·p0.9999: 2175.964 us/op
                 runAlgorithm·p1.00:   2744.320 us/op

Iteration   7: 421.201 ±(99.9%) 0.856 us/op
                 runAlgorithm·p0.00:   407.552 us/op
                 runAlgorithm·p0.50:   417.792 us/op
                 runAlgorithm·p0.90:   431.104 us/op
                 runAlgorithm·p0.95:   436.736 us/op
                 runAlgorithm·p0.99:   458.752 us/op
                 runAlgorithm·p0.999:  850.207 us/op
                 runAlgorithm·p0.9999: 1776.665 us/op
                 runAlgorithm·p1.00:   2086.912 us/op

Iteration   8: 422.073 ±(99.9%) 0.568 us/op
                 runAlgorithm·p0.00:   408.064 us/op
                 runAlgorithm·p0.50:   418.816 us/op
                 runAlgorithm·p0.90:   431.616 us/op
                 runAlgorithm·p0.95:   437.248 us/op
                 runAlgorithm·p0.99:   462.336 us/op
                 runAlgorithm·p0.999:  869.700 us/op
                 runAlgorithm·p0.9999: 1073.152 us/op
                 runAlgorithm·p1.00:   1128.448 us/op

Iteration   9: 420.352 ±(99.9%) 0.524 us/op
                 runAlgorithm·p0.00:   406.528 us/op
                 runAlgorithm·p0.50:   417.280 us/op
                 runAlgorithm·p0.90:   430.080 us/op
                 runAlgorithm·p0.95:   436.224 us/op
                 runAlgorithm·p0.99:   460.447 us/op
                 runAlgorithm·p0.999:  856.064 us/op
                 runAlgorithm·p0.9999: 937.670 us/op
                 runAlgorithm·p1.00:   958.464 us/op

Iteration  10: 420.353 ±(99.9%) 0.527 us/op
                 runAlgorithm·p0.00:   407.040 us/op
                 runAlgorithm·p0.50:   417.280 us/op
                 runAlgorithm·p0.90:   432.128 us/op
                 runAlgorithm·p0.95:   437.760 us/op
                 runAlgorithm·p0.99:   460.288 us/op
                 runAlgorithm·p0.999:  866.541 us/op
                 runAlgorithm·p0.9999: 945.790 us/op
                 runAlgorithm·p1.00:   1006.592 us/op

Iteration  11: 421.017 ±(99.9%) 0.559 us/op
                 runAlgorithm·p0.00:   406.528 us/op
                 runAlgorithm·p0.50:   417.792 us/op
                 runAlgorithm·p0.90:   431.514 us/op
                 runAlgorithm·p0.95:   437.248 us/op
                 runAlgorithm·p0.99:   461.824 us/op
                 runAlgorithm·p0.999:  879.616 us/op
                 runAlgorithm·p0.9999: 1083.911 us/op
                 runAlgorithm·p1.00:   1087.488 us/op

Iteration  12: 420.433 ±(99.9%) 0.545 us/op
                 runAlgorithm·p0.00:   407.552 us/op
                 runAlgorithm·p0.50:   417.280 us/op
                 runAlgorithm·p0.90:   430.080 us/op
                 runAlgorithm·p0.95:   436.224 us/op
                 runAlgorithm·p0.99:   460.800 us/op
                 runAlgorithm·p0.999:  865.522 us/op
                 runAlgorithm·p0.9999: 913.661 us/op
                 runAlgorithm·p1.00:   1007.616 us/op

Iteration  13: 420.829 ±(99.9%) 0.485 us/op
                 runAlgorithm·p0.00:   407.552 us/op
                 runAlgorithm·p0.50:   417.792 us/op
                 runAlgorithm·p0.90:   431.104 us/op
                 runAlgorithm·p0.95:   436.736 us/op
                 runAlgorithm·p0.99:   459.776 us/op
                 runAlgorithm·p0.999:  846.848 us/op
                 runAlgorithm·p0.9999: 893.569 us/op
                 runAlgorithm·p1.00:   950.272 us/op

Iteration  14: 421.610 ±(99.9%) 0.511 us/op
                 runAlgorithm·p0.00:   407.552 us/op
                 runAlgorithm·p0.50:   418.304 us/op
                 runAlgorithm·p0.90:   432.128 us/op
                 runAlgorithm·p0.95:   437.760 us/op
                 runAlgorithm·p0.99:   461.824 us/op
                 runAlgorithm·p0.999:  865.589 us/op
                 runAlgorithm·p0.9999: 900.139 us/op
                 runAlgorithm·p1.00:   963.584 us/op

Iteration  15: 421.483 ±(99.9%) 0.599 us/op
                 runAlgorithm·p0.00:   407.040 us/op
                 runAlgorithm·p0.50:   418.304 us/op
                 runAlgorithm·p0.90:   431.616 us/op
                 runAlgorithm·p0.95:   437.760 us/op
                 runAlgorithm·p0.99:   461.824 us/op
                 runAlgorithm·p0.999:  875.100 us/op
                 runAlgorithm·p0.9999: 1125.185 us/op
                 runAlgorithm·p1.00:   1263.616 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 356191
  mean =    420.738 ±(99.9%) 0.163 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 0 
    [ 250.000,  500.000) = 354927 
    [ 500.000,  750.000) = 319 
    [ 750.000, 1000.000) = 836 
    [1000.000, 1250.000) = 60 
    [1250.000, 1500.000) = 16 
    [1500.000, 1750.000) = 10 
    [1750.000, 2000.000) = 6 
    [2000.000, 2250.000) = 16 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    406.016 us/op
     p(50.0000) =    417.280 us/op
     p(90.0000) =    430.592 us/op
     p(95.0000) =    436.736 us/op
     p(99.0000) =    459.776 us/op
     p(99.9000) =    876.544 us/op
     p(99.9900) =   1376.548 us/op
     p(99.9990) =   2152.467 us/op
     p(99.9999) =   2744.320 us/op
    p(100.0000) =   2744.320 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 88.40% complete, ETA 00:58:25
# Fork: 1 of 1
# Warmup Iteration   1: 46219.188 ±(99.9%) 6214.447 us/op
# Warmup Iteration   2: 60981.648 ±(99.9%) 366.976 us/op
# Warmup Iteration   3: 60851.566 ±(99.9%) 184.434 us/op
# Warmup Iteration   4: 60951.277 ±(99.9%) 208.398 us/op
# Warmup Iteration   5: 60951.677 ±(99.9%) 229.279 us/op
Iteration   1: 60912.733 ±(99.9%) 190.123 us/op
                 runAlgorithm·p0.00:   60162.048 us/op
                 runAlgorithm·p0.50:   60489.728 us/op
                 runAlgorithm·p0.90:   61997.056 us/op
                 runAlgorithm·p0.95:   62108.467 us/op
                 runAlgorithm·p0.99:   62348.329 us/op
                 runAlgorithm·p0.999:  62521.344 us/op
                 runAlgorithm·p0.9999: 62521.344 us/op
                 runAlgorithm·p1.00:   62521.344 us/op

Iteration   2: 60974.854 ±(99.9%) 191.187 us/op
                 runAlgorithm·p0.00:   60162.048 us/op
                 runAlgorithm·p0.50:   60555.264 us/op
                 runAlgorithm·p0.90:   62029.824 us/op
                 runAlgorithm·p0.95:   62193.664 us/op
                 runAlgorithm·p0.99:   62544.282 us/op
                 runAlgorithm·p0.999:  62586.880 us/op
                 runAlgorithm·p0.9999: 62586.880 us/op
                 runAlgorithm·p1.00:   62586.880 us/op

Iteration   3: 60856.332 ±(99.9%) 179.570 us/op
                 runAlgorithm·p0.00:   60096.512 us/op
                 runAlgorithm·p0.50:   60424.192 us/op
                 runAlgorithm·p0.90:   61865.984 us/op
                 runAlgorithm·p0.95:   61931.520 us/op
                 runAlgorithm·p0.99:   62150.410 us/op
                 runAlgorithm·p0.999:  62193.664 us/op
                 runAlgorithm·p0.9999: 62193.664 us/op
                 runAlgorithm·p1.00:   62193.664 us/op

Iteration   4: 60843.622 ±(99.9%) 177.904 us/op
                 runAlgorithm·p0.00:   60162.048 us/op
                 runAlgorithm·p0.50:   60424.192 us/op
                 runAlgorithm·p0.90:   61800.448 us/op
                 runAlgorithm·p0.95:   61911.859 us/op
                 runAlgorithm·p0.99:   62019.338 us/op
                 runAlgorithm·p0.999:  62062.592 us/op
                 runAlgorithm·p0.9999: 62062.592 us/op
                 runAlgorithm·p1.00:   62062.592 us/op

Iteration   5: 60844.417 ±(99.9%) 178.845 us/op
                 runAlgorithm·p0.00:   60096.512 us/op
                 runAlgorithm·p0.50:   60424.192 us/op
                 runAlgorithm·p0.90:   61865.984 us/op
                 runAlgorithm·p0.95:   61931.520 us/op
                 runAlgorithm·p0.99:   62128.128 us/op
                 runAlgorithm·p0.999:  62128.128 us/op
                 runAlgorithm·p0.9999: 62128.128 us/op
                 runAlgorithm·p1.00:   62128.128 us/op

Iteration   6: 60992.037 ±(99.9%) 362.831 us/op
                 runAlgorithm·p0.00:   60096.512 us/op
                 runAlgorithm·p0.50:   60489.728 us/op
                 runAlgorithm·p0.90:   61931.520 us/op
                 runAlgorithm·p0.95:   62046.208 us/op
                 runAlgorithm·p0.99:   67970.662 us/op
                 runAlgorithm·p0.999:  76021.760 us/op
                 runAlgorithm·p0.9999: 76021.760 us/op
                 runAlgorithm·p1.00:   76021.760 us/op

Iteration   7: 60867.851 ±(99.9%) 191.442 us/op
                 runAlgorithm·p0.00:   60162.048 us/op
                 runAlgorithm·p0.50:   60424.192 us/op
                 runAlgorithm·p0.90:   61931.520 us/op
                 runAlgorithm·p0.95:   62128.128 us/op
                 runAlgorithm·p0.99:   62369.300 us/op
                 runAlgorithm·p0.999:  62455.808 us/op
                 runAlgorithm·p0.9999: 62455.808 us/op
                 runAlgorithm·p1.00:   62455.808 us/op

Iteration   8: 60863.879 ±(99.9%) 187.067 us/op
                 runAlgorithm·p0.00:   60030.976 us/op
                 runAlgorithm·p0.50:   60424.192 us/op
                 runAlgorithm·p0.90:   61931.520 us/op
                 runAlgorithm·p0.95:   62042.931 us/op
                 runAlgorithm·p0.99:   62347.018 us/op
                 runAlgorithm·p0.999:  62390.272 us/op
                 runAlgorithm·p0.9999: 62390.272 us/op
                 runAlgorithm·p1.00:   62390.272 us/op

Iteration   9: 60900.817 ±(99.9%) 180.653 us/op
                 runAlgorithm·p0.00:   60162.048 us/op
                 runAlgorithm·p0.50:   60489.728 us/op
                 runAlgorithm·p0.90:   61931.520 us/op
                 runAlgorithm·p0.95:   61997.056 us/op
                 runAlgorithm·p0.99:   62217.257 us/op
                 runAlgorithm·p0.999:  62390.272 us/op
                 runAlgorithm·p0.9999: 62390.272 us/op
                 runAlgorithm·p1.00:   62390.272 us/op

Iteration  10: 60854.744 ±(99.9%) 182.135 us/op
                 runAlgorithm·p0.00:   60162.048 us/op
                 runAlgorithm·p0.50:   60424.192 us/op
                 runAlgorithm·p0.90:   61865.984 us/op
                 runAlgorithm·p0.95:   61997.056 us/op
                 runAlgorithm·p0.99:   62128.128 us/op
                 runAlgorithm·p0.999:  62128.128 us/op
                 runAlgorithm·p0.9999: 62128.128 us/op
                 runAlgorithm·p1.00:   62128.128 us/op

Iteration  11: 60827.338 ±(99.9%) 183.329 us/op
                 runAlgorithm·p0.00:   60096.512 us/op
                 runAlgorithm·p0.50:   60424.192 us/op
                 runAlgorithm·p0.90:   61865.984 us/op
                 runAlgorithm·p0.95:   61977.395 us/op
                 runAlgorithm·p0.99:   62019.338 us/op
                 runAlgorithm·p0.999:  62062.592 us/op
                 runAlgorithm·p0.9999: 62062.592 us/op
                 runAlgorithm·p1.00:   62062.592 us/op

Iteration  12: 60956.073 ±(99.9%) 188.284 us/op
                 runAlgorithm·p0.00:   60162.048 us/op
                 runAlgorithm·p0.50:   60555.264 us/op
                 runAlgorithm·p0.90:   61997.056 us/op
                 runAlgorithm·p0.95:   62128.128 us/op
                 runAlgorithm·p0.99:   62436.147 us/op
                 runAlgorithm·p0.999:  62521.344 us/op
                 runAlgorithm·p0.9999: 62521.344 us/op
                 runAlgorithm·p1.00:   62521.344 us/op

Iteration  13: 60915.911 ±(99.9%) 181.522 us/op
                 runAlgorithm·p0.00:   60096.512 us/op
                 runAlgorithm·p0.50:   60555.264 us/op
                 runAlgorithm·p0.90:   61931.520 us/op
                 runAlgorithm·p0.95:   61997.056 us/op
                 runAlgorithm·p0.99:   62215.946 us/op
                 runAlgorithm·p0.999:  62259.200 us/op
                 runAlgorithm·p0.9999: 62259.200 us/op
                 runAlgorithm·p1.00:   62259.200 us/op

Iteration  14: 60897.640 ±(99.9%) 249.344 us/op
                 runAlgorithm·p0.00:   60162.048 us/op
                 runAlgorithm·p0.50:   60424.192 us/op
                 runAlgorithm·p0.90:   61865.984 us/op
                 runAlgorithm·p0.95:   61977.395 us/op
                 runAlgorithm·p0.99:   64534.610 us/op
                 runAlgorithm·p0.999:  69206.016 us/op
                 runAlgorithm·p0.9999: 69206.016 us/op
                 runAlgorithm·p1.00:   69206.016 us/op

Iteration  15: 60943.285 ±(99.9%) 198.823 us/op
                 runAlgorithm·p0.00:   60162.048 us/op
                 runAlgorithm·p0.50:   60489.728 us/op
                 runAlgorithm·p0.90:   62062.592 us/op
                 runAlgorithm·p0.95:   62177.280 us/op
                 runAlgorithm·p0.99:   62390.272 us/op
                 runAlgorithm·p0.999:  62390.272 us/op
                 runAlgorithm·p0.9999: 62390.272 us/op
                 runAlgorithm·p1.00:   62390.272 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 2471
  mean =  60896.656 ±(99.9%) 52.410 us/op

  Histogram, us/op:
    [60000.000, 61250.000) = 1637 
    [61250.000, 62500.000) = 827 
    [62500.000, 63750.000) = 5 
    [63750.000, 65000.000) = 0 
    [65000.000, 66250.000) = 0 
    [66250.000, 67500.000) = 0 
    [67500.000, 68750.000) = 0 
    [68750.000, 70000.000) = 1 
    [70000.000, 71250.000) = 0 
    [71250.000, 72500.000) = 0 
    [72500.000, 73750.000) = 0 
    [73750.000, 75000.000) = 0 
    [75000.000, 76250.000) = 1 
    [76250.000, 77500.000) = 0 
    [77500.000, 78750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  60030.976 us/op
     p(50.0000) =  60489.728 us/op
     p(90.0000) =  61931.520 us/op
     p(95.0000) =  61997.056 us/op
     p(99.0000) =  62259.200 us/op
     p(99.9000) =  66576.712 us/op
     p(99.9900) =  76021.760 us/op
     p(99.9990) =  76021.760 us/op
     p(99.9999) =  76021.760 us/op
    p(100.0000) =  76021.760 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 89.13% complete, ETA 00:54:45
# Fork: 1 of 1
# Warmup Iteration   1: 4103427.413 ±(99.9%) 3095346.379 us/op
# Warmup Iteration   2: 4181721.088 ±(99.9%) 2071692.785 us/op
# Warmup Iteration   3: 4325725.525 ±(99.9%) 2170158.228 us/op
# Warmup Iteration   4: 4327123.627 ±(99.9%) 2145738.084 us/op
# Warmup Iteration   5: 4331317.931 ±(99.9%) 2214229.112 us/op
Iteration   1: 4331317.931 ±(99.9%) 2220830.227 us/op
                 runAlgorithm·p0.00:   4248829.952 us/op
                 runAlgorithm·p0.50:   4273995.776 us/op
                 runAlgorithm·p0.90:   4471128.064 us/op
                 runAlgorithm·p0.95:   4471128.064 us/op
                 runAlgorithm·p0.99:   4471128.064 us/op
                 runAlgorithm·p0.999:  4471128.064 us/op
                 runAlgorithm·p0.9999: 4471128.064 us/op
                 runAlgorithm·p1.00:   4471128.064 us/op

Iteration   2: 4336910.336 ±(99.9%) 2258304.208 us/op
                 runAlgorithm·p0.00:   4257218.560 us/op
                 runAlgorithm·p0.50:   4273995.776 us/op
                 runAlgorithm·p0.90:   4479516.672 us/op
                 runAlgorithm·p0.95:   4479516.672 us/op
                 runAlgorithm·p0.99:   4479516.672 us/op
                 runAlgorithm·p0.999:  4479516.672 us/op
                 runAlgorithm·p0.9999: 4479516.672 us/op
                 runAlgorithm·p1.00:   4479516.672 us/op

Iteration   3: 4331317.931 ±(99.9%) 2214229.112 us/op
                 runAlgorithm·p0.00:   4253024.256 us/op
                 runAlgorithm·p0.50:   4269801.472 us/op
                 runAlgorithm·p0.90:   4471128.064 us/op
                 runAlgorithm·p0.95:   4471128.064 us/op
                 runAlgorithm·p0.99:   4471128.064 us/op
                 runAlgorithm·p0.999:  4471128.064 us/op
                 runAlgorithm·p0.9999: 4471128.064 us/op
                 runAlgorithm·p1.00:   4471128.064 us/op

Iteration   4: 4334114.133 ±(99.9%) 2302383.274 us/op
                 runAlgorithm·p0.00:   4253024.256 us/op
                 runAlgorithm·p0.50:   4269801.472 us/op
                 runAlgorithm·p0.90:   4479516.672 us/op
                 runAlgorithm·p0.95:   4479516.672 us/op
                 runAlgorithm·p0.99:   4479516.672 us/op
                 runAlgorithm·p0.999:  4479516.672 us/op
                 runAlgorithm·p0.9999: 4479516.672 us/op
                 runAlgorithm·p1.00:   4479516.672 us/op

Iteration   5: 4338308.437 ±(99.9%) 2366344.730 us/op
                 runAlgorithm·p0.00:   4257218.560 us/op
                 runAlgorithm·p0.50:   4269801.472 us/op
                 runAlgorithm·p0.90:   4487905.280 us/op
                 runAlgorithm·p0.95:   4487905.280 us/op
                 runAlgorithm·p0.99:   4487905.280 us/op
                 runAlgorithm·p0.999:  4487905.280 us/op
                 runAlgorithm·p0.9999: 4487905.280 us/op
                 runAlgorithm·p1.00:   4487905.280 us/op

Iteration   6: 4335512.235 ±(99.9%) 2145738.084 us/op
                 runAlgorithm·p0.00:   4261412.864 us/op
                 runAlgorithm·p0.50:   4273995.776 us/op
                 runAlgorithm·p0.90:   4471128.064 us/op
                 runAlgorithm·p0.95:   4471128.064 us/op
                 runAlgorithm·p0.99:   4471128.064 us/op
                 runAlgorithm·p0.999:  4471128.064 us/op
                 runAlgorithm·p0.9999: 4471128.064 us/op
                 runAlgorithm·p1.00:   4471128.064 us/op

Iteration   7: 4334114.133 ±(99.9%) 2170158.228 us/op
                 runAlgorithm·p0.00:   4257218.560 us/op
                 runAlgorithm·p0.50:   4273995.776 us/op
                 runAlgorithm·p0.90:   4471128.064 us/op
                 runAlgorithm·p0.95:   4471128.064 us/op
                 runAlgorithm·p0.99:   4471128.064 us/op
                 runAlgorithm·p0.999:  4471128.064 us/op
                 runAlgorithm·p0.9999: 4471128.064 us/op
                 runAlgorithm·p1.00:   4471128.064 us/op

Iteration   8: 4332716.032 ±(99.9%) 2189854.788 us/op
                 runAlgorithm·p0.00:   4257218.560 us/op
                 runAlgorithm·p0.50:   4269801.472 us/op
                 runAlgorithm·p0.90:   4471128.064 us/op
                 runAlgorithm·p0.95:   4471128.064 us/op
                 runAlgorithm·p0.99:   4471128.064 us/op
                 runAlgorithm·p0.999:  4471128.064 us/op
                 runAlgorithm·p0.9999: 4471128.064 us/op
                 runAlgorithm·p1.00:   4471128.064 us/op

Iteration   9: 4332716.032 ±(99.9%) 2322219.039 us/op
                 runAlgorithm·p0.00:   4253024.256 us/op
                 runAlgorithm·p0.50:   4265607.168 us/op
                 runAlgorithm·p0.90:   4479516.672 us/op
                 runAlgorithm·p0.95:   4479516.672 us/op
                 runAlgorithm·p0.99:   4479516.672 us/op
                 runAlgorithm·p0.999:  4479516.672 us/op
                 runAlgorithm·p0.9999: 4479516.672 us/op
                 runAlgorithm·p1.00:   4479516.672 us/op

Iteration  10: 4342502.741 ±(99.9%) 2302383.274 us/op
                 runAlgorithm·p0.00:   4261412.864 us/op
                 runAlgorithm·p0.50:   4278190.080 us/op
                 runAlgorithm·p0.90:   4487905.280 us/op
                 runAlgorithm·p0.95:   4487905.280 us/op
                 runAlgorithm·p0.99:   4487905.280 us/op
                 runAlgorithm·p0.999:  4487905.280 us/op
                 runAlgorithm·p0.9999: 4487905.280 us/op
                 runAlgorithm·p1.00:   4487905.280 us/op

Iteration  11: 4341104.640 ±(99.9%) 2195195.905 us/op
                 runAlgorithm·p0.00:   4261412.864 us/op
                 runAlgorithm·p0.50:   4282384.384 us/op
                 runAlgorithm·p0.90:   4479516.672 us/op
                 runAlgorithm·p0.95:   4479516.672 us/op
                 runAlgorithm·p0.99:   4479516.672 us/op
                 runAlgorithm·p0.999:  4479516.672 us/op
                 runAlgorithm·p0.9999: 4479516.672 us/op
                 runAlgorithm·p1.00:   4479516.672 us/op

Iteration  12: 4334114.133 ±(99.9%) 2302383.274 us/op
                 runAlgorithm·p0.00:   4253024.256 us/op
                 runAlgorithm·p0.50:   4269801.472 us/op
                 runAlgorithm·p0.90:   4479516.672 us/op
                 runAlgorithm·p0.95:   4479516.672 us/op
                 runAlgorithm·p0.99:   4479516.672 us/op
                 runAlgorithm·p0.999:  4479516.672 us/op
                 runAlgorithm·p0.9999: 4479516.672 us/op
                 runAlgorithm·p1.00:   4479516.672 us/op

Iteration  13: 4336910.336 ±(99.9%) 2390552.441 us/op
                 runAlgorithm·p0.00:   4253024.256 us/op
                 runAlgorithm·p0.50:   4269801.472 us/op
                 runAlgorithm·p0.90:   4487905.280 us/op
                 runAlgorithm·p0.95:   4487905.280 us/op
                 runAlgorithm·p0.99:   4487905.280 us/op
                 runAlgorithm·p0.999:  4487905.280 us/op
                 runAlgorithm·p0.9999: 4487905.280 us/op
                 runAlgorithm·p1.00:   4487905.280 us/op

Iteration  14: 4343900.843 ±(99.9%) 2283230.109 us/op
                 runAlgorithm·p0.00:   4261412.864 us/op
                 runAlgorithm·p0.50:   4282384.384 us/op
                 runAlgorithm·p0.90:   4487905.280 us/op
                 runAlgorithm·p0.95:   4487905.280 us/op
                 runAlgorithm·p0.99:   4487905.280 us/op
                 runAlgorithm·p0.999:  4487905.280 us/op
                 runAlgorithm·p0.9999: 4487905.280 us/op
                 runAlgorithm·p1.00:   4487905.280 us/op

Iteration  15: 4345298.944 ±(99.9%) 2264776.861 us/op
                 runAlgorithm·p0.00:   4261412.864 us/op
                 runAlgorithm·p0.50:   4286578.688 us/op
                 runAlgorithm·p0.90:   4487905.280 us/op
                 runAlgorithm·p0.95:   4487905.280 us/op
                 runAlgorithm·p0.99:   4487905.280 us/op
                 runAlgorithm·p0.999:  4487905.280 us/op
                 runAlgorithm·p0.9999: 4487905.280 us/op
                 runAlgorithm·p1.00:   4487905.280 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 45
  mean = 4336723.922 ±(99.9%) 53884.416 us/op

  Histogram, us/op:
    [4200000.000, 4225000.000) = 0 
    [4225000.000, 4250000.000) = 1 
    [4250000.000, 4275000.000) = 25 
    [4275000.000, 4300000.000) = 4 
    [4300000.000, 4325000.000) = 0 
    [4325000.000, 4350000.000) = 0 
    [4350000.000, 4375000.000) = 0 
    [4375000.000, 4400000.000) = 0 
    [4400000.000, 4425000.000) = 0 
    [4425000.000, 4450000.000) = 0 
    [4450000.000, 4475000.000) = 5 

  Percentiles, us/op:
      p(0.0000) = 4248829.952 us/op
     p(50.0000) = 4273995.776 us/op
     p(90.0000) = 4487905.280 us/op
     p(95.0000) = 4487905.280 us/op
     p(99.0000) = 4487905.280 us/op
     p(99.9000) = 4487905.280 us/op
     p(99.9900) = 4487905.280 us/op
     p(99.9990) = 4487905.280 us/op
     p(99.9999) = 4487905.280 us/op
    p(100.0000) = 4487905.280 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 89.85% complete, ETA 00:51:13
# Fork: 1 of 1
# Warmup Iteration   1: 3077.809 ±(99.9%) 126.331 us/op
# Warmup Iteration   2: 2996.174 ±(99.9%) 0.967 us/op
# Warmup Iteration   3: 2995.196 ±(99.9%) 1.016 us/op
# Warmup Iteration   4: 2995.577 ±(99.9%) 0.963 us/op
# Warmup Iteration   5: 2996.368 ±(99.9%) 1.253 us/op
Iteration   1: 2997.362 ±(99.9%) 1.154 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3014.656 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3031.040 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3072.000 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3218.002 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3252.224 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3252.224 us/op

Iteration   2: 2997.328 ±(99.9%) 1.277 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2973.696 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3014.656 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3031.040 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3055.616 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3359.990 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3489.792 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3489.792 us/op

Iteration   3: 2996.447 ±(99.9%) 1.065 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3010.560 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3031.040 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3055.616 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3186.688 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3268.608 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3268.608 us/op

Iteration   4: 2996.189 ±(99.9%) 1.011 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3010.560 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3026.944 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3051.520 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3185.312 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3272.704 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3272.704 us/op

Iteration   5: 2995.308 ±(99.9%) 0.877 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3010.560 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3026.944 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3050.004 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3130.634 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3162.112 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3162.112 us/op

Iteration   6: 2996.010 ±(99.9%) 0.911 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3010.560 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3026.944 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3047.424 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3144.303 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3162.112 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3162.112 us/op

Iteration   7: 2995.900 ±(99.9%) 0.978 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3014.656 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3031.040 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3051.520 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3163.357 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3215.360 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3215.360 us/op

Iteration   8: 2996.363 ±(99.9%) 1.118 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3014.656 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3026.944 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3058.237 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3198.943 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3321.856 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3321.856 us/op

Iteration   9: 2997.251 ±(99.9%) 1.476 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3014.656 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3031.040 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3063.808 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3470.602 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3543.040 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3543.040 us/op

Iteration  10: 2995.468 ±(99.9%) 0.963 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3010.560 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3026.944 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3051.520 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3151.159 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3330.048 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3330.048 us/op

Iteration  11: 2996.040 ±(99.9%) 0.997 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3010.560 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3026.944 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3047.424 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3178.316 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3416.064 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3416.064 us/op

Iteration  12: 2995.651 ±(99.9%) 0.937 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3010.560 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3026.944 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3051.520 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3153.920 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3166.208 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3166.208 us/op

Iteration  13: 2996.376 ±(99.9%) 1.189 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3010.560 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3026.944 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3051.520 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3212.575 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3493.888 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3493.888 us/op

Iteration  14: 2995.780 ±(99.9%) 1.096 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3010.560 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3026.944 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3059.712 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3192.074 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3330.048 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3330.048 us/op

Iteration  15: 2997.293 ±(99.9%) 1.585 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2969.600 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2994.176 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   3010.560 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   3031.040 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   3059.712 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3431.076 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3444.736 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3444.736 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  N = 50028
  mean =   2996.318 ±(99.9%) 0.291 us/op

  Histogram, us/op:
    [2900.000, 2950.000) = 0 
    [2950.000, 3000.000) = 38272 
    [3000.000, 3050.000) = 11111 
    [3050.000, 3100.000) = 415 
    [3100.000, 3150.000) = 134 
    [3150.000, 3200.000) = 51 
    [3200.000, 3250.000) = 15 
    [3250.000, 3300.000) = 6 
    [3300.000, 3350.000) = 6 
    [3350.000, 3400.000) = 5 
    [3400.000, 3450.000) = 8 
    [3450.000, 3500.000) = 4 
    [3500.000, 3550.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   2969.600 us/op
     p(50.0000) =   2994.176 us/op
     p(90.0000) =   3010.560 us/op
     p(95.0000) =   3026.944 us/op
     p(99.0000) =   3055.616 us/op
     p(99.9000) =   3190.665 us/op
     p(99.9900) =   3485.577 us/op
     p(99.9990) =   3543.040 us/op
     p(99.9999) =   3543.040 us/op
    p(100.0000) =   3543.040 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 90.58% complete, ETA 00:47:33
# Fork: 1 of 1
# Warmup Iteration   1: 32018.314 ±(99.9%) 814.876 us/op
# Warmup Iteration   2: 31504.268 ±(99.9%) 15.998 us/op
# Warmup Iteration   3: 31498.910 ±(99.9%) 10.536 us/op
# Warmup Iteration   4: 31496.643 ±(99.9%) 9.077 us/op
# Warmup Iteration   5: 31503.753 ±(99.9%) 10.462 us/op
Iteration   1: 31497.467 ±(99.9%) 13.346 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31588.352 us/op
                 extractOperationOutOfLoop·p0.99:   31931.761 us/op
                 extractOperationOutOfLoop·p0.999:  32178.176 us/op
                 extractOperationOutOfLoop·p0.9999: 32178.176 us/op
                 extractOperationOutOfLoop·p1.00:   32178.176 us/op

Iteration   2: 31500.765 ±(99.9%) 10.341 us/op
                 extractOperationOutOfLoop·p0.00:   31424.512 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31588.352 us/op
                 extractOperationOutOfLoop·p0.99:   31739.740 us/op
                 extractOperationOutOfLoop·p0.999:  31948.800 us/op
                 extractOperationOutOfLoop·p0.9999: 31948.800 us/op
                 extractOperationOutOfLoop·p1.00:   31948.800 us/op

Iteration   3: 31489.739 ±(99.9%) 10.693 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31588.352 us/op
                 extractOperationOutOfLoop·p0.99:   31680.430 us/op
                 extractOperationOutOfLoop·p0.999:  32014.336 us/op
                 extractOperationOutOfLoop·p0.9999: 32014.336 us/op
                 extractOperationOutOfLoop·p1.00:   32014.336 us/op

Iteration   4: 31474.385 ±(99.9%) 9.716 us/op
                 extractOperationOutOfLoop·p0.00:   31358.976 us/op
                 extractOperationOutOfLoop·p0.50:   31457.280 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31555.584 us/op
                 extractOperationOutOfLoop·p0.99:   31653.888 us/op
                 extractOperationOutOfLoop·p0.999:  31719.424 us/op
                 extractOperationOutOfLoop·p0.9999: 31719.424 us/op
                 extractOperationOutOfLoop·p1.00:   31719.424 us/op

Iteration   5: 31473.252 ±(99.9%) 9.534 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31457.280 us/op
                 extractOperationOutOfLoop·p0.90:   31522.816 us/op
                 extractOperationOutOfLoop·p0.95:   31555.584 us/op
                 extractOperationOutOfLoop·p0.99:   31653.888 us/op
                 extractOperationOutOfLoop·p0.999:  31784.960 us/op
                 extractOperationOutOfLoop·p0.9999: 31784.960 us/op
                 extractOperationOutOfLoop·p1.00:   31784.960 us/op

Iteration   6: 31472.427 ±(99.9%) 8.985 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31457.280 us/op
                 extractOperationOutOfLoop·p0.90:   31522.816 us/op
                 extractOperationOutOfLoop·p0.95:   31555.584 us/op
                 extractOperationOutOfLoop·p0.99:   31653.888 us/op
                 extractOperationOutOfLoop·p0.999:  31686.656 us/op
                 extractOperationOutOfLoop·p0.9999: 31686.656 us/op
                 extractOperationOutOfLoop·p1.00:   31686.656 us/op

Iteration   7: 31478.816 ±(99.9%) 10.860 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31457.280 us/op
                 extractOperationOutOfLoop·p0.90:   31522.816 us/op
                 extractOperationOutOfLoop·p0.95:   31555.584 us/op
                 extractOperationOutOfLoop·p0.99:   31647.662 us/op
                 extractOperationOutOfLoop·p0.999:  32079.872 us/op
                 extractOperationOutOfLoop·p0.9999: 32079.872 us/op
                 extractOperationOutOfLoop·p1.00:   32079.872 us/op

Iteration   8: 31472.840 ±(99.9%) 11.199 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31457.280 us/op
                 extractOperationOutOfLoop·p0.90:   31522.816 us/op
                 extractOperationOutOfLoop·p0.95:   31588.352 us/op
                 extractOperationOutOfLoop·p0.99:   31727.288 us/op
                 extractOperationOutOfLoop·p0.999:  31948.800 us/op
                 extractOperationOutOfLoop·p0.9999: 31948.800 us/op
                 extractOperationOutOfLoop·p1.00:   31948.800 us/op

Iteration   9: 31476.858 ±(99.9%) 10.400 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31457.280 us/op
                 extractOperationOutOfLoop·p0.90:   31522.816 us/op
                 extractOperationOutOfLoop·p0.95:   31555.584 us/op
                 extractOperationOutOfLoop·p0.99:   31706.972 us/op
                 extractOperationOutOfLoop·p0.999:  32014.336 us/op
                 extractOperationOutOfLoop·p0.9999: 32014.336 us/op
                 extractOperationOutOfLoop·p1.00:   32014.336 us/op

Iteration  10: 31482.732 ±(99.9%) 13.457 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31457.280 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31555.584 us/op
                 extractOperationOutOfLoop·p0.99:   31850.496 us/op
                 extractOperationOutOfLoop·p0.999:  31981.568 us/op
                 extractOperationOutOfLoop·p0.9999: 31981.568 us/op
                 extractOperationOutOfLoop·p1.00:   31981.568 us/op

Iteration  11: 31478.610 ±(99.9%) 9.854 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31457.280 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31588.352 us/op
                 extractOperationOutOfLoop·p0.99:   31647.662 us/op
                 extractOperationOutOfLoop·p0.999:  31686.656 us/op
                 extractOperationOutOfLoop·p0.9999: 31686.656 us/op
                 extractOperationOutOfLoop·p1.00:   31686.656 us/op

Iteration  12: 31479.950 ±(99.9%) 9.349 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31457.280 us/op
                 extractOperationOutOfLoop·p0.90:   31522.816 us/op
                 extractOperationOutOfLoop·p0.95:   31588.352 us/op
                 extractOperationOutOfLoop·p0.99:   31674.204 us/op
                 extractOperationOutOfLoop·p0.999:  31784.960 us/op
                 extractOperationOutOfLoop·p0.9999: 31784.960 us/op
                 extractOperationOutOfLoop·p1.00:   31784.960 us/op

Iteration  13: 31498.807 ±(99.9%) 68.227 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31457.280 us/op
                 extractOperationOutOfLoop·p0.90:   31522.816 us/op
                 extractOperationOutOfLoop·p0.95:   31555.584 us/op
                 extractOperationOutOfLoop·p0.99:   32005.161 us/op
                 extractOperationOutOfLoop·p0.999:  37683.200 us/op
                 extractOperationOutOfLoop·p0.9999: 37683.200 us/op
                 extractOperationOutOfLoop·p1.00:   37683.200 us/op

Iteration  14: 31484.999 ±(99.9%) 12.059 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31473.664 us/op
                 extractOperationOutOfLoop·p0.90:   31555.584 us/op
                 extractOperationOutOfLoop·p0.95:   31588.352 us/op
                 extractOperationOutOfLoop·p0.99:   31839.683 us/op
                 extractOperationOutOfLoop·p0.999:  31981.568 us/op
                 extractOperationOutOfLoop·p0.9999: 31981.568 us/op
                 extractOperationOutOfLoop·p1.00:   31981.568 us/op

Iteration  15: 31479.331 ±(99.9%) 8.713 us/op
                 extractOperationOutOfLoop·p0.00:   31391.744 us/op
                 extractOperationOutOfLoop·p0.50:   31490.048 us/op
                 extractOperationOutOfLoop·p0.90:   31522.816 us/op
                 extractOperationOutOfLoop·p0.95:   31555.584 us/op
                 extractOperationOutOfLoop·p0.99:   31614.894 us/op
                 extractOperationOutOfLoop·p0.999:  31850.496 us/op
                 extractOperationOutOfLoop·p0.9999: 31850.496 us/op
                 extractOperationOutOfLoop·p1.00:   31850.496 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  N = 4770
  mean =  31482.732 ±(99.9%) 5.239 us/op

  Histogram, us/op:
    [31000.000, 31500.000) = 3726 
    [31500.000, 32000.000) = 1036 
    [32000.000, 32500.000) = 6 
    [32500.000, 33000.000) = 0 
    [33000.000, 33500.000) = 1 
    [33500.000, 34000.000) = 0 
    [34000.000, 34500.000) = 0 
    [34500.000, 35000.000) = 0 
    [35000.000, 35500.000) = 0 
    [35500.000, 36000.000) = 0 
    [36000.000, 36500.000) = 0 
    [36500.000, 37000.000) = 0 
    [37000.000, 37500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  31358.976 us/op
     p(50.0000) =  31457.280 us/op
     p(90.0000) =  31522.816 us/op
     p(95.0000) =  31555.584 us/op
     p(99.0000) =  31663.391 us/op
     p(99.9000) =  32079.872 us/op
     p(99.9900) =  37683.200 us/op
     p(99.9990) =  37683.200 us/op
     p(99.9999) =  37683.200 us/op
    p(100.0000) =  37683.200 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 91.30% complete, ETA 00:43:53
# Fork: 1 of 1
# Warmup Iteration   1: 2907176.960 ±(99.9%) 14760199.769 us/op
# Warmup Iteration   2: 1760708.901 ±(99.9%) 3716.233 us/op
# Warmup Iteration   3: 1759210.935 ±(99.9%) 1785.220 us/op
# Warmup Iteration   4: 1759810.121 ±(99.9%) 1785.220 us/op
# Warmup Iteration   5: 1760109.714 ±(99.9%) 2304.710 us/op
Iteration   1: 1758611.749 ±(99.9%) 3716.233 us/op
                 reduceLoops·p0.00:   1755316.224 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1759510.528 us/op
                 reduceLoops·p0.95:   1759510.528 us/op
                 reduceLoops·p0.99:   1759510.528 us/op
                 reduceLoops·p0.999:  1759510.528 us/op
                 reduceLoops·p0.9999: 1759510.528 us/op
                 reduceLoops·p1.00:   1759510.528 us/op

Iteration   2: 1759510.528 ±(99.9%) 0.001 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1759510.528 us/op
                 reduceLoops·p0.95:   1759510.528 us/op
                 reduceLoops·p0.99:   1759510.528 us/op
                 reduceLoops·p0.999:  1759510.528 us/op
                 reduceLoops·p0.9999: 1759510.528 us/op
                 reduceLoops·p1.00:   1759510.528 us/op

Iteration   3: 1759510.528 ±(99.9%) 0.001 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1759510.528 us/op
                 reduceLoops·p0.95:   1759510.528 us/op
                 reduceLoops·p0.99:   1759510.528 us/op
                 reduceLoops·p0.999:  1759510.528 us/op
                 reduceLoops·p0.9999: 1759510.528 us/op
                 reduceLoops·p1.00:   1759510.528 us/op

Iteration   4: 1759510.528 ±(99.9%) 0.001 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1759510.528 us/op
                 reduceLoops·p0.95:   1759510.528 us/op
                 reduceLoops·p0.99:   1759510.528 us/op
                 reduceLoops·p0.999:  1759510.528 us/op
                 reduceLoops·p0.9999: 1759510.528 us/op
                 reduceLoops·p1.00:   1759510.528 us/op

Iteration   5: 1759210.935 ±(99.9%) 1785.220 us/op
                 reduceLoops·p0.00:   1757413.376 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1759510.528 us/op
                 reduceLoops·p0.95:   1759510.528 us/op
                 reduceLoops·p0.99:   1759510.528 us/op
                 reduceLoops·p0.999:  1759510.528 us/op
                 reduceLoops·p0.9999: 1759510.528 us/op
                 reduceLoops·p1.00:   1759510.528 us/op

Iteration   6: 1759210.935 ±(99.9%) 1785.220 us/op
                 reduceLoops·p0.00:   1757413.376 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1759510.528 us/op
                 reduceLoops·p0.95:   1759510.528 us/op
                 reduceLoops·p0.99:   1759510.528 us/op
                 reduceLoops·p0.999:  1759510.528 us/op
                 reduceLoops·p0.9999: 1759510.528 us/op
                 reduceLoops·p1.00:   1759510.528 us/op

Iteration   7: 1758911.342 ±(99.9%) 2304.710 us/op
                 reduceLoops·p0.00:   1757413.376 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1759510.528 us/op
                 reduceLoops·p0.95:   1759510.528 us/op
                 reduceLoops·p0.99:   1759510.528 us/op
                 reduceLoops·p0.999:  1759510.528 us/op
                 reduceLoops·p0.9999: 1759510.528 us/op
                 reduceLoops·p1.00:   1759510.528 us/op

Iteration   8: 1759210.935 ±(99.9%) 1785.220 us/op
                 reduceLoops·p0.00:   1757413.376 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1759510.528 us/op
                 reduceLoops·p0.95:   1759510.528 us/op
                 reduceLoops·p0.99:   1759510.528 us/op
                 reduceLoops·p0.999:  1759510.528 us/op
                 reduceLoops·p0.9999: 1759510.528 us/op
                 reduceLoops·p1.00:   1759510.528 us/op

Iteration   9: 1759810.121 ±(99.9%) 1785.220 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1761607.680 us/op
                 reduceLoops·p0.95:   1761607.680 us/op
                 reduceLoops·p0.99:   1761607.680 us/op
                 reduceLoops·p0.999:  1761607.680 us/op
                 reduceLoops·p0.9999: 1761607.680 us/op
                 reduceLoops·p1.00:   1761607.680 us/op

Iteration  10: 1759810.121 ±(99.9%) 1785.220 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1761607.680 us/op
                 reduceLoops·p0.95:   1761607.680 us/op
                 reduceLoops·p0.99:   1761607.680 us/op
                 reduceLoops·p0.999:  1761607.680 us/op
                 reduceLoops·p0.9999: 1761607.680 us/op
                 reduceLoops·p1.00:   1761607.680 us/op

Iteration  11: 1759810.121 ±(99.9%) 1785.220 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1761607.680 us/op
                 reduceLoops·p0.95:   1761607.680 us/op
                 reduceLoops·p0.99:   1761607.680 us/op
                 reduceLoops·p0.999:  1761607.680 us/op
                 reduceLoops·p0.9999: 1761607.680 us/op
                 reduceLoops·p1.00:   1761607.680 us/op

Iteration  12: 1760109.714 ±(99.9%) 4492.706 us/op
                 reduceLoops·p0.00:   1757413.376 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1763704.832 us/op
                 reduceLoops·p0.95:   1763704.832 us/op
                 reduceLoops·p0.99:   1763704.832 us/op
                 reduceLoops·p0.999:  1763704.832 us/op
                 reduceLoops·p0.9999: 1763704.832 us/op
                 reduceLoops·p1.00:   1763704.832 us/op

Iteration  13: 1759210.935 ±(99.9%) 1785.220 us/op
                 reduceLoops·p0.00:   1757413.376 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1759510.528 us/op
                 reduceLoops·p0.95:   1759510.528 us/op
                 reduceLoops·p0.99:   1759510.528 us/op
                 reduceLoops·p0.999:  1759510.528 us/op
                 reduceLoops·p0.9999: 1759510.528 us/op
                 reduceLoops·p1.00:   1759510.528 us/op

Iteration  14: 1759510.528 ±(99.9%) 0.001 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1759510.528 us/op
                 reduceLoops·p0.95:   1759510.528 us/op
                 reduceLoops·p0.99:   1759510.528 us/op
                 reduceLoops·p0.999:  1759510.528 us/op
                 reduceLoops·p0.9999: 1759510.528 us/op
                 reduceLoops·p1.00:   1759510.528 us/op

Iteration  15: 1759810.121 ±(99.9%) 1785.220 us/op
                 reduceLoops·p0.00:   1759510.528 us/op
                 reduceLoops·p0.50:   1759510.528 us/op
                 reduceLoops·p0.90:   1761607.680 us/op
                 reduceLoops·p0.95:   1761607.680 us/op
                 reduceLoops·p0.99:   1761607.680 us/op
                 reduceLoops·p0.999:  1761607.680 us/op
                 reduceLoops·p0.9999: 1761607.680 us/op
                 reduceLoops·p1.00:   1761607.680 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  N = 105
  mean = 1759450.609 ±(99.9%) 310.811 us/op

  Histogram, us/op:
    [1755000.000, 1755500.000) = 1 
    [1755500.000, 1756000.000) = 0 
    [1756000.000, 1756500.000) = 0 
    [1756500.000, 1757000.000) = 0 
    [1757000.000, 1757500.000) = 8 
    [1757500.000, 1758000.000) = 0 
    [1758000.000, 1758500.000) = 0 
    [1758500.000, 1759000.000) = 0 
    [1759000.000, 1759500.000) = 0 
    [1759500.000, 1760000.000) = 90 
    [1760000.000, 1760500.000) = 0 
    [1760500.000, 1761000.000) = 0 
    [1761000.000, 1761500.000) = 0 
    [1761500.000, 1762000.000) = 5 
    [1762000.000, 1762500.000) = 0 
    [1762500.000, 1763000.000) = 0 
    [1763000.000, 1763500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1755316.224 us/op
     p(50.0000) = 1759510.528 us/op
     p(90.0000) = 1759510.528 us/op
     p(95.0000) = 1761607.680 us/op
     p(99.0000) = 1763579.003 us/op
     p(99.9000) = 1763704.832 us/op
     p(99.9900) = 1763704.832 us/op
     p(99.9990) = 1763704.832 us/op
     p(99.9999) = 1763704.832 us/op
    p(100.0000) = 1763704.832 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 92.03% complete, ETA 00:40:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.272 ±(99.9%) 0.130 us/op
# Warmup Iteration   2: 0.064 ±(99.9%) 0.004 us/op
# Warmup Iteration   3: 0.063 ±(99.9%) 0.001 us/op
# Warmup Iteration   4: 0.064 ±(99.9%) 0.001 us/op
# Warmup Iteration   5: 0.064 ±(99.9%) 0.001 us/op
Iteration   1: 0.063 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.049 us/op
                 reduceSynchronizedBlocks·p0.50:   0.059 us/op
                 reduceSynchronizedBlocks·p0.90:   0.074 us/op
                 reduceSynchronizedBlocks·p0.95:   0.075 us/op
                 reduceSynchronizedBlocks·p0.99:   0.076 us/op
                 reduceSynchronizedBlocks·p0.999:  0.133 us/op
                 reduceSynchronizedBlocks·p0.9999: 5.275 us/op
                 reduceSynchronizedBlocks·p1.00:   113.024 us/op

Iteration   2: 0.065 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.049 us/op
                 reduceSynchronizedBlocks·p0.50:   0.061 us/op
                 reduceSynchronizedBlocks·p0.90:   0.074 us/op
                 reduceSynchronizedBlocks·p0.95:   0.075 us/op
                 reduceSynchronizedBlocks·p0.99:   0.076 us/op
                 reduceSynchronizedBlocks·p0.999:  0.133 us/op
                 reduceSynchronizedBlocks·p0.9999: 4.747 us/op
                 reduceSynchronizedBlocks·p1.00:   59.200 us/op

Iteration   3: 0.065 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.049 us/op
                 reduceSynchronizedBlocks·p0.50:   0.061 us/op
                 reduceSynchronizedBlocks·p0.90:   0.074 us/op
                 reduceSynchronizedBlocks·p0.95:   0.075 us/op
                 reduceSynchronizedBlocks·p0.99:   0.077 us/op
                 reduceSynchronizedBlocks·p0.999:  0.130 us/op
                 reduceSynchronizedBlocks·p0.9999: 6.506 us/op
                 reduceSynchronizedBlocks·p1.00:   36.928 us/op

Iteration   4: 0.065 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.049 us/op
                 reduceSynchronizedBlocks·p0.50:   0.061 us/op
                 reduceSynchronizedBlocks·p0.90:   0.074 us/op
                 reduceSynchronizedBlocks·p0.95:   0.075 us/op
                 reduceSynchronizedBlocks·p0.99:   0.076 us/op
                 reduceSynchronizedBlocks·p0.999:  0.127 us/op
                 reduceSynchronizedBlocks·p0.9999: 7.131 us/op
                 reduceSynchronizedBlocks·p1.00:   84.480 us/op

Iteration   5: 0.064 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.049 us/op
                 reduceSynchronizedBlocks·p0.50:   0.061 us/op
                 reduceSynchronizedBlocks·p0.90:   0.074 us/op
                 reduceSynchronizedBlocks·p0.95:   0.074 us/op
                 reduceSynchronizedBlocks·p0.99:   0.076 us/op
                 reduceSynchronizedBlocks·p0.999:  0.126 us/op
                 reduceSynchronizedBlocks·p0.9999: 4.642 us/op
                 reduceSynchronizedBlocks·p1.00:   34.560 us/op

Iteration   6: 0.063 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.060 us/op
                 reduceSynchronizedBlocks·p0.90:   0.074 us/op
                 reduceSynchronizedBlocks·p0.95:   0.075 us/op
                 reduceSynchronizedBlocks·p0.99:   0.076 us/op
                 reduceSynchronizedBlocks·p0.999:  0.127 us/op
                 reduceSynchronizedBlocks·p0.9999: 4.403 us/op
                 reduceSynchronizedBlocks·p1.00:   23.008 us/op

Iteration   7: 0.063 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.060 us/op
                 reduceSynchronizedBlocks·p0.90:   0.074 us/op
                 reduceSynchronizedBlocks·p0.95:   0.075 us/op
                 reduceSynchronizedBlocks·p0.99:   0.076 us/op
                 reduceSynchronizedBlocks·p0.999:  0.128 us/op
                 reduceSynchronizedBlocks·p0.9999: 7.211 us/op
                 reduceSynchronizedBlocks·p1.00:   25.088 us/op

Iteration   8: 0.064 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.060 us/op
                 reduceSynchronizedBlocks·p0.90:   0.074 us/op
                 reduceSynchronizedBlocks·p0.95:   0.075 us/op
                 reduceSynchronizedBlocks·p0.99:   0.076 us/op
                 reduceSynchronizedBlocks·p0.999:  0.128 us/op
                 reduceSynchronizedBlocks·p0.9999: 5.677 us/op
                 reduceSynchronizedBlocks·p1.00:   32.352 us/op

Iteration   9: 0.064 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.060 us/op
                 reduceSynchronizedBlocks·p0.90:   0.074 us/op
                 reduceSynchronizedBlocks·p0.95:   0.075 us/op
                 reduceSynchronizedBlocks·p0.99:   0.076 us/op
                 reduceSynchronizedBlocks·p0.999:  0.131 us/op
                 reduceSynchronizedBlocks·p0.9999: 6.013 us/op
                 reduceSynchronizedBlocks·p1.00:   41.280 us/op

Iteration  10: 0.063 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.060 us/op
                 reduceSynchronizedBlocks·p0.90:   0.074 us/op
                 reduceSynchronizedBlocks·p0.95:   0.075 us/op
                 reduceSynchronizedBlocks·p0.99:   0.076 us/op
                 reduceSynchronizedBlocks·p0.999:  0.125 us/op
                 reduceSynchronizedBlocks·p0.9999: 6.923 us/op
                 reduceSynchronizedBlocks·p1.00:   20.096 us/op

Iteration  11: 0.064 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.060 us/op
                 reduceSynchronizedBlocks·p0.90:   0.074 us/op
                 reduceSynchronizedBlocks·p0.95:   0.075 us/op
                 reduceSynchronizedBlocks·p0.99:   0.076 us/op
                 reduceSynchronizedBlocks·p0.999:  0.130 us/op
                 reduceSynchronizedBlocks·p0.9999: 6.444 us/op
                 reduceSynchronizedBlocks·p1.00:   33.088 us/op

Iteration  12: 0.064 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.060 us/op
                 reduceSynchronizedBlocks·p0.90:   0.074 us/op
                 reduceSynchronizedBlocks·p0.95:   0.075 us/op
                 reduceSynchronizedBlocks·p0.99:   0.078 us/op
                 reduceSynchronizedBlocks·p0.999:  0.128 us/op
                 reduceSynchronizedBlocks·p0.9999: 6.273 us/op
                 reduceSynchronizedBlocks·p1.00:   34.240 us/op

Iteration  13: 0.064 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.060 us/op
                 reduceSynchronizedBlocks·p0.90:   0.074 us/op
                 reduceSynchronizedBlocks·p0.95:   0.075 us/op
                 reduceSynchronizedBlocks·p0.99:   0.076 us/op
                 reduceSynchronizedBlocks·p0.999:  0.126 us/op
                 reduceSynchronizedBlocks·p0.9999: 4.737 us/op
                 reduceSynchronizedBlocks·p1.00:   25.344 us/op

Iteration  14: 0.062 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.060 us/op
                 reduceSynchronizedBlocks·p0.90:   0.073 us/op
                 reduceSynchronizedBlocks·p0.95:   0.074 us/op
                 reduceSynchronizedBlocks·p0.99:   0.076 us/op
                 reduceSynchronizedBlocks·p0.999:  0.118 us/op
                 reduceSynchronizedBlocks·p0.9999: 5.992 us/op
                 reduceSynchronizedBlocks·p1.00:   19.552 us/op

Iteration  15: 0.064 ±(99.9%) 0.001 us/op
                 reduceSynchronizedBlocks·p0.00:   0.048 us/op
                 reduceSynchronizedBlocks·p0.50:   0.060 us/op
                 reduceSynchronizedBlocks·p0.90:   0.074 us/op
                 reduceSynchronizedBlocks·p0.95:   0.075 us/op
                 reduceSynchronizedBlocks·p0.99:   0.080 us/op
                 reduceSynchronizedBlocks·p0.999:  0.124 us/op
                 reduceSynchronizedBlocks·p0.9999: 5.490 us/op
                 reduceSynchronizedBlocks·p1.00:   51.904 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  N = 5431426
  mean =      0.064 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  12.500) = 5431340 
    [ 12.500,  25.000) = 65 
    [ 25.000,  37.500) = 13 
    [ 37.500,  50.000) = 4 
    [ 50.000,  62.500) = 2 
    [ 62.500,  75.000) = 0 
    [ 75.000,  87.500) = 1 
    [ 87.500, 100.000) = 0 
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 1 
    [125.000, 137.500) = 0 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.048 us/op
     p(50.0000) =      0.060 us/op
     p(90.0000) =      0.074 us/op
     p(95.0000) =      0.075 us/op
     p(99.0000) =      0.076 us/op
     p(99.9000) =      0.128 us/op
     p(99.9900) =      5.743 us/op
     p(99.9990) =     17.978 us/op
     p(99.9999) =     44.907 us/op
    p(100.0000) =    113.024 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 92.75% complete, ETA 00:36:37
# Fork: 1 of 1
# Warmup Iteration   1: 10624.911 ±(99.9%) 407.584 us/op
# Warmup Iteration   2: 10574.840 ±(99.9%) 7.175 us/op
# Warmup Iteration   3: 10579.608 ±(99.9%) 3.653 us/op
# Warmup Iteration   4: 10574.476 ±(99.9%) 6.795 us/op
# Warmup Iteration   5: 10582.001 ±(99.9%) 3.094 us/op
Iteration   1: 10578.828 ±(99.9%) 4.536 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10600.448 us/op
                 reduceYoungObjects·p0.99:   10665.984 us/op
                 reduceYoungObjects·p0.999:  11059.200 us/op
                 reduceYoungObjects·p0.9999: 11059.200 us/op
                 reduceYoungObjects·p1.00:   11059.200 us/op

Iteration   2: 10573.505 ±(99.9%) 6.470 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10698.752 us/op
                 reduceYoungObjects·p0.999:  10846.208 us/op
                 reduceYoungObjects·p0.9999: 10846.208 us/op
                 reduceYoungObjects·p1.00:   10846.208 us/op

Iteration   3: 10582.001 ±(99.9%) 5.685 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10723.983 us/op
                 reduceYoungObjects·p0.999:  11141.120 us/op
                 reduceYoungObjects·p0.9999: 11141.120 us/op
                 reduceYoungObjects·p1.00:   11141.120 us/op

Iteration   4: 10588.438 ±(99.9%) 5.357 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10616.832 us/op
                 reduceYoungObjects·p0.95:   10633.216 us/op
                 reduceYoungObjects·p0.99:   10731.520 us/op
                 reduceYoungObjects·p0.999:  10846.208 us/op
                 reduceYoungObjects·p0.9999: 10846.208 us/op
                 reduceYoungObjects·p1.00:   10846.208 us/op

Iteration   5: 10582.001 ±(99.9%) 4.711 us/op
                 reduceYoungObjects·p0.00:   10207.232 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10715.136 us/op
                 reduceYoungObjects·p0.999:  11386.880 us/op
                 reduceYoungObjects·p0.9999: 11386.880 us/op
                 reduceYoungObjects·p1.00:   11386.880 us/op

Iteration   6: 10576.383 ±(99.9%) 5.060 us/op
                 reduceYoungObjects·p0.00:   10174.464 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10600.448 us/op
                 reduceYoungObjects·p0.95:   10600.448 us/op
                 reduceYoungObjects·p0.99:   10649.600 us/op
                 reduceYoungObjects·p0.999:  10829.824 us/op
                 reduceYoungObjects·p0.9999: 10829.824 us/op
                 reduceYoungObjects·p1.00:   10829.824 us/op

Iteration   7: 10591.111 ±(99.9%) 5.578 us/op
                 reduceYoungObjects·p0.00:   10371.072 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10616.832 us/op
                 reduceYoungObjects·p0.95:   10633.216 us/op
                 reduceYoungObjects·p0.99:   10715.136 us/op
                 reduceYoungObjects·p0.999:  11796.480 us/op
                 reduceYoungObjects·p0.9999: 11796.480 us/op
                 reduceYoungObjects·p1.00:   11796.480 us/op

Iteration   8: 10587.657 ±(99.9%) 7.140 us/op
                 reduceYoungObjects·p0.00:   10190.848 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10616.832 us/op
                 reduceYoungObjects·p0.95:   10633.216 us/op
                 reduceYoungObjects·p0.99:   10731.520 us/op
                 reduceYoungObjects·p0.999:  11911.168 us/op
                 reduceYoungObjects·p0.9999: 11911.168 us/op
                 reduceYoungObjects·p1.00:   11911.168 us/op

Iteration   9: 10588.715 ±(99.9%) 5.132 us/op
                 reduceYoungObjects·p0.00:   10207.232 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10616.832 us/op
                 reduceYoungObjects·p0.95:   10633.216 us/op
                 reduceYoungObjects·p0.99:   10715.136 us/op
                 reduceYoungObjects·p0.999:  11173.888 us/op
                 reduceYoungObjects·p0.9999: 11173.888 us/op
                 reduceYoungObjects·p1.00:   11173.888 us/op

Iteration  10: 10584.081 ±(99.9%) 4.661 us/op
                 reduceYoungObjects·p0.00:   10207.232 us/op
                 reduceYoungObjects·p0.50:   10584.064 us/op
                 reduceYoungObjects·p0.90:   10616.832 us/op
                 reduceYoungObjects·p0.95:   10616.832 us/op
                 reduceYoungObjects·p0.99:   10715.136 us/op
                 reduceYoungObjects·p0.999:  11075.584 us/op
                 reduceYoungObjects·p0.9999: 11075.584 us/op
                 reduceYoungObjects·p1.00:   11075.584 us/op

Iteration  11: 10828.351 ±(99.9%) 3.615 us/op
                 reduceYoungObjects·p0.00:   10469.376 us/op
                 reduceYoungObjects·p0.50:   10829.824 us/op
                 reduceYoungObjects·p0.90:   10846.208 us/op
                 reduceYoungObjects·p0.95:   10862.592 us/op
                 reduceYoungObjects·p0.99:   10944.512 us/op
                 reduceYoungObjects·p0.999:  11059.200 us/op
                 reduceYoungObjects·p0.9999: 11059.200 us/op
                 reduceYoungObjects·p1.00:   11059.200 us/op

Iteration  12: 10823.015 ±(99.9%) 3.311 us/op
                 reduceYoungObjects·p0.00:   10502.144 us/op
                 reduceYoungObjects·p0.50:   10813.440 us/op
                 reduceYoungObjects·p0.90:   10846.208 us/op
                 reduceYoungObjects·p0.95:   10846.208 us/op
                 reduceYoungObjects·p0.99:   10928.128 us/op
                 reduceYoungObjects·p0.999:  11108.352 us/op
                 reduceYoungObjects·p0.9999: 11108.352 us/op
                 reduceYoungObjects·p1.00:   11108.352 us/op

Iteration  13: 10812.537 ±(99.9%) 8.128 us/op
                 reduceYoungObjects·p0.00:   10436.608 us/op
                 reduceYoungObjects·p0.50:   10813.440 us/op
                 reduceYoungObjects·p0.90:   10846.208 us/op
                 reduceYoungObjects·p0.95:   10862.592 us/op
                 reduceYoungObjects·p0.99:   10944.512 us/op
                 reduceYoungObjects·p0.999:  11583.488 us/op
                 reduceYoungObjects·p0.9999: 11583.488 us/op
                 reduceYoungObjects·p1.00:   11583.488 us/op

Iteration  14: 10821.153 ±(99.9%) 3.946 us/op
                 reduceYoungObjects·p0.00:   10485.760 us/op
                 reduceYoungObjects·p0.50:   10813.440 us/op
                 reduceYoungObjects·p0.90:   10846.208 us/op
                 reduceYoungObjects·p0.95:   10862.592 us/op
                 reduceYoungObjects·p0.99:   10940.416 us/op
                 reduceYoungObjects·p0.999:  11026.432 us/op
                 reduceYoungObjects·p0.9999: 11026.432 us/op
                 reduceYoungObjects·p1.00:   11026.432 us/op

Iteration  15: 10816.578 ±(99.9%) 4.750 us/op
                 reduceYoungObjects·p0.00:   10436.608 us/op
                 reduceYoungObjects·p0.50:   10813.440 us/op
                 reduceYoungObjects·p0.90:   10829.824 us/op
                 reduceYoungObjects·p0.95:   10846.208 us/op
                 reduceYoungObjects·p0.99:   10928.128 us/op
                 reduceYoungObjects·p0.999:  11010.048 us/op
                 reduceYoungObjects·p0.9999: 11010.048 us/op
                 reduceYoungObjects·p1.00:   11010.048 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  N = 14066
  mean =  10661.130 ±(99.9%) 3.387 us/op

  Histogram, us/op:
    [10000.000, 10125.000) = 0 
    [10125.000, 10250.000) = 57 
    [10250.000, 10375.000) = 41 
    [10375.000, 10500.000) = 115 
    [10500.000, 10625.000) = 8814 
    [10625.000, 10750.000) = 459 
    [10750.000, 10875.000) = 4417 
    [10875.000, 11000.000) = 144 
    [11000.000, 11125.000) = 13 
    [11125.000, 11250.000) = 2 
    [11250.000, 11375.000) = 0 
    [11375.000, 11500.000) = 1 
    [11500.000, 11625.000) = 1 
    [11625.000, 11750.000) = 0 
    [11750.000, 11875.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  10174.464 us/op
     p(50.0000) =  10600.448 us/op
     p(90.0000) =  10829.824 us/op
     p(95.0000) =  10846.208 us/op
     p(99.0000) =  10878.976 us/op
     p(99.9000) =  11041.718 us/op
     p(99.9900) =  11864.524 us/op
     p(99.9990) =  11911.168 us/op
     p(99.9999) =  11911.168 us/op
    p(100.0000) =  11911.168 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 93.48% complete, ETA 00:32:57
# Fork: 1 of 1
# Warmup Iteration   1: 47834.695 ±(99.9%) 3711.512 us/op
# Warmup Iteration   2: 41847.067 ±(99.9%) 73.344 us/op
# Warmup Iteration   3: 43335.184 ±(99.9%) 55.606 us/op
# Warmup Iteration   4: 34481.879 ±(99.9%) 42.449 us/op
# Warmup Iteration   5: 36663.191 ±(99.9%) 60.165 us/op
Iteration   1: 27583.525 ±(99.9%) 43.151 us/op
                 redundantCode·p0.00:   27361.280 us/op
                 redundantCode·p0.50:   27557.888 us/op
                 redundantCode·p0.90:   27656.192 us/op
                 redundantCode·p0.95:   27721.728 us/op
                 redundantCode·p0.99:   27843.625 us/op
                 redundantCode·p0.999:  30801.920 us/op
                 redundantCode·p0.9999: 30801.920 us/op
                 redundantCode·p1.00:   30801.920 us/op

Iteration   2: 34083.624 ±(99.9%) 39.515 us/op
                 redundantCode·p0.00:   33947.648 us/op
                 redundantCode·p0.50:   34078.720 us/op
                 redundantCode·p0.90:   34209.792 us/op
                 redundantCode·p0.95:   34209.792 us/op
                 redundantCode·p0.99:   34544.026 us/op
                 redundantCode·p0.999:  37224.448 us/op
                 redundantCode·p0.9999: 37224.448 us/op
                 redundantCode·p1.00:   37224.448 us/op

Iteration   3: 41321.531 ±(99.9%) 48.553 us/op
                 redundantCode·p0.00:   41156.608 us/op
                 redundantCode·p0.50:   41287.680 us/op
                 redundantCode·p0.90:   41418.752 us/op
                 redundantCode·p0.95:   41484.288 us/op
                 redundantCode·p0.99:   41905.029 us/op
                 redundantCode·p0.999:  44498.944 us/op
                 redundantCode·p0.9999: 44498.944 us/op
                 redundantCode·p1.00:   44498.944 us/op

Iteration   4: 38752.605 ±(99.9%) 42.965 us/op
                 redundantCode·p0.00:   38600.704 us/op
                 redundantCode·p0.50:   38731.776 us/op
                 redundantCode·p0.90:   38862.848 us/op
                 redundantCode·p0.95:   38931.661 us/op
                 redundantCode·p0.99:   39178.732 us/op
                 redundantCode·p0.999:  41680.896 us/op
                 redundantCode·p0.9999: 41680.896 us/op
                 redundantCode·p1.00:   41680.896 us/op

Iteration   5: 27982.957 ±(99.9%) 43.884 us/op
                 redundantCode·p0.00:   27820.032 us/op
                 redundantCode·p0.50:   27951.104 us/op
                 redundantCode·p0.90:   28049.408 us/op
                 redundantCode·p0.95:   28114.944 us/op
                 redundantCode·p0.99:   28213.248 us/op
                 redundantCode·p0.999:  31293.440 us/op
                 redundantCode·p0.9999: 31293.440 us/op
                 redundantCode·p1.00:   31293.440 us/op

Iteration   6: 27309.353 ±(99.9%) 41.960 us/op
                 redundantCode·p0.00:   27164.672 us/op
                 redundantCode·p0.50:   27295.744 us/op
                 redundantCode·p0.90:   27394.048 us/op
                 redundantCode·p0.95:   27426.816 us/op
                 redundantCode·p0.99:   27590.328 us/op
                 redundantCode·p0.999:  30474.240 us/op
                 redundantCode·p0.9999: 30474.240 us/op
                 redundantCode·p1.00:   30474.240 us/op

Iteration   7: 29783.576 ±(99.9%) 47.698 us/op
                 redundantCode·p0.00:   29622.272 us/op
                 redundantCode·p0.50:   29753.344 us/op
                 redundantCode·p0.90:   29884.416 us/op
                 redundantCode·p0.95:   29949.952 us/op
                 redundantCode·p0.99:   30142.956 us/op
                 redundantCode·p0.999:  33062.912 us/op
                 redundantCode·p0.9999: 33062.912 us/op
                 redundantCode·p1.00:   33062.912 us/op

Iteration   8: 30650.105 ±(99.9%) 43.396 us/op
                 redundantCode·p0.00:   30474.240 us/op
                 redundantCode·p0.50:   30638.080 us/op
                 redundantCode·p0.90:   30736.384 us/op
                 redundantCode·p0.95:   30801.920 us/op
                 redundantCode·p0.99:   30965.760 us/op
                 redundantCode·p0.999:  34603.008 us/op
                 redundantCode·p0.9999: 34603.008 us/op
                 redundantCode·p1.00:   34603.008 us/op

Iteration   9: 41100.204 ±(99.9%) 51.806 us/op
                 redundantCode·p0.00:   40894.464 us/op
                 redundantCode·p0.50:   41091.072 us/op
                 redundantCode·p0.90:   41222.144 us/op
                 redundantCode·p0.95:   41353.216 us/op
                 redundantCode·p0.99:   41615.360 us/op
                 redundantCode·p0.999:  44367.872 us/op
                 redundantCode·p0.9999: 44367.872 us/op
                 redundantCode·p1.00:   44367.872 us/op

Iteration  10: 37023.471 ±(99.9%) 42.665 us/op
                 redundantCode·p0.00:   36896.768 us/op
                 redundantCode·p0.50:   37027.840 us/op
                 redundantCode·p0.90:   37093.376 us/op
                 redundantCode·p0.95:   37158.912 us/op
                 redundantCode·p0.99:   37308.989 us/op
                 redundantCode·p0.999:  40239.104 us/op
                 redundantCode·p0.9999: 40239.104 us/op
                 redundantCode·p1.00:   40239.104 us/op

Iteration  11: 31579.152 ±(99.9%) 40.098 us/op
                 redundantCode·p0.00:   31391.744 us/op
                 redundantCode·p0.50:   31555.584 us/op
                 redundantCode·p0.90:   31653.888 us/op
                 redundantCode·p0.95:   31719.424 us/op
                 redundantCode·p0.99:   32029.409 us/op
                 redundantCode·p0.999:  35061.760 us/op
                 redundantCode·p0.9999: 35061.760 us/op
                 redundantCode·p1.00:   35061.760 us/op

Iteration  12: 37467.447 ±(99.9%) 77.720 us/op
                 redundantCode·p0.00:   37093.376 us/op
                 redundantCode·p0.50:   37289.984 us/op
                 redundantCode·p0.90:   37879.808 us/op
                 redundantCode·p0.95:   37945.344 us/op
                 redundantCode·p0.99:   38291.374 us/op
                 redundantCode·p0.999:  40697.856 us/op
                 redundantCode·p0.9999: 40697.856 us/op
                 redundantCode·p1.00:   40697.856 us/op

Iteration  13: 43661.285 ±(99.9%) 62.429 us/op
                 redundantCode·p0.00:   43515.904 us/op
                 redundantCode·p0.50:   43646.976 us/op
                 redundantCode·p0.90:   43778.048 us/op
                 redundantCode·p0.95:   43778.048 us/op
                 redundantCode·p0.99:   43974.656 us/op
                 redundantCode·p0.999:  47775.744 us/op
                 redundantCode·p0.9999: 47775.744 us/op
                 redundantCode·p1.00:   47775.744 us/op

Iteration  14: 36133.285 ±(99.9%) 46.607 us/op
                 redundantCode·p0.00:   35979.264 us/op
                 redundantCode·p0.50:   36110.336 us/op
                 redundantCode·p0.90:   36241.408 us/op
                 redundantCode·p0.95:   36241.408 us/op
                 redundantCode·p0.99:   36452.434 us/op
                 redundantCode·p0.999:  39780.352 us/op
                 redundantCode·p0.9999: 39780.352 us/op
                 redundantCode·p1.00:   39780.352 us/op

Iteration  15: 36320.954 ±(99.9%) 47.557 us/op
                 redundantCode·p0.00:   36110.336 us/op
                 redundantCode·p0.50:   36306.944 us/op
                 redundantCode·p0.90:   36438.016 us/op
                 redundantCode·p0.95:   36438.016 us/op
                 redundantCode·p0.99:   36715.233 us/op
                 redundantCode·p0.999:  39976.960 us/op
                 redundantCode·p0.9999: 39976.960 us/op
                 redundantCode·p1.00:   39976.960 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  N = 4424
  mean =  33938.856 ±(99.9%) 254.559 us/op

  Histogram, us/op:
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 442 
    [27500.000, 30000.000) = 969 
    [30000.000, 32500.000) = 652 
    [32500.000, 35000.000) = 296 
    [35000.000, 37500.000) = 983 
    [37500.000, 40000.000) = 364 
    [40000.000, 42500.000) = 487 
    [42500.000, 45000.000) = 230 
    [45000.000, 47500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  27164.672 us/op
     p(50.0000) =  34078.720 us/op
     p(90.0000) =  41222.144 us/op
     p(95.0000) =  43515.904 us/op
     p(99.0000) =  43712.512 us/op
     p(99.9000) =  43974.656 us/op
     p(99.9900) =  47775.744 us/op
     p(99.9990) =  47775.744 us/op
     p(99.9999) =  47775.744 us/op
    p(100.0000) =  47775.744 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 94.20% complete, ETA 00:29:17
# Fork: 1 of 1
# Warmup Iteration   1: 33885.000 ±(99.9%) 2371.728 us/op
# Warmup Iteration   2: 32497.770 ±(99.9%) 1210.569 us/op
# Warmup Iteration   3: 32506.920 ±(99.9%) 1186.392 us/op
# Warmup Iteration   4: 32417.626 ±(99.9%) 1154.109 us/op
# Warmup Iteration   5: 32363.437 ±(99.9%) 1097.547 us/op
Iteration   1: 32265.698 ±(99.9%) 1012.632 us/op
                 split·p0.00:   31031.296 us/op
                 split·p0.50:   31195.136 us/op
                 split·p0.90:   31290.163 us/op
                 split·p0.95:   33515.110 us/op
                 split·p0.99:   64000.492 us/op
                 split·p0.999:  71303.168 us/op
                 split·p0.9999: 71303.168 us/op
                 split·p1.00:   71303.168 us/op

Iteration   2: 32389.736 ±(99.9%) 1103.818 us/op
                 split·p0.00:   31031.296 us/op
                 split·p0.50:   31195.136 us/op
                 split·p0.90:   31326.208 us/op
                 split·p0.95:   37421.056 us/op
                 split·p0.99:   67685.581 us/op
                 split·p0.999:  75366.400 us/op
                 split·p0.9999: 75366.400 us/op
                 split·p1.00:   75366.400 us/op

Iteration   3: 32511.388 ±(99.9%) 1176.299 us/op
                 split·p0.00:   31064.064 us/op
                 split·p0.50:   31227.904 us/op
                 split·p0.90:   31358.976 us/op
                 split·p0.95:   39488.717 us/op
                 split·p0.99:   69790.597 us/op
                 split·p0.999:  76808.192 us/op
                 split·p0.9999: 76808.192 us/op
                 split·p1.00:   76808.192 us/op

Iteration   4: 32354.105 ±(99.9%) 1056.224 us/op
                 split·p0.00:   31064.064 us/op
                 split·p0.50:   31195.136 us/op
                 split·p0.90:   31358.976 us/op
                 split·p0.95:   34668.544 us/op
                 split·p0.99:   64880.640 us/op
                 split·p0.999:  72220.672 us/op
                 split·p0.9999: 72220.672 us/op
                 split·p1.00:   72220.672 us/op

Iteration   5: 32303.857 ±(99.9%) 1053.814 us/op
                 split·p0.00:   30998.528 us/op
                 split·p0.50:   31162.368 us/op
                 split·p0.90:   31290.163 us/op
                 split·p0.95:   34694.758 us/op
                 split·p0.99:   64866.877 us/op
                 split·p0.999:  72220.672 us/op
                 split·p0.9999: 72220.672 us/op
                 split·p1.00:   72220.672 us/op

Iteration   6: 32370.118 ±(99.9%) 1066.824 us/op
                 split·p0.00:   31096.832 us/op
                 split·p0.50:   31195.136 us/op
                 split·p0.90:   31326.208 us/op
                 split·p0.95:   34897.920 us/op
                 split·p0.99:   65477.018 us/op
                 split·p0.999:  72744.960 us/op
                 split·p0.9999: 72744.960 us/op
                 split·p1.00:   72744.960 us/op

Iteration   7: 32257.031 ±(99.9%) 1003.545 us/op
                 split·p0.00:   31031.296 us/op
                 split·p0.50:   31195.136 us/op
                 split·p0.90:   31293.440 us/op
                 split·p0.95:   33318.502 us/op
                 split·p0.99:   63891.702 us/op
                 split·p0.999:  70909.952 us/op
                 split·p0.9999: 70909.952 us/op
                 split·p1.00:   70909.952 us/op

Iteration   8: 32320.664 ±(99.9%) 1063.871 us/op
                 split·p0.00:   30998.528 us/op
                 split·p0.50:   31162.368 us/op
                 split·p0.90:   31290.163 us/op
                 split·p0.95:   34861.875 us/op
                 split·p0.99:   65187.348 us/op
                 split·p0.999:  72482.816 us/op
                 split·p0.9999: 72482.816 us/op
                 split·p1.00:   72482.816 us/op

Iteration   9: 32379.980 ±(99.9%) 1068.653 us/op
                 split·p0.00:   31031.296 us/op
                 split·p0.50:   31227.904 us/op
                 split·p0.90:   31326.208 us/op
                 split·p0.95:   34963.456 us/op
                 split·p0.99:   65522.893 us/op
                 split·p0.999:  72482.816 us/op
                 split·p0.9999: 72482.816 us/op
                 split·p1.00:   72482.816 us/op

Iteration  10: 32327.323 ±(99.9%) 1067.479 us/op
                 split·p0.00:   31031.296 us/op
                 split·p0.50:   31162.368 us/op
                 split·p0.90:   31260.672 us/op
                 split·p0.95:   35028.992 us/op
                 split·p0.99:   65376.748 us/op
                 split·p0.999:  72613.888 us/op
                 split·p0.9999: 72613.888 us/op
                 split·p1.00:   72613.888 us/op

Iteration  11: 32331.763 ±(99.9%) 1067.881 us/op
                 split·p0.00:   31031.296 us/op
                 split·p0.50:   31162.368 us/op
                 split·p0.90:   31260.672 us/op
                 split·p0.95:   35028.992 us/op
                 split·p0.99:   65223.393 us/op
                 split·p0.999:  72744.960 us/op
                 split·p0.9999: 72744.960 us/op
                 split·p1.00:   72744.960 us/op

Iteration  12: 32366.831 ±(99.9%) 1071.445 us/op
                 split·p0.00:   31064.064 us/op
                 split·p0.50:   31195.136 us/op
                 split·p0.90:   31293.440 us/op
                 split·p0.95:   34963.456 us/op
                 split·p0.99:   65450.803 us/op
                 split·p0.999:  72613.888 us/op
                 split·p0.9999: 72613.888 us/op
                 split·p1.00:   72613.888 us/op

Iteration  13: 32275.000 ±(99.9%) 1020.842 us/op
                 split·p0.00:   31064.064 us/op
                 split·p0.50:   31195.136 us/op
                 split·p0.90:   31293.440 us/op
                 split·p0.95:   34488.320 us/op
                 split·p0.99:   64794.132 us/op
                 split·p0.999:  72089.600 us/op
                 split·p0.9999: 72089.600 us/op
                 split·p1.00:   72089.600 us/op

Iteration  14: 32354.529 ±(99.9%) 1069.580 us/op
                 split·p0.00:   31064.064 us/op
                 split·p0.50:   31195.136 us/op
                 split·p0.90:   31293.440 us/op
                 split·p0.95:   35094.528 us/op
                 split·p0.99:   65457.357 us/op
                 split·p0.999:  72613.888 us/op
                 split·p0.9999: 72613.888 us/op
                 split·p1.00:   72613.888 us/op

Iteration  15: 32326.478 ±(99.9%) 1081.380 us/op
                 split·p0.00:   31031.296 us/op
                 split·p0.50:   31162.368 us/op
                 split·p0.90:   31293.440 us/op
                 split·p0.95:   35651.584 us/op
                 split·p0.99:   68492.329 us/op
                 split·p0.999:  76939.264 us/op
                 split·p0.9999: 76939.264 us/op
                 split·p1.00:   76939.264 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  N = 4642
  mean =  32342.192 ±(99.9%) 272.438 us/op

  Histogram, us/op:
    [30000.000, 35000.000) = 4419 
    [35000.000, 40000.000) = 15 
    [40000.000, 45000.000) = 40 
    [45000.000, 50000.000) = 29 
    [50000.000, 55000.000) = 23 
    [55000.000, 60000.000) = 38 
    [60000.000, 65000.000) = 36 
    [65000.000, 70000.000) = 13 
    [70000.000, 75000.000) = 25 

  Percentiles, us/op:
      p(0.0000) =  30998.528 us/op
     p(50.0000) =  31195.136 us/op
     p(90.0000) =  31293.440 us/op
     p(95.0000) =  34452.275 us/op
     p(99.0000) =  64815.104 us/op
     p(99.9000) =  74776.445 us/op
     p(99.9900) =  76939.264 us/op
     p(99.9990) =  76939.264 us/op
     p(99.9999) =  76939.264 us/op
    p(100.0000) =  76939.264 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 94.92% complete, ETA 00:25:38
# Fork: 1 of 1
# Warmup Iteration   1: 21135.914 ±(99.9%) 1847.725 us/op
# Warmup Iteration   2: 20279.869 ±(99.9%) 1336.718 us/op
# Warmup Iteration   3: 20126.936 ±(99.9%) 1278.163 us/op
# Warmup Iteration   4: 20213.222 ±(99.9%) 1306.346 us/op
# Warmup Iteration   5: 20334.571 ±(99.9%) 1349.390 us/op
Iteration   1: 20247.042 ±(99.9%) 1299.249 us/op
                 mapToPair·p0.00:   17563.648 us/op
                 mapToPair·p0.50:   17760.256 us/op
                 mapToPair·p0.90:   20496.384 us/op
                 mapToPair·p0.95:   45170.688 us/op
                 mapToPair·p0.99:   62914.560 us/op
                 mapToPair·p0.999:  68812.800 us/op
                 mapToPair·p0.9999: 68812.800 us/op
                 mapToPair·p1.00:   68812.800 us/op

Iteration   2: 20308.849 ±(99.9%) 1317.034 us/op
                 mapToPair·p0.00:   17563.648 us/op
                 mapToPair·p0.50:   17760.256 us/op
                 mapToPair·p0.90:   20670.054 us/op
                 mapToPair·p0.95:   44138.496 us/op
                 mapToPair·p0.99:   64425.820 us/op
                 mapToPair·p0.999:  68812.800 us/op
                 mapToPair·p0.9999: 68812.800 us/op
                 mapToPair·p1.00:   68812.800 us/op

Iteration   3: 20192.105 ±(99.9%) 1280.736 us/op
                 mapToPair·p0.00:   17530.880 us/op
                 mapToPair·p0.50:   17760.256 us/op
                 mapToPair·p0.90:   20145.766 us/op
                 mapToPair·p0.95:   43974.656 us/op
                 mapToPair·p0.99:   62969.610 us/op
                 mapToPair·p0.999:  66977.792 us/op
                 mapToPair·p0.9999: 66977.792 us/op
                 mapToPair·p1.00:   66977.792 us/op

Iteration   4: 20141.485 ±(99.9%) 1253.047 us/op
                 mapToPair·p0.00:   17596.416 us/op
                 mapToPair·p0.50:   17760.256 us/op
                 mapToPair·p0.90:   20276.838 us/op
                 mapToPair·p0.95:   43109.581 us/op
                 mapToPair·p0.99:   61643.162 us/op
                 mapToPair·p0.999:  66453.504 us/op
                 mapToPair·p0.9999: 66453.504 us/op
                 mapToPair·p1.00:   66453.504 us/op

Iteration   5: 20307.187 ±(99.9%) 1346.415 us/op
                 mapToPair·p0.00:   17563.648 us/op
                 mapToPair·p0.50:   17760.256 us/op
                 mapToPair·p0.90:   19752.550 us/op
                 mapToPair·p0.95:   44321.997 us/op
                 mapToPair·p0.99:   64512.328 us/op
                 mapToPair·p0.999:  77725.696 us/op
                 mapToPair·p0.9999: 77725.696 us/op
                 mapToPair·p1.00:   77725.696 us/op

Iteration   6: 20047.646 ±(99.9%) 1204.870 us/op
                 mapToPair·p0.00:   17563.648 us/op
                 mapToPair·p0.50:   17760.256 us/op
                 mapToPair·p0.90:   20774.912 us/op
                 mapToPair·p0.95:   38797.312 us/op
                 mapToPair·p0.99:   59310.080 us/op
                 mapToPair·p0.999:  68943.872 us/op
                 mapToPair·p0.9999: 68943.872 us/op
                 mapToPair·p1.00:   68943.872 us/op

Iteration   7: 20355.135 ±(99.9%) 1365.530 us/op
                 mapToPair·p0.00:   17563.648 us/op
                 mapToPair·p0.50:   17727.488 us/op
                 mapToPair·p0.90:   19936.051 us/op
                 mapToPair·p0.95:   44446.515 us/op
                 mapToPair·p0.99:   64348.488 us/op
                 mapToPair·p0.999:  68288.512 us/op
                 mapToPair·p0.9999: 68288.512 us/op
                 mapToPair·p1.00:   68288.512 us/op

Iteration   8: 20405.007 ±(99.9%) 1395.294 us/op
                 mapToPair·p0.00:   17530.880 us/op
                 mapToPair·p0.50:   17694.720 us/op
                 mapToPair·p0.90:   19378.995 us/op
                 mapToPair·p0.95:   45698.253 us/op
                 mapToPair·p0.99:   65033.339 us/op
                 mapToPair·p0.999:  68681.728 us/op
                 mapToPair·p0.9999: 68681.728 us/op
                 mapToPair·p1.00:   68681.728 us/op

Iteration   9: 20131.222 ±(99.9%) 1261.550 us/op
                 mapToPair·p0.00:   17530.880 us/op
                 mapToPair·p0.50:   17727.488 us/op
                 mapToPair·p0.90:   19739.443 us/op
                 mapToPair·p0.95:   43345.510 us/op
                 mapToPair·p0.99:   62808.392 us/op
                 mapToPair·p0.999:  66584.576 us/op
                 mapToPair·p0.9999: 66584.576 us/op
                 mapToPair·p1.00:   66584.576 us/op

Iteration  10: 20130.101 ±(99.9%) 1253.656 us/op
                 mapToPair·p0.00:   17596.416 us/op
                 mapToPair·p0.50:   17727.488 us/op
                 mapToPair·p0.90:   19936.051 us/op
                 mapToPair·p0.95:   43312.742 us/op
                 mapToPair·p0.99:   62468.915 us/op
                 mapToPair·p0.999:  66715.648 us/op
                 mapToPair·p0.9999: 66715.648 us/op
                 mapToPair·p1.00:   66715.648 us/op

Iteration  11: 20325.551 ±(99.9%) 1336.738 us/op
                 mapToPair·p0.00:   17530.880 us/op
                 mapToPair·p0.50:   17760.256 us/op
                 mapToPair·p0.90:   19464.192 us/op
                 mapToPair·p0.95:   43499.520 us/op
                 mapToPair·p0.99:   64191.857 us/op
                 mapToPair·p0.999:  68157.440 us/op
                 mapToPair·p0.9999: 68157.440 us/op
                 mapToPair·p1.00:   68157.440 us/op

Iteration  12: 20232.383 ±(99.9%) 1294.648 us/op
                 mapToPair·p0.00:   17530.880 us/op
                 mapToPair·p0.50:   17727.488 us/op
                 mapToPair·p0.90:   20348.928 us/op
                 mapToPair·p0.95:   43515.904 us/op
                 mapToPair·p0.99:   62806.426 us/op
                 mapToPair·p0.999:  68419.584 us/op
                 mapToPair·p0.9999: 68419.584 us/op
                 mapToPair·p1.00:   68419.584 us/op

Iteration  13: 20244.389 ±(99.9%) 1319.282 us/op
                 mapToPair·p0.00:   17530.880 us/op
                 mapToPair·p0.50:   17694.720 us/op
                 mapToPair·p0.90:   20021.248 us/op
                 mapToPair·p0.95:   43581.440 us/op
                 mapToPair·p0.99:   64113.869 us/op
                 mapToPair·p0.999:  68681.728 us/op
                 mapToPair·p0.9999: 68681.728 us/op
                 mapToPair·p1.00:   68681.728 us/op

Iteration  14: 20119.882 ±(99.9%) 1249.247 us/op
                 mapToPair·p0.00:   17530.880 us/op
                 mapToPair·p0.50:   17760.256 us/op
                 mapToPair·p0.90:   19673.907 us/op
                 mapToPair·p0.95:   43109.581 us/op
                 mapToPair·p0.99:   62142.546 us/op
                 mapToPair·p0.999:  66781.184 us/op
                 mapToPair·p0.9999: 66781.184 us/op
                 mapToPair·p1.00:   66781.184 us/op

Iteration  15: 20313.435 ±(99.9%) 1327.611 us/op
                 mapToPair·p0.00:   17563.648 us/op
                 mapToPair·p0.50:   17727.488 us/op
                 mapToPair·p0.90:   19614.925 us/op
                 mapToPair·p0.95:   44151.603 us/op
                 mapToPair·p0.99:   64560.824 us/op
                 mapToPair·p0.999:  68288.512 us/op
                 mapToPair·p0.9999: 68288.512 us/op
                 mapToPair·p1.00:   68288.512 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  N = 7417
  mean =  20232.992 ±(99.9%) 333.706 us/op

  Histogram, us/op:
    [10000.000, 15000.000) = 0 
    [15000.000, 20000.000) = 6686 
    [20000.000, 25000.000) = 112 
    [25000.000, 30000.000) = 84 
    [30000.000, 35000.000) = 54 
    [35000.000, 40000.000) = 67 
    [40000.000, 45000.000) = 66 
    [45000.000, 50000.000) = 97 
    [50000.000, 55000.000) = 77 
    [55000.000, 60000.000) = 66 
    [60000.000, 65000.000) = 66 
    [65000.000, 70000.000) = 41 
    [70000.000, 75000.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  17530.880 us/op
     p(50.0000) =  17727.488 us/op
     p(90.0000) =  19922.944 us/op
     p(95.0000) =  43397.939 us/op
     p(99.0000) =  62902.764 us/op
     p(99.9000) =  68419.584 us/op
     p(99.9900) =  77725.696 us/op
     p(99.9990) =  77725.696 us/op
     p(99.9999) =  77725.696 us/op
    p(100.0000) =  77725.696 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 95.65% complete, ETA 00:21:58
# Fork: 1 of 1
# Warmup Iteration   1: 16463.734 ±(99.9%) 624.935 us/op
# Warmup Iteration   2: 15908.291 ±(99.9%) 87.526 us/op
# Warmup Iteration   3: 15904.514 ±(99.9%) 87.031 us/op
# Warmup Iteration   4: 15878.333 ±(99.9%) 78.843 us/op
# Warmup Iteration   5: 15853.584 ±(99.9%) 70.890 us/op
Iteration   1: 15868.580 ±(99.9%) 76.867 us/op
                 plusOne·p0.00:   15532.032 us/op
                 plusOne·p0.50:   15728.640 us/op
                 plusOne·p0.90:   15925.248 us/op
                 plusOne·p0.95:   16414.310 us/op
                 plusOne·p0.99:   18808.832 us/op
                 plusOne·p0.999:  19070.976 us/op
                 plusOne·p0.9999: 19070.976 us/op
                 plusOne·p1.00:   19070.976 us/op

Iteration   2: 15870.115 ±(99.9%) 75.599 us/op
                 plusOne·p0.00:   15499.264 us/op
                 plusOne·p0.50:   15745.024 us/op
                 plusOne·p0.90:   15939.994 us/op
                 plusOne·p0.95:   16306.995 us/op
                 plusOne·p0.99:   18874.368 us/op
                 plusOne·p0.999:  19398.656 us/op
                 plusOne·p0.9999: 19398.656 us/op
                 plusOne·p1.00:   19398.656 us/op

Iteration   3: 15880.335 ±(99.9%) 81.660 us/op
                 plusOne·p0.00:   15548.416 us/op
                 plusOne·p0.50:   15728.640 us/op
                 plusOne·p0.90:   15958.016 us/op
                 plusOne·p0.95:   16560.947 us/op
                 plusOne·p0.99:   18864.210 us/op
                 plusOne·p0.999:  21856.256 us/op
                 plusOne·p0.9999: 21856.256 us/op
                 plusOne·p1.00:   21856.256 us/op

Iteration   4: 15947.015 ±(99.9%) 80.976 us/op
                 plusOne·p0.00:   15515.648 us/op
                 plusOne·p0.50:   15745.024 us/op
                 plusOne·p0.90:   16187.392 us/op
                 plusOne·p0.95:   16662.528 us/op
                 plusOne·p0.99:   19165.348 us/op
                 plusOne·p0.999:  19824.640 us/op
                 plusOne·p0.9999: 19824.640 us/op
                 plusOne·p1.00:   19824.640 us/op

Iteration   5: 15854.960 ±(99.9%) 75.966 us/op
                 plusOne·p0.00:   15532.032 us/op
                 plusOne·p0.50:   15728.640 us/op
                 plusOne·p0.90:   15892.480 us/op
                 plusOne·p0.95:   16387.277 us/op
                 plusOne·p0.99:   18853.396 us/op
                 plusOne·p0.999:  19464.192 us/op
                 plusOne·p0.9999: 19464.192 us/op
                 plusOne·p1.00:   19464.192 us/op

Iteration   6: 15845.821 ±(99.9%) 75.419 us/op
                 plusOne·p0.00:   15515.648 us/op
                 plusOne·p0.50:   15712.256 us/op
                 plusOne·p0.90:   15921.971 us/op
                 plusOne·p0.95:   16344.678 us/op
                 plusOne·p0.99:   18929.418 us/op
                 plusOne·p0.999:  19300.352 us/op
                 plusOne·p0.9999: 19300.352 us/op
                 plusOne·p1.00:   19300.352 us/op

Iteration   7: 15870.635 ±(99.9%) 86.406 us/op
                 plusOne·p0.00:   15532.032 us/op
                 plusOne·p0.50:   15728.640 us/op
                 plusOne·p0.90:   15972.762 us/op
                 plusOne·p0.95:   16637.133 us/op
                 plusOne·p0.99:   18919.588 us/op
                 plusOne·p0.999:  23625.728 us/op
                 plusOne·p0.9999: 23625.728 us/op
                 plusOne·p1.00:   23625.728 us/op

Iteration   8: 15868.190 ±(99.9%) 80.152 us/op
                 plusOne·p0.00:   15532.032 us/op
                 plusOne·p0.50:   15712.256 us/op
                 plusOne·p0.90:   15939.994 us/op
                 plusOne·p0.95:   16653.517 us/op
                 plusOne·p0.99:   19005.440 us/op
                 plusOne·p0.999:  19529.728 us/op
                 plusOne·p0.9999: 19529.728 us/op
                 plusOne·p1.00:   19529.728 us/op

Iteration   9: 15862.859 ±(99.9%) 77.065 us/op
                 plusOne·p0.00:   15515.648 us/op
                 plusOne·p0.50:   15712.256 us/op
                 plusOne·p0.90:   15974.400 us/op
                 plusOne·p0.95:   16646.144 us/op
                 plusOne·p0.99:   18798.674 us/op
                 plusOne·p0.999:  18939.904 us/op
                 plusOne·p0.9999: 18939.904 us/op
                 plusOne·p1.00:   18939.904 us/op

Iteration  10: 15875.056 ±(99.9%) 78.446 us/op
                 plusOne·p0.00:   15499.264 us/op
                 plusOne·p0.50:   15728.640 us/op
                 plusOne·p0.90:   15990.784 us/op
                 plusOne·p0.95:   16619.110 us/op
                 plusOne·p0.99:   18831.442 us/op
                 plusOne·p0.999:  19038.208 us/op
                 plusOne·p0.9999: 19038.208 us/op
                 plusOne·p1.00:   19038.208 us/op

Iteration  11: 15848.833 ±(99.9%) 85.399 us/op
                 plusOne·p0.00:   15499.264 us/op
                 plusOne·p0.50:   15712.256 us/op
                 plusOne·p0.90:   15921.971 us/op
                 plusOne·p0.95:   16528.179 us/op
                 plusOne·p0.99:   18863.882 us/op
                 plusOne·p0.999:  24412.160 us/op
                 plusOne·p0.9999: 24412.160 us/op
                 plusOne·p1.00:   24412.160 us/op

Iteration  12: 15853.247 ±(99.9%) 80.188 us/op
                 plusOne·p0.00:   15499.264 us/op
                 plusOne·p0.50:   15695.872 us/op
                 plusOne·p0.90:   15958.016 us/op
                 plusOne·p0.95:   16636.314 us/op
                 plusOne·p0.99:   18841.600 us/op
                 plusOne·p0.999:  20316.160 us/op
                 plusOne·p0.9999: 20316.160 us/op
                 plusOne·p1.00:   20316.160 us/op

Iteration  13: 15852.156 ±(99.9%) 74.288 us/op
                 plusOne·p0.00:   15499.264 us/op
                 plusOne·p0.50:   15712.256 us/op
                 plusOne·p0.90:   15974.400 us/op
                 plusOne·p0.95:   16570.778 us/op
                 plusOne·p0.99:   18755.092 us/op
                 plusOne·p0.999:  18939.904 us/op
                 plusOne·p0.9999: 18939.904 us/op
                 plusOne·p1.00:   18939.904 us/op

Iteration  14: 15892.506 ±(99.9%) 78.891 us/op
                 plusOne·p0.00:   15515.648 us/op
                 plusOne·p0.50:   15728.640 us/op
                 plusOne·p0.90:   16056.320 us/op
                 plusOne·p0.95:   16752.640 us/op
                 plusOne·p0.99:   18808.832 us/op
                 plusOne·p0.999:  20512.768 us/op
                 plusOne·p0.9999: 20512.768 us/op
                 plusOne·p1.00:   20512.768 us/op

Iteration  15: 15885.900 ±(99.9%) 83.132 us/op
                 plusOne·p0.00:   15548.416 us/op
                 plusOne·p0.50:   15728.640 us/op
                 plusOne·p0.90:   15989.146 us/op
                 plusOne·p0.95:   16707.584 us/op
                 plusOne·p0.99:   18896.978 us/op
                 plusOne·p0.999:  20512.768 us/op
                 plusOne·p0.9999: 20512.768 us/op
                 plusOne·p1.00:   20512.768 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  N = 9451
  mean =  15871.710 ±(99.9%) 20.423 us/op

  Histogram, us/op:
    [15000.000, 16000.000) = 8496 
    [16000.000, 17000.000) = 561 
    [17000.000, 18000.000) = 71 
    [18000.000, 19000.000) = 279 
    [19000.000, 20000.000) = 38 
    [20000.000, 21000.000) = 3 
    [21000.000, 22000.000) = 1 
    [22000.000, 23000.000) = 0 
    [23000.000, 24000.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  15499.264 us/op
     p(50.0000) =  15728.640 us/op
     p(90.0000) =  16007.168 us/op
     p(95.0000) =  16580.608 us/op
     p(99.0000) =  18874.368 us/op
     p(99.9000) =  19500.106 us/op
     p(99.9900) =  24412.160 us/op
     p(99.9990) =  24412.160 us/op
     p(99.9999) =  24412.160 us/op
    p(100.0000) =  24412.160 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 96.37% complete, ETA 00:18:18
# Fork: 1 of 1
# Warmup Iteration   1: 36246.869 ±(99.9%) 2641.216 us/op
# Warmup Iteration   2: 35491.927 ±(99.9%) 507.824 us/op
# Warmup Iteration   3: 34421.602 ±(99.9%) 593.231 us/op
# Warmup Iteration   4: 34349.647 ±(99.9%) 526.100 us/op
# Warmup Iteration   5: 34269.717 ±(99.9%) 109.410 us/op
Iteration   1: 33548.384 ±(99.9%) 103.545 us/op
                 sort·p0.00:   33128.448 us/op
                 sort·p0.50:   33423.360 us/op
                 sort·p0.90:   33685.504 us/op
                 sort·p0.95:   34471.936 us/op
                 sort·p0.99:   36767.662 us/op
                 sort·p0.999:  37093.376 us/op
                 sort·p0.9999: 37093.376 us/op
                 sort·p1.00:   37093.376 us/op

Iteration   2: 34296.425 ±(99.9%) 103.159 us/op
                 sort·p0.00:   33947.648 us/op
                 sort·p0.50:   34144.256 us/op
                 sort·p0.90:   34406.400 us/op
                 sort·p0.95:   35219.046 us/op
                 sort·p0.99:   37003.592 us/op
                 sort·p0.999:  37879.808 us/op
                 sort·p0.9999: 37879.808 us/op
                 sort·p1.00:   37879.808 us/op

Iteration   3: 34570.466 ±(99.9%) 603.189 us/op
                 sort·p0.00:   33259.520 us/op
                 sort·p0.50:   33488.896 us/op
                 sort·p0.90:   36628.070 us/op
                 sort·p0.95:   43778.048 us/op
                 sort·p0.99:   45517.373 us/op
                 sort·p0.999:  50921.472 us/op
                 sort·p0.9999: 50921.472 us/op
                 sort·p1.00:   50921.472 us/op

Iteration   4: 33267.249 ±(99.9%) 100.824 us/op
                 sort·p0.00:   32931.840 us/op
                 sort·p0.50:   33161.216 us/op
                 sort·p0.90:   33325.056 us/op
                 sort·p0.95:   33613.414 us/op
                 sort·p0.99:   36368.548 us/op
                 sort·p0.999:  36896.768 us/op
                 sort·p0.9999: 36896.768 us/op
                 sort·p1.00:   36896.768 us/op

Iteration   5: 33724.671 ±(99.9%) 105.637 us/op
                 sort·p0.00:   33390.592 us/op
                 sort·p0.50:   33619.968 us/op
                 sort·p0.90:   33751.040 us/op
                 sort·p0.95:   34609.562 us/op
                 sort·p0.99:   36778.803 us/op
                 sort·p0.999:  37421.056 us/op
                 sort·p0.9999: 37421.056 us/op
                 sort·p1.00:   37421.056 us/op

Iteration   6: 33795.875 ±(99.9%) 575.516 us/op
                 sort·p0.00:   32407.552 us/op
                 sort·p0.50:   32669.696 us/op
                 sort·p0.90:   41962.701 us/op
                 sort·p0.95:   42149.478 us/op
                 sort·p0.99:   42460.774 us/op
                 sort·p0.999:  45285.376 us/op
                 sort·p0.9999: 45285.376 us/op
                 sort·p1.00:   45285.376 us/op

Iteration   7: 34111.600 ±(99.9%) 105.544 us/op
                 sort·p0.00:   33685.504 us/op
                 sort·p0.50:   34013.184 us/op
                 sort·p0.90:   34209.792 us/op
                 sort·p0.95:   35520.512 us/op
                 sort·p0.99:   36912.497 us/op
                 sort·p0.999:  37617.664 us/op
                 sort·p0.9999: 37617.664 us/op
                 sort·p1.00:   37617.664 us/op

Iteration   8: 33239.489 ±(99.9%) 102.519 us/op
                 sort·p0.00:   32866.304 us/op
                 sort·p0.50:   33095.680 us/op
                 sort·p0.90:   33384.038 us/op
                 sort·p0.95:   34131.149 us/op
                 sort·p0.99:   36109.025 us/op
                 sort·p0.999:  36634.624 us/op
                 sort·p0.9999: 36634.624 us/op
                 sort·p1.00:   36634.624 us/op

Iteration   9: 33215.321 ±(99.9%) 107.432 us/op
                 sort·p0.00:   32899.072 us/op
                 sort·p0.50:   33095.680 us/op
                 sort·p0.90:   33259.520 us/op
                 sort·p0.95:   34072.166 us/op
                 sort·p0.99:   36236.165 us/op
                 sort·p0.999:  36962.304 us/op
                 sort·p0.9999: 36962.304 us/op
                 sort·p1.00:   36962.304 us/op

Iteration  10: 34555.099 ±(99.9%) 110.133 us/op
                 sort·p0.00:   34209.792 us/op
                 sort·p0.50:   34406.400 us/op
                 sort·p0.90:   34668.544 us/op
                 sort·p0.95:   35543.450 us/op
                 sort·p0.99:   37480.038 us/op
                 sort·p0.999:  38141.952 us/op
                 sort·p0.9999: 38141.952 us/op
                 sort·p1.00:   38141.952 us/op

Iteration  11: 32832.999 ±(99.9%) 97.817 us/op
                 sort·p0.00:   32473.088 us/op
                 sort·p0.50:   32702.464 us/op
                 sort·p0.90:   32899.072 us/op
                 sort·p0.95:   33492.173 us/op
                 sort·p0.99:   35778.724 us/op
                 sort·p0.999:  36831.232 us/op
                 sort·p0.9999: 36831.232 us/op
                 sort·p1.00:   36831.232 us/op

Iteration  12: 33307.202 ±(99.9%) 99.921 us/op
                 sort·p0.00:   32964.608 us/op
                 sort·p0.50:   33193.984 us/op
                 sort·p0.90:   33357.824 us/op
                 sort·p0.95:   33803.469 us/op
                 sort·p0.99:   36622.828 us/op
                 sort·p0.999:  36896.768 us/op
                 sort·p0.9999: 36896.768 us/op
                 sort·p1.00:   36896.768 us/op

Iteration  13: 34077.605 ±(99.9%) 107.746 us/op
                 sort·p0.00:   33751.040 us/op
                 sort·p0.50:   33947.648 us/op
                 sort·p0.90:   34144.256 us/op
                 sort·p0.95:   34897.920 us/op
                 sort·p0.99:   37552.128 us/op
                 sort·p0.999:  37617.664 us/op
                 sort·p0.9999: 37617.664 us/op
                 sort·p1.00:   37617.664 us/op

Iteration  14: 32826.553 ±(99.9%) 111.143 us/op
                 sort·p0.00:   32538.624 us/op
                 sort·p0.50:   32702.464 us/op
                 sort·p0.90:   32866.304 us/op
                 sort·p0.95:   33692.058 us/op
                 sort·p0.99:   36414.423 us/op
                 sort·p0.999:  37093.376 us/op
                 sort·p0.9999: 37093.376 us/op
                 sort·p1.00:   37093.376 us/op

Iteration  15: 32658.168 ±(99.9%) 106.493 us/op
                 sort·p0.00:   32342.016 us/op
                 sort·p0.50:   32538.624 us/op
                 sort·p0.90:   32702.464 us/op
                 sort·p0.95:   33384.038 us/op
                 sort·p0.99:   36128.686 us/op
                 sort·p0.999:  36372.480 us/op
                 sort·p0.9999: 36372.480 us/op
                 sort·p1.00:   36372.480 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  N = 4471
  mean =  33591.084 ±(99.9%) 66.470 us/op

  Histogram, us/op:
    [30000.000, 32500.000) = 102 
    [32500.000, 35000.000) = 4151 
    [35000.000, 37500.000) = 152 
    [37500.000, 40000.000) = 10 
    [40000.000, 42500.000) = 29 
    [42500.000, 45000.000) = 23 
    [45000.000, 47500.000) = 3 
    [47500.000, 50000.000) = 0 
    [50000.000, 52500.000) = 1 
    [52500.000, 55000.000) = 0 
    [55000.000, 57500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  32342.016 us/op
     p(50.0000) =  33325.056 us/op
     p(90.0000) =  34406.400 us/op
     p(95.0000) =  34996.224 us/op
     p(99.0000) =  42139.648 us/op
     p(99.9000) =  44852.314 us/op
     p(99.9900) =  50921.472 us/op
     p(99.9990) =  50921.472 us/op
     p(99.9999) =  50921.472 us/op
    p(100.0000) =  50921.472 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 97.10% complete, ETA 00:14:38
# Fork: 1 of 1
# Warmup Iteration   1: 788.660 ±(99.9%) 8.157 us/op
# Warmup Iteration   2: 773.968 ±(99.9%) 2.766 us/op
# Warmup Iteration   3: 769.221 ±(99.9%) 2.014 us/op
# Warmup Iteration   4: 765.967 ±(99.9%) 1.442 us/op
# Warmup Iteration   5: 768.187 ±(99.9%) 1.726 us/op
Iteration   1: 768.840 ±(99.9%) 1.567 us/op
                 concatenateStrings·p0.00:   726.016 us/op
                 concatenateStrings·p0.50:   761.856 us/op
                 concatenateStrings·p0.90:   782.336 us/op
                 concatenateStrings·p0.95:   793.600 us/op
                 concatenateStrings·p0.99:   863.324 us/op
                 concatenateStrings·p0.999:  1617.920 us/op
                 concatenateStrings·p0.9999: 1786.889 us/op
                 concatenateStrings·p1.00:   1796.096 us/op

Iteration   2: 767.108 ±(99.9%) 1.212 us/op
                 concatenateStrings·p0.00:   728.064 us/op
                 concatenateStrings·p0.50:   760.832 us/op
                 concatenateStrings·p0.90:   782.336 us/op
                 concatenateStrings·p0.95:   793.600 us/op
                 concatenateStrings·p0.99:   857.846 us/op
                 concatenateStrings·p0.999:  1341.334 us/op
                 concatenateStrings·p0.9999: 1516.251 us/op
                 concatenateStrings·p1.00:   1550.336 us/op

Iteration   3: 767.221 ±(99.9%) 1.659 us/op
                 concatenateStrings·p0.00:   721.920 us/op
                 concatenateStrings·p0.50:   760.832 us/op
                 concatenateStrings·p0.90:   779.264 us/op
                 concatenateStrings·p0.95:   787.456 us/op
                 concatenateStrings·p0.99:   851.968 us/op
                 concatenateStrings·p0.999:  1971.978 us/op
                 concatenateStrings·p0.9999: 2365.646 us/op
                 concatenateStrings·p1.00:   2494.464 us/op

Iteration   4: 766.415 ±(99.9%) 1.378 us/op
                 concatenateStrings·p0.00:   729.088 us/op
                 concatenateStrings·p0.50:   760.832 us/op
                 concatenateStrings·p0.90:   779.264 us/op
                 concatenateStrings·p0.95:   786.432 us/op
                 concatenateStrings·p0.99:   832.737 us/op
                 concatenateStrings·p0.999:  1656.752 us/op
                 concatenateStrings·p0.9999: 1819.789 us/op
                 concatenateStrings·p1.00:   1824.768 us/op

Iteration   5: 766.254 ±(99.9%) 1.286 us/op
                 concatenateStrings·p0.00:   724.992 us/op
                 concatenateStrings·p0.50:   760.832 us/op
                 concatenateStrings·p0.90:   779.264 us/op
                 concatenateStrings·p0.95:   786.432 us/op
                 concatenateStrings·p0.99:   836.372 us/op
                 concatenateStrings·p0.999:  1382.148 us/op
                 concatenateStrings·p0.9999: 1583.032 us/op
                 concatenateStrings·p1.00:   1603.584 us/op

Iteration   6: 765.109 ±(99.9%) 1.138 us/op
                 concatenateStrings·p0.00:   728.064 us/op
                 concatenateStrings·p0.50:   759.808 us/op
                 concatenateStrings·p0.90:   778.240 us/op
                 concatenateStrings·p0.95:   785.408 us/op
                 concatenateStrings·p0.99:   833.935 us/op
                 concatenateStrings·p0.999:  1273.606 us/op
                 concatenateStrings·p0.9999: 1376.006 us/op
                 concatenateStrings·p1.00:   1388.544 us/op

Iteration   7: 767.289 ±(99.9%) 1.465 us/op
                 concatenateStrings·p0.00:   724.992 us/op
                 concatenateStrings·p0.50:   760.832 us/op
                 concatenateStrings·p0.90:   779.264 us/op
                 concatenateStrings·p0.95:   787.456 us/op
                 concatenateStrings·p0.99:   916.756 us/op
                 concatenateStrings·p0.999:  1629.831 us/op
                 concatenateStrings·p0.9999: 1910.838 us/op
                 concatenateStrings·p1.00:   1984.512 us/op

Iteration   8: 765.932 ±(99.9%) 1.110 us/op
                 concatenateStrings·p0.00:   729.088 us/op
                 concatenateStrings·p0.50:   760.832 us/op
                 concatenateStrings·p0.90:   780.288 us/op
                 concatenateStrings·p0.95:   787.456 us/op
                 concatenateStrings·p0.99:   837.161 us/op
                 concatenateStrings·p0.999:  1220.514 us/op
                 concatenateStrings·p0.9999: 1356.753 us/op
                 concatenateStrings·p1.00:   1359.872 us/op

Iteration   9: 766.695 ±(99.9%) 1.183 us/op
                 concatenateStrings·p0.00:   726.016 us/op
                 concatenateStrings·p0.50:   761.856 us/op
                 concatenateStrings·p0.90:   779.264 us/op
                 concatenateStrings·p0.95:   787.456 us/op
                 concatenateStrings·p0.99:   830.464 us/op
                 concatenateStrings·p0.999:  1283.555 us/op
                 concatenateStrings·p0.9999: 1383.071 us/op
                 concatenateStrings·p1.00:   1396.736 us/op

Iteration  10: 768.914 ±(99.9%) 2.009 us/op
                 concatenateStrings·p0.00:   726.016 us/op
                 concatenateStrings·p0.50:   761.856 us/op
                 concatenateStrings·p0.90:   782.336 us/op
                 concatenateStrings·p0.95:   794.624 us/op
                 concatenateStrings·p0.99:   874.537 us/op
                 concatenateStrings·p0.999:  2400.272 us/op
                 concatenateStrings·p0.9999: 2865.788 us/op
                 concatenateStrings·p1.00:   3035.136 us/op

Iteration  11: 767.072 ±(99.9%) 1.219 us/op
                 concatenateStrings·p0.00:   723.968 us/op
                 concatenateStrings·p0.50:   760.832 us/op
                 concatenateStrings·p0.90:   781.312 us/op
                 concatenateStrings·p0.95:   791.552 us/op
                 concatenateStrings·p0.99:   870.134 us/op
                 concatenateStrings·p0.999:  1267.712 us/op
                 concatenateStrings·p0.9999: 1376.014 us/op
                 concatenateStrings·p1.00:   1380.352 us/op

Iteration  12: 766.921 ±(99.9%) 1.199 us/op
                 concatenateStrings·p0.00:   722.944 us/op
                 concatenateStrings·p0.50:   760.832 us/op
                 concatenateStrings·p0.90:   780.288 us/op
                 concatenateStrings·p0.95:   789.504 us/op
                 concatenateStrings·p0.99:   866.734 us/op
                 concatenateStrings·p0.999:  1238.981 us/op
                 concatenateStrings·p0.9999: 1915.410 us/op
                 concatenateStrings·p1.00:   2138.112 us/op

Iteration  13: 766.161 ±(99.9%) 1.139 us/op
                 concatenateStrings·p0.00:   724.992 us/op
                 concatenateStrings·p0.50:   760.832 us/op
                 concatenateStrings·p0.90:   779.264 us/op
                 concatenateStrings·p0.95:   787.456 us/op
                 concatenateStrings·p0.99:   853.279 us/op
                 concatenateStrings·p0.999:  1242.784 us/op
                 concatenateStrings·p0.9999: 1288.192 us/op
                 concatenateStrings·p1.00:   1288.192 us/op

Iteration  14: 767.594 ±(99.9%) 1.460 us/op
                 concatenateStrings·p0.00:   720.896 us/op
                 concatenateStrings·p0.50:   760.832 us/op
                 concatenateStrings·p0.90:   780.288 us/op
                 concatenateStrings·p0.95:   792.576 us/op
                 concatenateStrings·p0.99:   873.472 us/op
                 concatenateStrings·p0.999:  1613.529 us/op
                 concatenateStrings·p0.9999: 1843.219 us/op
                 concatenateStrings·p1.00:   1908.736 us/op

Iteration  15: 765.139 ±(99.9%) 1.027 us/op
                 concatenateStrings·p0.00:   726.016 us/op
                 concatenateStrings·p0.50:   759.808 us/op
                 concatenateStrings·p0.90:   779.264 us/op
                 concatenateStrings·p0.95:   789.504 us/op
                 concatenateStrings·p0.99:   873.943 us/op
                 concatenateStrings·p0.999:  1195.670 us/op
                 concatenateStrings·p0.9999: 1348.764 us/op
                 concatenateStrings·p1.00:   1361.920 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 195446
  mean =    766.843 ±(99.9%) 0.351 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 0 
    [ 250.000,  500.000) = 0 
    [ 500.000,  750.000) = 26113 
    [ 750.000, 1000.000) = 167588 
    [1000.000, 1250.000) = 1481 
    [1250.000, 1500.000) = 164 
    [1500.000, 1750.000) = 59 
    [1750.000, 2000.000) = 16 
    [2000.000, 2250.000) = 8 
    [2250.000, 2500.000) = 16 
    [2500.000, 2750.000) = 0 
    [2750.000, 3000.000) = 0 
    [3000.000, 3250.000) = 1 
    [3250.000, 3500.000) = 0 
    [3500.000, 3750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    720.896 us/op
     p(50.0000) =    760.832 us/op
     p(90.0000) =    780.288 us/op
     p(95.0000) =    789.504 us/op
     p(99.0000) =    857.088 us/op
     p(99.9000) =   1285.229 us/op
     p(99.9900) =   2057.325 us/op
     p(99.9990) =   2519.081 us/op
     p(99.9999) =   3035.136 us/op
    p(100.0000) =   3035.136 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 97.82% complete, ETA 00:10:59
# Fork: 1 of 1
# Warmup Iteration   1: 8016.828 ±(99.9%) 108.772 us/op
# Warmup Iteration   2: 7922.346 ±(99.9%) 18.766 us/op
# Warmup Iteration   3: 7908.676 ±(99.9%) 13.828 us/op
# Warmup Iteration   4: 7933.919 ±(99.9%) 24.267 us/op
# Warmup Iteration   5: 7905.189 ±(99.9%) 14.180 us/op
Iteration   1: 7907.970 ±(99.9%) 17.748 us/op
                 concatenateStrings·p0.00:   7741.440 us/op
                 concatenateStrings·p0.50:   7864.320 us/op
                 concatenateStrings·p0.90:   8007.680 us/op
                 concatenateStrings·p0.95:   8298.496 us/op
                 concatenateStrings·p0.99:   8541.798 us/op
                 concatenateStrings·p0.999:  11171.185 us/op
                 concatenateStrings·p0.9999: 11436.032 us/op
                 concatenateStrings·p1.00:   11436.032 us/op

Iteration   2: 7903.195 ±(99.9%) 12.648 us/op
                 concatenateStrings·p0.00:   7733.248 us/op
                 concatenateStrings·p0.50:   7864.320 us/op
                 concatenateStrings·p0.90:   7995.392 us/op
                 concatenateStrings·p0.95:   8265.728 us/op
                 concatenateStrings·p0.99:   8459.715 us/op
                 concatenateStrings·p0.999:  8654.062 us/op
                 concatenateStrings·p0.9999: 8667.136 us/op
                 concatenateStrings·p1.00:   8667.136 us/op

Iteration   3: 7928.635 ±(99.9%) 19.175 us/op
                 concatenateStrings·p0.00:   7733.248 us/op
                 concatenateStrings·p0.50:   7880.704 us/op
                 concatenateStrings·p0.90:   7995.392 us/op
                 concatenateStrings·p0.95:   8347.648 us/op
                 concatenateStrings·p0.99:   8781.824 us/op
                 concatenateStrings·p0.999:  11094.262 us/op
                 concatenateStrings·p0.9999: 11223.040 us/op
                 concatenateStrings·p1.00:   11223.040 us/op

Iteration   4: 7911.638 ±(99.9%) 15.225 us/op
                 concatenateStrings·p0.00:   7733.248 us/op
                 concatenateStrings·p0.50:   7872.512 us/op
                 concatenateStrings·p0.90:   7983.104 us/op
                 concatenateStrings·p0.95:   8304.640 us/op
                 concatenateStrings·p0.99:   8771.174 us/op
                 concatenateStrings·p0.999:  9114.255 us/op
                 concatenateStrings·p0.9999: 9175.040 us/op
                 concatenateStrings·p1.00:   9175.040 us/op

Iteration   5: 7910.251 ±(99.9%) 16.096 us/op
                 concatenateStrings·p0.00:   7741.440 us/op
                 concatenateStrings·p0.50:   7864.320 us/op
                 concatenateStrings·p0.90:   8028.160 us/op
                 concatenateStrings·p0.95:   8355.840 us/op
                 concatenateStrings·p0.99:   8454.144 us/op
                 concatenateStrings·p0.999:  10254.500 us/op
                 concatenateStrings·p0.9999: 10649.600 us/op
                 concatenateStrings·p1.00:   10649.600 us/op

Iteration   6: 7904.904 ±(99.9%) 14.085 us/op
                 concatenateStrings·p0.00:   7741.440 us/op
                 concatenateStrings·p0.50:   7864.320 us/op
                 concatenateStrings·p0.90:   7990.477 us/op
                 concatenateStrings·p0.95:   8320.614 us/op
                 concatenateStrings·p0.99:   8498.053 us/op
                 concatenateStrings·p0.999:  8702.165 us/op
                 concatenateStrings·p0.9999: 8732.672 us/op
                 concatenateStrings·p1.00:   8732.672 us/op

Iteration   7: 7902.910 ±(99.9%) 14.237 us/op
                 concatenateStrings·p0.00:   7749.632 us/op
                 concatenateStrings·p0.50:   7856.128 us/op
                 concatenateStrings·p0.90:   8019.968 us/op
                 concatenateStrings·p0.95:   8287.846 us/op
                 concatenateStrings·p0.99:   8601.600 us/op
                 concatenateStrings·p0.999:  8935.899 us/op
                 concatenateStrings·p0.9999: 8962.048 us/op
                 concatenateStrings·p1.00:   8962.048 us/op

Iteration   8: 7894.448 ±(99.9%) 13.696 us/op
                 concatenateStrings·p0.00:   7741.440 us/op
                 concatenateStrings·p0.50:   7847.936 us/op
                 concatenateStrings·p0.90:   7973.274 us/op
                 concatenateStrings·p0.95:   8336.589 us/op
                 concatenateStrings·p0.99:   8443.167 us/op
                 concatenateStrings·p0.999:  8548.073 us/op
                 concatenateStrings·p0.9999: 8552.448 us/op
                 concatenateStrings·p1.00:   8552.448 us/op

Iteration   9: 7890.829 ±(99.9%) 12.373 us/op
                 concatenateStrings·p0.00:   7733.248 us/op
                 concatenateStrings·p0.50:   7856.128 us/op
                 concatenateStrings·p0.90:   7990.477 us/op
                 concatenateStrings·p0.95:   8265.728 us/op
                 concatenateStrings·p0.99:   8388.608 us/op
                 concatenateStrings·p0.999:  8503.296 us/op
                 concatenateStrings·p0.9999: 8503.296 us/op
                 concatenateStrings·p1.00:   8503.296 us/op

Iteration  10: 7892.394 ±(99.9%) 13.355 us/op
                 concatenateStrings·p0.00:   7741.440 us/op
                 concatenateStrings·p0.50:   7847.936 us/op
                 concatenateStrings·p0.90:   7988.838 us/op
                 concatenateStrings·p0.95:   8298.496 us/op
                 concatenateStrings·p0.99:   8426.619 us/op
                 concatenateStrings·p0.999:  8580.825 us/op
                 concatenateStrings·p0.9999: 8585.216 us/op
                 concatenateStrings·p1.00:   8585.216 us/op

Iteration  11: 7908.631 ±(99.9%) 14.087 us/op
                 concatenateStrings·p0.00:   7749.632 us/op
                 concatenateStrings·p0.50:   7864.320 us/op
                 concatenateStrings·p0.90:   8044.544 us/op
                 concatenateStrings·p0.95:   8296.448 us/op
                 concatenateStrings·p0.99:   8558.182 us/op
                 concatenateStrings·p0.999:  8744.714 us/op
                 concatenateStrings·p0.9999: 8749.056 us/op
                 concatenateStrings·p1.00:   8749.056 us/op

Iteration  12: 7897.133 ±(99.9%) 13.020 us/op
                 concatenateStrings·p0.00:   7733.248 us/op
                 concatenateStrings·p0.50:   7856.128 us/op
                 concatenateStrings·p0.90:   7970.816 us/op
                 concatenateStrings·p0.95:   8306.688 us/op
                 concatenateStrings·p0.99:   8404.992 us/op
                 concatenateStrings·p0.999:  8590.623 us/op
                 concatenateStrings·p0.9999: 8634.368 us/op
                 concatenateStrings·p1.00:   8634.368 us/op

Iteration  13: 7919.080 ±(99.9%) 14.593 us/op
                 concatenateStrings·p0.00:   7716.864 us/op
                 concatenateStrings·p0.50:   7880.704 us/op
                 concatenateStrings·p0.90:   8017.510 us/op
                 concatenateStrings·p0.95:   8364.032 us/op
                 concatenateStrings·p0.99:   8525.742 us/op
                 concatenateStrings·p0.999:  8679.211 us/op
                 concatenateStrings·p0.9999: 8683.520 us/op
                 concatenateStrings·p1.00:   8683.520 us/op

Iteration  14: 7908.741 ±(99.9%) 12.922 us/op
                 concatenateStrings·p0.00:   7749.632 us/op
                 concatenateStrings·p0.50:   7872.512 us/op
                 concatenateStrings·p0.90:   7987.200 us/op
                 concatenateStrings·p0.95:   8306.688 us/op
                 concatenateStrings·p0.99:   8470.528 us/op
                 concatenateStrings·p0.999:  8645.427 us/op
                 concatenateStrings·p0.9999: 8667.136 us/op
                 concatenateStrings·p1.00:   8667.136 us/op

Iteration  15: 7932.639 ±(99.9%) 22.613 us/op
                 concatenateStrings·p0.00:   7725.056 us/op
                 concatenateStrings·p0.50:   7872.512 us/op
                 concatenateStrings·p0.90:   8068.301 us/op
                 concatenateStrings·p0.95:   8380.416 us/op
                 concatenateStrings·p0.99:   8601.600 us/op
                 concatenateStrings·p0.999:  11339.121 us/op
                 concatenateStrings·p0.9999: 11403.264 us/op
                 concatenateStrings·p1.00:   11403.264 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 18964
  mean =   7907.542 ±(99.9%) 3.949 us/op

  Histogram, us/op:
    [ 7000.000,  7500.000) = 0 
    [ 7500.000,  8000.000) = 17021 
    [ 8000.000,  8500.000) = 1769 
    [ 8500.000,  9000.000) = 161 
    [ 9000.000,  9500.000) = 4 
    [ 9500.000, 10000.000) = 0 
    [10000.000, 10500.000) = 1 
    [10500.000, 11000.000) = 3 
    [11000.000, 11500.000) = 5 

  Percentiles, us/op:
      p(0.0000) =   7716.864 us/op
     p(50.0000) =   7864.320 us/op
     p(90.0000) =   8011.776 us/op
     p(95.0000) =   8314.880 us/op
     p(99.0000) =   8486.912 us/op
     p(99.9000) =   8880.701 us/op
     p(99.9900) =  11406.655 us/op
     p(99.9990) =  11436.032 us/op
     p(99.9999) =  11436.032 us/op
    p(100.0000) =  11436.032 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 98.55% complete, ETA 00:07:19
# Fork: 1 of 1
# Warmup Iteration   1: 109331.144 ±(99.9%) 2452.091 us/op
# Warmup Iteration   2: 107968.094 ±(99.9%) 626.297 us/op
# Warmup Iteration   3: 107508.637 ±(99.9%) 420.391 us/op
# Warmup Iteration   4: 107887.759 ±(99.9%) 436.142 us/op
# Warmup Iteration   5: 107993.462 ±(99.9%) 414.056 us/op
Iteration   1: 108149.903 ±(99.9%) 407.823 us/op
                 concatenateStrings·p0.00:   105775.104 us/op
                 concatenateStrings·p0.50:   108134.400 us/op
                 concatenateStrings·p0.90:   109707.264 us/op
                 concatenateStrings·p0.95:   110100.480 us/op
                 concatenateStrings·p0.99:   110755.840 us/op
                 concatenateStrings·p0.999:  110755.840 us/op
                 concatenateStrings·p0.9999: 110755.840 us/op
                 concatenateStrings·p1.00:   110755.840 us/op

Iteration   2: 107941.315 ±(99.9%) 460.305 us/op
                 concatenateStrings·p0.00:   104988.672 us/op
                 concatenateStrings·p0.50:   108003.328 us/op
                 concatenateStrings·p0.90:   109707.264 us/op
                 concatenateStrings·p0.95:   110349.517 us/op
                 concatenateStrings·p0.99:   111149.056 us/op
                 concatenateStrings·p0.999:  111149.056 us/op
                 concatenateStrings·p0.9999: 111149.056 us/op
                 concatenateStrings·p1.00:   111149.056 us/op

Iteration   3: 107694.675 ±(99.9%) 406.330 us/op
                 concatenateStrings·p0.00:   105250.816 us/op
                 concatenateStrings·p0.50:   107741.184 us/op
                 concatenateStrings·p0.90:   109314.048 us/op
                 concatenateStrings·p0.95:   109576.192 us/op
                 concatenateStrings·p0.99:   110362.624 us/op
                 concatenateStrings·p0.999:  110362.624 us/op
                 concatenateStrings·p0.9999: 110362.624 us/op
                 concatenateStrings·p1.00:   110362.624 us/op

Iteration   4: 107579.106 ±(99.9%) 417.748 us/op
                 concatenateStrings·p0.00:   105119.744 us/op
                 concatenateStrings·p0.50:   107479.040 us/op
                 concatenateStrings·p0.90:   109392.691 us/op
                 concatenateStrings·p0.95:   109707.264 us/op
                 concatenateStrings·p0.99:   110231.552 us/op
                 concatenateStrings·p0.999:  110231.552 us/op
                 concatenateStrings·p0.9999: 110231.552 us/op
                 concatenateStrings·p1.00:   110231.552 us/op

Iteration   5: 107672.125 ±(99.9%) 411.265 us/op
                 concatenateStrings·p0.00:   105512.960 us/op
                 concatenateStrings·p0.50:   107610.112 us/op
                 concatenateStrings·p0.90:   109314.048 us/op
                 concatenateStrings·p0.95:   109785.907 us/op
                 concatenateStrings·p0.99:   110493.696 us/op
                 concatenateStrings·p0.999:  110493.696 us/op
                 concatenateStrings·p0.9999: 110493.696 us/op
                 concatenateStrings·p1.00:   110493.696 us/op

Iteration   6: 107281.038 ±(99.9%) 404.436 us/op
                 concatenateStrings·p0.00:   104071.168 us/op
                 concatenateStrings·p0.50:   107216.896 us/op
                 concatenateStrings·p0.90:   108527.616 us/op
                 concatenateStrings·p0.95:   109019.136 us/op
                 concatenateStrings·p0.99:   111673.344 us/op
                 concatenateStrings·p0.999:  111673.344 us/op
                 concatenateStrings·p0.9999: 111673.344 us/op
                 concatenateStrings·p1.00:   111673.344 us/op

Iteration   7: 107317.292 ±(99.9%) 461.402 us/op
                 concatenateStrings·p0.00:   105119.744 us/op
                 concatenateStrings·p0.50:   106954.752 us/op
                 concatenateStrings·p0.90:   109182.976 us/op
                 concatenateStrings·p0.95:   109707.264 us/op
                 concatenateStrings·p0.99:   110624.768 us/op
                 concatenateStrings·p0.999:  110624.768 us/op
                 concatenateStrings·p0.9999: 110624.768 us/op
                 concatenateStrings·p1.00:   110624.768 us/op

Iteration   8: 107209.924 ±(99.9%) 347.752 us/op
                 concatenateStrings·p0.00:   105250.816 us/op
                 concatenateStrings·p0.50:   107085.824 us/op
                 concatenateStrings·p0.90:   108593.152 us/op
                 concatenateStrings·p0.95:   108986.368 us/op
                 concatenateStrings·p0.99:   109445.120 us/op
                 concatenateStrings·p0.999:  109445.120 us/op
                 concatenateStrings·p0.9999: 109445.120 us/op
                 concatenateStrings·p1.00:   109445.120 us/op

Iteration   9: 107391.194 ±(99.9%) 419.564 us/op
                 concatenateStrings·p0.00:   104333.312 us/op
                 concatenateStrings·p0.50:   107479.040 us/op
                 concatenateStrings·p0.90:   108986.368 us/op
                 concatenateStrings·p0.95:   109445.120 us/op
                 concatenateStrings·p0.99:   109969.408 us/op
                 concatenateStrings·p0.999:  109969.408 us/op
                 concatenateStrings·p0.9999: 109969.408 us/op
                 concatenateStrings·p1.00:   109969.408 us/op

Iteration  10: 106898.977 ±(99.9%) 361.582 us/op
                 concatenateStrings·p0.00:   104988.672 us/op
                 concatenateStrings·p0.50:   106692.608 us/op
                 concatenateStrings·p0.90:   108396.544 us/op
                 concatenateStrings·p0.95:   108625.920 us/op
                 concatenateStrings·p0.99:   110100.480 us/op
                 concatenateStrings·p0.999:  110100.480 us/op
                 concatenateStrings·p0.9999: 110100.480 us/op
                 concatenateStrings·p1.00:   110100.480 us/op

Iteration  11: 107289.404 ±(99.9%) 374.598 us/op
                 concatenateStrings·p0.00:   104726.528 us/op
                 concatenateStrings·p0.50:   107347.968 us/op
                 concatenateStrings·p0.90:   108658.688 us/op
                 concatenateStrings·p0.95:   109346.816 us/op
                 concatenateStrings·p0.99:   109707.264 us/op
                 concatenateStrings·p0.999:  109707.264 us/op
                 concatenateStrings·p0.9999: 109707.264 us/op
                 concatenateStrings·p1.00:   109707.264 us/op

Iteration  12: 107255.939 ±(99.9%) 343.184 us/op
                 concatenateStrings·p0.00:   104988.672 us/op
                 concatenateStrings·p0.50:   107216.896 us/op
                 concatenateStrings·p0.90:   108527.616 us/op
                 concatenateStrings·p0.95:   108789.760 us/op
                 concatenateStrings·p0.99:   109576.192 us/op
                 concatenateStrings·p0.999:  109576.192 us/op
                 concatenateStrings·p0.9999: 109576.192 us/op
                 concatenateStrings·p1.00:   109576.192 us/op

Iteration  13: 107400.955 ±(99.9%) 382.613 us/op
                 concatenateStrings·p0.00:   105512.960 us/op
                 concatenateStrings·p0.50:   107413.504 us/op
                 concatenateStrings·p0.90:   109117.440 us/op
                 concatenateStrings·p0.95:   109182.976 us/op
                 concatenateStrings·p0.99:   109707.264 us/op
                 concatenateStrings·p0.999:  109707.264 us/op
                 concatenateStrings·p0.9999: 109707.264 us/op
                 concatenateStrings·p1.00:   109707.264 us/op

Iteration  14: 106871.089 ±(99.9%) 339.262 us/op
                 concatenateStrings·p0.00:   104464.384 us/op
                 concatenateStrings·p0.50:   106954.752 us/op
                 concatenateStrings·p0.90:   108003.328 us/op
                 concatenateStrings·p0.95:   108658.688 us/op
                 concatenateStrings·p0.99:   109576.192 us/op
                 concatenateStrings·p0.999:  109576.192 us/op
                 concatenateStrings·p0.9999: 109576.192 us/op
                 concatenateStrings·p1.00:   109576.192 us/op

Iteration  15: 106954.752 ±(99.9%) 394.681 us/op
                 concatenateStrings·p0.00:   104071.168 us/op
                 concatenateStrings·p0.50:   106823.680 us/op
                 concatenateStrings·p0.90:   108396.544 us/op
                 concatenateStrings·p0.95:   109150.208 us/op
                 concatenateStrings·p0.99:   110493.696 us/op
                 concatenateStrings·p0.999:  110493.696 us/op
                 concatenateStrings·p0.9999: 110493.696 us/op
                 concatenateStrings·p1.00:   110493.696 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 1405
  mean = 107392.374 ±(99.9%) 103.706 us/op

  Histogram, us/op:
    [104000.000, 104500.000) = 4 
    [104500.000, 105000.000) = 5 
    [105000.000, 105500.000) = 26 
    [105500.000, 106000.000) = 116 
    [106000.000, 106500.000) = 205 
    [106500.000, 107000.000) = 208 
    [107000.000, 107500.000) = 233 
    [107500.000, 108000.000) = 170 
    [108000.000, 108500.000) = 177 
    [108500.000, 109000.000) = 118 
    [109000.000, 109500.000) = 81 
    [109500.000, 110000.000) = 37 
    [110000.000, 110500.000) = 16 
    [110500.000, 111000.000) = 6 
    [111000.000, 111500.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 104071.168 us/op
     p(50.0000) = 107347.968 us/op
     p(90.0000) = 109051.904 us/op
     p(95.0000) = 109445.120 us/op
     p(99.0000) = 110362.624 us/op
     p(99.9000) = 111460.483 us/op
     p(99.9900) = 111673.344 us/op
     p(99.9990) = 111673.344 us/op
     p(99.9999) = 111673.344 us/op
    p(100.0000) = 111673.344 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 99.27% complete, ETA 00:03:40
# Fork: 1 of 1
# Warmup Iteration   1: 1927632.213 ±(99.9%) 673986.699 us/op
# Warmup Iteration   2: 1688506.953 ±(99.9%) 393151.323 us/op
# Warmup Iteration   3: 1673177.771 ±(99.9%) 279209.281 us/op
# Warmup Iteration   4: 1685511.022 ±(99.9%) 453773.873 us/op
# Warmup Iteration   5: 1687907.767 ±(99.9%) 461062.924 us/op
Iteration   1: 1686110.208 ±(99.9%) 465337.956 us/op
                 createNewObjectsWithRecursive·p0.00:   1480589.312 us/op
                 createNewObjectsWithRecursive·p0.50:   1644167.168 us/op
                 createNewObjectsWithRecursive·p0.90:   2113929.216 us/op
                 createNewObjectsWithRecursive·p0.95:   2113929.216 us/op
                 createNewObjectsWithRecursive·p0.99:   2113929.216 us/op
                 createNewObjectsWithRecursive·p0.999:  2113929.216 us/op
                 createNewObjectsWithRecursive·p0.9999: 2113929.216 us/op
                 createNewObjectsWithRecursive·p1.00:   2113929.216 us/op

Iteration   2: 1714571.557 ±(99.9%) 421074.943 us/op
                 createNewObjectsWithRecursive·p0.00:   1526726.656 us/op
                 createNewObjectsWithRecursive·p0.50:   1652555.776 us/op
                 createNewObjectsWithRecursive·p0.90:   2080374.784 us/op
                 createNewObjectsWithRecursive·p0.95:   2080374.784 us/op
                 createNewObjectsWithRecursive·p0.99:   2080374.784 us/op
                 createNewObjectsWithRecursive·p0.999:  2080374.784 us/op
                 createNewObjectsWithRecursive·p0.9999: 2080374.784 us/op
                 createNewObjectsWithRecursive·p1.00:   2080374.784 us/op

Iteration   3: 1716968.302 ±(99.9%) 395812.003 us/op
                 createNewObjectsWithRecursive·p0.00:   1528823.808 us/op
                 createNewObjectsWithRecursive·p0.50:   1671430.144 us/op
                 createNewObjectsWithRecursive·p0.90:   2055208.960 us/op
                 createNewObjectsWithRecursive·p0.95:   2055208.960 us/op
                 createNewObjectsWithRecursive·p0.99:   2055208.960 us/op
                 createNewObjectsWithRecursive·p0.999:  2055208.960 us/op
                 createNewObjectsWithRecursive·p0.9999: 2055208.960 us/op
                 createNewObjectsWithRecursive·p1.00:   2055208.960 us/op

Iteration   4: 1682814.683 ±(99.9%) 458389.323 us/op
                 createNewObjectsWithRecursive·p0.00:   1484783.616 us/op
                 createNewObjectsWithRecursive·p0.50:   1652555.776 us/op
                 createNewObjectsWithRecursive·p0.90:   2101346.304 us/op
                 createNewObjectsWithRecursive·p0.95:   2101346.304 us/op
                 createNewObjectsWithRecursive·p0.99:   2101346.304 us/op
                 createNewObjectsWithRecursive·p0.999:  2101346.304 us/op
                 createNewObjectsWithRecursive·p0.9999: 2101346.304 us/op
                 createNewObjectsWithRecursive·p1.00:   2101346.304 us/op

Iteration   5: 1681616.311 ±(99.9%) 462938.108 us/op
                 createNewObjectsWithRecursive·p0.00:   1474297.856 us/op
                 createNewObjectsWithRecursive·p0.50:   1635778.560 us/op
                 createNewObjectsWithRecursive·p0.90:   2105540.608 us/op
                 createNewObjectsWithRecursive·p0.95:   2105540.608 us/op
                 createNewObjectsWithRecursive·p0.99:   2105540.608 us/op
                 createNewObjectsWithRecursive·p0.999:  2105540.608 us/op
                 createNewObjectsWithRecursive·p0.9999: 2105540.608 us/op
                 createNewObjectsWithRecursive·p1.00:   2105540.608 us/op

Iteration   6: 1705883.355 ±(99.9%) 446439.583 us/op
                 createNewObjectsWithRecursive·p0.00:   1503657.984 us/op
                 createNewObjectsWithRecursive·p0.50:   1654652.928 us/op
                 createNewObjectsWithRecursive·p0.90:   2116026.368 us/op
                 createNewObjectsWithRecursive·p0.95:   2116026.368 us/op
                 createNewObjectsWithRecursive·p0.99:   2116026.368 us/op
                 createNewObjectsWithRecursive·p0.999:  2116026.368 us/op
                 createNewObjectsWithRecursive·p0.9999: 2116026.368 us/op
                 createNewObjectsWithRecursive·p1.00:   2116026.368 us/op

Iteration   7: 1694498.816 ±(99.9%) 457757.356 us/op
                 createNewObjectsWithRecursive·p0.00:   1488977.920 us/op
                 createNewObjectsWithRecursive·p0.50:   1654652.928 us/op
                 createNewObjectsWithRecursive·p0.90:   2116026.368 us/op
                 createNewObjectsWithRecursive·p0.95:   2116026.368 us/op
                 createNewObjectsWithRecursive·p0.99:   2116026.368 us/op
                 createNewObjectsWithRecursive·p0.999:  2116026.368 us/op
                 createNewObjectsWithRecursive·p0.9999: 2116026.368 us/op
                 createNewObjectsWithRecursive·p1.00:   2116026.368 us/op

Iteration   8: 1688806.546 ±(99.9%) 451613.734 us/op
                 createNewObjectsWithRecursive·p0.00:   1484783.616 us/op
                 createNewObjectsWithRecursive·p0.50:   1654652.928 us/op
                 createNewObjectsWithRecursive·p0.90:   2101346.304 us/op
                 createNewObjectsWithRecursive·p0.95:   2101346.304 us/op
                 createNewObjectsWithRecursive·p0.99:   2101346.304 us/op
                 createNewObjectsWithRecursive·p0.999:  2101346.304 us/op
                 createNewObjectsWithRecursive·p0.9999: 2101346.304 us/op
                 createNewObjectsWithRecursive·p1.00:   2101346.304 us/op

Iteration   9: 1698393.527 ±(99.9%) 466450.699 us/op
                 createNewObjectsWithRecursive·p0.00:   1484783.616 us/op
                 createNewObjectsWithRecursive·p0.50:   1667235.840 us/op
                 createNewObjectsWithRecursive·p0.90:   2124414.976 us/op
                 createNewObjectsWithRecursive·p0.95:   2124414.976 us/op
                 createNewObjectsWithRecursive·p0.99:   2124414.976 us/op
                 createNewObjectsWithRecursive·p0.999:  2124414.976 us/op
                 createNewObjectsWithRecursive·p0.9999: 2124414.976 us/op
                 createNewObjectsWithRecursive·p1.00:   2124414.976 us/op

Iteration  10: 1697494.747 ±(99.9%) 449038.843 us/op
                 createNewObjectsWithRecursive·p0.00:   1499463.680 us/op
                 createNewObjectsWithRecursive·p0.50:   1654652.928 us/op
                 createNewObjectsWithRecursive·p0.90:   2109734.912 us/op
                 createNewObjectsWithRecursive·p0.95:   2109734.912 us/op
                 createNewObjectsWithRecursive·p0.99:   2109734.912 us/op
                 createNewObjectsWithRecursive·p0.999:  2109734.912 us/op
                 createNewObjectsWithRecursive·p0.9999: 2109734.912 us/op
                 createNewObjectsWithRecursive·p1.00:   2109734.912 us/op

Iteration  11: 1689106.139 ±(99.9%) 465017.093 us/op
                 createNewObjectsWithRecursive·p0.00:   1480589.312 us/op
                 createNewObjectsWithRecursive·p0.50:   1650458.624 us/op
                 createNewObjectsWithRecursive·p0.90:   2118123.520 us/op
                 createNewObjectsWithRecursive·p0.95:   2118123.520 us/op
                 createNewObjectsWithRecursive·p0.99:   2118123.520 us/op
                 createNewObjectsWithRecursive·p0.999:  2118123.520 us/op
                 createNewObjectsWithRecursive·p0.9999: 2118123.520 us/op
                 createNewObjectsWithRecursive·p1.00:   2118123.520 us/op

Iteration  12: 1690903.698 ±(99.9%) 471235.085 us/op
                 createNewObjectsWithRecursive·p0.00:   1486880.768 us/op
                 createNewObjectsWithRecursive·p0.50:   1639972.864 us/op
                 createNewObjectsWithRecursive·p0.90:   2128609.280 us/op
                 createNewObjectsWithRecursive·p0.95:   2128609.280 us/op
                 createNewObjectsWithRecursive·p0.99:   2128609.280 us/op
                 createNewObjectsWithRecursive·p0.999:  2128609.280 us/op
                 createNewObjectsWithRecursive·p0.9999: 2128609.280 us/op
                 createNewObjectsWithRecursive·p1.00:   2128609.280 us/op

Iteration  13: 1693899.630 ±(99.9%) 460007.588 us/op
                 createNewObjectsWithRecursive·p0.00:   1484783.616 us/op
                 createNewObjectsWithRecursive·p0.50:   1652555.776 us/op
                 createNewObjectsWithRecursive·p0.90:   2116026.368 us/op
                 createNewObjectsWithRecursive·p0.95:   2116026.368 us/op
                 createNewObjectsWithRecursive·p0.99:   2116026.368 us/op
                 createNewObjectsWithRecursive·p0.999:  2116026.368 us/op
                 createNewObjectsWithRecursive·p0.9999: 2116026.368 us/op
                 createNewObjectsWithRecursive·p1.00:   2116026.368 us/op

Iteration  14: 1685211.429 ±(99.9%) 461009.926 us/op
                 createNewObjectsWithRecursive·p0.00:   1484783.616 us/op
                 createNewObjectsWithRecursive·p0.50:   1635778.560 us/op
                 createNewObjectsWithRecursive·p0.90:   2107637.760 us/op
                 createNewObjectsWithRecursive·p0.95:   2107637.760 us/op
                 createNewObjectsWithRecursive·p0.99:   2107637.760 us/op
                 createNewObjectsWithRecursive·p0.999:  2107637.760 us/op
                 createNewObjectsWithRecursive·p0.9999: 2107637.760 us/op
                 createNewObjectsWithRecursive·p1.00:   2107637.760 us/op

Iteration  15: 1684612.242 ±(99.9%) 469559.364 us/op
                 createNewObjectsWithRecursive·p0.00:   1484783.616 us/op
                 createNewObjectsWithRecursive·p0.50:   1633681.408 us/op
                 createNewObjectsWithRecursive·p0.90:   2120220.672 us/op
                 createNewObjectsWithRecursive·p0.95:   2120220.672 us/op
                 createNewObjectsWithRecursive·p0.99:   2120220.672 us/op
                 createNewObjectsWithRecursive·p0.999:  2120220.672 us/op
                 createNewObjectsWithRecursive·p0.9999: 2120220.672 us/op
                 createNewObjectsWithRecursive·p1.00:   2120220.672 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  N = 105
  mean = 1694059.413 ±(99.9%) 62055.950 us/op

  Histogram, us/op:
    [1400000.000, 1450000.000) = 0 
    [1450000.000, 1500000.000) = 12 
    [1500000.000, 1550000.000) = 9 
    [1550000.000, 1600000.000) = 10 
    [1600000.000, 1650000.000) = 19 
    [1650000.000, 1700000.000) = 23 
    [1700000.000, 1750000.000) = 14 
    [1750000.000, 1800000.000) = 1 
    [1800000.000, 1850000.000) = 2 
    [1850000.000, 1900000.000) = 0 
    [1900000.000, 1950000.000) = 0 
    [1950000.000, 2000000.000) = 0 
    [2000000.000, 2050000.000) = 0 
    [2050000.000, 2100000.000) = 2 
    [2100000.000, 2150000.000) = 13 

  Percentiles, us/op:
      p(0.0000) = 1474297.856 us/op
     p(50.0000) = 1652555.776 us/op
     p(90.0000) = 2106379.469 us/op
     p(95.0000) = 2116026.368 us/op
     p(99.0000) = 2128357.622 us/op
     p(99.9000) = 2128609.280 us/op
     p(99.9900) = 2128609.280 us/op
     p(99.9990) = 2128609.280 us/op
     p(99.9999) = 2128609.280 us/op
    p(100.0000) = 2128609.280 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 100.00% complete, ETA 00:00:01
# Fork: 1 of 1
# Warmup Iteration   1: 356943.236 us/op
# Warmup Iteration   2: 222181.411 us/op
# Warmup Iteration   3: 198917.297 us/op
# Warmup Iteration   4: 198411.783 us/op
# Warmup Iteration   5: 196925.622 us/op
Iteration   1: 199159.859 us/op
Iteration   2: 199894.338 us/op
Iteration   3: 195715.046 us/op
Iteration   4: 195338.307 us/op
Iteration   5: 193584.971 us/op
Iteration   6: 193355.773 us/op
Iteration   7: 194440.882 us/op
Iteration   8: 195881.885 us/op
Iteration   9: 193890.999 us/op
Iteration  10: 194171.033 us/op
Iteration  11: 194113.145 us/op
Iteration  12: 194040.475 us/op
Iteration  13: 194908.890 us/op
Iteration  14: 195984.332 us/op
Iteration  15: 196938.363 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 195427.887 ±(99.9%) 2085.809 us/op

  Histogram, us/op:
    [193000.000, 193500.000) = 1 
    [193500.000, 194000.000) = 2 
    [194000.000, 194500.000) = 4 
    [194500.000, 195000.000) = 1 
    [195000.000, 195500.000) = 1 
    [195500.000, 196000.000) = 3 
    [196000.000, 196500.000) = 0 
    [196500.000, 197000.000) = 1 
    [197000.000, 197500.000) = 0 
    [197500.000, 198000.000) = 0 
    [198000.000, 198500.000) = 0 
    [198500.000, 199000.000) = 0 
    [199000.000, 199500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 193355.773 us/op
     p(50.0000) = 194908.890 us/op
     p(90.0000) = 199453.651 us/op
     p(95.0000) = 199894.338 us/op
     p(99.0000) = 199894.338 us/op
     p(99.9000) = 199894.338 us/op
     p(99.9900) = 199894.338 us/op
     p(99.9990) = 199894.338 us/op
     p(99.9999) = 199894.338 us/op
    p(100.0000) = 199894.338 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 285829.427 us/op
# Warmup Iteration   2: 182547.592 us/op
# Warmup Iteration   3: 152470.646 us/op
# Warmup Iteration   4: 152482.152 us/op
# Warmup Iteration   5: 152464.803 us/op
Iteration   1: 151676.525 us/op
Iteration   2: 151801.407 us/op
Iteration   3: 149580.540 us/op
Iteration   4: 149823.194 us/op
Iteration   5: 152246.255 us/op
Iteration   6: 151798.579 us/op
Iteration   7: 149790.835 us/op
Iteration   8: 151357.367 us/op
Iteration   9: 151913.303 us/op
Iteration  10: 151965.517 us/op
Iteration  11: 150943.567 us/op
Iteration  12: 150804.402 us/op
Iteration  13: 151072.580 us/op
Iteration  14: 151258.901 us/op
Iteration  15: 152173.437 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 151213.761 ±(99.9%) 941.224 us/op

  Histogram, us/op:
    [149000.000, 149250.000) = 0 
    [149250.000, 149500.000) = 0 
    [149500.000, 149750.000) = 1 
    [149750.000, 150000.000) = 2 
    [150000.000, 150250.000) = 0 
    [150250.000, 150500.000) = 0 
    [150500.000, 150750.000) = 0 
    [150750.000, 151000.000) = 2 
    [151000.000, 151250.000) = 1 
    [151250.000, 151500.000) = 2 
    [151500.000, 151750.000) = 1 
    [151750.000, 152000.000) = 4 
    [152000.000, 152250.000) = 2 
    [152250.000, 152500.000) = 0 
    [152500.000, 152750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 149580.540 us/op
     p(50.0000) = 151357.367 us/op
     p(90.0000) = 152202.564 us/op
     p(95.0000) = 152246.255 us/op
     p(99.0000) = 152246.255 us/op
     p(99.9000) = 152246.255 us/op
     p(99.9900) = 152246.255 us/op
     p(99.9990) = 152246.255 us/op
     p(99.9999) = 152246.255 us/op
    p(100.0000) = 152246.255 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 274243.191 us/op
# Warmup Iteration   2: 211137.521 us/op
# Warmup Iteration   3: 206348.757 us/op
# Warmup Iteration   4: 202365.211 us/op
# Warmup Iteration   5: 176383.728 us/op
Iteration   1: 152034.975 us/op
Iteration   2: 150497.881 us/op
Iteration   3: 153744.572 us/op
Iteration   4: 170259.660 us/op
Iteration   5: 147936.793 us/op
Iteration   6: 148039.723 us/op
Iteration   7: 148008.342 us/op
Iteration   8: 148626.407 us/op
Iteration   9: 150094.371 us/op
Iteration  10: 148405.943 us/op
Iteration  11: 149480.025 us/op
Iteration  12: 148425.170 us/op
Iteration  13: 148438.453 us/op
Iteration  14: 148672.264 us/op
Iteration  15: 148432.998 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 150739.838 ±(99.9%) 6037.823 us/op

  Histogram, us/op:
    [140000.000, 142500.000) = 0 
    [142500.000, 145000.000) = 0 
    [145000.000, 147500.000) = 0 
    [147500.000, 150000.000) = 10 
    [150000.000, 152500.000) = 3 
    [152500.000, 155000.000) = 1 
    [155000.000, 157500.000) = 0 
    [157500.000, 160000.000) = 0 
    [160000.000, 162500.000) = 0 
    [162500.000, 165000.000) = 0 
    [165000.000, 167500.000) = 0 
    [167500.000, 170000.000) = 0 
    [170000.000, 172500.000) = 1 
    [172500.000, 175000.000) = 0 
    [175000.000, 177500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 147936.793 us/op
     p(50.0000) = 148626.407 us/op
     p(90.0000) = 160350.607 us/op
     p(95.0000) = 170259.660 us/op
     p(99.0000) = 170259.660 us/op
     p(99.9000) = 170259.660 us/op
     p(99.9900) = 170259.660 us/op
     p(99.9990) = 170259.660 us/op
     p(99.9999) = 170259.660 us/op
    p(100.0000) = 170259.660 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 258721.804 us/op
# Warmup Iteration   2: 204131.710 us/op
# Warmup Iteration   3: 199461.757 us/op
# Warmup Iteration   4: 199999.537 us/op
# Warmup Iteration   5: 199954.915 us/op
Iteration   1: 198148.502 us/op
Iteration   2: 197525.070 us/op
Iteration   3: 200395.050 us/op
Iteration   4: 200432.030 us/op
Iteration   5: 201307.640 us/op
Iteration   6: 199969.481 us/op
Iteration   7: 199344.354 us/op
Iteration   8: 197662.826 us/op
Iteration   9: 197745.729 us/op
Iteration  10: 200333.333 us/op
Iteration  11: 199687.664 us/op
Iteration  12: 201351.431 us/op
Iteration  13: 202459.949 us/op
Iteration  14: 199357.527 us/op
Iteration  15: 199273.641 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 199666.282 ±(99.9%) 1563.303 us/op

  Histogram, us/op:
    [197000.000, 197500.000) = 0 
    [197500.000, 198000.000) = 3 
    [198000.000, 198500.000) = 1 
    [198500.000, 199000.000) = 0 
    [199000.000, 199500.000) = 3 
    [199500.000, 200000.000) = 2 
    [200000.000, 200500.000) = 3 
    [200500.000, 201000.000) = 0 
    [201000.000, 201500.000) = 2 
    [201500.000, 202000.000) = 0 
    [202000.000, 202500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 197525.070 us/op
     p(50.0000) = 199687.664 us/op
     p(90.0000) = 201794.838 us/op
     p(95.0000) = 202459.949 us/op
     p(99.0000) = 202459.949 us/op
     p(99.9000) = 202459.949 us/op
     p(99.9900) = 202459.949 us/op
     p(99.9990) = 202459.949 us/op
     p(99.9999) = 202459.949 us/op
    p(100.0000) = 202459.949 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 244140.456 us/op
# Warmup Iteration   2: 201683.980 us/op
# Warmup Iteration   3: 199255.665 us/op
# Warmup Iteration   4: 198938.509 us/op
# Warmup Iteration   5: 199931.620 us/op
Iteration   1: 198249.538 us/op
Iteration   2: 198893.828 us/op
Iteration   3: 199114.277 us/op
Iteration   4: 199136.811 us/op
Iteration   5: 198993.342 us/op
Iteration   6: 199016.201 us/op
Iteration   7: 199351.871 us/op
Iteration   8: 198745.048 us/op
Iteration   9: 198908.696 us/op
Iteration  10: 200378.084 us/op
Iteration  11: 199097.384 us/op
Iteration  12: 198941.830 us/op
Iteration  13: 199701.351 us/op
Iteration  14: 200948.302 us/op
Iteration  15: 198965.195 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 199229.451 ±(99.9%) 712.291 us/op

  Histogram, us/op:
    [198000.000, 198250.000) = 1 
    [198250.000, 198500.000) = 0 
    [198500.000, 198750.000) = 1 
    [198750.000, 199000.000) = 5 
    [199000.000, 199250.000) = 4 
    [199250.000, 199500.000) = 1 
    [199500.000, 199750.000) = 1 
    [199750.000, 200000.000) = 0 
    [200000.000, 200250.000) = 0 
    [200250.000, 200500.000) = 1 
    [200500.000, 200750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 198249.538 us/op
     p(50.0000) = 199016.201 us/op
     p(90.0000) = 200606.171 us/op
     p(95.0000) = 200948.302 us/op
     p(99.0000) = 200948.302 us/op
     p(99.9000) = 200948.302 us/op
     p(99.9900) = 200948.302 us/op
     p(99.9990) = 200948.302 us/op
     p(99.9999) = 200948.302 us/op
    p(100.0000) = 200948.302 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 209053.923 us/op
# Warmup Iteration   2: 196979.229 us/op
# Warmup Iteration   3: 198111.873 us/op
# Warmup Iteration   4: 193110.806 us/op
# Warmup Iteration   5: 196209.772 us/op
Iteration   1: 196262.942 us/op
Iteration   2: 194098.471 us/op
Iteration   3: 193560.361 us/op
Iteration   4: 194837.515 us/op
Iteration   5: 193035.394 us/op
Iteration   6: 194688.688 us/op
Iteration   7: 194278.213 us/op
Iteration   8: 192833.472 us/op
Iteration   9: 192927.192 us/op
Iteration  10: 194895.258 us/op
Iteration  11: 193317.005 us/op
Iteration  12: 194269.334 us/op
Iteration  13: 193054.672 us/op
Iteration  14: 194475.216 us/op
Iteration  15: 194093.308 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 194041.803 ±(99.9%) 1008.617 us/op

  Histogram, us/op:
    [192000.000, 192500.000) = 0 
    [192500.000, 193000.000) = 2 
    [193000.000, 193500.000) = 3 
    [193500.000, 194000.000) = 1 
    [194000.000, 194500.000) = 5 
    [194500.000, 195000.000) = 3 
    [195000.000, 195500.000) = 0 
    [195500.000, 196000.000) = 0 
    [196000.000, 196500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 192833.472 us/op
     p(50.0000) = 194098.471 us/op
     p(90.0000) = 195442.332 us/op
     p(95.0000) = 196262.942 us/op
     p(99.0000) = 196262.942 us/op
     p(99.9000) = 196262.942 us/op
     p(99.9900) = 196262.942 us/op
     p(99.9990) = 196262.942 us/op
     p(99.9999) = 196262.942 us/op
    p(100.0000) = 196262.942 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1584915.964 us/op
# Warmup Iteration   2: 1717096.073 us/op
# Warmup Iteration   3: 1176175.079 us/op
# Warmup Iteration   4: 1182705.141 us/op
# Warmup Iteration   5: 1187168.937 us/op
Iteration   1: 1180581.747 us/op
Iteration   2: 1194001.222 us/op
Iteration   3: 1184725.931 us/op
Iteration   4: 1184600.045 us/op
Iteration   5: 1188885.058 us/op
Iteration   6: 1190767.761 us/op
Iteration   7: 1182140.411 us/op
Iteration   8: 1178609.327 us/op
Iteration   9: 1192519.381 us/op
Iteration  10: 1188142.408 us/op
Iteration  11: 1185713.420 us/op
Iteration  12: 1184754.041 us/op
Iteration  13: 1185395.445 us/op
Iteration  14: 1187037.553 us/op
Iteration  15: 1181722.261 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 1185973.067 ±(99.9%) 4659.846 us/op

  Histogram, us/op:
    [1170000.000, 1172500.000) = 0 
    [1172500.000, 1175000.000) = 0 
    [1175000.000, 1177500.000) = 0 
    [1177500.000, 1180000.000) = 1 
    [1180000.000, 1182500.000) = 3 
    [1182500.000, 1185000.000) = 3 
    [1185000.000, 1187500.000) = 3 
    [1187500.000, 1190000.000) = 2 
    [1190000.000, 1192500.000) = 1 
    [1192500.000, 1195000.000) = 2 
    [1195000.000, 1197500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1178609.327 us/op
     p(50.0000) = 1185395.445 us/op
     p(90.0000) = 1193112.117 us/op
     p(95.0000) = 1194001.222 us/op
     p(99.0000) = 1194001.222 us/op
     p(99.9000) = 1194001.222 us/op
     p(99.9900) = 1194001.222 us/op
     p(99.9990) = 1194001.222 us/op
     p(99.9999) = 1194001.222 us/op
    p(100.0000) = 1194001.222 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1202861.340 us/op
# Warmup Iteration   2: 814576.687 us/op
# Warmup Iteration   3: 811119.774 us/op
# Warmup Iteration   4: 804466.635 us/op
# Warmup Iteration   5: 805053.488 us/op
Iteration   1: 802130.688 us/op
Iteration   2: 813257.753 us/op
Iteration   3: 807841.975 us/op
Iteration   4: 812311.871 us/op
Iteration   5: 815879.359 us/op
Iteration   6: 809179.004 us/op
Iteration   7: 814008.285 us/op
Iteration   8: 805532.569 us/op
Iteration   9: 808608.816 us/op
Iteration  10: 814142.066 us/op
Iteration  11: 814803.925 us/op
Iteration  12: 817942.089 us/op
Iteration  13: 816364.165 us/op
Iteration  14: 815796.959 us/op
Iteration  15: 818501.045 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 812420.038 ±(99.9%) 5091.716 us/op

  Histogram, us/op:
    [800000.000, 801250.000) = 0 
    [801250.000, 802500.000) = 1 
    [802500.000, 803750.000) = 0 
    [803750.000, 805000.000) = 0 
    [805000.000, 806250.000) = 1 
    [806250.000, 807500.000) = 0 
    [807500.000, 808750.000) = 2 
    [808750.000, 810000.000) = 1 
    [810000.000, 811250.000) = 0 
    [811250.000, 812500.000) = 1 
    [812500.000, 813750.000) = 1 
    [813750.000, 815000.000) = 3 
    [815000.000, 816250.000) = 2 
    [816250.000, 817500.000) = 1 
    [817500.000, 818750.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 802130.688 us/op
     p(50.0000) = 814008.285 us/op
     p(90.0000) = 818165.671 us/op
     p(95.0000) = 818501.045 us/op
     p(99.0000) = 818501.045 us/op
     p(99.9000) = 818501.045 us/op
     p(99.9900) = 818501.045 us/op
     p(99.9990) = 818501.045 us/op
     p(99.9999) = 818501.045 us/op
    p(100.0000) = 818501.045 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1012027.430 us/op
# Warmup Iteration   2: 811439.589 us/op
# Warmup Iteration   3: 767616.760 us/op
# Warmup Iteration   4: 726259.396 us/op
# Warmup Iteration   5: 729209.576 us/op
Iteration   1: 731330.044 us/op
Iteration   2: 722281.256 us/op
Iteration   3: 714283.761 us/op
Iteration   4: 727656.487 us/op
Iteration   5: 725164.253 us/op
Iteration   6: 723985.001 us/op
Iteration   7: 726669.463 us/op
Iteration   8: 723264.659 us/op
Iteration   9: 720434.442 us/op
Iteration  10: 738265.540 us/op
Iteration  11: 741985.986 us/op
Iteration  12: 736136.449 us/op
Iteration  13: 732184.807 us/op
Iteration  14: 726066.546 us/op
Iteration  15: 725497.487 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 727680.412 ±(99.9%) 7723.980 us/op

  Histogram, us/op:
    [710000.000, 712500.000) = 0 
    [712500.000, 715000.000) = 1 
    [715000.000, 717500.000) = 0 
    [717500.000, 720000.000) = 0 
    [720000.000, 722500.000) = 2 
    [722500.000, 725000.000) = 2 
    [725000.000, 727500.000) = 4 
    [727500.000, 730000.000) = 1 
    [730000.000, 732500.000) = 2 
    [732500.000, 735000.000) = 0 
    [735000.000, 737500.000) = 1 
    [737500.000, 740000.000) = 1 
    [740000.000, 742500.000) = 1 
    [742500.000, 745000.000) = 0 
    [745000.000, 747500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 714283.761 us/op
     p(50.0000) = 726066.546 us/op
     p(90.0000) = 739753.718 us/op
     p(95.0000) = 741985.986 us/op
     p(99.0000) = 741985.986 us/op
     p(99.9000) = 741985.986 us/op
     p(99.9900) = 741985.986 us/op
     p(99.9990) = 741985.986 us/op
     p(99.9999) = 741985.986 us/op
    p(100.0000) = 741985.986 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1015218.371 us/op
# Warmup Iteration   2: 795247.580 us/op
# Warmup Iteration   3: 802926.114 us/op
# Warmup Iteration   4: 814904.311 us/op
# Warmup Iteration   5: 806029.396 us/op
Iteration   1: 807529.702 us/op
Iteration   2: 802093.487 us/op
Iteration   3: 803594.737 us/op
Iteration   4: 806587.718 us/op
Iteration   5: 799585.207 us/op
Iteration   6: 800043.068 us/op
Iteration   7: 804481.733 us/op
Iteration   8: 804815.049 us/op
Iteration   9: 815096.144 us/op
Iteration  10: 806032.513 us/op
Iteration  11: 803572.178 us/op
Iteration  12: 794504.430 us/op
Iteration  13: 813361.377 us/op
Iteration  14: 800982.079 us/op
Iteration  15: 804256.527 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 804435.730 ±(99.9%) 5500.090 us/op

  Histogram, us/op:
    [790000.000, 792500.000) = 0 
    [792500.000, 795000.000) = 1 
    [795000.000, 797500.000) = 0 
    [797500.000, 800000.000) = 1 
    [800000.000, 802500.000) = 3 
    [802500.000, 805000.000) = 5 
    [805000.000, 807500.000) = 2 
    [807500.000, 810000.000) = 1 
    [810000.000, 812500.000) = 0 
    [812500.000, 815000.000) = 1 
    [815000.000, 817500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 794504.430 us/op
     p(50.0000) = 804256.527 us/op
     p(90.0000) = 814055.284 us/op
     p(95.0000) = 815096.144 us/op
     p(99.0000) = 815096.144 us/op
     p(99.9000) = 815096.144 us/op
     p(99.9900) = 815096.144 us/op
     p(99.9990) = 815096.144 us/op
     p(99.9999) = 815096.144 us/op
    p(100.0000) = 815096.144 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 943938.119 us/op
# Warmup Iteration   2: 872902.083 us/op
# Warmup Iteration   3: 789780.475 us/op
# Warmup Iteration   4: 786699.835 us/op
# Warmup Iteration   5: 796045.528 us/op
Iteration   1: 793315.960 us/op
Iteration   2: 787487.904 us/op
Iteration   3: 791290.576 us/op
Iteration   4: 782143.557 us/op
Iteration   5: 785639.218 us/op
Iteration   6: 789289.135 us/op
Iteration   7: 799382.830 us/op
Iteration   8: 787416.462 us/op
Iteration   9: 793575.264 us/op
Iteration  10: 801254.812 us/op
Iteration  11: 802844.758 us/op
Iteration  12: 797312.246 us/op
Iteration  13: 795530.406 us/op
Iteration  14: 798729.772 us/op
Iteration  15: 791733.301 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 793129.747 ±(99.9%) 6488.442 us/op

  Histogram, us/op:
    [780000.000, 782500.000) = 1 
    [782500.000, 785000.000) = 0 
    [785000.000, 787500.000) = 3 
    [787500.000, 790000.000) = 1 
    [790000.000, 792500.000) = 2 
    [792500.000, 795000.000) = 2 
    [795000.000, 797500.000) = 2 
    [797500.000, 800000.000) = 2 
    [800000.000, 802500.000) = 1 
    [802500.000, 805000.000) = 1 
    [805000.000, 807500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 782143.557 us/op
     p(50.0000) = 793315.960 us/op
     p(90.0000) = 801890.790 us/op
     p(95.0000) = 802844.758 us/op
     p(99.0000) = 802844.758 us/op
     p(99.9000) = 802844.758 us/op
     p(99.9900) = 802844.758 us/op
     p(99.9990) = 802844.758 us/op
     p(99.9999) = 802844.758 us/op
    p(100.0000) = 802844.758 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 911227.505 us/op
# Warmup Iteration   2: 887359.048 us/op
# Warmup Iteration   3: 929510.540 us/op
# Warmup Iteration   4: 930050.761 us/op
# Warmup Iteration   5: 928078.920 us/op
Iteration   1: 927579.170 us/op
Iteration   2: 925990.113 us/op
Iteration   3: 931834.058 us/op
Iteration   4: 929853.593 us/op
Iteration   5: 927771.977 us/op
Iteration   6: 935436.447 us/op
Iteration   7: 928068.248 us/op
Iteration   8: 927896.119 us/op
Iteration   9: 928206.891 us/op
Iteration  10: 928061.066 us/op
Iteration  11: 932183.010 us/op
Iteration  12: 931471.493 us/op
Iteration  13: 932476.960 us/op
Iteration  14: 928985.317 us/op
Iteration  15: 927807.561 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 929574.802 ±(99.9%) 2728.083 us/op

  Histogram, us/op:
    [925000.000, 926000.000) = 1 
    [926000.000, 927000.000) = 0 
    [927000.000, 928000.000) = 4 
    [928000.000, 929000.000) = 4 
    [929000.000, 930000.000) = 1 
    [930000.000, 931000.000) = 0 
    [931000.000, 932000.000) = 2 
    [932000.000, 933000.000) = 2 
    [933000.000, 934000.000) = 0 
    [934000.000, 935000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 925990.113 us/op
     p(50.0000) = 928206.891 us/op
     p(90.0000) = 933660.755 us/op
     p(95.0000) = 935436.447 us/op
     p(99.0000) = 935436.447 us/op
     p(99.9000) = 935436.447 us/op
     p(99.9900) = 935436.447 us/op
     p(99.9990) = 935436.447 us/op
     p(99.9999) = 935436.447 us/op
    p(100.0000) = 935436.447 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 15917.812 us/op
# Warmup Iteration   2: 935.170 us/op
# Warmup Iteration   3: 587.291 us/op
# Warmup Iteration   4: 596.534 us/op
# Warmup Iteration   5: 618.911 us/op
Iteration   1: 572.702 us/op
Iteration   2: 620.837 us/op
Iteration   3: 600.642 us/op
Iteration   4: 574.218 us/op
Iteration   5: 625.418 us/op
Iteration   6: 573.331 us/op
Iteration   7: 593.967 us/op
Iteration   8: 608.023 us/op
Iteration   9: 620.418 us/op
Iteration  10: 576.364 us/op
Iteration  11: 702.238 us/op
Iteration  12: 551.099 us/op
Iteration  13: 585.086 us/op
Iteration  14: 569.206 us/op
Iteration  15: 633.165 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  N = 15
  mean =    600.448 ±(99.9%) 39.785 us/op

  Histogram, us/op:
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 0 
    [550.000, 575.000) = 5 
    [575.000, 600.000) = 3 
    [600.000, 625.000) = 4 
    [625.000, 650.000) = 2 
    [650.000, 675.000) = 0 
    [675.000, 700.000) = 0 
    [700.000, 725.000) = 1 
    [725.000, 750.000) = 0 
    [750.000, 775.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    551.099 us/op
     p(50.0000) =    593.967 us/op
     p(90.0000) =    660.794 us/op
     p(95.0000) =    702.238 us/op
     p(99.0000) =    702.238 us/op
     p(99.9000) =    702.238 us/op
     p(99.9900) =    702.238 us/op
     p(99.9990) =    702.238 us/op
     p(99.9999) =    702.238 us/op
    p(100.0000) =    702.238 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 14139.830 us/op
# Warmup Iteration   2: 815.169 us/op
# Warmup Iteration   3: 680.629 us/op
# Warmup Iteration   4: 671.379 us/op
# Warmup Iteration   5: 704.514 us/op
Iteration   1: 720.763 us/op
Iteration   2: 701.287 us/op
Iteration   3: 685.507 us/op
Iteration   4: 687.549 us/op
Iteration   5: 717.447 us/op
Iteration   6: 700.959 us/op
Iteration   7: 688.464 us/op
Iteration   8: 689.840 us/op
Iteration   9: 685.933 us/op
Iteration  10: 700.301 us/op
Iteration  11: 708.616 us/op
Iteration  12: 664.328 us/op
Iteration  13: 697.860 us/op
Iteration  14: 695.788 us/op
Iteration  15: 703.802 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  N = 15
  mean =    696.563 ±(99.9%) 14.966 us/op

  Histogram, us/op:
    [660.000, 665.000) = 1 
    [665.000, 670.000) = 0 
    [670.000, 675.000) = 0 
    [675.000, 680.000) = 0 
    [680.000, 685.000) = 0 
    [685.000, 690.000) = 5 
    [690.000, 695.000) = 0 
    [695.000, 700.000) = 2 
    [700.000, 705.000) = 4 
    [705.000, 710.000) = 1 
    [710.000, 715.000) = 0 
    [715.000, 720.000) = 1 
    [720.000, 725.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    664.328 us/op
     p(50.0000) =    697.860 us/op
     p(90.0000) =    718.773 us/op
     p(95.0000) =    720.763 us/op
     p(99.0000) =    720.763 us/op
     p(99.9000) =    720.763 us/op
     p(99.9900) =    720.763 us/op
     p(99.9990) =    720.763 us/op
     p(99.9999) =    720.763 us/op
    p(100.0000) =    720.763 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 17758.563 us/op
# Warmup Iteration   2: 2559.073 us/op
# Warmup Iteration   3: 1325.666 us/op
# Warmup Iteration   4: 961.982 us/op
# Warmup Iteration   5: 945.989 us/op
Iteration   1: 942.430 us/op
Iteration   2: 942.324 us/op
Iteration   3: 960.266 us/op
Iteration   4: 941.816 us/op
Iteration   5: 942.432 us/op
Iteration   6: 954.935 us/op
Iteration   7: 943.144 us/op
Iteration   8: 942.216 us/op
Iteration   9: 942.733 us/op
Iteration  10: 947.599 us/op
Iteration  11: 942.203 us/op
Iteration  12: 957.894 us/op
Iteration  13: 957.789 us/op
Iteration  14: 989.332 us/op
Iteration  15: 957.427 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  N = 15
  mean =    950.969 ±(99.9%) 13.727 us/op

  Histogram, us/op:
    [940.000, 945.000) = 8 
    [945.000, 950.000) = 1 
    [950.000, 955.000) = 1 
    [955.000, 960.000) = 3 
    [960.000, 965.000) = 1 
    [965.000, 970.000) = 0 
    [970.000, 975.000) = 0 
    [975.000, 980.000) = 0 
    [980.000, 985.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    941.816 us/op
     p(50.0000) =    943.144 us/op
     p(90.0000) =    971.892 us/op
     p(95.0000) =    989.332 us/op
     p(99.0000) =    989.332 us/op
     p(99.9000) =    989.332 us/op
     p(99.9900) =    989.332 us/op
     p(99.9990) =    989.332 us/op
     p(99.9999) =    989.332 us/op
    p(100.0000) =    989.332 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 25805.738 us/op
# Warmup Iteration   2: 1007.258 us/op
# Warmup Iteration   3: 570.109 us/op
# Warmup Iteration   4: 622.298 us/op
# Warmup Iteration   5: 606.729 us/op
Iteration   1: 613.732 us/op
Iteration   2: 605.210 us/op
Iteration   3: 636.072 us/op
Iteration   4: 590.585 us/op
Iteration   5: 589.219 us/op
Iteration   6: 577.342 us/op
Iteration   7: 600.366 us/op
Iteration   8: 607.170 us/op
Iteration   9: 580.446 us/op
Iteration  10: 608.673 us/op
Iteration  11: 647.738 us/op
Iteration  12: 604.868 us/op
Iteration  13: 599.136 us/op
Iteration  14: 567.825 us/op
Iteration  15: 618.320 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  N = 15
  mean =    603.113 ±(99.9%) 22.630 us/op

  Histogram, us/op:
    [560.000, 565.000) = 0 
    [565.000, 570.000) = 1 
    [570.000, 575.000) = 0 
    [575.000, 580.000) = 1 
    [580.000, 585.000) = 1 
    [585.000, 590.000) = 1 
    [590.000, 595.000) = 1 
    [595.000, 600.000) = 1 
    [600.000, 605.000) = 2 
    [605.000, 610.000) = 3 
    [610.000, 615.000) = 1 
    [615.000, 620.000) = 1 
    [620.000, 625.000) = 0 
    [625.000, 630.000) = 0 
    [630.000, 635.000) = 0 
    [635.000, 640.000) = 1 
    [640.000, 645.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    567.825 us/op
     p(50.0000) =    604.868 us/op
     p(90.0000) =    640.738 us/op
     p(95.0000) =    647.738 us/op
     p(99.0000) =    647.738 us/op
     p(99.9000) =    647.738 us/op
     p(99.9900) =    647.738 us/op
     p(99.9990) =    647.738 us/op
     p(99.9999) =    647.738 us/op
    p(100.0000) =    647.738 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1335719.803 us/op
# Warmup Iteration   2: 913131.098 us/op
# Warmup Iteration   3: 901771.495 us/op
# Warmup Iteration   4: 890149.662 us/op
# Warmup Iteration   5: 888697.180 us/op
Iteration   1: 886844.930 us/op
Iteration   2: 897153.640 us/op
Iteration   3: 888102.308 us/op
Iteration   4: 888280.723 us/op
Iteration   5: 886790.425 us/op
Iteration   6: 897609.540 us/op
Iteration   7: 892897.829 us/op
Iteration   8: 881955.006 us/op
Iteration   9: 883449.187 us/op
Iteration  10: 884294.507 us/op
Iteration  11: 885232.435 us/op
Iteration  12: 887359.417 us/op
Iteration  13: 888738.714 us/op
Iteration  14: 887048.619 us/op
Iteration  15: 887420.024 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  N = 15
  mean = 888211.820 ±(99.9%) 4808.007 us/op

  Histogram, us/op:
    [880000.000, 881250.000) = 0 
    [881250.000, 882500.000) = 1 
    [882500.000, 883750.000) = 1 
    [883750.000, 885000.000) = 1 
    [885000.000, 886250.000) = 1 
    [886250.000, 887500.000) = 5 
    [887500.000, 888750.000) = 3 
    [888750.000, 890000.000) = 0 
    [890000.000, 891250.000) = 0 
    [891250.000, 892500.000) = 0 
    [892500.000, 893750.000) = 1 
    [893750.000, 895000.000) = 0 
    [895000.000, 896250.000) = 0 
    [896250.000, 897500.000) = 1 
    [897500.000, 898750.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 881955.006 us/op
     p(50.0000) = 887359.417 us/op
     p(90.0000) = 897336.000 us/op
     p(95.0000) = 897609.540 us/op
     p(99.0000) = 897609.540 us/op
     p(99.9000) = 897609.540 us/op
     p(99.9900) = 897609.540 us/op
     p(99.9990) = 897609.540 us/op
     p(99.9999) = 897609.540 us/op
    p(100.0000) = 897609.540 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 632174.536 us/op
# Warmup Iteration   2: 278827.080 us/op
# Warmup Iteration   3: 232600.156 us/op
# Warmup Iteration   4: 237402.152 us/op
# Warmup Iteration   5: 230707.559 us/op
Iteration   1: 232152.019 us/op
Iteration   2: 231758.961 us/op
Iteration   3: 229991.184 us/op
Iteration   4: 236419.830 us/op
Iteration   5: 232510.762 us/op
Iteration   6: 230848.435 us/op
Iteration   7: 233594.379 us/op
Iteration   8: 234227.584 us/op
Iteration   9: 237783.679 us/op
Iteration  10: 233446.861 us/op
Iteration  11: 233579.768 us/op
Iteration  12: 232802.456 us/op
Iteration  13: 236140.734 us/op
Iteration  14: 239208.262 us/op
Iteration  15: 232711.817 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 15
  mean = 233811.782 ±(99.9%) 2737.530 us/op

  Histogram, us/op:
    [229000.000, 230000.000) = 1 
    [230000.000, 231000.000) = 1 
    [231000.000, 232000.000) = 1 
    [232000.000, 233000.000) = 4 
    [233000.000, 234000.000) = 3 
    [234000.000, 235000.000) = 1 
    [235000.000, 236000.000) = 0 
    [236000.000, 237000.000) = 2 
    [237000.000, 238000.000) = 1 
    [238000.000, 239000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 229991.184 us/op
     p(50.0000) = 233446.861 us/op
     p(90.0000) = 238353.512 us/op
     p(95.0000) = 239208.262 us/op
     p(99.0000) = 239208.262 us/op
     p(99.9000) = 239208.262 us/op
     p(99.9900) = 239208.262 us/op
     p(99.9990) = 239208.262 us/op
     p(99.9999) = 239208.262 us/op
    p(100.0000) = 239208.262 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3048640.596 us/op
# Warmup Iteration   2: 2220077.965 us/op
# Warmup Iteration   3: 2145819.476 us/op
# Warmup Iteration   4: 2201679.220 us/op
# Warmup Iteration   5: 2221712.286 us/op
Iteration   1: 2153020.603 us/op
Iteration   2: 2156755.007 us/op
Iteration   3: 2181084.753 us/op
Iteration   4: 2148172.156 us/op
Iteration   5: 2164217.387 us/op
Iteration   6: 2219558.180 us/op
Iteration   7: 2163437.856 us/op
Iteration   8: 2161191.643 us/op
Iteration   9: 2161021.712 us/op
Iteration  10: 2208479.069 us/op
Iteration  11: 2173487.329 us/op
Iteration  12: 2188810.776 us/op
Iteration  13: 2254737.294 us/op
Iteration  14: 2227953.888 us/op
Iteration  15: 2188918.399 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 15
  mean = 2183389.737 ±(99.9%) 33574.176 us/op

  Histogram, us/op:
    [2100000.000, 2112500.000) = 0 
    [2112500.000, 2125000.000) = 0 
    [2125000.000, 2137500.000) = 0 
    [2137500.000, 2150000.000) = 1 
    [2150000.000, 2162500.000) = 4 
    [2162500.000, 2175000.000) = 3 
    [2175000.000, 2187500.000) = 1 
    [2187500.000, 2200000.000) = 2 
    [2200000.000, 2212500.000) = 1 
    [2212500.000, 2225000.000) = 1 
    [2225000.000, 2237500.000) = 1 
    [2237500.000, 2250000.000) = 0 
    [2250000.000, 2262500.000) = 1 
    [2262500.000, 2275000.000) = 0 
    [2275000.000, 2287500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 2148172.156 us/op
     p(50.0000) = 2173487.329 us/op
     p(90.0000) = 2238667.250 us/op
     p(95.0000) = 2254737.294 us/op
     p(99.0000) = 2254737.294 us/op
     p(99.9000) = 2254737.294 us/op
     p(99.9900) = 2254737.294 us/op
     p(99.9990) = 2254737.294 us/op
     p(99.9999) = 2254737.294 us/op
    p(100.0000) = 2254737.294 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 177.649 us/op
# Warmup Iteration   2: 93.224 us/op
# Warmup Iteration   3: 25.994 us/op
# Warmup Iteration   4: 26.420 us/op
# Warmup Iteration   5: 17.005 us/op
Iteration   1: 17.397 us/op
Iteration   2: 14.714 us/op
Iteration   3: 20.624 us/op
Iteration   4: 14.088 us/op
Iteration   5: 47.900 us/op
Iteration   6: 13.625 us/op
Iteration   7: 44.933 us/op
Iteration   8: 12.635 us/op
Iteration   9: 5.758 us/op
Iteration  10: 5.814 us/op
Iteration  11: 4.926 us/op
Iteration  12: 7.375 us/op
Iteration  13: 6.341 us/op
Iteration  14: 6.126 us/op
Iteration  15: 5.892 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     15.210 ±(99.9%) 14.540 us/op

  Histogram, us/op:
    [ 0.000,  5.000) = 1 
    [ 5.000, 10.000) = 6 
    [10.000, 15.000) = 4 
    [15.000, 20.000) = 1 
    [20.000, 25.000) = 1 
    [25.000, 30.000) = 0 
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 0 
    [40.000, 45.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      4.926 us/op
     p(50.0000) =     12.635 us/op
     p(90.0000) =     46.120 us/op
     p(95.0000) =     47.900 us/op
     p(99.0000) =     47.900 us/op
     p(99.9000) =     47.900 us/op
     p(99.9900) =     47.900 us/op
     p(99.9990) =     47.900 us/op
     p(99.9999) =     47.900 us/op
    p(100.0000) =     47.900 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 266.577 us/op
# Warmup Iteration   2: 174.931 us/op
# Warmup Iteration   3: 30.403 us/op
# Warmup Iteration   4: 32.051 us/op
# Warmup Iteration   5: 23.858 us/op
Iteration   1: 55.695 us/op
Iteration   2: 14.681 us/op
Iteration   3: 6.507 us/op
Iteration   4: 6.293 us/op
Iteration   5: 6.200 us/op
Iteration   6: 6.745 us/op
Iteration   7: 6.928 us/op
Iteration   8: 5.745 us/op
Iteration   9: 6.482 us/op
Iteration  10: 6.549 us/op
Iteration  11: 6.581 us/op
Iteration  12: 5.997 us/op
Iteration  13: 7.569 us/op
Iteration  14: 6.446 us/op
Iteration  15: 6.588 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     10.334 ±(99.9%) 13.610 us/op

  Histogram, us/op:
    [ 0.000,  5.000) = 0 
    [ 5.000, 10.000) = 13 
    [10.000, 15.000) = 1 
    [15.000, 20.000) = 0 
    [20.000, 25.000) = 0 
    [25.000, 30.000) = 0 
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 0 
    [40.000, 45.000) = 0 
    [45.000, 50.000) = 0 
    [50.000, 55.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      5.745 us/op
     p(50.0000) =      6.549 us/op
     p(90.0000) =     31.087 us/op
     p(95.0000) =     55.695 us/op
     p(99.0000) =     55.695 us/op
     p(99.9000) =     55.695 us/op
     p(99.9900) =     55.695 us/op
     p(99.9990) =     55.695 us/op
     p(99.9999) =     55.695 us/op
    p(100.0000) =     55.695 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 354.813 us/op
# Warmup Iteration   2: 42.893 us/op
# Warmup Iteration   3: 46.468 us/op
# Warmup Iteration   4: 35.512 us/op
# Warmup Iteration   5: 57.055 us/op
Iteration   1: 19.364 us/op
Iteration   2: 8.170 us/op
Iteration   3: 7.292 us/op
Iteration   4: 6.568 us/op
Iteration   5: 7.744 us/op
Iteration   6: 8.316 us/op
Iteration   7: 7.886 us/op
Iteration   8: 9.827 us/op
Iteration   9: 6.836 us/op
Iteration  10: 7.308 us/op
Iteration  11: 10.044 us/op
Iteration  12: 7.459 us/op
Iteration  13: 7.551 us/op
Iteration  14: 6.951 us/op
Iteration  15: 8.654 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =      8.665 ±(99.9%) 3.340 us/op

  Histogram, us/op:
    [ 0.000,  1.250) = 0 
    [ 1.250,  2.500) = 0 
    [ 2.500,  3.750) = 0 
    [ 3.750,  5.000) = 0 
    [ 5.000,  6.250) = 0 
    [ 6.250,  7.500) = 6 
    [ 7.500,  8.750) = 6 
    [ 8.750, 10.000) = 1 
    [10.000, 11.250) = 1 
    [11.250, 12.500) = 0 
    [12.500, 13.750) = 0 
    [13.750, 15.000) = 0 
    [15.000, 16.250) = 0 
    [16.250, 17.500) = 0 
    [17.500, 18.750) = 0 

  Percentiles, us/op:
      p(0.0000) =      6.568 us/op
     p(50.0000) =      7.744 us/op
     p(90.0000) =     13.772 us/op
     p(95.0000) =     19.364 us/op
     p(99.0000) =     19.364 us/op
     p(99.9000) =     19.364 us/op
     p(99.9900) =     19.364 us/op
     p(99.9990) =     19.364 us/op
     p(99.9999) =     19.364 us/op
    p(100.0000) =     19.364 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 256.153 us/op
# Warmup Iteration   2: 18.739 us/op
# Warmup Iteration   3: 6.577 us/op
# Warmup Iteration   4: 7.147 us/op
# Warmup Iteration   5: 6.462 us/op
Iteration   1: 8.786 us/op
Iteration   2: 6.902 us/op
Iteration   3: 6.291 us/op
Iteration   4: 6.388 us/op
Iteration   5: 7.275 us/op
Iteration   6: 7.054 us/op
Iteration   7: 6.715 us/op
Iteration   8: 18.640 us/op
Iteration   9: 5.699 us/op
Iteration  10: 6.169 us/op
Iteration  11: 6.086 us/op
Iteration  12: 5.766 us/op
Iteration  13: 5.950 us/op
Iteration  14: 6.255 us/op
Iteration  15: 6.083 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =      7.337 ±(99.9%) 3.444 us/op

  Histogram, us/op:
    [ 0.000,  1.250) = 0 
    [ 1.250,  2.500) = 0 
    [ 2.500,  3.750) = 0 
    [ 3.750,  5.000) = 0 
    [ 5.000,  6.250) = 6 
    [ 6.250,  7.500) = 7 
    [ 7.500,  8.750) = 0 
    [ 8.750, 10.000) = 1 
    [10.000, 11.250) = 0 
    [11.250, 12.500) = 0 
    [12.500, 13.750) = 0 
    [13.750, 15.000) = 0 
    [15.000, 16.250) = 0 
    [16.250, 17.500) = 0 
    [17.500, 18.750) = 1 

  Percentiles, us/op:
      p(0.0000) =      5.699 us/op
     p(50.0000) =      6.291 us/op
     p(90.0000) =     12.728 us/op
     p(95.0000) =     18.640 us/op
     p(99.0000) =     18.640 us/op
     p(99.9000) =     18.640 us/op
     p(99.9900) =     18.640 us/op
     p(99.9990) =     18.640 us/op
     p(99.9999) =     18.640 us/op
    p(100.0000) =     18.640 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 271.352 us/op
# Warmup Iteration   2: 48.208 us/op
# Warmup Iteration   3: 33.827 us/op
# Warmup Iteration   4: 18.166 us/op
# Warmup Iteration   5: 17.583 us/op
Iteration   1: 22.671 us/op
Iteration   2: 21.292 us/op
Iteration   3: 14.094 us/op
Iteration   4: 14.063 us/op
Iteration   5: 13.564 us/op
Iteration   6: 16.322 us/op
Iteration   7: 14.783 us/op
Iteration   8: 13.820 us/op
Iteration   9: 13.371 us/op
Iteration  10: 14.033 us/op
Iteration  11: 15.701 us/op
Iteration  12: 13.829 us/op
Iteration  13: 13.765 us/op
Iteration  14: 14.552 us/op
Iteration  15: 13.052 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =     15.261 ±(99.9%) 3.068 us/op

  Histogram, us/op:
    [13.000, 14.000) = 6 
    [14.000, 15.000) = 5 
    [15.000, 16.000) = 1 
    [16.000, 17.000) = 1 
    [17.000, 18.000) = 0 
    [18.000, 19.000) = 0 
    [19.000, 20.000) = 0 
    [20.000, 21.000) = 0 
    [21.000, 22.000) = 1 

  Percentiles, us/op:
      p(0.0000) =     13.052 us/op
     p(50.0000) =     14.063 us/op
     p(90.0000) =     21.844 us/op
     p(95.0000) =     22.671 us/op
     p(99.0000) =     22.671 us/op
     p(99.9000) =     22.671 us/op
     p(99.9900) =     22.671 us/op
     p(99.9990) =     22.671 us/op
     p(99.9999) =     22.671 us/op
    p(100.0000) =     22.671 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3432.655 us/op
# Warmup Iteration   2: 151.864 us/op
# Warmup Iteration   3: 99.056 us/op
# Warmup Iteration   4: 172.905 us/op
# Warmup Iteration   5: 94.108 us/op
Iteration   1: 93.791 us/op
Iteration   2: 99.369 us/op
Iteration   3: 94.613 us/op
Iteration   4: 96.711 us/op
Iteration   5: 99.204 us/op
Iteration   6: 109.390 us/op
Iteration   7: 87.152 us/op
Iteration   8: 90.155 us/op
Iteration   9: 86.913 us/op
Iteration  10: 87.183 us/op
Iteration  11: 88.843 us/op
Iteration  12: 87.648 us/op
Iteration  13: 89.083 us/op
Iteration  14: 85.919 us/op
Iteration  15: 89.157 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =     92.342 ±(99.9%) 6.984 us/op

  Histogram, us/op:
    [ 80.000,  82.500) = 0 
    [ 82.500,  85.000) = 0 
    [ 85.000,  87.500) = 4 
    [ 87.500,  90.000) = 4 
    [ 90.000,  92.500) = 1 
    [ 92.500,  95.000) = 2 
    [ 95.000,  97.500) = 1 
    [ 97.500, 100.000) = 2 
    [100.000, 102.500) = 0 
    [102.500, 105.000) = 0 
    [105.000, 107.500) = 0 

  Percentiles, us/op:
      p(0.0000) =     85.919 us/op
     p(50.0000) =     89.157 us/op
     p(90.0000) =    103.377 us/op
     p(95.0000) =    109.390 us/op
     p(99.0000) =    109.390 us/op
     p(99.9000) =    109.390 us/op
     p(99.9900) =    109.390 us/op
     p(99.9990) =    109.390 us/op
     p(99.9999) =    109.390 us/op
    p(100.0000) =    109.390 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 259.409 us/op
# Warmup Iteration   2: 5.624 us/op
# Warmup Iteration   3: 5.340 us/op
# Warmup Iteration   4: 5.554 us/op
# Warmup Iteration   5: 6.413 us/op
Iteration   1: 5.638 us/op
Iteration   2: 5.547 us/op
Iteration   3: 5.298 us/op
Iteration   4: 6.320 us/op
Iteration   5: 5.735 us/op
Iteration   6: 6.818 us/op
Iteration   7: 5.795 us/op
Iteration   8: 7.271 us/op
Iteration   9: 6.445 us/op
Iteration  10: 6.106 us/op
Iteration  11: 6.145 us/op
Iteration  12: 6.262 us/op
Iteration  13: 5.780 us/op
Iteration  14: 6.195 us/op
Iteration  15: 5.953 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =      6.087 ±(99.9%) 0.542 us/op

  Histogram, us/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 1 
    [5.500, 5.750) = 3 
    [5.750, 6.000) = 3 
    [6.000, 6.250) = 3 
    [6.250, 6.500) = 3 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 1 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 1 
    [7.500, 7.750) = 0 

  Percentiles, us/op:
      p(0.0000) =      5.298 us/op
     p(50.0000) =      6.106 us/op
     p(90.0000) =      6.999 us/op
     p(95.0000) =      7.271 us/op
     p(99.0000) =      7.271 us/op
     p(99.9000) =      7.271 us/op
     p(99.9900) =      7.271 us/op
     p(99.9990) =      7.271 us/op
     p(99.9999) =      7.271 us/op
    p(100.0000) =      7.271 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 388.431 us/op
# Warmup Iteration   2: 40.372 us/op
# Warmup Iteration   3: 21.933 us/op
# Warmup Iteration   4: 34.411 us/op
# Warmup Iteration   5: 20.585 us/op
Iteration   1: 56.032 us/op
Iteration   2: 23.892 us/op
Iteration   3: 28.523 us/op
Iteration   4: 12.945 us/op
Iteration   5: 13.586 us/op
Iteration   6: 15.889 us/op
Iteration   7: 12.914 us/op
Iteration   8: 13.848 us/op
Iteration   9: 13.472 us/op
Iteration  10: 13.054 us/op
Iteration  11: 14.589 us/op
Iteration  12: 13.427 us/op
Iteration  13: 13.373 us/op
Iteration  14: 13.047 us/op
Iteration  15: 12.649 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =     18.083 ±(99.9%) 12.244 us/op

  Histogram, us/op:
    [10.000, 15.000) = 11 
    [15.000, 20.000) = 1 
    [20.000, 25.000) = 1 
    [25.000, 30.000) = 1 
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 0 
    [40.000, 45.000) = 0 
    [45.000, 50.000) = 0 
    [50.000, 55.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     12.649 us/op
     p(50.0000) =     13.472 us/op
     p(90.0000) =     39.527 us/op
     p(95.0000) =     56.032 us/op
     p(99.0000) =     56.032 us/op
     p(99.9000) =     56.032 us/op
     p(99.9900) =     56.032 us/op
     p(99.9990) =     56.032 us/op
     p(99.9999) =     56.032 us/op
    p(100.0000) =     56.032 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 746.880 us/op
# Warmup Iteration   2: 346.271 us/op
# Warmup Iteration   3: 127.730 us/op
# Warmup Iteration   4: 92.660 us/op
# Warmup Iteration   5: 94.738 us/op
Iteration   1: 96.532 us/op
Iteration   2: 92.242 us/op
Iteration   3: 101.401 us/op
Iteration   4: 92.349 us/op
Iteration   5: 96.299 us/op
Iteration   6: 85.235 us/op
Iteration   7: 83.874 us/op
Iteration   8: 99.903 us/op
Iteration   9: 85.286 us/op
Iteration  10: 84.305 us/op
Iteration  11: 97.821 us/op
Iteration  12: 120.930 us/op
Iteration  13: 182.402 us/op
Iteration  14: 86.379 us/op
Iteration  15: 84.497 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =     99.297 ±(99.9%) 26.709 us/op

  Histogram, us/op:
    [ 80.000,  90.000) = 6 
    [ 90.000, 100.000) = 6 
    [100.000, 110.000) = 1 
    [110.000, 120.000) = 0 
    [120.000, 130.000) = 1 
    [130.000, 140.000) = 0 
    [140.000, 150.000) = 0 
    [150.000, 160.000) = 0 
    [160.000, 170.000) = 0 
    [170.000, 180.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     83.874 us/op
     p(50.0000) =     92.349 us/op
     p(90.0000) =    145.519 us/op
     p(95.0000) =    182.402 us/op
     p(99.0000) =    182.402 us/op
     p(99.9000) =    182.402 us/op
     p(99.9900) =    182.402 us/op
     p(99.9990) =    182.402 us/op
     p(99.9999) =    182.402 us/op
    p(100.0000) =    182.402 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 106931.290 us/op
# Warmup Iteration   2: 30857.605 us/op
# Warmup Iteration   3: 16857.827 us/op
# Warmup Iteration   4: 15151.982 us/op
# Warmup Iteration   5: 14978.206 us/op
Iteration   1: 14754.345 us/op
Iteration   2: 14749.074 us/op
Iteration   3: 14826.035 us/op
Iteration   4: 14711.727 us/op
Iteration   5: 14766.010 us/op
Iteration   6: 14785.579 us/op
Iteration   7: 16439.441 us/op
Iteration   8: 14748.087 us/op
Iteration   9: 14860.229 us/op
Iteration  10: 14644.406 us/op
Iteration  11: 14616.126 us/op
Iteration  12: 14593.416 us/op
Iteration  13: 14633.648 us/op
Iteration  14: 14576.872 us/op
Iteration  15: 14614.142 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  N = 15
  mean =  14821.276 ±(99.9%) 487.777 us/op

  Histogram, us/op:
    [14000.000, 14250.000) = 0 
    [14250.000, 14500.000) = 0 
    [14500.000, 14750.000) = 9 
    [14750.000, 15000.000) = 5 
    [15000.000, 15250.000) = 0 
    [15250.000, 15500.000) = 0 
    [15500.000, 15750.000) = 0 
    [15750.000, 16000.000) = 0 
    [16000.000, 16250.000) = 0 
    [16250.000, 16500.000) = 1 
    [16500.000, 16750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  14576.872 us/op
     p(50.0000) =  14748.087 us/op
     p(90.0000) =  15491.914 us/op
     p(95.0000) =  16439.441 us/op
     p(99.0000) =  16439.441 us/op
     p(99.9000) =  16439.441 us/op
     p(99.9900) =  16439.441 us/op
     p(99.9990) =  16439.441 us/op
     p(99.9999) =  16439.441 us/op
    p(100.0000) =  16439.441 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 27481.766 us/op
# Warmup Iteration   2: 10108.505 us/op
# Warmup Iteration   3: 4747.175 us/op
# Warmup Iteration   4: 3927.610 us/op
# Warmup Iteration   5: 3076.218 us/op
Iteration   1: 3402.176 us/op
Iteration   2: 1688.686 us/op
Iteration   3: 1449.376 us/op
Iteration   4: 1406.217 us/op
Iteration   5: 1533.705 us/op
Iteration   6: 1945.269 us/op
Iteration   7: 652.308 us/op
Iteration   8: 668.149 us/op
Iteration   9: 658.105 us/op
Iteration  10: 682.262 us/op
Iteration  11: 642.557 us/op
Iteration  12: 620.889 us/op
Iteration  13: 667.294 us/op
Iteration  14: 615.663 us/op
Iteration  15: 660.743 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean =   1152.893 ±(99.9%) 834.634 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 0 
    [ 250.000,  500.000) = 0 
    [ 500.000,  750.000) = 9 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 2 
    [1500.000, 1750.000) = 2 
    [1750.000, 2000.000) = 1 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 
    [2750.000, 3000.000) = 0 
    [3000.000, 3250.000) = 0 
    [3250.000, 3500.000) = 1 
    [3500.000, 3750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    615.663 us/op
     p(50.0000) =    668.149 us/op
     p(90.0000) =   2528.032 us/op
     p(95.0000) =   3402.176 us/op
     p(99.0000) =   3402.176 us/op
     p(99.9000) =   3402.176 us/op
     p(99.9900) =   3402.176 us/op
     p(99.9990) =   3402.176 us/op
     p(99.9999) =   3402.176 us/op
    p(100.0000) =   3402.176 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 459919.678 us/op
# Warmup Iteration   2: 56880.700 us/op
# Warmup Iteration   3: 41648.336 us/op
# Warmup Iteration   4: 41659.271 us/op
# Warmup Iteration   5: 41502.383 us/op
Iteration   1: 41437.572 us/op
Iteration   2: 41546.174 us/op
Iteration   3: 41540.332 us/op
Iteration   4: 41896.733 us/op
Iteration   5: 41499.241 us/op
Iteration   6: 41566.132 us/op
Iteration   7: 41550.742 us/op
Iteration   8: 41664.698 us/op
Iteration   9: 41661.436 us/op
Iteration  10: 41612.723 us/op
Iteration  11: 41296.866 us/op
Iteration  12: 41609.134 us/op
Iteration  13: 41601.991 us/op
Iteration  14: 41398.224 us/op
Iteration  15: 41521.581 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean =  41560.239 ±(99.9%) 145.089 us/op

  Histogram, us/op:
    [41200.000, 41250.000) = 0 
    [41250.000, 41300.000) = 1 
    [41300.000, 41350.000) = 0 
    [41350.000, 41400.000) = 1 
    [41400.000, 41450.000) = 1 
    [41450.000, 41500.000) = 1 
    [41500.000, 41550.000) = 3 
    [41550.000, 41600.000) = 2 
    [41600.000, 41650.000) = 3 
    [41650.000, 41700.000) = 2 
    [41700.000, 41750.000) = 0 
    [41750.000, 41800.000) = 0 
    [41800.000, 41850.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  41296.866 us/op
     p(50.0000) =  41550.742 us/op
     p(90.0000) =  41757.512 us/op
     p(95.0000) =  41896.733 us/op
     p(99.0000) =  41896.733 us/op
     p(99.9000) =  41896.733 us/op
     p(99.9900) =  41896.733 us/op
     p(99.9990) =  41896.733 us/op
     p(99.9999) =  41896.733 us/op
    p(100.0000) =  41896.733 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4408254.688 us/op
# Warmup Iteration   2: 6637394.721 us/op
# Warmup Iteration   3: 6611512.234 us/op
# Warmup Iteration   4: 6613218.670 us/op
# Warmup Iteration   5: 6612698.694 us/op
Iteration   1: 6609716.378 us/op
Iteration   2: 6607873.922 us/op
Iteration   3: 6599637.751 us/op
Iteration   4: 6608343.892 us/op
Iteration   5: 6607904.331 us/op
Iteration   6: 6604980.095 us/op
Iteration   7: 6601138.683 us/op
Iteration   8: 6603349.684 us/op
Iteration   9: 6602126.710 us/op
Iteration  10: 6599773.537 us/op
Iteration  11: 6599608.272 us/op
Iteration  12: 6602972.533 us/op
Iteration  13: 6606912.367 us/op
Iteration  14: 6606337.375 us/op
Iteration  15: 6609561.225 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean = 6604682.450 ±(99.9%) 3938.345 us/op

  Histogram, us/op:
    [6590000.000, 6591250.000) = 0 
    [6591250.000, 6592500.000) = 0 
    [6592500.000, 6593750.000) = 0 
    [6593750.000, 6595000.000) = 0 
    [6595000.000, 6596250.000) = 0 
    [6596250.000, 6597500.000) = 0 
    [6597500.000, 6598750.000) = 0 
    [6598750.000, 6600000.000) = 3 
    [6600000.000, 6601250.000) = 1 
    [6601250.000, 6602500.000) = 1 
    [6602500.000, 6603750.000) = 2 
    [6603750.000, 6605000.000) = 1 
    [6605000.000, 6606250.000) = 0 
    [6606250.000, 6607500.000) = 2 
    [6607500.000, 6608750.000) = 3 

  Percentiles, us/op:
      p(0.0000) = 6599608.272 us/op
     p(50.0000) = 6604980.095 us/op
     p(90.0000) = 6609623.286 us/op
     p(95.0000) = 6609716.378 us/op
     p(99.0000) = 6609716.378 us/op
     p(99.9000) = 6609716.378 us/op
     p(99.9900) = 6609716.378 us/op
     p(99.9990) = 6609716.378 us/op
     p(99.9999) = 6609716.378 us/op
    p(100.0000) = 6609716.378 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 71164.923 us/op
# Warmup Iteration   2: 3379.520 us/op
# Warmup Iteration   3: 2996.087 us/op
# Warmup Iteration   4: 3014.759 us/op
# Warmup Iteration   5: 3024.325 us/op
Iteration   1: 2995.881 us/op
Iteration   2: 3007.480 us/op
Iteration   3: 3021.839 us/op
Iteration   4: 3002.261 us/op
Iteration   5: 3008.202 us/op
Iteration   6: 3013.466 us/op
Iteration   7: 3006.995 us/op
Iteration   8: 3000.451 us/op
Iteration   9: 3003.163 us/op
Iteration  10: 2988.451 us/op
Iteration  11: 3011.771 us/op
Iteration  12: 3006.772 us/op
Iteration  13: 3005.854 us/op
Iteration  14: 2989.957 us/op
Iteration  15: 3007.706 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  N = 15
  mean =   3004.683 ±(99.9%) 9.241 us/op

  Histogram, us/op:
    [2980.000, 2985.000) = 0 
    [2985.000, 2990.000) = 2 
    [2990.000, 2995.000) = 0 
    [2995.000, 3000.000) = 1 
    [3000.000, 3005.000) = 3 
    [3005.000, 3010.000) = 6 
    [3010.000, 3015.000) = 2 
    [3015.000, 3020.000) = 0 
    [3020.000, 3025.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   2988.451 us/op
     p(50.0000) =   3006.772 us/op
     p(90.0000) =   3016.815 us/op
     p(95.0000) =   3021.839 us/op
     p(99.0000) =   3021.839 us/op
     p(99.9000) =   3021.839 us/op
     p(99.9900) =   3021.839 us/op
     p(99.9990) =   3021.839 us/op
     p(99.9999) =   3021.839 us/op
    p(100.0000) =   3021.839 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 98961.491 us/op
# Warmup Iteration   2: 48301.952 us/op
# Warmup Iteration   3: 31581.115 us/op
# Warmup Iteration   4: 31459.848 us/op
# Warmup Iteration   5: 31515.772 us/op
Iteration   1: 31528.196 us/op
Iteration   2: 31530.676 us/op
Iteration   3: 31536.324 us/op
Iteration   4: 31429.792 us/op
Iteration   5: 31496.170 us/op
Iteration   6: 31531.144 us/op
Iteration   7: 31526.998 us/op
Iteration   8: 31559.172 us/op
Iteration   9: 31488.838 us/op
Iteration  10: 31514.935 us/op
Iteration  11: 31526.801 us/op
Iteration  12: 31513.262 us/op
Iteration  13: 31492.685 us/op
Iteration  14: 31465.790 us/op
Iteration  15: 31466.456 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  N = 15
  mean =  31507.149 ±(99.9%) 36.168 us/op

  Histogram, us/op:
    [31400.000, 31412.500) = 0 
    [31412.500, 31425.000) = 0 
    [31425.000, 31437.500) = 1 
    [31437.500, 31450.000) = 0 
    [31450.000, 31462.500) = 0 
    [31462.500, 31475.000) = 2 
    [31475.000, 31487.500) = 0 
    [31487.500, 31500.000) = 3 
    [31500.000, 31512.500) = 0 
    [31512.500, 31525.000) = 2 
    [31525.000, 31537.500) = 6 
    [31537.500, 31550.000) = 0 
    [31550.000, 31562.500) = 1 
    [31562.500, 31575.000) = 0 
    [31575.000, 31587.500) = 0 

  Percentiles, us/op:
      p(0.0000) =  31429.792 us/op
     p(50.0000) =  31514.935 us/op
     p(90.0000) =  31545.463 us/op
     p(95.0000) =  31559.172 us/op
     p(99.0000) =  31559.172 us/op
     p(99.9000) =  31559.172 us/op
     p(99.9900) =  31559.172 us/op
     p(99.9990) =  31559.172 us/op
     p(99.9999) =  31559.172 us/op
    p(100.0000) =  31559.172 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6357306.680 us/op
# Warmup Iteration   2: 1788594.560 us/op
# Warmup Iteration   3: 1759903.891 us/op
# Warmup Iteration   4: 1761047.991 us/op
# Warmup Iteration   5: 1759019.105 us/op
Iteration   1: 1760876.395 us/op
Iteration   2: 1759868.706 us/op
Iteration   3: 1759559.719 us/op
Iteration   4: 1759530.636 us/op
Iteration   5: 1760470.877 us/op
Iteration   6: 1760667.132 us/op
Iteration   7: 1761540.468 us/op
Iteration   8: 1758294.537 us/op
Iteration   9: 1760394.213 us/op
Iteration  10: 1760013.434 us/op
Iteration  11: 1758602.656 us/op
Iteration  12: 1760134.940 us/op
Iteration  13: 1761020.362 us/op
Iteration  14: 1758649.819 us/op
Iteration  15: 1759479.805 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  N = 15
  mean = 1759940.247 ±(99.9%) 1004.309 us/op

  Histogram, us/op:
    [1758000.000, 1758250.000) = 0 
    [1758250.000, 1758500.000) = 1 
    [1758500.000, 1758750.000) = 2 
    [1758750.000, 1759000.000) = 0 
    [1759000.000, 1759250.000) = 0 
    [1759250.000, 1759500.000) = 1 
    [1759500.000, 1759750.000) = 2 
    [1759750.000, 1760000.000) = 1 
    [1760000.000, 1760250.000) = 2 
    [1760250.000, 1760500.000) = 2 
    [1760500.000, 1760750.000) = 1 
    [1760750.000, 1761000.000) = 1 
    [1761000.000, 1761250.000) = 1 
    [1761250.000, 1761500.000) = 0 
    [1761500.000, 1761750.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 1758294.537 us/op
     p(50.0000) = 1760013.434 us/op
     p(90.0000) = 1761228.404 us/op
     p(95.0000) = 1761540.468 us/op
     p(99.0000) = 1761540.468 us/op
     p(99.9000) = 1761540.468 us/op
     p(99.9900) = 1761540.468 us/op
     p(99.9990) = 1761540.468 us/op
     p(99.9999) = 1761540.468 us/op
    p(100.0000) = 1761540.468 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 55.549 us/op
# Warmup Iteration   2: 13.111 us/op
# Warmup Iteration   3: 13.031 us/op
# Warmup Iteration   4: 13.489 us/op
# Warmup Iteration   5: 12.221 us/op
Iteration   1: 13.247 us/op
Iteration   2: 13.239 us/op
Iteration   3: 13.320 us/op
Iteration   4: 13.223 us/op
Iteration   5: 14.299 us/op
Iteration   6: 13.840 us/op
Iteration   7: 13.924 us/op
Iteration   8: 13.705 us/op
Iteration   9: 11.009 us/op
Iteration  10: 13.867 us/op
Iteration  11: 12.721 us/op
Iteration  12: 23.452 us/op
Iteration  13: 14.546 us/op
Iteration  14: 14.526 us/op
Iteration  15: 15.012 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  N = 15
  mean =     14.262 ±(99.9%) 2.899 us/op

  Histogram, us/op:
    [10.000, 11.250) = 1 
    [11.250, 12.500) = 0 
    [12.500, 13.750) = 6 
    [13.750, 15.000) = 6 
    [15.000, 16.250) = 1 
    [16.250, 17.500) = 0 
    [17.500, 18.750) = 0 
    [18.750, 20.000) = 0 
    [20.000, 21.250) = 0 
    [21.250, 22.500) = 0 
    [22.500, 23.750) = 1 
    [23.750, 25.000) = 0 
    [25.000, 26.250) = 0 
    [26.250, 27.500) = 0 
    [27.500, 28.750) = 0 

  Percentiles, us/op:
      p(0.0000) =     11.009 us/op
     p(50.0000) =     13.840 us/op
     p(90.0000) =     18.388 us/op
     p(95.0000) =     23.452 us/op
     p(99.0000) =     23.452 us/op
     p(99.9000) =     23.452 us/op
     p(99.9900) =     23.452 us/op
     p(99.9990) =     23.452 us/op
     p(99.9999) =     23.452 us/op
    p(100.0000) =     23.452 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 99573.681 us/op
# Warmup Iteration   2: 10036.503 us/op
# Warmup Iteration   3: 8694.891 us/op
# Warmup Iteration   4: 9325.285 us/op
# Warmup Iteration   5: 34598.528 us/op
Iteration   1: 10759.384 us/op
Iteration   2: 10413.633 us/op
Iteration   3: 10444.860 us/op
Iteration   4: 10432.319 us/op
Iteration   5: 10435.627 us/op
Iteration   6: 10285.404 us/op
Iteration   7: 10451.256 us/op
Iteration   8: 10407.992 us/op
Iteration   9: 10408.946 us/op
Iteration  10: 10426.432 us/op
Iteration  11: 10401.610 us/op
Iteration  12: 10375.888 us/op
Iteration  13: 10396.784 us/op
Iteration  14: 10407.868 us/op
Iteration  15: 10402.112 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  N = 15
  mean =  10430.008 ±(99.9%) 105.918 us/op

  Histogram, us/op:
    [10200.000, 10250.000) = 0 
    [10250.000, 10300.000) = 1 
    [10300.000, 10350.000) = 0 
    [10350.000, 10400.000) = 2 
    [10400.000, 10450.000) = 10 
    [10450.000, 10500.000) = 1 
    [10500.000, 10550.000) = 0 
    [10550.000, 10600.000) = 0 
    [10600.000, 10650.000) = 0 
    [10650.000, 10700.000) = 0 
    [10700.000, 10750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  10285.404 us/op
     p(50.0000) =  10408.946 us/op
     p(90.0000) =  10574.507 us/op
     p(95.0000) =  10759.384 us/op
     p(99.0000) =  10759.384 us/op
     p(99.9000) =  10759.384 us/op
     p(99.9900) =  10759.384 us/op
     p(99.9990) =  10759.384 us/op
     p(99.9999) =  10759.384 us/op
    p(100.0000) =  10759.384 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 255266.337 us/op
# Warmup Iteration   2: 46659.538 us/op
# Warmup Iteration   3: 32154.152 us/op
# Warmup Iteration   4: 40323.613 us/op
# Warmup Iteration   5: 39265.049 us/op
Iteration   1: 43476.083 us/op
Iteration   2: 40139.914 us/op
Iteration   3: 29729.281 us/op
Iteration   4: 34463.522 us/op
Iteration   5: 39578.057 us/op
Iteration   6: 34742.709 us/op
Iteration   7: 47159.907 us/op
Iteration   8: 29773.144 us/op
Iteration   9: 41883.623 us/op
Iteration  10: 39930.960 us/op
Iteration  11: 39355.717 us/op
Iteration  12: 37219.793 us/op
Iteration  13: 36161.107 us/op
Iteration  14: 39665.886 us/op
Iteration  15: 36928.178 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  N = 15
  mean =  38013.859 ±(99.9%) 5020.228 us/op

  Histogram, us/op:
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 0 
    [27500.000, 30000.000) = 2 
    [30000.000, 32500.000) = 0 
    [32500.000, 35000.000) = 2 
    [35000.000, 37500.000) = 3 
    [37500.000, 40000.000) = 4 
    [40000.000, 42500.000) = 2 
    [42500.000, 45000.000) = 1 
    [45000.000, 47500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  29729.281 us/op
     p(50.0000) =  39355.717 us/op
     p(90.0000) =  44949.613 us/op
     p(95.0000) =  47159.907 us/op
     p(99.0000) =  47159.907 us/op
     p(99.9000) =  47159.907 us/op
     p(99.9900) =  47159.907 us/op
     p(99.9990) =  47159.907 us/op
     p(99.9999) =  47159.907 us/op
    p(100.0000) =  47159.907 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 174425.044 us/op
# Warmup Iteration   2: 64802.039 us/op
# Warmup Iteration   3: 40106.897 us/op
# Warmup Iteration   4: 37330.161 us/op
# Warmup Iteration   5: 37412.807 us/op
Iteration   1: 37281.902 us/op
Iteration   2: 37242.818 us/op
Iteration   3: 37355.436 us/op
Iteration   4: 37354.826 us/op
Iteration   5: 37206.690 us/op
Iteration   6: 37227.532 us/op
Iteration   7: 37340.111 us/op
Iteration   8: 37321.408 us/op
Iteration   9: 37195.438 us/op
Iteration  10: 37206.913 us/op
Iteration  11: 37273.604 us/op
Iteration  12: 37285.889 us/op
Iteration  13: 37276.723 us/op
Iteration  14: 37275.972 us/op
Iteration  15: 37300.459 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  N = 15
  mean =  37276.381 ±(99.9%) 56.387 us/op

  Histogram, us/op:
    [37100.000, 37125.000) = 0 
    [37125.000, 37150.000) = 0 
    [37150.000, 37175.000) = 0 
    [37175.000, 37200.000) = 1 
    [37200.000, 37225.000) = 2 
    [37225.000, 37250.000) = 2 
    [37250.000, 37275.000) = 1 
    [37275.000, 37300.000) = 4 
    [37300.000, 37325.000) = 2 
    [37325.000, 37350.000) = 1 
    [37350.000, 37375.000) = 2 

  Percentiles, us/op:
      p(0.0000) =  37195.438 us/op
     p(50.0000) =  37276.723 us/op
     p(90.0000) =  37355.070 us/op
     p(95.0000) =  37355.436 us/op
     p(99.0000) =  37355.436 us/op
     p(99.9000) =  37355.436 us/op
     p(99.9900) =  37355.436 us/op
     p(99.9990) =  37355.436 us/op
     p(99.9999) =  37355.436 us/op
    p(100.0000) =  37355.436 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 168933.485 us/op
# Warmup Iteration   2: 16243.542 us/op
# Warmup Iteration   3: 16049.929 us/op
# Warmup Iteration   4: 16127.055 us/op
# Warmup Iteration   5: 16065.673 us/op
Iteration   1: 16045.691 us/op
Iteration   2: 16088.585 us/op
Iteration   3: 16057.877 us/op
Iteration   4: 16099.426 us/op
Iteration   5: 16096.412 us/op
Iteration   6: 16143.442 us/op
Iteration   7: 16124.562 us/op
Iteration   8: 16192.070 us/op
Iteration   9: 16223.350 us/op
Iteration  10: 16143.557 us/op
Iteration  11: 16053.962 us/op
Iteration  12: 16233.535 us/op
Iteration  13: 16267.158 us/op
Iteration  14: 16118.116 us/op
Iteration  15: 16161.889 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  N = 15
  mean =  16136.642 ±(99.9%) 72.765 us/op

  Histogram, us/op:
    [16000.000, 16025.000) = 0 
    [16025.000, 16050.000) = 1 
    [16050.000, 16075.000) = 2 
    [16075.000, 16100.000) = 3 
    [16100.000, 16125.000) = 2 
    [16125.000, 16150.000) = 2 
    [16150.000, 16175.000) = 1 
    [16175.000, 16200.000) = 1 
    [16200.000, 16225.000) = 1 
    [16225.000, 16250.000) = 1 
    [16250.000, 16275.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  16045.691 us/op
     p(50.0000) =  16124.562 us/op
     p(90.0000) =  16246.984 us/op
     p(95.0000) =  16267.158 us/op
     p(99.0000) =  16267.158 us/op
     p(99.9000) =  16267.158 us/op
     p(99.9900) =  16267.158 us/op
     p(99.9990) =  16267.158 us/op
     p(99.9999) =  16267.158 us/op
    p(100.0000) =  16267.158 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 106830.343 us/op
# Warmup Iteration   2: 13033.721 us/op
# Warmup Iteration   3: 14837.229 us/op
# Warmup Iteration   4: 14748.989 us/op
# Warmup Iteration   5: 14781.287 us/op
Iteration   1: 14846.154 us/op
Iteration   2: 15341.203 us/op
Iteration   3: 14702.466 us/op
Iteration   4: 14659.721 us/op
Iteration   5: 14699.931 us/op
Iteration   6: 14752.910 us/op
Iteration   7: 15508.498 us/op
Iteration   8: 14727.565 us/op
Iteration   9: 14756.379 us/op
Iteration  10: 14784.101 us/op
Iteration  11: 14693.072 us/op
Iteration  12: 14719.307 us/op
Iteration  13: 22616.510 us/op
Iteration  14: 14300.709 us/op
Iteration  15: 14416.398 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  N = 15
  mean =  15301.662 ±(99.9%) 2186.877 us/op

  Histogram, us/op:
    [14000.000, 14500.000) = 2 
    [14500.000, 15000.000) = 10 
    [15000.000, 15500.000) = 1 
    [15500.000, 16000.000) = 1 
    [16000.000, 16500.000) = 0 
    [16500.000, 17000.000) = 0 
    [17000.000, 17500.000) = 0 
    [17500.000, 18000.000) = 0 
    [18000.000, 18500.000) = 0 
    [18500.000, 19000.000) = 0 
    [19000.000, 19500.000) = 0 
    [19500.000, 20000.000) = 0 
    [20000.000, 20500.000) = 0 
    [20500.000, 21000.000) = 0 
    [21000.000, 21500.000) = 0 
    [21500.000, 22000.000) = 0 
    [22000.000, 22500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  14300.709 us/op
     p(50.0000) =  14727.565 us/op
     p(90.0000) =  18351.703 us/op
     p(95.0000) =  22616.510 us/op
     p(99.0000) =  22616.510 us/op
     p(99.9000) =  22616.510 us/op
     p(99.9900) =  22616.510 us/op
     p(99.9990) =  22616.510 us/op
     p(99.9999) =  22616.510 us/op
    p(100.0000) =  22616.510 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 168796.141 us/op
# Warmup Iteration   2: 39788.961 us/op
# Warmup Iteration   3: 35406.177 us/op
# Warmup Iteration   4: 37470.953 us/op
# Warmup Iteration   5: 38293.601 us/op
Iteration   1: 34695.447 us/op
Iteration   2: 34938.313 us/op
Iteration   3: 38789.031 us/op
Iteration   4: 34805.952 us/op
Iteration   5: 34066.808 us/op
Iteration   6: 33384.913 us/op
Iteration   7: 33113.788 us/op
Iteration   8: 34100.854 us/op
Iteration   9: 34474.469 us/op
Iteration  10: 34626.677 us/op
Iteration  11: 32909.084 us/op
Iteration  12: 34749.396 us/op
Iteration  13: 34458.110 us/op
Iteration  14: 34691.926 us/op
Iteration  15: 35099.857 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  N = 15
  mean =  34593.642 ±(99.9%) 1431.689 us/op

  Histogram, us/op:
    [32000.000, 32500.000) = 0 
    [32500.000, 33000.000) = 1 
    [33000.000, 33500.000) = 2 
    [33500.000, 34000.000) = 0 
    [34000.000, 34500.000) = 4 
    [34500.000, 35000.000) = 6 
    [35000.000, 35500.000) = 1 
    [35500.000, 36000.000) = 0 
    [36000.000, 36500.000) = 0 
    [36500.000, 37000.000) = 0 
    [37000.000, 37500.000) = 0 
    [37500.000, 38000.000) = 0 
    [38000.000, 38500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  32909.084 us/op
     p(50.0000) =  34626.677 us/op
     p(90.0000) =  36575.527 us/op
     p(95.0000) =  38789.031 us/op
     p(99.0000) =  38789.031 us/op
     p(99.9000) =  38789.031 us/op
     p(99.9900) =  38789.031 us/op
     p(99.9990) =  38789.031 us/op
     p(99.9999) =  38789.031 us/op
    p(100.0000) =  38789.031 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 20954.825 us/op
# Warmup Iteration   2: 3776.408 us/op
# Warmup Iteration   3: 2879.645 us/op
# Warmup Iteration   4: 1497.699 us/op
# Warmup Iteration   5: 1493.137 us/op
Iteration   1: 1357.326 us/op
Iteration   2: 1301.724 us/op
Iteration   3: 1085.907 us/op
Iteration   4: 999.011 us/op
Iteration   5: 1055.800 us/op
Iteration   6: 1129.767 us/op
Iteration   7: 938.811 us/op
Iteration   8: 907.901 us/op
Iteration   9: 1207.925 us/op
Iteration  10: 929.337 us/op
Iteration  11: 898.377 us/op
Iteration  12: 885.233 us/op
Iteration  13: 886.341 us/op
Iteration  14: 883.528 us/op
Iteration  15: 885.670 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean =   1023.511 ±(99.9%) 171.733 us/op

  Histogram, us/op:
    [ 800.000,  850.000) = 0 
    [ 850.000,  900.000) = 5 
    [ 900.000,  950.000) = 3 
    [ 950.000, 1000.000) = 1 
    [1000.000, 1050.000) = 0 
    [1050.000, 1100.000) = 2 
    [1100.000, 1150.000) = 1 
    [1150.000, 1200.000) = 0 
    [1200.000, 1250.000) = 1 
    [1250.000, 1300.000) = 0 
    [1300.000, 1350.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    883.528 us/op
     p(50.0000) =    938.811 us/op
     p(90.0000) =   1323.965 us/op
     p(95.0000) =   1357.326 us/op
     p(99.0000) =   1357.326 us/op
     p(99.9000) =   1357.326 us/op
     p(99.9900) =   1357.326 us/op
     p(99.9990) =   1357.326 us/op
     p(99.9999) =   1357.326 us/op
    p(100.0000) =   1357.326 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 35836.871 us/op
# Warmup Iteration   2: 11429.141 us/op
# Warmup Iteration   3: 8751.511 us/op
# Warmup Iteration   4: 10153.654 us/op
# Warmup Iteration   5: 8717.819 us/op
Iteration   1: 8612.713 us/op
Iteration   2: 8603.358 us/op
Iteration   3: 8594.353 us/op
Iteration   4: 10940.898 us/op
Iteration   5: 8640.819 us/op
Iteration   6: 8748.706 us/op
Iteration   7: 8553.187 us/op
Iteration   8: 8688.066 us/op
Iteration   9: 8594.113 us/op
Iteration  10: 8674.041 us/op
Iteration  11: 8748.189 us/op
Iteration  12: 8582.608 us/op
Iteration  13: 8670.540 us/op
Iteration  14: 8549.832 us/op
Iteration  15: 8779.171 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean =   8798.706 ±(99.9%) 638.173 us/op

  Histogram, us/op:
    [ 8000.000,  8250.000) = 0 
    [ 8250.000,  8500.000) = 0 
    [ 8500.000,  8750.000) = 13 
    [ 8750.000,  9000.000) = 1 
    [ 9000.000,  9250.000) = 0 
    [ 9250.000,  9500.000) = 0 
    [ 9500.000,  9750.000) = 0 
    [ 9750.000, 10000.000) = 0 
    [10000.000, 10250.000) = 0 
    [10250.000, 10500.000) = 0 
    [10500.000, 10750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   8549.832 us/op
     p(50.0000) =   8640.819 us/op
     p(90.0000) =   9643.862 us/op
     p(95.0000) =  10940.898 us/op
     p(99.0000) =  10940.898 us/op
     p(99.9000) =  10940.898 us/op
     p(99.9900) =  10940.898 us/op
     p(99.9990) =  10940.898 us/op
     p(99.9999) =  10940.898 us/op
    p(100.0000) =  10940.898 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 180627.826 us/op
# Warmup Iteration   2: 115631.410 us/op
# Warmup Iteration   3: 108359.558 us/op
# Warmup Iteration   4: 108064.541 us/op
# Warmup Iteration   5: 106179.067 us/op
Iteration   1: 107322.432 us/op
Iteration   2: 111576.206 us/op
Iteration   3: 112549.685 us/op
Iteration   4: 110506.014 us/op
Iteration   5: 108647.029 us/op
Iteration   6: 109104.383 us/op
Iteration   7: 109163.914 us/op
Iteration   8: 108370.632 us/op
Iteration   9: 108359.946 us/op
Iteration  10: 107476.549 us/op
Iteration  11: 108164.575 us/op
Iteration  12: 106902.276 us/op
Iteration  13: 106142.444 us/op
Iteration  14: 107802.971 us/op
Iteration  15: 106340.421 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean = 108561.965 ±(99.9%) 1948.352 us/op

  Histogram, us/op:
    [106000.000, 106500.000) = 2 
    [106500.000, 107000.000) = 1 
    [107000.000, 107500.000) = 2 
    [107500.000, 108000.000) = 1 
    [108000.000, 108500.000) = 3 
    [108500.000, 109000.000) = 1 
    [109000.000, 109500.000) = 2 
    [109500.000, 110000.000) = 0 
    [110000.000, 110500.000) = 0 
    [110500.000, 111000.000) = 1 
    [111000.000, 111500.000) = 0 
    [111500.000, 112000.000) = 1 
    [112000.000, 112500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 106142.444 us/op
     p(50.0000) = 108359.946 us/op
     p(90.0000) = 111965.598 us/op
     p(95.0000) = 112549.685 us/op
     p(99.0000) = 112549.685 us/op
     p(99.9000) = 112549.685 us/op
     p(99.9900) = 112549.685 us/op
     p(99.9990) = 112549.685 us/op
     p(99.9999) = 112549.685 us/op
    p(100.0000) = 112549.685 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1805272.973 us/op
# Warmup Iteration   2: 1611427.571 us/op
# Warmup Iteration   3: 1638065.662 us/op
# Warmup Iteration   4: 1637435.363 us/op
# Warmup Iteration   5: 1641789.943 us/op
Iteration   1: 1644801.641 us/op
Iteration   2: 1652624.671 us/op
Iteration   3: 1639417.477 us/op
Iteration   4: 1629483.953 us/op
Iteration   5: 1631902.519 us/op
Iteration   6: 1640726.531 us/op
Iteration   7: 1643052.787 us/op
Iteration   8: 1652771.067 us/op
Iteration   9: 1635064.195 us/op
Iteration  10: 1654448.363 us/op
Iteration  11: 1633644.805 us/op
Iteration  12: 1640938.080 us/op
Iteration  13: 1643955.961 us/op
Iteration  14: 1657158.365 us/op
Iteration  15: 1649360.850 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  N = 15
  mean = 1643290.084 ±(99.9%) 9221.150 us/op

  Histogram, us/op:
    [1620000.000, 1622500.000) = 0 
    [1622500.000, 1625000.000) = 0 
    [1625000.000, 1627500.000) = 0 
    [1627500.000, 1630000.000) = 1 
    [1630000.000, 1632500.000) = 1 
    [1632500.000, 1635000.000) = 1 
    [1635000.000, 1637500.000) = 1 
    [1637500.000, 1640000.000) = 1 
    [1640000.000, 1642500.000) = 2 
    [1642500.000, 1645000.000) = 3 
    [1645000.000, 1647500.000) = 0 
    [1647500.000, 1650000.000) = 1 
    [1650000.000, 1652500.000) = 0 
    [1652500.000, 1655000.000) = 3 
    [1655000.000, 1657500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 1629483.953 us/op
     p(50.0000) = 1643052.787 us/op
     p(90.0000) = 1655532.364 us/op
     p(95.0000) = 1657158.365 us/op
     p(99.0000) = 1657158.365 us/op
     p(99.9000) = 1657158.365 us/op
     p(99.9900) = 1657158.365 us/op
     p(99.9990) = 1657158.365 us/op
     p(99.9999) = 1657158.365 us/op
    p(100.0000) = 1657158.365 us/op


# Run complete. Total time: 08:43:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                    (iterations)  (length)     (size)    Mode      Cnt        Score       Error   Units
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A   thrpt       15        0.002 ±     0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A   thrpt       15        0.002 ±     0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A   thrpt       15        0.001 ±     0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A   thrpt       15        0.002 ±     0.001  ops/us
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A   thrpt       15        1.475 ±     0.001  ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A   thrpt       15        0.621 ±     0.001  ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A   thrpt       15        0.358 ±     0.001  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10   thrpt       15       19.387 ±     0.184  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100   thrpt       15        2.025 ±     0.026  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000   thrpt       15        0.195 ±     0.002  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10   thrpt       15       20.682 ±     0.678  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100   thrpt       15        2.317 ±     0.030  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000   thrpt       15        0.214 ±     0.003  ops/us
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁴              ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A   thrpt       15        0.002 ±     0.001  ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A   thrpt       15       ≈ 10⁻⁷              ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A   thrpt       15       ≈ 10⁻³              ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁴              ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A   thrpt       15       46.151 ±     0.023  ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁴              ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁴              ops/us
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁴              ops/us
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A   thrpt       15        0.001 ±     0.001  ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A   thrpt       15       ≈ 10⁻⁴              ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A   thrpt       15       ≈ 10⁻⁵              ops/us
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A   thrpt       15       ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024    avgt       15   195123.867 ±   369.924   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240    avgt       15   148343.630 ±   395.719   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400    avgt       15   144936.605 ±   489.406   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576    avgt       15   198089.985 ±   433.076   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760    avgt       15   197310.693 ±   548.207   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600    avgt       15   193831.428 ±   453.738   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024    avgt       15  1341075.934 ±  8748.118   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240    avgt       15   895429.950 ±  3957.643   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400    avgt       15   785363.792 ±  2242.268   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576    avgt       15   862554.688 ±  2177.004   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760    avgt       15   849535.592 ±  3396.276   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600    avgt       15   939633.481 ±  2809.271   us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A    avgt       15      535.300 ±     0.526   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A    avgt       15      658.123 ±     3.968   us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A    avgt       15      821.756 ±    94.769   us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A    avgt       15      533.892 ±     0.596   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A    avgt       15   885481.375 ±  1739.969   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A    avgt       15   234833.195 ±  2570.156   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A    avgt       15  2002052.669 ± 41492.285   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A    avgt       15        0.677 ±     0.001   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A    avgt       15        1.611 ±     0.001   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A    avgt       15        2.795 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10    avgt       15        0.051 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100    avgt       15        0.490 ±     0.003   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000    avgt       15        5.115 ±     0.055   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10    avgt       15        0.048 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100    avgt       15        0.426 ±     0.007   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000    avgt       15        4.799 ±     0.166   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A    avgt       15    14456.701 ±    10.794   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A    avgt       15      418.374 ±     1.021   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A    avgt       15    66084.390 ±    43.207   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A    avgt       15  4305312.082 ± 10066.001   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A    avgt       15     2997.887 ±     1.628   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A    avgt       15    31489.360 ±     7.511   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A    avgt       15  1759716.594 ±   725.987   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A    avgt       15        0.022 ±     0.001   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A    avgt       15    10637.098 ±   106.269   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A    avgt       15    36545.095 ±  5795.114   us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A    avgt       15    32176.996 ±    58.963   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A    avgt       15    18176.663 ±    99.263   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A    avgt       15    15890.958 ±    95.622   us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A    avgt       15    34492.141 ±   731.784   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A    avgt       15      763.170 ±     4.733   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A    avgt       15     7888.588 ±     7.265   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A    avgt       15   107058.281 ±   358.927   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A    avgt       15  1689116.601 ±  9503.758   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024  sample      780   194769.967 ±   169.095   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A       1024  sample            191102.976               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A       1024  sample            194772.992               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A       1024  sample            196608.000               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A       1024  sample            197132.288               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A       1024  sample            198705.152               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A       1024  sample            200802.304               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A       1024  sample            200802.304               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A       1024  sample            200802.304               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240  sample     1018   148919.938 ±   128.327   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A      10240  sample            146538.496               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A      10240  sample            148897.792               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A      10240  sample            150208.512               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A      10240  sample            150732.800               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A      10240  sample            151993.713               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A      10240  sample            169046.180               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A      10240  sample            169345.024               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A      10240  sample            169345.024               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400  sample     1037   145435.064 ±   118.670   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A     102400  sample            142868.480               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A     102400  sample            145489.920               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A     102400  sample            147062.784               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A     102400  sample            147324.928               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A     102400  sample            148111.360               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A     102400  sample            149149.975               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A     102400  sample            149159.936               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A     102400  sample            149159.936               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576  sample      765   198437.525 ±   162.413   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A    1048576  sample            195821.568               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A    1048576  sample            198180.864               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A    1048576  sample            200278.016               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A    1048576  sample            200540.160               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A    1048576  sample            201153.577               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A    1048576  sample            201850.880               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A    1048576  sample            201850.880               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A    1048576  sample            201850.880               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760  sample      765   197905.356 ±   154.025   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A   10485760  sample            195297.280               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A   10485760  sample            197918.720               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A   10485760  sample            199491.584               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A   10485760  sample            200015.872               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A   10485760  sample            200540.160               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A   10485760  sample            201850.880               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A   10485760  sample            201850.880               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A   10485760  sample            201850.880               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600  sample      780   194120.993 ±   157.096   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A  104857600  sample            191365.120               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A  104857600  sample            193986.560               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A  104857600  sample            195821.568               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A  104857600  sample            196345.856               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A  104857600  sample            196870.144               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A  104857600  sample            197918.720               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A  104857600  sample            197918.720               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A  104857600  sample            197918.720               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024  sample      120  1330887.612 ± 19094.671   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A       1024  sample           1166016.512               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A       1024  sample           1345323.008               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A       1024  sample           1386217.472               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A       1024  sample           1394501.222               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A       1024  sample           1402554.286               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A       1024  sample           1402994.688               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A       1024  sample           1402994.688               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A       1024  sample           1402994.688               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240  sample      174   907018.240 ± 13310.308   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A      10240  sample            805306.368               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A      10240  sample            907542.528               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A      10240  sample            981467.136               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A      10240  sample            993263.616               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A      10240  sample           1005584.384               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A      10240  sample           1005584.384               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A      10240  sample           1005584.384               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A      10240  sample           1005584.384               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400  sample      195   788572.171 ±  9797.041   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A     102400  sample            711983.104               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A     102400  sample            788529.152               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A     102400  sample            840957.952               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A     102400  sample            855638.016               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A     102400  sample            863187.763               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A     102400  sample            868220.928               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A     102400  sample            868220.928               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A     102400  sample            868220.928               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576  sample      180   865651.917 ± 10665.306   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A    1048576  sample            784334.848               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A    1048576  sample            865075.200               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A    1048576  sample            925787.750               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A    1048576  sample            937426.944               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A    1048576  sample            950156.657               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A    1048576  sample            955252.736               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A    1048576  sample            955252.736               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A    1048576  sample            955252.736               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760  sample      180   856715.719 ±  8546.097   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A   10485760  sample            780140.544               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A   10485760  sample            856686.592               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A   10485760  sample            902614.221               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A   10485760  sample            912261.120               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A   10485760  sample            928985.907               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A   10485760  sample            933232.640               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A   10485760  sample            933232.640               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A   10485760  sample            933232.640               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600  sample      165   947537.759 ± 16658.594   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A  104857600  sample            871366.656               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A  104857600  sample            926941.184               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A  104857600  sample           1067450.368               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A  104857600  sample           1071644.672               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A  104857600  sample           1074454.856               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A  104857600  sample           1075838.976               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A  104857600  sample           1075838.976               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A  104857600  sample           1075838.976               us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A  sample   276832      541.195 ±     0.077   us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.00                                                                        N/A       N/A        N/A  sample               526.336               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.50                                                                        N/A       N/A        N/A  sample               538.624               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.90                                                                        N/A       N/A        N/A  sample               550.912               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.95                                                                        N/A       N/A        N/A  sample               555.008               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.99                                                                        N/A       N/A        N/A  sample               581.632               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.999                                                                       N/A       N/A        N/A  sample               647.168               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.9999                                                                      N/A       N/A        N/A  sample               918.477               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p1.00                                                                        N/A       N/A        N/A  sample              3141.632               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A  sample   229237      653.716 ±     0.114   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.00                                                        N/A       N/A        N/A  sample               644.096               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.50                                                        N/A       N/A        N/A  sample               651.264               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.90                                                        N/A       N/A        N/A  sample               664.576               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.95                                                        N/A       N/A        N/A  sample               668.672               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.99                                                        N/A       N/A        N/A  sample               692.224               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.999                                                       N/A       N/A        N/A  sample               774.144               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.9999                                                      N/A       N/A        N/A  sample              1219.340               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p1.00                                                        N/A       N/A        N/A  sample              3317.760               us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A  sample   257946      580.960 ±     0.414   us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.00                                                                        N/A       N/A        N/A  sample               563.200               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.50                                                                        N/A       N/A        N/A  sample               567.296               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.90                                                                        N/A       N/A        N/A  sample               575.488               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.95                                                                        N/A       N/A        N/A  sample               589.824               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.99                                                                        N/A       N/A        N/A  sample               939.008               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.999                                                                       N/A       N/A        N/A  sample               949.248               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.9999                                                                      N/A       N/A        N/A  sample               982.016               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p1.00                                                                        N/A       N/A        N/A  sample              1720.320               us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A  sample   280315      534.489 ±     0.058   us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.00                                                                      N/A       N/A        N/A  sample               514.560               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.50                                                                      N/A       N/A        N/A  sample               533.504               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.90                                                                      N/A       N/A        N/A  sample               544.768               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.95                                                                      N/A       N/A        N/A  sample               548.864               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.99                                                                      N/A       N/A        N/A  sample               567.296               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.999                                                                     N/A       N/A        N/A  sample               594.620               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.9999                                                                    N/A       N/A        N/A  sample               686.080               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p1.00                                                                      N/A       N/A        N/A  sample              1120.256               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A  sample      180   886885.581 ±   805.083   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.00                                          N/A       N/A        N/A  sample            880803.840               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.50                                          N/A       N/A        N/A  sample            886046.720               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.90                                          N/A       N/A        N/A  sample            892338.176               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.95                                          N/A       N/A        N/A  sample            893386.752               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.99                                          N/A       N/A        N/A  sample            895232.246               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.999                                         N/A       N/A        N/A  sample            898629.632               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.9999                                        N/A       N/A        N/A  sample            898629.632               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p1.00                                          N/A       N/A        N/A  sample            898629.632               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A  sample      644   235442.761 ±   303.763   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.00                                  N/A       100        N/A  sample            231735.296               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.50                                  N/A       100        N/A  sample            234881.024               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.90                                  N/A       100        N/A  sample            238288.896               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.95                                  N/A       100        N/A  sample            238747.648               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.99                                  N/A       100        N/A  sample            243793.920               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.999                                 N/A       100        N/A  sample            251920.384               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.9999                                N/A       100        N/A  sample            251920.384               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p1.00                                  N/A       100        N/A  sample            251920.384               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A  sample       75  2163897.358 ± 12718.797   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.00                                  N/A      1000        N/A  sample           2113929.216               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.50                                  N/A      1000        N/A  sample           2155872.256               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.90                                  N/A      1000        N/A  sample           2203687.322               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.95                                  N/A      1000        N/A  sample           2238080.614               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.99                                  N/A      1000        N/A  sample           2260729.856               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.999                                 N/A      1000        N/A  sample           2260729.856               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.9999                                N/A      1000        N/A  sample           2260729.856               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p1.00                                  N/A      1000        N/A  sample           2260729.856               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A  sample  3404598        0.729 ±     0.004   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                                521       N/A        N/A  sample                 0.677               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                                521       N/A        N/A  sample                 0.709               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                                521       N/A        N/A  sample                 0.722               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                                521       N/A        N/A  sample                 0.725               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                                521       N/A        N/A  sample                 0.733               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                               521       N/A        N/A  sample                 6.448               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                              521       N/A        N/A  sample                18.417               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                                521       N/A        N/A  sample              2727.936               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A  sample  5764137        1.652 ±     0.001   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                               1153       N/A        N/A  sample                 1.606               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                               1153       N/A        N/A  sample                 1.632               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                               1153       N/A        N/A  sample                 1.644               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                               1153       N/A        N/A  sample                 1.648               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                               1153       N/A        N/A  sample                 1.660               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                              1153       N/A        N/A  sample                 7.592               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                             1153       N/A        N/A  sample                19.872               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                               1153       N/A        N/A  sample               368.640               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A  sample  3328937        2.847 ±     0.003   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                               2021       N/A        N/A  sample                 2.772               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                               2021       N/A        N/A  sample                 2.808               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                               2021       N/A        N/A  sample                 2.828               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                               2021       N/A        N/A  sample                 2.832               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                               2021       N/A        N/A  sample                 2.848               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                              2021       N/A        N/A  sample                11.760               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                             2021       N/A        N/A  sample                30.243               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                               2021       N/A        N/A  sample              2723.840               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10  sample  3479728        0.116 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A         10  sample                 0.101               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A         10  sample                 0.106               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A         10  sample                 0.117               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A         10  sample                 0.124               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A         10  sample                 0.131               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A         10  sample                 0.583               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A         10  sample                 8.480               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A         10  sample               139.776               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100  sample  3142785        0.789 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A        100  sample                 0.705               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A        100  sample                 0.765               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A        100  sample                 0.824               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A        100  sample                 0.838               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A        100  sample                 0.861               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A        100  sample                 6.952               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A        100  sample                18.167               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A        100  sample               145.920               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000  sample  4511604        7.210 ±     0.002   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A       1000  sample                 6.904               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A       1000  sample                 7.088               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A       1000  sample                 7.240               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A       1000  sample                 7.824               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A       1000  sample                10.384               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A       1000  sample                16.608               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A       1000  sample                36.672               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A       1000  sample               524.288               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10  sample  3956985        0.103 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A         10  sample                 0.088               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A         10  sample                 0.096               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A         10  sample                 0.105               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A         10  sample                 0.105               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A         10  sample                 0.112               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A         10  sample                 0.226               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A         10  sample                 7.920               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A         10  sample               175.104               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100  sample  3633463        0.688 ±     0.003   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A        100  sample                 0.603               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A        100  sample                 0.669               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A        100  sample                 0.696               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A        100  sample                 0.707               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A        100  sample                 0.711               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A        100  sample                 5.280               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A        100  sample                14.986               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A        100  sample              2699.264               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000  sample  2774803        6.772 ±     0.005   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A       1000  sample                 6.560               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A       1000  sample                 6.704               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A       1000  sample                 6.816               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A       1000  sample                 6.848               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A       1000  sample                 9.264               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A       1000  sample                17.248               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A       1000  sample                46.697               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A       1000  sample              3543.040               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A  sample    10392    14435.638 ±     1.435   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.00                                  N/A       N/A        N/A  sample             14352.384               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.50                                  N/A       N/A        N/A  sample             14434.304               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.90                                  N/A       N/A        N/A  sample             14467.072               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.95                                  N/A       N/A        N/A  sample             14483.456               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.99                                  N/A       N/A        N/A  sample             14581.760               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.999                                 N/A       N/A        N/A  sample             14853.849               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.9999                                N/A       N/A        N/A  sample             15819.217               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p1.00                                  N/A       N/A        N/A  sample             15826.944               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A  sample   356191      420.738 ±     0.163   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A       100        N/A  sample               406.016               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A       100        N/A  sample               417.280               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A       100        N/A  sample               430.592               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A       100        N/A  sample               436.736               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A       100        N/A  sample               459.776               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A       100        N/A  sample               876.544               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A       100        N/A  sample              1376.548               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A       100        N/A  sample              2744.320               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A  sample     2471    60896.656 ±    52.410   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A      1000        N/A  sample             60030.976               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A      1000        N/A  sample             60489.728               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A      1000        N/A  sample             61931.520               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A      1000        N/A  sample             61997.056               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A      1000        N/A  sample             62259.200               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A      1000        N/A  sample             66576.712               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A      1000        N/A  sample             76021.760               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A      1000        N/A  sample             76021.760               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A  sample       45  4336723.922 ± 53884.416   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A     10000        N/A  sample           4248829.952               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A     10000        N/A  sample           4273995.776               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A     10000        N/A  sample           4487905.280               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A     10000        N/A  sample           4487905.280               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A     10000        N/A  sample           4487905.280               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A     10000        N/A  sample           4487905.280               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A     10000        N/A  sample           4487905.280               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A     10000        N/A  sample           4487905.280               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A  sample    50028     2996.318 ±     0.291   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.00             N/A       N/A        N/A  sample              2969.600               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.50             N/A       N/A        N/A  sample              2994.176               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.90             N/A       N/A        N/A  sample              3010.560               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.95             N/A       N/A        N/A  sample              3026.944               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.99             N/A       N/A        N/A  sample              3055.616               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.999            N/A       N/A        N/A  sample              3190.665               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.9999           N/A       N/A        N/A  sample              3485.577               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p1.00             N/A       N/A        N/A  sample              3543.040               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A  sample     4770    31482.732 ±     5.239   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.00                     N/A       N/A        N/A  sample             31358.976               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.50                     N/A       N/A        N/A  sample             31457.280               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.90                     N/A       N/A        N/A  sample             31522.816               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.95                     N/A       N/A        N/A  sample             31555.584               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.99                     N/A       N/A        N/A  sample             31663.391               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.999                    N/A       N/A        N/A  sample             32079.872               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.9999                   N/A       N/A        N/A  sample             37683.200               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p1.00                     N/A       N/A        N/A  sample             37683.200               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A  sample      105  1759450.609 ±   310.811   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.00                                                 N/A       N/A        N/A  sample           1755316.224               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.50                                                 N/A       N/A        N/A  sample           1759510.528               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.90                                                 N/A       N/A        N/A  sample           1759510.528               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.95                                                 N/A       N/A        N/A  sample           1761607.680               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.99                                                 N/A       N/A        N/A  sample           1763579.003               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.999                                                N/A       N/A        N/A  sample           1763704.832               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.9999                                               N/A       N/A        N/A  sample           1763704.832               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p1.00                                                 N/A       N/A        N/A  sample           1763704.832               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A  sample  5431426        0.064 ±     0.001   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.00                       N/A       N/A        N/A  sample                 0.048               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.50                       N/A       N/A        N/A  sample                 0.060               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.90                       N/A       N/A        N/A  sample                 0.074               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.95                       N/A       N/A        N/A  sample                 0.075               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.99                       N/A       N/A        N/A  sample                 0.076               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.999                      N/A       N/A        N/A  sample                 0.128               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.9999                     N/A       N/A        N/A  sample                 5.743               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p1.00                       N/A       N/A        N/A  sample               113.024               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A  sample    14066    10661.130 ±     3.387   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.00                                   N/A       N/A        N/A  sample             10174.464               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.50                                   N/A       N/A        N/A  sample             10600.448               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.90                                   N/A       N/A        N/A  sample             10829.824               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.95                                   N/A       N/A        N/A  sample             10846.208               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.99                                   N/A       N/A        N/A  sample             10878.976               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.999                                  N/A       N/A        N/A  sample             11041.718               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.9999                                 N/A       N/A        N/A  sample             11864.524               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p1.00                                   N/A       N/A        N/A  sample             11911.168               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A  sample     4424    33938.856 ±   254.559   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.00                                             N/A       N/A        N/A  sample             27164.672               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.50                                             N/A       N/A        N/A  sample             34078.720               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.90                                             N/A       N/A        N/A  sample             41222.144               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.95                                             N/A       N/A        N/A  sample             43515.904               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.99                                             N/A       N/A        N/A  sample             43712.512               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.999                                            N/A       N/A        N/A  sample             43974.656               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.9999                                           N/A       N/A        N/A  sample             47775.744               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p1.00                                             N/A       N/A        N/A  sample             47775.744               us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A  sample     4642    32342.192 ±   272.438   us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.00                                                              N/A       N/A        N/A  sample             30998.528               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.50                                                              N/A       N/A        N/A  sample             31195.136               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.90                                                              N/A       N/A        N/A  sample             31293.440               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.95                                                              N/A       N/A        N/A  sample             34452.275               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.99                                                              N/A       N/A        N/A  sample             64815.104               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.999                                                             N/A       N/A        N/A  sample             74776.445               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.9999                                                            N/A       N/A        N/A  sample             76939.264               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p1.00                                                              N/A       N/A        N/A  sample             76939.264               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A  sample     7417    20232.992 ±   333.706   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.00                                                            N/A       N/A        N/A  sample             17530.880               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.50                                                            N/A       N/A        N/A  sample             17727.488               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.90                                                            N/A       N/A        N/A  sample             19922.944               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.95                                                            N/A       N/A        N/A  sample             43397.939               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.99                                                            N/A       N/A        N/A  sample             62902.764               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.999                                                           N/A       N/A        N/A  sample             68419.584               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.9999                                                          N/A       N/A        N/A  sample             77725.696               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p1.00                                                            N/A       N/A        N/A  sample             77725.696               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A  sample     9451    15871.710 ±    20.423   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.00                                                                N/A       N/A        N/A  sample             15499.264               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.50                                                                N/A       N/A        N/A  sample             15728.640               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.90                                                                N/A       N/A        N/A  sample             16007.168               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.95                                                                N/A       N/A        N/A  sample             16580.608               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.99                                                                N/A       N/A        N/A  sample             18874.368               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.999                                                               N/A       N/A        N/A  sample             19500.106               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.9999                                                              N/A       N/A        N/A  sample             24412.160               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p1.00                                                                N/A       N/A        N/A  sample             24412.160               us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A  sample     4471    33591.084 ±    66.470   us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.00                                                                      N/A       N/A        N/A  sample             32342.016               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.50                                                                      N/A       N/A        N/A  sample             33325.056               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.90                                                                      N/A       N/A        N/A  sample             34406.400               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.95                                                                      N/A       N/A        N/A  sample             34996.224               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.99                                                                      N/A       N/A        N/A  sample             42139.648               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.999                                                                     N/A       N/A        N/A  sample             44852.314               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.9999                                                                    N/A       N/A        N/A  sample             50921.472               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p1.00                                                                      N/A       N/A        N/A  sample             50921.472               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A  sample   195446      766.843 ±     0.351   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A        10        N/A  sample               720.896               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A        10        N/A  sample               760.832               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A        10        N/A  sample               780.288               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A        10        N/A  sample               789.504               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A        10        N/A  sample               857.088               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A        10        N/A  sample              1285.229               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A        10        N/A  sample              2057.325               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A        10        N/A  sample              3035.136               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A  sample    18964     7907.542 ±     3.949   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A       100        N/A  sample              7716.864               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A       100        N/A  sample              7864.320               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A       100        N/A  sample              8011.776               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A       100        N/A  sample              8314.880               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A       100        N/A  sample              8486.912               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A       100        N/A  sample              8880.701               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A       100        N/A  sample             11406.655               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A       100        N/A  sample             11436.032               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A  sample     1405   107392.374 ±   103.706   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A      1000        N/A  sample            104071.168               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A      1000        N/A  sample            107347.968               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A      1000        N/A  sample            109051.904               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A      1000        N/A  sample            109445.120               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A      1000        N/A  sample            110362.624               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A      1000        N/A  sample            111460.483               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A      1000        N/A  sample            111673.344               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A      1000        N/A  sample            111673.344               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A  sample      105  1694059.413 ± 62055.950   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.00                        N/A       N/A        N/A  sample           1474297.856               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.50                        N/A       N/A        N/A  sample           1652555.776               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.90                        N/A       N/A        N/A  sample           2106379.469               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.95                        N/A       N/A        N/A  sample           2116026.368               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.99                        N/A       N/A        N/A  sample           2128357.622               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.999                       N/A       N/A        N/A  sample           2128609.280               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.9999                      N/A       N/A        N/A  sample           2128609.280               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p1.00                        N/A       N/A        N/A  sample           2128609.280               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024      ss       15   195427.887 ±  2085.809   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240      ss       15   151213.761 ±   941.224   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400      ss       15   150739.838 ±  6037.823   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576      ss       15   199666.282 ±  1563.303   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760      ss       15   199229.451 ±   712.291   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600      ss       15   194041.803 ±  1008.617   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024      ss       15  1185973.067 ±  4659.846   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240      ss       15   812420.038 ±  5091.716   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400      ss       15   727680.412 ±  7723.980   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576      ss       15   804435.730 ±  5500.090   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760      ss       15   793129.747 ±  6488.442   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600      ss       15   929574.802 ±  2728.083   us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A      ss       15      600.448 ±    39.785   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A      ss       15      696.563 ±    14.966   us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A      ss       15      950.969 ±    13.727   us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A      ss       15      603.113 ±    22.630   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A      ss       15   888211.820 ±  4808.007   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A      ss       15   233811.782 ±  2737.530   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A      ss       15  2183389.737 ± 33574.176   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A      ss       15       15.210 ±    14.540   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A      ss       15       10.334 ±    13.610   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A      ss       15        8.665 ±     3.340   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10      ss       15        7.337 ±     3.444   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100      ss       15       15.261 ±     3.068   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000      ss       15       92.342 ±     6.984   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10      ss       15        6.087 ±     0.542   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100      ss       15       18.083 ±    12.244   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000      ss       15       99.297 ±    26.709   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A      ss       15    14821.276 ±   487.777   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A      ss       15     1152.893 ±   834.634   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A      ss       15    41560.239 ±   145.089   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A      ss       15  6604682.450 ±  3938.345   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A      ss       15     3004.683 ±     9.241   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A      ss       15    31507.149 ±    36.168   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A      ss       15  1759940.247 ±  1004.309   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A      ss       15       14.262 ±     2.899   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A      ss       15    10430.008 ±   105.918   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A      ss       15    38013.859 ±  5020.228   us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A      ss       15    37276.381 ±    56.387   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A      ss       15    16136.642 ±    72.765   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A      ss       15    15301.662 ±  2186.877   us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A      ss       15    34593.642 ±  1431.689   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A      ss       15     1023.511 ±   171.733   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A      ss       15     8798.706 ±   638.173   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A      ss       15   108561.965 ±  1948.352   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A      ss       15  1643290.084 ±  9221.150   us/op
