# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 0.00% complete, ETA 07:40:00
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 0.72% complete, ETA 08:12:08
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 1.45% complete, ETA 08:10:31
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 2.17% complete, ETA 08:06:43
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 2.90% complete, ETA 08:03:06
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 3.62% complete, ETA 07:59:27
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 4.35% complete, ETA 07:55:44
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 5.07% complete, ETA 08:00:26
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 5.80% complete, ETA 07:57:29
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 6.52% complete, ETA 07:53:29
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap(AllocationBenchmark.java:52)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_thrpt_jmhStub(AllocationBenchmark_fillHeap_jmhTest.java:161)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_Throughput(AllocationBenchmark_fillHeap_jmhTest.java:104)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)




# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 7.25% complete, ETA 07:03:22
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 7.97% complete, ETA 07:04:06
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 8.70% complete, ETA 07:03:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ops/us
# Warmup Iteration   2: 0.003 ops/us
# Warmup Iteration   3: 0.003 ops/us
# Warmup Iteration   4: 0.003 ops/us
# Warmup Iteration   5: 0.003 ops/us
Iteration   1: 0.003 ops/us
Iteration   2: 0.003 ops/us
Iteration   3: 0.003 ops/us
Iteration   4: 0.003 ops/us
Iteration   5: 0.003 ops/us
Iteration   6: 0.003 ops/us
Iteration   7: 0.003 ops/us
Iteration   8: 0.003 ops/us
Iteration   9: 0.003 ops/us
Iteration  10: 0.003 ops/us
Iteration  11: 0.003 ops/us
Iteration  12: 0.003 ops/us
Iteration  13: 0.003 ops/us
Iteration  14: 0.003 ops/us
Iteration  15: 0.003 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  0.003 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 9.42% complete, ETA 07:02:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ops/us
# Warmup Iteration   2: 0.006 ops/us
# Warmup Iteration   3: 0.006 ops/us
# Warmup Iteration   4: 0.006 ops/us
# Warmup Iteration   5: 0.006 ops/us
Iteration   1: 0.006 ops/us
Iteration   2: 0.006 ops/us
Iteration   3: 0.006 ops/us
Iteration   4: 0.006 ops/us
Iteration   5: 0.006 ops/us
Iteration   6: 0.006 ops/us
Iteration   7: 0.006 ops/us
Iteration   8: 0.006 ops/us
Iteration   9: 0.006 ops/us
Iteration  10: 0.006 ops/us
Iteration  11: 0.006 ops/us
Iteration  12: 0.006 ops/us
Iteration  13: 0.006 ops/us
Iteration  14: 0.006 ops/us
Iteration  15: 0.006 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  0.006 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.006] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 10.14% complete, ETA 07:00:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ops/us
# Warmup Iteration   2: 0.003 ops/us
# Warmup Iteration   3: 0.003 ops/us
# Warmup Iteration   4: 0.003 ops/us
# Warmup Iteration   5: 0.003 ops/us
Iteration   1: 0.003 ops/us
Iteration   2: 0.003 ops/us
Iteration   3: 0.003 ops/us
Iteration   4: 0.003 ops/us
Iteration   5: 0.003 ops/us
Iteration   6: 0.003 ops/us
Iteration   7: 0.003 ops/us
Iteration   8: 0.003 ops/us
Iteration   9: 0.003 ops/us
Iteration  10: 0.003 ops/us
Iteration  11: 0.003 ops/us
Iteration  12: 0.003 ops/us
Iteration  13: 0.003 ops/us
Iteration  14: 0.003 ops/us
Iteration  15: 0.003 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  0.003 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 10.87% complete, ETA 06:58:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ops/us
# Warmup Iteration   2: 0.006 ops/us
# Warmup Iteration   3: 0.006 ops/us
# Warmup Iteration   4: 0.006 ops/us
# Warmup Iteration   5: 0.006 ops/us
Iteration   1: 0.006 ops/us
Iteration   2: 0.006 ops/us
Iteration   3: 0.006 ops/us
Iteration   4: 0.006 ops/us
Iteration   5: 0.006 ops/us
Iteration   6: 0.006 ops/us
Iteration   7: 0.006 ops/us
Iteration   8: 0.006 ops/us
Iteration   9: 0.006 ops/us
Iteration  10: 0.006 ops/us
Iteration  11: 0.006 ops/us
Iteration  12: 0.006 ops/us
Iteration  13: 0.006 ops/us
Iteration  14: 0.006 ops/us
Iteration  15: 0.006 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  0.006 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.006] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 11.59% complete, ETA 06:56:49
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 12.32% complete, ETA 06:56:00
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 13.04% complete, ETA 06:53:34
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁷ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 13.77% complete, ETA 06:54:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.541 ops/us
# Warmup Iteration   2: 0.541 ops/us
# Warmup Iteration   3: 0.541 ops/us
# Warmup Iteration   4: 0.542 ops/us
# Warmup Iteration   5: 0.542 ops/us
Iteration   1: 0.542 ops/us
Iteration   2: 0.542 ops/us
Iteration   3: 0.542 ops/us
Iteration   4: 0.542 ops/us
Iteration   5: 0.541 ops/us
Iteration   6: 0.542 ops/us
Iteration   7: 0.542 ops/us
Iteration   8: 0.542 ops/us
Iteration   9: 0.542 ops/us
Iteration  10: 0.542 ops/us
Iteration  11: 0.542 ops/us
Iteration  12: 0.542 ops/us
Iteration  13: 0.542 ops/us
Iteration  14: 0.542 ops/us
Iteration  15: 0.542 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.542 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.541, 0.542, 0.542), stdev = 0.001
  CI (99.9%): [0.542, 0.542] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 14.49% complete, ETA 06:51:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.203 ops/us
# Warmup Iteration   2: 0.204 ops/us
# Warmup Iteration   3: 0.203 ops/us
# Warmup Iteration   4: 0.203 ops/us
# Warmup Iteration   5: 0.203 ops/us
Iteration   1: 0.203 ops/us
Iteration   2: 0.203 ops/us
Iteration   3: 0.203 ops/us
Iteration   4: 0.202 ops/us
Iteration   5: 0.203 ops/us
Iteration   6: 0.203 ops/us
Iteration   7: 0.203 ops/us
Iteration   8: 0.203 ops/us
Iteration   9: 0.203 ops/us
Iteration  10: 0.203 ops/us
Iteration  11: 0.204 ops/us
Iteration  12: 0.203 ops/us
Iteration  13: 0.203 ops/us
Iteration  14: 0.203 ops/us
Iteration  15: 0.202 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.203 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.202, 0.203, 0.204), stdev = 0.001
  CI (99.9%): [0.203, 0.203] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 15.22% complete, ETA 06:48:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.113 ops/us
# Warmup Iteration   2: 0.113 ops/us
# Warmup Iteration   3: 0.113 ops/us
# Warmup Iteration   4: 0.113 ops/us
# Warmup Iteration   5: 0.114 ops/us
Iteration   1: 0.114 ops/us
Iteration   2: 0.113 ops/us
Iteration   3: 0.113 ops/us
Iteration   4: 0.113 ops/us
Iteration   5: 0.113 ops/us
Iteration   6: 0.114 ops/us
Iteration   7: 0.113 ops/us
Iteration   8: 0.114 ops/us
Iteration   9: 0.113 ops/us
Iteration  10: 0.114 ops/us
Iteration  11: 0.113 ops/us
Iteration  12: 0.113 ops/us
Iteration  13: 0.113 ops/us
Iteration  14: 0.113 ops/us
Iteration  15: 0.113 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.113 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.113, 0.113, 0.114), stdev = 0.001
  CI (99.9%): [0.113, 0.114] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 15.94% complete, ETA 06:45:20
# Fork: 1 of 1
# Warmup Iteration   1: 22.068 ops/us
# Warmup Iteration   2: 21.953 ops/us
# Warmup Iteration   3: 25.206 ops/us
# Warmup Iteration   4: 25.205 ops/us
# Warmup Iteration   5: 24.151 ops/us
Iteration   1: 25.254 ops/us
Iteration   2: 25.207 ops/us
Iteration   3: 25.242 ops/us
Iteration   4: 25.206 ops/us
Iteration   5: 25.227 ops/us
Iteration   6: 25.230 ops/us
Iteration   7: 24.465 ops/us
Iteration   8: 25.246 ops/us
Iteration   9: 25.246 ops/us
Iteration  10: 25.222 ops/us
Iteration  11: 25.220 ops/us
Iteration  12: 25.251 ops/us
Iteration  13: 25.221 ops/us
Iteration  14: 25.182 ops/us
Iteration  15: 25.215 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  25.176 ±(99.9%) 0.211 ops/us [Average]
  (min, avg, max) = (24.465, 25.176, 25.254), stdev = 0.198
  CI (99.9%): [24.964, 25.387] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 16.67% complete, ETA 06:42:13
# Fork: 1 of 1
# Warmup Iteration   1: 2.606 ops/us
# Warmup Iteration   2: 2.589 ops/us
# Warmup Iteration   3: 2.624 ops/us
# Warmup Iteration   4: 2.622 ops/us
# Warmup Iteration   5: 2.627 ops/us
Iteration   1: 2.628 ops/us
Iteration   2: 2.621 ops/us
Iteration   3: 2.622 ops/us
Iteration   4: 2.622 ops/us
Iteration   5: 2.626 ops/us
Iteration   6: 2.626 ops/us
Iteration   7: 2.622 ops/us
Iteration   8: 2.618 ops/us
Iteration   9: 2.625 ops/us
Iteration  10: 2.631 ops/us
Iteration  11: 2.627 ops/us
Iteration  12: 2.603 ops/us
Iteration  13: 2.579 ops/us
Iteration  14: 2.628 ops/us
Iteration  15: 2.626 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  2.620 ±(99.9%) 0.014 ops/us [Average]
  (min, avg, max) = (2.579, 2.620, 2.631), stdev = 0.013
  CI (99.9%): [2.606, 2.634] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 17.39% complete, ETA 06:39:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.234 ops/us
# Warmup Iteration   2: 0.233 ops/us
# Warmup Iteration   3: 0.207 ops/us
# Warmup Iteration   4: 0.207 ops/us
# Warmup Iteration   5: 0.208 ops/us
Iteration   1: 0.211 ops/us
Iteration   2: 0.209 ops/us
Iteration   3: 0.210 ops/us
Iteration   4: 0.208 ops/us
Iteration   5: 0.212 ops/us
Iteration   6: 0.207 ops/us
Iteration   7: 0.207 ops/us
Iteration   8: 0.210 ops/us
Iteration   9: 0.208 ops/us
Iteration  10: 0.209 ops/us
Iteration  11: 0.209 ops/us
Iteration  12: 0.211 ops/us
Iteration  13: 0.206 ops/us
Iteration  14: 0.211 ops/us
Iteration  15: 0.205 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.209 ±(99.9%) 0.002 ops/us [Average]
  (min, avg, max) = (0.205, 0.209, 0.212), stdev = 0.002
  CI (99.9%): [0.207, 0.211] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 18.12% complete, ETA 06:35:52
# Fork: 1 of 1
# Warmup Iteration   1: 21.167 ops/us
# Warmup Iteration   2: 20.871 ops/us
# Warmup Iteration   3: 22.857 ops/us
# Warmup Iteration   4: 22.848 ops/us
# Warmup Iteration   5: 22.858 ops/us
Iteration   1: 22.871 ops/us
Iteration   2: 22.885 ops/us
Iteration   3: 22.299 ops/us
Iteration   4: 22.866 ops/us
Iteration   5: 22.859 ops/us
Iteration   6: 22.869 ops/us
Iteration   7: 22.881 ops/us
Iteration   8: 22.854 ops/us
Iteration   9: 22.850 ops/us
Iteration  10: 22.854 ops/us
Iteration  11: 22.833 ops/us
Iteration  12: 22.298 ops/us
Iteration  13: 22.829 ops/us
Iteration  14: 22.866 ops/us
Iteration  15: 22.847 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  22.784 ±(99.9%) 0.211 ops/us [Average]
  (min, avg, max) = (22.298, 22.784, 22.885), stdev = 0.198
  CI (99.9%): [22.573, 22.995] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 18.84% complete, ETA 06:32:39
# Fork: 1 of 1
# Warmup Iteration   1: 2.332 ops/us
# Warmup Iteration   2: 2.389 ops/us
# Warmup Iteration   3: 2.857 ops/us
# Warmup Iteration   4: 2.907 ops/us
# Warmup Iteration   5: 2.909 ops/us
Iteration   1: 2.907 ops/us
Iteration   2: 2.904 ops/us
Iteration   3: 2.908 ops/us
Iteration   4: 2.844 ops/us
Iteration   5: 2.875 ops/us
Iteration   6: 2.897 ops/us
Iteration   7: 2.885 ops/us
Iteration   8: 2.894 ops/us
Iteration   9: 2.903 ops/us
Iteration  10: 2.853 ops/us
Iteration  11: 2.884 ops/us
Iteration  12: 2.727 ops/us
Iteration  13: 2.892 ops/us
Iteration  14: 2.860 ops/us
Iteration  15: 2.880 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  2.874 ±(99.9%) 0.049 ops/us [Average]
  (min, avg, max) = (2.727, 2.874, 2.908), stdev = 0.045
  CI (99.9%): [2.826, 2.923] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 19.56% complete, ETA 06:29:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.227 ops/us
# Warmup Iteration   2: 0.226 ops/us
# Warmup Iteration   3: 0.231 ops/us
# Warmup Iteration   4: 0.236 ops/us
# Warmup Iteration   5: 0.225 ops/us
Iteration   1: 0.227 ops/us
Iteration   2: 0.227 ops/us
Iteration   3: 0.230 ops/us
Iteration   4: 0.230 ops/us
Iteration   5: 0.230 ops/us
Iteration   6: 0.232 ops/us
Iteration   7: 0.227 ops/us
Iteration   8: 0.225 ops/us
Iteration   9: 0.225 ops/us
Iteration  10: 0.230 ops/us
Iteration  11: 0.229 ops/us
Iteration  12: 0.233 ops/us
Iteration  13: 0.228 ops/us
Iteration  14: 0.225 ops/us
Iteration  15: 0.227 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.228 ±(99.9%) 0.003 ops/us [Average]
  (min, avg, max) = (0.225, 0.228, 0.233), stdev = 0.002
  CI (99.9%): [0.226, 0.231] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 20.29% complete, ETA 06:26:08
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 21.01% complete, ETA 06:22:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ops/us
# Warmup Iteration   2: 0.003 ops/us
# Warmup Iteration   3: 0.003 ops/us
# Warmup Iteration   4: 0.003 ops/us
# Warmup Iteration   5: 0.003 ops/us
Iteration   1: 0.003 ops/us
Iteration   2: 0.003 ops/us
Iteration   3: 0.003 ops/us
Iteration   4: 0.003 ops/us
Iteration   5: 0.003 ops/us
Iteration   6: 0.003 ops/us
Iteration   7: 0.003 ops/us
Iteration   8: 0.003 ops/us
Iteration   9: 0.003 ops/us
Iteration  10: 0.003 ops/us
Iteration  11: 0.003 ops/us
Iteration  12: 0.003 ops/us
Iteration  13: 0.003 ops/us
Iteration  14: 0.003 ops/us
Iteration  15: 0.003 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  0.003 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 21.74% complete, ETA 06:19:32
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 22.46% complete, ETA 06:16:14
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁷ ops/us
# Warmup Iteration   2: ≈ 10⁻⁷ ops/us
# Warmup Iteration   3: ≈ 10⁻⁷ ops/us
# Warmup Iteration   4: ≈ 10⁻⁷ ops/us
# Warmup Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   1: ≈ 10⁻⁷ ops/us
Iteration   2: ≈ 10⁻⁷ ops/us
Iteration   3: ≈ 10⁻⁷ ops/us
Iteration   4: ≈ 10⁻⁷ ops/us
Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   6: ≈ 10⁻⁷ ops/us
Iteration   7: ≈ 10⁻⁷ ops/us
Iteration   8: ≈ 10⁻⁷ ops/us
Iteration   9: ≈ 10⁻⁷ ops/us
Iteration  10: ≈ 10⁻⁷ ops/us
Iteration  11: ≈ 10⁻⁷ ops/us
Iteration  12: ≈ 10⁻⁷ ops/us
Iteration  13: ≈ 10⁻⁷ ops/us
Iteration  14: ≈ 10⁻⁷ ops/us
Iteration  15: ≈ 10⁻⁷ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  ≈ 10⁻⁷ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 23.19% complete, ETA 06:14:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ops/us
# Warmup Iteration   2: 0.001 ops/us
# Warmup Iteration   3: 0.001 ops/us
# Warmup Iteration   4: 0.001 ops/us
# Warmup Iteration   5: 0.001 ops/us
Iteration   1: 0.001 ops/us
Iteration   2: 0.001 ops/us
Iteration   3: 0.001 ops/us
Iteration   4: 0.001 ops/us
Iteration   5: 0.001 ops/us
Iteration   6: 0.001 ops/us
Iteration   7: 0.001 ops/us
Iteration   8: 0.001 ops/us
Iteration   9: 0.001 ops/us
Iteration  10: 0.001 ops/us
Iteration  11: 0.001 ops/us
Iteration  12: 0.001 ops/us
Iteration  13: 0.001 ops/us
Iteration  14: 0.001 ops/us
Iteration  15: 0.001 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  0.001 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 23.91% complete, ETA 06:11:28
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 24.64% complete, ETA 06:08:05
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 25.36% complete, ETA 06:04:54
# Fork: 1 of 1
# Warmup Iteration   1: 1.897 ops/us
# Warmup Iteration   2: 1.895 ops/us
# Warmup Iteration   3: 1.888 ops/us
# Warmup Iteration   4: 1.891 ops/us
# Warmup Iteration   5: 1.891 ops/us
Iteration   1: 1.891 ops/us
Iteration   2: 1.892 ops/us
Iteration   3: 1.892 ops/us
Iteration   4: 1.893 ops/us
Iteration   5: 1.892 ops/us
Iteration   6: 1.891 ops/us
Iteration   7: 1.892 ops/us
Iteration   8: 1.891 ops/us
Iteration   9: 1.892 ops/us
Iteration  10: 1.892 ops/us
Iteration  11: 1.892 ops/us
Iteration  12: 1.920 ops/us
Iteration  13: 1.919 ops/us
Iteration  14: 1.918 ops/us
Iteration  15: 1.918 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  1.899 ±(99.9%) 0.013 ops/us [Average]
  (min, avg, max) = (1.891, 1.899, 1.920), stdev = 0.012
  CI (99.9%): [1.886, 1.912] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 26.09% complete, ETA 06:01:26
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 26.81% complete, ETA 05:57:59
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 27.54% complete, ETA 05:54:33
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 28.26% complete, ETA 05:51:05
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 28.98% complete, ETA 05:47:39
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 29.71% complete, ETA 05:44:10
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 30.43% complete, ETA 05:40:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ops/us
# Warmup Iteration   2: 0.001 ops/us
# Warmup Iteration   3: 0.001 ops/us
# Warmup Iteration   4: 0.001 ops/us
# Warmup Iteration   5: 0.001 ops/us
Iteration   1: 0.001 ops/us
Iteration   2: 0.001 ops/us
Iteration   3: 0.001 ops/us
Iteration   4: 0.001 ops/us
Iteration   5: 0.001 ops/us
Iteration   6: 0.001 ops/us
Iteration   7: 0.001 ops/us
Iteration   8: 0.001 ops/us
Iteration   9: 0.001 ops/us
Iteration  10: 0.001 ops/us
Iteration  11: 0.001 ops/us
Iteration  12: 0.001 ops/us
Iteration  13: 0.001 ops/us
Iteration  14: 0.001 ops/us
Iteration  15: 0.001 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  0.001 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 31.16% complete, ETA 05:37:11
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 31.88% complete, ETA 05:33:41
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 32.61% complete, ETA 05:30:13
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 33.33% complete, ETA 05:26:58
# Fork: 1 of 1
# Warmup Iteration   1: 223638.958 us/op
# Warmup Iteration   2: 222082.794 us/op
# Warmup Iteration   3: 221546.555 us/op
# Warmup Iteration   4: 224698.275 us/op
# Warmup Iteration   5: 224307.365 us/op
Iteration   1: 224810.507 us/op
Iteration   2: 225991.680 us/op
Iteration   3: 224699.755 us/op
Iteration   4: 225177.155 us/op
Iteration   5: 225001.297 us/op
Iteration   6: 224684.320 us/op
Iteration   7: 224326.699 us/op
Iteration   8: 224278.631 us/op
Iteration   9: 223930.701 us/op
Iteration  10: 224193.220 us/op
Iteration  11: 223856.039 us/op
Iteration  12: 228920.751 us/op
Iteration  13: 229429.340 us/op
Iteration  14: 228416.995 us/op
Iteration  15: 227931.362 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  225709.897 ±(99.9%) 2080.414 us/op [Average]
  (min, avg, max) = (223856.039, 225709.897, 229429.340), stdev = 1946.021
  CI (99.9%): [223629.482, 227790.311] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 34.06% complete, ETA 05:23:30
# Fork: 1 of 1
# Warmup Iteration   1: 224527.909 us/op
# Warmup Iteration   2: 226199.578 us/op
# Warmup Iteration   3: 224785.351 us/op
# Warmup Iteration   4: 225321.962 us/op
# Warmup Iteration   5: 225990.371 us/op
Iteration   1: 226485.585 us/op
Iteration   2: 226045.769 us/op
Iteration   3: 224522.726 us/op
Iteration   4: 224869.014 us/op
Iteration   5: 224462.454 us/op
Iteration   6: 225599.635 us/op
Iteration   7: 225795.483 us/op
Iteration   8: 225727.802 us/op
Iteration   9: 224074.873 us/op
Iteration  10: 225596.168 us/op
Iteration  11: 225284.270 us/op
Iteration  12: 226058.690 us/op
Iteration  13: 225689.748 us/op
Iteration  14: 225882.449 us/op
Iteration  15: 225674.896 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  225451.304 ±(99.9%) 724.187 us/op [Average]
  (min, avg, max) = (224074.873, 225451.304, 226485.585), stdev = 677.405
  CI (99.9%): [224727.117, 226175.491] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 34.78% complete, ETA 05:20:03
# Fork: 1 of 1
# Warmup Iteration   1: 208828.336 us/op
# Warmup Iteration   2: 207952.214 us/op
# Warmup Iteration   3: 206891.754 us/op
# Warmup Iteration   4: 208808.822 us/op
# Warmup Iteration   5: 207866.198 us/op
Iteration   1: 209958.415 us/op
Iteration   2: 208283.151 us/op
Iteration   3: 207099.760 us/op
Iteration   4: 208713.589 us/op
Iteration   5: 207965.268 us/op
Iteration   6: 208822.601 us/op
Iteration   7: 208628.659 us/op
Iteration   8: 209013.600 us/op
Iteration   9: 208463.563 us/op
Iteration  10: 208360.852 us/op
Iteration  11: 207479.256 us/op
Iteration  12: 207730.976 us/op
Iteration  13: 208867.724 us/op
Iteration  14: 208615.719 us/op
Iteration  15: 207133.389 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  208342.435 ±(99.9%) 815.599 us/op [Average]
  (min, avg, max) = (207099.760, 208342.435, 209958.415), stdev = 762.912
  CI (99.9%): [207526.836, 209158.034] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 35.51% complete, ETA 05:16:35
# Fork: 1 of 1
# Warmup Iteration   1: 244215.727 us/op
# Warmup Iteration   2: 245197.059 us/op
# Warmup Iteration   3: 242065.081 us/op
# Warmup Iteration   4: 248974.637 us/op
# Warmup Iteration   5: 250486.192 us/op
Iteration   1: 234812.331 us/op
Iteration   2: 251792.655 us/op
Iteration   3: 238945.143 us/op
Iteration   4: 239595.780 us/op
Iteration   5: 231470.923 us/op
Iteration   6: 241016.219 us/op
Iteration   7: 244058.119 us/op
Iteration   8: 240462.868 us/op
Iteration   9: 248082.191 us/op
Iteration  10: 252419.935 us/op
Iteration  11: 248123.272 us/op
Iteration  12: 237000.559 us/op
Iteration  13: 245277.458 us/op
Iteration  14: 246789.080 us/op
Iteration  15: 253432.701 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  243551.949 ±(99.9%) 7099.466 us/op [Average]
  (min, avg, max) = (231470.923, 243551.949, 253432.701), stdev = 6640.845
  CI (99.9%): [236452.483, 250651.415] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 36.23% complete, ETA 05:13:07
# Fork: 1 of 1
# Warmup Iteration   1: 224559.658 us/op
# Warmup Iteration   2: 220889.373 us/op
# Warmup Iteration   3: 219664.396 us/op
# Warmup Iteration   4: 225511.165 us/op
# Warmup Iteration   5: 228058.245 us/op
Iteration   1: 218500.749 us/op
Iteration   2: 218886.712 us/op
Iteration   3: 213763.210 us/op
Iteration   4: 222254.560 us/op
Iteration   5: 226522.421 us/op
Iteration   6: 223482.590 us/op
Iteration   7: 216842.633 us/op
Iteration   8: 228012.151 us/op
Iteration   9: 218992.167 us/op
Iteration  10: 219777.161 us/op
Iteration  11: 218098.580 us/op
Iteration  12: 229316.348 us/op
Iteration  13: 223216.063 us/op
Iteration  14: 219033.285 us/op
Iteration  15: 221600.385 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  221219.934 ±(99.9%) 4600.795 us/op [Average]
  (min, avg, max) = (213763.210, 221219.934, 229316.348), stdev = 4303.587
  CI (99.9%): [216619.139, 225820.730] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 36.96% complete, ETA 05:09:37
# Fork: 1 of 1
# Warmup Iteration   1: 218858.099 us/op
# Warmup Iteration   2: 210265.389 us/op
# Warmup Iteration   3: 211163.766 us/op
# Warmup Iteration   4: 206595.598 us/op
# Warmup Iteration   5: 215782.509 us/op
Iteration   1: 206421.106 us/op
Iteration   2: 213617.771 us/op
Iteration   3: 213425.421 us/op
Iteration   4: 210972.787 us/op
Iteration   5: 209291.975 us/op
Iteration   6: 207390.075 us/op
Iteration   7: 208462.137 us/op
Iteration   8: 211407.057 us/op
Iteration   9: 205344.087 us/op
Iteration  10: 205218.888 us/op
Iteration  11: 207396.534 us/op
Iteration  12: 207438.445 us/op
Iteration  13: 210899.159 us/op
Iteration  14: 214654.205 us/op
Iteration  15: 206729.860 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  209244.634 ±(99.9%) 3291.544 us/op [Average]
  (min, avg, max) = (205218.888, 209244.634, 214654.205), stdev = 3078.912
  CI (99.9%): [205953.090, 212536.178] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 37.68% complete, ETA 05:06:08
# Fork: 1 of 1
# Warmup Iteration   1: 1620482.152 us/op
# Warmup Iteration   2: 1640580.121 us/op
# Warmup Iteration   3: 1631430.745 us/op
# Warmup Iteration   4: 1629596.752 us/op
# Warmup Iteration   5: 1630482.408 us/op
Iteration   1: 1631291.226 us/op
Iteration   2: 1632983.331 us/op
Iteration   3: 1633917.674 us/op
Iteration   4: 1643361.856 us/op
Iteration   5: 1631362.491 us/op
Iteration   6: 1640009.360 us/op
Iteration   7: 1622149.066 us/op
Iteration   8: 1633594.231 us/op
Iteration   9: 1623085.960 us/op
Iteration  10: 1630419.523 us/op
Iteration  11: 1641794.972 us/op
Iteration  12: 1637073.720 us/op
Iteration  13: 1630732.365 us/op
Iteration  14: 1626883.158 us/op
Iteration  15: 1634071.824 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1632848.717 ±(99.9%) 6536.000 us/op [Average]
  (min, avg, max) = (1622149.066, 1632848.717, 1643361.856), stdev = 6113.779
  CI (99.9%): [1626312.717, 1639384.717] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 38.40% complete, ETA 05:03:21
# Fork: 1 of 1
# Warmup Iteration   1: 947102.638 us/op
# Warmup Iteration   2: 951834.635 us/op
# Warmup Iteration   3: 946532.519 us/op
# Warmup Iteration   4: 958142.720 us/op
# Warmup Iteration   5: 954706.306 us/op
Iteration   1: 951718.350 us/op
Iteration   2: 948263.336 us/op
Iteration   3: 961198.007 us/op
Iteration   4: 954179.049 us/op
Iteration   5: 953236.125 us/op
Iteration   6: 950228.952 us/op
Iteration   7: 958884.388 us/op
Iteration   8: 944673.295 us/op
Iteration   9: 948662.283 us/op
Iteration  10: 950781.568 us/op
Iteration  11: 956105.955 us/op
Iteration  12: 949906.703 us/op
Iteration  13: 945944.462 us/op
Iteration  14: 946184.083 us/op
Iteration  15: 956747.267 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  951780.922 ±(99.9%) 5231.928 us/op [Average]
  (min, avg, max) = (944673.295, 951780.922, 961198.007), stdev = 4893.949
  CI (99.9%): [946548.993, 957012.850] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 39.13% complete, ETA 05:00:01
# Fork: 1 of 1
# Warmup Iteration   1: 653662.586 us/op
# Warmup Iteration   2: 645587.678 us/op
# Warmup Iteration   3: 637257.490 us/op
# Warmup Iteration   4: 642819.331 us/op
# Warmup Iteration   5: 644278.246 us/op
Iteration   1: 643456.174 us/op
Iteration   2: 639500.839 us/op
Iteration   3: 641536.753 us/op
Iteration   4: 639569.984 us/op
Iteration   5: 643672.831 us/op
Iteration   6: 638899.311 us/op
Iteration   7: 643999.414 us/op
Iteration   8: 639875.733 us/op
Iteration   9: 640430.428 us/op
Iteration  10: 642137.814 us/op
Iteration  11: 638903.046 us/op
Iteration  12: 641686.221 us/op
Iteration  13: 638276.967 us/op
Iteration  14: 643075.731 us/op
Iteration  15: 639234.639 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  640950.392 ±(99.9%) 2094.163 us/op [Average]
  (min, avg, max) = (638276.967, 640950.392, 643999.414), stdev = 1958.881
  CI (99.9%): [638856.230, 643044.555] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 39.85% complete, ETA 04:56:34
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap(AllocationBenchmark.java:52)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_avgt_jmhStub(AllocationBenchmark_fillHeap_jmhTest.java:269)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_AverageTime(AllocationBenchmark_fillHeap_jmhTest.java:212)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)




# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 40.58% complete, ETA 04:47:50
# Fork: 1 of 1
# Warmup Iteration   1: 576548.153 us/op
# Warmup Iteration   2: 570113.638 us/op
# Warmup Iteration   3: 559655.248 us/op
# Warmup Iteration   4: 575002.864 us/op
# Warmup Iteration   5: 542335.449 us/op
Iteration   1: 573018.166 us/op
Iteration   2: 591611.796 us/op
Iteration   3: 572343.653 us/op
Iteration   4: 572527.192 us/op
Iteration   5: 581951.367 us/op
Iteration   6: 587207.730 us/op
Iteration   7: 555417.944 us/op
Iteration   8: 577208.728 us/op
Iteration   9: 584245.278 us/op
Iteration  10: 590583.488 us/op
Iteration  11: 567133.420 us/op
Iteration  12: 579740.541 us/op
Iteration  13: 556766.592 us/op
Iteration  14: 590844.848 us/op
Iteration  15: 574594.771 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  577013.034 ±(99.9%) 12170.091 us/op [Average]
  (min, avg, max) = (555417.944, 577013.034, 591611.796), stdev = 11383.911
  CI (99.9%): [564842.943, 589183.126] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 41.30% complete, ETA 04:44:32
# Fork: 1 of 1
# Warmup Iteration   1: 447040.698 us/op
# Warmup Iteration   2: 453797.953 us/op
# Warmup Iteration   3: 454287.168 us/op
# Warmup Iteration   4: 457486.161 us/op
# Warmup Iteration   5: 453783.171 us/op
Iteration   1: 433706.245 us/op
Iteration   2: 442994.542 us/op
Iteration   3: 451555.022 us/op
Iteration   4: 449107.274 us/op
Iteration   5: 445567.773 us/op
Iteration   6: 463987.979 us/op
Iteration   7: 453605.130 us/op
Iteration   8: 461532.574 us/op
Iteration   9: 446971.466 us/op
Iteration  10: 445215.197 us/op
Iteration  11: 456756.733 us/op
Iteration  12: 443692.630 us/op
Iteration  13: 448925.067 us/op
Iteration  14: 449960.404 us/op
Iteration  15: 454311.333 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  449859.291 ±(99.9%) 8161.921 us/op [Average]
  (min, avg, max) = (433706.245, 449859.291, 463987.979), stdev = 7634.666
  CI (99.9%): [441697.370, 458021.212] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 42.03% complete, ETA 04:41:15
# Fork: 1 of 1
# Warmup Iteration   1: 376.460 us/op
# Warmup Iteration   2: 376.179 us/op
# Warmup Iteration   3: 376.214 us/op
# Warmup Iteration   4: 376.059 us/op
# Warmup Iteration   5: 376.027 us/op
Iteration   1: 375.845 us/op
Iteration   2: 376.309 us/op
Iteration   3: 376.621 us/op
Iteration   4: 375.947 us/op
Iteration   5: 375.873 us/op
Iteration   6: 376.064 us/op
Iteration   7: 376.295 us/op
Iteration   8: 376.158 us/op
Iteration   9: 375.913 us/op
Iteration  10: 375.832 us/op
Iteration  11: 375.466 us/op
Iteration  12: 375.718 us/op
Iteration  13: 375.997 us/op
Iteration  14: 375.849 us/op
Iteration  15: 375.814 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  375.980 ±(99.9%) 0.299 us/op [Average]
  (min, avg, max) = (375.466, 375.980, 376.621), stdev = 0.279
  CI (99.9%): [375.681, 376.278] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 42.75% complete, ETA 04:37:49
# Fork: 1 of 1
# Warmup Iteration   1: 166.756 us/op
# Warmup Iteration   2: 166.167 us/op
# Warmup Iteration   3: 163.910 us/op
# Warmup Iteration   4: 164.658 us/op
# Warmup Iteration   5: 167.045 us/op
Iteration   1: 166.088 us/op
Iteration   2: 166.107 us/op
Iteration   3: 165.379 us/op
Iteration   4: 165.243 us/op
Iteration   5: 165.896 us/op
Iteration   6: 164.786 us/op
Iteration   7: 165.091 us/op
Iteration   8: 165.577 us/op
Iteration   9: 165.916 us/op
Iteration  10: 168.145 us/op
Iteration  11: 165.642 us/op
Iteration  12: 166.611 us/op
Iteration  13: 166.290 us/op
Iteration  14: 165.603 us/op
Iteration  15: 166.780 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  165.944 ±(99.9%) 0.875 us/op [Average]
  (min, avg, max) = (164.786, 165.944, 168.145), stdev = 0.819
  CI (99.9%): [165.069, 166.819] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 43.48% complete, ETA 04:34:23
# Fork: 1 of 1
# Warmup Iteration   1: 313.970 us/op
# Warmup Iteration   2: 313.747 us/op
# Warmup Iteration   3: 313.533 us/op
# Warmup Iteration   4: 306.836 us/op
# Warmup Iteration   5: 203.221 us/op
Iteration   1: 203.166 us/op
Iteration   2: 203.194 us/op
Iteration   3: 202.968 us/op
Iteration   4: 203.013 us/op
Iteration   5: 203.066 us/op
Iteration   6: 203.140 us/op
Iteration   7: 203.140 us/op
Iteration   8: 203.068 us/op
Iteration   9: 203.074 us/op
Iteration  10: 203.135 us/op
Iteration  11: 203.186 us/op
Iteration  12: 203.331 us/op
Iteration  13: 203.296 us/op
Iteration  14: 203.139 us/op
Iteration  15: 203.251 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  203.144 ±(99.9%) 0.107 us/op [Average]
  (min, avg, max) = (202.968, 203.144, 203.331), stdev = 0.100
  CI (99.9%): [203.038, 203.251] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 44.20% complete, ETA 04:30:56
# Fork: 1 of 1
# Warmup Iteration   1: 170.838 us/op
# Warmup Iteration   2: 173.612 us/op
# Warmup Iteration   3: 171.835 us/op
# Warmup Iteration   4: 170.623 us/op
# Warmup Iteration   5: 172.022 us/op
Iteration   1: 171.312 us/op
Iteration   2: 173.221 us/op
Iteration   3: 170.919 us/op
Iteration   4: 172.154 us/op
Iteration   5: 170.829 us/op
Iteration   6: 171.034 us/op
Iteration   7: 172.599 us/op
Iteration   8: 170.494 us/op
Iteration   9: 171.413 us/op
Iteration  10: 172.063 us/op
Iteration  11: 172.296 us/op
Iteration  12: 169.611 us/op
Iteration  13: 171.647 us/op
Iteration  14: 171.687 us/op
Iteration  15: 172.366 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  171.576 ±(99.9%) 0.985 us/op [Average]
  (min, avg, max) = (169.611, 171.576, 173.221), stdev = 0.922
  CI (99.9%): [170.591, 172.562] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 44.93% complete, ETA 04:27:29
# Fork: 1 of 1
# Warmup Iteration   1: 637492.336 us/op
# Warmup Iteration   2: 669717.907 us/op
# Warmup Iteration   3: 680201.101 us/op
# Warmup Iteration   4: 680565.866 us/op
# Warmup Iteration   5: 679325.692 us/op
Iteration   1: 680247.395 us/op
Iteration   2: 685651.227 us/op
Iteration   3: 677835.312 us/op
Iteration   4: 670908.689 us/op
Iteration   5: 680544.397 us/op
Iteration   6: 677434.991 us/op
Iteration   7: 681268.755 us/op
Iteration   8: 679529.608 us/op
Iteration   9: 680201.980 us/op
Iteration  10: 682728.244 us/op
Iteration  11: 678896.968 us/op
Iteration  12: 682723.956 us/op
Iteration  13: 677238.203 us/op
Iteration  14: 680855.466 us/op
Iteration  15: 679459.332 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  679701.635 ±(99.9%) 3516.533 us/op [Average]
  (min, avg, max) = (670908.689, 679701.635, 685651.227), stdev = 3289.367
  CI (99.9%): [676185.102, 683218.168] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 45.65% complete, ETA 04:24:06
# Fork: 1 of 1
# Warmup Iteration   1: 170048.536 us/op
# Warmup Iteration   2: 137650.442 us/op
# Warmup Iteration   3: 137625.730 us/op
# Warmup Iteration   4: 136375.711 us/op
# Warmup Iteration   5: 137584.151 us/op
Iteration   1: 137684.686 us/op
Iteration   2: 139217.194 us/op
Iteration   3: 138585.210 us/op
Iteration   4: 139090.162 us/op
Iteration   5: 137138.764 us/op
Iteration   6: 138967.918 us/op
Iteration   7: 138542.496 us/op
Iteration   8: 136775.975 us/op
Iteration   9: 139343.131 us/op
Iteration  10: 136052.189 us/op
Iteration  11: 140182.302 us/op
Iteration  12: 139498.804 us/op
Iteration  13: 139590.636 us/op
Iteration  14: 139961.237 us/op
Iteration  15: 138405.927 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  138602.442 ±(99.9%) 1286.913 us/op [Average]
  (min, avg, max) = (136052.189, 138602.442, 140182.302), stdev = 1203.779
  CI (99.9%): [137315.529, 139889.355] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 46.38% complete, ETA 04:20:39
# Fork: 1 of 1
# Warmup Iteration   1: 3481202.530 us/op
# Warmup Iteration   2: 5170398.402 us/op
# Warmup Iteration   3: 5130050.554 us/op
# Warmup Iteration   4: 5208435.140 us/op
# Warmup Iteration   5: 5228036.601 us/op
Iteration   1: 5051555.138 us/op
Iteration   2: 5237742.008 us/op
Iteration   3: 5155320.150 us/op
Iteration   4: 5186578.465 us/op
Iteration   5: 5243528.248 us/op
Iteration   6: 5176102.345 us/op
Iteration   7: 5177953.797 us/op
Iteration   8: 5276547.632 us/op
Iteration   9: 5152538.192 us/op
Iteration  10: 5173630.060 us/op
Iteration  11: 5341993.407 us/op
Iteration  12: 5154265.704 us/op
Iteration  13: 5239184.513 us/op
Iteration  14: 5110008.965 us/op
Iteration  15: 5272353.611 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  5196620.149 ±(99.9%) 77906.057 us/op [Average]
  (min, avg, max) = (5051555.138, 5196620.149, 5341993.407), stdev = 72873.374
  CI (99.9%): [5118714.092, 5274526.206] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 47.10% complete, ETA 04:17:20
# Fork: 1 of 1
# Warmup Iteration   1: 1.851 us/op
# Warmup Iteration   2: 1.850 us/op
# Warmup Iteration   3: 1.847 us/op
# Warmup Iteration   4: 1.846 us/op
# Warmup Iteration   5: 1.848 us/op
Iteration   1: 1.845 us/op
Iteration   2: 1.846 us/op
Iteration   3: 1.845 us/op
Iteration   4: 1.847 us/op
Iteration   5: 1.845 us/op
Iteration   6: 1.845 us/op
Iteration   7: 1.847 us/op
Iteration   8: 1.845 us/op
Iteration   9: 1.845 us/op
Iteration  10: 1.846 us/op
Iteration  11: 1.846 us/op
Iteration  12: 1.847 us/op
Iteration  13: 1.847 us/op
Iteration  14: 1.847 us/op
Iteration  15: 1.846 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  1.846 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (1.845, 1.846, 1.847), stdev = 0.001
  CI (99.9%): [1.845, 1.847] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 47.82% complete, ETA 04:13:51
# Fork: 1 of 1
# Warmup Iteration   1: 4.926 us/op
# Warmup Iteration   2: 4.939 us/op
# Warmup Iteration   3: 4.915 us/op
# Warmup Iteration   4: 4.912 us/op
# Warmup Iteration   5: 4.912 us/op
Iteration   1: 4.910 us/op
Iteration   2: 4.912 us/op
Iteration   3: 4.919 us/op
Iteration   4: 4.920 us/op
Iteration   5: 4.913 us/op
Iteration   6: 4.918 us/op
Iteration   7: 4.924 us/op
Iteration   8: 4.925 us/op
Iteration   9: 4.920 us/op
Iteration  10: 4.915 us/op
Iteration  11: 4.919 us/op
Iteration  12: 4.961 us/op
Iteration  13: 4.970 us/op
Iteration  14: 4.964 us/op
Iteration  15: 4.965 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  4.930 ±(99.9%) 0.024 us/op [Average]
  (min, avg, max) = (4.910, 4.930, 4.970), stdev = 0.022
  CI (99.9%): [4.907, 4.954] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 48.55% complete, ETA 04:10:22
# Fork: 1 of 1
# Warmup Iteration   1: 9.203 us/op
# Warmup Iteration   2: 9.193 us/op
# Warmup Iteration   3: 9.166 us/op
# Warmup Iteration   4: 9.189 us/op
# Warmup Iteration   5: 9.171 us/op
Iteration   1: 9.169 us/op
Iteration   2: 9.164 us/op
Iteration   3: 9.167 us/op
Iteration   4: 9.170 us/op
Iteration   5: 9.172 us/op
Iteration   6: 9.187 us/op
Iteration   7: 9.195 us/op
Iteration   8: 9.163 us/op
Iteration   9: 9.222 us/op
Iteration  10: 9.172 us/op
Iteration  11: 9.173 us/op
Iteration  12: 9.253 us/op
Iteration  13: 9.284 us/op
Iteration  14: 9.239 us/op
Iteration  15: 9.254 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  9.199 ±(99.9%) 0.043 us/op [Average]
  (min, avg, max) = (9.163, 9.199, 9.284), stdev = 0.041
  CI (99.9%): [9.156, 9.242] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 49.27% complete, ETA 04:06:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 us/op
# Warmup Iteration   2: 0.045 us/op
# Warmup Iteration   3: 0.047 us/op
# Warmup Iteration   4: 0.044 us/op
# Warmup Iteration   5: 0.044 us/op
Iteration   1: 0.044 us/op
Iteration   2: 0.044 us/op
Iteration   3: 0.044 us/op
Iteration   4: 0.044 us/op
Iteration   5: 0.047 us/op
Iteration   6: 0.044 us/op
Iteration   7: 0.044 us/op
Iteration   8: 0.044 us/op
Iteration   9: 0.044 us/op
Iteration  10: 0.044 us/op
Iteration  11: 0.046 us/op
Iteration  12: 0.044 us/op
Iteration  13: 0.044 us/op
Iteration  14: 0.044 us/op
Iteration  15: 0.044 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.044 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.044, 0.044, 0.047), stdev = 0.001
  CI (99.9%): [0.044, 0.045] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 50.00% complete, ETA 04:03:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.384 us/op
# Warmup Iteration   2: 0.401 us/op
# Warmup Iteration   3: 0.380 us/op
# Warmup Iteration   4: 0.380 us/op
# Warmup Iteration   5: 0.381 us/op
Iteration   1: 0.381 us/op
Iteration   2: 0.380 us/op
Iteration   3: 0.381 us/op
Iteration   4: 0.380 us/op
Iteration   5: 0.381 us/op
Iteration   6: 0.389 us/op
Iteration   7: 0.380 us/op
Iteration   8: 0.380 us/op
Iteration   9: 0.379 us/op
Iteration  10: 0.381 us/op
Iteration  11: 0.389 us/op
Iteration  12: 0.389 us/op
Iteration  13: 0.380 us/op
Iteration  14: 0.381 us/op
Iteration  15: 0.381 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.382 ±(99.9%) 0.004 us/op [Average]
  (min, avg, max) = (0.379, 0.382, 0.389), stdev = 0.003
  CI (99.9%): [0.378, 0.386] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 50.72% complete, ETA 03:59:55
# Fork: 1 of 1
# Warmup Iteration   1: 4.297 us/op
# Warmup Iteration   2: 4.230 us/op
# Warmup Iteration   3: 4.798 us/op
# Warmup Iteration   4: 4.789 us/op
# Warmup Iteration   5: 4.804 us/op
Iteration   1: 4.756 us/op
Iteration   2: 4.763 us/op
Iteration   3: 4.744 us/op
Iteration   4: 4.747 us/op
Iteration   5: 4.747 us/op
Iteration   6: 4.674 us/op
Iteration   7: 4.808 us/op
Iteration   8: 4.805 us/op
Iteration   9: 4.868 us/op
Iteration  10: 4.770 us/op
Iteration  11: 4.812 us/op
Iteration  12: 4.794 us/op
Iteration  13: 4.785 us/op
Iteration  14: 4.895 us/op
Iteration  15: 4.887 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  4.790 ±(99.9%) 0.063 us/op [Average]
  (min, avg, max) = (4.674, 4.790, 4.895), stdev = 0.059
  CI (99.9%): [4.727, 4.854] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 51.45% complete, ETA 03:56:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.047 us/op
# Warmup Iteration   2: 0.048 us/op
# Warmup Iteration   3: 0.047 us/op
# Warmup Iteration   4: 0.047 us/op
# Warmup Iteration   5: 0.047 us/op
Iteration   1: 0.047 us/op
Iteration   2: 0.047 us/op
Iteration   3: 0.047 us/op
Iteration   4: 0.047 us/op
Iteration   5: 0.047 us/op
Iteration   6: 0.047 us/op
Iteration   7: 0.047 us/op
Iteration   8: 0.047 us/op
Iteration   9: 0.048 us/op
Iteration  10: 0.047 us/op
Iteration  11: 0.047 us/op
Iteration  12: 0.048 us/op
Iteration  13: 0.047 us/op
Iteration  14: 0.048 us/op
Iteration  15: 0.047 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.048 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.047, 0.048, 0.048), stdev = 0.001
  CI (99.9%): [0.047, 0.048] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 52.17% complete, ETA 03:52:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.418 us/op
# Warmup Iteration   2: 0.419 us/op
# Warmup Iteration   3: 0.346 us/op
# Warmup Iteration   4: 0.350 us/op
# Warmup Iteration   5: 0.344 us/op
Iteration   1: 0.346 us/op
Iteration   2: 0.344 us/op
Iteration   3: 0.344 us/op
Iteration   4: 0.344 us/op
Iteration   5: 0.344 us/op
Iteration   6: 0.347 us/op
Iteration   7: 0.350 us/op
Iteration   8: 0.347 us/op
Iteration   9: 0.344 us/op
Iteration  10: 0.350 us/op
Iteration  11: 0.346 us/op
Iteration  12: 0.344 us/op
Iteration  13: 0.346 us/op
Iteration  14: 0.345 us/op
Iteration  15: 0.345 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.346 ±(99.9%) 0.002 us/op [Average]
  (min, avg, max) = (0.344, 0.346, 0.350), stdev = 0.002
  CI (99.9%): [0.343, 0.348] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 52.90% complete, ETA 03:49:26
# Fork: 1 of 1
# Warmup Iteration   1: 4.359 us/op
# Warmup Iteration   2: 4.462 us/op
# Warmup Iteration   3: 4.271 us/op
# Warmup Iteration   4: 4.431 us/op
# Warmup Iteration   5: 4.324 us/op
Iteration   1: 4.312 us/op
Iteration   2: 4.336 us/op
Iteration   3: 4.314 us/op
Iteration   4: 4.380 us/op
Iteration   5: 4.426 us/op
Iteration   6: 4.410 us/op
Iteration   7: 4.398 us/op
Iteration   8: 4.283 us/op
Iteration   9: 4.268 us/op
Iteration  10: 4.355 us/op
Iteration  11: 4.434 us/op
Iteration  12: 4.264 us/op
Iteration  13: 4.313 us/op
Iteration  14: 4.388 us/op
Iteration  15: 4.387 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  4.351 ±(99.9%) 0.061 us/op [Average]
  (min, avg, max) = (4.264, 4.351, 4.434), stdev = 0.057
  CI (99.9%): [4.290, 4.412] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 53.62% complete, ETA 03:45:57
# Fork: 1 of 1
# Warmup Iteration   1: 14321.681 us/op
# Warmup Iteration   2: 14246.649 us/op
# Warmup Iteration   3: 14246.807 us/op
# Warmup Iteration   4: 14253.386 us/op
# Warmup Iteration   5: 14260.212 us/op
Iteration   1: 14240.159 us/op
Iteration   2: 14263.326 us/op
Iteration   3: 14249.592 us/op
Iteration   4: 14285.298 us/op
Iteration   5: 14238.858 us/op
Iteration   6: 14253.319 us/op
Iteration   7: 14238.370 us/op
Iteration   8: 14243.168 us/op
Iteration   9: 14238.616 us/op
Iteration  10: 14235.962 us/op
Iteration  11: 14232.607 us/op
Iteration  12: 14243.119 us/op
Iteration  13: 14247.533 us/op
Iteration  14: 14248.810 us/op
Iteration  15: 14264.839 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  14248.238 ±(99.9%) 14.834 us/op [Average]
  (min, avg, max) = (14232.607, 14248.238, 14285.298), stdev = 13.875
  CI (99.9%): [14233.405, 14263.072] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 54.35% complete, ETA 03:42:27
# Fork: 1 of 1
# Warmup Iteration   1: 317.118 us/op
# Warmup Iteration   2: 313.739 us/op
# Warmup Iteration   3: 312.283 us/op
# Warmup Iteration   4: 311.991 us/op
# Warmup Iteration   5: 311.707 us/op
Iteration   1: 312.298 us/op
Iteration   2: 311.946 us/op
Iteration   3: 313.692 us/op
Iteration   4: 312.915 us/op
Iteration   5: 312.335 us/op
Iteration   6: 313.737 us/op
Iteration   7: 312.347 us/op
Iteration   8: 311.794 us/op
Iteration   9: 311.880 us/op
Iteration  10: 312.264 us/op
Iteration  11: 312.275 us/op
Iteration  12: 312.745 us/op
Iteration  13: 312.314 us/op
Iteration  14: 312.782 us/op
Iteration  15: 313.610 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  312.596 ±(99.9%) 0.687 us/op [Average]
  (min, avg, max) = (311.794, 312.596, 313.737), stdev = 0.642
  CI (99.9%): [311.909, 313.282] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 55.07% complete, ETA 03:38:57
# Fork: 1 of 1
# Warmup Iteration   1: 31662.346 us/op
# Warmup Iteration   2: 31414.306 us/op
# Warmup Iteration   3: 31561.311 us/op
# Warmup Iteration   4: 31358.243 us/op
# Warmup Iteration   5: 31357.822 us/op
Iteration   1: 31369.672 us/op
Iteration   2: 31459.788 us/op
Iteration   3: 31352.891 us/op
Iteration   4: 31289.462 us/op
Iteration   5: 31404.870 us/op
Iteration   6: 31540.015 us/op
Iteration   7: 31367.521 us/op
Iteration   8: 31568.677 us/op
Iteration   9: 31391.259 us/op
Iteration  10: 31405.872 us/op
Iteration  11: 31326.997 us/op
Iteration  12: 31305.039 us/op
Iteration  13: 31288.551 us/op
Iteration  14: 31329.989 us/op
Iteration  15: 31308.875 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  31380.632 ±(99.9%) 91.485 us/op [Average]
  (min, avg, max) = (31288.551, 31380.632, 31568.677), stdev = 85.576
  CI (99.9%): [31289.146, 31472.117] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 55.80% complete, ETA 03:35:27
# Fork: 1 of 1
# Warmup Iteration   1: 3214000.805 us/op
# Warmup Iteration   2: 5985013.366 us/op
# Warmup Iteration   3: 3196478.555 us/op
# Warmup Iteration   4: 5324281.896 us/op
# Warmup Iteration   5: 11689333.669 us/op
Iteration   1: 11716973.765 us/op
Iteration   2: 11681928.278 us/op
Iteration   3: 11730756.369 us/op
Iteration   4: 11710830.023 us/op
Iteration   5: 11687789.387 us/op
Iteration   6: 11671093.276 us/op
Iteration   7: 11698250.393 us/op
Iteration   8: 11670613.754 us/op
Iteration   9: 11668454.396 us/op
Iteration  10: 11660871.698 us/op
Iteration  11: 11676721.961 us/op
Iteration  12: 11732932.369 us/op
Iteration  13: 11688816.510 us/op
Iteration  14: 11672655.313 us/op
Iteration  15: 11668019.266 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  11689113.784 ±(99.9%) 25233.538 us/op [Average]
  (min, avg, max) = (11660871.698, 11689113.784, 11732932.369), stdev = 23603.467
  CI (99.9%): [11663880.246, 11714347.322] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 56.52% complete, ETA 03:32:37
# Fork: 1 of 1
# Warmup Iteration   1: 1890.212 us/op
# Warmup Iteration   2: 1884.173 us/op
# Warmup Iteration   3: 1882.533 us/op
# Warmup Iteration   4: 1881.448 us/op
# Warmup Iteration   5: 1880.896 us/op
Iteration   1: 1883.467 us/op
Iteration   2: 1884.096 us/op
Iteration   3: 1880.734 us/op
Iteration   4: 1882.812 us/op
Iteration   5: 1881.779 us/op
Iteration   6: 1881.659 us/op
Iteration   7: 1882.121 us/op
Iteration   8: 1881.461 us/op
Iteration   9: 1880.601 us/op
Iteration  10: 1880.868 us/op
Iteration  11: 1883.839 us/op
Iteration  12: 1883.841 us/op
Iteration  13: 1882.596 us/op
Iteration  14: 1881.090 us/op
Iteration  15: 1885.363 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  1882.422 ±(99.9%) 1.542 us/op [Average]
  (min, avg, max) = (1880.601, 1882.422, 1885.363), stdev = 1.442
  CI (99.9%): [1880.880, 1883.963] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 57.24% complete, ETA 03:29:06
# Fork: 1 of 1
# Warmup Iteration   1: 62244.433 us/op
# Warmup Iteration   2: 62150.126 us/op
# Warmup Iteration   3: 62083.787 us/op
# Warmup Iteration   4: 62096.483 us/op
# Warmup Iteration   5: 62085.575 us/op
Iteration   1: 62109.646 us/op
Iteration   2: 62142.275 us/op
Iteration   3: 62114.054 us/op
Iteration   4: 62144.080 us/op
Iteration   5: 62182.364 us/op
Iteration   6: 62133.104 us/op
Iteration   7: 62184.958 us/op
Iteration   8: 62216.708 us/op
Iteration   9: 62169.541 us/op
Iteration  10: 62117.733 us/op
Iteration  11: 62120.135 us/op
Iteration  12: 62117.764 us/op
Iteration  13: 62154.310 us/op
Iteration  14: 62093.791 us/op
Iteration  15: 62154.561 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  62143.668 ±(99.9%) 36.109 us/op [Average]
  (min, avg, max) = (62093.791, 62143.668, 62216.708), stdev = 33.776
  CI (99.9%): [62107.559, 62179.777] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 57.97% complete, ETA 03:25:35
# Fork: 1 of 1
# Warmup Iteration   1: 1774866.419 us/op
# Warmup Iteration   2: 1705020.907 us/op
# Warmup Iteration   3: 1704784.357 us/op
# Warmup Iteration   4: 1704749.078 us/op
# Warmup Iteration   5: 1703445.684 us/op
Iteration   1: 1705030.472 us/op
Iteration   2: 1705255.211 us/op
Iteration   3: 1704700.683 us/op
Iteration   4: 1704077.206 us/op
Iteration   5: 1703503.500 us/op
Iteration   6: 1704521.452 us/op
Iteration   7: 1704659.182 us/op
Iteration   8: 1704595.401 us/op
Iteration   9: 1705368.972 us/op
Iteration  10: 1704008.031 us/op
Iteration  11: 1704334.252 us/op
Iteration  12: 1704510.066 us/op
Iteration  13: 1705675.818 us/op
Iteration  14: 1704413.287 us/op
Iteration  15: 1706155.903 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  1704720.629 ±(99.9%) 729.860 us/op [Average]
  (min, avg, max) = (1703503.500, 1704720.629, 1706155.903), stdev = 682.711
  CI (99.9%): [1703990.769, 1705450.489] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 58.69% complete, ETA 03:22:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.523 us/op
# Warmup Iteration   2: 0.515 us/op
# Warmup Iteration   3: 0.522 us/op
# Warmup Iteration   4: 0.522 us/op
# Warmup Iteration   5: 0.521 us/op
Iteration   1: 0.521 us/op
Iteration   2: 0.521 us/op
Iteration   3: 0.522 us/op
Iteration   4: 0.521 us/op
Iteration   5: 0.521 us/op
Iteration   6: 0.521 us/op
Iteration   7: 0.521 us/op
Iteration   8: 0.521 us/op
Iteration   9: 0.521 us/op
Iteration  10: 0.522 us/op
Iteration  11: 0.521 us/op
Iteration  12: 0.519 us/op
Iteration  13: 0.519 us/op
Iteration  14: 0.520 us/op
Iteration  15: 0.520 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  0.521 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.519, 0.521, 0.522), stdev = 0.001
  CI (99.9%): [0.520, 0.522] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 59.42% complete, ETA 03:18:35
# Fork: 1 of 1
# Warmup Iteration   1: 7446.918 us/op
# Warmup Iteration   2: 7414.845 us/op
# Warmup Iteration   3: 7411.529 us/op
# Warmup Iteration   4: 7415.248 us/op
# Warmup Iteration   5: 7420.442 us/op
Iteration   1: 7418.411 us/op
Iteration   2: 7416.152 us/op
Iteration   3: 7419.519 us/op
Iteration   4: 7421.030 us/op
Iteration   5: 7413.783 us/op
Iteration   6: 7404.526 us/op
Iteration   7: 7410.232 us/op
Iteration   8: 7415.941 us/op
Iteration   9: 7409.756 us/op
Iteration  10: 7424.121 us/op
Iteration  11: 7420.186 us/op
Iteration  12: 7417.954 us/op
Iteration  13: 7417.699 us/op
Iteration  14: 7420.708 us/op
Iteration  15: 7427.293 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  7417.154 ±(99.9%) 6.209 us/op [Average]
  (min, avg, max) = (7404.526, 7417.154, 7427.293), stdev = 5.808
  CI (99.9%): [7410.945, 7423.363] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 60.14% complete, ETA 03:15:04
# Fork: 1 of 1
# Warmup Iteration   1: 35080.357 us/op
# Warmup Iteration   2: 33328.775 us/op
# Warmup Iteration   3: 38082.857 us/op
# Warmup Iteration   4: 31367.654 us/op
# Warmup Iteration   5: 30840.735 us/op
Iteration   1: 37084.868 us/op
Iteration   2: 37188.345 us/op
Iteration   3: 31211.779 us/op
Iteration   4: 33103.267 us/op
Iteration   5: 31971.537 us/op
Iteration   6: 35282.510 us/op
Iteration   7: 31563.292 us/op
Iteration   8: 35208.964 us/op
Iteration   9: 35771.664 us/op
Iteration  10: 33587.612 us/op
Iteration  11: 36115.336 us/op
Iteration  12: 36934.488 us/op
Iteration  13: 29878.840 us/op
Iteration  14: 32975.566 us/op
Iteration  15: 34293.567 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  34144.776 ±(99.9%) 2484.582 us/op [Average]
  (min, avg, max) = (29878.840, 34144.776, 37188.345), stdev = 2324.079
  CI (99.9%): [31660.194, 36629.357] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 60.87% complete, ETA 03:11:33
# Fork: 1 of 1
# Warmup Iteration   1: 38808.955 us/op
# Warmup Iteration   2: 36422.113 us/op
# Warmup Iteration   3: 36415.868 us/op
# Warmup Iteration   4: 36413.203 us/op
# Warmup Iteration   5: 36673.542 us/op
Iteration   1: 36473.341 us/op
Iteration   2: 36415.186 us/op
Iteration   3: 36370.781 us/op
Iteration   4: 36413.382 us/op
Iteration   5: 36531.312 us/op
Iteration   6: 36381.144 us/op
Iteration   7: 36421.315 us/op
Iteration   8: 36391.648 us/op
Iteration   9: 36402.315 us/op
Iteration  10: 36386.672 us/op
Iteration  11: 36605.806 us/op
Iteration  12: 36347.765 us/op
Iteration  13: 36526.203 us/op
Iteration  14: 36447.625 us/op
Iteration  15: 36476.726 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  36439.415 ±(99.9%) 76.031 us/op [Average]
  (min, avg, max) = (36347.765, 36439.415, 36605.806), stdev = 71.119
  CI (99.9%): [36363.384, 36515.446] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 61.59% complete, ETA 03:08:01
# Fork: 1 of 1
# Warmup Iteration   1: 68741.827 us/op
# Warmup Iteration   2: 69577.914 us/op
# Warmup Iteration   3: 69176.992 us/op
# Warmup Iteration   4: 69620.732 us/op
# Warmup Iteration   5: 68878.260 us/op
Iteration   1: 69254.215 us/op
Iteration   2: 69210.858 us/op
Iteration   3: 69748.190 us/op
Iteration   4: 69993.423 us/op
Iteration   5: 70043.200 us/op
Iteration   6: 71114.549 us/op
Iteration   7: 70506.314 us/op
Iteration   8: 70477.156 us/op
Iteration   9: 69538.897 us/op
Iteration  10: 69980.453 us/op
Iteration  11: 69502.717 us/op
Iteration  12: 70013.959 us/op
Iteration  13: 69966.105 us/op
Iteration  14: 69514.093 us/op
Iteration  15: 69977.700 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  69922.789 ±(99.9%) 540.553 us/op [Average]
  (min, avg, max) = (69210.858, 69922.789, 71114.549), stdev = 505.634
  CI (99.9%): [69382.235, 70463.342] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 62.32% complete, ETA 03:04:30
# Fork: 1 of 1
# Warmup Iteration   1: 21398.946 us/op
# Warmup Iteration   2: 21099.733 us/op
# Warmup Iteration   3: 20837.065 us/op
# Warmup Iteration   4: 20870.576 us/op
# Warmup Iteration   5: 20801.026 us/op
Iteration   1: 21102.051 us/op
Iteration   2: 21057.716 us/op
Iteration   3: 21063.821 us/op
Iteration   4: 21075.788 us/op
Iteration   5: 21104.408 us/op
Iteration   6: 21168.950 us/op
Iteration   7: 21128.516 us/op
Iteration   8: 20998.974 us/op
Iteration   9: 21018.357 us/op
Iteration  10: 20914.970 us/op
Iteration  11: 20943.282 us/op
Iteration  12: 21072.020 us/op
Iteration  13: 21030.047 us/op
Iteration  14: 21077.929 us/op
Iteration  15: 21106.923 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  21057.583 ±(99.9%) 72.376 us/op [Average]
  (min, avg, max) = (20914.970, 21057.583, 21168.950), stdev = 67.700
  CI (99.9%): [20985.208, 21129.959] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 63.04% complete, ETA 03:00:58
# Fork: 1 of 1
# Warmup Iteration   1: 40209.818 us/op
# Warmup Iteration   2: 37044.212 us/op
# Warmup Iteration   3: 38079.072 us/op
# Warmup Iteration   4: 36628.187 us/op
# Warmup Iteration   5: 40131.212 us/op
Iteration   1: 39966.339 us/op
Iteration   2: 38364.592 us/op
Iteration   3: 37433.390 us/op
Iteration   4: 38369.745 us/op
Iteration   5: 40064.883 us/op
Iteration   6: 40602.888 us/op
Iteration   7: 38992.667 us/op
Iteration   8: 37158.895 us/op
Iteration   9: 37409.058 us/op
Iteration  10: 40841.223 us/op
Iteration  11: 37172.679 us/op
Iteration  12: 37916.196 us/op
Iteration  13: 37964.373 us/op
Iteration  14: 39031.409 us/op
Iteration  15: 37752.433 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  38602.718 ±(99.9%) 1339.510 us/op [Average]
  (min, avg, max) = (37158.895, 38602.718, 40841.223), stdev = 1252.978
  CI (99.9%): [37263.208, 39942.228] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 63.77% complete, ETA 02:57:26
# Fork: 1 of 1
# Warmup Iteration   1: 683.864 us/op
# Warmup Iteration   2: 680.310 us/op
# Warmup Iteration   3: 679.878 us/op
# Warmup Iteration   4: 679.788 us/op
# Warmup Iteration   5: 676.821 us/op
Iteration   1: 681.257 us/op
Iteration   2: 677.759 us/op
Iteration   3: 675.771 us/op
Iteration   4: 677.140 us/op
Iteration   5: 677.564 us/op
Iteration   6: 679.228 us/op
Iteration   7: 675.849 us/op
Iteration   8: 677.499 us/op
Iteration   9: 678.377 us/op
Iteration  10: 677.335 us/op
Iteration  11: 677.380 us/op
Iteration  12: 679.704 us/op
Iteration  13: 676.981 us/op
Iteration  14: 676.361 us/op
Iteration  15: 677.731 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  677.729 ±(99.9%) 1.552 us/op [Average]
  (min, avg, max) = (675.771, 677.729, 681.257), stdev = 1.452
  CI (99.9%): [676.177, 679.281] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 64.49% complete, ETA 02:53:53
# Fork: 1 of 1
# Warmup Iteration   1: 10845.161 us/op
# Warmup Iteration   2: 10786.825 us/op
# Warmup Iteration   3: 10773.374 us/op
# Warmup Iteration   4: 10760.846 us/op
# Warmup Iteration   5: 10755.777 us/op
Iteration   1: 10844.474 us/op
Iteration   2: 10812.570 us/op
Iteration   3: 10806.458 us/op
Iteration   4: 10796.758 us/op
Iteration   5: 10770.256 us/op
Iteration   6: 10768.485 us/op
Iteration   7: 10767.560 us/op
Iteration   8: 10764.748 us/op
Iteration   9: 10708.672 us/op
Iteration  10: 10794.145 us/op
Iteration  11: 10798.756 us/op
Iteration  12: 10803.178 us/op
Iteration  13: 10810.124 us/op
Iteration  14: 10831.259 us/op
Iteration  15: 10824.852 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  10793.486 ±(99.9%) 35.924 us/op [Average]
  (min, avg, max) = (10708.672, 10793.486, 10844.474), stdev = 33.603
  CI (99.9%): [10757.562, 10829.411] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 65.22% complete, ETA 02:50:21
# Fork: 1 of 1
# Warmup Iteration   1: 119479.140 us/op
# Warmup Iteration   2: 117194.195 us/op
# Warmup Iteration   3: 118955.758 us/op
# Warmup Iteration   4: 119925.919 us/op
# Warmup Iteration   5: 119942.853 us/op
Iteration   1: 120159.750 us/op
Iteration   2: 117045.730 us/op
Iteration   3: 119517.839 us/op
Iteration   4: 120078.008 us/op
Iteration   5: 120644.558 us/op
Iteration   6: 119757.648 us/op
Iteration   7: 120613.673 us/op
Iteration   8: 119320.605 us/op
Iteration   9: 118234.643 us/op
Iteration  10: 118681.069 us/op
Iteration  11: 118151.998 us/op
Iteration  12: 119354.520 us/op
Iteration  13: 117588.036 us/op
Iteration  14: 120134.194 us/op
Iteration  15: 119098.098 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  119225.358 ±(99.9%) 1165.505 us/op [Average]
  (min, avg, max) = (117045.730, 119225.358, 120644.558), stdev = 1090.214
  CI (99.9%): [118059.853, 120390.863] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 65.94% complete, ETA 02:46:50
# Fork: 1 of 1
# Warmup Iteration   1: 793856.389 us/op
# Warmup Iteration   2: 804454.021 us/op
# Warmup Iteration   3: 794608.727 us/op
# Warmup Iteration   4: 799174.276 us/op
# Warmup Iteration   5: 795151.327 us/op
Iteration   1: 805655.967 us/op
Iteration   2: 797979.405 us/op
Iteration   3: 795173.072 us/op
Iteration   4: 804219.497 us/op
Iteration   5: 803353.449 us/op
Iteration   6: 797645.333 us/op
Iteration   7: 801985.938 us/op
Iteration   8: 805260.411 us/op
Iteration   9: 796448.949 us/op
Iteration  10: 802089.222 us/op
Iteration  11: 803755.197 us/op
Iteration  12: 800699.985 us/op
Iteration  13: 796209.711 us/op
Iteration  14: 795849.822 us/op
Iteration  15: 801540.266 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  800524.415 ±(99.9%) 3906.994 us/op [Average]
  (min, avg, max) = (795173.072, 800524.415, 805655.967), stdev = 3654.605
  CI (99.9%): [796617.421, 804431.409] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 66.66% complete, ETA 02:43:21
# Fork: 1 of 1
# Warmup Iteration   1: 225204.998 ±(99.9%) 2742.580 us/op
# Warmup Iteration   2: 224063.215 ±(99.9%) 3445.594 us/op
# Warmup Iteration   3: 223084.544 ±(99.9%) 2449.437 us/op
# Warmup Iteration   4: 223358.339 ±(99.9%) 3164.204 us/op
# Warmup Iteration   5: 225263.252 ±(99.9%) 2846.636 us/op
Iteration   1: 222140.826 ±(99.9%) 3003.227 us/op
                 createNewObjects·p0.00:   211812.352 us/op
                 createNewObjects·p0.50:   221249.536 us/op
                 createNewObjects·p0.90:   231211.008 us/op
                 createNewObjects·p0.95:   232180.941 us/op
                 createNewObjects·p0.99:   234618.880 us/op
                 createNewObjects·p0.999:  234618.880 us/op
                 createNewObjects·p0.9999: 234618.880 us/op
                 createNewObjects·p1.00:   234618.880 us/op

Iteration   2: 221921.992 ±(99.9%) 2551.552 us/op
                 createNewObjects·p0.00:   214171.648 us/op
                 createNewObjects·p0.50:   221249.536 us/op
                 createNewObjects·p0.90:   228825.498 us/op
                 createNewObjects·p0.95:   230319.718 us/op
                 createNewObjects·p0.99:   238288.896 us/op
                 createNewObjects·p0.999:  238288.896 us/op
                 createNewObjects·p0.9999: 238288.896 us/op
                 createNewObjects·p1.00:   238288.896 us/op

Iteration   3: 223981.659 ±(99.9%) 2843.553 us/op
                 createNewObjects·p0.00:   214171.648 us/op
                 createNewObjects·p0.50:   223346.688 us/op
                 createNewObjects·p0.90:   231630.438 us/op
                 createNewObjects·p0.95:   233989.734 us/op
                 createNewObjects·p0.99:   237764.608 us/op
                 createNewObjects·p0.999:  237764.608 us/op
                 createNewObjects·p0.9999: 237764.608 us/op
                 createNewObjects·p1.00:   237764.608 us/op

Iteration   4: 223503.974 ±(99.9%) 2482.053 us/op
                 createNewObjects·p0.00:   213385.216 us/op
                 createNewObjects·p0.50:   223084.544 us/op
                 createNewObjects·p0.90:   230057.574 us/op
                 createNewObjects·p0.95:   231315.866 us/op
                 createNewObjects·p0.99:   231473.152 us/op
                 createNewObjects·p0.999:  231473.152 us/op
                 createNewObjects·p0.9999: 231473.152 us/op
                 createNewObjects·p1.00:   231473.152 us/op

Iteration   5: 223929.230 ±(99.9%) 2892.057 us/op
                 createNewObjects·p0.00:   212336.640 us/op
                 createNewObjects·p0.50:   223608.832 us/op
                 createNewObjects·p0.90:   232259.584 us/op
                 createNewObjects·p0.95:   234749.952 us/op
                 createNewObjects·p0.99:   238551.040 us/op
                 createNewObjects·p0.999:  238551.040 us/op
                 createNewObjects·p0.9999: 238551.040 us/op
                 createNewObjects·p1.00:   238551.040 us/op

Iteration   6: 224121.469 ±(99.9%) 3053.597 us/op
                 createNewObjects·p0.00:   213123.072 us/op
                 createNewObjects·p0.50:   223346.688 us/op
                 createNewObjects·p0.90:   231158.579 us/op
                 createNewObjects·p0.95:   238603.469 us/op
                 createNewObjects·p0.99:   243531.776 us/op
                 createNewObjects·p0.999:  243531.776 us/op
                 createNewObjects·p0.9999: 243531.776 us/op
                 createNewObjects·p1.00:   243531.776 us/op

Iteration   7: 223300.085 ±(99.9%) 2503.323 us/op
                 createNewObjects·p0.00:   215482.368 us/op
                 createNewObjects·p0.50:   222560.256 us/op
                 createNewObjects·p0.90:   230267.290 us/op
                 createNewObjects·p0.95:   233832.448 us/op
                 createNewObjects·p0.99:   238288.896 us/op
                 createNewObjects·p0.999:  238288.896 us/op
                 createNewObjects·p0.9999: 238288.896 us/op
                 createNewObjects·p1.00:   238288.896 us/op

Iteration   8: 223492.324 ±(99.9%) 2376.404 us/op
                 createNewObjects·p0.00:   214171.648 us/op
                 createNewObjects·p0.50:   222560.256 us/op
                 createNewObjects·p0.90:   227593.421 us/op
                 createNewObjects·p0.95:   233491.661 us/op
                 createNewObjects·p0.99:   238813.184 us/op
                 createNewObjects·p0.999:  238813.184 us/op
                 createNewObjects·p0.9999: 238813.184 us/op
                 createNewObjects·p1.00:   238813.184 us/op

Iteration   9: 223498.149 ±(99.9%) 2691.073 us/op
                 createNewObjects·p0.00:   212860.928 us/op
                 createNewObjects·p0.50:   222560.256 us/op
                 createNewObjects·p0.90:   231420.723 us/op
                 createNewObjects·p0.95:   232443.085 us/op
                 createNewObjects·p0.99:   236716.032 us/op
                 createNewObjects·p0.999:  236716.032 us/op
                 createNewObjects·p0.9999: 236716.032 us/op
                 createNewObjects·p1.00:   236716.032 us/op

Iteration  10: 223591.356 ±(99.9%) 2681.422 us/op
                 createNewObjects·p0.00:   211812.352 us/op
                 createNewObjects·p0.50:   223084.544 us/op
                 createNewObjects·p0.90:   230372.147 us/op
                 createNewObjects·p0.95:   230870.221 us/op
                 createNewObjects·p0.99:   235143.168 us/op
                 createNewObjects·p0.999:  235143.168 us/op
                 createNewObjects·p0.9999: 235143.168 us/op
                 createNewObjects·p1.00:   235143.168 us/op

Iteration  11: 221813.715 ±(99.9%) 2508.350 us/op
                 createNewObjects·p0.00:   210501.632 us/op
                 createNewObjects·p0.50:   222035.968 us/op
                 createNewObjects·p0.90:   228668.211 us/op
                 createNewObjects·p0.95:   229703.680 us/op
                 createNewObjects·p0.99:   234881.024 us/op
                 createNewObjects·p0.999:  234881.024 us/op
                 createNewObjects·p0.9999: 234881.024 us/op
                 createNewObjects·p1.00:   234881.024 us/op

Iteration  12: 223171.925 ±(99.9%) 2845.602 us/op
                 createNewObjects·p0.00:   213123.072 us/op
                 createNewObjects·p0.50:   222298.112 us/op
                 createNewObjects·p0.90:   230896.435 us/op
                 createNewObjects·p0.95:   234828.595 us/op
                 createNewObjects·p0.99:   236191.744 us/op
                 createNewObjects·p0.999:  236191.744 us/op
                 createNewObjects·p0.9999: 236191.744 us/op
                 createNewObjects·p1.00:   236191.744 us/op

Iteration  13: 222127.149 ±(99.9%) 2475.039 us/op
                 createNewObjects·p0.00:   213647.360 us/op
                 createNewObjects·p0.50:   221904.896 us/op
                 createNewObjects·p0.90:   227698.278 us/op
                 createNewObjects·p0.95:   232338.227 us/op
                 createNewObjects·p0.99:   234618.880 us/op
                 createNewObjects·p0.999:  234618.880 us/op
                 createNewObjects·p0.9999: 234618.880 us/op
                 createNewObjects·p1.00:   234618.880 us/op

Iteration  14: 222542.780 ±(99.9%) 2465.834 us/op
                 createNewObjects·p0.00:   211288.064 us/op
                 createNewObjects·p0.50:   222035.968 us/op
                 createNewObjects·p0.90:   228956.570 us/op
                 createNewObjects·p0.95:   231630.438 us/op
                 createNewObjects·p0.99:   233046.016 us/op
                 createNewObjects·p0.999:  233046.016 us/op
                 createNewObjects·p0.9999: 233046.016 us/op
                 createNewObjects·p1.00:   233046.016 us/op

Iteration  15: 222140.826 ±(99.9%) 2329.989 us/op
                 createNewObjects·p0.00:   213385.216 us/op
                 createNewObjects·p0.50:   221773.824 us/op
                 createNewObjects·p0.90:   228327.424 us/op
                 createNewObjects·p0.95:   231315.866 us/op
                 createNewObjects·p0.99:   231473.152 us/op
                 createNewObjects·p0.999:  231473.152 us/op
                 createNewObjects·p0.9999: 231473.152 us/op
                 createNewObjects·p1.00:   231473.152 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 678
  mean = 223013.788 ±(99.9%) 643.960 us/op

  Histogram, us/op:
    [210000.000, 212500.000) = 6 
    [212500.000, 215000.000) = 27 
    [215000.000, 217500.000) = 55 
    [217500.000, 220000.000) = 95 
    [220000.000, 222500.000) = 162 
    [222500.000, 225000.000) = 121 
    [225000.000, 227500.000) = 91 
    [227500.000, 230000.000) = 57 
    [230000.000, 232500.000) = 38 
    [232500.000, 235000.000) = 14 
    [235000.000, 237500.000) = 5 
    [237500.000, 240000.000) = 5 
    [240000.000, 242500.000) = 1 
    [242500.000, 245000.000) = 1 
    [245000.000, 247500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 210501.632 us/op
     p(50.0000) = 222298.112 us/op
     p(90.0000) = 229664.358 us/op
     p(95.0000) = 231748.403 us/op
     p(99.0000) = 237874.708 us/op
     p(99.9000) = 243531.776 us/op
     p(99.9900) = 243531.776 us/op
     p(99.9990) = 243531.776 us/op
     p(99.9999) = 243531.776 us/op
    p(100.0000) = 243531.776 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 67.39% complete, ETA 02:39:50
# Fork: 1 of 1
# Warmup Iteration   1: 226020.557 ±(99.9%) 2581.105 us/op
# Warmup Iteration   2: 226585.623 ±(99.9%) 1763.282 us/op
# Warmup Iteration   3: 227856.756 ±(99.9%) 2216.113 us/op
# Warmup Iteration   4: 227457.583 ±(99.9%) 2002.911 us/op
# Warmup Iteration   5: 227415.878 ±(99.9%) 1703.917 us/op
Iteration   1: 227290.764 ±(99.9%) 2322.001 us/op
                 createNewObjects·p0.00:   223084.544 us/op
                 createNewObjects·p0.50:   225705.984 us/op
                 createNewObjects·p0.90:   232914.944 us/op
                 createNewObjects·p0.95:   239140.864 us/op
                 createNewObjects·p0.99:   243793.920 us/op
                 createNewObjects·p0.999:  243793.920 us/op
                 createNewObjects·p0.9999: 243793.920 us/op
                 createNewObjects·p1.00:   243793.920 us/op

Iteration   2: 227255.017 ±(99.9%) 1904.848 us/op
                 createNewObjects·p0.00:   223870.976 us/op
                 createNewObjects·p0.50:   226492.416 us/op
                 createNewObjects·p0.90:   231604.224 us/op
                 createNewObjects·p0.95:   233701.376 us/op
                 createNewObjects·p0.99:   243007.488 us/op
                 createNewObjects·p0.999:  243007.488 us/op
                 createNewObjects·p0.9999: 243007.488 us/op
                 createNewObjects·p1.00:   243007.488 us/op

Iteration   3: 226445.813 ±(99.9%) 1706.362 us/op
                 createNewObjects·p0.00:   221773.824 us/op
                 createNewObjects·p0.50:   225443.840 us/op
                 createNewObjects·p0.90:   231682.867 us/op
                 createNewObjects·p0.95:   233701.376 us/op
                 createNewObjects·p0.99:   234881.024 us/op
                 createNewObjects·p0.999:  234881.024 us/op
                 createNewObjects·p0.9999: 234881.024 us/op
                 createNewObjects·p1.00:   234881.024 us/op

Iteration   4: 226294.352 ±(99.9%) 1759.607 us/op
                 createNewObjects·p0.00:   222035.968 us/op
                 createNewObjects·p0.50:   225705.984 us/op
                 createNewObjects·p0.90:   230267.290 us/op
                 createNewObjects·p0.95:   233701.376 us/op
                 createNewObjects·p0.99:   239337.472 us/op
                 createNewObjects·p0.999:  239337.472 us/op
                 createNewObjects·p0.9999: 239337.472 us/op
                 createNewObjects·p1.00:   239337.472 us/op

Iteration   5: 225904.048 ±(99.9%) 2352.610 us/op
                 createNewObjects·p0.00:   221773.824 us/op
                 createNewObjects·p0.50:   225181.696 us/op
                 createNewObjects·p0.90:   230162.432 us/op
                 createNewObjects·p0.95:   231656.653 us/op
                 createNewObjects·p0.99:   250085.376 us/op
                 createNewObjects·p0.999:  250085.376 us/op
                 createNewObjects·p0.9999: 250085.376 us/op
                 createNewObjects·p1.00:   250085.376 us/op

Iteration   6: 226929.323 ±(99.9%) 3109.884 us/op
                 createNewObjects·p0.00:   223084.544 us/op
                 createNewObjects·p0.50:   224919.552 us/op
                 createNewObjects·p0.90:   233203.302 us/op
                 createNewObjects·p0.95:   240805.478 us/op
                 createNewObjects·p0.99:   255328.256 us/op
                 createNewObjects·p0.999:  255328.256 us/op
                 createNewObjects·p0.9999: 255328.256 us/op
                 createNewObjects·p1.00:   255328.256 us/op

Iteration   7: 227069.133 ±(99.9%) 1758.490 us/op
                 createNewObjects·p0.00:   222822.400 us/op
                 createNewObjects·p0.50:   225968.128 us/op
                 createNewObjects·p0.90:   233046.016 us/op
                 createNewObjects·p0.95:   233308.160 us/op
                 createNewObjects·p0.99:   240123.904 us/op
                 createNewObjects·p0.999:  240123.904 us/op
                 createNewObjects·p0.9999: 240123.904 us/op
                 createNewObjects·p1.00:   240123.904 us/op

Iteration   8: 226952.624 ±(99.9%) 1851.137 us/op
                 createNewObjects·p0.00:   222035.968 us/op
                 createNewObjects·p0.50:   226230.272 us/op
                 createNewObjects·p0.90:   231473.152 us/op
                 createNewObjects·p0.95:   233517.875 us/op
                 createNewObjects·p0.99:   241958.912 us/op
                 createNewObjects·p0.999:  241958.912 us/op
                 createNewObjects·p0.9999: 241958.912 us/op
                 createNewObjects·p1.00:   241958.912 us/op

Iteration   9: 226638.052 ±(99.9%) 1356.215 us/op
                 createNewObjects·p0.00:   222822.400 us/op
                 createNewObjects·p0.50:   226230.272 us/op
                 createNewObjects·p0.90:   231053.722 us/op
                 createNewObjects·p0.95:   232547.942 us/op
                 createNewObjects·p0.99:   233046.016 us/op
                 createNewObjects·p0.999:  233046.016 us/op
                 createNewObjects·p0.9999: 233046.016 us/op
                 createNewObjects·p1.00:   233046.016 us/op

Iteration  10: 226119.589 ±(99.9%) 1616.832 us/op
                 createNewObjects·p0.00:   221773.824 us/op
                 createNewObjects·p0.50:   224919.552 us/op
                 createNewObjects·p0.90:   231315.866 us/op
                 createNewObjects·p0.95:   232626.586 us/op
                 createNewObjects·p0.99:   234094.592 us/op
                 createNewObjects·p0.999:  234094.592 us/op
                 createNewObjects·p0.9999: 234094.592 us/op
                 createNewObjects·p1.00:   234094.592 us/op

Iteration  11: 226480.765 ±(99.9%) 2063.164 us/op
                 createNewObjects·p0.00:   221773.824 us/op
                 createNewObjects·p0.50:   225181.696 us/op
                 createNewObjects·p0.90:   232312.013 us/op
                 createNewObjects·p0.95:   235562.598 us/op
                 createNewObjects·p0.99:   237502.464 us/op
                 createNewObjects·p0.999:  237502.464 us/op
                 createNewObjects·p0.9999: 237502.464 us/op
                 createNewObjects·p1.00:   237502.464 us/op

Iteration  12: 226463.289 ±(99.9%) 1468.823 us/op
                 createNewObjects·p0.00:   223084.544 us/op
                 createNewObjects·p0.50:   225705.984 us/op
                 createNewObjects·p0.90:   229952.717 us/op
                 createNewObjects·p0.95:   233989.734 us/op
                 createNewObjects·p0.99:   234618.880 us/op
                 createNewObjects·p0.999:  234618.880 us/op
                 createNewObjects·p0.9999: 234618.880 us/op
                 createNewObjects·p1.00:   234618.880 us/op

Iteration  13: 226556.496 ±(99.9%) 2281.290 us/op
                 createNewObjects·p0.00:   222560.256 us/op
                 createNewObjects·p0.50:   224919.552 us/op
                 createNewObjects·p0.90:   231473.152 us/op
                 createNewObjects·p0.95:   233596.518 us/op
                 createNewObjects·p0.99:   245891.072 us/op
                 createNewObjects·p0.999:  245891.072 us/op
                 createNewObjects·p0.9999: 245891.072 us/op
                 createNewObjects·p1.00:   245891.072 us/op

Iteration  14: 226562.321 ±(99.9%) 1902.685 us/op
                 createNewObjects·p0.00:   222822.400 us/op
                 createNewObjects·p0.50:   225443.840 us/op
                 createNewObjects·p0.90:   232259.584 us/op
                 createNewObjects·p0.95:   234959.667 us/op
                 createNewObjects·p0.99:   238026.752 us/op
                 createNewObjects·p0.999:  238026.752 us/op
                 createNewObjects·p0.9999: 238026.752 us/op
                 createNewObjects·p1.00:   238026.752 us/op

Iteration  15: 227201.396 ±(99.9%) 1636.680 us/op
                 createNewObjects·p0.00:   222298.112 us/op
                 createNewObjects·p0.50:   226230.272 us/op
                 createNewObjects·p0.90:   232652.800 us/op
                 createNewObjects·p0.95:   233766.912 us/op
                 createNewObjects·p0.99:   236453.888 us/op
                 createNewObjects·p0.999:  236453.888 us/op
                 createNewObjects·p0.9999: 236453.888 us/op
                 createNewObjects·p1.00:   236453.888 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 672
  mean = 226674.981 ±(99.9%) 478.211 us/op

  Histogram, us/op:
    [220000.000, 222500.000) = 19 
    [222500.000, 225000.000) = 238 
    [225000.000, 227500.000) = 219 
    [227500.000, 230000.000) = 90 
    [230000.000, 232500.000) = 57 
    [232500.000, 235000.000) = 31 
    [235000.000, 237500.000) = 5 
    [237500.000, 240000.000) = 4 
    [240000.000, 242500.000) = 4 
    [242500.000, 245000.000) = 2 
    [245000.000, 247500.000) = 1 
    [247500.000, 250000.000) = 0 
    [250000.000, 252500.000) = 1 
    [252500.000, 255000.000) = 0 
    [255000.000, 257500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 221773.824 us/op
     p(50.0000) = 225705.984 us/op
     p(90.0000) = 231394.509 us/op
     p(95.0000) = 233308.160 us/op
     p(99.0000) = 242029.691 us/op
     p(99.9000) = 255328.256 us/op
     p(99.9900) = 255328.256 us/op
     p(99.9990) = 255328.256 us/op
     p(99.9999) = 255328.256 us/op
    p(100.0000) = 255328.256 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 68.11% complete, ETA 02:36:18
# Fork: 1 of 1
# Warmup Iteration   1: 208841.387 ±(99.9%) 1605.701 us/op
# Warmup Iteration   2: 209403.904 ±(99.9%) 1659.560 us/op
# Warmup Iteration   3: 209387.520 ±(99.9%) 1772.156 us/op
# Warmup Iteration   4: 209939.115 ±(99.9%) 1684.992 us/op
# Warmup Iteration   5: 210365.099 ±(99.9%) 1918.275 us/op
Iteration   1: 209114.453 ±(99.9%) 1810.795 us/op
                 createNewObjects·p0.00:   205520.896 us/op
                 createNewObjects·p0.50:   207749.120 us/op
                 createNewObjects·p0.90:   214460.006 us/op
                 createNewObjects·p0.95:   216897.946 us/op
                 createNewObjects·p0.99:   222298.112 us/op
                 createNewObjects·p0.999:  222298.112 us/op
                 createNewObjects·p0.9999: 222298.112 us/op
                 createNewObjects·p1.00:   222298.112 us/op

Iteration   2: 209174.528 ±(99.9%) 1831.493 us/op
                 createNewObjects·p0.00:   205258.752 us/op
                 createNewObjects·p0.50:   208535.552 us/op
                 createNewObjects·p0.90:   214695.936 us/op
                 createNewObjects·p0.95:   218326.630 us/op
                 createNewObjects·p0.99:   219676.672 us/op
                 createNewObjects·p0.999:  219676.672 us/op
                 createNewObjects·p0.9999: 219676.672 us/op
                 createNewObjects·p1.00:   219676.672 us/op

Iteration   3: 209343.829 ±(99.9%) 2098.549 us/op
                 createNewObjects·p0.00:   204734.464 us/op
                 createNewObjects·p0.50:   208404.480 us/op
                 createNewObjects·p0.90:   215744.512 us/op
                 createNewObjects·p0.95:   218444.595 us/op
                 createNewObjects·p0.99:   223346.688 us/op
                 createNewObjects·p0.999:  223346.688 us/op
                 createNewObjects·p0.9999: 223346.688 us/op
                 createNewObjects·p1.00:   223346.688 us/op

Iteration   4: 209338.368 ±(99.9%) 1406.518 us/op
                 createNewObjects·p0.00:   204734.464 us/op
                 createNewObjects·p0.50:   209321.984 us/op
                 createNewObjects·p0.90:   212336.640 us/op
                 createNewObjects·p0.95:   215521.690 us/op
                 createNewObjects·p0.99:   217841.664 us/op
                 createNewObjects·p0.999:  217841.664 us/op
                 createNewObjects·p0.9999: 217841.664 us/op
                 createNewObjects·p1.00:   217841.664 us/op

Iteration   5: 209764.352 ±(99.9%) 1601.799 us/op
                 createNewObjects·p0.00:   205258.752 us/op
                 createNewObjects·p0.50:   208928.768 us/op
                 createNewObjects·p0.90:   214486.221 us/op
                 createNewObjects·p0.95:   215888.691 us/op
                 createNewObjects·p0.99:   216793.088 us/op
                 createNewObjects·p0.999:  216793.088 us/op
                 createNewObjects·p0.9999: 216793.088 us/op
                 createNewObjects·p1.00:   216793.088 us/op

Iteration   6: 209108.992 ±(99.9%) 1644.683 us/op
                 createNewObjects·p0.00:   205258.752 us/op
                 createNewObjects·p0.50:   208404.480 us/op
                 createNewObjects·p0.90:   212441.498 us/op
                 createNewObjects·p0.95:   214866.330 us/op
                 createNewObjects·p0.99:   225443.840 us/op
                 createNewObjects·p0.999:  225443.840 us/op
                 createNewObjects·p0.9999: 225443.840 us/op
                 createNewObjects·p1.00:   225443.840 us/op

Iteration   7: 208737.621 ±(99.9%) 2174.238 us/op
                 createNewObjects·p0.00:   204472.320 us/op
                 createNewObjects·p0.50:   207355.904 us/op
                 createNewObjects·p0.90:   213411.430 us/op
                 createNewObjects·p0.95:   215823.155 us/op
                 createNewObjects·p0.99:   230424.576 us/op
                 createNewObjects·p0.999:  230424.576 us/op
                 createNewObjects·p0.9999: 230424.576 us/op
                 createNewObjects·p1.00:   230424.576 us/op

Iteration   8: 209365.675 ±(99.9%) 1970.260 us/op
                 createNewObjects·p0.00:   205258.752 us/op
                 createNewObjects·p0.50:   208273.408 us/op
                 createNewObjects·p0.90:   215665.869 us/op
                 createNewObjects·p0.95:   217723.699 us/op
                 createNewObjects·p0.99:   224395.264 us/op
                 createNewObjects·p0.999:  224395.264 us/op
                 createNewObjects·p0.9999: 224395.264 us/op
                 createNewObjects·p1.00:   224395.264 us/op

Iteration   9: 209076.224 ±(99.9%) 2161.457 us/op
                 createNewObjects·p0.00:   204996.608 us/op
                 createNewObjects·p0.50:   208142.336 us/op
                 createNewObjects·p0.90:   216321.229 us/op
                 createNewObjects·p0.95:   220646.605 us/op
                 createNewObjects·p0.99:   222560.256 us/op
                 createNewObjects·p0.999:  222560.256 us/op
                 createNewObjects·p0.9999: 222560.256 us/op
                 createNewObjects·p1.00:   222560.256 us/op

Iteration  10: 208841.387 ±(99.9%) 1673.448 us/op
                 createNewObjects·p0.00:   203948.032 us/op
                 createNewObjects·p0.50:   208404.480 us/op
                 createNewObjects·p0.90:   213935.718 us/op
                 createNewObjects·p0.95:   215561.011 us/op
                 createNewObjects·p0.99:   217579.520 us/op
                 createNewObjects·p0.999:  217579.520 us/op
                 createNewObjects·p0.9999: 217579.520 us/op
                 createNewObjects·p1.00:   217579.520 us/op

Iteration  11: 208693.931 ±(99.9%) 1937.399 us/op
                 createNewObjects·p0.00:   203948.032 us/op
                 createNewObjects·p0.50:   207880.192 us/op
                 createNewObjects·p0.90:   215246.438 us/op
                 createNewObjects·p0.95:   216871.731 us/op
                 createNewObjects·p0.99:   222298.112 us/op
                 createNewObjects·p0.999:  222298.112 us/op
                 createNewObjects·p0.9999: 222298.112 us/op
                 createNewObjects·p1.00:   222298.112 us/op

Iteration  12: 209977.344 ±(99.9%) 1911.810 us/op
                 createNewObjects·p0.00:   205783.040 us/op
                 createNewObjects·p0.50:   208797.696 us/op
                 createNewObjects·p0.90:   215692.083 us/op
                 createNewObjects·p0.95:   220004.352 us/op
                 createNewObjects·p0.99:   222822.400 us/op
                 createNewObjects·p0.999:  222822.400 us/op
                 createNewObjects·p0.9999: 222822.400 us/op
                 createNewObjects·p1.00:   222822.400 us/op

Iteration  13: 209349.291 ±(99.9%) 2438.165 us/op
                 createNewObjects·p0.00:   204734.464 us/op
                 createNewObjects·p0.50:   207618.048 us/op
                 createNewObjects·p0.90:   215849.370 us/op
                 createNewObjects·p0.95:   220410.675 us/op
                 createNewObjects·p0.99:   230686.720 us/op
                 createNewObjects·p0.999:  230686.720 us/op
                 createNewObjects·p0.9999: 230686.720 us/op
                 createNewObjects·p1.00:   230686.720 us/op

Iteration  14: 209250.987 ±(99.9%) 1542.504 us/op
                 createNewObjects·p0.00:   204996.608 us/op
                 createNewObjects·p0.50:   208928.768 us/op
                 createNewObjects·p0.90:   213490.074 us/op
                 createNewObjects·p0.95:   215888.691 us/op
                 createNewObjects·p0.99:   217579.520 us/op
                 createNewObjects·p0.999:  217579.520 us/op
                 createNewObjects·p0.9999: 217579.520 us/op
                 createNewObjects·p1.00:   217579.520 us/op

Iteration  15: 208825.003 ±(99.9%) 1583.914 us/op
                 createNewObjects·p0.00:   205258.752 us/op
                 createNewObjects·p0.50:   208011.264 us/op
                 createNewObjects·p0.90:   213935.718 us/op
                 createNewObjects·p0.95:   214460.006 us/op
                 createNewObjects·p0.99:   221773.824 us/op
                 createNewObjects·p0.999:  221773.824 us/op
                 createNewObjects·p0.9999: 221773.824 us/op
                 createNewObjects·p1.00:   221773.824 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 720
  mean = 209197.466 ±(99.9%) 452.743 us/op

  Histogram, us/op:
    [200000.000, 202500.000) = 0 
    [202500.000, 205000.000) = 21 
    [205000.000, 207500.000) = 244 
    [207500.000, 210000.000) = 259 
    [210000.000, 212500.000) = 85 
    [212500.000, 215000.000) = 58 
    [215000.000, 217500.000) = 25 
    [217500.000, 220000.000) = 15 
    [220000.000, 222500.000) = 6 
    [222500.000, 225000.000) = 4 
    [225000.000, 227500.000) = 1 
    [227500.000, 230000.000) = 0 
    [230000.000, 232500.000) = 2 
    [232500.000, 235000.000) = 0 
    [235000.000, 237500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 203948.032 us/op
     p(50.0000) = 208404.480 us/op
     p(90.0000) = 213909.504 us/op
     p(95.0000) = 216517.837 us/op
     p(99.0000) = 222505.206 us/op
     p(99.9000) = 230686.720 us/op
     p(99.9900) = 230686.720 us/op
     p(99.9990) = 230686.720 us/op
     p(99.9999) = 230686.720 us/op
    p(100.0000) = 230686.720 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 68.84% complete, ETA 02:32:46
# Fork: 1 of 1
# Warmup Iteration   1: 236295.382 ±(99.9%) 6908.044 us/op
# Warmup Iteration   2: 243837.611 ±(99.9%) 9357.524 us/op
# Warmup Iteration   3: 240329.874 ±(99.9%) 8542.169 us/op
# Warmup Iteration   4: 245047.096 ±(99.9%) 10097.527 us/op
# Warmup Iteration   5: 243924.992 ±(99.9%) 7106.480 us/op
Iteration   1: 238215.740 ±(99.9%) 8431.306 us/op
                 createNewObjects·p0.00:   216268.800 us/op
                 createNewObjects·p0.50:   233570.304 us/op
                 createNewObjects·p0.90:   262878.003 us/op
                 createNewObjects·p0.95:   266967.450 us/op
                 createNewObjects·p0.99:   278396.928 us/op
                 createNewObjects·p0.999:  278396.928 us/op
                 createNewObjects·p0.9999: 278396.928 us/op
                 createNewObjects·p1.00:   278396.928 us/op

Iteration   2: 235819.865 ±(99.9%) 8185.052 us/op
                 createNewObjects·p0.00:   216006.656 us/op
                 createNewObjects·p0.50:   229376.000 us/op
                 createNewObjects·p0.90:   260204.134 us/op
                 createNewObjects·p0.95:   268016.026 us/op
                 createNewObjects·p0.99:   277348.352 us/op
                 createNewObjects·p0.999:  277348.352 us/op
                 createNewObjects·p0.9999: 277348.352 us/op
                 createNewObjects·p1.00:   277348.352 us/op

Iteration   3: 249938.320 ±(99.9%) 7746.680 us/op
                 createNewObjects·p0.00:   221249.536 us/op
                 createNewObjects·p0.50:   251133.952 us/op
                 createNewObjects·p0.90:   270375.322 us/op
                 createNewObjects·p0.95:   272577.331 us/op
                 createNewObjects·p0.99:   284164.096 us/op
                 createNewObjects·p0.999:  284164.096 us/op
                 createNewObjects·p0.9999: 284164.096 us/op
                 createNewObjects·p1.00:   284164.096 us/op

Iteration   4: 251756.544 ±(99.9%) 7451.125 us/op
                 createNewObjects·p0.00:   224657.408 us/op
                 createNewObjects·p0.50:   250609.664 us/op
                 createNewObjects·p0.90:   268881.101 us/op
                 createNewObjects·p0.95:   274962.842 us/op
                 createNewObjects·p0.99:   282591.232 us/op
                 createNewObjects·p0.999:  282591.232 us/op
                 createNewObjects·p0.9999: 282591.232 us/op
                 createNewObjects·p1.00:   282591.232 us/op

Iteration   5: 236136.877 ±(99.9%) 7189.203 us/op
                 createNewObjects·p0.00:   214695.936 us/op
                 createNewObjects·p0.50:   231997.440 us/op
                 createNewObjects·p0.90:   258002.125 us/op
                 createNewObjects·p0.95:   260151.706 us/op
                 createNewObjects·p0.99:   263192.576 us/op
                 createNewObjects·p0.999:  263192.576 us/op
                 createNewObjects·p0.9999: 263192.576 us/op
                 createNewObjects·p1.00:   263192.576 us/op

Iteration   6: 247195.398 ±(99.9%) 7278.163 us/op
                 createNewObjects·p0.00:   222035.968 us/op
                 createNewObjects·p0.50:   248250.368 us/op
                 createNewObjects·p0.90:   264713.011 us/op
                 createNewObjects·p0.95:   268409.242 us/op
                 createNewObjects·p0.99:   271056.896 us/op
                 createNewObjects·p0.999:  271056.896 us/op
                 createNewObjects·p0.9999: 271056.896 us/op
                 createNewObjects·p1.00:   271056.896 us/op

Iteration   7: 238825.667 ±(99.9%) 8169.466 us/op
                 createNewObjects·p0.00:   216793.088 us/op
                 createNewObjects·p0.50:   235405.312 us/op
                 createNewObjects·p0.90:   258238.054 us/op
                 createNewObjects·p0.95:   260492.493 us/op
                 createNewObjects·p0.99:   266600.448 us/op
                 createNewObjects·p0.999:  266600.448 us/op
                 createNewObjects·p0.9999: 266600.448 us/op
                 createNewObjects·p1.00:   266600.448 us/op

Iteration   8: 247150.642 ±(99.9%) 8901.703 us/op
                 createNewObjects·p0.00:   220725.248 us/op
                 createNewObjects·p0.50:   248512.512 us/op
                 createNewObjects·p0.90:   267649.024 us/op
                 createNewObjects·p0.95:   271266.611 us/op
                 createNewObjects·p0.99:   276299.776 us/op
                 createNewObjects·p0.999:  276299.776 us/op
                 createNewObjects·p0.9999: 276299.776 us/op
                 createNewObjects·p1.00:   276299.776 us/op

Iteration   9: 241203.688 ±(99.9%) 8875.592 us/op
                 createNewObjects·p0.00:   218628.096 us/op
                 createNewObjects·p0.50:   243662.848 us/op
                 createNewObjects·p0.90:   262825.574 us/op
                 createNewObjects·p0.95:   269536.461 us/op
                 createNewObjects·p0.99:   284164.096 us/op
                 createNewObjects·p0.999:  284164.096 us/op
                 createNewObjects·p0.9999: 284164.096 us/op
                 createNewObjects·p1.00:   284164.096 us/op

Iteration  10: 239955.383 ±(99.9%) 7515.777 us/op
                 createNewObjects·p0.00:   218628.096 us/op
                 createNewObjects·p0.50:   236322.816 us/op
                 createNewObjects·p0.90:   256743.834 us/op
                 createNewObjects·p0.95:   260440.064 us/op
                 createNewObjects·p0.99:   277348.352 us/op
                 createNewObjects·p0.999:  277348.352 us/op
                 createNewObjects·p0.9999: 277348.352 us/op
                 createNewObjects·p1.00:   277348.352 us/op

Iteration  11: 240517.120 ±(99.9%) 8467.178 us/op
                 createNewObjects·p0.00:   218628.096 us/op
                 createNewObjects·p0.50:   239337.472 us/op
                 createNewObjects·p0.90:   259076.915 us/op
                 createNewObjects·p0.95:   276103.168 us/op
                 createNewObjects·p0.99:   278396.928 us/op
                 createNewObjects·p0.999:  278396.928 us/op
                 createNewObjects·p0.9999: 278396.928 us/op
                 createNewObjects·p1.00:   278396.928 us/op

Iteration  12: 244209.514 ±(99.9%) 8270.508 us/op
                 createNewObjects·p0.00:   221511.680 us/op
                 createNewObjects·p0.50:   246939.648 us/op
                 createNewObjects·p0.90:   264503.296 us/op
                 createNewObjects·p0.95:   270585.037 us/op
                 createNewObjects·p0.99:   274726.912 us/op
                 createNewObjects·p0.999:  274726.912 us/op
                 createNewObjects·p0.9999: 274726.912 us/op
                 createNewObjects·p1.00:   274726.912 us/op

Iteration  13: 240411.014 ±(99.9%) 8732.601 us/op
                 createNewObjects·p0.00:   219152.384 us/op
                 createNewObjects·p0.50:   238026.752 us/op
                 createNewObjects·p0.90:   265682.944 us/op
                 createNewObjects·p0.95:   272682.189 us/op
                 createNewObjects·p0.99:   273154.048 us/op
                 createNewObjects·p0.999:  273154.048 us/op
                 createNewObjects·p0.9999: 273154.048 us/op
                 createNewObjects·p1.00:   273154.048 us/op

Iteration  14: 239212.642 ±(99.9%) 8328.756 us/op
                 createNewObjects·p0.00:   219676.672 us/op
                 createNewObjects·p0.50:   235798.528 us/op
                 createNewObjects·p0.90:   263480.934 us/op
                 createNewObjects·p0.95:   267085.414 us/op
                 createNewObjects·p0.99:   267386.880 us/op
                 createNewObjects·p0.999:  267386.880 us/op
                 createNewObjects·p0.9999: 267386.880 us/op
                 createNewObjects·p1.00:   267386.880 us/op

Iteration  15: 233161.847 ±(99.9%) 6327.841 us/op
                 createNewObjects·p0.00:   214433.792 us/op
                 createNewObjects·p0.50:   233570.304 us/op
                 createNewObjects·p0.90:   250924.237 us/op
                 createNewObjects·p0.95:   253388.390 us/op
                 createNewObjects·p0.99:   264241.152 us/op
                 createNewObjects·p0.999:  264241.152 us/op
                 createNewObjects·p0.9999: 264241.152 us/op
                 createNewObjects·p1.00:   264241.152 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 628
  mean = 241476.367 ±(99.9%) 2028.574 us/op

  Histogram, us/op:
    [210000.000, 215000.000) = 2 
    [215000.000, 220000.000) = 13 
    [220000.000, 225000.000) = 99 
    [225000.000, 230000.000) = 93 
    [230000.000, 235000.000) = 53 
    [235000.000, 240000.000) = 48 
    [240000.000, 245000.000) = 38 
    [245000.000, 250000.000) = 76 
    [250000.000, 255000.000) = 72 
    [255000.000, 260000.000) = 53 
    [260000.000, 265000.000) = 35 
    [265000.000, 270000.000) = 25 
    [270000.000, 275000.000) = 11 
    [275000.000, 280000.000) = 7 
    [280000.000, 285000.000) = 3 

  Percentiles, us/op:
      p(0.0000) = 214433.792 us/op
     p(50.0000) = 240648.192 us/op
     p(90.0000) = 262406.144 us/op
     p(95.0000) = 267386.880 us/op
     p(99.0000) = 277720.596 us/op
     p(99.9000) = 284164.096 us/op
     p(99.9900) = 284164.096 us/op
     p(99.9990) = 284164.096 us/op
     p(99.9999) = 284164.096 us/op
    p(100.0000) = 284164.096 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 69.56% complete, ETA 02:29:15
# Fork: 1 of 1
# Warmup Iteration   1: 220594.176 ±(99.9%) 6483.322 us/op
# Warmup Iteration   2: 218690.783 ±(99.9%) 5092.337 us/op
# Warmup Iteration   3: 220850.621 ±(99.9%) 5182.549 us/op
# Warmup Iteration   4: 224954.505 ±(99.9%) 6868.801 us/op
# Warmup Iteration   5: 227618.444 ±(99.9%) 7254.428 us/op
Iteration   1: 222962.210 ±(99.9%) 5554.515 us/op
                 createNewObjects·p0.00:   203948.032 us/op
                 createNewObjects·p0.50:   222822.400 us/op
                 createNewObjects·p0.90:   238551.040 us/op
                 createNewObjects·p0.95:   241618.125 us/op
                 createNewObjects·p0.99:   242221.056 us/op
                 createNewObjects·p0.999:  242221.056 us/op
                 createNewObjects·p0.9999: 242221.056 us/op
                 createNewObjects·p1.00:   242221.056 us/op

Iteration   2: 216620.185 ±(99.9%) 4835.387 us/op
                 createNewObjects·p0.00:   204472.320 us/op
                 createNewObjects·p0.50:   214695.936 us/op
                 createNewObjects·p0.90:   232049.869 us/op
                 createNewObjects·p0.95:   235510.170 us/op
                 createNewObjects·p0.99:   240910.336 us/op
                 createNewObjects·p0.999:  240910.336 us/op
                 createNewObjects·p0.9999: 240910.336 us/op
                 createNewObjects·p1.00:   240910.336 us/op

Iteration   3: 217938.543 ±(99.9%) 5536.755 us/op
                 createNewObjects·p0.00:   204210.176 us/op
                 createNewObjects·p0.50:   214302.720 us/op
                 createNewObjects·p0.90:   235562.598 us/op
                 createNewObjects·p0.95:   237738.394 us/op
                 createNewObjects·p0.99:   243269.632 us/op
                 createNewObjects·p0.999:  243269.632 us/op
                 createNewObjects·p0.9999: 243269.632 us/op
                 createNewObjects·p1.00:   243269.632 us/op

Iteration   4: 225379.760 ±(99.9%) 5515.271 us/op
                 createNewObjects·p0.00:   208666.624 us/op
                 createNewObjects·p0.50:   224133.120 us/op
                 createNewObjects·p0.90:   239337.472 us/op
                 createNewObjects·p0.95:   240936.550 us/op
                 createNewObjects·p0.99:   256376.832 us/op
                 createNewObjects·p0.999:  256376.832 us/op
                 createNewObjects·p0.9999: 256376.832 us/op
                 createNewObjects·p1.00:   256376.832 us/op

Iteration   5: 225595.301 ±(99.9%) 5758.991 us/op
                 createNewObjects·p0.00:   206307.328 us/op
                 createNewObjects·p0.50:   223870.976 us/op
                 createNewObjects·p0.90:   240333.619 us/op
                 createNewObjects·p0.95:   244082.278 us/op
                 createNewObjects·p0.99:   255852.544 us/op
                 createNewObjects·p0.999:  255852.544 us/op
                 createNewObjects·p0.9999: 255852.544 us/op
                 createNewObjects·p1.00:   255852.544 us/op

Iteration   6: 221745.330 ±(99.9%) 6937.688 us/op
                 createNewObjects·p0.00:   204996.608 us/op
                 createNewObjects·p0.50:   217055.232 us/op
                 createNewObjects·p0.90:   241487.053 us/op
                 createNewObjects·p0.95:   245799.322 us/op
                 createNewObjects·p0.99:   260833.280 us/op
                 createNewObjects·p0.999:  260833.280 us/op
                 createNewObjects·p0.9999: 260833.280 us/op
                 createNewObjects·p1.00:   260833.280 us/op

Iteration   7: 224331.184 ±(99.9%) 6972.882 us/op
                 createNewObjects·p0.00:   205520.896 us/op
                 createNewObjects·p0.50:   221249.536 us/op
                 createNewObjects·p0.90:   243374.490 us/op
                 createNewObjects·p0.95:   251605.811 us/op
                 createNewObjects·p0.99:   263979.008 us/op
                 createNewObjects·p0.999:  263979.008 us/op
                 createNewObjects·p0.9999: 263979.008 us/op
                 createNewObjects·p1.00:   263979.008 us/op

Iteration   8: 219505.709 ±(99.9%) 6087.498 us/op
                 createNewObjects·p0.00:   203948.032 us/op
                 createNewObjects·p0.50:   215089.152 us/op
                 createNewObjects·p0.90:   237974.323 us/op
                 createNewObjects·p0.95:   248420.762 us/op
                 createNewObjects·p0.99:   251396.096 us/op
                 createNewObjects·p0.999:  251396.096 us/op
                 createNewObjects·p0.9999: 251396.096 us/op
                 createNewObjects·p1.00:   251396.096 us/op

Iteration   9: 217710.592 ±(99.9%) 5236.171 us/op
                 createNewObjects·p0.00:   204210.176 us/op
                 createNewObjects·p0.50:   214827.008 us/op
                 createNewObjects·p0.90:   233884.877 us/op
                 createNewObjects·p0.95:   237109.248 us/op
                 createNewObjects·p0.99:   246153.216 us/op
                 createNewObjects·p0.999:  246153.216 us/op
                 createNewObjects·p0.9999: 246153.216 us/op
                 createNewObjects·p1.00:   246153.216 us/op

Iteration  10: 226789.513 ±(99.9%) 6457.030 us/op
                 createNewObjects·p0.00:   206307.328 us/op
                 createNewObjects·p0.50:   226230.272 us/op
                 createNewObjects·p0.90:   246415.360 us/op
                 createNewObjects·p0.95:   247752.294 us/op
                 createNewObjects·p0.99:   247988.224 us/op
                 createNewObjects·p0.999:  247988.224 us/op
                 createNewObjects·p0.9999: 247988.224 us/op
                 createNewObjects·p1.00:   247988.224 us/op

Iteration  11: 222175.778 ±(99.9%) 6284.471 us/op
                 createNewObjects·p0.00:   205258.752 us/op
                 createNewObjects·p0.50:   218103.808 us/op
                 createNewObjects·p0.90:   240857.907 us/op
                 createNewObjects·p0.95:   243505.562 us/op
                 createNewObjects·p0.99:   246677.504 us/op
                 createNewObjects·p0.999:  246677.504 us/op
                 createNewObjects·p0.9999: 246677.504 us/op
                 createNewObjects·p1.00:   246677.504 us/op

Iteration  12: 222350.541 ±(99.9%) 7331.241 us/op
                 createNewObjects·p0.00:   204734.464 us/op
                 createNewObjects·p0.50:   220200.960 us/op
                 createNewObjects·p0.90:   238813.184 us/op
                 createNewObjects·p0.95:   249115.443 us/op
                 createNewObjects·p0.99:   277348.352 us/op
                 createNewObjects·p0.999:  277348.352 us/op
                 createNewObjects·p0.9999: 277348.352 us/op
                 createNewObjects·p1.00:   277348.352 us/op

Iteration  13: 224954.505 ±(99.9%) 6114.028 us/op
                 createNewObjects·p0.00:   204734.464 us/op
                 createNewObjects·p0.50:   224395.264 us/op
                 createNewObjects·p0.90:   241749.197 us/op
                 createNewObjects·p0.95:   247673.651 us/op
                 createNewObjects·p0.99:   250871.808 us/op
                 createNewObjects·p0.999:  250871.808 us/op
                 createNewObjects·p0.9999: 250871.808 us/op
                 createNewObjects·p1.00:   250871.808 us/op

Iteration  14: 223736.991 ±(99.9%) 5382.040 us/op
                 createNewObjects·p0.00:   208404.480 us/op
                 createNewObjects·p0.50:   224133.120 us/op
                 createNewObjects·p0.90:   240019.046 us/op
                 createNewObjects·p0.95:   246179.430 us/op
                 createNewObjects·p0.99:   250085.376 us/op
                 createNewObjects·p0.999:  250085.376 us/op
                 createNewObjects·p0.9999: 250085.376 us/op
                 createNewObjects·p1.00:   250085.376 us/op

Iteration  15: 214489.567 ±(99.9%) 4227.977 us/op
                 createNewObjects·p0.00:   204734.464 us/op
                 createNewObjects·p0.50:   213123.072 us/op
                 createNewObjects·p0.90:   222193.254 us/op
                 createNewObjects·p0.95:   236296.602 us/op
                 createNewObjects·p0.99:   247726.080 us/op
                 createNewObjects·p0.999:  247726.080 us/op
                 createNewObjects·p0.9999: 247726.080 us/op
                 createNewObjects·p1.00:   247726.080 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 683
  mean = 221701.283 ±(99.9%) 1490.836 us/op

  Histogram, us/op:
    [200000.000, 205000.000) = 13 
    [205000.000, 210000.000) = 90 
    [210000.000, 215000.000) = 155 
    [215000.000, 220000.000) = 97 
    [220000.000, 225000.000) = 84 
    [225000.000, 230000.000) = 79 
    [230000.000, 235000.000) = 59 
    [235000.000, 240000.000) = 51 
    [240000.000, 245000.000) = 29 
    [245000.000, 250000.000) = 14 
    [250000.000, 255000.000) = 7 
    [255000.000, 260000.000) = 2 
    [260000.000, 265000.000) = 2 
    [265000.000, 270000.000) = 0 
    [270000.000, 275000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 203948.032 us/op
     p(50.0000) = 219152.384 us/op
     p(90.0000) = 238551.040 us/op
     p(95.0000) = 243217.203 us/op
     p(99.0000) = 251479.982 us/op
     p(99.9000) = 277348.352 us/op
     p(99.9900) = 277348.352 us/op
     p(99.9990) = 277348.352 us/op
     p(99.9999) = 277348.352 us/op
    p(100.0000) = 277348.352 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 70.29% complete, ETA 02:25:43
# Fork: 1 of 1
# Warmup Iteration   1: 217462.392 ±(99.9%) 5851.396 us/op
# Warmup Iteration   2: 216134.939 ±(99.9%) 5514.173 us/op
# Warmup Iteration   3: 210173.952 ±(99.9%) 4814.805 us/op
# Warmup Iteration   4: 208606.549 ±(99.9%) 4083.800 us/op
# Warmup Iteration   5: 213429.836 ±(99.9%) 5675.917 us/op
Iteration   1: 209698.816 ±(99.9%) 4217.708 us/op
                 createNewObjects·p0.00:   198180.864 us/op
                 createNewObjects·p0.50:   207355.904 us/op
                 createNewObjects·p0.90:   222717.542 us/op
                 createNewObjects·p0.95:   224971.981 us/op
                 createNewObjects·p0.99:   233046.016 us/op
                 createNewObjects·p0.999:  233046.016 us/op
                 createNewObjects·p0.9999: 233046.016 us/op
                 createNewObjects·p1.00:   233046.016 us/op

Iteration   2: 216028.966 ±(99.9%) 5885.659 us/op
                 createNewObjects·p0.00:   199491.584 us/op
                 createNewObjects·p0.50:   213123.072 us/op
                 createNewObjects·p0.90:   232679.014 us/op
                 createNewObjects·p0.95:   235719.885 us/op
                 createNewObjects·p0.99:   244580.352 us/op
                 createNewObjects·p0.999:  244580.352 us/op
                 createNewObjects·p0.9999: 244580.352 us/op
                 createNewObjects·p1.00:   244580.352 us/op

Iteration   3: 213820.263 ±(99.9%) 5933.931 us/op
                 createNewObjects·p0.00:   199229.440 us/op
                 createNewObjects·p0.50:   210239.488 us/op
                 createNewObjects·p0.90:   229900.288 us/op
                 createNewObjects·p0.95:   238184.038 us/op
                 createNewObjects·p0.99:   251920.384 us/op
                 createNewObjects·p0.999:  251920.384 us/op
                 createNewObjects·p0.9999: 251920.384 us/op
                 createNewObjects·p1.00:   251920.384 us/op

Iteration   4: 207120.509 ±(99.9%) 3482.176 us/op
                 createNewObjects·p0.00:   198180.864 us/op
                 createNewObjects·p0.50:   206831.616 us/op
                 createNewObjects·p0.90:   216530.944 us/op
                 createNewObjects·p0.95:   223346.688 us/op
                 createNewObjects·p0.99:   230424.576 us/op
                 createNewObjects·p0.999:  230424.576 us/op
                 createNewObjects·p0.9999: 230424.576 us/op
                 createNewObjects·p1.00:   230424.576 us/op

Iteration   5: 209600.512 ±(99.9%) 4866.852 us/op
                 createNewObjects·p0.00:   198967.296 us/op
                 createNewObjects·p0.50:   206700.544 us/op
                 createNewObjects·p0.90:   225784.627 us/op
                 createNewObjects·p0.95:   233530.982 us/op
                 createNewObjects·p0.99:   235143.168 us/op
                 createNewObjects·p0.999:  235143.168 us/op
                 createNewObjects·p0.9999: 235143.168 us/op
                 createNewObjects·p1.00:   235143.168 us/op

Iteration   6: 216530.944 ±(99.9%) 6764.100 us/op
                 createNewObjects·p0.00:   198443.008 us/op
                 createNewObjects·p0.50:   212336.640 us/op
                 createNewObjects·p0.90:   236611.174 us/op
                 createNewObjects·p0.95:   238760.755 us/op
                 createNewObjects·p0.99:   244842.496 us/op
                 createNewObjects·p0.999:  244842.496 us/op
                 createNewObjects·p0.9999: 244842.496 us/op
                 createNewObjects·p1.00:   244842.496 us/op

Iteration   7: 213095.184 ±(99.9%) 6092.622 us/op
                 createNewObjects·p0.00:   199491.584 us/op
                 createNewObjects·p0.50:   209453.056 us/op
                 createNewObjects·p0.90:   237345.178 us/op
                 createNewObjects·p0.95:   240438.477 us/op
                 createNewObjects·p0.99:   245104.640 us/op
                 createNewObjects·p0.999:  245104.640 us/op
                 createNewObjects·p0.9999: 245104.640 us/op
                 createNewObjects·p1.00:   245104.640 us/op

Iteration   8: 206387.576 ±(99.9%) 3816.782 us/op
                 createNewObjects·p0.00:   199229.440 us/op
                 createNewObjects·p0.50:   204734.464 us/op
                 createNewObjects·p0.90:   216006.656 us/op
                 createNewObjects·p0.95:   220463.104 us/op
                 createNewObjects·p0.99:   242483.200 us/op
                 createNewObjects·p0.999:  242483.200 us/op
                 createNewObjects·p0.9999: 242483.200 us/op
                 createNewObjects·p1.00:   242483.200 us/op

Iteration   9: 210752.853 ±(99.9%) 4355.030 us/op
                 createNewObjects·p0.00:   198180.864 us/op
                 createNewObjects·p0.50:   207355.904 us/op
                 createNewObjects·p0.90:   224028.262 us/op
                 createNewObjects·p0.95:   227973.530 us/op
                 createNewObjects·p0.99:   230424.576 us/op
                 createNewObjects·p0.999:  230424.576 us/op
                 createNewObjects·p0.9999: 230424.576 us/op
                 createNewObjects·p1.00:   230424.576 us/op

Iteration  10: 211599.360 ±(99.9%) 5257.855 us/op
                 createNewObjects·p0.00:   198180.864 us/op
                 createNewObjects·p0.50:   209059.840 us/op
                 createNewObjects·p0.90:   231315.866 us/op
                 createNewObjects·p0.95:   234029.056 us/op
                 createNewObjects·p0.99:   238813.184 us/op
                 createNewObjects·p0.999:  238813.184 us/op
                 createNewObjects·p0.9999: 238813.184 us/op
                 createNewObjects·p1.00:   238813.184 us/op

Iteration  11: 211069.611 ±(99.9%) 4870.353 us/op
                 createNewObjects·p0.00:   199491.584 us/op
                 createNewObjects·p0.50:   208535.552 us/op
                 createNewObjects·p0.90:   223661.261 us/op
                 createNewObjects·p0.95:   236113.101 us/op
                 createNewObjects·p0.99:   239337.472 us/op
                 createNewObjects·p0.999:  239337.472 us/op
                 createNewObjects·p0.9999: 239337.472 us/op
                 createNewObjects·p1.00:   239337.472 us/op

Iteration  12: 211664.896 ±(99.9%) 6006.374 us/op
                 createNewObjects·p0.00:   198967.296 us/op
                 createNewObjects·p0.50:   207355.904 us/op
                 createNewObjects·p0.90:   237502.464 us/op
                 createNewObjects·p0.95:   238918.042 us/op
                 createNewObjects·p0.99:   241434.624 us/op
                 createNewObjects·p0.999:  241434.624 us/op
                 createNewObjects·p0.9999: 241434.624 us/op
                 createNewObjects·p1.00:   241434.624 us/op

Iteration  13: 212782.843 ±(99.9%) 5488.478 us/op
                 createNewObjects·p0.00:   198443.008 us/op
                 createNewObjects·p0.50:   209715.200 us/op
                 createNewObjects·p0.90:   228694.426 us/op
                 createNewObjects·p0.95:   239127.757 us/op
                 createNewObjects·p0.99:   248774.656 us/op
                 createNewObjects·p0.999:  248774.656 us/op
                 createNewObjects·p0.9999: 248774.656 us/op
                 createNewObjects·p1.00:   248774.656 us/op

Iteration  14: 217881.555 ±(99.9%) 6453.443 us/op
                 createNewObjects·p0.00:   199753.728 us/op
                 createNewObjects·p0.50:   215351.296 us/op
                 createNewObjects·p0.90:   236296.602 us/op
                 createNewObjects·p0.95:   243440.026 us/op
                 createNewObjects·p0.99:   253231.104 us/op
                 createNewObjects·p0.999:  253231.104 us/op
                 createNewObjects·p0.9999: 253231.104 us/op
                 createNewObjects·p1.00:   253231.104 us/op

Iteration  15: 207992.539 ±(99.9%) 3351.891 us/op
                 createNewObjects·p0.00:   198967.296 us/op
                 createNewObjects·p0.50:   208142.336 us/op
                 createNewObjects·p0.90:   218890.240 us/op
                 createNewObjects·p0.95:   220987.392 us/op
                 createNewObjects·p0.99:   223870.976 us/op
                 createNewObjects·p0.999:  223870.976 us/op
                 createNewObjects·p0.9999: 223870.976 us/op
                 createNewObjects·p1.00:   223870.976 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 716
  mean = 211679.816 ±(99.9%) 1313.819 us/op

  Histogram, us/op:
    [190000.000, 195000.000) = 0 
    [195000.000, 200000.000) = 35 
    [200000.000, 205000.000) = 193 
    [205000.000, 210000.000) = 184 
    [210000.000, 215000.000) = 94 
    [215000.000, 220000.000) = 74 
    [220000.000, 225000.000) = 45 
    [225000.000, 230000.000) = 32 
    [230000.000, 235000.000) = 26 
    [235000.000, 240000.000) = 19 
    [240000.000, 245000.000) = 10 
    [245000.000, 250000.000) = 2 
    [250000.000, 255000.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 198180.864 us/op
     p(50.0000) = 208666.624 us/op
     p(90.0000) = 228065.280 us/op
     p(95.0000) = 234396.058 us/op
     p(99.0000) = 243487.212 us/op
     p(99.9000) = 253231.104 us/op
     p(99.9900) = 253231.104 us/op
     p(99.9990) = 253231.104 us/op
     p(99.9999) = 253231.104 us/op
    p(100.0000) = 253231.104 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 71.01% complete, ETA 02:22:11
# Fork: 1 of 1
# Warmup Iteration   1: 1621697.682 ±(99.9%) 149056.110 us/op
# Warmup Iteration   2: 1630985.070 ±(99.9%) 133083.766 us/op
# Warmup Iteration   3: 1641470.830 ±(99.9%) 103614.581 us/op
# Warmup Iteration   4: 1636377.746 ±(99.9%) 130145.715 us/op
# Warmup Iteration   5: 1642968.795 ±(99.9%) 129404.884 us/op
Iteration   1: 1639972.864 ±(99.9%) 139715.601 us/op
                 fillHeap·p0.00:   1505755.136 us/op
                 fillHeap·p0.50:   1660944.384 us/op
                 fillHeap·p0.90:   1679818.752 us/op
                 fillHeap·p0.95:   1679818.752 us/op
                 fillHeap·p0.99:   1679818.752 us/op
                 fillHeap·p0.999:  1679818.752 us/op
                 fillHeap·p0.9999: 1679818.752 us/op
                 fillHeap·p1.00:   1679818.752 us/op

Iteration   2: 1638175.305 ±(99.9%) 120402.059 us/op
                 fillHeap·p0.00:   1520435.200 us/op
                 fillHeap·p0.50:   1646264.320 us/op
                 fillHeap·p0.90:   1673527.296 us/op
                 fillHeap·p0.95:   1673527.296 us/op
                 fillHeap·p0.99:   1673527.296 us/op
                 fillHeap·p0.999:  1673527.296 us/op
                 fillHeap·p0.9999: 1673527.296 us/op
                 fillHeap·p1.00:   1673527.296 us/op

Iteration   3: 1625891.986 ±(99.9%) 116582.779 us/op
                 fillHeap·p0.00:   1514143.744 us/op
                 fillHeap·p0.50:   1637875.712 us/op
                 fillHeap·p0.90:   1665138.688 us/op
                 fillHeap·p0.95:   1665138.688 us/op
                 fillHeap·p0.99:   1665138.688 us/op
                 fillHeap·p0.999:  1665138.688 us/op
                 fillHeap·p0.9999: 1665138.688 us/op
                 fillHeap·p1.00:   1665138.688 us/op

Iteration   4: 1611211.922 ±(99.9%) 185728.718 us/op
                 fillHeap·p0.00:   1472200.704 us/op
                 fillHeap·p0.50:   1648361.472 us/op
                 fillHeap·p0.90:   1690304.512 us/op
                 fillHeap·p0.95:   1690304.512 us/op
                 fillHeap·p0.99:   1690304.512 us/op
                 fillHeap·p0.999:  1690304.512 us/op
                 fillHeap·p0.9999: 1690304.512 us/op
                 fillHeap·p1.00:   1690304.512 us/op

Iteration   5: 1633381.815 ±(99.9%) 130508.448 us/op
                 fillHeap·p0.00:   1512046.592 us/op
                 fillHeap·p0.50:   1648361.472 us/op
                 fillHeap·p0.90:   1694498.816 us/op
                 fillHeap·p0.95:   1694498.816 us/op
                 fillHeap·p0.99:   1694498.816 us/op
                 fillHeap·p0.999:  1694498.816 us/op
                 fillHeap·p0.9999: 1694498.816 us/op
                 fillHeap·p1.00:   1694498.816 us/op

Iteration   6: 1639074.085 ±(99.9%) 159121.805 us/op
                 fillHeap·p0.00:   1484783.616 us/op
                 fillHeap·p0.50:   1656750.080 us/op
                 fillHeap·p0.90:   1692401.664 us/op
                 fillHeap·p0.95:   1692401.664 us/op
                 fillHeap·p0.99:   1692401.664 us/op
                 fillHeap·p0.999:  1692401.664 us/op
                 fillHeap·p0.9999: 1692401.664 us/op
                 fillHeap·p1.00:   1692401.664 us/op

Iteration   7: 1644766.354 ±(99.9%) 121731.442 us/op
                 fillHeap·p0.00:   1524629.504 us/op
                 fillHeap·p0.50:   1660944.384 us/op
                 fillHeap·p0.90:   1686110.208 us/op
                 fillHeap·p0.95:   1686110.208 us/op
                 fillHeap·p0.99:   1686110.208 us/op
                 fillHeap·p0.999:  1686110.208 us/op
                 fillHeap·p0.9999: 1686110.208 us/op
                 fillHeap·p1.00:   1686110.208 us/op

Iteration   8: 1650159.031 ±(99.9%) 125660.585 us/op
                 fillHeap·p0.00:   1530920.960 us/op
                 fillHeap·p0.50:   1669332.992 us/op
                 fillHeap·p0.90:   1694498.816 us/op
                 fillHeap·p0.95:   1694498.816 us/op
                 fillHeap·p0.99:   1694498.816 us/op
                 fillHeap·p0.999:  1694498.816 us/op
                 fillHeap·p0.9999: 1694498.816 us/op
                 fillHeap·p1.00:   1694498.816 us/op

Iteration   9: 1642669.202 ±(99.9%) 138853.739 us/op
                 fillHeap·p0.00:   1507852.288 us/op
                 fillHeap·p0.50:   1669332.992 us/op
                 fillHeap·p0.90:   1677721.600 us/op
                 fillHeap·p0.95:   1677721.600 us/op
                 fillHeap·p0.99:   1677721.600 us/op
                 fillHeap·p0.999:  1677721.600 us/op
                 fillHeap·p0.9999: 1677721.600 us/op
                 fillHeap·p1.00:   1677721.600 us/op

Iteration  10: 1648661.065 ±(99.9%) 134188.742 us/op
                 fillHeap·p0.00:   1522532.352 us/op
                 fillHeap·p0.50:   1658847.232 us/op
                 fillHeap·p0.90:   1707081.728 us/op
                 fillHeap·p0.95:   1707081.728 us/op
                 fillHeap·p0.99:   1707081.728 us/op
                 fillHeap·p0.999:  1707081.728 us/op
                 fillHeap·p0.9999: 1707081.728 us/op
                 fillHeap·p1.00:   1707081.728 us/op

Iteration  11: 1648361.472 ±(99.9%) 140670.389 us/op
                 fillHeap·p0.00:   1518338.048 us/op
                 fillHeap·p0.50:   1663041.536 us/op
                 fillHeap·p0.90:   1702887.424 us/op
                 fillHeap·p0.95:   1702887.424 us/op
                 fillHeap·p0.99:   1702887.424 us/op
                 fillHeap·p0.999:  1702887.424 us/op
                 fillHeap·p0.9999: 1702887.424 us/op
                 fillHeap·p1.00:   1702887.424 us/op

Iteration  12: 1645665.134 ±(99.9%) 96594.561 us/op
                 fillHeap·p0.00:   1551892.480 us/op
                 fillHeap·p0.50:   1663041.536 us/op
                 fillHeap·p0.90:   1673527.296 us/op
                 fillHeap·p0.95:   1673527.296 us/op
                 fillHeap·p0.99:   1673527.296 us/op
                 fillHeap·p0.999:  1673527.296 us/op
                 fillHeap·p0.9999: 1673527.296 us/op
                 fillHeap·p1.00:   1673527.296 us/op

Iteration  13: 1646863.506 ±(99.9%) 123941.109 us/op
                 fillHeap·p0.00:   1526726.656 us/op
                 fillHeap·p0.50:   1660944.384 us/op
                 fillHeap·p0.90:   1686110.208 us/op
                 fillHeap·p0.95:   1686110.208 us/op
                 fillHeap·p0.99:   1686110.208 us/op
                 fillHeap·p0.999:  1686110.208 us/op
                 fillHeap·p0.9999: 1686110.208 us/op
                 fillHeap·p1.00:   1686110.208 us/op

Iteration  14: 1651057.810 ±(99.9%) 143670.509 us/op
                 fillHeap·p0.00:   1507852.288 us/op
                 fillHeap·p0.50:   1671430.144 us/op
                 fillHeap·p0.90:   1690304.512 us/op
                 fillHeap·p0.95:   1690304.512 us/op
                 fillHeap·p0.99:   1690304.512 us/op
                 fillHeap·p0.999:  1690304.512 us/op
                 fillHeap·p0.9999: 1690304.512 us/op
                 fillHeap·p1.00:   1690304.512 us/op

Iteration  15: 1625592.393 ±(99.9%) 109806.781 us/op
                 fillHeap·p0.00:   1518338.048 us/op
                 fillHeap·p0.50:   1642070.016 us/op
                 fillHeap·p0.90:   1663041.536 us/op
                 fillHeap·p0.95:   1663041.536 us/op
                 fillHeap·p0.99:   1663041.536 us/op
                 fillHeap·p0.999:  1663041.536 us/op
                 fillHeap·p0.9999: 1663041.536 us/op
                 fillHeap·p1.00:   1663041.536 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 105
  mean = 1639433.596 ±(99.9%) 18648.272 us/op

  Histogram, us/op:
    [1400000.000, 1425000.000) = 0 
    [1425000.000, 1450000.000) = 0 
    [1450000.000, 1475000.000) = 1 
    [1475000.000, 1500000.000) = 1 
    [1500000.000, 1525000.000) = 11 
    [1525000.000, 1550000.000) = 2 
    [1550000.000, 1575000.000) = 1 
    [1575000.000, 1600000.000) = 0 
    [1600000.000, 1625000.000) = 2 
    [1625000.000, 1650000.000) = 25 
    [1650000.000, 1675000.000) = 40 
    [1675000.000, 1700000.000) = 20 
    [1700000.000, 1725000.000) = 2 
    [1725000.000, 1750000.000) = 0 
    [1750000.000, 1775000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1472200.704 us/op
     p(50.0000) = 1658847.232 us/op
     p(90.0000) = 1686110.208 us/op
     p(95.0000) = 1691772.518 us/op
     p(99.0000) = 1706830.070 us/op
     p(99.9000) = 1707081.728 us/op
     p(99.9900) = 1707081.728 us/op
     p(99.9990) = 1707081.728 us/op
     p(99.9999) = 1707081.728 us/op
    p(100.0000) = 1707081.728 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 71.74% complete, ETA 02:18:49
# Fork: 1 of 1
# Warmup Iteration   1: 970600.076 ±(99.9%) 24077.137 us/op
# Warmup Iteration   2: 957635.863 ±(99.9%) 26928.821 us/op
# Warmup Iteration   3: 958779.764 ±(99.9%) 31984.782 us/op
# Warmup Iteration   4: 961258.217 ±(99.9%) 29535.964 us/op
# Warmup Iteration   5: 954299.485 ±(99.9%) 29043.147 us/op
Iteration   1: 956205.987 ±(99.9%) 30916.111 us/op
                 fillHeap·p0.00:   919601.152 us/op
                 fillHeap·p0.50:   950009.856 us/op
                 fillHeap·p0.90:   984193.434 us/op
                 fillHeap·p0.95:   984612.864 us/op
                 fillHeap·p0.99:   984612.864 us/op
                 fillHeap·p0.999:  984612.864 us/op
                 fillHeap·p0.9999: 984612.864 us/op
                 fillHeap·p1.00:   984612.864 us/op

Iteration   2: 950391.156 ±(99.9%) 28397.441 us/op
                 fillHeap·p0.00:   902823.936 us/op
                 fillHeap·p0.50:   952107.008 us/op
                 fillHeap·p0.90:   981676.851 us/op
                 fillHeap·p0.95:   985661.440 us/op
                 fillHeap·p0.99:   985661.440 us/op
                 fillHeap·p0.999:  985661.440 us/op
                 fillHeap·p0.9999: 985661.440 us/op
                 fillHeap·p1.00:   985661.440 us/op

Iteration   3: 954680.785 ±(99.9%) 40295.019 us/op
                 fillHeap·p0.00:   907018.240 us/op
                 fillHeap·p0.50:   950009.856 us/op
                 fillHeap·p0.90:   1008730.112 us/op
                 fillHeap·p0.95:   1015021.568 us/op
                 fillHeap·p0.99:   1015021.568 us/op
                 fillHeap·p0.999:  1015021.568 us/op
                 fillHeap·p0.9999: 1015021.568 us/op
                 fillHeap·p1.00:   1015021.568 us/op

Iteration   4: 957826.513 ±(99.9%) 27980.333 us/op
                 fillHeap·p0.00:   908066.816 us/op
                 fillHeap·p0.50:   959447.040 us/op
                 fillHeap·p0.90:   984193.434 us/op
                 fillHeap·p0.95:   986710.016 us/op
                 fillHeap·p0.99:   986710.016 us/op
                 fillHeap·p0.999:  986710.016 us/op
                 fillHeap·p0.9999: 986710.016 us/op
                 fillHeap·p1.00:   986710.016 us/op

Iteration   5: 957921.839 ±(99.9%) 23814.462 us/op
                 fillHeap·p0.00:   936378.368 us/op
                 fillHeap·p0.50:   959447.040 us/op
                 fillHeap·p0.90:   990065.459 us/op
                 fillHeap·p0.95:   995098.624 us/op
                 fillHeap·p0.99:   995098.624 us/op
                 fillHeap·p0.999:  995098.624 us/op
                 fillHeap·p0.9999: 995098.624 us/op
                 fillHeap·p1.00:   995098.624 us/op

Iteration   6: 960018.991 ±(99.9%) 31965.649 us/op
                 fillHeap·p0.00:   912261.120 us/op
                 fillHeap·p0.50:   956301.312 us/op
                 fillHeap·p0.90:   994469.478 us/op
                 fillHeap·p0.95:   997195.776 us/op
                 fillHeap·p0.99:   997195.776 us/op
                 fillHeap·p0.999:  997195.776 us/op
                 fillHeap·p0.9999: 997195.776 us/op
                 fillHeap·p1.00:   997195.776 us/op

Iteration   7: 954871.436 ±(99.9%) 34091.737 us/op
                 fillHeap·p0.00:   927989.760 us/op
                 fillHeap·p0.50:   945815.552 us/op
                 fillHeap·p0.90:   996986.061 us/op
                 fillHeap·p0.95:   999292.928 us/op
                 fillHeap·p0.99:   999292.928 us/op
                 fillHeap·p0.999:  999292.928 us/op
                 fillHeap·p0.9999: 999292.928 us/op
                 fillHeap·p1.00:   999292.928 us/op

Iteration   8: 958684.439 ±(99.9%) 33310.576 us/op
                 fillHeap·p0.00:   917504.000 us/op
                 fillHeap·p0.50:   954204.160 us/op
                 fillHeap·p0.90:   996776.346 us/op
                 fillHeap·p0.95:   999292.928 us/op
                 fillHeap·p0.99:   999292.928 us/op
                 fillHeap·p0.999:  999292.928 us/op
                 fillHeap·p0.9999: 999292.928 us/op
                 fillHeap·p1.00:   999292.928 us/op

Iteration   9: 961544.192 ±(99.9%) 29299.402 us/op
                 fillHeap·p0.00:   903872.512 us/op
                 fillHeap·p0.50:   964689.920 us/op
                 fillHeap·p0.90:   985451.725 us/op
                 fillHeap·p0.95:   986710.016 us/op
                 fillHeap·p0.99:   986710.016 us/op
                 fillHeap·p0.999:  986710.016 us/op
                 fillHeap·p0.9999: 986710.016 us/op
                 fillHeap·p1.00:   986710.016 us/op

Iteration  10: 947245.428 ±(99.9%) 26385.908 us/op
                 fillHeap·p0.00:   918552.576 us/op
                 fillHeap·p0.50:   946864.128 us/op
                 fillHeap·p0.90:   981257.421 us/op
                 fillHeap·p0.95:   982515.712 us/op
                 fillHeap·p0.99:   982515.712 us/op
                 fillHeap·p0.999:  982515.712 us/op
                 fillHeap·p0.9999: 982515.712 us/op
                 fillHeap·p1.00:   982515.712 us/op

Iteration  11: 951535.057 ±(99.9%) 28055.393 us/op
                 fillHeap·p0.00:   908066.816 us/op
                 fillHeap·p0.50:   948961.280 us/op
                 fillHeap·p0.90:   984193.434 us/op
                 fillHeap·p0.95:   984612.864 us/op
                 fillHeap·p0.99:   984612.864 us/op
                 fillHeap·p0.999:  984612.864 us/op
                 fillHeap·p0.9999: 984612.864 us/op
                 fillHeap·p1.00:   984612.864 us/op

Iteration  12: 952011.683 ±(99.9%) 37533.953 us/op
                 fillHeap·p0.00:   905969.664 us/op
                 fillHeap·p0.50:   956301.312 us/op
                 fillHeap·p0.90:   990065.459 us/op
                 fillHeap·p0.95:   991952.896 us/op
                 fillHeap·p0.99:   991952.896 us/op
                 fillHeap·p0.999:  991952.896 us/op
                 fillHeap·p0.9999: 991952.896 us/op
                 fillHeap·p1.00:   991952.896 us/op

Iteration  13: 953155.584 ±(99.9%) 28454.609 us/op
                 fillHeap·p0.00:   915406.848 us/op
                 fillHeap·p0.50:   954204.160 us/op
                 fillHeap·p0.90:   976224.256 us/op
                 fillHeap·p0.95:   976224.256 us/op
                 fillHeap·p0.99:   976224.256 us/op
                 fillHeap·p0.999:  976224.256 us/op
                 fillHeap·p0.9999: 976224.256 us/op
                 fillHeap·p1.00:   976224.256 us/op

Iteration  14: 958017.164 ±(99.9%) 25111.785 us/op
                 fillHeap·p0.00:   913309.696 us/op
                 fillHeap·p0.50:   964689.920 us/op
                 fillHeap·p0.90:   976433.971 us/op
                 fillHeap·p0.95:   977272.832 us/op
                 fillHeap·p0.99:   977272.832 us/op
                 fillHeap·p0.999:  977272.832 us/op
                 fillHeap·p0.9999: 977272.832 us/op
                 fillHeap·p1.00:   977272.832 us/op

Iteration  15: 956968.588 ±(99.9%) 33299.095 us/op
                 fillHeap·p0.00:   891289.600 us/op
                 fillHeap·p0.50:   960495.616 us/op
                 fillHeap·p0.90:   981047.706 us/op
                 fillHeap·p0.95:   982515.712 us/op
                 fillHeap·p0.99:   982515.712 us/op
                 fillHeap·p0.999:  982515.712 us/op
                 fillHeap·p0.9999: 982515.712 us/op
                 fillHeap·p1.00:   982515.712 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 165
  mean = 955405.256 ±(99.9%) 5663.128 us/op

  Histogram, us/op:
    [ 800000.000,  825000.000) = 0 
    [ 825000.000,  850000.000) = 0 
    [ 850000.000,  875000.000) = 0 
    [ 875000.000,  900000.000) = 1 
    [ 900000.000,  925000.000) = 13 
    [ 925000.000,  950000.000) = 48 
    [ 950000.000,  975000.000) = 70 
    [ 975000.000, 1000000.000) = 32 
    [1000000.000, 1025000.000) = 1 
    [1025000.000, 1050000.000) = 0 
    [1050000.000, 1075000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 891289.600 us/op
     p(50.0000) = 954204.160 us/op
     p(90.0000) = 982935.142 us/op
     p(95.0000) = 986710.016 us/op
     p(99.0000) = 1004640.666 us/op
     p(99.9000) = 1015021.568 us/op
     p(99.9900) = 1015021.568 us/op
     p(99.9990) = 1015021.568 us/op
     p(99.9999) = 1015021.568 us/op
    p(100.0000) = 1015021.568 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 72.46% complete, ETA 02:15:20
# Fork: 1 of 1
# Warmup Iteration   1: 647561.216 ±(99.9%) 23822.317 us/op
# Warmup Iteration   2: 635961.344 ±(99.9%) 15013.061 us/op
# Warmup Iteration   3: 632029.184 ±(99.9%) 11930.333 us/op
# Warmup Iteration   4: 633339.904 ±(99.9%) 10619.416 us/op
# Warmup Iteration   5: 633733.120 ±(99.9%) 11759.518 us/op
Iteration   1: 636682.240 ±(99.9%) 13112.091 us/op
                 fillHeap·p0.00:   614465.536 us/op
                 fillHeap·p0.50:   635961.344 us/op
                 fillHeap·p0.90:   655255.142 us/op
                 fillHeap·p0.95:   664797.184 us/op
                 fillHeap·p0.99:   664797.184 us/op
                 fillHeap·p0.999:  664797.184 us/op
                 fillHeap·p0.9999: 664797.184 us/op
                 fillHeap·p1.00:   664797.184 us/op

Iteration   2: 635633.664 ±(99.9%) 11644.862 us/op
                 fillHeap·p0.00:   614465.536 us/op
                 fillHeap·p0.50:   635437.056 us/op
                 fillHeap·p0.90:   654521.139 us/op
                 fillHeap·p0.95:   657457.152 us/op
                 fillHeap·p0.99:   657457.152 us/op
                 fillHeap·p0.999:  657457.152 us/op
                 fillHeap·p0.9999: 657457.152 us/op
                 fillHeap·p1.00:   657457.152 us/op

Iteration   3: 635305.984 ±(99.9%) 11351.796 us/op
                 fillHeap·p0.00:   617611.264 us/op
                 fillHeap·p0.50:   634912.768 us/op
                 fillHeap·p0.90:   651689.984 us/op
                 fillHeap·p0.95:   655360.000 us/op
                 fillHeap·p0.99:   655360.000 us/op
                 fillHeap·p0.999:  655360.000 us/op
                 fillHeap·p0.9999: 655360.000 us/op
                 fillHeap·p1.00:   655360.000 us/op

Iteration   4: 635109.376 ±(99.9%) 12083.613 us/op
                 fillHeap·p0.00:   607125.504 us/op
                 fillHeap·p0.50:   636485.632 us/op
                 fillHeap·p0.90:   651899.699 us/op
                 fillHeap·p0.95:   658505.728 us/op
                 fillHeap·p0.99:   658505.728 us/op
                 fillHeap·p0.999:  658505.728 us/op
                 fillHeap·p0.9999: 658505.728 us/op
                 fillHeap·p1.00:   658505.728 us/op

Iteration   5: 636485.632 ±(99.9%) 13380.468 us/op
                 fillHeap·p0.00:   611319.808 us/op
                 fillHeap·p0.50:   639107.072 us/op
                 fillHeap·p0.90:   653262.848 us/op
                 fillHeap·p0.95:   653262.848 us/op
                 fillHeap·p0.99:   653262.848 us/op
                 fillHeap·p0.999:  653262.848 us/op
                 fillHeap·p0.9999: 653262.848 us/op
                 fillHeap·p1.00:   653262.848 us/op

Iteration   6: 635764.736 ±(99.9%) 14322.549 us/op
                 fillHeap·p0.00:   607125.504 us/op
                 fillHeap·p0.50:   635961.344 us/op
                 fillHeap·p0.90:   655989.146 us/op
                 fillHeap·p0.95:   657457.152 us/op
                 fillHeap·p0.99:   657457.152 us/op
                 fillHeap·p0.999:  657457.152 us/op
                 fillHeap·p0.9999: 657457.152 us/op
                 fillHeap·p1.00:   657457.152 us/op

Iteration   7: 634322.944 ±(99.9%) 11322.261 us/op
                 fillHeap·p0.00:   613416.960 us/op
                 fillHeap·p0.50:   634912.768 us/op
                 fillHeap·p0.90:   650117.120 us/op
                 fillHeap·p0.95:   650117.120 us/op
                 fillHeap·p0.99:   650117.120 us/op
                 fillHeap·p0.999:  650117.120 us/op
                 fillHeap·p0.9999: 650117.120 us/op
                 fillHeap·p1.00:   650117.120 us/op

Iteration   8: 636485.632 ±(99.9%) 11136.372 us/op
                 fillHeap·p0.00:   613416.960 us/op
                 fillHeap·p0.50:   635437.056 us/op
                 fillHeap·p0.90:   653577.421 us/op
                 fillHeap·p0.95:   654311.424 us/op
                 fillHeap·p0.99:   654311.424 us/op
                 fillHeap·p0.999:  654311.424 us/op
                 fillHeap·p0.9999: 654311.424 us/op
                 fillHeap·p1.00:   654311.424 us/op

Iteration   9: 635240.448 ±(99.9%) 14815.460 us/op
                 fillHeap·p0.00:   605028.352 us/op
                 fillHeap·p0.50:   636485.632 us/op
                 fillHeap·p0.90:   653787.136 us/op
                 fillHeap·p0.95:   657457.152 us/op
                 fillHeap·p0.99:   657457.152 us/op
                 fillHeap·p0.999:  657457.152 us/op
                 fillHeap·p0.9999: 657457.152 us/op
                 fillHeap·p1.00:   657457.152 us/op

Iteration  10: 636813.312 ±(99.9%) 14043.940 us/op
                 fillHeap·p0.00:   618659.840 us/op
                 fillHeap·p0.50:   638058.496 us/op
                 fillHeap·p0.90:   655989.146 us/op
                 fillHeap·p0.95:   657457.152 us/op
                 fillHeap·p0.99:   657457.152 us/op
                 fillHeap·p0.999:  657457.152 us/op
                 fillHeap·p0.9999: 657457.152 us/op
                 fillHeap·p1.00:   657457.152 us/op

Iteration  11: 632225.792 ±(99.9%) 10939.950 us/op
                 fillHeap·p0.00:   602931.200 us/op
                 fillHeap·p0.50:   634388.480 us/op
                 fillHeap·p0.90:   646866.534 us/op
                 fillHeap·p0.95:   649068.544 us/op
                 fillHeap·p0.99:   649068.544 us/op
                 fillHeap·p0.999:  649068.544 us/op
                 fillHeap·p0.9999: 649068.544 us/op
                 fillHeap·p1.00:   649068.544 us/op

Iteration  12: 641400.832 ±(99.9%) 13520.125 us/op
                 fillHeap·p0.00:   617611.264 us/op
                 fillHeap·p0.50:   642777.088 us/op
                 fillHeap·p0.90:   661127.168 us/op
                 fillHeap·p0.95:   672137.216 us/op
                 fillHeap·p0.99:   672137.216 us/op
                 fillHeap·p0.999:  672137.216 us/op
                 fillHeap·p0.9999: 672137.216 us/op
                 fillHeap·p1.00:   672137.216 us/op

Iteration  13: 637992.960 ±(99.9%) 13566.416 us/op
                 fillHeap·p0.00:   609222.656 us/op
                 fillHeap·p0.50:   639107.072 us/op
                 fillHeap·p0.90:   655045.427 us/op
                 fillHeap·p0.95:   661651.456 us/op
                 fillHeap·p0.99:   661651.456 us/op
                 fillHeap·p0.999:  661651.456 us/op
                 fillHeap·p0.9999: 661651.456 us/op
                 fillHeap·p1.00:   661651.456 us/op

Iteration  14: 645660.672 ±(99.9%) 18354.076 us/op
                 fillHeap·p0.00:   611319.808 us/op
                 fillHeap·p0.50:   642777.088 us/op
                 fillHeap·p0.90:   673710.080 us/op
                 fillHeap·p0.95:   684720.128 us/op
                 fillHeap·p0.99:   684720.128 us/op
                 fillHeap·p0.999:  684720.128 us/op
                 fillHeap·p0.9999: 684720.128 us/op
                 fillHeap·p1.00:   684720.128 us/op

Iteration  15: 638255.104 ±(99.9%) 15920.623 us/op
                 fillHeap·p0.00:   606076.928 us/op
                 fillHeap·p0.50:   637009.920 us/op
                 fillHeap·p0.90:   657142.579 us/op
                 fillHeap·p0.95:   663748.608 us/op
                 fillHeap·p0.99:   663748.608 us/op
                 fillHeap·p0.999:  663748.608 us/op
                 fillHeap·p0.9999: 663748.608 us/op
                 fillHeap·p1.00:   663748.608 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 240
  mean = 636891.955 ±(99.9%) 2833.564 us/op

  Histogram, us/op:
    [600000.000, 605000.000) = 1 
    [605000.000, 610000.000) = 5 
    [610000.000, 615000.000) = 9 
    [615000.000, 620000.000) = 9 
    [620000.000, 625000.000) = 19 
    [625000.000, 630000.000) = 24 
    [630000.000, 635000.000) = 40 
    [635000.000, 640000.000) = 34 
    [640000.000, 645000.000) = 39 
    [645000.000, 650000.000) = 21 
    [650000.000, 655000.000) = 22 
    [655000.000, 660000.000) = 10 
    [660000.000, 665000.000) = 3 
    [665000.000, 670000.000) = 2 
    [670000.000, 675000.000) = 1 
    [675000.000, 680000.000) = 0 
    [680000.000, 685000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 602931.200 us/op
     p(50.0000) = 636485.632 us/op
     p(90.0000) = 653262.848 us/op
     p(95.0000) = 657457.152 us/op
     p(99.0000) = 670847.468 us/op
     p(99.9000) = 684720.128 us/op
     p(99.9900) = 684720.128 us/op
     p(99.9990) = 684720.128 us/op
     p(99.9999) = 684720.128 us/op
    p(100.0000) = 684720.128 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 73.19% complete, ETA 02:11:48
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap(AllocationBenchmark.java:52)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_sample_jmhStub(AllocationBenchmark_fillHeap_jmhTest.java:388)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_SampleTime(AllocationBenchmark_fillHeap_jmhTest.java:324)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)




# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 73.91% complete, ETA 02:07:00
# Fork: 1 of 1
# Warmup Iteration   1: 558090.779 ±(99.9%) 41339.801 us/op
# Warmup Iteration   2: 561891.100 ±(99.9%) 42438.314 us/op
# Warmup Iteration   3: 549812.547 ±(99.9%) 40595.352 us/op
# Warmup Iteration   4: 571677.810 ±(99.9%) 44595.033 us/op
# Warmup Iteration   5: 560259.982 ±(99.9%) 42086.536 us/op
Iteration   1: 562648.405 ±(99.9%) 43584.757 us/op
                 fillHeap·p0.00:   502792.192 us/op
                 fillHeap·p0.50:   569376.768 us/op
                 fillHeap·p0.90:   637219.635 us/op
                 fillHeap·p0.95:   643825.664 us/op
                 fillHeap·p0.99:   643825.664 us/op
                 fillHeap·p0.999:  643825.664 us/op
                 fillHeap·p0.9999: 643825.664 us/op
                 fillHeap·p1.00:   643825.664 us/op

Iteration   2: 563085.312 ±(99.9%) 46164.788 us/op
                 fillHeap·p0.00:   497549.312 us/op
                 fillHeap·p0.50:   548929.536 us/op
                 fillHeap·p0.90:   625161.011 us/op
                 fillHeap·p0.95:   636485.632 us/op
                 fillHeap·p0.99:   636485.632 us/op
                 fillHeap·p0.999:  636485.632 us/op
                 fillHeap·p0.9999: 636485.632 us/op
                 fillHeap·p1.00:   636485.632 us/op

Iteration   3: 582367.460 ±(99.9%) 41237.497 us/op
                 fillHeap·p0.00:   510656.512 us/op
                 fillHeap·p0.50:   588775.424 us/op
                 fillHeap·p0.90:   632815.616 us/op
                 fillHeap·p0.95:   665845.760 us/op
                 fillHeap·p0.99:   665845.760 us/op
                 fillHeap·p0.999:  665845.760 us/op
                 fillHeap·p0.9999: 665845.760 us/op
                 fillHeap·p1.00:   665845.760 us/op

Iteration   4: 560376.491 ±(99.9%) 39927.121 us/op
                 fillHeap·p0.00:   497025.024 us/op
                 fillHeap·p0.50:   554696.704 us/op
                 fillHeap·p0.90:   611529.523 us/op
                 fillHeap·p0.95:   613416.960 us/op
                 fillHeap·p0.99:   613416.960 us/op
                 fillHeap·p0.999:  613416.960 us/op
                 fillHeap·p0.9999: 613416.960 us/op
                 fillHeap·p1.00:   613416.960 us/op

Iteration   5: 542279.357 ±(99.9%) 25001.357 us/op
                 fillHeap·p0.00:   516423.680 us/op
                 fillHeap·p0.50:   535298.048 us/op
                 fillHeap·p0.90:   579862.528 us/op
                 fillHeap·p0.95:   638582.784 us/op
                 fillHeap·p0.99:   638582.784 us/op
                 fillHeap·p0.999:  638582.784 us/op
                 fillHeap·p0.9999: 638582.784 us/op
                 fillHeap·p1.00:   638582.784 us/op

Iteration   6: 562502.770 ±(99.9%) 35558.639 us/op
                 fillHeap·p0.00:   501743.616 us/op
                 fillHeap·p0.50:   561512.448 us/op
                 fillHeap·p0.90:   612263.526 us/op
                 fillHeap·p0.95:   639631.360 us/op
                 fillHeap·p0.99:   639631.360 us/op
                 fillHeap·p0.999:  639631.360 us/op
                 fillHeap·p0.9999: 639631.360 us/op
                 fillHeap·p1.00:   639631.360 us/op

Iteration   7: 582076.188 ±(99.9%) 38874.829 us/op
                 fillHeap·p0.00:   508035.072 us/op
                 fillHeap·p0.50:   579338.240 us/op
                 fillHeap·p0.90:   658925.158 us/op
                 fillHeap·p0.95:   662700.032 us/op
                 fillHeap·p0.99:   662700.032 us/op
                 fillHeap·p0.999:  662700.032 us/op
                 fillHeap·p0.9999: 662700.032 us/op
                 fillHeap·p1.00:   662700.032 us/op

Iteration   8: 556214.380 ±(99.9%) 39156.985 us/op
                 fillHeap·p0.00:   505413.632 us/op
                 fillHeap·p0.50:   540016.640 us/op
                 fillHeap·p0.90:   629145.600 us/op
                 fillHeap·p0.95:   632291.328 us/op
                 fillHeap·p0.99:   632291.328 us/op
                 fillHeap·p0.999:  632291.328 us/op
                 fillHeap·p0.9999: 632291.328 us/op
                 fillHeap·p1.00:   632291.328 us/op

Iteration   9: 559007.516 ±(99.9%) 36949.630 us/op
                 fillHeap·p0.00:   506462.208 us/op
                 fillHeap·p0.50:   545783.808 us/op
                 fillHeap·p0.90:   616877.261 us/op
                 fillHeap·p0.95:   619708.416 us/op
                 fillHeap·p0.99:   619708.416 us/op
                 fillHeap·p0.999:  619708.416 us/op
                 fillHeap·p0.9999: 619708.416 us/op
                 fillHeap·p1.00:   619708.416 us/op

Iteration  10: 561745.465 ±(99.9%) 37278.285 us/op
                 fillHeap·p0.00:   499122.176 us/op
                 fillHeap·p0.50:   558891.008 us/op
                 fillHeap·p0.90:   626104.730 us/op
                 fillHeap·p0.95:   636485.632 us/op
                 fillHeap·p0.99:   636485.632 us/op
                 fillHeap·p0.999:  636485.632 us/op
                 fillHeap·p0.9999: 636485.632 us/op
                 fillHeap·p1.00:   636485.632 us/op

Iteration  11: 581144.121 ±(99.9%) 43208.208 us/op
                 fillHeap·p0.00:   500695.040 us/op
                 fillHeap·p0.50:   586678.272 us/op
                 fillHeap·p0.90:   643511.091 us/op
                 fillHeap·p0.95:   650117.120 us/op
                 fillHeap·p0.99:   650117.120 us/op
                 fillHeap·p0.999:  650117.120 us/op
                 fillHeap·p0.9999: 650117.120 us/op
                 fillHeap·p1.00:   650117.120 us/op

Iteration  12: 561366.812 ±(99.9%) 49161.917 us/op
                 fillHeap·p0.00:   498073.600 us/op
                 fillHeap·p0.50:   540540.928 us/op
                 fillHeap·p0.90:   639841.075 us/op
                 fillHeap·p0.95:   660602.880 us/op
                 fillHeap·p0.99:   660602.880 us/op
                 fillHeap·p0.999:  660602.880 us/op
                 fillHeap·p0.9999: 660602.880 us/op
                 fillHeap·p1.00:   660602.880 us/op

Iteration  13: 575668.224 ±(99.9%) 41472.948 us/op
                 fillHeap·p0.00:   507510.784 us/op
                 fillHeap·p0.50:   558891.008 us/op
                 fillHeap·p0.90:   639526.502 us/op
                 fillHeap·p0.95:   648019.968 us/op
                 fillHeap·p0.99:   648019.968 us/op
                 fillHeap·p0.999:  648019.968 us/op
                 fillHeap·p0.9999: 648019.968 us/op
                 fillHeap·p1.00:   648019.968 us/op

Iteration  14: 572435.115 ±(99.9%) 41542.105 us/op
                 fillHeap·p0.00:   507510.784 us/op
                 fillHeap·p0.50:   565182.464 us/op
                 fillHeap·p0.90:   640889.651 us/op
                 fillHeap·p0.95:   661651.456 us/op
                 fillHeap·p0.99:   661651.456 us/op
                 fillHeap·p0.999:  661651.456 us/op
                 fillHeap·p0.9999: 661651.456 us/op
                 fillHeap·p1.00:   661651.456 us/op

Iteration  15: 579600.384 ±(99.9%) 40027.452 us/op
                 fillHeap·p0.00:   518520.832 us/op
                 fillHeap·p0.50:   583008.256 us/op
                 fillHeap·p0.90:   650641.408 us/op
                 fillHeap·p0.95:   655360.000 us/op
                 fillHeap·p0.99:   655360.000 us/op
                 fillHeap·p0.999:  655360.000 us/op
                 fillHeap·p0.9999: 655360.000 us/op
                 fillHeap·p1.00:   655360.000 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 272
  mean = 566705.212 ±(99.9%) 8787.557 us/op

  Histogram, us/op:
    [400000.000, 425000.000) = 0 
    [425000.000, 450000.000) = 0 
    [450000.000, 475000.000) = 0 
    [475000.000, 500000.000) = 4 
    [500000.000, 525000.000) = 54 
    [525000.000, 550000.000) = 62 
    [550000.000, 575000.000) = 39 
    [575000.000, 600000.000) = 40 
    [600000.000, 625000.000) = 45 
    [625000.000, 650000.000) = 20 
    [650000.000, 675000.000) = 8 

  Percentiles, us/op:
      p(0.0000) = 497025.024 us/op
     p(50.0000) = 563085.312 us/op
     p(90.0000) = 627782.451 us/op
     p(95.0000) = 638582.784 us/op
     p(99.0000) = 661934.572 us/op
     p(99.9000) = 665845.760 us/op
     p(99.9900) = 665845.760 us/op
     p(99.9990) = 665845.760 us/op
     p(99.9999) = 665845.760 us/op
    p(100.0000) = 665845.760 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 74.64% complete, ETA 02:03:31
# Fork: 1 of 1
# Warmup Iteration   1: 451320.787 ±(99.9%) 26488.536 us/op
# Warmup Iteration   2: 435227.425 ±(99.9%) 13791.612 us/op
# Warmup Iteration   3: 451662.714 ±(99.9%) 24249.972 us/op
# Warmup Iteration   4: 460324.864 ±(99.9%) 22413.484 us/op
# Warmup Iteration   5: 455177.309 ±(99.9%) 24813.018 us/op
Iteration   1: 456392.704 ±(99.9%) 26341.347 us/op
                 fillHeap·p0.00:   424673.280 us/op
                 fillHeap·p0.50:   446169.088 us/op
                 fillHeap·p0.90:   517157.683 us/op
                 fillHeap·p0.95:   522400.563 us/op
                 fillHeap·p0.99:   522715.136 us/op
                 fillHeap·p0.999:  522715.136 us/op
                 fillHeap·p0.9999: 522715.136 us/op
                 fillHeap·p1.00:   522715.136 us/op

Iteration   2: 440014.403 ±(99.9%) 9717.689 us/op
                 fillHeap·p0.00:   422051.840 us/op
                 fillHeap·p0.50:   437256.192 us/op
                 fillHeap·p0.90:   459171.430 us/op
                 fillHeap·p0.95:   465672.602 us/op
                 fillHeap·p0.99:   466616.320 us/op
                 fillHeap·p0.999:  466616.320 us/op
                 fillHeap·p0.9999: 466616.320 us/op
                 fillHeap·p1.00:   466616.320 us/op

Iteration   3: 450181.031 ±(99.9%) 18635.007 us/op
                 fillHeap·p0.00:   423624.704 us/op
                 fillHeap·p0.50:   440926.208 us/op
                 fillHeap·p0.90:   489580.134 us/op
                 fillHeap·p0.95:   492096.717 us/op
                 fillHeap·p0.99:   492306.432 us/op
                 fillHeap·p0.999:  492306.432 us/op
                 fillHeap·p0.9999: 492306.432 us/op
                 fillHeap·p1.00:   492306.432 us/op

Iteration   4: 448083.879 ±(99.9%) 18732.010 us/op
                 fillHeap·p0.00:   423100.416 us/op
                 fillHeap·p0.50:   435683.328 us/op
                 fillHeap·p0.90:   481296.384 us/op
                 fillHeap·p0.95:   503945.626 us/op
                 fillHeap·p0.99:   509083.648 us/op
                 fillHeap·p0.999:  509083.648 us/op
                 fillHeap·p0.9999: 509083.648 us/op
                 fillHeap·p1.00:   509083.648 us/op

Iteration   5: 447855.928 ±(99.9%) 16810.309 us/op
                 fillHeap·p0.00:   423100.416 us/op
                 fillHeap·p0.50:   440926.208 us/op
                 fillHeap·p0.90:   479304.090 us/op
                 fillHeap·p0.95:   493564.723 us/op
                 fillHeap·p0.99:   497025.024 us/op
                 fillHeap·p0.999:  497025.024 us/op
                 fillHeap·p0.9999: 497025.024 us/op
                 fillHeap·p1.00:   497025.024 us/op

Iteration   6: 439330.549 ±(99.9%) 14648.698 us/op
                 fillHeap·p0.00:   422576.128 us/op
                 fillHeap·p0.50:   430964.736 us/op
                 fillHeap·p0.90:   476682.650 us/op
                 fillHeap·p0.95:   483393.536 us/op
                 fillHeap·p0.99:   484442.112 us/op
                 fillHeap·p0.999:  484442.112 us/op
                 fillHeap·p0.9999: 484442.112 us/op
                 fillHeap·p1.00:   484442.112 us/op

Iteration   7: 453189.988 ±(99.9%) 22995.951 us/op
                 fillHeap·p0.00:   420478.976 us/op
                 fillHeap·p0.50:   443023.360 us/op
                 fillHeap·p0.90:   501009.613 us/op
                 fillHeap·p0.95:   513382.810 us/op
                 fillHeap·p0.99:   515899.392 us/op
                 fillHeap·p0.999:  515899.392 us/op
                 fillHeap·p0.9999: 515899.392 us/op
                 fillHeap·p1.00:   515899.392 us/op

Iteration   8: 449611.153 ±(99.9%) 18876.670 us/op
                 fillHeap·p0.00:   424673.280 us/op
                 fillHeap·p0.50:   438829.056 us/op
                 fillHeap·p0.90:   497234.739 us/op
                 fillHeap·p0.95:   506462.208 us/op
                 fillHeap·p0.99:   506462.208 us/op
                 fillHeap·p0.999:  506462.208 us/op
                 fillHeap·p0.9999: 506462.208 us/op
                 fillHeap·p1.00:   506462.208 us/op

Iteration   9: 441997.579 ±(99.9%) 16822.165 us/op
                 fillHeap·p0.00:   424148.992 us/op
                 fillHeap·p0.50:   434634.752 us/op
                 fillHeap·p0.90:   475843.789 us/op
                 fillHeap·p0.95:   509188.506 us/op
                 fillHeap·p0.99:   516947.968 us/op
                 fillHeap·p0.999:  516947.968 us/op
                 fillHeap·p0.9999: 516947.968 us/op
                 fillHeap·p1.00:   516947.968 us/op

Iteration  10: 462159.872 ±(99.9%) 23585.066 us/op
                 fillHeap·p0.00:   424148.992 us/op
                 fillHeap·p0.50:   458227.712 us/op
                 fillHeap·p0.90:   505308.774 us/op
                 fillHeap·p0.95:   517524.685 us/op
                 fillHeap·p0.99:   519569.408 us/op
                 fillHeap·p0.999:  519569.408 us/op
                 fillHeap·p0.9999: 519569.408 us/op
                 fillHeap·p1.00:   519569.408 us/op

Iteration  11: 454603.286 ±(99.9%) 19284.483 us/op
                 fillHeap·p0.00:   419954.688 us/op
                 fillHeap·p0.50:   448266.240 us/op
                 fillHeap·p0.90:   492621.005 us/op
                 fillHeap·p0.95:   501848.474 us/op
                 fillHeap·p0.99:   503316.480 us/op
                 fillHeap·p0.999:  503316.480 us/op
                 fillHeap·p0.9999: 503316.480 us/op
                 fillHeap·p1.00:   503316.480 us/op

Iteration  12: 454306.950 ±(99.9%) 23051.301 us/op
                 fillHeap·p0.00:   423100.416 us/op
                 fillHeap·p0.50:   439353.344 us/op
                 fillHeap·p0.90:   506252.493 us/op
                 fillHeap·p0.95:   511495.373 us/op
                 fillHeap·p0.99:   512753.664 us/op
                 fillHeap·p0.999:  512753.664 us/op
                 fillHeap·p0.9999: 512753.664 us/op
                 fillHeap·p1.00:   512753.664 us/op

Iteration  13: 442521.867 ±(99.9%) 15285.463 us/op
                 fillHeap·p0.00:   423100.416 us/op
                 fillHeap·p0.50:   433586.176 us/op
                 fillHeap·p0.90:   473012.634 us/op
                 fillHeap·p0.95:   490628.710 us/op
                 fillHeap·p0.99:   494927.872 us/op
                 fillHeap·p0.999:  494927.872 us/op
                 fillHeap·p0.9999: 494927.872 us/op
                 fillHeap·p1.00:   494927.872 us/op

Iteration  14: 447308.845 ±(99.9%) 18047.686 us/op
                 fillHeap·p0.00:   423624.704 us/op
                 fillHeap·p0.50:   435159.040 us/op
                 fillHeap·p0.90:   490104.422 us/op
                 fillHeap·p0.95:   498702.746 us/op
                 fillHeap·p0.99:   499122.176 us/op
                 fillHeap·p0.999:  499122.176 us/op
                 fillHeap·p0.9999: 499122.176 us/op
                 fillHeap·p1.00:   499122.176 us/op

Iteration  15: 456869.329 ±(99.9%) 26617.290 us/op
                 fillHeap·p0.00:   423100.416 us/op
                 fillHeap·p0.50:   449576.960 us/op
                 fillHeap·p0.90:   505833.062 us/op
                 fillHeap·p0.95:   517839.258 us/op
                 fillHeap·p0.99:   519569.408 us/op
                 fillHeap·p0.999:  519569.408 us/op
                 fillHeap·p0.9999: 519569.408 us/op
                 fillHeap·p1.00:   519569.408 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 342
  mean = 449550.899 ±(99.9%) 4499.362 us/op

  Histogram, us/op:
    [400000.000, 412500.000) = 0 
    [412500.000, 425000.000) = 28 
    [425000.000, 437500.000) = 132 
    [437500.000, 450000.000) = 58 
    [450000.000, 462500.000) = 38 
    [462500.000, 475000.000) = 21 
    [475000.000, 487500.000) = 28 
    [487500.000, 500000.000) = 15 
    [500000.000, 512500.000) = 15 
    [512500.000, 525000.000) = 7 
    [525000.000, 537500.000) = 0 
    [537500.000, 550000.000) = 0 
    [550000.000, 562500.000) = 0 
    [562500.000, 575000.000) = 0 
    [575000.000, 587500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 419954.688 us/op
     p(50.0000) = 438829.056 us/op
     p(90.0000) = 491624.858 us/op
     p(95.0000) = 503316.480 us/op
     p(99.0000) = 519569.408 us/op
     p(99.9000) = 522715.136 us/op
     p(99.9900) = 522715.136 us/op
     p(99.9990) = 522715.136 us/op
     p(99.9999) = 522715.136 us/op
    p(100.0000) = 522715.136 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 75.36% complete, ETA 02:00:01
# Fork: 1 of 1
# Warmup Iteration   1: 376.985 ±(99.9%) 0.764 us/op
# Warmup Iteration   2: 376.141 ±(99.9%) 0.416 us/op
# Warmup Iteration   3: 375.721 ±(99.9%) 0.192 us/op
# Warmup Iteration   4: 375.761 ±(99.9%) 0.203 us/op
# Warmup Iteration   5: 375.514 ±(99.9%) 0.192 us/op
Iteration   1: 375.679 ±(99.9%) 0.394 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   384.000 us/op
                 read·p0.95:   388.608 us/op
                 read·p0.99:   406.016 us/op
                 read·p0.999:  490.738 us/op
                 read·p0.9999: 629.808 us/op
                 read·p1.00:   3137.536 us/op

Iteration   2: 375.594 ±(99.9%) 0.187 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   383.488 us/op
                 read·p0.95:   387.072 us/op
                 read·p0.99:   408.576 us/op
                 read·p0.999:  472.799 us/op
                 read·p0.9999: 576.646 us/op
                 read·p1.00:   596.992 us/op

Iteration   3: 375.709 ±(99.9%) 0.243 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   384.000 us/op
                 read·p0.95:   388.096 us/op
                 read·p0.99:   406.528 us/op
                 read·p0.999:  470.528 us/op
                 read·p0.9999: 884.709 us/op
                 read·p1.00:   930.816 us/op

Iteration   4: 375.581 ±(99.9%) 0.187 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   384.000 us/op
                 read·p0.95:   388.096 us/op
                 read·p0.99:   409.088 us/op
                 read·p0.999:  465.615 us/op
                 read·p0.9999: 542.089 us/op
                 read·p1.00:   618.496 us/op

Iteration   5: 375.557 ±(99.9%) 0.180 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   383.488 us/op
                 read·p0.95:   387.072 us/op
                 read·p0.99:   407.040 us/op
                 read·p0.999:  460.189 us/op
                 read·p0.9999: 547.207 us/op
                 read·p1.00:   551.936 us/op

Iteration   6: 375.571 ±(99.9%) 0.177 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   384.000 us/op
                 read·p0.95:   387.584 us/op
                 read·p0.99:   404.992 us/op
                 read·p0.999:  458.959 us/op
                 read·p0.9999: 542.763 us/op
                 read·p1.00:   599.040 us/op

Iteration   7: 375.722 ±(99.9%) 0.183 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   384.000 us/op
                 read·p0.95:   387.584 us/op
                 read·p0.99:   406.016 us/op
                 read·p0.999:  470.476 us/op
                 read·p0.9999: 538.073 us/op
                 read·p1.00:   550.912 us/op

Iteration   8: 375.715 ±(99.9%) 0.185 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   384.000 us/op
                 read·p0.95:   387.584 us/op
                 read·p0.99:   407.552 us/op
                 read·p0.999:  465.620 us/op
                 read·p0.9999: 557.755 us/op
                 read·p1.00:   614.400 us/op

Iteration   9: 375.438 ±(99.9%) 0.189 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   383.488 us/op
                 read·p0.95:   387.072 us/op
                 read·p0.99:   403.968 us/op
                 read·p0.999:  456.906 us/op
                 read·p0.9999: 671.813 us/op
                 read·p1.00:   771.072 us/op

Iteration  10: 375.820 ±(99.9%) 0.224 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   384.000 us/op
                 read·p0.95:   387.584 us/op
                 read·p0.99:   409.088 us/op
                 read·p0.999:  473.304 us/op
                 read·p0.9999: 856.071 us/op
                 read·p1.00:   924.672 us/op

Iteration  11: 376.040 ±(99.9%) 0.214 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   385.024 us/op
                 read·p0.95:   389.120 us/op
                 read·p0.99:   411.648 us/op
                 read·p0.999:  499.423 us/op
                 read·p0.9999: 651.327 us/op
                 read·p1.00:   655.360 us/op

Iteration  12: 376.088 ±(99.9%) 0.402 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   385.024 us/op
                 read·p0.95:   389.632 us/op
                 read·p0.99:   415.232 us/op
                 read·p0.999:  483.268 us/op
                 read·p0.9999: 611.460 us/op
                 read·p1.00:   3153.920 us/op

Iteration  13: 376.196 ±(99.9%) 0.215 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   385.024 us/op
                 read·p0.95:   389.632 us/op
                 read·p0.99:   411.136 us/op
                 read·p0.999:  484.069 us/op
                 read·p0.9999: 659.456 us/op
                 read·p1.00:   672.768 us/op

Iteration  14: 376.175 ±(99.9%) 0.218 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   385.536 us/op
                 read·p0.95:   389.632 us/op
                 read·p0.99:   414.720 us/op
                 read·p0.999:  484.015 us/op
                 read·p0.9999: 640.140 us/op
                 read·p1.00:   675.840 us/op

Iteration  15: 375.828 ±(99.9%) 0.210 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   384.512 us/op
                 read·p0.95:   388.608 us/op
                 read·p0.99:   411.648 us/op
                 read·p0.999:  496.264 us/op
                 read·p0.9999: 599.554 us/op
                 read·p1.00:   625.664 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  N = 398703
  mean =    375.781 ±(99.9%) 0.061 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 0 
    [ 250.000,  500.000) = 398464 
    [ 500.000,  750.000) = 222 
    [ 750.000, 1000.000) = 15 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 
    [2750.000, 3000.000) = 0 
    [3000.000, 3250.000) = 2 
    [3250.000, 3500.000) = 0 
    [3500.000, 3750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    370.176 us/op
     p(50.0000) =    374.784 us/op
     p(90.0000) =    384.000 us/op
     p(95.0000) =    388.096 us/op
     p(99.0000) =    409.088 us/op
     p(99.9000) =    472.216 us/op
     p(99.9900) =    606.341 us/op
     p(99.9990) =    924.752 us/op
     p(99.9999) =   3153.920 us/op
    p(100.0000) =   3153.920 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 76.08% complete, ETA 01:56:30
# Fork: 1 of 1
# Warmup Iteration   1: 166.369 ±(99.9%) 0.422 us/op
# Warmup Iteration   2: 165.843 ±(99.9%) 0.111 us/op
# Warmup Iteration   3: 166.040 ±(99.9%) 0.125 us/op
# Warmup Iteration   4: 164.872 ±(99.9%) 0.103 us/op
# Warmup Iteration   5: 165.400 ±(99.9%) 0.113 us/op
Iteration   1: 165.332 ±(99.9%) 0.105 us/op
                 readAndWrite·p0.00:   158.720 us/op
                 readAndWrite·p0.50:   162.816 us/op
                 readAndWrite·p0.90:   170.496 us/op
                 readAndWrite·p0.95:   176.128 us/op
                 readAndWrite·p0.99:   190.976 us/op
                 readAndWrite·p0.999:  255.904 us/op
                 readAndWrite·p0.9999: 350.035 us/op
                 readAndWrite·p1.00:   379.904 us/op

Iteration   2: 165.959 ±(99.9%) 0.116 us/op
                 readAndWrite·p0.00:   158.720 us/op
                 readAndWrite·p0.50:   163.328 us/op
                 readAndWrite·p0.90:   171.776 us/op
                 readAndWrite·p0.95:   177.152 us/op
                 readAndWrite·p0.99:   194.304 us/op
                 readAndWrite·p0.999:  266.677 us/op
                 readAndWrite·p0.9999: 372.570 us/op
                 readAndWrite·p1.00:   402.432 us/op

Iteration   3: 165.959 ±(99.9%) 0.110 us/op
                 readAndWrite·p0.00:   158.976 us/op
                 readAndWrite·p0.50:   163.584 us/op
                 readAndWrite·p0.90:   171.264 us/op
                 readAndWrite·p0.95:   176.896 us/op
                 readAndWrite·p0.99:   190.976 us/op
                 readAndWrite·p0.999:  257.754 us/op
                 readAndWrite·p0.9999: 349.688 us/op
                 readAndWrite·p1.00:   667.648 us/op

Iteration   4: 165.365 ±(99.9%) 0.103 us/op
                 readAndWrite·p0.00:   158.720 us/op
                 readAndWrite·p0.50:   163.328 us/op
                 readAndWrite·p0.90:   170.240 us/op
                 readAndWrite·p0.95:   175.616 us/op
                 readAndWrite·p0.99:   188.672 us/op
                 readAndWrite·p0.999:  259.490 us/op
                 readAndWrite·p0.9999: 377.706 us/op
                 readAndWrite·p1.00:   467.968 us/op

Iteration   5: 165.133 ±(99.9%) 0.099 us/op
                 readAndWrite·p0.00:   158.464 us/op
                 readAndWrite·p0.50:   163.328 us/op
                 readAndWrite·p0.90:   170.240 us/op
                 readAndWrite·p0.95:   175.360 us/op
                 readAndWrite·p0.99:   187.904 us/op
                 readAndWrite·p0.999:  255.373 us/op
                 readAndWrite·p0.9999: 363.733 us/op
                 readAndWrite·p1.00:   422.400 us/op

Iteration   6: 167.110 ±(99.9%) 0.107 us/op
                 readAndWrite·p0.00:   158.464 us/op
                 readAndWrite·p0.50:   166.144 us/op
                 readAndWrite·p0.90:   173.056 us/op
                 readAndWrite·p0.95:   177.664 us/op
                 readAndWrite·p0.99:   191.744 us/op
                 readAndWrite·p0.999:  265.863 us/op
                 readAndWrite·p0.9999: 312.442 us/op
                 readAndWrite·p1.00:   401.408 us/op

Iteration   7: 165.739 ±(99.9%) 0.096 us/op
                 readAndWrite·p0.00:   158.720 us/op
                 readAndWrite·p0.50:   163.584 us/op
                 readAndWrite·p0.90:   171.520 us/op
                 readAndWrite·p0.95:   175.360 us/op
                 readAndWrite·p0.99:   186.624 us/op
                 readAndWrite·p0.999:  255.744 us/op
                 readAndWrite·p0.9999: 301.414 us/op
                 readAndWrite·p1.00:   416.768 us/op

Iteration   8: 165.761 ±(99.9%) 0.163 us/op
                 readAndWrite·p0.00:   158.464 us/op
                 readAndWrite·p0.50:   163.328 us/op
                 readAndWrite·p0.90:   171.520 us/op
                 readAndWrite·p0.95:   175.104 us/op
                 readAndWrite·p0.99:   187.136 us/op
                 readAndWrite·p0.999:  264.360 us/op
                 readAndWrite·p0.9999: 383.656 us/op
                 readAndWrite·p1.00:   2371.584 us/op

Iteration   9: 165.863 ±(99.9%) 0.222 us/op
                 readAndWrite·p0.00:   157.696 us/op
                 readAndWrite·p0.50:   163.584 us/op
                 readAndWrite·p0.90:   171.264 us/op
                 readAndWrite·p0.95:   175.872 us/op
                 readAndWrite·p0.99:   189.952 us/op
                 readAndWrite·p0.999:  268.324 us/op
                 readAndWrite·p0.9999: 535.867 us/op
                 readAndWrite·p1.00:   3575.808 us/op

Iteration  10: 166.000 ±(99.9%) 0.112 us/op
                 readAndWrite·p0.00:   158.208 us/op
                 readAndWrite·p0.50:   164.352 us/op
                 readAndWrite·p0.90:   171.264 us/op
                 readAndWrite·p0.95:   175.872 us/op
                 readAndWrite·p0.99:   189.440 us/op
                 readAndWrite·p0.999:  262.144 us/op
                 readAndWrite·p0.9999: 368.051 us/op
                 readAndWrite·p1.00:   653.312 us/op

Iteration  11: 166.436 ±(99.9%) 0.102 us/op
                 readAndWrite·p0.00:   158.720 us/op
                 readAndWrite·p0.50:   165.632 us/op
                 readAndWrite·p0.90:   172.032 us/op
                 readAndWrite·p0.95:   175.616 us/op
                 readAndWrite·p0.99:   186.880 us/op
                 readAndWrite·p0.999:  253.184 us/op
                 readAndWrite·p0.9999: 374.281 us/op
                 readAndWrite·p1.00:   557.056 us/op

Iteration  12: 165.756 ±(99.9%) 0.181 us/op
                 readAndWrite·p0.00:   158.208 us/op
                 readAndWrite·p0.50:   164.608 us/op
                 readAndWrite·p0.90:   171.776 us/op
                 readAndWrite·p0.95:   175.104 us/op
                 readAndWrite·p0.99:   186.624 us/op
                 readAndWrite·p0.999:  263.680 us/op
                 readAndWrite·p0.9999: 433.389 us/op
                 readAndWrite·p1.00:   2695.168 us/op

Iteration  13: 165.438 ±(99.9%) 0.114 us/op
                 readAndWrite·p0.00:   158.720 us/op
                 readAndWrite·p0.50:   163.584 us/op
                 readAndWrite·p0.90:   170.752 us/op
                 readAndWrite·p0.95:   175.104 us/op
                 readAndWrite·p0.99:   190.464 us/op
                 readAndWrite·p0.999:  288.593 us/op
                 readAndWrite·p0.9999: 359.848 us/op
                 readAndWrite·p1.00:   456.192 us/op

Iteration  14: 166.646 ±(99.9%) 0.104 us/op
                 readAndWrite·p0.00:   157.952 us/op
                 readAndWrite·p0.50:   165.632 us/op
                 readAndWrite·p0.90:   172.288 us/op
                 readAndWrite·p0.95:   175.872 us/op
                 readAndWrite·p0.99:   188.416 us/op
                 readAndWrite·p0.999:  249.344 us/op
                 readAndWrite·p0.9999: 364.675 us/op
                 readAndWrite·p1.00:   580.608 us/op

Iteration  15: 165.466 ±(99.9%) 0.104 us/op
                 readAndWrite·p0.00:   158.720 us/op
                 readAndWrite·p0.50:   163.584 us/op
                 readAndWrite·p0.90:   170.752 us/op
                 readAndWrite·p0.95:   175.104 us/op
                 readAndWrite·p0.99:   188.416 us/op
                 readAndWrite·p0.999:  258.480 us/op
                 readAndWrite·p0.9999: 378.645 us/op
                 readAndWrite·p1.00:   528.384 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  N = 902765
  mean =    165.863 ±(99.9%) 0.033 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 901384 
    [ 250.000,  500.000) = 1357 
    [ 500.000,  750.000) = 21 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 1 
    [2500.000, 2750.000) = 1 
    [2750.000, 3000.000) = 0 
    [3000.000, 3250.000) = 0 
    [3250.000, 3500.000) = 0 
    [3500.000, 3750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    157.696 us/op
     p(50.0000) =    163.840 us/op
     p(90.0000) =    171.520 us/op
     p(95.0000) =    175.872 us/op
     p(99.0000) =    189.184 us/op
     p(99.9000) =    260.096 us/op
     p(99.9900) =    364.402 us/op
     p(99.9990) =    623.248 us/op
     p(99.9999) =   3575.808 us/op
    p(100.0000) =   3575.808 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 76.81% complete, ETA 01:52:59
# Fork: 1 of 1
# Warmup Iteration   1: 316.557 ±(99.9%) 0.796 us/op
# Warmup Iteration   2: 302.429 ±(99.9%) 0.632 us/op
# Warmup Iteration   3: 307.927 ±(99.9%) 0.110 us/op
# Warmup Iteration   4: 307.982 ±(99.9%) 0.109 us/op
# Warmup Iteration   5: 307.931 ±(99.9%) 0.115 us/op
Iteration   1: 307.780 ±(99.9%) 0.097 us/op
                 swap·p0.00:   302.080 us/op
                 swap·p0.50:   306.176 us/op
                 swap·p0.90:   312.320 us/op
                 swap·p0.95:   314.368 us/op
                 swap·p0.99:   330.752 us/op
                 swap·p0.999:  356.864 us/op
                 swap·p0.9999: 401.055 us/op
                 swap·p1.00:   437.248 us/op

Iteration   2: 308.074 ±(99.9%) 0.142 us/op
                 swap·p0.00:   301.568 us/op
                 swap·p0.50:   306.176 us/op
                 swap·p0.90:   312.832 us/op
                 swap·p0.95:   315.392 us/op
                 swap·p0.99:   333.312 us/op
                 swap·p0.999:  366.666 us/op
                 swap·p0.9999: 728.232 us/op
                 swap·p1.00:   847.872 us/op

Iteration   3: 307.752 ±(99.9%) 0.106 us/op
                 swap·p0.00:   301.056 us/op
                 swap·p0.50:   306.176 us/op
                 swap·p0.90:   312.320 us/op
                 swap·p0.95:   314.368 us/op
                 swap·p0.99:   330.240 us/op
                 swap·p0.999:  355.367 us/op
                 swap·p0.9999: 446.006 us/op
                 swap·p1.00:   741.376 us/op

Iteration   4: 307.706 ±(99.9%) 0.096 us/op
                 swap·p0.00:   301.568 us/op
                 swap·p0.50:   306.176 us/op
                 swap·p0.90:   312.320 us/op
                 swap·p0.95:   314.368 us/op
                 swap·p0.99:   329.728 us/op
                 swap·p0.999:  357.888 us/op
                 swap·p0.9999: 405.890 us/op
                 swap·p1.00:   432.128 us/op

Iteration   5: 307.802 ±(99.9%) 0.099 us/op
                 swap·p0.00:   301.568 us/op
                 swap·p0.50:   306.176 us/op
                 swap·p0.90:   312.320 us/op
                 swap·p0.95:   314.368 us/op
                 swap·p0.99:   331.776 us/op
                 swap·p0.999:  361.048 us/op
                 swap·p0.9999: 413.480 us/op
                 swap·p1.00:   424.448 us/op

Iteration   6: 307.721 ±(99.9%) 0.096 us/op
                 swap·p0.00:   302.592 us/op
                 swap·p0.50:   306.176 us/op
                 swap·p0.90:   312.320 us/op
                 swap·p0.95:   314.368 us/op
                 swap·p0.99:   328.192 us/op
                 swap·p0.999:  358.400 us/op
                 swap·p0.9999: 438.272 us/op
                 swap·p1.00:   444.416 us/op

Iteration   7: 307.663 ±(99.9%) 0.096 us/op
                 swap·p0.00:   302.080 us/op
                 swap·p0.50:   306.176 us/op
                 swap·p0.90:   312.320 us/op
                 swap·p0.95:   314.368 us/op
                 swap·p0.99:   329.728 us/op
                 swap·p0.999:  357.917 us/op
                 swap·p0.9999: 411.792 us/op
                 swap·p1.00:   454.656 us/op

Iteration   8: 307.794 ±(99.9%) 0.102 us/op
                 swap·p0.00:   302.080 us/op
                 swap·p0.50:   306.176 us/op
                 swap·p0.90:   312.320 us/op
                 swap·p0.95:   314.880 us/op
                 swap·p0.99:   331.264 us/op
                 swap·p0.999:  359.190 us/op
                 swap·p0.9999: 447.245 us/op
                 swap·p1.00:   543.744 us/op

Iteration   9: 307.944 ±(99.9%) 0.176 us/op
                 swap·p0.00:   300.032 us/op
                 swap·p0.50:   306.176 us/op
                 swap·p0.90:   312.320 us/op
                 swap·p0.95:   314.368 us/op
                 swap·p0.99:   331.264 us/op
                 swap·p0.999:  401.241 us/op
                 swap·p0.9999: 712.501 us/op
                 swap·p1.00:   785.408 us/op

Iteration  10: 307.934 ±(99.9%) 0.147 us/op
                 swap·p0.00:   300.032 us/op
                 swap·p0.50:   306.176 us/op
                 swap·p0.90:   312.320 us/op
                 swap·p0.95:   314.368 us/op
                 swap·p0.99:   330.752 us/op
                 swap·p0.999:  389.865 us/op
                 swap·p0.9999: 656.431 us/op
                 swap·p1.00:   738.304 us/op

Iteration  11: 308.023 ±(99.9%) 0.122 us/op
                 swap·p0.00:   302.080 us/op
                 swap·p0.50:   306.176 us/op
                 swap·p0.90:   312.832 us/op
                 swap·p0.95:   314.880 us/op
                 swap·p0.99:   332.800 us/op
                 swap·p0.999:  380.706 us/op
                 swap·p0.9999: 507.042 us/op
                 swap·p1.00:   551.936 us/op

Iteration  12: 307.970 ±(99.9%) 0.119 us/op
                 swap·p0.00:   302.080 us/op
                 swap·p0.50:   306.688 us/op
                 swap·p0.90:   312.832 us/op
                 swap·p0.95:   314.880 us/op
                 swap·p0.99:   330.752 us/op
                 swap·p0.999:  372.285 us/op
                 swap·p0.9999: 520.854 us/op
                 swap·p1.00:   550.912 us/op

Iteration  13: 307.766 ±(99.9%) 0.116 us/op
                 swap·p0.00:   302.592 us/op
                 swap·p0.50:   306.176 us/op
                 swap·p0.90:   312.320 us/op
                 swap·p0.95:   314.368 us/op
                 swap·p0.99:   329.216 us/op
                 swap·p0.999:  367.104 us/op
                 swap·p0.9999: 486.700 us/op
                 swap·p1.00:   611.328 us/op

Iteration  14: 308.205 ±(99.9%) 0.148 us/op
                 swap·p0.00:   298.496 us/op
                 swap·p0.50:   306.176 us/op
                 swap·p0.90:   312.832 us/op
                 swap·p0.95:   315.392 us/op
                 swap·p0.99:   336.384 us/op
                 swap·p0.999:  428.032 us/op
                 swap·p0.9999: 507.268 us/op
                 swap·p1.00:   518.656 us/op

Iteration  15: 308.199 ±(99.9%) 0.130 us/op
                 swap·p0.00:   301.568 us/op
                 swap·p0.50:   306.688 us/op
                 swap·p0.90:   312.320 us/op
                 swap·p0.95:   314.880 us/op
                 swap·p0.99:   336.384 us/op
                 swap·p0.999:  418.902 us/op
                 swap·p0.9999: 444.045 us/op
                 swap·p1.00:   451.072 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  N = 486706
  mean =    307.889 ±(99.9%) 0.031 us/op

  Histogram, us/op:
    [200.000, 250.000) = 0 
    [250.000, 300.000) = 2 
    [300.000, 350.000) = 485520 
    [350.000, 400.000) = 908 
    [400.000, 450.000) = 183 
    [450.000, 500.000) = 49 
    [500.000, 550.000) = 15 
    [550.000, 600.000) = 4 
    [600.000, 650.000) = 8 
    [650.000, 700.000) = 7 
    [700.000, 750.000) = 6 
    [750.000, 800.000) = 3 
    [800.000, 850.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    298.496 us/op
     p(50.0000) =    306.176 us/op
     p(90.0000) =    312.320 us/op
     p(95.0000) =    314.880 us/op
     p(99.0000) =    331.776 us/op
     p(99.9000) =    370.326 us/op
     p(99.9900) =    491.339 us/op
     p(99.9990) =    746.490 us/op
     p(99.9999) =    847.872 us/op
    p(100.0000) =    847.872 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 77.53% complete, ETA 01:49:28
# Fork: 1 of 1
# Warmup Iteration   1: 172.373 ±(99.9%) 0.345 us/op
# Warmup Iteration   2: 172.448 ±(99.9%) 0.107 us/op
# Warmup Iteration   3: 173.937 ±(99.9%) 0.123 us/op
# Warmup Iteration   4: 172.155 ±(99.9%) 0.121 us/op
# Warmup Iteration   5: 171.681 ±(99.9%) 0.109 us/op
Iteration   1: 171.495 ±(99.9%) 0.106 us/op
                 write·p0.00:   162.048 us/op
                 write·p0.50:   170.240 us/op
                 write·p0.90:   178.176 us/op
                 write·p0.95:   181.760 us/op
                 write·p0.99:   191.744 us/op
                 write·p0.999:  254.154 us/op
                 write·p0.9999: 380.453 us/op
                 write·p1.00:   415.744 us/op

Iteration   2: 171.597 ±(99.9%) 0.118 us/op
                 write·p0.00:   162.048 us/op
                 write·p0.50:   169.984 us/op
                 write·p0.90:   178.688 us/op
                 write·p0.95:   182.016 us/op
                 write·p0.99:   193.792 us/op
                 write·p0.999:  259.539 us/op
                 write·p0.9999: 376.987 us/op
                 write·p1.00:   697.344 us/op

Iteration   3: 171.762 ±(99.9%) 0.124 us/op
                 write·p0.00:   163.072 us/op
                 write·p0.50:   169.728 us/op
                 write·p0.90:   177.920 us/op
                 write·p0.95:   181.504 us/op
                 write·p0.99:   192.256 us/op
                 write·p0.999:  257.536 us/op
                 write·p0.9999: 606.593 us/op
                 write·p1.00:   637.952 us/op

Iteration   4: 171.667 ±(99.9%) 0.103 us/op
                 write·p0.00:   162.816 us/op
                 write·p0.50:   169.728 us/op
                 write·p0.90:   177.920 us/op
                 write·p0.95:   181.760 us/op
                 write·p0.99:   192.256 us/op
                 write·p0.999:  260.096 us/op
                 write·p0.9999: 353.808 us/op
                 write·p1.00:   452.608 us/op

Iteration   5: 172.540 ±(99.9%) 0.106 us/op
                 write·p0.00:   163.072 us/op
                 write·p0.50:   172.032 us/op
                 write·p0.90:   179.712 us/op
                 write·p0.95:   183.040 us/op
                 write·p0.99:   194.560 us/op
                 write·p0.999:  260.680 us/op
                 write·p0.9999: 323.437 us/op
                 write·p1.00:   349.184 us/op

Iteration   6: 171.267 ±(99.9%) 0.103 us/op
                 write·p0.00:   162.048 us/op
                 write·p0.50:   169.216 us/op
                 write·p0.90:   178.688 us/op
                 write·p0.95:   182.016 us/op
                 write·p0.99:   192.512 us/op
                 write·p0.999:  253.696 us/op
                 write·p0.9999: 302.255 us/op
                 write·p1.00:   338.432 us/op

Iteration   7: 171.096 ±(99.9%) 0.092 us/op
                 write·p0.00:   162.560 us/op
                 write·p0.50:   169.216 us/op
                 write·p0.90:   176.640 us/op
                 write·p0.95:   180.736 us/op
                 write·p0.99:   189.952 us/op
                 write·p0.999:  252.317 us/op
                 write·p0.9999: 289.619 us/op
                 write·p1.00:   336.384 us/op

Iteration   8: 171.205 ±(99.9%) 0.095 us/op
                 write·p0.00:   162.304 us/op
                 write·p0.50:   169.472 us/op
                 write·p0.90:   176.896 us/op
                 write·p0.95:   180.992 us/op
                 write·p0.99:   190.976 us/op
                 write·p0.999:  252.081 us/op
                 write·p0.9999: 330.341 us/op
                 write·p1.00:   434.688 us/op

Iteration   9: 172.249 ±(99.9%) 0.225 us/op
                 write·p0.00:   162.304 us/op
                 write·p0.50:   170.240 us/op
                 write·p0.90:   178.944 us/op
                 write·p0.95:   182.272 us/op
                 write·p0.99:   192.512 us/op
                 write·p0.999:  270.890 us/op
                 write·p0.9999: 701.043 us/op
                 write·p1.00:   2912.256 us/op

Iteration  10: 170.785 ±(99.9%) 0.096 us/op
                 write·p0.00:   162.304 us/op
                 write·p0.50:   169.216 us/op
                 write·p0.90:   176.896 us/op
                 write·p0.95:   180.736 us/op
                 write·p0.99:   190.584 us/op
                 write·p0.999:  250.368 us/op
                 write·p0.9999: 320.755 us/op
                 write·p1.00:   392.192 us/op

Iteration  11: 172.004 ±(99.9%) 0.128 us/op
                 write·p0.00:   162.560 us/op
                 write·p0.50:   169.984 us/op
                 write·p0.90:   178.688 us/op
                 write·p0.95:   182.016 us/op
                 write·p0.99:   193.690 us/op
                 write·p0.999:  266.220 us/op
                 write·p0.9999: 392.804 us/op
                 write·p1.00:   1243.136 us/op

Iteration  12: 173.035 ±(99.9%) 0.121 us/op
                 write·p0.00:   163.072 us/op
                 write·p0.50:   172.544 us/op
                 write·p0.90:   179.456 us/op
                 write·p0.95:   182.784 us/op
                 write·p0.99:   194.834 us/op
                 write·p0.999:  286.680 us/op
                 write·p0.9999: 377.029 us/op
                 write·p1.00:   402.944 us/op

Iteration  13: 171.381 ±(99.9%) 0.109 us/op
                 write·p0.00:   162.304 us/op
                 write·p0.50:   169.216 us/op
                 write·p0.90:   178.432 us/op
                 write·p0.95:   182.016 us/op
                 write·p0.99:   194.048 us/op
                 write·p0.999:  256.768 us/op
                 write·p0.9999: 358.513 us/op
                 write·p1.00:   424.960 us/op

Iteration  14: 172.414 ±(99.9%) 0.112 us/op
                 write·p0.00:   162.304 us/op
                 write·p0.50:   171.264 us/op
                 write·p0.90:   179.456 us/op
                 write·p0.95:   183.296 us/op
                 write·p0.99:   194.816 us/op
                 write·p0.999:  255.513 us/op
                 write·p0.9999: 375.643 us/op
                 write·p1.00:   449.024 us/op

Iteration  15: 172.449 ±(99.9%) 0.121 us/op
                 write·p0.00:   162.560 us/op
                 write·p0.50:   171.520 us/op
                 write·p0.90:   179.200 us/op
                 write·p0.95:   182.784 us/op
                 write·p0.99:   194.074 us/op
                 write·p0.999:  261.972 us/op
                 write·p0.9999: 393.493 us/op
                 write·p1.00:   716.800 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  N = 871643
  mean =    171.794 ±(99.9%) 0.031 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 870303 
    [ 250.000,  500.000) = 1296 
    [ 500.000,  750.000) = 42 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 1 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    162.048 us/op
     p(50.0000) =    169.984 us/op
     p(90.0000) =    178.432 us/op
     p(95.0000) =    182.016 us/op
     p(99.0000) =    193.024 us/op
     p(99.9000) =    259.163 us/op
     p(99.9900) =    374.700 us/op
     p(99.9990) =    701.287 us/op
     p(99.9999) =   2912.256 us/op
    p(100.0000) =   2912.256 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 78.26% complete, ETA 01:45:57
# Fork: 1 of 1
# Warmup Iteration   1: 1001599.795 ±(99.9%) 87658.642 us/op
# Warmup Iteration   2: 1087583.027 ±(99.9%) 4010.520 us/op
# Warmup Iteration   3: 1093664.768 ±(99.9%) 6207.675 us/op
# Warmup Iteration   4: 1092616.192 ±(99.9%) 5592.403 us/op
# Warmup Iteration   5: 1094713.344 ±(99.9%) 6849.267 us/op
Iteration   1: 1093245.338 ±(99.9%) 9458.793 us/op
                 sumBigDecimals·p0.00:   1082130.432 us/op
                 sumBigDecimals·p0.50:   1095761.920 us/op
                 sumBigDecimals·p0.90:   1098907.648 us/op
                 sumBigDecimals·p0.95:   1098907.648 us/op
                 sumBigDecimals·p0.99:   1098907.648 us/op
                 sumBigDecimals·p0.999:  1098907.648 us/op
                 sumBigDecimals·p0.9999: 1098907.648 us/op
                 sumBigDecimals·p1.00:   1098907.648 us/op

Iteration   2: 1098907.648 ±(99.9%) 9570.318 us/op
                 sumBigDecimals·p0.00:   1090519.040 us/op
                 sumBigDecimals·p0.50:   1099956.224 us/op
                 sumBigDecimals·p0.90:   1107086.541 us/op
                 sumBigDecimals·p0.95:   1107296.256 us/op
                 sumBigDecimals·p0.99:   1107296.256 us/op
                 sumBigDecimals·p0.999:  1107296.256 us/op
                 sumBigDecimals·p0.9999: 1107296.256 us/op
                 sumBigDecimals·p1.00:   1107296.256 us/op

Iteration   3: 1095132.774 ±(99.9%) 3274.576 us/op
                 sumBigDecimals·p0.00:   1092616.192 us/op
                 sumBigDecimals·p0.50:   1094713.344 us/op
                 sumBigDecimals·p0.90:   1098697.933 us/op
                 sumBigDecimals·p0.95:   1098907.648 us/op
                 sumBigDecimals·p0.99:   1098907.648 us/op
                 sumBigDecimals·p0.999:  1098907.648 us/op
                 sumBigDecimals·p0.9999: 1098907.648 us/op
                 sumBigDecimals·p1.00:   1098907.648 us/op

Iteration   4: 1092825.907 ±(99.9%) 5273.745 us/op
                 sumBigDecimals·p0.00:   1088421.888 us/op
                 sumBigDecimals·p0.50:   1092616.192 us/op
                 sumBigDecimals·p0.90:   1098697.933 us/op
                 sumBigDecimals·p0.95:   1098907.648 us/op
                 sumBigDecimals·p0.99:   1098907.648 us/op
                 sumBigDecimals·p0.999:  1098907.648 us/op
                 sumBigDecimals·p0.9999: 1098907.648 us/op
                 sumBigDecimals·p1.00:   1098907.648 us/op

Iteration   5: 1093245.338 ±(99.9%) 4968.389 us/op
                 sumBigDecimals·p0.00:   1086324.736 us/op
                 sumBigDecimals·p0.50:   1094713.344 us/op
                 sumBigDecimals·p0.90:   1096810.496 us/op
                 sumBigDecimals·p0.95:   1096810.496 us/op
                 sumBigDecimals·p0.99:   1096810.496 us/op
                 sumBigDecimals·p0.999:  1096810.496 us/op
                 sumBigDecimals·p0.9999: 1096810.496 us/op
                 sumBigDecimals·p1.00:   1096810.496 us/op

Iteration   6: 1096181.350 ±(99.9%) 7480.633 us/op
                 sumBigDecimals·p0.00:   1088421.888 us/op
                 sumBigDecimals·p0.50:   1095761.920 us/op
                 sumBigDecimals·p0.90:   1103101.952 us/op
                 sumBigDecimals·p0.95:   1103101.952 us/op
                 sumBigDecimals·p0.99:   1103101.952 us/op
                 sumBigDecimals·p0.999:  1103101.952 us/op
                 sumBigDecimals·p0.9999: 1103101.952 us/op
                 sumBigDecimals·p1.00:   1103101.952 us/op

Iteration   7: 1095761.920 ±(99.9%) 5642.114 us/op
                 sumBigDecimals·p0.00:   1090519.040 us/op
                 sumBigDecimals·p0.50:   1094713.344 us/op
                 sumBigDecimals·p0.90:   1102682.522 us/op
                 sumBigDecimals·p0.95:   1103101.952 us/op
                 sumBigDecimals·p0.99:   1103101.952 us/op
                 sumBigDecimals·p0.999:  1103101.952 us/op
                 sumBigDecimals·p0.9999: 1103101.952 us/op
                 sumBigDecimals·p1.00:   1103101.952 us/op

Iteration   8: 1094923.059 ±(99.9%) 7237.788 us/op
                 sumBigDecimals·p0.00:   1084227.584 us/op
                 sumBigDecimals·p0.50:   1094713.344 us/op
                 sumBigDecimals·p0.90:   1100795.085 us/op
                 sumBigDecimals·p0.95:   1101004.800 us/op
                 sumBigDecimals·p0.99:   1101004.800 us/op
                 sumBigDecimals·p0.999:  1101004.800 us/op
                 sumBigDecimals·p0.9999: 1101004.800 us/op
                 sumBigDecimals·p1.00:   1101004.800 us/op

Iteration   9: 1093874.483 ±(99.9%) 6717.538 us/op
                 sumBigDecimals·p0.00:   1088421.888 us/op
                 sumBigDecimals·p0.50:   1093664.768 us/op
                 sumBigDecimals·p0.90:   1100795.085 us/op
                 sumBigDecimals·p0.95:   1101004.800 us/op
                 sumBigDecimals·p0.99:   1101004.800 us/op
                 sumBigDecimals·p0.999:  1101004.800 us/op
                 sumBigDecimals·p0.9999: 1101004.800 us/op
                 sumBigDecimals·p1.00:   1101004.800 us/op

Iteration  10: 1094503.629 ±(99.9%) 6062.021 us/op
                 sumBigDecimals·p0.00:   1088421.888 us/op
                 sumBigDecimals·p0.50:   1094713.344 us/op
                 sumBigDecimals·p0.90:   1100795.085 us/op
                 sumBigDecimals·p0.95:   1101004.800 us/op
                 sumBigDecimals·p0.99:   1101004.800 us/op
                 sumBigDecimals·p0.999:  1101004.800 us/op
                 sumBigDecimals·p0.9999: 1101004.800 us/op
                 sumBigDecimals·p1.00:   1101004.800 us/op

Iteration  11: 1094084.198 ±(99.9%) 5798.327 us/op
                 sumBigDecimals·p0.00:   1086324.736 us/op
                 sumBigDecimals·p0.50:   1094713.344 us/op
                 sumBigDecimals·p0.90:   1098907.648 us/op
                 sumBigDecimals·p0.95:   1098907.648 us/op
                 sumBigDecimals·p0.99:   1098907.648 us/op
                 sumBigDecimals·p0.999:  1098907.648 us/op
                 sumBigDecimals·p0.9999: 1098907.648 us/op
                 sumBigDecimals·p1.00:   1098907.648 us/op

Iteration  12: 1094713.344 ±(99.9%) 5978.530 us/op
                 sumBigDecimals·p0.00:   1088421.888 us/op
                 sumBigDecimals·p0.50:   1095761.920 us/op
                 sumBigDecimals·p0.90:   1098907.648 us/op
                 sumBigDecimals·p0.95:   1098907.648 us/op
                 sumBigDecimals·p0.99:   1098907.648 us/op
                 sumBigDecimals·p0.999:  1098907.648 us/op
                 sumBigDecimals·p0.9999: 1098907.648 us/op
                 sumBigDecimals·p1.00:   1098907.648 us/op

Iteration  13: 1095552.205 ±(99.9%) 6015.780 us/op
                 sumBigDecimals·p0.00:   1088421.888 us/op
                 sumBigDecimals·p0.50:   1096810.496 us/op
                 sumBigDecimals·p0.90:   1100795.085 us/op
                 sumBigDecimals·p0.95:   1101004.800 us/op
                 sumBigDecimals·p0.99:   1101004.800 us/op
                 sumBigDecimals·p0.999:  1101004.800 us/op
                 sumBigDecimals·p0.9999: 1101004.800 us/op
                 sumBigDecimals·p1.00:   1101004.800 us/op

Iteration  14: 1095132.774 ±(99.9%) 6126.171 us/op
                 sumBigDecimals·p0.00:   1086324.736 us/op
                 sumBigDecimals·p0.50:   1096810.496 us/op
                 sumBigDecimals·p0.90:   1100585.370 us/op
                 sumBigDecimals·p0.95:   1101004.800 us/op
                 sumBigDecimals·p0.99:   1101004.800 us/op
                 sumBigDecimals·p0.999:  1101004.800 us/op
                 sumBigDecimals·p0.9999: 1101004.800 us/op
                 sumBigDecimals·p1.00:   1101004.800 us/op

Iteration  15: 1092406.477 ±(99.9%) 7540.122 us/op
                 sumBigDecimals·p0.00:   1086324.736 us/op
                 sumBigDecimals·p0.50:   1092616.192 us/op
                 sumBigDecimals·p0.90:   1098907.648 us/op
                 sumBigDecimals·p0.95:   1098907.648 us/op
                 sumBigDecimals·p0.99:   1098907.648 us/op
                 sumBigDecimals·p0.999:  1098907.648 us/op
                 sumBigDecimals·p0.9999: 1098907.648 us/op
                 sumBigDecimals·p1.00:   1098907.648 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  N = 150
  mean = 1094699.363 ±(99.9%) 1227.094 us/op

  Histogram, us/op:
    [1080000.000, 1082500.000) = 1 
    [1082500.000, 1085000.000) = 2 
    [1085000.000, 1087500.000) = 6 
    [1087500.000, 1090000.000) = 10 
    [1090000.000, 1092500.000) = 15 
    [1092500.000, 1095000.000) = 54 
    [1095000.000, 1097500.000) = 27 
    [1097500.000, 1100000.000) = 21 
    [1100000.000, 1102500.000) = 7 
    [1102500.000, 1105000.000) = 4 
    [1105000.000, 1107500.000) = 3 

  Percentiles, us/op:
      p(0.0000) = 1082130.432 us/op
     p(50.0000) = 1094713.344 us/op
     p(90.0000) = 1098907.648 us/op
     p(95.0000) = 1101948.518 us/op
     p(99.0000) = 1106226.708 us/op
     p(99.9000) = 1107296.256 us/op
     p(99.9900) = 1107296.256 us/op
     p(99.9990) = 1107296.256 us/op
     p(99.9999) = 1107296.256 us/op
    p(100.0000) = 1107296.256 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 78.98% complete, ETA 01:42:31
# Fork: 1 of 1
# Warmup Iteration   1: 141849.441 ±(99.9%) 2253.438 us/op
# Warmup Iteration   2: 146694.263 ±(99.9%) 925.583 us/op
# Warmup Iteration   3: 143587.504 ±(99.9%) 922.915 us/op
# Warmup Iteration   4: 145068.210 ±(99.9%) 841.023 us/op
# Warmup Iteration   5: 149206.887 ±(99.9%) 1431.856 us/op
Iteration   1: 146018.007 ±(99.9%) 1694.834 us/op
                 countUppercase·p0.00:   143917.056 us/op
                 countUppercase·p0.50:   144965.632 us/op
                 countUppercase·p0.90:   148897.792 us/op
                 countUppercase·p0.95:   152305.664 us/op
                 countUppercase·p0.99:   174063.616 us/op
                 countUppercase·p0.999:  174063.616 us/op
                 countUppercase·p0.9999: 174063.616 us/op
                 countUppercase·p1.00:   174063.616 us/op

Iteration   2: 145695.076 ±(99.9%) 1099.998 us/op
                 countUppercase·p0.00:   144179.200 us/op
                 countUppercase·p0.50:   144703.488 us/op
                 countUppercase·p0.90:   147849.216 us/op
                 countUppercase·p0.95:   154664.960 us/op
                 countUppercase·p0.99:   157024.256 us/op
                 countUppercase·p0.999:  157024.256 us/op
                 countUppercase·p0.9999: 157024.256 us/op
                 countUppercase·p1.00:   157024.256 us/op

Iteration   3: 140867.324 ±(99.9%) 757.864 us/op
                 countUppercase·p0.00:   139198.464 us/op
                 countUppercase·p0.50:   140247.040 us/op
                 countUppercase·p0.90:   143340.339 us/op
                 countUppercase·p0.95:   144546.202 us/op
                 countUppercase·p0.99:   149946.368 us/op
                 countUppercase·p0.999:  149946.368 us/op
                 countUppercase·p0.9999: 149946.368 us/op
                 countUppercase·p1.00:   149946.368 us/op

Iteration   4: 146958.697 ±(99.9%) 825.964 us/op
                 countUppercase·p0.00:   145752.064 us/op
                 countUppercase·p0.50:   146276.352 us/op
                 countUppercase·p0.90:   149159.936 us/op
                 countUppercase·p0.95:   150732.800 us/op
                 countUppercase·p0.99:   158859.264 us/op
                 countUppercase·p0.999:  158859.264 us/op
                 countUppercase·p0.9999: 158859.264 us/op
                 countUppercase·p1.00:   158859.264 us/op

Iteration   5: 143950.760 ±(99.9%) 953.768 us/op
                 countUppercase·p0.00:   142344.192 us/op
                 countUppercase·p0.50:   143392.768 us/op
                 countUppercase·p0.90:   145987.994 us/op
                 countUppercase·p0.95:   150549.299 us/op
                 countUppercase·p0.99:   154402.816 us/op
                 countUppercase·p0.999:  154402.816 us/op
                 countUppercase·p0.9999: 154402.816 us/op
                 countUppercase·p1.00:   154402.816 us/op

Iteration   6: 146869.025 ±(99.9%) 708.264 us/op
                 countUppercase·p0.00:   145489.920 us/op
                 countUppercase·p0.50:   146276.352 us/op
                 countUppercase·p0.90:   148897.792 us/op
                 countUppercase·p0.95:   150339.584 us/op
                 countUppercase·p0.99:   156499.968 us/op
                 countUppercase·p0.999:  156499.968 us/op
                 countUppercase·p0.9999: 156499.968 us/op
                 countUppercase·p1.00:   156499.968 us/op

Iteration   7: 147641.043 ±(99.9%) 659.881 us/op
                 countUppercase·p0.00:   146276.352 us/op
                 countUppercase·p0.50:   147062.784 us/op
                 countUppercase·p0.90:   149972.582 us/op
                 countUppercase·p0.95:   150614.835 us/op
                 countUppercase·p0.99:   155713.536 us/op
                 countUppercase·p0.999:  155713.536 us/op
                 countUppercase·p0.9999: 155713.536 us/op
                 countUppercase·p1.00:   155713.536 us/op

Iteration   8: 142831.031 ±(99.9%) 630.177 us/op
                 countUppercase·p0.00:   141557.760 us/op
                 countUppercase·p0.50:   142344.192 us/op
                 countUppercase·p0.90:   144939.418 us/op
                 countUppercase·p0.95:   145961.779 us/op
                 countUppercase·p0.99:   151257.088 us/op
                 countUppercase·p0.999:  151257.088 us/op
                 countUppercase·p0.9999: 151257.088 us/op
                 countUppercase·p1.00:   151257.088 us/op

Iteration   9: 143160.583 ±(99.9%) 737.873 us/op
                 countUppercase·p0.00:   141557.760 us/op
                 countUppercase·p0.50:   142606.336 us/op
                 countUppercase·p0.90:   145489.920 us/op
                 countUppercase·p0.95:   146132.173 us/op
                 countUppercase·p0.99:   152305.664 us/op
                 countUppercase·p0.999:  152305.664 us/op
                 countUppercase·p0.9999: 152305.664 us/op
                 countUppercase·p1.00:   152305.664 us/op

Iteration  10: 148481.446 ±(99.9%) 627.025 us/op
                 countUppercase·p0.00:   147062.784 us/op
                 countUppercase·p0.50:   147980.288 us/op
                 countUppercase·p0.90:   150994.944 us/op
                 countUppercase·p0.95:   152305.664 us/op
                 countUppercase·p0.99:   153878.528 us/op
                 countUppercase·p0.999:  153878.528 us/op
                 countUppercase·p0.9999: 153878.528 us/op
                 countUppercase·p1.00:   153878.528 us/op

Iteration  11: 147941.737 ±(99.9%) 1087.200 us/op
                 countUppercase·p0.00:   146538.496 us/op
                 countUppercase·p0.50:   147324.928 us/op
                 countUppercase·p0.90:   150234.726 us/op
                 countUppercase·p0.95:   151283.302 us/op
                 countUppercase·p0.99:   165937.152 us/op
                 countUppercase·p0.999:  165937.152 us/op
                 countUppercase·p0.9999: 165937.152 us/op
                 countUppercase·p1.00:   165937.152 us/op

Iteration  12: 145212.579 ±(99.9%) 969.569 us/op
                 countUppercase·p0.00:   143392.768 us/op
                 countUppercase·p0.50:   144441.344 us/op
                 countUppercase·p0.90:   148897.792 us/op
                 countUppercase·p0.95:   151650.304 us/op
                 countUppercase·p0.99:   154140.672 us/op
                 countUppercase·p0.999:  154140.672 us/op
                 countUppercase·p0.9999: 154140.672 us/op
                 countUppercase·p1.00:   154140.672 us/op

Iteration  13: 152007.773 ±(99.9%) 1064.383 us/op
                 countUppercase·p0.00:   150470.656 us/op
                 countUppercase·p0.50:   151257.088 us/op
                 countUppercase·p0.90:   154743.603 us/op
                 countUppercase·p0.95:   155359.642 us/op
                 countUppercase·p0.99:   168820.736 us/op
                 countUppercase·p0.999:  168820.736 us/op
                 countUppercase·p0.9999: 168820.736 us/op
                 countUppercase·p1.00:   168820.736 us/op

Iteration  14: 141376.844 ±(99.9%) 725.383 us/op
                 countUppercase·p0.00:   139722.752 us/op
                 countUppercase·p0.50:   140771.328 us/op
                 countUppercase·p0.90:   143917.056 us/op
                 countUppercase·p0.95:   145909.350 us/op
                 countUppercase·p0.99:   148373.504 us/op
                 countUppercase·p0.999:  148373.504 us/op
                 countUppercase·p0.9999: 148373.504 us/op
                 countUppercase·p1.00:   148373.504 us/op

Iteration  15: 149872.029 ±(99.9%) 928.588 us/op
                 countUppercase·p0.00:   148111.360 us/op
                 countUppercase·p0.50:   148897.792 us/op
                 countUppercase·p0.90:   152148.378 us/op
                 countUppercase·p0.95:   155713.536 us/op
                 countUppercase·p0.99:   159121.408 us/op
                 countUppercase·p0.999:  159121.408 us/op
                 countUppercase·p0.9999: 159121.408 us/op
                 countUppercase·p1.00:   159121.408 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 1033
  mean = 145867.022 ±(99.9%) 385.093 us/op

  Histogram, us/op:
    [130000.000, 135000.000) = 0 
    [135000.000, 140000.000) = 38 
    [140000.000, 145000.000) = 426 
    [145000.000, 150000.000) = 438 
    [150000.000, 155000.000) = 116 
    [155000.000, 160000.000) = 12 
    [160000.000, 165000.000) = 0 
    [165000.000, 170000.000) = 2 
    [170000.000, 175000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 139198.464 us/op
     p(50.0000) = 145752.064 us/op
     p(90.0000) = 150732.800 us/op
     p(95.0000) = 151781.376 us/op
     p(99.0000) = 156059.566 us/op
     p(99.9000) = 173885.358 us/op
     p(99.9900) = 174063.616 us/op
     p(99.9990) = 174063.616 us/op
     p(99.9999) = 174063.616 us/op
    p(100.0000) = 174063.616 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 79.71% complete, ETA 01:38:59
# Fork: 1 of 1
# Warmup Iteration   1: 5687476.224 us/op
# Warmup Iteration   2: 3992977.408 ±(99.9%) 76519.719 us/op
# Warmup Iteration   3: 3992977.408 ±(99.9%) 76519.719 us/op
# Warmup Iteration   4: 3997171.712 ±(99.9%) 132536.041 us/op
# Warmup Iteration   5: 3978996.395 ±(99.9%) 116885.801 us/op
Iteration   1: 4039114.752 ±(99.9%) 76519.719 us/op
                 countUppercase·p0.00:   4034920.448 us/op
                 countUppercase·p0.50:   4039114.752 us/op
                 countUppercase·p0.90:   4043309.056 us/op
                 countUppercase·p0.95:   4043309.056 us/op
                 countUppercase·p0.99:   4043309.056 us/op
                 countUppercase·p0.999:  4043309.056 us/op
                 countUppercase·p0.9999: 4043309.056 us/op
                 countUppercase·p1.00:   4043309.056 us/op

Iteration   2: 4006958.421 ±(99.9%) 192570.403 us/op
                 countUppercase·p0.00:   3997171.712 us/op
                 countUppercase·p0.50:   4005560.320 us/op
                 countUppercase·p0.90:   4018143.232 us/op
                 countUppercase·p0.95:   4018143.232 us/op
                 countUppercase·p0.99:   4018143.232 us/op
                 countUppercase·p0.999:  4018143.232 us/op
                 countUppercase·p0.9999: 4018143.232 us/op
                 countUppercase·p1.00:   4018143.232 us/op

Iteration   3: 3997171.712 ±(99.9%) 202452.147 us/op
                 countUppercase·p0.00:   3984588.800 us/op
                 countUppercase·p0.50:   4001366.016 us/op
                 countUppercase·p0.90:   4005560.320 us/op
                 countUppercase·p0.95:   4005560.320 us/op
                 countUppercase·p0.99:   4005560.320 us/op
                 countUppercase·p0.999:  4005560.320 us/op
                 countUppercase·p0.9999: 4005560.320 us/op
                 countUppercase·p1.00:   4005560.320 us/op

Iteration   4: 4018143.232 ±(99.9%) 0.001 us/op
                 countUppercase·p0.00:   4018143.232 us/op
                 countUppercase·p0.50:   4018143.232 us/op
                 countUppercase·p0.90:   4018143.232 us/op
                 countUppercase·p0.95:   4018143.232 us/op
                 countUppercase·p0.99:   4018143.232 us/op
                 countUppercase·p0.999:  4018143.232 us/op
                 countUppercase·p0.9999: 4018143.232 us/op
                 countUppercase·p1.00:   4018143.232 us/op

Iteration   5: 3998569.813 ±(99.9%) 88357.361 us/op
                 countUppercase·p0.00:   3992977.408 us/op
                 countUppercase·p0.50:   4001366.016 us/op
                 countUppercase·p0.90:   4001366.016 us/op
                 countUppercase·p0.95:   4001366.016 us/op
                 countUppercase·p0.99:   4001366.016 us/op
                 countUppercase·p0.999:  4001366.016 us/op
                 countUppercase·p0.9999: 4001366.016 us/op
                 countUppercase·p1.00:   4001366.016 us/op

Iteration   6: 4009754.624 ±(99.9%) 76519.719 us/op
                 countUppercase·p0.00:   4005560.320 us/op
                 countUppercase·p0.50:   4009754.624 us/op
                 countUppercase·p0.90:   4013948.928 us/op
                 countUppercase·p0.95:   4013948.928 us/op
                 countUppercase·p0.99:   4013948.928 us/op
                 countUppercase·p0.999:  4013948.928 us/op
                 countUppercase·p0.9999: 4013948.928 us/op
                 countUppercase·p1.00:   4013948.928 us/op

Iteration   7: 4047503.360 ±(99.9%) 275895.770 us/op
                 countUppercase·p0.00:   4030726.144 us/op
                 countUppercase·p0.50:   4051697.664 us/op
                 countUppercase·p0.90:   4060086.272 us/op
                 countUppercase·p0.95:   4060086.272 us/op
                 countUppercase·p0.99:   4060086.272 us/op
                 countUppercase·p0.999:  4060086.272 us/op
                 countUppercase·p0.9999: 4060086.272 us/op
                 countUppercase·p1.00:   4060086.272 us/op

Iteration   8: 4008356.523 ±(99.9%) 159288.497 us/op
                 countUppercase·p0.00:   4001366.016 us/op
                 countUppercase·p0.50:   4005560.320 us/op
                 countUppercase·p0.90:   4018143.232 us/op
                 countUppercase·p0.95:   4018143.232 us/op
                 countUppercase·p0.99:   4018143.232 us/op
                 countUppercase·p0.999:  4018143.232 us/op
                 countUppercase·p0.9999: 4018143.232 us/op
                 countUppercase·p1.00:   4018143.232 us/op

Iteration   9: 4029328.043 ±(99.9%) 245976.482 us/op
                 countUppercase·p0.00:   4013948.928 us/op
                 countUppercase·p0.50:   4034920.448 us/op
                 countUppercase·p0.90:   4039114.752 us/op
                 countUppercase·p0.95:   4039114.752 us/op
                 countUppercase·p0.99:   4039114.752 us/op
                 countUppercase·p0.999:  4039114.752 us/op
                 countUppercase·p0.9999: 4039114.752 us/op
                 countUppercase·p1.00:   4039114.752 us/op

Iteration  10: 4054493.867 ±(99.9%) 268728.421 us/op
                 countUppercase·p0.00:   4039114.752 us/op
                 countUppercase·p0.50:   4055891.968 us/op
                 countUppercase·p0.90:   4068474.880 us/op
                 countUppercase·p0.95:   4068474.880 us/op
                 countUppercase·p0.99:   4068474.880 us/op
                 countUppercase·p0.999:  4068474.880 us/op
                 countUppercase·p0.9999: 4068474.880 us/op
                 countUppercase·p1.00:   4068474.880 us/op

Iteration  11: 4076863.488 ±(99.9%) 202452.147 us/op
                 countUppercase·p0.00:   4068474.880 us/op
                 countUppercase·p0.50:   4072669.184 us/op
                 countUppercase·p0.90:   4089446.400 us/op
                 countUppercase·p0.95:   4089446.400 us/op
                 countUppercase·p0.99:   4089446.400 us/op
                 countUppercase·p0.999:  4089446.400 us/op
                 countUppercase·p0.9999: 4089446.400 us/op
                 countUppercase·p1.00:   4089446.400 us/op

Iteration  12: 4006958.421 ±(99.9%) 44178.680 us/op
                 countUppercase·p0.00:   4005560.320 us/op
                 countUppercase·p0.50:   4005560.320 us/op
                 countUppercase·p0.90:   4009754.624 us/op
                 countUppercase·p0.95:   4009754.624 us/op
                 countUppercase·p0.99:   4009754.624 us/op
                 countUppercase·p0.999:  4009754.624 us/op
                 countUppercase·p0.9999: 4009754.624 us/op
                 countUppercase·p1.00:   4009754.624 us/op

Iteration  13: 4020939.435 ±(99.9%) 88357.361 us/op
                 countUppercase·p0.00:   4018143.232 us/op
                 countUppercase·p0.50:   4018143.232 us/op
                 countUppercase·p0.90:   4026531.840 us/op
                 countUppercase·p0.95:   4026531.840 us/op
                 countUppercase·p0.99:   4026531.840 us/op
                 countUppercase·p0.999:  4026531.840 us/op
                 countUppercase·p0.9999: 4026531.840 us/op
                 countUppercase·p1.00:   4026531.840 us/op

Iteration  14: 3965015.381 ±(99.9%) 44178.680 us/op
                 countUppercase·p0.00:   3963617.280 us/op
                 countUppercase·p0.50:   3963617.280 us/op
                 countUppercase·p0.90:   3967811.584 us/op
                 countUppercase·p0.95:   3967811.584 us/op
                 countUppercase·p0.99:   3967811.584 us/op
                 countUppercase·p0.999:  3967811.584 us/op
                 countUppercase·p0.9999: 3967811.584 us/op
                 countUppercase·p1.00:   3967811.584 us/op

Iteration  15: 4020939.435 ±(99.9%) 116885.801 us/op
                 countUppercase·p0.00:   4013948.928 us/op
                 countUppercase·p0.50:   4022337.536 us/op
                 countUppercase·p0.90:   4026531.840 us/op
                 countUppercase·p0.95:   4026531.840 us/op
                 countUppercase·p0.99:   4026531.840 us/op
                 countUppercase·p0.999:  4026531.840 us/op
                 countUppercase·p0.9999: 4026531.840 us/op
                 countUppercase·p1.00:   4026531.840 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 45
  mean = 4020007.367 ±(99.9%) 14406.596 us/op

  Histogram, us/op:
    [3900000.000, 3912500.000) = 0 
    [3912500.000, 3925000.000) = 0 
    [3925000.000, 3937500.000) = 0 
    [3937500.000, 3950000.000) = 0 
    [3950000.000, 3962500.000) = 0 
    [3962500.000, 3975000.000) = 3 
    [3975000.000, 3987500.000) = 1 
    [3987500.000, 4000000.000) = 2 
    [4000000.000, 4012500.000) = 12 
    [4012500.000, 4025000.000) = 11 
    [4025000.000, 4037500.000) = 5 
    [4037500.000, 4050000.000) = 4 
    [4050000.000, 4062500.000) = 3 
    [4062500.000, 4075000.000) = 3 
    [4075000.000, 4087500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 3963617.280 us/op
     p(50.0000) = 4018143.232 us/op
     p(90.0000) = 4063441.715 us/op
     p(95.0000) = 4071410.893 us/op
     p(99.0000) = 4089446.400 us/op
     p(99.9000) = 4089446.400 us/op
     p(99.9900) = 4089446.400 us/op
     p(99.9990) = 4089446.400 us/op
     p(99.9999) = 4089446.400 us/op
    p(100.0000) = 4089446.400 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 80.43% complete, ETA 01:35:38
# Fork: 1 of 1
# Warmup Iteration   1: 1.902 ±(99.9%) 0.006 us/op
# Warmup Iteration   2: 1.896 ±(99.9%) 0.004 us/op
# Warmup Iteration   3: 1.897 ±(99.9%) 0.004 us/op
# Warmup Iteration   4: 1.898 ±(99.9%) 0.005 us/op
# Warmup Iteration   5: 1.901 ±(99.9%) 0.006 us/op
Iteration   1: 1.897 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.846 us/op
                 runFibonacci·p0.50:   1.864 us/op
                 runFibonacci·p0.90:   1.878 us/op
                 runFibonacci·p0.95:   1.880 us/op
                 runFibonacci·p0.99:   1.918 us/op
                 runFibonacci·p0.999:  9.984 us/op
                 runFibonacci·p0.9999: 29.921 us/op
                 runFibonacci·p1.00:   100.480 us/op

Iteration   2: 1.893 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.846 us/op
                 runFibonacci·p0.50:   1.864 us/op
                 runFibonacci·p0.90:   1.878 us/op
                 runFibonacci·p0.95:   1.880 us/op
                 runFibonacci·p0.99:   1.930 us/op
                 runFibonacci·p0.999:  9.297 us/op
                 runFibonacci·p0.9999: 23.825 us/op
                 runFibonacci·p1.00:   96.256 us/op

Iteration   3: 1.896 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   1.846 us/op
                 runFibonacci·p0.50:   1.864 us/op
                 runFibonacci·p0.90:   1.878 us/op
                 runFibonacci·p0.95:   1.880 us/op
                 runFibonacci·p0.99:   1.916 us/op
                 runFibonacci·p0.999:  9.443 us/op
                 runFibonacci·p0.9999: 27.253 us/op
                 runFibonacci·p1.00:   448.512 us/op

Iteration   4: 1.896 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.846 us/op
                 runFibonacci·p0.50:   1.864 us/op
                 runFibonacci·p0.90:   1.878 us/op
                 runFibonacci·p0.95:   1.880 us/op
                 runFibonacci·p0.99:   1.912 us/op
                 runFibonacci·p0.999:  9.714 us/op
                 runFibonacci·p0.9999: 30.640 us/op
                 runFibonacci·p1.00:   118.912 us/op

Iteration   5: 1.897 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.846 us/op
                 runFibonacci·p0.50:   1.864 us/op
                 runFibonacci·p0.90:   1.878 us/op
                 runFibonacci·p0.95:   1.880 us/op
                 runFibonacci·p0.99:   1.934 us/op
                 runFibonacci·p0.999:  9.780 us/op
                 runFibonacci·p0.9999: 28.401 us/op
                 runFibonacci·p1.00:   110.080 us/op

Iteration   6: 1.895 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.846 us/op
                 runFibonacci·p0.50:   1.864 us/op
                 runFibonacci·p0.90:   1.878 us/op
                 runFibonacci·p0.95:   1.880 us/op
                 runFibonacci·p0.99:   1.924 us/op
                 runFibonacci·p0.999:  10.224 us/op
                 runFibonacci·p0.9999: 27.711 us/op
                 runFibonacci·p1.00:   101.504 us/op

Iteration   7: 1.897 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.846 us/op
                 runFibonacci·p0.50:   1.864 us/op
                 runFibonacci·p0.90:   1.878 us/op
                 runFibonacci·p0.95:   1.880 us/op
                 runFibonacci·p0.99:   1.940 us/op
                 runFibonacci·p0.999:  9.859 us/op
                 runFibonacci·p0.9999: 27.335 us/op
                 runFibonacci·p1.00:   140.800 us/op

Iteration   8: 1.893 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.846 us/op
                 runFibonacci·p0.50:   1.864 us/op
                 runFibonacci·p0.90:   1.878 us/op
                 runFibonacci·p0.95:   1.880 us/op
                 runFibonacci·p0.99:   1.928 us/op
                 runFibonacci·p0.999:  9.219 us/op
                 runFibonacci·p0.9999: 21.463 us/op
                 runFibonacci·p1.00:   102.656 us/op

Iteration   9: 1.896 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.846 us/op
                 runFibonacci·p0.50:   1.864 us/op
                 runFibonacci·p0.90:   1.878 us/op
                 runFibonacci·p0.95:   1.880 us/op
                 runFibonacci·p0.99:   1.928 us/op
                 runFibonacci·p0.999:  9.714 us/op
                 runFibonacci·p0.9999: 30.886 us/op
                 runFibonacci·p1.00:   109.568 us/op

Iteration  10: 1.895 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.846 us/op
                 runFibonacci·p0.50:   1.864 us/op
                 runFibonacci·p0.90:   1.878 us/op
                 runFibonacci·p0.95:   1.880 us/op
                 runFibonacci·p0.99:   1.927 us/op
                 runFibonacci·p0.999:  9.380 us/op
                 runFibonacci·p0.9999: 28.663 us/op
                 runFibonacci·p1.00:   89.216 us/op

Iteration  11: 1.900 ±(99.9%) 0.022 us/op
                 runFibonacci·p0.00:   1.846 us/op
                 runFibonacci·p0.50:   1.864 us/op
                 runFibonacci·p0.90:   1.878 us/op
                 runFibonacci·p0.95:   1.880 us/op
                 runFibonacci·p0.99:   1.926 us/op
                 runFibonacci·p0.999:  9.040 us/op
                 runFibonacci·p0.9999: 24.866 us/op
                 runFibonacci·p1.00:   2207.744 us/op

Iteration  12: 1.896 ±(99.9%) 0.005 us/op
                 runFibonacci·p0.00:   1.846 us/op
                 runFibonacci·p0.50:   1.864 us/op
                 runFibonacci·p0.90:   1.878 us/op
                 runFibonacci·p0.95:   1.880 us/op
                 runFibonacci·p0.99:   1.924 us/op
                 runFibonacci·p0.999:  9.572 us/op
                 runFibonacci·p0.9999: 32.004 us/op
                 runFibonacci·p1.00:   274.944 us/op

Iteration  13: 1.896 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.846 us/op
                 runFibonacci·p0.50:   1.866 us/op
                 runFibonacci·p0.90:   1.878 us/op
                 runFibonacci·p0.95:   1.884 us/op
                 runFibonacci·p0.99:   1.922 us/op
                 runFibonacci·p0.999:  9.559 us/op
                 runFibonacci·p0.9999: 32.273 us/op
                 runFibonacci·p1.00:   157.952 us/op

Iteration  14: 1.899 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.846 us/op
                 runFibonacci·p0.50:   1.864 us/op
                 runFibonacci·p0.90:   1.878 us/op
                 runFibonacci·p0.95:   1.880 us/op
                 runFibonacci·p0.99:   1.908 us/op
                 runFibonacci·p0.999:  9.920 us/op
                 runFibonacci·p0.9999: 35.627 us/op
                 runFibonacci·p1.00:   176.384 us/op

Iteration  15: 1.894 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.846 us/op
                 runFibonacci·p0.50:   1.864 us/op
                 runFibonacci·p0.90:   1.878 us/op
                 runFibonacci·p0.95:   1.880 us/op
                 runFibonacci·p0.99:   1.905 us/op
                 runFibonacci·p0.999:  8.980 us/op
                 runFibonacci·p0.9999: 32.114 us/op
                 runFibonacci·p1.00:   189.440 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 5021966
  mean =      1.896 ±(99.9%) 0.002 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 5021962 
    [ 250.000,  500.000) = 3 
    [ 500.000,  750.000) = 0 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 1 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      1.846 us/op
     p(50.0000) =      1.864 us/op
     p(90.0000) =      1.878 us/op
     p(95.0000) =      1.880 us/op
     p(99.0000) =      1.924 us/op
     p(99.9000) =      9.568 us/op
     p(99.9900) =     29.594 us/op
     p(99.9990) =     75.851 us/op
     p(99.9999) =    189.238 us/op
    p(100.0000) =   2207.744 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 81.16% complete, ETA 01:32:06
# Fork: 1 of 1
# Warmup Iteration   1: 4.980 ±(99.9%) 0.008 us/op
# Warmup Iteration   2: 4.982 ±(99.9%) 0.007 us/op
# Warmup Iteration   3: 4.981 ±(99.9%) 0.010 us/op
# Warmup Iteration   4: 4.990 ±(99.9%) 0.038 us/op
# Warmup Iteration   5: 4.971 ±(99.9%) 0.007 us/op
Iteration   1: 4.976 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   4.768 us/op
                 runFibonacci·p0.50:   4.904 us/op
                 runFibonacci·p0.90:   4.960 us/op
                 runFibonacci·p0.95:   4.976 us/op
                 runFibonacci·p0.99:   5.816 us/op
                 runFibonacci·p0.999:  16.012 us/op
                 runFibonacci·p0.9999: 53.105 us/op
                 runFibonacci·p1.00:   139.520 us/op

Iteration   2: 4.965 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   4.776 us/op
                 runFibonacci·p0.50:   4.904 us/op
                 runFibonacci·p0.90:   4.952 us/op
                 runFibonacci·p0.95:   4.968 us/op
                 runFibonacci·p0.99:   5.594 us/op
                 runFibonacci·p0.999:  15.111 us/op
                 runFibonacci·p0.9999: 46.989 us/op
                 runFibonacci·p1.00:   456.192 us/op

Iteration   3: 4.974 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   4.776 us/op
                 runFibonacci·p0.50:   4.912 us/op
                 runFibonacci·p0.90:   4.968 us/op
                 runFibonacci·p0.95:   4.992 us/op
                 runFibonacci·p0.99:   5.726 us/op
                 runFibonacci·p0.999:  15.550 us/op
                 runFibonacci·p0.9999: 47.474 us/op
                 runFibonacci·p1.00:   103.680 us/op

Iteration   4: 4.976 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   4.776 us/op
                 runFibonacci·p0.50:   4.912 us/op
                 runFibonacci·p0.90:   4.984 us/op
                 runFibonacci·p0.95:   5.008 us/op
                 runFibonacci·p0.99:   5.616 us/op
                 runFibonacci·p0.999:  15.601 us/op
                 runFibonacci·p0.9999: 48.224 us/op
                 runFibonacci·p1.00:   113.024 us/op

Iteration   5: 4.981 ±(99.9%) 0.009 us/op
                 runFibonacci·p0.00:   4.776 us/op
                 runFibonacci·p0.50:   4.904 us/op
                 runFibonacci·p0.90:   4.960 us/op
                 runFibonacci·p0.95:   4.984 us/op
                 runFibonacci·p0.99:   5.320 us/op
                 runFibonacci·p0.999:  16.285 us/op
                 runFibonacci·p0.9999: 54.635 us/op
                 runFibonacci·p1.00:   168.192 us/op

Iteration   6: 4.977 ±(99.9%) 0.009 us/op
                 runFibonacci·p0.00:   4.776 us/op
                 runFibonacci·p0.50:   4.904 us/op
                 runFibonacci·p0.90:   4.952 us/op
                 runFibonacci·p0.95:   4.968 us/op
                 runFibonacci·p0.99:   5.584 us/op
                 runFibonacci·p0.999:  16.567 us/op
                 runFibonacci·p0.9999: 56.433 us/op
                 runFibonacci·p1.00:   170.240 us/op

Iteration   7: 4.982 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   4.768 us/op
                 runFibonacci·p0.50:   4.904 us/op
                 runFibonacci·p0.90:   4.960 us/op
                 runFibonacci·p0.95:   4.992 us/op
                 runFibonacci·p0.99:   5.504 us/op
                 runFibonacci·p0.999:  18.296 us/op
                 runFibonacci·p0.9999: 52.862 us/op
                 runFibonacci·p1.00:   137.984 us/op

Iteration   8: 4.971 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   4.768 us/op
                 runFibonacci·p0.50:   4.904 us/op
                 runFibonacci·p0.90:   4.952 us/op
                 runFibonacci·p0.95:   4.968 us/op
                 runFibonacci·p0.99:   5.400 us/op
                 runFibonacci·p0.999:  17.101 us/op
                 runFibonacci·p0.9999: 45.030 us/op
                 runFibonacci·p1.00:   106.496 us/op

Iteration   9: 4.978 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   4.760 us/op
                 runFibonacci·p0.50:   4.912 us/op
                 runFibonacci·p0.90:   4.968 us/op
                 runFibonacci·p0.95:   4.992 us/op
                 runFibonacci·p0.99:   5.720 us/op
                 runFibonacci·p0.999:  16.129 us/op
                 runFibonacci·p0.9999: 49.441 us/op
                 runFibonacci·p1.00:   383.488 us/op

Iteration  10: 4.965 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   4.768 us/op
                 runFibonacci·p0.50:   4.904 us/op
                 runFibonacci·p0.90:   4.952 us/op
                 runFibonacci·p0.95:   4.968 us/op
                 runFibonacci·p0.99:   5.656 us/op
                 runFibonacci·p0.999:  15.398 us/op
                 runFibonacci·p0.9999: 45.861 us/op
                 runFibonacci·p1.00:   117.632 us/op

Iteration  11: 4.973 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   4.768 us/op
                 runFibonacci·p0.50:   4.904 us/op
                 runFibonacci·p0.90:   4.952 us/op
                 runFibonacci·p0.95:   4.968 us/op
                 runFibonacci·p0.99:   5.736 us/op
                 runFibonacci·p0.999:  15.840 us/op
                 runFibonacci·p0.9999: 50.595 us/op
                 runFibonacci·p1.00:   219.904 us/op

Iteration  12: 4.994 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   4.792 us/op
                 runFibonacci·p0.50:   4.928 us/op
                 runFibonacci·p0.90:   4.984 us/op
                 runFibonacci·p0.95:   5.008 us/op
                 runFibonacci·p0.99:   5.592 us/op
                 runFibonacci·p0.999:  15.709 us/op
                 runFibonacci·p0.9999: 47.504 us/op
                 runFibonacci·p1.00:   228.096 us/op

Iteration  13: 4.988 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   4.792 us/op
                 runFibonacci·p0.50:   4.928 us/op
                 runFibonacci·p0.90:   4.976 us/op
                 runFibonacci·p0.95:   4.992 us/op
                 runFibonacci·p0.99:   5.712 us/op
                 runFibonacci·p0.999:  15.290 us/op
                 runFibonacci·p0.9999: 46.769 us/op
                 runFibonacci·p1.00:   287.744 us/op

Iteration  14: 4.998 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   4.800 us/op
                 runFibonacci·p0.50:   4.928 us/op
                 runFibonacci·p0.90:   4.976 us/op
                 runFibonacci·p0.95:   5.000 us/op
                 runFibonacci·p0.99:   5.400 us/op
                 runFibonacci·p0.999:  15.950 us/op
                 runFibonacci·p0.9999: 54.485 us/op
                 runFibonacci·p1.00:   246.272 us/op

Iteration  15: 5.007 ±(99.9%) 0.011 us/op
                 runFibonacci·p0.00:   4.800 us/op
                 runFibonacci·p0.50:   4.928 us/op
                 runFibonacci·p0.90:   4.984 us/op
                 runFibonacci·p0.95:   5.008 us/op
                 runFibonacci·p0.99:   5.392 us/op
                 runFibonacci·p0.999:  16.480 us/op
                 runFibonacci·p0.9999: 62.766 us/op
                 runFibonacci·p1.00:   318.464 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 3779762
  mean =      4.980 ±(99.9%) 0.002 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 3779386 
    [ 50.000, 100.000) = 283 
    [100.000, 150.000) = 43 
    [150.000, 200.000) = 36 
    [200.000, 250.000) = 8 
    [250.000, 300.000) = 2 
    [300.000, 350.000) = 1 
    [350.000, 400.000) = 2 
    [400.000, 450.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      4.760 us/op
     p(50.0000) =      4.912 us/op
     p(90.0000) =      4.968 us/op
     p(95.0000) =      4.984 us/op
     p(99.0000) =      5.616 us/op
     p(99.9000) =     15.936 us/op
     p(99.9900) =     49.984 us/op
     p(99.9990) =    157.952 us/op
     p(99.9999) =    329.853 us/op
    p(100.0000) =    456.192 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 81.88% complete, ETA 01:28:33
# Fork: 1 of 1
# Warmup Iteration   1: 8.913 ±(99.9%) 0.038 us/op
# Warmup Iteration   2: 8.884 ±(99.9%) 0.010 us/op
# Warmup Iteration   3: 8.883 ±(99.9%) 0.009 us/op
# Warmup Iteration   4: 8.894 ±(99.9%) 0.015 us/op
# Warmup Iteration   5: 8.893 ±(99.9%) 0.011 us/op
Iteration   1: 8.871 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   8.512 us/op
                 runFibonacci·p0.50:   8.768 us/op
                 runFibonacci·p0.90:   8.864 us/op
                 runFibonacci·p0.95:   8.896 us/op
                 runFibonacci·p0.99:   12.720 us/op
                 runFibonacci·p0.999:  20.625 us/op
                 runFibonacci·p0.9999: 53.398 us/op
                 runFibonacci·p1.00:   210.688 us/op

Iteration   2: 8.906 ±(99.9%) 0.011 us/op
                 runFibonacci·p0.00:   8.544 us/op
                 runFibonacci·p0.50:   8.800 us/op
                 runFibonacci·p0.90:   8.928 us/op
                 runFibonacci·p0.95:   8.976 us/op
                 runFibonacci·p0.99:   12.688 us/op
                 runFibonacci·p0.999:  21.044 us/op
                 runFibonacci·p0.9999: 53.044 us/op
                 runFibonacci·p1.00:   451.072 us/op

Iteration   3: 8.894 ±(99.9%) 0.009 us/op
                 runFibonacci·p0.00:   8.496 us/op
                 runFibonacci·p0.50:   8.768 us/op
                 runFibonacci·p0.90:   8.864 us/op
                 runFibonacci·p0.95:   8.912 us/op
                 runFibonacci·p0.99:   13.040 us/op
                 runFibonacci·p0.999:  23.587 us/op
                 runFibonacci·p0.9999: 60.469 us/op
                 runFibonacci·p1.00:   336.384 us/op

Iteration   4: 8.888 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   8.448 us/op
                 runFibonacci·p0.50:   8.784 us/op
                 runFibonacci·p0.90:   8.880 us/op
                 runFibonacci·p0.95:   8.928 us/op
                 runFibonacci·p0.99:   12.896 us/op
                 runFibonacci·p0.999:  21.088 us/op
                 runFibonacci·p0.9999: 54.185 us/op
                 runFibonacci·p1.00:   116.608 us/op

Iteration   5: 8.886 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   8.528 us/op
                 runFibonacci·p0.50:   8.768 us/op
                 runFibonacci·p0.90:   8.864 us/op
                 runFibonacci·p0.95:   8.896 us/op
                 runFibonacci·p0.99:   13.072 us/op
                 runFibonacci·p0.999:  21.409 us/op
                 runFibonacci·p0.9999: 54.954 us/op
                 runFibonacci·p1.00:   117.248 us/op

Iteration   6: 8.873 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   8.512 us/op
                 runFibonacci·p0.50:   8.768 us/op
                 runFibonacci·p0.90:   8.864 us/op
                 runFibonacci·p0.95:   8.896 us/op
                 runFibonacci·p0.99:   12.688 us/op
                 runFibonacci·p0.999:  20.980 us/op
                 runFibonacci·p0.9999: 48.303 us/op
                 runFibonacci·p1.00:   121.088 us/op

Iteration   7: 8.877 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   8.512 us/op
                 runFibonacci·p0.50:   8.768 us/op
                 runFibonacci·p0.90:   8.848 us/op
                 runFibonacci·p0.95:   8.880 us/op
                 runFibonacci·p0.99:   12.896 us/op
                 runFibonacci·p0.999:  21.408 us/op
                 runFibonacci·p0.9999: 56.763 us/op
                 runFibonacci·p1.00:   131.072 us/op

Iteration   8: 8.888 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   8.512 us/op
                 runFibonacci·p0.50:   8.784 us/op
                 runFibonacci·p0.90:   8.896 us/op
                 runFibonacci·p0.95:   8.928 us/op
                 runFibonacci·p0.99:   12.784 us/op
                 runFibonacci·p0.999:  21.127 us/op
                 runFibonacci·p0.9999: 51.880 us/op
                 runFibonacci·p1.00:   113.280 us/op

Iteration   9: 8.894 ±(99.9%) 0.016 us/op
                 runFibonacci·p0.00:   8.512 us/op
                 runFibonacci·p0.50:   8.768 us/op
                 runFibonacci·p0.90:   8.848 us/op
                 runFibonacci·p0.95:   8.880 us/op
                 runFibonacci·p0.99:   12.702 us/op
                 runFibonacci·p0.999:  22.176 us/op
                 runFibonacci·p0.9999: 95.474 us/op
                 runFibonacci·p1.00:   438.272 us/op

Iteration  10: 8.900 ±(99.9%) 0.012 us/op
                 runFibonacci·p0.00:   8.528 us/op
                 runFibonacci·p0.50:   8.768 us/op
                 runFibonacci·p0.90:   8.848 us/op
                 runFibonacci·p0.95:   8.880 us/op
                 runFibonacci·p0.99:   13.008 us/op
                 runFibonacci·p0.999:  24.000 us/op
                 runFibonacci·p0.9999: 88.042 us/op
                 runFibonacci·p1.00:   216.064 us/op

Iteration  11: 8.904 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   8.496 us/op
                 runFibonacci·p0.50:   8.784 us/op
                 runFibonacci·p0.90:   8.896 us/op
                 runFibonacci·p0.95:   8.944 us/op
                 runFibonacci·p0.99:   12.864 us/op
                 runFibonacci·p0.999:  22.316 us/op
                 runFibonacci·p0.9999: 64.921 us/op
                 runFibonacci·p1.00:   200.192 us/op

Iteration  12: 8.897 ±(99.9%) 0.009 us/op
                 runFibonacci·p0.00:   8.512 us/op
                 runFibonacci·p0.50:   8.784 us/op
                 runFibonacci·p0.90:   8.880 us/op
                 runFibonacci·p0.95:   8.928 us/op
                 runFibonacci·p0.99:   12.896 us/op
                 runFibonacci·p0.999:  21.704 us/op
                 runFibonacci·p0.9999: 53.115 us/op
                 runFibonacci·p1.00:   296.448 us/op

Iteration  13: 8.921 ±(99.9%) 0.034 us/op
                 runFibonacci·p0.00:   8.544 us/op
                 runFibonacci·p0.50:   8.800 us/op
                 runFibonacci·p0.90:   8.912 us/op
                 runFibonacci·p0.95:   8.960 us/op
                 runFibonacci·p0.99:   12.896 us/op
                 runFibonacci·p0.999:  21.024 us/op
                 runFibonacci·p0.9999: 57.078 us/op
                 runFibonacci·p1.00:   2818.048 us/op

Iteration  14: 8.885 ±(99.9%) 0.009 us/op
                 runFibonacci·p0.00:   8.496 us/op
                 runFibonacci·p0.50:   8.784 us/op
                 runFibonacci·p0.90:   8.864 us/op
                 runFibonacci·p0.95:   8.896 us/op
                 runFibonacci·p0.99:   12.864 us/op
                 runFibonacci·p0.999:  20.864 us/op
                 runFibonacci·p0.9999: 53.106 us/op
                 runFibonacci·p1.00:   251.392 us/op

Iteration  15: 8.889 ±(99.9%) 0.009 us/op
                 runFibonacci·p0.00:   8.528 us/op
                 runFibonacci·p0.50:   8.784 us/op
                 runFibonacci·p0.90:   8.880 us/op
                 runFibonacci·p0.95:   8.912 us/op
                 runFibonacci·p0.99:   12.848 us/op
                 runFibonacci·p0.999:  21.312 us/op
                 runFibonacci·p0.9999: 52.525 us/op
                 runFibonacci·p1.00:   241.152 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 4213826
  mean =      8.891 ±(99.9%) 0.003 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 4213810 
    [ 250.000,  500.000) = 15 
    [ 500.000,  750.000) = 0 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      8.448 us/op
     p(50.0000) =      8.784 us/op
     p(90.0000) =      8.880 us/op
     p(95.0000) =      8.928 us/op
     p(99.0000) =     12.864 us/op
     p(99.9000) =     21.574 us/op
     p(99.9900) =     57.960 us/op
     p(99.9990) =    183.666 us/op
     p(99.9999) =    385.903 us/op
    p(100.0000) =   2818.048 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 82.61% complete, ETA 01:25:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.088 ±(99.9%) 0.004 us/op
# Warmup Iteration   2: 0.082 ±(99.9%) 0.002 us/op
# Warmup Iteration   3: 0.094 ±(99.9%) 0.002 us/op
# Warmup Iteration   4: 0.094 ±(99.9%) 0.001 us/op
# Warmup Iteration   5: 0.094 ±(99.9%) 0.001 us/op
Iteration   1: 0.095 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.073 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.110 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.204 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.574 us/op
                 findLastPrefixUsingScanner1·p1.00:   82.432 us/op

Iteration   2: 0.094 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.073 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.181 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.840 us/op
                 findLastPrefixUsingScanner1·p1.00:   72.832 us/op

Iteration   3: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.073 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.105 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.107 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.110 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.182 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.979 us/op
                 findLastPrefixUsingScanner1·p1.00:   92.544 us/op

Iteration   4: 0.095 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.073 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.192 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.652 us/op
                 findLastPrefixUsingScanner1·p1.00:   129.664 us/op

Iteration   5: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.179 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.504 us/op
                 findLastPrefixUsingScanner1·p1.00:   50.304 us/op

Iteration   6: 0.094 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.073 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.180 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.299 us/op
                 findLastPrefixUsingScanner1·p1.00:   65.536 us/op

Iteration   7: 0.094 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.074 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.107 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.118 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.179 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.806 us/op
                 findLastPrefixUsingScanner1·p1.00:   96.128 us/op

Iteration   8: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.105 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.107 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.178 us/op
                 findLastPrefixUsingScanner1·p0.9999: 6.928 us/op
                 findLastPrefixUsingScanner1·p1.00:   39.168 us/op

Iteration   9: 0.097 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.074 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.120 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.199 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.240 us/op
                 findLastPrefixUsingScanner1·p1.00:   43.072 us/op

Iteration  10: 0.094 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.175 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.743 us/op
                 findLastPrefixUsingScanner1·p1.00:   37.632 us/op

Iteration  11: 0.094 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.107 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.213 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.554 us/op
                 findLastPrefixUsingScanner1·p1.00:   97.792 us/op

Iteration  12: 0.094 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.073 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.110 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.175 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.716 us/op
                 findLastPrefixUsingScanner1·p1.00:   158.208 us/op

Iteration  13: 0.095 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.074 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.107 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.107 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.118 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.214 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.315 us/op
                 findLastPrefixUsingScanner1·p1.00:   29.664 us/op

Iteration  14: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.107 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.179 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.573 us/op
                 findLastPrefixUsingScanner1·p1.00:   44.672 us/op

Iteration  15: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.107 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.179 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.918 us/op
                 findLastPrefixUsingScanner1·p1.00:   41.280 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 5101793
  mean =      0.094 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  12.500) = 5101649 
    [ 12.500,  25.000) = 79 
    [ 25.000,  37.500) = 35 
    [ 37.500,  50.000) = 14 
    [ 50.000,  62.500) = 6 
    [ 62.500,  75.000) = 3 
    [ 75.000,  87.500) = 1 
    [ 87.500, 100.000) = 3 
    [100.000, 112.500) = 1 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 1 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 1 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.072 us/op
     p(50.0000) =      0.089 us/op
     p(90.0000) =      0.106 us/op
     p(95.0000) =      0.108 us/op
     p(99.0000) =      0.111 us/op
     p(99.9000) =      0.182 us/op
     p(99.9900) =      7.991 us/op
     p(99.9990) =     29.501 us/op
     p(99.9999) =     95.763 us/op
    p(100.0000) =    158.208 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 83.33% complete, ETA 01:21:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.449 ±(99.9%) 0.009 us/op
# Warmup Iteration   2: 0.482 ±(99.9%) 0.003 us/op
# Warmup Iteration   3: 0.405 ±(99.9%) 0.006 us/op
# Warmup Iteration   4: 0.403 ±(99.9%) 0.005 us/op
# Warmup Iteration   5: 0.415 ±(99.9%) 0.005 us/op
Iteration   1: 0.413 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.379 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.393 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.409 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.412 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.421 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.707 us/op
                 findLastPrefixUsingScanner1·p0.9999: 19.497 us/op
                 findLastPrefixUsingScanner1·p1.00:   151.040 us/op

Iteration   2: 0.404 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.370 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.384 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.400 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.401 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.411 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.792 us/op
                 findLastPrefixUsingScanner1·p0.9999: 15.636 us/op
                 findLastPrefixUsingScanner1·p1.00:   488.448 us/op

Iteration   3: 0.409 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.379 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.391 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.406 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.408 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.416 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.695 us/op
                 findLastPrefixUsingScanner1·p0.9999: 14.645 us/op
                 findLastPrefixUsingScanner1·p1.00:   50.176 us/op

Iteration   4: 0.414 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.379 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.391 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.407 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.408 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.418 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.581 us/op
                 findLastPrefixUsingScanner1·p0.9999: 23.045 us/op
                 findLastPrefixUsingScanner1·p1.00:   94.720 us/op

Iteration   5: 0.404 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.371 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.384 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.399 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.401 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.409 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.101 us/op
                 findLastPrefixUsingScanner1·p0.9999: 24.137 us/op
                 findLastPrefixUsingScanner1·p1.00:   90.496 us/op

Iteration   6: 0.406 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.375 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.387 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.403 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.404 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.413 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.703 us/op
                 findLastPrefixUsingScanner1·p0.9999: 20.015 us/op
                 findLastPrefixUsingScanner1·p1.00:   100.224 us/op

Iteration   7: 0.417 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.385 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.398 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.414 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.416 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.424 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.507 us/op
                 findLastPrefixUsingScanner1·p0.9999: 20.221 us/op
                 findLastPrefixUsingScanner1·p1.00:   108.032 us/op

Iteration   8: 0.401 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.370 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.383 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.399 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.401 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.407 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.655 us/op
                 findLastPrefixUsingScanner1·p0.9999: 20.171 us/op
                 findLastPrefixUsingScanner1·p1.00:   90.880 us/op

Iteration   9: 0.418 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.372 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.401 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.416 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.418 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.422 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.952 us/op
                 findLastPrefixUsingScanner1·p0.9999: 19.965 us/op
                 findLastPrefixUsingScanner1·p1.00:   73.344 us/op

Iteration  10: 0.401 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.372 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.385 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.401 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.402 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.411 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.759 us/op
                 findLastPrefixUsingScanner1·p0.9999: 12.823 us/op
                 findLastPrefixUsingScanner1·p1.00:   94.720 us/op

Iteration  11: 0.405 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.374 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.386 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.402 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.403 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.409 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.757 us/op
                 findLastPrefixUsingScanner1·p0.9999: 15.446 us/op
                 findLastPrefixUsingScanner1·p1.00:   232.960 us/op

Iteration  12: 0.419 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.372 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.400 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.416 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.418 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.428 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.022 us/op
                 findLastPrefixUsingScanner1·p0.9999: 14.646 us/op
                 findLastPrefixUsingScanner1·p1.00:   125.184 us/op

Iteration  13: 0.405 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.373 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.387 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.403 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.405 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.413 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.819 us/op
                 findLastPrefixUsingScanner1·p0.9999: 12.429 us/op
                 findLastPrefixUsingScanner1·p1.00:   92.288 us/op

Iteration  14: 0.418 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.372 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.401 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.417 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.419 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.428 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.440 us/op
                 findLastPrefixUsingScanner1·p0.9999: 13.992 us/op
                 findLastPrefixUsingScanner1·p1.00:   179.200 us/op

Iteration  15: 0.414 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.378 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.392 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.407 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.409 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.417 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.941 us/op
                 findLastPrefixUsingScanner1·p0.9999: 13.785 us/op
                 findLastPrefixUsingScanner1·p1.00:   430.080 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 3244209
  mean =      0.410 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 3244169 
    [ 50.000, 100.000) = 31 
    [100.000, 150.000) = 3 
    [150.000, 200.000) = 2 
    [200.000, 250.000) = 1 
    [250.000, 300.000) = 0 
    [300.000, 350.000) = 1 
    [350.000, 400.000) = 0 
    [400.000, 450.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      0.370 us/op
     p(50.0000) =      0.392 us/op
     p(90.0000) =      0.408 us/op
     p(95.0000) =      0.413 us/op
     p(99.0000) =      0.421 us/op
     p(99.9000) =      4.792 us/op
     p(99.9900) =     17.482 us/op
     p(99.9990) =     55.425 us/op
     p(99.9999) =    315.770 us/op
    p(100.0000) =    488.448 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 84.06% complete, ETA 01:17:57
# Fork: 1 of 1
# Warmup Iteration   1: 4.353 ±(99.9%) 0.034 us/op
# Warmup Iteration   2: 4.591 ±(99.9%) 0.007 us/op
# Warmup Iteration   3: 4.545 ±(99.9%) 0.006 us/op
# Warmup Iteration   4: 4.510 ±(99.9%) 0.006 us/op
# Warmup Iteration   5: 4.467 ±(99.9%) 0.006 us/op
Iteration   1: 4.621 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.480 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.568 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.608 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.616 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.808 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.761 us/op
                 findLastPrefixUsingScanner1·p0.9999: 43.369 us/op
                 findLastPrefixUsingScanner1·p1.00:   103.936 us/op

Iteration   2: 4.559 ±(99.9%) 0.011 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.424 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.496 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.536 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.552 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.704 us/op
                 findLastPrefixUsingScanner1·p0.999:  14.115 us/op
                 findLastPrefixUsingScanner1·p0.9999: 45.851 us/op
                 findLastPrefixUsingScanner1·p1.00:   488.448 us/op

Iteration   3: 4.513 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.392 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.456 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.480 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.496 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.192 us/op
                 findLastPrefixUsingScanner1·p0.999:  14.218 us/op
                 findLastPrefixUsingScanner1·p0.9999: 45.919 us/op
                 findLastPrefixUsingScanner1·p1.00:   263.168 us/op

Iteration   4: 4.492 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.368 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.432 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.456 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.464 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.216 us/op
                 findLastPrefixUsingScanner1·p0.999:  14.179 us/op
                 findLastPrefixUsingScanner1·p0.9999: 51.600 us/op
                 findLastPrefixUsingScanner1·p1.00:   183.040 us/op

Iteration   5: 4.530 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.408 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.472 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.496 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.504 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.552 us/op
                 findLastPrefixUsingScanner1·p0.999:  14.235 us/op
                 findLastPrefixUsingScanner1·p0.9999: 49.627 us/op
                 findLastPrefixUsingScanner1·p1.00:   125.824 us/op

Iteration   6: 4.497 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.384 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.440 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.464 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.472 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.408 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.940 us/op
                 findLastPrefixUsingScanner1·p0.9999: 48.080 us/op
                 findLastPrefixUsingScanner1·p1.00:   111.488 us/op

Iteration   7: 4.531 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.408 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.480 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.512 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.520 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.736 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.610 us/op
                 findLastPrefixUsingScanner1·p0.9999: 40.539 us/op
                 findLastPrefixUsingScanner1·p1.00:   126.976 us/op

Iteration   8: 4.505 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.392 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.448 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.472 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.480 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.736 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.479 us/op
                 findLastPrefixUsingScanner1·p0.9999: 41.750 us/op
                 findLastPrefixUsingScanner1·p1.00:   402.432 us/op

Iteration   9: 4.569 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.456 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.520 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.544 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.560 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.784 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.664 us/op
                 findLastPrefixUsingScanner1·p0.9999: 39.023 us/op
                 findLastPrefixUsingScanner1·p1.00:   146.944 us/op

Iteration  10: 4.482 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.376 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.432 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.448 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.456 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.840 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.456 us/op
                 findLastPrefixUsingScanner1·p0.9999: 44.662 us/op
                 findLastPrefixUsingScanner1·p1.00:   127.872 us/op

Iteration  11: 4.428 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.328 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.376 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.400 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.408 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.552 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.164 us/op
                 findLastPrefixUsingScanner1·p0.9999: 41.881 us/op
                 findLastPrefixUsingScanner1·p1.00:   196.608 us/op

Iteration  12: 4.540 ±(99.9%) 0.033 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.408 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.472 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.504 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.512 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.808 us/op
                 findLastPrefixUsingScanner1·p0.999:  14.475 us/op
                 findLastPrefixUsingScanner1·p0.9999: 43.469 us/op
                 findLastPrefixUsingScanner1·p1.00:   2752.512 us/op

Iteration  13: 4.588 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.432 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.520 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.544 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.552 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.912 us/op
                 findLastPrefixUsingScanner1·p0.999:  15.508 us/op
                 findLastPrefixUsingScanner1·p0.9999: 63.577 us/op
                 findLastPrefixUsingScanner1·p1.00:   244.992 us/op

Iteration  14: 4.562 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.448 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.504 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.528 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.536 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.800 us/op
                 findLastPrefixUsingScanner1·p0.999:  14.528 us/op
                 findLastPrefixUsingScanner1·p0.9999: 47.453 us/op
                 findLastPrefixUsingScanner1·p1.00:   225.792 us/op

Iteration  15: 4.563 ±(99.9%) 0.016 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.432 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.496 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.512 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.520 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.824 us/op
                 findLastPrefixUsingScanner1·p0.999:  14.194 us/op
                 findLastPrefixUsingScanner1·p0.9999: 54.824 us/op
                 findLastPrefixUsingScanner1·p1.00:   534.528 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 4161121
  mean =      4.532 ±(99.9%) 0.003 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 4161107 
    [ 250.000,  500.000) = 11 
    [ 500.000,  750.000) = 2 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      4.328 us/op
     p(50.0000) =      4.472 us/op
     p(90.0000) =      4.536 us/op
     p(95.0000) =      4.568 us/op
     p(99.0000) =      4.872 us/op
     p(99.9000) =     14.016 us/op
     p(99.9900) =     46.656 us/op
     p(99.9990) =    127.403 us/op
     p(99.9999) =    486.716 us/op
    p(100.0000) =   2752.512 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 84.78% complete, ETA 01:14:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.087 ±(99.9%) 0.002 us/op
# Warmup Iteration   2: 0.083 ±(99.9%) 0.003 us/op
# Warmup Iteration   3: 0.092 ±(99.9%) 0.001 us/op
# Warmup Iteration   4: 0.091 ±(99.9%) 0.001 us/op
# Warmup Iteration   5: 0.093 ±(99.9%) 0.001 us/op
Iteration   1: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.073 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.099 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.100 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.108 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.185 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.493 us/op
                 findLastPrefixUsingScanner2·p1.00:   40.000 us/op

Iteration   2: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.075 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.090 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.100 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.102 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.177 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.691 us/op
                 findLastPrefixUsingScanner2·p1.00:   37.952 us/op

Iteration   3: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.073 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.099 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.100 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.102 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.183 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.964 us/op
                 findLastPrefixUsingScanner2·p1.00:   47.936 us/op

Iteration   4: 0.092 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.099 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.100 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.108 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.175 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.602 us/op
                 findLastPrefixUsingScanner2·p1.00:   32.512 us/op

Iteration   5: 0.092 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.073 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.099 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.100 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.177 us/op
                 findLastPrefixUsingScanner2·p0.9999: 6.809 us/op
                 findLastPrefixUsingScanner2·p1.00:   28.800 us/op

Iteration   6: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.073 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.099 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.100 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.103 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.201 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.492 us/op
                 findLastPrefixUsingScanner2·p1.00:   38.144 us/op

Iteration   7: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.074 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.090 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.100 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.101 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.178 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.268 us/op
                 findLastPrefixUsingScanner2·p1.00:   47.232 us/op

Iteration   8: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.073 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.099 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.100 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.180 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.891 us/op
                 findLastPrefixUsingScanner2·p1.00:   48.000 us/op

Iteration   9: 0.091 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.099 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.100 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.105 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.168 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.613 us/op
                 findLastPrefixUsingScanner2·p1.00:   46.592 us/op

Iteration  10: 0.091 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.073 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.099 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.099 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.102 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.172 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.926 us/op
                 findLastPrefixUsingScanner2·p1.00:   56.640 us/op

Iteration  11: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.073 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.099 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.099 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.101 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.171 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.611 us/op
                 findLastPrefixUsingScanner2·p1.00:   73.088 us/op

Iteration  12: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.073 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.099 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.100 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.171 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.976 us/op
                 findLastPrefixUsingScanner2·p1.00:   48.128 us/op

Iteration  13: 0.093 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.099 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.100 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.102 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.175 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.283 us/op
                 findLastPrefixUsingScanner2·p1.00:   167.680 us/op

Iteration  14: 0.092 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.073 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.099 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.100 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.108 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.171 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.990 us/op
                 findLastPrefixUsingScanner2·p1.00:   51.648 us/op

Iteration  15: 0.092 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.073 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.099 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.100 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.172 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.286 us/op
                 findLastPrefixUsingScanner2·p1.00:   49.728 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 5267306
  mean =      0.092 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  12.500) = 5267190 
    [ 12.500,  25.000) = 71 
    [ 25.000,  37.500) = 22 
    [ 37.500,  50.000) = 15 
    [ 50.000,  62.500) = 3 
    [ 62.500,  75.000) = 3 
    [ 75.000,  87.500) = 0 
    [ 87.500, 100.000) = 0 
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 1 
    [125.000, 137.500) = 0 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 1 
    [175.000, 187.500) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.072 us/op
     p(50.0000) =      0.089 us/op
     p(90.0000) =      0.099 us/op
     p(95.0000) =      0.100 us/op
     p(99.0000) =      0.107 us/op
     p(99.9000) =      0.177 us/op
     p(99.9900) =      7.896 us/op
     p(99.9990) =     21.268 us/op
     p(99.9999) =     64.377 us/op
    p(100.0000) =    167.680 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 85.50% complete, ETA 01:10:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.441 ±(99.9%) 0.003 us/op
# Warmup Iteration   2: 0.435 ±(99.9%) 0.002 us/op
# Warmup Iteration   3: 0.511 ±(99.9%) 0.003 us/op
# Warmup Iteration   4: 0.508 ±(99.9%) 0.002 us/op
# Warmup Iteration   5: 0.508 ±(99.9%) 0.003 us/op
Iteration   1: 0.510 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.478 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.493 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.511 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.511 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.513 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.415 us/op
                 findLastPrefixUsingScanner2·p0.9999: 14.729 us/op
                 findLastPrefixUsingScanner2·p1.00:   41.984 us/op

Iteration   2: 0.509 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.478 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.493 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.511 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.511 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.514 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.381 us/op
                 findLastPrefixUsingScanner2·p0.9999: 11.143 us/op
                 findLastPrefixUsingScanner2·p1.00:   170.752 us/op

Iteration   3: 0.508 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.475 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.492 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.509 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.510 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.513 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.073 us/op
                 findLastPrefixUsingScanner2·p0.9999: 12.568 us/op
                 findLastPrefixUsingScanner2·p1.00:   68.224 us/op

Iteration   4: 0.511 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.478 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.493 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.510 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.511 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.515 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.379 us/op
                 findLastPrefixUsingScanner2·p0.9999: 18.854 us/op
                 findLastPrefixUsingScanner2·p1.00:   193.536 us/op

Iteration   5: 0.509 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.479 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.494 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.511 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.512 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.515 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.247 us/op
                 findLastPrefixUsingScanner2·p0.9999: 11.484 us/op
                 findLastPrefixUsingScanner2·p1.00:   56.512 us/op

Iteration   6: 0.509 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.476 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.492 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.510 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.511 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.513 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.311 us/op
                 findLastPrefixUsingScanner2·p0.9999: 12.686 us/op
                 findLastPrefixUsingScanner2·p1.00:   100.352 us/op

Iteration   7: 0.519 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.487 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.502 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.519 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.520 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.523 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.515 us/op
                 findLastPrefixUsingScanner2·p0.9999: 14.393 us/op
                 findLastPrefixUsingScanner2·p1.00:   78.208 us/op

Iteration   8: 0.508 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.477 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.492 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.510 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.511 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.517 us/op
                 findLastPrefixUsingScanner2·p0.999:  3.992 us/op
                 findLastPrefixUsingScanner2·p0.9999: 11.609 us/op
                 findLastPrefixUsingScanner2·p1.00:   82.048 us/op

Iteration   9: 0.511 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.479 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.493 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.511 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.512 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.513 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.547 us/op
                 findLastPrefixUsingScanner2·p0.9999: 13.938 us/op
                 findLastPrefixUsingScanner2·p1.00:   143.104 us/op

Iteration  10: 0.506 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.477 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.492 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.509 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.510 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.512 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.137 us/op
                 findLastPrefixUsingScanner2·p0.9999: 11.057 us/op
                 findLastPrefixUsingScanner2·p1.00:   120.832 us/op

Iteration  11: 0.515 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.480 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.501 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.517 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.519 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.524 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.285 us/op
                 findLastPrefixUsingScanner2·p0.9999: 12.901 us/op
                 findLastPrefixUsingScanner2·p1.00:   97.536 us/op

Iteration  12: 0.519 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.487 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.501 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.519 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.519 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.520 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.525 us/op
                 findLastPrefixUsingScanner2·p0.9999: 22.448 us/op
                 findLastPrefixUsingScanner2·p1.00:   123.776 us/op

Iteration  13: 0.510 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.479 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.493 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.511 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.512 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.515 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.292 us/op
                 findLastPrefixUsingScanner2·p0.9999: 13.818 us/op
                 findLastPrefixUsingScanner2·p1.00:   141.824 us/op

Iteration  14: 0.512 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.477 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.492 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.510 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.511 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.512 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.688 us/op
                 findLastPrefixUsingScanner2·p0.9999: 14.776 us/op
                 findLastPrefixUsingScanner2·p1.00:   247.296 us/op

Iteration  15: 0.510 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.477 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.492 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.510 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.511 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.515 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.481 us/op
                 findLastPrefixUsingScanner2·p0.9999: 12.931 us/op
                 findLastPrefixUsingScanner2·p1.00:   235.776 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 4998520
  mean =      0.511 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 4998296 
    [ 25.000,  50.000) = 183 
    [ 50.000,  75.000) = 19 
    [ 75.000, 100.000) = 10 
    [100.000, 125.000) = 5 
    [125.000, 150.000) = 2 
    [150.000, 175.000) = 1 
    [175.000, 200.000) = 1 
    [200.000, 225.000) = 1 
    [225.000, 250.000) = 2 
    [250.000, 275.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.475 us/op
     p(50.0000) =      0.496 us/op
     p(90.0000) =      0.511 us/op
     p(95.0000) =      0.513 us/op
     p(99.0000) =      0.520 us/op
     p(99.9000) =      4.328 us/op
     p(99.9900) =     12.994 us/op
     p(99.9990) =     46.407 us/op
     p(99.9999) =    170.786 us/op
    p(100.0000) =    247.296 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 86.23% complete, ETA 01:07:20
# Fork: 1 of 1
# Warmup Iteration   1: 4.148 ±(99.9%) 0.017 us/op
# Warmup Iteration   2: 4.445 ±(99.9%) 0.006 us/op
# Warmup Iteration   3: 4.114 ±(99.9%) 0.006 us/op
# Warmup Iteration   4: 4.198 ±(99.9%) 0.006 us/op
# Warmup Iteration   5: 4.184 ±(99.9%) 0.007 us/op
Iteration   1: 4.178 ±(99.9%) 0.011 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.044 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.112 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.136 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.152 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.888 us/op
                 findLastPrefixUsingScanner2·p0.999:  13.921 us/op
                 findLastPrefixUsingScanner2·p0.9999: 53.172 us/op
                 findLastPrefixUsingScanner2·p1.00:   438.784 us/op

Iteration   2: 4.049 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.952 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.004 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.020 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.028 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.168 us/op
                 findLastPrefixUsingScanner2·p0.999:  12.877 us/op
                 findLastPrefixUsingScanner2·p0.9999: 37.421 us/op
                 findLastPrefixUsingScanner2·p1.00:   141.312 us/op

Iteration   3: 4.196 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.060 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.144 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.168 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.176 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.568 us/op
                 findLastPrefixUsingScanner2·p0.999:  13.511 us/op
                 findLastPrefixUsingScanner2·p0.9999: 42.371 us/op
                 findLastPrefixUsingScanner2·p1.00:   205.824 us/op

Iteration   4: 4.115 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.992 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.068 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.088 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.096 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.496 us/op
                 findLastPrefixUsingScanner2·p0.999:  12.827 us/op
                 findLastPrefixUsingScanner2·p0.9999: 33.868 us/op
                 findLastPrefixUsingScanner2·p1.00:   103.936 us/op

Iteration   5: 4.127 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.980 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.076 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.104 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.112 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.312 us/op
                 findLastPrefixUsingScanner2·p0.999:  13.104 us/op
                 findLastPrefixUsingScanner2·p0.9999: 44.395 us/op
                 findLastPrefixUsingScanner2·p1.00:   123.008 us/op

Iteration   6: 4.151 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.036 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.104 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.128 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.136 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.248 us/op
                 findLastPrefixUsingScanner2·p0.999:  12.928 us/op
                 findLastPrefixUsingScanner2·p0.9999: 41.646 us/op
                 findLastPrefixUsingScanner2·p1.00:   128.128 us/op

Iteration   7: 4.146 ±(99.9%) 0.010 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.020 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.092 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.112 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.120 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.352 us/op
                 findLastPrefixUsingScanner2·p0.999:  13.057 us/op
                 findLastPrefixUsingScanner2·p0.9999: 41.973 us/op
                 findLastPrefixUsingScanner2·p1.00:   496.128 us/op

Iteration   8: 4.131 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.008 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.084 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.104 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.112 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.384 us/op
                 findLastPrefixUsingScanner2·p0.999:  13.037 us/op
                 findLastPrefixUsingScanner2·p0.9999: 36.165 us/op
                 findLastPrefixUsingScanner2·p1.00:   113.280 us/op

Iteration   9: 4.202 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.072 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.144 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.176 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.184 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.664 us/op
                 findLastPrefixUsingScanner2·p0.999:  14.122 us/op
                 findLastPrefixUsingScanner2·p0.9999: 43.551 us/op
                 findLastPrefixUsingScanner2·p1.00:   139.008 us/op

Iteration  10: 4.166 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.040 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.112 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.136 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.144 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.551 us/op
                 findLastPrefixUsingScanner2·p0.999:  13.552 us/op
                 findLastPrefixUsingScanner2·p0.9999: 44.891 us/op
                 findLastPrefixUsingScanner2·p1.00:   169.472 us/op

Iteration  11: 4.005 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.920 us/op
                 findLastPrefixUsingScanner2·p0.50:   3.964 us/op
                 findLastPrefixUsingScanner2·p0.90:   3.972 us/op
                 findLastPrefixUsingScanner2·p0.95:   3.976 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.096 us/op
                 findLastPrefixUsingScanner2·p0.999:  12.880 us/op
                 findLastPrefixUsingScanner2·p0.9999: 32.451 us/op
                 findLastPrefixUsingScanner2·p1.00:   120.832 us/op

Iteration  12: 4.163 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.028 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.112 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.136 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.144 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.416 us/op
                 findLastPrefixUsingScanner2·p0.999:  13.408 us/op
                 findLastPrefixUsingScanner2·p0.9999: 46.978 us/op
                 findLastPrefixUsingScanner2·p1.00:   187.136 us/op

Iteration  13: 4.239 ±(99.9%) 0.033 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.080 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.168 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.200 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.208 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.432 us/op
                 findLastPrefixUsingScanner2·p0.999:  13.680 us/op
                 findLastPrefixUsingScanner2·p0.9999: 51.664 us/op
                 findLastPrefixUsingScanner2·p1.00:   2863.104 us/op

Iteration  14: 4.203 ±(99.9%) 0.011 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.052 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.136 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.168 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.176 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.616 us/op
                 findLastPrefixUsingScanner2·p0.999:  14.566 us/op
                 findLastPrefixUsingScanner2·p0.9999: 52.877 us/op
                 findLastPrefixUsingScanner2·p1.00:   518.144 us/op

Iteration  15: 4.160 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.036 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.104 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.128 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.136 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.408 us/op
                 findLastPrefixUsingScanner2·p0.999:  14.144 us/op
                 findLastPrefixUsingScanner2·p0.9999: 47.343 us/op
                 findLastPrefixUsingScanner2·p1.00:   297.472 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 4548356
  mean =      4.148 ±(99.9%) 0.003 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 4548339 
    [ 250.000,  500.000) = 15 
    [ 500.000,  750.000) = 1 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      3.920 us/op
     p(50.0000) =      4.104 us/op
     p(90.0000) =      4.160 us/op
     p(95.0000) =      4.176 us/op
     p(99.0000) =      4.384 us/op
     p(99.9000) =     13.424 us/op
     p(99.9900) =     43.712 us/op
     p(99.9990) =    129.681 us/op
     p(99.9999) =    438.503 us/op
    p(100.0000) =   2863.104 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 86.95% complete, ETA 01:03:48
# Fork: 1 of 1
# Warmup Iteration   1: 14349.328 ±(99.9%) 108.889 us/op
# Warmup Iteration   2: 14295.274 ±(99.9%) 10.406 us/op
# Warmup Iteration   3: 14290.546 ±(99.9%) 7.012 us/op
# Warmup Iteration   4: 14283.431 ±(99.9%) 7.474 us/op
# Warmup Iteration   5: 14281.465 ±(99.9%) 13.972 us/op
Iteration   1: 14305.224 ±(99.9%) 13.347 us/op
                 runAlgorithm·p0.00:   14204.928 us/op
                 runAlgorithm·p0.50:   14270.464 us/op
                 runAlgorithm·p0.90:   14368.768 us/op
                 runAlgorithm·p0.95:   14548.992 us/op
                 runAlgorithm·p0.99:   14794.752 us/op
                 runAlgorithm·p0.999:  14974.976 us/op
                 runAlgorithm·p0.9999: 14974.976 us/op
                 runAlgorithm·p1.00:   14974.976 us/op

Iteration   2: 14278.960 ±(99.9%) 6.693 us/op
                 runAlgorithm·p0.00:   14204.928 us/op
                 runAlgorithm·p0.50:   14270.464 us/op
                 runAlgorithm·p0.90:   14336.000 us/op
                 runAlgorithm·p0.95:   14368.768 us/op
                 runAlgorithm·p0.99:   14499.676 us/op
                 runAlgorithm·p0.999:  14647.296 us/op
                 runAlgorithm·p0.9999: 14647.296 us/op
                 runAlgorithm·p1.00:   14647.296 us/op

Iteration   3: 14282.143 ±(99.9%) 6.986 us/op
                 runAlgorithm·p0.00:   14204.928 us/op
                 runAlgorithm·p0.50:   14270.464 us/op
                 runAlgorithm·p0.90:   14336.000 us/op
                 runAlgorithm·p0.95:   14368.768 us/op
                 runAlgorithm·p0.99:   14548.828 us/op
                 runAlgorithm·p0.999:  14630.912 us/op
                 runAlgorithm·p0.9999: 14630.912 us/op
                 runAlgorithm·p1.00:   14630.912 us/op

Iteration   4: 14330.390 ±(99.9%) 7.227 us/op
                 runAlgorithm·p0.00:   14221.312 us/op
                 runAlgorithm·p0.50:   14319.616 us/op
                 runAlgorithm·p0.90:   14401.536 us/op
                 runAlgorithm·p0.95:   14434.304 us/op
                 runAlgorithm·p0.99:   14532.608 us/op
                 runAlgorithm·p0.999:  14647.296 us/op
                 runAlgorithm·p0.9999: 14647.296 us/op
                 runAlgorithm·p1.00:   14647.296 us/op

Iteration   5: 14297.029 ±(99.9%) 6.110 us/op
                 runAlgorithm·p0.00:   14221.312 us/op
                 runAlgorithm·p0.50:   14286.848 us/op
                 runAlgorithm·p0.90:   14352.384 us/op
                 runAlgorithm·p0.95:   14385.152 us/op
                 runAlgorithm·p0.99:   14483.292 us/op
                 runAlgorithm·p0.999:  14581.760 us/op
                 runAlgorithm·p0.9999: 14581.760 us/op
                 runAlgorithm·p1.00:   14581.760 us/op

Iteration   6: 14303.302 ±(99.9%) 6.846 us/op
                 runAlgorithm·p0.00:   14221.312 us/op
                 runAlgorithm·p0.50:   14286.848 us/op
                 runAlgorithm·p0.90:   14368.768 us/op
                 runAlgorithm·p0.95:   14401.536 us/op
                 runAlgorithm·p0.99:   14532.608 us/op
                 runAlgorithm·p0.999:  14680.064 us/op
                 runAlgorithm·p0.9999: 14680.064 us/op
                 runAlgorithm·p1.00:   14680.064 us/op

Iteration   7: 14307.592 ±(99.9%) 7.949 us/op
                 runAlgorithm·p0.00:   14221.312 us/op
                 runAlgorithm·p0.50:   14286.848 us/op
                 runAlgorithm·p0.90:   14368.768 us/op
                 runAlgorithm·p0.95:   14401.536 us/op
                 runAlgorithm·p0.99:   14565.376 us/op
                 runAlgorithm·p0.999:  14843.904 us/op
                 runAlgorithm·p0.9999: 14843.904 us/op
                 runAlgorithm·p1.00:   14843.904 us/op

Iteration   8: 14293.682 ±(99.9%) 7.283 us/op
                 runAlgorithm·p0.00:   14221.312 us/op
                 runAlgorithm·p0.50:   14286.848 us/op
                 runAlgorithm·p0.90:   14352.384 us/op
                 runAlgorithm·p0.95:   14368.768 us/op
                 runAlgorithm·p0.99:   14532.608 us/op
                 runAlgorithm·p0.999:  14843.904 us/op
                 runAlgorithm·p0.9999: 14843.904 us/op
                 runAlgorithm·p1.00:   14843.904 us/op

Iteration   9: 14294.548 ±(99.9%) 6.335 us/op
                 runAlgorithm·p0.00:   14221.312 us/op
                 runAlgorithm·p0.50:   14286.848 us/op
                 runAlgorithm·p0.90:   14352.384 us/op
                 runAlgorithm·p0.95:   14385.152 us/op
                 runAlgorithm·p0.99:   14499.840 us/op
                 runAlgorithm·p0.999:  14565.376 us/op
                 runAlgorithm·p0.9999: 14565.376 us/op
                 runAlgorithm·p1.00:   14565.376 us/op

Iteration  10: 14292.629 ±(99.9%) 6.407 us/op
                 runAlgorithm·p0.00:   14221.312 us/op
                 runAlgorithm·p0.50:   14286.848 us/op
                 runAlgorithm·p0.90:   14352.384 us/op
                 runAlgorithm·p0.95:   14385.152 us/op
                 runAlgorithm·p0.99:   14516.060 us/op
                 runAlgorithm·p0.999:  14696.448 us/op
                 runAlgorithm·p0.9999: 14696.448 us/op
                 runAlgorithm·p1.00:   14696.448 us/op

Iteration  11: 14297.138 ±(99.9%) 8.126 us/op
                 runAlgorithm·p0.00:   14204.928 us/op
                 runAlgorithm·p0.50:   14286.848 us/op
                 runAlgorithm·p0.90:   14368.768 us/op
                 runAlgorithm·p0.95:   14434.304 us/op
                 runAlgorithm·p0.99:   14565.376 us/op
                 runAlgorithm·p0.999:  14843.904 us/op
                 runAlgorithm·p0.9999: 14843.904 us/op
                 runAlgorithm·p1.00:   14843.904 us/op

Iteration  12: 14279.428 ±(99.9%) 6.400 us/op
                 runAlgorithm·p0.00:   14204.928 us/op
                 runAlgorithm·p0.50:   14270.464 us/op
                 runAlgorithm·p0.90:   14336.000 us/op
                 runAlgorithm·p0.95:   14384.333 us/op
                 runAlgorithm·p0.99:   14467.072 us/op
                 runAlgorithm·p0.999:  14548.992 us/op
                 runAlgorithm·p0.9999: 14548.992 us/op
                 runAlgorithm·p1.00:   14548.992 us/op

Iteration  13: 14296.000 ±(99.9%) 21.153 us/op
                 runAlgorithm·p0.00:   14204.928 us/op
                 runAlgorithm·p0.50:   14270.464 us/op
                 runAlgorithm·p0.90:   14368.768 us/op
                 runAlgorithm·p0.95:   14499.840 us/op
                 runAlgorithm·p0.99:   14581.596 us/op
                 runAlgorithm·p0.999:  17137.664 us/op
                 runAlgorithm·p0.9999: 17137.664 us/op
                 runAlgorithm·p1.00:   17137.664 us/op

Iteration  14: 14292.512 ±(99.9%) 9.653 us/op
                 runAlgorithm·p0.00:   14204.928 us/op
                 runAlgorithm·p0.50:   14270.464 us/op
                 runAlgorithm·p0.90:   14352.384 us/op
                 runAlgorithm·p0.95:   14434.304 us/op
                 runAlgorithm·p0.99:   14679.409 us/op
                 runAlgorithm·p0.999:  14893.056 us/op
                 runAlgorithm·p0.9999: 14893.056 us/op
                 runAlgorithm·p1.00:   14893.056 us/op

Iteration  15: 14314.952 ±(99.9%) 10.104 us/op
                 runAlgorithm·p0.00:   14204.928 us/op
                 runAlgorithm·p0.50:   14303.232 us/op
                 runAlgorithm·p0.90:   14401.536 us/op
                 runAlgorithm·p0.95:   14467.072 us/op
                 runAlgorithm·p0.99:   14630.912 us/op
                 runAlgorithm·p0.999:  15007.744 us/op
                 runAlgorithm·p0.9999: 15007.744 us/op
                 runAlgorithm·p1.00:   15007.744 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  N = 10493
  mean =  14297.692 ±(99.9%) 2.479 us/op

  Histogram, us/op:
    [14000.000, 14250.000) = 1516 
    [14250.000, 14500.000) = 8776 
    [14500.000, 14750.000) = 178 
    [14750.000, 15000.000) = 19 
    [15000.000, 15250.000) = 2 
    [15250.000, 15500.000) = 0 
    [15500.000, 15750.000) = 0 
    [15750.000, 16000.000) = 0 
    [16000.000, 16250.000) = 0 
    [16250.000, 16500.000) = 0 
    [16500.000, 16750.000) = 0 
    [16750.000, 17000.000) = 0 
    [17000.000, 17250.000) = 2 
    [17250.000, 17500.000) = 0 
    [17500.000, 17750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  14204.928 us/op
     p(50.0000) =  14286.848 us/op
     p(90.0000) =  14368.768 us/op
     p(95.0000) =  14417.920 us/op
     p(99.0000) =  14565.376 us/op
     p(99.9000) =  14843.904 us/op
     p(99.9900) =  17131.189 us/op
     p(99.9990) =  17137.664 us/op
     p(99.9999) =  17137.664 us/op
    p(100.0000) =  17137.664 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 87.68% complete, ETA 01:00:15
# Fork: 1 of 1
# Warmup Iteration   1: 318.932 ±(99.9%) 3.154 us/op
# Warmup Iteration   2: 312.648 ±(99.9%) 3.069 us/op
# Warmup Iteration   3: 313.553 ±(99.9%) 3.200 us/op
# Warmup Iteration   4: 312.402 ±(99.9%) 2.533 us/op
# Warmup Iteration   5: 313.556 ±(99.9%) 3.525 us/op
Iteration   1: 314.127 ±(99.9%) 4.239 us/op
                 runAlgorithm·p0.00:   295.936 us/op
                 runAlgorithm·p0.50:   305.664 us/op
                 runAlgorithm·p0.90:   318.976 us/op
                 runAlgorithm·p0.95:   323.584 us/op
                 runAlgorithm·p0.99:   346.112 us/op
                 runAlgorithm·p0.999:  969.042 us/op
                 runAlgorithm·p0.9999: 10827.719 us/op
                 runAlgorithm·p1.00:   21725.184 us/op

Iteration   2: 312.007 ±(99.9%) 2.564 us/op
                 runAlgorithm·p0.00:   295.936 us/op
                 runAlgorithm·p0.50:   305.664 us/op
                 runAlgorithm·p0.90:   318.464 us/op
                 runAlgorithm·p0.95:   323.584 us/op
                 runAlgorithm·p0.99:   352.256 us/op
                 runAlgorithm·p0.999:  465.347 us/op
                 runAlgorithm·p0.9999: 7983.192 us/op
                 runAlgorithm·p1.00:   10616.832 us/op

Iteration   3: 314.287 ±(99.9%) 3.773 us/op
                 runAlgorithm·p0.00:   296.448 us/op
                 runAlgorithm·p0.50:   306.688 us/op
                 runAlgorithm·p0.90:   320.512 us/op
                 runAlgorithm·p0.95:   326.144 us/op
                 runAlgorithm·p0.99:   352.768 us/op
                 runAlgorithm·p0.999:  480.239 us/op
                 runAlgorithm·p0.9999: 10268.749 us/op
                 runAlgorithm·p1.00:   19628.032 us/op

Iteration   4: 312.475 ±(99.9%) 2.624 us/op
                 runAlgorithm·p0.00:   295.936 us/op
                 runAlgorithm·p0.50:   306.176 us/op
                 runAlgorithm·p0.90:   319.488 us/op
                 runAlgorithm·p0.95:   325.120 us/op
                 runAlgorithm·p0.99:   355.840 us/op
                 runAlgorithm·p0.999:  498.156 us/op
                 runAlgorithm·p0.9999: 9857.342 us/op
                 runAlgorithm·p1.00:   10240.000 us/op

Iteration   5: 313.500 ±(99.9%) 3.052 us/op
                 runAlgorithm·p0.00:   295.936 us/op
                 runAlgorithm·p0.50:   306.176 us/op
                 runAlgorithm·p0.90:   320.512 us/op
                 runAlgorithm·p0.95:   325.632 us/op
                 runAlgorithm·p0.99:   355.328 us/op
                 runAlgorithm·p0.999:  495.647 us/op
                 runAlgorithm·p0.9999: 10201.140 us/op
                 runAlgorithm·p1.00:   10649.600 us/op

Iteration   6: 314.108 ±(99.9%) 2.895 us/op
                 runAlgorithm·p0.00:   296.960 us/op
                 runAlgorithm·p0.50:   307.200 us/op
                 runAlgorithm·p0.90:   322.048 us/op
                 runAlgorithm·p0.95:   328.192 us/op
                 runAlgorithm·p0.99:   357.376 us/op
                 runAlgorithm·p0.999:  506.749 us/op
                 runAlgorithm·p0.9999: 9938.410 us/op
                 runAlgorithm·p1.00:   11010.048 us/op

Iteration   7: 312.579 ±(99.9%) 3.024 us/op
                 runAlgorithm·p0.00:   295.936 us/op
                 runAlgorithm·p0.50:   306.176 us/op
                 runAlgorithm·p0.90:   318.464 us/op
                 runAlgorithm·p0.95:   322.560 us/op
                 runAlgorithm·p0.99:   339.456 us/op
                 runAlgorithm·p0.999:  744.202 us/op
                 runAlgorithm·p0.9999: 10076.425 us/op
                 runAlgorithm·p1.00:   12271.616 us/op

Iteration   8: 313.486 ±(99.9%) 3.528 us/op
                 runAlgorithm·p0.00:   295.424 us/op
                 runAlgorithm·p0.50:   306.176 us/op
                 runAlgorithm·p0.90:   318.976 us/op
                 runAlgorithm·p0.95:   324.096 us/op
                 runAlgorithm·p0.99:   340.480 us/op
                 runAlgorithm·p0.999:  568.791 us/op
                 runAlgorithm·p0.9999: 10440.802 us/op
                 runAlgorithm·p1.00:   16220.160 us/op

Iteration   9: 311.844 ±(99.9%) 2.402 us/op
                 runAlgorithm·p0.00:   296.448 us/op
                 runAlgorithm·p0.50:   306.176 us/op
                 runAlgorithm·p0.90:   318.976 us/op
                 runAlgorithm·p0.95:   324.096 us/op
                 runAlgorithm·p0.99:   339.968 us/op
                 runAlgorithm·p0.999:  504.067 us/op
                 runAlgorithm·p0.9999: 7950.633 us/op
                 runAlgorithm·p1.00:   10174.464 us/op

Iteration  10: 312.382 ±(99.9%) 2.586 us/op
                 runAlgorithm·p0.00:   296.448 us/op
                 runAlgorithm·p0.50:   306.176 us/op
                 runAlgorithm·p0.90:   319.488 us/op
                 runAlgorithm·p0.95:   324.096 us/op
                 runAlgorithm·p0.99:   341.504 us/op
                 runAlgorithm·p0.999:  464.495 us/op
                 runAlgorithm·p0.9999: 8406.030 us/op
                 runAlgorithm·p1.00:   10797.056 us/op

Iteration  11: 313.067 ±(99.9%) 3.574 us/op
                 runAlgorithm·p0.00:   295.936 us/op
                 runAlgorithm·p0.50:   305.664 us/op
                 runAlgorithm·p0.90:   318.976 us/op
                 runAlgorithm·p0.95:   324.096 us/op
                 runAlgorithm·p0.99:   349.174 us/op
                 runAlgorithm·p0.999:  761.774 us/op
                 runAlgorithm·p0.9999: 9350.827 us/op
                 runAlgorithm·p1.00:   23035.904 us/op

Iteration  12: 313.341 ±(99.9%) 3.489 us/op
                 runAlgorithm·p0.00:   295.936 us/op
                 runAlgorithm·p0.50:   305.664 us/op
                 runAlgorithm·p0.90:   318.976 us/op
                 runAlgorithm·p0.95:   324.096 us/op
                 runAlgorithm·p0.99:   346.112 us/op
                 runAlgorithm·p0.999:  837.888 us/op
                 runAlgorithm·p0.9999: 10544.128 us/op
                 runAlgorithm·p1.00:   16875.520 us/op

Iteration  13: 312.356 ±(99.9%) 2.560 us/op
                 runAlgorithm·p0.00:   295.936 us/op
                 runAlgorithm·p0.50:   305.664 us/op
                 runAlgorithm·p0.90:   319.488 us/op
                 runAlgorithm·p0.95:   325.632 us/op
                 runAlgorithm·p0.99:   353.792 us/op
                 runAlgorithm·p0.999:  477.875 us/op
                 runAlgorithm·p0.9999: 8630.989 us/op
                 runAlgorithm·p1.00:   10158.080 us/op

Iteration  14: 313.462 ±(99.9%) 3.358 us/op
                 runAlgorithm·p0.00:   296.448 us/op
                 runAlgorithm·p0.50:   306.176 us/op
                 runAlgorithm·p0.90:   320.000 us/op
                 runAlgorithm·p0.95:   325.120 us/op
                 runAlgorithm·p0.99:   351.744 us/op
                 runAlgorithm·p0.999:  818.285 us/op
                 runAlgorithm·p0.9999: 10497.298 us/op
                 runAlgorithm·p1.00:   20447.232 us/op

Iteration  15: 312.000 ±(99.9%) 2.691 us/op
                 runAlgorithm·p0.00:   295.936 us/op
                 runAlgorithm·p0.50:   305.664 us/op
                 runAlgorithm·p0.90:   318.464 us/op
                 runAlgorithm·p0.95:   323.584 us/op
                 runAlgorithm·p0.99:   347.136 us/op
                 runAlgorithm·p0.999:  494.488 us/op
                 runAlgorithm·p0.9999: 9017.695 us/op
                 runAlgorithm·p1.00:   9846.784 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 478631
  mean =    312.999 ±(99.9%) 0.809 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 478181 
    [ 2500.000,  5000.000) = 308 
    [ 5000.000,  7500.000) = 64 
    [ 7500.000, 10000.000) = 38 
    [10000.000, 12500.000) = 32 
    [12500.000, 15000.000) = 1 
    [15000.000, 17500.000) = 3 
    [17500.000, 20000.000) = 1 
    [20000.000, 22500.000) = 2 
    [22500.000, 25000.000) = 1 
    [25000.000, 27500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    295.424 us/op
     p(50.0000) =    306.176 us/op
     p(90.0000) =    319.488 us/op
     p(95.0000) =    324.608 us/op
     p(99.0000) =    351.232 us/op
     p(99.9000) =    733.290 us/op
     p(99.9900) =   9528.069 us/op
     p(99.9990) =  17463.677 us/op
     p(99.9999) =  23035.904 us/op
    p(100.0000) =  23035.904 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 88.40% complete, ETA 00:56:43
# Fork: 1 of 1
# Warmup Iteration   1: 31647.666 ±(99.9%) 790.801 us/op
# Warmup Iteration   2: 31434.610 ±(99.9%) 449.402 us/op
# Warmup Iteration   3: 31343.979 ±(99.9%) 406.368 us/op
# Warmup Iteration   4: 31321.190 ±(99.9%) 374.395 us/op
# Warmup Iteration   5: 31406.947 ±(99.9%) 383.110 us/op
Iteration   1: 31394.004 ±(99.9%) 417.771 us/op
                 runAlgorithm·p0.00:   30572.544 us/op
                 runAlgorithm·p0.50:   30769.152 us/op
                 runAlgorithm·p0.90:   31457.280 us/op
                 runAlgorithm·p0.95:   35782.656 us/op
                 runAlgorithm·p0.99:   41195.930 us/op
                 runAlgorithm·p0.999:  52625.408 us/op
                 runAlgorithm·p0.9999: 52625.408 us/op
                 runAlgorithm·p1.00:   52625.408 us/op

Iteration   2: 31341.924 ±(99.9%) 352.184 us/op
                 runAlgorithm·p0.00:   30539.776 us/op
                 runAlgorithm·p0.50:   30801.920 us/op
                 runAlgorithm·p0.90:   31293.440 us/op
                 runAlgorithm·p0.95:   34865.152 us/op
                 runAlgorithm·p0.99:   41130.394 us/op
                 runAlgorithm·p0.999:  45678.592 us/op
                 runAlgorithm·p0.9999: 45678.592 us/op
                 runAlgorithm·p1.00:   45678.592 us/op

Iteration   3: 31290.573 ±(99.9%) 366.578 us/op
                 runAlgorithm·p0.00:   30507.008 us/op
                 runAlgorithm·p0.50:   30769.152 us/op
                 runAlgorithm·p0.90:   31611.290 us/op
                 runAlgorithm·p0.95:   34468.659 us/op
                 runAlgorithm·p0.99:   40684.093 us/op
                 runAlgorithm·p0.999:  52625.408 us/op
                 runAlgorithm·p0.9999: 52625.408 us/op
                 runAlgorithm·p1.00:   52625.408 us/op

Iteration   4: 31370.481 ±(99.9%) 356.365 us/op
                 runAlgorithm·p0.00:   30572.544 us/op
                 runAlgorithm·p0.50:   30801.920 us/op
                 runAlgorithm·p0.90:   31555.584 us/op
                 runAlgorithm·p0.95:   35913.728 us/op
                 runAlgorithm·p0.99:   41287.680 us/op
                 runAlgorithm·p0.999:  43646.976 us/op
                 runAlgorithm·p0.9999: 43646.976 us/op
                 runAlgorithm·p1.00:   43646.976 us/op

Iteration   5: 31323.136 ±(99.9%) 344.338 us/op
                 runAlgorithm·p0.00:   30539.776 us/op
                 runAlgorithm·p0.50:   30801.920 us/op
                 runAlgorithm·p0.90:   31506.432 us/op
                 runAlgorithm·p0.95:   34796.339 us/op
                 runAlgorithm·p0.99:   41349.939 us/op
                 runAlgorithm·p0.999:  43122.688 us/op
                 runAlgorithm·p0.9999: 43122.688 us/op
                 runAlgorithm·p1.00:   43122.688 us/op

Iteration   6: 31260.877 ±(99.9%) 295.032 us/op
                 runAlgorithm·p0.00:   30572.544 us/op
                 runAlgorithm·p0.50:   30801.920 us/op
                 runAlgorithm·p0.90:   31322.931 us/op
                 runAlgorithm·p0.95:   34603.008 us/op
                 runAlgorithm·p0.99:   40798.781 us/op
                 runAlgorithm·p0.999:  42008.576 us/op
                 runAlgorithm·p0.9999: 42008.576 us/op
                 runAlgorithm·p1.00:   42008.576 us/op

Iteration   7: 31306.342 ±(99.9%) 322.521 us/op
                 runAlgorithm·p0.00:   30539.776 us/op
                 runAlgorithm·p0.50:   30769.152 us/op
                 runAlgorithm·p0.90:   31617.843 us/op
                 runAlgorithm·p0.95:   34530.918 us/op
                 runAlgorithm·p0.99:   40708.342 us/op
                 runAlgorithm·p0.999:  41811.968 us/op
                 runAlgorithm·p0.9999: 41811.968 us/op
                 runAlgorithm·p1.00:   41811.968 us/op

Iteration   8: 31350.964 ±(99.9%) 299.087 us/op
                 runAlgorithm·p0.00:   30572.544 us/op
                 runAlgorithm·p0.50:   30834.688 us/op
                 runAlgorithm·p0.90:   32571.392 us/op
                 runAlgorithm·p0.95:   34930.688 us/op
                 runAlgorithm·p0.99:   38508.954 us/op
                 runAlgorithm·p0.999:  45481.984 us/op
                 runAlgorithm·p0.9999: 45481.984 us/op
                 runAlgorithm·p1.00:   45481.984 us/op

Iteration   9: 31360.517 ±(99.9%) 367.399 us/op
                 runAlgorithm·p0.00:   30539.776 us/op
                 runAlgorithm·p0.50:   30801.920 us/op
                 runAlgorithm·p0.90:   31424.512 us/op
                 runAlgorithm·p0.95:   34865.152 us/op
                 runAlgorithm·p0.99:   41680.896 us/op
                 runAlgorithm·p0.999:  43450.368 us/op
                 runAlgorithm·p0.9999: 43450.368 us/op
                 runAlgorithm·p1.00:   43450.368 us/op

Iteration  10: 31228.826 ±(99.9%) 286.042 us/op
                 runAlgorithm·p0.00:   30507.008 us/op
                 runAlgorithm·p0.50:   30769.152 us/op
                 runAlgorithm·p0.90:   31417.958 us/op
                 runAlgorithm·p0.95:   34799.616 us/op
                 runAlgorithm·p0.99:   39439.565 us/op
                 runAlgorithm·p0.999:  41811.968 us/op
                 runAlgorithm·p0.9999: 41811.968 us/op
                 runAlgorithm·p1.00:   41811.968 us/op

Iteration  11: 31350.656 ±(99.9%) 384.295 us/op
                 runAlgorithm·p0.00:   30539.776 us/op
                 runAlgorithm·p0.50:   30769.152 us/op
                 runAlgorithm·p0.90:   31522.816 us/op
                 runAlgorithm·p0.95:   34930.688 us/op
                 runAlgorithm·p0.99:   42074.112 us/op
                 runAlgorithm·p0.999:  48562.176 us/op
                 runAlgorithm·p0.9999: 48562.176 us/op
                 runAlgorithm·p1.00:   48562.176 us/op

Iteration  12: 31340.794 ±(99.9%) 360.332 us/op
                 runAlgorithm·p0.00:   30572.544 us/op
                 runAlgorithm·p0.50:   30834.688 us/op
                 runAlgorithm·p0.90:   31424.512 us/op
                 runAlgorithm·p0.95:   34734.080 us/op
                 runAlgorithm·p0.99:   41851.290 us/op
                 runAlgorithm·p0.999:  46006.272 us/op
                 runAlgorithm·p0.9999: 46006.272 us/op
                 runAlgorithm·p1.00:   46006.272 us/op

Iteration  13: 31266.406 ±(99.9%) 287.537 us/op
                 runAlgorithm·p0.00:   30539.776 us/op
                 runAlgorithm·p0.50:   30834.688 us/op
                 runAlgorithm·p0.90:   31388.467 us/op
                 runAlgorithm·p0.95:   34534.195 us/op
                 runAlgorithm·p0.99:   40427.192 us/op
                 runAlgorithm·p0.999:  43319.296 us/op
                 runAlgorithm·p0.9999: 43319.296 us/op
                 runAlgorithm·p1.00:   43319.296 us/op

Iteration  14: 31360.517 ±(99.9%) 388.222 us/op
                 runAlgorithm·p0.00:   30539.776 us/op
                 runAlgorithm·p0.50:   30769.152 us/op
                 runAlgorithm·p0.90:   31391.744 us/op
                 runAlgorithm·p0.95:   35323.904 us/op
                 runAlgorithm·p0.99:   41209.037 us/op
                 runAlgorithm·p0.999:  47120.384 us/op
                 runAlgorithm·p0.9999: 47120.384 us/op
                 runAlgorithm·p1.00:   47120.384 us/op

Iteration  15: 31314.330 ±(99.9%) 329.772 us/op
                 runAlgorithm·p0.00:   30572.544 us/op
                 runAlgorithm·p0.50:   30834.688 us/op
                 runAlgorithm·p0.90:   31421.235 us/op
                 runAlgorithm·p0.95:   34534.195 us/op
                 runAlgorithm·p0.99:   41005.220 us/op
                 runAlgorithm·p0.999:  44171.264 us/op
                 runAlgorithm·p0.9999: 44171.264 us/op
                 runAlgorithm·p1.00:   44171.264 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 4792
  mean =  31323.965 ±(99.9%) 88.434 us/op

  Histogram, us/op:
    [30000.000, 32500.000) = 4340 
    [32500.000, 35000.000) = 256 
    [35000.000, 37500.000) = 91 
    [37500.000, 40000.000) = 35 
    [40000.000, 42500.000) = 54 
    [42500.000, 45000.000) = 7 
    [45000.000, 47500.000) = 6 
    [47500.000, 50000.000) = 1 
    [50000.000, 52500.000) = 0 
    [52500.000, 55000.000) = 2 
    [55000.000, 57500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  30507.008 us/op
     p(50.0000) =  30801.920 us/op
     p(90.0000) =  31555.584 us/op
     p(95.0000) =  34668.544 us/op
     p(99.0000) =  41156.608 us/op
     p(99.9000) =  46444.773 us/op
     p(99.9900) =  52625.408 us/op
     p(99.9990) =  52625.408 us/op
     p(99.9999) =  52625.408 us/op
    p(100.0000) =  52625.408 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 89.13% complete, ETA 00:53:10
# Fork: 1 of 1
# Warmup Iteration   1: 3196059.648 ±(99.9%) 175651.064 us/op
# Warmup Iteration   2: 5957309.781 ±(99.9%) 87716778.150 us/op
# Warmup Iteration   3: 3195011.072 ±(99.9%) 178931.318 us/op
# Warmup Iteration   4: 5294260.224 ±(99.9%) 27135243.651 us/op
# Warmup Iteration   5: 11509170.176 us/op
Iteration   1: 11509170.176 us/op
                 runAlgorithm·p0.00:   11509170.176 us/op
                 runAlgorithm·p0.50:   11509170.176 us/op
                 runAlgorithm·p0.90:   11509170.176 us/op
                 runAlgorithm·p0.95:   11509170.176 us/op
                 runAlgorithm·p0.99:   11509170.176 us/op
                 runAlgorithm·p0.999:  11509170.176 us/op
                 runAlgorithm·p0.9999: 11509170.176 us/op
                 runAlgorithm·p1.00:   11509170.176 us/op

Iteration   2: 11542724.608 us/op
                 runAlgorithm·p0.00:   11542724.608 us/op
                 runAlgorithm·p0.50:   11542724.608 us/op
                 runAlgorithm·p0.90:   11542724.608 us/op
                 runAlgorithm·p0.95:   11542724.608 us/op
                 runAlgorithm·p0.99:   11542724.608 us/op
                 runAlgorithm·p0.999:  11542724.608 us/op
                 runAlgorithm·p0.9999: 11542724.608 us/op
                 runAlgorithm·p1.00:   11542724.608 us/op

Iteration   3: 11492392.960 us/op
                 runAlgorithm·p0.00:   11492392.960 us/op
                 runAlgorithm·p0.50:   11492392.960 us/op
                 runAlgorithm·p0.90:   11492392.960 us/op
                 runAlgorithm·p0.95:   11492392.960 us/op
                 runAlgorithm·p0.99:   11492392.960 us/op
                 runAlgorithm·p0.999:  11492392.960 us/op
                 runAlgorithm·p0.9999: 11492392.960 us/op
                 runAlgorithm·p1.00:   11492392.960 us/op

Iteration   4: 11542724.608 us/op
                 runAlgorithm·p0.00:   11542724.608 us/op
                 runAlgorithm·p0.50:   11542724.608 us/op
                 runAlgorithm·p0.90:   11542724.608 us/op
                 runAlgorithm·p0.95:   11542724.608 us/op
                 runAlgorithm·p0.99:   11542724.608 us/op
                 runAlgorithm·p0.999:  11542724.608 us/op
                 runAlgorithm·p0.9999: 11542724.608 us/op
                 runAlgorithm·p1.00:   11542724.608 us/op

Iteration   5: 11525947.392 us/op
                 runAlgorithm·p0.00:   11525947.392 us/op
                 runAlgorithm·p0.50:   11525947.392 us/op
                 runAlgorithm·p0.90:   11525947.392 us/op
                 runAlgorithm·p0.95:   11525947.392 us/op
                 runAlgorithm·p0.99:   11525947.392 us/op
                 runAlgorithm·p0.999:  11525947.392 us/op
                 runAlgorithm·p0.9999: 11525947.392 us/op
                 runAlgorithm·p1.00:   11525947.392 us/op

Iteration   6: 11542724.608 us/op
                 runAlgorithm·p0.00:   11542724.608 us/op
                 runAlgorithm·p0.50:   11542724.608 us/op
                 runAlgorithm·p0.90:   11542724.608 us/op
                 runAlgorithm·p0.95:   11542724.608 us/op
                 runAlgorithm·p0.99:   11542724.608 us/op
                 runAlgorithm·p0.999:  11542724.608 us/op
                 runAlgorithm·p0.9999: 11542724.608 us/op
                 runAlgorithm·p1.00:   11542724.608 us/op

Iteration   7: 11559501.824 us/op
                 runAlgorithm·p0.00:   11559501.824 us/op
                 runAlgorithm·p0.50:   11559501.824 us/op
                 runAlgorithm·p0.90:   11559501.824 us/op
                 runAlgorithm·p0.95:   11559501.824 us/op
                 runAlgorithm·p0.99:   11559501.824 us/op
                 runAlgorithm·p0.999:  11559501.824 us/op
                 runAlgorithm·p0.9999: 11559501.824 us/op
                 runAlgorithm·p1.00:   11559501.824 us/op

Iteration   8: 11542724.608 us/op
                 runAlgorithm·p0.00:   11542724.608 us/op
                 runAlgorithm·p0.50:   11542724.608 us/op
                 runAlgorithm·p0.90:   11542724.608 us/op
                 runAlgorithm·p0.95:   11542724.608 us/op
                 runAlgorithm·p0.99:   11542724.608 us/op
                 runAlgorithm·p0.999:  11542724.608 us/op
                 runAlgorithm·p0.9999: 11542724.608 us/op
                 runAlgorithm·p1.00:   11542724.608 us/op

Iteration   9: 11559501.824 us/op
                 runAlgorithm·p0.00:   11559501.824 us/op
                 runAlgorithm·p0.50:   11559501.824 us/op
                 runAlgorithm·p0.90:   11559501.824 us/op
                 runAlgorithm·p0.95:   11559501.824 us/op
                 runAlgorithm·p0.99:   11559501.824 us/op
                 runAlgorithm·p0.999:  11559501.824 us/op
                 runAlgorithm·p0.9999: 11559501.824 us/op
                 runAlgorithm·p1.00:   11559501.824 us/op

Iteration  10: 11525947.392 us/op
                 runAlgorithm·p0.00:   11525947.392 us/op
                 runAlgorithm·p0.50:   11525947.392 us/op
                 runAlgorithm·p0.90:   11525947.392 us/op
                 runAlgorithm·p0.95:   11525947.392 us/op
                 runAlgorithm·p0.99:   11525947.392 us/op
                 runAlgorithm·p0.999:  11525947.392 us/op
                 runAlgorithm·p0.9999: 11525947.392 us/op
                 runAlgorithm·p1.00:   11525947.392 us/op

Iteration  11: 11542724.608 us/op
                 runAlgorithm·p0.00:   11542724.608 us/op
                 runAlgorithm·p0.50:   11542724.608 us/op
                 runAlgorithm·p0.90:   11542724.608 us/op
                 runAlgorithm·p0.95:   11542724.608 us/op
                 runAlgorithm·p0.99:   11542724.608 us/op
                 runAlgorithm·p0.999:  11542724.608 us/op
                 runAlgorithm·p0.9999: 11542724.608 us/op
                 runAlgorithm·p1.00:   11542724.608 us/op

Iteration  12: 11525947.392 us/op
                 runAlgorithm·p0.00:   11525947.392 us/op
                 runAlgorithm·p0.50:   11525947.392 us/op
                 runAlgorithm·p0.90:   11525947.392 us/op
                 runAlgorithm·p0.95:   11525947.392 us/op
                 runAlgorithm·p0.99:   11525947.392 us/op
                 runAlgorithm·p0.999:  11525947.392 us/op
                 runAlgorithm·p0.9999: 11525947.392 us/op
                 runAlgorithm·p1.00:   11525947.392 us/op

Iteration  13: 11509170.176 us/op
                 runAlgorithm·p0.00:   11509170.176 us/op
                 runAlgorithm·p0.50:   11509170.176 us/op
                 runAlgorithm·p0.90:   11509170.176 us/op
                 runAlgorithm·p0.95:   11509170.176 us/op
                 runAlgorithm·p0.99:   11509170.176 us/op
                 runAlgorithm·p0.999:  11509170.176 us/op
                 runAlgorithm·p0.9999: 11509170.176 us/op
                 runAlgorithm·p1.00:   11509170.176 us/op

Iteration  14: 11525947.392 us/op
                 runAlgorithm·p0.00:   11525947.392 us/op
                 runAlgorithm·p0.50:   11525947.392 us/op
                 runAlgorithm·p0.90:   11525947.392 us/op
                 runAlgorithm·p0.95:   11525947.392 us/op
                 runAlgorithm·p0.99:   11525947.392 us/op
                 runAlgorithm·p0.999:  11525947.392 us/op
                 runAlgorithm·p0.9999: 11525947.392 us/op
                 runAlgorithm·p1.00:   11525947.392 us/op

Iteration  15: 11525947.392 us/op
                 runAlgorithm·p0.00:   11525947.392 us/op
                 runAlgorithm·p0.50:   11525947.392 us/op
                 runAlgorithm·p0.90:   11525947.392 us/op
                 runAlgorithm·p0.95:   11525947.392 us/op
                 runAlgorithm·p0.99:   11525947.392 us/op
                 runAlgorithm·p0.999:  11525947.392 us/op
                 runAlgorithm·p0.9999: 11525947.392 us/op
                 runAlgorithm·p1.00:   11525947.392 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean = 11531539.797 ±(99.9%) 19957.184 us/op

  Histogram, us/op:
    [11490000.000, 11495000.000) = 1 
    [11495000.000, 11500000.000) = 0 
    [11500000.000, 11505000.000) = 0 
    [11505000.000, 11510000.000) = 2 
    [11510000.000, 11515000.000) = 0 
    [11515000.000, 11520000.000) = 0 
    [11520000.000, 11525000.000) = 0 
    [11525000.000, 11530000.000) = 5 
    [11530000.000, 11535000.000) = 0 
    [11535000.000, 11540000.000) = 0 
    [11540000.000, 11545000.000) = 5 
    [11545000.000, 11550000.000) = 0 
    [11550000.000, 11555000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 11492392.960 us/op
     p(50.0000) = 11525947.392 us/op
     p(90.0000) = 11559501.824 us/op
     p(95.0000) = 11559501.824 us/op
     p(99.0000) = 11559501.824 us/op
     p(99.9000) = 11559501.824 us/op
     p(99.9900) = 11559501.824 us/op
     p(99.9990) = 11559501.824 us/op
     p(99.9999) = 11559501.824 us/op
    p(100.0000) = 11559501.824 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 89.85% complete, ETA 00:49:43
# Fork: 1 of 1
# Warmup Iteration   1: 1889.573 ±(99.9%) 11.843 us/op
# Warmup Iteration   2: 1883.324 ±(99.9%) 1.271 us/op
# Warmup Iteration   3: 1883.282 ±(99.9%) 1.386 us/op
# Warmup Iteration   4: 1882.836 ±(99.9%) 2.037 us/op
# Warmup Iteration   5: 1882.092 ±(99.9%) 1.433 us/op
Iteration   1: 1881.667 ±(99.9%) 1.278 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1859.584 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1878.016 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1898.496 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1914.880 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   1947.648 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2051.459 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3506.176 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3506.176 us/op

Iteration   2: 1884.244 ±(99.9%) 1.777 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1859.584 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1880.064 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1902.592 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1923.072 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   1966.080 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2404.700 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3309.568 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3309.568 us/op

Iteration   3: 1881.286 ±(99.9%) 1.032 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1859.584 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1878.016 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1898.496 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1914.880 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   1951.744 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2062.461 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2883.584 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2883.584 us/op

Iteration   4: 1881.006 ±(99.9%) 0.954 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1859.584 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1880.064 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1896.448 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1908.736 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   1949.409 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2048.119 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2756.608 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2756.608 us/op

Iteration   5: 1881.730 ±(99.9%) 0.965 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1859.584 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1880.064 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1896.448 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1910.784 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   1951.744 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2044.166 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2756.608 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2756.608 us/op

Iteration   6: 1879.525 ±(99.9%) 0.964 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1859.584 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1878.016 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1890.304 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1904.640 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   1945.600 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2046.958 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2772.992 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2772.992 us/op

Iteration   7: 2172.058 ±(99.9%) 7.567 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1859.584 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2248.704 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2265.088 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2277.376 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2322.432 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2395.333 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2445.312 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2445.312 us/op

Iteration   8: 2256.042 ±(99.9%) 1.109 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2252.800 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2273.280 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2289.664 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2330.624 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2449.981 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2785.280 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2785.280 us/op

Iteration   9: 2253.200 ±(99.9%) 1.071 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2248.704 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2265.088 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2285.568 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2329.190 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2562.294 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2682.880 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2682.880 us/op

Iteration  10: 2254.798 ±(99.9%) 0.953 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2252.800 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2269.184 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2289.664 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2326.528 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2456.945 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2514.944 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2514.944 us/op

Iteration  11: 2256.026 ±(99.9%) 1.140 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2252.800 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2273.280 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2293.760 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2341.683 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2468.127 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2748.416 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2748.416 us/op

Iteration  12: 2255.447 ±(99.9%) 2.365 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2252.800 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2269.184 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2289.664 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2347.008 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2531.893 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 5021.696 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   5021.696 us/op

Iteration  13: 2254.220 ±(99.9%) 1.248 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2248.704 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2269.184 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2289.664 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2334.720 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2472.210 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2973.696 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2973.696 us/op

Iteration  14: 2252.962 ±(99.9%) 1.045 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2248.704 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2265.088 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2285.568 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2322.432 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2494.775 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2592.768 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2592.768 us/op

Iteration  15: 2255.748 ±(99.9%) 1.454 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2252.800 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2273.280 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2293.760 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2363.392 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2683.453 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2809.856 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2809.856 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  N = 71917
  mean =   2084.126 ±(99.9%) 2.305 us/op

  Histogram, us/op:
    [1000.000, 1500.000) = 0 
    [1500.000, 2000.000) = 32781 
    [2000.000, 2500.000) = 39093 
    [2500.000, 3000.000) = 40 
    [3000.000, 3500.000) = 1 
    [3500.000, 4000.000) = 1 
    [4000.000, 4500.000) = 0 
    [4500.000, 5000.000) = 0 
    [5000.000, 5500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   1859.584 us/op
     p(50.0000) =   2236.416 us/op
     p(90.0000) =   2260.992 us/op
     p(95.0000) =   2273.280 us/op
     p(99.0000) =   2318.336 us/op
     p(99.9000) =   2453.504 us/op
     p(99.9900) =   2809.070 us/op
     p(99.9990) =   5021.696 us/op
     p(99.9999) =   5021.696 us/op
    p(100.0000) =   5021.696 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 90.58% complete, ETA 00:46:11
# Fork: 1 of 1
# Warmup Iteration   1: 62087.015 ±(99.9%) 142.333 us/op
# Warmup Iteration   2: 62100.448 ±(99.9%) 63.283 us/op
# Warmup Iteration   3: 62114.288 ±(99.9%) 58.250 us/op
# Warmup Iteration   4: 62120.801 ±(99.9%) 66.301 us/op
# Warmup Iteration   5: 62145.631 ±(99.9%) 38.463 us/op
Iteration   1: 62116.730 ±(99.9%) 46.845 us/op
                 extractOperationOutOfLoop·p0.00:   61472.768 us/op
                 extractOperationOutOfLoop·p0.50:   62128.128 us/op
                 extractOperationOutOfLoop·p0.90:   62259.200 us/op
                 extractOperationOutOfLoop·p0.95:   62390.272 us/op
                 extractOperationOutOfLoop·p0.99:   62767.759 us/op
                 extractOperationOutOfLoop·p0.999:  62849.024 us/op
                 extractOperationOutOfLoop·p0.9999: 62849.024 us/op
                 extractOperationOutOfLoop·p1.00:   62849.024 us/op

Iteration   2: 62154.587 ±(99.9%) 72.959 us/op
                 extractOperationOutOfLoop·p0.00:   60620.800 us/op
                 extractOperationOutOfLoop·p0.50:   62193.664 us/op
                 extractOperationOutOfLoop·p0.90:   62442.701 us/op
                 extractOperationOutOfLoop·p0.95:   62645.862 us/op
                 extractOperationOutOfLoop·p0.99:   62783.488 us/op
                 extractOperationOutOfLoop·p0.999:  62783.488 us/op
                 extractOperationOutOfLoop·p0.9999: 62783.488 us/op
                 extractOperationOutOfLoop·p1.00:   62783.488 us/op

Iteration   3: 62077.156 ±(99.9%) 45.236 us/op
                 extractOperationOutOfLoop·p0.00:   61472.768 us/op
                 extractOperationOutOfLoop·p0.50:   62062.592 us/op
                 extractOperationOutOfLoop·p0.90:   62259.200 us/op
                 extractOperationOutOfLoop·p0.95:   62324.736 us/op
                 extractOperationOutOfLoop·p0.99:   62455.808 us/op
                 extractOperationOutOfLoop·p0.999:  62455.808 us/op
                 extractOperationOutOfLoop·p0.9999: 62455.808 us/op
                 extractOperationOutOfLoop·p1.00:   62455.808 us/op

Iteration   4: 62140.340 ±(99.9%) 50.191 us/op
                 extractOperationOutOfLoop·p0.00:   60751.872 us/op
                 extractOperationOutOfLoop·p0.50:   62128.128 us/op
                 extractOperationOutOfLoop·p0.90:   62324.736 us/op
                 extractOperationOutOfLoop·p0.95:   62390.272 us/op
                 extractOperationOutOfLoop·p0.99:   62695.670 us/op
                 extractOperationOutOfLoop·p0.999:  62980.096 us/op
                 extractOperationOutOfLoop·p0.9999: 62980.096 us/op
                 extractOperationOutOfLoop·p1.00:   62980.096 us/op

Iteration   5: 62112.660 ±(99.9%) 42.125 us/op
                 extractOperationOutOfLoop·p0.00:   61145.088 us/op
                 extractOperationOutOfLoop·p0.50:   62128.128 us/op
                 extractOperationOutOfLoop·p0.90:   62259.200 us/op
                 extractOperationOutOfLoop·p0.95:   62324.736 us/op
                 extractOperationOutOfLoop·p0.99:   62455.808 us/op
                 extractOperationOutOfLoop·p0.999:  62455.808 us/op
                 extractOperationOutOfLoop·p0.9999: 62455.808 us/op
                 extractOperationOutOfLoop·p1.00:   62455.808 us/op

Iteration   6: 62060.974 ±(99.9%) 48.853 us/op
                 extractOperationOutOfLoop·p0.00:   60751.872 us/op
                 extractOperationOutOfLoop·p0.50:   62062.592 us/op
                 extractOperationOutOfLoop·p0.90:   62193.664 us/op
                 extractOperationOutOfLoop·p0.95:   62314.906 us/op
                 extractOperationOutOfLoop·p0.99:   62390.272 us/op
                 extractOperationOutOfLoop·p0.999:  62390.272 us/op
                 extractOperationOutOfLoop·p0.9999: 62390.272 us/op
                 extractOperationOutOfLoop·p1.00:   62390.272 us/op

Iteration   7: 62068.660 ±(99.9%) 50.706 us/op
                 extractOperationOutOfLoop·p0.00:   61145.088 us/op
                 extractOperationOutOfLoop·p0.50:   62062.592 us/op
                 extractOperationOutOfLoop·p0.90:   62305.075 us/op
                 extractOperationOutOfLoop·p0.95:   62390.272 us/op
                 extractOperationOutOfLoop·p0.99:   62504.305 us/op
                 extractOperationOutOfLoop·p0.999:  62586.880 us/op
                 extractOperationOutOfLoop·p0.9999: 62586.880 us/op
                 extractOperationOutOfLoop·p1.00:   62586.880 us/op

Iteration   8: 62066.637 ±(99.9%) 63.791 us/op
                 extractOperationOutOfLoop·p0.00:   60948.480 us/op
                 extractOperationOutOfLoop·p0.50:   62062.592 us/op
                 extractOperationOutOfLoop·p0.90:   62324.736 us/op
                 extractOperationOutOfLoop·p0.95:   62511.514 us/op
                 extractOperationOutOfLoop·p0.99:   62725.161 us/op
                 extractOperationOutOfLoop·p0.999:  62849.024 us/op
                 extractOperationOutOfLoop·p0.9999: 62849.024 us/op
                 extractOperationOutOfLoop·p1.00:   62849.024 us/op

Iteration   9: 62126.907 ±(99.9%) 53.804 us/op
                 extractOperationOutOfLoop·p0.00:   61407.232 us/op
                 extractOperationOutOfLoop·p0.50:   62128.128 us/op
                 extractOperationOutOfLoop·p0.90:   62390.272 us/op
                 extractOperationOutOfLoop·p0.95:   62580.326 us/op
                 extractOperationOutOfLoop·p0.99:   62742.856 us/op
                 extractOperationOutOfLoop·p0.999:  62783.488 us/op
                 extractOperationOutOfLoop·p0.9999: 62783.488 us/op
                 extractOperationOutOfLoop·p1.00:   62783.488 us/op

Iteration  10: 62048.028 ±(99.9%) 71.227 us/op
                 extractOperationOutOfLoop·p0.00:   60489.728 us/op
                 extractOperationOutOfLoop·p0.50:   62062.592 us/op
                 extractOperationOutOfLoop·p0.90:   62259.200 us/op
                 extractOperationOutOfLoop·p0.95:   62380.442 us/op
                 extractOperationOutOfLoop·p0.99:   62504.305 us/op
                 extractOperationOutOfLoop·p0.999:  62586.880 us/op
                 extractOperationOutOfLoop·p0.9999: 62586.880 us/op
                 extractOperationOutOfLoop·p1.00:   62586.880 us/op

Iteration  11: 62091.493 ±(99.9%) 48.041 us/op
                 extractOperationOutOfLoop·p0.00:   60555.264 us/op
                 extractOperationOutOfLoop·p0.50:   62128.128 us/op
                 extractOperationOutOfLoop·p0.90:   62311.629 us/op
                 extractOperationOutOfLoop·p0.95:   62324.736 us/op
                 extractOperationOutOfLoop·p0.99:   62455.808 us/op
                 extractOperationOutOfLoop·p0.999:  62455.808 us/op
                 extractOperationOutOfLoop·p0.9999: 62455.808 us/op
                 extractOperationOutOfLoop·p1.00:   62455.808 us/op

Iteration  12: 62075.133 ±(99.9%) 53.571 us/op
                 extractOperationOutOfLoop·p0.00:   61276.160 us/op
                 extractOperationOutOfLoop·p0.50:   62062.592 us/op
                 extractOperationOutOfLoop·p0.90:   62305.075 us/op
                 extractOperationOutOfLoop·p0.95:   62390.272 us/op
                 extractOperationOutOfLoop·p0.99:   62545.592 us/op
                 extractOperationOutOfLoop·p0.999:  62586.880 us/op
                 extractOperationOutOfLoop·p0.9999: 62586.880 us/op
                 extractOperationOutOfLoop·p1.00:   62586.880 us/op

Iteration  13: 62104.112 ±(99.9%) 53.252 us/op
                 extractOperationOutOfLoop·p0.00:   61014.016 us/op
                 extractOperationOutOfLoop·p0.50:   62128.128 us/op
                 extractOperationOutOfLoop·p0.90:   62324.736 us/op
                 extractOperationOutOfLoop·p0.95:   62455.808 us/op
                 extractOperationOutOfLoop·p0.99:   62611.784 us/op
                 extractOperationOutOfLoop·p0.999:  62652.416 us/op
                 extractOperationOutOfLoop·p0.9999: 62652.416 us/op
                 extractOperationOutOfLoop·p1.00:   62652.416 us/op

Iteration  14: 62119.987 ±(99.9%) 43.708 us/op
                 extractOperationOutOfLoop·p0.00:   61472.768 us/op
                 extractOperationOutOfLoop·p0.50:   62128.128 us/op
                 extractOperationOutOfLoop·p0.90:   62324.736 us/op
                 extractOperationOutOfLoop·p0.95:   62390.272 us/op
                 extractOperationOutOfLoop·p0.99:   62546.248 us/op
                 extractOperationOutOfLoop·p0.999:  62586.880 us/op
                 extractOperationOutOfLoop·p0.9999: 62586.880 us/op
                 extractOperationOutOfLoop·p1.00:   62586.880 us/op

Iteration  15: 62118.766 ±(99.9%) 98.384 us/op
                 extractOperationOutOfLoop·p0.00:   60096.512 us/op
                 extractOperationOutOfLoop·p0.50:   62062.592 us/op
                 extractOperationOutOfLoop·p0.90:   62521.344 us/op
                 extractOperationOutOfLoop·p0.95:   62652.416 us/op
                 extractOperationOutOfLoop·p0.99:   63618.417 us/op
                 extractOperationOutOfLoop·p0.999:  64552.960 us/op
                 extractOperationOutOfLoop·p0.9999: 64552.960 us/op
                 extractOperationOutOfLoop·p1.00:   64552.960 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  N = 2421
  mean =  62098.730 ±(99.9%) 14.815 us/op

  Histogram, us/op:
    [60000.000, 60500.000) = 2 
    [60500.000, 61000.000) = 9 
    [61000.000, 61500.000) = 35 
    [61500.000, 62000.000) = 509 
    [62000.000, 62500.000) = 1799 
    [62500.000, 63000.000) = 65 
    [63000.000, 63500.000) = 1 
    [63500.000, 64000.000) = 0 
    [64000.000, 64500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  60096.512 us/op
     p(50.0000) =  62128.128 us/op
     p(90.0000) =  62324.736 us/op
     p(95.0000) =  62390.272 us/op
     p(99.0000) =  62652.416 us/op
     p(99.9000) =  63017.976 us/op
     p(99.9900) =  64552.960 us/op
     p(99.9990) =  64552.960 us/op
     p(99.9999) =  64552.960 us/op
    p(100.0000) =  64552.960 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 91.30% complete, ETA 00:42:38
# Fork: 1 of 1
# Warmup Iteration   1: 1774190.592 ±(99.9%) 478294.291 us/op
# Warmup Iteration   2: 1703586.475 ±(99.9%) 8853.820 us/op
# Warmup Iteration   3: 1702537.899 ±(99.9%) 6874.928 us/op
# Warmup Iteration   4: 1702887.424 ±(99.9%) 0.001 us/op
# Warmup Iteration   5: 1704635.051 ±(99.9%) 2400.829 us/op
Iteration   1: 1704984.576 ±(99.9%) 0.001 us/op
                 reduceLoops·p0.00:   1704984.576 us/op
                 reduceLoops·p0.50:   1704984.576 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration   2: 1703236.949 ±(99.9%) 2400.829 us/op
                 reduceLoops·p0.00:   1702887.424 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration   3: 1702887.424 ±(99.9%) 3719.348 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration   4: 1702537.899 ±(99.9%) 2400.829 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration   5: 1703586.475 ±(99.9%) 4801.658 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1703936.000 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration   6: 1703936.000 ±(99.9%) 3221.050 us/op
                 reduceLoops·p0.00:   1702887.424 us/op
                 reduceLoops·p0.50:   1703936.000 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration   7: 1703586.475 ±(99.9%) 3036.835 us/op
                 reduceLoops·p0.00:   1702887.424 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration   8: 1703236.949 ±(99.9%) 4426.910 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration   9: 1702887.424 ±(99.9%) 0.001 us/op
                 reduceLoops·p0.00:   1702887.424 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration  10: 1702887.424 ±(99.9%) 0.001 us/op
                 reduceLoops·p0.00:   1702887.424 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration  11: 1704984.576 ±(99.9%) 3719.348 us/op
                 reduceLoops·p0.00:   1702887.424 us/op
                 reduceLoops·p0.50:   1704984.576 us/op
                 reduceLoops·p0.90:   1707081.728 us/op
                 reduceLoops·p0.95:   1707081.728 us/op
                 reduceLoops·p0.99:   1707081.728 us/op
                 reduceLoops·p0.999:  1707081.728 us/op
                 reduceLoops·p0.9999: 1707081.728 us/op
                 reduceLoops·p1.00:   1707081.728 us/op

Iteration  12: 1705683.627 ±(99.9%) 4801.658 us/op
                 reduceLoops·p0.00:   1704984.576 us/op
                 reduceLoops·p0.50:   1704984.576 us/op
                 reduceLoops·p0.90:   1709178.880 us/op
                 reduceLoops·p0.95:   1709178.880 us/op
                 reduceLoops·p0.99:   1709178.880 us/op
                 reduceLoops·p0.999:  1709178.880 us/op
                 reduceLoops·p0.9999: 1709178.880 us/op
                 reduceLoops·p1.00:   1709178.880 us/op

Iteration  13: 1704984.576 ±(99.9%) 3719.348 us/op
                 reduceLoops·p0.00:   1702887.424 us/op
                 reduceLoops·p0.50:   1704984.576 us/op
                 reduceLoops·p0.90:   1707081.728 us/op
                 reduceLoops·p0.95:   1707081.728 us/op
                 reduceLoops·p0.99:   1707081.728 us/op
                 reduceLoops·p0.999:  1707081.728 us/op
                 reduceLoops·p0.9999: 1707081.728 us/op
                 reduceLoops·p1.00:   1707081.728 us/op

Iteration  14: 1705683.627 ±(99.9%) 8034.710 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1706033.152 us/op
                 reduceLoops·p0.90:   1709178.880 us/op
                 reduceLoops·p0.95:   1709178.880 us/op
                 reduceLoops·p0.99:   1709178.880 us/op
                 reduceLoops·p0.999:  1709178.880 us/op
                 reduceLoops·p0.9999: 1709178.880 us/op
                 reduceLoops·p1.00:   1709178.880 us/op

Iteration  15: 1703936.000 ±(99.9%) 3221.050 us/op
                 reduceLoops·p0.00:   1702887.424 us/op
                 reduceLoops·p0.50:   1703936.000 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  N = 90
  mean = 1703936.000 ±(99.9%) 577.809 us/op

  Histogram, us/op:
    [1700000.000, 1701000.000) = 5 
    [1701000.000, 1702000.000) = 0 
    [1702000.000, 1703000.000) = 43 
    [1703000.000, 1704000.000) = 0 
    [1704000.000, 1705000.000) = 36 
    [1705000.000, 1706000.000) = 0 
    [1706000.000, 1707000.000) = 0 
    [1707000.000, 1708000.000) = 4 
    [1708000.000, 1709000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1700790.272 us/op
     p(50.0000) = 1702887.424 us/op
     p(90.0000) = 1704984.576 us/op
     p(95.0000) = 1707081.728 us/op
     p(99.0000) = 1709178.880 us/op
     p(99.9000) = 1709178.880 us/op
     p(99.9900) = 1709178.880 us/op
     p(99.9990) = 1709178.880 us/op
     p(99.9999) = 1709178.880 us/op
    p(100.0000) = 1709178.880 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 92.03% complete, ETA 00:39:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.564 ±(99.9%) 0.004 us/op
# Warmup Iteration   2: 0.561 ±(99.9%) 0.004 us/op
# Warmup Iteration   3: 0.569 ±(99.9%) 0.003 us/op
# Warmup Iteration   4: 0.582 ±(99.9%) 0.004 us/op
# Warmup Iteration   5: 0.571 ±(99.9%) 0.004 us/op
Iteration   1: 0.573 ±(99.9%) 0.002 us/op
                 reduceSynchronizedBlocks·p0.00:   0.493 us/op
                 reduceSynchronizedBlocks·p0.50:   0.557 us/op
                 reduceSynchronizedBlocks·p0.90:   0.574 us/op
                 reduceSynchronizedBlocks·p0.95:   0.580 us/op
                 reduceSynchronizedBlocks·p0.99:   0.767 us/op
                 reduceSynchronizedBlocks·p0.999:  4.725 us/op
                 reduceSynchronizedBlocks·p0.9999: 15.926 us/op
                 reduceSynchronizedBlocks·p1.00:   98.304 us/op

Iteration   2: 0.606 ±(99.9%) 0.002 us/op
                 reduceSynchronizedBlocks·p0.00:   0.495 us/op
                 reduceSynchronizedBlocks·p0.50:   0.556 us/op
                 reduceSynchronizedBlocks·p0.90:   0.837 us/op
                 reduceSynchronizedBlocks·p0.95:   0.878 us/op
                 reduceSynchronizedBlocks·p0.99:   0.967 us/op
                 reduceSynchronizedBlocks·p0.999:  5.287 us/op
                 reduceSynchronizedBlocks·p0.9999: 14.949 us/op
                 reduceSynchronizedBlocks·p1.00:   47.744 us/op

Iteration   3: 0.568 ±(99.9%) 0.002 us/op
                 reduceSynchronizedBlocks·p0.00:   0.496 us/op
                 reduceSynchronizedBlocks·p0.50:   0.554 us/op
                 reduceSynchronizedBlocks·p0.90:   0.572 us/op
                 reduceSynchronizedBlocks·p0.95:   0.578 us/op
                 reduceSynchronizedBlocks·p0.99:   0.603 us/op
                 reduceSynchronizedBlocks·p0.999:  4.717 us/op
                 reduceSynchronizedBlocks·p0.9999: 14.468 us/op
                 reduceSynchronizedBlocks·p1.00:   54.528 us/op

Iteration   4: 0.566 ±(99.9%) 0.002 us/op
                 reduceSynchronizedBlocks·p0.00:   0.497 us/op
                 reduceSynchronizedBlocks·p0.50:   0.551 us/op
                 reduceSynchronizedBlocks·p0.90:   0.566 us/op
                 reduceSynchronizedBlocks·p0.95:   0.575 us/op
                 reduceSynchronizedBlocks·p0.99:   0.602 us/op
                 reduceSynchronizedBlocks·p0.999:  4.730 us/op
                 reduceSynchronizedBlocks·p0.9999: 15.033 us/op
                 reduceSynchronizedBlocks·p1.00:   50.944 us/op

Iteration   5: 0.566 ±(99.9%) 0.002 us/op
                 reduceSynchronizedBlocks·p0.00:   0.497 us/op
                 reduceSynchronizedBlocks·p0.50:   0.551 us/op
                 reduceSynchronizedBlocks·p0.90:   0.567 us/op
                 reduceSynchronizedBlocks·p0.95:   0.574 us/op
                 reduceSynchronizedBlocks·p0.99:   0.598 us/op
                 reduceSynchronizedBlocks·p0.999:  4.826 us/op
                 reduceSynchronizedBlocks·p0.9999: 15.693 us/op
                 reduceSynchronizedBlocks·p1.00:   72.960 us/op

Iteration   6: 0.570 ±(99.9%) 0.002 us/op
                 reduceSynchronizedBlocks·p0.00:   0.497 us/op
                 reduceSynchronizedBlocks·p0.50:   0.556 us/op
                 reduceSynchronizedBlocks·p0.90:   0.573 us/op
                 reduceSynchronizedBlocks·p0.95:   0.578 us/op
                 reduceSynchronizedBlocks·p0.99:   0.605 us/op
                 reduceSynchronizedBlocks·p0.999:  4.666 us/op
                 reduceSynchronizedBlocks·p0.9999: 14.530 us/op
                 reduceSynchronizedBlocks·p1.00:   85.504 us/op

Iteration   7: 0.572 ±(99.9%) 0.004 us/op
                 reduceSynchronizedBlocks·p0.00:   0.498 us/op
                 reduceSynchronizedBlocks·p0.50:   0.553 us/op
                 reduceSynchronizedBlocks·p0.90:   0.570 us/op
                 reduceSynchronizedBlocks·p0.95:   0.577 us/op
                 reduceSynchronizedBlocks·p0.99:   0.599 us/op
                 reduceSynchronizedBlocks·p0.999:  5.168 us/op
                 reduceSynchronizedBlocks·p0.9999: 28.376 us/op
                 reduceSynchronizedBlocks·p1.00:   113.024 us/op

Iteration   8: 0.569 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.497 us/op
                 reduceSynchronizedBlocks·p0.50:   0.555 us/op
                 reduceSynchronizedBlocks·p0.90:   0.572 us/op
                 reduceSynchronizedBlocks·p0.95:   0.577 us/op
                 reduceSynchronizedBlocks·p0.99:   0.604 us/op
                 reduceSynchronizedBlocks·p0.999:  4.837 us/op
                 reduceSynchronizedBlocks·p0.9999: 12.539 us/op
                 reduceSynchronizedBlocks·p1.00:   121.984 us/op

Iteration   9: 0.567 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.496 us/op
                 reduceSynchronizedBlocks·p0.50:   0.552 us/op
                 reduceSynchronizedBlocks·p0.90:   0.569 us/op
                 reduceSynchronizedBlocks·p0.95:   0.576 us/op
                 reduceSynchronizedBlocks·p0.99:   0.601 us/op
                 reduceSynchronizedBlocks·p0.999:  4.594 us/op
                 reduceSynchronizedBlocks·p0.9999: 14.724 us/op
                 reduceSynchronizedBlocks·p1.00:   136.960 us/op

Iteration  10: 0.571 ±(99.9%) 0.004 us/op
                 reduceSynchronizedBlocks·p0.00:   0.496 us/op
                 reduceSynchronizedBlocks·p0.50:   0.556 us/op
                 reduceSynchronizedBlocks·p0.90:   0.573 us/op
                 reduceSynchronizedBlocks·p0.95:   0.579 us/op
                 reduceSynchronizedBlocks·p0.99:   0.604 us/op
                 reduceSynchronizedBlocks·p0.999:  4.648 us/op
                 reduceSynchronizedBlocks·p0.9999: 12.716 us/op
                 reduceSynchronizedBlocks·p1.00:   195.840 us/op

Iteration  11: 0.604 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.496 us/op
                 reduceSynchronizedBlocks·p0.50:   0.555 us/op
                 reduceSynchronizedBlocks·p0.90:   0.831 us/op
                 reduceSynchronizedBlocks·p0.95:   0.872 us/op
                 reduceSynchronizedBlocks·p0.99:   0.957 us/op
                 reduceSynchronizedBlocks·p0.999:  4.947 us/op
                 reduceSynchronizedBlocks·p0.9999: 13.216 us/op
                 reduceSynchronizedBlocks·p1.00:   125.696 us/op

Iteration  12: 0.570 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.500 us/op
                 reduceSynchronizedBlocks·p0.50:   0.555 us/op
                 reduceSynchronizedBlocks·p0.90:   0.573 us/op
                 reduceSynchronizedBlocks·p0.95:   0.579 us/op
                 reduceSynchronizedBlocks·p0.99:   0.605 us/op
                 reduceSynchronizedBlocks·p0.999:  4.732 us/op
                 reduceSynchronizedBlocks·p0.9999: 17.064 us/op
                 reduceSynchronizedBlocks·p1.00:   91.264 us/op

Iteration  13: 0.571 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.497 us/op
                 reduceSynchronizedBlocks·p0.50:   0.556 us/op
                 reduceSynchronizedBlocks·p0.90:   0.574 us/op
                 reduceSynchronizedBlocks·p0.95:   0.580 us/op
                 reduceSynchronizedBlocks·p0.99:   0.609 us/op
                 reduceSynchronizedBlocks·p0.999:  5.080 us/op
                 reduceSynchronizedBlocks·p0.9999: 15.686 us/op
                 reduceSynchronizedBlocks·p1.00:   73.984 us/op

Iteration  14: 0.577 ±(99.9%) 0.010 us/op
                 reduceSynchronizedBlocks·p0.00:   0.498 us/op
                 reduceSynchronizedBlocks·p0.50:   0.554 us/op
                 reduceSynchronizedBlocks·p0.90:   0.572 us/op
                 reduceSynchronizedBlocks·p0.95:   0.580 us/op
                 reduceSynchronizedBlocks·p0.99:   0.611 us/op
                 reduceSynchronizedBlocks·p0.999:  4.879 us/op
                 reduceSynchronizedBlocks·p0.9999: 20.269 us/op
                 reduceSynchronizedBlocks·p1.00:   515.072 us/op

Iteration  15: 0.572 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.501 us/op
                 reduceSynchronizedBlocks·p0.50:   0.556 us/op
                 reduceSynchronizedBlocks·p0.90:   0.574 us/op
                 reduceSynchronizedBlocks·p0.95:   0.581 us/op
                 reduceSynchronizedBlocks·p0.99:   0.613 us/op
                 reduceSynchronizedBlocks·p0.999:  5.120 us/op
                 reduceSynchronizedBlocks·p0.9999: 15.327 us/op
                 reduceSynchronizedBlocks·p1.00:   82.176 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  N = 4464865
  mean =      0.575 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 4464814 
    [ 50.000, 100.000) = 37 
    [100.000, 150.000) = 8 
    [150.000, 200.000) = 2 
    [200.000, 250.000) = 0 
    [250.000, 300.000) = 0 
    [300.000, 350.000) = 0 
    [350.000, 400.000) = 2 
    [400.000, 450.000) = 1 
    [450.000, 500.000) = 0 
    [500.000, 550.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      0.493 us/op
     p(50.0000) =      0.554 us/op
     p(90.0000) =      0.573 us/op
     p(95.0000) =      0.581 us/op
     p(99.0000) =      0.872 us/op
     p(99.9000) =      4.864 us/op
     p(99.9900) =     15.184 us/op
     p(99.9990) =     54.486 us/op
     p(99.9999) =    288.311 us/op
    p(100.0000) =    515.072 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 92.75% complete, ETA 00:35:32
# Fork: 1 of 1
# Warmup Iteration   1: 7436.556 ±(99.9%) 37.922 us/op
# Warmup Iteration   2: 7420.419 ±(99.9%) 3.779 us/op
# Warmup Iteration   3: 7425.178 ±(99.9%) 8.489 us/op
# Warmup Iteration   4: 7417.528 ±(99.9%) 5.342 us/op
# Warmup Iteration   5: 7412.066 ±(99.9%) 3.024 us/op
Iteration   1: 7411.756 ±(99.9%) 4.389 us/op
                 reduceYoungObjects·p0.00:   7258.112 us/op
                 reduceYoungObjects·p0.50:   7405.568 us/op
                 reduceYoungObjects·p0.90:   7438.336 us/op
                 reduceYoungObjects·p0.95:   7462.912 us/op
                 reduceYoungObjects·p0.99:   7655.424 us/op
                 reduceYoungObjects·p0.999:  7939.277 us/op
                 reduceYoungObjects·p0.9999: 7970.816 us/op
                 reduceYoungObjects·p1.00:   7970.816 us/op

Iteration   2: 7412.582 ±(99.9%) 2.729 us/op
                 reduceYoungObjects·p0.00:   7258.112 us/op
                 reduceYoungObjects·p0.50:   7405.568 us/op
                 reduceYoungObjects·p0.90:   7446.528 us/op
                 reduceYoungObjects·p0.95:   7462.912 us/op
                 reduceYoungObjects·p0.99:   7532.544 us/op
                 reduceYoungObjects·p0.999:  7661.158 us/op
                 reduceYoungObjects·p0.9999: 7684.096 us/op
                 reduceYoungObjects·p1.00:   7684.096 us/op

Iteration   3: 7423.503 ±(99.9%) 7.692 us/op
                 reduceYoungObjects·p0.00:   7258.112 us/op
                 reduceYoungObjects·p0.50:   7413.760 us/op
                 reduceYoungObjects·p0.90:   7462.912 us/op
                 reduceYoungObjects·p0.95:   7503.872 us/op
                 reduceYoungObjects·p0.99:   7577.600 us/op
                 reduceYoungObjects·p0.999:  9324.200 us/op
                 reduceYoungObjects·p0.9999: 10190.848 us/op
                 reduceYoungObjects·p1.00:   10190.848 us/op

Iteration   4: 7411.246 ±(99.9%) 2.482 us/op
                 reduceYoungObjects·p0.00:   7315.456 us/op
                 reduceYoungObjects·p0.50:   7405.568 us/op
                 reduceYoungObjects·p0.90:   7446.528 us/op
                 reduceYoungObjects·p0.95:   7454.720 us/op
                 reduceYoungObjects·p0.99:   7503.872 us/op
                 reduceYoungObjects·p0.999:  7680.819 us/op
                 reduceYoungObjects·p0.9999: 7692.288 us/op
                 reduceYoungObjects·p1.00:   7692.288 us/op

Iteration   5: 7413.226 ±(99.9%) 2.652 us/op
                 reduceYoungObjects·p0.00:   7364.608 us/op
                 reduceYoungObjects·p0.50:   7405.568 us/op
                 reduceYoungObjects·p0.90:   7446.528 us/op
                 reduceYoungObjects·p0.95:   7462.912 us/op
                 reduceYoungObjects·p0.99:   7520.256 us/op
                 reduceYoungObjects·p0.999:  7639.859 us/op
                 reduceYoungObjects·p0.9999: 7651.328 us/op
                 reduceYoungObjects·p1.00:   7651.328 us/op

Iteration   6: 7413.438 ±(99.9%) 3.011 us/op
                 reduceYoungObjects·p0.00:   7274.496 us/op
                 reduceYoungObjects·p0.50:   7405.568 us/op
                 reduceYoungObjects·p0.90:   7446.528 us/op
                 reduceYoungObjects·p0.95:   7471.104 us/op
                 reduceYoungObjects·p0.99:   7548.928 us/op
                 reduceYoungObjects·p0.999:  7656.653 us/op
                 reduceYoungObjects·p0.9999: 7659.520 us/op
                 reduceYoungObjects·p1.00:   7659.520 us/op

Iteration   7: 7410.645 ±(99.9%) 3.239 us/op
                 reduceYoungObjects·p0.00:   7282.688 us/op
                 reduceYoungObjects·p0.50:   7405.568 us/op
                 reduceYoungObjects·p0.90:   7438.336 us/op
                 reduceYoungObjects·p0.95:   7454.720 us/op
                 reduceYoungObjects·p0.99:   7544.832 us/op
                 reduceYoungObjects·p0.999:  7926.989 us/op
                 reduceYoungObjects·p0.9999: 7987.200 us/op
                 reduceYoungObjects·p1.00:   7987.200 us/op

Iteration   8: 7411.871 ±(99.9%) 3.291 us/op
                 reduceYoungObjects·p0.00:   7225.344 us/op
                 reduceYoungObjects·p0.50:   7405.568 us/op
                 reduceYoungObjects·p0.90:   7446.528 us/op
                 reduceYoungObjects·p0.95:   7462.912 us/op
                 reduceYoungObjects·p0.99:   7540.736 us/op
                 reduceYoungObjects·p0.999:  7878.246 us/op
                 reduceYoungObjects·p0.9999: 7987.200 us/op
                 reduceYoungObjects·p1.00:   7987.200 us/op

Iteration   9: 7415.553 ±(99.9%) 3.372 us/op
                 reduceYoungObjects·p0.00:   7249.920 us/op
                 reduceYoungObjects·p0.50:   7405.568 us/op
                 reduceYoungObjects·p0.90:   7446.528 us/op
                 reduceYoungObjects·p0.95:   7471.104 us/op
                 reduceYoungObjects·p0.99:   7585.792 us/op
                 reduceYoungObjects·p0.999:  7796.474 us/op
                 reduceYoungObjects·p0.9999: 7847.936 us/op
                 reduceYoungObjects·p1.00:   7847.936 us/op

Iteration  10: 7412.545 ±(99.9%) 3.822 us/op
                 reduceYoungObjects·p0.00:   7233.536 us/op
                 reduceYoungObjects·p0.50:   7405.568 us/op
                 reduceYoungObjects·p0.90:   7446.528 us/op
                 reduceYoungObjects·p0.95:   7462.912 us/op
                 reduceYoungObjects·p0.99:   7536.640 us/op
                 reduceYoungObjects·p0.999:  8098.611 us/op
                 reduceYoungObjects·p0.9999: 8224.768 us/op
                 reduceYoungObjects·p1.00:   8224.768 us/op

Iteration  11: 7410.614 ±(99.9%) 2.945 us/op
                 reduceYoungObjects·p0.00:   7340.032 us/op
                 reduceYoungObjects·p0.50:   7405.568 us/op
                 reduceYoungObjects·p0.90:   7438.336 us/op
                 reduceYoungObjects·p0.95:   7462.912 us/op
                 reduceYoungObjects·p0.99:   7553.024 us/op
                 reduceYoungObjects·p0.999:  7758.643 us/op
                 reduceYoungObjects·p0.9999: 7798.784 us/op
                 reduceYoungObjects·p1.00:   7798.784 us/op

Iteration  12: 7413.554 ±(99.9%) 3.614 us/op
                 reduceYoungObjects·p0.00:   7241.728 us/op
                 reduceYoungObjects·p0.50:   7405.568 us/op
                 reduceYoungObjects·p0.90:   7446.528 us/op
                 reduceYoungObjects·p0.95:   7471.104 us/op
                 reduceYoungObjects·p0.99:   7557.120 us/op
                 reduceYoungObjects·p0.999:  7951.565 us/op
                 reduceYoungObjects·p0.9999: 8126.464 us/op
                 reduceYoungObjects·p1.00:   8126.464 us/op

Iteration  13: 7408.390 ±(99.9%) 3.476 us/op
                 reduceYoungObjects·p0.00:   7348.224 us/op
                 reduceYoungObjects·p0.50:   7405.568 us/op
                 reduceYoungObjects·p0.90:   7430.144 us/op
                 reduceYoungObjects·p0.95:   7454.720 us/op
                 reduceYoungObjects·p0.99:   7585.792 us/op
                 reduceYoungObjects·p0.999:  7893.778 us/op
                 reduceYoungObjects·p0.9999: 7905.280 us/op
                 reduceYoungObjects·p1.00:   7905.280 us/op

Iteration  14: 7420.322 ±(99.9%) 5.005 us/op
                 reduceYoungObjects·p0.00:   7233.536 us/op
                 reduceYoungObjects·p0.50:   7405.568 us/op
                 reduceYoungObjects·p0.90:   7454.720 us/op
                 reduceYoungObjects·p0.95:   7503.872 us/op
                 reduceYoungObjects·p0.99:   7659.520 us/op
                 reduceYoungObjects·p0.999:  7940.538 us/op
                 reduceYoungObjects·p0.9999: 7946.240 us/op
                 reduceYoungObjects·p1.00:   7946.240 us/op

Iteration  15: 7421.301 ±(99.9%) 7.772 us/op
                 reduceYoungObjects·p0.00:   7356.416 us/op
                 reduceYoungObjects·p0.50:   7413.760 us/op
                 reduceYoungObjects·p0.90:   7454.720 us/op
                 reduceYoungObjects·p0.95:   7479.296 us/op
                 reduceYoungObjects·p0.99:   7590.052 us/op
                 reduceYoungObjects·p0.999:  9377.612 us/op
                 reduceYoungObjects·p0.9999: 10272.768 us/op
                 reduceYoungObjects·p1.00:   10272.768 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  N = 20229
  mean =   7414.034 ±(99.9%) 1.106 us/op

  Histogram, us/op:
    [ 7000.000,  7250.000) = 9 
    [ 7250.000,  7500.000) = 19694 
    [ 7500.000,  7750.000) = 494 
    [ 7750.000,  8000.000) = 28 
    [ 8000.000,  8250.000) = 2 
    [ 8250.000,  8500.000) = 0 
    [ 8500.000,  8750.000) = 0 
    [ 8750.000,  9000.000) = 0 
    [ 9000.000,  9250.000) = 0 
    [ 9250.000,  9500.000) = 0 
    [ 9500.000,  9750.000) = 0 
    [ 9750.000, 10000.000) = 0 
    [10000.000, 10250.000) = 1 
    [10250.000, 10500.000) = 1 
    [10500.000, 10750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   7225.344 us/op
     p(50.0000) =   7405.568 us/op
     p(90.0000) =   7446.528 us/op
     p(95.0000) =   7471.104 us/op
     p(99.0000) =   7569.408 us/op
     p(99.9000) =   7854.244 us/op
     p(99.9900) =  10145.628 us/op
     p(99.9990) =  10272.768 us/op
     p(99.9999) =  10272.768 us/op
    p(100.0000) =  10272.768 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 93.48% complete, ETA 00:31:59
# Fork: 1 of 1
# Warmup Iteration   1: 34663.102 ±(99.9%) 420.878 us/op
# Warmup Iteration   2: 38826.016 ±(99.9%) 468.044 us/op
# Warmup Iteration   3: 35348.219 ±(99.9%) 264.892 us/op
# Warmup Iteration   4: 41375.422 ±(99.9%) 393.069 us/op
# Warmup Iteration   5: 37392.690 ±(99.9%) 262.804 us/op
Iteration   1: 35261.599 ±(99.9%) 117.182 us/op
                 redundantCode·p0.00:   34865.152 us/op
                 redundantCode·p0.50:   35192.832 us/op
                 redundantCode·p0.90:   35389.440 us/op
                 redundantCode·p0.95:   35454.976 us/op
                 redundantCode·p0.99:   36624.794 us/op
                 redundantCode·p0.999:  43712.512 us/op
                 redundantCode·p0.9999: 43712.512 us/op
                 redundantCode·p1.00:   43712.512 us/op

Iteration   2: 34915.389 ±(99.9%) 97.099 us/op
                 redundantCode·p0.00:   34603.008 us/op
                 redundantCode·p0.50:   34865.152 us/op
                 redundantCode·p0.90:   35061.760 us/op
                 redundantCode·p0.95:   35127.296 us/op
                 redundantCode·p0.99:   35418.276 us/op
                 redundantCode·p0.999:  42926.080 us/op
                 redundantCode·p0.9999: 42926.080 us/op
                 redundantCode·p1.00:   42926.080 us/op

Iteration   3: 38664.975 ±(99.9%) 160.966 us/op
                 redundantCode·p0.00:   38338.560 us/op
                 redundantCode·p0.50:   38600.704 us/op
                 redundantCode·p0.90:   38797.312 us/op
                 redundantCode·p0.95:   38993.920 us/op
                 redundantCode·p0.99:   39216.742 us/op
                 redundantCode·p0.999:  50855.936 us/op
                 redundantCode·p0.9999: 50855.936 us/op
                 redundantCode·p1.00:   50855.936 us/op

Iteration   4: 34816.285 ±(99.9%) 160.325 us/op
                 redundantCode·p0.00:   34537.472 us/op
                 redundantCode·p0.50:   34734.080 us/op
                 redundantCode·p0.90:   34930.688 us/op
                 redundantCode·p0.95:   35061.760 us/op
                 redundantCode·p0.99:   35994.993 us/op
                 redundantCode·p0.999:  48037.888 us/op
                 redundantCode·p0.9999: 48037.888 us/op
                 redundantCode·p1.00:   48037.888 us/op

Iteration   5: 37456.156 ±(99.9%) 354.437 us/op
                 redundantCode·p0.00:   37027.840 us/op
                 redundantCode·p0.50:   37355.520 us/op
                 redundantCode·p0.90:   37552.128 us/op
                 redundantCode·p0.95:   37617.664 us/op
                 redundantCode·p0.99:   38611.190 us/op
                 redundantCode·p0.999:  65536.000 us/op
                 redundantCode·p0.9999: 65536.000 us/op
                 redundantCode·p1.00:   65536.000 us/op

Iteration   6: 35522.604 ±(99.9%) 79.366 us/op
                 redundantCode·p0.00:   35258.368 us/op
                 redundantCode·p0.50:   35454.976 us/op
                 redundantCode·p0.90:   35717.120 us/op
                 redundantCode·p0.95:   35782.656 us/op
                 redundantCode·p0.99:   36460.298 us/op
                 redundantCode·p0.999:  41680.896 us/op
                 redundantCode·p0.9999: 41680.896 us/op
                 redundantCode·p1.00:   41680.896 us/op

Iteration   7: 34917.215 ±(99.9%) 112.641 us/op
                 redundantCode·p0.00:   34603.008 us/op
                 redundantCode·p0.50:   34865.152 us/op
                 redundantCode·p0.90:   35061.760 us/op
                 redundantCode·p0.95:   35258.368 us/op
                 redundantCode·p0.99:   36280.730 us/op
                 redundantCode·p0.999:  43974.656 us/op
                 redundantCode·p0.9999: 43974.656 us/op
                 redundantCode·p1.00:   43974.656 us/op

Iteration   8: 31262.822 ±(99.9%) 120.032 us/op
                 redundantCode·p0.00:   30998.528 us/op
                 redundantCode·p0.50:   31227.904 us/op
                 redundantCode·p0.90:   31391.744 us/op
                 redundantCode·p0.95:   31457.280 us/op
                 redundantCode·p0.99:   31666.012 us/op
                 redundantCode·p0.999:  42532.864 us/op
                 redundantCode·p0.9999: 42532.864 us/op
                 redundantCode·p1.00:   42532.864 us/op

Iteration   9: 34965.977 ±(99.9%) 171.680 us/op
                 redundantCode·p0.00:   34668.544 us/op
                 redundantCode·p0.50:   34865.152 us/op
                 redundantCode·p0.90:   35127.296 us/op
                 redundantCode·p0.95:   35258.368 us/op
                 redundantCode·p0.99:   35546.071 us/op
                 redundantCode·p0.999:  49414.144 us/op
                 redundantCode·p0.9999: 49414.144 us/op
                 redundantCode·p1.00:   49414.144 us/op

Iteration  10: 34729.301 ±(99.9%) 186.306 us/op
                 redundantCode·p0.00:   34340.864 us/op
                 redundantCode·p0.50:   34668.544 us/op
                 redundantCode·p0.90:   34865.152 us/op
                 redundantCode·p0.95:   34930.688 us/op
                 redundantCode·p0.99:   35206.595 us/op
                 redundantCode·p0.999:  50593.792 us/op
                 redundantCode·p0.9999: 50593.792 us/op
                 redundantCode·p1.00:   50593.792 us/op

Iteration  11: 37138.038 ±(99.9%) 349.615 us/op
                 redundantCode·p0.00:   36765.696 us/op
                 redundantCode·p0.50:   36962.304 us/op
                 redundantCode·p0.90:   37224.448 us/op
                 redundantCode·p0.95:   37355.520 us/op
                 redundantCode·p0.99:   38887.752 us/op
                 redundantCode·p0.999:  65077.248 us/op
                 redundantCode·p0.9999: 65077.248 us/op
                 redundantCode·p1.00:   65077.248 us/op

Iteration  12: 35249.599 ±(99.9%) 353.060 us/op
                 redundantCode·p0.00:   34799.616 us/op
                 redundantCode·p0.50:   35127.296 us/op
                 redundantCode·p0.90:   35389.440 us/op
                 redundantCode·p0.95:   35454.976 us/op
                 redundantCode·p0.99:   36385.587 us/op
                 redundantCode·p0.999:  65077.248 us/op
                 redundantCode·p0.9999: 65077.248 us/op
                 redundantCode·p1.00:   65077.248 us/op

Iteration  13: 33100.129 ±(99.9%) 427.831 us/op
                 redundantCode·p0.00:   32702.464 us/op
                 redundantCode·p0.50:   32899.072 us/op
                 redundantCode·p0.90:   33161.216 us/op
                 redundantCode·p0.95:   33479.066 us/op
                 redundantCode·p0.99:   34912.993 us/op
                 redundantCode·p0.999:  71565.312 us/op
                 redundantCode·p0.9999: 71565.312 us/op
                 redundantCode·p1.00:   71565.312 us/op

Iteration  14: 34583.959 ±(99.9%) 244.292 us/op
                 redundantCode·p0.00:   34275.328 us/op
                 redundantCode·p0.50:   34471.936 us/op
                 redundantCode·p0.90:   34668.544 us/op
                 redundantCode·p0.95:   34865.152 us/op
                 redundantCode·p0.99:   36490.445 us/op
                 redundantCode·p0.999:  55246.848 us/op
                 redundantCode·p0.9999: 55246.848 us/op
                 redundantCode·p1.00:   55246.848 us/op

Iteration  15: 33182.157 ±(99.9%) 344.584 us/op
                 redundantCode·p0.00:   32800.768 us/op
                 redundantCode·p0.50:   33062.912 us/op
                 redundantCode·p0.90:   33249.690 us/op
                 redundantCode·p0.95:   33385.677 us/op
                 redundantCode·p0.99:   34072.822 us/op
                 redundantCode·p0.999:  63963.136 us/op
                 redundantCode·p0.9999: 63963.136 us/op
                 redundantCode·p1.00:   63963.136 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  N = 4294
  mean =  34964.486 ±(99.9%) 107.886 us/op

  Histogram, us/op:
    [30000.000, 35000.000) = 2578 
    [35000.000, 40000.000) = 1700 
    [40000.000, 45000.000) = 6 
    [45000.000, 50000.000) = 2 
    [50000.000, 55000.000) = 2 
    [55000.000, 60000.000) = 1 
    [60000.000, 65000.000) = 1 
    [65000.000, 70000.000) = 3 
    [70000.000, 75000.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  30998.528 us/op
     p(50.0000) =  34865.152 us/op
     p(90.0000) =  37289.984 us/op
     p(95.0000) =  38535.168 us/op
     p(99.0000) =  38800.589 us/op
     p(99.9000) =  64748.585 us/op
     p(99.9900) =  71565.312 us/op
     p(99.9990) =  71565.312 us/op
     p(99.9999) =  71565.312 us/op
    p(100.0000) =  71565.312 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 94.20% complete, ETA 00:28:26
# Fork: 1 of 1
# Warmup Iteration   1: 37732.661 ±(99.9%) 2293.051 us/op
# Warmup Iteration   2: 36164.989 ±(99.9%) 1375.358 us/op
# Warmup Iteration   3: 36167.355 ±(99.9%) 1372.305 us/op
# Warmup Iteration   4: 36258.504 ±(99.9%) 1475.523 us/op
# Warmup Iteration   5: 36478.199 ±(99.9%) 1461.131 us/op
Iteration   1: 36286.286 ±(99.9%) 1506.758 us/op
                 split·p0.00:   34865.152 us/op
                 split·p0.50:   35061.760 us/op
                 split·p0.90:   35258.368 us/op
                 split·p0.95:   35389.440 us/op
                 split·p0.99:   82319.770 us/op
                 split·p0.999:  90963.968 us/op
                 split·p0.9999: 90963.968 us/op
                 split·p1.00:   90963.968 us/op

Iteration   2: 36286.761 ±(99.9%) 1467.613 us/op
                 split·p0.00:   34865.152 us/op
                 split·p0.50:   35061.760 us/op
                 split·p0.90:   35323.904 us/op
                 split·p0.95:   35464.806 us/op
                 split·p0.99:   82292.244 us/op
                 split·p0.999:  83361.792 us/op
                 split·p0.9999: 83361.792 us/op
                 split·p1.00:   83361.792 us/op

Iteration   3: 36223.599 ±(99.9%) 1439.146 us/op
                 split·p0.00:   34865.152 us/op
                 split·p0.50:   35061.760 us/op
                 split·p0.90:   35212.493 us/op
                 split·p0.95:   35333.734 us/op
                 split·p0.99:   81403.576 us/op
                 split·p0.999:  84803.584 us/op
                 split·p0.9999: 84803.584 us/op
                 split·p1.00:   84803.584 us/op

Iteration   4: 36185.336 ±(99.9%) 1423.476 us/op
                 split·p0.00:   34799.616 us/op
                 split·p0.50:   34996.224 us/op
                 split·p0.90:   35192.832 us/op
                 split·p0.95:   35389.440 us/op
                 split·p0.99:   79516.140 us/op
                 split·p0.999:  90963.968 us/op
                 split·p0.9999: 90963.968 us/op
                 split·p1.00:   90963.968 us/op

Iteration   5: 36144.878 ±(99.9%) 1382.056 us/op
                 split·p0.00:   34865.152 us/op
                 split·p0.50:   34996.224 us/op
                 split·p0.90:   35192.832 us/op
                 split·p0.95:   35389.440 us/op
                 split·p0.99:   79282.831 us/op
                 split·p0.999:  80871.424 us/op
                 split·p0.9999: 80871.424 us/op
                 split·p1.00:   80871.424 us/op

Iteration   6: 36227.161 ±(99.9%) 1397.243 us/op
                 split·p0.00:   34865.152 us/op
                 split·p0.50:   35061.760 us/op
                 split·p0.90:   35323.904 us/op
                 split·p0.95:   35586.048 us/op
                 split·p0.99:   79681.290 us/op
                 split·p0.999:  83623.936 us/op
                 split·p0.9999: 83623.936 us/op
                 split·p1.00:   83623.936 us/op

Iteration   7: 36144.642 ±(99.9%) 1428.744 us/op
                 split·p0.00:   34799.616 us/op
                 split·p0.50:   34996.224 us/op
                 split·p0.90:   35192.832 us/op
                 split·p0.95:   35330.458 us/op
                 split·p0.99:   80753.459 us/op
                 split·p0.999:  87818.240 us/op
                 split·p0.9999: 87818.240 us/op
                 split·p1.00:   87818.240 us/op

Iteration   8: 36229.773 ±(99.9%) 1410.622 us/op
                 split·p0.00:   34865.152 us/op
                 split·p0.50:   35061.760 us/op
                 split·p0.90:   35258.368 us/op
                 split·p0.95:   35333.734 us/op
                 split·p0.99:   79489.925 us/op
                 split·p0.999:  86245.376 us/op
                 split·p0.9999: 86245.376 us/op
                 split·p1.00:   86245.376 us/op

Iteration   9: 36131.866 ±(99.9%) 1380.561 us/op
                 split·p0.00:   34799.616 us/op
                 split·p0.50:   34996.224 us/op
                 split·p0.90:   35192.832 us/op
                 split·p0.95:   35389.440 us/op
                 split·p0.99:   79442.739 us/op
                 split·p0.999:  80084.992 us/op
                 split·p0.9999: 80084.992 us/op
                 split·p1.00:   80084.992 us/op

Iteration  10: 36200.567 ±(99.9%) 1383.717 us/op
                 split·p0.00:   34865.152 us/op
                 split·p0.50:   35061.760 us/op
                 split·p0.90:   35258.368 us/op
                 split·p0.95:   35323.904 us/op
                 split·p0.99:   78793.933 us/op
                 split·p0.999:  82968.576 us/op
                 split·p0.9999: 82968.576 us/op
                 split·p1.00:   82968.576 us/op

Iteration  11: 36327.201 ±(99.9%) 1372.786 us/op
                 split·p0.00:   34799.616 us/op
                 split·p0.50:   35127.296 us/op
                 split·p0.90:   35782.656 us/op
                 split·p0.95:   35992.371 us/op
                 split·p0.99:   79361.475 us/op
                 split·p0.999:  79691.776 us/op
                 split·p0.9999: 79691.776 us/op
                 split·p1.00:   79691.776 us/op

Iteration  12: 36230.010 ±(99.9%) 1420.792 us/op
                 split·p0.00:   34799.616 us/op
                 split·p0.50:   35061.760 us/op
                 split·p0.90:   35389.440 us/op
                 split·p0.95:   35595.878 us/op
                 split·p0.99:   81636.884 us/op
                 split·p0.999:  83886.080 us/op
                 split·p0.9999: 83886.080 us/op
                 split·p1.00:   83886.080 us/op

Iteration  13: 36292.460 ±(99.9%) 1522.948 us/op
                 split·p0.00:   34734.080 us/op
                 split·p0.50:   35061.760 us/op
                 split·p0.90:   35323.904 us/op
                 split·p0.95:   35661.414 us/op
                 split·p0.99:   85393.408 us/op
                 split·p0.999:  91095.040 us/op
                 split·p0.9999: 91095.040 us/op
                 split·p1.00:   91095.040 us/op

Iteration  14: 36204.841 ±(99.9%) 1392.773 us/op
                 split·p0.00:   34865.152 us/op
                 split·p0.50:   35061.760 us/op
                 split·p0.90:   35258.368 us/op
                 split·p0.95:   35323.904 us/op
                 split·p0.99:   79913.288 us/op
                 split·p0.999:  82051.072 us/op
                 split·p0.9999: 82051.072 us/op
                 split·p1.00:   82051.072 us/op

Iteration  15: 36183.443 ±(99.9%) 1412.204 us/op
                 split·p0.00:   34799.616 us/op
                 split·p0.50:   34996.224 us/op
                 split·p0.90:   35258.368 us/op
                 split·p0.95:   35323.904 us/op
                 split·p0.99:   81031.332 us/op
                 split·p0.999:  82182.144 us/op
                 split·p0.9999: 82182.144 us/op
                 split·p1.00:   82182.144 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  N = 4144
  mean =  36219.821 ±(99.9%) 363.237 us/op

  Histogram, us/op:
    [ 30000.000,  35000.000) = 1774 
    [ 35000.000,  40000.000) = 2265 
    [ 40000.000,  45000.000) = 0 
    [ 45000.000,  50000.000) = 0 
    [ 50000.000,  55000.000) = 0 
    [ 55000.000,  60000.000) = 0 
    [ 60000.000,  65000.000) = 0 
    [ 65000.000,  70000.000) = 0 
    [ 70000.000,  75000.000) = 0 
    [ 75000.000,  80000.000) = 67 
    [ 80000.000,  85000.000) = 31 
    [ 85000.000,  90000.000) = 3 
    [ 90000.000,  95000.000) = 4 

  Percentiles, us/op:
      p(0.0000) =  34734.080 us/op
     p(50.0000) =  35061.760 us/op
     p(90.0000) =  35258.368 us/op
     p(95.0000) =  35520.512 us/op
     p(99.0000) =  79894.938 us/op
     p(99.9000) =  90059.571 us/op
     p(99.9900) =  91095.040 us/op
     p(99.9990) =  91095.040 us/op
     p(99.9999) =  91095.040 us/op
    p(100.0000) =  91095.040 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 94.92% complete, ETA 00:24:53
# Fork: 1 of 1
# Warmup Iteration   1: 68041.303 ±(99.9%) 19718.327 us/op
# Warmup Iteration   2: 69163.305 ±(99.9%) 23057.549 us/op
# Warmup Iteration   3: 68840.181 ±(99.9%) 22189.482 us/op
# Warmup Iteration   4: 69056.187 ±(99.9%) 22742.326 us/op
# Warmup Iteration   5: 69703.908 ±(99.9%) 22921.026 us/op
Iteration   1: 70124.885 ±(99.9%) 23042.992 us/op
                 mapToPair·p0.00:   25722.880 us/op
                 mapToPair·p0.50:   25919.488 us/op
                 mapToPair·p0.90:   226230.272 us/op
                 mapToPair·p0.95:   232849.408 us/op
                 mapToPair·p0.99:   261160.960 us/op
                 mapToPair·p0.999:  265289.728 us/op
                 mapToPair·p0.9999: 265289.728 us/op
                 mapToPair·p1.00:   265289.728 us/op

Iteration   2: 70071.962 ±(99.9%) 23003.267 us/op
                 mapToPair·p0.00:   25722.880 us/op
                 mapToPair·p0.50:   26017.792 us/op
                 mapToPair·p0.90:   222979.686 us/op
                 mapToPair·p0.95:   229900.288 us/op
                 mapToPair·p0.99:   252916.531 us/op
                 mapToPair·p0.999:  253493.248 us/op
                 mapToPair·p0.9999: 253493.248 us/op
                 mapToPair·p1.00:   253493.248 us/op

Iteration   3: 70552.917 ±(99.9%) 23418.819 us/op
                 mapToPair·p0.00:   25722.880 us/op
                 mapToPair·p0.50:   25919.488 us/op
                 mapToPair·p0.90:   223870.976 us/op
                 mapToPair·p0.95:   239927.296 us/op
                 mapToPair·p0.99:   262982.861 us/op
                 mapToPair·p0.999:  263454.720 us/op
                 mapToPair·p0.9999: 263454.720 us/op
                 mapToPair·p1.00:   263454.720 us/op

Iteration   4: 70062.278 ±(99.9%) 22965.057 us/op
                 mapToPair·p0.00:   25722.880 us/op
                 mapToPair·p0.50:   25952.256 us/op
                 mapToPair·p0.90:   222560.256 us/op
                 mapToPair·p0.95:   233963.520 us/op
                 mapToPair·p0.99:   257656.095 us/op
                 mapToPair·p0.999:  260308.992 us/op
                 mapToPair·p0.9999: 260308.992 us/op
                 mapToPair·p1.00:   260308.992 us/op

Iteration   5: 70521.515 ±(99.9%) 23229.173 us/op
                 mapToPair·p0.00:   25722.880 us/op
                 mapToPair·p0.50:   25985.024 us/op
                 mapToPair·p0.90:   224788.480 us/op
                 mapToPair·p0.95:   240844.800 us/op
                 mapToPair·p0.99:   263598.899 us/op
                 mapToPair·p0.999:  273154.048 us/op
                 mapToPair·p0.9999: 273154.048 us/op
                 mapToPair·p1.00:   273154.048 us/op

Iteration   6: 70745.883 ±(99.9%) 23296.409 us/op
                 mapToPair·p0.00:   25690.112 us/op
                 mapToPair·p0.50:   25985.024 us/op
                 mapToPair·p0.90:   224290.406 us/op
                 mapToPair·p0.95:   236768.461 us/op
                 mapToPair·p0.99:   253912.678 us/op
                 mapToPair·p0.999:  255066.112 us/op
                 mapToPair·p0.9999: 255066.112 us/op
                 mapToPair·p1.00:   255066.112 us/op

Iteration   7: 69703.864 ±(99.9%) 23111.842 us/op
                 mapToPair·p0.00:   25722.880 us/op
                 mapToPair·p0.50:   25919.488 us/op
                 mapToPair·p0.90:   226544.845 us/op
                 mapToPair·p0.95:   245707.571 us/op
                 mapToPair·p0.99:   253860.250 us/op
                 mapToPair·p0.999:  255066.112 us/op
                 mapToPair·p0.9999: 255066.112 us/op
                 mapToPair·p1.00:   255066.112 us/op

Iteration   8: 70228.878 ±(99.9%) 22850.202 us/op
                 mapToPair·p0.00:   25690.112 us/op
                 mapToPair·p0.50:   25952.256 us/op
                 mapToPair·p0.90:   221773.824 us/op
                 mapToPair·p0.95:   230752.256 us/op
                 mapToPair·p0.99:   258578.842 us/op
                 mapToPair·p0.999:  261881.856 us/op
                 mapToPair·p0.9999: 261881.856 us/op
                 mapToPair·p1.00:   261881.856 us/op

Iteration   9: 70104.537 ±(99.9%) 23074.059 us/op
                 mapToPair·p0.00:   25657.344 us/op
                 mapToPair·p0.50:   25919.488 us/op
                 mapToPair·p0.90:   224971.981 us/op
                 mapToPair·p0.95:   241251.123 us/op
                 mapToPair·p0.99:   261824.184 us/op
                 mapToPair·p0.999:  262668.288 us/op
                 mapToPair·p0.9999: 262668.288 us/op
                 mapToPair·p1.00:   262668.288 us/op

Iteration  10: 69900.246 ±(99.9%) 22698.232 us/op
                 mapToPair·p0.00:   25722.880 us/op
                 mapToPair·p0.50:   26017.792 us/op
                 mapToPair·p0.90:   220934.963 us/op
                 mapToPair·p0.95:   237502.464 us/op
                 mapToPair·p0.99:   251317.453 us/op
                 mapToPair·p0.999:  251920.384 us/op
                 mapToPair·p0.9999: 251920.384 us/op
                 mapToPair·p1.00:   251920.384 us/op

Iteration  11: 70326.272 ±(99.9%) 22891.240 us/op
                 mapToPair·p0.00:   25690.112 us/op
                 mapToPair·p0.50:   25985.024 us/op
                 mapToPair·p0.90:   221773.824 us/op
                 mapToPair·p0.95:   236584.960 us/op
                 mapToPair·p0.99:   263127.040 us/op
                 mapToPair·p0.999:  263716.864 us/op
                 mapToPair·p0.9999: 263716.864 us/op
                 mapToPair·p1.00:   263716.864 us/op

Iteration  12: 70014.293 ±(99.9%) 23024.323 us/op
                 mapToPair·p0.00:   25722.880 us/op
                 mapToPair·p0.50:   25919.488 us/op
                 mapToPair·p0.90:   225574.912 us/op
                 mapToPair·p0.95:   236978.176 us/op
                 mapToPair·p0.99:   253519.462 us/op
                 mapToPair·p0.999:  253755.392 us/op
                 mapToPair·p0.9999: 253755.392 us/op
                 mapToPair·p1.00:   253755.392 us/op

Iteration  13: 70399.090 ±(99.9%) 23132.944 us/op
                 mapToPair·p0.00:   25722.880 us/op
                 mapToPair·p0.50:   25985.024 us/op
                 mapToPair·p0.90:   223608.832 us/op
                 mapToPair·p0.95:   235929.600 us/op
                 mapToPair·p0.99:   263743.078 us/op
                 mapToPair·p0.999:  263979.008 us/op
                 mapToPair·p0.9999: 263979.008 us/op
                 mapToPair·p1.00:   263979.008 us/op

Iteration  14: 70126.910 ±(99.9%) 23241.793 us/op
                 mapToPair·p0.00:   25722.880 us/op
                 mapToPair·p0.50:   26017.792 us/op
                 mapToPair·p0.90:   225338.982 us/op
                 mapToPair·p0.95:   246467.789 us/op
                 mapToPair·p0.99:   263113.933 us/op
                 mapToPair·p0.999:  263716.864 us/op
                 mapToPair·p0.9999: 263716.864 us/op
                 mapToPair·p1.00:   263716.864 us/op

Iteration  15: 69862.280 ±(99.9%) 22576.015 us/op
                 mapToPair·p0.00:   25722.880 us/op
                 mapToPair·p0.50:   26017.792 us/op
                 mapToPair·p0.90:   222874.829 us/op
                 mapToPair·p0.95:   233491.661 us/op
                 mapToPair·p0.99:   261132.124 us/op
                 mapToPair·p0.999:  266076.160 us/op
                 mapToPair·p0.9999: 266076.160 us/op
                 mapToPair·p1.00:   266076.160 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  N = 2164
  mean =  70182.227 ±(99.9%) 5814.862 us/op

  Histogram, us/op:
    [     0.000,  25000.000) = 0 
    [ 25000.000,  50000.000) = 1668 
    [ 50000.000,  75000.000) = 16 
    [ 75000.000, 100000.000) = 0 
    [100000.000, 125000.000) = 0 
    [125000.000, 150000.000) = 0 
    [150000.000, 175000.000) = 0 
    [175000.000, 200000.000) = 45 
    [200000.000, 225000.000) = 245 
    [225000.000, 250000.000) = 139 
    [250000.000, 275000.000) = 51 

  Percentiles, us/op:
      p(0.0000) =  25657.344 us/op
     p(50.0000) =  25952.256 us/op
     p(90.0000) = 223870.976 us/op
     p(95.0000) = 235274.240 us/op
     p(99.0000) = 255157.862 us/op
     p(99.9000) = 265946.399 us/op
     p(99.9900) = 273154.048 us/op
     p(99.9990) = 273154.048 us/op
     p(99.9999) = 273154.048 us/op
    p(100.0000) = 273154.048 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 95.65% complete, ETA 00:21:20
# Fork: 1 of 1
# Warmup Iteration   1: 21129.679 ±(99.9%) 300.935 us/op
# Warmup Iteration   2: 20940.877 ±(99.9%) 311.032 us/op
# Warmup Iteration   3: 20688.548 ±(99.9%) 405.050 us/op
# Warmup Iteration   4: 20809.179 ±(99.9%) 507.211 us/op
# Warmup Iteration   5: 20767.774 ±(99.9%) 435.758 us/op
Iteration   1: 20815.599 ±(99.9%) 544.068 us/op
                 plusOne·p0.00:   18972.672 us/op
                 plusOne·p0.50:   20414.464 us/op
                 plusOne·p0.90:   20742.144 us/op
                 plusOne·p0.95:   22755.738 us/op
                 plusOne·p0.99:   47154.463 us/op
                 plusOne·p0.999:  56360.960 us/op
                 plusOne·p0.9999: 56360.960 us/op
                 plusOne·p1.00:   56360.960 us/op

Iteration   2: 20913.593 ±(99.9%) 747.177 us/op
                 plusOne·p0.00:   18972.672 us/op
                 plusOne·p0.50:   20381.696 us/op
                 plusOne·p0.90:   20578.304 us/op
                 plusOne·p0.95:   20874.854 us/op
                 plusOne·p0.99:   56282.317 us/op
                 plusOne·p0.999:  66322.432 us/op
                 plusOne·p0.9999: 66322.432 us/op
                 plusOne·p1.00:   66322.432 us/op

Iteration   3: 20891.344 ±(99.9%) 660.404 us/op
                 plusOne·p0.00:   18939.904 us/op
                 plusOne·p0.50:   20348.928 us/op
                 plusOne·p0.90:   20643.840 us/op
                 plusOne·p0.95:   22183.936 us/op
                 plusOne·p0.99:   53031.731 us/op
                 plusOne·p0.999:  58589.184 us/op
                 plusOne·p0.9999: 58589.184 us/op
                 plusOne·p1.00:   58589.184 us/op

Iteration   4: 20876.363 ±(99.9%) 665.177 us/op
                 plusOne·p0.00:   18939.904 us/op
                 plusOne·p0.50:   20381.696 us/op
                 plusOne·p0.90:   20611.072 us/op
                 plusOne·p0.95:   21397.504 us/op
                 plusOne·p0.99:   51327.795 us/op
                 plusOne·p0.999:  67502.080 us/op
                 plusOne·p0.9999: 67502.080 us/op
                 plusOne·p1.00:   67502.080 us/op

Iteration   5: 20910.783 ±(99.9%) 690.732 us/op
                 plusOne·p0.00:   18972.672 us/op
                 plusOne·p0.50:   20348.928 us/op
                 plusOne·p0.90:   20611.072 us/op
                 plusOne·p0.95:   22976.922 us/op
                 plusOne·p0.99:   54155.674 us/op
                 plusOne·p0.999:  64552.960 us/op
                 plusOne·p0.9999: 64552.960 us/op
                 plusOne·p1.00:   64552.960 us/op

Iteration   6: 20909.275 ±(99.9%) 710.024 us/op
                 plusOne·p0.00:   18939.904 us/op
                 plusOne·p0.50:   20348.928 us/op
                 plusOne·p0.90:   20679.885 us/op
                 plusOne·p0.95:   21300.838 us/op
                 plusOne·p0.99:   54746.153 us/op
                 plusOne·p0.999:  60948.480 us/op
                 plusOne·p0.9999: 60948.480 us/op
                 plusOne·p1.00:   60948.480 us/op

Iteration   7: 21018.813 ±(99.9%) 712.891 us/op
                 plusOne·p0.00:   19038.208 us/op
                 plusOne·p0.50:   20381.696 us/op
                 plusOne·p0.90:   20545.536 us/op
                 plusOne·p0.95:   20709.376 us/op
                 plusOne·p0.99:   53995.110 us/op
                 plusOne·p0.999:  64684.032 us/op
                 plusOne·p0.9999: 64684.032 us/op
                 plusOne·p1.00:   64684.032 us/op

Iteration   8: 20986.839 ±(99.9%) 645.273 us/op
                 plusOne·p0.00:   20185.088 us/op
                 plusOne·p0.50:   20348.928 us/op
                 plusOne·p0.90:   20578.304 us/op
                 plusOne·p0.95:   20745.421 us/op
                 plusOne·p0.99:   52766.966 us/op
                 plusOne·p0.999:  57999.360 us/op
                 plusOne·p0.9999: 57999.360 us/op
                 plusOne·p1.00:   57999.360 us/op

Iteration   9: 20989.832 ±(99.9%) 673.572 us/op
                 plusOne·p0.00:   20185.088 us/op
                 plusOne·p0.50:   20348.928 us/op
                 plusOne·p0.90:   20545.536 us/op
                 plusOne·p0.95:   20648.755 us/op
                 plusOne·p0.99:   54092.104 us/op
                 plusOne·p0.999:  60882.944 us/op
                 plusOne·p0.9999: 60882.944 us/op
                 plusOne·p1.00:   60882.944 us/op

Iteration  10: 21061.684 ±(99.9%) 691.257 us/op
                 plusOne·p0.00:   20185.088 us/op
                 plusOne·p0.50:   20348.928 us/op
                 plusOne·p0.90:   20545.536 us/op
                 plusOne·p0.95:   20807.680 us/op
                 plusOne·p0.99:   55058.104 us/op
                 plusOne·p0.999:  62128.128 us/op
                 plusOne·p0.9999: 62128.128 us/op
                 plusOne·p1.00:   62128.128 us/op

Iteration  11: 21007.248 ±(99.9%) 699.716 us/op
                 plusOne·p0.00:   20185.088 us/op
                 plusOne·p0.50:   20348.928 us/op
                 plusOne·p0.90:   20545.536 us/op
                 plusOne·p0.95:   20709.376 us/op
                 plusOne·p0.99:   56682.742 us/op
                 plusOne·p0.999:  63045.632 us/op
                 plusOne·p0.9999: 63045.632 us/op
                 plusOne·p1.00:   63045.632 us/op

Iteration  12: 21177.084 ±(99.9%) 694.153 us/op
                 plusOne·p0.00:   20185.088 us/op
                 plusOne·p0.50:   20414.464 us/op
                 plusOne·p0.90:   20742.144 us/op
                 plusOne·p0.95:   23083.418 us/op
                 plusOne·p0.99:   53346.304 us/op
                 plusOne·p0.999:  61210.624 us/op
                 plusOne·p0.9999: 61210.624 us/op
                 plusOne·p1.00:   61210.624 us/op

Iteration  13: 21097.131 ±(99.9%) 667.510 us/op
                 plusOne·p0.00:   20217.856 us/op
                 plusOne·p0.50:   20381.696 us/op
                 plusOne·p0.90:   20709.376 us/op
                 plusOne·p0.95:   21118.976 us/op
                 plusOne·p0.99:   53592.064 us/op
                 plusOne·p0.999:  58720.256 us/op
                 plusOne·p0.9999: 58720.256 us/op
                 plusOne·p1.00:   58720.256 us/op

Iteration  14: 21156.143 ±(99.9%) 712.984 us/op
                 plusOne·p0.00:   20185.088 us/op
                 plusOne·p0.50:   20381.696 us/op
                 plusOne·p0.90:   20643.840 us/op
                 plusOne·p0.95:   21590.835 us/op
                 plusOne·p0.99:   52975.370 us/op
                 plusOne·p0.999:  66453.504 us/op
                 plusOne·p0.9999: 66453.504 us/op
                 plusOne·p1.00:   66453.504 us/op

Iteration  15: 21169.031 ±(99.9%) 723.409 us/op
                 plusOne·p0.00:   20185.088 us/op
                 plusOne·p0.50:   20381.696 us/op
                 plusOne·p0.90:   20643.840 us/op
                 plusOne·p0.95:   21772.698 us/op
                 plusOne·p0.99:   56376.689 us/op
                 plusOne·p0.999:  64487.424 us/op
                 plusOne·p0.9999: 64487.424 us/op
                 plusOne·p1.00:   64487.424 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  N = 7143
  mean =  20998.145 ±(99.9%) 175.426 us/op

  Histogram, us/op:
    [10000.000, 15000.000) = 0 
    [15000.000, 20000.000) = 553 
    [20000.000, 25000.000) = 6358 
    [25000.000, 30000.000) = 109 
    [30000.000, 35000.000) = 4 
    [35000.000, 40000.000) = 1 
    [40000.000, 45000.000) = 1 
    [45000.000, 50000.000) = 19 
    [50000.000, 55000.000) = 47 
    [55000.000, 60000.000) = 31 
    [60000.000, 65000.000) = 16 

  Percentiles, us/op:
      p(0.0000) =  18939.904 us/op
     p(50.0000) =  20381.696 us/op
     p(90.0000) =  20611.072 us/op
     p(95.0000) =  20938.752 us/op
     p(99.0000) =  53120.860 us/op
     p(99.9000) =  64345.866 us/op
     p(99.9900) =  67502.080 us/op
     p(99.9990) =  67502.080 us/op
     p(99.9999) =  67502.080 us/op
    p(100.0000) =  67502.080 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 96.37% complete, ETA 00:17:47
# Fork: 1 of 1
# Warmup Iteration   1: 38038.041 ±(99.9%) 529.262 us/op
# Warmup Iteration   2: 38433.335 ±(99.9%) 348.707 us/op
# Warmup Iteration   3: 40525.658 ±(99.9%) 491.994 us/op
# Warmup Iteration   4: 39040.256 ±(99.9%) 483.456 us/op
# Warmup Iteration   5: 38297.882 ±(99.9%) 365.420 us/op
Iteration   1: 38512.482 ±(99.9%) 453.039 us/op
                 sort·p0.00:   37879.808 us/op
                 sort·p0.50:   38141.952 us/op
                 sort·p0.90:   38404.096 us/op
                 sort·p0.95:   38666.240 us/op
                 sort·p0.99:   52555.284 us/op
                 sort·p0.999:  60424.192 us/op
                 sort·p0.9999: 60424.192 us/op
                 sort·p1.00:   60424.192 us/op

Iteration   2: 38101.584 ±(99.9%) 439.622 us/op
                 sort·p0.00:   37421.056 us/op
                 sort·p0.50:   37748.736 us/op
                 sort·p0.90:   38010.880 us/op
                 sort·p0.95:   38194.381 us/op
                 sort·p0.99:   53865.349 us/op
                 sort·p0.999:  57540.608 us/op
                 sort·p0.9999: 57540.608 us/op
                 sort·p1.00:   57540.608 us/op

Iteration   3: 37964.459 ±(99.9%) 595.684 us/op
                 sort·p0.00:   37158.912 us/op
                 sort·p0.50:   37486.592 us/op
                 sort·p0.90:   37748.736 us/op
                 sort·p0.95:   37928.960 us/op
                 sort·p0.99:   57586.483 us/op
                 sort·p0.999:  62193.664 us/op
                 sort·p0.9999: 62193.664 us/op
                 sort·p1.00:   62193.664 us/op

Iteration   4: 38298.385 ±(99.9%) 714.876 us/op
                 sort·p0.00:   37421.056 us/op
                 sort·p0.50:   37683.200 us/op
                 sort·p0.90:   37945.344 us/op
                 sort·p0.95:   38076.416 us/op
                 sort·p0.99:   64061.440 us/op
                 sort·p0.999:  68943.872 us/op
                 sort·p0.9999: 68943.872 us/op
                 sort·p1.00:   68943.872 us/op

Iteration   5: 37597.461 ±(99.9%) 743.613 us/op
                 sort·p0.00:   36700.160 us/op
                 sort·p0.50:   36962.304 us/op
                 sort·p0.90:   37355.520 us/op
                 sort·p0.95:   37660.262 us/op
                 sort·p0.99:   64020.152 us/op
                 sort·p0.999:  66781.184 us/op
                 sort·p0.9999: 66781.184 us/op
                 sort·p1.00:   66781.184 us/op

Iteration   6: 37829.358 ±(99.9%) 942.519 us/op
                 sort·p0.00:   36831.232 us/op
                 sort·p0.50:   37027.840 us/op
                 sort·p0.90:   37355.520 us/op
                 sort·p0.95:   38010.880 us/op
                 sort·p0.99:   70047.498 us/op
                 sort·p0.999:  74711.040 us/op
                 sort·p0.9999: 74711.040 us/op
                 sort·p1.00:   74711.040 us/op

Iteration   7: 39458.348 ±(99.9%) 944.401 us/op
                 sort·p0.00:   38469.632 us/op
                 sort·p0.50:   38731.776 us/op
                 sort·p0.90:   38993.920 us/op
                 sort·p0.95:   39272.448 us/op
                 sort·p0.99:   73295.462 us/op
                 sort·p0.999:  76546.048 us/op
                 sort·p0.9999: 76546.048 us/op
                 sort·p1.00:   76546.048 us/op

Iteration   8: 38347.599 ±(99.9%) 957.033 us/op
                 sort·p0.00:   37289.984 us/op
                 sort·p0.50:   37552.128 us/op
                 sort·p0.90:   37879.808 us/op
                 sort·p0.95:   38397.542 us/op
                 sort·p0.99:   71290.061 us/op
                 sort·p0.999:  79036.416 us/op
                 sort·p0.9999: 79036.416 us/op
                 sort·p1.00:   79036.416 us/op

Iteration   9: 38993.920 ±(99.9%) 955.306 us/op
                 sort·p0.00:   37945.344 us/op
                 sort·p0.50:   38273.024 us/op
                 sort·p0.90:   38535.168 us/op
                 sort·p0.95:   38823.526 us/op
                 sort·p0.99:   72723.988 us/op
                 sort·p0.999:  75759.616 us/op
                 sort·p0.9999: 75759.616 us/op
                 sort·p1.00:   75759.616 us/op

Iteration  10: 39344.305 ±(99.9%) 959.697 us/op
                 sort·p0.00:   38338.560 us/op
                 sort·p0.50:   38535.168 us/op
                 sort·p0.90:   38928.384 us/op
                 sort·p0.95:   39337.984 us/op
                 sort·p0.99:   71394.918 us/op
                 sort·p0.999:  74186.752 us/op
                 sort·p0.9999: 74186.752 us/op
                 sort·p1.00:   74186.752 us/op

Iteration  11: 38354.881 ±(99.9%) 969.724 us/op
                 sort·p0.00:   37289.984 us/op
                 sort·p0.50:   37552.128 us/op
                 sort·p0.90:   37879.808 us/op
                 sort·p0.95:   39393.690 us/op
                 sort·p0.99:   71240.253 us/op
                 sort·p0.999:  74842.112 us/op
                 sort·p0.9999: 74842.112 us/op
                 sort·p1.00:   74842.112 us/op

Iteration  12: 38960.259 ±(99.9%) 976.596 us/op
                 sort·p0.00:   38010.880 us/op
                 sort·p0.50:   38207.488 us/op
                 sort·p0.90:   38535.168 us/op
                 sort·p0.95:   38731.776 us/op
                 sort·p0.99:   72978.268 us/op
                 sort·p0.999:  77070.336 us/op
                 sort·p0.9999: 77070.336 us/op
                 sort·p1.00:   77070.336 us/op

Iteration  13: 38825.000 ±(99.9%) 916.918 us/op
                 sort·p0.00:   37748.736 us/op
                 sort·p0.50:   38076.416 us/op
                 sort·p0.90:   38345.114 us/op
                 sort·p0.95:   39675.494 us/op
                 sort·p0.99:   70959.759 us/op
                 sort·p0.999:  73138.176 us/op
                 sort·p0.9999: 73138.176 us/op
                 sort·p1.00:   73138.176 us/op

Iteration  14: 38355.886 ±(99.9%) 1004.685 us/op
                 sort·p0.00:   37158.912 us/op
                 sort·p0.50:   37552.128 us/op
                 sort·p0.90:   37814.272 us/op
                 sort·p0.95:   40494.694 us/op
                 sort·p0.99:   70422.364 us/op
                 sort·p0.999:  83230.720 us/op
                 sort·p0.9999: 83230.720 us/op
                 sort·p1.00:   83230.720 us/op

Iteration  15: 39309.521 ±(99.9%) 1018.061 us/op
                 sort·p0.00:   38207.488 us/op
                 sort·p0.50:   38469.632 us/op
                 sort·p0.90:   38666.240 us/op
                 sort·p0.95:   40252.211 us/op
                 sort·p0.99:   75219.599 us/op
                 sort·p0.999:  75759.616 us/op
                 sort·p0.9999: 75759.616 us/op
                 sort·p1.00:   75759.616 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  N = 3897
  mean =  38542.282 ±(99.9%) 220.979 us/op

  Histogram, us/op:
    [30000.000, 35000.000) = 0 
    [35000.000, 40000.000) = 3753 
    [40000.000, 45000.000) = 49 
    [45000.000, 50000.000) = 22 
    [50000.000, 55000.000) = 8 
    [55000.000, 60000.000) = 6 
    [60000.000, 65000.000) = 9 
    [65000.000, 70000.000) = 22 
    [70000.000, 75000.000) = 19 
    [75000.000, 80000.000) = 8 
    [80000.000, 85000.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  36700.160 us/op
     p(50.0000) =  37945.344 us/op
     p(90.0000) =  38731.776 us/op
     p(95.0000) =  38993.920 us/op
     p(99.0000) =  68157.440 us/op
     p(99.9000) =  76599.525 us/op
     p(99.9900) =  83230.720 us/op
     p(99.9990) =  83230.720 us/op
     p(99.9999) =  83230.720 us/op
    p(100.0000) =  83230.720 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 97.10% complete, ETA 00:14:13
# Fork: 1 of 1
# Warmup Iteration   1: 680.254 ±(99.9%) 9.481 us/op
# Warmup Iteration   2: 677.768 ±(99.9%) 8.575 us/op
# Warmup Iteration   3: 677.758 ±(99.9%) 10.501 us/op
# Warmup Iteration   4: 674.631 ±(99.9%) 8.547 us/op
# Warmup Iteration   5: 674.183 ±(99.9%) 8.429 us/op
Iteration   1: 673.830 ±(99.9%) 8.637 us/op
                 concatenateStrings·p0.00:   605.184 us/op
                 concatenateStrings·p0.50:   655.360 us/op
                 concatenateStrings·p0.90:   681.984 us/op
                 concatenateStrings·p0.95:   692.224 us/op
                 concatenateStrings·p0.99:   724.992 us/op
                 concatenateStrings·p0.999:  4766.638 us/op
                 concatenateStrings·p0.9999: 17137.059 us/op
                 concatenateStrings·p1.00:   21463.040 us/op

Iteration   2: 677.120 ±(99.9%) 8.898 us/op
                 concatenateStrings·p0.00:   607.232 us/op
                 concatenateStrings·p0.50:   657.408 us/op
                 concatenateStrings·p0.90:   684.032 us/op
                 concatenateStrings·p0.95:   694.272 us/op
                 concatenateStrings·p0.99:   726.016 us/op
                 concatenateStrings·p0.999:  5862.523 us/op
                 concatenateStrings·p0.9999: 13968.384 us/op
                 concatenateStrings·p1.00:   14942.208 us/op

Iteration   3: 678.124 ±(99.9%) 10.468 us/op
                 concatenateStrings·p0.00:   599.040 us/op
                 concatenateStrings·p0.50:   656.384 us/op
                 concatenateStrings·p0.90:   684.032 us/op
                 concatenateStrings·p0.95:   693.248 us/op
                 concatenateStrings·p0.99:   728.064 us/op
                 concatenateStrings·p0.999:  6958.948 us/op
                 concatenateStrings·p0.9999: 16533.565 us/op
                 concatenateStrings·p1.00:   17006.592 us/op

Iteration   4: 673.393 ±(99.9%) 9.063 us/op
                 concatenateStrings·p0.00:   599.040 us/op
                 concatenateStrings·p0.50:   654.336 us/op
                 concatenateStrings·p0.90:   681.984 us/op
                 concatenateStrings·p0.95:   691.200 us/op
                 concatenateStrings·p0.99:   718.848 us/op
                 concatenateStrings·p0.999:  5622.137 us/op
                 concatenateStrings·p0.9999: 16676.815 us/op
                 concatenateStrings·p1.00:   20480.000 us/op

Iteration   5: 677.712 ±(99.9%) 10.370 us/op
                 concatenateStrings·p0.00:   605.184 us/op
                 concatenateStrings·p0.50:   656.384 us/op
                 concatenateStrings·p0.90:   683.008 us/op
                 concatenateStrings·p0.95:   693.248 us/op
                 concatenateStrings·p0.99:   721.920 us/op
                 concatenateStrings·p0.999:  6701.318 us/op
                 concatenateStrings·p0.9999: 19779.007 us/op
                 concatenateStrings·p1.00:   25264.128 us/op

Iteration   6: 681.105 ±(99.9%) 11.178 us/op
                 concatenateStrings·p0.00:   605.184 us/op
                 concatenateStrings·p0.50:   657.408 us/op
                 concatenateStrings·p0.90:   684.032 us/op
                 concatenateStrings·p0.95:   694.272 us/op
                 concatenateStrings·p0.99:   721.920 us/op
                 concatenateStrings·p0.999:  9310.437 us/op
                 concatenateStrings·p0.9999: 15616.888 us/op
                 concatenateStrings·p1.00:   16809.984 us/op

Iteration   7: 679.457 ±(99.9%) 9.831 us/op
                 concatenateStrings·p0.00:   605.184 us/op
                 concatenateStrings·p0.50:   657.408 us/op
                 concatenateStrings·p0.90:   685.056 us/op
                 concatenateStrings·p0.95:   695.296 us/op
                 concatenateStrings·p0.99:   729.047 us/op
                 concatenateStrings·p0.999:  7350.911 us/op
                 concatenateStrings·p0.9999: 13530.431 us/op
                 concatenateStrings·p1.00:   13877.248 us/op

Iteration   8: 675.644 ±(99.9%) 9.396 us/op
                 concatenateStrings·p0.00:   605.184 us/op
                 concatenateStrings·p0.50:   655.360 us/op
                 concatenateStrings·p0.90:   683.008 us/op
                 concatenateStrings·p0.95:   692.224 us/op
                 concatenateStrings·p0.99:   726.149 us/op
                 concatenateStrings·p0.999:  6864.749 us/op
                 concatenateStrings·p0.9999: 13484.068 us/op
                 concatenateStrings·p1.00:   14221.312 us/op

Iteration   9: 676.558 ±(99.9%) 9.144 us/op
                 concatenateStrings·p0.00:   606.208 us/op
                 concatenateStrings·p0.50:   656.384 us/op
                 concatenateStrings·p0.90:   684.032 us/op
                 concatenateStrings·p0.95:   694.272 us/op
                 concatenateStrings·p0.99:   728.064 us/op
                 concatenateStrings·p0.999:  6590.104 us/op
                 concatenateStrings·p0.9999: 12415.028 us/op
                 concatenateStrings·p1.00:   14008.320 us/op

Iteration  10: 674.264 ±(99.9%) 8.927 us/op
                 concatenateStrings·p0.00:   602.112 us/op
                 concatenateStrings·p0.50:   654.336 us/op
                 concatenateStrings·p0.90:   681.984 us/op
                 concatenateStrings·p0.95:   691.200 us/op
                 concatenateStrings·p0.99:   719.872 us/op
                 concatenateStrings·p0.999:  7423.558 us/op
                 concatenateStrings·p0.9999: 12072.532 us/op
                 concatenateStrings·p1.00:   13516.800 us/op

Iteration  11: 673.154 ±(99.9%) 8.450 us/op
                 concatenateStrings·p0.00:   604.160 us/op
                 concatenateStrings·p0.50:   654.336 us/op
                 concatenateStrings·p0.90:   680.960 us/op
                 concatenateStrings·p0.95:   691.200 us/op
                 concatenateStrings·p0.99:   716.800 us/op
                 concatenateStrings·p0.999:  6236.717 us/op
                 concatenateStrings·p0.9999: 11031.121 us/op
                 concatenateStrings·p1.00:   11173.888 us/op

Iteration  12: 674.401 ±(99.9%) 9.067 us/op
                 concatenateStrings·p0.00:   604.160 us/op
                 concatenateStrings·p0.50:   655.360 us/op
                 concatenateStrings·p0.90:   683.008 us/op
                 concatenateStrings·p0.95:   692.224 us/op
                 concatenateStrings·p0.99:   720.753 us/op
                 concatenateStrings·p0.999:  5437.194 us/op
                 concatenateStrings·p0.9999: 14260.175 us/op
                 concatenateStrings·p1.00:   14417.920 us/op

Iteration  13: 674.917 ±(99.9%) 8.870 us/op
                 concatenateStrings·p0.00:   600.064 us/op
                 concatenateStrings·p0.50:   655.360 us/op
                 concatenateStrings·p0.90:   683.008 us/op
                 concatenateStrings·p0.95:   693.248 us/op
                 concatenateStrings·p0.99:   723.968 us/op
                 concatenateStrings·p0.999:  5268.349 us/op
                 concatenateStrings·p0.9999: 12992.297 us/op
                 concatenateStrings·p1.00:   14385.152 us/op

Iteration  14: 677.008 ±(99.9%) 9.325 us/op
                 concatenateStrings·p0.00:   607.232 us/op
                 concatenateStrings·p0.50:   656.384 us/op
                 concatenateStrings·p0.90:   684.032 us/op
                 concatenateStrings·p0.95:   695.296 us/op
                 concatenateStrings·p0.99:   723.968 us/op
                 concatenateStrings·p0.999:  6615.769 us/op
                 concatenateStrings·p0.9999: 13054.789 us/op
                 concatenateStrings·p1.00:   14434.304 us/op

Iteration  15: 676.622 ±(99.9%) 10.659 us/op
                 concatenateStrings·p0.00:   600.064 us/op
                 concatenateStrings·p0.50:   654.336 us/op
                 concatenateStrings·p0.90:   683.008 us/op
                 concatenateStrings·p0.95:   692.224 us/op
                 concatenateStrings·p0.99:   721.244 us/op
                 concatenateStrings·p0.999:  7089.734 us/op
                 concatenateStrings·p0.9999: 19861.163 us/op
                 concatenateStrings·p1.00:   20938.752 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 221602
  mean =    676.213 ±(99.9%) 2.456 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 220733 
    [ 2500.000,  5000.000) = 550 
    [ 5000.000,  7500.000) = 153 
    [ 7500.000, 10000.000) = 74 
    [10000.000, 12500.000) = 64 
    [12500.000, 15000.000) = 20 
    [15000.000, 17500.000) = 3 
    [17500.000, 20000.000) = 1 
    [20000.000, 22500.000) = 3 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    599.040 us/op
     p(50.0000) =    655.360 us/op
     p(90.0000) =    683.008 us/op
     p(95.0000) =    693.248 us/op
     p(99.0000) =    722.944 us/op
     p(99.9000) =   6430.597 us/op
     p(99.9900) =  13456.394 us/op
     p(99.9990) =  21349.778 us/op
     p(99.9999) =  25264.128 us/op
    p(100.0000) =  25264.128 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 97.82% complete, ETA 00:10:40
# Fork: 1 of 1
# Warmup Iteration   1: 10710.465 ±(99.9%) 113.731 us/op
# Warmup Iteration   2: 10742.636 ±(99.9%) 106.026 us/op
# Warmup Iteration   3: 10701.769 ±(99.9%) 103.633 us/op
# Warmup Iteration   4: 10720.586 ±(99.9%) 110.087 us/op
# Warmup Iteration   5: 10752.203 ±(99.9%) 114.108 us/op
Iteration   1: 10697.384 ±(99.9%) 109.086 us/op
                 concatenateStrings·p0.00:   10223.616 us/op
                 concatenateStrings·p0.50:   10518.528 us/op
                 concatenateStrings·p0.90:   10747.904 us/op
                 concatenateStrings·p0.95:   10846.208 us/op
                 concatenateStrings·p0.99:   14662.042 us/op
                 concatenateStrings·p0.999:  26869.760 us/op
                 concatenateStrings·p0.9999: 26869.760 us/op
                 concatenateStrings·p1.00:   26869.760 us/op

Iteration   2: 10747.869 ±(99.9%) 100.204 us/op
                 concatenateStrings·p0.00:   10190.848 us/op
                 concatenateStrings·p0.50:   10600.448 us/op
                 concatenateStrings·p0.90:   10764.288 us/op
                 concatenateStrings·p0.95:   10911.744 us/op
                 concatenateStrings·p0.99:   15669.330 us/op
                 concatenateStrings·p0.999:  20774.912 us/op
                 concatenateStrings·p0.9999: 20774.912 us/op
                 concatenateStrings·p1.00:   20774.912 us/op

Iteration   3: 10760.955 ±(99.9%) 111.257 us/op
                 concatenateStrings·p0.00:   10158.080 us/op
                 concatenateStrings·p0.50:   10584.064 us/op
                 concatenateStrings·p0.90:   10797.056 us/op
                 concatenateStrings·p0.95:   10977.280 us/op
                 concatenateStrings·p0.99:   16302.080 us/op
                 concatenateStrings·p0.999:  22544.384 us/op
                 concatenateStrings·p0.9999: 22544.384 us/op
                 concatenateStrings·p1.00:   22544.384 us/op

Iteration   4: 10749.719 ±(99.9%) 125.064 us/op
                 concatenateStrings·p0.00:   10158.080 us/op
                 concatenateStrings·p0.50:   10551.296 us/op
                 concatenateStrings·p0.90:   10731.520 us/op
                 concatenateStrings·p0.95:   10837.197 us/op
                 concatenateStrings·p0.99:   18354.012 us/op
                 concatenateStrings·p0.999:  23232.512 us/op
                 concatenateStrings·p0.9999: 23232.512 us/op
                 concatenateStrings·p1.00:   23232.512 us/op

Iteration   5: 10711.202 ±(99.9%) 99.402 us/op
                 concatenateStrings·p0.00:   10223.616 us/op
                 concatenateStrings·p0.50:   10534.912 us/op
                 concatenateStrings·p0.90:   10780.672 us/op
                 concatenateStrings·p0.95:   10970.726 us/op
                 concatenateStrings·p0.99:   15266.611 us/op
                 concatenateStrings·p0.999:  21397.504 us/op
                 concatenateStrings·p0.9999: 21397.504 us/op
                 concatenateStrings·p1.00:   21397.504 us/op

Iteration   6: 10695.212 ±(99.9%) 106.585 us/op
                 concatenateStrings·p0.00:   10158.080 us/op
                 concatenateStrings·p0.50:   10518.528 us/op
                 concatenateStrings·p0.90:   10764.288 us/op
                 concatenateStrings·p0.95:   10934.682 us/op
                 concatenateStrings·p0.99:   14700.380 us/op
                 concatenateStrings·p0.999:  27230.208 us/op
                 concatenateStrings·p0.9999: 27230.208 us/op
                 concatenateStrings·p1.00:   27230.208 us/op

Iteration   7: 10713.696 ±(99.9%) 111.031 us/op
                 concatenateStrings·p0.00:   10207.232 us/op
                 concatenateStrings·p0.50:   10534.912 us/op
                 concatenateStrings·p0.90:   10741.350 us/op
                 concatenateStrings·p0.95:   10878.976 us/op
                 concatenateStrings·p0.99:   16020.275 us/op
                 concatenateStrings·p0.999:  21364.736 us/op
                 concatenateStrings·p0.9999: 21364.736 us/op
                 concatenateStrings·p1.00:   21364.736 us/op

Iteration   8: 10766.318 ±(99.9%) 166.430 us/op
                 concatenateStrings·p0.00:   10223.616 us/op
                 concatenateStrings·p0.50:   10534.912 us/op
                 concatenateStrings·p0.90:   10716.774 us/op
                 concatenateStrings·p0.95:   10896.998 us/op
                 concatenateStrings·p0.99:   18425.774 us/op
                 concatenateStrings·p0.999:  37421.056 us/op
                 concatenateStrings·p0.9999: 37421.056 us/op
                 concatenateStrings·p1.00:   37421.056 us/op

Iteration   9: 10702.050 ±(99.9%) 96.524 us/op
                 concatenateStrings·p0.00:   10207.232 us/op
                 concatenateStrings·p0.50:   10534.912 us/op
                 concatenateStrings·p0.90:   10731.520 us/op
                 concatenateStrings·p0.95:   10862.592 us/op
                 concatenateStrings·p0.99:   15116.698 us/op
                 concatenateStrings·p0.999:  20938.752 us/op
                 concatenateStrings·p0.9999: 20938.752 us/op
                 concatenateStrings·p1.00:   20938.752 us/op

Iteration  10: 10728.936 ±(99.9%) 106.816 us/op
                 concatenateStrings·p0.00:   10240.000 us/op
                 concatenateStrings·p0.50:   10551.296 us/op
                 concatenateStrings·p0.90:   10764.288 us/op
                 concatenateStrings·p0.95:   10911.744 us/op
                 concatenateStrings·p0.99:   16277.340 us/op
                 concatenateStrings·p0.999:  21069.824 us/op
                 concatenateStrings·p0.9999: 21069.824 us/op
                 concatenateStrings·p1.00:   21069.824 us/op

Iteration  11: 10725.947 ±(99.9%) 124.872 us/op
                 concatenateStrings·p0.00:   10141.696 us/op
                 concatenateStrings·p0.50:   10534.912 us/op
                 concatenateStrings·p0.90:   10747.904 us/op
                 concatenateStrings·p0.95:   10895.360 us/op
                 concatenateStrings·p0.99:   18830.787 us/op
                 concatenateStrings·p0.999:  23003.136 us/op
                 concatenateStrings·p0.9999: 23003.136 us/op
                 concatenateStrings·p1.00:   23003.136 us/op

Iteration  12: 10761.660 ±(99.9%) 115.886 us/op
                 concatenateStrings·p0.00:   10174.464 us/op
                 concatenateStrings·p0.50:   10567.680 us/op
                 concatenateStrings·p0.90:   10829.824 us/op
                 concatenateStrings·p0.95:   11083.776 us/op
                 concatenateStrings·p0.99:   17108.173 us/op
                 concatenateStrings·p0.999:  22085.632 us/op
                 concatenateStrings·p0.9999: 22085.632 us/op
                 concatenateStrings·p1.00:   22085.632 us/op

Iteration  13: 10737.239 ±(99.9%) 110.643 us/op
                 concatenateStrings·p0.00:   10223.616 us/op
                 concatenateStrings·p0.50:   10567.680 us/op
                 concatenateStrings·p0.90:   10731.520 us/op
                 concatenateStrings·p0.95:   10924.851 us/op
                 concatenateStrings·p0.99:   15996.682 us/op
                 concatenateStrings·p0.999:  23789.568 us/op
                 concatenateStrings·p0.9999: 23789.568 us/op
                 concatenateStrings·p1.00:   23789.568 us/op

Iteration  14: 10777.190 ±(99.9%) 119.357 us/op
                 concatenateStrings·p0.00:   10174.464 us/op
                 concatenateStrings·p0.50:   10600.448 us/op
                 concatenateStrings·p0.90:   10780.672 us/op
                 concatenateStrings·p0.95:   10878.976 us/op
                 concatenateStrings·p0.99:   17053.123 us/op
                 concatenateStrings·p0.999:  23625.728 us/op
                 concatenateStrings·p0.9999: 23625.728 us/op
                 concatenateStrings·p1.00:   23625.728 us/op

Iteration  15: 10717.085 ±(99.9%) 105.993 us/op
                 concatenateStrings·p0.00:   10207.232 us/op
                 concatenateStrings·p0.50:   10567.680 us/op
                 concatenateStrings·p0.90:   10747.904 us/op
                 concatenateStrings·p0.95:   10862.592 us/op
                 concatenateStrings·p0.99:   14405.468 us/op
                 concatenateStrings·p0.999:  26574.848 us/op
                 concatenateStrings·p0.9999: 26574.848 us/op
                 concatenateStrings·p1.00:   26574.848 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 13970
  mean =  10732.767 ±(99.9%) 29.610 us/op

  Histogram, us/op:
    [10000.000, 12500.000) = 13415 
    [12500.000, 15000.000) = 390 
    [15000.000, 17500.000) = 67 
    [17500.000, 20000.000) = 47 
    [20000.000, 22500.000) = 41 
    [22500.000, 25000.000) = 5 
    [25000.000, 27500.000) = 3 
    [27500.000, 30000.000) = 1 
    [30000.000, 32500.000) = 0 
    [32500.000, 35000.000) = 0 
    [35000.000, 37500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  10141.696 us/op
     p(50.0000) =  10551.296 us/op
     p(90.0000) =  10764.288 us/op
     p(95.0000) =  10911.744 us/op
     p(99.0000) =  15770.911 us/op
     p(99.9000) =  21470.642 us/op
     p(99.9900) =  33946.806 us/op
     p(99.9990) =  37421.056 us/op
     p(99.9999) =  37421.056 us/op
    p(100.0000) =  37421.056 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 98.55% complete, ETA 00:07:07
# Fork: 1 of 1
# Warmup Iteration   1: 119540.785 ±(99.9%) 3453.610 us/op
# Warmup Iteration   2: 116068.022 ±(99.9%) 2373.714 us/op
# Warmup Iteration   3: 116344.689 ±(99.9%) 2620.711 us/op
# Warmup Iteration   4: 119016.497 ±(99.9%) 3567.369 us/op
# Warmup Iteration   5: 118752.774 ±(99.9%) 3305.750 us/op
Iteration   1: 120628.878 ±(99.9%) 3940.279 us/op
                 concatenateStrings·p0.00:   109576.192 us/op
                 concatenateStrings·p0.50:   118620.160 us/op
                 concatenateStrings·p0.90:   136577.024 us/op
                 concatenateStrings·p0.95:   140247.040 us/op
                 concatenateStrings·p0.99:   144965.632 us/op
                 concatenateStrings·p0.999:  144965.632 us/op
                 concatenateStrings·p0.9999: 144965.632 us/op
                 concatenateStrings·p1.00:   144965.632 us/op

Iteration   2: 120057.271 ±(99.9%) 3749.731 us/op
                 concatenateStrings·p0.00:   109445.120 us/op
                 concatenateStrings·p0.50:   119275.520 us/op
                 concatenateStrings·p0.90:   136183.808 us/op
                 concatenateStrings·p0.95:   141426.688 us/op
                 concatenateStrings·p0.99:   143392.768 us/op
                 concatenateStrings·p0.999:  143392.768 us/op
                 concatenateStrings·p0.9999: 143392.768 us/op
                 concatenateStrings·p1.00:   143392.768 us/op

Iteration   3: 118780.530 ±(99.9%) 3321.220 us/op
                 concatenateStrings·p0.00:   109445.120 us/op
                 concatenateStrings·p0.50:   118095.872 us/op
                 concatenateStrings·p0.90:   132041.933 us/op
                 concatenateStrings·p0.95:   135213.875 us/op
                 concatenateStrings·p0.99:   137887.744 us/op
                 concatenateStrings·p0.999:  137887.744 us/op
                 concatenateStrings·p0.9999: 137887.744 us/op
                 concatenateStrings·p1.00:   137887.744 us/op

Iteration   4: 119571.992 ±(99.9%) 3887.122 us/op
                 concatenateStrings·p0.00:   109445.120 us/op
                 concatenateStrings·p0.50:   117112.832 us/op
                 concatenateStrings·p0.90:   134545.408 us/op
                 concatenateStrings·p0.95:   137560.064 us/op
                 concatenateStrings·p0.99:   159645.696 us/op
                 concatenateStrings·p0.999:  159645.696 us/op
                 concatenateStrings·p0.9999: 159645.696 us/op
                 concatenateStrings·p1.00:   159645.696 us/op

Iteration   5: 116171.976 ±(99.9%) 2435.055 us/op
                 concatenateStrings·p0.00:   109576.192 us/op
                 concatenateStrings·p0.50:   116785.152 us/op
                 concatenateStrings·p0.90:   123731.968 us/op
                 concatenateStrings·p0.95:   126694.195 us/op
                 concatenateStrings·p0.99:   145489.920 us/op
                 concatenateStrings·p0.999:  145489.920 us/op
                 concatenateStrings·p0.9999: 145489.920 us/op
                 concatenateStrings·p1.00:   145489.920 us/op

Iteration   6: 120684.149 ±(99.9%) 4145.864 us/op
                 concatenateStrings·p0.00:   109445.120 us/op
                 concatenateStrings·p0.50:   117833.728 us/op
                 concatenateStrings·p0.90:   136262.451 us/op
                 concatenateStrings·p0.95:   138988.749 us/op
                 concatenateStrings·p0.99:   163315.712 us/op
                 concatenateStrings·p0.999:  163315.712 us/op
                 concatenateStrings·p0.9999: 163315.712 us/op
                 concatenateStrings·p1.00:   163315.712 us/op

Iteration   7: 120149.333 ±(99.9%) 3824.081 us/op
                 concatenateStrings·p0.00:   109576.192 us/op
                 concatenateStrings·p0.50:   119078.912 us/op
                 concatenateStrings·p0.90:   133890.048 us/op
                 concatenateStrings·p0.95:   137887.744 us/op
                 concatenateStrings·p0.99:   154402.816 us/op
                 concatenateStrings·p0.999:  154402.816 us/op
                 concatenateStrings·p0.9999: 154402.816 us/op
                 concatenateStrings·p1.00:   154402.816 us/op

Iteration   8: 118589.320 ±(99.9%) 3650.870 us/op
                 concatenateStrings·p0.00:   109182.976 us/op
                 concatenateStrings·p0.50:   115474.432 us/op
                 concatenateStrings·p0.90:   132723.507 us/op
                 concatenateStrings·p0.95:   142108.262 us/op
                 concatenateStrings·p0.99:   148635.648 us/op
                 concatenateStrings·p0.999:  148635.648 us/op
                 concatenateStrings·p0.9999: 148635.648 us/op
                 concatenateStrings·p1.00:   148635.648 us/op

Iteration   9: 119250.554 ±(99.9%) 3568.233 us/op
                 concatenateStrings·p0.00:   109182.976 us/op
                 concatenateStrings·p0.50:   115671.040 us/op
                 concatenateStrings·p0.90:   133758.976 us/op
                 concatenateStrings·p0.95:   136839.168 us/op
                 concatenateStrings·p0.99:   144965.632 us/op
                 concatenateStrings·p0.999:  144965.632 us/op
                 concatenateStrings·p0.9999: 144965.632 us/op
                 concatenateStrings·p1.00:   144965.632 us/op

Iteration  10: 119547.026 ±(99.9%) 3606.618 us/op
                 concatenateStrings·p0.00:   109445.120 us/op
                 concatenateStrings·p0.50:   116523.008 us/op
                 concatenateStrings·p0.90:   132841.472 us/op
                 concatenateStrings·p0.95:   135200.768 us/op
                 concatenateStrings·p0.99:   147062.784 us/op
                 concatenateStrings·p0.999:  147062.784 us/op
                 concatenateStrings·p0.9999: 147062.784 us/op
                 concatenateStrings·p1.00:   147062.784 us/op

Iteration  11: 119041.463 ±(99.9%) 3447.368 us/op
                 concatenateStrings·p0.00:   109576.192 us/op
                 concatenateStrings·p0.50:   116129.792 us/op
                 concatenateStrings·p0.90:   133234.688 us/op
                 concatenateStrings·p0.95:   136708.096 us/op
                 concatenateStrings·p0.99:   141295.616 us/op
                 concatenateStrings·p0.999:  141295.616 us/op
                 concatenateStrings·p0.9999: 141295.616 us/op
                 concatenateStrings·p1.00:   141295.616 us/op

Iteration  12: 116340.117 ±(99.9%) 2503.627 us/op
                 concatenateStrings·p0.00:   109576.192 us/op
                 concatenateStrings·p0.50:   115867.648 us/op
                 concatenateStrings·p0.90:   125501.440 us/op
                 concatenateStrings·p0.95:   130023.424 us/op
                 concatenateStrings·p0.99:   140771.328 us/op
                 concatenateStrings·p0.999:  140771.328 us/op
                 concatenateStrings·p0.9999: 140771.328 us/op
                 concatenateStrings·p1.00:   140771.328 us/op

Iteration  13: 120500.964 ±(99.9%) 4095.393 us/op
                 concatenateStrings·p0.00:   109445.120 us/op
                 concatenateStrings·p0.50:   119799.808 us/op
                 concatenateStrings·p0.90:   135790.592 us/op
                 concatenateStrings·p0.95:   140928.614 us/op
                 concatenateStrings·p0.99:   146800.640 us/op
                 concatenateStrings·p0.999:  146800.640 us/op
                 concatenateStrings·p0.9999: 146800.640 us/op
                 concatenateStrings·p1.00:   146800.640 us/op

Iteration  14: 119870.025 ±(99.9%) 3753.577 us/op
                 concatenateStrings·p0.00:   109445.120 us/op
                 concatenateStrings·p0.50:   118554.624 us/op
                 concatenateStrings·p0.90:   134152.192 us/op
                 concatenateStrings·p0.95:   138477.568 us/op
                 concatenateStrings·p0.99:   140771.328 us/op
                 concatenateStrings·p0.999:  140771.328 us/op
                 concatenateStrings·p0.9999: 140771.328 us/op
                 concatenateStrings·p1.00:   140771.328 us/op

Iteration  15: 119537.664 ±(99.9%) 3735.850 us/op
                 concatenateStrings·p0.00:   109445.120 us/op
                 concatenateStrings·p0.50:   119668.736 us/op
                 concatenateStrings·p0.90:   132579.328 us/op
                 concatenateStrings·p0.95:   138346.496 us/op
                 concatenateStrings·p0.99:   145752.064 us/op
                 concatenateStrings·p0.999:  145752.064 us/op
                 concatenateStrings·p0.9999: 145752.064 us/op
                 concatenateStrings·p1.00:   145752.064 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 1264
  mean = 119232.071 ±(99.9%) 902.194 us/op

  Histogram, us/op:
    [100000.000, 105000.000) = 0 
    [105000.000, 110000.000) = 135 
    [110000.000, 115000.000) = 473 
    [115000.000, 120000.000) = 118 
    [120000.000, 125000.000) = 160 
    [125000.000, 130000.000) = 183 
    [130000.000, 135000.000) = 100 
    [135000.000, 140000.000) = 54 
    [140000.000, 145000.000) = 27 
    [145000.000, 150000.000) = 11 
    [150000.000, 155000.000) = 1 
    [155000.000, 160000.000) = 1 
    [160000.000, 165000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 109182.976 us/op
     p(50.0000) = 117047.296 us/op
     p(90.0000) = 133038.080 us/op
     p(95.0000) = 137560.064 us/op
     p(99.0000) = 145227.776 us/op
     p(99.9000) = 162343.158 us/op
     p(99.9900) = 163315.712 us/op
     p(99.9990) = 163315.712 us/op
     p(99.9999) = 163315.712 us/op
    p(100.0000) = 163315.712 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 99.27% complete, ETA 00:03:34
# Fork: 1 of 1
# Warmup Iteration   1: 805709.666 ±(99.9%) 51541.665 us/op
# Warmup Iteration   2: 794175.330 ±(99.9%) 58914.907 us/op
# Warmup Iteration   3: 792400.817 ±(99.9%) 53335.438 us/op
# Warmup Iteration   4: 801192.724 ±(99.9%) 58017.998 us/op
# Warmup Iteration   5: 788771.131 ±(99.9%) 57660.622 us/op
Iteration   1: 796111.163 ±(99.9%) 58520.185 us/op
                 createNewObjectsWithRecursive·p0.00:   645922.816 us/op
                 createNewObjectsWithRecursive·p0.50:   806354.944 us/op
                 createNewObjectsWithRecursive·p0.90:   845361.971 us/op
                 createNewObjectsWithRecursive·p0.95:   852492.288 us/op
                 createNewObjectsWithRecursive·p0.99:   852492.288 us/op
                 createNewObjectsWithRecursive·p0.999:  852492.288 us/op
                 createNewObjectsWithRecursive·p0.9999: 852492.288 us/op
                 createNewObjectsWithRecursive·p1.00:   852492.288 us/op

Iteration   2: 788448.492 ±(99.9%) 58327.455 us/op
                 createNewObjectsWithRecursive·p0.00:   636485.632 us/op
                 createNewObjectsWithRecursive·p0.50:   797966.336 us/op
                 createNewObjectsWithRecursive·p0.90:   834247.066 us/op
                 createNewObjectsWithRecursive·p0.95:   851443.712 us/op
                 createNewObjectsWithRecursive·p0.99:   851443.712 us/op
                 createNewObjectsWithRecursive·p0.999:  851443.712 us/op
                 createNewObjectsWithRecursive·p0.9999: 851443.712 us/op
                 createNewObjectsWithRecursive·p1.00:   851443.712 us/op

Iteration   3: 799176.231 ±(99.9%) 55357.860 us/op
                 createNewObjectsWithRecursive·p0.00:   660602.880 us/op
                 createNewObjectsWithRecursive·p0.50:   801112.064 us/op
                 createNewObjectsWithRecursive·p0.90:   849975.706 us/op
                 createNewObjectsWithRecursive·p0.95:   852492.288 us/op
                 createNewObjectsWithRecursive·p0.99:   852492.288 us/op
                 createNewObjectsWithRecursive·p0.999:  852492.288 us/op
                 createNewObjectsWithRecursive·p0.9999: 852492.288 us/op
                 createNewObjectsWithRecursive·p1.00:   852492.288 us/op

Iteration   4: 798046.996 ±(99.9%) 47910.679 us/op
                 createNewObjectsWithRecursive·p0.00:   671088.640 us/op
                 createNewObjectsWithRecursive·p0.50:   806354.944 us/op
                 createNewObjectsWithRecursive·p0.90:   828584.755 us/op
                 createNewObjectsWithRecursive·p0.95:   833617.920 us/op
                 createNewObjectsWithRecursive·p0.99:   833617.920 us/op
                 createNewObjectsWithRecursive·p0.999:  833617.920 us/op
                 createNewObjectsWithRecursive·p0.9999: 833617.920 us/op
                 createNewObjectsWithRecursive·p1.00:   833617.920 us/op

Iteration   5: 794820.608 ±(99.9%) 56574.415 us/op
                 createNewObjectsWithRecursive·p0.00:   649068.544 us/op
                 createNewObjectsWithRecursive·p0.50:   801112.064 us/op
                 createNewObjectsWithRecursive·p0.90:   843055.104 us/op
                 createNewObjectsWithRecursive·p0.95:   853540.864 us/op
                 createNewObjectsWithRecursive·p0.99:   853540.864 us/op
                 createNewObjectsWithRecursive·p0.999:  853540.864 us/op
                 createNewObjectsWithRecursive·p0.9999: 853540.864 us/op
                 createNewObjectsWithRecursive·p1.00:   853540.864 us/op

Iteration   6: 792965.435 ±(99.9%) 47349.799 us/op
                 createNewObjectsWithRecursive·p0.00:   670040.064 us/op
                 createNewObjectsWithRecursive·p0.50:   797966.336 us/op
                 createNewObjectsWithRecursive·p0.90:   830472.192 us/op
                 createNewObjectsWithRecursive·p0.95:   843055.104 us/op
                 createNewObjectsWithRecursive·p0.99:   843055.104 us/op
                 createNewObjectsWithRecursive·p0.999:  843055.104 us/op
                 createNewObjectsWithRecursive·p0.9999: 843055.104 us/op
                 createNewObjectsWithRecursive·p1.00:   843055.104 us/op

Iteration   7: 797805.017 ±(99.9%) 48985.751 us/op
                 createNewObjectsWithRecursive·p0.00:   664797.184 us/op
                 createNewObjectsWithRecursive·p0.50:   806354.944 us/op
                 createNewObjectsWithRecursive·p0.90:   825229.312 us/op
                 createNewObjectsWithRecursive·p0.95:   831520.768 us/op
                 createNewObjectsWithRecursive·p0.99:   831520.768 us/op
                 createNewObjectsWithRecursive·p0.999:  831520.768 us/op
                 createNewObjectsWithRecursive·p0.9999: 831520.768 us/op
                 createNewObjectsWithRecursive·p1.00:   831520.768 us/op

Iteration   8: 793852.692 ±(99.9%) 46612.280 us/op
                 createNewObjectsWithRecursive·p0.00:   668991.488 us/op
                 createNewObjectsWithRecursive·p0.50:   804257.792 us/op
                 createNewObjectsWithRecursive·p0.90:   818308.710 us/op
                 createNewObjectsWithRecursive·p0.95:   819986.432 us/op
                 createNewObjectsWithRecursive·p0.99:   819986.432 us/op
                 createNewObjectsWithRecursive·p0.999:  819986.432 us/op
                 createNewObjectsWithRecursive·p0.9999: 819986.432 us/op
                 createNewObjectsWithRecursive·p1.00:   819986.432 us/op

Iteration   9: 781027.801 ±(99.9%) 52444.679 us/op
                 createNewObjectsWithRecursive·p0.00:   638582.784 us/op
                 createNewObjectsWithRecursive·p0.50:   788529.152 us/op
                 createNewObjectsWithRecursive·p0.90:   812436.685 us/op
                 createNewObjectsWithRecursive·p0.95:   817889.280 us/op
                 createNewObjectsWithRecursive·p0.99:   817889.280 us/op
                 createNewObjectsWithRecursive·p0.999:  817889.280 us/op
                 createNewObjectsWithRecursive·p0.9999: 817889.280 us/op
                 createNewObjectsWithRecursive·p1.00:   817889.280 us/op

Iteration  10: 800144.148 ±(99.9%) 48044.880 us/op
                 createNewObjectsWithRecursive·p0.00:   673185.792 us/op
                 createNewObjectsWithRecursive·p0.50:   807403.520 us/op
                 createNewObjectsWithRecursive·p0.90:   833198.490 us/op
                 createNewObjectsWithRecursive·p0.95:   837812.224 us/op
                 createNewObjectsWithRecursive·p0.99:   837812.224 us/op
                 createNewObjectsWithRecursive·p0.999:  837812.224 us/op
                 createNewObjectsWithRecursive·p0.9999: 837812.224 us/op
                 createNewObjectsWithRecursive·p1.00:   837812.224 us/op

Iteration  11: 795143.247 ±(99.9%) 55515.575 us/op
                 createNewObjectsWithRecursive·p0.00:   654311.424 us/op
                 createNewObjectsWithRecursive·p0.50:   800063.488 us/op
                 createNewObjectsWithRecursive·p0.90:   842425.958 us/op
                 createNewObjectsWithRecursive·p0.95:   858783.744 us/op
                 createNewObjectsWithRecursive·p0.99:   858783.744 us/op
                 createNewObjectsWithRecursive·p0.999:  858783.744 us/op
                 createNewObjectsWithRecursive·p0.9999: 858783.744 us/op
                 createNewObjectsWithRecursive·p1.00:   858783.744 us/op

Iteration  12: 786270.681 ±(99.9%) 60354.427 us/op
                 createNewObjectsWithRecursive·p0.00:   627048.448 us/op
                 createNewObjectsWithRecursive·p0.50:   796917.760 us/op
                 createNewObjectsWithRecursive·p0.90:   822922.445 us/op
                 createNewObjectsWithRecursive·p0.95:   826277.888 us/op
                 createNewObjectsWithRecursive·p0.99:   826277.888 us/op
                 createNewObjectsWithRecursive·p0.999:  826277.888 us/op
                 createNewObjectsWithRecursive·p0.9999: 826277.888 us/op
                 createNewObjectsWithRecursive·p1.00:   826277.888 us/op

Iteration  13: 793772.032 ±(99.9%) 54325.550 us/op
                 createNewObjectsWithRecursive·p0.00:   648019.968 us/op
                 createNewObjectsWithRecursive·p0.50:   803209.216 us/op
                 createNewObjectsWithRecursive·p0.90:   823761.306 us/op
                 createNewObjectsWithRecursive·p0.95:   824180.736 us/op
                 createNewObjectsWithRecursive·p0.99:   824180.736 us/op
                 createNewObjectsWithRecursive·p0.999:  824180.736 us/op
                 createNewObjectsWithRecursive·p0.9999: 824180.736 us/op
                 createNewObjectsWithRecursive·p1.00:   824180.736 us/op

Iteration  14: 796353.142 ±(99.9%) 57900.457 us/op
                 createNewObjectsWithRecursive·p0.00:   639631.360 us/op
                 createNewObjectsWithRecursive·p0.50:   812646.400 us/op
                 createNewObjectsWithRecursive·p0.90:   823341.875 us/op
                 createNewObjectsWithRecursive·p0.95:   824180.736 us/op
                 createNewObjectsWithRecursive·p0.99:   824180.736 us/op
                 createNewObjectsWithRecursive·p0.999:  824180.736 us/op
                 createNewObjectsWithRecursive·p0.9999: 824180.736 us/op
                 createNewObjectsWithRecursive·p1.00:   824180.736 us/op

Iteration  15: 799176.231 ±(99.9%) 58118.435 us/op
                 createNewObjectsWithRecursive·p0.00:   646971.392 us/op
                 createNewObjectsWithRecursive·p0.50:   809500.672 us/op
                 createNewObjectsWithRecursive·p0.90:   838441.370 us/op
                 createNewObjectsWithRecursive·p0.95:   845152.256 us/op
                 createNewObjectsWithRecursive·p0.99:   845152.256 us/op
                 createNewObjectsWithRecursive·p0.999:  845152.256 us/op
                 createNewObjectsWithRecursive·p0.9999: 845152.256 us/op
                 createNewObjectsWithRecursive·p1.00:   845152.256 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  N = 195
  mean = 794207.594 ±(99.9%) 10456.871 us/op

  Histogram, us/op:
    [600000.000, 625000.000) = 0 
    [625000.000, 650000.000) = 8 
    [650000.000, 675000.000) = 7 
    [675000.000, 700000.000) = 0 
    [700000.000, 725000.000) = 0 
    [725000.000, 750000.000) = 0 
    [750000.000, 775000.000) = 1 
    [775000.000, 800000.000) = 67 
    [800000.000, 825000.000) = 94 
    [825000.000, 850000.000) = 13 
    [850000.000, 875000.000) = 5 

  Percentiles, us/op:
      p(0.0000) = 627048.448 us/op
     p(50.0000) = 803209.216 us/op
     p(90.0000) = 824180.736 us/op
     p(95.0000) = 835295.642 us/op
     p(99.0000) = 853750.579 us/op
     p(99.9000) = 858783.744 us/op
     p(99.9900) = 858783.744 us/op
     p(99.9990) = 858783.744 us/op
     p(99.9999) = 858783.744 us/op
    p(100.0000) = 858783.744 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 253056.931 us/op
# Warmup Iteration   2: 222338.268 us/op
# Warmup Iteration   3: 222453.273 us/op
# Warmup Iteration   4: 220964.955 us/op
# Warmup Iteration   5: 220594.197 us/op
Iteration   1: 226965.598 us/op
Iteration   2: 232974.941 us/op
Iteration   3: 222593.743 us/op
Iteration   4: 228915.408 us/op
Iteration   5: 223059.338 us/op
Iteration   6: 226512.560 us/op
Iteration   7: 225186.859 us/op
Iteration   8: 228331.165 us/op
Iteration   9: 224557.637 us/op
Iteration  10: 225217.651 us/op
Iteration  11: 218841.470 us/op
Iteration  12: 229271.987 us/op
Iteration  13: 228804.044 us/op
Iteration  14: 225169.385 us/op
Iteration  15: 233612.108 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 226667.593 ±(99.9%) 4132.013 us/op

  Histogram, us/op:
    [210000.000, 212500.000) = 0 
    [212500.000, 215000.000) = 0 
    [215000.000, 217500.000) = 0 
    [217500.000, 220000.000) = 1 
    [220000.000, 222500.000) = 0 
    [222500.000, 225000.000) = 3 
    [225000.000, 227500.000) = 5 
    [227500.000, 230000.000) = 4 
    [230000.000, 232500.000) = 0 
    [232500.000, 235000.000) = 2 
    [235000.000, 237500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 218841.470 us/op
     p(50.0000) = 226512.560 us/op
     p(90.0000) = 233229.808 us/op
     p(95.0000) = 233612.108 us/op
     p(99.0000) = 233612.108 us/op
     p(99.9000) = 233612.108 us/op
     p(99.9900) = 233612.108 us/op
     p(99.9990) = 233612.108 us/op
     p(99.9999) = 233612.108 us/op
    p(100.0000) = 233612.108 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 230203.400 us/op
# Warmup Iteration   2: 208327.921 us/op
# Warmup Iteration   3: 228374.825 us/op
# Warmup Iteration   4: 225072.324 us/op
# Warmup Iteration   5: 230138.087 us/op
Iteration   1: 225155.148 us/op
Iteration   2: 225910.231 us/op
Iteration   3: 225701.365 us/op
Iteration   4: 223846.440 us/op
Iteration   5: 225882.741 us/op
Iteration   6: 224429.020 us/op
Iteration   7: 224922.832 us/op
Iteration   8: 224948.226 us/op
Iteration   9: 226104.769 us/op
Iteration  10: 224577.328 us/op
Iteration  11: 225436.672 us/op
Iteration  12: 224937.174 us/op
Iteration  13: 226233.155 us/op
Iteration  14: 226755.722 us/op
Iteration  15: 230390.772 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 225682.106 ±(99.9%) 1617.972 us/op

  Histogram, us/op:
    [223000.000, 223500.000) = 0 
    [223500.000, 224000.000) = 1 
    [224000.000, 224500.000) = 1 
    [224500.000, 225000.000) = 4 
    [225000.000, 225500.000) = 2 
    [225500.000, 226000.000) = 3 
    [226000.000, 226500.000) = 2 
    [226500.000, 227000.000) = 1 
    [227000.000, 227500.000) = 0 
    [227500.000, 228000.000) = 0 
    [228000.000, 228500.000) = 0 
    [228500.000, 229000.000) = 0 
    [229000.000, 229500.000) = 0 
    [229500.000, 230000.000) = 0 
    [230000.000, 230500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 223846.440 us/op
     p(50.0000) = 225436.672 us/op
     p(90.0000) = 228209.742 us/op
     p(95.0000) = 230390.772 us/op
     p(99.0000) = 230390.772 us/op
     p(99.9000) = 230390.772 us/op
     p(99.9900) = 230390.772 us/op
     p(99.9990) = 230390.772 us/op
     p(99.9999) = 230390.772 us/op
    p(100.0000) = 230390.772 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 211301.508 us/op
# Warmup Iteration   2: 215270.979 us/op
# Warmup Iteration   3: 209520.966 us/op
# Warmup Iteration   4: 210155.685 us/op
# Warmup Iteration   5: 208209.417 us/op
Iteration   1: 207570.143 us/op
Iteration   2: 206207.203 us/op
Iteration   3: 217549.630 us/op
Iteration   4: 206865.998 us/op
Iteration   5: 210890.379 us/op
Iteration   6: 208906.942 us/op
Iteration   7: 208394.227 us/op
Iteration   8: 208102.450 us/op
Iteration   9: 206702.801 us/op
Iteration  10: 207830.072 us/op
Iteration  11: 204425.203 us/op
Iteration  12: 208650.136 us/op
Iteration  13: 207002.104 us/op
Iteration  14: 211304.286 us/op
Iteration  15: 207726.736 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 208541.887 ±(99.9%) 3229.006 us/op

  Histogram, us/op:
    [200000.000, 201250.000) = 0 
    [201250.000, 202500.000) = 0 
    [202500.000, 203750.000) = 0 
    [203750.000, 205000.000) = 1 
    [205000.000, 206250.000) = 1 
    [206250.000, 207500.000) = 3 
    [207500.000, 208750.000) = 6 
    [208750.000, 210000.000) = 1 
    [210000.000, 211250.000) = 1 
    [211250.000, 212500.000) = 1 
    [212500.000, 213750.000) = 0 
    [213750.000, 215000.000) = 0 
    [215000.000, 216250.000) = 0 
    [216250.000, 217500.000) = 0 
    [217500.000, 218750.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 204425.203 us/op
     p(50.0000) = 207830.072 us/op
     p(90.0000) = 213802.424 us/op
     p(95.0000) = 217549.630 us/op
     p(99.0000) = 217549.630 us/op
     p(99.9000) = 217549.630 us/op
     p(99.9900) = 217549.630 us/op
     p(99.9990) = 217549.630 us/op
     p(99.9999) = 217549.630 us/op
    p(100.0000) = 217549.630 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 233362.210 us/op
# Warmup Iteration   2: 229993.046 us/op
# Warmup Iteration   3: 245787.149 us/op
# Warmup Iteration   4: 220470.347 us/op
# Warmup Iteration   5: 247751.869 us/op
Iteration   1: 231434.554 us/op
Iteration   2: 221576.022 us/op
Iteration   3: 238139.689 us/op
Iteration   4: 229780.128 us/op
Iteration   5: 222028.955 us/op
Iteration   6: 224817.028 us/op
Iteration   7: 235798.080 us/op
Iteration   8: 236589.376 us/op
Iteration   9: 237774.148 us/op
Iteration  10: 228309.177 us/op
Iteration  11: 217267.819 us/op
Iteration  12: 232059.124 us/op
Iteration  13: 229807.791 us/op
Iteration  14: 220724.135 us/op
Iteration  15: 232323.753 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 229228.652 ±(99.9%) 7108.369 us/op

  Histogram, us/op:
    [210000.000, 212500.000) = 0 
    [212500.000, 215000.000) = 0 
    [215000.000, 217500.000) = 1 
    [217500.000, 220000.000) = 0 
    [220000.000, 222500.000) = 3 
    [222500.000, 225000.000) = 1 
    [225000.000, 227500.000) = 0 
    [227500.000, 230000.000) = 3 
    [230000.000, 232500.000) = 3 
    [232500.000, 235000.000) = 0 
    [235000.000, 237500.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 217267.819 us/op
     p(50.0000) = 229807.791 us/op
     p(90.0000) = 237920.364 us/op
     p(95.0000) = 238139.689 us/op
     p(99.0000) = 238139.689 us/op
     p(99.9000) = 238139.689 us/op
     p(99.9900) = 238139.689 us/op
     p(99.9990) = 238139.689 us/op
     p(99.9999) = 238139.689 us/op
    p(100.0000) = 238139.689 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 232085.679 us/op
# Warmup Iteration   2: 214641.326 us/op
# Warmup Iteration   3: 216715.764 us/op
# Warmup Iteration   4: 206601.319 us/op
# Warmup Iteration   5: 207328.012 us/op
Iteration   1: 205893.466 us/op
Iteration   2: 210173.366 us/op
Iteration   3: 207284.991 us/op
Iteration   4: 222782.422 us/op
Iteration   5: 221882.402 us/op
Iteration   6: 211914.072 us/op
Iteration   7: 214472.916 us/op
Iteration   8: 207854.635 us/op
Iteration   9: 209819.056 us/op
Iteration  10: 209560.037 us/op
Iteration  11: 229833.963 us/op
Iteration  12: 209805.915 us/op
Iteration  13: 207209.586 us/op
Iteration  14: 216065.743 us/op
Iteration  15: 205789.511 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 212689.472 ±(99.9%) 7584.085 us/op

  Histogram, us/op:
    [200000.000, 202500.000) = 0 
    [202500.000, 205000.000) = 0 
    [205000.000, 207500.000) = 4 
    [207500.000, 210000.000) = 4 
    [210000.000, 212500.000) = 2 
    [212500.000, 215000.000) = 1 
    [215000.000, 217500.000) = 1 
    [217500.000, 220000.000) = 0 
    [220000.000, 222500.000) = 1 
    [222500.000, 225000.000) = 1 
    [225000.000, 227500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 205789.511 us/op
     p(50.0000) = 209819.056 us/op
     p(90.0000) = 225603.038 us/op
     p(95.0000) = 229833.963 us/op
     p(99.0000) = 229833.963 us/op
     p(99.9000) = 229833.963 us/op
     p(99.9900) = 229833.963 us/op
     p(99.9990) = 229833.963 us/op
     p(99.9999) = 229833.963 us/op
    p(100.0000) = 229833.963 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 222526.244 us/op
# Warmup Iteration   2: 208069.524 us/op
# Warmup Iteration   3: 203986.204 us/op
# Warmup Iteration   4: 199426.956 us/op
# Warmup Iteration   5: 201434.764 us/op
Iteration   1: 211754.184 us/op
Iteration   2: 217496.284 us/op
Iteration   3: 202283.692 us/op
Iteration   4: 207589.874 us/op
Iteration   5: 204427.790 us/op
Iteration   6: 205816.395 us/op
Iteration   7: 207706.902 us/op
Iteration   8: 202120.687 us/op
Iteration   9: 205209.717 us/op
Iteration  10: 202536.836 us/op
Iteration  11: 205272.951 us/op
Iteration  12: 207497.852 us/op
Iteration  13: 208457.707 us/op
Iteration  14: 202592.691 us/op
Iteration  15: 211004.846 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 206784.561 ±(99.9%) 4526.070 us/op

  Histogram, us/op:
    [200000.000, 201250.000) = 0 
    [201250.000, 202500.000) = 2 
    [202500.000, 203750.000) = 2 
    [203750.000, 205000.000) = 1 
    [205000.000, 206250.000) = 3 
    [206250.000, 207500.000) = 1 
    [207500.000, 208750.000) = 3 
    [208750.000, 210000.000) = 0 
    [210000.000, 211250.000) = 1 
    [211250.000, 212500.000) = 1 
    [212500.000, 213750.000) = 0 
    [213750.000, 215000.000) = 0 
    [215000.000, 216250.000) = 0 
    [216250.000, 217500.000) = 1 
    [217500.000, 218750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 202120.687 us/op
     p(50.0000) = 205816.395 us/op
     p(90.0000) = 214051.024 us/op
     p(95.0000) = 217496.284 us/op
     p(99.0000) = 217496.284 us/op
     p(99.9000) = 217496.284 us/op
     p(99.9900) = 217496.284 us/op
     p(99.9990) = 217496.284 us/op
     p(99.9999) = 217496.284 us/op
    p(100.0000) = 217496.284 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1619371.688 us/op
# Warmup Iteration   2: 1521597.956 us/op
# Warmup Iteration   3: 1465695.539 us/op
# Warmup Iteration   4: 1385726.473 us/op
# Warmup Iteration   5: 1398937.743 us/op
Iteration   1: 1375590.214 us/op
Iteration   2: 1393809.684 us/op
Iteration   3: 1389370.955 us/op
Iteration   4: 1396623.075 us/op
Iteration   5: 1373621.324 us/op
Iteration   6: 1403147.567 us/op
Iteration   7: 1394148.766 us/op
Iteration   8: 1399190.146 us/op
Iteration   9: 1394561.051 us/op
Iteration  10: 1425924.865 us/op
Iteration  11: 1403229.323 us/op
Iteration  12: 1407539.218 us/op
Iteration  13: 1398860.613 us/op
Iteration  14: 1407807.323 us/op
Iteration  15: 1393543.587 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 1397131.181 ±(99.9%) 13548.623 us/op

  Histogram, us/op:
    [1370000.000, 1375000.000) = 1 
    [1375000.000, 1380000.000) = 1 
    [1380000.000, 1385000.000) = 0 
    [1385000.000, 1390000.000) = 1 
    [1390000.000, 1395000.000) = 4 
    [1395000.000, 1400000.000) = 3 
    [1400000.000, 1405000.000) = 2 
    [1405000.000, 1410000.000) = 2 
    [1410000.000, 1415000.000) = 0 
    [1415000.000, 1420000.000) = 0 
    [1420000.000, 1425000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1373621.324 us/op
     p(50.0000) = 1396623.075 us/op
     p(90.0000) = 1415054.340 us/op
     p(95.0000) = 1425924.865 us/op
     p(99.0000) = 1425924.865 us/op
     p(99.9000) = 1425924.865 us/op
     p(99.9900) = 1425924.865 us/op
     p(99.9990) = 1425924.865 us/op
     p(99.9999) = 1425924.865 us/op
    p(100.0000) = 1425924.865 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 969023.637 us/op
# Warmup Iteration   2: 920259.626 us/op
# Warmup Iteration   3: 919022.519 us/op
# Warmup Iteration   4: 918817.169 us/op
# Warmup Iteration   5: 918823.336 us/op
Iteration   1: 900161.596 us/op
Iteration   2: 914147.453 us/op
Iteration   3: 900209.760 us/op
Iteration   4: 890456.866 us/op
Iteration   5: 892856.713 us/op
Iteration   6: 925687.891 us/op
Iteration   7: 911588.461 us/op
Iteration   8: 903823.431 us/op
Iteration   9: 902286.902 us/op
Iteration  10: 917088.087 us/op
Iteration  11: 884295.287 us/op
Iteration  12: 895184.840 us/op
Iteration  13: 925093.970 us/op
Iteration  14: 906950.634 us/op
Iteration  15: 909983.039 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 905320.995 ±(99.9%) 13002.980 us/op

  Histogram, us/op:
    [880000.000, 885000.000) = 1 
    [885000.000, 890000.000) = 0 
    [890000.000, 895000.000) = 2 
    [895000.000, 900000.000) = 1 
    [900000.000, 905000.000) = 4 
    [905000.000, 910000.000) = 2 
    [910000.000, 915000.000) = 2 
    [915000.000, 920000.000) = 1 
    [920000.000, 925000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 884295.287 us/op
     p(50.0000) = 903823.431 us/op
     p(90.0000) = 925331.538 us/op
     p(95.0000) = 925687.891 us/op
     p(99.0000) = 925687.891 us/op
     p(99.9000) = 925687.891 us/op
     p(99.9900) = 925687.891 us/op
     p(99.9990) = 925687.891 us/op
     p(99.9999) = 925687.891 us/op
    p(100.0000) = 925687.891 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 671997.591 us/op
# Warmup Iteration   2: 693297.690 us/op
# Warmup Iteration   3: 668334.162 us/op
# Warmup Iteration   4: 657590.915 us/op
# Warmup Iteration   5: 632843.882 us/op
Iteration   1: 611027.439 us/op
Iteration   2: 622300.568 us/op
Iteration   3: 603318.041 us/op
Iteration   4: 607552.736 us/op
Iteration   5: 600478.103 us/op
Iteration   6: 620436.993 us/op
Iteration   7: 623339.645 us/op
Iteration   8: 622972.769 us/op
Iteration   9: 620013.261 us/op
Iteration  10: 620210.794 us/op
Iteration  11: 619587.263 us/op
Iteration  12: 627295.705 us/op
Iteration  13: 616867.181 us/op
Iteration  14: 611944.664 us/op
Iteration  15: 611397.395 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 615916.170 ±(99.9%) 8438.582 us/op

  Histogram, us/op:
    [600000.000, 602500.000) = 1 
    [602500.000, 605000.000) = 1 
    [605000.000, 607500.000) = 0 
    [607500.000, 610000.000) = 1 
    [610000.000, 612500.000) = 3 
    [612500.000, 615000.000) = 0 
    [615000.000, 617500.000) = 1 
    [617500.000, 620000.000) = 1 
    [620000.000, 622500.000) = 4 
    [622500.000, 625000.000) = 2 
    [625000.000, 627500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 600478.103 us/op
     p(50.0000) = 619587.263 us/op
     p(90.0000) = 624922.069 us/op
     p(95.0000) = 627295.705 us/op
     p(99.0000) = 627295.705 us/op
     p(99.9000) = 627295.705 us/op
     p(99.9900) = 627295.705 us/op
     p(99.9990) = 627295.705 us/op
     p(99.9999) = 627295.705 us/op
    p(100.0000) = 627295.705 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap(AllocationBenchmark.java:52)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_ss_jmhStub(AllocationBenchmark_fillHeap_jmhTest.java:485)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_SingleShotTime(AllocationBenchmark_fillHeap_jmhTest.java:443)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)




# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 636921.755 us/op
# Warmup Iteration   2: 550583.931 us/op
# Warmup Iteration   3: 613287.981 us/op
# Warmup Iteration   4: 562913.664 us/op
# Warmup Iteration   5: 588974.797 us/op
Iteration   1: 639241.750 us/op
Iteration   2: 577123.647 us/op
Iteration   3: 628559.763 us/op
Iteration   4: 619732.346 us/op
Iteration   5: 566618.042 us/op
Iteration   6: 582481.112 us/op
Iteration   7: 572843.739 us/op
Iteration   8: 604084.440 us/op
Iteration   9: 594650.928 us/op
Iteration  10: 586563.660 us/op
Iteration  11: 596578.035 us/op
Iteration  12: 643110.543 us/op
Iteration  13: 599112.037 us/op
Iteration  14: 579758.170 us/op
Iteration  15: 531704.708 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 594810.861 ±(99.9%) 31550.767 us/op

  Histogram, us/op:
    [500000.000, 512500.000) = 0 
    [512500.000, 525000.000) = 0 
    [525000.000, 537500.000) = 1 
    [537500.000, 550000.000) = 0 
    [550000.000, 562500.000) = 0 
    [562500.000, 575000.000) = 2 
    [575000.000, 587500.000) = 4 
    [587500.000, 600000.000) = 3 
    [600000.000, 612500.000) = 1 
    [612500.000, 625000.000) = 1 
    [625000.000, 637500.000) = 1 
    [637500.000, 650000.000) = 2 
    [650000.000, 662500.000) = 0 
    [662500.000, 675000.000) = 0 
    [675000.000, 687500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 531704.708 us/op
     p(50.0000) = 594650.928 us/op
     p(90.0000) = 640789.267 us/op
     p(95.0000) = 643110.543 us/op
     p(99.0000) = 643110.543 us/op
     p(99.9000) = 643110.543 us/op
     p(99.9900) = 643110.543 us/op
     p(99.9990) = 643110.543 us/op
     p(99.9999) = 643110.543 us/op
    p(100.0000) = 643110.543 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 479434.085 us/op
# Warmup Iteration   2: 467444.718 us/op
# Warmup Iteration   3: 432573.641 us/op
# Warmup Iteration   4: 431409.007 us/op
# Warmup Iteration   5: 429262.071 us/op
Iteration   1: 431377.503 us/op
Iteration   2: 449954.828 us/op
Iteration   3: 459835.164 us/op
Iteration   4: 455693.653 us/op
Iteration   5: 470661.411 us/op
Iteration   6: 464660.595 us/op
Iteration   7: 469087.908 us/op
Iteration   8: 475929.589 us/op
Iteration   9: 452275.059 us/op
Iteration  10: 440597.480 us/op
Iteration  11: 469375.627 us/op
Iteration  12: 451242.604 us/op
Iteration  13: 452678.182 us/op
Iteration  14: 467381.276 us/op
Iteration  15: 454074.479 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 457655.024 ±(99.9%) 13005.372 us/op

  Histogram, us/op:
    [430000.000, 435000.000) = 1 
    [435000.000, 440000.000) = 0 
    [440000.000, 445000.000) = 1 
    [445000.000, 450000.000) = 1 
    [450000.000, 455000.000) = 4 
    [455000.000, 460000.000) = 2 
    [460000.000, 465000.000) = 1 
    [465000.000, 470000.000) = 3 
    [470000.000, 475000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 431377.503 us/op
     p(50.0000) = 455693.653 us/op
     p(90.0000) = 472768.682 us/op
     p(95.0000) = 475929.589 us/op
     p(99.0000) = 475929.589 us/op
     p(99.9000) = 475929.589 us/op
     p(99.9900) = 475929.589 us/op
     p(99.9990) = 475929.589 us/op
     p(99.9999) = 475929.589 us/op
    p(100.0000) = 475929.589 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6392.252 us/op
# Warmup Iteration   2: 2729.108 us/op
# Warmup Iteration   3: 590.388 us/op
# Warmup Iteration   4: 474.755 us/op
# Warmup Iteration   5: 485.590 us/op
Iteration   1: 437.251 us/op
Iteration   2: 436.672 us/op
Iteration   3: 427.736 us/op
Iteration   4: 466.995 us/op
Iteration   5: 486.708 us/op
Iteration   6: 446.681 us/op
Iteration   7: 446.516 us/op
Iteration   8: 477.597 us/op
Iteration   9: 473.314 us/op
Iteration  10: 443.877 us/op
Iteration  11: 479.008 us/op
Iteration  12: 448.453 us/op
Iteration  13: 411.538 us/op
Iteration  14: 483.384 us/op
Iteration  15: 418.849 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  N = 15
  mean =    452.305 ±(99.9%) 25.820 us/op

  Histogram, us/op:
    [410.000, 415.000) = 1 
    [415.000, 420.000) = 1 
    [420.000, 425.000) = 0 
    [425.000, 430.000) = 1 
    [430.000, 435.000) = 0 
    [435.000, 440.000) = 2 
    [440.000, 445.000) = 1 
    [445.000, 450.000) = 3 
    [450.000, 455.000) = 0 
    [455.000, 460.000) = 0 
    [460.000, 465.000) = 0 
    [465.000, 470.000) = 1 
    [470.000, 475.000) = 1 
    [475.000, 480.000) = 2 
    [480.000, 485.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    411.538 us/op
     p(50.0000) =    446.681 us/op
     p(90.0000) =    484.714 us/op
     p(95.0000) =    486.708 us/op
     p(99.0000) =    486.708 us/op
     p(99.9000) =    486.708 us/op
     p(99.9900) =    486.708 us/op
     p(99.9990) =    486.708 us/op
     p(99.9999) =    486.708 us/op
    p(100.0000) =    486.708 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4828.737 us/op
# Warmup Iteration   2: 516.400 us/op
# Warmup Iteration   3: 235.367 us/op
# Warmup Iteration   4: 229.350 us/op
# Warmup Iteration   5: 219.773 us/op
Iteration   1: 228.226 us/op
Iteration   2: 228.985 us/op
Iteration   3: 273.752 us/op
Iteration   4: 223.604 us/op
Iteration   5: 230.112 us/op
Iteration   6: 220.694 us/op
Iteration   7: 219.351 us/op
Iteration   8: 251.282 us/op
Iteration   9: 254.580 us/op
Iteration  10: 210.876 us/op
Iteration  11: 282.283 us/op
Iteration  12: 230.008 us/op
Iteration  13: 254.605 us/op
Iteration  14: 226.085 us/op
Iteration  15: 277.803 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  N = 15
  mean =    240.816 ±(99.9%) 24.689 us/op

  Histogram, us/op:
    [210.000, 215.000) = 1 
    [215.000, 220.000) = 1 
    [220.000, 225.000) = 2 
    [225.000, 230.000) = 3 
    [230.000, 235.000) = 2 
    [235.000, 240.000) = 0 
    [240.000, 245.000) = 0 
    [245.000, 250.000) = 0 
    [250.000, 255.000) = 3 
    [255.000, 260.000) = 0 
    [260.000, 265.000) = 0 
    [265.000, 270.000) = 0 
    [270.000, 275.000) = 1 
    [275.000, 280.000) = 1 
    [280.000, 285.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    210.876 us/op
     p(50.0000) =    230.008 us/op
     p(90.0000) =    279.595 us/op
     p(95.0000) =    282.283 us/op
     p(99.0000) =    282.283 us/op
     p(99.9000) =    282.283 us/op
     p(99.9900) =    282.283 us/op
     p(99.9990) =    282.283 us/op
     p(99.9999) =    282.283 us/op
    p(100.0000) =    282.283 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5801.572 us/op
# Warmup Iteration   2: 2588.443 us/op
# Warmup Iteration   3: 323.298 us/op
# Warmup Iteration   4: 321.481 us/op
# Warmup Iteration   5: 319.577 us/op
Iteration   1: 326.478 us/op
Iteration   2: 323.931 us/op
Iteration   3: 321.215 us/op
Iteration   4: 323.658 us/op
Iteration   5: 322.315 us/op
Iteration   6: 324.202 us/op
Iteration   7: 324.853 us/op
Iteration   8: 346.452 us/op
Iteration   9: 324.576 us/op
Iteration  10: 322.338 us/op
Iteration  11: 322.114 us/op
Iteration  12: 320.619 us/op
Iteration  13: 324.149 us/op
Iteration  14: 319.361 us/op
Iteration  15: 352.934 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  N = 15
  mean =    326.613 ±(99.9%) 10.286 us/op

  Histogram, us/op:
    [310.000, 315.000) = 0 
    [315.000, 320.000) = 1 
    [320.000, 325.000) = 11 
    [325.000, 330.000) = 1 
    [330.000, 335.000) = 0 
    [335.000, 340.000) = 0 
    [340.000, 345.000) = 0 
    [345.000, 350.000) = 1 
    [350.000, 355.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    319.361 us/op
     p(50.0000) =    323.931 us/op
     p(90.0000) =    349.045 us/op
     p(95.0000) =    352.934 us/op
     p(99.0000) =    352.934 us/op
     p(99.9000) =    352.934 us/op
     p(99.9900) =    352.934 us/op
     p(99.9990) =    352.934 us/op
     p(99.9999) =    352.934 us/op
    p(100.0000) =    352.934 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4199.255 us/op
# Warmup Iteration   2: 530.868 us/op
# Warmup Iteration   3: 247.456 us/op
# Warmup Iteration   4: 266.676 us/op
# Warmup Iteration   5: 297.411 us/op
Iteration   1: 370.173 us/op
Iteration   2: 285.961 us/op
Iteration   3: 291.815 us/op
Iteration   4: 238.202 us/op
Iteration   5: 331.098 us/op
Iteration   6: 272.179 us/op
Iteration   7: 253.633 us/op
Iteration   8: 255.216 us/op
Iteration   9: 301.396 us/op
Iteration  10: 234.007 us/op
Iteration  11: 363.797 us/op
Iteration  12: 244.311 us/op
Iteration  13: 293.274 us/op
Iteration  14: 290.563 us/op
Iteration  15: 344.585 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  N = 15
  mean =    291.347 ±(99.9%) 47.322 us/op

  Histogram, us/op:
    [200.000, 212.500) = 0 
    [212.500, 225.000) = 0 
    [225.000, 237.500) = 1 
    [237.500, 250.000) = 2 
    [250.000, 262.500) = 2 
    [262.500, 275.000) = 1 
    [275.000, 287.500) = 1 
    [287.500, 300.000) = 3 
    [300.000, 312.500) = 1 
    [312.500, 325.000) = 0 
    [325.000, 337.500) = 1 
    [337.500, 350.000) = 1 
    [350.000, 362.500) = 0 
    [362.500, 375.000) = 2 
    [375.000, 387.500) = 0 

  Percentiles, us/op:
      p(0.0000) =    234.007 us/op
     p(50.0000) =    290.563 us/op
     p(90.0000) =    366.347 us/op
     p(95.0000) =    370.173 us/op
     p(99.0000) =    370.173 us/op
     p(99.9000) =    370.173 us/op
     p(99.9900) =    370.173 us/op
     p(99.9990) =    370.173 us/op
     p(99.9999) =    370.173 us/op
    p(100.0000) =    370.173 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1270138.917 us/op
# Warmup Iteration   2: 1245483.381 us/op
# Warmup Iteration   3: 1222365.543 us/op
# Warmup Iteration   4: 1220212.884 us/op
# Warmup Iteration   5: 1232380.435 us/op
Iteration   1: 1232178.857 us/op
Iteration   2: 1221005.722 us/op
Iteration   3: 1217791.984 us/op
Iteration   4: 1215730.334 us/op
Iteration   5: 1220812.519 us/op
Iteration   6: 1220373.904 us/op
Iteration   7: 1220344.728 us/op
Iteration   8: 1213516.864 us/op
Iteration   9: 1218894.578 us/op
Iteration  10: 1220874.162 us/op
Iteration  11: 1216177.184 us/op
Iteration  12: 1220634.401 us/op
Iteration  13: 1224505.366 us/op
Iteration  14: 1220013.799 us/op
Iteration  15: 1215265.098 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  N = 15
  mean = 1219874.633 ±(99.9%) 4737.035 us/op

  Histogram, us/op:
    [1210000.000, 1212500.000) = 0 
    [1212500.000, 1215000.000) = 1 
    [1215000.000, 1217500.000) = 3 
    [1217500.000, 1220000.000) = 2 
    [1220000.000, 1222500.000) = 7 
    [1222500.000, 1225000.000) = 1 
    [1225000.000, 1227500.000) = 0 
    [1227500.000, 1230000.000) = 0 
    [1230000.000, 1232500.000) = 1 
    [1232500.000, 1235000.000) = 0 
    [1235000.000, 1237500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1213516.864 us/op
     p(50.0000) = 1220344.728 us/op
     p(90.0000) = 1227574.762 us/op
     p(95.0000) = 1232178.857 us/op
     p(99.0000) = 1232178.857 us/op
     p(99.9000) = 1232178.857 us/op
     p(99.9900) = 1232178.857 us/op
     p(99.9990) = 1232178.857 us/op
     p(99.9999) = 1232178.857 us/op
    p(100.0000) = 1232178.857 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 210921.077 us/op
# Warmup Iteration   2: 143610.832 us/op
# Warmup Iteration   3: 136965.410 us/op
# Warmup Iteration   4: 134793.015 us/op
# Warmup Iteration   5: 136334.296 us/op
Iteration   1: 138242.966 us/op
Iteration   2: 131943.087 us/op
Iteration   3: 135153.257 us/op
Iteration   4: 135358.867 us/op
Iteration   5: 133800.794 us/op
Iteration   6: 135008.854 us/op
Iteration   7: 134483.720 us/op
Iteration   8: 136145.450 us/op
Iteration   9: 133937.976 us/op
Iteration  10: 137121.081 us/op
Iteration  11: 134250.653 us/op
Iteration  12: 134449.317 us/op
Iteration  13: 135444.026 us/op
Iteration  14: 135335.369 us/op
Iteration  15: 134609.932 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 15
  mean = 135019.023 ±(99.9%) 1564.386 us/op

  Histogram, us/op:
    [131000.000, 131500.000) = 0 
    [131500.000, 132000.000) = 1 
    [132000.000, 132500.000) = 0 
    [132500.000, 133000.000) = 0 
    [133000.000, 133500.000) = 0 
    [133500.000, 134000.000) = 2 
    [134000.000, 134500.000) = 3 
    [134500.000, 135000.000) = 1 
    [135000.000, 135500.000) = 5 
    [135500.000, 136000.000) = 0 
    [136000.000, 136500.000) = 1 
    [136500.000, 137000.000) = 0 
    [137000.000, 137500.000) = 1 
    [137500.000, 138000.000) = 0 
    [138000.000, 138500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 131943.087 us/op
     p(50.0000) = 135008.854 us/op
     p(90.0000) = 137569.835 us/op
     p(95.0000) = 138242.966 us/op
     p(99.0000) = 138242.966 us/op
     p(99.9000) = 138242.966 us/op
     p(99.9900) = 138242.966 us/op
     p(99.9990) = 138242.966 us/op
     p(99.9999) = 138242.966 us/op
    p(100.0000) = 138242.966 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4444525.002 us/op
# Warmup Iteration   2: 2926658.986 us/op
# Warmup Iteration   3: 2955731.725 us/op
# Warmup Iteration   4: 2910653.623 us/op
# Warmup Iteration   5: 2900591.014 us/op
Iteration   1: 2885249.571 us/op
Iteration   2: 2914882.182 us/op
Iteration   3: 2893130.299 us/op
Iteration   4: 2953289.001 us/op
Iteration   5: 2936560.382 us/op
Iteration   6: 2919182.948 us/op
Iteration   7: 2929050.157 us/op
Iteration   8: 2958082.151 us/op
Iteration   9: 2949682.467 us/op
Iteration  10: 2893402.083 us/op
Iteration  11: 2942299.586 us/op
Iteration  12: 2901412.837 us/op
Iteration  13: 2954911.017 us/op
Iteration  14: 2966750.070 us/op
Iteration  15: 2884016.992 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 15
  mean = 2925460.116 ±(99.9%) 30711.981 us/op

  Histogram, us/op:
    [2880000.000, 2885000.000) = 1 
    [2885000.000, 2890000.000) = 1 
    [2890000.000, 2895000.000) = 2 
    [2895000.000, 2900000.000) = 0 
    [2900000.000, 2905000.000) = 1 
    [2905000.000, 2910000.000) = 0 
    [2910000.000, 2915000.000) = 1 
    [2915000.000, 2920000.000) = 1 
    [2920000.000, 2925000.000) = 0 
    [2925000.000, 2930000.000) = 1 
    [2930000.000, 2935000.000) = 0 
    [2935000.000, 2940000.000) = 1 
    [2940000.000, 2945000.000) = 1 
    [2945000.000, 2950000.000) = 1 
    [2950000.000, 2955000.000) = 2 
    [2955000.000, 2960000.000) = 1 
    [2960000.000, 2965000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 2884016.992 us/op
     p(50.0000) = 2929050.157 us/op
     p(90.0000) = 2961549.319 us/op
     p(95.0000) = 2966750.070 us/op
     p(99.0000) = 2966750.070 us/op
     p(99.9000) = 2966750.070 us/op
     p(99.9900) = 2966750.070 us/op
     p(99.9990) = 2966750.070 us/op
     p(99.9999) = 2966750.070 us/op
    p(100.0000) = 2966750.070 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 152.832 us/op
# Warmup Iteration   2: 24.600 us/op
# Warmup Iteration   3: 12.581 us/op
# Warmup Iteration   4: 12.789 us/op
# Warmup Iteration   5: 12.258 us/op
Iteration   1: 14.073 us/op
Iteration   2: 13.437 us/op
Iteration   3: 12.657 us/op
Iteration   4: 13.348 us/op
Iteration   5: 16.132 us/op
Iteration   6: 12.850 us/op
Iteration   7: 12.757 us/op
Iteration   8: 13.228 us/op
Iteration   9: 12.321 us/op
Iteration  10: 13.827 us/op
Iteration  11: 11.057 us/op
Iteration  12: 12.630 us/op
Iteration  13: 12.429 us/op
Iteration  14: 12.739 us/op
Iteration  15: 13.545 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     13.135 ±(99.9%) 1.178 us/op

  Histogram, us/op:
    [11.000, 11.500) = 1 
    [11.500, 12.000) = 0 
    [12.000, 12.500) = 2 
    [12.500, 13.000) = 5 
    [13.000, 13.500) = 3 
    [13.500, 14.000) = 2 
    [14.000, 14.500) = 1 
    [14.500, 15.000) = 0 
    [15.000, 15.500) = 0 
    [15.500, 16.000) = 0 
    [16.000, 16.500) = 1 

  Percentiles, us/op:
      p(0.0000) =     11.057 us/op
     p(50.0000) =     12.850 us/op
     p(90.0000) =     14.897 us/op
     p(95.0000) =     16.132 us/op
     p(99.0000) =     16.132 us/op
     p(99.9000) =     16.132 us/op
     p(99.9900) =     16.132 us/op
     p(99.9990) =     16.132 us/op
     p(99.9999) =     16.132 us/op
    p(100.0000) =     16.132 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 231.256 us/op
# Warmup Iteration   2: 32.325 us/op
# Warmup Iteration   3: 25.358 us/op
# Warmup Iteration   4: 46.565 us/op
# Warmup Iteration   5: 23.120 us/op
Iteration   1: 53.512 us/op
Iteration   2: 25.362 us/op
Iteration   3: 13.012 us/op
Iteration   4: 13.486 us/op
Iteration   5: 16.658 us/op
Iteration   6: 12.260 us/op
Iteration   7: 12.264 us/op
Iteration   8: 13.673 us/op
Iteration   9: 11.811 us/op
Iteration  10: 16.367 us/op
Iteration  11: 13.817 us/op
Iteration  12: 14.763 us/op
Iteration  13: 14.440 us/op
Iteration  14: 15.553 us/op
Iteration  15: 14.202 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     17.412 ±(99.9%) 11.226 us/op

  Histogram, us/op:
    [10.000, 15.000) = 10 
    [15.000, 20.000) = 3 
    [20.000, 25.000) = 0 
    [25.000, 30.000) = 1 
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 0 
    [40.000, 45.000) = 0 
    [45.000, 50.000) = 0 
    [50.000, 55.000) = 1 

  Percentiles, us/op:
      p(0.0000) =     11.811 us/op
     p(50.0000) =     14.202 us/op
     p(90.0000) =     36.622 us/op
     p(95.0000) =     53.512 us/op
     p(99.0000) =     53.512 us/op
     p(99.9000) =     53.512 us/op
     p(99.9900) =     53.512 us/op
     p(99.9990) =     53.512 us/op
     p(99.9999) =     53.512 us/op
    p(100.0000) =     53.512 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 343.997 us/op
# Warmup Iteration   2: 44.259 us/op
# Warmup Iteration   3: 37.478 us/op
# Warmup Iteration   4: 63.846 us/op
# Warmup Iteration   5: 29.395 us/op
Iteration   1: 17.625 us/op
Iteration   2: 18.300 us/op
Iteration   3: 19.101 us/op
Iteration   4: 18.414 us/op
Iteration   5: 21.351 us/op
Iteration   6: 20.073 us/op
Iteration   7: 20.749 us/op
Iteration   8: 20.144 us/op
Iteration   9: 18.484 us/op
Iteration  10: 17.636 us/op
Iteration  11: 20.090 us/op
Iteration  12: 23.320 us/op
Iteration  13: 77.728 us/op
Iteration  14: 20.592 us/op
Iteration  15: 23.762 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     23.825 ±(99.9%) 16.063 us/op

  Histogram, us/op:
    [10.000, 15.000) = 0 
    [15.000, 20.000) = 6 
    [20.000, 25.000) = 8 
    [25.000, 30.000) = 0 
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 0 
    [40.000, 45.000) = 0 
    [45.000, 50.000) = 0 
    [50.000, 55.000) = 0 
    [55.000, 60.000) = 0 
    [60.000, 65.000) = 0 
    [65.000, 70.000) = 0 
    [70.000, 75.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     17.625 us/op
     p(50.0000) =     20.090 us/op
     p(90.0000) =     45.348 us/op
     p(95.0000) =     77.728 us/op
     p(99.0000) =     77.728 us/op
     p(99.9000) =     77.728 us/op
     p(99.9900) =     77.728 us/op
     p(99.9990) =     77.728 us/op
     p(99.9999) =     77.728 us/op
    p(100.0000) =     77.728 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 269.899 us/op
# Warmup Iteration   2: 7.024 us/op
# Warmup Iteration   3: 7.575 us/op
# Warmup Iteration   4: 7.276 us/op
# Warmup Iteration   5: 7.444 us/op
Iteration   1: 7.531 us/op
Iteration   2: 7.465 us/op
Iteration   3: 6.715 us/op
Iteration   4: 7.661 us/op
Iteration   5: 7.524 us/op
Iteration   6: 6.844 us/op
Iteration   7: 6.866 us/op
Iteration   8: 18.330 us/op
Iteration   9: 5.868 us/op
Iteration  10: 6.597 us/op
Iteration  11: 6.820 us/op
Iteration  12: 7.242 us/op
Iteration  13: 5.938 us/op
Iteration  14: 7.450 us/op
Iteration  15: 6.358 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =      7.681 ±(99.9%) 3.208 us/op

  Histogram, us/op:
    [ 0.000,  1.250) = 0 
    [ 1.250,  2.500) = 0 
    [ 2.500,  3.750) = 0 
    [ 3.750,  5.000) = 0 
    [ 5.000,  6.250) = 2 
    [ 6.250,  7.500) = 9 
    [ 7.500,  8.750) = 3 
    [ 8.750, 10.000) = 0 
    [10.000, 11.250) = 0 
    [11.250, 12.500) = 0 
    [12.500, 13.750) = 0 
    [13.750, 15.000) = 0 
    [15.000, 16.250) = 0 
    [16.250, 17.500) = 0 
    [17.500, 18.750) = 1 

  Percentiles, us/op:
      p(0.0000) =      5.868 us/op
     p(50.0000) =      6.866 us/op
     p(90.0000) =     11.929 us/op
     p(95.0000) =     18.330 us/op
     p(99.0000) =     18.330 us/op
     p(99.9000) =     18.330 us/op
     p(99.9900) =     18.330 us/op
     p(99.9990) =     18.330 us/op
     p(99.9999) =     18.330 us/op
    p(100.0000) =     18.330 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 271.683 us/op
# Warmup Iteration   2: 31.802 us/op
# Warmup Iteration   3: 33.971 us/op
# Warmup Iteration   4: 24.215 us/op
# Warmup Iteration   5: 16.876 us/op
Iteration   1: 15.665 us/op
Iteration   2: 37.707 us/op
Iteration   3: 16.022 us/op
Iteration   4: 15.911 us/op
Iteration   5: 15.982 us/op
Iteration   6: 16.067 us/op
Iteration   7: 15.483 us/op
Iteration   8: 15.987 us/op
Iteration   9: 15.751 us/op
Iteration  10: 17.125 us/op
Iteration  11: 15.731 us/op
Iteration  12: 15.322 us/op
Iteration  13: 15.493 us/op
Iteration  14: 15.317 us/op
Iteration  15: 16.007 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =     17.305 ±(99.9%) 6.052 us/op

  Histogram, us/op:
    [10.000, 12.500) = 0 
    [12.500, 15.000) = 0 
    [15.000, 17.500) = 14 
    [17.500, 20.000) = 0 
    [20.000, 22.500) = 0 
    [22.500, 25.000) = 0 
    [25.000, 27.500) = 0 
    [27.500, 30.000) = 0 
    [30.000, 32.500) = 0 
    [32.500, 35.000) = 0 
    [35.000, 37.500) = 0 

  Percentiles, us/op:
      p(0.0000) =     15.317 us/op
     p(50.0000) =     15.911 us/op
     p(90.0000) =     25.358 us/op
     p(95.0000) =     37.707 us/op
     p(99.0000) =     37.707 us/op
     p(99.9000) =     37.707 us/op
     p(99.9900) =     37.707 us/op
     p(99.9990) =     37.707 us/op
     p(99.9999) =     37.707 us/op
    p(100.0000) =     37.707 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 566.630 us/op
# Warmup Iteration   2: 131.522 us/op
# Warmup Iteration   3: 119.085 us/op
# Warmup Iteration   4: 130.984 us/op
# Warmup Iteration   5: 143.145 us/op
Iteration   1: 112.610 us/op
Iteration   2: 100.151 us/op
Iteration   3: 96.677 us/op
Iteration   4: 98.973 us/op
Iteration   5: 105.485 us/op
Iteration   6: 89.838 us/op
Iteration   7: 89.423 us/op
Iteration   8: 88.507 us/op
Iteration   9: 88.264 us/op
Iteration  10: 86.990 us/op
Iteration  11: 86.690 us/op
Iteration  12: 89.056 us/op
Iteration  13: 91.011 us/op
Iteration  14: 87.889 us/op
Iteration  15: 90.349 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =     93.461 ±(99.9%) 8.239 us/op

  Histogram, us/op:
    [ 80.000,  82.500) = 0 
    [ 82.500,  85.000) = 0 
    [ 85.000,  87.500) = 2 
    [ 87.500,  90.000) = 6 
    [ 90.000,  92.500) = 2 
    [ 92.500,  95.000) = 0 
    [ 95.000,  97.500) = 1 
    [ 97.500, 100.000) = 1 
    [100.000, 102.500) = 1 
    [102.500, 105.000) = 0 
    [105.000, 107.500) = 1 
    [107.500, 110.000) = 0 
    [110.000, 112.500) = 0 
    [112.500, 115.000) = 1 
    [115.000, 117.500) = 0 

  Percentiles, us/op:
      p(0.0000) =     86.690 us/op
     p(50.0000) =     89.838 us/op
     p(90.0000) =    108.335 us/op
     p(95.0000) =    112.610 us/op
     p(99.0000) =    112.610 us/op
     p(99.9000) =    112.610 us/op
     p(99.9900) =    112.610 us/op
     p(99.9990) =    112.610 us/op
     p(99.9999) =    112.610 us/op
    p(100.0000) =    112.610 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 284.729 us/op
# Warmup Iteration   2: 6.713 us/op
# Warmup Iteration   3: 5.611 us/op
# Warmup Iteration   4: 6.410 us/op
# Warmup Iteration   5: 6.940 us/op
Iteration   1: 10.137 us/op
Iteration   2: 9.262 us/op
Iteration   3: 6.252 us/op
Iteration   4: 6.463 us/op
Iteration   5: 7.326 us/op
Iteration   6: 6.052 us/op
Iteration   7: 7.162 us/op
Iteration   8: 7.418 us/op
Iteration   9: 6.906 us/op
Iteration  10: 7.678 us/op
Iteration  11: 10.169 us/op
Iteration  12: 7.443 us/op
Iteration  13: 7.186 us/op
Iteration  14: 7.629 us/op
Iteration  15: 9.775 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =      7.791 ±(99.9%) 1.470 us/op

  Histogram, us/op:
    [ 6.000,  6.500) = 3 
    [ 6.500,  7.000) = 1 
    [ 7.000,  7.500) = 5 
    [ 7.500,  8.000) = 2 
    [ 8.000,  8.500) = 0 
    [ 8.500,  9.000) = 0 
    [ 9.000,  9.500) = 1 
    [ 9.500, 10.000) = 1 
    [10.000, 10.500) = 2 

  Percentiles, us/op:
      p(0.0000) =      6.052 us/op
     p(50.0000) =      7.418 us/op
     p(90.0000) =     10.150 us/op
     p(95.0000) =     10.169 us/op
     p(99.0000) =     10.169 us/op
     p(99.9000) =     10.169 us/op
     p(99.9900) =     10.169 us/op
     p(99.9990) =     10.169 us/op
     p(99.9999) =     10.169 us/op
    p(100.0000) =     10.169 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 249.746 us/op
# Warmup Iteration   2: 25.759 us/op
# Warmup Iteration   3: 26.607 us/op
# Warmup Iteration   4: 26.784 us/op
# Warmup Iteration   5: 44.653 us/op
Iteration   1: 52.011 us/op
Iteration   2: 16.035 us/op
Iteration   3: 15.840 us/op
Iteration   4: 15.889 us/op
Iteration   5: 16.087 us/op
Iteration   6: 16.376 us/op
Iteration   7: 15.611 us/op
Iteration   8: 15.602 us/op
Iteration   9: 34.361 us/op
Iteration  10: 18.520 us/op
Iteration  11: 24.037 us/op
Iteration  12: 20.066 us/op
Iteration  13: 23.953 us/op
Iteration  14: 15.582 us/op
Iteration  15: 15.928 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =     21.060 ±(99.9%) 10.696 us/op

  Histogram, us/op:
    [10.000, 15.000) = 0 
    [15.000, 20.000) = 10 
    [20.000, 25.000) = 3 
    [25.000, 30.000) = 0 
    [30.000, 35.000) = 1 
    [35.000, 40.000) = 0 
    [40.000, 45.000) = 0 
    [45.000, 50.000) = 0 
    [50.000, 55.000) = 1 

  Percentiles, us/op:
      p(0.0000) =     15.582 us/op
     p(50.0000) =     16.087 us/op
     p(90.0000) =     41.421 us/op
     p(95.0000) =     52.011 us/op
     p(99.0000) =     52.011 us/op
     p(99.9000) =     52.011 us/op
     p(99.9900) =     52.011 us/op
     p(99.9990) =     52.011 us/op
     p(99.9999) =     52.011 us/op
    p(100.0000) =     52.011 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 542.696 us/op
# Warmup Iteration   2: 132.358 us/op
# Warmup Iteration   3: 181.477 us/op
# Warmup Iteration   4: 122.377 us/op
# Warmup Iteration   5: 140.428 us/op
Iteration   1: 108.127 us/op
Iteration   2: 91.465 us/op
Iteration   3: 95.121 us/op
Iteration   4: 91.697 us/op
Iteration   5: 183.358 us/op
Iteration   6: 106.687 us/op
Iteration   7: 87.064 us/op
Iteration   8: 130.422 us/op
Iteration   9: 85.078 us/op
Iteration  10: 85.701 us/op
Iteration  11: 89.715 us/op
Iteration  12: 84.597 us/op
Iteration  13: 86.620 us/op
Iteration  14: 85.720 us/op
Iteration  15: 85.193 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =     99.771 ±(99.9%) 28.125 us/op

  Histogram, us/op:
    [ 80.000,  90.000) = 8 
    [ 90.000, 100.000) = 3 
    [100.000, 110.000) = 2 
    [110.000, 120.000) = 0 
    [120.000, 130.000) = 0 
    [130.000, 140.000) = 1 
    [140.000, 150.000) = 0 
    [150.000, 160.000) = 0 
    [160.000, 170.000) = 0 
    [170.000, 180.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     84.597 us/op
     p(50.0000) =     89.715 us/op
     p(90.0000) =    151.596 us/op
     p(95.0000) =    183.358 us/op
     p(99.0000) =    183.358 us/op
     p(99.9000) =    183.358 us/op
     p(99.9900) =    183.358 us/op
     p(99.9990) =    183.358 us/op
     p(99.9999) =    183.358 us/op
    p(100.0000) =    183.358 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 29568.029 us/op
# Warmup Iteration   2: 15792.088 us/op
# Warmup Iteration   3: 14722.657 us/op
# Warmup Iteration   4: 14513.695 us/op
# Warmup Iteration   5: 14515.753 us/op
Iteration   1: 14576.124 us/op
Iteration   2: 14482.499 us/op
Iteration   3: 14469.650 us/op
Iteration   4: 14436.468 us/op
Iteration   5: 14453.273 us/op
Iteration   6: 14720.942 us/op
Iteration   7: 14509.179 us/op
Iteration   8: 15586.386 us/op
Iteration   9: 14589.939 us/op
Iteration  10: 14371.539 us/op
Iteration  11: 14344.864 us/op
Iteration  12: 14316.139 us/op
Iteration  13: 14388.780 us/op
Iteration  14: 14340.252 us/op
Iteration  15: 14449.519 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  N = 15
  mean =  14535.704 ±(99.9%) 331.502 us/op

  Histogram, us/op:
    [14000.000, 14125.000) = 0 
    [14125.000, 14250.000) = 0 
    [14250.000, 14375.000) = 4 
    [14375.000, 14500.000) = 6 
    [14500.000, 14625.000) = 3 
    [14625.000, 14750.000) = 1 
    [14750.000, 14875.000) = 0 
    [14875.000, 15000.000) = 0 
    [15000.000, 15125.000) = 0 
    [15125.000, 15250.000) = 0 
    [15250.000, 15375.000) = 0 
    [15375.000, 15500.000) = 0 
    [15500.000, 15625.000) = 1 
    [15625.000, 15750.000) = 0 
    [15750.000, 15875.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  14316.139 us/op
     p(50.0000) =  14453.273 us/op
     p(90.0000) =  15067.120 us/op
     p(95.0000) =  15586.386 us/op
     p(99.0000) =  15586.386 us/op
     p(99.9000) =  15586.386 us/op
     p(99.9900) =  15586.386 us/op
     p(99.9990) =  15586.386 us/op
     p(99.9999) =  15586.386 us/op
    p(100.0000) =  15586.386 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 18263.647 us/op
# Warmup Iteration   2: 6631.215 us/op
# Warmup Iteration   3: 6413.894 us/op
# Warmup Iteration   4: 3646.944 us/op
# Warmup Iteration   5: 3563.015 us/op
Iteration   1: 3534.759 us/op
Iteration   2: 2159.032 us/op
Iteration   3: 1897.062 us/op
Iteration   4: 1852.911 us/op
Iteration   5: 1893.643 us/op
Iteration   6: 1943.009 us/op
Iteration   7: 1443.243 us/op
Iteration   8: 1505.155 us/op
Iteration   9: 1567.341 us/op
Iteration  10: 9590.273 us/op
Iteration  11: 1135.122 us/op
Iteration  12: 1143.597 us/op
Iteration  13: 1193.298 us/op
Iteration  14: 1117.697 us/op
Iteration  15: 1159.778 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean =   2209.061 ±(99.9%) 2281.152 us/op

  Histogram, us/op:
    [ 1000.000,  1500.000) = 6 
    [ 1500.000,  2000.000) = 6 
    [ 2000.000,  2500.000) = 1 
    [ 2500.000,  3000.000) = 0 
    [ 3000.000,  3500.000) = 0 
    [ 3500.000,  4000.000) = 1 
    [ 4000.000,  4500.000) = 0 
    [ 4500.000,  5000.000) = 0 
    [ 5000.000,  5500.000) = 0 
    [ 5500.000,  6000.000) = 0 
    [ 6000.000,  6500.000) = 0 
    [ 6500.000,  7000.000) = 0 
    [ 7000.000,  7500.000) = 0 
    [ 7500.000,  8000.000) = 0 
    [ 8000.000,  8500.000) = 0 
    [ 8500.000,  9000.000) = 0 
    [ 9000.000,  9500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   1117.697 us/op
     p(50.0000) =   1567.341 us/op
     p(90.0000) =   5956.965 us/op
     p(95.0000) =   9590.273 us/op
     p(99.0000) =   9590.273 us/op
     p(99.9000) =   9590.273 us/op
     p(99.9900) =   9590.273 us/op
     p(99.9990) =   9590.273 us/op
     p(99.9999) =   9590.273 us/op
    p(100.0000) =   9590.273 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 107537.337 us/op
# Warmup Iteration   2: 40400.622 us/op
# Warmup Iteration   3: 33331.296 us/op
# Warmup Iteration   4: 33289.637 us/op
# Warmup Iteration   5: 33440.255 us/op
Iteration   1: 33247.131 us/op
Iteration   2: 104264.699 us/op
Iteration   3: 33330.843 us/op
Iteration   4: 33793.948 us/op
Iteration   5: 35091.961 us/op
Iteration   6: 34372.117 us/op
Iteration   7: 34384.305 us/op
Iteration   8: 34862.830 us/op
Iteration   9: 34582.513 us/op
Iteration  10: 104868.528 us/op
Iteration  11: 105668.750 us/op
Iteration  12: 104702.317 us/op
Iteration  13: 104842.742 us/op
Iteration  14: 105454.489 us/op
Iteration  15: 104479.109 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean =  67196.419 ±(99.9%) 39029.638 us/op

  Histogram, us/op:
    [ 30000.000,  35000.000) = 7 
    [ 35000.000,  40000.000) = 1 
    [ 40000.000,  45000.000) = 0 
    [ 45000.000,  50000.000) = 0 
    [ 50000.000,  55000.000) = 0 
    [ 55000.000,  60000.000) = 0 
    [ 60000.000,  65000.000) = 0 
    [ 65000.000,  70000.000) = 0 
    [ 70000.000,  75000.000) = 0 
    [ 75000.000,  80000.000) = 0 
    [ 80000.000,  85000.000) = 0 
    [ 85000.000,  90000.000) = 0 
    [ 90000.000,  95000.000) = 0 
    [ 95000.000, 100000.000) = 0 
    [100000.000, 105000.000) = 5 

  Percentiles, us/op:
      p(0.0000) =  33247.131 us/op
     p(50.0000) =  35091.961 us/op
     p(90.0000) = 105540.193 us/op
     p(95.0000) = 105668.750 us/op
     p(99.0000) = 105668.750 us/op
     p(99.9000) = 105668.750 us/op
     p(99.9900) = 105668.750 us/op
     p(99.9990) = 105668.750 us/op
     p(99.9999) = 105668.750 us/op
    p(100.0000) = 105668.750 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3190644.338 us/op
# Warmup Iteration   2: 11650167.071 us/op
# Warmup Iteration   3: 10632202.605 us/op
# Warmup Iteration   4: 10597220.970 us/op
# Warmup Iteration   5: 10628205.428 us/op
Iteration   1: 10625288.890 us/op
Iteration   2: 10604300.697 us/op
Iteration   3: 10598303.337 us/op
Iteration   4: 10606871.644 us/op
Iteration   5: 10660140.777 us/op
Iteration   6: 10647687.920 us/op
Iteration   7: 10656665.221 us/op
Iteration   8: 10631482.439 us/op
Iteration   9: 10637999.972 us/op
Iteration  10: 10597773.097 us/op
Iteration  11: 10610221.369 us/op
Iteration  12: 10605177.723 us/op
Iteration  13: 10671279.023 us/op
Iteration  14: 10673298.943 us/op
Iteration  15: 10636770.139 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean = 10630884.079 ±(99.9%) 28399.307 us/op

  Histogram, us/op:
    [10590000.000, 10595000.000) = 0 
    [10595000.000, 10600000.000) = 2 
    [10600000.000, 10605000.000) = 1 
    [10605000.000, 10610000.000) = 2 
    [10610000.000, 10615000.000) = 1 
    [10615000.000, 10620000.000) = 0 
    [10620000.000, 10625000.000) = 0 
    [10625000.000, 10630000.000) = 1 
    [10630000.000, 10635000.000) = 1 
    [10635000.000, 10640000.000) = 2 
    [10640000.000, 10645000.000) = 0 
    [10645000.000, 10650000.000) = 1 
    [10650000.000, 10655000.000) = 0 
    [10655000.000, 10660000.000) = 1 
    [10660000.000, 10665000.000) = 1 
    [10665000.000, 10670000.000) = 0 
    [10670000.000, 10675000.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 10597773.097 us/op
     p(50.0000) = 10631482.439 us/op
     p(90.0000) = 10672086.991 us/op
     p(95.0000) = 10673298.943 us/op
     p(99.0000) = 10673298.943 us/op
     p(99.9000) = 10673298.943 us/op
     p(99.9900) = 10673298.943 us/op
     p(99.9990) = 10673298.943 us/op
     p(99.9999) = 10673298.943 us/op
    p(100.0000) = 10673298.943 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 19392.611 us/op
# Warmup Iteration   2: 7902.678 us/op
# Warmup Iteration   3: 1907.129 us/op
# Warmup Iteration   4: 1881.405 us/op
# Warmup Iteration   5: 1918.376 us/op
Iteration   1: 1892.764 us/op
Iteration   2: 1874.212 us/op
Iteration   3: 1890.448 us/op
Iteration   4: 1895.893 us/op
Iteration   5: 1894.350 us/op
Iteration   6: 1876.211 us/op
Iteration   7: 1917.149 us/op
Iteration   8: 1885.641 us/op
Iteration   9: 1877.588 us/op
Iteration  10: 1880.951 us/op
Iteration  11: 1896.968 us/op
Iteration  12: 2235.670 us/op
Iteration  13: 1888.671 us/op
Iteration  14: 1893.161 us/op
Iteration  15: 1880.686 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  N = 15
  mean =   1912.024 ±(99.9%) 96.407 us/op

  Histogram, us/op:
    [1800.000, 1850.000) = 0 
    [1850.000, 1900.000) = 13 
    [1900.000, 1950.000) = 1 
    [1950.000, 2000.000) = 0 
    [2000.000, 2050.000) = 0 
    [2050.000, 2100.000) = 0 
    [2100.000, 2150.000) = 0 
    [2150.000, 2200.000) = 0 
    [2200.000, 2250.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   1874.212 us/op
     p(50.0000) =   1890.448 us/op
     p(90.0000) =   2044.557 us/op
     p(95.0000) =   2235.670 us/op
     p(99.0000) =   2235.670 us/op
     p(99.9000) =   2235.670 us/op
     p(99.9900) =   2235.670 us/op
     p(99.9990) =   2235.670 us/op
     p(99.9999) =   2235.670 us/op
    p(100.0000) =   2235.670 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 68221.388 us/op
# Warmup Iteration   2: 62688.429 us/op
# Warmup Iteration   3: 62096.311 us/op
# Warmup Iteration   4: 62148.323 us/op
# Warmup Iteration   5: 62133.282 us/op
Iteration   1: 61924.997 us/op
Iteration   2: 62080.709 us/op
Iteration   3: 62461.227 us/op
Iteration   4: 62434.079 us/op
Iteration   5: 62169.799 us/op
Iteration   6: 61705.940 us/op
Iteration   7: 61913.861 us/op
Iteration   8: 62079.175 us/op
Iteration   9: 62180.488 us/op
Iteration  10: 62091.152 us/op
Iteration  11: 62132.334 us/op
Iteration  12: 62127.720 us/op
Iteration  13: 62069.076 us/op
Iteration  14: 62817.933 us/op
Iteration  15: 62052.363 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  N = 15
  mean =  62149.390 ±(99.9%) 279.765 us/op

  Histogram, us/op:
    [61000.000, 61125.000) = 0 
    [61125.000, 61250.000) = 0 
    [61250.000, 61375.000) = 0 
    [61375.000, 61500.000) = 0 
    [61500.000, 61625.000) = 0 
    [61625.000, 61750.000) = 1 
    [61750.000, 61875.000) = 0 
    [61875.000, 62000.000) = 2 
    [62000.000, 62125.000) = 5 
    [62125.000, 62250.000) = 4 
    [62250.000, 62375.000) = 0 
    [62375.000, 62500.000) = 2 
    [62500.000, 62625.000) = 0 
    [62625.000, 62750.000) = 0 
    [62750.000, 62875.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  61705.940 us/op
     p(50.0000) =  62091.152 us/op
     p(90.0000) =  62603.909 us/op
     p(95.0000) =  62817.933 us/op
     p(99.0000) =  62817.933 us/op
     p(99.9000) =  62817.933 us/op
     p(99.9900) =  62817.933 us/op
     p(99.9990) =  62817.933 us/op
     p(99.9999) =  62817.933 us/op
    p(100.0000) =  62817.933 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2115092.161 us/op
# Warmup Iteration   2: 1712748.207 us/op
# Warmup Iteration   3: 1705609.625 us/op
# Warmup Iteration   4: 1703156.414 us/op
# Warmup Iteration   5: 1705019.781 us/op
Iteration   1: 1703532.924 us/op
Iteration   2: 1703502.664 us/op
Iteration   3: 1702965.450 us/op
Iteration   4: 1702203.364 us/op
Iteration   5: 1704503.777 us/op
Iteration   6: 1705495.234 us/op
Iteration   7: 1702985.234 us/op
Iteration   8: 1704891.411 us/op
Iteration   9: 1704057.869 us/op
Iteration  10: 1703055.545 us/op
Iteration  11: 1704352.657 us/op
Iteration  12: 1705149.212 us/op
Iteration  13: 1703203.133 us/op
Iteration  14: 1704623.064 us/op
Iteration  15: 1704607.779 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  N = 15
  mean = 1703941.954 ±(99.9%) 1020.621 us/op

  Histogram, us/op:
    [1702000.000, 1702250.000) = 1 
    [1702250.000, 1702500.000) = 0 
    [1702500.000, 1702750.000) = 0 
    [1702750.000, 1703000.000) = 2 
    [1703000.000, 1703250.000) = 2 
    [1703250.000, 1703500.000) = 0 
    [1703500.000, 1703750.000) = 2 
    [1703750.000, 1704000.000) = 0 
    [1704000.000, 1704250.000) = 1 
    [1704250.000, 1704500.000) = 1 
    [1704500.000, 1704750.000) = 3 
    [1704750.000, 1705000.000) = 1 
    [1705000.000, 1705250.000) = 1 
    [1705250.000, 1705500.000) = 1 
    [1705500.000, 1705750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1702203.364 us/op
     p(50.0000) = 1704057.869 us/op
     p(90.0000) = 1705287.621 us/op
     p(95.0000) = 1705495.234 us/op
     p(99.0000) = 1705495.234 us/op
     p(99.9000) = 1705495.234 us/op
     p(99.9900) = 1705495.234 us/op
     p(99.9990) = 1705495.234 us/op
     p(99.9999) = 1705495.234 us/op
    p(100.0000) = 1705495.234 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 72.923 us/op
# Warmup Iteration   2: 11.505 us/op
# Warmup Iteration   3: 14.721 us/op
# Warmup Iteration   4: 12.409 us/op
# Warmup Iteration   5: 16.379 us/op
Iteration   1: 16.529 us/op
Iteration   2: 12.099 us/op
Iteration   3: 12.736 us/op
Iteration   4: 10.822 us/op
Iteration   5: 15.194 us/op
Iteration   6: 11.607 us/op
Iteration   7: 57.901 us/op
Iteration   8: 11.975 us/op
Iteration   9: 11.576 us/op
Iteration  10: 13.067 us/op
Iteration  11: 12.748 us/op
Iteration  12: 12.792 us/op
Iteration  13: 72.231 us/op
Iteration  14: 12.961 us/op
Iteration  15: 13.374 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  N = 15
  mean =     19.841 ±(99.9%) 19.899 us/op

  Histogram, us/op:
    [10.000, 15.000) = 11 
    [15.000, 20.000) = 2 
    [20.000, 25.000) = 0 
    [25.000, 30.000) = 0 
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 0 
    [40.000, 45.000) = 0 
    [45.000, 50.000) = 0 
    [50.000, 55.000) = 0 
    [55.000, 60.000) = 1 
    [60.000, 65.000) = 0 
    [65.000, 70.000) = 0 
    [70.000, 75.000) = 1 

  Percentiles, us/op:
      p(0.0000) =     10.822 us/op
     p(50.0000) =     12.792 us/op
     p(90.0000) =     63.633 us/op
     p(95.0000) =     72.231 us/op
     p(99.0000) =     72.231 us/op
     p(99.9000) =     72.231 us/op
     p(99.9900) =     72.231 us/op
     p(99.9990) =     72.231 us/op
     p(99.9999) =     72.231 us/op
    p(100.0000) =     72.231 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 21703.172 us/op
# Warmup Iteration   2: 12982.951 us/op
# Warmup Iteration   3: 7277.371 us/op
# Warmup Iteration   4: 7281.483 us/op
# Warmup Iteration   5: 7292.553 us/op
Iteration   1: 7341.499 us/op
Iteration   2: 7291.717 us/op
Iteration   3: 7294.208 us/op
Iteration   4: 7274.536 us/op
Iteration   5: 7393.849 us/op
Iteration   6: 7291.822 us/op
Iteration   7: 7309.241 us/op
Iteration   8: 7348.667 us/op
Iteration   9: 7309.049 us/op
Iteration  10: 7682.279 us/op
Iteration  11: 7296.425 us/op
Iteration  12: 7284.014 us/op
Iteration  13: 7333.622 us/op
Iteration  14: 7279.356 us/op
Iteration  15: 7291.991 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  N = 15
  mean =   7334.818 ±(99.9%) 108.319 us/op

  Histogram, us/op:
    [7200.000, 7250.000) = 0 
    [7250.000, 7300.000) = 8 
    [7300.000, 7350.000) = 5 
    [7350.000, 7400.000) = 1 
    [7400.000, 7450.000) = 0 
    [7450.000, 7500.000) = 0 
    [7500.000, 7550.000) = 0 
    [7550.000, 7600.000) = 0 
    [7600.000, 7650.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   7274.536 us/op
     p(50.0000) =   7296.425 us/op
     p(90.0000) =   7509.221 us/op
     p(95.0000) =   7682.279 us/op
     p(99.0000) =   7682.279 us/op
     p(99.9000) =   7682.279 us/op
     p(99.9900) =   7682.279 us/op
     p(99.9990) =   7682.279 us/op
     p(99.9999) =   7682.279 us/op
    p(100.0000) =   7682.279 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 68132.584 us/op
# Warmup Iteration   2: 51567.258 us/op
# Warmup Iteration   3: 32685.343 us/op
# Warmup Iteration   4: 33188.985 us/op
# Warmup Iteration   5: 37173.765 us/op
Iteration   1: 36080.967 us/op
Iteration   2: 34038.004 us/op
Iteration   3: 38011.769 us/op
Iteration   4: 33534.831 us/op
Iteration   5: 32675.692 us/op
Iteration   6: 38849.234 us/op
Iteration   7: 41182.497 us/op
Iteration   8: 33523.623 us/op
Iteration   9: 33412.372 us/op
Iteration  10: 37257.119 us/op
Iteration  11: 33026.556 us/op
Iteration  12: 35238.868 us/op
Iteration  13: 32905.338 us/op
Iteration  14: 33080.623 us/op
Iteration  15: 40184.689 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  N = 15
  mean =  35533.479 ±(99.9%) 3079.718 us/op

  Histogram, us/op:
    [32000.000, 33000.000) = 2 
    [33000.000, 34000.000) = 5 
    [34000.000, 35000.000) = 1 
    [35000.000, 36000.000) = 1 
    [36000.000, 37000.000) = 1 
    [37000.000, 38000.000) = 1 
    [38000.000, 39000.000) = 2 
    [39000.000, 40000.000) = 0 
    [40000.000, 41000.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  32675.692 us/op
     p(50.0000) =  34038.004 us/op
     p(90.0000) =  40583.812 us/op
     p(95.0000) =  41182.497 us/op
     p(99.0000) =  41182.497 us/op
     p(99.9000) =  41182.497 us/op
     p(99.9900) =  41182.497 us/op
     p(99.9990) =  41182.497 us/op
     p(99.9999) =  41182.497 us/op
    p(100.0000) =  41182.497 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 67448.713 us/op
# Warmup Iteration   2: 44234.442 us/op
# Warmup Iteration   3: 35525.171 us/op
# Warmup Iteration   4: 35454.862 us/op
# Warmup Iteration   5: 35496.420 us/op
Iteration   1: 35440.949 us/op
Iteration   2: 35487.476 us/op
Iteration   3: 35494.288 us/op
Iteration   4: 35631.812 us/op
Iteration   5: 35829.259 us/op
Iteration   6: 35564.044 us/op
Iteration   7: 35445.186 us/op
Iteration   8: 35461.636 us/op
Iteration   9: 35510.644 us/op
Iteration  10: 35440.991 us/op
Iteration  11: 35095.701 us/op
Iteration  12: 35390.798 us/op
Iteration  13: 35444.520 us/op
Iteration  14: 35142.357 us/op
Iteration  15: 35405.660 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  N = 15
  mean =  35452.355 ±(99.9%) 185.795 us/op

  Histogram, us/op:
    [35000.000, 35050.000) = 0 
    [35050.000, 35100.000) = 1 
    [35100.000, 35150.000) = 1 
    [35150.000, 35200.000) = 0 
    [35200.000, 35250.000) = 0 
    [35250.000, 35300.000) = 0 
    [35300.000, 35350.000) = 0 
    [35350.000, 35400.000) = 1 
    [35400.000, 35450.000) = 5 
    [35450.000, 35500.000) = 3 
    [35500.000, 35550.000) = 1 
    [35550.000, 35600.000) = 1 
    [35600.000, 35650.000) = 1 
    [35650.000, 35700.000) = 0 
    [35700.000, 35750.000) = 0 
    [35750.000, 35800.000) = 0 
    [35800.000, 35850.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  35095.701 us/op
     p(50.0000) =  35445.186 us/op
     p(90.0000) =  35710.791 us/op
     p(95.0000) =  35829.259 us/op
     p(99.0000) =  35829.259 us/op
     p(99.9000) =  35829.259 us/op
     p(99.9900) =  35829.259 us/op
     p(99.9990) =  35829.259 us/op
     p(99.9999) =  35829.259 us/op
    p(100.0000) =  35829.259 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 44428.020 us/op
# Warmup Iteration   2: 27139.068 us/op
# Warmup Iteration   3: 34569.393 us/op
# Warmup Iteration   4: 27379.810 us/op
# Warmup Iteration   5: 27438.200 us/op
Iteration   1: 24907.585 us/op
Iteration   2: 25434.058 us/op
Iteration   3: 26863.876 us/op
Iteration   4: 27021.642 us/op
Iteration   5: 27000.762 us/op
Iteration   6: 27137.589 us/op
Iteration   7: 26225.994 us/op
Iteration   8: 27694.151 us/op
Iteration   9: 26824.713 us/op
Iteration  10: 26652.215 us/op
Iteration  11: 26355.540 us/op
Iteration  12: 25413.026 us/op
Iteration  13: 26866.741 us/op
Iteration  14: 26358.682 us/op
Iteration  15: 26264.207 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  N = 15
  mean =  26468.052 ±(99.9%) 795.952 us/op

  Histogram, us/op:
    [24000.000, 24250.000) = 0 
    [24250.000, 24500.000) = 0 
    [24500.000, 24750.000) = 0 
    [24750.000, 25000.000) = 1 
    [25000.000, 25250.000) = 0 
    [25250.000, 25500.000) = 2 
    [25500.000, 25750.000) = 0 
    [25750.000, 26000.000) = 0 
    [26000.000, 26250.000) = 1 
    [26250.000, 26500.000) = 3 
    [26500.000, 26750.000) = 1 
    [26750.000, 27000.000) = 3 
    [27000.000, 27250.000) = 3 
    [27250.000, 27500.000) = 0 
    [27500.000, 27750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  24907.585 us/op
     p(50.0000) =  26652.215 us/op
     p(90.0000) =  27360.214 us/op
     p(95.0000) =  27694.151 us/op
     p(99.0000) =  27694.151 us/op
     p(99.9000) =  27694.151 us/op
     p(99.9900) =  27694.151 us/op
     p(99.9990) =  27694.151 us/op
     p(99.9999) =  27694.151 us/op
    p(100.0000) =  27694.151 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 33412.230 us/op
# Warmup Iteration   2: 26278.276 us/op
# Warmup Iteration   3: 20574.232 us/op
# Warmup Iteration   4: 20350.322 us/op
# Warmup Iteration   5: 21275.545 us/op
Iteration   1: 20583.699 us/op
Iteration   2: 20791.545 us/op
Iteration   3: 21653.103 us/op
Iteration   4: 21981.353 us/op
Iteration   5: 21320.903 us/op
Iteration   6: 23804.249 us/op
Iteration   7: 20503.521 us/op
Iteration   8: 20311.626 us/op
Iteration   9: 22752.120 us/op
Iteration  10: 23472.205 us/op
Iteration  11: 23124.327 us/op
Iteration  12: 23381.141 us/op
Iteration  13: 23006.278 us/op
Iteration  14: 20313.566 us/op
Iteration  15: 20323.286 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  N = 15
  mean =  21821.528 ±(99.9%) 1413.902 us/op

  Histogram, us/op:
    [20000.000, 20250.000) = 0 
    [20250.000, 20500.000) = 3 
    [20500.000, 20750.000) = 2 
    [20750.000, 21000.000) = 1 
    [21000.000, 21250.000) = 0 
    [21250.000, 21500.000) = 1 
    [21500.000, 21750.000) = 1 
    [21750.000, 22000.000) = 1 
    [22000.000, 22250.000) = 0 
    [22250.000, 22500.000) = 0 
    [22500.000, 22750.000) = 0 
    [22750.000, 23000.000) = 1 
    [23000.000, 23250.000) = 2 
    [23250.000, 23500.000) = 2 
    [23500.000, 23750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  20311.626 us/op
     p(50.0000) =  21653.103 us/op
     p(90.0000) =  23605.023 us/op
     p(95.0000) =  23804.249 us/op
     p(99.0000) =  23804.249 us/op
     p(99.9000) =  23804.249 us/op
     p(99.9900) =  23804.249 us/op
     p(99.9990) =  23804.249 us/op
     p(99.9999) =  23804.249 us/op
    p(100.0000) =  23804.249 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 116369.705 us/op
# Warmup Iteration   2: 46664.182 us/op
# Warmup Iteration   3: 36258.513 us/op
# Warmup Iteration   4: 36539.422 us/op
# Warmup Iteration   5: 37948.888 us/op
Iteration   1: 36949.754 us/op
Iteration   2: 38224.101 us/op
Iteration   3: 37617.619 us/op
Iteration   4: 40046.913 us/op
Iteration   5: 41515.586 us/op
Iteration   6: 40901.284 us/op
Iteration   7: 38848.596 us/op
Iteration   8: 36996.160 us/op
Iteration   9: 38712.873 us/op
Iteration  10: 36558.758 us/op
Iteration  11: 36313.938 us/op
Iteration  12: 37430.726 us/op
Iteration  13: 36678.346 us/op
Iteration  14: 36356.353 us/op
Iteration  15: 39536.205 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  N = 15
  mean =  38179.147 ±(99.9%) 1808.691 us/op

  Histogram, us/op:
    [36000.000, 36500.000) = 2 
    [36500.000, 37000.000) = 4 
    [37000.000, 37500.000) = 1 
    [37500.000, 38000.000) = 1 
    [38000.000, 38500.000) = 1 
    [38500.000, 39000.000) = 2 
    [39000.000, 39500.000) = 0 
    [39500.000, 40000.000) = 1 
    [40000.000, 40500.000) = 1 
    [40500.000, 41000.000) = 1 
    [41000.000, 41500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  36313.938 us/op
     p(50.0000) =  37617.619 us/op
     p(90.0000) =  41147.005 us/op
     p(95.0000) =  41515.586 us/op
     p(99.0000) =  41515.586 us/op
     p(99.9000) =  41515.586 us/op
     p(99.9900) =  41515.586 us/op
     p(99.9990) =  41515.586 us/op
     p(99.9999) =  41515.586 us/op
    p(100.0000) =  41515.586 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 15654.915 us/op
# Warmup Iteration   2: 1255.530 us/op
# Warmup Iteration   3: 1171.310 us/op
# Warmup Iteration   4: 1140.917 us/op
# Warmup Iteration   5: 1413.340 us/op
Iteration   1: 1438.323 us/op
Iteration   2: 1385.241 us/op
Iteration   3: 1423.237 us/op
Iteration   4: 1479.553 us/op
Iteration   5: 864.026 us/op
Iteration   6: 835.529 us/op
Iteration   7: 824.191 us/op
Iteration   8: 824.669 us/op
Iteration   9: 791.694 us/op
Iteration  10: 835.910 us/op
Iteration  11: 777.115 us/op
Iteration  12: 790.387 us/op
Iteration  13: 750.996 us/op
Iteration  14: 793.737 us/op
Iteration  15: 779.344 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean =    972.930 ±(99.9%) 308.127 us/op

  Histogram, us/op:
    [ 700.000,  750.000) = 0 
    [ 750.000,  800.000) = 6 
    [ 800.000,  850.000) = 4 
    [ 850.000,  900.000) = 1 
    [ 900.000,  950.000) = 0 
    [ 950.000, 1000.000) = 0 
    [1000.000, 1050.000) = 0 
    [1050.000, 1100.000) = 0 
    [1100.000, 1150.000) = 0 
    [1150.000, 1200.000) = 0 
    [1200.000, 1250.000) = 0 
    [1250.000, 1300.000) = 0 
    [1300.000, 1350.000) = 0 
    [1350.000, 1400.000) = 1 
    [1400.000, 1450.000) = 2 

  Percentiles, us/op:
      p(0.0000) =    750.996 us/op
     p(50.0000) =    824.669 us/op
     p(90.0000) =   1454.815 us/op
     p(95.0000) =   1479.553 us/op
     p(99.0000) =   1479.553 us/op
     p(99.9000) =   1479.553 us/op
     p(99.9900) =   1479.553 us/op
     p(99.9990) =   1479.553 us/op
     p(99.9999) =   1479.553 us/op
    p(100.0000) =   1479.553 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 24079.791 us/op
# Warmup Iteration   2: 11015.753 us/op
# Warmup Iteration   3: 11056.225 us/op
# Warmup Iteration   4: 10938.693 us/op
# Warmup Iteration   5: 11032.165 us/op
Iteration   1: 10990.265 us/op
Iteration   2: 11090.098 us/op
Iteration   3: 10836.537 us/op
Iteration   4: 10943.053 us/op
Iteration   5: 10819.716 us/op
Iteration   6: 11159.598 us/op
Iteration   7: 10805.606 us/op
Iteration   8: 10782.710 us/op
Iteration   9: 10828.958 us/op
Iteration  10: 10804.681 us/op
Iteration  11: 10601.228 us/op
Iteration  12: 10753.534 us/op
Iteration  13: 10837.142 us/op
Iteration  14: 10652.298 us/op
Iteration  15: 10768.807 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean =  10844.949 ±(99.9%) 158.716 us/op

  Histogram, us/op:
    [10600.000, 10650.000) = 1 
    [10650.000, 10700.000) = 1 
    [10700.000, 10750.000) = 0 
    [10750.000, 10800.000) = 3 
    [10800.000, 10850.000) = 6 
    [10850.000, 10900.000) = 0 
    [10900.000, 10950.000) = 1 
    [10950.000, 11000.000) = 1 
    [11000.000, 11050.000) = 0 
    [11050.000, 11100.000) = 1 
    [11100.000, 11150.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  10601.228 us/op
     p(50.0000) =  10819.716 us/op
     p(90.0000) =  11117.898 us/op
     p(95.0000) =  11159.598 us/op
     p(99.0000) =  11159.598 us/op
     p(99.9000) =  11159.598 us/op
     p(99.9900) =  11159.598 us/op
     p(99.9990) =  11159.598 us/op
     p(99.9999) =  11159.598 us/op
    p(100.0000) =  11159.598 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 134791.169 us/op
# Warmup Iteration   2: 113009.343 us/op
# Warmup Iteration   3: 113167.278 us/op
# Warmup Iteration   4: 114219.989 us/op
# Warmup Iteration   5: 112848.497 us/op
Iteration   1: 110982.578 us/op
Iteration   2: 111676.336 us/op
Iteration   3: 112337.042 us/op
Iteration   4: 114375.176 us/op
Iteration   5: 111059.485 us/op
Iteration   6: 110946.921 us/op
Iteration   7: 111180.253 us/op
Iteration   8: 113601.479 us/op
Iteration   9: 112654.541 us/op
Iteration  10: 110782.802 us/op
Iteration  11: 110696.653 us/op
Iteration  12: 112612.654 us/op
Iteration  13: 110493.857 us/op
Iteration  14: 110660.390 us/op
Iteration  15: 110630.971 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean = 111646.076 ±(99.9%) 1283.115 us/op

  Histogram, us/op:
    [110000.000, 110500.000) = 1 
    [110500.000, 111000.000) = 6 
    [111000.000, 111500.000) = 2 
    [111500.000, 112000.000) = 1 
    [112000.000, 112500.000) = 1 
    [112500.000, 113000.000) = 2 
    [113000.000, 113500.000) = 0 
    [113500.000, 114000.000) = 1 
    [114000.000, 114500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 110493.857 us/op
     p(50.0000) = 111059.485 us/op
     p(90.0000) = 113910.958 us/op
     p(95.0000) = 114375.176 us/op
     p(99.0000) = 114375.176 us/op
     p(99.9000) = 114375.176 us/op
     p(99.9900) = 114375.176 us/op
     p(99.9990) = 114375.176 us/op
     p(99.9999) = 114375.176 us/op
    p(100.0000) = 114375.176 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 676678.304 us/op
# Warmup Iteration   2: 640085.015 us/op
# Warmup Iteration   3: 637025.131 us/op
# Warmup Iteration   4: 656403.083 us/op
# Warmup Iteration   5: 656121.793 us/op
Iteration   1: 662575.183 us/op
Iteration   2: 656101.945 us/op
Iteration   3: 665002.473 us/op
Iteration   4: 646338.271 us/op
Iteration   5: 672982.304 us/op
Iteration   6: 644376.940 us/op
Iteration   7: 663198.994 us/op
Iteration   8: 666239.751 us/op
Iteration   9: 642655.461 us/op
Iteration  10: 637203.531 us/op
Iteration  11: 660843.042 us/op
Iteration  12: 645409.989 us/op
Iteration  13: 646076.344 us/op
Iteration  14: 644996.405 us/op
Iteration  15: 658692.328 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  N = 15
  mean = 654179.531 ±(99.9%) 11577.387 us/op

  Histogram, us/op:
    [630000.000, 635000.000) = 0 
    [635000.000, 640000.000) = 1 
    [640000.000, 645000.000) = 3 
    [645000.000, 650000.000) = 3 
    [650000.000, 655000.000) = 0 
    [655000.000, 660000.000) = 2 
    [660000.000, 665000.000) = 3 
    [665000.000, 670000.000) = 2 
    [670000.000, 675000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 637203.531 us/op
     p(50.0000) = 656101.945 us/op
     p(90.0000) = 668936.772 us/op
     p(95.0000) = 672982.304 us/op
     p(99.0000) = 672982.304 us/op
     p(99.9000) = 672982.304 us/op
     p(99.9900) = 672982.304 us/op
     p(99.9990) = 672982.304 us/op
     p(99.9999) = 672982.304 us/op
    p(100.0000) = 672982.304 us/op


# Run complete. Total time: 08:28:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                    (iterations)  (length)     (size)    Mode      Cnt         Score       Error   Units
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024   thrpt       15        ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240   thrpt       15        ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400   thrpt       15        ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760   thrpt       15        ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600   thrpt       15        ≈ 10⁻⁶              ops/us
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A   thrpt       15         0.003 ±     0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A   thrpt       15         0.006 ±     0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A   thrpt       15         0.003 ±     0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A   thrpt       15         0.006 ±     0.001  ops/us
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁶              ops/us
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A   thrpt       15        ≈ 10⁻⁶              ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A   thrpt       15         0.542 ±     0.001  ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A   thrpt       15         0.203 ±     0.001  ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A   thrpt       15         0.113 ±     0.001  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10   thrpt       15        25.176 ±     0.211  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100   thrpt       15         2.620 ±     0.014  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000   thrpt       15         0.209 ±     0.002  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10   thrpt       15        22.784 ±     0.211  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100   thrpt       15         2.874 ±     0.049  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000   thrpt       15         0.228 ±     0.003  ops/us
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴              ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A   thrpt       15         0.003 ±     0.001  ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A   thrpt       15        ≈ 10⁻⁴              ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A   thrpt       15        ≈ 10⁻⁷              ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A   thrpt       15         0.001 ±     0.001  ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁶              ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A   thrpt       15         1.899 ±     0.013  ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴              ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴              ops/us
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A   thrpt       15         0.001 ±     0.001  ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A   thrpt       15        ≈ 10⁻⁴              ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A   thrpt       15        ≈ 10⁻⁵              ops/us
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁶              ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024    avgt       15    225709.897 ±  2080.414   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240    avgt       15    225451.304 ±   724.187   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400    avgt       15    208342.435 ±   815.599   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576    avgt       15    243551.949 ±  7099.466   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760    avgt       15    221219.934 ±  4600.795   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600    avgt       15    209244.634 ±  3291.544   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024    avgt       15   1632848.717 ±  6536.000   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240    avgt       15    951780.922 ±  5231.928   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400    avgt       15    640950.392 ±  2094.163   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760    avgt       15    577013.034 ± 12170.091   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600    avgt       15    449859.291 ±  8161.921   us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A    avgt       15       375.980 ±     0.299   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A    avgt       15       165.944 ±     0.875   us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A    avgt       15       203.144 ±     0.107   us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A    avgt       15       171.576 ±     0.985   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A    avgt       15    679701.635 ±  3516.533   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A    avgt       15    138602.442 ±  1286.913   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A    avgt       15   5196620.149 ± 77906.057   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A    avgt       15         1.846 ±     0.001   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A    avgt       15         4.930 ±     0.024   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A    avgt       15         9.199 ±     0.043   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10    avgt       15         0.044 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100    avgt       15         0.382 ±     0.004   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000    avgt       15         4.790 ±     0.063   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10    avgt       15         0.048 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100    avgt       15         0.346 ±     0.002   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000    avgt       15         4.351 ±     0.061   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A    avgt       15     14248.238 ±    14.834   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A    avgt       15       312.596 ±     0.687   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A    avgt       15     31380.632 ±    91.485   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A    avgt       15  11689113.784 ± 25233.538   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A    avgt       15      1882.422 ±     1.542   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A    avgt       15     62143.668 ±    36.109   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A    avgt       15   1704720.629 ±   729.860   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A    avgt       15         0.521 ±     0.001   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A    avgt       15      7417.154 ±     6.209   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A    avgt       15     34144.776 ±  2484.582   us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A    avgt       15     36439.415 ±    76.031   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A    avgt       15     69922.789 ±   540.553   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A    avgt       15     21057.583 ±    72.376   us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A    avgt       15     38602.718 ±  1339.510   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A    avgt       15       677.729 ±     1.552   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A    avgt       15     10793.486 ±    35.924   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A    avgt       15    119225.358 ±  1165.505   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A    avgt       15    800524.415 ±  3906.994   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024  sample      678    223013.788 ±   643.960   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A       1024  sample             210501.632               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A       1024  sample             222298.112               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A       1024  sample             229664.358               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A       1024  sample             231748.403               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A       1024  sample             237874.708               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A       1024  sample             243531.776               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A       1024  sample             243531.776               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A       1024  sample             243531.776               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240  sample      672    226674.981 ±   478.211   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A      10240  sample             221773.824               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A      10240  sample             225705.984               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A      10240  sample             231394.509               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A      10240  sample             233308.160               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A      10240  sample             242029.691               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A      10240  sample             255328.256               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A      10240  sample             255328.256               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A      10240  sample             255328.256               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400  sample      720    209197.466 ±   452.743   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A     102400  sample             203948.032               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A     102400  sample             208404.480               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A     102400  sample             213909.504               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A     102400  sample             216517.837               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A     102400  sample             222505.206               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A     102400  sample             230686.720               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A     102400  sample             230686.720               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A     102400  sample             230686.720               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576  sample      628    241476.367 ±  2028.574   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A    1048576  sample             214433.792               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A    1048576  sample             240648.192               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A    1048576  sample             262406.144               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A    1048576  sample             267386.880               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A    1048576  sample             277720.596               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A    1048576  sample             284164.096               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A    1048576  sample             284164.096               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A    1048576  sample             284164.096               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760  sample      683    221701.283 ±  1490.836   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A   10485760  sample             203948.032               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A   10485760  sample             219152.384               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A   10485760  sample             238551.040               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A   10485760  sample             243217.203               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A   10485760  sample             251479.982               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A   10485760  sample             277348.352               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A   10485760  sample             277348.352               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A   10485760  sample             277348.352               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600  sample      716    211679.816 ±  1313.819   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A  104857600  sample             198180.864               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A  104857600  sample             208666.624               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A  104857600  sample             228065.280               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A  104857600  sample             234396.058               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A  104857600  sample             243487.212               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A  104857600  sample             253231.104               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A  104857600  sample             253231.104               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A  104857600  sample             253231.104               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024  sample      105   1639433.596 ± 18648.272   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A       1024  sample            1472200.704               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A       1024  sample            1658847.232               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A       1024  sample            1686110.208               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A       1024  sample            1691772.518               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A       1024  sample            1706830.070               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A       1024  sample            1707081.728               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A       1024  sample            1707081.728               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A       1024  sample            1707081.728               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240  sample      165    955405.256 ±  5663.128   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A      10240  sample             891289.600               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A      10240  sample             954204.160               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A      10240  sample             982935.142               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A      10240  sample             986710.016               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A      10240  sample            1004640.666               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A      10240  sample            1015021.568               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A      10240  sample            1015021.568               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A      10240  sample            1015021.568               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400  sample      240    636891.955 ±  2833.564   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A     102400  sample             602931.200               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A     102400  sample             636485.632               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A     102400  sample             653262.848               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A     102400  sample             657457.152               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A     102400  sample             670847.468               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A     102400  sample             684720.128               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A     102400  sample             684720.128               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A     102400  sample             684720.128               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760  sample      272    566705.212 ±  8787.557   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A   10485760  sample             497025.024               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A   10485760  sample             563085.312               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A   10485760  sample             627782.451               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A   10485760  sample             638582.784               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A   10485760  sample             661934.572               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A   10485760  sample             665845.760               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A   10485760  sample             665845.760               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A   10485760  sample             665845.760               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600  sample      342    449550.899 ±  4499.362   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A  104857600  sample             419954.688               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A  104857600  sample             438829.056               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A  104857600  sample             491624.858               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A  104857600  sample             503316.480               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A  104857600  sample             519569.408               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A  104857600  sample             522715.136               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A  104857600  sample             522715.136               us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A  104857600  sample             522715.136               us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A  sample   398703       375.781 ±     0.061   us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.00                                                                        N/A       N/A        N/A  sample                370.176               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.50                                                                        N/A       N/A        N/A  sample                374.784               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.90                                                                        N/A       N/A        N/A  sample                384.000               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.95                                                                        N/A       N/A        N/A  sample                388.096               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.99                                                                        N/A       N/A        N/A  sample                409.088               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.999                                                                       N/A       N/A        N/A  sample                472.216               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.9999                                                                      N/A       N/A        N/A  sample                606.341               us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p1.00                                                                        N/A       N/A        N/A  sample               3153.920               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A  sample   902765       165.863 ±     0.033   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.00                                                        N/A       N/A        N/A  sample                157.696               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.50                                                        N/A       N/A        N/A  sample                163.840               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.90                                                        N/A       N/A        N/A  sample                171.520               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.95                                                        N/A       N/A        N/A  sample                175.872               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.99                                                        N/A       N/A        N/A  sample                189.184               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.999                                                       N/A       N/A        N/A  sample                260.096               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.9999                                                      N/A       N/A        N/A  sample                364.402               us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p1.00                                                        N/A       N/A        N/A  sample               3575.808               us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A  sample   486706       307.889 ±     0.031   us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.00                                                                        N/A       N/A        N/A  sample                298.496               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.50                                                                        N/A       N/A        N/A  sample                306.176               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.90                                                                        N/A       N/A        N/A  sample                312.320               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.95                                                                        N/A       N/A        N/A  sample                314.880               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.99                                                                        N/A       N/A        N/A  sample                331.776               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.999                                                                       N/A       N/A        N/A  sample                370.326               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.9999                                                                      N/A       N/A        N/A  sample                491.339               us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p1.00                                                                        N/A       N/A        N/A  sample                847.872               us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A  sample   871643       171.794 ±     0.031   us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.00                                                                      N/A       N/A        N/A  sample                162.048               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.50                                                                      N/A       N/A        N/A  sample                169.984               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.90                                                                      N/A       N/A        N/A  sample                178.432               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.95                                                                      N/A       N/A        N/A  sample                182.016               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.99                                                                      N/A       N/A        N/A  sample                193.024               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.999                                                                     N/A       N/A        N/A  sample                259.163               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.9999                                                                    N/A       N/A        N/A  sample                374.700               us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p1.00                                                                      N/A       N/A        N/A  sample               2912.256               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A  sample      150   1094699.363 ±  1227.094   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.00                                          N/A       N/A        N/A  sample            1082130.432               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.50                                          N/A       N/A        N/A  sample            1094713.344               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.90                                          N/A       N/A        N/A  sample            1098907.648               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.95                                          N/A       N/A        N/A  sample            1101948.518               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.99                                          N/A       N/A        N/A  sample            1106226.708               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.999                                         N/A       N/A        N/A  sample            1107296.256               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.9999                                        N/A       N/A        N/A  sample            1107296.256               us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p1.00                                          N/A       N/A        N/A  sample            1107296.256               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A  sample     1033    145867.022 ±   385.093   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.00                                  N/A       100        N/A  sample             139198.464               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.50                                  N/A       100        N/A  sample             145752.064               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.90                                  N/A       100        N/A  sample             150732.800               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.95                                  N/A       100        N/A  sample             151781.376               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.99                                  N/A       100        N/A  sample             156059.566               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.999                                 N/A       100        N/A  sample             173885.358               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.9999                                N/A       100        N/A  sample             174063.616               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p1.00                                  N/A       100        N/A  sample             174063.616               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A  sample       45   4020007.367 ± 14406.596   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.00                                  N/A      1000        N/A  sample            3963617.280               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.50                                  N/A      1000        N/A  sample            4018143.232               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.90                                  N/A      1000        N/A  sample            4063441.715               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.95                                  N/A      1000        N/A  sample            4071410.893               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.99                                  N/A      1000        N/A  sample            4089446.400               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.999                                 N/A      1000        N/A  sample            4089446.400               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.9999                                N/A      1000        N/A  sample            4089446.400               us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p1.00                                  N/A      1000        N/A  sample            4089446.400               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A  sample  5021966         1.896 ±     0.002   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                                521       N/A        N/A  sample                  1.846               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                                521       N/A        N/A  sample                  1.864               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                                521       N/A        N/A  sample                  1.878               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                                521       N/A        N/A  sample                  1.880               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                                521       N/A        N/A  sample                  1.924               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                               521       N/A        N/A  sample                  9.568               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                              521       N/A        N/A  sample                 29.594               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                                521       N/A        N/A  sample               2207.744               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A  sample  3779762         4.980 ±     0.002   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                               1153       N/A        N/A  sample                  4.760               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                               1153       N/A        N/A  sample                  4.912               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                               1153       N/A        N/A  sample                  4.968               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                               1153       N/A        N/A  sample                  4.984               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                               1153       N/A        N/A  sample                  5.616               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                              1153       N/A        N/A  sample                 15.936               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                             1153       N/A        N/A  sample                 49.984               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                               1153       N/A        N/A  sample                456.192               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A  sample  4213826         8.891 ±     0.003   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                               2021       N/A        N/A  sample                  8.448               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                               2021       N/A        N/A  sample                  8.784               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                               2021       N/A        N/A  sample                  8.880               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                               2021       N/A        N/A  sample                  8.928               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                               2021       N/A        N/A  sample                 12.864               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                              2021       N/A        N/A  sample                 21.574               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                             2021       N/A        N/A  sample                 57.960               us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                               2021       N/A        N/A  sample               2818.048               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10  sample  5101793         0.094 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A         10  sample                  0.072               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A         10  sample                  0.089               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A         10  sample                  0.106               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A         10  sample                  0.108               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A         10  sample                  0.111               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A         10  sample                  0.182               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A         10  sample                  7.991               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A         10  sample                158.208               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100  sample  3244209         0.410 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A        100  sample                  0.370               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A        100  sample                  0.392               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A        100  sample                  0.408               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A        100  sample                  0.413               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A        100  sample                  0.421               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A        100  sample                  4.792               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A        100  sample                 17.482               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A        100  sample                488.448               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000  sample  4161121         4.532 ±     0.003   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A       1000  sample                  4.328               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A       1000  sample                  4.472               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A       1000  sample                  4.536               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A       1000  sample                  4.568               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A       1000  sample                  4.872               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A       1000  sample                 14.016               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A       1000  sample                 46.656               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A       1000  sample               2752.512               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10  sample  5267306         0.092 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A         10  sample                  0.072               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A         10  sample                  0.089               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A         10  sample                  0.099               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A         10  sample                  0.100               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A         10  sample                  0.107               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A         10  sample                  0.177               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A         10  sample                  7.896               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A         10  sample                167.680               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100  sample  4998520         0.511 ±     0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A        100  sample                  0.475               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A        100  sample                  0.496               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A        100  sample                  0.511               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A        100  sample                  0.513               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A        100  sample                  0.520               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A        100  sample                  4.328               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A        100  sample                 12.994               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A        100  sample                247.296               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000  sample  4548356         4.148 ±     0.003   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A       1000  sample                  3.920               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A       1000  sample                  4.104               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A       1000  sample                  4.160               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A       1000  sample                  4.176               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A       1000  sample                  4.384               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A       1000  sample                 13.424               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A       1000  sample                 43.712               us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A       1000  sample               2863.104               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A  sample    10493     14297.692 ±     2.479   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.00                                  N/A       N/A        N/A  sample              14204.928               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.50                                  N/A       N/A        N/A  sample              14286.848               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.90                                  N/A       N/A        N/A  sample              14368.768               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.95                                  N/A       N/A        N/A  sample              14417.920               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.99                                  N/A       N/A        N/A  sample              14565.376               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.999                                 N/A       N/A        N/A  sample              14843.904               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.9999                                N/A       N/A        N/A  sample              17131.189               us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p1.00                                  N/A       N/A        N/A  sample              17137.664               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A  sample   478631       312.999 ±     0.809   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A       100        N/A  sample                295.424               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A       100        N/A  sample                306.176               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A       100        N/A  sample                319.488               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A       100        N/A  sample                324.608               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A       100        N/A  sample                351.232               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A       100        N/A  sample                733.290               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A       100        N/A  sample               9528.069               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A       100        N/A  sample              23035.904               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A  sample     4792     31323.965 ±    88.434   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A      1000        N/A  sample              30507.008               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A      1000        N/A  sample              30801.920               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A      1000        N/A  sample              31555.584               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A      1000        N/A  sample              34668.544               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A      1000        N/A  sample              41156.608               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A      1000        N/A  sample              46444.773               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A      1000        N/A  sample              52625.408               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A      1000        N/A  sample              52625.408               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A  sample       15  11531539.797 ± 19957.184   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A     10000        N/A  sample           11492392.960               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A     10000        N/A  sample           11525947.392               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A     10000        N/A  sample           11559501.824               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A     10000        N/A  sample           11559501.824               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A     10000        N/A  sample           11559501.824               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A     10000        N/A  sample           11559501.824               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A     10000        N/A  sample           11559501.824               us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A     10000        N/A  sample           11559501.824               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A  sample    71917      2084.126 ±     2.305   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.00             N/A       N/A        N/A  sample               1859.584               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.50             N/A       N/A        N/A  sample               2236.416               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.90             N/A       N/A        N/A  sample               2260.992               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.95             N/A       N/A        N/A  sample               2273.280               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.99             N/A       N/A        N/A  sample               2318.336               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.999            N/A       N/A        N/A  sample               2453.504               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.9999           N/A       N/A        N/A  sample               2809.070               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p1.00             N/A       N/A        N/A  sample               5021.696               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A  sample     2421     62098.730 ±    14.815   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.00                     N/A       N/A        N/A  sample              60096.512               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.50                     N/A       N/A        N/A  sample              62128.128               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.90                     N/A       N/A        N/A  sample              62324.736               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.95                     N/A       N/A        N/A  sample              62390.272               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.99                     N/A       N/A        N/A  sample              62652.416               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.999                    N/A       N/A        N/A  sample              63017.976               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.9999                   N/A       N/A        N/A  sample              64552.960               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p1.00                     N/A       N/A        N/A  sample              64552.960               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A  sample       90   1703936.000 ±   577.809   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.00                                                 N/A       N/A        N/A  sample            1700790.272               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.50                                                 N/A       N/A        N/A  sample            1702887.424               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.90                                                 N/A       N/A        N/A  sample            1704984.576               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.95                                                 N/A       N/A        N/A  sample            1707081.728               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.99                                                 N/A       N/A        N/A  sample            1709178.880               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.999                                                N/A       N/A        N/A  sample            1709178.880               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.9999                                               N/A       N/A        N/A  sample            1709178.880               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p1.00                                                 N/A       N/A        N/A  sample            1709178.880               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A  sample  4464865         0.575 ±     0.001   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.00                       N/A       N/A        N/A  sample                  0.493               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.50                       N/A       N/A        N/A  sample                  0.554               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.90                       N/A       N/A        N/A  sample                  0.573               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.95                       N/A       N/A        N/A  sample                  0.581               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.99                       N/A       N/A        N/A  sample                  0.872               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.999                      N/A       N/A        N/A  sample                  4.864               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.9999                     N/A       N/A        N/A  sample                 15.184               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p1.00                       N/A       N/A        N/A  sample                515.072               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A  sample    20229      7414.034 ±     1.106   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.00                                   N/A       N/A        N/A  sample               7225.344               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.50                                   N/A       N/A        N/A  sample               7405.568               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.90                                   N/A       N/A        N/A  sample               7446.528               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.95                                   N/A       N/A        N/A  sample               7471.104               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.99                                   N/A       N/A        N/A  sample               7569.408               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.999                                  N/A       N/A        N/A  sample               7854.244               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.9999                                 N/A       N/A        N/A  sample              10145.628               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p1.00                                   N/A       N/A        N/A  sample              10272.768               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A  sample     4294     34964.486 ±   107.886   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.00                                             N/A       N/A        N/A  sample              30998.528               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.50                                             N/A       N/A        N/A  sample              34865.152               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.90                                             N/A       N/A        N/A  sample              37289.984               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.95                                             N/A       N/A        N/A  sample              38535.168               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.99                                             N/A       N/A        N/A  sample              38800.589               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.999                                            N/A       N/A        N/A  sample              64748.585               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.9999                                           N/A       N/A        N/A  sample              71565.312               us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p1.00                                             N/A       N/A        N/A  sample              71565.312               us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A  sample     4144     36219.821 ±   363.237   us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.00                                                              N/A       N/A        N/A  sample              34734.080               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.50                                                              N/A       N/A        N/A  sample              35061.760               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.90                                                              N/A       N/A        N/A  sample              35258.368               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.95                                                              N/A       N/A        N/A  sample              35520.512               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.99                                                              N/A       N/A        N/A  sample              79894.938               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.999                                                             N/A       N/A        N/A  sample              90059.571               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.9999                                                            N/A       N/A        N/A  sample              91095.040               us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p1.00                                                              N/A       N/A        N/A  sample              91095.040               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A  sample     2164     70182.227 ±  5814.862   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.00                                                            N/A       N/A        N/A  sample              25657.344               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.50                                                            N/A       N/A        N/A  sample              25952.256               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.90                                                            N/A       N/A        N/A  sample             223870.976               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.95                                                            N/A       N/A        N/A  sample             235274.240               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.99                                                            N/A       N/A        N/A  sample             255157.862               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.999                                                           N/A       N/A        N/A  sample             265946.399               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.9999                                                          N/A       N/A        N/A  sample             273154.048               us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p1.00                                                            N/A       N/A        N/A  sample             273154.048               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A  sample     7143     20998.145 ±   175.426   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.00                                                                N/A       N/A        N/A  sample              18939.904               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.50                                                                N/A       N/A        N/A  sample              20381.696               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.90                                                                N/A       N/A        N/A  sample              20611.072               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.95                                                                N/A       N/A        N/A  sample              20938.752               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.99                                                                N/A       N/A        N/A  sample              53120.860               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.999                                                               N/A       N/A        N/A  sample              64345.866               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.9999                                                              N/A       N/A        N/A  sample              67502.080               us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p1.00                                                                N/A       N/A        N/A  sample              67502.080               us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A  sample     3897     38542.282 ±   220.979   us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.00                                                                      N/A       N/A        N/A  sample              36700.160               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.50                                                                      N/A       N/A        N/A  sample              37945.344               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.90                                                                      N/A       N/A        N/A  sample              38731.776               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.95                                                                      N/A       N/A        N/A  sample              38993.920               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.99                                                                      N/A       N/A        N/A  sample              68157.440               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.999                                                                     N/A       N/A        N/A  sample              76599.525               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.9999                                                                    N/A       N/A        N/A  sample              83230.720               us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p1.00                                                                      N/A       N/A        N/A  sample              83230.720               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A  sample   221602       676.213 ±     2.456   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A        10        N/A  sample                599.040               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A        10        N/A  sample                655.360               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A        10        N/A  sample                683.008               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A        10        N/A  sample                693.248               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A        10        N/A  sample                722.944               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A        10        N/A  sample               6430.597               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A        10        N/A  sample              13456.394               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A        10        N/A  sample              25264.128               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A  sample    13970     10732.767 ±    29.610   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A       100        N/A  sample              10141.696               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A       100        N/A  sample              10551.296               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A       100        N/A  sample              10764.288               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A       100        N/A  sample              10911.744               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A       100        N/A  sample              15770.911               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A       100        N/A  sample              21470.642               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A       100        N/A  sample              33946.806               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A       100        N/A  sample              37421.056               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A  sample     1264    119232.071 ±   902.194   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A      1000        N/A  sample             109182.976               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A      1000        N/A  sample             117047.296               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A      1000        N/A  sample             133038.080               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A      1000        N/A  sample             137560.064               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A      1000        N/A  sample             145227.776               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A      1000        N/A  sample             162343.158               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A      1000        N/A  sample             163315.712               us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A      1000        N/A  sample             163315.712               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A  sample      195    794207.594 ± 10456.871   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.00                        N/A       N/A        N/A  sample             627048.448               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.50                        N/A       N/A        N/A  sample             803209.216               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.90                        N/A       N/A        N/A  sample             824180.736               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.95                        N/A       N/A        N/A  sample             835295.642               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.99                        N/A       N/A        N/A  sample             853750.579               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.999                       N/A       N/A        N/A  sample             858783.744               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.9999                      N/A       N/A        N/A  sample             858783.744               us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p1.00                        N/A       N/A        N/A  sample             858783.744               us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024      ss       15    226667.593 ±  4132.013   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240      ss       15    225682.106 ±  1617.972   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400      ss       15    208541.887 ±  3229.006   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576      ss       15    229228.652 ±  7108.369   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760      ss       15    212689.472 ±  7584.085   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600      ss       15    206784.561 ±  4526.070   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024      ss       15   1397131.181 ± 13548.623   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240      ss       15    905320.995 ± 13002.980   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400      ss       15    615916.170 ±  8438.582   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760      ss       15    594810.861 ± 31550.767   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600      ss       15    457655.024 ± 13005.372   us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A      ss       15       452.305 ±    25.820   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A      ss       15       240.816 ±    24.689   us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A      ss       15       326.613 ±    10.286   us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A      ss       15       291.347 ±    47.322   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A      ss       15   1219874.633 ±  4737.035   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A      ss       15    135019.023 ±  1564.386   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A      ss       15   2925460.116 ± 30711.981   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A      ss       15        13.135 ±     1.178   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A      ss       15        17.412 ±    11.226   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A      ss       15        23.825 ±    16.063   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10      ss       15         7.681 ±     3.208   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100      ss       15        17.305 ±     6.052   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000      ss       15        93.461 ±     8.239   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10      ss       15         7.791 ±     1.470   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100      ss       15        21.060 ±    10.696   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000      ss       15        99.771 ±    28.125   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A      ss       15     14535.704 ±   331.502   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A      ss       15      2209.061 ±  2281.152   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A      ss       15     67196.419 ± 39029.638   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A      ss       15  10630884.079 ± 28399.307   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A      ss       15      1912.024 ±    96.407   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A      ss       15     62149.390 ±   279.765   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A      ss       15   1703941.954 ±  1020.621   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A      ss       15        19.841 ±    19.899   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A      ss       15      7334.818 ±   108.319   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A      ss       15     35533.479 ±  3079.718   us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A      ss       15     35452.355 ±   185.795   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A      ss       15     26468.052 ±   795.952   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A      ss       15     21821.528 ±  1413.902   us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A      ss       15     38179.147 ±  1808.691   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A      ss       15       972.930 ±   308.127   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A      ss       15     10844.949 ±   158.716   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A      ss       15    111646.076 ±  1283.115   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A      ss       15    654179.531 ± 11577.387   us/op
