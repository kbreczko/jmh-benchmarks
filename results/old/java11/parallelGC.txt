# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 0.00% complete, ETA 07:40:00
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 0.72% complete, ETA 08:20:46
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 1.45% complete, ETA 08:15:07
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 2.17% complete, ETA 08:10:08
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 2.90% complete, ETA 08:05:27
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 3.62% complete, ETA 08:01:11
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 4.35% complete, ETA 07:57:02
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 5.07% complete, ETA 07:58:46
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 5.80% complete, ETA 07:55:18
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 6.52% complete, ETA 07:54:18
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 7.25% complete, ETA 07:51:32
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 7.97% complete, ETA 07:47:34
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 8.70% complete, ETA 07:43:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ops/us
# Warmup Iteration   2: 0.003 ops/us
# Warmup Iteration   3: 0.003 ops/us
# Warmup Iteration   4: 0.003 ops/us
# Warmup Iteration   5: 0.003 ops/us
Iteration   1: 0.003 ops/us
Iteration   2: 0.003 ops/us
Iteration   3: 0.003 ops/us
Iteration   4: 0.003 ops/us
Iteration   5: 0.003 ops/us
Iteration   6: 0.003 ops/us
Iteration   7: 0.003 ops/us
Iteration   8: 0.003 ops/us
Iteration   9: 0.003 ops/us
Iteration  10: 0.003 ops/us
Iteration  11: 0.003 ops/us
Iteration  12: 0.003 ops/us
Iteration  13: 0.003 ops/us
Iteration  14: 0.003 ops/us
Iteration  15: 0.003 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  0.003 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 9.42% complete, ETA 07:39:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ops/us
# Warmup Iteration   2: 0.006 ops/us
# Warmup Iteration   3: 0.006 ops/us
# Warmup Iteration   4: 0.006 ops/us
# Warmup Iteration   5: 0.006 ops/us
Iteration   1: 0.006 ops/us
Iteration   2: 0.006 ops/us
Iteration   3: 0.006 ops/us
Iteration   4: 0.006 ops/us
Iteration   5: 0.006 ops/us
Iteration   6: 0.006 ops/us
Iteration   7: 0.006 ops/us
Iteration   8: 0.006 ops/us
Iteration   9: 0.006 ops/us
Iteration  10: 0.006 ops/us
Iteration  11: 0.006 ops/us
Iteration  12: 0.006 ops/us
Iteration  13: 0.006 ops/us
Iteration  14: 0.006 ops/us
Iteration  15: 0.006 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  0.006 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.006] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 10.14% complete, ETA 07:34:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ops/us
# Warmup Iteration   2: 0.003 ops/us
# Warmup Iteration   3: 0.003 ops/us
# Warmup Iteration   4: 0.003 ops/us
# Warmup Iteration   5: 0.004 ops/us
Iteration   1: 0.004 ops/us
Iteration   2: 0.004 ops/us
Iteration   3: 0.004 ops/us
Iteration   4: 0.004 ops/us
Iteration   5: 0.004 ops/us
Iteration   6: 0.004 ops/us
Iteration   7: 0.004 ops/us
Iteration   8: 0.004 ops/us
Iteration   9: 0.004 ops/us
Iteration  10: 0.004 ops/us
Iteration  11: 0.004 ops/us
Iteration  12: 0.004 ops/us
Iteration  13: 0.004 ops/us
Iteration  14: 0.004 ops/us
Iteration  15: 0.004 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  0.004 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.004, 0.004] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 10.87% complete, ETA 07:30:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ops/us
# Warmup Iteration   2: 0.006 ops/us
# Warmup Iteration   3: 0.006 ops/us
# Warmup Iteration   4: 0.006 ops/us
# Warmup Iteration   5: 0.006 ops/us
Iteration   1: 0.006 ops/us
Iteration   2: 0.006 ops/us
Iteration   3: 0.006 ops/us
Iteration   4: 0.006 ops/us
Iteration   5: 0.006 ops/us
Iteration   6: 0.006 ops/us
Iteration   7: 0.006 ops/us
Iteration   8: 0.006 ops/us
Iteration   9: 0.006 ops/us
Iteration  10: 0.006 ops/us
Iteration  11: 0.006 ops/us
Iteration  12: 0.006 ops/us
Iteration  13: 0.006 ops/us
Iteration  14: 0.006 ops/us
Iteration  15: 0.006 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  0.006 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.006] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 11.59% complete, ETA 07:25:55
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 12.32% complete, ETA 07:22:41
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 13.04% complete, ETA 07:18:37
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁷ ops/us
# Warmup Iteration   3: ≈ 10⁻⁷ ops/us
# Warmup Iteration   4: ≈ 10⁻⁷ ops/us
# Warmup Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   1: ≈ 10⁻⁷ ops/us
Iteration   2: ≈ 10⁻⁷ ops/us
Iteration   3: ≈ 10⁻⁷ ops/us
Iteration   4: ≈ 10⁻⁷ ops/us
Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   6: ≈ 10⁻⁷ ops/us
Iteration   7: ≈ 10⁻⁷ ops/us
Iteration   8: ≈ 10⁻⁷ ops/us
Iteration   9: ≈ 10⁻⁷ ops/us
Iteration  10: ≈ 10⁻⁷ ops/us
Iteration  11: ≈ 10⁻⁷ ops/us
Iteration  12: ≈ 10⁻⁷ ops/us
Iteration  13: ≈ 10⁻⁷ ops/us
Iteration  14: ≈ 10⁻⁷ ops/us
Iteration  15: ≈ 10⁻⁷ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  ≈ 10⁻⁷ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 13.77% complete, ETA 07:15:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.540 ops/us
# Warmup Iteration   2: 0.541 ops/us
# Warmup Iteration   3: 0.541 ops/us
# Warmup Iteration   4: 0.541 ops/us
# Warmup Iteration   5: 0.541 ops/us
Iteration   1: 0.542 ops/us
Iteration   2: 0.541 ops/us
Iteration   3: 0.542 ops/us
Iteration   4: 0.542 ops/us
Iteration   5: 0.542 ops/us
Iteration   6: 0.542 ops/us
Iteration   7: 0.542 ops/us
Iteration   8: 0.541 ops/us
Iteration   9: 0.542 ops/us
Iteration  10: 0.542 ops/us
Iteration  11: 0.542 ops/us
Iteration  12: 0.542 ops/us
Iteration  13: 0.542 ops/us
Iteration  14: 0.542 ops/us
Iteration  15: 0.542 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.542 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.541, 0.542, 0.542), stdev = 0.001
  CI (99.9%): [0.541, 0.542] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 14.49% complete, ETA 07:10:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.196 ops/us
# Warmup Iteration   2: 0.196 ops/us
# Warmup Iteration   3: 0.196 ops/us
# Warmup Iteration   4: 0.197 ops/us
# Warmup Iteration   5: 0.196 ops/us
Iteration   1: 0.197 ops/us
Iteration   2: 0.196 ops/us
Iteration   3: 0.196 ops/us
Iteration   4: 0.196 ops/us
Iteration   5: 0.197 ops/us
Iteration   6: 0.197 ops/us
Iteration   7: 0.197 ops/us
Iteration   8: 0.196 ops/us
Iteration   9: 0.196 ops/us
Iteration  10: 0.197 ops/us
Iteration  11: 0.197 ops/us
Iteration  12: 0.196 ops/us
Iteration  13: 0.197 ops/us
Iteration  14: 0.196 ops/us
Iteration  15: 0.196 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.196 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.196, 0.196, 0.197), stdev = 0.001
  CI (99.9%): [0.196, 0.197] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 15.22% complete, ETA 07:06:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.113 ops/us
# Warmup Iteration   2: 0.113 ops/us
# Warmup Iteration   3: 0.113 ops/us
# Warmup Iteration   4: 0.113 ops/us
# Warmup Iteration   5: 0.113 ops/us
Iteration   1: 0.114 ops/us
Iteration   2: 0.114 ops/us
Iteration   3: 0.113 ops/us
Iteration   4: 0.114 ops/us
Iteration   5: 0.113 ops/us
Iteration   6: 0.114 ops/us
Iteration   7: 0.113 ops/us
Iteration   8: 0.113 ops/us
Iteration   9: 0.113 ops/us
Iteration  10: 0.113 ops/us
Iteration  11: 0.113 ops/us
Iteration  12: 0.113 ops/us
Iteration  13: 0.113 ops/us
Iteration  14: 0.113 ops/us
Iteration  15: 0.113 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.113 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.113, 0.113, 0.114), stdev = 0.001
  CI (99.9%): [0.113, 0.114] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 15.94% complete, ETA 07:02:44
# Fork: 1 of 1
# Warmup Iteration   1: 23.233 ops/us
# Warmup Iteration   2: 23.258 ops/us
# Warmup Iteration   3: 19.971 ops/us
# Warmup Iteration   4: 19.968 ops/us
# Warmup Iteration   5: 19.970 ops/us
Iteration   1: 19.969 ops/us
Iteration   2: 19.973 ops/us
Iteration   3: 19.931 ops/us
Iteration   4: 19.467 ops/us
Iteration   5: 19.955 ops/us
Iteration   6: 19.964 ops/us
Iteration   7: 19.952 ops/us
Iteration   8: 19.975 ops/us
Iteration   9: 19.960 ops/us
Iteration  10: 19.971 ops/us
Iteration  11: 19.963 ops/us
Iteration  12: 19.969 ops/us
Iteration  13: 19.939 ops/us
Iteration  14: 19.969 ops/us
Iteration  15: 19.968 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  19.928 ±(99.9%) 0.137 ops/us [Average]
  (min, avg, max) = (19.467, 19.928, 19.975), stdev = 0.128
  CI (99.9%): [19.791, 20.066] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 16.67% complete, ETA 06:58:44
# Fork: 1 of 1
# Warmup Iteration   1: 2.622 ops/us
# Warmup Iteration   2: 2.616 ops/us
# Warmup Iteration   3: 2.335 ops/us
# Warmup Iteration   4: 2.350 ops/us
# Warmup Iteration   5: 2.396 ops/us
Iteration   1: 2.348 ops/us
Iteration   2: 2.352 ops/us
Iteration   3: 2.323 ops/us
Iteration   4: 2.388 ops/us
Iteration   5: 2.392 ops/us
Iteration   6: 2.394 ops/us
Iteration   7: 2.350 ops/us
Iteration   8: 2.369 ops/us
Iteration   9: 2.397 ops/us
Iteration  10: 2.391 ops/us
Iteration  11: 2.384 ops/us
Iteration  12: 2.351 ops/us
Iteration  13: 2.390 ops/us
Iteration  14: 2.387 ops/us
Iteration  15: 2.392 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  2.374 ±(99.9%) 0.025 ops/us [Average]
  (min, avg, max) = (2.323, 2.374, 2.397), stdev = 0.023
  CI (99.9%): [2.349, 2.399] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 17.39% complete, ETA 06:54:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.245 ops/us
# Warmup Iteration   2: 0.227 ops/us
# Warmup Iteration   3: 0.211 ops/us
# Warmup Iteration   4: 0.215 ops/us
# Warmup Iteration   5: 0.212 ops/us
Iteration   1: 0.208 ops/us
Iteration   2: 0.216 ops/us
Iteration   3: 0.210 ops/us
Iteration   4: 0.208 ops/us
Iteration   5: 0.211 ops/us
Iteration   6: 0.206 ops/us
Iteration   7: 0.213 ops/us
Iteration   8: 0.210 ops/us
Iteration   9: 0.211 ops/us
Iteration  10: 0.217 ops/us
Iteration  11: 0.214 ops/us
Iteration  12: 0.210 ops/us
Iteration  13: 0.211 ops/us
Iteration  14: 0.207 ops/us
Iteration  15: 0.204 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.210 ±(99.9%) 0.004 ops/us [Average]
  (min, avg, max) = (0.204, 0.210, 0.217), stdev = 0.004
  CI (99.9%): [0.206, 0.214] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 18.12% complete, ETA 06:50:50
# Fork: 1 of 1
# Warmup Iteration   1: 20.232 ops/us
# Warmup Iteration   2: 22.460 ops/us
# Warmup Iteration   3: 21.417 ops/us
# Warmup Iteration   4: 21.407 ops/us
# Warmup Iteration   5: 21.403 ops/us
Iteration   1: 21.404 ops/us
Iteration   2: 21.388 ops/us
Iteration   3: 21.040 ops/us
Iteration   4: 21.403 ops/us
Iteration   5: 21.401 ops/us
Iteration   6: 21.397 ops/us
Iteration   7: 21.392 ops/us
Iteration   8: 21.387 ops/us
Iteration   9: 21.408 ops/us
Iteration  10: 21.044 ops/us
Iteration  11: 21.399 ops/us
Iteration  12: 21.408 ops/us
Iteration  13: 21.401 ops/us
Iteration  14: 21.399 ops/us
Iteration  15: 21.404 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  21.352 ±(99.9%) 0.135 ops/us [Average]
  (min, avg, max) = (21.040, 21.352, 21.408), stdev = 0.126
  CI (99.9%): [21.217, 21.486] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 18.84% complete, ETA 06:46:55
# Fork: 1 of 1
# Warmup Iteration   1: 2.197 ops/us
# Warmup Iteration   2: 2.615 ops/us
# Warmup Iteration   3: 2.618 ops/us
# Warmup Iteration   4: 2.625 ops/us
# Warmup Iteration   5: 2.607 ops/us
Iteration   1: 2.565 ops/us
Iteration   2: 2.617 ops/us
Iteration   3: 2.546 ops/us
Iteration   4: 2.532 ops/us
Iteration   5: 2.618 ops/us
Iteration   6: 2.624 ops/us
Iteration   7: 2.559 ops/us
Iteration   8: 2.617 ops/us
Iteration   9: 2.602 ops/us
Iteration  10: 2.617 ops/us
Iteration  11: 2.624 ops/us
Iteration  12: 2.610 ops/us
Iteration  13: 2.584 ops/us
Iteration  14: 2.600 ops/us
Iteration  15: 2.624 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  2.596 ±(99.9%) 0.033 ops/us [Average]
  (min, avg, max) = (2.532, 2.596, 2.624), stdev = 0.031
  CI (99.9%): [2.563, 2.629] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 19.56% complete, ETA 06:43:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.276 ops/us
# Warmup Iteration   2: 0.255 ops/us
# Warmup Iteration   3: 0.229 ops/us
# Warmup Iteration   4: 0.224 ops/us
# Warmup Iteration   5: 0.226 ops/us
Iteration   1: 0.229 ops/us
Iteration   2: 0.231 ops/us
Iteration   3: 0.230 ops/us
Iteration   4: 0.230 ops/us
Iteration   5: 0.231 ops/us
Iteration   6: 0.231 ops/us
Iteration   7: 0.231 ops/us
Iteration   8: 0.227 ops/us
Iteration   9: 0.230 ops/us
Iteration  10: 0.234 ops/us
Iteration  11: 0.230 ops/us
Iteration  12: 0.227 ops/us
Iteration  13: 0.233 ops/us
Iteration  14: 0.227 ops/us
Iteration  15: 0.229 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.230 ±(99.9%) 0.002 ops/us [Average]
  (min, avg, max) = (0.227, 0.230, 0.234), stdev = 0.002
  CI (99.9%): [0.228, 0.232] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 20.29% complete, ETA 06:39:11
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 21.01% complete, ETA 06:35:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ops/us
# Warmup Iteration   2: 0.003 ops/us
# Warmup Iteration   3: 0.003 ops/us
# Warmup Iteration   4: 0.003 ops/us
# Warmup Iteration   5: 0.003 ops/us
Iteration   1: 0.003 ops/us
Iteration   2: 0.003 ops/us
Iteration   3: 0.003 ops/us
Iteration   4: 0.003 ops/us
Iteration   5: 0.003 ops/us
Iteration   6: 0.003 ops/us
Iteration   7: 0.003 ops/us
Iteration   8: 0.003 ops/us
Iteration   9: 0.003 ops/us
Iteration  10: 0.003 ops/us
Iteration  11: 0.003 ops/us
Iteration  12: 0.003 ops/us
Iteration  13: 0.003 ops/us
Iteration  14: 0.003 ops/us
Iteration  15: 0.003 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  0.003 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 21.74% complete, ETA 06:31:32
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 22.46% complete, ETA 06:27:44
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁷ ops/us
# Warmup Iteration   2: ≈ 10⁻⁷ ops/us
# Warmup Iteration   3: ≈ 10⁻⁷ ops/us
# Warmup Iteration   4: ≈ 10⁻⁷ ops/us
# Warmup Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   1: ≈ 10⁻⁷ ops/us
Iteration   2: ≈ 10⁻⁷ ops/us
Iteration   3: ≈ 10⁻⁷ ops/us
Iteration   4: ≈ 10⁻⁷ ops/us
Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   6: ≈ 10⁻⁷ ops/us
Iteration   7: ≈ 10⁻⁷ ops/us
Iteration   8: ≈ 10⁻⁷ ops/us
Iteration   9: ≈ 10⁻⁷ ops/us
Iteration  10: ≈ 10⁻⁷ ops/us
Iteration  11: ≈ 10⁻⁷ ops/us
Iteration  12: ≈ 10⁻⁷ ops/us
Iteration  13: ≈ 10⁻⁷ ops/us
Iteration  14: ≈ 10⁻⁷ ops/us
Iteration  15: ≈ 10⁻⁷ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  ≈ 10⁻⁷ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 23.19% complete, ETA 06:26:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ops/us
# Warmup Iteration   2: 0.001 ops/us
# Warmup Iteration   3: 0.001 ops/us
# Warmup Iteration   4: 0.001 ops/us
# Warmup Iteration   5: 0.001 ops/us
Iteration   1: 0.001 ops/us
Iteration   2: 0.001 ops/us
Iteration   3: 0.001 ops/us
Iteration   4: 0.001 ops/us
Iteration   5: 0.001 ops/us
Iteration   6: 0.001 ops/us
Iteration   7: 0.001 ops/us
Iteration   8: 0.001 ops/us
Iteration   9: 0.001 ops/us
Iteration  10: 0.001 ops/us
Iteration  11: 0.001 ops/us
Iteration  12: 0.001 ops/us
Iteration  13: 0.001 ops/us
Iteration  14: 0.001 ops/us
Iteration  15: 0.001 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  0.001 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 23.91% complete, ETA 06:22:36
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 24.64% complete, ETA 06:18:47
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 25.36% complete, ETA 06:15:10
# Fork: 1 of 1
# Warmup Iteration   1: 1.923 ops/us
# Warmup Iteration   2: 1.885 ops/us
# Warmup Iteration   3: 1.940 ops/us
# Warmup Iteration   4: 1.938 ops/us
# Warmup Iteration   5: 1.936 ops/us
Iteration   1: 1.938 ops/us
Iteration   2: 1.937 ops/us
Iteration   3: 1.937 ops/us
Iteration   4: 1.938 ops/us
Iteration   5: 1.937 ops/us
Iteration   6: 1.937 ops/us
Iteration   7: 1.935 ops/us
Iteration   8: 1.939 ops/us
Iteration   9: 1.938 ops/us
Iteration  10: 1.937 ops/us
Iteration  11: 1.935 ops/us
Iteration  12: 1.940 ops/us
Iteration  13: 1.940 ops/us
Iteration  14: 1.940 ops/us
Iteration  15: 1.939 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  1.938 ±(99.9%) 0.002 ops/us [Average]
  (min, avg, max) = (1.935, 1.938, 1.940), stdev = 0.001
  CI (99.9%): [1.936, 1.939] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 26.09% complete, ETA 06:11:20
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 26.81% complete, ETA 06:07:32
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 27.54% complete, ETA 06:03:46
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 28.26% complete, ETA 05:59:58
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 28.98% complete, ETA 05:56:12
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 29.71% complete, ETA 05:52:26
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 30.43% complete, ETA 05:48:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ops/us
# Warmup Iteration   2: 0.002 ops/us
# Warmup Iteration   3: 0.002 ops/us
# Warmup Iteration   4: 0.002 ops/us
# Warmup Iteration   5: 0.002 ops/us
Iteration   1: 0.002 ops/us
Iteration   2: 0.002 ops/us
Iteration   3: 0.002 ops/us
Iteration   4: 0.002 ops/us
Iteration   5: 0.002 ops/us
Iteration   6: 0.002 ops/us
Iteration   7: 0.002 ops/us
Iteration   8: 0.002 ops/us
Iteration   9: 0.002 ops/us
Iteration  10: 0.002 ops/us
Iteration  11: 0.002 ops/us
Iteration  12: 0.002 ops/us
Iteration  13: 0.002 ops/us
Iteration  14: 0.002 ops/us
Iteration  15: 0.002 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  0.002 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 31.16% complete, ETA 05:44:55
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 31.88% complete, ETA 05:41:10
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 32.61% complete, ETA 05:37:28
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 33.33% complete, ETA 05:34:09
# Fork: 1 of 1
# Warmup Iteration   1: 226843.387 us/op
# Warmup Iteration   2: 225124.271 us/op
# Warmup Iteration   3: 224843.727 us/op
# Warmup Iteration   4: 223321.023 us/op
# Warmup Iteration   5: 224724.023 us/op
Iteration   1: 223418.917 us/op
Iteration   2: 226276.002 us/op
Iteration   3: 225201.890 us/op
Iteration   4: 223835.181 us/op
Iteration   5: 224683.812 us/op
Iteration   6: 223953.084 us/op
Iteration   7: 223935.422 us/op
Iteration   8: 224186.046 us/op
Iteration   9: 222159.878 us/op
Iteration  10: 225759.266 us/op
Iteration  11: 224314.223 us/op
Iteration  12: 229950.564 us/op
Iteration  13: 229010.806 us/op
Iteration  14: 230727.895 us/op
Iteration  15: 229260.131 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  225778.208 ±(99.9%) 2858.592 us/op [Average]
  (min, avg, max) = (222159.878, 225778.208, 230727.895), stdev = 2673.929
  CI (99.9%): [222919.616, 228636.800] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 34.06% complete, ETA 05:30:29
# Fork: 1 of 1
# Warmup Iteration   1: 227057.760 us/op
# Warmup Iteration   2: 227369.762 us/op
# Warmup Iteration   3: 225837.238 us/op
# Warmup Iteration   4: 228178.636 us/op
# Warmup Iteration   5: 226885.913 us/op
Iteration   1: 226182.364 us/op
Iteration   2: 227849.523 us/op
Iteration   3: 226325.566 us/op
Iteration   4: 227547.785 us/op
Iteration   5: 226934.880 us/op
Iteration   6: 226419.871 us/op
Iteration   7: 227506.759 us/op
Iteration   8: 226913.839 us/op
Iteration   9: 227348.634 us/op
Iteration  10: 226928.633 us/op
Iteration  11: 227310.638 us/op
Iteration  12: 227360.398 us/op
Iteration  13: 227054.071 us/op
Iteration  14: 227621.223 us/op
Iteration  15: 226624.107 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  227061.886 ±(99.9%) 540.293 us/op [Average]
  (min, avg, max) = (226182.364, 227061.886, 227849.523), stdev = 505.391
  CI (99.9%): [226521.593, 227602.179] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 34.78% complete, ETA 05:26:49
# Fork: 1 of 1
# Warmup Iteration   1: 203526.771 us/op
# Warmup Iteration   2: 206683.200 us/op
# Warmup Iteration   3: 206937.247 us/op
# Warmup Iteration   4: 208057.359 us/op
# Warmup Iteration   5: 207732.923 us/op
Iteration   1: 207600.147 us/op
Iteration   2: 207193.379 us/op
Iteration   3: 208265.671 us/op
Iteration   4: 208764.374 us/op
Iteration   5: 207074.742 us/op
Iteration   6: 207457.964 us/op
Iteration   7: 207030.234 us/op
Iteration   8: 206395.680 us/op
Iteration   9: 207597.308 us/op
Iteration  10: 207913.783 us/op
Iteration  11: 208062.087 us/op
Iteration  12: 207603.234 us/op
Iteration  13: 206461.263 us/op
Iteration  14: 207838.218 us/op
Iteration  15: 207414.818 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  207511.527 ±(99.9%) 677.199 us/op [Average]
  (min, avg, max) = (206395.680, 207511.527, 208764.374), stdev = 633.452
  CI (99.9%): [206834.328, 208188.726] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 35.51% complete, ETA 05:23:10
# Fork: 1 of 1
# Warmup Iteration   1: 205160.712 us/op
# Warmup Iteration   2: 204222.371 us/op
# Warmup Iteration   3: 205330.726 us/op
# Warmup Iteration   4: 205518.808 us/op
# Warmup Iteration   5: 206223.601 us/op
Iteration   1: 206229.655 us/op
Iteration   2: 206282.474 us/op
Iteration   3: 206649.186 us/op
Iteration   4: 204712.169 us/op
Iteration   5: 203405.112 us/op
Iteration   6: 204923.538 us/op
Iteration   7: 205640.654 us/op
Iteration   8: 205614.335 us/op
Iteration   9: 205772.214 us/op
Iteration  10: 204480.566 us/op
Iteration  11: 204602.727 us/op
Iteration  12: 206193.586 us/op
Iteration  13: 206212.054 us/op
Iteration  14: 204105.950 us/op
Iteration  15: 206394.795 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  205414.601 ±(99.9%) 1045.154 us/op [Average]
  (min, avg, max) = (203405.112, 205414.601, 206649.186), stdev = 977.637
  CI (99.9%): [204369.447, 206459.755] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 36.23% complete, ETA 05:19:28
# Fork: 1 of 1
# Warmup Iteration   1: 205665.226 us/op
# Warmup Iteration   2: 205376.744 us/op
# Warmup Iteration   3: 204629.518 us/op
# Warmup Iteration   4: 204892.434 us/op
# Warmup Iteration   5: 205799.851 us/op
Iteration   1: 203525.865 us/op
Iteration   2: 203113.223 us/op
Iteration   3: 204210.071 us/op
Iteration   4: 203836.775 us/op
Iteration   5: 205668.175 us/op
Iteration   6: 205112.751 us/op
Iteration   7: 206235.463 us/op
Iteration   8: 205315.782 us/op
Iteration   9: 204843.000 us/op
Iteration  10: 205168.530 us/op
Iteration  11: 204863.127 us/op
Iteration  12: 205010.119 us/op
Iteration  13: 204965.179 us/op
Iteration  14: 204117.887 us/op
Iteration  15: 205442.985 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  204761.929 ±(99.9%) 903.188 us/op [Average]
  (min, avg, max) = (203113.223, 204761.929, 206235.463), stdev = 844.843
  CI (99.9%): [203858.741, 205665.117] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 36.96% complete, ETA 05:15:47
# Fork: 1 of 1
# Warmup Iteration   1: 201117.399 us/op
# Warmup Iteration   2: 201503.225 us/op
# Warmup Iteration   3: 200346.095 us/op
# Warmup Iteration   4: 201846.156 us/op
# Warmup Iteration   5: 200654.415 us/op
Iteration   1: 202107.858 us/op
Iteration   2: 199635.677 us/op
Iteration   3: 200931.566 us/op
Iteration   4: 200955.811 us/op
Iteration   5: 199256.545 us/op
Iteration   6: 202500.390 us/op
Iteration   7: 200277.488 us/op
Iteration   8: 201650.948 us/op
Iteration   9: 199871.387 us/op
Iteration  10: 200492.202 us/op
Iteration  11: 201540.264 us/op
Iteration  12: 200501.066 us/op
Iteration  13: 200436.843 us/op
Iteration  14: 201017.411 us/op
Iteration  15: 201475.725 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  200843.412 ±(99.9%) 972.297 us/op [Average]
  (min, avg, max) = (199256.545, 200843.412, 202500.390), stdev = 909.487
  CI (99.9%): [199871.115, 201815.709] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 37.68% complete, ETA 05:12:06
# Fork: 1 of 1
# Warmup Iteration   1: 1840334.194 us/op
# Warmup Iteration   2: 1832290.028 us/op
# Warmup Iteration   3: 1849924.010 us/op
# Warmup Iteration   4: 1826080.144 us/op
# Warmup Iteration   5: 1828719.608 us/op
Iteration   1: 1822413.565 us/op
Iteration   2: 1828221.573 us/op
Iteration   3: 1814811.949 us/op
Iteration   4: 1844807.866 us/op
Iteration   5: 1821408.357 us/op
Iteration   6: 1826940.305 us/op
Iteration   7: 1831147.358 us/op
Iteration   8: 1824542.094 us/op
Iteration   9: 1834335.133 us/op
Iteration  10: 1832326.090 us/op
Iteration  11: 1822153.343 us/op
Iteration  12: 1825719.239 us/op
Iteration  13: 1838253.507 us/op
Iteration  14: 1818720.521 us/op
Iteration  15: 1812782.420 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1826572.221 ±(99.9%) 9234.481 us/op [Average]
  (min, avg, max) = (1812782.420, 1826572.221, 1844807.866), stdev = 8637.939
  CI (99.9%): [1817337.740, 1835806.702] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 38.40% complete, ETA 05:08:55
# Fork: 1 of 1
# Warmup Iteration   1: 1100679.565 us/op
# Warmup Iteration   2: 1144448.216 us/op
# Warmup Iteration   3: 1144570.042 us/op
# Warmup Iteration   4: 1132159.015 us/op
# Warmup Iteration   5: 1143000.773 us/op
Iteration   1: 1138364.386 us/op
Iteration   2: 1139835.119 us/op
Iteration   3: 1135534.832 us/op
Iteration   4: 1141236.196 us/op
Iteration   5: 1134080.615 us/op
Iteration   6: 1138151.142 us/op
Iteration   7: 1130118.422 us/op
Iteration   8: 1135190.091 us/op
Iteration   9: 1133548.655 us/op
Iteration  10: 1134550.069 us/op
Iteration  11: 1138386.056 us/op
Iteration  12: 1130745.743 us/op
Iteration  13: 1140970.926 us/op
Iteration  14: 1135311.405 us/op
Iteration  15: 1142233.733 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1136550.493 ±(99.9%) 3963.183 us/op [Average]
  (min, avg, max) = (1130118.422, 1136550.493, 1142233.733), stdev = 3707.164
  CI (99.9%): [1132587.310, 1140513.676] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 39.13% complete, ETA 05:05:20
# Fork: 1 of 1
# Warmup Iteration   1: 1011983.898 us/op
# Warmup Iteration   2: 1102705.767 us/op
# Warmup Iteration   3: 1078509.743 us/op
# Warmup Iteration   4: 1067258.949 us/op
# Warmup Iteration   5: 1077448.147 us/op
Iteration   1: 1082837.385 us/op
Iteration   2: 1071629.936 us/op
Iteration   3: 1088084.396 us/op
Iteration   4: 1086154.445 us/op
Iteration   5: 1079071.778 us/op
Iteration   6: 1079100.492 us/op
Iteration   7: 1079161.227 us/op
Iteration   8: 1083461.691 us/op
Iteration   9: 1084655.064 us/op
Iteration  10: 1076322.295 us/op
Iteration  11: 1075695.842 us/op
Iteration  12: 1083434.385 us/op
Iteration  13: 1081783.737 us/op
Iteration  14: 1074299.784 us/op
Iteration  15: 1080514.827 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1080413.819 ±(99.9%) 4903.943 us/op [Average]
  (min, avg, max) = (1071629.936, 1080413.819, 1088084.396), stdev = 4587.151
  CI (99.9%): [1075509.876, 1085317.762] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 39.85% complete, ETA 05:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 1024595.540 us/op
# Warmup Iteration   2: 1060927.974 us/op
# Warmup Iteration   3: 1049337.242 us/op
# Warmup Iteration   4: 1055247.926 us/op
# Warmup Iteration   5: 1054455.819 us/op
Iteration   1: 1054358.357 us/op
Iteration   2: 1056841.934 us/op
Iteration   3: 1050146.523 us/op
Iteration   4: 1062221.391 us/op
Iteration   5: 1047442.310 us/op
Iteration   6: 1053051.080 us/op
Iteration   7: 1046529.848 us/op
Iteration   8: 1047671.431 us/op
Iteration   9: 1062025.057 us/op
Iteration  10: 1054559.310 us/op
Iteration  11: 1053478.163 us/op
Iteration  12: 1051597.130 us/op
Iteration  13: 1046983.877 us/op
Iteration  14: 1052358.641 us/op
Iteration  15: 1048536.728 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1052520.119 ±(99.9%) 5345.917 us/op [Average]
  (min, avg, max) = (1046529.848, 1052520.119, 1062221.391), stdev = 5000.574
  CI (99.9%): [1047174.202, 1057866.036] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 40.58% complete, ETA 04:58:31
# Fork: 1 of 1
# Warmup Iteration   1: 1029581.016 us/op
# Warmup Iteration   2: 1020985.207 us/op
# Warmup Iteration   3: 1021844.597 us/op
# Warmup Iteration   4: 1028314.120 us/op
# Warmup Iteration   5: 1023652.087 us/op
Iteration   1: 1024191.976 us/op
Iteration   2: 1019873.151 us/op
Iteration   3: 1019033.054 us/op
Iteration   4: 1018643.358 us/op
Iteration   5: 1030282.196 us/op
Iteration   6: 1031291.801 us/op
Iteration   7: 1020396.436 us/op
Iteration   8: 1037288.652 us/op
Iteration   9: 1028117.615 us/op
Iteration  10: 1034815.804 us/op
Iteration  11: 1025090.360 us/op
Iteration  12: 1026713.745 us/op
Iteration  13: 1016676.348 us/op
Iteration  14: 1022911.889 us/op
Iteration  15: 1016763.813 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1024806.013 ±(99.9%) 6955.172 us/op [Average]
  (min, avg, max) = (1016676.348, 1024806.013, 1037288.652), stdev = 6505.873
  CI (99.9%): [1017850.841, 1031761.185] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 41.30% complete, ETA 04:54:54
# Fork: 1 of 1
# Warmup Iteration   1: 787851.945 us/op
# Warmup Iteration   2: 792524.985 us/op
# Warmup Iteration   3: 793761.469 us/op
# Warmup Iteration   4: 789885.709 us/op
# Warmup Iteration   5: 797649.024 us/op
Iteration   1: 792634.666 us/op
Iteration   2: 793478.096 us/op
Iteration   3: 799909.930 us/op
Iteration   4: 792759.458 us/op
Iteration   5: 792253.561 us/op
Iteration   6: 800416.058 us/op
Iteration   7: 791975.288 us/op
Iteration   8: 794057.993 us/op
Iteration   9: 792731.505 us/op
Iteration  10: 796419.003 us/op
Iteration  11: 796264.330 us/op
Iteration  12: 793405.853 us/op
Iteration  13: 792934.979 us/op
Iteration  14: 788940.398 us/op
Iteration  15: 790134.214 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  793887.689 ±(99.9%) 3396.942 us/op [Average]
  (min, avg, max) = (788940.398, 793887.689, 800416.058), stdev = 3177.501
  CI (99.9%): [790490.747, 797284.630] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 42.03% complete, ETA 04:51:19
# Fork: 1 of 1
# Warmup Iteration   1: 376.625 us/op
# Warmup Iteration   2: 376.408 us/op
# Warmup Iteration   3: 375.783 us/op
# Warmup Iteration   4: 375.287 us/op
# Warmup Iteration   5: 375.865 us/op
Iteration   1: 375.484 us/op
Iteration   2: 375.631 us/op
Iteration   3: 375.765 us/op
Iteration   4: 375.549 us/op
Iteration   5: 375.516 us/op
Iteration   6: 375.689 us/op
Iteration   7: 375.827 us/op
Iteration   8: 375.744 us/op
Iteration   9: 375.800 us/op
Iteration  10: 375.403 us/op
Iteration  11: 375.678 us/op
Iteration  12: 375.485 us/op
Iteration  13: 375.935 us/op
Iteration  14: 375.493 us/op
Iteration  15: 375.771 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  375.651 ±(99.9%) 0.167 us/op [Average]
  (min, avg, max) = (375.403, 375.651, 375.935), stdev = 0.157
  CI (99.9%): [375.484, 375.819] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 42.75% complete, ETA 04:47:35
# Fork: 1 of 1
# Warmup Iteration   1: 165.738 us/op
# Warmup Iteration   2: 165.879 us/op
# Warmup Iteration   3: 165.622 us/op
# Warmup Iteration   4: 164.467 us/op
# Warmup Iteration   5: 165.683 us/op
Iteration   1: 164.872 us/op
Iteration   2: 165.862 us/op
Iteration   3: 164.110 us/op
Iteration   4: 166.217 us/op
Iteration   5: 165.436 us/op
Iteration   6: 165.744 us/op
Iteration   7: 165.857 us/op
Iteration   8: 165.612 us/op
Iteration   9: 164.974 us/op
Iteration  10: 165.536 us/op
Iteration  11: 165.645 us/op
Iteration  12: 165.085 us/op
Iteration  13: 164.601 us/op
Iteration  14: 165.902 us/op
Iteration  15: 164.541 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  165.333 ±(99.9%) 0.646 us/op [Average]
  (min, avg, max) = (164.110, 165.333, 166.217), stdev = 0.605
  CI (99.9%): [164.687, 165.979] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 43.48% complete, ETA 04:43:51
# Fork: 1 of 1
# Warmup Iteration   1: 289.822 us/op
# Warmup Iteration   2: 289.682 us/op
# Warmup Iteration   3: 289.237 us/op
# Warmup Iteration   4: 301.119 us/op
# Warmup Iteration   5: 266.823 us/op
Iteration   1: 267.127 us/op
Iteration   2: 265.280 us/op
Iteration   3: 264.571 us/op
Iteration   4: 264.087 us/op
Iteration   5: 265.104 us/op
Iteration   6: 265.109 us/op
Iteration   7: 264.821 us/op
Iteration   8: 267.038 us/op
Iteration   9: 262.415 us/op
Iteration  10: 264.314 us/op
Iteration  11: 265.420 us/op
Iteration  12: 264.015 us/op
Iteration  13: 262.912 us/op
Iteration  14: 264.881 us/op
Iteration  15: 265.669 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  264.851 ±(99.9%) 1.359 us/op [Average]
  (min, avg, max) = (262.415, 264.851, 267.127), stdev = 1.271
  CI (99.9%): [263.492, 266.210] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 44.20% complete, ETA 04:40:08
# Fork: 1 of 1
# Warmup Iteration   1: 170.757 us/op
# Warmup Iteration   2: 179.215 us/op
# Warmup Iteration   3: 179.290 us/op
# Warmup Iteration   4: 177.464 us/op
# Warmup Iteration   5: 177.159 us/op
Iteration   1: 179.884 us/op
Iteration   2: 177.568 us/op
Iteration   3: 178.939 us/op
Iteration   4: 178.889 us/op
Iteration   5: 178.377 us/op
Iteration   6: 178.046 us/op
Iteration   7: 178.495 us/op
Iteration   8: 177.443 us/op
Iteration   9: 179.540 us/op
Iteration  10: 177.356 us/op
Iteration  11: 177.364 us/op
Iteration  12: 179.430 us/op
Iteration  13: 177.442 us/op
Iteration  14: 177.050 us/op
Iteration  15: 177.688 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  178.234 ±(99.9%) 0.983 us/op [Average]
  (min, avg, max) = (177.050, 178.234, 179.884), stdev = 0.919
  CI (99.9%): [177.251, 179.217] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 44.93% complete, ETA 04:36:26
# Fork: 1 of 1
# Warmup Iteration   1: 1250541.547 us/op
# Warmup Iteration   2: 1332371.146 us/op
# Warmup Iteration   3: 1334102.437 us/op
# Warmup Iteration   4: 1335054.494 us/op
# Warmup Iteration   5: 1335503.781 us/op
Iteration   1: 1335503.179 us/op
Iteration   2: 1336997.768 us/op
Iteration   3: 1333845.277 us/op
Iteration   4: 1336177.263 us/op
Iteration   5: 1335991.731 us/op
Iteration   6: 1328706.341 us/op
Iteration   7: 1333395.138 us/op
Iteration   8: 1335281.422 us/op
Iteration   9: 1334547.373 us/op
Iteration  10: 1337467.319 us/op
Iteration  11: 1337717.633 us/op
Iteration  12: 1337464.620 us/op
Iteration  13: 1336128.054 us/op
Iteration  14: 1330647.510 us/op
Iteration  15: 1336223.015 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  1335072.910 ±(99.9%) 2734.509 us/op [Average]
  (min, avg, max) = (1328706.341, 1335072.910, 1337717.633), stdev = 2557.861
  CI (99.9%): [1332338.401, 1337807.419] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 45.65% complete, ETA 04:32:58
# Fork: 1 of 1
# Warmup Iteration   1: 135466.904 us/op
# Warmup Iteration   2: 137413.017 us/op
# Warmup Iteration   3: 133568.221 us/op
# Warmup Iteration   4: 135116.835 us/op
# Warmup Iteration   5: 150758.746 us/op
Iteration   1: 134082.973 us/op
Iteration   2: 135175.279 us/op
Iteration   3: 138088.256 us/op
Iteration   4: 138312.268 us/op
Iteration   5: 132924.635 us/op
Iteration   6: 140209.132 us/op
Iteration   7: 139485.318 us/op
Iteration   8: 135196.843 us/op
Iteration   9: 140889.769 us/op
Iteration  10: 137973.168 us/op
Iteration  11: 137331.040 us/op
Iteration  12: 136894.664 us/op
Iteration  13: 141408.629 us/op
Iteration  14: 137781.156 us/op
Iteration  15: 139288.622 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  137669.450 ±(99.9%) 2647.177 us/op [Average]
  (min, avg, max) = (132924.635, 137669.450, 141408.629), stdev = 2476.171
  CI (99.9%): [135022.273, 140316.627] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 46.38% complete, ETA 04:29:17
# Fork: 1 of 1
# Warmup Iteration   1: 2850006.208 us/op
# Warmup Iteration   2: 3438930.626 us/op
# Warmup Iteration   3: 3430597.657 us/op
# Warmup Iteration   4: 3406059.240 us/op
# Warmup Iteration   5: 3439392.832 us/op
Iteration   1: 3405793.490 us/op
Iteration   2: 3440295.014 us/op
Iteration   3: 3391130.172 us/op
Iteration   4: 3439722.090 us/op
Iteration   5: 3399130.331 us/op
Iteration   6: 3427358.596 us/op
Iteration   7: 3438030.657 us/op
Iteration   8: 3416226.493 us/op
Iteration   9: 3413076.644 us/op
Iteration  10: 3420835.707 us/op
Iteration  11: 3431339.462 us/op
Iteration  12: 3413535.796 us/op
Iteration  13: 3387360.951 us/op
Iteration  14: 3466574.721 us/op
Iteration  15: 3413450.880 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  3420257.400 ±(99.9%) 22425.872 us/op [Average]
  (min, avg, max) = (3387360.951, 3420257.400, 3466574.721), stdev = 20977.175
  CI (99.9%): [3397831.528, 3442683.273] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 47.10% complete, ETA 04:25:41
# Fork: 1 of 1
# Warmup Iteration   1: 1.849 us/op
# Warmup Iteration   2: 1.849 us/op
# Warmup Iteration   3: 1.845 us/op
# Warmup Iteration   4: 1.845 us/op
# Warmup Iteration   5: 1.845 us/op
Iteration   1: 1.845 us/op
Iteration   2: 1.844 us/op
Iteration   3: 1.845 us/op
Iteration   4: 1.845 us/op
Iteration   5: 1.845 us/op
Iteration   6: 1.844 us/op
Iteration   7: 1.844 us/op
Iteration   8: 1.844 us/op
Iteration   9: 1.844 us/op
Iteration  10: 1.845 us/op
Iteration  11: 1.846 us/op
Iteration  12: 1.846 us/op
Iteration  13: 1.844 us/op
Iteration  14: 1.845 us/op
Iteration  15: 1.846 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  1.845 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (1.844, 1.845, 1.846), stdev = 0.001
  CI (99.9%): [1.844, 1.845] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 47.82% complete, ETA 04:21:58
# Fork: 1 of 1
# Warmup Iteration   1: 4.927 us/op
# Warmup Iteration   2: 4.927 us/op
# Warmup Iteration   3: 4.928 us/op
# Warmup Iteration   4: 4.922 us/op
# Warmup Iteration   5: 4.909 us/op
Iteration   1: 4.911 us/op
Iteration   2: 4.912 us/op
Iteration   3: 4.918 us/op
Iteration   4: 4.913 us/op
Iteration   5: 4.909 us/op
Iteration   6: 4.923 us/op
Iteration   7: 4.912 us/op
Iteration   8: 4.930 us/op
Iteration   9: 4.913 us/op
Iteration  10: 4.916 us/op
Iteration  11: 4.913 us/op
Iteration  12: 4.916 us/op
Iteration  13: 4.930 us/op
Iteration  14: 4.915 us/op
Iteration  15: 4.926 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  4.917 ±(99.9%) 0.007 us/op [Average]
  (min, avg, max) = (4.909, 4.917, 4.930), stdev = 0.007
  CI (99.9%): [4.910, 4.924] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 48.55% complete, ETA 04:18:16
# Fork: 1 of 1
# Warmup Iteration   1: 9.002 us/op
# Warmup Iteration   2: 8.984 us/op
# Warmup Iteration   3: 8.984 us/op
# Warmup Iteration   4: 8.997 us/op
# Warmup Iteration   5: 8.986 us/op
Iteration   1: 8.966 us/op
Iteration   2: 8.973 us/op
Iteration   3: 8.962 us/op
Iteration   4: 8.979 us/op
Iteration   5: 8.980 us/op
Iteration   6: 8.959 us/op
Iteration   7: 8.998 us/op
Iteration   8: 8.974 us/op
Iteration   9: 8.980 us/op
Iteration  10: 8.979 us/op
Iteration  11: 8.976 us/op
Iteration  12: 9.016 us/op
Iteration  13: 9.029 us/op
Iteration  14: 8.987 us/op
Iteration  15: 9.015 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  8.985 ±(99.9%) 0.022 us/op [Average]
  (min, avg, max) = (8.959, 8.985, 9.029), stdev = 0.021
  CI (99.9%): [8.963, 9.007] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 49.27% complete, ETA 04:14:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.043 us/op
# Warmup Iteration   2: 0.044 us/op
# Warmup Iteration   3: 0.050 us/op
# Warmup Iteration   4: 0.050 us/op
# Warmup Iteration   5: 0.050 us/op
Iteration   1: 0.050 us/op
Iteration   2: 0.050 us/op
Iteration   3: 0.050 us/op
Iteration   4: 0.050 us/op
Iteration   5: 0.050 us/op
Iteration   6: 0.050 us/op
Iteration   7: 0.050 us/op
Iteration   8: 0.050 us/op
Iteration   9: 0.050 us/op
Iteration  10: 0.050 us/op
Iteration  11: 0.050 us/op
Iteration  12: 0.050 us/op
Iteration  13: 0.050 us/op
Iteration  14: 0.050 us/op
Iteration  15: 0.050 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.050 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.050, 0.050, 0.050), stdev = 0.001
  CI (99.9%): [0.050, 0.050] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 50.00% complete, ETA 04:10:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.391 us/op
# Warmup Iteration   2: 0.381 us/op
# Warmup Iteration   3: 0.418 us/op
# Warmup Iteration   4: 0.419 us/op
# Warmup Iteration   5: 0.427 us/op
Iteration   1: 0.421 us/op
Iteration   2: 0.419 us/op
Iteration   3: 0.420 us/op
Iteration   4: 0.425 us/op
Iteration   5: 0.418 us/op
Iteration   6: 0.419 us/op
Iteration   7: 0.425 us/op
Iteration   8: 0.421 us/op
Iteration   9: 0.433 us/op
Iteration  10: 0.418 us/op
Iteration  11: 0.418 us/op
Iteration  12: 0.419 us/op
Iteration  13: 0.418 us/op
Iteration  14: 0.418 us/op
Iteration  15: 0.419 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.421 ±(99.9%) 0.005 us/op [Average]
  (min, avg, max) = (0.418, 0.421, 0.433), stdev = 0.004
  CI (99.9%): [0.416, 0.425] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 50.72% complete, ETA 04:07:09
# Fork: 1 of 1
# Warmup Iteration   1: 4.091 us/op
# Warmup Iteration   2: 4.382 us/op
# Warmup Iteration   3: 4.754 us/op
# Warmup Iteration   4: 4.689 us/op
# Warmup Iteration   5: 4.740 us/op
Iteration   1: 4.753 us/op
Iteration   2: 4.760 us/op
Iteration   3: 4.883 us/op
Iteration   4: 4.735 us/op
Iteration   5: 4.830 us/op
Iteration   6: 4.769 us/op
Iteration   7: 4.822 us/op
Iteration   8: 4.711 us/op
Iteration   9: 4.729 us/op
Iteration  10: 4.755 us/op
Iteration  11: 4.797 us/op
Iteration  12: 4.729 us/op
Iteration  13: 4.723 us/op
Iteration  14: 4.811 us/op
Iteration  15: 4.782 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  4.773 ±(99.9%) 0.051 us/op [Average]
  (min, avg, max) = (4.711, 4.773, 4.883), stdev = 0.048
  CI (99.9%): [4.721, 4.824] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 51.45% complete, ETA 04:03:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.049 us/op
# Warmup Iteration   2: 0.045 us/op
# Warmup Iteration   3: 0.047 us/op
# Warmup Iteration   4: 0.047 us/op
# Warmup Iteration   5: 0.048 us/op
Iteration   1: 0.047 us/op
Iteration   2: 0.047 us/op
Iteration   3: 0.047 us/op
Iteration   4: 0.047 us/op
Iteration   5: 0.047 us/op
Iteration   6: 0.047 us/op
Iteration   7: 0.047 us/op
Iteration   8: 0.048 us/op
Iteration   9: 0.047 us/op
Iteration  10: 0.047 us/op
Iteration  11: 0.047 us/op
Iteration  12: 0.047 us/op
Iteration  13: 0.047 us/op
Iteration  14: 0.047 us/op
Iteration  15: 0.047 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.047 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.047, 0.047, 0.048), stdev = 0.001
  CI (99.9%): [0.047, 0.047] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 52.17% complete, ETA 03:59:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.461 us/op
# Warmup Iteration   2: 0.383 us/op
# Warmup Iteration   3: 0.384 us/op
# Warmup Iteration   4: 0.384 us/op
# Warmup Iteration   5: 0.382 us/op
Iteration   1: 0.393 us/op
Iteration   2: 0.391 us/op
Iteration   3: 0.388 us/op
Iteration   4: 0.394 us/op
Iteration   5: 0.381 us/op
Iteration   6: 0.381 us/op
Iteration   7: 0.388 us/op
Iteration   8: 0.382 us/op
Iteration   9: 0.392 us/op
Iteration  10: 0.381 us/op
Iteration  11: 0.382 us/op
Iteration  12: 0.384 us/op
Iteration  13: 0.382 us/op
Iteration  14: 0.384 us/op
Iteration  15: 0.381 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.386 ±(99.9%) 0.005 us/op [Average]
  (min, avg, max) = (0.381, 0.386, 0.394), stdev = 0.005
  CI (99.9%): [0.381, 0.391] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 52.90% complete, ETA 03:56:05
# Fork: 1 of 1
# Warmup Iteration   1: 3.847 us/op
# Warmup Iteration   2: 3.646 us/op
# Warmup Iteration   3: 4.330 us/op
# Warmup Iteration   4: 4.329 us/op
# Warmup Iteration   5: 4.472 us/op
Iteration   1: 4.373 us/op
Iteration   2: 4.394 us/op
Iteration   3: 4.331 us/op
Iteration   4: 4.415 us/op
Iteration   5: 4.359 us/op
Iteration   6: 4.322 us/op
Iteration   7: 4.370 us/op
Iteration   8: 4.360 us/op
Iteration   9: 4.416 us/op
Iteration  10: 4.377 us/op
Iteration  11: 4.343 us/op
Iteration  12: 4.440 us/op
Iteration  13: 4.348 us/op
Iteration  14: 4.474 us/op
Iteration  15: 4.387 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  4.381 ±(99.9%) 0.045 us/op [Average]
  (min, avg, max) = (4.322, 4.381, 4.474), stdev = 0.042
  CI (99.9%): [4.336, 4.425] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 53.62% complete, ETA 03:52:24
# Fork: 1 of 1
# Warmup Iteration   1: 14572.354 us/op
# Warmup Iteration   2: 14525.983 us/op
# Warmup Iteration   3: 14529.819 us/op
# Warmup Iteration   4: 14525.981 us/op
# Warmup Iteration   5: 14516.271 us/op
Iteration   1: 14519.382 us/op
Iteration   2: 14557.338 us/op
Iteration   3: 14516.374 us/op
Iteration   4: 14523.555 us/op
Iteration   5: 14544.059 us/op
Iteration   6: 14531.916 us/op
Iteration   7: 14536.331 us/op
Iteration   8: 14557.258 us/op
Iteration   9: 14533.005 us/op
Iteration  10: 14518.154 us/op
Iteration  11: 14534.516 us/op
Iteration  12: 14524.376 us/op
Iteration  13: 14536.006 us/op
Iteration  14: 14530.652 us/op
Iteration  15: 14527.663 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  14532.706 ±(99.9%) 13.417 us/op [Average]
  (min, avg, max) = (14516.374, 14532.706, 14557.338), stdev = 12.551
  CI (99.9%): [14519.288, 14546.123] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 54.35% complete, ETA 03:48:43
# Fork: 1 of 1
# Warmup Iteration   1: 324.739 us/op
# Warmup Iteration   2: 322.237 us/op
# Warmup Iteration   3: 320.725 us/op
# Warmup Iteration   4: 321.486 us/op
# Warmup Iteration   5: 318.827 us/op
Iteration   1: 320.957 us/op
Iteration   2: 319.330 us/op
Iteration   3: 320.919 us/op
Iteration   4: 319.766 us/op
Iteration   5: 320.272 us/op
Iteration   6: 320.389 us/op
Iteration   7: 318.635 us/op
Iteration   8: 319.704 us/op
Iteration   9: 321.196 us/op
Iteration  10: 319.347 us/op
Iteration  11: 318.705 us/op
Iteration  12: 320.420 us/op
Iteration  13: 321.019 us/op
Iteration  14: 320.497 us/op
Iteration  15: 319.402 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  320.037 ±(99.9%) 0.893 us/op [Average]
  (min, avg, max) = (318.635, 320.037, 321.196), stdev = 0.835
  CI (99.9%): [319.144, 320.930] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 55.07% complete, ETA 03:45:03
# Fork: 1 of 1
# Warmup Iteration   1: 31915.149 us/op
# Warmup Iteration   2: 31874.936 us/op
# Warmup Iteration   3: 31764.058 us/op
# Warmup Iteration   4: 31780.007 us/op
# Warmup Iteration   5: 31727.702 us/op
Iteration   1: 31788.260 us/op
Iteration   2: 31697.538 us/op
Iteration   3: 31760.826 us/op
Iteration   4: 31730.000 us/op
Iteration   5: 31739.018 us/op
Iteration   6: 31823.389 us/op
Iteration   7: 31725.797 us/op
Iteration   8: 31769.539 us/op
Iteration   9: 31771.589 us/op
Iteration  10: 31652.933 us/op
Iteration  11: 31686.854 us/op
Iteration  12: 31696.067 us/op
Iteration  13: 31655.957 us/op
Iteration  14: 31659.827 us/op
Iteration  15: 31683.322 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  31722.728 ±(99.9%) 55.884 us/op [Average]
  (min, avg, max) = (31652.933, 31722.728, 31823.389), stdev = 52.274
  CI (99.9%): [31666.843, 31778.612] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 55.80% complete, ETA 03:41:22
# Fork: 1 of 1
# Warmup Iteration   1: 3234023.107 us/op
# Warmup Iteration   2: 6005550.775 us/op
# Warmup Iteration   3: 3178499.268 us/op
# Warmup Iteration   4: 5285216.910 us/op
# Warmup Iteration   5: 11512345.103 us/op
Iteration   1: 11572301.160 us/op
Iteration   2: 11529614.547 us/op
Iteration   3: 11562922.791 us/op
Iteration   4: 11564875.285 us/op
Iteration   5: 11542380.444 us/op
Iteration   6: 11540084.658 us/op
Iteration   7: 11561683.270 us/op
Iteration   8: 11521558.775 us/op
Iteration   9: 11558942.165 us/op
Iteration  10: 11584586.746 us/op
Iteration  11: 11591634.552 us/op
Iteration  12: 11552373.535 us/op
Iteration  13: 11582044.611 us/op
Iteration  14: 11516601.558 us/op
Iteration  15: 11552698.572 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  11555620.178 ±(99.9%) 24064.941 us/op [Average]
  (min, avg, max) = (11516601.558, 11555620.178, 11591634.552), stdev = 22510.361
  CI (99.9%): [11531555.237, 11579685.119] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 56.52% complete, ETA 03:38:20
# Fork: 1 of 1
# Warmup Iteration   1: 1885.429 us/op
# Warmup Iteration   2: 1879.266 us/op
# Warmup Iteration   3: 1881.189 us/op
# Warmup Iteration   4: 1878.473 us/op
# Warmup Iteration   5: 1878.108 us/op
Iteration   1: 1877.881 us/op
Iteration   2: 1879.201 us/op
Iteration   3: 1876.041 us/op
Iteration   4: 1878.287 us/op
Iteration   5: 1877.227 us/op
Iteration   6: 1875.758 us/op
Iteration   7: 1875.356 us/op
Iteration   8: 1874.867 us/op
Iteration   9: 1878.065 us/op
Iteration  10: 1875.342 us/op
Iteration  11: 1876.302 us/op
Iteration  12: 1876.012 us/op
Iteration  13: 1877.390 us/op
Iteration  14: 1879.561 us/op
Iteration  15: 1879.979 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  1877.151 ±(99.9%) 1.753 us/op [Average]
  (min, avg, max) = (1874.867, 1877.151, 1879.979), stdev = 1.639
  CI (99.9%): [1875.399, 1878.904] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 57.24% complete, ETA 03:34:39
# Fork: 1 of 1
# Warmup Iteration   1: 62167.838 us/op
# Warmup Iteration   2: 62210.147 us/op
# Warmup Iteration   3: 62189.399 us/op
# Warmup Iteration   4: 62306.995 us/op
# Warmup Iteration   5: 62362.846 us/op
Iteration   1: 62357.701 us/op
Iteration   2: 62171.881 us/op
Iteration   3: 62202.562 us/op
Iteration   4: 62137.965 us/op
Iteration   5: 62166.937 us/op
Iteration   6: 62157.471 us/op
Iteration   7: 62137.714 us/op
Iteration   8: 62172.829 us/op
Iteration   9: 62131.240 us/op
Iteration  10: 62184.146 us/op
Iteration  11: 62161.918 us/op
Iteration  12: 62292.858 us/op
Iteration  13: 62362.629 us/op
Iteration  14: 62188.100 us/op
Iteration  15: 62182.077 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  62200.535 ±(99.9%) 80.304 us/op [Average]
  (min, avg, max) = (62131.240, 62200.535, 62362.629), stdev = 75.116
  CI (99.9%): [62120.232, 62280.839] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 57.97% complete, ETA 03:30:59
# Fork: 1 of 1
# Warmup Iteration   1: 1695078.265 us/op
# Warmup Iteration   2: 1703643.838 us/op
# Warmup Iteration   3: 1707424.412 us/op
# Warmup Iteration   4: 1704658.145 us/op
# Warmup Iteration   5: 1703155.437 us/op
Iteration   1: 1705484.134 us/op
Iteration   2: 1703657.862 us/op
Iteration   3: 1702807.663 us/op
Iteration   4: 1702841.110 us/op
Iteration   5: 1704297.719 us/op
Iteration   6: 1704347.385 us/op
Iteration   7: 1704369.787 us/op
Iteration   8: 1704454.954 us/op
Iteration   9: 1703553.372 us/op
Iteration  10: 1703500.187 us/op
Iteration  11: 1704630.950 us/op
Iteration  12: 1704088.651 us/op
Iteration  13: 1704657.745 us/op
Iteration  14: 1705627.858 us/op
Iteration  15: 1704090.859 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  1704160.682 ±(99.9%) 866.449 us/op [Average]
  (min, avg, max) = (1702807.663, 1704160.682, 1705627.858), stdev = 810.477
  CI (99.9%): [1703294.234, 1705027.131] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 58.69% complete, ETA 03:27:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.515 us/op
# Warmup Iteration   2: 0.519 us/op
# Warmup Iteration   3: 0.514 us/op
# Warmup Iteration   4: 0.514 us/op
# Warmup Iteration   5: 0.514 us/op
Iteration   1: 0.515 us/op
Iteration   2: 0.514 us/op
Iteration   3: 0.514 us/op
Iteration   4: 0.515 us/op
Iteration   5: 0.513 us/op
Iteration   6: 0.515 us/op
Iteration   7: 0.514 us/op
Iteration   8: 0.515 us/op
Iteration   9: 0.514 us/op
Iteration  10: 0.515 us/op
Iteration  11: 0.513 us/op
Iteration  12: 0.513 us/op
Iteration  13: 0.514 us/op
Iteration  14: 0.514 us/op
Iteration  15: 0.514 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  0.514 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.513, 0.514, 0.515), stdev = 0.001
  CI (99.9%): [0.514, 0.515] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 59.42% complete, ETA 03:23:51
# Fork: 1 of 1
# Warmup Iteration   1: 7028.700 us/op
# Warmup Iteration   2: 6953.054 us/op
# Warmup Iteration   3: 6960.943 us/op
# Warmup Iteration   4: 6955.094 us/op
# Warmup Iteration   5: 6969.047 us/op
Iteration   1: 6956.500 us/op
Iteration   2: 6959.062 us/op
Iteration   3: 6955.488 us/op
Iteration   4: 6957.734 us/op
Iteration   5: 6950.256 us/op
Iteration   6: 6956.088 us/op
Iteration   7: 6954.259 us/op
Iteration   8: 6957.010 us/op
Iteration   9: 6955.652 us/op
Iteration  10: 6949.283 us/op
Iteration  11: 6955.208 us/op
Iteration  12: 6958.880 us/op
Iteration  13: 6959.479 us/op
Iteration  14: 6952.342 us/op
Iteration  15: 6951.609 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  6955.257 ±(99.9%) 3.388 us/op [Average]
  (min, avg, max) = (6949.283, 6955.257, 6959.479), stdev = 3.169
  CI (99.9%): [6951.869, 6958.644] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 60.14% complete, ETA 03:20:10
# Fork: 1 of 1
# Warmup Iteration   1: 34029.019 us/op
# Warmup Iteration   2: 32697.561 us/op
# Warmup Iteration   3: 33691.897 us/op
# Warmup Iteration   4: 35961.722 us/op
# Warmup Iteration   5: 32085.845 us/op
Iteration   1: 32222.975 us/op
Iteration   2: 40257.821 us/op
Iteration   3: 39215.103 us/op
Iteration   4: 32981.475 us/op
Iteration   5: 29379.793 us/op
Iteration   6: 32994.823 us/op
Iteration   7: 35948.530 us/op
Iteration   8: 30679.692 us/op
Iteration   9: 32821.025 us/op
Iteration  10: 32369.438 us/op
Iteration  11: 35310.269 us/op
Iteration  12: 33111.178 us/op
Iteration  13: 35301.495 us/op
Iteration  14: 32586.008 us/op
Iteration  15: 33404.171 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  33905.586 ±(99.9%) 3106.337 us/op [Average]
  (min, avg, max) = (29379.793, 33905.586, 40257.821), stdev = 2905.670
  CI (99.9%): [30799.249, 37011.924] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 60.87% complete, ETA 03:16:30
# Fork: 1 of 1
# Warmup Iteration   1: 35227.443 us/op
# Warmup Iteration   2: 34942.539 us/op
# Warmup Iteration   3: 34614.036 us/op
# Warmup Iteration   4: 34929.302 us/op
# Warmup Iteration   5: 34993.934 us/op
Iteration   1: 34929.829 us/op
Iteration   2: 34951.868 us/op
Iteration   3: 34869.622 us/op
Iteration   4: 35118.497 us/op
Iteration   5: 34947.567 us/op
Iteration   6: 34802.272 us/op
Iteration   7: 35006.871 us/op
Iteration   8: 34805.442 us/op
Iteration   9: 34844.573 us/op
Iteration  10: 34761.155 us/op
Iteration  11: 34866.489 us/op
Iteration  12: 35065.477 us/op
Iteration  13: 34828.235 us/op
Iteration  14: 34975.506 us/op
Iteration  15: 34848.516 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  34908.128 ±(99.9%) 109.839 us/op [Average]
  (min, avg, max) = (34761.155, 34908.128, 35118.497), stdev = 102.743
  CI (99.9%): [34798.289, 35017.967] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 61.59% complete, ETA 03:12:50
# Fork: 1 of 1
# Warmup Iteration   1: 24663.684 us/op
# Warmup Iteration   2: 24322.340 us/op
# Warmup Iteration   3: 24127.191 us/op
# Warmup Iteration   4: 24839.125 us/op
# Warmup Iteration   5: 24142.447 us/op
Iteration   1: 24190.702 us/op
Iteration   2: 24263.538 us/op
Iteration   3: 24034.349 us/op
Iteration   4: 24816.317 us/op
Iteration   5: 24109.774 us/op
Iteration   6: 24713.196 us/op
Iteration   7: 24378.333 us/op
Iteration   8: 24177.618 us/op
Iteration   9: 24129.926 us/op
Iteration  10: 24345.424 us/op
Iteration  11: 24130.740 us/op
Iteration  12: 24226.010 us/op
Iteration  13: 24117.291 us/op
Iteration  14: 24266.777 us/op
Iteration  15: 24722.541 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  24308.169 ±(99.9%) 264.285 us/op [Average]
  (min, avg, max) = (24034.349, 24308.169, 24816.317), stdev = 247.213
  CI (99.9%): [24043.884, 24572.455] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 62.32% complete, ETA 03:09:09
# Fork: 1 of 1
# Warmup Iteration   1: 14584.009 us/op
# Warmup Iteration   2: 14483.728 us/op
# Warmup Iteration   3: 14480.424 us/op
# Warmup Iteration   4: 14455.447 us/op
# Warmup Iteration   5: 14482.391 us/op
Iteration   1: 14494.634 us/op
Iteration   2: 14416.752 us/op
Iteration   3: 14454.308 us/op
Iteration   4: 14455.507 us/op
Iteration   5: 14448.741 us/op
Iteration   6: 14414.893 us/op
Iteration   7: 14447.407 us/op
Iteration   8: 14417.403 us/op
Iteration   9: 14470.094 us/op
Iteration  10: 14475.976 us/op
Iteration  11: 14444.660 us/op
Iteration  12: 14452.314 us/op
Iteration  13: 14481.975 us/op
Iteration  14: 14446.048 us/op
Iteration  15: 14467.527 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  14452.549 ±(99.9%) 25.250 us/op [Average]
  (min, avg, max) = (14414.893, 14452.549, 14494.634), stdev = 23.619
  CI (99.9%): [14427.299, 14477.799] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 63.04% complete, ETA 03:05:29
# Fork: 1 of 1
# Warmup Iteration   1: 33806.730 us/op
# Warmup Iteration   2: 34649.957 us/op
# Warmup Iteration   3: 33073.051 us/op
# Warmup Iteration   4: 34688.776 us/op
# Warmup Iteration   5: 32108.307 us/op
Iteration   1: 34465.092 us/op
Iteration   2: 33050.880 us/op
Iteration   3: 32936.697 us/op
Iteration   4: 33300.849 us/op
Iteration   5: 32444.738 us/op
Iteration   6: 32549.323 us/op
Iteration   7: 34809.296 us/op
Iteration   8: 35093.287 us/op
Iteration   9: 34651.305 us/op
Iteration  10: 32528.141 us/op
Iteration  11: 33883.529 us/op
Iteration  12: 33263.058 us/op
Iteration  13: 33319.872 us/op
Iteration  14: 33581.751 us/op
Iteration  15: 34166.080 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  33602.927 ±(99.9%) 928.361 us/op [Average]
  (min, avg, max) = (32444.738, 33602.927, 35093.287), stdev = 868.389
  CI (99.9%): [32674.566, 34531.288] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 63.77% complete, ETA 03:01:49
# Fork: 1 of 1
# Warmup Iteration   1: 666.870 us/op
# Warmup Iteration   2: 664.902 us/op
# Warmup Iteration   3: 662.695 us/op
# Warmup Iteration   4: 659.244 us/op
# Warmup Iteration   5: 656.820 us/op
Iteration   1: 658.293 us/op
Iteration   2: 658.406 us/op
Iteration   3: 665.889 us/op
Iteration   4: 659.186 us/op
Iteration   5: 660.936 us/op
Iteration   6: 658.000 us/op
Iteration   7: 654.584 us/op
Iteration   8: 658.604 us/op
Iteration   9: 663.758 us/op
Iteration  10: 657.197 us/op
Iteration  11: 658.571 us/op
Iteration  12: 658.534 us/op
Iteration  13: 660.489 us/op
Iteration  14: 659.207 us/op
Iteration  15: 656.349 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  659.200 ±(99.9%) 2.966 us/op [Average]
  (min, avg, max) = (654.584, 659.200, 665.889), stdev = 2.774
  CI (99.9%): [656.234, 662.166] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 64.49% complete, ETA 02:58:08
# Fork: 1 of 1
# Warmup Iteration   1: 6787.062 us/op
# Warmup Iteration   2: 6754.512 us/op
# Warmup Iteration   3: 6716.367 us/op
# Warmup Iteration   4: 6825.146 us/op
# Warmup Iteration   5: 6724.669 us/op
Iteration   1: 6694.564 us/op
Iteration   2: 6780.410 us/op
Iteration   3: 6703.964 us/op
Iteration   4: 6700.349 us/op
Iteration   5: 6719.788 us/op
Iteration   6: 6726.121 us/op
Iteration   7: 6731.138 us/op
Iteration   8: 6778.935 us/op
Iteration   9: 6784.910 us/op
Iteration  10: 6719.357 us/op
Iteration  11: 6730.305 us/op
Iteration  12: 6723.059 us/op
Iteration  13: 6732.671 us/op
Iteration  14: 6733.960 us/op
Iteration  15: 6738.129 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  6733.177 ±(99.9%) 29.944 us/op [Average]
  (min, avg, max) = (6694.564, 6733.177, 6784.910), stdev = 28.009
  CI (99.9%): [6703.234, 6763.121] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 65.22% complete, ETA 02:54:28
# Fork: 1 of 1
# Warmup Iteration   1: 109330.709 us/op
# Warmup Iteration   2: 108392.017 us/op
# Warmup Iteration   3: 106908.126 us/op
# Warmup Iteration   4: 107455.767 us/op
# Warmup Iteration   5: 107056.444 us/op
Iteration   1: 106461.432 us/op
Iteration   2: 107055.575 us/op
Iteration   3: 106830.160 us/op
Iteration   4: 107266.963 us/op
Iteration   5: 106816.498 us/op
Iteration   6: 107237.239 us/op
Iteration   7: 107587.257 us/op
Iteration   8: 107483.416 us/op
Iteration   9: 106917.375 us/op
Iteration  10: 106716.008 us/op
Iteration  11: 107432.432 us/op
Iteration  12: 107293.941 us/op
Iteration  13: 106627.496 us/op
Iteration  14: 107273.772 us/op
Iteration  15: 107609.389 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  107107.263 ±(99.9%) 387.055 us/op [Average]
  (min, avg, max) = (106461.432, 107107.263, 107609.389), stdev = 362.051
  CI (99.9%): [106720.209, 107494.318] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 65.94% complete, ETA 02:50:49
# Fork: 1 of 1
# Warmup Iteration   1: 799369.266 us/op
# Warmup Iteration   2: 766611.146 us/op
# Warmup Iteration   3: 760451.477 us/op
# Warmup Iteration   4: 756218.446 us/op
# Warmup Iteration   5: 759493.898 us/op
Iteration   1: 757780.266 us/op
Iteration   2: 758515.301 us/op
Iteration   3: 754969.603 us/op
Iteration   4: 760175.027 us/op
Iteration   5: 758332.349 us/op
Iteration   6: 761243.755 us/op
Iteration   7: 759390.794 us/op
Iteration   8: 757983.357 us/op
Iteration   9: 759368.852 us/op
Iteration  10: 759737.429 us/op
Iteration  11: 759355.573 us/op
Iteration  12: 755612.743 us/op
Iteration  13: 758286.457 us/op
Iteration  14: 757360.831 us/op
Iteration  15: 757005.556 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  758341.193 ±(99.9%) 1783.331 us/op [Average]
  (min, avg, max) = (754969.603, 758341.193, 761243.755), stdev = 1668.129
  CI (99.9%): [756557.861, 760124.524] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 66.66% complete, ETA 02:47:16
# Fork: 1 of 1
# Warmup Iteration   1: 226731.258 ±(99.9%) 3433.605 us/op
# Warmup Iteration   2: 229572.608 ±(99.9%) 4445.168 us/op
# Warmup Iteration   3: 224663.233 ±(99.9%) 2999.790 us/op
# Warmup Iteration   4: 224220.501 ±(99.9%) 3251.101 us/op
# Warmup Iteration   5: 225344.808 ±(99.9%) 3233.708 us/op
Iteration   1: 225362.284 ±(99.9%) 2724.112 us/op
                 createNewObjects·p0.00:   212074.496 us/op
                 createNewObjects·p0.50:   225705.984 us/op
                 createNewObjects·p0.90:   232207.155 us/op
                 createNewObjects·p0.95:   234120.806 us/op
                 createNewObjects·p0.99:   235143.168 us/op
                 createNewObjects·p0.999:  235143.168 us/op
                 createNewObjects·p0.9999: 235143.168 us/op
                 createNewObjects·p1.00:   235143.168 us/op

Iteration   2: 226055.509 ±(99.9%) 3567.358 us/op
                 createNewObjects·p0.00:   214171.648 us/op
                 createNewObjects·p0.50:   225443.840 us/op
                 createNewObjects·p0.90:   233937.306 us/op
                 createNewObjects·p0.95:   236637.389 us/op
                 createNewObjects·p0.99:   250347.520 us/op
                 createNewObjects·p0.999:  250347.520 us/op
                 createNewObjects·p0.9999: 250347.520 us/op
                 createNewObjects·p1.00:   250347.520 us/op

Iteration   3: 225770.064 ±(99.9%) 2559.713 us/op
                 createNewObjects·p0.00:   213647.360 us/op
                 createNewObjects·p0.50:   226230.272 us/op
                 createNewObjects·p0.90:   231997.440 us/op
                 createNewObjects·p0.95:   233360.589 us/op
                 createNewObjects·p0.99:   236978.176 us/op
                 createNewObjects·p0.999:  236978.176 us/op
                 createNewObjects·p0.9999: 236978.176 us/op
                 createNewObjects·p1.00:   236978.176 us/op

Iteration   4: 225962.303 ±(99.9%) 3061.856 us/op
                 createNewObjects·p0.00:   212598.784 us/op
                 createNewObjects·p0.50:   225705.984 us/op
                 createNewObjects·p0.90:   233780.019 us/op
                 createNewObjects·p0.95:   237240.320 us/op
                 createNewObjects·p0.99:   239337.472 us/op
                 createNewObjects·p0.999:  239337.472 us/op
                 createNewObjects·p0.9999: 239337.472 us/op
                 createNewObjects·p1.00:   239337.472 us/op

Iteration   5: 223987.484 ±(99.9%) 3106.908 us/op
                 createNewObjects·p0.00:   212074.496 us/op
                 createNewObjects·p0.50:   223870.976 us/op
                 createNewObjects·p0.90:   231420.723 us/op
                 createNewObjects·p0.95:   236375.245 us/op
                 createNewObjects·p0.99:   237764.608 us/op
                 createNewObjects·p0.999:  237764.608 us/op
                 createNewObjects·p0.9999: 237764.608 us/op
                 createNewObjects·p1.00:   237764.608 us/op

Iteration   6: 227475.456 ±(99.9%) 3555.788 us/op
                 createNewObjects·p0.00:   216006.656 us/op
                 createNewObjects·p0.50:   226099.200 us/op
                 createNewObjects·p0.90:   235798.528 us/op
                 createNewObjects·p0.95:   245301.248 us/op
                 createNewObjects·p0.99:   247201.792 us/op
                 createNewObjects·p0.999:  247201.792 us/op
                 createNewObjects·p0.9999: 247201.792 us/op
                 createNewObjects·p1.00:   247201.792 us/op

Iteration   7: 225018.584 ±(99.9%) 2803.487 us/op
                 createNewObjects·p0.00:   213123.072 us/op
                 createNewObjects·p0.50:   224133.120 us/op
                 createNewObjects·p0.90:   232049.869 us/op
                 createNewObjects·p0.95:   233675.162 us/op
                 createNewObjects·p0.99:   236978.176 us/op
                 createNewObjects·p0.999:  236978.176 us/op
                 createNewObjects·p0.9999: 236978.176 us/op
                 createNewObjects·p1.00:   236978.176 us/op

Iteration   8: 224872.949 ±(99.9%) 3321.639 us/op
                 createNewObjects·p0.00:   214433.792 us/op
                 createNewObjects·p0.50:   223608.832 us/op
                 createNewObjects·p0.90:   233570.304 us/op
                 createNewObjects·p0.95:   238419.968 us/op
                 createNewObjects·p0.99:   242745.344 us/op
                 createNewObjects·p0.999:  242745.344 us/op
                 createNewObjects·p0.9999: 242745.344 us/op
                 createNewObjects·p1.00:   242745.344 us/op

Iteration   9: 226212.796 ±(99.9%) 2746.443 us/op
                 createNewObjects·p0.00:   215482.368 us/op
                 createNewObjects·p0.50:   225968.128 us/op
                 createNewObjects·p0.90:   234304.307 us/op
                 createNewObjects·p0.95:   235615.027 us/op
                 createNewObjects·p0.99:   236191.744 us/op
                 createNewObjects·p0.999:  236191.744 us/op
                 createNewObjects·p0.9999: 236191.744 us/op
                 createNewObjects·p1.00:   236191.744 us/op

Iteration  10: 226107.938 ±(99.9%) 2725.027 us/op
                 createNewObjects·p0.00:   216268.800 us/op
                 createNewObjects·p0.50:   225968.128 us/op
                 createNewObjects·p0.90:   233255.731 us/op
                 createNewObjects·p0.95:   236611.174 us/op
                 createNewObjects·p0.99:   237502.464 us/op
                 createNewObjects·p0.999:  237502.464 us/op
                 createNewObjects·p0.9999: 237502.464 us/op
                 createNewObjects·p1.00:   237502.464 us/op

Iteration  11: 224849.647 ±(99.9%) 2493.845 us/op
                 createNewObjects·p0.00:   215744.512 us/op
                 createNewObjects·p0.50:   224919.552 us/op
                 createNewObjects·p0.90:   229376.000 us/op
                 createNewObjects·p0.95:   229559.501 us/op
                 createNewObjects·p0.99:   246153.216 us/op
                 createNewObjects·p0.999:  246153.216 us/op
                 createNewObjects·p0.9999: 246153.216 us/op
                 createNewObjects·p1.00:   246153.216 us/op

Iteration  12: 223940.881 ±(99.9%) 2771.620 us/op
                 createNewObjects·p0.00:   214433.792 us/op
                 createNewObjects·p0.50:   223608.832 us/op
                 createNewObjects·p0.90:   231945.011 us/op
                 createNewObjects·p0.95:   233072.230 us/op
                 createNewObjects·p0.99:   235667.456 us/op
                 createNewObjects·p0.999:  235667.456 us/op
                 createNewObjects·p0.9999: 235667.456 us/op
                 createNewObjects·p1.00:   235667.456 us/op

Iteration  13: 226987.577 ±(99.9%) 2710.839 us/op
                 createNewObjects·p0.00:   214958.080 us/op
                 createNewObjects·p0.50:   227016.704 us/op
                 createNewObjects·p0.90:   234356.736 us/op
                 createNewObjects·p0.95:   234802.381 us/op
                 createNewObjects·p0.99:   235667.456 us/op
                 createNewObjects·p0.999:  235667.456 us/op
                 createNewObjects·p0.9999: 235667.456 us/op
                 createNewObjects·p1.00:   235667.456 us/op

Iteration  14: 225973.953 ±(99.9%) 2945.654 us/op
                 createNewObjects·p0.00:   215220.224 us/op
                 createNewObjects·p0.50:   225968.128 us/op
                 createNewObjects·p0.90:   232521.728 us/op
                 createNewObjects·p0.95:   237214.106 us/op
                 createNewObjects·p0.99:   242221.056 us/op
                 createNewObjects·p0.999:  242221.056 us/op
                 createNewObjects·p0.9999: 242221.056 us/op
                 createNewObjects·p1.00:   242221.056 us/op

Iteration  15: 227374.173 ±(99.9%) 2794.634 us/op
                 createNewObjects·p0.00:   211812.352 us/op
                 createNewObjects·p0.50:   227409.920 us/op
                 createNewObjects·p0.90:   234094.592 us/op
                 createNewObjects·p0.95:   237830.144 us/op
                 createNewObjects·p0.99:   241434.624 us/op
                 createNewObjects·p0.999:  241434.624 us/op
                 createNewObjects·p0.9999: 241434.624 us/op
                 createNewObjects·p1.00:   241434.624 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 673
  mean = 225725.070 ±(99.9%) 716.828 us/op

  Histogram, us/op:
    [210000.000, 215000.000) = 14 
    [215000.000, 220000.000) = 89 
    [220000.000, 225000.000) = 208 
    [225000.000, 230000.000) = 226 
    [230000.000, 235000.000) = 105 
    [235000.000, 240000.000) = 22 
    [240000.000, 245000.000) = 5 
    [245000.000, 250000.000) = 3 
    [250000.000, 255000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 211812.352 us/op
     p(50.0000) = 225705.984 us/op
     p(90.0000) = 232783.872 us/op
     p(95.0000) = 234881.024 us/op
     p(99.0000) = 241639.096 us/op
     p(99.9000) = 250347.520 us/op
     p(99.9900) = 250347.520 us/op
     p(99.9990) = 250347.520 us/op
     p(99.9999) = 250347.520 us/op
    p(100.0000) = 250347.520 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 67.39% complete, ETA 02:43:37
# Fork: 1 of 1
# Warmup Iteration   1: 227076.282 ±(99.9%) 2704.809 us/op
# Warmup Iteration   2: 227231.185 ±(99.9%) 2807.763 us/op
# Warmup Iteration   3: 227940.166 ±(99.9%) 2982.119 us/op
# Warmup Iteration   4: 226812.814 ±(99.9%) 2421.249 us/op
# Warmup Iteration   5: 227045.831 ±(99.9%) 2634.809 us/op
Iteration   1: 226469.114 ±(99.9%) 2269.850 us/op
                 createNewObjects·p0.00:   220725.248 us/op
                 createNewObjects·p0.50:   225443.840 us/op
                 createNewObjects·p0.90:   232364.442 us/op
                 createNewObjects·p0.95:   234330.522 us/op
                 createNewObjects·p0.99:   239075.328 us/op
                 createNewObjects·p0.999:  239075.328 us/op
                 createNewObjects·p0.9999: 239075.328 us/op
                 createNewObjects·p1.00:   239075.328 us/op

Iteration   2: 225140.918 ±(99.9%) 1743.547 us/op
                 createNewObjects·p0.00:   220463.104 us/op
                 createNewObjects·p0.50:   224395.264 us/op
                 createNewObjects·p0.90:   229690.573 us/op
                 createNewObjects·p0.95:   233491.661 us/op
                 createNewObjects·p0.99:   237502.464 us/op
                 createNewObjects·p0.999:  237502.464 us/op
                 createNewObjects·p0.9999: 237502.464 us/op
                 createNewObjects·p1.00:   237502.464 us/op

Iteration   3: 227147.776 ±(99.9%) 2231.375 us/op
                 createNewObjects·p0.00:   220725.248 us/op
                 createNewObjects·p0.50:   226361.344 us/op
                 createNewObjects·p0.90:   232259.584 us/op
                 createNewObjects·p0.95:   234160.128 us/op
                 createNewObjects·p0.99:   241696.768 us/op
                 createNewObjects·p0.999:  241696.768 us/op
                 createNewObjects·p0.9999: 241696.768 us/op
                 createNewObjects·p1.00:   241696.768 us/op

Iteration   4: 226801.163 ±(99.9%) 2212.768 us/op
                 createNewObjects·p0.00:   220725.248 us/op
                 createNewObjects·p0.50:   225968.128 us/op
                 createNewObjects·p0.90:   232102.298 us/op
                 createNewObjects·p0.95:   234933.453 us/op
                 createNewObjects·p0.99:   238813.184 us/op
                 createNewObjects·p0.999:  238813.184 us/op
                 createNewObjects·p0.9999: 238813.184 us/op
                 createNewObjects·p1.00:   238813.184 us/op

Iteration   5: 228607.441 ±(99.9%) 2552.736 us/op
                 createNewObjects·p0.00:   219152.384 us/op
                 createNewObjects·p0.50:   227672.064 us/op
                 createNewObjects·p0.90:   234618.880 us/op
                 createNewObjects·p0.95:   238288.896 us/op
                 createNewObjects·p0.99:   243007.488 us/op
                 createNewObjects·p0.999:  243007.488 us/op
                 createNewObjects·p0.9999: 243007.488 us/op
                 createNewObjects·p1.00:   243007.488 us/op

Iteration   6: 227844.841 ±(99.9%) 2338.135 us/op
                 createNewObjects·p0.00:   221511.680 us/op
                 createNewObjects·p0.50:   226754.560 us/op
                 createNewObjects·p0.90:   235274.240 us/op
                 createNewObjects·p0.95:   237436.928 us/op
                 createNewObjects·p0.99:   241434.624 us/op
                 createNewObjects·p0.999:  241434.624 us/op
                 createNewObjects·p0.9999: 241434.624 us/op
                 createNewObjects·p1.00:   241434.624 us/op

Iteration   7: 227338.426 ±(99.9%) 2498.652 us/op
                 createNewObjects·p0.00:   220200.960 us/op
                 createNewObjects·p0.50:   225968.128 us/op
                 createNewObjects·p0.90:   236060.672 us/op
                 createNewObjects·p0.95:   238223.360 us/op
                 createNewObjects·p0.99:   241172.480 us/op
                 createNewObjects·p0.999:  241172.480 us/op
                 createNewObjects·p0.9999: 241172.480 us/op
                 createNewObjects·p1.00:   241172.480 us/op

Iteration   8: 227338.426 ±(99.9%) 2393.459 us/op
                 createNewObjects·p0.00:   222298.112 us/op
                 createNewObjects·p0.50:   226230.272 us/op
                 createNewObjects·p0.90:   233308.160 us/op
                 createNewObjects·p0.95:   238878.720 us/op
                 createNewObjects·p0.99:   240386.048 us/op
                 createNewObjects·p0.999:  240386.048 us/op
                 createNewObjects·p0.9999: 240386.048 us/op
                 createNewObjects·p1.00:   240386.048 us/op

Iteration   9: 226142.891 ±(99.9%) 2020.703 us/op
                 createNewObjects·p0.00:   221249.536 us/op
                 createNewObjects·p0.50:   225181.696 us/op
                 createNewObjects·p0.90:   232521.728 us/op
                 createNewObjects·p0.95:   234802.381 us/op
                 createNewObjects·p0.99:   235667.456 us/op
                 createNewObjects·p0.999:  235667.456 us/op
                 createNewObjects·p0.9999: 235667.456 us/op
                 createNewObjects·p1.00:   235667.456 us/op

Iteration  10: 227308.637 ±(99.9%) 2545.417 us/op
                 createNewObjects·p0.00:   220200.960 us/op
                 createNewObjects·p0.50:   226361.344 us/op
                 createNewObjects·p0.90:   235012.096 us/op
                 createNewObjects·p0.95:   238092.288 us/op
                 createNewObjects·p0.99:   240910.336 us/op
                 createNewObjects·p0.999:  240910.336 us/op
                 createNewObjects·p0.9999: 240910.336 us/op
                 createNewObjects·p1.00:   240910.336 us/op

Iteration  11: 228756.387 ±(99.9%) 2533.443 us/op
                 createNewObjects·p0.00:   222035.968 us/op
                 createNewObjects·p0.50:   228327.424 us/op
                 createNewObjects·p0.90:   236191.744 us/op
                 createNewObjects·p0.95:   238354.432 us/op
                 createNewObjects·p0.99:   241434.624 us/op
                 createNewObjects·p0.999:  241434.624 us/op
                 createNewObjects·p0.9999: 241434.624 us/op
                 createNewObjects·p1.00:   241434.624 us/op

Iteration  12: 228238.057 ±(99.9%) 2482.114 us/op
                 createNewObjects·p0.00:   221249.536 us/op
                 createNewObjects·p0.50:   227672.064 us/op
                 createNewObjects·p0.90:   234487.808 us/op
                 createNewObjects·p0.95:   236716.032 us/op
                 createNewObjects·p0.99:   240386.048 us/op
                 createNewObjects·p0.999:  240386.048 us/op
                 createNewObjects·p0.9999: 240386.048 us/op
                 createNewObjects·p1.00:   240386.048 us/op

Iteration  13: 226900.196 ±(99.9%) 2281.176 us/op
                 createNewObjects·p0.00:   220987.392 us/op
                 createNewObjects·p0.50:   225705.984 us/op
                 createNewObjects·p0.90:   233203.302 us/op
                 createNewObjects·p0.95:   238000.538 us/op
                 createNewObjects·p0.99:   238813.184 us/op
                 createNewObjects·p0.999:  238813.184 us/op
                 createNewObjects·p0.9999: 238813.184 us/op
                 createNewObjects·p1.00:   238813.184 us/op

Iteration  14: 227173.990 ±(99.9%) 2149.892 us/op
                 createNewObjects·p0.00:   220463.104 us/op
                 createNewObjects·p0.50:   226754.560 us/op
                 createNewObjects·p0.90:   232469.299 us/op
                 createNewObjects·p0.95:   234985.882 us/op
                 createNewObjects·p0.99:   236453.888 us/op
                 createNewObjects·p0.999:  236453.888 us/op
                 createNewObjects·p0.9999: 236453.888 us/op
                 createNewObjects·p1.00:   236453.888 us/op

Iteration  15: 226888.545 ±(99.9%) 2470.942 us/op
                 createNewObjects·p0.00:   221511.680 us/op
                 createNewObjects·p0.50:   225705.984 us/op
                 createNewObjects·p0.90:   232574.157 us/op
                 createNewObjects·p0.95:   238210.253 us/op
                 createNewObjects·p0.99:   243793.920 us/op
                 createNewObjects·p0.999:  243793.920 us/op
                 createNewObjects·p0.9999: 243793.920 us/op
                 createNewObjects·p1.00:   243793.920 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 667
  mean = 227199.065 ±(99.9%) 567.485 us/op

  Histogram, us/op:
    [210000.000, 212500.000) = 0 
    [212500.000, 215000.000) = 0 
    [215000.000, 217500.000) = 0 
    [217500.000, 220000.000) = 1 
    [220000.000, 222500.000) = 56 
    [222500.000, 225000.000) = 209 
    [225000.000, 227500.000) = 136 
    [227500.000, 230000.000) = 104 
    [230000.000, 232500.000) = 80 
    [232500.000, 235000.000) = 40 
    [235000.000, 237500.000) = 19 
    [237500.000, 240000.000) = 13 
    [240000.000, 242500.000) = 7 
    [242500.000, 245000.000) = 2 
    [245000.000, 247500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 219152.384 us/op
     p(50.0000) = 226230.272 us/op
     p(90.0000) = 233308.160 us/op
     p(95.0000) = 235667.456 us/op
     p(99.0000) = 240994.222 us/op
     p(99.9000) = 243793.920 us/op
     p(99.9900) = 243793.920 us/op
     p(99.9990) = 243793.920 us/op
     p(99.9999) = 243793.920 us/op
    p(100.0000) = 243793.920 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 68.11% complete, ETA 02:39:58
# Fork: 1 of 1
# Warmup Iteration   1: 205515.546 ±(99.9%) 6169.216 us/op
# Warmup Iteration   2: 208003.239 ±(99.9%) 2891.747 us/op
# Warmup Iteration   3: 207869.492 ±(99.9%) 2152.346 us/op
# Warmup Iteration   4: 207388.003 ±(99.9%) 2123.244 us/op
# Warmup Iteration   5: 208110.237 ±(99.9%) 2355.048 us/op
Iteration   1: 209108.992 ±(99.9%) 2245.293 us/op
                 createNewObjects·p0.00:   202113.024 us/op
                 createNewObjects·p0.50:   209190.912 us/op
                 createNewObjects·p0.90:   215272.653 us/op
                 createNewObjects·p0.95:   218785.382 us/op
                 createNewObjects·p0.99:   223084.544 us/op
                 createNewObjects·p0.999:  223084.544 us/op
                 createNewObjects·p0.9999: 223084.544 us/op
                 createNewObjects·p1.00:   223084.544 us/op

Iteration   2: 207912.291 ±(99.9%) 1961.188 us/op
                 createNewObjects·p0.00:   201850.880 us/op
                 createNewObjects·p0.50:   206569.472 us/op
                 createNewObjects·p0.90:   213385.216 us/op
                 createNewObjects·p0.95:   214827.008 us/op
                 createNewObjects·p0.99:   220463.104 us/op
                 createNewObjects·p0.999:  220463.104 us/op
                 createNewObjects·p0.9999: 220463.104 us/op
                 createNewObjects·p1.00:   220463.104 us/op

Iteration   3: 207200.758 ±(99.9%) 2140.634 us/op
                 createNewObjects·p0.00:   202899.456 us/op
                 createNewObjects·p0.50:   205783.040 us/op
                 createNewObjects·p0.90:   212336.640 us/op
                 createNewObjects·p0.95:   218890.240 us/op
                 createNewObjects·p0.99:   220463.104 us/op
                 createNewObjects·p0.999:  220463.104 us/op
                 createNewObjects·p0.9999: 220463.104 us/op
                 createNewObjects·p1.00:   220463.104 us/op

Iteration   4: 207741.095 ±(99.9%) 2500.026 us/op
                 createNewObjects·p0.00:   202637.312 us/op
                 createNewObjects·p0.50:   206045.184 us/op
                 createNewObjects·p0.90:   214958.080 us/op
                 createNewObjects·p0.95:   220987.392 us/op
                 createNewObjects·p0.99:   222560.256 us/op
                 createNewObjects·p0.999:  222560.256 us/op
                 createNewObjects·p0.9999: 222560.256 us/op
                 createNewObjects·p1.00:   222560.256 us/op

Iteration   5: 208094.187 ±(99.9%) 2506.131 us/op
                 createNewObjects·p0.00:   201326.592 us/op
                 createNewObjects·p0.50:   206831.616 us/op
                 createNewObjects·p0.90:   216268.800 us/op
                 createNewObjects·p0.95:   219152.384 us/op
                 createNewObjects·p0.99:   222560.256 us/op
                 createNewObjects·p0.999:  222560.256 us/op
                 createNewObjects·p0.9999: 222560.256 us/op
                 createNewObjects·p1.00:   222560.256 us/op

Iteration   6: 208126.286 ±(99.9%) 2505.520 us/op
                 createNewObjects·p0.00:   201588.736 us/op
                 createNewObjects·p0.50:   206569.472 us/op
                 createNewObjects·p0.90:   213909.504 us/op
                 createNewObjects·p0.95:   221118.464 us/op
                 createNewObjects·p0.99:   224657.408 us/op
                 createNewObjects·p0.999:  224657.408 us/op
                 createNewObjects·p0.9999: 224657.408 us/op
                 createNewObjects·p1.00:   224657.408 us/op

Iteration   7: 209092.608 ±(99.9%) 2285.458 us/op
                 createNewObjects·p0.00:   203161.600 us/op
                 createNewObjects·p0.50:   207486.976 us/op
                 createNewObjects·p0.90:   215456.154 us/op
                 createNewObjects·p0.95:   217723.699 us/op
                 createNewObjects·p0.99:   220725.248 us/op
                 createNewObjects·p0.999:  220725.248 us/op
                 createNewObjects·p0.9999: 220725.248 us/op
                 createNewObjects·p1.00:   220725.248 us/op

Iteration   8: 207516.400 ±(99.9%) 2397.522 us/op
                 createNewObjects·p0.00:   201064.448 us/op
                 createNewObjects·p0.50:   206831.616 us/op
                 createNewObjects·p0.90:   212598.784 us/op
                 createNewObjects·p0.95:   219807.744 us/op
                 createNewObjects·p0.99:   224133.120 us/op
                 createNewObjects·p0.999:  224133.120 us/op
                 createNewObjects·p0.9999: 224133.120 us/op
                 createNewObjects·p1.00:   224133.120 us/op

Iteration   9: 208606.549 ±(99.9%) 3253.417 us/op
                 createNewObjects·p0.00:   201850.880 us/op
                 createNewObjects·p0.50:   206045.184 us/op
                 createNewObjects·p0.90:   219440.742 us/op
                 createNewObjects·p0.95:   223477.760 us/op
                 createNewObjects·p0.99:   231735.296 us/op
                 createNewObjects·p0.999:  231735.296 us/op
                 createNewObjects·p0.9999: 231735.296 us/op
                 createNewObjects·p1.00:   231735.296 us/op

Iteration  10: 206665.770 ±(99.9%) 1582.574 us/op
                 createNewObjects·p0.00:   201850.880 us/op
                 createNewObjects·p0.50:   205783.040 us/op
                 createNewObjects·p0.90:   211025.920 us/op
                 createNewObjects·p0.95:   212467.712 us/op
                 createNewObjects·p0.99:   214695.936 us/op
                 createNewObjects·p0.999:  214695.936 us/op
                 createNewObjects·p0.9999: 214695.936 us/op
                 createNewObjects·p1.00:   214695.936 us/op

Iteration  11: 208284.331 ±(99.9%) 2067.949 us/op
                 createNewObjects·p0.00:   201588.736 us/op
                 createNewObjects·p0.50:   207749.120 us/op
                 createNewObjects·p0.90:   214250.291 us/op
                 createNewObjects·p0.95:   216032.870 us/op
                 createNewObjects·p0.99:   222298.112 us/op
                 createNewObjects·p0.999:  222298.112 us/op
                 createNewObjects·p0.9999: 222298.112 us/op
                 createNewObjects·p1.00:   222298.112 us/op

Iteration  12: 207516.400 ±(99.9%) 2234.636 us/op
                 createNewObjects·p0.00:   201326.592 us/op
                 createNewObjects·p0.50:   207355.904 us/op
                 createNewObjects·p0.90:   212336.640 us/op
                 createNewObjects·p0.95:   214433.792 us/op
                 createNewObjects·p0.99:   226754.560 us/op
                 createNewObjects·p0.999:  226754.560 us/op
                 createNewObjects·p0.9999: 226754.560 us/op
                 createNewObjects·p1.00:   226754.560 us/op

Iteration  13: 209431.211 ±(99.9%) 2772.349 us/op
                 createNewObjects·p0.00:   201064.448 us/op
                 createNewObjects·p0.50:   209059.840 us/op
                 createNewObjects·p0.90:   214748.365 us/op
                 createNewObjects·p0.95:   221577.216 us/op
                 createNewObjects·p0.99:   227278.848 us/op
                 createNewObjects·p0.999:  227278.848 us/op
                 createNewObjects·p0.9999: 227278.848 us/op
                 createNewObjects·p1.00:   227278.848 us/op

Iteration  14: 208235.179 ±(99.9%) 2279.188 us/op
                 createNewObjects·p0.00:   201588.736 us/op
                 createNewObjects·p0.50:   206962.688 us/op
                 createNewObjects·p0.90:   215167.795 us/op
                 createNewObjects·p0.95:   218654.310 us/op
                 createNewObjects·p0.99:   221773.824 us/op
                 createNewObjects·p0.999:  221773.824 us/op
                 createNewObjects·p0.9999: 221773.824 us/op
                 createNewObjects·p1.00:   221773.824 us/op

Iteration  15: 208131.636 ±(99.9%) 1971.652 us/op
                 createNewObjects·p0.00:   202113.024 us/op
                 createNewObjects·p0.50:   206831.616 us/op
                 createNewObjects·p0.90:   213909.504 us/op
                 createNewObjects·p0.95:   215482.368 us/op
                 createNewObjects·p0.99:   217317.376 us/op
                 createNewObjects·p0.999:  217317.376 us/op
                 createNewObjects·p0.9999: 217317.376 us/op
                 createNewObjects·p1.00:   217317.376 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 729
  mean = 208105.298 ±(99.9%) 570.659 us/op

  Histogram, us/op:
    [200000.000, 202500.000) = 24 
    [202500.000, 205000.000) = 202 
    [205000.000, 207500.000) = 175 
    [207500.000, 210000.000) = 120 
    [210000.000, 212500.000) = 101 
    [212500.000, 215000.000) = 52 
    [215000.000, 217500.000) = 18 
    [217500.000, 220000.000) = 17 
    [220000.000, 222500.000) = 9 
    [222500.000, 225000.000) = 8 
    [225000.000, 227500.000) = 2 
    [227500.000, 230000.000) = 0 
    [230000.000, 232500.000) = 1 
    [232500.000, 235000.000) = 0 
    [235000.000, 237500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 201064.448 us/op
     p(50.0000) = 206831.616 us/op
     p(90.0000) = 214171.648 us/op
     p(95.0000) = 217579.520 us/op
     p(99.0000) = 223346.688 us/op
     p(99.9000) = 231735.296 us/op
     p(99.9900) = 231735.296 us/op
     p(99.9990) = 231735.296 us/op
     p(99.9999) = 231735.296 us/op
    p(100.0000) = 231735.296 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 68.84% complete, ETA 02:36:19
# Fork: 1 of 1
# Warmup Iteration   1: 205718.841 ±(99.9%) 1941.486 us/op
# Warmup Iteration   2: 206173.581 ±(99.9%) 2728.636 us/op
# Warmup Iteration   3: 205718.841 ±(99.9%) 2108.126 us/op
# Warmup Iteration   4: 205440.648 ±(99.9%) 2009.743 us/op
# Warmup Iteration   5: 205408.549 ±(99.9%) 2378.913 us/op
Iteration   1: 205306.901 ±(99.9%) 2005.893 us/op
                 createNewObjects·p0.00:   198967.296 us/op
                 createNewObjects·p0.50:   203948.032 us/op
                 createNewObjects·p0.90:   212336.640 us/op
                 createNewObjects·p0.95:   212992.000 us/op
                 createNewObjects·p0.99:   218628.096 us/op
                 createNewObjects·p0.999:  218628.096 us/op
                 createNewObjects·p0.9999: 218628.096 us/op
                 createNewObjects·p1.00:   218628.096 us/op

Iteration   2: 205296.201 ±(99.9%) 2943.163 us/op
                 createNewObjects·p0.00:   199753.728 us/op
                 createNewObjects·p0.50:   202899.456 us/op
                 createNewObjects·p0.90:   212336.640 us/op
                 createNewObjects·p0.95:   221118.464 us/op
                 createNewObjects·p0.99:   225443.840 us/op
                 createNewObjects·p0.999:  225443.840 us/op
                 createNewObjects·p0.9999: 225443.840 us/op
                 createNewObjects·p1.00:   225443.840 us/op

Iteration   3: 205478.097 ±(99.9%) 2817.080 us/op
                 createNewObjects·p0.00:   199229.440 us/op
                 createNewObjects·p0.50:   203948.032 us/op
                 createNewObjects·p0.90:   213385.216 us/op
                 createNewObjects·p0.95:   218497.024 us/op
                 createNewObjects·p0.99:   228065.280 us/op
                 createNewObjects·p0.999:  228065.280 us/op
                 createNewObjects·p0.9999: 228065.280 us/op
                 createNewObjects·p1.00:   228065.280 us/op

Iteration   4: 205355.050 ±(99.9%) 2228.987 us/op
                 createNewObjects·p0.00:   200015.872 us/op
                 createNewObjects·p0.50:   204210.176 us/op
                 createNewObjects·p0.90:   213123.072 us/op
                 createNewObjects·p0.95:   215613.440 us/op
                 createNewObjects·p0.99:   217317.376 us/op
                 createNewObjects·p0.999:  217317.376 us/op
                 createNewObjects·p0.9999: 217317.376 us/op
                 createNewObjects·p1.00:   217317.376 us/op

Iteration   5: 204985.908 ±(99.9%) 1869.993 us/op
                 createNewObjects·p0.00:   199491.584 us/op
                 createNewObjects·p0.50:   204210.176 us/op
                 createNewObjects·p0.90:   210763.776 us/op
                 createNewObjects·p0.95:   211812.352 us/op
                 createNewObjects·p0.99:   215220.224 us/op
                 createNewObjects·p0.999:  215220.224 us/op
                 createNewObjects·p0.9999: 215220.224 us/op
                 createNewObjects·p1.00:   215220.224 us/op

Iteration   6: 205643.943 ±(99.9%) 1709.997 us/op
                 createNewObjects·p0.00:   198967.296 us/op
                 createNewObjects·p0.50:   205783.040 us/op
                 createNewObjects·p0.90:   210501.632 us/op
                 createNewObjects·p0.95:   211550.208 us/op
                 createNewObjects·p0.99:   211812.352 us/op
                 createNewObjects·p0.999:  211812.352 us/op
                 createNewObjects·p0.9999: 211812.352 us/op
                 createNewObjects·p1.00:   211812.352 us/op

Iteration   7: 204643.516 ±(99.9%) 2336.520 us/op
                 createNewObjects·p0.00:   199491.584 us/op
                 createNewObjects·p0.50:   203161.600 us/op
                 createNewObjects·p0.90:   213385.216 us/op
                 createNewObjects·p0.95:   215220.224 us/op
                 createNewObjects·p0.99:   215482.368 us/op
                 createNewObjects·p0.999:  215482.368 us/op
                 createNewObjects·p0.9999: 215482.368 us/op
                 createNewObjects·p1.00:   215482.368 us/op

Iteration   8: 207072.360 ±(99.9%) 3072.157 us/op
                 createNewObjects·p0.00:   200015.872 us/op
                 createNewObjects·p0.50:   205783.040 us/op
                 createNewObjects·p0.90:   216268.800 us/op
                 createNewObjects·p0.95:   217448.448 us/op
                 createNewObjects·p0.99:   230948.864 us/op
                 createNewObjects·p0.999:  230948.864 us/op
                 createNewObjects·p0.9999: 230948.864 us/op
                 createNewObjects·p1.00:   230948.864 us/op

Iteration   9: 205456.697 ±(99.9%) 2071.541 us/op
                 createNewObjects·p0.00:   198705.152 us/op
                 createNewObjects·p0.50:   204996.608 us/op
                 createNewObjects·p0.90:   211812.352 us/op
                 createNewObjects·p0.95:   213516.288 us/op
                 createNewObjects·p0.99:   216006.656 us/op
                 createNewObjects·p0.999:  216006.656 us/op
                 createNewObjects·p0.9999: 216006.656 us/op
                 createNewObjects·p1.00:   216006.656 us/op

Iteration  10: 205906.087 ±(99.9%) 2801.717 us/op
                 createNewObjects·p0.00:   197656.576 us/op
                 createNewObjects·p0.50:   203948.032 us/op
                 createNewObjects·p0.90:   216268.800 us/op
                 createNewObjects·p0.95:   219807.744 us/op
                 createNewObjects·p0.99:   220987.392 us/op
                 createNewObjects·p0.999:  220987.392 us/op
                 createNewObjects·p0.9999: 220987.392 us/op
                 createNewObjects·p1.00:   220987.392 us/op

Iteration  11: 205986.335 ±(99.9%) 2767.838 us/op
                 createNewObjects·p0.00:   199229.440 us/op
                 createNewObjects·p0.50:   204472.320 us/op
                 createNewObjects·p0.90:   215744.512 us/op
                 createNewObjects·p0.95:   218234.880 us/op
                 createNewObjects·p0.99:   227540.992 us/op
                 createNewObjects·p0.999:  227540.992 us/op
                 createNewObjects·p0.9999: 227540.992 us/op
                 createNewObjects·p1.00:   227540.992 us/op

Iteration  12: 206596.221 ±(99.9%) 2646.377 us/op
                 createNewObjects·p0.00:   199753.728 us/op
                 createNewObjects·p0.50:   204472.320 us/op
                 createNewObjects·p0.90:   215482.368 us/op
                 createNewObjects·p0.95:   218890.240 us/op
                 createNewObjects·p0.99:   222035.968 us/op
                 createNewObjects·p0.999:  222035.968 us/op
                 createNewObjects·p0.9999: 222035.968 us/op
                 createNewObjects·p1.00:   222035.968 us/op

Iteration  13: 207527.100 ±(99.9%) 2666.552 us/op
                 createNewObjects·p0.00:   201326.592 us/op
                 createNewObjects·p0.50:   206045.184 us/op
                 createNewObjects·p0.90:   214171.648 us/op
                 createNewObjects·p0.95:   217579.520 us/op
                 createNewObjects·p0.99:   228851.712 us/op
                 createNewObjects·p0.999:  228851.712 us/op
                 createNewObjects·p0.9999: 228851.712 us/op
                 createNewObjects·p1.00:   228851.712 us/op

Iteration  14: 206414.326 ±(99.9%) 2051.061 us/op
                 createNewObjects·p0.00:   199753.728 us/op
                 createNewObjects·p0.50:   204996.608 us/op
                 createNewObjects·p0.90:   212074.496 us/op
                 createNewObjects·p0.95:   213516.288 us/op
                 createNewObjects·p0.99:   216268.800 us/op
                 createNewObjects·p0.999:  216268.800 us/op
                 createNewObjects·p0.9999: 216268.800 us/op
                 createNewObjects·p1.00:   216268.800 us/op

Iteration  15: 206692.519 ±(99.9%) 2191.047 us/op
                 createNewObjects·p0.00:   200540.160 us/op
                 createNewObjects·p0.50:   204996.608 us/op
                 createNewObjects·p0.90:   213909.504 us/op
                 createNewObjects·p0.95:   214958.080 us/op
                 createNewObjects·p0.99:   218628.096 us/op
                 createNewObjects·p0.999:  218628.096 us/op
                 createNewObjects·p0.9999: 218628.096 us/op
                 createNewObjects·p1.00:   218628.096 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 735
  mean = 205890.751 ±(99.9%) 597.621 us/op

  Histogram, us/op:
    [190000.000, 195000.000) = 0 
    [195000.000, 200000.000) = 18 
    [200000.000, 205000.000) = 401 
    [205000.000, 210000.000) = 188 
    [210000.000, 215000.000) = 84 
    [215000.000, 220000.000) = 33 
    [220000.000, 225000.000) = 6 
    [225000.000, 230000.000) = 4 
    [230000.000, 235000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 197656.576 us/op
     p(50.0000) = 204472.320 us/op
     p(90.0000) = 212336.640 us/op
     p(95.0000) = 215482.368 us/op
     p(99.0000) = 221585.080 us/op
     p(99.9000) = 230948.864 us/op
     p(99.9900) = 230948.864 us/op
     p(99.9990) = 230948.864 us/op
     p(99.9999) = 230948.864 us/op
    p(100.0000) = 230948.864 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 69.56% complete, ETA 02:32:40
# Fork: 1 of 1
# Warmup Iteration   1: 205515.546 ±(99.9%) 2160.923 us/op
# Warmup Iteration   2: 206398.276 ±(99.9%) 2628.864 us/op
# Warmup Iteration   3: 204820.062 ±(99.9%) 2137.692 us/op
# Warmup Iteration   4: 205076.856 ±(99.9%) 1975.880 us/op
# Warmup Iteration   5: 204445.571 ±(99.9%) 2689.565 us/op
Iteration   1: 205012.658 ±(99.9%) 2210.993 us/op
                 createNewObjects·p0.00:   200015.872 us/op
                 createNewObjects·p0.50:   203948.032 us/op
                 createNewObjects·p0.90:   212598.784 us/op
                 createNewObjects·p0.95:   215613.440 us/op
                 createNewObjects·p0.99:   216793.088 us/op
                 createNewObjects·p0.999:  216793.088 us/op
                 createNewObjects·p0.9999: 216793.088 us/op
                 createNewObjects·p1.00:   216793.088 us/op

Iteration   2: 206269.879 ±(99.9%) 2438.668 us/op
                 createNewObjects·p0.00:   198967.296 us/op
                 createNewObjects·p0.50:   205520.896 us/op
                 createNewObjects·p0.90:   213647.360 us/op
                 createNewObjects·p0.95:   217317.376 us/op
                 createNewObjects·p0.99:   218365.952 us/op
                 createNewObjects·p0.999:  218365.952 us/op
                 createNewObjects·p0.9999: 218365.952 us/op
                 createNewObjects·p1.00:   218365.952 us/op

Iteration   3: 206435.725 ±(99.9%) 2644.733 us/op
                 createNewObjects·p0.00:   199753.728 us/op
                 createNewObjects·p0.50:   205520.896 us/op
                 createNewObjects·p0.90:   212074.496 us/op
                 createNewObjects·p0.95:   218890.240 us/op
                 createNewObjects·p0.99:   221773.824 us/op
                 createNewObjects·p0.999:  221773.824 us/op
                 createNewObjects·p0.9999: 221773.824 us/op
                 createNewObjects·p1.00:   221773.824 us/op

Iteration   4: 205237.352 ±(99.9%) 2438.497 us/op
                 createNewObjects·p0.00:   199491.584 us/op
                 createNewObjects·p0.50:   203161.600 us/op
                 createNewObjects·p0.90:   211812.352 us/op
                 createNewObjects·p0.95:   215482.368 us/op
                 createNewObjects·p0.99:   218628.096 us/op
                 createNewObjects·p0.999:  218628.096 us/op
                 createNewObjects·p0.9999: 218628.096 us/op
                 createNewObjects·p1.00:   218628.096 us/op

Iteration   5: 204750.514 ±(99.9%) 2008.350 us/op
                 createNewObjects·p0.00:   199229.440 us/op
                 createNewObjects·p0.50:   203161.600 us/op
                 createNewObjects·p0.90:   210501.632 us/op
                 createNewObjects·p0.95:   212860.928 us/op
                 createNewObjects·p0.99:   218103.808 us/op
                 createNewObjects·p0.999:  218103.808 us/op
                 createNewObjects·p0.9999: 218103.808 us/op
                 createNewObjects·p1.00:   218103.808 us/op

Iteration   6: 206243.129 ±(99.9%) 2431.966 us/op
                 createNewObjects·p0.00:   200278.016 us/op
                 createNewObjects·p0.50:   205258.752 us/op
                 createNewObjects·p0.90:   212336.640 us/op
                 createNewObjects·p0.95:   217055.232 us/op
                 createNewObjects·p0.99:   219676.672 us/op
                 createNewObjects·p0.999:  219676.672 us/op
                 createNewObjects·p0.9999: 219676.672 us/op
                 createNewObjects·p1.00:   219676.672 us/op

Iteration   7: 205708.142 ±(99.9%) 2621.405 us/op
                 createNewObjects·p0.00:   199229.440 us/op
                 createNewObjects·p0.50:   205520.896 us/op
                 createNewObjects·p0.90:   213385.216 us/op
                 createNewObjects·p0.95:   218103.808 us/op
                 createNewObjects·p0.99:   221249.536 us/op
                 createNewObjects·p0.999:  221249.536 us/op
                 createNewObjects·p0.9999: 221249.536 us/op
                 createNewObjects·p1.00:   221249.536 us/op

Iteration   8: 205820.489 ±(99.9%) 2418.716 us/op
                 createNewObjects·p0.00:   199491.584 us/op
                 createNewObjects·p0.50:   204734.464 us/op
                 createNewObjects·p0.90:   212074.496 us/op
                 createNewObjects·p0.95:   216006.656 us/op
                 createNewObjects·p0.99:   222560.256 us/op
                 createNewObjects·p0.999:  222560.256 us/op
                 createNewObjects·p0.9999: 222560.256 us/op
                 createNewObjects·p1.00:   222560.256 us/op

Iteration   9: 206874.415 ±(99.9%) 2124.547 us/op
                 createNewObjects·p0.00:   200540.160 us/op
                 createNewObjects·p0.50:   206307.328 us/op
                 createNewObjects·p0.90:   213123.072 us/op
                 createNewObjects·p0.95:   215351.296 us/op
                 createNewObjects·p0.99:   217317.376 us/op
                 createNewObjects·p0.999:  217317.376 us/op
                 createNewObjects·p0.9999: 217317.376 us/op
                 createNewObjects·p1.00:   217317.376 us/op

Iteration  10: 206034.484 ±(99.9%) 2348.076 us/op
                 createNewObjects·p0.00:   200540.160 us/op
                 createNewObjects·p0.50:   204734.464 us/op
                 createNewObjects·p0.90:   211025.920 us/op
                 createNewObjects·p0.95:   218497.024 us/op
                 createNewObjects·p0.99:   221511.680 us/op
                 createNewObjects·p0.999:  221511.680 us/op
                 createNewObjects·p0.9999: 221511.680 us/op
                 createNewObjects·p1.00:   221511.680 us/op

Iteration  11: 206093.333 ±(99.9%) 2470.210 us/op
                 createNewObjects·p0.00:   198180.864 us/op
                 createNewObjects·p0.50:   204472.320 us/op
                 createNewObjects·p0.90:   213647.360 us/op
                 createNewObjects·p0.95:   216662.016 us/op
                 createNewObjects·p0.99:   220463.104 us/op
                 createNewObjects·p0.999:  220463.104 us/op
                 createNewObjects·p0.9999: 220463.104 us/op
                 createNewObjects·p1.00:   220463.104 us/op

Iteration  12: 206013.085 ±(99.9%) 2615.459 us/op
                 createNewObjects·p0.00:   199491.584 us/op
                 createNewObjects·p0.50:   204472.320 us/op
                 createNewObjects·p0.90:   213385.216 us/op
                 createNewObjects·p0.95:   218759.168 us/op
                 createNewObjects·p0.99:   221511.680 us/op
                 createNewObjects·p0.999:  221511.680 us/op
                 createNewObjects·p0.9999: 221511.680 us/op
                 createNewObjects·p1.00:   221511.680 us/op

Iteration  13: 205959.586 ±(99.9%) 2306.965 us/op
                 createNewObjects·p0.00:   199753.728 us/op
                 createNewObjects·p0.50:   204472.320 us/op
                 createNewObjects·p0.90:   212074.496 us/op
                 createNewObjects·p0.95:   217579.520 us/op
                 createNewObjects·p0.99:   217841.664 us/op
                 createNewObjects·p0.999:  217841.664 us/op
                 createNewObjects·p0.9999: 217841.664 us/op
                 createNewObjects·p1.00:   217841.664 us/op

Iteration  14: 205504.846 ±(99.9%) 2575.739 us/op
                 createNewObjects·p0.00:   199753.728 us/op
                 createNewObjects·p0.50:   203948.032 us/op
                 createNewObjects·p0.90:   211025.920 us/op
                 createNewObjects·p0.95:   216924.160 us/op
                 createNewObjects·p0.99:   225443.840 us/op
                 createNewObjects·p0.999:  225443.840 us/op
                 createNewObjects·p0.9999: 225443.840 us/op
                 createNewObjects·p1.00:   225443.840 us/op

Iteration  15: 207045.611 ±(99.9%) 2819.797 us/op
                 createNewObjects·p0.00:   199491.584 us/op
                 createNewObjects·p0.50:   205520.896 us/op
                 createNewObjects·p0.90:   214433.792 us/op
                 createNewObjects·p0.95:   218497.024 us/op
                 createNewObjects·p0.99:   224919.552 us/op
                 createNewObjects·p0.999:  224919.552 us/op
                 createNewObjects·p0.9999: 224919.552 us/op
                 createNewObjects·p1.00:   224919.552 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 735
  mean = 205933.550 ±(99.9%) 592.915 us/op

  Histogram, us/op:
    [190000.000, 192500.000) = 0 
    [192500.000, 195000.000) = 0 
    [195000.000, 197500.000) = 0 
    [197500.000, 200000.000) = 17 
    [200000.000, 202500.000) = 200 
    [202500.000, 205000.000) = 167 
    [205000.000, 207500.000) = 109 
    [207500.000, 210000.000) = 113 
    [210000.000, 212500.000) = 56 
    [212500.000, 215000.000) = 28 
    [215000.000, 217500.000) = 22 
    [217500.000, 220000.000) = 14 
    [220000.000, 222500.000) = 6 
    [222500.000, 225000.000) = 2 
    [225000.000, 227500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 198180.864 us/op
     p(50.0000) = 204734.464 us/op
     p(90.0000) = 212441.498 us/op
     p(95.0000) = 216321.229 us/op
     p(99.0000) = 221060.792 us/op
     p(99.9000) = 225443.840 us/op
     p(99.9900) = 225443.840 us/op
     p(99.9990) = 225443.840 us/op
     p(99.9999) = 225443.840 us/op
    p(100.0000) = 225443.840 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 70.29% complete, ETA 02:29:01
# Fork: 1 of 1
# Warmup Iteration   1: 202747.412 ±(99.9%) 2441.359 us/op
# Warmup Iteration   2: 202532.454 ±(99.9%) 2762.706 us/op
# Warmup Iteration   3: 201693.594 ±(99.9%) 2844.230 us/op
# Warmup Iteration   4: 202364.682 ±(99.9%) 2798.545 us/op
# Warmup Iteration   5: 201856.123 ±(99.9%) 2590.184 us/op
Iteration   1: 202679.255 ±(99.9%) 3484.132 us/op
                 createNewObjects·p0.00:   195559.424 us/op
                 createNewObjects·p0.50:   200671.232 us/op
                 createNewObjects·p0.90:   210685.133 us/op
                 createNewObjects·p0.95:   219126.170 us/op
                 createNewObjects·p0.99:   233046.016 us/op
                 createNewObjects·p0.999:  233046.016 us/op
                 createNewObjects·p0.9999: 233046.016 us/op
                 createNewObjects·p1.00:   233046.016 us/op

Iteration   2: 201012.019 ±(99.9%) 2220.008 us/op
                 createNewObjects·p0.00:   195821.568 us/op
                 createNewObjects·p0.50:   199753.728 us/op
                 createNewObjects·p0.90:   206779.187 us/op
                 createNewObjects·p0.95:   207998.157 us/op
                 createNewObjects·p0.99:   220200.960 us/op
                 createNewObjects·p0.999:  220200.960 us/op
                 createNewObjects·p0.9999: 220200.960 us/op
                 createNewObjects·p1.00:   220200.960 us/op

Iteration   3: 201877.094 ±(99.9%) 2536.115 us/op
                 createNewObjects·p0.00:   194510.848 us/op
                 createNewObjects·p0.50:   200671.232 us/op
                 createNewObjects·p0.90:   209400.627 us/op
                 createNewObjects·p0.95:   213241.037 us/op
                 createNewObjects·p0.99:   213647.360 us/op
                 createNewObjects·p0.999:  213647.360 us/op
                 createNewObjects·p0.9999: 213647.360 us/op
                 createNewObjects·p1.00:   213647.360 us/op

Iteration   4: 201672.622 ±(99.9%) 2425.591 us/op
                 createNewObjects·p0.00:   194248.704 us/op
                 createNewObjects·p0.50:   200802.304 us/op
                 createNewObjects·p0.90:   208587.981 us/op
                 createNewObjects·p0.95:   213083.750 us/op
                 createNewObjects·p0.99:   214958.080 us/op
                 createNewObjects·p0.999:  214958.080 us/op
                 createNewObjects·p0.9999: 214958.080 us/op
                 createNewObjects·p1.00:   214958.080 us/op

Iteration   5: 203345.101 ±(99.9%) 2635.011 us/op
                 createNewObjects·p0.00:   195821.568 us/op
                 createNewObjects·p0.50:   201981.952 us/op
                 createNewObjects·p0.90:   209426.842 us/op
                 createNewObjects·p0.95:   214643.507 us/op
                 createNewObjects·p0.99:   219152.384 us/op
                 createNewObjects·p0.999:  219152.384 us/op
                 createNewObjects·p0.9999: 219152.384 us/op
                 createNewObjects·p1.00:   219152.384 us/op

Iteration   6: 202139.238 ±(99.9%) 2800.790 us/op
                 createNewObjects·p0.00:   195297.280 us/op
                 createNewObjects·p0.50:   200671.232 us/op
                 createNewObjects·p0.90:   209400.627 us/op
                 createNewObjects·p0.95:   215377.510 us/op
                 createNewObjects·p0.99:   217055.232 us/op
                 createNewObjects·p0.999:  217055.232 us/op
                 createNewObjects·p0.9999: 217055.232 us/op
                 createNewObjects·p1.00:   217055.232 us/op

Iteration   7: 201326.592 ±(99.9%) 1892.948 us/op
                 createNewObjects·p0.00:   195559.424 us/op
                 createNewObjects·p0.50:   200802.304 us/op
                 createNewObjects·p0.90:   206438.400 us/op
                 createNewObjects·p0.95:   209361.306 us/op
                 createNewObjects·p0.99:   213123.072 us/op
                 createNewObjects·p0.999:  213123.072 us/op
                 createNewObjects·p0.9999: 213123.072 us/op
                 createNewObjects·p1.00:   213123.072 us/op

Iteration   8: 201898.066 ±(99.9%) 2708.138 us/op
                 createNewObjects·p0.00:   194772.992 us/op
                 createNewObjects·p0.50:   200802.304 us/op
                 createNewObjects·p0.90:   207355.904 us/op
                 createNewObjects·p0.95:   212074.496 us/op
                 createNewObjects·p0.99:   227016.704 us/op
                 createNewObjects·p0.999:  227016.704 us/op
                 createNewObjects·p0.9999: 227016.704 us/op
                 createNewObjects·p1.00:   227016.704 us/op

Iteration   9: 202385.654 ±(99.9%) 3029.021 us/op
                 createNewObjects·p0.00:   195559.424 us/op
                 createNewObjects·p0.50:   200933.376 us/op
                 createNewObjects·p0.90:   209190.912 us/op
                 createNewObjects·p0.95:   217802.342 us/op
                 createNewObjects·p0.99:   226492.416 us/op
                 createNewObjects·p0.999:  226492.416 us/op
                 createNewObjects·p0.9999: 226492.416 us/op
                 createNewObjects·p1.00:   226492.416 us/op

Iteration  10: 201746.022 ±(99.9%) 2398.742 us/op
                 createNewObjects·p0.00:   195821.568 us/op
                 createNewObjects·p0.50:   199753.728 us/op
                 createNewObjects·p0.90:   208142.336 us/op
                 createNewObjects·p0.95:   211681.280 us/op
                 createNewObjects·p0.99:   220987.392 us/op
                 createNewObjects·p0.999:  220987.392 us/op
                 createNewObjects·p0.9999: 220987.392 us/op
                 createNewObjects·p1.00:   220987.392 us/op

Iteration  11: 201436.692 ±(99.9%) 2591.458 us/op
                 createNewObjects·p0.00:   195297.280 us/op
                 createNewObjects·p0.50:   200409.088 us/op
                 createNewObjects·p0.90:   206752.973 us/op
                 createNewObjects·p0.95:   215547.904 us/op
                 createNewObjects·p0.99:   219676.672 us/op
                 createNewObjects·p0.999:  219676.672 us/op
                 createNewObjects·p0.9999: 219676.672 us/op
                 createNewObjects·p1.00:   219676.672 us/op

Iteration  12: 201630.679 ±(99.9%) 2823.413 us/op
                 createNewObjects·p0.00:   195821.568 us/op
                 createNewObjects·p0.50:   199622.656 us/op
                 createNewObjects·p0.90:   210187.059 us/op
                 createNewObjects·p0.95:   213241.037 us/op
                 createNewObjects·p0.99:   221511.680 us/op
                 createNewObjects·p0.999:  221511.680 us/op
                 createNewObjects·p0.9999: 221511.680 us/op
                 createNewObjects·p1.00:   221511.680 us/op

Iteration  13: 201934.766 ±(99.9%) 2543.178 us/op
                 createNewObjects·p0.00:   194772.992 us/op
                 createNewObjects·p0.50:   200278.016 us/op
                 createNewObjects·p0.90:   208378.266 us/op
                 createNewObjects·p0.95:   214066.790 us/op
                 createNewObjects·p0.99:   215744.512 us/op
                 createNewObjects·p0.999:  215744.512 us/op
                 createNewObjects·p0.9999: 215744.512 us/op
                 createNewObjects·p1.00:   215744.512 us/op

Iteration  14: 201919.037 ±(99.9%) 3397.073 us/op
                 createNewObjects·p0.00:   195297.280 us/op
                 createNewObjects·p0.50:   200146.944 us/op
                 createNewObjects·p0.90:   208850.125 us/op
                 createNewObjects·p0.95:   218811.597 us/op
                 createNewObjects·p0.99:   233832.448 us/op
                 createNewObjects·p0.999:  233832.448 us/op
                 createNewObjects·p0.9999: 233832.448 us/op
                 createNewObjects·p1.00:   233832.448 us/op

Iteration  15: 200755.118 ±(99.9%) 2936.114 us/op
                 createNewObjects·p0.00:   194248.704 us/op
                 createNewObjects·p0.50:   198836.224 us/op
                 createNewObjects·p0.90:   211078.349 us/op
                 createNewObjects·p0.95:   213686.682 us/op
                 createNewObjects·p0.99:   218628.096 us/op
                 createNewObjects·p0.999:  218628.096 us/op
                 createNewObjects·p0.9999: 218628.096 us/op
                 createNewObjects·p1.00:   218628.096 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 750
  mean = 201850.530 ±(99.9%) 661.861 us/op

  Histogram, us/op:
    [190000.000, 195000.000) = 8 
    [195000.000, 200000.000) = 336 
    [200000.000, 205000.000) = 241 
    [205000.000, 210000.000) = 112 
    [210000.000, 215000.000) = 31 
    [215000.000, 220000.000) = 15 
    [220000.000, 225000.000) = 3 
    [225000.000, 230000.000) = 2 
    [230000.000, 235000.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 194248.704 us/op
     p(50.0000) = 200409.088 us/op
     p(90.0000) = 208404.480 us/op
     p(95.0000) = 212978.893 us/op
     p(99.0000) = 219933.573 us/op
     p(99.9000) = 233832.448 us/op
     p(99.9900) = 233832.448 us/op
     p(99.9990) = 233832.448 us/op
     p(99.9999) = 233832.448 us/op
    p(100.0000) = 233832.448 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 71.01% complete, ETA 02:25:23
# Fork: 1 of 1
# Warmup Iteration   1: 1889184.427 ±(99.9%) 953651.434 us/op
# Warmup Iteration   2: 1832910.848 ±(99.9%) 213627.910 us/op
# Warmup Iteration   3: 1829415.595 ±(99.9%) 152523.510 us/op
# Warmup Iteration   4: 1819279.360 ±(99.9%) 240085.292 us/op
# Warmup Iteration   5: 1809842.176 ±(99.9%) 193656.283 us/op
Iteration   1: 1805298.347 ±(99.9%) 211100.997 us/op
                 fillHeap·p0.00:   1654652.928 us/op
                 fillHeap·p0.50:   1837105.152 us/op
                 fillHeap·p0.90:   1851785.216 us/op
                 fillHeap·p0.95:   1851785.216 us/op
                 fillHeap·p0.99:   1851785.216 us/op
                 fillHeap·p0.999:  1851785.216 us/op
                 fillHeap·p0.9999: 1851785.216 us/op
                 fillHeap·p1.00:   1851785.216 us/op

Iteration   2: 1815085.056 ±(99.9%) 131011.366 us/op
                 fillHeap·p0.00:   1721761.792 us/op
                 fillHeap·p0.50:   1830813.696 us/op
                 fillHeap·p0.90:   1849688.064 us/op
                 fillHeap·p0.95:   1849688.064 us/op
                 fillHeap·p0.99:   1849688.064 us/op
                 fillHeap·p0.999:  1849688.064 us/op
                 fillHeap·p0.9999: 1849688.064 us/op
                 fillHeap·p1.00:   1849688.064 us/op

Iteration   3: 1815784.107 ±(99.9%) 191732.909 us/op
                 fillHeap·p0.00:   1677721.600 us/op
                 fillHeap·p0.50:   1836056.576 us/op
                 fillHeap·p0.90:   1860173.824 us/op
                 fillHeap·p0.95:   1860173.824 us/op
                 fillHeap·p0.99:   1860173.824 us/op
                 fillHeap·p0.999:  1860173.824 us/op
                 fillHeap·p0.9999: 1860173.824 us/op
                 fillHeap·p1.00:   1860173.824 us/op

Iteration   4: 1827318.443 ±(99.9%) 155665.570 us/op
                 fillHeap·p0.00:   1719664.640 us/op
                 fillHeap·p0.50:   1847590.912 us/op
                 fillHeap·p0.90:   1866465.280 us/op
                 fillHeap·p0.95:   1866465.280 us/op
                 fillHeap·p0.99:   1866465.280 us/op
                 fillHeap·p0.999:  1866465.280 us/op
                 fillHeap·p0.9999: 1866465.280 us/op
                 fillHeap·p1.00:   1866465.280 us/op

Iteration   5: 1820677.461 ±(99.9%) 185722.390 us/op
                 fillHeap·p0.00:   1690304.512 us/op
                 fillHeap·p0.50:   1844445.184 us/op
                 fillHeap·p0.90:   1870659.584 us/op
                 fillHeap·p0.95:   1870659.584 us/op
                 fillHeap·p0.99:   1870659.584 us/op
                 fillHeap·p0.999:  1870659.584 us/op
                 fillHeap·p0.9999: 1870659.584 us/op
                 fillHeap·p1.00:   1870659.584 us/op

Iteration   6: 1813686.955 ±(99.9%) 157158.048 us/op
                 fillHeap·p0.00:   1702887.424 us/op
                 fillHeap·p0.50:   1830813.696 us/op
                 fillHeap·p0.90:   1851785.216 us/op
                 fillHeap·p0.95:   1851785.216 us/op
                 fillHeap·p0.99:   1851785.216 us/op
                 fillHeap·p0.999:  1851785.216 us/op
                 fillHeap·p0.9999: 1851785.216 us/op
                 fillHeap·p1.00:   1851785.216 us/op

Iteration   7: 1813337.429 ±(99.9%) 169083.820 us/op
                 fillHeap·p0.00:   1694498.816 us/op
                 fillHeap·p0.50:   1831862.272 us/op
                 fillHeap·p0.90:   1860173.824 us/op
                 fillHeap·p0.95:   1860173.824 us/op
                 fillHeap·p0.99:   1860173.824 us/op
                 fillHeap·p0.999:  1860173.824 us/op
                 fillHeap·p0.9999: 1860173.824 us/op
                 fillHeap·p1.00:   1860173.824 us/op

Iteration   8: 1813686.955 ±(99.9%) 155521.094 us/op
                 fillHeap·p0.00:   1709178.880 us/op
                 fillHeap·p0.50:   1821376.512 us/op
                 fillHeap·p0.90:   1860173.824 us/op
                 fillHeap·p0.95:   1860173.824 us/op
                 fillHeap·p0.99:   1860173.824 us/op
                 fillHeap·p0.999:  1860173.824 us/op
                 fillHeap·p0.9999: 1860173.824 us/op
                 fillHeap·p1.00:   1860173.824 us/op

Iteration   9: 1829066.069 ±(99.9%) 175575.952 us/op
                 fillHeap·p0.00:   1709178.880 us/op
                 fillHeap·p0.50:   1843396.608 us/op
                 fillHeap·p0.90:   1883242.496 us/op
                 fillHeap·p0.95:   1883242.496 us/op
                 fillHeap·p0.99:   1883242.496 us/op
                 fillHeap·p0.999:  1883242.496 us/op
                 fillHeap·p0.9999: 1883242.496 us/op
                 fillHeap·p1.00:   1883242.496 us/op

Iteration  10: 1807045.973 ±(99.9%) 190692.931 us/op
                 fillHeap·p0.00:   1673527.296 us/op
                 fillHeap·p0.50:   1833959.424 us/op
                 fillHeap·p0.90:   1849688.064 us/op
                 fillHeap·p0.95:   1849688.064 us/op
                 fillHeap·p0.99:   1849688.064 us/op
                 fillHeap·p0.999:  1849688.064 us/op
                 fillHeap·p0.9999: 1849688.064 us/op
                 fillHeap·p1.00:   1849688.064 us/op

Iteration  11: 1807745.024 ±(99.9%) 216394.476 us/op
                 fillHeap·p0.00:   1652555.776 us/op
                 fillHeap·p0.50:   1836056.576 us/op
                 fillHeap·p0.90:   1858076.672 us/op
                 fillHeap·p0.95:   1858076.672 us/op
                 fillHeap·p0.99:   1858076.672 us/op
                 fillHeap·p0.999:  1858076.672 us/op
                 fillHeap·p0.9999: 1858076.672 us/op
                 fillHeap·p1.00:   1858076.672 us/op

Iteration  12: 1821026.987 ±(99.9%) 156109.273 us/op
                 fillHeap·p0.00:   1711276.032 us/op
                 fillHeap·p0.50:   1839202.304 us/op
                 fillHeap·p0.90:   1862270.976 us/op
                 fillHeap·p0.95:   1862270.976 us/op
                 fillHeap·p0.99:   1862270.976 us/op
                 fillHeap·p0.999:  1862270.976 us/op
                 fillHeap·p0.9999: 1862270.976 us/op
                 fillHeap·p1.00:   1862270.976 us/op

Iteration  13: 1838852.779 ±(99.9%) 159213.156 us/op
                 fillHeap·p0.00:   1728053.248 us/op
                 fillHeap·p0.50:   1853882.368 us/op
                 fillHeap·p0.90:   1893728.256 us/op
                 fillHeap·p0.95:   1893728.256 us/op
                 fillHeap·p0.99:   1893728.256 us/op
                 fillHeap·p0.999:  1893728.256 us/op
                 fillHeap·p0.9999: 1893728.256 us/op
                 fillHeap·p1.00:   1893728.256 us/op

Iteration  14: 1818929.835 ±(99.9%) 189053.654 us/op
                 fillHeap·p0.00:   1684013.056 us/op
                 fillHeap·p0.50:   1841299.456 us/op
                 fillHeap·p0.90:   1864368.128 us/op
                 fillHeap·p0.95:   1864368.128 us/op
                 fillHeap·p0.99:   1864368.128 us/op
                 fillHeap·p0.999:  1864368.128 us/op
                 fillHeap·p0.9999: 1864368.128 us/op
                 fillHeap·p1.00:   1864368.128 us/op

Iteration  15: 1800055.467 ±(99.9%) 221157.917 us/op
                 fillHeap·p0.00:   1642070.016 us/op
                 fillHeap·p0.50:   1821376.512 us/op
                 fillHeap·p0.90:   1858076.672 us/op
                 fillHeap·p0.95:   1858076.672 us/op
                 fillHeap·p0.99:   1858076.672 us/op
                 fillHeap·p0.999:  1858076.672 us/op
                 fillHeap·p0.9999: 1858076.672 us/op
                 fillHeap·p1.00:   1858076.672 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 90
  mean = 1816506.459 ±(99.9%) 21362.651 us/op

  Histogram, us/op:
    [1600000.000, 1625000.000) = 0 
    [1625000.000, 1650000.000) = 1 
    [1650000.000, 1675000.000) = 3 
    [1675000.000, 1700000.000) = 4 
    [1700000.000, 1725000.000) = 6 
    [1725000.000, 1750000.000) = 1 
    [1750000.000, 1775000.000) = 0 
    [1775000.000, 1800000.000) = 0 
    [1800000.000, 1825000.000) = 17 
    [1825000.000, 1850000.000) = 35 
    [1850000.000, 1875000.000) = 21 

  Percentiles, us/op:
      p(0.0000) = 1642070.016 us/op
     p(50.0000) = 1837105.152 us/op
     p(90.0000) = 1860173.824 us/op
     p(95.0000) = 1867408.998 us/op
     p(99.0000) = 1893728.256 us/op
     p(99.9000) = 1893728.256 us/op
     p(99.9900) = 1893728.256 us/op
     p(99.9990) = 1893728.256 us/op
     p(99.9999) = 1893728.256 us/op
    p(100.0000) = 1893728.256 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 71.74% complete, ETA 02:21:51
# Fork: 1 of 1
# Warmup Iteration   1: 1103940.813 ±(99.9%) 209919.807 us/op
# Warmup Iteration   2: 1136306.859 ±(99.9%) 242418.315 us/op
# Warmup Iteration   3: 1137122.418 ±(99.9%) 228714.122 us/op
# Warmup Iteration   4: 1131063.979 ±(99.9%) 228054.579 us/op
# Warmup Iteration   5: 1136889.401 ±(99.9%) 236213.165 us/op
Iteration   1: 1130131.911 ±(99.9%) 243367.089 us/op
                 fillHeap·p0.00:   919601.152 us/op
                 fillHeap·p0.50:   1170210.816 us/op
                 fillHeap·p0.90:   1306525.696 us/op
                 fillHeap·p0.95:   1306525.696 us/op
                 fillHeap·p0.99:   1306525.696 us/op
                 fillHeap·p0.999:  1306525.696 us/op
                 fillHeap·p0.9999: 1306525.696 us/op
                 fillHeap·p1.00:   1306525.696 us/op

Iteration   2: 1165666.987 ±(99.9%) 259822.291 us/op
                 fillHeap·p0.00:   950009.856 us/op
                 fillHeap·p0.50:   1231028.224 us/op
                 fillHeap·p0.90:   1350565.888 us/op
                 fillHeap·p0.95:   1350565.888 us/op
                 fillHeap·p0.99:   1350565.888 us/op
                 fillHeap·p0.999:  1350565.888 us/op
                 fillHeap·p0.9999: 1350565.888 us/op
                 fillHeap·p1.00:   1350565.888 us/op

Iteration   3: 1184424.846 ±(99.9%) 243566.882 us/op
                 fillHeap·p0.00:   959447.040 us/op
                 fillHeap·p0.50:   1243611.136 us/op
                 fillHeap·p0.90:   1335885.824 us/op
                 fillHeap·p0.95:   1335885.824 us/op
                 fillHeap·p0.99:   1335885.824 us/op
                 fillHeap·p0.999:  1335885.824 us/op
                 fillHeap·p0.9999: 1335885.824 us/op
                 fillHeap·p1.00:   1335885.824 us/op

Iteration   4: 1181279.118 ±(99.9%) 257063.801 us/op
                 fillHeap·p0.00:   948961.280 us/op
                 fillHeap·p0.50:   1245708.288 us/op
                 fillHeap·p0.90:   1346371.584 us/op
                 fillHeap·p0.95:   1346371.584 us/op
                 fillHeap·p0.99:   1346371.584 us/op
                 fillHeap·p0.999:  1346371.584 us/op
                 fillHeap·p0.9999: 1346371.584 us/op
                 fillHeap·p1.00:   1346371.584 us/op

Iteration   5: 1179881.017 ±(99.9%) 262886.978 us/op
                 fillHeap·p0.00:   947912.704 us/op
                 fillHeap·p0.50:   1228931.072 us/op
                 fillHeap·p0.90:   1346371.584 us/op
                 fillHeap·p0.95:   1346371.584 us/op
                 fillHeap·p0.99:   1346371.584 us/op
                 fillHeap·p0.999:  1346371.584 us/op
                 fillHeap·p0.9999: 1346371.584 us/op
                 fillHeap·p1.00:   1346371.584 us/op

Iteration   6: 1181628.644 ±(99.9%) 264164.837 us/op
                 fillHeap·p0.00:   953155.584 us/op
                 fillHeap·p0.50:   1233125.376 us/op
                 fillHeap·p0.90:   1363148.800 us/op
                 fillHeap·p0.95:   1363148.800 us/op
                 fillHeap·p0.99:   1363148.800 us/op
                 fillHeap·p0.999:  1363148.800 us/op
                 fillHeap·p0.9999: 1363148.800 us/op
                 fillHeap·p1.00:   1363148.800 us/op

Iteration   7: 1177783.865 ±(99.9%) 256345.150 us/op
                 fillHeap·p0.00:   944766.976 us/op
                 fillHeap·p0.50:   1226833.920 us/op
                 fillHeap·p0.90:   1340080.128 us/op
                 fillHeap·p0.95:   1340080.128 us/op
                 fillHeap·p0.99:   1340080.128 us/op
                 fillHeap·p0.999:  1340080.128 us/op
                 fillHeap·p0.9999: 1340080.128 us/op
                 fillHeap·p1.00:   1340080.128 us/op

Iteration   8: 1175686.713 ±(99.9%) 263117.185 us/op
                 fillHeap·p0.00:   937426.944 us/op
                 fillHeap·p0.50:   1226833.920 us/op
                 fillHeap·p0.90:   1365245.952 us/op
                 fillHeap·p0.95:   1365245.952 us/op
                 fillHeap·p0.99:   1365245.952 us/op
                 fillHeap·p0.999:  1365245.952 us/op
                 fillHeap·p0.9999: 1365245.952 us/op
                 fillHeap·p1.00:   1365245.952 us/op

Iteration   9: 1171259.392 ±(99.9%) 250078.099 us/op
                 fillHeap·p0.00:   955252.736 us/op
                 fillHeap·p0.50:   1226833.920 us/op
                 fillHeap·p0.90:   1346371.584 us/op
                 fillHeap·p0.95:   1346371.584 us/op
                 fillHeap·p0.99:   1346371.584 us/op
                 fillHeap·p0.999:  1346371.584 us/op
                 fillHeap·p0.9999: 1346371.584 us/op
                 fillHeap·p1.00:   1346371.584 us/op

Iteration  10: 1174055.595 ±(99.9%) 255818.070 us/op
                 fillHeap·p0.00:   951058.432 us/op
                 fillHeap·p0.50:   1216348.160 us/op
                 fillHeap·p0.90:   1350565.888 us/op
                 fillHeap·p0.95:   1350565.888 us/op
                 fillHeap·p0.99:   1350565.888 us/op
                 fillHeap·p0.999:  1350565.888 us/op
                 fillHeap·p0.9999: 1350565.888 us/op
                 fillHeap·p1.00:   1350565.888 us/op

Iteration  11: 1161705.700 ±(99.9%) 251593.556 us/op
                 fillHeap·p0.00:   937426.944 us/op
                 fillHeap·p0.50:   1203765.248 us/op
                 fillHeap·p0.90:   1325400.064 us/op
                 fillHeap·p0.95:   1325400.064 us/op
                 fillHeap·p0.99:   1325400.064 us/op
                 fillHeap·p0.999:  1325400.064 us/op
                 fillHeap·p0.9999: 1325400.064 us/op
                 fillHeap·p1.00:   1325400.064 us/op

Iteration  12: 1168696.206 ±(99.9%) 254715.947 us/op
                 fillHeap·p0.00:   936378.368 us/op
                 fillHeap·p0.50:   1231028.224 us/op
                 fillHeap·p0.90:   1344274.432 us/op
                 fillHeap·p0.95:   1344274.432 us/op
                 fillHeap·p0.99:   1344274.432 us/op
                 fillHeap·p0.999:  1344274.432 us/op
                 fillHeap·p0.9999: 1344274.432 us/op
                 fillHeap·p1.00:   1344274.432 us/op

Iteration  13: 1164268.885 ±(99.9%) 259920.860 us/op
                 fillHeap·p0.00:   929038.336 us/op
                 fillHeap·p0.50:   1210056.704 us/op
                 fillHeap·p0.90:   1333788.672 us/op
                 fillHeap·p0.95:   1333788.672 us/op
                 fillHeap·p0.99:   1333788.672 us/op
                 fillHeap·p0.999:  1333788.672 us/op
                 fillHeap·p0.9999: 1333788.672 us/op
                 fillHeap·p1.00:   1333788.672 us/op

Iteration  14: 1161123.157 ±(99.9%) 247152.634 us/op
                 fillHeap·p0.00:   940572.672 us/op
                 fillHeap·p0.50:   1201668.096 us/op
                 fillHeap·p0.90:   1306525.696 us/op
                 fillHeap·p0.95:   1306525.696 us/op
                 fillHeap·p0.99:   1306525.696 us/op
                 fillHeap·p0.999:  1306525.696 us/op
                 fillHeap·p0.9999: 1306525.696 us/op
                 fillHeap·p1.00:   1306525.696 us/op

Iteration  15: 1164152.377 ±(99.9%) 254992.601 us/op
                 fillHeap·p0.00:   943718.400 us/op
                 fillHeap·p0.50:   1216348.160 us/op
                 fillHeap·p0.90:   1335885.824 us/op
                 fillHeap·p0.95:   1335885.824 us/op
                 fillHeap·p0.99:   1335885.824 us/op
                 fillHeap·p0.999:  1335885.824 us/op
                 fillHeap·p0.9999: 1335885.824 us/op
                 fillHeap·p1.00:   1335885.824 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 135
  mean = 1169449.627 ±(99.9%) 41761.890 us/op

  Histogram, us/op:
    [ 900000.000,  950000.000) = 14 
    [ 950000.000, 1000000.000) = 16 
    [1000000.000, 1050000.000) = 12 
    [1050000.000, 1100000.000) = 3 
    [1100000.000, 1150000.000) = 1 
    [1150000.000, 1200000.000) = 8 
    [1200000.000, 1250000.000) = 30 
    [1250000.000, 1300000.000) = 22 
    [1300000.000, 1350000.000) = 25 

  Percentiles, us/op:
      p(0.0000) = 919601.152 us/op
     p(50.0000) = 1226833.920 us/op
     p(90.0000) = 1333788.672 us/op
     p(95.0000) = 1346371.584 us/op
     p(99.0000) = 1364490.977 us/op
     p(99.9000) = 1365245.952 us/op
     p(99.9900) = 1365245.952 us/op
     p(99.9990) = 1365245.952 us/op
     p(99.9999) = 1365245.952 us/op
    p(100.0000) = 1365245.952 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 72.46% complete, ETA 02:18:15
# Fork: 1 of 1
# Warmup Iteration   1: 1059061.760 ±(99.9%) 206697.478 us/op
# Warmup Iteration   2: 1099117.363 ±(99.9%) 181124.869 us/op
# Warmup Iteration   3: 1084227.584 ±(99.9%) 190146.113 us/op
# Warmup Iteration   4: 1062417.203 ±(99.9%) 173288.456 us/op
# Warmup Iteration   5: 1071330.099 ±(99.9%) 178557.075 us/op
Iteration   1: 1077936.128 ±(99.9%) 188875.973 us/op
                 fillHeap·p0.00:   864026.624 us/op
                 fillHeap·p0.50:   1105199.104 us/op
                 fillHeap·p0.90:   1257032.909 us/op
                 fillHeap·p0.95:   1264582.656 us/op
                 fillHeap·p0.99:   1264582.656 us/op
                 fillHeap·p0.999:  1264582.656 us/op
                 fillHeap·p0.9999: 1264582.656 us/op
                 fillHeap·p1.00:   1264582.656 us/op

Iteration   2: 923700.131 ±(99.9%) 98525.814 us/op
                 fillHeap·p0.00:   766509.056 us/op
                 fillHeap·p0.50:   925892.608 us/op
                 fillHeap·p0.90:   1010827.264 us/op
                 fillHeap·p0.95:   1010827.264 us/op
                 fillHeap·p0.99:   1010827.264 us/op
                 fillHeap·p0.999:  1010827.264 us/op
                 fillHeap·p0.9999: 1010827.264 us/op
                 fillHeap·p1.00:   1010827.264 us/op

Iteration   3: 1109078.835 ±(99.9%) 229532.033 us/op
                 fillHeap·p0.00:   867172.352 us/op
                 fillHeap·p0.50:   1154482.176 us/op
                 fillHeap·p0.90:   1272551.834 us/op
                 fillHeap·p0.95:   1275068.416 us/op
                 fillHeap·p0.99:   1275068.416 us/op
                 fillHeap·p0.999:  1275068.416 us/op
                 fillHeap·p0.9999: 1275068.416 us/op
                 fillHeap·p1.00:   1275068.416 us/op

Iteration   4: 1110908.018 ±(99.9%) 203497.621 us/op
                 fillHeap·p0.00:   881852.416 us/op
                 fillHeap·p0.50:   1151336.448 us/op
                 fillHeap·p0.90:   1256194.048 us/op
                 fillHeap·p0.95:   1256194.048 us/op
                 fillHeap·p0.99:   1256194.048 us/op
                 fillHeap·p0.999:  1256194.048 us/op
                 fillHeap·p0.9999: 1256194.048 us/op
                 fillHeap·p1.00:   1256194.048 us/op

Iteration   5: 1113238.187 ±(99.9%) 211429.320 us/op
                 fillHeap·p0.00:   897581.056 us/op
                 fillHeap·p0.50:   1159725.056 us/op
                 fillHeap·p0.90:   1249902.592 us/op
                 fillHeap·p0.95:   1249902.592 us/op
                 fillHeap·p0.99:   1249902.592 us/op
                 fillHeap·p0.999:  1249902.592 us/op
                 fillHeap·p0.9999: 1249902.592 us/op
                 fillHeap·p1.00:   1249902.592 us/op

Iteration   6: 1121766.605 ±(99.9%) 199194.215 us/op
                 fillHeap·p0.00:   872415.232 us/op
                 fillHeap·p0.50:   1158676.480 us/op
                 fillHeap·p0.90:   1258081.485 us/op
                 fillHeap·p0.95:   1258291.200 us/op
                 fillHeap·p0.99:   1258291.200 us/op
                 fillHeap·p0.999:  1258291.200 us/op
                 fillHeap·p0.9999: 1258291.200 us/op
                 fillHeap·p1.00:   1258291.200 us/op

Iteration   7: 1122815.181 ±(99.9%) 184787.917 us/op
                 fillHeap·p0.00:   901775.360 us/op
                 fillHeap·p0.50:   1159725.056 us/op
                 fillHeap·p0.90:   1270874.112 us/op
                 fillHeap·p0.95:   1277165.568 us/op
                 fillHeap·p0.99:   1277165.568 us/op
                 fillHeap·p0.999:  1277165.568 us/op
                 fillHeap·p0.9999: 1277165.568 us/op
                 fillHeap·p1.00:   1277165.568 us/op

Iteration   8: 1107296.256 ±(99.9%) 183339.401 us/op
                 fillHeap·p0.00:   876609.536 us/op
                 fillHeap·p0.50:   1145044.992 us/op
                 fillHeap·p0.90:   1250112.307 us/op
                 fillHeap·p0.95:   1254096.896 us/op
                 fillHeap·p0.99:   1254096.896 us/op
                 fillHeap·p0.999:  1254096.896 us/op
                 fillHeap·p0.9999: 1254096.896 us/op
                 fillHeap·p1.00:   1254096.896 us/op

Iteration   9: 1111595.418 ±(99.9%) 199776.045 us/op
                 fillHeap·p0.00:   878706.688 us/op
                 fillHeap·p0.50:   1150287.872 us/op
                 fillHeap·p0.90:   1287651.328 us/op
                 fillHeap·p0.95:   1293942.784 us/op
                 fillHeap·p0.99:   1293942.784 us/op
                 fillHeap·p0.999:  1293942.784 us/op
                 fillHeap·p0.9999: 1293942.784 us/op
                 fillHeap·p1.00:   1293942.784 us/op

Iteration  10: 1108135.117 ±(99.9%) 181941.672 us/op
                 fillHeap·p0.00:   889192.448 us/op
                 fillHeap·p0.50:   1152385.024 us/op
                 fillHeap·p0.90:   1253048.320 us/op
                 fillHeap·p0.95:   1256194.048 us/op
                 fillHeap·p0.99:   1256194.048 us/op
                 fillHeap·p0.999:  1256194.048 us/op
                 fillHeap·p0.9999: 1256194.048 us/op
                 fillHeap·p1.00:   1256194.048 us/op

Iteration  11: 1106876.826 ±(99.9%) 181651.981 us/op
                 fillHeap·p0.00:   901775.360 us/op
                 fillHeap·p0.50:   1152385.024 us/op
                 fillHeap·p0.90:   1264163.226 us/op
                 fillHeap·p0.95:   1270874.112 us/op
                 fillHeap·p0.99:   1270874.112 us/op
                 fillHeap·p0.999:  1270874.112 us/op
                 fillHeap·p0.9999: 1270874.112 us/op
                 fillHeap·p1.00:   1270874.112 us/op

Iteration  12: 1114321.715 ±(99.9%) 188126.472 us/op
                 fillHeap·p0.00:   892338.176 us/op
                 fillHeap·p0.50:   1177550.848 us/op
                 fillHeap·p0.90:   1258291.200 us/op
                 fillHeap·p0.95:   1264582.656 us/op
                 fillHeap·p0.99:   1264582.656 us/op
                 fillHeap·p0.999:  1264582.656 us/op
                 fillHeap·p0.9999: 1264582.656 us/op
                 fillHeap·p1.00:   1264582.656 us/op

Iteration  13: 1111490.560 ±(99.9%) 179960.532 us/op
                 fillHeap·p0.00:   891289.600 us/op
                 fillHeap·p0.50:   1156579.328 us/op
                 fillHeap·p0.90:   1254726.042 us/op
                 fillHeap·p0.95:   1260388.352 us/op
                 fillHeap·p0.99:   1260388.352 us/op
                 fillHeap·p0.999:  1260388.352 us/op
                 fillHeap·p0.9999: 1260388.352 us/op
                 fillHeap·p1.00:   1260388.352 us/op

Iteration  14: 1099327.078 ±(99.9%) 173844.150 us/op
                 fillHeap·p0.00:   899678.208 us/op
                 fillHeap·p0.50:   1130364.928 us/op
                 fillHeap·p0.90:   1247595.725 us/op
                 fillHeap·p0.95:   1251999.744 us/op
                 fillHeap·p0.99:   1251999.744 us/op
                 fillHeap·p0.999:  1251999.744 us/op
                 fillHeap·p0.9999: 1251999.744 us/op
                 fillHeap·p1.00:   1251999.744 us/op

Iteration  15: 1110651.699 ±(99.9%) 198014.568 us/op
                 fillHeap·p0.00:   873463.808 us/op
                 fillHeap·p0.50:   1160773.632 us/op
                 fillHeap·p0.90:   1284505.600 us/op
                 fillHeap·p0.95:   1293942.784 us/op
                 fillHeap·p0.99:   1293942.784 us/op
                 fillHeap·p0.999:  1293942.784 us/op
                 fillHeap·p0.9999: 1293942.784 us/op
                 fillHeap·p1.00:   1293942.784 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 149
  mean = 1095241.151 ±(99.9%) 34936.268 us/op

  Histogram, us/op:
    [ 700000.000,  750000.000) = 0 
    [ 750000.000,  800000.000) = 1 
    [ 800000.000,  850000.000) = 0 
    [ 850000.000,  900000.000) = 14 
    [ 900000.000,  950000.000) = 12 
    [ 950000.000, 1000000.000) = 18 
    [1000000.000, 1050000.000) = 8 
    [1050000.000, 1100000.000) = 3 
    [1100000.000, 1150000.000) = 21 
    [1150000.000, 1200000.000) = 43 
    [1200000.000, 1250000.000) = 15 

  Percentiles, us/op:
      p(0.0000) = 766509.056 us/op
     p(50.0000) = 1147142.144 us/op
     p(90.0000) = 1249902.592 us/op
     p(95.0000) = 1262485.504 us/op
     p(99.0000) = 1293942.784 us/op
     p(99.9000) = 1293942.784 us/op
     p(99.9900) = 1293942.784 us/op
     p(99.9990) = 1293942.784 us/op
     p(99.9999) = 1293942.784 us/op
    p(100.0000) = 1293942.784 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 73.19% complete, ETA 02:14:41
# Fork: 1 of 1
# Warmup Iteration   1: 1033371.648 ±(99.9%) 211214.713 us/op
# Warmup Iteration   2: 1054343.168 ±(99.9%) 144112.447 us/op
# Warmup Iteration   3: 1042808.832 ±(99.9%) 173166.670 us/op
# Warmup Iteration   4: 1051512.013 ±(99.9%) 183322.342 us/op
# Warmup Iteration   5: 1055391.744 ±(99.9%) 190420.903 us/op
Iteration   1: 1042599.117 ±(99.9%) 164508.153 us/op
                 fillHeap·p0.00:   871366.656 us/op
                 fillHeap·p0.50:   1070596.096 us/op
                 fillHeap·p0.90:   1185520.026 us/op
                 fillHeap·p0.95:   1189085.184 us/op
                 fillHeap·p0.99:   1189085.184 us/op
                 fillHeap·p0.999:  1189085.184 us/op
                 fillHeap·p0.9999: 1189085.184 us/op
                 fillHeap·p1.00:   1189085.184 us/op

Iteration   2: 888318.635 ±(99.9%) 106360.357 us/op
                 fillHeap·p0.00:   761266.176 us/op
                 fillHeap·p0.50:   878182.400 us/op
                 fillHeap·p0.90:   1024353.894 us/op
                 fillHeap·p0.95:   1026555.904 us/op
                 fillHeap·p0.99:   1026555.904 us/op
                 fillHeap·p0.999:  1026555.904 us/op
                 fillHeap·p0.9999: 1026555.904 us/op
                 fillHeap·p1.00:   1026555.904 us/op

Iteration   3: 1081186.714 ±(99.9%) 188938.722 us/op
                 fillHeap·p0.00:   859832.320 us/op
                 fillHeap·p0.50:   1114636.288 us/op
                 fillHeap·p0.90:   1240045.978 us/op
                 fillHeap·p0.95:   1243611.136 us/op
                 fillHeap·p0.99:   1243611.136 us/op
                 fillHeap·p0.999:  1243611.136 us/op
                 fillHeap·p0.9999: 1243611.136 us/op
                 fillHeap·p1.00:   1243611.136 us/op

Iteration   4: 1083283.866 ±(99.9%) 190435.860 us/op
                 fillHeap·p0.00:   865075.200 us/op
                 fillHeap·p0.50:   1124073.472 us/op
                 fillHeap·p0.90:   1266889.523 us/op
                 fillHeap·p0.95:   1275068.416 us/op
                 fillHeap·p0.99:   1275068.416 us/op
                 fillHeap·p0.999:  1275068.416 us/op
                 fillHeap·p0.9999: 1275068.416 us/op
                 fillHeap·p1.00:   1275068.416 us/op

Iteration   5: 1080452.710 ±(99.9%) 190206.608 us/op
                 fillHeap·p0.00:   874512.384 us/op
                 fillHeap·p0.50:   1127219.200 us/op
                 fillHeap·p0.90:   1225365.914 us/op
                 fillHeap·p0.95:   1228931.072 us/op
                 fillHeap·p0.99:   1228931.072 us/op
                 fillHeap·p0.999:  1228931.072 us/op
                 fillHeap·p0.9999: 1228931.072 us/op
                 fillHeap·p1.00:   1228931.072 us/op

Iteration   6: 1076887.552 ±(99.9%) 183563.157 us/op
                 fillHeap·p0.00:   858783.744 us/op
                 fillHeap·p0.50:   1096810.496 us/op
                 fillHeap·p0.90:   1231867.085 us/op
                 fillHeap·p0.95:   1237319.680 us/op
                 fillHeap·p0.99:   1237319.680 us/op
                 fillHeap·p0.999:  1237319.680 us/op
                 fillHeap·p0.9999: 1237319.680 us/op
                 fillHeap·p1.00:   1237319.680 us/op

Iteration   7: 1075209.830 ±(99.9%) 190231.564 us/op
                 fillHeap·p0.00:   852492.288 us/op
                 fillHeap·p0.50:   1107296.256 us/op
                 fillHeap·p0.90:   1226833.920 us/op
                 fillHeap·p0.95:   1231028.224 us/op
                 fillHeap·p0.99:   1231028.224 us/op
                 fillHeap·p0.999:  1231028.224 us/op
                 fillHeap·p0.9999: 1231028.224 us/op
                 fillHeap·p1.00:   1231028.224 us/op

Iteration   8: 1078250.701 ±(99.9%) 187191.995 us/op
                 fillHeap·p0.00:   865075.200 us/op
                 fillHeap·p0.50:   1110441.984 us/op
                 fillHeap·p0.90:   1254516.326 us/op
                 fillHeap·p0.95:   1262485.504 us/op
                 fillHeap·p0.99:   1262485.504 us/op
                 fillHeap·p0.999:  1262485.504 us/op
                 fillHeap·p0.9999: 1262485.504 us/op
                 fillHeap·p1.00:   1262485.504 us/op

Iteration   9: 1082025.574 ±(99.9%) 189708.640 us/op
                 fillHeap·p0.00:   856686.592 us/op
                 fillHeap·p0.50:   1117782.016 us/op
                 fillHeap·p0.90:   1219703.603 us/op
                 fillHeap·p0.95:   1220542.464 us/op
                 fillHeap·p0.99:   1220542.464 us/op
                 fillHeap·p0.999:  1220542.464 us/op
                 fillHeap·p0.9999: 1220542.464 us/op
                 fillHeap·p1.00:   1220542.464 us/op

Iteration  10: 1073427.251 ±(99.9%) 186092.340 us/op
                 fillHeap·p0.00:   877658.112 us/op
                 fillHeap·p0.50:   1109393.408 us/op
                 fillHeap·p0.90:   1231657.370 us/op
                 fillHeap·p0.95:   1237319.680 us/op
                 fillHeap·p0.99:   1237319.680 us/op
                 fillHeap·p0.999:  1237319.680 us/op
                 fillHeap·p0.9999: 1237319.680 us/op
                 fillHeap·p1.00:   1237319.680 us/op

Iteration  11: 1075419.546 ±(99.9%) 199315.298 us/op
                 fillHeap·p0.00:   854589.440 us/op
                 fillHeap·p0.50:   1115684.864 us/op
                 fillHeap·p0.90:   1239207.117 us/op
                 fillHeap·p0.95:   1243611.136 us/op
                 fillHeap·p0.99:   1243611.136 us/op
                 fillHeap·p0.999:  1243611.136 us/op
                 fillHeap·p0.9999: 1243611.136 us/op
                 fillHeap·p1.00:   1243611.136 us/op

Iteration  12: 1063360.922 ±(99.9%) 179294.328 us/op
                 fillHeap·p0.00:   858783.744 us/op
                 fillHeap·p0.50:   1095761.920 us/op
                 fillHeap·p0.90:   1218235.597 us/op
                 fillHeap·p0.95:   1222639.616 us/op
                 fillHeap·p0.99:   1222639.616 us/op
                 fillHeap·p0.999:  1222639.616 us/op
                 fillHeap·p0.9999: 1222639.616 us/op
                 fillHeap·p1.00:   1222639.616 us/op

Iteration  13: 1066296.934 ±(99.9%) 177314.791 us/op
                 fillHeap·p0.00:   874512.384 us/op
                 fillHeap·p0.50:   1103101.952 us/op
                 fillHeap·p0.90:   1204394.394 us/op
                 fillHeap·p0.95:   1207959.552 us/op
                 fillHeap·p0.99:   1207959.552 us/op
                 fillHeap·p0.999:  1207959.552 us/op
                 fillHeap·p0.9999: 1207959.552 us/op
                 fillHeap·p1.00:   1207959.552 us/op

Iteration  14: 1063151.206 ±(99.9%) 182827.617 us/op
                 fillHeap·p0.00:   858783.744 us/op
                 fillHeap·p0.50:   1087897.600 us/op
                 fillHeap·p0.90:   1228301.926 us/op
                 fillHeap·p0.95:   1233125.376 us/op
                 fillHeap·p0.99:   1233125.376 us/op
                 fillHeap·p0.999:  1233125.376 us/op
                 fillHeap·p0.9999: 1233125.376 us/op
                 fillHeap·p1.00:   1233125.376 us/op

Iteration  15: 1070700.954 ±(99.9%) 189586.430 us/op
                 fillHeap·p0.00:   851443.712 us/op
                 fillHeap·p0.50:   1096810.496 us/op
                 fillHeap·p0.90:   1226204.774 us/op
                 fillHeap·p0.95:   1231028.224 us/op
                 fillHeap·p0.99:   1231028.224 us/op
                 fillHeap·p0.999:  1231028.224 us/op
                 fillHeap·p0.9999: 1231028.224 us/op
                 fillHeap·p1.00:   1231028.224 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 152
  mean = 1057778.634 ±(99.9%) 34094.456 us/op

  Histogram, us/op:
    [ 700000.000,  750000.000) = 0 
    [ 750000.000,  800000.000) = 1 
    [ 800000.000,  850000.000) = 4 
    [ 850000.000,  900000.000) = 16 
    [ 900000.000,  950000.000) = 24 
    [ 950000.000, 1000000.000) = 7 
    [1000000.000, 1050000.000) = 2 
    [1050000.000, 1100000.000) = 22 
    [1100000.000, 1150000.000) = 34 
    [1150000.000, 1200000.000) = 27 
    [1200000.000, 1250000.000) = 13 

  Percentiles, us/op:
      p(0.0000) = 761266.176 us/op
     p(50.0000) = 1099956.224 us/op
     p(90.0000) = 1205442.970 us/op
     p(95.0000) = 1231762.227 us/op
     p(99.0000) = 1268399.473 us/op
     p(99.9000) = 1275068.416 us/op
     p(99.9900) = 1275068.416 us/op
     p(99.9990) = 1275068.416 us/op
     p(99.9999) = 1275068.416 us/op
    p(100.0000) = 1275068.416 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 73.91% complete, ETA 02:11:06
# Fork: 1 of 1
# Warmup Iteration   1: 1026870.477 ±(99.9%) 240761.203 us/op
# Warmup Iteration   2: 1027499.622 ±(99.9%) 121176.942 us/op
# Warmup Iteration   3: 1026765.619 ±(99.9%) 120618.797 us/op
# Warmup Iteration   4: 1019006.157 ±(99.9%) 132295.673 us/op
# Warmup Iteration   5: 1024668.467 ±(99.9%) 127687.909 us/op
Iteration   1: 1016804.147 ±(99.9%) 122616.935 us/op
                 fillHeap·p0.00:   891289.600 us/op
                 fillHeap·p0.50:   1015545.856 us/op
                 fillHeap·p0.90:   1142738.125 us/op
                 fillHeap·p0.95:   1149239.296 us/op
                 fillHeap·p0.99:   1149239.296 us/op
                 fillHeap·p0.999:  1149239.296 us/op
                 fillHeap·p0.9999: 1149239.296 us/op
                 fillHeap·p1.00:   1149239.296 us/op

Iteration   2: 869444.267 ±(99.9%) 76576.777 us/op
                 fillHeap·p0.00:   781189.120 us/op
                 fillHeap·p0.50:   859832.320 us/op
                 fillHeap·p0.90:   962487.910 us/op
                 fillHeap·p0.95:   964689.920 us/op
                 fillHeap·p0.99:   964689.920 us/op
                 fillHeap·p0.999:  964689.920 us/op
                 fillHeap·p0.9999: 964689.920 us/op
                 fillHeap·p1.00:   964689.920 us/op

Iteration   3: 1062626.918 ±(99.9%) 131733.870 us/op
                 fillHeap·p0.00:   916455.424 us/op
                 fillHeap·p0.50:   1066926.080 us/op
                 fillHeap·p0.90:   1181745.152 us/op
                 fillHeap·p0.95:   1186988.032 us/op
                 fillHeap·p0.99:   1186988.032 us/op
                 fillHeap·p0.999:  1186988.032 us/op
                 fillHeap·p0.9999: 1186988.032 us/op
                 fillHeap·p1.00:   1186988.032 us/op

Iteration   4: 1056230.605 ±(99.9%) 148008.348 us/op
                 fillHeap·p0.00:   898629.632 us/op
                 fillHeap·p0.50:   1075314.688 us/op
                 fillHeap·p0.90:   1189924.045 us/op
                 fillHeap·p0.95:   1195376.640 us/op
                 fillHeap·p0.99:   1195376.640 us/op
                 fillHeap·p0.999:  1195376.640 us/op
                 fillHeap·p0.9999: 1195376.640 us/op
                 fillHeap·p1.00:   1195376.640 us/op

Iteration   5: 1063465.779 ±(99.9%) 157562.920 us/op
                 fillHeap·p0.00:   882900.992 us/op
                 fillHeap·p0.50:   1089470.464 us/op
                 fillHeap·p0.90:   1206491.546 us/op
                 fillHeap·p0.95:   1214251.008 us/op
                 fillHeap·p0.99:   1214251.008 us/op
                 fillHeap·p0.999:  1214251.008 us/op
                 fillHeap·p0.9999: 1214251.008 us/op
                 fillHeap·p1.00:   1214251.008 us/op

Iteration   6: 1059586.048 ±(99.9%) 134507.075 us/op
                 fillHeap·p0.00:   895483.904 us/op
                 fillHeap·p0.50:   1082130.432 us/op
                 fillHeap·p0.90:   1175873.126 us/op
                 fillHeap·p0.95:   1180696.576 us/op
                 fillHeap·p0.99:   1180696.576 us/op
                 fillHeap·p0.999:  1180696.576 us/op
                 fillHeap·p0.9999: 1180696.576 us/op
                 fillHeap·p1.00:   1180696.576 us/op

Iteration   7: 1050673.152 ±(99.9%) 141454.166 us/op
                 fillHeap·p0.00:   879755.264 us/op
                 fillHeap·p0.50:   1067450.368 us/op
                 fillHeap·p0.90:   1165387.366 us/op
                 fillHeap·p0.95:   1168113.664 us/op
                 fillHeap·p0.99:   1168113.664 us/op
                 fillHeap·p0.999:  1168113.664 us/op
                 fillHeap·p0.9999: 1168113.664 us/op
                 fillHeap·p1.00:   1168113.664 us/op

Iteration   8: 1063465.779 ±(99.9%) 144936.599 us/op
                 fillHeap·p0.00:   882900.992 us/op
                 fillHeap·p0.50:   1098907.648 us/op
                 fillHeap·p0.90:   1190972.621 us/op
                 fillHeap·p0.95:   1197473.792 us/op
                 fillHeap·p0.99:   1197473.792 us/op
                 fillHeap·p0.999:  1197473.792 us/op
                 fillHeap·p0.9999: 1197473.792 us/op
                 fillHeap·p1.00:   1197473.792 us/op

Iteration   9: 1062731.776 ±(99.9%) 136530.517 us/op
                 fillHeap·p0.00:   931135.488 us/op
                 fillHeap·p0.50:   1078460.416 us/op
                 fillHeap·p0.90:   1202506.957 us/op
                 fillHeap·p0.95:   1210056.704 us/op
                 fillHeap·p0.99:   1210056.704 us/op
                 fillHeap·p0.999:  1210056.704 us/op
                 fillHeap·p0.9999: 1210056.704 us/op
                 fillHeap·p1.00:   1210056.704 us/op

Iteration  10: 1064828.928 ±(99.9%) 143011.526 us/op
                 fillHeap·p0.00:   891289.600 us/op
                 fillHeap·p0.50:   1082130.432 us/op
                 fillHeap·p0.90:   1179648.000 us/op
                 fillHeap·p0.95:   1182793.728 us/op
                 fillHeap·p0.99:   1182793.728 us/op
                 fillHeap·p0.999:  1182793.728 us/op
                 fillHeap·p0.9999: 1182793.728 us/op
                 fillHeap·p1.00:   1182793.728 us/op

Iteration  11: 1050987.725 ±(99.9%) 130476.912 us/op
                 fillHeap·p0.00:   917504.000 us/op
                 fillHeap·p0.50:   1059061.760 us/op
                 fillHeap·p0.90:   1193698.918 us/op
                 fillHeap·p0.95:   1201668.096 us/op
                 fillHeap·p0.99:   1201668.096 us/op
                 fillHeap·p0.999:  1201668.096 us/op
                 fillHeap·p0.9999: 1201668.096 us/op
                 fillHeap·p1.00:   1201668.096 us/op

Iteration  12: 1052455.731 ±(99.9%) 140833.042 us/op
                 fillHeap·p0.00:   903872.512 us/op
                 fillHeap·p0.50:   1080033.280 us/op
                 fillHeap·p0.90:   1171678.822 us/op
                 fillHeap·p0.95:   1176502.272 us/op
                 fillHeap·p0.99:   1176502.272 us/op
                 fillHeap·p0.999:  1176502.272 us/op
                 fillHeap·p0.9999: 1176502.272 us/op
                 fillHeap·p1.00:   1176502.272 us/op

Iteration  13: 1031379.354 ±(99.9%) 129024.545 us/op
                 fillHeap·p0.00:   884998.144 us/op
                 fillHeap·p0.50:   1028128.768 us/op
                 fillHeap·p0.90:   1153643.315 us/op
                 fillHeap·p0.95:   1157627.904 us/op
                 fillHeap·p0.99:   1157627.904 us/op
                 fillHeap·p0.999:  1157627.904 us/op
                 fillHeap·p0.9999: 1157627.904 us/op
                 fillHeap·p1.00:   1157627.904 us/op

Iteration  14: 1052455.731 ±(99.9%) 144917.813 us/op
                 fillHeap·p0.00:   888143.872 us/op
                 fillHeap·p0.50:   1071120.384 us/op
                 fillHeap·p0.90:   1178389.709 us/op
                 fillHeap·p0.95:   1182793.728 us/op
                 fillHeap·p0.99:   1182793.728 us/op
                 fillHeap·p0.999:  1182793.728 us/op
                 fillHeap·p0.9999: 1182793.728 us/op
                 fillHeap·p1.00:   1182793.728 us/op

Iteration  15: 1035154.227 ±(99.9%) 113724.257 us/op
                 fillHeap·p0.00:   903872.512 us/op
                 fillHeap·p0.50:   1047527.424 us/op
                 fillHeap·p0.90:   1140640.973 us/op
                 fillHeap·p0.95:   1145044.992 us/op
                 fillHeap·p0.99:   1145044.992 us/op
                 fillHeap·p0.999:  1145044.992 us/op
                 fillHeap·p0.9999: 1145044.992 us/op
                 fillHeap·p1.00:   1145044.992 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 152
  mean = 1037248.620 ±(99.9%) 26908.830 us/op

  Histogram, us/op:
    [ 700000.000,  750000.000) = 0 
    [ 750000.000,  800000.000) = 1 
    [ 800000.000,  850000.000) = 5 
    [ 850000.000,  900000.000) = 12 
    [ 900000.000,  950000.000) = 19 
    [ 950000.000, 1000000.000) = 12 
    [1000000.000, 1050000.000) = 17 
    [1050000.000, 1100000.000) = 37 
    [1100000.000, 1150000.000) = 36 
    [1150000.000, 1200000.000) = 10 
    [1200000.000, 1250000.000) = 3 

  Percentiles, us/op:
      p(0.0000) = 781189.120 us/op
     p(50.0000) = 1061158.912 us/op
     p(90.0000) = 1143786.701 us/op
     p(95.0000) = 1182793.728 us/op
     p(99.0000) = 1212028.027 us/op
     p(99.9000) = 1214251.008 us/op
     p(99.9900) = 1214251.008 us/op
     p(99.9990) = 1214251.008 us/op
     p(99.9999) = 1214251.008 us/op
    p(100.0000) = 1214251.008 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 74.64% complete, ETA 02:07:30
# Fork: 1 of 1
# Warmup Iteration   1: 792400.817 ±(99.9%) 92170.687 us/op
# Warmup Iteration   2: 791594.220 ±(99.9%) 114580.336 us/op
# Warmup Iteration   3: 792642.796 ±(99.9%) 120296.751 us/op
# Warmup Iteration   4: 794901.268 ±(99.9%) 118634.795 us/op
# Warmup Iteration   5: 791352.241 ±(99.9%) 113845.082 us/op
Iteration   1: 787077.278 ±(99.9%) 117355.339 us/op
                 fillHeap·p0.00:   619708.416 us/op
                 fillHeap·p0.50:   784334.848 us/op
                 fillHeap·p0.90:   907857.101 us/op
                 fillHeap·p0.95:   913309.696 us/op
                 fillHeap·p0.99:   913309.696 us/op
                 fillHeap·p0.999:  913309.696 us/op
                 fillHeap·p0.9999: 913309.696 us/op
                 fillHeap·p1.00:   913309.696 us/op

Iteration   2: 795546.545 ±(99.9%) 114091.816 us/op
                 fillHeap·p0.00:   633339.904 us/op
                 fillHeap·p0.50:   796917.760 us/op
                 fillHeap·p0.90:   910793.114 us/op
                 fillHeap·p0.95:   913309.696 us/op
                 fillHeap·p0.99:   913309.696 us/op
                 fillHeap·p0.999:  913309.696 us/op
                 fillHeap·p0.9999: 913309.696 us/op
                 fillHeap·p1.00:   913309.696 us/op

Iteration   3: 788851.791 ±(99.9%) 114439.104 us/op
                 fillHeap·p0.00:   631242.752 us/op
                 fillHeap·p0.50:   775946.240 us/op
                 fillHeap·p0.90:   913938.842 us/op
                 fillHeap·p0.95:   916455.424 us/op
                 fillHeap·p0.99:   916455.424 us/op
                 fillHeap·p0.999:  916455.424 us/op
                 fillHeap·p0.9999: 916455.424 us/op
                 fillHeap·p1.00:   916455.424 us/op

Iteration   4: 788206.513 ±(99.9%) 111661.148 us/op
                 fillHeap·p0.00:   627048.448 us/op
                 fillHeap·p0.50:   785383.424 us/op
                 fillHeap·p0.90:   898839.347 us/op
                 fillHeap·p0.95:   901775.360 us/op
                 fillHeap·p0.99:   901775.360 us/op
                 fillHeap·p0.999:  901775.360 us/op
                 fillHeap·p0.9999: 901775.360 us/op
                 fillHeap·p1.00:   901775.360 us/op

Iteration   5: 630128.640 ±(99.9%) 72688.626 us/op
                 fillHeap·p0.00:   545259.520 us/op
                 fillHeap·p0.50:   612368.384 us/op
                 fillHeap·p0.90:   724670.874 us/op
                 fillHeap·p0.95:   832569.344 us/op
                 fillHeap·p0.99:   832569.344 us/op
                 fillHeap·p0.999:  832569.344 us/op
                 fillHeap·p0.9999: 832569.344 us/op
                 fillHeap·p1.00:   832569.344 us/op

Iteration   6: 811759.143 ±(99.9%) 136223.816 us/op
                 fillHeap·p0.00:   644874.240 us/op
                 fillHeap·p0.50:   816840.704 us/op
                 fillHeap·p0.90:   959027.610 us/op
                 fillHeap·p0.95:   961544.192 us/op
                 fillHeap·p0.99:   961544.192 us/op
                 fillHeap·p0.999:  961544.192 us/op
                 fillHeap·p0.9999: 961544.192 us/op
                 fillHeap·p1.00:   961544.192 us/op

Iteration   7: 824019.417 ±(99.9%) 124688.895 us/op
                 fillHeap·p0.00:   641728.512 us/op
                 fillHeap·p0.50:   813694.976 us/op
                 fillHeap·p0.90:   961124.762 us/op
                 fillHeap·p0.95:   963641.344 us/op
                 fillHeap·p0.99:   963641.344 us/op
                 fillHeap·p0.999:  963641.344 us/op
                 fillHeap·p0.9999: 963641.344 us/op
                 fillHeap·p1.00:   963641.344 us/op

Iteration   8: 827245.804 ±(99.9%) 119968.612 us/op
                 fillHeap·p0.00:   650117.120 us/op
                 fillHeap·p0.50:   819986.432 us/op
                 fillHeap·p0.90:   957769.318 us/op
                 fillHeap·p0.95:   961544.192 us/op
                 fillHeap·p0.99:   961544.192 us/op
                 fillHeap·p0.999:  961544.192 us/op
                 fillHeap·p0.9999: 961544.192 us/op
                 fillHeap·p1.00:   961544.192 us/op

Iteration   9: 823938.757 ±(99.9%) 122946.658 us/op
                 fillHeap·p0.00:   648019.968 us/op
                 fillHeap·p0.50:   828375.040 us/op
                 fillHeap·p0.90:   956301.312 us/op
                 fillHeap·p0.95:   958398.464 us/op
                 fillHeap·p0.99:   958398.464 us/op
                 fillHeap·p0.999:  958398.464 us/op
                 fillHeap·p0.9999: 958398.464 us/op
                 fillHeap·p1.00:   958398.464 us/op

Iteration  10: 820793.029 ±(99.9%) 114052.385 us/op
                 fillHeap·p0.00:   646971.392 us/op
                 fillHeap·p0.50:   822083.584 us/op
                 fillHeap·p0.90:   942250.394 us/op
                 fillHeap·p0.95:   944766.976 us/op
                 fillHeap·p0.99:   944766.976 us/op
                 fillHeap·p0.999:  944766.976 us/op
                 fillHeap·p0.9999: 944766.976 us/op
                 fillHeap·p1.00:   944766.976 us/op

Iteration  11: 825309.972 ±(99.9%) 117733.098 us/op
                 fillHeap·p0.00:   658505.728 us/op
                 fillHeap·p0.50:   829423.616 us/op
                 fillHeap·p0.90:   953575.014 us/op
                 fillHeap·p0.95:   955252.736 us/op
                 fillHeap·p0.99:   955252.736 us/op
                 fillHeap·p0.999:  955252.736 us/op
                 fillHeap·p0.9999: 955252.736 us/op
                 fillHeap·p1.00:   955252.736 us/op

Iteration  12: 815308.170 ±(99.9%) 116997.700 us/op
                 fillHeap·p0.00:   659554.304 us/op
                 fillHeap·p0.50:   812646.400 us/op
                 fillHeap·p0.90:   937846.374 us/op
                 fillHeap·p0.95:   939524.096 us/op
                 fillHeap·p0.99:   939524.096 us/op
                 fillHeap·p0.999:  939524.096 us/op
                 fillHeap·p0.9999: 939524.096 us/op
                 fillHeap·p1.00:   939524.096 us/op

Iteration  13: 821599.626 ±(99.9%) 120364.623 us/op
                 fillHeap·p0.00:   649068.544 us/op
                 fillHeap·p0.50:   818937.856 us/op
                 fillHeap·p0.90:   955462.451 us/op
                 fillHeap·p0.95:   960495.616 us/op
                 fillHeap·p0.99:   960495.616 us/op
                 fillHeap·p0.999:  960495.616 us/op
                 fillHeap·p0.9999: 960495.616 us/op
                 fillHeap·p1.00:   960495.616 us/op

Iteration  14: 828213.721 ±(99.9%) 118228.032 us/op
                 fillHeap·p0.00:   650117.120 us/op
                 fillHeap·p0.50:   832569.344 us/op
                 fillHeap·p0.90:   947912.704 us/op
                 fillHeap·p0.95:   947912.704 us/op
                 fillHeap·p0.99:   947912.704 us/op
                 fillHeap·p0.999:  947912.704 us/op
                 fillHeap·p0.9999: 947912.704 us/op
                 fillHeap·p1.00:   947912.704 us/op

Iteration  15: 819341.154 ±(99.9%) 125441.893 us/op
                 fillHeap·p0.00:   638582.784 us/op
                 fillHeap·p0.50:   812646.400 us/op
                 fillHeap·p0.90:   952526.438 us/op
                 fillHeap·p0.95:   956301.312 us/op
                 fillHeap·p0.99:   956301.312 us/op
                 fillHeap·p0.999:  956301.312 us/op
                 fillHeap·p0.9999: 956301.312 us/op
                 fillHeap·p1.00:   956301.312 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 198
  mean = 797908.082 ±(99.9%) 25581.651 us/op

  Histogram, us/op:
    [ 500000.000,  550000.000) = 1 
    [ 550000.000,  600000.000) = 5 
    [ 600000.000,  650000.000) = 16 
    [ 650000.000,  700000.000) = 15 
    [ 700000.000,  750000.000) = 31 
    [ 750000.000,  800000.000) = 30 
    [ 800000.000,  850000.000) = 37 
    [ 850000.000,  900000.000) = 15 
    [ 900000.000,  950000.000) = 35 

  Percentiles, us/op:
      p(0.0000) = 545259.520 us/op
     p(50.0000) = 801636.352 us/op
     p(90.0000) = 944976.691 us/op
     p(95.0000) = 953260.442 us/op
     p(99.0000) = 961565.164 us/op
     p(99.9000) = 963641.344 us/op
     p(99.9900) = 963641.344 us/op
     p(99.9990) = 963641.344 us/op
     p(99.9999) = 963641.344 us/op
    p(100.0000) = 963641.344 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 75.36% complete, ETA 02:03:53
# Fork: 1 of 1
# Warmup Iteration   1: 376.848 ±(99.9%) 0.686 us/op
# Warmup Iteration   2: 376.111 ±(99.9%) 0.209 us/op
# Warmup Iteration   3: 376.284 ±(99.9%) 0.302 us/op
# Warmup Iteration   4: 375.652 ±(99.9%) 0.234 us/op
# Warmup Iteration   5: 375.833 ±(99.9%) 0.203 us/op
Iteration   1: 375.662 ±(99.9%) 0.190 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   384.000 us/op
                 read·p0.95:   388.608 us/op
                 read·p0.99:   408.617 us/op
                 read·p0.999:  472.900 us/op
                 read·p0.9999: 551.633 us/op
                 read·p1.00:   559.104 us/op

Iteration   2: 375.477 ±(99.9%) 0.183 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   383.488 us/op
                 read·p0.95:   387.072 us/op
                 read·p0.99:   406.528 us/op
                 read·p0.999:  463.050 us/op
                 read·p0.9999: 556.765 us/op
                 read·p1.00:   594.944 us/op

Iteration   3: 375.436 ±(99.9%) 0.176 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   383.488 us/op
                 read·p0.95:   387.072 us/op
                 read·p0.99:   403.968 us/op
                 read·p0.999:  459.776 us/op
                 read·p0.9999: 514.546 us/op
                 read·p1.00:   533.504 us/op

Iteration   4: 375.584 ±(99.9%) 0.183 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   384.000 us/op
                 read·p0.95:   387.584 us/op
                 read·p0.99:   404.992 us/op
                 read·p0.999:  464.384 us/op
                 read·p0.9999: 565.660 us/op
                 read·p1.00:   576.512 us/op

Iteration   5: 376.197 ±(99.9%) 0.312 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   384.000 us/op
                 read·p0.95:   388.096 us/op
                 read·p0.99:   410.112 us/op
                 read·p0.999:  514.394 us/op
                 read·p0.9999: 915.490 us/op
                 read·p1.00:   923.648 us/op

Iteration   6: 375.579 ±(99.9%) 0.184 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   383.488 us/op
                 read·p0.95:   387.072 us/op
                 read·p0.99:   404.992 us/op
                 read·p0.999:  469.404 us/op
                 read·p0.9999: 548.906 us/op
                 read·p1.00:   561.152 us/op

Iteration   7: 375.542 ±(99.9%) 0.181 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   384.000 us/op
                 read·p0.95:   387.072 us/op
                 read·p0.99:   403.451 us/op
                 read·p0.999:  466.636 us/op
                 read·p0.9999: 560.269 us/op
                 read·p1.00:   594.944 us/op

Iteration   8: 375.540 ±(99.9%) 0.187 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   383.488 us/op
                 read·p0.95:   387.584 us/op
                 read·p0.99:   404.987 us/op
                 read·p0.999:  464.793 us/op
                 read·p0.9999: 584.719 us/op
                 read·p1.00:   708.608 us/op

Iteration   9: 375.597 ±(99.9%) 0.185 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   384.000 us/op
                 read·p0.95:   387.584 us/op
                 read·p0.99:   406.016 us/op
                 read·p0.999:  467.968 us/op
                 read·p0.9999: 570.389 us/op
                 read·p1.00:   591.872 us/op

Iteration  10: 375.677 ±(99.9%) 0.185 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   384.000 us/op
                 read·p0.95:   388.096 us/op
                 read·p0.99:   407.040 us/op
                 read·p0.999:  467.059 us/op
                 read·p0.9999: 560.546 us/op
                 read·p1.00:   568.320 us/op

Iteration  11: 375.722 ±(99.9%) 0.228 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   383.488 us/op
                 read·p0.95:   387.584 us/op
                 read·p0.99:   407.552 us/op
                 read·p0.999:  469.714 us/op
                 read·p0.9999: 840.784 us/op
                 read·p1.00:   930.816 us/op

Iteration  12: 375.658 ±(99.9%) 0.207 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   383.488 us/op
                 read·p0.95:   387.072 us/op
                 read·p0.99:   407.081 us/op
                 read·p0.999:  467.268 us/op
                 read·p0.9999: 742.041 us/op
                 read·p1.00:   918.528 us/op

Iteration  13: 375.647 ±(99.9%) 0.192 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   384.000 us/op
                 read·p0.95:   387.072 us/op
                 read·p0.99:   405.504 us/op
                 read·p0.999:  479.247 us/op
                 read·p0.9999: 579.199 us/op
                 read·p1.00:   654.336 us/op

Iteration  14: 375.565 ±(99.9%) 0.188 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   383.488 us/op
                 read·p0.95:   387.072 us/op
                 read·p0.99:   405.504 us/op
                 read·p0.999:  476.672 us/op
                 read·p0.9999: 573.892 us/op
                 read·p1.00:   601.088 us/op

Iteration  15: 375.797 ±(99.9%) 0.194 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   374.784 us/op
                 read·p0.90:   384.000 us/op
                 read·p0.95:   387.584 us/op
                 read·p0.99:   407.040 us/op
                 read·p0.999:  472.193 us/op
                 read·p0.9999: 558.260 us/op
                 read·p1.00:   588.800 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  N = 398891
  mean =    375.645 ±(99.9%) 0.052 us/op

  Histogram, us/op:
    [ 300.000,  350.000) = 0 
    [ 350.000,  400.000) = 393732 
    [ 400.000,  450.000) = 3904 
    [ 450.000,  500.000) = 1068 
    [ 500.000,  550.000) = 117 
    [ 550.000,  600.000) = 35 
    [ 600.000,  650.000) = 4 
    [ 650.000,  700.000) = 1 
    [ 700.000,  750.000) = 3 
    [ 750.000,  800.000) = 11 
    [ 800.000,  850.000) = 6 
    [ 850.000,  900.000) = 3 
    [ 900.000,  950.000) = 7 

  Percentiles, us/op:
      p(0.0000) =    370.176 us/op
     p(50.0000) =    374.784 us/op
     p(90.0000) =    384.000 us/op
     p(95.0000) =    387.584 us/op
     p(99.0000) =    406.016 us/op
     p(99.9000) =    468.992 us/op
     p(99.9900) =    589.140 us/op
     p(99.9990) =    917.515 us/op
     p(99.9999) =    930.816 us/op
    p(100.0000) =    930.816 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 76.08% complete, ETA 02:00:13
# Fork: 1 of 1
# Warmup Iteration   1: 165.830 ±(99.9%) 0.365 us/op
# Warmup Iteration   2: 166.350 ±(99.9%) 0.102 us/op
# Warmup Iteration   3: 164.185 ±(99.9%) 0.102 us/op
# Warmup Iteration   4: 167.012 ±(99.9%) 0.110 us/op
# Warmup Iteration   5: 164.764 ±(99.9%) 0.092 us/op
Iteration   1: 166.318 ±(99.9%) 0.103 us/op
                 readAndWrite·p0.00:   157.952 us/op
                 readAndWrite·p0.50:   164.608 us/op
                 readAndWrite·p0.90:   172.032 us/op
                 readAndWrite·p0.95:   176.128 us/op
                 readAndWrite·p0.99:   188.672 us/op
                 readAndWrite·p0.999:  261.088 us/op
                 readAndWrite·p0.9999: 345.075 us/op
                 readAndWrite·p1.00:   400.384 us/op

Iteration   2: 165.577 ±(99.9%) 0.096 us/op
                 readAndWrite·p0.00:   158.464 us/op
                 readAndWrite·p0.50:   163.584 us/op
                 readAndWrite·p0.90:   171.264 us/op
                 readAndWrite·p0.95:   175.104 us/op
                 readAndWrite·p0.99:   186.112 us/op
                 readAndWrite·p0.999:  252.416 us/op
                 readAndWrite·p0.9999: 337.705 us/op
                 readAndWrite·p1.00:   365.056 us/op

Iteration   3: 165.142 ±(99.9%) 0.097 us/op
                 readAndWrite·p0.00:   158.464 us/op
                 readAndWrite·p0.50:   163.328 us/op
                 readAndWrite·p0.90:   170.240 us/op
                 readAndWrite·p0.95:   175.104 us/op
                 readAndWrite·p0.99:   191.744 us/op
                 readAndWrite·p0.999:  251.904 us/op
                 readAndWrite·p0.9999: 314.274 us/op
                 readAndWrite·p1.00:   370.176 us/op

Iteration   4: 164.834 ±(99.9%) 0.102 us/op
                 readAndWrite·p0.00:   158.208 us/op
                 readAndWrite·p0.50:   163.328 us/op
                 readAndWrite·p0.90:   169.728 us/op
                 readAndWrite·p0.95:   175.104 us/op
                 readAndWrite·p0.99:   186.112 us/op
                 readAndWrite·p0.999:  251.136 us/op
                 readAndWrite·p0.9999: 365.514 us/op
                 readAndWrite·p1.00:   591.872 us/op

Iteration   5: 166.170 ±(99.9%) 0.128 us/op
                 readAndWrite·p0.00:   157.952 us/op
                 readAndWrite·p0.50:   165.376 us/op
                 readAndWrite·p0.90:   171.520 us/op
                 readAndWrite·p0.95:   175.616 us/op
                 readAndWrite·p0.99:   188.672 us/op
                 readAndWrite·p0.999:  259.072 us/op
                 readAndWrite·p0.9999: 560.069 us/op
                 readAndWrite·p1.00:   785.408 us/op

Iteration   6: 165.510 ±(99.9%) 0.106 us/op
                 readAndWrite·p0.00:   158.208 us/op
                 readAndWrite·p0.50:   162.816 us/op
                 readAndWrite·p0.90:   171.520 us/op
                 readAndWrite·p0.95:   175.616 us/op
                 readAndWrite·p0.99:   189.440 us/op
                 readAndWrite·p0.999:  266.586 us/op
                 readAndWrite·p0.9999: 330.570 us/op
                 readAndWrite·p1.00:   358.912 us/op

Iteration   7: 165.729 ±(99.9%) 0.107 us/op
                 readAndWrite·p0.00:   158.720 us/op
                 readAndWrite·p0.50:   163.328 us/op
                 readAndWrite·p0.90:   171.264 us/op
                 readAndWrite·p0.95:   176.128 us/op
                 readAndWrite·p0.99:   190.208 us/op
                 readAndWrite·p0.999:  261.120 us/op
                 readAndWrite·p0.9999: 343.490 us/op
                 readAndWrite·p1.00:   408.064 us/op

Iteration   8: 165.534 ±(99.9%) 0.100 us/op
                 readAndWrite·p0.00:   158.208 us/op
                 readAndWrite·p0.50:   163.584 us/op
                 readAndWrite·p0.90:   171.520 us/op
                 readAndWrite·p0.95:   175.104 us/op
                 readAndWrite·p0.99:   187.136 us/op
                 readAndWrite·p0.999:  256.512 us/op
                 readAndWrite·p0.9999: 330.240 us/op
                 readAndWrite·p1.00:   385.536 us/op

Iteration   9: 164.183 ±(99.9%) 0.165 us/op
                 readAndWrite·p0.00:   157.696 us/op
                 readAndWrite·p0.50:   162.304 us/op
                 readAndWrite·p0.90:   168.960 us/op
                 readAndWrite·p0.95:   173.312 us/op
                 readAndWrite·p0.99:   183.270 us/op
                 readAndWrite·p0.999:  250.161 us/op
                 readAndWrite·p0.9999: 365.499 us/op
                 readAndWrite·p1.00:   2633.728 us/op

Iteration  10: 165.254 ±(99.9%) 0.090 us/op
                 readAndWrite·p0.00:   158.208 us/op
                 readAndWrite·p0.50:   163.584 us/op
                 readAndWrite·p0.90:   170.752 us/op
                 readAndWrite·p0.95:   174.592 us/op
                 readAndWrite·p0.99:   184.832 us/op
                 readAndWrite·p0.999:  248.064 us/op
                 readAndWrite·p0.9999: 317.952 us/op
                 readAndWrite·p1.00:   364.032 us/op

Iteration  11: 166.034 ±(99.9%) 0.133 us/op
                 readAndWrite·p0.00:   158.464 us/op
                 readAndWrite·p0.50:   163.840 us/op
                 readAndWrite·p0.90:   172.032 us/op
                 readAndWrite·p0.95:   175.360 us/op
                 readAndWrite·p0.99:   186.368 us/op
                 readAndWrite·p0.999:  260.573 us/op
                 readAndWrite·p0.9999: 666.209 us/op
                 readAndWrite·p1.00:   731.136 us/op

Iteration  12: 164.945 ±(99.9%) 0.097 us/op
                 readAndWrite·p0.00:   157.952 us/op
                 readAndWrite·p0.50:   163.072 us/op
                 readAndWrite·p0.90:   170.752 us/op
                 readAndWrite·p0.95:   174.592 us/op
                 readAndWrite·p0.99:   184.832 us/op
                 readAndWrite·p0.999:  250.097 us/op
                 readAndWrite·p0.9999: 356.915 us/op
                 readAndWrite·p1.00:   406.528 us/op

Iteration  13: 165.513 ±(99.9%) 0.094 us/op
                 readAndWrite·p0.00:   159.232 us/op
                 readAndWrite·p0.50:   163.328 us/op
                 readAndWrite·p0.90:   171.008 us/op
                 readAndWrite·p0.95:   175.104 us/op
                 readAndWrite·p0.99:   185.600 us/op
                 readAndWrite·p0.999:  253.184 us/op
                 readAndWrite·p0.9999: 336.796 us/op
                 readAndWrite·p1.00:   359.424 us/op

Iteration  14: 165.490 ±(99.9%) 0.096 us/op
                 readAndWrite·p0.00:   158.464 us/op
                 readAndWrite·p0.50:   163.584 us/op
                 readAndWrite·p0.90:   170.752 us/op
                 readAndWrite·p0.95:   174.848 us/op
                 readAndWrite·p0.99:   185.088 us/op
                 readAndWrite·p0.999:  253.270 us/op
                 readAndWrite·p0.9999: 328.568 us/op
                 readAndWrite·p1.00:   386.560 us/op

Iteration  15: 165.918 ±(99.9%) 0.098 us/op
                 readAndWrite·p0.00:   158.208 us/op
                 readAndWrite·p0.50:   164.864 us/op
                 readAndWrite·p0.90:   172.288 us/op
                 readAndWrite·p0.95:   175.360 us/op
                 readAndWrite·p0.99:   185.664 us/op
                 readAndWrite·p0.999:  257.491 us/op
                 readAndWrite·p0.9999: 342.170 us/op
                 readAndWrite·p1.00:   424.448 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  N = 905030
  mean =    165.475 ±(99.9%) 0.028 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 903856 
    [ 250.000,  500.000) = 1146 
    [ 500.000,  750.000) = 26 
    [ 750.000, 1000.000) = 1 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    157.696 us/op
     p(50.0000) =    163.584 us/op
     p(90.0000) =    171.008 us/op
     p(95.0000) =    175.104 us/op
     p(99.0000) =    187.136 us/op
     p(99.9000) =    255.488 us/op
     p(99.9900) =    344.830 us/op
     p(99.9990) =    666.624 us/op
     p(99.9999) =   2633.728 us/op
    p(100.0000) =   2633.728 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 76.81% complete, ETA 01:56:33
# Fork: 1 of 1
# Warmup Iteration   1: 290.078 ±(99.9%) 0.577 us/op
# Warmup Iteration   2: 277.730 ±(99.9%) 0.717 us/op
# Warmup Iteration   3: 303.242 ±(99.9%) 0.165 us/op
# Warmup Iteration   4: 303.250 ±(99.9%) 0.107 us/op
# Warmup Iteration   5: 303.508 ±(99.9%) 0.297 us/op
Iteration   1: 303.472 ±(99.9%) 0.120 us/op
                 swap·p0.00:   300.032 us/op
                 swap·p0.50:   301.568 us/op
                 swap·p0.90:   308.224 us/op
                 swap·p0.95:   310.784 us/op
                 swap·p0.99:   331.776 us/op
                 swap·p0.999:  391.724 us/op
                 swap·p0.9999: 453.889 us/op
                 swap·p1.00:   469.504 us/op

Iteration   2: 303.346 ±(99.9%) 0.111 us/op
                 swap·p0.00:   300.032 us/op
                 swap·p0.50:   301.056 us/op
                 swap·p0.90:   308.224 us/op
                 swap·p0.95:   310.784 us/op
                 swap·p0.99:   329.728 us/op
                 swap·p0.999:  359.497 us/op
                 swap·p0.9999: 449.009 us/op
                 swap·p1.00:   492.544 us/op

Iteration   3: 303.365 ±(99.9%) 0.110 us/op
                 swap·p0.00:   300.032 us/op
                 swap·p0.50:   301.568 us/op
                 swap·p0.90:   308.224 us/op
                 swap·p0.95:   310.272 us/op
                 swap·p0.99:   329.728 us/op
                 swap·p0.999:  363.008 us/op
                 swap·p0.9999: 438.784 us/op
                 swap·p1.00:   455.680 us/op

Iteration   4: 303.425 ±(99.9%) 0.189 us/op
                 swap·p0.00:   300.032 us/op
                 swap·p0.50:   301.056 us/op
                 swap·p0.90:   308.224 us/op
                 swap·p0.95:   310.784 us/op
                 swap·p0.99:   329.728 us/op
                 swap·p0.999:  373.330 us/op
                 swap·p0.9999: 750.793 us/op
                 swap·p1.00:   829.440 us/op

Iteration   5: 303.733 ±(99.9%) 0.189 us/op
                 swap·p0.00:   300.032 us/op
                 swap·p0.50:   301.568 us/op
                 swap·p0.90:   308.736 us/op
                 swap·p0.95:   311.808 us/op
                 swap·p0.99:   332.288 us/op
                 swap·p0.999:  373.818 us/op
                 swap·p0.9999: 760.177 us/op
                 swap·p1.00:   828.416 us/op

Iteration   6: 303.467 ±(99.9%) 0.114 us/op
                 swap·p0.00:   300.032 us/op
                 swap·p0.50:   301.568 us/op
                 swap·p0.90:   308.224 us/op
                 swap·p0.95:   311.296 us/op
                 swap·p0.99:   330.158 us/op
                 swap·p0.999:  364.118 us/op
                 swap·p0.9999: 443.863 us/op
                 swap·p1.00:   470.528 us/op

Iteration   7: 303.403 ±(99.9%) 0.176 us/op
                 swap·p0.00:   300.032 us/op
                 swap·p0.50:   301.056 us/op
                 swap·p0.90:   308.224 us/op
                 swap·p0.95:   311.296 us/op
                 swap·p0.99:   329.728 us/op
                 swap·p0.999:  364.623 us/op
                 swap·p0.9999: 532.914 us/op
                 swap·p1.00:   1292.288 us/op

Iteration   8: 303.366 ±(99.9%) 0.114 us/op
                 swap·p0.00:   300.032 us/op
                 swap·p0.50:   301.056 us/op
                 swap·p0.90:   308.224 us/op
                 swap·p0.95:   311.296 us/op
                 swap·p0.99:   329.216 us/op
                 swap·p0.999:  361.509 us/op
                 swap·p0.9999: 475.073 us/op
                 swap·p1.00:   540.672 us/op

Iteration   9: 303.317 ±(99.9%) 0.111 us/op
                 swap·p0.00:   300.032 us/op
                 swap·p0.50:   301.056 us/op
                 swap·p0.90:   308.736 us/op
                 swap·p0.95:   311.296 us/op
                 swap·p0.99:   329.216 us/op
                 swap·p0.999:  358.435 us/op
                 swap·p0.9999: 440.532 us/op
                 swap·p1.00:   490.496 us/op

Iteration  10: 303.479 ±(99.9%) 0.123 us/op
                 swap·p0.00:   300.032 us/op
                 swap·p0.50:   301.056 us/op
                 swap·p0.90:   308.736 us/op
                 swap·p0.95:   311.808 us/op
                 swap·p0.99:   330.240 us/op
                 swap·p0.999:  365.056 us/op
                 swap·p0.9999: 482.546 us/op
                 swap·p1.00:   652.288 us/op

Iteration  11: 303.610 ±(99.9%) 0.182 us/op
                 swap·p0.00:   300.032 us/op
                 swap·p0.50:   301.568 us/op
                 swap·p0.90:   308.224 us/op
                 swap·p0.95:   310.784 us/op
                 swap·p0.99:   329.728 us/op
                 swap·p0.999:  388.400 us/op
                 swap·p0.9999: 787.016 us/op
                 swap·p1.00:   902.144 us/op

Iteration  12: 303.485 ±(99.9%) 0.137 us/op
                 swap·p0.00:   300.032 us/op
                 swap·p0.50:   301.056 us/op
                 swap·p0.90:   308.224 us/op
                 swap·p0.95:   310.784 us/op
                 swap·p0.99:   330.752 us/op
                 swap·p0.999:  395.016 us/op
                 swap·p0.9999: 505.134 us/op
                 swap·p1.00:   526.336 us/op

Iteration  13: 303.368 ±(99.9%) 0.159 us/op
                 swap·p0.00:   300.032 us/op
                 swap·p0.50:   301.056 us/op
                 swap·p0.90:   308.224 us/op
                 swap·p0.95:   310.784 us/op
                 swap·p0.99:   326.656 us/op
                 swap·p0.999:  375.883 us/op
                 swap·p0.9999: 703.413 us/op
                 swap·p1.00:   792.576 us/op

Iteration  14: 303.139 ±(99.9%) 0.111 us/op
                 swap·p0.00:   300.032 us/op
                 swap·p0.50:   301.056 us/op
                 swap·p0.90:   307.712 us/op
                 swap·p0.95:   309.760 us/op
                 swap·p0.99:   324.608 us/op
                 swap·p0.999:  379.441 us/op
                 swap·p0.9999: 463.779 us/op
                 swap·p1.00:   564.224 us/op

Iteration  15: 303.488 ±(99.9%) 0.162 us/op
                 swap·p0.00:   300.032 us/op
                 swap·p0.50:   301.568 us/op
                 swap·p0.90:   308.224 us/op
                 swap·p0.95:   310.784 us/op
                 swap·p0.99:   327.168 us/op
                 swap·p0.999:  389.676 us/op
                 swap·p0.9999: 714.582 us/op
                 swap·p1.00:   761.856 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  N = 493784
  mean =    303.431 ±(99.9%) 0.037 us/op

  Histogram, us/op:
    [ 300.000,  400.000) = 493489 
    [ 400.000,  500.000) = 223 
    [ 500.000,  600.000) = 15 
    [ 600.000,  700.000) = 32 
    [ 700.000,  800.000) = 18 
    [ 800.000,  900.000) = 4 
    [ 900.000, 1000.000) = 1 
    [1000.000, 1100.000) = 0 
    [1100.000, 1200.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    300.032 us/op
     p(50.0000) =    301.568 us/op
     p(90.0000) =    308.224 us/op
     p(95.0000) =    310.784 us/op
     p(99.0000) =    329.728 us/op
     p(99.9000) =    370.176 us/op
     p(99.9900) =    650.489 us/op
     p(99.9990) =    830.331 us/op
     p(99.9999) =   1292.288 us/op
    p(100.0000) =   1292.288 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 77.53% complete, ETA 01:52:54
# Fork: 1 of 1
# Warmup Iteration   1: 179.423 ±(99.9%) 0.314 us/op
# Warmup Iteration   2: 177.044 ±(99.9%) 0.101 us/op
# Warmup Iteration   3: 180.023 ±(99.9%) 0.270 us/op
# Warmup Iteration   4: 178.796 ±(99.9%) 0.108 us/op
# Warmup Iteration   5: 179.244 ±(99.9%) 0.112 us/op
Iteration   1: 179.084 ±(99.9%) 0.110 us/op
                 write·p0.00:   169.472 us/op
                 write·p0.50:   177.920 us/op
                 write·p0.90:   186.112 us/op
                 write·p0.95:   189.696 us/op
                 write·p0.99:   201.472 us/op
                 write·p0.999:  269.312 us/op
                 write·p0.9999: 326.656 us/op
                 write·p1.00:   419.328 us/op

Iteration   2: 178.676 ±(99.9%) 0.102 us/op
                 write·p0.00:   170.496 us/op
                 write·p0.50:   177.664 us/op
                 write·p0.90:   185.088 us/op
                 write·p0.95:   188.672 us/op
                 write·p0.99:   199.424 us/op
                 write·p0.999:  260.638 us/op
                 write·p0.9999: 350.993 us/op
                 write·p1.00:   387.584 us/op

Iteration   3: 178.393 ±(99.9%) 0.105 us/op
                 write·p0.00:   170.752 us/op
                 write·p0.50:   176.384 us/op
                 write·p0.90:   185.344 us/op
                 write·p0.95:   189.184 us/op
                 write·p0.99:   200.192 us/op
                 write·p0.999:  264.704 us/op
                 write·p0.9999: 323.186 us/op
                 write·p1.00:   373.248 us/op

Iteration   4: 178.535 ±(99.9%) 0.140 us/op
                 write·p0.00:   169.472 us/op
                 write·p0.50:   176.896 us/op
                 write·p0.90:   185.088 us/op
                 write·p0.95:   189.184 us/op
                 write·p0.99:   200.960 us/op
                 write·p0.999:  273.446 us/op
                 write·p0.9999: 622.402 us/op
                 write·p1.00:   733.184 us/op

Iteration   5: 178.550 ±(99.9%) 0.107 us/op
                 write·p0.00:   169.728 us/op
                 write·p0.50:   177.408 us/op
                 write·p0.90:   185.088 us/op
                 write·p0.95:   188.416 us/op
                 write·p0.99:   201.216 us/op
                 write·p0.999:  266.240 us/op
                 write·p0.9999: 345.923 us/op
                 write·p1.00:   417.792 us/op

Iteration   6: 179.161 ±(99.9%) 0.106 us/op
                 write·p0.00:   169.728 us/op
                 write·p0.50:   178.176 us/op
                 write·p0.90:   186.112 us/op
                 write·p0.95:   189.696 us/op
                 write·p0.99:   200.704 us/op
                 write·p0.999:  265.866 us/op
                 write·p0.9999: 322.922 us/op
                 write·p1.00:   364.544 us/op

Iteration   7: 178.446 ±(99.9%) 0.104 us/op
                 write·p0.00:   169.216 us/op
                 write·p0.50:   176.640 us/op
                 write·p0.90:   184.832 us/op
                 write·p0.95:   188.672 us/op
                 write·p0.99:   199.680 us/op
                 write·p0.999:  265.240 us/op
                 write·p0.9999: 348.098 us/op
                 write·p1.00:   441.856 us/op

Iteration   8: 181.084 ±(99.9%) 0.103 us/op
                 write·p0.00:   169.728 us/op
                 write·p0.50:   179.968 us/op
                 write·p0.90:   187.392 us/op
                 write·p0.95:   191.488 us/op
                 write·p0.99:   201.984 us/op
                 write·p0.999:  268.216 us/op
                 write·p0.9999: 334.307 us/op
                 write·p1.00:   373.760 us/op

Iteration   9: 178.787 ±(99.9%) 0.102 us/op
                 write·p0.00:   169.472 us/op
                 write·p0.50:   176.640 us/op
                 write·p0.90:   184.832 us/op
                 write·p0.95:   188.928 us/op
                 write·p0.99:   199.680 us/op
                 write·p0.999:  263.680 us/op
                 write·p0.9999: 336.075 us/op
                 write·p1.00:   374.784 us/op

Iteration  10: 178.549 ±(99.9%) 0.103 us/op
                 write·p0.00:   168.960 us/op
                 write·p0.50:   177.152 us/op
                 write·p0.90:   185.088 us/op
                 write·p0.95:   189.184 us/op
                 write·p0.99:   200.960 us/op
                 write·p0.999:  265.216 us/op
                 write·p0.9999: 314.163 us/op
                 write·p1.00:   375.808 us/op

Iteration  11: 180.829 ±(99.9%) 0.152 us/op
                 write·p0.00:   171.776 us/op
                 write·p0.50:   178.944 us/op
                 write·p0.90:   187.392 us/op
                 write·p0.95:   190.976 us/op
                 write·p0.99:   201.984 us/op
                 write·p0.999:  276.148 us/op
                 write·p0.9999: 668.049 us/op
                 write·p1.00:   720.896 us/op

Iteration  12: 177.272 ±(99.9%) 0.191 us/op
                 write·p0.00:   169.472 us/op
                 write·p0.50:   175.616 us/op
                 write·p0.90:   183.040 us/op
                 write·p0.95:   187.392 us/op
                 write·p0.99:   200.448 us/op
                 write·p0.999:  268.288 us/op
                 write·p0.9999: 335.441 us/op
                 write·p1.00:   2822.144 us/op

Iteration  13: 177.186 ±(99.9%) 0.109 us/op
                 write·p0.00:   168.960 us/op
                 write·p0.50:   175.104 us/op
                 write·p0.90:   183.808 us/op
                 write·p0.95:   188.416 us/op
                 write·p0.99:   200.704 us/op
                 write·p0.999:  263.832 us/op
                 write·p0.9999: 351.709 us/op
                 write·p1.00:   403.968 us/op

Iteration  14: 178.417 ±(99.9%) 0.113 us/op
                 write·p0.00:   169.216 us/op
                 write·p0.50:   176.640 us/op
                 write·p0.90:   185.600 us/op
                 write·p0.95:   189.184 us/op
                 write·p0.99:   201.472 us/op
                 write·p0.999:  270.867 us/op
                 write·p0.9999: 347.549 us/op
                 write·p1.00:   412.160 us/op

Iteration  15: 179.160 ±(99.9%) 0.112 us/op
                 write·p0.00:   169.472 us/op
                 write·p0.50:   178.432 us/op
                 write·p0.90:   186.624 us/op
                 write·p0.95:   189.952 us/op
                 write·p0.99:   202.496 us/op
                 write·p0.999:  267.162 us/op
                 write·p0.9999: 332.868 us/op
                 write·p1.00:   391.168 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  N = 837623
  mean =    178.803 ±(99.9%) 0.031 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 835760 
    [ 250.000,  500.000) = 1833 
    [ 500.000,  750.000) = 28 
    [ 750.000, 1000.000) = 1 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    168.960 us/op
     p(50.0000) =    177.152 us/op
     p(90.0000) =    185.600 us/op
     p(95.0000) =    189.440 us/op
     p(99.0000) =    200.960 us/op
     p(99.9000) =    266.752 us/op
     p(99.9900) =    350.695 us/op
     p(99.9990) =    705.151 us/op
     p(99.9999) =   2822.144 us/op
    p(100.0000) =   2822.144 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 78.26% complete, ETA 01:49:14
# Fork: 1 of 1
# Warmup Iteration   1: 1371799.552 ±(99.9%) 25217.673 us/op
# Warmup Iteration   2: 1361313.792 ±(99.9%) 4514.892 us/op
# Warmup Iteration   3: 1363148.800 ±(99.9%) 2143.276 us/op
# Warmup Iteration   4: 1361838.080 ±(99.9%) 2075.218 us/op
# Warmup Iteration   5: 1362100.224 ±(99.9%) 3712.263 us/op
Iteration   1: 1361575.936 ±(99.9%) 4671.162 us/op
                 sumBigDecimals·p0.00:   1356857.344 us/op
                 sumBigDecimals·p0.50:   1363148.800 us/op
                 sumBigDecimals·p0.90:   1363148.800 us/op
                 sumBigDecimals·p0.95:   1363148.800 us/op
                 sumBigDecimals·p0.99:   1363148.800 us/op
                 sumBigDecimals·p0.999:  1363148.800 us/op
                 sumBigDecimals·p0.9999: 1363148.800 us/op
                 sumBigDecimals·p1.00:   1363148.800 us/op

Iteration   2: 1361838.080 ±(99.9%) 4252.932 us/op
                 sumBigDecimals·p0.00:   1358954.496 us/op
                 sumBigDecimals·p0.50:   1362100.224 us/op
                 sumBigDecimals·p0.90:   1365245.952 us/op
                 sumBigDecimals·p0.95:   1365245.952 us/op
                 sumBigDecimals·p0.99:   1365245.952 us/op
                 sumBigDecimals·p0.999:  1365245.952 us/op
                 sumBigDecimals·p0.9999: 1365245.952 us/op
                 sumBigDecimals·p1.00:   1365245.952 us/op

Iteration   3: 1362362.368 ±(99.9%) 9077.350 us/op
                 sumBigDecimals·p0.00:   1356857.344 us/op
                 sumBigDecimals·p0.50:   1361051.648 us/op
                 sumBigDecimals·p0.90:   1371537.408 us/op
                 sumBigDecimals·p0.95:   1371537.408 us/op
                 sumBigDecimals·p0.99:   1371537.408 us/op
                 sumBigDecimals·p0.999:  1371537.408 us/op
                 sumBigDecimals·p0.9999: 1371537.408 us/op
                 sumBigDecimals·p1.00:   1371537.408 us/op

Iteration   4: 1361575.936 ±(99.9%) 4671.162 us/op
                 sumBigDecimals·p0.00:   1358954.496 us/op
                 sumBigDecimals·p0.50:   1362100.224 us/op
                 sumBigDecimals·p0.90:   1365245.952 us/op
                 sumBigDecimals·p0.95:   1365245.952 us/op
                 sumBigDecimals·p0.99:   1365245.952 us/op
                 sumBigDecimals·p0.999:  1365245.952 us/op
                 sumBigDecimals·p0.9999: 1365245.952 us/op
                 sumBigDecimals·p1.00:   1365245.952 us/op

Iteration   5: 1362624.512 ±(99.9%) 3554.221 us/op
                 sumBigDecimals·p0.00:   1358954.496 us/op
                 sumBigDecimals·p0.50:   1363148.800 us/op
                 sumBigDecimals·p0.90:   1365245.952 us/op
                 sumBigDecimals·p0.95:   1365245.952 us/op
                 sumBigDecimals·p0.99:   1365245.952 us/op
                 sumBigDecimals·p0.999:  1365245.952 us/op
                 sumBigDecimals·p0.9999: 1365245.952 us/op
                 sumBigDecimals·p1.00:   1365245.952 us/op

Iteration   6: 1361313.792 ±(99.9%) 4514.892 us/op
                 sumBigDecimals·p0.00:   1358954.496 us/op
                 sumBigDecimals·p0.50:   1361051.648 us/op
                 sumBigDecimals·p0.90:   1365245.952 us/op
                 sumBigDecimals·p0.95:   1365245.952 us/op
                 sumBigDecimals·p0.99:   1365245.952 us/op
                 sumBigDecimals·p0.999:  1365245.952 us/op
                 sumBigDecimals·p0.9999: 1365245.952 us/op
                 sumBigDecimals·p1.00:   1365245.952 us/op

Iteration   7: 1361838.080 ±(99.9%) 3673.390 us/op
                 sumBigDecimals·p0.00:   1358954.496 us/op
                 sumBigDecimals·p0.50:   1363148.800 us/op
                 sumBigDecimals·p0.90:   1363148.800 us/op
                 sumBigDecimals·p0.95:   1363148.800 us/op
                 sumBigDecimals·p0.99:   1363148.800 us/op
                 sumBigDecimals·p0.999:  1363148.800 us/op
                 sumBigDecimals·p0.9999: 1363148.800 us/op
                 sumBigDecimals·p1.00:   1363148.800 us/op

Iteration   8: 1362100.224 ±(99.9%) 4792.511 us/op
                 sumBigDecimals·p0.00:   1356857.344 us/op
                 sumBigDecimals·p0.50:   1363148.800 us/op
                 sumBigDecimals·p0.90:   1365245.952 us/op
                 sumBigDecimals·p0.95:   1365245.952 us/op
                 sumBigDecimals·p0.99:   1365245.952 us/op
                 sumBigDecimals·p0.999:  1365245.952 us/op
                 sumBigDecimals·p0.9999: 1365245.952 us/op
                 sumBigDecimals·p1.00:   1365245.952 us/op

Iteration   9: 1363148.800 ±(99.9%) 3712.263 us/op
                 sumBigDecimals·p0.00:   1361051.648 us/op
                 sumBigDecimals·p0.50:   1363148.800 us/op
                 sumBigDecimals·p0.90:   1365245.952 us/op
                 sumBigDecimals·p0.95:   1365245.952 us/op
                 sumBigDecimals·p0.99:   1365245.952 us/op
                 sumBigDecimals·p0.999:  1365245.952 us/op
                 sumBigDecimals·p0.9999: 1365245.952 us/op
                 sumBigDecimals·p1.00:   1365245.952 us/op

Iteration  10: 1361575.936 ±(99.9%) 3554.221 us/op
                 sumBigDecimals·p0.00:   1358954.496 us/op
                 sumBigDecimals·p0.50:   1362100.224 us/op
                 sumBigDecimals·p0.90:   1363148.800 us/op
                 sumBigDecimals·p0.95:   1363148.800 us/op
                 sumBigDecimals·p0.99:   1363148.800 us/op
                 sumBigDecimals·p0.999:  1363148.800 us/op
                 sumBigDecimals·p0.9999: 1363148.800 us/op
                 sumBigDecimals·p1.00:   1363148.800 us/op

Iteration  11: 1363148.800 ±(99.9%) 3712.263 us/op
                 sumBigDecimals·p0.00:   1361051.648 us/op
                 sumBigDecimals·p0.50:   1363148.800 us/op
                 sumBigDecimals·p0.90:   1367343.104 us/op
                 sumBigDecimals·p0.95:   1367343.104 us/op
                 sumBigDecimals·p0.99:   1367343.104 us/op
                 sumBigDecimals·p0.999:  1367343.104 us/op
                 sumBigDecimals·p0.9999: 1367343.104 us/op
                 sumBigDecimals·p1.00:   1367343.104 us/op

Iteration  12: 1361838.080 ±(99.9%) 5645.204 us/op
                 sumBigDecimals·p0.00:   1356857.344 us/op
                 sumBigDecimals·p0.50:   1362100.224 us/op
                 sumBigDecimals·p0.90:   1365245.952 us/op
                 sumBigDecimals·p0.95:   1365245.952 us/op
                 sumBigDecimals·p0.99:   1365245.952 us/op
                 sumBigDecimals·p0.999:  1365245.952 us/op
                 sumBigDecimals·p0.9999: 1365245.952 us/op
                 sumBigDecimals·p1.00:   1365245.952 us/op

Iteration  13: 1361575.936 ±(99.9%) 5139.396 us/op
                 sumBigDecimals·p0.00:   1356857.344 us/op
                 sumBigDecimals·p0.50:   1362100.224 us/op
                 sumBigDecimals·p0.90:   1365245.952 us/op
                 sumBigDecimals·p0.95:   1365245.952 us/op
                 sumBigDecimals·p0.99:   1365245.952 us/op
                 sumBigDecimals·p0.999:  1365245.952 us/op
                 sumBigDecimals·p0.9999: 1365245.952 us/op
                 sumBigDecimals·p1.00:   1365245.952 us/op

Iteration  14: 1362886.656 ±(99.9%) 1417.644 us/op
                 sumBigDecimals·p0.00:   1361051.648 us/op
                 sumBigDecimals·p0.50:   1363148.800 us/op
                 sumBigDecimals·p0.90:   1363148.800 us/op
                 sumBigDecimals·p0.95:   1363148.800 us/op
                 sumBigDecimals·p0.99:   1363148.800 us/op
                 sumBigDecimals·p0.999:  1363148.800 us/op
                 sumBigDecimals·p0.9999: 1363148.800 us/op
                 sumBigDecimals·p1.00:   1363148.800 us/op

Iteration  15: 1362362.368 ±(99.9%) 2983.314 us/op
                 sumBigDecimals·p0.00:   1361051.648 us/op
                 sumBigDecimals·p0.50:   1362100.224 us/op
                 sumBigDecimals·p0.90:   1365245.952 us/op
                 sumBigDecimals·p0.95:   1365245.952 us/op
                 sumBigDecimals·p0.99:   1365245.952 us/op
                 sumBigDecimals·p0.999:  1365245.952 us/op
                 sumBigDecimals·p0.9999: 1365245.952 us/op
                 sumBigDecimals·p1.00:   1365245.952 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  N = 120
  mean = 1362117.700 ±(99.9%) 725.214 us/op

  Histogram, us/op:
    [1350000.000, 1352500.000) = 0 
    [1352500.000, 1355000.000) = 0 
    [1355000.000, 1357500.000) = 5 
    [1357500.000, 1360000.000) = 18 
    [1360000.000, 1362500.000) = 28 
    [1362500.000, 1365000.000) = 53 
    [1365000.000, 1367500.000) = 15 
    [1367500.000, 1370000.000) = 0 
    [1370000.000, 1372500.000) = 1 
    [1372500.000, 1375000.000) = 0 
    [1375000.000, 1377500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1356857.344 us/op
     p(50.0000) = 1363148.800 us/op
     p(90.0000) = 1365245.952 us/op
     p(95.0000) = 1365245.952 us/op
     p(99.0000) = 1370656.604 us/op
     p(99.9000) = 1371537.408 us/op
     p(99.9900) = 1371537.408 us/op
     p(99.9990) = 1371537.408 us/op
     p(99.9999) = 1371537.408 us/op
    p(100.0000) = 1371537.408 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 78.98% complete, ETA 01:45:39
# Fork: 1 of 1
# Warmup Iteration   1: 127247.684 ±(99.9%) 1901.614 us/op
# Warmup Iteration   2: 131629.056 ±(99.9%) 1872.997 us/op
# Warmup Iteration   3: 127828.383 ±(99.9%) 984.882 us/op
# Warmup Iteration   4: 128837.054 ±(99.9%) 911.784 us/op
# Warmup Iteration   5: 129245.394 ±(99.9%) 1230.010 us/op
Iteration   1: 134929.012 ±(99.9%) 1099.952 us/op
                 countUppercase·p0.00:   132907.008 us/op
                 countUppercase·p0.50:   133693.440 us/op
                 countUppercase·p0.90:   140142.182 us/op
                 countUppercase·p0.95:   141662.618 us/op
                 countUppercase·p0.99:   144965.632 us/op
                 countUppercase·p0.999:  144965.632 us/op
                 countUppercase·p0.9999: 144965.632 us/op
                 countUppercase·p1.00:   144965.632 us/op

Iteration   2: 128759.755 ±(99.9%) 899.028 us/op
                 countUppercase·p0.00:   127008.768 us/op
                 countUppercase·p0.50:   127926.272 us/op
                 countUppercase·p0.90:   130731.213 us/op
                 countUppercase·p0.95:   135135.232 us/op
                 countUppercase·p0.99:   137887.744 us/op
                 countUppercase·p0.999:  137887.744 us/op
                 countUppercase·p0.9999: 137887.744 us/op
                 countUppercase·p1.00:   137887.744 us/op

Iteration   3: 126435.328 ±(99.9%) 1475.934 us/op
                 countUppercase·p0.00:   124256.256 us/op
                 countUppercase·p0.50:   124911.616 us/op
                 countUppercase·p0.90:   130062.746 us/op
                 countUppercase·p0.95:   136452.506 us/op
                 countUppercase·p0.99:   146800.640 us/op
                 countUppercase·p0.999:  146800.640 us/op
                 countUppercase·p0.9999: 146800.640 us/op
                 countUppercase·p1.00:   146800.640 us/op

Iteration   4: 127154.772 ±(99.9%) 847.772 us/op
                 countUppercase·p0.00:   125435.904 us/op
                 countUppercase·p0.50:   126091.264 us/op
                 countUppercase·p0.90:   130285.568 us/op
                 countUppercase·p0.95:   133300.224 us/op
                 countUppercase·p0.99:   135790.592 us/op
                 countUppercase·p0.999:  135790.592 us/op
                 countUppercase·p0.9999: 135790.592 us/op
                 countUppercase·p1.00:   135790.592 us/op

Iteration   5: 130156.198 ±(99.9%) 1640.133 us/op
                 countUppercase·p0.00:   127401.984 us/op
                 countUppercase·p0.50:   128319.488 us/op
                 countUppercase·p0.90:   136157.594 us/op
                 countUppercase·p0.95:   140011.110 us/op
                 countUppercase·p0.99:   150208.512 us/op
                 countUppercase·p0.999:  150208.512 us/op
                 countUppercase·p0.9999: 150208.512 us/op
                 countUppercase·p1.00:   150208.512 us/op

Iteration   6: 130224.288 ±(99.9%) 846.579 us/op
                 countUppercase·p0.00:   128712.704 us/op
                 countUppercase·p0.50:   129368.064 us/op
                 countUppercase·p0.90:   132540.006 us/op
                 countUppercase·p0.95:   135685.734 us/op
                 countUppercase·p0.99:   141033.472 us/op
                 countUppercase·p0.999:  141033.472 us/op
                 countUppercase·p0.9999: 141033.472 us/op
                 countUppercase·p1.00:   141033.472 us/op

Iteration   7: 129026.941 ±(99.9%) 831.714 us/op
                 countUppercase·p0.00:   127008.768 us/op
                 countUppercase·p0.50:   128188.416 us/op
                 countUppercase·p0.90:   131937.075 us/op
                 countUppercase·p0.95:   134283.264 us/op
                 countUppercase·p0.99:   137101.312 us/op
                 countUppercase·p0.999:  137101.312 us/op
                 countUppercase·p0.9999: 137101.312 us/op
                 countUppercase·p1.00:   137101.312 us/op

Iteration   8: 123416.424 ±(99.9%) 1094.808 us/op
                 countUppercase·p0.00:   121896.960 us/op
                 countUppercase·p0.50:   122290.176 us/op
                 countUppercase·p0.90:   125173.760 us/op
                 countUppercase·p0.95:   131163.750 us/op
                 countUppercase·p0.99:   138674.176 us/op
                 countUppercase·p0.999:  138674.176 us/op
                 countUppercase·p0.9999: 138674.176 us/op
                 countUppercase·p1.00:   138674.176 us/op

Iteration   9: 129336.136 ±(99.9%) 1081.402 us/op
                 countUppercase·p0.00:   127401.984 us/op
                 countUppercase·p0.50:   128057.344 us/op
                 countUppercase·p0.90:   132448.256 us/op
                 countUppercase·p0.95:   137376.563 us/op
                 countUppercase·p0.99:   138936.320 us/op
                 countUppercase·p0.999:  138936.320 us/op
                 countUppercase·p0.9999: 138936.320 us/op
                 countUppercase·p1.00:   138936.320 us/op

Iteration  10: 127314.050 ±(99.9%) 791.515 us/op
                 countUppercase·p0.00:   125829.120 us/op
                 countUppercase·p0.50:   126615.552 us/op
                 countUppercase·p0.90:   129236.992 us/op
                 countUppercase·p0.95:   130547.712 us/op
                 countUppercase·p0.99:   140771.328 us/op
                 countUppercase·p0.999:  140771.328 us/op
                 countUppercase·p0.9999: 140771.328 us/op
                 countUppercase·p1.00:   140771.328 us/op

Iteration  11: 126160.077 ±(99.9%) 602.271 us/op
                 countUppercase·p0.00:   124387.328 us/op
                 countUppercase·p0.50:   125435.904 us/op
                 countUppercase·p0.90:   128306.381 us/op
                 countUppercase·p0.95:   129721.958 us/op
                 countUppercase·p0.99:   132644.864 us/op
                 countUppercase·p0.999:  132644.864 us/op
                 countUppercase·p0.9999: 132644.864 us/op
                 countUppercase·p1.00:   132644.864 us/op

Iteration  12: 126560.800 ±(99.9%) 854.690 us/op
                 countUppercase·p0.00:   124911.616 us/op
                 countUppercase·p0.50:   125566.976 us/op
                 countUppercase·p0.90:   128974.848 us/op
                 countUppercase·p0.95:   133038.080 us/op
                 countUppercase·p0.99:   135004.160 us/op
                 countUppercase·p0.999:  135004.160 us/op
                 countUppercase·p0.9999: 135004.160 us/op
                 countUppercase·p1.00:   135004.160 us/op

Iteration  13: 132117.127 ±(99.9%) 579.620 us/op
                 countUppercase·p0.00:   130940.928 us/op
                 countUppercase·p0.50:   131465.216 us/op
                 countUppercase·p0.90:   133863.834 us/op
                 countUppercase·p0.95:   134558.515 us/op
                 countUppercase·p0.99:   139984.896 us/op
                 countUppercase·p0.999:  139984.896 us/op
                 countUppercase·p0.9999: 139984.896 us/op
                 countUppercase·p1.00:   139984.896 us/op

Iteration  14: 129282.363 ±(99.9%) 1221.720 us/op
                 countUppercase·p0.00:   127139.840 us/op
                 countUppercase·p0.50:   128057.344 us/op
                 countUppercase·p0.90:   133457.510 us/op
                 countUppercase·p0.95:   136118.272 us/op
                 countUppercase·p0.99:   147062.784 us/op
                 countUppercase·p0.999:  147062.784 us/op
                 countUppercase·p0.9999: 147062.784 us/op
                 countUppercase·p1.00:   147062.784 us/op

Iteration  15: 128442.158 ±(99.9%) 651.928 us/op
                 countUppercase·p0.00:   127139.840 us/op
                 countUppercase·p0.50:   127664.128 us/op
                 countUppercase·p0.90:   130298.675 us/op
                 countUppercase·p0.95:   131733.914 us/op
                 countUppercase·p0.99:   137625.600 us/op
                 countUppercase·p0.999:  137625.600 us/op
                 countUppercase·p0.9999: 137625.600 us/op
                 countUppercase·p1.00:   137625.600 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 1173
  mean = 128570.905 ±(99.9%) 355.942 us/op

  Histogram, us/op:
    [120000.000, 122500.000) = 51 
    [122500.000, 125000.000) = 80 
    [125000.000, 127500.000) = 302 
    [127500.000, 130000.000) = 433 
    [130000.000, 132500.000) = 140 
    [132500.000, 135000.000) = 104 
    [135000.000, 137500.000) = 30 
    [137500.000, 140000.000) = 18 
    [140000.000, 142500.000) = 10 
    [142500.000, 145000.000) = 2 
    [145000.000, 147500.000) = 2 
    [147500.000, 150000.000) = 0 
    [150000.000, 152500.000) = 1 
    [152500.000, 155000.000) = 0 
    [155000.000, 157500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 121896.960 us/op
     p(50.0000) = 127926.272 us/op
     p(90.0000) = 133431.296 us/op
     p(95.0000) = 135082.803 us/op
     p(99.0000) = 141033.472 us/op
     p(99.9000) = 149661.155 us/op
     p(99.9900) = 150208.512 us/op
     p(99.9990) = 150208.512 us/op
     p(99.9999) = 150208.512 us/op
    p(100.0000) = 150208.512 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 79.71% complete, ETA 01:42:00
# Fork: 1 of 1
# Warmup Iteration   1: 3553973.589 ±(99.9%) 421437.750 us/op
# Warmup Iteration   2: 4761933.141 ±(99.9%) 176714.721 us/op
# Warmup Iteration   3: 4636104.021 ±(99.9%) 233771.603 us/op
# Warmup Iteration   4: 4795487.573 ±(99.9%) 176714.721 us/op
# Warmup Iteration   5: 4706009.088 ±(99.9%) 153039.438 us/op
Iteration   1: 4552217.941 ±(99.9%) 318576.994 us/op
                 countUppercase·p0.00:   4538236.928 us/op
                 countUppercase·p0.50:   4546625.536 us/op
                 countUppercase·p0.90:   4571791.360 us/op
                 countUppercase·p0.95:   4571791.360 us/op
                 countUppercase·p0.99:   4571791.360 us/op
                 countUppercase·p0.999:  4571791.360 us/op
                 countUppercase·p0.9999: 4571791.360 us/op
                 countUppercase·p1.00:   4571791.360 us/op

Iteration   2: 4887762.261 ±(99.9%) 88357.361 us/op
                 countUppercase·p0.00:   4882169.856 us/op
                 countUppercase·p0.50:   4890558.464 us/op
                 countUppercase·p0.90:   4890558.464 us/op
                 countUppercase·p0.95:   4890558.464 us/op
                 countUppercase·p0.99:   4890558.464 us/op
                 countUppercase·p0.999:  4890558.464 us/op
                 countUppercase·p0.9999: 4890558.464 us/op
                 countUppercase·p1.00:   4890558.464 us/op

Iteration   3: 4616530.603 ±(99.9%) 88357.361 us/op
                 countUppercase·p0.00:   4613734.400 us/op
                 countUppercase·p0.50:   4613734.400 us/op
                 countUppercase·p0.90:   4622123.008 us/op
                 countUppercase·p0.95:   4622123.008 us/op
                 countUppercase·p0.99:   4622123.008 us/op
                 countUppercase·p0.999:  4622123.008 us/op
                 countUppercase·p0.9999: 4622123.008 us/op
                 countUppercase·p1.00:   4622123.008 us/op

Iteration   4: 4482312.875 ±(99.9%) 88357.361 us/op
                 countUppercase·p0.00:   4479516.672 us/op
                 countUppercase·p0.50:   4479516.672 us/op
                 countUppercase·p0.90:   4487905.280 us/op
                 countUppercase·p0.95:   4487905.280 us/op
                 countUppercase·p0.99:   4487905.280 us/op
                 countUppercase·p0.999:  4487905.280 us/op
                 countUppercase·p0.9999: 4487905.280 us/op
                 countUppercase·p1.00:   4487905.280 us/op

Iteration   5: 4935297.707 ±(99.9%) 176714.721 us/op
                 countUppercase·p0.00:   4924112.896 us/op
                 countUppercase·p0.50:   4940890.112 us/op
                 countUppercase·p0.90:   4940890.112 us/op
                 countUppercase·p0.95:   4940890.112 us/op
                 countUppercase·p0.99:   4940890.112 us/op
                 countUppercase·p0.999:  4940890.112 us/op
                 countUppercase·p0.9999: 4940890.112 us/op
                 countUppercase·p1.00:   4940890.112 us/op

Iteration   6: 4650085.035 ±(99.9%) 176714.721 us/op
                 countUppercase·p0.00:   4638900.224 us/op
                 countUppercase·p0.50:   4655677.440 us/op
                 countUppercase·p0.90:   4655677.440 us/op
                 countUppercase·p0.95:   4655677.440 us/op
                 countUppercase·p0.99:   4655677.440 us/op
                 countUppercase·p0.999:  4655677.440 us/op
                 countUppercase·p0.9999: 4655677.440 us/op
                 countUppercase·p1.00:   4655677.440 us/op

Iteration   7: 4440369.835 ±(99.9%) 88357.361 us/op
                 countUppercase·p0.00:   4437573.632 us/op
                 countUppercase·p0.50:   4437573.632 us/op
                 countUppercase·p0.90:   4445962.240 us/op
                 countUppercase·p0.95:   4445962.240 us/op
                 countUppercase·p0.99:   4445962.240 us/op
                 countUppercase·p0.999:  4445962.240 us/op
                 countUppercase·p0.9999: 4445962.240 us/op
                 countUppercase·p1.00:   4445962.240 us/op

Iteration   8: 4742359.723 ±(99.9%) 88357.361 us/op
                 countUppercase·p0.00:   4739563.520 us/op
                 countUppercase·p0.50:   4739563.520 us/op
                 countUppercase·p0.90:   4747952.128 us/op
                 countUppercase·p0.95:   4747952.128 us/op
                 countUppercase·p0.99:   4747952.128 us/op
                 countUppercase·p0.999:  4747952.128 us/op
                 countUppercase·p0.9999: 4747952.128 us/op
                 countUppercase·p1.00:   4747952.128 us/op

Iteration   9: 4636104.021 ±(99.9%) 88357.361 us/op
                 countUppercase·p0.00:   4630511.616 us/op
                 countUppercase·p0.50:   4638900.224 us/op
                 countUppercase·p0.90:   4638900.224 us/op
                 countUppercase·p0.95:   4638900.224 us/op
                 countUppercase·p0.99:   4638900.224 us/op
                 countUppercase·p0.999:  4638900.224 us/op
                 countUppercase·p0.9999: 4638900.224 us/op
                 countUppercase·p1.00:   4638900.224 us/op

Iteration  10: 5003804.672 us/op
                 countUppercase·p0.00:   4999610.368 us/op
                 countUppercase·p0.50:   5003804.672 us/op
                 countUppercase·p0.90:   5007998.976 us/op
                 countUppercase·p0.95:   5007998.976 us/op
                 countUppercase·p0.99:   5007998.976 us/op
                 countUppercase·p0.999:  5007998.976 us/op
                 countUppercase·p0.9999: 5007998.976 us/op
                 countUppercase·p1.00:   5007998.976 us/op

Iteration  11: 4535440.725 ±(99.9%) 176714.721 us/op
                 countUppercase·p0.00:   4529848.320 us/op
                 countUppercase·p0.50:   4529848.320 us/op
                 countUppercase·p0.90:   4546625.536 us/op
                 countUppercase·p0.95:   4546625.536 us/op
                 countUppercase·p0.99:   4546625.536 us/op
                 countUppercase·p0.999:  4546625.536 us/op
                 countUppercase·p0.9999: 4546625.536 us/op
                 countUppercase·p1.00:   4546625.536 us/op

Iteration  12: 4404019.200 ±(99.9%) 153039.438 us/op
                 countUppercase·p0.00:   4395630.592 us/op
                 countUppercase·p0.50:   4404019.200 us/op
                 countUppercase·p0.90:   4412407.808 us/op
                 countUppercase·p0.95:   4412407.808 us/op
                 countUppercase·p0.99:   4412407.808 us/op
                 countUppercase·p0.999:  4412407.808 us/op
                 countUppercase·p0.9999: 4412407.808 us/op
                 countUppercase·p1.00:   4412407.808 us/op

Iteration  13: 4440369.835 ±(99.9%) 233771.603 us/op
                 countUppercase·p0.00:   4429185.024 us/op
                 countUppercase·p0.50:   4437573.632 us/op
                 countUppercase·p0.90:   4454350.848 us/op
                 countUppercase·p0.95:   4454350.848 us/op
                 countUppercase·p0.99:   4454350.848 us/op
                 countUppercase·p0.999:  4454350.848 us/op
                 countUppercase·p0.9999: 4454350.848 us/op
                 countUppercase·p1.00:   4454350.848 us/op

Iteration  14: 4926909.099 ±(99.9%) 88357.361 us/op
                 countUppercase·p0.00:   4924112.896 us/op
                 countUppercase·p0.50:   4924112.896 us/op
                 countUppercase·p0.90:   4932501.504 us/op
                 countUppercase·p0.95:   4932501.504 us/op
                 countUppercase·p0.99:   4932501.504 us/op
                 countUppercase·p0.999:  4932501.504 us/op
                 countUppercase·p0.9999: 4932501.504 us/op
                 countUppercase·p1.00:   4932501.504 us/op

Iteration  15: 4647288.832 ±(99.9%) 153039.438 us/op
                 countUppercase·p0.00:   4638900.224 us/op
                 countUppercase·p0.50:   4647288.832 us/op
                 countUppercase·p0.90:   4655677.440 us/op
                 countUppercase·p0.95:   4655677.440 us/op
                 countUppercase·p0.99:   4655677.440 us/op
                 countUppercase·p0.999:  4655677.440 us/op
                 countUppercase·p0.9999: 4655677.440 us/op
                 countUppercase·p1.00:   4655677.440 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 44
  mean = 4652245.737 ±(99.9%) 100207.265 us/op

  Histogram, us/op:
    [4300000.000, 4350000.000) = 0 
    [4350000.000, 4400000.000) = 1 
    [4400000.000, 4450000.000) = 7 
    [4450000.000, 4500000.000) = 4 
    [4500000.000, 4550000.000) = 5 
    [4550000.000, 4600000.000) = 1 
    [4600000.000, 4650000.000) = 9 
    [4650000.000, 4700000.000) = 3 
    [4700000.000, 4750000.000) = 3 
    [4750000.000, 4800000.000) = 0 
    [4800000.000, 4850000.000) = 0 
    [4850000.000, 4900000.000) = 3 
    [4900000.000, 4950000.000) = 6 
    [4950000.000, 5000000.000) = 1 
    [5000000.000, 5050000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 4395630.592 us/op
     p(50.0000) = 4634705.920 us/op
     p(90.0000) = 4936695.808 us/op
     p(95.0000) = 4984930.304 us/op
     p(99.0000) = 5007998.976 us/op
     p(99.9000) = 5007998.976 us/op
     p(99.9900) = 5007998.976 us/op
     p(99.9990) = 5007998.976 us/op
     p(99.9999) = 5007998.976 us/op
    p(100.0000) = 5007998.976 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 80.43% complete, ETA 01:38:38
# Fork: 1 of 1
# Warmup Iteration   1: 1.908 ±(99.9%) 0.026 us/op
# Warmup Iteration   2: 1.896 ±(99.9%) 0.004 us/op
# Warmup Iteration   3: 1.900 ±(99.9%) 0.003 us/op
# Warmup Iteration   4: 1.902 ±(99.9%) 0.004 us/op
# Warmup Iteration   5: 1.901 ±(99.9%) 0.004 us/op
Iteration   1: 1.898 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.894 us/op
                 runFibonacci·p0.99:   1.938 us/op
                 runFibonacci·p0.999:  8.954 us/op
                 runFibonacci·p0.9999: 24.282 us/op
                 runFibonacci·p1.00:   105.984 us/op

Iteration   2: 1.902 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.892 us/op
                 runFibonacci·p0.99:   1.920 us/op
                 runFibonacci·p0.999:  9.387 us/op
                 runFibonacci·p0.9999: 29.408 us/op
                 runFibonacci·p1.00:   435.200 us/op

Iteration   3: 1.901 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.892 us/op
                 runFibonacci·p0.99:   1.934 us/op
                 runFibonacci·p0.999:  9.547 us/op
                 runFibonacci·p0.9999: 30.464 us/op
                 runFibonacci·p1.00:   199.168 us/op

Iteration   4: 1.900 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.894 us/op
                 runFibonacci·p0.99:   1.922 us/op
                 runFibonacci·p0.999:  9.226 us/op
                 runFibonacci·p0.9999: 28.384 us/op
                 runFibonacci·p1.00:   117.504 us/op

Iteration   5: 1.897 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.892 us/op
                 runFibonacci·p0.99:   1.926 us/op
                 runFibonacci·p0.999:  8.968 us/op
                 runFibonacci·p0.9999: 22.706 us/op
                 runFibonacci·p1.00:   123.904 us/op

Iteration   6: 1.897 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.892 us/op
                 runFibonacci·p0.99:   1.922 us/op
                 runFibonacci·p0.999:  8.545 us/op
                 runFibonacci·p0.9999: 22.359 us/op
                 runFibonacci·p1.00:   138.496 us/op

Iteration   7: 1.899 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.892 us/op
                 runFibonacci·p0.99:   1.916 us/op
                 runFibonacci·p0.999:  9.031 us/op
                 runFibonacci·p0.9999: 31.971 us/op
                 runFibonacci·p1.00:   259.840 us/op

Iteration   8: 1.897 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.892 us/op
                 runFibonacci·p0.99:   1.922 us/op
                 runFibonacci·p0.999:  8.935 us/op
                 runFibonacci·p0.9999: 24.270 us/op
                 runFibonacci·p1.00:   79.744 us/op

Iteration   9: 1.897 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.892 us/op
                 runFibonacci·p0.99:   1.914 us/op
                 runFibonacci·p0.999:  8.807 us/op
                 runFibonacci·p0.9999: 26.115 us/op
                 runFibonacci·p1.00:   105.856 us/op

Iteration  10: 1.899 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.894 us/op
                 runFibonacci·p0.99:   1.928 us/op
                 runFibonacci·p0.999:  8.988 us/op
                 runFibonacci·p0.9999: 26.729 us/op
                 runFibonacci·p1.00:   157.184 us/op

Iteration  11: 1.897 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.894 us/op
                 runFibonacci·p0.99:   1.916 us/op
                 runFibonacci·p0.999:  8.888 us/op
                 runFibonacci·p0.9999: 22.226 us/op
                 runFibonacci·p1.00:   150.016 us/op

Iteration  12: 1.897 ±(99.9%) 0.003 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.894 us/op
                 runFibonacci·p0.99:   1.922 us/op
                 runFibonacci·p0.999:  8.490 us/op
                 runFibonacci·p0.9999: 21.094 us/op
                 runFibonacci·p1.00:   151.296 us/op

Iteration  13: 1.900 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.894 us/op
                 runFibonacci·p0.99:   1.924 us/op
                 runFibonacci·p0.999:  9.339 us/op
                 runFibonacci·p0.9999: 26.052 us/op
                 runFibonacci·p1.00:   148.224 us/op

Iteration  14: 1.902 ±(99.9%) 0.004 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.894 us/op
                 runFibonacci·p0.99:   1.940 us/op
                 runFibonacci·p0.999:  9.559 us/op
                 runFibonacci·p0.9999: 28.511 us/op
                 runFibonacci·p1.00:   143.104 us/op

Iteration  15: 1.910 ±(99.9%) 0.027 us/op
                 runFibonacci·p0.00:   1.848 us/op
                 runFibonacci·p0.50:   1.874 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.892 us/op
                 runFibonacci·p0.99:   1.924 us/op
                 runFibonacci·p0.999:  9.676 us/op
                 runFibonacci·p0.9999: 32.626 us/op
                 runFibonacci·p1.00:   2703.360 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 5015026
  mean =      1.900 ±(99.9%) 0.002 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 5015022 
    [ 250.000,  500.000) = 3 
    [ 500.000,  750.000) = 0 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      1.848 us/op
     p(50.0000) =      1.874 us/op
     p(90.0000) =      1.890 us/op
     p(95.0000) =      1.892 us/op
     p(99.0000) =      1.924 us/op
     p(99.9000) =      9.088 us/op
     p(99.9900) =     26.400 us/op
     p(99.9990) =     77.515 us/op
     p(99.9999) =    198.537 us/op
    p(100.0000) =   2703.360 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 81.16% complete, ETA 01:34:58
# Fork: 1 of 1
# Warmup Iteration   1: 4.976 ±(99.9%) 0.036 us/op
# Warmup Iteration   2: 4.976 ±(99.9%) 0.007 us/op
# Warmup Iteration   3: 4.976 ±(99.9%) 0.007 us/op
# Warmup Iteration   4: 4.986 ±(99.9%) 0.016 us/op
# Warmup Iteration   5: 4.984 ±(99.9%) 0.008 us/op
Iteration   1: 4.988 ±(99.9%) 0.014 us/op
                 runFibonacci·p0.00:   4.776 us/op
                 runFibonacci·p0.50:   4.912 us/op
                 runFibonacci·p0.90:   4.976 us/op
                 runFibonacci·p0.95:   5.000 us/op
                 runFibonacci·p0.99:   5.208 us/op
                 runFibonacci·p0.999:  16.730 us/op
                 runFibonacci·p0.9999: 52.670 us/op
                 runFibonacci·p1.00:   505.344 us/op

Iteration   2: 4.970 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   4.768 us/op
                 runFibonacci·p0.50:   4.912 us/op
                 runFibonacci·p0.90:   4.968 us/op
                 runFibonacci·p0.95:   4.984 us/op
                 runFibonacci·p0.99:   5.104 us/op
                 runFibonacci·p0.999:  15.960 us/op
                 runFibonacci·p0.9999: 42.877 us/op
                 runFibonacci·p1.00:   118.784 us/op

Iteration   3: 4.974 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   4.776 us/op
                 runFibonacci·p0.50:   4.912 us/op
                 runFibonacci·p0.90:   4.968 us/op
                 runFibonacci·p0.95:   4.984 us/op
                 runFibonacci·p0.99:   5.520 us/op
                 runFibonacci·p0.999:  16.042 us/op
                 runFibonacci·p0.9999: 44.608 us/op
                 runFibonacci·p1.00:   193.280 us/op

Iteration   4: 4.984 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   4.776 us/op
                 runFibonacci·p0.50:   4.912 us/op
                 runFibonacci·p0.90:   4.976 us/op
                 runFibonacci·p0.95:   5.000 us/op
                 runFibonacci·p0.99:   5.165 us/op
                 runFibonacci·p0.999:  16.891 us/op
                 runFibonacci·p0.9999: 49.125 us/op
                 runFibonacci·p1.00:   175.360 us/op

Iteration   5: 4.984 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   4.776 us/op
                 runFibonacci·p0.50:   4.920 us/op
                 runFibonacci·p0.90:   4.984 us/op
                 runFibonacci·p0.95:   5.008 us/op
                 runFibonacci·p0.99:   5.224 us/op
                 runFibonacci·p0.999:  16.543 us/op
                 runFibonacci·p0.9999: 45.414 us/op
                 runFibonacci·p1.00:   118.912 us/op

Iteration   6: 4.970 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   4.776 us/op
                 runFibonacci·p0.50:   4.912 us/op
                 runFibonacci·p0.90:   4.960 us/op
                 runFibonacci·p0.95:   4.984 us/op
                 runFibonacci·p0.99:   5.168 us/op
                 runFibonacci·p0.999:  15.815 us/op
                 runFibonacci·p0.9999: 45.364 us/op
                 runFibonacci·p1.00:   107.136 us/op

Iteration   7: 4.974 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   4.760 us/op
                 runFibonacci·p0.50:   4.912 us/op
                 runFibonacci·p0.90:   4.976 us/op
                 runFibonacci·p0.95:   5.000 us/op
                 runFibonacci·p0.99:   5.184 us/op
                 runFibonacci·p0.999:  16.075 us/op
                 runFibonacci·p0.9999: 39.044 us/op
                 runFibonacci·p1.00:   124.672 us/op

Iteration   8: 4.982 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   4.776 us/op
                 runFibonacci·p0.50:   4.912 us/op
                 runFibonacci·p0.90:   4.976 us/op
                 runFibonacci·p0.95:   5.000 us/op
                 runFibonacci·p0.99:   5.224 us/op
                 runFibonacci·p0.999:  16.221 us/op
                 runFibonacci·p0.9999: 48.733 us/op
                 runFibonacci·p1.00:   376.320 us/op

Iteration   9: 4.967 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   4.768 us/op
                 runFibonacci·p0.50:   4.912 us/op
                 runFibonacci·p0.90:   4.960 us/op
                 runFibonacci·p0.95:   4.976 us/op
                 runFibonacci·p0.99:   5.160 us/op
                 runFibonacci·p0.999:  15.320 us/op
                 runFibonacci·p0.9999: 39.662 us/op
                 runFibonacci·p1.00:   115.328 us/op

Iteration  10: 4.970 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   4.768 us/op
                 runFibonacci·p0.50:   4.904 us/op
                 runFibonacci·p0.90:   4.952 us/op
                 runFibonacci·p0.95:   4.968 us/op
                 runFibonacci·p0.99:   5.264 us/op
                 runFibonacci·p0.999:  15.718 us/op
                 runFibonacci·p0.9999: 42.445 us/op
                 runFibonacci·p1.00:   148.736 us/op

Iteration  11: 4.964 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   4.768 us/op
                 runFibonacci·p0.50:   4.912 us/op
                 runFibonacci·p0.90:   4.960 us/op
                 runFibonacci·p0.95:   4.976 us/op
                 runFibonacci·p0.99:   5.208 us/op
                 runFibonacci·p0.999:  14.699 us/op
                 runFibonacci·p0.9999: 37.197 us/op
                 runFibonacci·p1.00:   107.008 us/op

Iteration  12: 4.991 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   4.776 us/op
                 runFibonacci·p0.50:   4.928 us/op
                 runFibonacci·p0.90:   4.992 us/op
                 runFibonacci·p0.95:   5.016 us/op
                 runFibonacci·p0.99:   5.472 us/op
                 runFibonacci·p0.999:  14.944 us/op
                 runFibonacci·p0.9999: 41.781 us/op
                 runFibonacci·p1.00:   138.240 us/op

Iteration  13: 4.988 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   4.792 us/op
                 runFibonacci·p0.50:   4.928 us/op
                 runFibonacci·p0.90:   4.976 us/op
                 runFibonacci·p0.95:   4.992 us/op
                 runFibonacci·p0.99:   5.264 us/op
                 runFibonacci·p0.999:  15.264 us/op
                 runFibonacci·p0.9999: 40.685 us/op
                 runFibonacci·p1.00:   207.360 us/op

Iteration  14: 4.994 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   4.800 us/op
                 runFibonacci·p0.50:   4.928 us/op
                 runFibonacci·p0.90:   4.984 us/op
                 runFibonacci·p0.95:   5.000 us/op
                 runFibonacci·p0.99:   5.544 us/op
                 runFibonacci·p0.999:  15.674 us/op
                 runFibonacci·p0.9999: 46.155 us/op
                 runFibonacci·p1.00:   315.392 us/op

Iteration  15: 5.009 ±(99.9%) 0.015 us/op
                 runFibonacci·p0.00:   4.800 us/op
                 runFibonacci·p0.50:   4.936 us/op
                 runFibonacci·p0.90:   4.992 us/op
                 runFibonacci·p0.95:   5.008 us/op
                 runFibonacci·p0.99:   5.664 us/op
                 runFibonacci·p0.999:  16.049 us/op
                 runFibonacci·p0.9999: 53.876 us/op
                 runFibonacci·p1.00:   493.568 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 3781326
  mean =      4.980 ±(99.9%) 0.002 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 3781051 
    [ 50.000, 100.000) = 214 
    [100.000, 150.000) = 41 
    [150.000, 200.000) = 7 
    [200.000, 250.000) = 3 
    [250.000, 300.000) = 0 
    [300.000, 350.000) = 1 
    [350.000, 400.000) = 2 
    [400.000, 450.000) = 2 
    [450.000, 500.000) = 4 
    [500.000, 550.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      4.760 us/op
     p(50.0000) =      4.920 us/op
     p(90.0000) =      4.976 us/op
     p(95.0000) =      4.992 us/op
     p(99.0000) =      5.288 us/op
     p(99.9000) =     15.856 us/op
     p(99.9900) =     45.223 us/op
     p(99.9990) =    111.944 us/op
     p(99.9999) =    484.431 us/op
    p(100.0000) =    505.344 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 81.88% complete, ETA 01:31:18
# Fork: 1 of 1
# Warmup Iteration   1: 9.209 ±(99.9%) 0.010 us/op
# Warmup Iteration   2: 9.145 ±(99.9%) 0.009 us/op
# Warmup Iteration   3: 9.208 ±(99.9%) 0.009 us/op
# Warmup Iteration   4: 9.201 ±(99.9%) 0.010 us/op
# Warmup Iteration   5: 9.217 ±(99.9%) 0.009 us/op
Iteration   1: 9.221 ±(99.9%) 0.009 us/op
                 runFibonacci·p0.00:   8.912 us/op
                 runFibonacci·p0.50:   9.104 us/op
                 runFibonacci·p0.90:   9.280 us/op
                 runFibonacci·p0.95:   9.344 us/op
                 runFibonacci·p0.99:   13.168 us/op
                 runFibonacci·p0.999:  21.376 us/op
                 runFibonacci·p0.9999: 53.089 us/op
                 runFibonacci·p1.00:   278.528 us/op

Iteration   2: 9.199 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   8.896 us/op
                 runFibonacci·p0.50:   9.088 us/op
                 runFibonacci·p0.90:   9.168 us/op
                 runFibonacci·p0.95:   9.184 us/op
                 runFibonacci·p0.99:   13.280 us/op
                 runFibonacci·p0.999:  22.031 us/op
                 runFibonacci·p0.9999: 61.447 us/op
                 runFibonacci·p1.00:   126.336 us/op

Iteration   3: 9.243 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   8.912 us/op
                 runFibonacci·p0.50:   9.104 us/op
                 runFibonacci·p0.90:   9.312 us/op
                 runFibonacci·p0.95:   9.360 us/op
                 runFibonacci·p0.99:   13.440 us/op
                 runFibonacci·p0.999:  21.976 us/op
                 runFibonacci·p0.9999: 59.755 us/op
                 runFibonacci·p1.00:   194.560 us/op

Iteration   4: 9.220 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   8.912 us/op
                 runFibonacci·p0.50:   9.088 us/op
                 runFibonacci·p0.90:   9.296 us/op
                 runFibonacci·p0.95:   9.360 us/op
                 runFibonacci·p0.99:   13.216 us/op
                 runFibonacci·p0.999:  21.707 us/op
                 runFibonacci·p0.9999: 52.723 us/op
                 runFibonacci·p1.00:   114.944 us/op

Iteration   5: 9.185 ±(99.9%) 0.007 us/op
                 runFibonacci·p0.00:   8.896 us/op
                 runFibonacci·p0.50:   9.088 us/op
                 runFibonacci·p0.90:   9.152 us/op
                 runFibonacci·p0.95:   9.184 us/op
                 runFibonacci·p0.99:   13.136 us/op
                 runFibonacci·p0.999:  21.029 us/op
                 runFibonacci·p0.9999: 52.293 us/op
                 runFibonacci·p1.00:   117.120 us/op

Iteration   6: 9.192 ±(99.9%) 0.006 us/op
                 runFibonacci·p0.00:   8.912 us/op
                 runFibonacci·p0.50:   9.088 us/op
                 runFibonacci·p0.90:   9.184 us/op
                 runFibonacci·p0.95:   9.280 us/op
                 runFibonacci·p0.99:   12.917 us/op
                 runFibonacci·p0.999:  20.416 us/op
                 runFibonacci·p0.9999: 44.152 us/op
                 runFibonacci·p1.00:   73.344 us/op

Iteration   7: 9.208 ±(99.9%) 0.012 us/op
                 runFibonacci·p0.00:   8.896 us/op
                 runFibonacci·p0.50:   9.088 us/op
                 runFibonacci·p0.90:   9.168 us/op
                 runFibonacci·p0.95:   9.200 us/op
                 runFibonacci·p0.99:   13.407 us/op
                 runFibonacci·p0.999:  24.812 us/op
                 runFibonacci·p0.9999: 60.343 us/op
                 runFibonacci·p1.00:   497.152 us/op

Iteration   8: 9.215 ±(99.9%) 0.012 us/op
                 runFibonacci·p0.00:   8.912 us/op
                 runFibonacci·p0.50:   9.088 us/op
                 runFibonacci·p0.90:   9.248 us/op
                 runFibonacci·p0.95:   9.328 us/op
                 runFibonacci·p0.99:   13.152 us/op
                 runFibonacci·p0.999:  22.268 us/op
                 runFibonacci·p0.9999: 56.710 us/op
                 runFibonacci·p1.00:   523.264 us/op

Iteration   9: 9.192 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   8.912 us/op
                 runFibonacci·p0.50:   9.088 us/op
                 runFibonacci·p0.90:   9.152 us/op
                 runFibonacci·p0.95:   9.184 us/op
                 runFibonacci·p0.99:   13.184 us/op
                 runFibonacci·p0.999:  22.638 us/op
                 runFibonacci·p0.9999: 51.873 us/op
                 runFibonacci·p1.00:   147.712 us/op

Iteration  10: 9.208 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   8.912 us/op
                 runFibonacci·p0.50:   9.088 us/op
                 runFibonacci·p0.90:   9.168 us/op
                 runFibonacci·p0.95:   9.200 us/op
                 runFibonacci·p0.99:   13.328 us/op
                 runFibonacci·p0.999:  23.763 us/op
                 runFibonacci·p0.9999: 75.472 us/op
                 runFibonacci·p1.00:   296.448 us/op

Iteration  11: 9.193 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   8.912 us/op
                 runFibonacci·p0.50:   9.088 us/op
                 runFibonacci·p0.90:   9.168 us/op
                 runFibonacci·p0.95:   9.184 us/op
                 runFibonacci·p0.99:   13.120 us/op
                 runFibonacci·p0.999:  22.528 us/op
                 runFibonacci·p0.9999: 51.718 us/op
                 runFibonacci·p1.00:   123.648 us/op

Iteration  12: 9.206 ±(99.9%) 0.008 us/op
                 runFibonacci·p0.00:   8.928 us/op
                 runFibonacci·p0.50:   9.104 us/op
                 runFibonacci·p0.90:   9.184 us/op
                 runFibonacci·p0.95:   9.200 us/op
                 runFibonacci·p0.99:   13.216 us/op
                 runFibonacci·p0.999:  21.958 us/op
                 runFibonacci·p0.9999: 54.455 us/op
                 runFibonacci·p1.00:   144.384 us/op

Iteration  13: 9.217 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   8.912 us/op
                 runFibonacci·p0.50:   9.104 us/op
                 runFibonacci·p0.90:   9.200 us/op
                 runFibonacci·p0.95:   9.264 us/op
                 runFibonacci·p0.99:   13.248 us/op
                 runFibonacci·p0.999:  22.046 us/op
                 runFibonacci·p0.9999: 54.515 us/op
                 runFibonacci·p1.00:   221.440 us/op

Iteration  14: 9.247 ±(99.9%) 0.012 us/op
                 runFibonacci·p0.00:   8.912 us/op
                 runFibonacci·p0.50:   9.120 us/op
                 runFibonacci·p0.90:   9.312 us/op
                 runFibonacci·p0.95:   9.360 us/op
                 runFibonacci·p0.99:   13.008 us/op
                 runFibonacci·p0.999:  22.272 us/op
                 runFibonacci·p0.9999: 59.620 us/op
                 runFibonacci·p1.00:   541.696 us/op

Iteration  15: 9.246 ±(99.9%) 0.014 us/op
                 runFibonacci·p0.00:   8.928 us/op
                 runFibonacci·p0.50:   9.120 us/op
                 runFibonacci·p0.90:   9.296 us/op
                 runFibonacci·p0.95:   9.344 us/op
                 runFibonacci·p0.99:   13.152 us/op
                 runFibonacci·p0.999:  21.780 us/op
                 runFibonacci·p0.9999: 60.018 us/op
                 runFibonacci·p1.00:   498.176 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 4066803
  mean =      9.213 ±(99.9%) 0.002 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 4066207 
    [ 50.000, 100.000) = 467 
    [100.000, 150.000) = 92 
    [150.000, 200.000) = 18 
    [200.000, 250.000) = 5 
    [250.000, 300.000) = 2 
    [300.000, 350.000) = 1 
    [350.000, 400.000) = 4 
    [400.000, 450.000) = 1 
    [450.000, 500.000) = 4 
    [500.000, 550.000) = 2 

  Percentiles, us/op:
      p(0.0000) =      8.896 us/op
     p(50.0000) =      9.088 us/op
     p(90.0000) =      9.200 us/op
     p(95.0000) =      9.312 us/op
     p(99.0000) =     13.200 us/op
     p(99.9000) =     22.080 us/op
     p(99.9900) =     55.764 us/op
     p(99.9990) =    141.477 us/op
     p(99.9999) =    496.639 us/op
    p(100.0000) =    541.696 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 82.61% complete, ETA 01:27:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.089 ±(99.9%) 0.005 us/op
# Warmup Iteration   2: 0.094 ±(99.9%) 0.002 us/op
# Warmup Iteration   3: 0.096 ±(99.9%) 0.001 us/op
# Warmup Iteration   4: 0.093 ±(99.9%) 0.001 us/op
# Warmup Iteration   5: 0.094 ±(99.9%) 0.001 us/op
Iteration   1: 0.092 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.174 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.620 us/op
                 findLastPrefixUsingScanner1·p1.00:   36.992 us/op

Iteration   2: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.174 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.010 us/op
                 findLastPrefixUsingScanner1·p1.00:   83.200 us/op

Iteration   3: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.071 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.160 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.421 us/op
                 findLastPrefixUsingScanner1·p1.00:   38.336 us/op

Iteration   4: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.178 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.658 us/op
                 findLastPrefixUsingScanner1·p1.00:   124.800 us/op

Iteration   5: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.176 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.648 us/op
                 findLastPrefixUsingScanner1·p1.00:   81.664 us/op

Iteration   6: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.074 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.107 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.110 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.170 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.578 us/op
                 findLastPrefixUsingScanner1·p1.00:   24.736 us/op

Iteration   7: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.181 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.806 us/op
                 findLastPrefixUsingScanner1·p1.00:   48.576 us/op

Iteration   8: 0.096 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.074 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.090 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.107 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.115 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.180 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.295 us/op
                 findLastPrefixUsingScanner1·p1.00:   24.608 us/op

Iteration   9: 0.094 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.107 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.212 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.475 us/op
                 findLastPrefixUsingScanner1·p1.00:   126.464 us/op

Iteration  10: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.071 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.107 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.175 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.605 us/op
                 findLastPrefixUsingScanner1·p1.00:   30.816 us/op

Iteration  11: 0.097 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.075 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.090 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.112 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.191 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.963 us/op
                 findLastPrefixUsingScanner1·p1.00:   57.472 us/op

Iteration  12: 0.096 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.074 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.107 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.124 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.207 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.483 us/op
                 findLastPrefixUsingScanner1·p1.00:   103.552 us/op

Iteration  13: 0.094 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.107 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.182 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.142 us/op
                 findLastPrefixUsingScanner1·p1.00:   91.008 us/op

Iteration  14: 0.093 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.073 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.107 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.121 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.169 us/op
                 findLastPrefixUsingScanner1·p0.9999: 6.873 us/op
                 findLastPrefixUsingScanner1·p1.00:   46.720 us/op

Iteration  15: 0.094 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.107 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.112 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.178 us/op
                 findLastPrefixUsingScanner1·p0.9999: 7.934 us/op
                 findLastPrefixUsingScanner1·p1.00:   65.152 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 5101832
  mean =      0.094 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  12.500) = 5101717 
    [ 12.500,  25.000) = 76 
    [ 25.000,  37.500) = 18 
    [ 37.500,  50.000) = 10 
    [ 50.000,  62.500) = 4 
    [ 62.500,  75.000) = 1 
    [ 75.000,  87.500) = 2 
    [ 87.500, 100.000) = 1 
    [100.000, 112.500) = 1 
    [112.500, 125.000) = 1 
    [125.000, 137.500) = 1 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.071 us/op
     p(50.0000) =      0.088 us/op
     p(90.0000) =      0.107 us/op
     p(95.0000) =      0.108 us/op
     p(99.0000) =      0.113 us/op
     p(99.9000) =      0.178 us/op
     p(99.9900) =      7.808 us/op
     p(99.9990) =     21.950 us/op
     p(99.9999) =     83.044 us/op
    p(100.0000) =    126.464 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 83.33% complete, ETA 01:23:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.518 ±(99.9%) 0.027 us/op
# Warmup Iteration   2: 0.358 ±(99.9%) 0.003 us/op
# Warmup Iteration   3: 0.358 ±(99.9%) 0.003 us/op
# Warmup Iteration   4: 0.375 ±(99.9%) 0.003 us/op
# Warmup Iteration   5: 0.377 ±(99.9%) 0.002 us/op
Iteration   1: 0.381 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.350 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.367 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.376 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.379 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.390 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.382 us/op
                 findLastPrefixUsingScanner1·p0.9999: 13.844 us/op
                 findLastPrefixUsingScanner1·p1.00:   63.552 us/op

Iteration   2: 0.363 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.340 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.349 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.355 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.357 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.369 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.587 us/op
                 findLastPrefixUsingScanner1·p0.9999: 14.436 us/op
                 findLastPrefixUsingScanner1·p1.00:   51.648 us/op

Iteration   3: 0.376 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.330 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.363 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.371 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.374 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.384 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.484 us/op
                 findLastPrefixUsingScanner1·p0.9999: 13.688 us/op
                 findLastPrefixUsingScanner1·p1.00:   50.624 us/op

Iteration   4: 0.382 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.317 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.365 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.385 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.388 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.402 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.480 us/op
                 findLastPrefixUsingScanner1·p0.9999: 13.333 us/op
                 findLastPrefixUsingScanner1·p1.00:   53.760 us/op

Iteration   5: 0.374 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.347 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.360 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.367 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.369 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.383 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.495 us/op
                 findLastPrefixUsingScanner1·p0.9999: 13.929 us/op
                 findLastPrefixUsingScanner1·p1.00:   55.232 us/op

Iteration   6: 0.374 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.347 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.361 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.367 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.368 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.381 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.187 us/op
                 findLastPrefixUsingScanner1·p0.9999: 14.297 us/op
                 findLastPrefixUsingScanner1·p1.00:   162.048 us/op

Iteration   7: 0.361 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.337 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.344 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.352 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.354 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.360 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.499 us/op
                 findLastPrefixUsingScanner1·p0.9999: 16.450 us/op
                 findLastPrefixUsingScanner1·p1.00:   418.304 us/op

Iteration   8: 0.358 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.338 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.344 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.352 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.354 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.364 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.488 us/op
                 findLastPrefixUsingScanner1·p0.9999: 13.288 us/op
                 findLastPrefixUsingScanner1·p1.00:   53.760 us/op

Iteration   9: 0.361 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.314 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.355 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.364 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.366 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.376 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.499 us/op
                 findLastPrefixUsingScanner1·p0.9999: 13.846 us/op
                 findLastPrefixUsingScanner1·p1.00:   105.856 us/op

Iteration  10: 0.379 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.350 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.362 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.369 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.372 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.387 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.740 us/op
                 findLastPrefixUsingScanner1·p0.9999: 18.566 us/op
                 findLastPrefixUsingScanner1·p1.00:   96.768 us/op

Iteration  11: 0.377 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.351 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.365 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.371 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.372 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.383 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.211 us/op
                 findLastPrefixUsingScanner1·p0.9999: 11.495 us/op
                 findLastPrefixUsingScanner1·p1.00:   81.280 us/op

Iteration  12: 0.379 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.347 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.361 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.367 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.369 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.380 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.075 us/op
                 findLastPrefixUsingScanner1·p0.9999: 27.772 us/op
                 findLastPrefixUsingScanner1·p1.00:   104.064 us/op

Iteration  13: 0.394 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.318 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.385 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.400 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.402 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.410 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.661 us/op
                 findLastPrefixUsingScanner1·p0.9999: 13.374 us/op
                 findLastPrefixUsingScanner1·p1.00:   62.848 us/op

Iteration  14: 0.359 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.336 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.345 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.353 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.355 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.367 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.272 us/op
                 findLastPrefixUsingScanner1·p0.9999: 12.964 us/op
                 findLastPrefixUsingScanner1·p1.00:   61.568 us/op

Iteration  15: 0.358 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.337 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.344 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.352 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.354 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.363 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.226 us/op
                 findLastPrefixUsingScanner1·p0.9999: 13.444 us/op
                 findLastPrefixUsingScanner1·p1.00:   133.120 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 3559391
  mean =      0.372 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 3559352 
    [ 50.000, 100.000) = 33 
    [100.000, 150.000) = 4 
    [150.000, 200.000) = 1 
    [200.000, 250.000) = 0 
    [250.000, 300.000) = 0 
    [300.000, 350.000) = 0 
    [350.000, 400.000) = 0 
    [400.000, 450.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      0.314 us/op
     p(50.0000) =      0.358 us/op
     p(90.0000) =      0.375 us/op
     p(95.0000) =      0.385 us/op
     p(99.0000) =      0.402 us/op
     p(99.9000) =      4.480 us/op
     p(99.9900) =     14.241 us/op
     p(99.9990) =     51.804 us/op
     p(99.9999) =    117.869 us/op
    p(100.0000) =    418.304 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 84.06% complete, ETA 01:20:18
# Fork: 1 of 1
# Warmup Iteration   1: 4.288 ±(99.9%) 0.013 us/op
# Warmup Iteration   2: 4.493 ±(99.9%) 0.008 us/op
# Warmup Iteration   3: 4.278 ±(99.9%) 0.007 us/op
# Warmup Iteration   4: 4.195 ±(99.9%) 0.007 us/op
# Warmup Iteration   5: 4.216 ±(99.9%) 0.009 us/op
Iteration   1: 4.216 ±(99.9%) 0.013 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.060 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.152 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.184 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.192 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.352 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.768 us/op
                 findLastPrefixUsingScanner1·p0.9999: 52.221 us/op
                 findLastPrefixUsingScanner1·p1.00:   549.888 us/op

Iteration   2: 4.252 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.128 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.200 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.216 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.224 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.815 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.843 us/op
                 findLastPrefixUsingScanner1·p0.9999: 43.394 us/op
                 findLastPrefixUsingScanner1·p1.00:   124.288 us/op

Iteration   3: 4.236 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.112 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.184 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.208 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.216 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.400 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.345 us/op
                 findLastPrefixUsingScanner1·p0.9999: 42.563 us/op
                 findLastPrefixUsingScanner1·p1.00:   166.912 us/op

Iteration   4: 4.212 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.092 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.168 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.184 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.192 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.328 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.017 us/op
                 findLastPrefixUsingScanner1·p0.9999: 38.319 us/op
                 findLastPrefixUsingScanner1·p1.00:   116.736 us/op

Iteration   5: 4.247 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.104 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.192 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.232 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.256 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.488 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.741 us/op
                 findLastPrefixUsingScanner1·p0.9999: 46.409 us/op
                 findLastPrefixUsingScanner1·p1.00:   238.336 us/op

Iteration   6: 4.258 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.112 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.200 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.232 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.240 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.576 us/op
                 findLastPrefixUsingScanner1·p0.999:  14.220 us/op
                 findLastPrefixUsingScanner1·p0.9999: 43.692 us/op
                 findLastPrefixUsingScanner1·p1.00:   199.680 us/op

Iteration   7: 4.243 ±(99.9%) 0.016 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.092 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.176 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.200 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.216 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.448 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.826 us/op
                 findLastPrefixUsingScanner1·p0.9999: 58.873 us/op
                 findLastPrefixUsingScanner1·p1.00:   566.272 us/op

Iteration   8: 4.235 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.104 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.184 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.208 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.216 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.352 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.391 us/op
                 findLastPrefixUsingScanner1·p0.9999: 42.525 us/op
                 findLastPrefixUsingScanner1·p1.00:   119.424 us/op

Iteration   9: 4.229 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.096 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.168 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.192 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.208 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.528 us/op
                 findLastPrefixUsingScanner1·p0.999:  14.096 us/op
                 findLastPrefixUsingScanner1·p0.9999: 52.461 us/op
                 findLastPrefixUsingScanner1·p1.00:   181.248 us/op

Iteration  10: 4.240 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.104 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.184 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.216 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.224 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.512 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.440 us/op
                 findLastPrefixUsingScanner1·p0.9999: 44.719 us/op
                 findLastPrefixUsingScanner1·p1.00:   140.288 us/op

Iteration  11: 4.091 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   3.984 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.040 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.060 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.072 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.192 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.337 us/op
                 findLastPrefixUsingScanner1·p0.9999: 41.793 us/op
                 findLastPrefixUsingScanner1·p1.00:   204.544 us/op

Iteration  12: 4.205 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.076 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.152 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.176 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.192 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.352 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.707 us/op
                 findLastPrefixUsingScanner1·p0.9999: 45.070 us/op
                 findLastPrefixUsingScanner1·p1.00:   141.312 us/op

Iteration  13: 4.162 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.036 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.104 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.128 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.136 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.368 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.720 us/op
                 findLastPrefixUsingScanner1·p0.9999: 49.616 us/op
                 findLastPrefixUsingScanner1·p1.00:   428.544 us/op

Iteration  14: 4.174 ±(99.9%) 0.042 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.032 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.104 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.128 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.136 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.312 us/op
                 findLastPrefixUsingScanner1·p0.999:  13.312 us/op
                 findLastPrefixUsingScanner1·p0.9999: 48.306 us/op
                 findLastPrefixUsingScanner1·p1.00:   2703.360 us/op

Iteration  15: 4.277 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.144 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.216 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.240 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.248 us/op
                 findLastPrefixUsingScanner1·p0.99:   4.384 us/op
                 findLastPrefixUsingScanner1·p0.999:  15.432 us/op
                 findLastPrefixUsingScanner1·p0.9999: 53.593 us/op
                 findLastPrefixUsingScanner1·p1.00:   110.848 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 4476999
  mean =      4.218 ±(99.9%) 0.003 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 4476982 
    [ 250.000,  500.000) = 10 
    [ 500.000,  750.000) = 5 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 2 

  Percentiles, us/op:
      p(0.0000) =      3.984 us/op
     p(50.0000) =      4.176 us/op
     p(90.0000) =      4.216 us/op
     p(95.0000) =      4.224 us/op
     p(99.0000) =      4.400 us/op
     p(99.9000) =     13.696 us/op
     p(99.9900) =     47.552 us/op
     p(99.9990) =    135.483 us/op
     p(99.9999) =    536.944 us/op
    p(100.0000) =   2703.360 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 84.78% complete, ETA 01:16:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.091 ±(99.9%) 0.003 us/op
# Warmup Iteration   2: 0.082 ±(99.9%) 0.002 us/op
# Warmup Iteration   3: 0.095 ±(99.9%) 0.001 us/op
# Warmup Iteration   4: 0.096 ±(99.9%) 0.001 us/op
# Warmup Iteration   5: 0.095 ±(99.9%) 0.001 us/op
Iteration   1: 0.095 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.075 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.114 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.121 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.178 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.269 us/op
                 findLastPrefixUsingScanner2·p1.00:   40.512 us/op

Iteration   2: 0.096 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.075 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.114 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.202 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.520 us/op
                 findLastPrefixUsingScanner2·p1.00:   87.424 us/op

Iteration   3: 0.095 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.075 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.108 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.176 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.891 us/op
                 findLastPrefixUsingScanner2·p1.00:   35.840 us/op

Iteration   4: 0.095 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.075 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.116 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.179 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.793 us/op
                 findLastPrefixUsingScanner2·p1.00:   109.312 us/op

Iteration   5: 0.094 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.075 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.111 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.179 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.447 us/op
                 findLastPrefixUsingScanner2·p1.00:   27.872 us/op

Iteration   6: 0.095 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.075 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.108 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.179 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.747 us/op
                 findLastPrefixUsingScanner2·p1.00:   53.120 us/op

Iteration   7: 0.094 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.075 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.177 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.261 us/op
                 findLastPrefixUsingScanner2·p1.00:   53.120 us/op

Iteration   8: 0.095 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.075 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.115 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.183 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.973 us/op
                 findLastPrefixUsingScanner2·p1.00:   86.656 us/op

Iteration   9: 0.095 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.075 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.116 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.176 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.714 us/op
                 findLastPrefixUsingScanner2·p1.00:   52.544 us/op

Iteration  10: 0.094 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.075 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.115 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.176 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.227 us/op
                 findLastPrefixUsingScanner2·p1.00:   14.384 us/op

Iteration  11: 0.095 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.075 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.115 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.185 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.091 us/op
                 findLastPrefixUsingScanner2·p1.00:   55.104 us/op

Iteration  12: 0.095 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.075 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.108 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.175 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.902 us/op
                 findLastPrefixUsingScanner2·p1.00:   39.936 us/op

Iteration  13: 0.099 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.076 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.090 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.108 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.113 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.122 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.177 us/op
                 findLastPrefixUsingScanner2·p0.9999: 7.339 us/op
                 findLastPrefixUsingScanner2·p1.00:   61.440 us/op

Iteration  14: 0.095 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.075 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.112 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.116 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.181 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.200 us/op
                 findLastPrefixUsingScanner2·p1.00:   48.128 us/op

Iteration  15: 0.094 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.075 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.115 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.175 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.342 us/op
                 findLastPrefixUsingScanner2·p1.00:   40.704 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 5206755
  mean =      0.095 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  12.500) = 5206634 
    [ 12.500,  25.000) = 80 
    [ 25.000,  37.500) = 20 
    [ 37.500,  50.000) = 11 
    [ 50.000,  62.500) = 7 
    [ 62.500,  75.000) = 0 
    [ 75.000,  87.500) = 2 
    [ 87.500, 100.000) = 0 
    [100.000, 112.500) = 1 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 0 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.075 us/op
     p(50.0000) =      0.089 us/op
     p(90.0000) =      0.106 us/op
     p(95.0000) =      0.107 us/op
     p(99.0000) =      0.116 us/op
     p(99.9000) =      0.179 us/op
     p(99.9900) =      7.779 us/op
     p(99.9990) =     21.271 us/op
     p(99.9999) =     54.694 us/op
    p(100.0000) =    109.312 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 85.50% complete, ETA 01:12:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.404 ±(99.9%) 0.005 us/op
# Warmup Iteration   2: 0.473 ±(99.9%) 0.003 us/op
# Warmup Iteration   3: 0.474 ±(99.9%) 0.003 us/op
# Warmup Iteration   4: 0.475 ±(99.9%) 0.002 us/op
# Warmup Iteration   5: 0.476 ±(99.9%) 0.002 us/op
Iteration   1: 0.476 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.447 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.460 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.478 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.479 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.480 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.195 us/op
                 findLastPrefixUsingScanner2·p0.9999: 13.235 us/op
                 findLastPrefixUsingScanner2·p1.00:   92.800 us/op

Iteration   2: 0.471 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.443 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.458 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.474 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.476 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.477 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.119 us/op
                 findLastPrefixUsingScanner2·p0.9999: 12.913 us/op
                 findLastPrefixUsingScanner2·p1.00:   96.128 us/op

Iteration   3: 0.479 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.450 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.463 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.480 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.481 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.482 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.090 us/op
                 findLastPrefixUsingScanner2·p0.9999: 13.242 us/op
                 findLastPrefixUsingScanner2·p1.00:   109.824 us/op

Iteration   4: 0.472 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.443 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.458 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.476 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.477 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.477 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.015 us/op
                 findLastPrefixUsingScanner2·p0.9999: 11.559 us/op
                 findLastPrefixUsingScanner2·p1.00:   103.936 us/op

Iteration   5: 0.477 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.450 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.462 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.480 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.481 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.482 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.090 us/op
                 findLastPrefixUsingScanner2·p0.9999: 13.087 us/op
                 findLastPrefixUsingScanner2·p1.00:   92.672 us/op

Iteration   6: 0.474 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.446 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.460 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.478 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.479 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.480 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.068 us/op
                 findLastPrefixUsingScanner2·p0.9999: 12.880 us/op
                 findLastPrefixUsingScanner2·p1.00:   93.056 us/op

Iteration   7: 0.471 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.444 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.456 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.473 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.475 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.477 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.081 us/op
                 findLastPrefixUsingScanner2·p0.9999: 12.334 us/op
                 findLastPrefixUsingScanner2·p1.00:   97.792 us/op

Iteration   8: 0.474 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.445 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.459 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.476 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.476 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.477 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.092 us/op
                 findLastPrefixUsingScanner2·p0.9999: 12.368 us/op
                 findLastPrefixUsingScanner2·p1.00:   79.616 us/op

Iteration   9: 0.475 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.445 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.461 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.477 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.477 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.479 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.059 us/op
                 findLastPrefixUsingScanner2·p0.9999: 11.642 us/op
                 findLastPrefixUsingScanner2·p1.00:   90.624 us/op

Iteration  10: 0.474 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.445 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.458 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.476 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.476 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.478 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.009 us/op
                 findLastPrefixUsingScanner2·p0.9999: 11.778 us/op
                 findLastPrefixUsingScanner2·p1.00:   117.888 us/op

Iteration  11: 0.475 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.447 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.459 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.476 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.477 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.482 us/op
                 findLastPrefixUsingScanner2·p0.999:  3.961 us/op
                 findLastPrefixUsingScanner2·p0.9999: 12.483 us/op
                 findLastPrefixUsingScanner2·p1.00:   408.064 us/op

Iteration  12: 0.479 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.450 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.462 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.480 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.481 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.482 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.296 us/op
                 findLastPrefixUsingScanner2·p0.9999: 13.536 us/op
                 findLastPrefixUsingScanner2·p1.00:   100.480 us/op

Iteration  13: 0.474 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.445 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.460 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.476 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.477 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.479 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.252 us/op
                 findLastPrefixUsingScanner2·p0.9999: 12.622 us/op
                 findLastPrefixUsingScanner2·p1.00:   118.528 us/op

Iteration  14: 0.474 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.444 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.458 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.476 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.477 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.477 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.048 us/op
                 findLastPrefixUsingScanner2·p0.9999: 14.982 us/op
                 findLastPrefixUsingScanner2·p1.00:   153.088 us/op

Iteration  15: 0.476 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.447 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.461 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.479 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.479 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.480 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.080 us/op
                 findLastPrefixUsingScanner2·p0.9999: 11.799 us/op
                 findLastPrefixUsingScanner2·p1.00:   90.880 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 5396653
  mean =      0.475 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 5396606 
    [ 50.000, 100.000) = 39 
    [100.000, 150.000) = 6 
    [150.000, 200.000) = 1 
    [200.000, 250.000) = 0 
    [250.000, 300.000) = 0 
    [300.000, 350.000) = 0 
    [350.000, 400.000) = 0 
    [400.000, 450.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      0.443 us/op
     p(50.0000) =      0.461 us/op
     p(90.0000) =      0.477 us/op
     p(95.0000) =      0.479 us/op
     p(99.0000) =      0.481 us/op
     p(99.9000) =      4.084 us/op
     p(99.9900) =     12.581 us/op
     p(99.9990) =     46.729 us/op
     p(99.9999) =    114.689 us/op
    p(100.0000) =    408.064 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 86.23% complete, ETA 01:09:19
# Fork: 1 of 1
# Warmup Iteration   1: 4.392 ±(99.9%) 0.013 us/op
# Warmup Iteration   2: 3.761 ±(99.9%) 0.006 us/op
# Warmup Iteration   3: 4.088 ±(99.9%) 0.005 us/op
# Warmup Iteration   4: 4.095 ±(99.9%) 0.007 us/op
# Warmup Iteration   5: 3.983 ±(99.9%) 0.008 us/op
Iteration   1: 4.011 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.920 us/op
                 findLastPrefixUsingScanner2·p0.50:   3.964 us/op
                 findLastPrefixUsingScanner2·p0.90:   3.976 us/op
                 findLastPrefixUsingScanner2·p0.95:   3.984 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.112 us/op
                 findLastPrefixUsingScanner2·p0.999:  12.878 us/op
                 findLastPrefixUsingScanner2·p0.9999: 39.468 us/op
                 findLastPrefixUsingScanner2·p1.00:   129.152 us/op

Iteration   2: 4.136 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.000 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.096 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.120 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.128 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.224 us/op
                 findLastPrefixUsingScanner2·p0.999:  12.928 us/op
                 findLastPrefixUsingScanner2·p0.9999: 32.936 us/op
                 findLastPrefixUsingScanner2·p1.00:   126.976 us/op

Iteration   3: 4.037 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.940 us/op
                 findLastPrefixUsingScanner2·p0.50:   3.984 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.000 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.012 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.152 us/op
                 findLastPrefixUsingScanner2·p0.999:  14.003 us/op
                 findLastPrefixUsingScanner2·p0.9999: 42.867 us/op
                 findLastPrefixUsingScanner2·p1.00:   147.968 us/op

Iteration   4: 4.099 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.996 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.056 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.080 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.088 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.208 us/op
                 findLastPrefixUsingScanner2·p0.999:  12.543 us/op
                 findLastPrefixUsingScanner2·p0.9999: 35.816 us/op
                 findLastPrefixUsingScanner2·p1.00:   129.024 us/op

Iteration   5: 4.050 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.956 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.004 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.020 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.028 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.144 us/op
                 findLastPrefixUsingScanner2·p0.999:  13.250 us/op
                 findLastPrefixUsingScanner2·p0.9999: 37.376 us/op
                 findLastPrefixUsingScanner2·p1.00:   103.424 us/op

Iteration   6: 4.092 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.000 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.048 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.064 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.072 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.184 us/op
                 findLastPrefixUsingScanner2·p0.999:  12.640 us/op
                 findLastPrefixUsingScanner2·p0.9999: 32.115 us/op
                 findLastPrefixUsingScanner2·p1.00:   390.144 us/op

Iteration   7: 4.015 ±(99.9%) 0.012 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.912 us/op
                 findLastPrefixUsingScanner2·p0.50:   3.956 us/op
                 findLastPrefixUsingScanner2·p0.90:   3.972 us/op
                 findLastPrefixUsingScanner2·p0.95:   3.984 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.104 us/op
                 findLastPrefixUsingScanner2·p0.999:  12.875 us/op
                 findLastPrefixUsingScanner2·p0.9999: 53.151 us/op
                 findLastPrefixUsingScanner2·p1.00:   449.024 us/op

Iteration   8: 4.127 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.012 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.080 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.096 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.104 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.224 us/op
                 findLastPrefixUsingScanner2·p0.999:  12.984 us/op
                 findLastPrefixUsingScanner2·p0.9999: 41.324 us/op
                 findLastPrefixUsingScanner2·p1.00:   127.232 us/op

Iteration   9: 4.111 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.004 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.068 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.092 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.104 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.216 us/op
                 findLastPrefixUsingScanner2·p0.999:  12.484 us/op
                 findLastPrefixUsingScanner2·p0.9999: 35.619 us/op
                 findLastPrefixUsingScanner2·p1.00:   138.752 us/op

Iteration  10: 4.092 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.996 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.044 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.064 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.072 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.192 us/op
                 findLastPrefixUsingScanner2·p0.999:  12.714 us/op
                 findLastPrefixUsingScanner2·p0.9999: 37.844 us/op
                 findLastPrefixUsingScanner2·p1.00:   153.344 us/op

Iteration  11: 4.008 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.908 us/op
                 findLastPrefixUsingScanner2·p0.50:   3.964 us/op
                 findLastPrefixUsingScanner2·p0.90:   3.980 us/op
                 findLastPrefixUsingScanner2·p0.95:   3.988 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.084 us/op
                 findLastPrefixUsingScanner2·p0.999:  12.560 us/op
                 findLastPrefixUsingScanner2·p0.9999: 37.958 us/op
                 findLastPrefixUsingScanner2·p1.00:   139.264 us/op

Iteration  12: 4.076 ±(99.9%) 0.012 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.952 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.020 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.040 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.048 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.216 us/op
                 findLastPrefixUsingScanner2·p0.999:  13.403 us/op
                 findLastPrefixUsingScanner2·p0.9999: 48.695 us/op
                 findLastPrefixUsingScanner2·p1.00:   1016.832 us/op

Iteration  13: 4.142 ±(99.9%) 0.014 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.020 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.080 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.104 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.112 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.280 us/op
                 findLastPrefixUsingScanner2·p0.999:  13.739 us/op
                 findLastPrefixUsingScanner2·p0.9999: 49.024 us/op
                 findLastPrefixUsingScanner2·p1.00:   539.648 us/op

Iteration  14: 4.164 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.040 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.112 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.144 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.152 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.216 us/op
                 findLastPrefixUsingScanner2·p0.999:  13.691 us/op
                 findLastPrefixUsingScanner2·p0.9999: 43.624 us/op
                 findLastPrefixUsingScanner2·p1.00:   161.792 us/op

Iteration  15: 4.096 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner2·p0.00:   3.972 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.048 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.068 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.076 us/op
                 findLastPrefixUsingScanner2·p0.99:   4.192 us/op
                 findLastPrefixUsingScanner2·p0.999:  12.816 us/op
                 findLastPrefixUsingScanner2·p0.9999: 51.779 us/op
                 findLastPrefixUsingScanner2·p1.00:   190.208 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 4624267
  mean =      4.083 ±(99.9%) 0.002 us/op

  Histogram, us/op:
    [   0.000,  125.000) = 4624221 
    [ 125.000,  250.000) = 30 
    [ 250.000,  375.000) = 5 
    [ 375.000,  500.000) = 9 
    [ 500.000,  625.000) = 1 
    [ 625.000,  750.000) = 0 
    [ 750.000,  875.000) = 0 
    [ 875.000, 1000.000) = 0 
    [1000.000, 1125.000) = 1 
    [1125.000, 1250.000) = 0 
    [1250.000, 1375.000) = 0 
    [1375.000, 1500.000) = 0 
    [1500.000, 1625.000) = 0 
    [1625.000, 1750.000) = 0 
    [1750.000, 1875.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      3.908 us/op
     p(50.0000) =      4.044 us/op
     p(90.0000) =      4.096 us/op
     p(95.0000) =      4.120 us/op
     p(99.0000) =      4.200 us/op
     p(99.9000) =     12.992 us/op
     p(99.9900) =     40.128 us/op
     p(99.9990) =    126.071 us/op
     p(99.9999) =    445.632 us/op
    p(100.0000) =   1016.832 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 86.95% complete, ETA 01:05:39
# Fork: 1 of 1
# Warmup Iteration   1: 14607.496 ±(99.9%) 77.923 us/op
# Warmup Iteration   2: 14586.059 ±(99.9%) 8.412 us/op
# Warmup Iteration   3: 14563.039 ±(99.9%) 20.601 us/op
# Warmup Iteration   4: 14931.106 ±(99.9%) 7.770 us/op
# Warmup Iteration   5: 14922.058 ±(99.9%) 7.551 us/op
Iteration   1: 14923.061 ±(99.9%) 6.658 us/op
                 runAlgorithm·p0.00:   14860.288 us/op
                 runAlgorithm·p0.50:   14909.440 us/op
                 runAlgorithm·p0.90:   14991.360 us/op
                 runAlgorithm·p0.95:   15024.128 us/op
                 runAlgorithm·p0.99:   15131.935 us/op
                 runAlgorithm·p0.999:  15286.272 us/op
                 runAlgorithm·p0.9999: 15286.272 us/op
                 runAlgorithm·p1.00:   15286.272 us/op

Iteration   2: 14921.740 ±(99.9%) 6.088 us/op
                 runAlgorithm·p0.00:   14843.904 us/op
                 runAlgorithm·p0.50:   14909.440 us/op
                 runAlgorithm·p0.90:   14974.976 us/op
                 runAlgorithm·p0.95:   14991.360 us/op
                 runAlgorithm·p0.99:   15106.048 us/op
                 runAlgorithm·p0.999:  15351.808 us/op
                 runAlgorithm·p0.9999: 15351.808 us/op
                 runAlgorithm·p1.00:   15351.808 us/op

Iteration   3: 14909.587 ±(99.9%) 12.043 us/op
                 runAlgorithm·p0.00:   14499.840 us/op
                 runAlgorithm·p0.50:   14909.440 us/op
                 runAlgorithm·p0.90:   14991.360 us/op
                 runAlgorithm·p0.95:   15024.128 us/op
                 runAlgorithm·p0.99:   15143.404 us/op
                 runAlgorithm·p0.999:  15253.504 us/op
                 runAlgorithm·p0.9999: 15253.504 us/op
                 runAlgorithm·p1.00:   15253.504 us/op

Iteration   4: 14562.323 ±(99.9%) 6.504 us/op
                 runAlgorithm·p0.00:   14483.456 us/op
                 runAlgorithm·p0.50:   14548.992 us/op
                 runAlgorithm·p0.90:   14614.528 us/op
                 runAlgorithm·p0.95:   14647.296 us/op
                 runAlgorithm·p0.99:   14811.136 us/op
                 runAlgorithm·p0.999:  14876.672 us/op
                 runAlgorithm·p0.9999: 14876.672 us/op
                 runAlgorithm·p1.00:   14876.672 us/op

Iteration   5: 14556.957 ±(99.9%) 5.570 us/op
                 runAlgorithm·p0.00:   14483.456 us/op
                 runAlgorithm·p0.50:   14548.992 us/op
                 runAlgorithm·p0.90:   14598.144 us/op
                 runAlgorithm·p0.95:   14614.528 us/op
                 runAlgorithm·p0.99:   14731.182 us/op
                 runAlgorithm·p0.999:  14909.440 us/op
                 runAlgorithm·p0.9999: 14909.440 us/op
                 runAlgorithm·p1.00:   14909.440 us/op

Iteration   6: 14559.271 ±(99.9%) 7.280 us/op
                 runAlgorithm·p0.00:   14483.456 us/op
                 runAlgorithm·p0.50:   14548.992 us/op
                 runAlgorithm·p0.90:   14598.144 us/op
                 runAlgorithm·p0.95:   14640.742 us/op
                 runAlgorithm·p0.99:   14800.650 us/op
                 runAlgorithm·p0.999:  15056.896 us/op
                 runAlgorithm·p0.9999: 15056.896 us/op
                 runAlgorithm·p1.00:   15056.896 us/op

Iteration   7: 14566.163 ±(99.9%) 6.330 us/op
                 runAlgorithm·p0.00:   14483.456 us/op
                 runAlgorithm·p0.50:   14548.992 us/op
                 runAlgorithm·p0.90:   14614.528 us/op
                 runAlgorithm·p0.95:   14647.296 us/op
                 runAlgorithm·p0.99:   14780.334 us/op
                 runAlgorithm·p0.999:  14876.672 us/op
                 runAlgorithm·p0.9999: 14876.672 us/op
                 runAlgorithm·p1.00:   14876.672 us/op

Iteration   8: 14589.116 ±(99.9%) 6.740 us/op
                 runAlgorithm·p0.00:   14499.840 us/op
                 runAlgorithm·p0.50:   14581.760 us/op
                 runAlgorithm·p0.90:   14647.296 us/op
                 runAlgorithm·p0.95:   14680.064 us/op
                 runAlgorithm·p0.99:   14843.904 us/op
                 runAlgorithm·p0.999:  14909.440 us/op
                 runAlgorithm·p0.9999: 14909.440 us/op
                 runAlgorithm·p1.00:   14909.440 us/op

Iteration   9: 14554.096 ±(99.9%) 6.126 us/op
                 runAlgorithm·p0.00:   14483.456 us/op
                 runAlgorithm·p0.50:   14548.992 us/op
                 runAlgorithm·p0.90:   14598.144 us/op
                 runAlgorithm·p0.95:   14640.742 us/op
                 runAlgorithm·p0.99:   14778.368 us/op
                 runAlgorithm·p0.999:  14893.056 us/op
                 runAlgorithm·p0.9999: 14893.056 us/op
                 runAlgorithm·p1.00:   14893.056 us/op

Iteration  10: 14582.477 ±(99.9%) 6.477 us/op
                 runAlgorithm·p0.00:   14499.840 us/op
                 runAlgorithm·p0.50:   14581.760 us/op
                 runAlgorithm·p0.90:   14647.296 us/op
                 runAlgorithm·p0.95:   14663.680 us/op
                 runAlgorithm·p0.99:   14768.374 us/op
                 runAlgorithm·p0.999:  14876.672 us/op
                 runAlgorithm·p0.9999: 14876.672 us/op
                 runAlgorithm·p1.00:   14876.672 us/op

Iteration  11: 14583.742 ±(99.9%) 7.195 us/op
                 runAlgorithm·p0.00:   14499.840 us/op
                 runAlgorithm·p0.50:   14581.760 us/op
                 runAlgorithm·p0.90:   14635.827 us/op
                 runAlgorithm·p0.95:   14674.330 us/op
                 runAlgorithm·p0.99:   14811.136 us/op
                 runAlgorithm·p0.999:  14991.360 us/op
                 runAlgorithm·p0.9999: 14991.360 us/op
                 runAlgorithm·p1.00:   14991.360 us/op

Iteration  12: 14560.058 ±(99.9%) 8.820 us/op
                 runAlgorithm·p0.00:   14483.456 us/op
                 runAlgorithm·p0.50:   14548.992 us/op
                 runAlgorithm·p0.90:   14630.912 us/op
                 runAlgorithm·p0.95:   14673.510 us/op
                 runAlgorithm·p0.99:   14851.768 us/op
                 runAlgorithm·p0.999:  15237.120 us/op
                 runAlgorithm·p0.9999: 15237.120 us/op
                 runAlgorithm·p1.00:   15237.120 us/op

Iteration  13: 14551.782 ±(99.9%) 9.145 us/op
                 runAlgorithm·p0.00:   14467.072 us/op
                 runAlgorithm·p0.50:   14532.608 us/op
                 runAlgorithm·p0.90:   14614.528 us/op
                 runAlgorithm·p0.95:   14663.680 us/op
                 runAlgorithm·p0.99:   14811.136 us/op
                 runAlgorithm·p0.999:  15351.808 us/op
                 runAlgorithm·p0.9999: 15351.808 us/op
                 runAlgorithm·p1.00:   15351.808 us/op

Iteration  14: 14549.970 ±(99.9%) 6.447 us/op
                 runAlgorithm·p0.00:   14483.456 us/op
                 runAlgorithm·p0.50:   14532.608 us/op
                 runAlgorithm·p0.90:   14598.144 us/op
                 runAlgorithm·p0.95:   14630.912 us/op
                 runAlgorithm·p0.99:   14778.368 us/op
                 runAlgorithm·p0.999:  14860.288 us/op
                 runAlgorithm·p0.9999: 14860.288 us/op
                 runAlgorithm·p1.00:   14860.288 us/op

Iteration  15: 14545.134 ±(99.9%) 6.849 us/op
                 runAlgorithm·p0.00:   14467.072 us/op
                 runAlgorithm·p0.50:   14532.608 us/op
                 runAlgorithm·p0.90:   14598.144 us/op
                 runAlgorithm·p0.95:   14630.912 us/op
                 runAlgorithm·p0.99:   14811.136 us/op
                 runAlgorithm·p0.999:  14893.056 us/op
                 runAlgorithm·p0.9999: 14893.056 us/op
                 runAlgorithm·p1.00:   14893.056 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  N = 10253
  mean =  14632.986 ±(99.9%) 4.973 us/op

  Histogram, us/op:
    [14400.000, 14500.000) = 612 
    [14500.000, 14600.000) = 6476 
    [14600.000, 14700.000) = 962 
    [14700.000, 14800.000) = 154 
    [14800.000, 14900.000) = 796 
    [14900.000, 15000.000) = 1126 
    [15000.000, 15100.000) = 96 
    [15100.000, 15200.000) = 19 
    [15200.000, 15300.000) = 9 

  Percentiles, us/op:
      p(0.0000) =  14467.072 us/op
     p(50.0000) =  14565.376 us/op
     p(90.0000) =  14909.440 us/op
     p(95.0000) =  14942.208 us/op
     p(99.0000) =  15007.744 us/op
     p(99.9000) =  15204.352 us/op
     p(99.9900) =  15351.808 us/op
     p(99.9990) =  15351.808 us/op
     p(99.9999) =  15351.808 us/op
    p(100.0000) =  15351.808 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 87.68% complete, ETA 01:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 328.963 ±(99.9%) 4.909 us/op
# Warmup Iteration   2: 320.673 ±(99.9%) 3.258 us/op
# Warmup Iteration   3: 320.712 ±(99.9%) 3.736 us/op
# Warmup Iteration   4: 321.836 ±(99.9%) 3.954 us/op
# Warmup Iteration   5: 319.984 ±(99.9%) 3.030 us/op
Iteration   1: 319.646 ±(99.9%) 3.401 us/op
                 runAlgorithm·p0.00:   302.592 us/op
                 runAlgorithm·p0.50:   311.808 us/op
                 runAlgorithm·p0.90:   324.096 us/op
                 runAlgorithm·p0.95:   328.704 us/op
                 runAlgorithm·p0.99:   357.130 us/op
                 runAlgorithm·p0.999:  2136.080 us/op
                 runAlgorithm·p0.9999: 9431.050 us/op
                 runAlgorithm·p1.00:   12156.928 us/op

Iteration   2: 320.804 ±(99.9%) 4.551 us/op
                 runAlgorithm·p0.00:   302.592 us/op
                 runAlgorithm·p0.50:   311.808 us/op
                 runAlgorithm·p0.90:   324.096 us/op
                 runAlgorithm·p0.95:   328.704 us/op
                 runAlgorithm·p0.99:   353.792 us/op
                 runAlgorithm·p0.999:  2501.263 us/op
                 runAlgorithm·p0.9999: 15979.643 us/op
                 runAlgorithm·p1.00:   19464.192 us/op

Iteration   3: 320.442 ±(99.9%) 3.611 us/op
                 runAlgorithm·p0.00:   303.104 us/op
                 runAlgorithm·p0.50:   312.320 us/op
                 runAlgorithm·p0.90:   323.584 us/op
                 runAlgorithm·p0.95:   328.192 us/op
                 runAlgorithm·p0.99:   352.256 us/op
                 runAlgorithm·p0.999:  2402.144 us/op
                 runAlgorithm·p0.9999: 10308.642 us/op
                 runAlgorithm·p1.00:   13910.016 us/op

Iteration   4: 319.460 ±(99.9%) 3.518 us/op
                 runAlgorithm·p0.00:   301.568 us/op
                 runAlgorithm·p0.50:   311.296 us/op
                 runAlgorithm·p0.90:   324.096 us/op
                 runAlgorithm·p0.95:   329.216 us/op
                 runAlgorithm·p0.99:   352.256 us/op
                 runAlgorithm·p0.999:  2145.219 us/op
                 runAlgorithm·p0.9999: 9451.495 us/op
                 runAlgorithm·p1.00:   14778.368 us/op

Iteration   5: 320.650 ±(99.9%) 3.495 us/op
                 runAlgorithm·p0.00:   303.104 us/op
                 runAlgorithm·p0.50:   312.320 us/op
                 runAlgorithm·p0.90:   324.096 us/op
                 runAlgorithm·p0.95:   328.704 us/op
                 runAlgorithm·p0.99:   353.280 us/op
                 runAlgorithm·p0.999:  2514.330 us/op
                 runAlgorithm·p0.9999: 10118.226 us/op
                 runAlgorithm·p1.00:   12271.616 us/op

Iteration   6: 321.569 ±(99.9%) 4.453 us/op
                 runAlgorithm·p0.00:   302.592 us/op
                 runAlgorithm·p0.50:   312.320 us/op
                 runAlgorithm·p0.90:   324.096 us/op
                 runAlgorithm·p0.95:   328.704 us/op
                 runAlgorithm·p0.99:   356.040 us/op
                 runAlgorithm·p0.999:  2240.262 us/op
                 runAlgorithm·p0.9999: 13364.304 us/op
                 runAlgorithm·p1.00:   17039.360 us/op

Iteration   7: 321.842 ±(99.9%) 5.087 us/op
                 runAlgorithm·p0.00:   302.592 us/op
                 runAlgorithm·p0.50:   312.320 us/op
                 runAlgorithm·p0.90:   324.096 us/op
                 runAlgorithm·p0.95:   328.704 us/op
                 runAlgorithm·p0.99:   357.376 us/op
                 runAlgorithm·p0.999:  2412.126 us/op
                 runAlgorithm·p0.9999: 15568.277 us/op
                 runAlgorithm·p1.00:   23953.408 us/op

Iteration   8: 320.305 ±(99.9%) 3.954 us/op
                 runAlgorithm·p0.00:   301.056 us/op
                 runAlgorithm·p0.50:   311.808 us/op
                 runAlgorithm·p0.90:   324.096 us/op
                 runAlgorithm·p0.95:   328.704 us/op
                 runAlgorithm·p0.99:   352.768 us/op
                 runAlgorithm·p0.999:  2607.874 us/op
                 runAlgorithm·p0.9999: 10629.389 us/op
                 runAlgorithm·p1.00:   20021.248 us/op

Iteration   9: 319.823 ±(99.9%) 3.228 us/op
                 runAlgorithm·p0.00:   302.592 us/op
                 runAlgorithm·p0.50:   312.320 us/op
                 runAlgorithm·p0.90:   323.584 us/op
                 runAlgorithm·p0.95:   328.192 us/op
                 runAlgorithm·p0.99:   352.256 us/op
                 runAlgorithm·p0.999:  2169.938 us/op
                 runAlgorithm·p0.9999: 9403.187 us/op
                 runAlgorithm·p1.00:   10256.384 us/op

Iteration  10: 320.358 ±(99.9%) 3.461 us/op
                 runAlgorithm·p0.00:   302.080 us/op
                 runAlgorithm·p0.50:   312.320 us/op
                 runAlgorithm·p0.90:   325.120 us/op
                 runAlgorithm·p0.95:   330.240 us/op
                 runAlgorithm·p0.99:   352.768 us/op
                 runAlgorithm·p0.999:  2447.208 us/op
                 runAlgorithm·p0.9999: 9926.631 us/op
                 runAlgorithm·p1.00:   16138.240 us/op

Iteration  11: 319.124 ±(99.9%) 3.433 us/op
                 runAlgorithm·p0.00:   302.080 us/op
                 runAlgorithm·p0.50:   311.808 us/op
                 runAlgorithm·p0.90:   323.584 us/op
                 runAlgorithm·p0.95:   327.680 us/op
                 runAlgorithm·p0.99:   350.208 us/op
                 runAlgorithm·p0.999:  2276.151 us/op
                 runAlgorithm·p0.9999: 11167.226 us/op
                 runAlgorithm·p1.00:   16302.080 us/op

Iteration  12: 321.228 ±(99.9%) 4.477 us/op
                 runAlgorithm·p0.00:   302.080 us/op
                 runAlgorithm·p0.50:   311.808 us/op
                 runAlgorithm·p0.90:   323.584 us/op
                 runAlgorithm·p0.95:   328.192 us/op
                 runAlgorithm·p0.99:   349.727 us/op
                 runAlgorithm·p0.999:  2318.197 us/op
                 runAlgorithm·p0.9999: 13227.491 us/op
                 runAlgorithm·p1.00:   17268.736 us/op

Iteration  13: 320.944 ±(99.9%) 4.291 us/op
                 runAlgorithm·p0.00:   302.080 us/op
                 runAlgorithm·p0.50:   311.296 us/op
                 runAlgorithm·p0.90:   323.584 us/op
                 runAlgorithm·p0.95:   328.192 us/op
                 runAlgorithm·p0.99:   350.208 us/op
                 runAlgorithm·p0.999:  2854.240 us/op
                 runAlgorithm·p0.9999: 12295.201 us/op
                 runAlgorithm·p1.00:   16973.824 us/op

Iteration  14: 318.644 ±(99.9%) 2.928 us/op
                 runAlgorithm·p0.00:   301.568 us/op
                 runAlgorithm·p0.50:   311.808 us/op
                 runAlgorithm·p0.90:   323.072 us/op
                 runAlgorithm·p0.95:   327.168 us/op
                 runAlgorithm·p0.99:   345.600 us/op
                 runAlgorithm·p0.999:  2153.083 us/op
                 runAlgorithm·p0.9999: 7880.372 us/op
                 runAlgorithm·p1.00:   13549.568 us/op

Iteration  15: 320.997 ±(99.9%) 4.052 us/op
                 runAlgorithm·p0.00:   301.568 us/op
                 runAlgorithm·p0.50:   311.808 us/op
                 runAlgorithm·p0.90:   324.096 us/op
                 runAlgorithm·p0.95:   328.704 us/op
                 runAlgorithm·p0.99:   353.198 us/op
                 runAlgorithm·p0.999:  2578.399 us/op
                 runAlgorithm·p0.9999: 10441.877 us/op
                 runAlgorithm·p1.00:   16023.552 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 467620
  mean =    320.387 ±(99.9%) 1.008 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 467204 
    [ 2500.000,  5000.000) = 225 
    [ 5000.000,  7500.000) = 64 
    [ 7500.000, 10000.000) = 72 
    [10000.000, 12500.000) = 29 
    [12500.000, 15000.000) = 12 
    [15000.000, 17500.000) = 9 
    [17500.000, 20000.000) = 3 
    [20000.000, 22500.000) = 1 
    [22500.000, 25000.000) = 1 
    [25000.000, 27500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    301.056 us/op
     p(50.0000) =    311.808 us/op
     p(90.0000) =    324.096 us/op
     p(95.0000) =    328.704 us/op
     p(99.0000) =    353.280 us/op
     p(99.9000) =   2338.816 us/op
     p(99.9900) =  10460.788 us/op
     p(99.9990) =  18126.914 us/op
     p(99.9999) =  23953.408 us/op
    p(100.0000) =  23953.408 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 88.40% complete, ETA 00:58:21
# Fork: 1 of 1
# Warmup Iteration   1: 32131.184 ±(99.9%) 787.270 us/op
# Warmup Iteration   2: 31781.319 ±(99.9%) 469.557 us/op
# Warmup Iteration   3: 31820.953 ±(99.9%) 451.897 us/op
# Warmup Iteration   4: 31820.537 ±(99.9%) 517.252 us/op
# Warmup Iteration   5: 31684.893 ±(99.9%) 365.020 us/op
Iteration   1: 31733.155 ±(99.9%) 388.983 us/op
                 runAlgorithm·p0.00:   30703.616 us/op
                 runAlgorithm·p0.50:   30965.760 us/op
                 runAlgorithm·p0.90:   33554.432 us/op
                 runAlgorithm·p0.95:   35219.046 us/op
                 runAlgorithm·p0.99:   41971.876 us/op
                 runAlgorithm·p0.999:  48627.712 us/op
                 runAlgorithm·p0.9999: 48627.712 us/op
                 runAlgorithm·p1.00:   48627.712 us/op

Iteration   2: 31707.499 ±(99.9%) 430.824 us/op
                 runAlgorithm·p0.00:   30703.616 us/op
                 runAlgorithm·p0.50:   30916.608 us/op
                 runAlgorithm·p0.90:   33941.094 us/op
                 runAlgorithm·p0.95:   35530.342 us/op
                 runAlgorithm·p0.99:   43239.997 us/op
                 runAlgorithm·p0.999:  50528.256 us/op
                 runAlgorithm·p0.9999: 50528.256 us/op
                 runAlgorithm·p1.00:   50528.256 us/op

Iteration   3: 31656.791 ±(99.9%) 339.662 us/op
                 runAlgorithm·p0.00:   30736.384 us/op
                 runAlgorithm·p0.50:   30965.760 us/op
                 runAlgorithm·p0.90:   33400.422 us/op
                 runAlgorithm·p0.95:   35438.592 us/op
                 runAlgorithm·p0.99:   39703.675 us/op
                 runAlgorithm·p0.999:  42467.328 us/op
                 runAlgorithm·p0.9999: 42467.328 us/op
                 runAlgorithm·p1.00:   42467.328 us/op

Iteration   4: 31737.212 ±(99.9%) 400.375 us/op
                 runAlgorithm·p0.00:   30703.616 us/op
                 runAlgorithm·p0.50:   30965.760 us/op
                 runAlgorithm·p0.90:   33803.469 us/op
                 runAlgorithm·p0.95:   35795.763 us/op
                 runAlgorithm·p0.99:   41856.532 us/op
                 runAlgorithm·p0.999:  44892.160 us/op
                 runAlgorithm·p0.9999: 44892.160 us/op
                 runAlgorithm·p1.00:   44892.160 us/op

Iteration   5: 31854.357 ±(99.9%) 518.824 us/op
                 runAlgorithm·p0.00:   30736.384 us/op
                 runAlgorithm·p0.50:   30932.992 us/op
                 runAlgorithm·p0.90:   33783.808 us/op
                 runAlgorithm·p0.95:   36683.776 us/op
                 runAlgorithm·p0.99:   47752.806 us/op
                 runAlgorithm·p0.999:  55246.848 us/op
                 runAlgorithm·p0.9999: 55246.848 us/op
                 runAlgorithm·p1.00:   55246.848 us/op

Iteration   6: 31815.856 ±(99.9%) 429.649 us/op
                 runAlgorithm·p0.00:   30736.384 us/op
                 runAlgorithm·p0.50:   30965.760 us/op
                 runAlgorithm·p0.90:   34419.507 us/op
                 runAlgorithm·p0.95:   37250.662 us/op
                 runAlgorithm·p0.99:   41458.074 us/op
                 runAlgorithm·p0.999:  45744.128 us/op
                 runAlgorithm·p0.9999: 45744.128 us/op
                 runAlgorithm·p1.00:   45744.128 us/op

Iteration   7: 31591.453 ±(99.9%) 359.833 us/op
                 runAlgorithm·p0.00:   30703.616 us/op
                 runAlgorithm·p0.50:   30932.992 us/op
                 runAlgorithm·p0.90:   33325.056 us/op
                 runAlgorithm·p0.95:   34301.542 us/op
                 runAlgorithm·p0.99:   39966.474 us/op
                 runAlgorithm·p0.999:  50855.936 us/op
                 runAlgorithm·p0.9999: 50855.936 us/op
                 runAlgorithm·p1.00:   50855.936 us/op

Iteration   8: 31933.515 ±(99.9%) 497.412 us/op
                 runAlgorithm·p0.00:   30703.616 us/op
                 runAlgorithm·p0.50:   30932.992 us/op
                 runAlgorithm·p0.90:   34668.544 us/op
                 runAlgorithm·p0.95:   39197.082 us/op
                 runAlgorithm·p0.99:   43722.998 us/op
                 runAlgorithm·p0.999:  48300.032 us/op
                 runAlgorithm·p0.9999: 48300.032 us/op
                 runAlgorithm·p1.00:   48300.032 us/op

Iteration   9: 31705.632 ±(99.9%) 387.751 us/op
                 runAlgorithm·p0.00:   30736.384 us/op
                 runAlgorithm·p0.50:   30965.760 us/op
                 runAlgorithm·p0.90:   33947.648 us/op
                 runAlgorithm·p0.95:   35448.422 us/op
                 runAlgorithm·p0.99:   43226.235 us/op
                 runAlgorithm·p0.999:  44433.408 us/op
                 runAlgorithm·p0.9999: 44433.408 us/op
                 runAlgorithm·p1.00:   44433.408 us/op

Iteration  10: 31551.863 ±(99.9%) 331.825 us/op
                 runAlgorithm·p0.00:   30703.616 us/op
                 runAlgorithm·p0.50:   30932.992 us/op
                 runAlgorithm·p0.90:   33298.842 us/op
                 runAlgorithm·p0.95:   34078.720 us/op
                 runAlgorithm·p0.99:   40275.804 us/op
                 runAlgorithm·p0.999:  42991.616 us/op
                 runAlgorithm·p0.9999: 42991.616 us/op
                 runAlgorithm·p1.00:   42991.616 us/op

Iteration  11: 31705.321 ±(99.9%) 387.377 us/op
                 runAlgorithm·p0.00:   30703.616 us/op
                 runAlgorithm·p0.50:   30965.760 us/op
                 runAlgorithm·p0.90:   33836.237 us/op
                 runAlgorithm·p0.95:   36280.730 us/op
                 runAlgorithm·p0.99:   40975.729 us/op
                 runAlgorithm·p0.999:  47644.672 us/op
                 runAlgorithm·p0.9999: 47644.672 us/op
                 runAlgorithm·p1.00:   47644.672 us/op

Iteration  12: 31772.269 ±(99.9%) 389.676 us/op
                 runAlgorithm·p0.00:   30736.384 us/op
                 runAlgorithm·p0.50:   30965.760 us/op
                 runAlgorithm·p0.90:   33672.397 us/op
                 runAlgorithm·p0.95:   36071.014 us/op
                 runAlgorithm·p0.99:   41287.680 us/op
                 runAlgorithm·p0.999:  45285.376 us/op
                 runAlgorithm·p0.9999: 45285.376 us/op
                 runAlgorithm·p1.00:   45285.376 us/op

Iteration  13: 31656.688 ±(99.9%) 385.306 us/op
                 runAlgorithm·p0.00:   30670.848 us/op
                 runAlgorithm·p0.50:   30965.760 us/op
                 runAlgorithm·p0.90:   33554.432 us/op
                 runAlgorithm·p0.95:   34734.080 us/op
                 runAlgorithm·p0.99:   42092.462 us/op
                 runAlgorithm·p0.999:  48693.248 us/op
                 runAlgorithm·p0.9999: 48693.248 us/op
                 runAlgorithm·p1.00:   48693.248 us/op

Iteration  14: 31684.375 ±(99.9%) 343.825 us/op
                 runAlgorithm·p0.00:   30703.616 us/op
                 runAlgorithm·p0.50:   30998.528 us/op
                 runAlgorithm·p0.90:   33705.165 us/op
                 runAlgorithm·p0.95:   34838.938 us/op
                 runAlgorithm·p0.99:   40239.104 us/op
                 runAlgorithm·p0.999:  41877.504 us/op
                 runAlgorithm·p0.9999: 41877.504 us/op
                 runAlgorithm·p1.00:   41877.504 us/op

Iteration  15: 31716.624 ±(99.9%) 385.045 us/op
                 runAlgorithm·p0.00:   30769.152 us/op
                 runAlgorithm·p0.50:   30965.760 us/op
                 runAlgorithm·p0.90:   33901.773 us/op
                 runAlgorithm·p0.95:   35353.395 us/op
                 runAlgorithm·p0.99:   41598.976 us/op
                 runAlgorithm·p0.999:  48103.424 us/op
                 runAlgorithm·p0.9999: 48103.424 us/op
                 runAlgorithm·p1.00:   48103.424 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 4733
  mean =  31721.217 ±(99.9%) 102.681 us/op

  Histogram, us/op:
    [30000.000, 32500.000) = 3910 
    [32500.000, 35000.000) = 554 
    [35000.000, 37500.000) = 99 
    [37500.000, 40000.000) = 83 
    [40000.000, 42500.000) = 55 
    [42500.000, 45000.000) = 17 
    [45000.000, 47500.000) = 5 
    [47500.000, 50000.000) = 7 
    [50000.000, 52500.000) = 2 
    [52500.000, 55000.000) = 0 
    [55000.000, 57500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  30670.848 us/op
     p(50.0000) =  30965.760 us/op
     p(90.0000) =  33685.504 us/op
     p(95.0000) =  35454.976 us/op
     p(99.0000) =  41287.680 us/op
     p(99.9000) =  48919.871 us/op
     p(99.9900) =  55246.848 us/op
     p(99.9990) =  55246.848 us/op
     p(99.9999) =  55246.848 us/op
    p(100.0000) =  55246.848 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 89.13% complete, ETA 00:54:41
# Fork: 1 of 1
# Warmup Iteration   1: 3234856.960 ±(99.9%) 363884.685 us/op
# Warmup Iteration   2: 6039797.760 ±(99.9%) 89332568.928 us/op
# Warmup Iteration   3: 3198156.800 ±(99.9%) 161866.659 us/op
# Warmup Iteration   4: 5284823.040 ±(99.9%) 26959307.238 us/op
# Warmup Iteration   5: 11475615.744 us/op
Iteration   1: 11559501.824 us/op
                 runAlgorithm·p0.00:   11559501.824 us/op
                 runAlgorithm·p0.50:   11559501.824 us/op
                 runAlgorithm·p0.90:   11559501.824 us/op
                 runAlgorithm·p0.95:   11559501.824 us/op
                 runAlgorithm·p0.99:   11559501.824 us/op
                 runAlgorithm·p0.999:  11559501.824 us/op
                 runAlgorithm·p0.9999: 11559501.824 us/op
                 runAlgorithm·p1.00:   11559501.824 us/op

Iteration   2: 11475615.744 us/op
                 runAlgorithm·p0.00:   11475615.744 us/op
                 runAlgorithm·p0.50:   11475615.744 us/op
                 runAlgorithm·p0.90:   11475615.744 us/op
                 runAlgorithm·p0.95:   11475615.744 us/op
                 runAlgorithm·p0.99:   11475615.744 us/op
                 runAlgorithm·p0.999:  11475615.744 us/op
                 runAlgorithm·p0.9999: 11475615.744 us/op
                 runAlgorithm·p1.00:   11475615.744 us/op

Iteration   3: 11475615.744 us/op
                 runAlgorithm·p0.00:   11475615.744 us/op
                 runAlgorithm·p0.50:   11475615.744 us/op
                 runAlgorithm·p0.90:   11475615.744 us/op
                 runAlgorithm·p0.95:   11475615.744 us/op
                 runAlgorithm·p0.99:   11475615.744 us/op
                 runAlgorithm·p0.999:  11475615.744 us/op
                 runAlgorithm·p0.9999: 11475615.744 us/op
                 runAlgorithm·p1.00:   11475615.744 us/op

Iteration   4: 11475615.744 us/op
                 runAlgorithm·p0.00:   11475615.744 us/op
                 runAlgorithm·p0.50:   11475615.744 us/op
                 runAlgorithm·p0.90:   11475615.744 us/op
                 runAlgorithm·p0.95:   11475615.744 us/op
                 runAlgorithm·p0.99:   11475615.744 us/op
                 runAlgorithm·p0.999:  11475615.744 us/op
                 runAlgorithm·p0.9999: 11475615.744 us/op
                 runAlgorithm·p1.00:   11475615.744 us/op

Iteration   5: 11492392.960 us/op
                 runAlgorithm·p0.00:   11492392.960 us/op
                 runAlgorithm·p0.50:   11492392.960 us/op
                 runAlgorithm·p0.90:   11492392.960 us/op
                 runAlgorithm·p0.95:   11492392.960 us/op
                 runAlgorithm·p0.99:   11492392.960 us/op
                 runAlgorithm·p0.999:  11492392.960 us/op
                 runAlgorithm·p0.9999: 11492392.960 us/op
                 runAlgorithm·p1.00:   11492392.960 us/op

Iteration   6: 11475615.744 us/op
                 runAlgorithm·p0.00:   11475615.744 us/op
                 runAlgorithm·p0.50:   11475615.744 us/op
                 runAlgorithm·p0.90:   11475615.744 us/op
                 runAlgorithm·p0.95:   11475615.744 us/op
                 runAlgorithm·p0.99:   11475615.744 us/op
                 runAlgorithm·p0.999:  11475615.744 us/op
                 runAlgorithm·p0.9999: 11475615.744 us/op
                 runAlgorithm·p1.00:   11475615.744 us/op

Iteration   7: 11442061.312 us/op
                 runAlgorithm·p0.00:   11442061.312 us/op
                 runAlgorithm·p0.50:   11442061.312 us/op
                 runAlgorithm·p0.90:   11442061.312 us/op
                 runAlgorithm·p0.95:   11442061.312 us/op
                 runAlgorithm·p0.99:   11442061.312 us/op
                 runAlgorithm·p0.999:  11442061.312 us/op
                 runAlgorithm·p0.9999: 11442061.312 us/op
                 runAlgorithm·p1.00:   11442061.312 us/op

Iteration   8: 11458838.528 us/op
                 runAlgorithm·p0.00:   11458838.528 us/op
                 runAlgorithm·p0.50:   11458838.528 us/op
                 runAlgorithm·p0.90:   11458838.528 us/op
                 runAlgorithm·p0.95:   11458838.528 us/op
                 runAlgorithm·p0.99:   11458838.528 us/op
                 runAlgorithm·p0.999:  11458838.528 us/op
                 runAlgorithm·p0.9999: 11458838.528 us/op
                 runAlgorithm·p1.00:   11458838.528 us/op

Iteration   9: 11458838.528 us/op
                 runAlgorithm·p0.00:   11458838.528 us/op
                 runAlgorithm·p0.50:   11458838.528 us/op
                 runAlgorithm·p0.90:   11458838.528 us/op
                 runAlgorithm·p0.95:   11458838.528 us/op
                 runAlgorithm·p0.99:   11458838.528 us/op
                 runAlgorithm·p0.999:  11458838.528 us/op
                 runAlgorithm·p0.9999: 11458838.528 us/op
                 runAlgorithm·p1.00:   11458838.528 us/op

Iteration  10: 11425284.096 us/op
                 runAlgorithm·p0.00:   11425284.096 us/op
                 runAlgorithm·p0.50:   11425284.096 us/op
                 runAlgorithm·p0.90:   11425284.096 us/op
                 runAlgorithm·p0.95:   11425284.096 us/op
                 runAlgorithm·p0.99:   11425284.096 us/op
                 runAlgorithm·p0.999:  11425284.096 us/op
                 runAlgorithm·p0.9999: 11425284.096 us/op
                 runAlgorithm·p1.00:   11425284.096 us/op

Iteration  11: 11509170.176 us/op
                 runAlgorithm·p0.00:   11509170.176 us/op
                 runAlgorithm·p0.50:   11509170.176 us/op
                 runAlgorithm·p0.90:   11509170.176 us/op
                 runAlgorithm·p0.95:   11509170.176 us/op
                 runAlgorithm·p0.99:   11509170.176 us/op
                 runAlgorithm·p0.999:  11509170.176 us/op
                 runAlgorithm·p0.9999: 11509170.176 us/op
                 runAlgorithm·p1.00:   11509170.176 us/op

Iteration  12: 11475615.744 us/op
                 runAlgorithm·p0.00:   11475615.744 us/op
                 runAlgorithm·p0.50:   11475615.744 us/op
                 runAlgorithm·p0.90:   11475615.744 us/op
                 runAlgorithm·p0.95:   11475615.744 us/op
                 runAlgorithm·p0.99:   11475615.744 us/op
                 runAlgorithm·p0.999:  11475615.744 us/op
                 runAlgorithm·p0.9999: 11475615.744 us/op
                 runAlgorithm·p1.00:   11475615.744 us/op

Iteration  13: 11576279.040 us/op
                 runAlgorithm·p0.00:   11576279.040 us/op
                 runAlgorithm·p0.50:   11576279.040 us/op
                 runAlgorithm·p0.90:   11576279.040 us/op
                 runAlgorithm·p0.95:   11576279.040 us/op
                 runAlgorithm·p0.99:   11576279.040 us/op
                 runAlgorithm·p0.999:  11576279.040 us/op
                 runAlgorithm·p0.9999: 11576279.040 us/op
                 runAlgorithm·p1.00:   11576279.040 us/op

Iteration  14: 11492392.960 us/op
                 runAlgorithm·p0.00:   11492392.960 us/op
                 runAlgorithm·p0.50:   11492392.960 us/op
                 runAlgorithm·p0.90:   11492392.960 us/op
                 runAlgorithm·p0.95:   11492392.960 us/op
                 runAlgorithm·p0.99:   11492392.960 us/op
                 runAlgorithm·p0.999:  11492392.960 us/op
                 runAlgorithm·p0.9999: 11492392.960 us/op
                 runAlgorithm·p1.00:   11492392.960 us/op

Iteration  15: 11492392.960 us/op
                 runAlgorithm·p0.00:   11492392.960 us/op
                 runAlgorithm·p0.50:   11492392.960 us/op
                 runAlgorithm·p0.90:   11492392.960 us/op
                 runAlgorithm·p0.95:   11492392.960 us/op
                 runAlgorithm·p0.99:   11492392.960 us/op
                 runAlgorithm·p0.999:  11492392.960 us/op
                 runAlgorithm·p0.9999: 11492392.960 us/op
                 runAlgorithm·p1.00:   11492392.960 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean = 11485682.074 ±(99.9%) 42226.889 us/op

  Histogram, us/op:
    [11400000.000, 11412500.000) = 0 
    [11412500.000, 11425000.000) = 0 
    [11425000.000, 11437500.000) = 1 
    [11437500.000, 11450000.000) = 1 
    [11450000.000, 11462500.000) = 2 
    [11462500.000, 11475000.000) = 0 
    [11475000.000, 11487500.000) = 5 
    [11487500.000, 11500000.000) = 3 
    [11500000.000, 11512500.000) = 1 
    [11512500.000, 11525000.000) = 0 
    [11525000.000, 11537500.000) = 0 
    [11537500.000, 11550000.000) = 0 
    [11550000.000, 11562500.000) = 1 
    [11562500.000, 11575000.000) = 0 
    [11575000.000, 11587500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 11425284.096 us/op
     p(50.0000) = 11475615.744 us/op
     p(90.0000) = 11566212.710 us/op
     p(95.0000) = 11576279.040 us/op
     p(99.0000) = 11576279.040 us/op
     p(99.9000) = 11576279.040 us/op
     p(99.9900) = 11576279.040 us/op
     p(99.9990) = 11576279.040 us/op
     p(99.9999) = 11576279.040 us/op
    p(100.0000) = 11576279.040 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 89.85% complete, ETA 00:51:08
# Fork: 1 of 1
# Warmup Iteration   1: 1884.734 ±(99.9%) 11.891 us/op
# Warmup Iteration   2: 1877.995 ±(99.9%) 1.173 us/op
# Warmup Iteration   3: 1877.658 ±(99.9%) 1.295 us/op
# Warmup Iteration   4: 1878.733 ±(99.9%) 1.099 us/op
# Warmup Iteration   5: 1878.921 ±(99.9%) 1.771 us/op
Iteration   1: 1875.998 ±(99.9%) 0.830 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1855.488 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1873.920 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1888.256 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1902.592 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   1949.696 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2041.856 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2314.240 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2314.240 us/op

Iteration   2: 1877.504 ±(99.9%) 0.917 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1855.488 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1873.920 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1896.448 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1925.120 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   1949.696 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2021.376 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2162.688 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2162.688 us/op

Iteration   3: 1876.939 ±(99.9%) 0.845 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1855.488 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1873.920 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1892.352 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1921.024 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   1945.068 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2013.184 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2064.384 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2064.384 us/op

Iteration   4: 1875.739 ±(99.9%) 2.653 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1855.488 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1873.920 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1886.208 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1898.496 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   1945.600 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2090.414 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 5955.584 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   5955.584 us/op

Iteration   5: 1875.720 ±(99.9%) 0.768 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1855.488 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1873.920 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1886.208 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1905.869 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   1945.027 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2027.520 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2074.624 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2074.624 us/op

Iteration   6: 1874.588 ±(99.9%) 0.728 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1855.488 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1873.920 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1886.208 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1896.448 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   1938.780 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2044.594 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2074.624 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2074.624 us/op

Iteration   7: 2030.671 ±(99.9%) 3.445 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1855.488 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2058.240 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2072.576 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2082.816 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2129.920 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2301.329 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2588.672 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2588.672 us/op

Iteration   8: 2063.294 ±(99.9%) 0.943 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2043.904 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2060.288 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2076.672 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2093.056 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2138.112 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2240.860 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2600.960 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2600.960 us/op

Iteration   9: 2062.734 ±(99.9%) 0.801 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2043.904 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2060.288 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2074.624 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2093.056 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2129.920 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2224.755 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2248.704 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2248.704 us/op

Iteration  10: 2062.102 ±(99.9%) 0.748 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2043.904 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2060.288 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2074.624 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2088.960 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2121.728 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2215.936 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2248.704 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2248.704 us/op

Iteration  11: 2061.671 ±(99.9%) 0.797 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2043.904 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2060.288 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2074.624 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2091.008 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2125.824 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2207.744 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2252.800 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2252.800 us/op

Iteration  12: 2062.226 ±(99.9%) 1.400 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2043.904 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2060.288 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2074.624 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2091.008 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2136.146 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2265.711 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3182.592 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3182.592 us/op

Iteration  13: 2066.373 ±(99.9%) 3.618 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2043.904 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2060.288 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2078.720 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2097.152 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2146.304 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  3781.861 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 4390.912 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   4390.912 us/op

Iteration  14: 2065.213 ±(99.9%) 2.001 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2043.904 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2060.288 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2078.720 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2097.152 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2134.016 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2787.869 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3244.032 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3244.032 us/op

Iteration  15: 2063.232 ±(99.9%) 0.974 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2043.904 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2060.288 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2076.672 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2093.056 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2138.112 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2240.512 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2736.128 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2736.128 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  N = 75637
  mean =   1982.094 ±(99.9%) 1.175 us/op

  Histogram, us/op:
    [1000.000, 1500.000) = 0 
    [1500.000, 2000.000) = 32757 
    [2000.000, 2500.000) = 42853 
    [2500.000, 3000.000) = 16 
    [3000.000, 3500.000) = 4 
    [3500.000, 4000.000) = 2 
    [4000.000, 4500.000) = 4 
    [4500.000, 5000.000) = 0 
    [5000.000, 5500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   1855.488 us/op
     p(50.0000) =   2048.000 us/op
     p(90.0000) =   2070.528 us/op
     p(95.0000) =   2078.720 us/op
     p(99.0000) =   2121.728 us/op
     p(99.9000) =   2240.512 us/op
     p(99.9900) =   3369.099 us/op
     p(99.9990) =   5955.584 us/op
     p(99.9999) =   5955.584 us/op
    p(100.0000) =   5955.584 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 90.58% complete, ETA 00:47:28
# Fork: 1 of 1
# Warmup Iteration   1: 62224.600 ±(99.9%) 77.750 us/op
# Warmup Iteration   2: 62224.600 ±(99.9%) 98.502 us/op
# Warmup Iteration   3: 62148.481 ±(99.9%) 90.867 us/op
# Warmup Iteration   4: 62165.984 ±(99.9%) 74.540 us/op
# Warmup Iteration   5: 62282.402 ±(99.9%) 77.710 us/op
Iteration   1: 62138.711 ±(99.9%) 66.270 us/op
                 extractOperationOutOfLoop·p0.00:   60686.336 us/op
                 extractOperationOutOfLoop·p0.50:   62193.664 us/op
                 extractOperationOutOfLoop·p0.90:   62324.736 us/op
                 extractOperationOutOfLoop·p0.95:   62390.272 us/op
                 extractOperationOutOfLoop·p0.99:   62611.784 us/op
                 extractOperationOutOfLoop·p0.999:  62652.416 us/op
                 extractOperationOutOfLoop·p0.9999: 62652.416 us/op
                 extractOperationOutOfLoop·p1.00:   62652.416 us/op

Iteration   2: 62109.403 ±(99.9%) 72.159 us/op
                 extractOperationOutOfLoop·p0.00:   60817.408 us/op
                 extractOperationOutOfLoop·p0.50:   62193.664 us/op
                 extractOperationOutOfLoop·p0.90:   62324.736 us/op
                 extractOperationOutOfLoop·p0.95:   62390.272 us/op
                 extractOperationOutOfLoop·p0.99:   62521.344 us/op
                 extractOperationOutOfLoop·p0.999:  62521.344 us/op
                 extractOperationOutOfLoop·p0.9999: 62521.344 us/op
                 extractOperationOutOfLoop·p1.00:   62521.344 us/op

Iteration   3: 62136.269 ±(99.9%) 89.966 us/op
                 extractOperationOutOfLoop·p0.00:   60882.944 us/op
                 extractOperationOutOfLoop·p0.50:   62193.664 us/op
                 extractOperationOutOfLoop·p0.90:   62390.272 us/op
                 extractOperationOutOfLoop·p0.95:   62455.808 us/op
                 extractOperationOutOfLoop·p0.99:   63449.334 us/op
                 extractOperationOutOfLoop·p0.999:  64749.568 us/op
                 extractOperationOutOfLoop·p0.9999: 64749.568 us/op
                 extractOperationOutOfLoop·p1.00:   64749.568 us/op

Iteration   4: 62175.346 ±(99.9%) 54.693 us/op
                 extractOperationOutOfLoop·p0.00:   61079.552 us/op
                 extractOperationOutOfLoop·p0.50:   62193.664 us/op
                 extractOperationOutOfLoop·p0.90:   62324.736 us/op
                 extractOperationOutOfLoop·p0.95:   62455.808 us/op
                 extractOperationOutOfLoop·p0.99:   62636.687 us/op
                 extractOperationOutOfLoop·p0.999:  62717.952 us/op
                 extractOperationOutOfLoop·p0.9999: 62717.952 us/op
                 extractOperationOutOfLoop·p1.00:   62717.952 us/op

Iteration   5: 62128.535 ±(99.9%) 57.149 us/op
                 extractOperationOutOfLoop·p0.00:   61079.552 us/op
                 extractOperationOutOfLoop·p0.50:   62193.664 us/op
                 extractOperationOutOfLoop·p0.90:   62324.736 us/op
                 extractOperationOutOfLoop·p0.95:   62390.272 us/op
                 extractOperationOutOfLoop·p0.99:   62636.687 us/op
                 extractOperationOutOfLoop·p0.999:  62717.952 us/op
                 extractOperationOutOfLoop·p0.9999: 62717.952 us/op
                 extractOperationOutOfLoop·p1.00:   62717.952 us/op

Iteration   6: 62079.583 ±(99.9%) 85.154 us/op
                 extractOperationOutOfLoop·p0.00:   60620.800 us/op
                 extractOperationOutOfLoop·p0.50:   62193.664 us/op
                 extractOperationOutOfLoop·p0.90:   62324.736 us/op
                 extractOperationOutOfLoop·p0.95:   62455.808 us/op
                 extractOperationOutOfLoop·p0.99:   62586.880 us/op
                 extractOperationOutOfLoop·p0.999:  62586.880 us/op
                 extractOperationOutOfLoop·p0.9999: 62586.880 us/op
                 extractOperationOutOfLoop·p1.00:   62586.880 us/op

Iteration   7: 62095.564 ±(99.9%) 84.229 us/op
                 extractOperationOutOfLoop·p0.00:   60751.872 us/op
                 extractOperationOutOfLoop·p0.50:   62128.128 us/op
                 extractOperationOutOfLoop·p0.90:   62324.736 us/op
                 extractOperationOutOfLoop·p0.95:   62580.326 us/op
                 extractOperationOutOfLoop·p0.99:   62939.464 us/op
                 extractOperationOutOfLoop·p0.999:  62980.096 us/op
                 extractOperationOutOfLoop·p0.9999: 62980.096 us/op
                 extractOperationOutOfLoop·p1.00:   62980.096 us/op

Iteration   8: 62190.408 ±(99.9%) 54.953 us/op
                 extractOperationOutOfLoop·p0.00:   61210.624 us/op
                 extractOperationOutOfLoop·p0.50:   62193.664 us/op
                 extractOperationOutOfLoop·p0.90:   62390.272 us/op
                 extractOperationOutOfLoop·p0.95:   62455.808 us/op
                 extractOperationOutOfLoop·p0.99:   62702.223 us/op
                 extractOperationOutOfLoop·p0.999:  62783.488 us/op
                 extractOperationOutOfLoop·p0.9999: 62783.488 us/op
                 extractOperationOutOfLoop·p1.00:   62783.488 us/op

Iteration   9: 62137.897 ±(99.9%) 61.742 us/op
                 extractOperationOutOfLoop·p0.00:   60620.800 us/op
                 extractOperationOutOfLoop·p0.50:   62193.664 us/op
                 extractOperationOutOfLoop·p0.90:   62324.736 us/op
                 extractOperationOutOfLoop·p0.95:   62324.736 us/op
                 extractOperationOutOfLoop·p0.99:   62820.188 us/op
                 extractOperationOutOfLoop·p0.999:  63307.776 us/op
                 extractOperationOutOfLoop·p0.9999: 63307.776 us/op
                 extractOperationOutOfLoop·p1.00:   63307.776 us/op

Iteration  10: 62125.686 ±(99.9%) 65.930 us/op
                 extractOperationOutOfLoop·p0.00:   60948.480 us/op
                 extractOperationOutOfLoop·p0.50:   62193.664 us/op
                 extractOperationOutOfLoop·p0.90:   62324.736 us/op
                 extractOperationOutOfLoop·p0.95:   62390.272 us/op
                 extractOperationOutOfLoop·p0.99:   62571.151 us/op
                 extractOperationOutOfLoop·p0.999:  62652.416 us/op
                 extractOperationOutOfLoop·p0.9999: 62652.416 us/op
                 extractOperationOutOfLoop·p1.00:   62652.416 us/op

Iteration  11: 62130.977 ±(99.9%) 77.419 us/op
                 extractOperationOutOfLoop·p0.00:   60948.480 us/op
                 extractOperationOutOfLoop·p0.50:   62128.128 us/op
                 extractOperationOutOfLoop·p0.90:   62377.165 us/op
                 extractOperationOutOfLoop·p0.95:   62580.326 us/op
                 extractOperationOutOfLoop·p0.99:   63251.415 us/op
                 extractOperationOutOfLoop·p0.999:  63373.312 us/op
                 extractOperationOutOfLoop·p0.9999: 63373.312 us/op
                 extractOperationOutOfLoop·p1.00:   63373.312 us/op

Iteration  12: 62181.859 ±(99.9%) 75.023 us/op
                 extractOperationOutOfLoop·p0.00:   61145.088 us/op
                 extractOperationOutOfLoop·p0.50:   62193.664 us/op
                 extractOperationOutOfLoop·p0.90:   62455.808 us/op
                 extractOperationOutOfLoop·p0.95:   62776.934 us/op
                 extractOperationOutOfLoop·p0.99:   63176.704 us/op
                 extractOperationOutOfLoop·p0.999:  63176.704 us/op
                 extractOperationOutOfLoop·p0.9999: 63176.704 us/op
                 extractOperationOutOfLoop·p1.00:   63176.704 us/op

Iteration  13: 62205.469 ±(99.9%) 99.313 us/op
                 extractOperationOutOfLoop·p0.00:   61145.088 us/op
                 extractOperationOutOfLoop·p0.50:   62193.664 us/op
                 extractOperationOutOfLoop·p0.90:   62573.773 us/op
                 extractOperationOutOfLoop·p0.95:   62776.934 us/op
                 extractOperationOutOfLoop·p0.99:   63936.922 us/op
                 extractOperationOutOfLoop·p0.999:  64749.568 us/op
                 extractOperationOutOfLoop·p0.9999: 64749.568 us/op
                 extractOperationOutOfLoop·p1.00:   64749.568 us/op

Iteration  14: 62233.148 ±(99.9%) 86.926 us/op
                 extractOperationOutOfLoop·p0.00:   61014.016 us/op
                 extractOperationOutOfLoop·p0.50:   62193.664 us/op
                 extractOperationOutOfLoop·p0.90:   62639.309 us/op
                 extractOperationOutOfLoop·p0.95:   62717.952 us/op
                 extractOperationOutOfLoop·p0.99:   63357.583 us/op
                 extractOperationOutOfLoop·p0.999:  63438.848 us/op
                 extractOperationOutOfLoop·p0.9999: 63438.848 us/op
                 extractOperationOutOfLoop·p1.00:   63438.848 us/op

Iteration  15: 62211.574 ±(99.9%) 134.539 us/op
                 extractOperationOutOfLoop·p0.00:   60751.872 us/op
                 extractOperationOutOfLoop·p0.50:   62193.664 us/op
                 extractOperationOutOfLoop·p0.90:   62455.808 us/op
                 extractOperationOutOfLoop·p0.95:   63340.544 us/op
                 extractOperationOutOfLoop·p0.99:   64643.400 us/op
                 extractOperationOutOfLoop·p0.999:  64684.032 us/op
                 extractOperationOutOfLoop·p0.9999: 64684.032 us/op
                 extractOperationOutOfLoop·p1.00:   64684.032 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  N = 2416
  mean =  62151.999 ±(99.9%) 20.516 us/op

  Histogram, us/op:
    [60000.000, 60500.000) = 0 
    [60500.000, 61000.000) = 13 
    [61000.000, 61500.000) = 61 
    [61500.000, 62000.000) = 432 
    [62000.000, 62500.000) = 1780 
    [62500.000, 63000.000) = 104 
    [63000.000, 63500.000) = 17 
    [63500.000, 64000.000) = 3 
    [64000.000, 64500.000) = 2 

  Percentiles, us/op:
      p(0.0000) =  60620.800 us/op
     p(50.0000) =  62193.664 us/op
     p(90.0000) =  62390.272 us/op
     p(95.0000) =  62521.344 us/op
     p(99.0000) =  63045.632 us/op
     p(99.9000) =  64722.239 us/op
     p(99.9900) =  64749.568 us/op
     p(99.9990) =  64749.568 us/op
     p(99.9999) =  64749.568 us/op
    p(100.0000) =  64749.568 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 91.30% complete, ETA 00:43:49
# Fork: 1 of 1
# Warmup Iteration   1: 1693300.443 ±(99.9%) 65666.029 us/op
# Warmup Iteration   2: 1702587.831 ±(99.9%) 3259.352 us/op
# Warmup Iteration   3: 1703187.017 ±(99.9%) 1785.220 us/op
# Warmup Iteration   4: 1703187.017 ±(99.9%) 3259.352 us/op
# Warmup Iteration   5: 1703236.949 ±(99.9%) 2400.829 us/op
Iteration   1: 1702537.899 ±(99.9%) 2400.829 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration   2: 1702188.373 ±(99.9%) 4801.658 us/op
                 reduceLoops·p0.00:   1698693.120 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration   3: 1702537.899 ±(99.9%) 2400.829 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration   4: 1702537.899 ±(99.9%) 2400.829 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration   5: 1702887.424 ±(99.9%) 3719.348 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration   6: 1702887.424 ±(99.9%) 3719.348 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration   7: 1701838.848 ±(99.9%) 3221.050 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1701838.848 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration   8: 1703236.949 ±(99.9%) 2400.829 us/op
                 reduceLoops·p0.00:   1702887.424 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration   9: 1701838.848 ±(99.9%) 3221.050 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1701838.848 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration  10: 1702188.373 ±(99.9%) 3036.835 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration  11: 1702188.373 ±(99.9%) 3036.835 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration  12: 1703486.610 ±(99.9%) 3570.441 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration  13: 1705284.169 ±(99.9%) 3259.352 us/op
                 reduceLoops·p0.00:   1702887.424 us/op
                 reduceLoops·p0.50:   1704984.576 us/op
                 reduceLoops·p0.90:   1707081.728 us/op
                 reduceLoops·p0.95:   1707081.728 us/op
                 reduceLoops·p0.99:   1707081.728 us/op
                 reduceLoops·p0.999:  1707081.728 us/op
                 reduceLoops·p0.9999: 1707081.728 us/op
                 reduceLoops·p1.00:   1707081.728 us/op

Iteration  14: 1703786.203 ±(99.9%) 2524.683 us/op
                 reduceLoops·p0.00:   1702887.424 us/op
                 reduceLoops·p0.50:   1702887.424 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration  15: 1704085.797 ±(99.9%) 2524.683 us/op
                 reduceLoops·p0.00:   1702887.424 us/op
                 reduceLoops·p0.50:   1704984.576 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  N = 94
  mean = 1702954.354 ±(99.9%) 510.766 us/op

  Histogram, us/op:
    [1698000.000, 1699000.000) = 1 
    [1699000.000, 1700000.000) = 0 
    [1700000.000, 1701000.000) = 16 
    [1701000.000, 1702000.000) = 0 
    [1702000.000, 1703000.000) = 58 
    [1703000.000, 1704000.000) = 0 
    [1704000.000, 1705000.000) = 17 
    [1705000.000, 1706000.000) = 0 
    [1706000.000, 1707000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1698693.120 us/op
     p(50.0000) = 1702887.424 us/op
     p(90.0000) = 1704984.576 us/op
     p(95.0000) = 1704984.576 us/op
     p(99.0000) = 1707081.728 us/op
     p(99.9000) = 1707081.728 us/op
     p(99.9900) = 1707081.728 us/op
     p(99.9990) = 1707081.728 us/op
     p(99.9999) = 1707081.728 us/op
    p(100.0000) = 1707081.728 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 92.03% complete, ETA 00:40:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.571 ±(99.9%) 0.003 us/op
# Warmup Iteration   2: 0.565 ±(99.9%) 0.003 us/op
# Warmup Iteration   3: 0.569 ±(99.9%) 0.003 us/op
# Warmup Iteration   4: 0.569 ±(99.9%) 0.003 us/op
# Warmup Iteration   5: 0.566 ±(99.9%) 0.002 us/op
Iteration   1: 0.608 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.504 us/op
                 reduceSynchronizedBlocks·p0.50:   0.555 us/op
                 reduceSynchronizedBlocks·p0.90:   0.842 us/op
                 reduceSynchronizedBlocks·p0.95:   0.887 us/op
                 reduceSynchronizedBlocks·p0.99:   0.984 us/op
                 reduceSynchronizedBlocks·p0.999:  5.094 us/op
                 reduceSynchronizedBlocks·p0.9999: 14.752 us/op
                 reduceSynchronizedBlocks·p1.00:   102.912 us/op

Iteration   2: 0.570 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.510 us/op
                 reduceSynchronizedBlocks·p0.50:   0.551 us/op
                 reduceSynchronizedBlocks·p0.90:   0.567 us/op
                 reduceSynchronizedBlocks·p0.95:   0.575 us/op
                 reduceSynchronizedBlocks·p0.99:   0.803 us/op
                 reduceSynchronizedBlocks·p0.999:  5.215 us/op
                 reduceSynchronizedBlocks·p0.9999: 15.625 us/op
                 reduceSynchronizedBlocks·p1.00:   102.528 us/op

Iteration   3: 0.567 ±(99.9%) 0.002 us/op
                 reduceSynchronizedBlocks·p0.00:   0.510 us/op
                 reduceSynchronizedBlocks·p0.50:   0.553 us/op
                 reduceSynchronizedBlocks·p0.90:   0.569 us/op
                 reduceSynchronizedBlocks·p0.95:   0.577 us/op
                 reduceSynchronizedBlocks·p0.99:   0.604 us/op
                 reduceSynchronizedBlocks·p0.999:  4.678 us/op
                 reduceSynchronizedBlocks·p0.9999: 12.825 us/op
                 reduceSynchronizedBlocks·p1.00:   52.288 us/op

Iteration   4: 0.569 ±(99.9%) 0.002 us/op
                 reduceSynchronizedBlocks·p0.00:   0.509 us/op
                 reduceSynchronizedBlocks·p0.50:   0.552 us/op
                 reduceSynchronizedBlocks·p0.90:   0.568 us/op
                 reduceSynchronizedBlocks·p0.95:   0.576 us/op
                 reduceSynchronizedBlocks·p0.99:   0.603 us/op
                 reduceSynchronizedBlocks·p0.999:  4.879 us/op
                 reduceSynchronizedBlocks·p0.9999: 18.668 us/op
                 reduceSynchronizedBlocks·p1.00:   93.824 us/op

Iteration   5: 0.573 ±(99.9%) 0.008 us/op
                 reduceSynchronizedBlocks·p0.00:   0.508 us/op
                 reduceSynchronizedBlocks·p0.50:   0.552 us/op
                 reduceSynchronizedBlocks·p0.90:   0.569 us/op
                 reduceSynchronizedBlocks·p0.95:   0.576 us/op
                 reduceSynchronizedBlocks·p0.99:   0.600 us/op
                 reduceSynchronizedBlocks·p0.999:  5.072 us/op
                 reduceSynchronizedBlocks·p0.9999: 23.131 us/op
                 reduceSynchronizedBlocks·p1.00:   518.656 us/op

Iteration   6: 0.568 ±(99.9%) 0.002 us/op
                 reduceSynchronizedBlocks·p0.00:   0.508 us/op
                 reduceSynchronizedBlocks·p0.50:   0.552 us/op
                 reduceSynchronizedBlocks·p0.90:   0.567 us/op
                 reduceSynchronizedBlocks·p0.95:   0.575 us/op
                 reduceSynchronizedBlocks·p0.99:   0.601 us/op
                 reduceSynchronizedBlocks·p0.999:  4.912 us/op
                 reduceSynchronizedBlocks·p0.9999: 13.591 us/op
                 reduceSynchronizedBlocks·p1.00:   104.576 us/op

Iteration   7: 0.568 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.513 us/op
                 reduceSynchronizedBlocks·p0.50:   0.552 us/op
                 reduceSynchronizedBlocks·p0.90:   0.569 us/op
                 reduceSynchronizedBlocks·p0.95:   0.576 us/op
                 reduceSynchronizedBlocks·p0.99:   0.600 us/op
                 reduceSynchronizedBlocks·p0.999:  4.632 us/op
                 reduceSynchronizedBlocks·p0.9999: 13.446 us/op
                 reduceSynchronizedBlocks·p1.00:   168.192 us/op

Iteration   8: 0.571 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.510 us/op
                 reduceSynchronizedBlocks·p0.50:   0.552 us/op
                 reduceSynchronizedBlocks·p0.90:   0.570 us/op
                 reduceSynchronizedBlocks·p0.95:   0.578 us/op
                 reduceSynchronizedBlocks·p0.99:   0.827 us/op
                 reduceSynchronizedBlocks·p0.999:  4.920 us/op
                 reduceSynchronizedBlocks·p0.9999: 15.945 us/op
                 reduceSynchronizedBlocks·p1.00:   91.648 us/op

Iteration   9: 0.567 ±(99.9%) 0.002 us/op
                 reduceSynchronizedBlocks·p0.00:   0.507 us/op
                 reduceSynchronizedBlocks·p0.50:   0.552 us/op
                 reduceSynchronizedBlocks·p0.90:   0.568 us/op
                 reduceSynchronizedBlocks·p0.95:   0.575 us/op
                 reduceSynchronizedBlocks·p0.99:   0.599 us/op
                 reduceSynchronizedBlocks·p0.999:  4.745 us/op
                 reduceSynchronizedBlocks·p0.9999: 13.163 us/op
                 reduceSynchronizedBlocks·p1.00:   51.776 us/op

Iteration  10: 0.567 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.505 us/op
                 reduceSynchronizedBlocks·p0.50:   0.552 us/op
                 reduceSynchronizedBlocks·p0.90:   0.567 us/op
                 reduceSynchronizedBlocks·p0.95:   0.574 us/op
                 reduceSynchronizedBlocks·p0.99:   0.599 us/op
                 reduceSynchronizedBlocks·p0.999:  4.923 us/op
                 reduceSynchronizedBlocks·p0.9999: 13.568 us/op
                 reduceSynchronizedBlocks·p1.00:   66.816 us/op

Iteration  11: 0.570 ±(99.9%) 0.004 us/op
                 reduceSynchronizedBlocks·p0.00:   0.510 us/op
                 reduceSynchronizedBlocks·p0.50:   0.552 us/op
                 reduceSynchronizedBlocks·p0.90:   0.568 us/op
                 reduceSynchronizedBlocks·p0.95:   0.576 us/op
                 reduceSynchronizedBlocks·p0.99:   0.601 us/op
                 reduceSynchronizedBlocks·p0.999:  4.928 us/op
                 reduceSynchronizedBlocks·p0.9999: 15.890 us/op
                 reduceSynchronizedBlocks·p1.00:   120.320 us/op

Iteration  12: 0.568 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.510 us/op
                 reduceSynchronizedBlocks·p0.50:   0.552 us/op
                 reduceSynchronizedBlocks·p0.90:   0.566 us/op
                 reduceSynchronizedBlocks·p0.95:   0.574 us/op
                 reduceSynchronizedBlocks·p0.99:   0.606 us/op
                 reduceSynchronizedBlocks·p0.999:  5.041 us/op
                 reduceSynchronizedBlocks·p0.9999: 15.776 us/op
                 reduceSynchronizedBlocks·p1.00:   97.408 us/op

Iteration  13: 0.566 ±(99.9%) 0.002 us/op
                 reduceSynchronizedBlocks·p0.00:   0.509 us/op
                 reduceSynchronizedBlocks·p0.50:   0.551 us/op
                 reduceSynchronizedBlocks·p0.90:   0.567 us/op
                 reduceSynchronizedBlocks·p0.95:   0.576 us/op
                 reduceSynchronizedBlocks·p0.99:   0.604 us/op
                 reduceSynchronizedBlocks·p0.999:  4.503 us/op
                 reduceSynchronizedBlocks·p0.9999: 11.614 us/op
                 reduceSynchronizedBlocks·p1.00:   109.696 us/op

Iteration  14: 0.569 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.508 us/op
                 reduceSynchronizedBlocks·p0.50:   0.552 us/op
                 reduceSynchronizedBlocks·p0.90:   0.568 us/op
                 reduceSynchronizedBlocks·p0.95:   0.577 us/op
                 reduceSynchronizedBlocks·p0.99:   0.604 us/op
                 reduceSynchronizedBlocks·p0.999:  5.054 us/op
                 reduceSynchronizedBlocks·p0.9999: 23.830 us/op
                 reduceSynchronizedBlocks·p1.00:   104.192 us/op

Iteration  15: 0.570 ±(99.9%) 0.003 us/op
                 reduceSynchronizedBlocks·p0.00:   0.507 us/op
                 reduceSynchronizedBlocks·p0.50:   0.551 us/op
                 reduceSynchronizedBlocks·p0.90:   0.566 us/op
                 reduceSynchronizedBlocks·p0.95:   0.573 us/op
                 reduceSynchronizedBlocks·p0.99:   0.595 us/op
                 reduceSynchronizedBlocks·p0.999:  5.231 us/op
                 reduceSynchronizedBlocks·p0.9999: 24.707 us/op
                 reduceSynchronizedBlocks·p1.00:   137.216 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  N = 4470762
  mean =      0.571 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 4470707 
    [ 50.000, 100.000) = 42 
    [100.000, 150.000) = 10 
    [150.000, 200.000) = 1 
    [200.000, 250.000) = 0 
    [250.000, 300.000) = 0 
    [300.000, 350.000) = 0 
    [350.000, 400.000) = 0 
    [400.000, 450.000) = 1 
    [450.000, 500.000) = 0 
    [500.000, 550.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      0.504 us/op
     p(50.0000) =      0.552 us/op
     p(90.0000) =      0.569 us/op
     p(95.0000) =      0.578 us/op
     p(99.0000) =      0.847 us/op
     p(99.9000) =      4.912 us/op
     p(99.9900) =     15.247 us/op
     p(99.9990) =     54.239 us/op
     p(99.9999) =    129.262 us/op
    p(100.0000) =    518.656 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 92.75% complete, ETA 00:36:31
# Fork: 1 of 1
# Warmup Iteration   1: 7002.330 ±(99.9%) 37.726 us/op
# Warmup Iteration   2: 6958.183 ±(99.9%) 5.538 us/op
# Warmup Iteration   3: 6958.514 ±(99.9%) 6.723 us/op
# Warmup Iteration   4: 6943.903 ±(99.9%) 3.206 us/op
# Warmup Iteration   5: 6951.368 ±(99.9%) 5.461 us/op
Iteration   1: 6943.323 ±(99.9%) 2.215 us/op
                 reduceYoungObjects·p0.00:   6791.168 us/op
                 reduceYoungObjects·p0.50:   6938.624 us/op
                 reduceYoungObjects·p0.90:   6963.200 us/op
                 reduceYoungObjects·p0.95:   6979.584 us/op
                 reduceYoungObjects·p0.99:   7033.569 us/op
                 reduceYoungObjects·p0.999:  7161.741 us/op
                 reduceYoungObjects·p0.9999: 7176.192 us/op
                 reduceYoungObjects·p1.00:   7176.192 us/op

Iteration   2: 6947.875 ±(99.9%) 2.741 us/op
                 reduceYoungObjects·p0.00:   6799.360 us/op
                 reduceYoungObjects·p0.50:   6946.816 us/op
                 reduceYoungObjects·p0.90:   6971.392 us/op
                 reduceYoungObjects·p0.95:   6987.776 us/op
                 reduceYoungObjects·p0.99:   7061.504 us/op
                 reduceYoungObjects·p0.999:  7332.168 us/op
                 reduceYoungObjects·p0.9999: 7454.720 us/op
                 reduceYoungObjects·p1.00:   7454.720 us/op

Iteration   3: 6947.328 ±(99.9%) 2.749 us/op
                 reduceYoungObjects·p0.00:   6782.976 us/op
                 reduceYoungObjects·p0.50:   6946.816 us/op
                 reduceYoungObjects·p0.90:   6971.392 us/op
                 reduceYoungObjects·p0.95:   6987.776 us/op
                 reduceYoungObjects·p0.99:   7074.611 us/op
                 reduceYoungObjects·p0.999:  7170.949 us/op
                 reduceYoungObjects·p0.9999: 7192.576 us/op
                 reduceYoungObjects·p1.00:   7192.576 us/op

Iteration   4: 6953.863 ±(99.9%) 5.016 us/op
                 reduceYoungObjects·p0.00:   6807.552 us/op
                 reduceYoungObjects·p0.50:   6946.816 us/op
                 reduceYoungObjects·p0.90:   6979.584 us/op
                 reduceYoungObjects·p0.95:   6995.968 us/op
                 reduceYoungObjects·p0.99:   7259.914 us/op
                 reduceYoungObjects·p0.999:  7849.140 us/op
                 reduceYoungObjects·p0.9999: 7946.240 us/op
                 reduceYoungObjects·p1.00:   7946.240 us/op

Iteration   5: 6947.374 ±(99.9%) 3.029 us/op
                 reduceYoungObjects·p0.00:   6799.360 us/op
                 reduceYoungObjects·p0.50:   6946.816 us/op
                 reduceYoungObjects·p0.90:   6971.392 us/op
                 reduceYoungObjects·p0.95:   6987.776 us/op
                 reduceYoungObjects·p0.99:   7094.272 us/op
                 reduceYoungObjects·p0.999:  7325.942 us/op
                 reduceYoungObjects·p0.9999: 7372.800 us/op
                 reduceYoungObjects·p1.00:   7372.800 us/op

Iteration   6: 6951.624 ±(99.9%) 2.953 us/op
                 reduceYoungObjects·p0.00:   6799.360 us/op
                 reduceYoungObjects·p0.50:   6946.816 us/op
                 reduceYoungObjects·p0.90:   6987.776 us/op
                 reduceYoungObjects·p0.95:   7004.160 us/op
                 reduceYoungObjects·p0.99:   7077.888 us/op
                 reduceYoungObjects·p0.999:  7192.977 us/op
                 reduceYoungObjects·p0.9999: 7225.344 us/op
                 reduceYoungObjects·p1.00:   7225.344 us/op

Iteration   7: 6954.091 ±(99.9%) 3.864 us/op
                 reduceYoungObjects·p0.00:   6799.360 us/op
                 reduceYoungObjects·p0.50:   6946.816 us/op
                 reduceYoungObjects·p0.90:   6987.776 us/op
                 reduceYoungObjects·p0.95:   7004.160 us/op
                 reduceYoungObjects·p0.99:   7094.272 us/op
                 reduceYoungObjects·p0.999:  7692.706 us/op
                 reduceYoungObjects·p0.9999: 8019.968 us/op
                 reduceYoungObjects·p1.00:   8019.968 us/op

Iteration   8: 6953.834 ±(99.9%) 2.844 us/op
                 reduceYoungObjects·p0.00:   6807.552 us/op
                 reduceYoungObjects·p0.50:   6946.816 us/op
                 reduceYoungObjects·p0.90:   6979.584 us/op
                 reduceYoungObjects·p0.95:   7004.160 us/op
                 reduceYoungObjects·p0.99:   7094.272 us/op
                 reduceYoungObjects·p0.999:  7172.596 us/op
                 reduceYoungObjects·p0.9999: 7176.192 us/op
                 reduceYoungObjects·p1.00:   7176.192 us/op

Iteration   9: 6952.724 ±(99.9%) 3.035 us/op
                 reduceYoungObjects·p0.00:   6799.360 us/op
                 reduceYoungObjects·p0.50:   6946.816 us/op
                 reduceYoungObjects·p0.90:   6987.776 us/op
                 reduceYoungObjects·p0.95:   7004.160 us/op
                 reduceYoungObjects·p0.99:   7086.080 us/op
                 reduceYoungObjects·p0.999:  7284.490 us/op
                 reduceYoungObjects·p0.9999: 7356.416 us/op
                 reduceYoungObjects·p1.00:   7356.416 us/op

Iteration  10: 6949.577 ±(99.9%) 2.503 us/op
                 reduceYoungObjects·p0.00:   6791.168 us/op
                 reduceYoungObjects·p0.50:   6946.816 us/op
                 reduceYoungObjects·p0.90:   6979.584 us/op
                 reduceYoungObjects·p0.95:   6987.776 us/op
                 reduceYoungObjects·p0.99:   7058.227 us/op
                 reduceYoungObjects·p0.999:  7201.096 us/op
                 reduceYoungObjects·p0.9999: 7233.536 us/op
                 reduceYoungObjects·p1.00:   7233.536 us/op

Iteration  11: 6952.855 ±(99.9%) 4.458 us/op
                 reduceYoungObjects·p0.00:   6799.360 us/op
                 reduceYoungObjects·p0.50:   6946.816 us/op
                 reduceYoungObjects·p0.90:   6979.584 us/op
                 reduceYoungObjects·p0.95:   7004.160 us/op
                 reduceYoungObjects·p0.99:   7135.232 us/op
                 reduceYoungObjects·p0.999:  7490.486 us/op
                 reduceYoungObjects·p0.9999: 7512.064 us/op
                 reduceYoungObjects·p1.00:   7512.064 us/op

Iteration  12: 6955.989 ±(99.9%) 10.121 us/op
                 reduceYoungObjects·p0.00:   6815.744 us/op
                 reduceYoungObjects·p0.50:   6946.816 us/op
                 reduceYoungObjects·p0.90:   6971.392 us/op
                 reduceYoungObjects·p0.95:   6987.776 us/op
                 reduceYoungObjects·p0.99:   7096.238 us/op
                 reduceYoungObjects·p0.999:  8933.343 us/op
                 reduceYoungObjects·p0.9999: 8962.048 us/op
                 reduceYoungObjects·p1.00:   8962.048 us/op

Iteration  13: 6954.791 ±(99.9%) 5.065 us/op
                 reduceYoungObjects·p0.00:   6799.360 us/op
                 reduceYoungObjects·p0.50:   6946.816 us/op
                 reduceYoungObjects·p0.90:   6979.584 us/op
                 reduceYoungObjects·p0.95:   6995.968 us/op
                 reduceYoungObjects·p0.99:   7115.735 us/op
                 reduceYoungObjects·p0.999:  8066.548 us/op
                 reduceYoungObjects·p0.9999: 8077.312 us/op
                 reduceYoungObjects·p1.00:   8077.312 us/op

Iteration  14: 6963.679 ±(99.9%) 12.251 us/op
                 reduceYoungObjects·p0.00:   6807.552 us/op
                 reduceYoungObjects·p0.50:   6946.816 us/op
                 reduceYoungObjects·p0.90:   6979.584 us/op
                 reduceYoungObjects·p0.95:   6995.968 us/op
                 reduceYoungObjects·p0.99:   7148.585 us/op
                 reduceYoungObjects·p0.999:  8949.793 us/op
                 reduceYoungObjects·p0.9999: 8978.432 us/op
                 reduceYoungObjects·p1.00:   8978.432 us/op

Iteration  15: 6958.212 ±(99.9%) 6.605 us/op
                 reduceYoungObjects·p0.00:   6807.552 us/op
                 reduceYoungObjects·p0.50:   6946.816 us/op
                 reduceYoungObjects·p0.90:   6987.776 us/op
                 reduceYoungObjects·p0.95:   7004.979 us/op
                 reduceYoungObjects·p0.99:   7123.927 us/op
                 reduceYoungObjects·p0.999:  8151.515 us/op
                 reduceYoungObjects·p0.9999: 8183.808 us/op
                 reduceYoungObjects·p1.00:   8183.808 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  N = 21571
  mean =   6952.473 ±(99.9%) 1.403 us/op

  Histogram, us/op:
    [6000.000, 6250.000) = 0 
    [6250.000, 6500.000) = 0 
    [6500.000, 6750.000) = 0 
    [6750.000, 7000.000) = 20647 
    [7000.000, 7250.000) = 862 
    [7250.000, 7500.000) = 30 
    [7500.000, 7750.000) = 4 
    [7750.000, 8000.000) = 7 
    [8000.000, 8250.000) = 9 
    [8250.000, 8500.000) = 1 
    [8500.000, 8750.000) = 5 

  Percentiles, us/op:
      p(0.0000) =   6782.976 us/op
     p(50.0000) =   6946.816 us/op
     p(90.0000) =   6979.584 us/op
     p(95.0000) =   6995.968 us/op
     p(99.0000) =   7094.272 us/op
     p(99.9000) =   7977.796 us/op
     p(99.9900) =   8954.321 us/op
     p(99.9990) =   8978.432 us/op
     p(99.9999) =   8978.432 us/op
    p(100.0000) =   8978.432 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 93.48% complete, ETA 00:32:52
# Fork: 1 of 1
# Warmup Iteration   1: 32413.703 ±(99.9%) 383.349 us/op
# Warmup Iteration   2: 30804.239 ±(99.9%) 176.743 us/op
# Warmup Iteration   3: 32787.124 ±(99.9%) 80.096 us/op
# Warmup Iteration   4: 30292.725 ±(99.9%) 84.055 us/op
# Warmup Iteration   5: 33272.910 ±(99.9%) 63.955 us/op
Iteration   1: 34221.912 ±(99.9%) 59.349 us/op
                 redundantCode·p0.00:   34013.184 us/op
                 redundantCode·p0.50:   34209.792 us/op
                 redundantCode·p0.90:   34340.864 us/op
                 redundantCode·p0.95:   34471.936 us/op
                 redundantCode·p0.99:   34734.080 us/op
                 redundantCode·p0.999:  38928.384 us/op
                 redundantCode·p0.9999: 38928.384 us/op
                 redundantCode·p1.00:   38928.384 us/op

Iteration   2: 33590.389 ±(99.9%) 66.843 us/op
                 redundantCode·p0.00:   33226.752 us/op
                 redundantCode·p0.50:   33554.432 us/op
                 redundantCode·p0.90:   33751.040 us/op
                 redundantCode·p0.95:   33816.576 us/op
                 redundantCode·p0.99:   34078.720 us/op
                 redundantCode·p0.999:  39124.992 us/op
                 redundantCode·p0.9999: 39124.992 us/op
                 redundantCode·p1.00:   39124.992 us/op

Iteration   3: 30056.522 ±(99.9%) 58.201 us/op
                 redundantCode·p0.00:   29720.576 us/op
                 redundantCode·p0.50:   30015.488 us/op
                 redundantCode·p0.90:   30212.096 us/op
                 redundantCode·p0.95:   30343.168 us/op
                 redundantCode·p0.99:   30626.939 us/op
                 redundantCode·p0.999:  35192.832 us/op
                 redundantCode·p0.9999: 35192.832 us/op
                 redundantCode·p1.00:   35192.832 us/op

Iteration   4: 31575.948 ±(99.9%) 66.294 us/op
                 redundantCode·p0.00:   31326.208 us/op
                 redundantCode·p0.50:   31522.816 us/op
                 redundantCode·p0.90:   31784.960 us/op
                 redundantCode·p0.95:   31952.077 us/op
                 redundantCode·p0.99:   32309.248 us/op
                 redundantCode·p0.999:  36765.696 us/op
                 redundantCode·p0.9999: 36765.696 us/op
                 redundantCode·p1.00:   36765.696 us/op

Iteration   5: 30629.863 ±(99.9%) 71.234 us/op
                 redundantCode·p0.00:   30343.168 us/op
                 redundantCode·p0.50:   30572.544 us/op
                 redundantCode·p0.90:   30801.920 us/op
                 redundantCode·p0.95:   30867.456 us/op
                 redundantCode·p0.99:   31964.529 us/op
                 redundantCode·p0.999:  36044.800 us/op
                 redundantCode·p0.9999: 36044.800 us/op
                 redundantCode·p1.00:   36044.800 us/op

Iteration   6: 34687.886 ±(99.9%) 107.159 us/op
                 redundantCode·p0.00:   34209.792 us/op
                 redundantCode·p0.50:   34668.544 us/op
                 redundantCode·p0.90:   34799.616 us/op
                 redundantCode·p0.95:   34901.197 us/op
                 redundantCode·p0.99:   35127.296 us/op
                 redundantCode·p0.999:  43712.512 us/op
                 redundantCode·p0.9999: 43712.512 us/op
                 redundantCode·p1.00:   43712.512 us/op

Iteration   7: 32390.691 ±(99.9%) 143.740 us/op
                 redundantCode·p0.00:   32112.640 us/op
                 redundantCode·p0.50:   32342.016 us/op
                 redundantCode·p0.90:   32505.856 us/op
                 redundantCode·p0.95:   32571.392 us/op
                 redundantCode·p0.99:   32830.259 us/op
                 redundantCode·p0.999:  45547.520 us/op
                 redundantCode·p0.9999: 45547.520 us/op
                 redundantCode·p1.00:   45547.520 us/op

Iteration   8: 34168.189 ±(99.9%) 71.802 us/op
                 redundantCode·p0.00:   33947.648 us/op
                 redundantCode·p0.50:   34144.256 us/op
                 redundantCode·p0.90:   34340.864 us/op
                 redundantCode·p0.95:   34406.400 us/op
                 redundantCode·p0.99:   34668.544 us/op
                 redundantCode·p0.999:  40108.032 us/op
                 redundantCode·p0.9999: 40108.032 us/op
                 redundantCode·p1.00:   40108.032 us/op

Iteration   9: 37027.112 ±(99.9%) 68.245 us/op
                 redundantCode·p0.00:   36765.696 us/op
                 redundantCode·p0.50:   36995.072 us/op
                 redundantCode·p0.90:   37224.448 us/op
                 redundantCode·p0.95:   37355.520 us/op
                 redundantCode·p0.99:   37421.056 us/op
                 redundantCode·p0.999:  42008.576 us/op
                 redundantCode·p0.9999: 42008.576 us/op
                 redundantCode·p1.00:   42008.576 us/op

Iteration  10: 34223.034 ±(99.9%) 69.883 us/op
                 redundantCode·p0.00:   33882.112 us/op
                 redundantCode·p0.50:   34209.792 us/op
                 redundantCode·p0.90:   34406.400 us/op
                 redundantCode·p0.95:   34471.936 us/op
                 redundantCode·p0.99:   34738.668 us/op
                 redundantCode·p0.999:  39845.888 us/op
                 redundantCode·p0.9999: 39845.888 us/op
                 redundantCode·p1.00:   39845.888 us/op

Iteration  11: 33192.356 ±(99.9%) 140.895 us/op
                 redundantCode·p0.00:   32866.304 us/op
                 redundantCode·p0.50:   33095.680 us/op
                 redundantCode·p0.90:   33292.288 us/op
                 redundantCode·p0.95:   33456.128 us/op
                 redundantCode·p0.99:   35520.512 us/op
                 redundantCode·p0.999:  44761.088 us/op
                 redundantCode·p0.9999: 44761.088 us/op
                 redundantCode·p1.00:   44761.088 us/op

Iteration  12: 33754.029 ±(99.9%) 69.232 us/op
                 redundantCode·p0.00:   33456.128 us/op
                 redundantCode·p0.50:   33685.504 us/op
                 redundantCode·p0.90:   33882.112 us/op
                 redundantCode·p0.95:   34013.184 us/op
                 redundantCode·p0.99:   35063.726 us/op
                 redundantCode·p0.999:  38993.920 us/op
                 redundantCode·p0.9999: 38993.920 us/op
                 redundantCode·p1.00:   38993.920 us/op

Iteration  13: 30811.498 ±(99.9%) 59.402 us/op
                 redundantCode·p0.00:   30539.776 us/op
                 redundantCode·p0.50:   30769.152 us/op
                 redundantCode·p0.90:   30932.992 us/op
                 redundantCode·p0.95:   31064.064 us/op
                 redundantCode·p0.99:   31645.368 us/op
                 redundantCode·p0.999:  35979.264 us/op
                 redundantCode·p0.9999: 35979.264 us/op
                 redundantCode·p1.00:   35979.264 us/op

Iteration  14: 34165.729 ±(99.9%) 62.093 us/op
                 redundantCode·p0.00:   33882.112 us/op
                 redundantCode·p0.50:   34144.256 us/op
                 redundantCode·p0.90:   34340.864 us/op
                 redundantCode·p0.95:   34406.400 us/op
                 redundantCode·p0.99:   35004.088 us/op
                 redundantCode·p0.999:  38797.312 us/op
                 redundantCode·p0.9999: 38797.312 us/op
                 redundantCode·p1.00:   38797.312 us/op

Iteration  15: 30230.509 ±(99.9%) 59.539 us/op
                 redundantCode·p0.00:   29982.720 us/op
                 redundantCode·p0.50:   30179.328 us/op
                 redundantCode·p0.90:   30375.936 us/op
                 redundantCode·p0.95:   30474.240 us/op
                 redundantCode·p0.99:   31305.236 us/op
                 redundantCode·p0.999:  35258.368 us/op
                 redundantCode·p0.9999: 35258.368 us/op
                 redundantCode·p1.00:   35258.368 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  N = 4566
  mean =  32869.806 ±(99.9%) 95.430 us/op

  Histogram, us/op:
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 0 
    [27500.000, 30000.000) = 152 
    [30000.000, 32500.000) = 1751 
    [32500.000, 35000.000) = 2367 
    [35000.000, 37500.000) = 286 
    [37500.000, 40000.000) = 5 
    [40000.000, 42500.000) = 2 
    [42500.000, 45000.000) = 2 
    [45000.000, 47500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  29720.576 us/op
     p(50.0000) =  33488.896 us/op
     p(90.0000) =  34603.008 us/op
     p(95.0000) =  36896.768 us/op
     p(99.0000) =  37158.912 us/op
     p(99.9000) =  40930.968 us/op
     p(99.9900) =  45547.520 us/op
     p(99.9990) =  45547.520 us/op
     p(99.9999) =  45547.520 us/op
    p(100.0000) =  45547.520 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 94.20% complete, ETA 00:29:13
# Fork: 1 of 1
# Warmup Iteration   1: 35107.635 ±(99.9%) 1330.758 us/op
# Warmup Iteration   2: 34913.676 ±(99.9%) 1275.082 us/op
# Warmup Iteration   3: 34898.377 ±(99.9%) 1268.676 us/op
# Warmup Iteration   4: 34950.624 ±(99.9%) 1293.754 us/op
# Warmup Iteration   5: 34809.628 ±(99.9%) 1213.117 us/op
Iteration   1: 34812.018 ±(99.9%) 1178.095 us/op
                 split·p0.00:   33325.056 us/op
                 split·p0.50:   33521.664 us/op
                 split·p0.90:   33685.504 us/op
                 split·p0.95:   43869.798 us/op
                 split·p0.99:   72785.592 us/op
                 split·p0.999:  75366.400 us/op
                 split·p0.9999: 75366.400 us/op
                 split·p1.00:   75366.400 us/op

Iteration   2: 34796.316 ±(99.9%) 1127.341 us/op
                 split·p0.00:   33357.824 us/op
                 split·p0.50:   33554.432 us/op
                 split·p0.90:   34078.720 us/op
                 split·p0.95:   38269.747 us/op
                 split·p0.99:   73589.064 us/op
                 split·p0.999:  76152.832 us/op
                 split·p0.9999: 76152.832 us/op
                 split·p1.00:   76152.832 us/op

Iteration   3: 35046.636 ±(99.9%) 1362.692 us/op
                 split·p0.00:   33390.592 us/op
                 split·p0.50:   33554.432 us/op
                 split·p0.90:   33751.040 us/op
                 split·p0.95:   41756.262 us/op
                 split·p0.99:   74903.716 us/op
                 split·p0.999:  90177.536 us/op
                 split·p0.9999: 90177.536 us/op
                 split·p1.00:   90177.536 us/op

Iteration   4: 34860.471 ±(99.9%) 1195.655 us/op
                 split·p0.00:   33292.288 us/op
                 split·p0.50:   33554.432 us/op
                 split·p0.90:   34026.291 us/op
                 split·p0.95:   42349.363 us/op
                 split·p0.99:   73893.151 us/op
                 split·p0.999:  78118.912 us/op
                 split·p0.9999: 78118.912 us/op
                 split·p1.00:   78118.912 us/op

Iteration   5: 35016.045 ±(99.9%) 1324.415 us/op
                 split·p0.00:   33325.056 us/op
                 split·p0.50:   33521.664 us/op
                 split·p0.90:   33751.040 us/op
                 split·p0.95:   43964.826 us/op
                 split·p0.99:   75810.734 us/op
                 split·p0.999:  82575.360 us/op
                 split·p0.9999: 82575.360 us/op
                 split·p1.00:   82575.360 us/op

Iteration   6: 34861.156 ±(99.9%) 1188.363 us/op
                 split·p0.00:   33357.824 us/op
                 split·p0.50:   33554.432 us/op
                 split·p0.90:   33751.040 us/op
                 split·p0.95:   43646.976 us/op
                 split·p0.99:   67785.196 us/op
                 split·p0.999:  75890.688 us/op
                 split·p0.9999: 75890.688 us/op
                 split·p1.00:   75890.688 us/op

Iteration   7: 34822.793 ±(99.9%) 1196.111 us/op
                 split·p0.00:   33357.824 us/op
                 split·p0.50:   33521.664 us/op
                 split·p0.90:   33685.504 us/op
                 split·p0.95:   42598.400 us/op
                 split·p0.99:   72414.659 us/op
                 split·p0.999:  77201.408 us/op
                 split·p0.9999: 77201.408 us/op
                 split·p1.00:   77201.408 us/op

Iteration   8: 34750.123 ±(99.9%) 1145.604 us/op
                 split·p0.00:   33325.056 us/op
                 split·p0.50:   33505.280 us/op
                 split·p0.90:   33685.504 us/op
                 split·p0.95:   41536.717 us/op
                 split·p0.99:   69422.285 us/op
                 split·p0.999:  75628.544 us/op
                 split·p0.9999: 75628.544 us/op
                 split·p1.00:   75628.544 us/op

Iteration   9: 34770.944 ±(99.9%) 1171.579 us/op
                 split·p0.00:   33357.824 us/op
                 split·p0.50:   33521.664 us/op
                 split·p0.90:   33751.040 us/op
                 split·p0.95:   37752.013 us/op
                 split·p0.99:   69229.609 us/op
                 split·p0.999:  74448.896 us/op
                 split·p0.9999: 74448.896 us/op
                 split·p1.00:   74448.896 us/op

Iteration  10: 35008.483 ±(99.9%) 1333.577 us/op
                 split·p0.00:   33325.056 us/op
                 split·p0.50:   33538.048 us/op
                 split·p0.90:   33882.112 us/op
                 split·p0.95:   43148.902 us/op
                 split·p0.99:   77439.959 us/op
                 split·p0.999:  81264.640 us/op
                 split·p0.9999: 81264.640 us/op
                 split·p1.00:   81264.640 us/op

Iteration  11: 34758.997 ±(99.9%) 1125.052 us/op
                 split·p0.00:   33325.056 us/op
                 split·p0.50:   33521.664 us/op
                 split·p0.90:   33823.130 us/op
                 split·p0.95:   41074.688 us/op
                 split·p0.99:   70034.391 us/op
                 split·p0.999:  74448.896 us/op
                 split·p0.9999: 74448.896 us/op
                 split·p1.00:   74448.896 us/op

Iteration  12: 34784.370 ±(99.9%) 1144.974 us/op
                 split·p0.00:   33390.592 us/op
                 split·p0.50:   33521.664 us/op
                 split·p0.90:   33757.594 us/op
                 split·p0.95:   43027.661 us/op
                 split·p0.99:   70383.043 us/op
                 split·p0.999:  78643.200 us/op
                 split·p0.9999: 78643.200 us/op
                 split·p1.00:   78643.200 us/op

Iteration  13: 35384.461 ±(99.9%) 1580.278 us/op
                 split·p0.00:   33390.592 us/op
                 split·p0.50:   33554.432 us/op
                 split·p0.90:   33947.648 us/op
                 split·p0.95:   51354.010 us/op
                 split·p0.99:   80394.322 us/op
                 split·p0.999:  87818.240 us/op
                 split·p0.9999: 87818.240 us/op
                 split·p1.00:   87818.240 us/op

Iteration  14: 35264.368 ±(99.9%) 1474.576 us/op
                 split·p0.00:   33325.056 us/op
                 split·p0.50:   33554.432 us/op
                 split·p0.90:   34144.256 us/op
                 split·p0.95:   50118.656 us/op
                 split·p0.99:   75969.331 us/op
                 split·p0.999:  82051.072 us/op
                 split·p0.9999: 82051.072 us/op
                 split·p1.00:   82051.072 us/op

Iteration  15: 34928.176 ±(99.9%) 1329.742 us/op
                 split·p0.00:   33325.056 us/op
                 split·p0.50:   33521.664 us/op
                 split·p0.90:   33698.611 us/op
                 split·p0.95:   41392.538 us/op
                 split·p0.99:   76871.107 us/op
                 split·p0.999:  86245.376 us/op
                 split·p0.9999: 86245.376 us/op
                 split·p1.00:   86245.376 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  N = 4301
  mean =  34923.420 ±(99.9%) 322.844 us/op

  Histogram, us/op:
    [ 30000.000,  35000.000) = 4059 
    [ 35000.000,  40000.000) = 20 
    [ 40000.000,  45000.000) = 33 
    [ 45000.000,  50000.000) = 25 
    [ 50000.000,  55000.000) = 36 
    [ 55000.000,  60000.000) = 25 
    [ 60000.000,  65000.000) = 24 
    [ 65000.000,  70000.000) = 19 
    [ 70000.000,  75000.000) = 29 
    [ 75000.000,  80000.000) = 23 
    [ 80000.000,  85000.000) = 5 
    [ 85000.000,  90000.000) = 2 
    [ 90000.000,  95000.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  33292.288 us/op
     p(50.0000) =  33521.664 us/op
     p(90.0000) =  33816.576 us/op
     p(95.0000) =  41674.342 us/op
     p(99.0000) =  73531.392 us/op
     p(99.9000) =  82666.848 us/op
     p(99.9900) =  90177.536 us/op
     p(99.9990) =  90177.536 us/op
     p(99.9999) =  90177.536 us/op
    p(100.0000) =  90177.536 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 94.92% complete, ETA 00:25:34
# Fork: 1 of 1
# Warmup Iteration   1: 25236.077 ±(99.9%) 1171.395 us/op
# Warmup Iteration   2: 26460.507 ±(99.9%) 996.010 us/op
# Warmup Iteration   3: 27229.047 ±(99.9%) 1376.599 us/op
# Warmup Iteration   4: 26649.035 ±(99.9%) 1049.029 us/op
# Warmup Iteration   5: 26427.608 ±(99.9%) 974.112 us/op
Iteration   1: 27082.885 ±(99.9%) 1295.231 us/op
                 mapToPair·p0.00:   24543.232 us/op
                 mapToPair·p0.50:   24772.608 us/op
                 mapToPair·p0.90:   29786.112 us/op
                 mapToPair·p0.95:   50397.184 us/op
                 mapToPair·p0.99:   59539.456 us/op
                 mapToPair·p0.999:  68943.872 us/op
                 mapToPair·p0.9999: 68943.872 us/op
                 mapToPair·p1.00:   68943.872 us/op

Iteration   2: 26370.910 ±(99.9%) 937.971 us/op
                 mapToPair·p0.00:   24576.000 us/op
                 mapToPair·p0.50:   24772.608 us/op
                 mapToPair·p0.90:   27734.835 us/op
                 mapToPair·p0.95:   36821.402 us/op
                 mapToPair·p0.99:   53456.404 us/op
                 mapToPair·p0.999:  60227.584 us/op
                 mapToPair·p0.9999: 60227.584 us/op
                 mapToPair·p1.00:   60227.584 us/op

Iteration   3: 26479.665 ±(99.9%) 985.468 us/op
                 mapToPair·p0.00:   24576.000 us/op
                 mapToPair·p0.50:   24805.376 us/op
                 mapToPair·p0.90:   26945.126 us/op
                 mapToPair·p0.95:   41517.056 us/op
                 mapToPair·p0.99:   54953.247 us/op
                 mapToPair·p0.999:  59244.544 us/op
                 mapToPair·p0.9999: 59244.544 us/op
                 mapToPair·p1.00:   59244.544 us/op

Iteration   4: 26564.418 ±(99.9%) 1048.372 us/op
                 mapToPair·p0.00:   24543.232 us/op
                 mapToPair·p0.50:   24805.376 us/op
                 mapToPair·p0.90:   26876.314 us/op
                 mapToPair·p0.95:   42677.043 us/op
                 mapToPair·p0.99:   53207.368 us/op
                 mapToPair·p0.999:  59899.904 us/op
                 mapToPair·p0.9999: 59899.904 us/op
                 mapToPair·p1.00:   59899.904 us/op

Iteration   5: 26905.259 ±(99.9%) 1247.736 us/op
                 mapToPair·p0.00:   24576.000 us/op
                 mapToPair·p0.50:   24772.608 us/op
                 mapToPair·p0.90:   26506.035 us/op
                 mapToPair·p0.95:   49538.662 us/op
                 mapToPair·p0.99:   61249.290 us/op
                 mapToPair·p0.999:  63700.992 us/op
                 mapToPair·p0.9999: 63700.992 us/op
                 mapToPair·p1.00:   63700.992 us/op

Iteration   6: 26555.639 ±(99.9%) 1035.181 us/op
                 mapToPair·p0.00:   24576.000 us/op
                 mapToPair·p0.50:   24772.608 us/op
                 mapToPair·p0.90:   27453.030 us/op
                 mapToPair·p0.95:   42382.131 us/op
                 mapToPair·p0.99:   56321.638 us/op
                 mapToPair·p0.999:  64749.568 us/op
                 mapToPair·p0.9999: 64749.568 us/op
                 mapToPair·p1.00:   64749.568 us/op

Iteration   7: 26896.714 ±(99.9%) 1217.854 us/op
                 mapToPair·p0.00:   24576.000 us/op
                 mapToPair·p0.50:   24838.144 us/op
                 mapToPair·p0.90:   27600.486 us/op
                 mapToPair·p0.95:   44669.338 us/op
                 mapToPair·p0.99:   61571.727 us/op
                 mapToPair·p0.999:  67371.008 us/op
                 mapToPair·p0.9999: 67371.008 us/op
                 mapToPair·p1.00:   67371.008 us/op

Iteration   8: 26666.773 ±(99.9%) 1119.134 us/op
                 mapToPair·p0.00:   24543.232 us/op
                 mapToPair·p0.50:   24739.840 us/op
                 mapToPair·p0.90:   27708.621 us/op
                 mapToPair·p0.95:   41261.466 us/op
                 mapToPair·p0.99:   57763.430 us/op
                 mapToPair·p0.999:  67371.008 us/op
                 mapToPair·p0.9999: 67371.008 us/op
                 mapToPair·p1.00:   67371.008 us/op

Iteration   9: 26512.702 ±(99.9%) 1044.101 us/op
                 mapToPair·p0.00:   24543.232 us/op
                 mapToPair·p0.50:   24739.840 us/op
                 mapToPair·p0.90:   27826.586 us/op
                 mapToPair·p0.95:   38332.006 us/op
                 mapToPair·p0.99:   55594.189 us/op
                 mapToPair·p0.999:  62980.096 us/op
                 mapToPair·p0.9999: 62980.096 us/op
                 mapToPair·p1.00:   62980.096 us/op

Iteration  10: 24786.153 ±(99.9%) 971.284 us/op
                 mapToPair·p0.00:   22675.456 us/op
                 mapToPair·p0.50:   22904.832 us/op
                 mapToPair·p0.90:   25837.568 us/op
                 mapToPair·p0.95:   40239.104 us/op
                 mapToPair·p0.99:   52337.050 us/op
                 mapToPair·p0.999:  66322.432 us/op
                 mapToPair·p0.9999: 66322.432 us/op
                 mapToPair·p1.00:   66322.432 us/op

Iteration  11: 24959.819 ±(99.9%) 1106.399 us/op
                 mapToPair·p0.00:   22708.224 us/op
                 mapToPair·p0.50:   22904.832 us/op
                 mapToPair·p0.90:   25814.630 us/op
                 mapToPair·p0.95:   43299.635 us/op
                 mapToPair·p0.99:   55109.222 us/op
                 mapToPair·p0.999:  66977.792 us/op
                 mapToPair·p0.9999: 66977.792 us/op
                 mapToPair·p1.00:   66977.792 us/op

Iteration  12: 24976.979 ±(99.9%) 1108.060 us/op
                 mapToPair·p0.00:   22675.456 us/op
                 mapToPair·p0.50:   22904.832 us/op
                 mapToPair·p0.90:   26863.206 us/op
                 mapToPair·p0.95:   43017.830 us/op
                 mapToPair·p0.99:   56343.921 us/op
                 mapToPair·p0.999:  59441.152 us/op
                 mapToPair·p0.9999: 59441.152 us/op
                 mapToPair·p1.00:   59441.152 us/op

Iteration  13: 24723.940 ±(99.9%) 967.514 us/op
                 mapToPair·p0.00:   22740.992 us/op
                 mapToPair·p0.50:   22937.600 us/op
                 mapToPair·p0.90:   25732.710 us/op
                 mapToPair·p0.95:   40435.712 us/op
                 mapToPair·p0.99:   52344.914 us/op
                 mapToPair·p0.999:  58261.504 us/op
                 mapToPair·p0.9999: 58261.504 us/op
                 mapToPair·p1.00:   58261.504 us/op

Iteration  14: 24473.450 ±(99.9%) 884.773 us/op
                 mapToPair·p0.00:   22708.224 us/op
                 mapToPair·p0.50:   22904.832 us/op
                 mapToPair·p0.90:   25624.576 us/op
                 mapToPair·p0.95:   38043.648 us/op
                 mapToPair·p0.99:   51747.226 us/op
                 mapToPair·p0.999:  61472.768 us/op
                 mapToPair·p0.9999: 61472.768 us/op
                 mapToPair·p1.00:   61472.768 us/op

Iteration  15: 24811.459 ±(99.9%) 1020.460 us/op
                 mapToPair·p0.00:   22708.224 us/op
                 mapToPair·p0.50:   22937.600 us/op
                 mapToPair·p0.90:   25821.184 us/op
                 mapToPair·p0.95:   40976.384 us/op
                 mapToPair·p0.99:   56826.266 us/op
                 mapToPair·p0.999:  59637.760 us/op
                 mapToPair·p0.9999: 59637.760 us/op
                 mapToPair·p1.00:   59637.760 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  N = 5802
  mean =  25882.354 ±(99.9%) 276.411 us/op

  Histogram, us/op:
    [20000.000, 25000.000) = 4845 
    [25000.000, 30000.000) = 474 
    [30000.000, 35000.000) = 81 
    [35000.000, 40000.000) = 85 
    [40000.000, 45000.000) = 86 
    [45000.000, 50000.000) = 62 
    [50000.000, 55000.000) = 106 
    [55000.000, 60000.000) = 44 
    [60000.000, 65000.000) = 14 

  Percentiles, us/op:
      p(0.0000) =  22675.456 us/op
     p(50.0000) =  24707.072 us/op
     p(90.0000) =  26761.626 us/op
     p(95.0000) =  41943.040 us/op
     p(99.0000) =  55572.562 us/op
     p(99.9000) =  65059.422 us/op
     p(99.9900) =  68943.872 us/op
     p(99.9990) =  68943.872 us/op
     p(99.9999) =  68943.872 us/op
    p(100.0000) =  68943.872 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 95.65% complete, ETA 00:21:54
# Fork: 1 of 1
# Warmup Iteration   1: 14045.943 ±(99.9%) 196.406 us/op
# Warmup Iteration   2: 13961.021 ±(99.9%) 137.393 us/op
# Warmup Iteration   3: 13963.378 ±(99.9%) 124.899 us/op
# Warmup Iteration   4: 13966.674 ±(99.9%) 129.616 us/op
# Warmup Iteration   5: 13978.371 ±(99.9%) 155.902 us/op
Iteration   1: 13955.003 ±(99.9%) 120.647 us/op
                 plusOne·p0.00:   13598.720 us/op
                 plusOne·p0.50:   13795.328 us/op
                 plusOne·p0.90:   13964.083 us/op
                 plusOne·p0.95:   14483.456 us/op
                 plusOne·p0.99:   18832.097 us/op
                 plusOne·p0.999:  28377.088 us/op
                 plusOne·p0.9999: 28377.088 us/op
                 plusOne·p1.00:   28377.088 us/op

Iteration   2: 13948.154 ±(99.9%) 129.014 us/op
                 plusOne·p0.00:   13615.104 us/op
                 plusOne·p0.50:   13778.944 us/op
                 plusOne·p0.90:   13959.168 us/op
                 plusOne·p0.95:   14435.942 us/op
                 plusOne·p0.99:   20841.759 us/op
                 plusOne·p0.999:  27295.744 us/op
                 plusOne·p0.9999: 27295.744 us/op
                 plusOne·p1.00:   27295.744 us/op

Iteration   3: 14008.481 ±(99.9%) 178.930 us/op
                 plusOne·p0.00:   13582.336 us/op
                 plusOne·p0.50:   13795.328 us/op
                 plusOne·p0.90:   14008.320 us/op
                 plusOne·p0.95:   14508.032 us/op
                 plusOne·p0.99:   20093.338 us/op
                 plusOne·p0.999:  34734.080 us/op
                 plusOne·p0.9999: 34734.080 us/op
                 plusOne·p1.00:   34734.080 us/op

Iteration   4: 13933.793 ±(99.9%) 109.577 us/op
                 plusOne·p0.00:   13615.104 us/op
                 plusOne·p0.50:   13778.944 us/op
                 plusOne·p0.90:   13959.168 us/op
                 plusOne·p0.95:   14581.760 us/op
                 plusOne·p0.99:   18063.032 us/op
                 plusOne·p0.999:  24018.944 us/op
                 plusOne·p0.9999: 24018.944 us/op
                 plusOne·p1.00:   24018.944 us/op

Iteration   5: 13953.707 ±(99.9%) 146.433 us/op
                 plusOne·p0.00:   13615.104 us/op
                 plusOne·p0.50:   13778.944 us/op
                 plusOne·p0.90:   13959.168 us/op
                 plusOne·p0.95:   14127.923 us/op
                 plusOne·p0.99:   18756.403 us/op
                 plusOne·p0.999:  33423.360 us/op
                 plusOne·p0.9999: 33423.360 us/op
                 plusOne·p1.00:   33423.360 us/op

Iteration   6: 13902.747 ±(99.9%) 87.022 us/op
                 plusOne·p0.00:   13615.104 us/op
                 plusOne·p0.50:   13778.944 us/op
                 plusOne·p0.90:   13942.784 us/op
                 plusOne·p0.95:   14254.080 us/op
                 plusOne·p0.99:   17570.202 us/op
                 plusOne·p0.999:  23003.136 us/op
                 plusOne·p0.9999: 23003.136 us/op
                 plusOne·p1.00:   23003.136 us/op

Iteration   7: 13902.610 ±(99.9%) 100.792 us/op
                 plusOne·p0.00:   13598.720 us/op
                 plusOne·p0.50:   13778.944 us/op
                 plusOne·p0.90:   13959.168 us/op
                 plusOne·p0.95:   14221.312 us/op
                 plusOne·p0.99:   17983.078 us/op
                 plusOne·p0.999:  27820.032 us/op
                 plusOne·p0.9999: 27820.032 us/op
                 plusOne·p1.00:   27820.032 us/op

Iteration   8: 13963.516 ±(99.9%) 118.563 us/op
                 plusOne·p0.00:   13565.952 us/op
                 plusOne·p0.50:   13795.328 us/op
                 plusOne·p0.90:   14008.320 us/op
                 plusOne·p0.95:   14343.373 us/op
                 plusOne·p0.99:   20160.840 us/op
                 plusOne·p0.999:  25690.112 us/op
                 plusOne·p0.9999: 25690.112 us/op
                 plusOne·p1.00:   25690.112 us/op

Iteration   9: 13996.434 ±(99.9%) 97.793 us/op
                 plusOne·p0.00:   13615.104 us/op
                 plusOne·p0.50:   13844.480 us/op
                 plusOne·p0.90:   14114.816 us/op
                 plusOne·p0.95:   14602.240 us/op
                 plusOne·p0.99:   18340.250 us/op
                 plusOne·p0.999:  23560.192 us/op
                 plusOne·p0.9999: 23560.192 us/op
                 plusOne·p1.00:   23560.192 us/op

Iteration  10: 14020.591 ±(99.9%) 135.961 us/op
                 plusOne·p0.00:   13615.104 us/op
                 plusOne·p0.50:   13811.712 us/op
                 plusOne·p0.90:   14106.624 us/op
                 plusOne·p0.95:   14750.515 us/op
                 plusOne·p0.99:   19712.573 us/op
                 plusOne·p0.999:  32505.856 us/op
                 plusOne·p0.9999: 32505.856 us/op
                 plusOne·p1.00:   32505.856 us/op

Iteration  11: 14020.614 ±(99.9%) 158.477 us/op
                 plusOne·p0.00:   13598.720 us/op
                 plusOne·p0.50:   13811.712 us/op
                 plusOne·p0.90:   13991.936 us/op
                 plusOne·p0.95:   14483.456 us/op
                 plusOne·p0.99:   22033.859 us/op
                 plusOne·p0.999:  28704.768 us/op
                 plusOne·p0.9999: 28704.768 us/op
                 plusOne·p1.00:   28704.768 us/op

Iteration  12: 13925.328 ±(99.9%) 122.508 us/op
                 plusOne·p0.00:   13598.720 us/op
                 plusOne·p0.50:   13762.560 us/op
                 plusOne·p0.90:   13926.400 us/op
                 plusOne·p0.95:   14190.182 us/op
                 plusOne·p0.99:   17911.644 us/op
                 plusOne·p0.999:  29655.040 us/op
                 plusOne·p0.9999: 29655.040 us/op
                 plusOne·p1.00:   29655.040 us/op

Iteration  13: 13981.716 ±(99.9%) 175.954 us/op
                 plusOne·p0.00:   13598.720 us/op
                 plusOne·p0.50:   13762.560 us/op
                 plusOne·p0.90:   14008.320 us/op
                 plusOne·p0.95:   14450.688 us/op
                 plusOne·p0.99:   20430.193 us/op
                 plusOne·p0.999:  38928.384 us/op
                 plusOne·p0.9999: 38928.384 us/op
                 plusOne·p1.00:   38928.384 us/op

Iteration  14: 13922.749 ±(99.9%) 126.676 us/op
                 plusOne·p0.00:   13582.336 us/op
                 plusOne·p0.50:   13762.560 us/op
                 plusOne·p0.90:   13910.016 us/op
                 plusOne·p0.95:   14074.675 us/op
                 plusOne·p0.99:   18141.020 us/op
                 plusOne·p0.999:  26116.096 us/op
                 plusOne·p0.9999: 26116.096 us/op
                 plusOne·p1.00:   26116.096 us/op

Iteration  15: 13970.724 ±(99.9%) 190.338 us/op
                 plusOne·p0.00:   13565.952 us/op
                 plusOne·p0.50:   13762.560 us/op
                 plusOne·p0.90:   13926.400 us/op
                 plusOne·p0.95:   14095.155 us/op
                 plusOne·p0.99:   19676.201 us/op
                 plusOne·p0.999:  34996.224 us/op
                 plusOne·p0.9999: 34996.224 us/op
                 plusOne·p1.00:   34996.224 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  N = 10743
  mean =  13960.307 ±(99.9%) 35.108 us/op

  Histogram, us/op:
    [10000.000, 12500.000) = 0 
    [12500.000, 15000.000) = 10431 
    [15000.000, 17500.000) = 159 
    [17500.000, 20000.000) = 69 
    [20000.000, 22500.000) = 36 
    [22500.000, 25000.000) = 20 
    [25000.000, 27500.000) = 12 
    [27500.000, 30000.000) = 7 
    [30000.000, 32500.000) = 2 
    [32500.000, 35000.000) = 6 
    [35000.000, 37500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  13565.952 us/op
     p(50.0000) =  13778.944 us/op
     p(90.0000) =  13991.936 us/op
     p(95.0000) =  14417.920 us/op
     p(99.0000) =  18481.152 us/op
     p(99.9000) =  29094.314 us/op
     p(99.9900) =  38635.831 us/op
     p(99.9990) =  38928.384 us/op
     p(99.9999) =  38928.384 us/op
    p(100.0000) =  38928.384 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 96.37% complete, ETA 00:18:15
# Fork: 1 of 1
# Warmup Iteration   1: 33258.105 ±(99.9%) 934.763 us/op
# Warmup Iteration   2: 31364.728 ±(99.9%) 182.818 us/op
# Warmup Iteration   3: 31449.861 ±(99.9%) 198.935 us/op
# Warmup Iteration   4: 30549.566 ±(99.9%) 207.126 us/op
# Warmup Iteration   5: 31883.055 ±(99.9%) 340.537 us/op
Iteration   1: 31472.015 ±(99.9%) 220.470 us/op
                 sort·p0.00:   30998.528 us/op
                 sort·p0.50:   31260.672 us/op
                 sort·p0.90:   31555.584 us/op
                 sort·p0.95:   31722.701 us/op
                 sort·p0.99:   39637.484 us/op
                 sort·p0.999:  45023.232 us/op
                 sort·p0.9999: 45023.232 us/op
                 sort·p1.00:   45023.232 us/op

Iteration   2: 30895.471 ±(99.9%) 164.770 us/op
                 sort·p0.00:   30507.008 us/op
                 sort·p0.50:   30736.384 us/op
                 sort·p0.90:   30998.528 us/op
                 sort·p0.95:   31064.064 us/op
                 sort·p0.99:   36143.104 us/op
                 sort·p0.999:  42139.648 us/op
                 sort·p0.9999: 42139.648 us/op
                 sort·p1.00:   42139.648 us/op

Iteration   3: 30973.977 ±(99.9%) 129.581 us/op
                 sort·p0.00:   30539.776 us/op
                 sort·p0.50:   30834.688 us/op
                 sort·p0.90:   31162.368 us/op
                 sort·p0.95:   31358.976 us/op
                 sort·p0.99:   34985.738 us/op
                 sort·p0.999:  38273.024 us/op
                 sort·p0.9999: 38273.024 us/op
                 sort·p1.00:   38273.024 us/op

Iteration   4: 30695.876 ±(99.9%) 224.205 us/op
                 sort·p0.00:   30244.864 us/op
                 sort·p0.50:   30507.008 us/op
                 sort·p0.90:   30769.152 us/op
                 sort·p0.95:   30921.523 us/op
                 sort·p0.99:   35517.235 us/op
                 sort·p0.999:  48234.496 us/op
                 sort·p0.9999: 48234.496 us/op
                 sort·p1.00:   48234.496 us/op

Iteration   5: 31631.282 ±(99.9%) 240.316 us/op
                 sort·p0.00:   31227.904 us/op
                 sort·p0.50:   31457.280 us/op
                 sort·p0.90:   31653.888 us/op
                 sort·p0.95:   31757.107 us/op
                 sort·p0.99:   37322.097 us/op
                 sort·p0.999:  49676.288 us/op
                 sort·p0.9999: 49676.288 us/op
                 sort·p1.00:   49676.288 us/op

Iteration   6: 30296.399 ±(99.9%) 200.774 us/op
                 sort·p0.00:   29884.416 us/op
                 sort·p0.50:   30146.560 us/op
                 sort·p0.90:   30343.168 us/op
                 sort·p0.95:   30474.240 us/op
                 sort·p0.99:   38003.671 us/op
                 sort·p0.999:  42270.720 us/op
                 sort·p0.9999: 42270.720 us/op
                 sort·p1.00:   42270.720 us/op

Iteration   7: 31385.273 ±(99.9%) 144.388 us/op
                 sort·p0.00:   31064.064 us/op
                 sort·p0.50:   31260.672 us/op
                 sort·p0.90:   31457.280 us/op
                 sort·p0.95:   31686.656 us/op
                 sort·p0.99:   35520.512 us/op
                 sort·p0.999:  40239.104 us/op
                 sort·p0.9999: 40239.104 us/op
                 sort·p1.00:   40239.104 us/op

Iteration   8: 29819.465 ±(99.9%) 148.913 us/op
                 sort·p0.00:   29458.432 us/op
                 sort·p0.50:   29655.040 us/op
                 sort·p0.90:   29949.952 us/op
                 sort·p0.95:   30113.792 us/op
                 sort·p0.99:   34812.068 us/op
                 sort·p0.999:  38469.632 us/op
                 sort·p0.9999: 38469.632 us/op
                 sort·p1.00:   38469.632 us/op

Iteration   9: 30648.401 ±(99.9%) 202.767 us/op
                 sort·p0.00:   30212.096 us/op
                 sort·p0.50:   30474.240 us/op
                 sort·p0.90:   30736.384 us/op
                 sort·p0.95:   30952.653 us/op
                 sort·p0.99:   37809.029 us/op
                 sort·p0.999:  42991.616 us/op
                 sort·p0.9999: 42991.616 us/op
                 sort·p1.00:   42991.616 us/op

Iteration  10: 30967.282 ±(99.9%) 193.941 us/op
                 sort·p0.00:   30572.544 us/op
                 sort·p0.50:   30769.152 us/op
                 sort·p0.90:   31031.296 us/op
                 sort·p0.95:   31254.118 us/op
                 sort·p0.99:   38338.560 us/op
                 sort·p0.999:  41615.360 us/op
                 sort·p0.9999: 41615.360 us/op
                 sort·p1.00:   41615.360 us/op

Iteration  11: 32190.398 ±(99.9%) 281.083 us/op
                 sort·p0.00:   31719.424 us/op
                 sort·p0.50:   31948.800 us/op
                 sort·p0.90:   32237.158 us/op
                 sort·p0.95:   32420.659 us/op
                 sort·p0.99:   39979.581 us/op
                 sort·p0.999:  50921.472 us/op
                 sort·p0.9999: 50921.472 us/op
                 sort·p1.00:   50921.472 us/op

Iteration  12: 31184.520 ±(99.9%) 234.248 us/op
                 sort·p0.00:   30277.632 us/op
                 sort·p0.50:   31293.440 us/op
                 sort·p0.90:   31555.584 us/op
                 sort·p0.95:   31781.683 us/op
                 sort·p0.99:   36389.519 us/op
                 sort·p0.999:  48103.424 us/op
                 sort·p0.9999: 48103.424 us/op
                 sort·p1.00:   48103.424 us/op

Iteration  13: 28519.830 ±(99.9%) 208.032 us/op
                 sort·p0.00:   28114.944 us/op
                 sort·p0.50:   28311.552 us/op
                 sort·p0.90:   28573.696 us/op
                 sort·p0.95:   28717.875 us/op
                 sort·p0.99:   34246.492 us/op
                 sort·p0.999:  41353.216 us/op
                 sort·p0.9999: 41353.216 us/op
                 sort·p1.00:   41353.216 us/op

Iteration  14: 31910.501 ±(99.9%) 393.820 us/op
                 sort·p0.00:   31391.744 us/op
                 sort·p0.50:   31588.352 us/op
                 sort·p0.90:   31850.496 us/op
                 sort·p0.95:   32235.520 us/op
                 sort·p0.99:   42909.696 us/op
                 sort·p0.999:  59768.832 us/op
                 sort·p0.9999: 59768.832 us/op
                 sort·p1.00:   59768.832 us/op

Iteration  15: 30463.683 ±(99.9%) 296.790 us/op
                 sort·p0.00:   29982.720 us/op
                 sort·p0.50:   30212.096 us/op
                 sort·p0.90:   30441.472 us/op
                 sort·p0.95:   30687.232 us/op
                 sort·p0.99:   39400.243 us/op
                 sort·p0.999:  52166.656 us/op
                 sort·p0.9999: 52166.656 us/op
                 sort·p1.00:   52166.656 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  N = 4868
  mean =  30844.913 ±(99.9%) 71.452 us/op

  Histogram, us/op:
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 0 
    [27500.000, 30000.000) = 693 
    [30000.000, 32500.000) = 4040 
    [32500.000, 35000.000) = 71 
    [35000.000, 37500.000) = 26 
    [37500.000, 40000.000) = 17 
    [40000.000, 42500.000) = 9 
    [42500.000, 45000.000) = 4 
    [45000.000, 47500.000) = 1 
    [47500.000, 50000.000) = 4 
    [50000.000, 52500.000) = 2 
    [52500.000, 55000.000) = 0 
    [55000.000, 57500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  28114.944 us/op
     p(50.0000) =  30769.152 us/op
     p(90.0000) =  31784.960 us/op
     p(95.0000) =  32014.336 us/op
     p(99.0000) =  36150.968 us/op
     p(99.9000) =  48878.977 us/op
     p(99.9900) =  59768.832 us/op
     p(99.9990) =  59768.832 us/op
     p(99.9999) =  59768.832 us/op
    p(100.0000) =  59768.832 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 97.10% complete, ETA 00:14:36
# Fork: 1 of 1
# Warmup Iteration   1: 668.844 ±(99.9%) 12.147 us/op
# Warmup Iteration   2: 669.686 ±(99.9%) 12.211 us/op
# Warmup Iteration   3: 660.586 ±(99.9%) 9.767 us/op
# Warmup Iteration   4: 667.462 ±(99.9%) 13.291 us/op
# Warmup Iteration   5: 666.349 ±(99.9%) 13.509 us/op
Iteration   1: 659.647 ±(99.9%) 10.142 us/op
                 concatenateStrings·p0.00:   585.728 us/op
                 concatenateStrings·p0.50:   632.832 us/op
                 concatenateStrings·p0.90:   659.456 us/op
                 concatenateStrings·p0.95:   669.696 us/op
                 concatenateStrings·p0.99:   712.704 us/op
                 concatenateStrings·p0.999:  8458.404 us/op
                 concatenateStrings·p0.9999: 13543.973 us/op
                 concatenateStrings·p1.00:   14614.528 us/op

Iteration   2: 659.828 ±(99.9%) 11.073 us/op
                 concatenateStrings·p0.00:   582.656 us/op
                 concatenateStrings·p0.50:   631.808 us/op
                 concatenateStrings·p0.90:   658.432 us/op
                 concatenateStrings·p0.95:   668.672 us/op
                 concatenateStrings·p0.99:   713.728 us/op
                 concatenateStrings·p0.999:  8206.549 us/op
                 concatenateStrings·p0.9999: 19770.298 us/op
                 concatenateStrings·p1.00:   19955.712 us/op

Iteration   3: 662.285 ±(99.9%) 11.351 us/op
                 concatenateStrings·p0.00:   588.800 us/op
                 concatenateStrings·p0.50:   633.856 us/op
                 concatenateStrings·p0.90:   658.432 us/op
                 concatenateStrings·p0.95:   668.672 us/op
                 concatenateStrings·p0.99:   715.776 us/op
                 concatenateStrings·p0.999:  8858.108 us/op
                 concatenateStrings·p0.9999: 16789.815 us/op
                 concatenateStrings·p1.00:   17498.112 us/op

Iteration   4: 663.081 ±(99.9%) 12.309 us/op
                 concatenateStrings·p0.00:   586.752 us/op
                 concatenateStrings·p0.50:   632.832 us/op
                 concatenateStrings·p0.90:   658.432 us/op
                 concatenateStrings·p0.95:   667.648 us/op
                 concatenateStrings·p0.99:   708.608 us/op
                 concatenateStrings·p0.999:  9153.167 us/op
                 concatenateStrings·p0.9999: 20629.543 us/op
                 concatenateStrings·p1.00:   25427.968 us/op

Iteration   5: 658.507 ±(99.9%) 10.844 us/op
                 concatenateStrings·p0.00:   585.728 us/op
                 concatenateStrings·p0.50:   630.784 us/op
                 concatenateStrings·p0.90:   655.360 us/op
                 concatenateStrings·p0.95:   665.600 us/op
                 concatenateStrings·p0.99:   709.919 us/op
                 concatenateStrings·p0.999:  9204.990 us/op
                 concatenateStrings·p0.9999: 14712.426 us/op
                 concatenateStrings·p1.00:   16695.296 us/op

Iteration   6: 661.943 ±(99.9%) 11.339 us/op
                 concatenateStrings·p0.00:   585.728 us/op
                 concatenateStrings·p0.50:   633.856 us/op
                 concatenateStrings·p0.90:   659.456 us/op
                 concatenateStrings·p0.95:   669.696 us/op
                 concatenateStrings·p0.99:   712.704 us/op
                 concatenateStrings·p0.999:  8251.376 us/op
                 concatenateStrings·p0.9999: 17929.100 us/op
                 concatenateStrings·p1.00:   23429.120 us/op

Iteration   7: 660.836 ±(99.9%) 11.477 us/op
                 concatenateStrings·p0.00:   584.704 us/op
                 concatenateStrings·p0.50:   630.784 us/op
                 concatenateStrings·p0.90:   656.384 us/op
                 concatenateStrings·p0.95:   665.600 us/op
                 concatenateStrings·p0.99:   702.280 us/op
                 concatenateStrings·p0.999:  9305.096 us/op
                 concatenateStrings·p0.9999: 15393.371 us/op
                 concatenateStrings·p1.00:   16433.152 us/op

Iteration   8: 660.300 ±(99.9%) 11.495 us/op
                 concatenateStrings·p0.00:   586.752 us/op
                 concatenateStrings·p0.50:   631.808 us/op
                 concatenateStrings·p0.90:   657.408 us/op
                 concatenateStrings·p0.95:   667.648 us/op
                 concatenateStrings·p0.99:   713.421 us/op
                 concatenateStrings·p0.999:  7918.469 us/op
                 concatenateStrings·p0.9999: 18727.961 us/op
                 concatenateStrings·p1.00:   19333.120 us/op

Iteration   9: 663.883 ±(99.9%) 11.557 us/op
                 concatenateStrings·p0.00:   589.824 us/op
                 concatenateStrings·p0.50:   633.856 us/op
                 concatenateStrings·p0.90:   659.456 us/op
                 concatenateStrings·p0.95:   670.720 us/op
                 concatenateStrings·p0.99:   717.824 us/op
                 concatenateStrings·p0.999:  8493.916 us/op
                 concatenateStrings·p0.9999: 16629.844 us/op
                 concatenateStrings·p1.00:   17465.344 us/op

Iteration  10: 659.716 ±(99.9%) 10.685 us/op
                 concatenateStrings·p0.00:   585.728 us/op
                 concatenateStrings·p0.50:   632.832 us/op
                 concatenateStrings·p0.90:   659.456 us/op
                 concatenateStrings·p0.95:   668.672 us/op
                 concatenateStrings·p0.99:   721.469 us/op
                 concatenateStrings·p0.999:  6811.943 us/op
                 concatenateStrings·p0.9999: 19659.555 us/op
                 concatenateStrings·p1.00:   25264.128 us/op

Iteration  11: 661.059 ±(99.9%) 11.555 us/op
                 concatenateStrings·p0.00:   587.776 us/op
                 concatenateStrings·p0.50:   632.832 us/op
                 concatenateStrings·p0.90:   658.432 us/op
                 concatenateStrings·p0.95:   668.006 us/op
                 concatenateStrings·p0.99:   710.656 us/op
                 concatenateStrings·p0.999:  7162.675 us/op
                 concatenateStrings·p0.9999: 18274.917 us/op
                 concatenateStrings·p1.00:   18710.528 us/op

Iteration  12: 659.497 ±(99.9%) 10.960 us/op
                 concatenateStrings·p0.00:   582.656 us/op
                 concatenateStrings·p0.50:   631.808 us/op
                 concatenateStrings·p0.90:   657.408 us/op
                 concatenateStrings·p0.95:   666.624 us/op
                 concatenateStrings·p0.99:   707.584 us/op
                 concatenateStrings·p0.999:  8050.278 us/op
                 concatenateStrings·p0.9999: 17293.230 us/op
                 concatenateStrings·p1.00:   17858.560 us/op

Iteration  13: 655.266 ±(99.9%) 9.251 us/op
                 concatenateStrings·p0.00:   581.632 us/op
                 concatenateStrings·p0.50:   632.832 us/op
                 concatenateStrings·p0.90:   657.408 us/op
                 concatenateStrings·p0.95:   667.648 us/op
                 concatenateStrings·p0.99:   709.632 us/op
                 concatenateStrings·p0.999:  4800.512 us/op
                 concatenateStrings·p0.9999: 18448.777 us/op
                 concatenateStrings·p1.00:   19136.512 us/op

Iteration  14: 660.756 ±(99.9%) 10.534 us/op
                 concatenateStrings·p0.00:   585.728 us/op
                 concatenateStrings·p0.50:   633.856 us/op
                 concatenateStrings·p0.90:   658.432 us/op
                 concatenateStrings·p0.95:   668.672 us/op
                 concatenateStrings·p0.99:   710.656 us/op
                 concatenateStrings·p0.999:  8058.634 us/op
                 concatenateStrings·p0.9999: 16964.125 us/op
                 concatenateStrings·p1.00:   20873.216 us/op

Iteration  15: 662.853 ±(99.9%) 11.937 us/op
                 concatenateStrings·p0.00:   583.680 us/op
                 concatenateStrings·p0.50:   632.832 us/op
                 concatenateStrings·p0.90:   658.432 us/op
                 concatenateStrings·p0.95:   668.672 us/op
                 concatenateStrings·p0.99:   718.848 us/op
                 concatenateStrings·p0.999:  8470.528 us/op
                 concatenateStrings·p0.9999: 17759.784 us/op
                 concatenateStrings·p1.00:   17793.024 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 226836
  mean =    660.624 ±(99.9%) 2.871 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 225820 
    [ 2500.000,  5000.000) = 602 
    [ 5000.000,  7500.000) = 148 
    [ 7500.000, 10000.000) = 174 
    [10000.000, 12500.000) = 42 
    [12500.000, 15000.000) = 22 
    [15000.000, 17500.000) = 12 
    [17500.000, 20000.000) = 12 
    [20000.000, 22500.000) = 1 
    [22500.000, 25000.000) = 1 
    [25000.000, 27500.000) = 2 

  Percentiles, us/op:
      p(0.0000) =    581.632 us/op
     p(50.0000) =    632.832 us/op
     p(90.0000) =    658.432 us/op
     p(95.0000) =    667.648 us/op
     p(99.0000) =    712.704 us/op
     p(99.9000) =   8242.487 us/op
     p(99.9900) =  16209.117 us/op
     p(99.9990) =  24771.667 us/op
     p(99.9999) =  25427.968 us/op
    p(100.0000) =  25427.968 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 97.82% complete, ETA 00:10:57
# Fork: 1 of 1
# Warmup Iteration   1: 6795.478 ±(99.9%) 137.025 us/op
# Warmup Iteration   2: 6737.357 ±(99.9%) 121.269 us/op
# Warmup Iteration   3: 6749.212 ±(99.9%) 112.963 us/op
# Warmup Iteration   4: 6754.802 ±(99.9%) 111.660 us/op
# Warmup Iteration   5: 6704.419 ±(99.9%) 99.865 us/op
Iteration   1: 6749.057 ±(99.9%) 120.411 us/op
                 concatenateStrings·p0.00:   6094.848 us/op
                 concatenateStrings·p0.50:   6430.720 us/op
                 concatenateStrings·p0.90:   6832.128 us/op
                 concatenateStrings·p0.95:   8329.626 us/op
                 concatenateStrings·p0.99:   15315.763 us/op
                 concatenateStrings·p0.999:  22160.409 us/op
                 concatenateStrings·p0.9999: 23724.032 us/op
                 concatenateStrings·p1.00:   23724.032 us/op

Iteration   2: 6757.619 ±(99.9%) 119.274 us/op
                 concatenateStrings·p0.00:   6119.424 us/op
                 concatenateStrings·p0.50:   6455.296 us/op
                 concatenateStrings·p0.90:   6856.704 us/op
                 concatenateStrings·p0.95:   8388.608 us/op
                 concatenateStrings·p0.99:   14322.893 us/op
                 concatenateStrings·p0.999:  24616.632 us/op
                 concatenateStrings·p0.9999: 25198.592 us/op
                 concatenateStrings·p1.00:   25198.592 us/op

Iteration   3: 6766.803 ±(99.9%) 127.793 us/op
                 concatenateStrings·p0.00:   6127.616 us/op
                 concatenateStrings·p0.50:   6463.488 us/op
                 concatenateStrings·p0.90:   6858.342 us/op
                 concatenateStrings·p0.95:   8359.117 us/op
                 concatenateStrings·p0.99:   13749.780 us/op
                 concatenateStrings·p0.999:  26171.736 us/op
                 concatenateStrings·p0.9999: 26312.704 us/op
                 concatenateStrings·p1.00:   26312.704 us/op

Iteration   4: 6776.978 ±(99.9%) 155.417 us/op
                 concatenateStrings·p0.00:   6086.656 us/op
                 concatenateStrings·p0.50:   6430.720 us/op
                 concatenateStrings·p0.90:   6840.320 us/op
                 concatenateStrings·p0.95:   8303.411 us/op
                 concatenateStrings·p0.99:   15445.524 us/op
                 concatenateStrings·p0.999:  38305.530 us/op
                 concatenateStrings·p0.9999: 41549.824 us/op
                 concatenateStrings·p1.00:   41549.824 us/op

Iteration   5: 6738.155 ±(99.9%) 117.675 us/op
                 concatenateStrings·p0.00:   6103.040 us/op
                 concatenateStrings·p0.50:   6430.720 us/op
                 concatenateStrings·p0.90:   6832.128 us/op
                 concatenateStrings·p0.95:   8418.099 us/op
                 concatenateStrings·p0.99:   14821.622 us/op
                 concatenateStrings·p0.999:  21992.440 us/op
                 concatenateStrings·p0.9999: 22642.688 us/op
                 concatenateStrings·p1.00:   22642.688 us/op

Iteration   6: 6765.189 ±(99.9%) 125.751 us/op
                 concatenateStrings·p0.00:   6103.040 us/op
                 concatenateStrings·p0.50:   6447.104 us/op
                 concatenateStrings·p0.90:   6841.958 us/op
                 concatenateStrings·p0.95:   8388.608 us/op
                 concatenateStrings·p0.99:   14299.300 us/op
                 concatenateStrings·p0.999:  25301.615 us/op
                 concatenateStrings·p0.9999: 26116.096 us/op
                 concatenateStrings·p1.00:   26116.096 us/op

Iteration   7: 6763.072 ±(99.9%) 139.775 us/op
                 concatenateStrings·p0.00:   6103.040 us/op
                 concatenateStrings·p0.50:   6414.336 us/op
                 concatenateStrings·p0.90:   6832.947 us/op
                 concatenateStrings·p0.95:   8250.163 us/op
                 concatenateStrings·p0.99:   15053.292 us/op
                 concatenateStrings·p0.999:  29559.194 us/op
                 concatenateStrings·p0.9999: 30736.384 us/op
                 concatenateStrings·p1.00:   30736.384 us/op

Iteration   8: 6698.333 ±(99.9%) 100.824 us/op
                 concatenateStrings·p0.00:   6127.616 us/op
                 concatenateStrings·p0.50:   6438.912 us/op
                 concatenateStrings·p0.90:   6848.512 us/op
                 concatenateStrings·p0.95:   8077.312 us/op
                 concatenateStrings·p0.99:   13061.489 us/op
                 concatenateStrings·p0.999:  22845.063 us/op
                 concatenateStrings·p0.9999: 25559.040 us/op
                 concatenateStrings·p1.00:   25559.040 us/op

Iteration   9: 6740.525 ±(99.9%) 118.969 us/op
                 concatenateStrings·p0.00:   6070.272 us/op
                 concatenateStrings·p0.50:   6447.104 us/op
                 concatenateStrings·p0.90:   6848.512 us/op
                 concatenateStrings·p0.95:   8375.501 us/op
                 concatenateStrings·p0.99:   13706.854 us/op
                 concatenateStrings·p0.999:  25100.157 us/op
                 concatenateStrings·p0.9999: 29556.736 us/op
                 concatenateStrings·p1.00:   29556.736 us/op

Iteration  10: 6727.584 ±(99.9%) 120.103 us/op
                 concatenateStrings·p0.00:   6111.232 us/op
                 concatenateStrings·p0.50:   6430.720 us/op
                 concatenateStrings·p0.90:   6856.704 us/op
                 concatenateStrings·p0.95:   8095.744 us/op
                 concatenateStrings·p0.99:   14047.150 us/op
                 concatenateStrings·p0.999:  24484.741 us/op
                 concatenateStrings·p0.9999: 25362.432 us/op
                 concatenateStrings·p1.00:   25362.432 us/op

Iteration  11: 6757.170 ±(99.9%) 129.924 us/op
                 concatenateStrings·p0.00:   6119.424 us/op
                 concatenateStrings·p0.50:   6455.296 us/op
                 concatenateStrings·p0.90:   6840.320 us/op
                 concatenateStrings·p0.95:   8249.344 us/op
                 concatenateStrings·p0.99:   15335.424 us/op
                 concatenateStrings·p0.999:  25999.442 us/op
                 concatenateStrings·p0.9999: 28704.768 us/op
                 concatenateStrings·p1.00:   28704.768 us/op

Iteration  12: 6727.881 ±(99.9%) 108.005 us/op
                 concatenateStrings·p0.00:   6094.848 us/op
                 concatenateStrings·p0.50:   6430.720 us/op
                 concatenateStrings·p0.90:   6832.128 us/op
                 concatenateStrings·p0.95:   8436.941 us/op
                 concatenateStrings·p0.99:   14613.053 us/op
                 concatenateStrings·p0.999:  18781.176 us/op
                 concatenateStrings·p0.9999: 18972.672 us/op
                 concatenateStrings·p1.00:   18972.672 us/op

Iteration  13: 6739.867 ±(99.9%) 108.048 us/op
                 concatenateStrings·p0.00:   6094.848 us/op
                 concatenateStrings·p0.50:   6463.488 us/op
                 concatenateStrings·p0.90:   6840.320 us/op
                 concatenateStrings·p0.95:   8378.778 us/op
                 concatenateStrings·p0.99:   14682.030 us/op
                 concatenateStrings·p0.999:  20132.921 us/op
                 concatenateStrings·p0.9999: 21528.576 us/op
                 concatenateStrings·p1.00:   21528.576 us/op

Iteration  14: 6682.098 ±(99.9%) 90.340 us/op
                 concatenateStrings·p0.00:   6094.848 us/op
                 concatenateStrings·p0.50:   6438.912 us/op
                 concatenateStrings·p0.90:   6823.936 us/op
                 concatenateStrings·p0.95:   8195.686 us/op
                 concatenateStrings·p0.99:   12637.962 us/op
                 concatenateStrings·p0.999:  18684.363 us/op
                 concatenateStrings·p0.9999: 21135.360 us/op
                 concatenateStrings·p1.00:   21135.360 us/op

Iteration  15: 6728.416 ±(99.9%) 103.583 us/op
                 concatenateStrings·p0.00:   6078.464 us/op
                 concatenateStrings·p0.50:   6447.104 us/op
                 concatenateStrings·p0.90:   6848.512 us/op
                 concatenateStrings·p0.95:   8295.629 us/op
                 concatenateStrings·p0.99:   13900.022 us/op
                 concatenateStrings·p0.999:  19064.390 us/op
                 concatenateStrings·p0.9999: 19431.424 us/op
                 concatenateStrings·p1.00:   19431.424 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 22241
  mean =   6741.155 ±(99.9%) 30.914 us/op

  Histogram, us/op:
    [    0.000,  5000.000) = 0 
    [ 5000.000, 10000.000) = 21691 
    [10000.000, 15000.000) = 372 
    [15000.000, 20000.000) = 137 
    [20000.000, 25000.000) = 28 
    [25000.000, 30000.000) = 10 
    [30000.000, 35000.000) = 2 
    [35000.000, 40000.000) = 0 
    [40000.000, 45000.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   6070.272 us/op
     p(50.0000) =   6438.912 us/op
     p(90.0000) =   6840.320 us/op
     p(95.0000) =   8290.304 us/op
     p(99.0000) =  14198.047 us/op
     p(99.9000) =  22896.902 us/op
     p(99.9900) =  33837.797 us/op
     p(99.9990) =  41549.824 us/op
     p(99.9999) =  41549.824 us/op
    p(100.0000) =  41549.824 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 98.55% complete, ETA 00:07:18
# Fork: 1 of 1
# Warmup Iteration   1: 109794.170 ±(99.9%) 1475.924 us/op
# Warmup Iteration   2: 107518.503 ±(99.9%) 1113.122 us/op
# Warmup Iteration   3: 106586.635 ±(99.9%) 969.915 us/op
# Warmup Iteration   4: 106890.610 ±(99.9%) 1160.596 us/op
# Warmup Iteration   5: 106917.104 ±(99.9%) 1212.035 us/op
Iteration   1: 106857.145 ±(99.9%) 1304.807 us/op
                 concatenateStrings·p0.00:   101318.656 us/op
                 concatenateStrings·p0.50:   105906.176 us/op
                 concatenateStrings·p0.90:   112066.560 us/op
                 concatenateStrings·p0.95:   114622.464 us/op
                 concatenateStrings·p0.99:   123469.824 us/op
                 concatenateStrings·p0.999:  123469.824 us/op
                 concatenateStrings·p0.9999: 123469.824 us/op
                 concatenateStrings·p1.00:   123469.824 us/op

Iteration   2: 107138.811 ±(99.9%) 1264.788 us/op
                 concatenateStrings·p0.00:   100663.296 us/op
                 concatenateStrings·p0.50:   106430.464 us/op
                 concatenateStrings·p0.90:   111607.808 us/op
                 concatenateStrings·p0.95:   113606.656 us/op
                 concatenateStrings·p0.99:   122290.176 us/op
                 concatenateStrings·p0.999:  122290.176 us/op
                 concatenateStrings·p0.9999: 122290.176 us/op
                 concatenateStrings·p1.00:   122290.176 us/op

Iteration   3: 107439.997 ±(99.9%) 1401.347 us/op
                 concatenateStrings·p0.00:   101711.872 us/op
                 concatenateStrings·p0.50:   106758.144 us/op
                 concatenateStrings·p0.90:   113115.136 us/op
                 concatenateStrings·p0.95:   114917.376 us/op
                 concatenateStrings·p0.99:   120586.240 us/op
                 concatenateStrings·p0.999:  120586.240 us/op
                 concatenateStrings·p0.9999: 120586.240 us/op
                 concatenateStrings·p1.00:   120586.240 us/op

Iteration   4: 107370.278 ±(99.9%) 1523.652 us/op
                 concatenateStrings·p0.00:   100532.224 us/op
                 concatenateStrings·p0.50:   106168.320 us/op
                 concatenateStrings·p0.90:   113246.208 us/op
                 concatenateStrings·p0.95:   116948.992 us/op
                 concatenateStrings·p0.99:   123076.608 us/op
                 concatenateStrings·p0.999:  123076.608 us/op
                 concatenateStrings·p0.9999: 123076.608 us/op
                 concatenateStrings·p1.00:   123076.608 us/op

Iteration   5: 106997.978 ±(99.9%) 1261.681 us/op
                 concatenateStrings·p0.00:   99745.792 us/op
                 concatenateStrings·p0.50:   106168.320 us/op
                 concatenateStrings·p0.90:   111345.664 us/op
                 concatenateStrings·p0.95:   113246.208 us/op
                 concatenateStrings·p0.99:   123207.680 us/op
                 concatenateStrings·p0.999:  123207.680 us/op
                 concatenateStrings·p0.9999: 123207.680 us/op
                 concatenateStrings·p1.00:   123207.680 us/op

Iteration   6: 106593.607 ±(99.9%) 1053.784 us/op
                 concatenateStrings·p0.00:   100270.080 us/op
                 concatenateStrings·p0.50:   105971.712 us/op
                 concatenateStrings·p0.90:   110493.696 us/op
                 concatenateStrings·p0.95:   112230.400 us/op
                 concatenateStrings·p0.99:   119275.520 us/op
                 concatenateStrings·p0.999:  119275.520 us/op
                 concatenateStrings·p0.9999: 119275.520 us/op
                 concatenateStrings·p1.00:   119275.520 us/op

Iteration   7: 106200.053 ±(99.9%) 971.151 us/op
                 concatenateStrings·p0.00:   101187.584 us/op
                 concatenateStrings·p0.50:   105775.104 us/op
                 concatenateStrings·p0.90:   110021.837 us/op
                 concatenateStrings·p0.95:   112748.134 us/op
                 concatenateStrings·p0.99:   114950.144 us/op
                 concatenateStrings·p0.999:  114950.144 us/op
                 concatenateStrings·p0.9999: 114950.144 us/op
                 concatenateStrings·p1.00:   114950.144 us/op

Iteration   8: 106585.241 ±(99.9%) 1023.839 us/op
                 concatenateStrings·p0.00:   100663.296 us/op
                 concatenateStrings·p0.50:   105906.176 us/op
                 concatenateStrings·p0.90:   109707.264 us/op
                 concatenateStrings·p0.95:   113147.904 us/op
                 concatenateStrings·p0.99:   119144.448 us/op
                 concatenateStrings·p0.999:  119144.448 us/op
                 concatenateStrings·p0.9999: 119144.448 us/op
                 concatenateStrings·p1.00:   119144.448 us/op

Iteration   9: 107205.741 ±(99.9%) 1218.348 us/op
                 concatenateStrings·p0.00:   100794.368 us/op
                 concatenateStrings·p0.50:   106692.608 us/op
                 concatenateStrings·p0.90:   112656.384 us/op
                 concatenateStrings·p0.95:   113573.888 us/op
                 concatenateStrings·p0.99:   117833.728 us/op
                 concatenateStrings·p0.999:  117833.728 us/op
                 concatenateStrings·p0.9999: 117833.728 us/op
                 concatenateStrings·p1.00:   117833.728 us/op

Iteration  10: 107020.288 ±(99.9%) 1310.773 us/op
                 concatenateStrings·p0.00:   100401.152 us/op
                 concatenateStrings·p0.50:   106299.392 us/op
                 concatenateStrings·p0.90:   112459.776 us/op
                 concatenateStrings·p0.95:   114589.696 us/op
                 concatenateStrings·p0.99:   121765.888 us/op
                 concatenateStrings·p0.999:  121765.888 us/op
                 concatenateStrings·p0.9999: 121765.888 us/op
                 concatenateStrings·p1.00:   121765.888 us/op

Iteration  11: 106695.397 ±(99.9%) 1077.451 us/op
                 concatenateStrings·p0.00:   98697.216 us/op
                 concatenateStrings·p0.50:   106102.784 us/op
                 concatenateStrings·p0.90:   111083.520 us/op
                 concatenateStrings·p0.95:   112984.064 us/op
                 concatenateStrings·p0.99:   115736.576 us/op
                 concatenateStrings·p0.999:  115736.576 us/op
                 concatenateStrings·p0.9999: 115736.576 us/op
                 concatenateStrings·p1.00:   115736.576 us/op

Iteration  12: 107275.460 ±(99.9%) 1197.890 us/op
                 concatenateStrings·p0.00:   101056.512 us/op
                 concatenateStrings·p0.50:   106299.392 us/op
                 concatenateStrings·p0.90:   112525.312 us/op
                 concatenateStrings·p0.95:   114524.160 us/op
                 concatenateStrings·p0.99:   118620.160 us/op
                 concatenateStrings·p0.999:  118620.160 us/op
                 concatenateStrings·p0.9999: 118620.160 us/op
                 concatenateStrings·p1.00:   118620.160 us/op

Iteration  13: 106790.215 ±(99.9%) 1221.237 us/op
                 concatenateStrings·p0.00:   101056.512 us/op
                 concatenateStrings·p0.50:   106168.320 us/op
                 concatenateStrings·p0.90:   111738.880 us/op
                 concatenateStrings·p0.95:   114720.768 us/op
                 concatenateStrings·p0.99:   120193.024 us/op
                 concatenateStrings·p0.999:  120193.024 us/op
                 concatenateStrings·p0.9999: 120193.024 us/op
                 concatenateStrings·p1.00:   120193.024 us/op

Iteration  14: 107486.087 ±(99.9%) 1384.222 us/op
                 concatenateStrings·p0.00:   101056.512 us/op
                 concatenateStrings·p0.50:   106430.464 us/op
                 concatenateStrings·p0.90:   113272.422 us/op
                 concatenateStrings·p0.95:   114688.000 us/op
                 concatenateStrings·p0.99:   120061.952 us/op
                 concatenateStrings·p0.999:  120061.952 us/op
                 concatenateStrings·p0.9999: 120061.952 us/op
                 concatenateStrings·p1.00:   120061.952 us/op

Iteration  15: 107078.852 ±(99.9%) 1027.388 us/op
                 concatenateStrings·p0.00:   101580.800 us/op
                 concatenateStrings·p0.50:   106692.608 us/op
                 concatenateStrings·p0.90:   110624.768 us/op
                 concatenateStrings·p0.95:   113541.120 us/op
                 concatenateStrings·p0.99:   119537.664 us/op
                 concatenateStrings·p0.999:  119537.664 us/op
                 concatenateStrings·p0.9999: 119537.664 us/op
                 concatenateStrings·p1.00:   119537.664 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 1410
  mean = 106981.431 ±(99.9%) 307.015 us/op

  Histogram, us/op:
    [ 90000.000,  92500.000) = 0 
    [ 92500.000,  95000.000) = 0 
    [ 95000.000,  97500.000) = 0 
    [ 97500.000, 100000.000) = 2 
    [100000.000, 102500.000) = 72 
    [102500.000, 105000.000) = 321 
    [105000.000, 107500.000) = 573 
    [107500.000, 110000.000) = 225 
    [110000.000, 112500.000) = 92 
    [112500.000, 115000.000) = 85 
    [115000.000, 117500.000) = 14 
    [117500.000, 120000.000) = 14 
    [120000.000, 122500.000) = 8 
    [122500.000, 125000.000) = 4 
    [125000.000, 127500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  98697.216 us/op
     p(50.0000) = 106299.392 us/op
     p(90.0000) = 112066.560 us/op
     p(95.0000) = 113698.406 us/op
     p(99.0000) = 119523.246 us/op
     p(99.9000) = 123362.083 us/op
     p(99.9900) = 123469.824 us/op
     p(99.9990) = 123469.824 us/op
     p(99.9999) = 123469.824 us/op
    p(100.0000) = 123469.824 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 99.27% complete, ETA 00:03:39
# Fork: 1 of 1
# Warmup Iteration   1: 807322.860 ±(99.9%) 140219.055 us/op
# Warmup Iteration   2: 771527.241 ±(99.9%) 31532.589 us/op
# Warmup Iteration   3: 757071.872 ±(99.9%) 30487.273 us/op
# Warmup Iteration   4: 762839.040 ±(99.9%) 36011.961 us/op
# Warmup Iteration   5: 763662.921 ±(99.9%) 34186.475 us/op
Iteration   1: 757970.651 ±(99.9%) 32976.365 us/op
                 createNewObjectsWithRecursive·p0.00:   696254.464 us/op
                 createNewObjectsWithRecursive·p0.50:   756023.296 us/op
                 createNewObjectsWithRecursive·p0.90:   804782.080 us/op
                 createNewObjectsWithRecursive·p0.95:   811597.824 us/op
                 createNewObjectsWithRecursive·p0.99:   811597.824 us/op
                 createNewObjectsWithRecursive·p0.999:  811597.824 us/op
                 createNewObjectsWithRecursive·p0.9999: 811597.824 us/op
                 createNewObjectsWithRecursive·p1.00:   811597.824 us/op

Iteration   2: 763438.226 ±(99.9%) 32235.677 us/op
                 createNewObjectsWithRecursive·p0.00:   704643.072 us/op
                 createNewObjectsWithRecursive·p0.50:   762314.752 us/op
                 createNewObjectsWithRecursive·p0.90:   804257.792 us/op
                 createNewObjectsWithRecursive·p0.95:   807403.520 us/op
                 createNewObjectsWithRecursive·p0.99:   807403.520 us/op
                 createNewObjectsWithRecursive·p0.999:  807403.520 us/op
                 createNewObjectsWithRecursive·p0.9999: 807403.520 us/op
                 createNewObjectsWithRecursive·p1.00:   807403.520 us/op

Iteration   3: 757071.872 ±(99.9%) 29085.299 us/op
                 createNewObjectsWithRecursive·p0.00:   705691.648 us/op
                 createNewObjectsWithRecursive·p0.50:   751304.704 us/op
                 createNewObjectsWithRecursive·p0.90:   796393.472 us/op
                 createNewObjectsWithRecursive·p0.95:   804257.792 us/op
                 createNewObjectsWithRecursive·p0.99:   804257.792 us/op
                 createNewObjectsWithRecursive·p0.999:  804257.792 us/op
                 createNewObjectsWithRecursive·p0.9999: 804257.792 us/op
                 createNewObjectsWithRecursive·p1.00:   804257.792 us/op

Iteration   4: 759468.617 ±(99.9%) 28654.445 us/op
                 createNewObjectsWithRecursive·p0.00:   700448.768 us/op
                 createNewObjectsWithRecursive·p0.50:   756547.584 us/op
                 createNewObjectsWithRecursive·p0.90:   795869.184 us/op
                 createNewObjectsWithRecursive·p0.95:   804257.792 us/op
                 createNewObjectsWithRecursive·p0.99:   804257.792 us/op
                 createNewObjectsWithRecursive·p0.999:  804257.792 us/op
                 createNewObjectsWithRecursive·p0.9999: 804257.792 us/op
                 createNewObjectsWithRecursive·p1.00:   804257.792 us/op

Iteration   5: 764561.701 ±(99.9%) 37142.194 us/op
                 createNewObjectsWithRecursive·p0.00:   709885.952 us/op
                 createNewObjectsWithRecursive·p0.50:   769654.784 us/op
                 createNewObjectsWithRecursive·p0.90:   807403.520 us/op
                 createNewObjectsWithRecursive·p0.95:   812646.400 us/op
                 createNewObjectsWithRecursive·p0.99:   812646.400 us/op
                 createNewObjectsWithRecursive·p0.999:  812646.400 us/op
                 createNewObjectsWithRecursive·p0.9999: 812646.400 us/op
                 createNewObjectsWithRecursive·p1.00:   812646.400 us/op

Iteration   6: 758944.329 ±(99.9%) 29384.158 us/op
                 createNewObjectsWithRecursive·p0.00:   702545.920 us/op
                 createNewObjectsWithRecursive·p0.50:   756023.296 us/op
                 createNewObjectsWithRecursive·p0.90:   800587.776 us/op
                 createNewObjectsWithRecursive·p0.95:   811597.824 us/op
                 createNewObjectsWithRecursive·p0.99:   811597.824 us/op
                 createNewObjectsWithRecursive·p0.999:  811597.824 us/op
                 createNewObjectsWithRecursive·p0.9999: 811597.824 us/op
                 createNewObjectsWithRecursive·p1.00:   811597.824 us/op

Iteration   7: 762239.854 ±(99.9%) 34468.765 us/op
                 createNewObjectsWithRecursive·p0.00:   696254.464 us/op
                 createNewObjectsWithRecursive·p0.50:   757071.872 us/op
                 createNewObjectsWithRecursive·p0.90:   803209.216 us/op
                 createNewObjectsWithRecursive·p0.95:   811597.824 us/op
                 createNewObjectsWithRecursive·p0.99:   811597.824 us/op
                 createNewObjectsWithRecursive·p0.999:  811597.824 us/op
                 createNewObjectsWithRecursive·p0.9999: 811597.824 us/op
                 createNewObjectsWithRecursive·p1.00:   811597.824 us/op

Iteration   8: 762539.447 ±(99.9%) 36597.253 us/op
                 createNewObjectsWithRecursive·p0.00:   698351.616 us/op
                 createNewObjectsWithRecursive·p0.50:   766509.056 us/op
                 createNewObjectsWithRecursive·p0.90:   816316.416 us/op
                 createNewObjectsWithRecursive·p0.95:   822083.584 us/op
                 createNewObjectsWithRecursive·p0.99:   822083.584 us/op
                 createNewObjectsWithRecursive·p0.999:  822083.584 us/op
                 createNewObjectsWithRecursive·p0.9999: 822083.584 us/op
                 createNewObjectsWithRecursive·p1.00:   822083.584 us/op

Iteration   9: 760741.888 ±(99.9%) 28988.000 us/op
                 createNewObjectsWithRecursive·p0.00:   718274.560 us/op
                 createNewObjectsWithRecursive·p0.50:   758120.448 us/op
                 createNewObjectsWithRecursive·p0.90:   806879.232 us/op
                 createNewObjectsWithRecursive·p0.95:   811597.824 us/op
                 createNewObjectsWithRecursive·p0.99:   811597.824 us/op
                 createNewObjectsWithRecursive·p0.999:  811597.824 us/op
                 createNewObjectsWithRecursive·p0.9999: 811597.824 us/op
                 createNewObjectsWithRecursive·p1.00:   811597.824 us/op

Iteration  10: 757970.651 ±(99.9%) 35095.042 us/op
                 createNewObjectsWithRecursive·p0.00:   695205.888 us/op
                 createNewObjectsWithRecursive·p0.50:   753926.144 us/op
                 createNewObjectsWithRecursive·p0.90:   802160.640 us/op
                 createNewObjectsWithRecursive·p0.95:   809500.672 us/op
                 createNewObjectsWithRecursive·p0.99:   809500.672 us/op
                 createNewObjectsWithRecursive·p0.999:  809500.672 us/op
                 createNewObjectsWithRecursive·p0.9999: 809500.672 us/op
                 createNewObjectsWithRecursive·p1.00:   809500.672 us/op

Iteration  11: 758270.245 ±(99.9%) 29010.666 us/op
                 createNewObjectsWithRecursive·p0.00:   695205.888 us/op
                 createNewObjectsWithRecursive·p0.50:   763887.616 us/op
                 createNewObjectsWithRecursive·p0.90:   788529.152 us/op
                 createNewObjectsWithRecursive·p0.95:   790626.304 us/op
                 createNewObjectsWithRecursive·p0.99:   790626.304 us/op
                 createNewObjectsWithRecursive·p0.999:  790626.304 us/op
                 createNewObjectsWithRecursive·p0.9999: 790626.304 us/op
                 createNewObjectsWithRecursive·p1.00:   790626.304 us/op

Iteration  12: 754375.534 ±(99.9%) 31472.923 us/op
                 createNewObjectsWithRecursive·p0.00:   695205.888 us/op
                 createNewObjectsWithRecursive·p0.50:   752877.568 us/op
                 createNewObjectsWithRecursive·p0.90:   794820.608 us/op
                 createNewObjectsWithRecursive·p0.95:   799014.912 us/op
                 createNewObjectsWithRecursive·p0.99:   799014.912 us/op
                 createNewObjectsWithRecursive·p0.999:  799014.912 us/op
                 createNewObjectsWithRecursive·p0.9999: 799014.912 us/op
                 createNewObjectsWithRecursive·p1.00:   799014.912 us/op

Iteration  13: 762015.159 ±(99.9%) 30215.747 us/op
                 createNewObjectsWithRecursive·p0.00:   692060.160 us/op
                 createNewObjectsWithRecursive·p0.50:   763363.328 us/op
                 createNewObjectsWithRecursive·p0.90:   796393.472 us/op
                 createNewObjectsWithRecursive·p0.95:   811597.824 us/op
                 createNewObjectsWithRecursive·p0.99:   811597.824 us/op
                 createNewObjectsWithRecursive·p0.999:  811597.824 us/op
                 createNewObjectsWithRecursive·p0.9999: 811597.824 us/op
                 createNewObjectsWithRecursive·p1.00:   811597.824 us/op

Iteration  14: 759693.312 ±(99.9%) 31091.143 us/op
                 createNewObjectsWithRecursive·p0.00:   711983.104 us/op
                 createNewObjectsWithRecursive·p0.50:   759693.312 us/op
                 createNewObjectsWithRecursive·p0.90:   807403.520 us/op
                 createNewObjectsWithRecursive·p0.95:   817889.280 us/op
                 createNewObjectsWithRecursive·p0.99:   817889.280 us/op
                 createNewObjectsWithRecursive·p0.999:  817889.280 us/op
                 createNewObjectsWithRecursive·p0.9999: 817889.280 us/op
                 createNewObjectsWithRecursive·p1.00:   817889.280 us/op

Iteration  15: 758719.634 ±(99.9%) 29503.089 us/op
                 createNewObjectsWithRecursive·p0.00:   702545.920 us/op
                 createNewObjectsWithRecursive·p0.50:   757596.160 us/op
                 createNewObjectsWithRecursive·p0.90:   800063.488 us/op
                 createNewObjectsWithRecursive·p0.95:   822083.584 us/op
                 createNewObjectsWithRecursive·p0.99:   822083.584 us/op
                 createNewObjectsWithRecursive·p0.999:  822083.584 us/op
                 createNewObjectsWithRecursive·p0.9999: 822083.584 us/op
                 createNewObjectsWithRecursive·p1.00:   822083.584 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  N = 210
  mean = 759868.075 ±(99.9%) 6310.846 us/op

  Histogram, us/op:
    [600000.000, 625000.000) = 0 
    [625000.000, 650000.000) = 0 
    [650000.000, 675000.000) = 0 
    [675000.000, 700000.000) = 7 
    [700000.000, 725000.000) = 12 
    [725000.000, 750000.000) = 62 
    [750000.000, 775000.000) = 71 
    [775000.000, 800000.000) = 41 
    [800000.000, 825000.000) = 17 
    [825000.000, 850000.000) = 0 
    [850000.000, 875000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 692060.160 us/op
     p(50.0000) = 760217.600 us/op
     p(90.0000) = 796708.045 us/op
     p(95.0000) = 809972.531 us/op
     p(99.0000) = 821622.211 us/op
     p(99.9000) = 822083.584 us/op
     p(99.9900) = 822083.584 us/op
     p(99.9990) = 822083.584 us/op
     p(99.9999) = 822083.584 us/op
    p(100.0000) = 822083.584 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 100.00% complete, ETA 00:00:01
# Fork: 1 of 1
# Warmup Iteration   1: 241174.323 us/op
# Warmup Iteration   2: 242583.505 us/op
# Warmup Iteration   3: 230319.449 us/op
# Warmup Iteration   4: 227137.740 us/op
# Warmup Iteration   5: 224575.517 us/op
Iteration   1: 242006.888 us/op
Iteration   2: 221616.194 us/op
Iteration   3: 220056.786 us/op
Iteration   4: 224700.869 us/op
Iteration   5: 208999.788 us/op
Iteration   6: 227895.674 us/op
Iteration   7: 228826.968 us/op
Iteration   8: 219504.941 us/op
Iteration   9: 230196.210 us/op
Iteration  10: 219133.585 us/op
Iteration  11: 219772.535 us/op
Iteration  12: 209843.067 us/op
Iteration  13: 234206.589 us/op
Iteration  14: 230279.073 us/op
Iteration  15: 226485.326 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 224234.966 ±(99.9%) 9297.815 us/op

  Histogram, us/op:
    [200000.000, 205000.000) = 0 
    [205000.000, 210000.000) = 2 
    [210000.000, 215000.000) = 0 
    [215000.000, 220000.000) = 3 
    [220000.000, 225000.000) = 3 
    [225000.000, 230000.000) = 3 
    [230000.000, 235000.000) = 3 
    [235000.000, 240000.000) = 0 
    [240000.000, 245000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 208999.788 us/op
     p(50.0000) = 224700.869 us/op
     p(90.0000) = 237326.709 us/op
     p(95.0000) = 242006.888 us/op
     p(99.0000) = 242006.888 us/op
     p(99.9000) = 242006.888 us/op
     p(99.9900) = 242006.888 us/op
     p(99.9990) = 242006.888 us/op
     p(99.9999) = 242006.888 us/op
    p(100.0000) = 242006.888 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 229604.952 us/op
# Warmup Iteration   2: 211079.304 us/op
# Warmup Iteration   3: 232232.825 us/op
# Warmup Iteration   4: 225163.117 us/op
# Warmup Iteration   5: 222407.104 us/op
Iteration   1: 232422.394 us/op
Iteration   2: 222164.521 us/op
Iteration   3: 222779.191 us/op
Iteration   4: 223075.538 us/op
Iteration   5: 232806.270 us/op
Iteration   6: 221487.173 us/op
Iteration   7: 229414.752 us/op
Iteration   8: 223490.847 us/op
Iteration   9: 232012.362 us/op
Iteration  10: 224195.277 us/op
Iteration  11: 229383.106 us/op
Iteration  12: 242722.164 us/op
Iteration  13: 221913.029 us/op
Iteration  14: 222801.585 us/op
Iteration  15: 229115.984 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 227318.946 ±(99.9%) 6392.445 us/op

  Histogram, us/op:
    [220000.000, 222500.000) = 3 
    [222500.000, 225000.000) = 5 
    [225000.000, 227500.000) = 0 
    [227500.000, 230000.000) = 3 
    [230000.000, 232500.000) = 2 
    [232500.000, 235000.000) = 1 
    [235000.000, 237500.000) = 0 
    [237500.000, 240000.000) = 0 
    [240000.000, 242500.000) = 0 
    [242500.000, 245000.000) = 1 
    [245000.000, 247500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 221487.173 us/op
     p(50.0000) = 224195.277 us/op
     p(90.0000) = 236772.628 us/op
     p(95.0000) = 242722.164 us/op
     p(99.0000) = 242722.164 us/op
     p(99.9000) = 242722.164 us/op
     p(99.9900) = 242722.164 us/op
     p(99.9990) = 242722.164 us/op
     p(99.9999) = 242722.164 us/op
    p(100.0000) = 242722.164 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 224369.990 us/op
# Warmup Iteration   2: 223547.126 us/op
# Warmup Iteration   3: 227843.332 us/op
# Warmup Iteration   4: 207293.592 us/op
# Warmup Iteration   5: 178042.727 us/op
Iteration   1: 155828.919 us/op
Iteration   2: 154109.641 us/op
Iteration   3: 185247.153 us/op
Iteration   4: 204422.443 us/op
Iteration   5: 213613.801 us/op
Iteration   6: 220492.171 us/op
Iteration   7: 204299.096 us/op
Iteration   8: 207609.628 us/op
Iteration   9: 206905.258 us/op
Iteration  10: 202253.759 us/op
Iteration  11: 204253.323 us/op
Iteration  12: 209130.325 us/op
Iteration  13: 212357.886 us/op
Iteration  14: 203468.143 us/op
Iteration  15: 204072.680 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 199204.282 ±(99.9%) 20804.381 us/op

  Histogram, us/op:
    [150000.000, 155000.000) = 1 
    [155000.000, 160000.000) = 1 
    [160000.000, 165000.000) = 0 
    [165000.000, 170000.000) = 0 
    [170000.000, 175000.000) = 0 
    [175000.000, 180000.000) = 0 
    [180000.000, 185000.000) = 0 
    [185000.000, 190000.000) = 1 
    [190000.000, 195000.000) = 0 
    [195000.000, 200000.000) = 0 
    [200000.000, 205000.000) = 6 
    [205000.000, 210000.000) = 3 
    [210000.000, 215000.000) = 2 
    [215000.000, 220000.000) = 0 
    [220000.000, 225000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 154109.641 us/op
     p(50.0000) = 204299.096 us/op
     p(90.0000) = 216365.149 us/op
     p(95.0000) = 220492.171 us/op
     p(99.0000) = 220492.171 us/op
     p(99.9000) = 220492.171 us/op
     p(99.9900) = 220492.171 us/op
     p(99.9990) = 220492.171 us/op
     p(99.9999) = 220492.171 us/op
    p(100.0000) = 220492.171 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 206070.674 us/op
# Warmup Iteration   2: 207997.642 us/op
# Warmup Iteration   3: 207543.340 us/op
# Warmup Iteration   4: 200375.085 us/op
# Warmup Iteration   5: 199766.212 us/op
Iteration   1: 205317.096 us/op
Iteration   2: 202600.114 us/op
Iteration   3: 203209.145 us/op
Iteration   4: 214192.258 us/op
Iteration   5: 203648.798 us/op
Iteration   6: 201225.966 us/op
Iteration   7: 202593.802 us/op
Iteration   8: 205607.675 us/op
Iteration   9: 203907.163 us/op
Iteration  10: 205347.049 us/op
Iteration  11: 199580.058 us/op
Iteration  12: 205216.624 us/op
Iteration  13: 200536.988 us/op
Iteration  14: 200398.459 us/op
Iteration  15: 200447.975 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 203588.611 ±(99.9%) 3816.921 us/op

  Histogram, us/op:
    [190000.000, 192500.000) = 0 
    [192500.000, 195000.000) = 0 
    [195000.000, 197500.000) = 0 
    [197500.000, 200000.000) = 1 
    [200000.000, 202500.000) = 4 
    [202500.000, 205000.000) = 5 
    [205000.000, 207500.000) = 4 
    [207500.000, 210000.000) = 0 
    [210000.000, 212500.000) = 0 
    [212500.000, 215000.000) = 1 
    [215000.000, 217500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 199580.058 us/op
     p(50.0000) = 203209.145 us/op
     p(90.0000) = 209041.508 us/op
     p(95.0000) = 214192.258 us/op
     p(99.0000) = 214192.258 us/op
     p(99.9000) = 214192.258 us/op
     p(99.9900) = 214192.258 us/op
     p(99.9990) = 214192.258 us/op
     p(99.9999) = 214192.258 us/op
    p(100.0000) = 214192.258 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 221552.495 us/op
# Warmup Iteration   2: 211981.488 us/op
# Warmup Iteration   3: 207259.304 us/op
# Warmup Iteration   4: 201909.043 us/op
# Warmup Iteration   5: 200532.543 us/op
Iteration   1: 225254.214 us/op
Iteration   2: 201809.364 us/op
Iteration   3: 210987.435 us/op
Iteration   4: 205449.196 us/op
Iteration   5: 199596.038 us/op
Iteration   6: 199880.052 us/op
Iteration   7: 204952.837 us/op
Iteration   8: 204440.560 us/op
Iteration   9: 204324.973 us/op
Iteration  10: 217920.995 us/op
Iteration  11: 202897.981 us/op
Iteration  12: 204464.182 us/op
Iteration  13: 200535.664 us/op
Iteration  14: 216401.284 us/op
Iteration  15: 200315.983 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 206615.384 ±(99.9%) 8166.888 us/op

  Histogram, us/op:
    [190000.000, 192500.000) = 0 
    [192500.000, 195000.000) = 0 
    [195000.000, 197500.000) = 0 
    [197500.000, 200000.000) = 2 
    [200000.000, 202500.000) = 3 
    [202500.000, 205000.000) = 5 
    [205000.000, 207500.000) = 1 
    [207500.000, 210000.000) = 0 
    [210000.000, 212500.000) = 1 
    [212500.000, 215000.000) = 0 
    [215000.000, 217500.000) = 1 
    [217500.000, 220000.000) = 1 
    [220000.000, 222500.000) = 0 
    [222500.000, 225000.000) = 0 
    [225000.000, 227500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 199596.038 us/op
     p(50.0000) = 204440.560 us/op
     p(90.0000) = 220854.283 us/op
     p(95.0000) = 225254.214 us/op
     p(99.0000) = 225254.214 us/op
     p(99.9000) = 225254.214 us/op
     p(99.9900) = 225254.214 us/op
     p(99.9990) = 225254.214 us/op
     p(99.9999) = 225254.214 us/op
    p(100.0000) = 225254.214 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 204626.976 us/op
# Warmup Iteration   2: 198214.281 us/op
# Warmup Iteration   3: 199320.114 us/op
# Warmup Iteration   4: 200148.742 us/op
# Warmup Iteration   5: 209620.970 us/op
Iteration   1: 198022.075 us/op
Iteration   2: 197957.676 us/op
Iteration   3: 207746.345 us/op
Iteration   4: 209803.001 us/op
Iteration   5: 211997.830 us/op
Iteration   6: 204817.706 us/op
Iteration   7: 204432.069 us/op
Iteration   8: 198631.879 us/op
Iteration   9: 205033.673 us/op
Iteration  10: 199688.620 us/op
Iteration  11: 205287.376 us/op
Iteration  12: 201937.525 us/op
Iteration  13: 201890.047 us/op
Iteration  14: 205982.161 us/op
Iteration  15: 211691.667 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 204327.977 ±(99.9%) 4990.588 us/op

  Histogram, us/op:
    [190000.000, 192500.000) = 0 
    [192500.000, 195000.000) = 0 
    [195000.000, 197500.000) = 0 
    [197500.000, 200000.000) = 4 
    [200000.000, 202500.000) = 2 
    [202500.000, 205000.000) = 2 
    [205000.000, 207500.000) = 3 
    [207500.000, 210000.000) = 2 
    [210000.000, 212500.000) = 2 
    [212500.000, 215000.000) = 0 
    [215000.000, 217500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 197957.676 us/op
     p(50.0000) = 204817.706 us/op
     p(90.0000) = 211814.132 us/op
     p(95.0000) = 211997.830 us/op
     p(99.0000) = 211997.830 us/op
     p(99.9000) = 211997.830 us/op
     p(99.9900) = 211997.830 us/op
     p(99.9990) = 211997.830 us/op
     p(99.9999) = 211997.830 us/op
    p(100.0000) = 211997.830 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1243461.257 us/op
# Warmup Iteration   2: 1544662.513 us/op
# Warmup Iteration   3: 1696384.509 us/op
# Warmup Iteration   4: 1759808.843 us/op
# Warmup Iteration   5: 1749173.222 us/op
Iteration   1: 1734414.949 us/op
Iteration   2: 1705347.922 us/op
Iteration   3: 1785360.649 us/op
Iteration   4: 1723058.141 us/op
Iteration   5: 1706444.509 us/op
Iteration   6: 1763608.898 us/op
Iteration   7: 1755218.262 us/op
Iteration   8: 1799495.510 us/op
Iteration   9: 1684840.323 us/op
Iteration  10: 1828457.081 us/op
Iteration  11: 1718490.600 us/op
Iteration  12: 1724917.413 us/op
Iteration  13: 1739195.135 us/op
Iteration  14: 1729893.276 us/op
Iteration  15: 1739676.326 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 1742561.266 ±(99.9%) 41001.465 us/op

  Histogram, us/op:
    [1600000.000, 1625000.000) = 0 
    [1625000.000, 1650000.000) = 0 
    [1650000.000, 1675000.000) = 0 
    [1675000.000, 1700000.000) = 1 
    [1700000.000, 1725000.000) = 5 
    [1725000.000, 1750000.000) = 4 
    [1750000.000, 1775000.000) = 2 
    [1775000.000, 1800000.000) = 2 
    [1800000.000, 1825000.000) = 0 
    [1825000.000, 1850000.000) = 1 
    [1850000.000, 1875000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1684840.323 us/op
     p(50.0000) = 1734414.949 us/op
     p(90.0000) = 1811080.138 us/op
     p(95.0000) = 1828457.081 us/op
     p(99.0000) = 1828457.081 us/op
     p(99.9000) = 1828457.081 us/op
     p(99.9900) = 1828457.081 us/op
     p(99.9990) = 1828457.081 us/op
     p(99.9999) = 1828457.081 us/op
    p(100.0000) = 1828457.081 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 953845.505 us/op
# Warmup Iteration   2: 1037661.895 us/op
# Warmup Iteration   3: 1131100.007 us/op
# Warmup Iteration   4: 1017809.999 us/op
# Warmup Iteration   5: 1045915.956 us/op
Iteration   1: 1020581.086 us/op
Iteration   2: 1005696.419 us/op
Iteration   3: 1030400.726 us/op
Iteration   4: 1042737.403 us/op
Iteration   5: 1020833.851 us/op
Iteration   6: 1037121.712 us/op
Iteration   7: 1008138.544 us/op
Iteration   8: 1013098.590 us/op
Iteration   9: 1026663.870 us/op
Iteration  10: 1017990.698 us/op
Iteration  11: 1039154.045 us/op
Iteration  12: 1011518.517 us/op
Iteration  13: 1008284.665 us/op
Iteration  14: 1017797.725 us/op
Iteration  15: 1001154.542 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 1020078.160 ±(99.9%) 13692.692 us/op

  Histogram, us/op:
    [1000000.000, 1005000.000) = 1 
    [1005000.000, 1010000.000) = 3 
    [1010000.000, 1015000.000) = 2 
    [1015000.000, 1020000.000) = 2 
    [1020000.000, 1025000.000) = 2 
    [1025000.000, 1030000.000) = 1 
    [1030000.000, 1035000.000) = 1 
    [1035000.000, 1040000.000) = 2 
    [1040000.000, 1045000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 1001154.542 us/op
     p(50.0000) = 1017990.698 us/op
     p(90.0000) = 1040587.388 us/op
     p(95.0000) = 1042737.403 us/op
     p(99.0000) = 1042737.403 us/op
     p(99.9000) = 1042737.403 us/op
     p(99.9900) = 1042737.403 us/op
     p(99.9990) = 1042737.403 us/op
     p(99.9999) = 1042737.403 us/op
    p(100.0000) = 1042737.403 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 905832.474 us/op
# Warmup Iteration   2: 870968.551 us/op
# Warmup Iteration   3: 841164.790 us/op
# Warmup Iteration   4: 853974.543 us/op
# Warmup Iteration   5: 946102.635 us/op
Iteration   1: 956122.587 us/op
Iteration   2: 936042.955 us/op
Iteration   3: 962298.045 us/op
Iteration   4: 926740.706 us/op
Iteration   5: 952583.061 us/op
Iteration   6: 981256.960 us/op
Iteration   7: 934757.139 us/op
Iteration   8: 949038.515 us/op
Iteration   9: 920080.881 us/op
Iteration  10: 924167.014 us/op
Iteration  11: 951996.589 us/op
Iteration  12: 948160.397 us/op
Iteration  13: 939002.857 us/op
Iteration  14: 937631.936 us/op
Iteration  15: 964450.486 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 945622.009 ±(99.9%) 17858.088 us/op

  Histogram, us/op:
    [920000.000, 925000.000) = 2 
    [925000.000, 930000.000) = 1 
    [930000.000, 935000.000) = 1 
    [935000.000, 940000.000) = 3 
    [940000.000, 945000.000) = 0 
    [945000.000, 950000.000) = 2 
    [950000.000, 955000.000) = 2 
    [955000.000, 960000.000) = 1 
    [960000.000, 965000.000) = 2 
    [965000.000, 970000.000) = 0 
    [970000.000, 975000.000) = 0 
    [975000.000, 980000.000) = 0 
    [980000.000, 985000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 920080.881 us/op
     p(50.0000) = 948160.397 us/op
     p(90.0000) = 971173.076 us/op
     p(95.0000) = 981256.960 us/op
     p(99.0000) = 981256.960 us/op
     p(99.9000) = 981256.960 us/op
     p(99.9900) = 981256.960 us/op
     p(99.9990) = 981256.960 us/op
     p(99.9999) = 981256.960 us/op
    p(100.0000) = 981256.960 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 892210.345 us/op
# Warmup Iteration   2: 883249.727 us/op
# Warmup Iteration   3: 878555.261 us/op
# Warmup Iteration   4: 941626.339 us/op
# Warmup Iteration   5: 926717.460 us/op
Iteration   1: 936713.122 us/op
Iteration   2: 962864.348 us/op
Iteration   3: 962230.172 us/op
Iteration   4: 913687.685 us/op
Iteration   5: 940542.252 us/op
Iteration   6: 916681.706 us/op
Iteration   7: 914637.548 us/op
Iteration   8: 918193.541 us/op
Iteration   9: 927839.732 us/op
Iteration  10: 945496.718 us/op
Iteration  11: 924671.253 us/op
Iteration  12: 930126.700 us/op
Iteration  13: 888370.598 us/op
Iteration  14: 904554.216 us/op
Iteration  15: 921746.129 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 927223.715 ±(99.9%) 21571.560 us/op

  Histogram, us/op:
    [880000.000, 885000.000) = 0 
    [885000.000, 890000.000) = 1 
    [890000.000, 895000.000) = 0 
    [895000.000, 900000.000) = 0 
    [900000.000, 905000.000) = 1 
    [905000.000, 910000.000) = 0 
    [910000.000, 915000.000) = 2 
    [915000.000, 920000.000) = 2 
    [920000.000, 925000.000) = 2 
    [925000.000, 930000.000) = 1 
    [930000.000, 935000.000) = 1 
    [935000.000, 940000.000) = 1 
    [940000.000, 945000.000) = 1 
    [945000.000, 950000.000) = 1 
    [950000.000, 955000.000) = 0 
    [955000.000, 960000.000) = 0 
    [960000.000, 965000.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 888370.598 us/op
     p(50.0000) = 924671.253 us/op
     p(90.0000) = 962483.842 us/op
     p(95.0000) = 962864.348 us/op
     p(99.0000) = 962864.348 us/op
     p(99.9000) = 962864.348 us/op
     p(99.9900) = 962864.348 us/op
     p(99.9990) = 962864.348 us/op
     p(99.9999) = 962864.348 us/op
    p(100.0000) = 962864.348 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 851778.622 us/op
# Warmup Iteration   2: 890059.978 us/op
# Warmup Iteration   3: 919341.004 us/op
# Warmup Iteration   4: 974913.426 us/op
# Warmup Iteration   5: 963693.902 us/op
Iteration   1: 991281.313 us/op
Iteration   2: 970321.209 us/op
Iteration   3: 956939.595 us/op
Iteration   4: 986898.526 us/op
Iteration   5: 983443.809 us/op
Iteration   6: 962059.717 us/op
Iteration   7: 973338.931 us/op
Iteration   8: 985783.258 us/op
Iteration   9: 976147.493 us/op
Iteration  10: 985365.114 us/op
Iteration  11: 969953.189 us/op
Iteration  12: 992948.596 us/op
Iteration  13: 959048.541 us/op
Iteration  14: 943319.252 us/op
Iteration  15: 951046.240 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 972526.319 ±(99.9%) 16435.648 us/op

  Histogram, us/op:
    [ 940000.000,  945000.000) = 1 
    [ 945000.000,  950000.000) = 0 
    [ 950000.000,  955000.000) = 1 
    [ 955000.000,  960000.000) = 2 
    [ 960000.000,  965000.000) = 1 
    [ 965000.000,  970000.000) = 1 
    [ 970000.000,  975000.000) = 2 
    [ 975000.000,  980000.000) = 1 
    [ 980000.000,  985000.000) = 1 
    [ 985000.000,  990000.000) = 3 
    [ 990000.000,  995000.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 943319.252 us/op
     p(50.0000) = 973338.931 us/op
     p(90.0000) = 991948.226 us/op
     p(95.0000) = 992948.596 us/op
     p(99.0000) = 992948.596 us/op
     p(99.9000) = 992948.596 us/op
     p(99.9900) = 992948.596 us/op
     p(99.9990) = 992948.596 us/op
     p(99.9999) = 992948.596 us/op
    p(100.0000) = 992948.596 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 887670.318 us/op
# Warmup Iteration   2: 745025.917 us/op
# Warmup Iteration   3: 795202.074 us/op
# Warmup Iteration   4: 800029.468 us/op
# Warmup Iteration   5: 789707.312 us/op
Iteration   1: 778648.599 us/op
Iteration   2: 815168.575 us/op
Iteration   3: 823764.729 us/op
Iteration   4: 808142.625 us/op
Iteration   5: 790691.640 us/op
Iteration   6: 801279.718 us/op
Iteration   7: 790606.753 us/op
Iteration   8: 786629.760 us/op
Iteration   9: 796111.838 us/op
Iteration  10: 795213.736 us/op
Iteration  11: 779897.048 us/op
Iteration  12: 811297.524 us/op
Iteration  13: 782509.310 us/op
Iteration  14: 788479.092 us/op
Iteration  15: 817206.131 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 797709.805 ±(99.9%) 15381.457 us/op

  Histogram, us/op:
    [770000.000, 775000.000) = 0 
    [775000.000, 780000.000) = 2 
    [780000.000, 785000.000) = 1 
    [785000.000, 790000.000) = 2 
    [790000.000, 795000.000) = 2 
    [795000.000, 800000.000) = 2 
    [800000.000, 805000.000) = 1 
    [805000.000, 810000.000) = 1 
    [810000.000, 815000.000) = 1 
    [815000.000, 820000.000) = 2 
    [820000.000, 825000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 778648.599 us/op
     p(50.0000) = 795213.736 us/op
     p(90.0000) = 819829.570 us/op
     p(95.0000) = 823764.729 us/op
     p(99.0000) = 823764.729 us/op
     p(99.9000) = 823764.729 us/op
     p(99.9900) = 823764.729 us/op
     p(99.9990) = 823764.729 us/op
     p(99.9999) = 823764.729 us/op
    p(100.0000) = 823764.729 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5180.521 us/op
# Warmup Iteration   2: 2715.832 us/op
# Warmup Iteration   3: 598.254 us/op
# Warmup Iteration   4: 462.440 us/op
# Warmup Iteration   5: 438.721 us/op
Iteration   1: 461.952 us/op
Iteration   2: 418.178 us/op
Iteration   3: 484.665 us/op
Iteration   4: 492.305 us/op
Iteration   5: 446.923 us/op
Iteration   6: 485.106 us/op
Iteration   7: 424.261 us/op
Iteration   8: 448.192 us/op
Iteration   9: 431.467 us/op
Iteration  10: 489.860 us/op
Iteration  11: 403.402 us/op
Iteration  12: 432.594 us/op
Iteration  13: 438.844 us/op
Iteration  14: 427.391 us/op
Iteration  15: 476.011 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  N = 15
  mean =    450.743 ±(99.9%) 30.991 us/op

  Histogram, us/op:
    [400.000, 410.000) = 1 
    [410.000, 420.000) = 1 
    [420.000, 430.000) = 2 
    [430.000, 440.000) = 3 
    [440.000, 450.000) = 2 
    [450.000, 460.000) = 0 
    [460.000, 470.000) = 1 
    [470.000, 480.000) = 1 
    [480.000, 490.000) = 3 

  Percentiles, us/op:
      p(0.0000) =    403.402 us/op
     p(50.0000) =    446.923 us/op
     p(90.0000) =    490.838 us/op
     p(95.0000) =    492.305 us/op
     p(99.0000) =    492.305 us/op
     p(99.9000) =    492.305 us/op
     p(99.9900) =    492.305 us/op
     p(99.9990) =    492.305 us/op
     p(99.9999) =    492.305 us/op
    p(100.0000) =    492.305 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4663.574 us/op
# Warmup Iteration   2: 460.630 us/op
# Warmup Iteration   3: 305.526 us/op
# Warmup Iteration   4: 232.509 us/op
# Warmup Iteration   5: 268.993 us/op
Iteration   1: 215.859 us/op
Iteration   2: 232.050 us/op
Iteration   3: 308.973 us/op
Iteration   4: 223.950 us/op
Iteration   5: 268.901 us/op
Iteration   6: 213.638 us/op
Iteration   7: 232.768 us/op
Iteration   8: 369.282 us/op
Iteration   9: 220.150 us/op
Iteration  10: 227.856 us/op
Iteration  11: 289.837 us/op
Iteration  12: 228.490 us/op
Iteration  13: 243.569 us/op
Iteration  14: 268.040 us/op
Iteration  15: 227.498 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  N = 15
  mean =    251.391 ±(99.9%) 46.180 us/op

  Histogram, us/op:
    [200.000, 212.500) = 0 
    [212.500, 225.000) = 4 
    [225.000, 237.500) = 5 
    [237.500, 250.000) = 1 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 2 
    [275.000, 287.500) = 0 
    [287.500, 300.000) = 1 
    [300.000, 312.500) = 1 
    [312.500, 325.000) = 0 
    [325.000, 337.500) = 0 
    [337.500, 350.000) = 0 
    [350.000, 362.500) = 0 
    [362.500, 375.000) = 1 
    [375.000, 387.500) = 0 

  Percentiles, us/op:
      p(0.0000) =    213.638 us/op
     p(50.0000) =    232.050 us/op
     p(90.0000) =    333.097 us/op
     p(95.0000) =    369.282 us/op
     p(99.0000) =    369.282 us/op
     p(99.9000) =    369.282 us/op
     p(99.9900) =    369.282 us/op
     p(99.9990) =    369.282 us/op
     p(99.9999) =    369.282 us/op
    p(100.0000) =    369.282 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5831.818 us/op
# Warmup Iteration   2: 2431.348 us/op
# Warmup Iteration   3: 296.043 us/op
# Warmup Iteration   4: 297.623 us/op
# Warmup Iteration   5: 291.659 us/op
Iteration   1: 290.998 us/op
Iteration   2: 296.528 us/op
Iteration   3: 290.984 us/op
Iteration   4: 309.969 us/op
Iteration   5: 298.509 us/op
Iteration   6: 299.792 us/op
Iteration   7: 292.070 us/op
Iteration   8: 290.594 us/op
Iteration   9: 289.829 us/op
Iteration  10: 295.091 us/op
Iteration  11: 290.422 us/op
Iteration  12: 291.390 us/op
Iteration  13: 293.092 us/op
Iteration  14: 297.714 us/op
Iteration  15: 294.600 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  N = 15
  mean =    294.772 ±(99.9%) 5.664 us/op

  Histogram, us/op:
    [280.000, 282.500) = 0 
    [282.500, 285.000) = 0 
    [285.000, 287.500) = 0 
    [287.500, 290.000) = 1 
    [290.000, 292.500) = 6 
    [292.500, 295.000) = 2 
    [295.000, 297.500) = 2 
    [297.500, 300.000) = 3 
    [300.000, 302.500) = 0 
    [302.500, 305.000) = 0 
    [305.000, 307.500) = 0 

  Percentiles, us/op:
      p(0.0000) =    289.829 us/op
     p(50.0000) =    293.092 us/op
     p(90.0000) =    303.863 us/op
     p(95.0000) =    309.969 us/op
     p(99.0000) =    309.969 us/op
     p(99.9000) =    309.969 us/op
     p(99.9900) =    309.969 us/op
     p(99.9990) =    309.969 us/op
     p(99.9999) =    309.969 us/op
    p(100.0000) =    309.969 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4023.599 us/op
# Warmup Iteration   2: 478.748 us/op
# Warmup Iteration   3: 211.592 us/op
# Warmup Iteration   4: 345.691 us/op
# Warmup Iteration   5: 389.304 us/op
Iteration   1: 245.721 us/op
Iteration   2: 214.927 us/op
Iteration   3: 280.882 us/op
Iteration   4: 259.632 us/op
Iteration   5: 345.404 us/op
Iteration   6: 285.413 us/op
Iteration   7: 271.519 us/op
Iteration   8: 391.492 us/op
Iteration   9: 271.520 us/op
Iteration  10: 281.490 us/op
Iteration  11: 346.813 us/op
Iteration  12: 339.761 us/op
Iteration  13: 252.343 us/op
Iteration  14: 299.534 us/op
Iteration  15: 299.630 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  N = 15
  mean =    292.405 ±(99.9%) 49.461 us/op

  Histogram, us/op:
    [200.000, 212.500) = 0 
    [212.500, 225.000) = 1 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 1 
    [250.000, 262.500) = 2 
    [262.500, 275.000) = 2 
    [275.000, 287.500) = 3 
    [287.500, 300.000) = 2 
    [300.000, 312.500) = 0 
    [312.500, 325.000) = 0 
    [325.000, 337.500) = 0 
    [337.500, 350.000) = 3 
    [350.000, 362.500) = 0 
    [362.500, 375.000) = 0 
    [375.000, 387.500) = 0 

  Percentiles, us/op:
      p(0.0000) =    214.927 us/op
     p(50.0000) =    281.490 us/op
     p(90.0000) =    364.685 us/op
     p(95.0000) =    391.492 us/op
     p(99.0000) =    391.492 us/op
     p(99.9000) =    391.492 us/op
     p(99.9900) =    391.492 us/op
     p(99.9990) =    391.492 us/op
     p(99.9999) =    391.492 us/op
    p(100.0000) =    391.492 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1404106.038 us/op
# Warmup Iteration   2: 1371331.340 us/op
# Warmup Iteration   3: 1370655.811 us/op
# Warmup Iteration   4: 1362234.981 us/op
# Warmup Iteration   5: 1364992.532 us/op
Iteration   1: 1370262.151 us/op
Iteration   2: 1364338.290 us/op
Iteration   3: 1366106.816 us/op
Iteration   4: 1361230.516 us/op
Iteration   5: 1363305.706 us/op
Iteration   6: 1363201.669 us/op
Iteration   7: 1370016.712 us/op
Iteration   8: 1361028.972 us/op
Iteration   9: 1363664.994 us/op
Iteration  10: 1360365.690 us/op
Iteration  11: 1363205.696 us/op
Iteration  12: 1364707.703 us/op
Iteration  13: 1366794.283 us/op
Iteration  14: 1364685.202 us/op
Iteration  15: 1364966.813 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  N = 15
  mean = 1364525.414 ±(99.9%) 3091.950 us/op

  Histogram, us/op:
    [1360000.000, 1361000.000) = 1 
    [1361000.000, 1362000.000) = 2 
    [1362000.000, 1363000.000) = 0 
    [1363000.000, 1364000.000) = 4 
    [1364000.000, 1365000.000) = 4 
    [1365000.000, 1366000.000) = 0 
    [1366000.000, 1367000.000) = 2 
    [1367000.000, 1368000.000) = 0 
    [1368000.000, 1369000.000) = 0 
    [1369000.000, 1370000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1360365.690 us/op
     p(50.0000) = 1364338.290 us/op
     p(90.0000) = 1370114.888 us/op
     p(95.0000) = 1370262.151 us/op
     p(99.0000) = 1370262.151 us/op
     p(99.9000) = 1370262.151 us/op
     p(99.9900) = 1370262.151 us/op
     p(99.9990) = 1370262.151 us/op
     p(99.9999) = 1370262.151 us/op
    p(100.0000) = 1370262.151 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 165050.901 us/op
# Warmup Iteration   2: 144178.869 us/op
# Warmup Iteration   3: 133203.781 us/op
# Warmup Iteration   4: 136030.417 us/op
# Warmup Iteration   5: 141749.674 us/op
Iteration   1: 137256.690 us/op
Iteration   2: 134086.381 us/op
Iteration   3: 140958.110 us/op
Iteration   4: 140879.235 us/op
Iteration   5: 137402.382 us/op
Iteration   6: 133413.035 us/op
Iteration   7: 139614.605 us/op
Iteration   8: 139168.638 us/op
Iteration   9: 134665.020 us/op
Iteration  10: 136170.824 us/op
Iteration  11: 135645.044 us/op
Iteration  12: 137994.494 us/op
Iteration  13: 135596.216 us/op
Iteration  14: 141447.936 us/op
Iteration  15: 132574.599 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 15
  mean = 137124.881 ±(99.9%) 3049.396 us/op

  Histogram, us/op:
    [132000.000, 133000.000) = 1 
    [133000.000, 134000.000) = 1 
    [134000.000, 135000.000) = 2 
    [135000.000, 136000.000) = 2 
    [136000.000, 137000.000) = 1 
    [137000.000, 138000.000) = 3 
    [138000.000, 139000.000) = 0 
    [139000.000, 140000.000) = 2 
    [140000.000, 141000.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 132574.599 us/op
     p(50.0000) = 137256.690 us/op
     p(90.0000) = 141154.040 us/op
     p(95.0000) = 141447.936 us/op
     p(99.0000) = 141447.936 us/op
     p(99.9000) = 141447.936 us/op
     p(99.9900) = 141447.936 us/op
     p(99.9990) = 141447.936 us/op
     p(99.9999) = 141447.936 us/op
    p(100.0000) = 141447.936 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3611526.943 us/op
# Warmup Iteration   2: 4982439.784 us/op
# Warmup Iteration   3: 4901379.730 us/op
# Warmup Iteration   4: 4407322.630 us/op
# Warmup Iteration   5: 4639849.286 us/op
Iteration   1: 4556951.660 us/op
Iteration   2: 4702870.513 us/op
Iteration   3: 4510469.963 us/op
Iteration   4: 4720059.353 us/op
Iteration   5: 4779102.581 us/op
Iteration   6: 4797586.433 us/op
Iteration   7: 4536995.239 us/op
Iteration   8: 4697274.785 us/op
Iteration   9: 4736180.651 us/op
Iteration  10: 4483505.968 us/op
Iteration  11: 4678571.766 us/op
Iteration  12: 4661648.552 us/op
Iteration  13: 4773315.048 us/op
Iteration  14: 4531400.317 us/op
Iteration  15: 4551884.304 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 15
  mean = 4647854.476 ±(99.9%) 115782.622 us/op

  Histogram, us/op:
    [4400000.000, 4425000.000) = 0 
    [4425000.000, 4450000.000) = 0 
    [4450000.000, 4475000.000) = 0 
    [4475000.000, 4500000.000) = 1 
    [4500000.000, 4525000.000) = 1 
    [4525000.000, 4550000.000) = 2 
    [4550000.000, 4575000.000) = 2 
    [4575000.000, 4600000.000) = 0 
    [4600000.000, 4625000.000) = 0 
    [4625000.000, 4650000.000) = 0 
    [4650000.000, 4675000.000) = 1 
    [4675000.000, 4700000.000) = 2 
    [4700000.000, 4725000.000) = 2 
    [4725000.000, 4750000.000) = 1 
    [4750000.000, 4775000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 4483505.968 us/op
     p(50.0000) = 4678571.766 us/op
     p(90.0000) = 4786496.122 us/op
     p(95.0000) = 4797586.433 us/op
     p(99.0000) = 4797586.433 us/op
     p(99.9000) = 4797586.433 us/op
     p(99.9900) = 4797586.433 us/op
     p(99.9990) = 4797586.433 us/op
     p(99.9999) = 4797586.433 us/op
    p(100.0000) = 4797586.433 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 126.112 us/op
# Warmup Iteration   2: 24.136 us/op
# Warmup Iteration   3: 11.095 us/op
# Warmup Iteration   4: 9.660 us/op
# Warmup Iteration   5: 11.257 us/op
Iteration   1: 11.295 us/op
Iteration   2: 13.033 us/op
Iteration   3: 11.317 us/op
Iteration   4: 12.862 us/op
Iteration   5: 14.911 us/op
Iteration   6: 14.393 us/op
Iteration   7: 11.775 us/op
Iteration   8: 14.346 us/op
Iteration   9: 14.343 us/op
Iteration  10: 17.208 us/op
Iteration  11: 10.779 us/op
Iteration  12: 12.230 us/op
Iteration  13: 15.206 us/op
Iteration  14: 14.677 us/op
Iteration  15: 13.558 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     13.462 ±(99.9%) 1.906 us/op

  Histogram, us/op:
    [10.000, 10.500) = 0 
    [10.500, 11.000) = 1 
    [11.000, 11.500) = 2 
    [11.500, 12.000) = 1 
    [12.000, 12.500) = 1 
    [12.500, 13.000) = 1 
    [13.000, 13.500) = 1 
    [13.500, 14.000) = 1 
    [14.000, 14.500) = 3 
    [14.500, 15.000) = 2 
    [15.000, 15.500) = 1 
    [15.500, 16.000) = 0 
    [16.000, 16.500) = 0 
    [16.500, 17.000) = 0 
    [17.000, 17.500) = 1 

  Percentiles, us/op:
      p(0.0000) =     10.779 us/op
     p(50.0000) =     13.558 us/op
     p(90.0000) =     16.007 us/op
     p(95.0000) =     17.208 us/op
     p(99.0000) =     17.208 us/op
     p(99.9000) =     17.208 us/op
     p(99.9900) =     17.208 us/op
     p(99.9990) =     17.208 us/op
     p(99.9999) =     17.208 us/op
    p(100.0000) =     17.208 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 229.209 us/op
# Warmup Iteration   2: 37.299 us/op
# Warmup Iteration   3: 30.815 us/op
# Warmup Iteration   4: 26.930 us/op
# Warmup Iteration   5: 54.032 us/op
Iteration   1: 25.454 us/op
Iteration   2: 11.998 us/op
Iteration   3: 11.846 us/op
Iteration   4: 13.137 us/op
Iteration   5: 15.523 us/op
Iteration   6: 12.502 us/op
Iteration   7: 13.467 us/op
Iteration   8: 13.653 us/op
Iteration   9: 12.258 us/op
Iteration  10: 14.207 us/op
Iteration  11: 11.587 us/op
Iteration  12: 14.256 us/op
Iteration  13: 14.815 us/op
Iteration  14: 13.089 us/op
Iteration  15: 13.486 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     14.085 ±(99.9%) 3.571 us/op

  Histogram, us/op:
    [10.000, 11.250) = 0 
    [11.250, 12.500) = 4 
    [12.500, 13.750) = 6 
    [13.750, 15.000) = 3 
    [15.000, 16.250) = 1 
    [16.250, 17.500) = 0 
    [17.500, 18.750) = 0 
    [18.750, 20.000) = 0 
    [20.000, 21.250) = 0 
    [21.250, 22.500) = 0 
    [22.500, 23.750) = 0 
    [23.750, 25.000) = 0 
    [25.000, 26.250) = 1 
    [26.250, 27.500) = 0 
    [27.500, 28.750) = 0 

  Percentiles, us/op:
      p(0.0000) =     11.587 us/op
     p(50.0000) =     13.467 us/op
     p(90.0000) =     19.495 us/op
     p(95.0000) =     25.454 us/op
     p(99.0000) =     25.454 us/op
     p(99.9000) =     25.454 us/op
     p(99.9900) =     25.454 us/op
     p(99.9990) =     25.454 us/op
     p(99.9999) =     25.454 us/op
    p(100.0000) =     25.454 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 344.558 us/op
# Warmup Iteration   2: 43.437 us/op
# Warmup Iteration   3: 41.172 us/op
# Warmup Iteration   4: 52.629 us/op
# Warmup Iteration   5: 29.254 us/op
Iteration   1: 21.974 us/op
Iteration   2: 19.733 us/op
Iteration   3: 20.893 us/op
Iteration   4: 20.514 us/op
Iteration   5: 19.961 us/op
Iteration   6: 18.486 us/op
Iteration   7: 21.489 us/op
Iteration   8: 21.390 us/op
Iteration   9: 21.209 us/op
Iteration  10: 20.986 us/op
Iteration  11: 21.101 us/op
Iteration  12: 23.540 us/op
Iteration  13: 23.802 us/op
Iteration  14: 18.800 us/op
Iteration  15: 24.589 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     21.231 ±(99.9%) 1.849 us/op

  Histogram, us/op:
    [18.000, 18.500) = 1 
    [18.500, 19.000) = 1 
    [19.000, 19.500) = 0 
    [19.500, 20.000) = 2 
    [20.000, 20.500) = 0 
    [20.500, 21.000) = 3 
    [21.000, 21.500) = 4 
    [21.500, 22.000) = 1 
    [22.000, 22.500) = 0 
    [22.500, 23.000) = 0 
    [23.000, 23.500) = 0 
    [23.500, 24.000) = 2 
    [24.000, 24.500) = 0 

  Percentiles, us/op:
      p(0.0000) =     18.486 us/op
     p(50.0000) =     21.101 us/op
     p(90.0000) =     24.117 us/op
     p(95.0000) =     24.589 us/op
     p(99.0000) =     24.589 us/op
     p(99.9000) =     24.589 us/op
     p(99.9900) =     24.589 us/op
     p(99.9990) =     24.589 us/op
     p(99.9999) =     24.589 us/op
    p(100.0000) =     24.589 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 265.338 us/op
# Warmup Iteration   2: 15.160 us/op
# Warmup Iteration   3: 7.308 us/op
# Warmup Iteration   4: 7.545 us/op
# Warmup Iteration   5: 10.634 us/op
Iteration   1: 10.479 us/op
Iteration   2: 7.169 us/op
Iteration   3: 7.147 us/op
Iteration   4: 7.128 us/op
Iteration   5: 7.449 us/op
Iteration   6: 7.770 us/op
Iteration   7: 7.706 us/op
Iteration   8: 26.998 us/op
Iteration   9: 6.640 us/op
Iteration  10: 7.126 us/op
Iteration  11: 6.632 us/op
Iteration  12: 6.802 us/op
Iteration  13: 7.043 us/op
Iteration  14: 6.591 us/op
Iteration  15: 6.471 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =      8.610 ±(99.9%) 5.535 us/op

  Histogram, us/op:
    [ 0.000,  2.500) = 0 
    [ 2.500,  5.000) = 0 
    [ 5.000,  7.500) = 11 
    [ 7.500, 10.000) = 2 
    [10.000, 12.500) = 1 
    [12.500, 15.000) = 0 
    [15.000, 17.500) = 0 
    [17.500, 20.000) = 0 
    [20.000, 22.500) = 0 
    [22.500, 25.000) = 0 
    [25.000, 27.500) = 1 

  Percentiles, us/op:
      p(0.0000) =      6.471 us/op
     p(50.0000) =      7.128 us/op
     p(90.0000) =     17.087 us/op
     p(95.0000) =     26.998 us/op
     p(99.0000) =     26.998 us/op
     p(99.9000) =     26.998 us/op
     p(99.9900) =     26.998 us/op
     p(99.9990) =     26.998 us/op
     p(99.9999) =     26.998 us/op
    p(100.0000) =     26.998 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 263.146 us/op
# Warmup Iteration   2: 36.852 us/op
# Warmup Iteration   3: 32.065 us/op
# Warmup Iteration   4: 24.243 us/op
# Warmup Iteration   5: 22.695 us/op
Iteration   1: 16.195 us/op
Iteration   2: 69.126 us/op
Iteration   3: 16.267 us/op
Iteration   4: 15.606 us/op
Iteration   5: 15.013 us/op
Iteration   6: 15.738 us/op
Iteration   7: 15.487 us/op
Iteration   8: 16.014 us/op
Iteration   9: 16.698 us/op
Iteration  10: 16.542 us/op
Iteration  11: 17.044 us/op
Iteration  12: 17.140 us/op
Iteration  13: 15.420 us/op
Iteration  14: 14.879 us/op
Iteration  15: 16.196 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =     19.558 ±(99.9%) 14.677 us/op

  Histogram, us/op:
    [10.000, 15.000) = 1 
    [15.000, 20.000) = 13 
    [20.000, 25.000) = 0 
    [25.000, 30.000) = 0 
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 0 
    [40.000, 45.000) = 0 
    [45.000, 50.000) = 0 
    [50.000, 55.000) = 0 
    [55.000, 60.000) = 0 
    [60.000, 65.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     14.879 us/op
     p(50.0000) =     16.195 us/op
     p(90.0000) =     37.934 us/op
     p(95.0000) =     69.126 us/op
     p(99.0000) =     69.126 us/op
     p(99.9000) =     69.126 us/op
     p(99.9900) =     69.126 us/op
     p(99.9990) =     69.126 us/op
     p(99.9999) =     69.126 us/op
    p(100.0000) =     69.126 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 551.341 us/op
# Warmup Iteration   2: 130.354 us/op
# Warmup Iteration   3: 144.891 us/op
# Warmup Iteration   4: 133.340 us/op
# Warmup Iteration   5: 141.513 us/op
Iteration   1: 116.563 us/op
Iteration   2: 107.416 us/op
Iteration   3: 90.400 us/op
Iteration   4: 90.943 us/op
Iteration   5: 89.486 us/op
Iteration   6: 87.140 us/op
Iteration   7: 88.871 us/op
Iteration   8: 93.551 us/op
Iteration   9: 87.005 us/op
Iteration  10: 88.957 us/op
Iteration  11: 88.193 us/op
Iteration  12: 91.291 us/op
Iteration  13: 88.298 us/op
Iteration  14: 89.552 us/op
Iteration  15: 87.301 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =     92.331 ±(99.9%) 8.927 us/op

  Histogram, us/op:
    [ 80.000,  82.500) = 0 
    [ 82.500,  85.000) = 0 
    [ 85.000,  87.500) = 3 
    [ 87.500,  90.000) = 6 
    [ 90.000,  92.500) = 3 
    [ 92.500,  95.000) = 1 
    [ 95.000,  97.500) = 0 
    [ 97.500, 100.000) = 0 
    [100.000, 102.500) = 0 
    [102.500, 105.000) = 0 
    [105.000, 107.500) = 1 
    [107.500, 110.000) = 0 
    [110.000, 112.500) = 0 
    [112.500, 115.000) = 0 
    [115.000, 117.500) = 1 

  Percentiles, us/op:
      p(0.0000) =     87.005 us/op
     p(50.0000) =     89.486 us/op
     p(90.0000) =    111.075 us/op
     p(95.0000) =    116.563 us/op
     p(99.0000) =    116.563 us/op
     p(99.9000) =    116.563 us/op
     p(99.9900) =    116.563 us/op
     p(99.9990) =    116.563 us/op
     p(99.9999) =    116.563 us/op
    p(100.0000) =    116.563 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 372.918 us/op
# Warmup Iteration   2: 6.809 us/op
# Warmup Iteration   3: 6.589 us/op
# Warmup Iteration   4: 5.849 us/op
# Warmup Iteration   5: 6.203 us/op
Iteration   1: 6.973 us/op
Iteration   2: 6.270 us/op
Iteration   3: 7.073 us/op
Iteration   4: 6.845 us/op
Iteration   5: 6.703 us/op
Iteration   6: 6.387 us/op
Iteration   7: 6.948 us/op
Iteration   8: 6.979 us/op
Iteration   9: 6.580 us/op
Iteration  10: 6.854 us/op
Iteration  11: 5.916 us/op
Iteration  12: 7.417 us/op
Iteration  13: 6.624 us/op
Iteration  14: 7.120 us/op
Iteration  15: 6.465 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =      6.744 ±(99.9%) 0.407 us/op

  Histogram, us/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 1 
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 3 
    [6.500, 6.750) = 3 
    [6.750, 7.000) = 5 
    [7.000, 7.250) = 2 
    [7.250, 7.500) = 1 
    [7.500, 7.750) = 0 

  Percentiles, us/op:
      p(0.0000) =      5.916 us/op
     p(50.0000) =      6.845 us/op
     p(90.0000) =      7.239 us/op
     p(95.0000) =      7.417 us/op
     p(99.0000) =      7.417 us/op
     p(99.9000) =      7.417 us/op
     p(99.9900) =      7.417 us/op
     p(99.9990) =      7.417 us/op
     p(99.9999) =      7.417 us/op
    p(100.0000) =      7.417 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 256.437 us/op
# Warmup Iteration   2: 25.355 us/op
# Warmup Iteration   3: 28.722 us/op
# Warmup Iteration   4: 27.652 us/op
# Warmup Iteration   5: 15.846 us/op
Iteration   1: 16.508 us/op
Iteration   2: 15.997 us/op
Iteration   3: 15.633 us/op
Iteration   4: 15.150 us/op
Iteration   5: 15.788 us/op
Iteration   6: 18.175 us/op
Iteration   7: 15.707 us/op
Iteration   8: 16.215 us/op
Iteration   9: 16.176 us/op
Iteration  10: 16.694 us/op
Iteration  11: 15.806 us/op
Iteration  12: 15.257 us/op
Iteration  13: 16.333 us/op
Iteration  14: 15.462 us/op
Iteration  15: 16.217 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =     16.075 ±(99.9%) 0.782 us/op

  Histogram, us/op:
    [15.000, 15.250) = 1 
    [15.250, 15.500) = 2 
    [15.500, 15.750) = 2 
    [15.750, 16.000) = 3 
    [16.000, 16.250) = 3 
    [16.250, 16.500) = 1 
    [16.500, 16.750) = 2 
    [16.750, 17.000) = 0 
    [17.000, 17.250) = 0 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 0 
    [17.750, 18.000) = 0 
    [18.000, 18.250) = 1 
    [18.250, 18.500) = 0 
    [18.500, 18.750) = 0 

  Percentiles, us/op:
      p(0.0000) =     15.150 us/op
     p(50.0000) =     15.997 us/op
     p(90.0000) =     17.286 us/op
     p(95.0000) =     18.175 us/op
     p(99.0000) =     18.175 us/op
     p(99.9000) =     18.175 us/op
     p(99.9900) =     18.175 us/op
     p(99.9990) =     18.175 us/op
     p(99.9999) =     18.175 us/op
    p(100.0000) =     18.175 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 526.601 us/op
# Warmup Iteration   2: 156.640 us/op
# Warmup Iteration   3: 139.887 us/op
# Warmup Iteration   4: 132.710 us/op
# Warmup Iteration   5: 162.863 us/op
Iteration   1: 207.451 us/op
Iteration   2: 202.770 us/op
Iteration   3: 112.666 us/op
Iteration   4: 102.583 us/op
Iteration   5: 95.164 us/op
Iteration   6: 86.066 us/op
Iteration   7: 86.384 us/op
Iteration   8: 109.672 us/op
Iteration   9: 132.375 us/op
Iteration  10: 130.647 us/op
Iteration  11: 86.049 us/op
Iteration  12: 87.287 us/op
Iteration  13: 85.775 us/op
Iteration  14: 85.801 us/op
Iteration  15: 85.608 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =    113.087 ±(99.9%) 43.479 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 0 
    [ 25.000,  50.000) = 0 
    [ 50.000,  75.000) = 0 
    [ 75.000, 100.000) = 8 
    [100.000, 125.000) = 3 
    [125.000, 150.000) = 2 
    [150.000, 175.000) = 0 
    [175.000, 200.000) = 0 
    [200.000, 225.000) = 2 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     85.608 us/op
     p(50.0000) =     95.164 us/op
     p(90.0000) =    204.642 us/op
     p(95.0000) =    207.451 us/op
     p(99.0000) =    207.451 us/op
     p(99.9000) =    207.451 us/op
     p(99.9900) =    207.451 us/op
     p(99.9990) =    207.451 us/op
     p(99.9999) =    207.451 us/op
    p(100.0000) =    207.451 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 30579.989 us/op
# Warmup Iteration   2: 18114.807 us/op
# Warmup Iteration   3: 14939.462 us/op
# Warmup Iteration   4: 14644.215 us/op
# Warmup Iteration   5: 14699.595 us/op
Iteration   1: 14691.419 us/op
Iteration   2: 14504.360 us/op
Iteration   3: 14618.758 us/op
Iteration   4: 14666.348 us/op
Iteration   5: 14531.314 us/op
Iteration   6: 14786.910 us/op
Iteration   7: 14535.326 us/op
Iteration   8: 14565.408 us/op
Iteration   9: 14599.292 us/op
Iteration  10: 14412.216 us/op
Iteration  11: 14416.402 us/op
Iteration  12: 14396.756 us/op
Iteration  13: 14404.822 us/op
Iteration  14: 14672.526 us/op
Iteration  15: 14428.514 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  N = 15
  mean =  14548.691 ±(99.9%) 131.195 us/op

  Histogram, us/op:
    [14300.000, 14350.000) = 0 
    [14350.000, 14400.000) = 1 
    [14400.000, 14450.000) = 4 
    [14450.000, 14500.000) = 0 
    [14500.000, 14550.000) = 3 
    [14550.000, 14600.000) = 2 
    [14600.000, 14650.000) = 1 
    [14650.000, 14700.000) = 3 
    [14700.000, 14750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  14396.756 us/op
     p(50.0000) =  14535.326 us/op
     p(90.0000) =  14729.615 us/op
     p(95.0000) =  14786.910 us/op
     p(99.0000) =  14786.910 us/op
     p(99.9000) =  14786.910 us/op
     p(99.9900) =  14786.910 us/op
     p(99.9990) =  14786.910 us/op
     p(99.9999) =  14786.910 us/op
    p(100.0000) =  14786.910 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 15119.658 us/op
# Warmup Iteration   2: 4511.813 us/op
# Warmup Iteration   3: 3470.680 us/op
# Warmup Iteration   4: 3496.465 us/op
# Warmup Iteration   5: 3483.459 us/op
Iteration   1: 3517.406 us/op
Iteration   2: 8773.628 us/op
Iteration   3: 1805.830 us/op
Iteration   4: 1818.755 us/op
Iteration   5: 1808.135 us/op
Iteration   6: 1924.050 us/op
Iteration   7: 1392.249 us/op
Iteration   8: 1395.462 us/op
Iteration   9: 1358.599 us/op
Iteration  10: 1428.225 us/op
Iteration  11: 1117.031 us/op
Iteration  12: 1079.627 us/op
Iteration  13: 1090.642 us/op
Iteration  14: 1110.132 us/op
Iteration  15: 1106.592 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean =   2048.424 ±(99.9%) 2095.300 us/op

  Histogram, us/op:
    [1000.000, 1500.000) = 9 
    [1500.000, 2000.000) = 4 
    [2000.000, 2500.000) = 0 
    [2500.000, 3000.000) = 0 
    [3000.000, 3500.000) = 0 
    [3500.000, 4000.000) = 1 
    [4000.000, 4500.000) = 0 
    [4500.000, 5000.000) = 0 
    [5000.000, 5500.000) = 0 
    [5500.000, 6000.000) = 0 
    [6000.000, 6500.000) = 0 
    [6500.000, 7000.000) = 0 
    [7000.000, 7500.000) = 0 
    [7500.000, 8000.000) = 0 
    [8000.000, 8500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   1079.627 us/op
     p(50.0000) =   1395.462 us/op
     p(90.0000) =   5619.895 us/op
     p(95.0000) =   8773.628 us/op
     p(99.0000) =   8773.628 us/op
     p(99.9000) =   8773.628 us/op
     p(99.9900) =   8773.628 us/op
     p(99.9990) =   8773.628 us/op
     p(99.9999) =   8773.628 us/op
    p(100.0000) =   8773.628 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 82464.318 us/op
# Warmup Iteration   2: 37654.260 us/op
# Warmup Iteration   3: 31227.505 us/op
# Warmup Iteration   4: 31204.534 us/op
# Warmup Iteration   5: 31468.606 us/op
Iteration   1: 31317.322 us/op
Iteration   2: 111084.245 us/op
Iteration   3: 31404.388 us/op
Iteration   4: 33464.586 us/op
Iteration   5: 32390.117 us/op
Iteration   6: 32403.183 us/op
Iteration   7: 33081.331 us/op
Iteration   8: 32574.619 us/op
Iteration   9: 32721.748 us/op
Iteration  10: 112584.058 us/op
Iteration  11: 111712.217 us/op
Iteration  12: 111787.850 us/op
Iteration  13: 111824.423 us/op
Iteration  14: 112850.142 us/op
Iteration  15: 112371.486 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean =  69571.448 ±(99.9%) 43955.726 us/op

  Histogram, us/op:
    [ 30000.000,  35000.000) = 8 
    [ 35000.000,  40000.000) = 0 
    [ 40000.000,  45000.000) = 0 
    [ 45000.000,  50000.000) = 0 
    [ 50000.000,  55000.000) = 0 
    [ 55000.000,  60000.000) = 0 
    [ 60000.000,  65000.000) = 0 
    [ 65000.000,  70000.000) = 0 
    [ 70000.000,  75000.000) = 0 
    [ 75000.000,  80000.000) = 0 
    [ 80000.000,  85000.000) = 0 
    [ 85000.000,  90000.000) = 0 
    [ 90000.000,  95000.000) = 0 
    [ 95000.000, 100000.000) = 0 
    [100000.000, 105000.000) = 0 
    [105000.000, 110000.000) = 0 
    [110000.000, 115000.000) = 7 

  Percentiles, us/op:
      p(0.0000) =  31317.322 us/op
     p(50.0000) =  33464.586 us/op
     p(90.0000) = 112690.492 us/op
     p(95.0000) = 112850.142 us/op
     p(99.0000) = 112850.142 us/op
     p(99.9000) = 112850.142 us/op
     p(99.9900) = 112850.142 us/op
     p(99.9990) = 112850.142 us/op
     p(99.9999) = 112850.142 us/op
    p(100.0000) = 112850.142 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3251980.768 us/op
# Warmup Iteration   2: 11625402.275 us/op
# Warmup Iteration   3: 11352898.625 us/op
# Warmup Iteration   4: 11325943.968 us/op
# Warmup Iteration   5: 11358570.557 us/op
Iteration   1: 11313855.075 us/op
Iteration   2: 11313047.121 us/op
Iteration   3: 11408434.487 us/op
Iteration   4: 11338692.847 us/op
Iteration   5: 11326732.145 us/op
Iteration   6: 11321532.706 us/op
Iteration   7: 11360819.751 us/op
Iteration   8: 11374188.975 us/op
Iteration   9: 11377842.836 us/op
Iteration  10: 11357333.453 us/op
Iteration  11: 11317500.861 us/op
Iteration  12: 11335128.139 us/op
Iteration  13: 11368720.292 us/op
Iteration  14: 11344542.610 us/op
Iteration  15: 11368739.617 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean = 11348474.061 ±(99.9%) 30063.250 us/op

  Histogram, us/op:
    [11310000.000, 11320000.000) = 3 
    [11320000.000, 11330000.000) = 2 
    [11330000.000, 11340000.000) = 2 
    [11340000.000, 11350000.000) = 1 
    [11350000.000, 11360000.000) = 1 
    [11360000.000, 11370000.000) = 3 
    [11370000.000, 11380000.000) = 2 
    [11380000.000, 11390000.000) = 0 
    [11390000.000, 11400000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 11313047.121 us/op
     p(50.0000) = 11344542.610 us/op
     p(90.0000) = 11390079.496 us/op
     p(95.0000) = 11408434.487 us/op
     p(99.0000) = 11408434.487 us/op
     p(99.9000) = 11408434.487 us/op
     p(99.9900) = 11408434.487 us/op
     p(99.9990) = 11408434.487 us/op
     p(99.9999) = 11408434.487 us/op
    p(100.0000) = 11408434.487 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 19603.849 us/op
# Warmup Iteration   2: 7753.214 us/op
# Warmup Iteration   3: 1918.980 us/op
# Warmup Iteration   4: 1889.184 us/op
# Warmup Iteration   5: 1893.411 us/op
Iteration   1: 1868.545 us/op
Iteration   2: 1865.752 us/op
Iteration   3: 1892.789 us/op
Iteration   4: 1885.305 us/op
Iteration   5: 1877.589 us/op
Iteration   6: 1877.933 us/op
Iteration   7: 1893.609 us/op
Iteration   8: 1873.871 us/op
Iteration   9: 1899.052 us/op
Iteration  10: 1879.251 us/op
Iteration  11: 1885.311 us/op
Iteration  12: 1871.061 us/op
Iteration  13: 1904.495 us/op
Iteration  14: 1865.918 us/op
Iteration  15: 1884.227 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  N = 15
  mean =   1881.647 ±(99.9%) 12.797 us/op

  Histogram, us/op:
    [1860.000, 1865.000) = 0 
    [1865.000, 1870.000) = 3 
    [1870.000, 1875.000) = 2 
    [1875.000, 1880.000) = 3 
    [1880.000, 1885.000) = 1 
    [1885.000, 1890.000) = 2 
    [1890.000, 1895.000) = 2 
    [1895.000, 1900.000) = 1 
    [1900.000, 1905.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   1865.752 us/op
     p(50.0000) =   1879.251 us/op
     p(90.0000) =   1901.229 us/op
     p(95.0000) =   1904.495 us/op
     p(99.0000) =   1904.495 us/op
     p(99.9000) =   1904.495 us/op
     p(99.9900) =   1904.495 us/op
     p(99.9990) =   1904.495 us/op
     p(99.9999) =   1904.495 us/op
    p(100.0000) =   1904.495 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 60584.948 us/op
# Warmup Iteration   2: 62625.630 us/op
# Warmup Iteration   3: 62109.207 us/op
# Warmup Iteration   4: 62085.894 us/op
# Warmup Iteration   5: 62298.568 us/op
Iteration   1: 62282.754 us/op
Iteration   2: 62518.380 us/op
Iteration   3: 62175.756 us/op
Iteration   4: 62004.370 us/op
Iteration   5: 62883.838 us/op
Iteration   6: 62222.455 us/op
Iteration   7: 62216.417 us/op
Iteration   8: 62229.335 us/op
Iteration   9: 62243.402 us/op
Iteration  10: 62224.498 us/op
Iteration  11: 62298.107 us/op
Iteration  12: 62294.972 us/op
Iteration  13: 62461.422 us/op
Iteration  14: 62254.647 us/op
Iteration  15: 62516.104 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  N = 15
  mean =  62321.764 ±(99.9%) 218.780 us/op

  Histogram, us/op:
    [62000.000, 62050.000) = 1 
    [62050.000, 62100.000) = 0 
    [62100.000, 62150.000) = 0 
    [62150.000, 62200.000) = 1 
    [62200.000, 62250.000) = 5 
    [62250.000, 62300.000) = 4 
    [62300.000, 62350.000) = 0 
    [62350.000, 62400.000) = 0 
    [62400.000, 62450.000) = 0 
    [62450.000, 62500.000) = 1 
    [62500.000, 62550.000) = 2 
    [62550.000, 62600.000) = 0 
    [62600.000, 62650.000) = 0 
    [62650.000, 62700.000) = 0 
    [62700.000, 62750.000) = 0 
    [62750.000, 62800.000) = 0 
    [62800.000, 62850.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  62004.370 us/op
     p(50.0000) =  62254.647 us/op
     p(90.0000) =  62664.563 us/op
     p(95.0000) =  62883.838 us/op
     p(99.0000) =  62883.838 us/op
     p(99.9000) =  62883.838 us/op
     p(99.9900) =  62883.838 us/op
     p(99.9990) =  62883.838 us/op
     p(99.9999) =  62883.838 us/op
    p(100.0000) =  62883.838 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1629448.748 us/op
# Warmup Iteration   2: 1708591.695 us/op
# Warmup Iteration   3: 1703423.061 us/op
# Warmup Iteration   4: 1704390.784 us/op
# Warmup Iteration   5: 1704023.739 us/op
Iteration   1: 1701435.420 us/op
Iteration   2: 1703926.905 us/op
Iteration   3: 1703908.274 us/op
Iteration   4: 1704159.759 us/op
Iteration   5: 1703415.489 us/op
Iteration   6: 1705151.891 us/op
Iteration   7: 1703771.763 us/op
Iteration   8: 1702404.755 us/op
Iteration   9: 1704082.559 us/op
Iteration  10: 1703867.301 us/op
Iteration  11: 1703722.722 us/op
Iteration  12: 1703822.573 us/op
Iteration  13: 1705592.355 us/op
Iteration  14: 1712354.631 us/op
Iteration  15: 1719617.677 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  N = 15
  mean = 1705415.605 ±(99.9%) 4925.664 us/op

  Histogram, us/op:
    [1700000.000, 1701250.000) = 0 
    [1701250.000, 1702500.000) = 2 
    [1702500.000, 1703750.000) = 2 
    [1703750.000, 1705000.000) = 7 
    [1705000.000, 1706250.000) = 2 
    [1706250.000, 1707500.000) = 0 
    [1707500.000, 1708750.000) = 0 
    [1708750.000, 1710000.000) = 0 
    [1710000.000, 1711250.000) = 0 
    [1711250.000, 1712500.000) = 1 
    [1712500.000, 1713750.000) = 0 
    [1713750.000, 1715000.000) = 0 
    [1715000.000, 1716250.000) = 0 
    [1716250.000, 1717500.000) = 0 
    [1717500.000, 1718750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1701435.420 us/op
     p(50.0000) = 1703908.274 us/op
     p(90.0000) = 1715259.849 us/op
     p(95.0000) = 1719617.677 us/op
     p(99.0000) = 1719617.677 us/op
     p(99.9000) = 1719617.677 us/op
     p(99.9900) = 1719617.677 us/op
     p(99.9990) = 1719617.677 us/op
     p(99.9999) = 1719617.677 us/op
    p(100.0000) = 1719617.677 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 51.738 us/op
# Warmup Iteration   2: 12.127 us/op
# Warmup Iteration   3: 11.387 us/op
# Warmup Iteration   4: 11.314 us/op
# Warmup Iteration   5: 12.146 us/op
Iteration   1: 63.333 us/op
Iteration   2: 14.844 us/op
Iteration   3: 11.539 us/op
Iteration   4: 12.756 us/op
Iteration   5: 15.782 us/op
Iteration   6: 11.240 us/op
Iteration   7: 11.566 us/op
Iteration   8: 12.372 us/op
Iteration   9: 15.919 us/op
Iteration  10: 15.322 us/op
Iteration  11: 13.188 us/op
Iteration  12: 12.480 us/op
Iteration  13: 66.114 us/op
Iteration  14: 14.973 us/op
Iteration  15: 11.151 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  N = 15
  mean =     20.172 ±(99.9%) 19.428 us/op

  Histogram, us/op:
    [10.000, 15.000) = 10 
    [15.000, 20.000) = 3 
    [20.000, 25.000) = 0 
    [25.000, 30.000) = 0 
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 0 
    [40.000, 45.000) = 0 
    [45.000, 50.000) = 0 
    [50.000, 55.000) = 0 
    [55.000, 60.000) = 0 
    [60.000, 65.000) = 1 

  Percentiles, us/op:
      p(0.0000) =     11.151 us/op
     p(50.0000) =     13.188 us/op
     p(90.0000) =     64.445 us/op
     p(95.0000) =     66.114 us/op
     p(99.0000) =     66.114 us/op
     p(99.9000) =     66.114 us/op
     p(99.9900) =     66.114 us/op
     p(99.9990) =     66.114 us/op
     p(99.9999) =     66.114 us/op
    p(100.0000) =     66.114 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 20586.271 us/op
# Warmup Iteration   2: 12782.890 us/op
# Warmup Iteration   3: 7686.243 us/op
# Warmup Iteration   4: 7558.434 us/op
# Warmup Iteration   5: 7699.860 us/op
Iteration   1: 7714.948 us/op
Iteration   2: 7578.267 us/op
Iteration   3: 7698.916 us/op
Iteration   4: 7684.901 us/op
Iteration   5: 7699.080 us/op
Iteration   6: 7750.866 us/op
Iteration   7: 7652.260 us/op
Iteration   8: 7687.141 us/op
Iteration   9: 7716.530 us/op
Iteration  10: 7681.084 us/op
Iteration  11: 7742.763 us/op
Iteration  12: 7696.830 us/op
Iteration  13: 7695.312 us/op
Iteration  14: 7709.536 us/op
Iteration  15: 7750.538 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  N = 15
  mean =   7697.265 ±(99.9%) 45.472 us/op

  Histogram, us/op:
    [7500.000, 7525.000) = 0 
    [7525.000, 7550.000) = 0 
    [7550.000, 7575.000) = 0 
    [7575.000, 7600.000) = 1 
    [7600.000, 7625.000) = 0 
    [7625.000, 7650.000) = 0 
    [7650.000, 7675.000) = 1 
    [7675.000, 7700.000) = 7 
    [7700.000, 7725.000) = 3 
    [7725.000, 7750.000) = 1 
    [7750.000, 7775.000) = 2 

  Percentiles, us/op:
      p(0.0000) =   7578.267 us/op
     p(50.0000) =   7698.916 us/op
     p(90.0000) =   7750.669 us/op
     p(95.0000) =   7750.866 us/op
     p(99.0000) =   7750.866 us/op
     p(99.9000) =   7750.866 us/op
     p(99.9900) =   7750.866 us/op
     p(99.9990) =   7750.866 us/op
     p(99.9999) =   7750.866 us/op
    p(100.0000) =   7750.866 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 66042.673 us/op
# Warmup Iteration   2: 50174.806 us/op
# Warmup Iteration   3: 33957.263 us/op
# Warmup Iteration   4: 32548.016 us/op
# Warmup Iteration   5: 33290.579 us/op
Iteration   1: 34148.378 us/op
Iteration   2: 30392.901 us/op
Iteration   3: 32869.734 us/op
Iteration   4: 32516.915 us/op
Iteration   5: 35774.730 us/op
Iteration   6: 31014.478 us/op
Iteration   7: 34817.047 us/op
Iteration   8: 39974.768 us/op
Iteration   9: 32118.939 us/op
Iteration  10: 33636.941 us/op
Iteration  11: 34061.548 us/op
Iteration  12: 39410.316 us/op
Iteration  13: 33440.105 us/op
Iteration  14: 32837.359 us/op
Iteration  15: 31175.527 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  N = 15
  mean =  33879.312 ±(99.9%) 2959.753 us/op

  Histogram, us/op:
    [30000.000, 31000.000) = 1 
    [31000.000, 32000.000) = 2 
    [32000.000, 33000.000) = 4 
    [33000.000, 34000.000) = 2 
    [34000.000, 35000.000) = 3 
    [35000.000, 36000.000) = 1 
    [36000.000, 37000.000) = 0 
    [37000.000, 38000.000) = 0 
    [38000.000, 39000.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  30392.901 us/op
     p(50.0000) =  33440.105 us/op
     p(90.0000) =  39636.097 us/op
     p(95.0000) =  39974.768 us/op
     p(99.0000) =  39974.768 us/op
     p(99.9000) =  39974.768 us/op
     p(99.9900) =  39974.768 us/op
     p(99.9990) =  39974.768 us/op
     p(99.9999) =  39974.768 us/op
    p(100.0000) =  39974.768 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 65491.497 us/op
# Warmup Iteration   2: 43227.126 us/op
# Warmup Iteration   3: 33327.333 us/op
# Warmup Iteration   4: 33682.536 us/op
# Warmup Iteration   5: 33345.076 us/op
Iteration   1: 33363.920 us/op
Iteration   2: 33278.583 us/op
Iteration   3: 33679.338 us/op
Iteration   4: 33625.347 us/op
Iteration   5: 33539.951 us/op
Iteration   6: 33439.969 us/op
Iteration   7: 33329.376 us/op
Iteration   8: 33521.924 us/op
Iteration   9: 33275.592 us/op
Iteration  10: 33353.864 us/op
Iteration  11: 33310.133 us/op
Iteration  12: 33403.288 us/op
Iteration  13: 33476.103 us/op
Iteration  14: 33548.036 us/op
Iteration  15: 33313.358 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  N = 15
  mean =  33430.585 ±(99.9%) 137.847 us/op

  Histogram, us/op:
    [33200.000, 33250.000) = 0 
    [33250.000, 33300.000) = 2 
    [33300.000, 33350.000) = 3 
    [33350.000, 33400.000) = 2 
    [33400.000, 33450.000) = 2 
    [33450.000, 33500.000) = 1 
    [33500.000, 33550.000) = 3 
    [33550.000, 33600.000) = 0 
    [33600.000, 33650.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  33275.592 us/op
     p(50.0000) =  33403.288 us/op
     p(90.0000) =  33646.943 us/op
     p(95.0000) =  33679.338 us/op
     p(99.0000) =  33679.338 us/op
     p(99.9000) =  33679.338 us/op
     p(99.9900) =  33679.338 us/op
     p(99.9990) =  33679.338 us/op
     p(99.9999) =  33679.338 us/op
    p(100.0000) =  33679.338 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 45055.792 us/op
# Warmup Iteration   2: 23030.658 us/op
# Warmup Iteration   3: 23061.938 us/op
# Warmup Iteration   4: 23094.648 us/op
# Warmup Iteration   5: 26943.172 us/op
Iteration   1: 21771.116 us/op
Iteration   2: 21810.385 us/op
Iteration   3: 22205.362 us/op
Iteration   4: 22225.921 us/op
Iteration   5: 22161.072 us/op
Iteration   6: 22169.275 us/op
Iteration   7: 22256.470 us/op
Iteration   8: 21897.562 us/op
Iteration   9: 21794.192 us/op
Iteration  10: 21826.400 us/op
Iteration  11: 21683.808 us/op
Iteration  12: 21958.855 us/op
Iteration  13: 21782.996 us/op
Iteration  14: 21840.539 us/op
Iteration  15: 22042.662 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  N = 15
  mean =  21961.774 ±(99.9%) 209.767 us/op

  Histogram, us/op:
    [21600.000, 21650.000) = 0 
    [21650.000, 21700.000) = 1 
    [21700.000, 21750.000) = 0 
    [21750.000, 21800.000) = 3 
    [21800.000, 21850.000) = 3 
    [21850.000, 21900.000) = 1 
    [21900.000, 21950.000) = 0 
    [21950.000, 22000.000) = 1 
    [22000.000, 22050.000) = 1 
    [22050.000, 22100.000) = 0 
    [22100.000, 22150.000) = 0 
    [22150.000, 22200.000) = 2 
    [22200.000, 22250.000) = 2 

  Percentiles, us/op:
      p(0.0000) =  21683.808 us/op
     p(50.0000) =  21897.562 us/op
     p(90.0000) =  22238.141 us/op
     p(95.0000) =  22256.470 us/op
     p(99.0000) =  22256.470 us/op
     p(99.9000) =  22256.470 us/op
     p(99.9900) =  22256.470 us/op
     p(99.9990) =  22256.470 us/op
     p(99.9999) =  22256.470 us/op
    p(100.0000) =  22256.470 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 27104.960 us/op
# Warmup Iteration   2: 19488.321 us/op
# Warmup Iteration   3: 13947.426 us/op
# Warmup Iteration   4: 14058.381 us/op
# Warmup Iteration   5: 14088.935 us/op
Iteration   1: 13907.231 us/op
Iteration   2: 14021.164 us/op
Iteration   3: 13920.238 us/op
Iteration   4: 13883.828 us/op
Iteration   5: 13900.325 us/op
Iteration   6: 13854.503 us/op
Iteration   7: 13912.566 us/op
Iteration   8: 13954.115 us/op
Iteration   9: 13909.393 us/op
Iteration  10: 13896.979 us/op
Iteration  11: 14050.010 us/op
Iteration  12: 13956.266 us/op
Iteration  13: 14123.432 us/op
Iteration  14: 13991.913 us/op
Iteration  15: 13979.663 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  N = 15
  mean =  13950.775 ±(99.9%) 76.864 us/op

  Histogram, us/op:
    [13800.000, 13825.000) = 0 
    [13825.000, 13850.000) = 0 
    [13850.000, 13875.000) = 1 
    [13875.000, 13900.000) = 2 
    [13900.000, 13925.000) = 5 
    [13925.000, 13950.000) = 0 
    [13950.000, 13975.000) = 2 
    [13975.000, 14000.000) = 2 
    [14000.000, 14025.000) = 1 
    [14025.000, 14050.000) = 0 
    [14050.000, 14075.000) = 1 
    [14075.000, 14100.000) = 0 
    [14100.000, 14125.000) = 1 
    [14125.000, 14150.000) = 0 
    [14150.000, 14175.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  13854.503 us/op
     p(50.0000) =  13920.238 us/op
     p(90.0000) =  14079.379 us/op
     p(95.0000) =  14123.432 us/op
     p(99.0000) =  14123.432 us/op
     p(99.9000) =  14123.432 us/op
     p(99.9900) =  14123.432 us/op
     p(99.9990) =  14123.432 us/op
     p(99.9999) =  14123.432 us/op
    p(100.0000) =  14123.432 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 74863.989 us/op
# Warmup Iteration   2: 42150.751 us/op
# Warmup Iteration   3: 33444.472 us/op
# Warmup Iteration   4: 42816.576 us/op
# Warmup Iteration   5: 31644.543 us/op
Iteration   1: 31003.066 us/op
Iteration   2: 31915.890 us/op
Iteration   3: 32070.127 us/op
Iteration   4: 31349.030 us/op
Iteration   5: 31830.575 us/op
Iteration   6: 30904.067 us/op
Iteration   7: 32966.224 us/op
Iteration   8: 31316.084 us/op
Iteration   9: 31215.197 us/op
Iteration  10: 33049.025 us/op
Iteration  11: 38462.861 us/op
Iteration  12: 28458.072 us/op
Iteration  13: 27854.551 us/op
Iteration  14: 32983.879 us/op
Iteration  15: 28947.851 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  N = 15
  mean =  31621.767 ±(99.9%) 2640.592 us/op

  Histogram, us/op:
    [20000.000, 21250.000) = 0 
    [21250.000, 22500.000) = 0 
    [22500.000, 23750.000) = 0 
    [23750.000, 25000.000) = 0 
    [25000.000, 26250.000) = 0 
    [26250.000, 27500.000) = 0 
    [27500.000, 28750.000) = 2 
    [28750.000, 30000.000) = 1 
    [30000.000, 31250.000) = 3 
    [31250.000, 32500.000) = 5 
    [32500.000, 33750.000) = 3 
    [33750.000, 35000.000) = 0 
    [35000.000, 36250.000) = 0 
    [36250.000, 37500.000) = 0 
    [37500.000, 38750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  27854.551 us/op
     p(50.0000) =  31349.030 us/op
     p(90.0000) =  35214.559 us/op
     p(95.0000) =  38462.861 us/op
     p(99.0000) =  38462.861 us/op
     p(99.9000) =  38462.861 us/op
     p(99.9900) =  38462.861 us/op
     p(99.9990) =  38462.861 us/op
     p(99.9999) =  38462.861 us/op
    p(100.0000) =  38462.861 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 15253.171 us/op
# Warmup Iteration   2: 1448.727 us/op
# Warmup Iteration   3: 1253.836 us/op
# Warmup Iteration   4: 1245.054 us/op
# Warmup Iteration   5: 1225.740 us/op
Iteration   1: 1139.545 us/op
Iteration   2: 1147.525 us/op
Iteration   3: 1127.272 us/op
Iteration   4: 1109.736 us/op
Iteration   5: 958.703 us/op
Iteration   6: 921.086 us/op
Iteration   7: 830.913 us/op
Iteration   8: 855.513 us/op
Iteration   9: 873.363 us/op
Iteration  10: 817.715 us/op
Iteration  11: 983.958 us/op
Iteration  12: 845.320 us/op
Iteration  13: 819.435 us/op
Iteration  14: 837.501 us/op
Iteration  15: 839.061 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean =    940.443 ±(99.9%) 137.629 us/op

  Histogram, us/op:
    [ 800.000,  825.000) = 2 
    [ 825.000,  850.000) = 4 
    [ 850.000,  875.000) = 2 
    [ 875.000,  900.000) = 0 
    [ 900.000,  925.000) = 1 
    [ 925.000,  950.000) = 0 
    [ 950.000,  975.000) = 1 
    [ 975.000, 1000.000) = 1 
    [1000.000, 1025.000) = 0 
    [1025.000, 1050.000) = 0 
    [1050.000, 1075.000) = 0 
    [1075.000, 1100.000) = 0 
    [1100.000, 1125.000) = 1 
    [1125.000, 1150.000) = 3 
    [1150.000, 1175.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    817.715 us/op
     p(50.0000) =    873.363 us/op
     p(90.0000) =   1142.737 us/op
     p(95.0000) =   1147.525 us/op
     p(99.0000) =   1147.525 us/op
     p(99.9000) =   1147.525 us/op
     p(99.9900) =   1147.525 us/op
     p(99.9990) =   1147.525 us/op
     p(99.9999) =   1147.525 us/op
    p(100.0000) =   1147.525 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 22830.409 us/op
# Warmup Iteration   2: 8289.398 us/op
# Warmup Iteration   3: 8215.515 us/op
# Warmup Iteration   4: 8134.533 us/op
# Warmup Iteration   5: 7983.566 us/op
Iteration   1: 7973.679 us/op
Iteration   2: 8078.044 us/op
Iteration   3: 7744.164 us/op
Iteration   4: 7151.853 us/op
Iteration   5: 6769.852 us/op
Iteration   6: 7193.027 us/op
Iteration   7: 6960.812 us/op
Iteration   8: 7033.425 us/op
Iteration   9: 6846.612 us/op
Iteration  10: 6741.406 us/op
Iteration  11: 6719.225 us/op
Iteration  12: 6657.181 us/op
Iteration  13: 6628.841 us/op
Iteration  14: 6916.475 us/op
Iteration  15: 7122.505 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean =   7102.473 ±(99.9%) 500.533 us/op

  Histogram, us/op:
    [6000.000, 6250.000) = 0 
    [6250.000, 6500.000) = 0 
    [6500.000, 6750.000) = 4 
    [6750.000, 7000.000) = 4 
    [7000.000, 7250.000) = 4 
    [7250.000, 7500.000) = 0 
    [7500.000, 7750.000) = 1 
    [7750.000, 8000.000) = 1 
    [8000.000, 8250.000) = 1 
    [8250.000, 8500.000) = 0 
    [8500.000, 8750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   6628.841 us/op
     p(50.0000) =   6960.812 us/op
     p(90.0000) =   8015.425 us/op
     p(95.0000) =   8078.044 us/op
     p(99.0000) =   8078.044 us/op
     p(99.9000) =   8078.044 us/op
     p(99.9900) =   8078.044 us/op
     p(99.9990) =   8078.044 us/op
     p(99.9999) =   8078.044 us/op
    p(100.0000) =   8078.044 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 123523.895 us/op
# Warmup Iteration   2: 109643.818 us/op
# Warmup Iteration   3: 109238.244 us/op
# Warmup Iteration   4: 109506.446 us/op
# Warmup Iteration   5: 109355.999 us/op
Iteration   1: 109219.700 us/op
Iteration   2: 108494.425 us/op
Iteration   3: 105566.880 us/op
Iteration   4: 106829.111 us/op
Iteration   5: 107607.216 us/op
Iteration   6: 107680.856 us/op
Iteration   7: 107396.108 us/op
Iteration   8: 106577.038 us/op
Iteration   9: 106763.655 us/op
Iteration  10: 106794.391 us/op
Iteration  11: 107568.716 us/op
Iteration  12: 109146.618 us/op
Iteration  13: 106954.464 us/op
Iteration  14: 107767.806 us/op
Iteration  15: 109211.288 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean = 107571.885 ±(99.9%) 1143.468 us/op

  Histogram, us/op:
    [105000.000, 105500.000) = 0 
    [105500.000, 106000.000) = 1 
    [106000.000, 106500.000) = 0 
    [106500.000, 107000.000) = 5 
    [107000.000, 107500.000) = 1 
    [107500.000, 108000.000) = 4 
    [108000.000, 108500.000) = 1 
    [108500.000, 109000.000) = 0 
    [109000.000, 109500.000) = 3 

  Percentiles, us/op:
      p(0.0000) = 105566.880 us/op
     p(50.0000) = 107568.716 us/op
     p(90.0000) = 109214.653 us/op
     p(95.0000) = 109219.700 us/op
     p(99.0000) = 109219.700 us/op
     p(99.9000) = 109219.700 us/op
     p(99.9900) = 109219.700 us/op
     p(99.9990) = 109219.700 us/op
     p(99.9999) = 109219.700 us/op
    p(100.0000) = 109219.700 us/op


# JMH version: 1.29
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /home/kamykbb/jdk-11.0.11+9/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 983775.006 us/op
# Warmup Iteration   2: 1046576.809 us/op
# Warmup Iteration   3: 679364.374 us/op
# Warmup Iteration   4: 654227.767 us/op
# Warmup Iteration   5: 665816.868 us/op
Iteration   1: 684550.224 us/op
Iteration   2: 668380.495 us/op
Iteration   3: 675472.748 us/op
Iteration   4: 712106.787 us/op
Iteration   5: 706051.131 us/op
Iteration   6: 712977.133 us/op
Iteration   7: 673079.526 us/op
Iteration   8: 699046.972 us/op
Iteration   9: 702568.259 us/op
Iteration  10: 650889.304 us/op
Iteration  11: 700565.554 us/op
Iteration  12: 705313.945 us/op
Iteration  13: 703390.106 us/op
Iteration  14: 675041.120 us/op
Iteration  15: 707190.239 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  N = 15
  mean = 691774.903 ±(99.9%) 20275.265 us/op

  Histogram, us/op:
    [650000.000, 655000.000) = 1 
    [655000.000, 660000.000) = 0 
    [660000.000, 665000.000) = 0 
    [665000.000, 670000.000) = 1 
    [670000.000, 675000.000) = 1 
    [675000.000, 680000.000) = 2 
    [680000.000, 685000.000) = 1 
    [685000.000, 690000.000) = 0 
    [690000.000, 695000.000) = 0 
    [695000.000, 700000.000) = 1 
    [700000.000, 705000.000) = 3 
    [705000.000, 710000.000) = 3 
    [710000.000, 715000.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 650889.304 us/op
     p(50.0000) = 700565.554 us/op
     p(90.0000) = 712454.925 us/op
     p(95.0000) = 712977.133 us/op
     p(99.0000) = 712977.133 us/op
     p(99.9000) = 712977.133 us/op
     p(99.9900) = 712977.133 us/op
     p(99.9990) = 712977.133 us/op
     p(99.9999) = 712977.133 us/op
    p(100.0000) = 712977.133 us/op


# Run complete. Total time: 08:43:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                    (iterations)  (length)     (size)    Mode      Cnt         Score        Error   Units
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A   thrpt       15         0.003 ±      0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A   thrpt       15         0.006 ±      0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A   thrpt       15         0.004 ±      0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A   thrpt       15         0.006 ±      0.001  ops/us
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A   thrpt       15        ≈ 10⁻⁷               ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A   thrpt       15         0.542 ±      0.001  ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A   thrpt       15         0.196 ±      0.001  ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A   thrpt       15         0.113 ±      0.001  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10   thrpt       15        19.928 ±      0.137  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100   thrpt       15         2.374 ±      0.025  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000   thrpt       15         0.210 ±      0.004  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10   thrpt       15        21.352 ±      0.135  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100   thrpt       15         2.596 ±      0.033  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000   thrpt       15         0.230 ±      0.002  ops/us
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A   thrpt       15         0.003 ±      0.001  ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A   thrpt       15        ≈ 10⁻⁷               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A   thrpt       15         0.001 ±      0.001  ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A   thrpt       15         1.938 ±      0.002  ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A   thrpt       15         0.002 ±      0.001  ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024    avgt       15    225778.208 ±   2858.592   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240    avgt       15    227061.886 ±    540.293   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400    avgt       15    207511.527 ±    677.199   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576    avgt       15    205414.601 ±   1045.154   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760    avgt       15    204761.929 ±    903.188   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600    avgt       15    200843.412 ±    972.297   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024    avgt       15   1826572.221 ±   9234.481   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240    avgt       15   1136550.493 ±   3963.183   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400    avgt       15   1080413.819 ±   4903.943   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576    avgt       15   1052520.119 ±   5345.917   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760    avgt       15   1024806.013 ±   6955.172   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600    avgt       15    793887.689 ±   3396.942   us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A    avgt       15       375.651 ±      0.167   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A    avgt       15       165.333 ±      0.646   us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A    avgt       15       264.851 ±      1.359   us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A    avgt       15       178.234 ±      0.983   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A    avgt       15   1335072.910 ±   2734.509   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A    avgt       15    137669.450 ±   2647.177   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A    avgt       15   3420257.400 ±  22425.872   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A    avgt       15         1.845 ±      0.001   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A    avgt       15         4.917 ±      0.007   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A    avgt       15         8.985 ±      0.022   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10    avgt       15         0.050 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100    avgt       15         0.421 ±      0.005   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000    avgt       15         4.773 ±      0.051   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10    avgt       15         0.047 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100    avgt       15         0.386 ±      0.005   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000    avgt       15         4.381 ±      0.045   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A    avgt       15     14532.706 ±     13.417   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A    avgt       15       320.037 ±      0.893   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A    avgt       15     31722.728 ±     55.884   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A    avgt       15  11555620.178 ±  24064.941   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A    avgt       15      1877.151 ±      1.753   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A    avgt       15     62200.535 ±     80.304   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A    avgt       15   1704160.682 ±    866.449   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A    avgt       15         0.514 ±      0.001   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A    avgt       15      6955.257 ±      3.388   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A    avgt       15     33905.586 ±   3106.337   us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A    avgt       15     34908.128 ±    109.839   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A    avgt       15     24308.169 ±    264.285   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A    avgt       15     14452.549 ±     25.250   us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A    avgt       15     33602.927 ±    928.361   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A    avgt       15       659.200 ±      2.966   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A    avgt       15      6733.177 ±     29.944   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A    avgt       15    107107.263 ±    387.055   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A    avgt       15    758341.193 ±   1783.331   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024  sample      673    225725.070 ±    716.828   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A       1024  sample             211812.352                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A       1024  sample             225705.984                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A       1024  sample             232783.872                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A       1024  sample             234881.024                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A       1024  sample             241639.096                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A       1024  sample             250347.520                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A       1024  sample             250347.520                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A       1024  sample             250347.520                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240  sample      667    227199.065 ±    567.485   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A      10240  sample             219152.384                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A      10240  sample             226230.272                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A      10240  sample             233308.160                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A      10240  sample             235667.456                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A      10240  sample             240994.222                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A      10240  sample             243793.920                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A      10240  sample             243793.920                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A      10240  sample             243793.920                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400  sample      729    208105.298 ±    570.659   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A     102400  sample             201064.448                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A     102400  sample             206831.616                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A     102400  sample             214171.648                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A     102400  sample             217579.520                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A     102400  sample             223346.688                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A     102400  sample             231735.296                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A     102400  sample             231735.296                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A     102400  sample             231735.296                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576  sample      735    205890.751 ±    597.621   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A    1048576  sample             197656.576                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A    1048576  sample             204472.320                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A    1048576  sample             212336.640                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A    1048576  sample             215482.368                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A    1048576  sample             221585.080                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A    1048576  sample             230948.864                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A    1048576  sample             230948.864                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A    1048576  sample             230948.864                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760  sample      735    205933.550 ±    592.915   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A   10485760  sample             198180.864                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A   10485760  sample             204734.464                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A   10485760  sample             212441.498                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A   10485760  sample             216321.229                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A   10485760  sample             221060.792                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A   10485760  sample             225443.840                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A   10485760  sample             225443.840                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A   10485760  sample             225443.840                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600  sample      750    201850.530 ±    661.861   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A  104857600  sample             194248.704                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A  104857600  sample             200409.088                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A  104857600  sample             208404.480                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A  104857600  sample             212978.893                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A  104857600  sample             219933.573                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A  104857600  sample             233832.448                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A  104857600  sample             233832.448                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A  104857600  sample             233832.448                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024  sample       90   1816506.459 ±  21362.651   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A       1024  sample            1642070.016                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A       1024  sample            1837105.152                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A       1024  sample            1860173.824                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A       1024  sample            1867408.998                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A       1024  sample            1893728.256                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A       1024  sample            1893728.256                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A       1024  sample            1893728.256                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A       1024  sample            1893728.256                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240  sample      135   1169449.627 ±  41761.890   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A      10240  sample             919601.152                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A      10240  sample            1226833.920                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A      10240  sample            1333788.672                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A      10240  sample            1346371.584                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A      10240  sample            1364490.977                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A      10240  sample            1365245.952                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A      10240  sample            1365245.952                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A      10240  sample            1365245.952                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400  sample      149   1095241.151 ±  34936.268   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A     102400  sample             766509.056                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A     102400  sample            1147142.144                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A     102400  sample            1249902.592                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A     102400  sample            1262485.504                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A     102400  sample            1293942.784                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A     102400  sample            1293942.784                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A     102400  sample            1293942.784                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A     102400  sample            1293942.784                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576  sample      152   1057778.634 ±  34094.456   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A    1048576  sample             761266.176                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A    1048576  sample            1099956.224                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A    1048576  sample            1205442.970                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A    1048576  sample            1231762.227                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A    1048576  sample            1268399.473                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A    1048576  sample            1275068.416                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A    1048576  sample            1275068.416                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A    1048576  sample            1275068.416                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760  sample      152   1037248.620 ±  26908.830   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A   10485760  sample             781189.120                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A   10485760  sample            1061158.912                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A   10485760  sample            1143786.701                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A   10485760  sample            1182793.728                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A   10485760  sample            1212028.027                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A   10485760  sample            1214251.008                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A   10485760  sample            1214251.008                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A   10485760  sample            1214251.008                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600  sample      198    797908.082 ±  25581.651   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A  104857600  sample             545259.520                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A  104857600  sample             801636.352                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A  104857600  sample             944976.691                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A  104857600  sample             953260.442                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A  104857600  sample             961565.164                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A  104857600  sample             963641.344                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A  104857600  sample             963641.344                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A  104857600  sample             963641.344                us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A  sample   398891       375.645 ±      0.052   us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.00                                                                        N/A       N/A        N/A  sample                370.176                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.50                                                                        N/A       N/A        N/A  sample                374.784                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.90                                                                        N/A       N/A        N/A  sample                384.000                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.95                                                                        N/A       N/A        N/A  sample                387.584                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.99                                                                        N/A       N/A        N/A  sample                406.016                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.999                                                                       N/A       N/A        N/A  sample                468.992                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.9999                                                                      N/A       N/A        N/A  sample                589.140                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p1.00                                                                        N/A       N/A        N/A  sample                930.816                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A  sample   905030       165.475 ±      0.028   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.00                                                        N/A       N/A        N/A  sample                157.696                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.50                                                        N/A       N/A        N/A  sample                163.584                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.90                                                        N/A       N/A        N/A  sample                171.008                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.95                                                        N/A       N/A        N/A  sample                175.104                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.99                                                        N/A       N/A        N/A  sample                187.136                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.999                                                       N/A       N/A        N/A  sample                255.488                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.9999                                                      N/A       N/A        N/A  sample                344.830                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p1.00                                                        N/A       N/A        N/A  sample               2633.728                us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A  sample   493784       303.431 ±      0.037   us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.00                                                                        N/A       N/A        N/A  sample                300.032                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.50                                                                        N/A       N/A        N/A  sample                301.568                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.90                                                                        N/A       N/A        N/A  sample                308.224                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.95                                                                        N/A       N/A        N/A  sample                310.784                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.99                                                                        N/A       N/A        N/A  sample                329.728                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.999                                                                       N/A       N/A        N/A  sample                370.176                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.9999                                                                      N/A       N/A        N/A  sample                650.489                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p1.00                                                                        N/A       N/A        N/A  sample               1292.288                us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A  sample   837623       178.803 ±      0.031   us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.00                                                                      N/A       N/A        N/A  sample                168.960                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.50                                                                      N/A       N/A        N/A  sample                177.152                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.90                                                                      N/A       N/A        N/A  sample                185.600                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.95                                                                      N/A       N/A        N/A  sample                189.440                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.99                                                                      N/A       N/A        N/A  sample                200.960                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.999                                                                     N/A       N/A        N/A  sample                266.752                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.9999                                                                    N/A       N/A        N/A  sample                350.695                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p1.00                                                                      N/A       N/A        N/A  sample               2822.144                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A  sample      120   1362117.700 ±    725.214   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.00                                          N/A       N/A        N/A  sample            1356857.344                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.50                                          N/A       N/A        N/A  sample            1363148.800                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.90                                          N/A       N/A        N/A  sample            1365245.952                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.95                                          N/A       N/A        N/A  sample            1365245.952                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.99                                          N/A       N/A        N/A  sample            1370656.604                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.999                                         N/A       N/A        N/A  sample            1371537.408                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.9999                                        N/A       N/A        N/A  sample            1371537.408                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p1.00                                          N/A       N/A        N/A  sample            1371537.408                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A  sample     1173    128570.905 ±    355.942   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.00                                  N/A       100        N/A  sample             121896.960                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.50                                  N/A       100        N/A  sample             127926.272                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.90                                  N/A       100        N/A  sample             133431.296                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.95                                  N/A       100        N/A  sample             135082.803                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.99                                  N/A       100        N/A  sample             141033.472                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.999                                 N/A       100        N/A  sample             149661.155                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.9999                                N/A       100        N/A  sample             150208.512                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p1.00                                  N/A       100        N/A  sample             150208.512                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A  sample       44   4652245.737 ± 100207.265   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.00                                  N/A      1000        N/A  sample            4395630.592                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.50                                  N/A      1000        N/A  sample            4634705.920                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.90                                  N/A      1000        N/A  sample            4936695.808                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.95                                  N/A      1000        N/A  sample            4984930.304                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.99                                  N/A      1000        N/A  sample            5007998.976                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.999                                 N/A      1000        N/A  sample            5007998.976                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.9999                                N/A      1000        N/A  sample            5007998.976                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p1.00                                  N/A      1000        N/A  sample            5007998.976                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A  sample  5015026         1.900 ±      0.002   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                                521       N/A        N/A  sample                  1.848                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                                521       N/A        N/A  sample                  1.874                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                                521       N/A        N/A  sample                  1.890                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                                521       N/A        N/A  sample                  1.892                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                                521       N/A        N/A  sample                  1.924                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                               521       N/A        N/A  sample                  9.088                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                              521       N/A        N/A  sample                 26.400                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                                521       N/A        N/A  sample               2703.360                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A  sample  3781326         4.980 ±      0.002   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                               1153       N/A        N/A  sample                  4.760                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                               1153       N/A        N/A  sample                  4.920                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                               1153       N/A        N/A  sample                  4.976                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                               1153       N/A        N/A  sample                  4.992                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                               1153       N/A        N/A  sample                  5.288                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                              1153       N/A        N/A  sample                 15.856                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                             1153       N/A        N/A  sample                 45.223                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                               1153       N/A        N/A  sample                505.344                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A  sample  4066803         9.213 ±      0.002   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                               2021       N/A        N/A  sample                  8.896                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                               2021       N/A        N/A  sample                  9.088                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                               2021       N/A        N/A  sample                  9.200                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                               2021       N/A        N/A  sample                  9.312                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                               2021       N/A        N/A  sample                 13.200                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                              2021       N/A        N/A  sample                 22.080                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                             2021       N/A        N/A  sample                 55.764                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                               2021       N/A        N/A  sample                541.696                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10  sample  5101832         0.094 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A         10  sample                  0.071                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A         10  sample                  0.088                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A         10  sample                  0.107                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A         10  sample                  0.108                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A         10  sample                  0.113                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A         10  sample                  0.178                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A         10  sample                  7.808                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A         10  sample                126.464                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100  sample  3559391         0.372 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A        100  sample                  0.314                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A        100  sample                  0.358                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A        100  sample                  0.375                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A        100  sample                  0.385                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A        100  sample                  0.402                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A        100  sample                  4.480                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A        100  sample                 14.241                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A        100  sample                418.304                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000  sample  4476999         4.218 ±      0.003   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A       1000  sample                  3.984                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A       1000  sample                  4.176                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A       1000  sample                  4.216                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A       1000  sample                  4.224                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A       1000  sample                  4.400                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A       1000  sample                 13.696                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A       1000  sample                 47.552                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A       1000  sample               2703.360                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10  sample  5206755         0.095 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A         10  sample                  0.075                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A         10  sample                  0.089                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A         10  sample                  0.106                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A         10  sample                  0.107                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A         10  sample                  0.116                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A         10  sample                  0.179                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A         10  sample                  7.779                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A         10  sample                109.312                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100  sample  5396653         0.475 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A        100  sample                  0.443                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A        100  sample                  0.461                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A        100  sample                  0.477                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A        100  sample                  0.479                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A        100  sample                  0.481                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A        100  sample                  4.084                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A        100  sample                 12.581                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A        100  sample                408.064                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000  sample  4624267         4.083 ±      0.002   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A       1000  sample                  3.908                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A       1000  sample                  4.044                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A       1000  sample                  4.096                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A       1000  sample                  4.120                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A       1000  sample                  4.200                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A       1000  sample                 12.992                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A       1000  sample                 40.128                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A       1000  sample               1016.832                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A  sample    10253     14632.986 ±      4.973   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.00                                  N/A       N/A        N/A  sample              14467.072                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.50                                  N/A       N/A        N/A  sample              14565.376                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.90                                  N/A       N/A        N/A  sample              14909.440                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.95                                  N/A       N/A        N/A  sample              14942.208                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.99                                  N/A       N/A        N/A  sample              15007.744                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.999                                 N/A       N/A        N/A  sample              15204.352                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.9999                                N/A       N/A        N/A  sample              15351.808                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p1.00                                  N/A       N/A        N/A  sample              15351.808                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A  sample   467620       320.387 ±      1.008   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A       100        N/A  sample                301.056                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A       100        N/A  sample                311.808                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A       100        N/A  sample                324.096                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A       100        N/A  sample                328.704                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A       100        N/A  sample                353.280                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A       100        N/A  sample               2338.816                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A       100        N/A  sample              10460.788                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A       100        N/A  sample              23953.408                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A  sample     4733     31721.217 ±    102.681   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A      1000        N/A  sample              30670.848                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A      1000        N/A  sample              30965.760                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A      1000        N/A  sample              33685.504                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A      1000        N/A  sample              35454.976                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A      1000        N/A  sample              41287.680                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A      1000        N/A  sample              48919.871                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A      1000        N/A  sample              55246.848                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A      1000        N/A  sample              55246.848                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A  sample       15  11485682.074 ±  42226.889   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A     10000        N/A  sample           11425284.096                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A     10000        N/A  sample           11475615.744                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A     10000        N/A  sample           11566212.710                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A     10000        N/A  sample           11576279.040                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A     10000        N/A  sample           11576279.040                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A     10000        N/A  sample           11576279.040                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A     10000        N/A  sample           11576279.040                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A     10000        N/A  sample           11576279.040                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A  sample    75637      1982.094 ±      1.175   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.00             N/A       N/A        N/A  sample               1855.488                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.50             N/A       N/A        N/A  sample               2048.000                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.90             N/A       N/A        N/A  sample               2070.528                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.95             N/A       N/A        N/A  sample               2078.720                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.99             N/A       N/A        N/A  sample               2121.728                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.999            N/A       N/A        N/A  sample               2240.512                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.9999           N/A       N/A        N/A  sample               3369.099                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p1.00             N/A       N/A        N/A  sample               5955.584                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A  sample     2416     62151.999 ±     20.516   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.00                     N/A       N/A        N/A  sample              60620.800                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.50                     N/A       N/A        N/A  sample              62193.664                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.90                     N/A       N/A        N/A  sample              62390.272                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.95                     N/A       N/A        N/A  sample              62521.344                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.99                     N/A       N/A        N/A  sample              63045.632                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.999                    N/A       N/A        N/A  sample              64722.239                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.9999                   N/A       N/A        N/A  sample              64749.568                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p1.00                     N/A       N/A        N/A  sample              64749.568                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A  sample       94   1702954.354 ±    510.766   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.00                                                 N/A       N/A        N/A  sample            1698693.120                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.50                                                 N/A       N/A        N/A  sample            1702887.424                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.90                                                 N/A       N/A        N/A  sample            1704984.576                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.95                                                 N/A       N/A        N/A  sample            1704984.576                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.99                                                 N/A       N/A        N/A  sample            1707081.728                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.999                                                N/A       N/A        N/A  sample            1707081.728                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.9999                                               N/A       N/A        N/A  sample            1707081.728                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p1.00                                                 N/A       N/A        N/A  sample            1707081.728                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A  sample  4470762         0.571 ±      0.001   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.00                       N/A       N/A        N/A  sample                  0.504                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.50                       N/A       N/A        N/A  sample                  0.552                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.90                       N/A       N/A        N/A  sample                  0.569                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.95                       N/A       N/A        N/A  sample                  0.578                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.99                       N/A       N/A        N/A  sample                  0.847                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.999                      N/A       N/A        N/A  sample                  4.912                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.9999                     N/A       N/A        N/A  sample                 15.247                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p1.00                       N/A       N/A        N/A  sample                518.656                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A  sample    21571      6952.473 ±      1.403   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.00                                   N/A       N/A        N/A  sample               6782.976                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.50                                   N/A       N/A        N/A  sample               6946.816                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.90                                   N/A       N/A        N/A  sample               6979.584                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.95                                   N/A       N/A        N/A  sample               6995.968                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.99                                   N/A       N/A        N/A  sample               7094.272                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.999                                  N/A       N/A        N/A  sample               7977.796                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.9999                                 N/A       N/A        N/A  sample               8954.321                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p1.00                                   N/A       N/A        N/A  sample               8978.432                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A  sample     4566     32869.806 ±     95.430   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.00                                             N/A       N/A        N/A  sample              29720.576                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.50                                             N/A       N/A        N/A  sample              33488.896                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.90                                             N/A       N/A        N/A  sample              34603.008                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.95                                             N/A       N/A        N/A  sample              36896.768                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.99                                             N/A       N/A        N/A  sample              37158.912                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.999                                            N/A       N/A        N/A  sample              40930.968                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.9999                                           N/A       N/A        N/A  sample              45547.520                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p1.00                                             N/A       N/A        N/A  sample              45547.520                us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A  sample     4301     34923.420 ±    322.844   us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.00                                                              N/A       N/A        N/A  sample              33292.288                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.50                                                              N/A       N/A        N/A  sample              33521.664                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.90                                                              N/A       N/A        N/A  sample              33816.576                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.95                                                              N/A       N/A        N/A  sample              41674.342                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.99                                                              N/A       N/A        N/A  sample              73531.392                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.999                                                             N/A       N/A        N/A  sample              82666.848                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.9999                                                            N/A       N/A        N/A  sample              90177.536                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p1.00                                                              N/A       N/A        N/A  sample              90177.536                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A  sample     5802     25882.354 ±    276.411   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.00                                                            N/A       N/A        N/A  sample              22675.456                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.50                                                            N/A       N/A        N/A  sample              24707.072                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.90                                                            N/A       N/A        N/A  sample              26761.626                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.95                                                            N/A       N/A        N/A  sample              41943.040                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.99                                                            N/A       N/A        N/A  sample              55572.562                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.999                                                           N/A       N/A        N/A  sample              65059.422                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.9999                                                          N/A       N/A        N/A  sample              68943.872                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p1.00                                                            N/A       N/A        N/A  sample              68943.872                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A  sample    10743     13960.307 ±     35.108   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.00                                                                N/A       N/A        N/A  sample              13565.952                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.50                                                                N/A       N/A        N/A  sample              13778.944                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.90                                                                N/A       N/A        N/A  sample              13991.936                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.95                                                                N/A       N/A        N/A  sample              14417.920                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.99                                                                N/A       N/A        N/A  sample              18481.152                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.999                                                               N/A       N/A        N/A  sample              29094.314                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.9999                                                              N/A       N/A        N/A  sample              38635.831                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p1.00                                                                N/A       N/A        N/A  sample              38928.384                us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A  sample     4868     30844.913 ±     71.452   us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.00                                                                      N/A       N/A        N/A  sample              28114.944                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.50                                                                      N/A       N/A        N/A  sample              30769.152                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.90                                                                      N/A       N/A        N/A  sample              31784.960                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.95                                                                      N/A       N/A        N/A  sample              32014.336                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.99                                                                      N/A       N/A        N/A  sample              36150.968                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.999                                                                     N/A       N/A        N/A  sample              48878.977                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.9999                                                                    N/A       N/A        N/A  sample              59768.832                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p1.00                                                                      N/A       N/A        N/A  sample              59768.832                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A  sample   226836       660.624 ±      2.871   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A        10        N/A  sample                581.632                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A        10        N/A  sample                632.832                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A        10        N/A  sample                658.432                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A        10        N/A  sample                667.648                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A        10        N/A  sample                712.704                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A        10        N/A  sample               8242.487                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A        10        N/A  sample              16209.117                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A        10        N/A  sample              25427.968                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A  sample    22241      6741.155 ±     30.914   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A       100        N/A  sample               6070.272                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A       100        N/A  sample               6438.912                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A       100        N/A  sample               6840.320                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A       100        N/A  sample               8290.304                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A       100        N/A  sample              14198.047                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A       100        N/A  sample              22896.902                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A       100        N/A  sample              33837.797                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A       100        N/A  sample              41549.824                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A  sample     1410    106981.431 ±    307.015   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A      1000        N/A  sample              98697.216                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A      1000        N/A  sample             106299.392                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A      1000        N/A  sample             112066.560                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A      1000        N/A  sample             113698.406                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A      1000        N/A  sample             119523.246                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A      1000        N/A  sample             123362.083                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A      1000        N/A  sample             123469.824                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A      1000        N/A  sample             123469.824                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A  sample      210    759868.075 ±   6310.846   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.00                        N/A       N/A        N/A  sample             692060.160                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.50                        N/A       N/A        N/A  sample             760217.600                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.90                        N/A       N/A        N/A  sample             796708.045                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.95                        N/A       N/A        N/A  sample             809972.531                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.99                        N/A       N/A        N/A  sample             821622.211                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.999                       N/A       N/A        N/A  sample             822083.584                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.9999                      N/A       N/A        N/A  sample             822083.584                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p1.00                        N/A       N/A        N/A  sample             822083.584                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024      ss       15    224234.966 ±   9297.815   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240      ss       15    227318.946 ±   6392.445   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400      ss       15    199204.282 ±  20804.381   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576      ss       15    203588.611 ±   3816.921   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760      ss       15    206615.384 ±   8166.888   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600      ss       15    204327.977 ±   4990.588   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024      ss       15   1742561.266 ±  41001.465   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240      ss       15   1020078.160 ±  13692.692   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400      ss       15    945622.009 ±  17858.088   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576      ss       15    927223.715 ±  21571.560   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760      ss       15    972526.319 ±  16435.648   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600      ss       15    797709.805 ±  15381.457   us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A      ss       15       450.743 ±     30.991   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A      ss       15       251.391 ±     46.180   us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A      ss       15       294.772 ±      5.664   us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A      ss       15       292.405 ±     49.461   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A      ss       15   1364525.414 ±   3091.950   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A      ss       15    137124.881 ±   3049.396   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A      ss       15   4647854.476 ± 115782.622   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A      ss       15        13.462 ±      1.906   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A      ss       15        14.085 ±      3.571   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A      ss       15        21.231 ±      1.849   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10      ss       15         8.610 ±      5.535   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100      ss       15        19.558 ±     14.677   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000      ss       15        92.331 ±      8.927   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10      ss       15         6.744 ±      0.407   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100      ss       15        16.075 ±      0.782   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000      ss       15       113.087 ±     43.479   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A      ss       15     14548.691 ±    131.195   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A      ss       15      2048.424 ±   2095.300   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A      ss       15     69571.448 ±  43955.726   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A      ss       15  11348474.061 ±  30063.250   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A      ss       15      1881.647 ±     12.797   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A      ss       15     62321.764 ±    218.780   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A      ss       15   1705415.605 ±   4925.664   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A      ss       15        20.172 ±     19.428   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A      ss       15      7697.265 ±     45.472   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A      ss       15     33879.312 ±   2959.753   us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A      ss       15     33430.585 ±    137.847   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A      ss       15     21961.774 ±    209.767   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A      ss       15     13950.775 ±     76.864   us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A      ss       15     31621.767 ±   2640.592   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A      ss       15       940.443 ±    137.629   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A      ss       15      7102.473 ±    500.533   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A      ss       15    107571.885 ±   1143.468   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A      ss       15    691774.903 ±  20275.265   us/op
