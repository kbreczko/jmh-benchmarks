# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 0.00% complete, ETA 07:40:00
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 0.72% complete, ETA 08:20:50
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 1.45% complete, ETA 08:14:45
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 2.17% complete, ETA 08:10:00
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 2.90% complete, ETA 08:06:22
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 3.62% complete, ETA 08:02:28
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 4.35% complete, ETA 07:58:18
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 5.07% complete, ETA 07:56:16
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 5.80% complete, ETA 07:54:55
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 6.52% complete, ETA 07:50:51
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap(AllocationBenchmark.java:52)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_thrpt_jmhStub(AllocationBenchmark_fillHeap_jmhTest.java:161)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_Throughput(AllocationBenchmark_fillHeap_jmhTest.java:104)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 7.25% complete, ETA 07:01:01
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 7.97% complete, ETA 07:02:18
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 8.70% complete, ETA 07:02:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ops/us
# Warmup Iteration   2: 0.003 ops/us
# Warmup Iteration   3: 0.003 ops/us
# Warmup Iteration   4: 0.003 ops/us
# Warmup Iteration   5: 0.003 ops/us
Iteration   1: 0.003 ops/us
Iteration   2: 0.003 ops/us
Iteration   3: 0.003 ops/us
Iteration   4: 0.003 ops/us
Iteration   5: 0.003 ops/us
Iteration   6: 0.003 ops/us
Iteration   7: 0.003 ops/us
Iteration   8: 0.003 ops/us
Iteration   9: 0.003 ops/us
Iteration  10: 0.003 ops/us
Iteration  11: 0.003 ops/us
Iteration  12: 0.003 ops/us
Iteration  13: 0.003 ops/us
Iteration  14: 0.003 ops/us
Iteration  15: 0.003 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  0.003 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 9.42% complete, ETA 07:01:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ops/us
# Warmup Iteration   2: 0.006 ops/us
# Warmup Iteration   3: 0.006 ops/us
# Warmup Iteration   4: 0.006 ops/us
# Warmup Iteration   5: 0.006 ops/us
Iteration   1: 0.006 ops/us
Iteration   2: 0.006 ops/us
Iteration   3: 0.006 ops/us
Iteration   4: 0.006 ops/us
Iteration   5: 0.006 ops/us
Iteration   6: 0.006 ops/us
Iteration   7: 0.006 ops/us
Iteration   8: 0.006 ops/us
Iteration   9: 0.006 ops/us
Iteration  10: 0.006 ops/us
Iteration  11: 0.006 ops/us
Iteration  12: 0.006 ops/us
Iteration  13: 0.006 ops/us
Iteration  14: 0.006 ops/us
Iteration  15: 0.006 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  0.006 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.006] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 10.14% complete, ETA 07:00:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ops/us
# Warmup Iteration   2: 0.003 ops/us
# Warmup Iteration   3: 0.003 ops/us
# Warmup Iteration   4: 0.003 ops/us
# Warmup Iteration   5: 0.003 ops/us
Iteration   1: 0.003 ops/us
Iteration   2: 0.003 ops/us
Iteration   3: 0.003 ops/us
Iteration   4: 0.003 ops/us
Iteration   5: 0.003 ops/us
Iteration   6: 0.003 ops/us
Iteration   7: 0.003 ops/us
Iteration   8: 0.003 ops/us
Iteration   9: 0.003 ops/us
Iteration  10: 0.003 ops/us
Iteration  11: 0.003 ops/us
Iteration  12: 0.003 ops/us
Iteration  13: 0.003 ops/us
Iteration  14: 0.003 ops/us
Iteration  15: 0.003 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  0.003 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 10.87% complete, ETA 06:58:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ops/us
# Warmup Iteration   2: 0.005 ops/us
# Warmup Iteration   3: 0.005 ops/us
# Warmup Iteration   4: 0.005 ops/us
# Warmup Iteration   5: 0.005 ops/us
Iteration   1: 0.005 ops/us
Iteration   2: 0.005 ops/us
Iteration   3: 0.005 ops/us
Iteration   4: 0.006 ops/us
Iteration   5: 0.006 ops/us
Iteration   6: 0.005 ops/us
Iteration   7: 0.005 ops/us
Iteration   8: 0.005 ops/us
Iteration   9: 0.005 ops/us
Iteration  10: 0.005 ops/us
Iteration  11: 0.005 ops/us
Iteration  12: 0.005 ops/us
Iteration  13: 0.005 ops/us
Iteration  14: 0.005 ops/us
Iteration  15: 0.005 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  0.005 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.005, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.005, 0.005] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 11.59% complete, ETA 06:56:13
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 12.32% complete, ETA 06:54:57
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 13.04% complete, ETA 06:54:45
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁷ ops/us
# Warmup Iteration   2: ≈ 10⁻⁷ ops/us
# Warmup Iteration   3: ≈ 10⁻⁷ ops/us
# Warmup Iteration   4: ≈ 10⁻⁷ ops/us
# Warmup Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   1: ≈ 10⁻⁷ ops/us
Iteration   2: ≈ 10⁻⁷ ops/us
Iteration   3: ≈ 10⁻⁷ ops/us
Iteration   4: ≈ 10⁻⁷ ops/us
Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   6: ≈ 10⁻⁷ ops/us
Iteration   7: ≈ 10⁻⁷ ops/us
Iteration   8: ≈ 10⁻⁷ ops/us
Iteration   9: ≈ 10⁻⁷ ops/us
Iteration  10: ≈ 10⁻⁷ ops/us
Iteration  11: ≈ 10⁻⁷ ops/us
Iteration  12: ≈ 10⁻⁷ ops/us
Iteration  13: ≈ 10⁻⁷ ops/us
Iteration  14: ≈ 10⁻⁷ ops/us
Iteration  15: ≈ 10⁻⁷ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  ≈ 10⁻⁷ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 13.77% complete, ETA 06:53:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.533 ops/us
# Warmup Iteration   2: 0.533 ops/us
# Warmup Iteration   3: 0.535 ops/us
# Warmup Iteration   4: 0.535 ops/us
# Warmup Iteration   5: 0.535 ops/us
Iteration   1: 0.535 ops/us
Iteration   2: 0.535 ops/us
Iteration   3: 0.535 ops/us
Iteration   4: 0.535 ops/us
Iteration   5: 0.535 ops/us
Iteration   6: 0.535 ops/us
Iteration   7: 0.535 ops/us
Iteration   8: 0.534 ops/us
Iteration   9: 0.535 ops/us
Iteration  10: 0.535 ops/us
Iteration  11: 0.535 ops/us
Iteration  12: 0.535 ops/us
Iteration  13: 0.535 ops/us
Iteration  14: 0.535 ops/us
Iteration  15: 0.535 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.535 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.534, 0.535, 0.535), stdev = 0.001
  CI (99.9%): [0.535, 0.535] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 14.49% complete, ETA 06:50:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.199 ops/us
# Warmup Iteration   2: 0.177 ops/us
# Warmup Iteration   3: 0.200 ops/us
# Warmup Iteration   4: 0.200 ops/us
# Warmup Iteration   5: 0.200 ops/us
Iteration   1: 0.200 ops/us
Iteration   2: 0.200 ops/us
Iteration   3: 0.199 ops/us
Iteration   4: 0.200 ops/us
Iteration   5: 0.200 ops/us
Iteration   6: 0.200 ops/us
Iteration   7: 0.199 ops/us
Iteration   8: 0.200 ops/us
Iteration   9: 0.200 ops/us
Iteration  10: 0.200 ops/us
Iteration  11: 0.200 ops/us
Iteration  12: 0.200 ops/us
Iteration  13: 0.200 ops/us
Iteration  14: 0.201 ops/us
Iteration  15: 0.200 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.200 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.199, 0.200, 0.201), stdev = 0.001
  CI (99.9%): [0.200, 0.200] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 15.22% complete, ETA 06:47:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.111 ops/us
# Warmup Iteration   2: 0.111 ops/us
# Warmup Iteration   3: 0.111 ops/us
# Warmup Iteration   4: 0.111 ops/us
# Warmup Iteration   5: 0.111 ops/us
Iteration   1: 0.111 ops/us
Iteration   2: 0.111 ops/us
Iteration   3: 0.111 ops/us
Iteration   4: 0.111 ops/us
Iteration   5: 0.111 ops/us
Iteration   6: 0.111 ops/us
Iteration   7: 0.111 ops/us
Iteration   8: 0.111 ops/us
Iteration   9: 0.111 ops/us
Iteration  10: 0.112 ops/us
Iteration  11: 0.111 ops/us
Iteration  12: 0.111 ops/us
Iteration  13: 0.111 ops/us
Iteration  14: 0.112 ops/us
Iteration  15: 0.111 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.111 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.111, 0.111, 0.112), stdev = 0.001
  CI (99.9%): [0.111, 0.112] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 15.94% complete, ETA 06:44:17
# Fork: 1 of 1
# Warmup Iteration   1: 19.560 ops/us
# Warmup Iteration   2: 21.444 ops/us
# Warmup Iteration   3: 25.141 ops/us
# Warmup Iteration   4: 25.116 ops/us
# Warmup Iteration   5: 25.123 ops/us
Iteration   1: 24.221 ops/us
Iteration   2: 25.140 ops/us
Iteration   3: 25.094 ops/us
Iteration   4: 25.108 ops/us
Iteration   5: 25.126 ops/us
Iteration   6: 25.114 ops/us
Iteration   7: 25.107 ops/us
Iteration   8: 25.111 ops/us
Iteration   9: 25.126 ops/us
Iteration  10: 24.186 ops/us
Iteration  11: 25.122 ops/us
Iteration  12: 25.118 ops/us
Iteration  13: 25.102 ops/us
Iteration  14: 25.054 ops/us
Iteration  15: 25.110 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  24.989 ±(99.9%) 0.342 ops/us [Average]
  (min, avg, max) = (24.186, 24.989, 25.140), stdev = 0.320
  CI (99.9%): [24.648, 25.331] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 16.67% complete, ETA 06:41:15
# Fork: 1 of 1
# Warmup Iteration   1: 2.367 ops/us
# Warmup Iteration   2: 2.285 ops/us
# Warmup Iteration   3: 2.386 ops/us
# Warmup Iteration   4: 2.386 ops/us
# Warmup Iteration   5: 2.385 ops/us
Iteration   1: 2.341 ops/us
Iteration   2: 2.385 ops/us
Iteration   3: 2.383 ops/us
Iteration   4: 2.382 ops/us
Iteration   5: 2.309 ops/us
Iteration   6: 2.383 ops/us
Iteration   7: 2.374 ops/us
Iteration   8: 2.343 ops/us
Iteration   9: 2.387 ops/us
Iteration  10: 2.389 ops/us
Iteration  11: 2.382 ops/us
Iteration  12: 2.388 ops/us
Iteration  13: 2.344 ops/us
Iteration  14: 2.384 ops/us
Iteration  15: 2.388 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  2.371 ±(99.9%) 0.026 ops/us [Average]
  (min, avg, max) = (2.309, 2.371, 2.389), stdev = 0.025
  CI (99.9%): [2.345, 2.397] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 17.39% complete, ETA 06:38:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.228 ops/us
# Warmup Iteration   2: 0.224 ops/us
# Warmup Iteration   3: 0.252 ops/us
# Warmup Iteration   4: 0.253 ops/us
# Warmup Iteration   5: 0.262 ops/us
Iteration   1: 0.251 ops/us
Iteration   2: 0.249 ops/us
Iteration   3: 0.258 ops/us
Iteration   4: 0.246 ops/us
Iteration   5: 0.252 ops/us
Iteration   6: 0.256 ops/us
Iteration   7: 0.259 ops/us
Iteration   8: 0.259 ops/us
Iteration   9: 0.249 ops/us
Iteration  10: 0.260 ops/us
Iteration  11: 0.259 ops/us
Iteration  12: 0.254 ops/us
Iteration  13: 0.253 ops/us
Iteration  14: 0.249 ops/us
Iteration  15: 0.251 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.254 ±(99.9%) 0.005 ops/us [Average]
  (min, avg, max) = (0.246, 0.254, 0.260), stdev = 0.005
  CI (99.9%): [0.249, 0.258] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 18.12% complete, ETA 06:35:03
# Fork: 1 of 1
# Warmup Iteration   1: 21.448 ops/us
# Warmup Iteration   2: 19.248 ops/us
# Warmup Iteration   3: 25.608 ops/us
# Warmup Iteration   4: 25.534 ops/us
# Warmup Iteration   5: 25.489 ops/us
Iteration   1: 24.353 ops/us
Iteration   2: 25.570 ops/us
Iteration   3: 24.405 ops/us
Iteration   4: 25.552 ops/us
Iteration   5: 24.489 ops/us
Iteration   6: 25.562 ops/us
Iteration   7: 25.562 ops/us
Iteration   8: 25.551 ops/us
Iteration   9: 25.555 ops/us
Iteration  10: 25.518 ops/us
Iteration  11: 25.533 ops/us
Iteration  12: 25.535 ops/us
Iteration  13: 25.617 ops/us
Iteration  14: 25.541 ops/us
Iteration  15: 25.561 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  25.327 ±(99.9%) 0.506 ops/us [Average]
  (min, avg, max) = (24.353, 25.327, 25.617), stdev = 0.473
  CI (99.9%): [24.821, 25.832] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 18.84% complete, ETA 06:31:54
# Fork: 1 of 1
# Warmup Iteration   1: 2.552 ops/us
# Warmup Iteration   2: 2.339 ops/us
# Warmup Iteration   3: 2.351 ops/us
# Warmup Iteration   4: 2.378 ops/us
# Warmup Iteration   5: 2.270 ops/us
Iteration   1: 2.348 ops/us
Iteration   2: 2.326 ops/us
Iteration   3: 2.256 ops/us
Iteration   4: 2.287 ops/us
Iteration   5: 2.327 ops/us
Iteration   6: 2.270 ops/us
Iteration   7: 2.302 ops/us
Iteration   8: 2.310 ops/us
Iteration   9: 2.301 ops/us
Iteration  10: 2.328 ops/us
Iteration  11: 2.228 ops/us
Iteration  12: 2.306 ops/us
Iteration  13: 2.335 ops/us
Iteration  14: 2.345 ops/us
Iteration  15: 2.309 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  2.305 ±(99.9%) 0.036 ops/us [Average]
  (min, avg, max) = (2.228, 2.305, 2.348), stdev = 0.033
  CI (99.9%): [2.269, 2.341] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 19.56% complete, ETA 06:28:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.245 ops/us
# Warmup Iteration   2: 0.246 ops/us
# Warmup Iteration   3: 0.247 ops/us
# Warmup Iteration   4: 0.251 ops/us
# Warmup Iteration   5: 0.248 ops/us
Iteration   1: 0.243 ops/us
Iteration   2: 0.245 ops/us
Iteration   3: 0.250 ops/us
Iteration   4: 0.251 ops/us
Iteration   5: 0.248 ops/us
Iteration   6: 0.245 ops/us
Iteration   7: 0.248 ops/us
Iteration   8: 0.242 ops/us
Iteration   9: 0.243 ops/us
Iteration  10: 0.247 ops/us
Iteration  11: 0.243 ops/us
Iteration  12: 0.252 ops/us
Iteration  13: 0.248 ops/us
Iteration  14: 0.254 ops/us
Iteration  15: 0.243 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.247 ±(99.9%) 0.004 ops/us [Average]
  (min, avg, max) = (0.242, 0.247, 0.254), stdev = 0.004
  CI (99.9%): [0.243, 0.251] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 20.29% complete, ETA 06:25:30
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 21.01% complete, ETA 06:22:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ops/us
# Warmup Iteration   2: 0.003 ops/us
# Warmup Iteration   3: 0.003 ops/us
# Warmup Iteration   4: 0.003 ops/us
# Warmup Iteration   5: 0.003 ops/us
Iteration   1: 0.003 ops/us
Iteration   2: 0.003 ops/us
Iteration   3: 0.003 ops/us
Iteration   4: 0.003 ops/us
Iteration   5: 0.003 ops/us
Iteration   6: 0.003 ops/us
Iteration   7: 0.003 ops/us
Iteration   8: 0.003 ops/us
Iteration   9: 0.003 ops/us
Iteration  10: 0.003 ops/us
Iteration  11: 0.003 ops/us
Iteration  12: 0.003 ops/us
Iteration  13: 0.003 ops/us
Iteration  14: 0.003 ops/us
Iteration  15: 0.003 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  0.003 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 21.74% complete, ETA 06:19:17
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 22.46% complete, ETA 06:16:10
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁷ ops/us
# Warmup Iteration   2: ≈ 10⁻⁷ ops/us
# Warmup Iteration   3: ≈ 10⁻⁷ ops/us
# Warmup Iteration   4: ≈ 10⁻⁷ ops/us
# Warmup Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   1: ≈ 10⁻⁷ ops/us
Iteration   2: ≈ 10⁻⁷ ops/us
Iteration   3: ≈ 10⁻⁷ ops/us
Iteration   4: ≈ 10⁻⁷ ops/us
Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   6: ≈ 10⁻⁷ ops/us
Iteration   7: ≈ 10⁻⁷ ops/us
Iteration   8: ≈ 10⁻⁷ ops/us
Iteration   9: ≈ 10⁻⁷ ops/us
Iteration  10: ≈ 10⁻⁷ ops/us
Iteration  11: ≈ 10⁻⁷ ops/us
Iteration  12: ≈ 10⁻⁷ ops/us
Iteration  13: ≈ 10⁻⁷ ops/us
Iteration  14: ≈ 10⁻⁷ ops/us
Iteration  15: ≈ 10⁻⁷ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  ≈ 10⁻⁷ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 23.19% complete, ETA 06:14:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ops/us
# Warmup Iteration   2: 0.001 ops/us
# Warmup Iteration   3: 0.001 ops/us
# Warmup Iteration   4: 0.001 ops/us
# Warmup Iteration   5: 0.001 ops/us
Iteration   1: 0.001 ops/us
Iteration   2: 0.001 ops/us
Iteration   3: 0.001 ops/us
Iteration   4: 0.001 ops/us
Iteration   5: 0.001 ops/us
Iteration   6: 0.001 ops/us
Iteration   7: 0.001 ops/us
Iteration   8: 0.001 ops/us
Iteration   9: 0.001 ops/us
Iteration  10: 0.001 ops/us
Iteration  11: 0.001 ops/us
Iteration  12: 0.001 ops/us
Iteration  13: 0.001 ops/us
Iteration  14: 0.001 ops/us
Iteration  15: 0.001 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  0.001 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 23.91% complete, ETA 06:11:35
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 24.64% complete, ETA 06:08:13
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 25.36% complete, ETA 06:05:07
# Fork: 1 of 1
# Warmup Iteration   1: 1.985 ops/us
# Warmup Iteration   2: 2.010 ops/us
# Warmup Iteration   3: 1.993 ops/us
# Warmup Iteration   4: 1.983 ops/us
# Warmup Iteration   5: 1.986 ops/us
Iteration   1: 1.987 ops/us
Iteration   2: 1.989 ops/us
Iteration   3: 1.991 ops/us
Iteration   4: 1.992 ops/us
Iteration   5: 1.989 ops/us
Iteration   6: 1.988 ops/us
Iteration   7: 1.985 ops/us
Iteration   8: 1.984 ops/us
Iteration   9: 1.989 ops/us
Iteration  10: 1.985 ops/us
Iteration  11: 1.982 ops/us
Iteration  12: 1.959 ops/us
Iteration  13: 1.957 ops/us
Iteration  14: 1.959 ops/us
Iteration  15: 1.959 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  1.980 ±(99.9%) 0.014 ops/us [Average]
  (min, avg, max) = (1.957, 1.980, 1.992), stdev = 0.013
  CI (99.9%): [1.965, 1.994] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 26.09% complete, ETA 06:01:39
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 26.81% complete, ETA 05:58:14
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 27.54% complete, ETA 05:54:49
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 28.26% complete, ETA 05:51:36
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 28.98% complete, ETA 05:48:23
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 29.71% complete, ETA 05:44:54
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 30.43% complete, ETA 05:41:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ops/us
# Warmup Iteration   2: 0.001 ops/us
# Warmup Iteration   3: 0.001 ops/us
# Warmup Iteration   4: 0.001 ops/us
# Warmup Iteration   5: 0.001 ops/us
Iteration   1: 0.001 ops/us
Iteration   2: 0.001 ops/us
Iteration   3: 0.001 ops/us
Iteration   4: 0.001 ops/us
Iteration   5: 0.001 ops/us
Iteration   6: 0.001 ops/us
Iteration   7: 0.001 ops/us
Iteration   8: 0.001 ops/us
Iteration   9: 0.001 ops/us
Iteration  10: 0.001 ops/us
Iteration  11: 0.001 ops/us
Iteration  12: 0.001 ops/us
Iteration  13: 0.001 ops/us
Iteration  14: 0.001 ops/us
Iteration  15: 0.001 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  0.001 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 31.16% complete, ETA 05:37:54
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 31.88% complete, ETA 05:34:23
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 32.61% complete, ETA 05:31:04
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 33.33% complete, ETA 05:28:34
# Fork: 1 of 1
# Warmup Iteration   1: 244380.681 us/op
# Warmup Iteration   2: 243926.730 us/op
# Warmup Iteration   3: 245132.883 us/op
# Warmup Iteration   4: 245394.364 us/op
# Warmup Iteration   5: 248902.051 us/op
Iteration   1: 245723.952 us/op
Iteration   2: 244690.398 us/op
Iteration   3: 246395.052 us/op
Iteration   4: 246181.898 us/op
Iteration   5: 251553.377 us/op
Iteration   6: 251541.051 us/op
Iteration   7: 248811.254 us/op
Iteration   8: 245977.422 us/op
Iteration   9: 247176.663 us/op
Iteration  10: 245516.355 us/op
Iteration  11: 246323.666 us/op
Iteration  12: 246685.076 us/op
Iteration  13: 248005.721 us/op
Iteration  14: 249454.921 us/op
Iteration  15: 248488.465 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  247501.685 ±(99.9%) 2248.767 us/op [Average]
  (min, avg, max) = (244690.398, 247501.685, 251553.377), stdev = 2103.498
  CI (99.9%): [245252.918, 249750.452] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 34.06% complete, ETA 05:25:05
# Fork: 1 of 1
# Warmup Iteration   1: 236531.897 us/op
# Warmup Iteration   2: 235739.575 us/op
# Warmup Iteration   3: 237963.823 us/op
# Warmup Iteration   4: 236672.519 us/op
# Warmup Iteration   5: 235145.023 us/op
Iteration   1: 236270.830 us/op
Iteration   2: 235953.112 us/op
Iteration   3: 236695.085 us/op
Iteration   4: 236140.166 us/op
Iteration   5: 236588.914 us/op
Iteration   6: 238347.131 us/op
Iteration   7: 238445.241 us/op
Iteration   8: 239178.125 us/op
Iteration   9: 235916.617 us/op
Iteration  10: 236121.045 us/op
Iteration  11: 239834.200 us/op
Iteration  12: 237650.081 us/op
Iteration  13: 241656.895 us/op
Iteration  14: 239388.681 us/op
Iteration  15: 235518.834 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  237580.330 ±(99.9%) 1942.314 us/op [Average]
  (min, avg, max) = (235518.834, 237580.330, 241656.895), stdev = 1816.842
  CI (99.9%): [235638.016, 239522.645] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 34.78% complete, ETA 05:21:36
# Fork: 1 of 1
# Warmup Iteration   1: 219030.228 us/op
# Warmup Iteration   2: 222495.699 us/op
# Warmup Iteration   3: 220046.056 us/op
# Warmup Iteration   4: 219746.105 us/op
# Warmup Iteration   5: 218986.331 us/op
Iteration   1: 220728.826 us/op
Iteration   2: 218193.248 us/op
Iteration   3: 217124.778 us/op
Iteration   4: 217880.145 us/op
Iteration   5: 220894.546 us/op
Iteration   6: 219317.265 us/op
Iteration   7: 219375.788 us/op
Iteration   8: 221438.152 us/op
Iteration   9: 220609.221 us/op
Iteration  10: 220303.246 us/op
Iteration  11: 218907.687 us/op
Iteration  12: 219604.424 us/op
Iteration  13: 216759.629 us/op
Iteration  14: 217130.421 us/op
Iteration  15: 217990.457 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  219083.856 ±(99.9%) 1623.227 us/op [Average]
  (min, avg, max) = (216759.629, 219083.856, 221438.152), stdev = 1518.368
  CI (99.9%): [217460.628, 220707.083] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 35.51% complete, ETA 05:18:06
# Fork: 1 of 1
# Warmup Iteration   1: 247461.081 us/op
# Warmup Iteration   2: 248900.470 us/op
# Warmup Iteration   3: 283727.673 us/op
# Warmup Iteration   4: 311313.808 us/op
# Warmup Iteration   5: 312049.126 us/op
Iteration   1: 311149.151 us/op
Iteration   2: 308700.654 us/op
Iteration   3: 310704.483 us/op
Iteration   4: 313609.153 us/op
Iteration   5: 311559.228 us/op
Iteration   6: 312358.591 us/op
Iteration   7: 307986.500 us/op
Iteration   8: 311311.417 us/op
Iteration   9: 308606.170 us/op
Iteration  10: 308624.193 us/op
Iteration  11: 310420.887 us/op
Iteration  12: 312237.756 us/op
Iteration  13: 313912.694 us/op
Iteration  14: 314423.696 us/op
Iteration  15: 310731.746 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  311089.088 ±(99.9%) 2156.022 us/op [Average]
  (min, avg, max) = (307986.500, 311089.088, 314423.696), stdev = 2016.744
  CI (99.9%): [308933.066, 313245.110] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 36.23% complete, ETA 05:14:39
# Fork: 1 of 1
# Warmup Iteration   1: 226415.652 us/op
# Warmup Iteration   2: 225162.870 us/op
# Warmup Iteration   3: 224984.675 us/op
# Warmup Iteration   4: 225684.668 us/op
# Warmup Iteration   5: 227513.456 us/op
Iteration   1: 224110.352 us/op
Iteration   2: 226812.389 us/op
Iteration   3: 227621.435 us/op
Iteration   4: 227486.411 us/op
Iteration   5: 227898.668 us/op
Iteration   6: 246170.753 us/op
Iteration   7: 257791.679 us/op
Iteration   8: 268236.287 us/op
Iteration   9: 271312.009 us/op
Iteration  10: 268810.745 us/op
Iteration  11: 268161.793 us/op
Iteration  12: 268426.374 us/op
Iteration  13: 270699.297 us/op
Iteration  14: 272160.954 us/op
Iteration  15: 271122.794 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  253121.463 ±(99.9%) 21776.587 us/op [Average]
  (min, avg, max) = (224110.352, 253121.463, 272160.954), stdev = 20369.833
  CI (99.9%): [231344.875, 274898.050] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 36.96% complete, ETA 05:11:09
# Fork: 1 of 1
# Warmup Iteration   1: 218734.732 us/op
# Warmup Iteration   2: 218025.313 us/op
# Warmup Iteration   3: 219533.251 us/op
# Warmup Iteration   4: 219699.203 us/op
# Warmup Iteration   5: 215956.933 us/op
Iteration   1: 216384.783 us/op
Iteration   2: 218565.012 us/op
Iteration   3: 219874.029 us/op
Iteration   4: 219060.676 us/op
Iteration   5: 217925.664 us/op
Iteration   6: 219133.773 us/op
Iteration   7: 219486.047 us/op
Iteration   8: 219795.169 us/op
Iteration   9: 219412.661 us/op
Iteration  10: 219556.448 us/op
Iteration  11: 216962.972 us/op
Iteration  12: 218071.012 us/op
Iteration  13: 217958.766 us/op
Iteration  14: 217677.660 us/op
Iteration  15: 219497.512 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  218624.145 ±(99.9%) 1153.203 us/op [Average]
  (min, avg, max) = (216384.783, 218624.145, 219874.029), stdev = 1078.707
  CI (99.9%): [217470.943, 219777.348] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 37.68% complete, ETA 05:07:37
# Fork: 1 of 1
# Warmup Iteration   1: 1316636.840 us/op
# Warmup Iteration   2: 1369727.641 us/op
# Warmup Iteration   3: 1298282.581 us/op
# Warmup Iteration   4: 1355290.924 us/op
# Warmup Iteration   5: 1300325.033 us/op
Iteration   1: 1302724.693 us/op
Iteration   2: 1304983.482 us/op
Iteration   3: 1288403.179 us/op
Iteration   4: 1300666.126 us/op
Iteration   5: 1314016.618 us/op
Iteration   6: 1289155.524 us/op
Iteration   7: 1272734.581 us/op
Iteration   8: 1272625.843 us/op
Iteration   9: 1180467.863 us/op
Iteration  10: 1417184.730 us/op
Iteration  11: 944717.713 us/op
Iteration  12: 862200.914 us/op
Iteration  13: 853974.452 us/op
Iteration  14: 857229.646 us/op
Iteration  15: 860374.204 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1154763.971 ±(99.9%) 224927.850 us/op [Average]
  (min, avg, max) = (853974.452, 1154763.971, 1417184.730), stdev = 210397.650
  CI (99.9%): [929836.121, 1379691.821] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 38.40% complete, ETA 05:04:20
# Fork: 1 of 1
# Warmup Iteration   1: 927248.816 us/op
# Warmup Iteration   2: 917404.820 us/op
# Warmup Iteration   3: 911073.844 us/op
# Warmup Iteration   4: 918127.560 us/op
# Warmup Iteration   5: 927663.570 us/op
Iteration   1: 936124.340 us/op
Iteration   2: 929635.629 us/op
Iteration   3: 915841.014 us/op
Iteration   4: 923457.427 us/op
Iteration   5: 919153.941 us/op
Iteration   6: 923255.811 us/op
Iteration   7: 906106.200 us/op
Iteration   8: 907399.755 us/op
Iteration   9: 912421.563 us/op
Iteration  10: 903941.563 us/op
Iteration  11: 904306.834 us/op
Iteration  12: 914157.602 us/op
Iteration  13: 906429.072 us/op
Iteration  14: 912053.766 us/op
Iteration  15: 908973.683 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  914883.880 ±(99.9%) 10369.644 us/op [Average]
  (min, avg, max) = (903941.563, 914883.880, 936124.340), stdev = 9699.772
  CI (99.9%): [904514.236, 925253.524] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 39.13% complete, ETA 05:00:56
# Fork: 1 of 1
# Warmup Iteration   1: 689304.061 us/op
# Warmup Iteration   2: 677911.880 us/op
# Warmup Iteration   3: 686990.313 us/op
# Warmup Iteration   4: 691313.970 us/op
# Warmup Iteration   5: 678325.436 us/op
Iteration   1: 684611.023 us/op
Iteration   2: 681166.170 us/op
Iteration   3: 680611.808 us/op
Iteration   4: 680906.445 us/op
Iteration   5: 681303.409 us/op
Iteration   6: 680502.652 us/op
Iteration   7: 678979.901 us/op
Iteration   8: 680201.745 us/op
Iteration   9: 680807.298 us/op
Iteration  10: 680492.165 us/op
Iteration  11: 681740.460 us/op
Iteration  12: 675467.990 us/op
Iteration  13: 679653.338 us/op
Iteration  14: 678854.005 us/op
Iteration  15: 678672.188 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  680264.707 ±(99.9%) 2089.031 us/op [Average]
  (min, avg, max) = (675467.990, 680264.707, 684611.023), stdev = 1954.081
  CI (99.9%): [678175.675, 682353.738] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 39.85% complete, ETA 04:57:27
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap(AllocationBenchmark.java:52)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_avgt_jmhStub(AllocationBenchmark_fillHeap_jmhTest.java:269)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_AverageTime(AllocationBenchmark_fillHeap_jmhTest.java:212)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 40.58% complete, ETA 04:48:41
# Fork: 1 of 1
# Warmup Iteration   1: 497179.697 us/op
# Warmup Iteration   2: 496638.028 us/op
# Warmup Iteration   3: 497929.565 us/op
# Warmup Iteration   4: 501098.859 us/op
# Warmup Iteration   5: 499602.612 us/op
Iteration   1: 502947.606 us/op
Iteration   2: 500244.661 us/op
Iteration   3: 495761.160 us/op
Iteration   4: 503365.139 us/op
Iteration   5: 500569.153 us/op
Iteration   6: 506527.836 us/op
Iteration   7: 499501.174 us/op
Iteration   8: 492056.149 us/op
Iteration   9: 500661.444 us/op
Iteration  10: 499625.472 us/op
Iteration  11: 540018.146 us/op
Iteration  12: 619506.965 us/op
Iteration  13: 628175.175 us/op
Iteration  14: 626742.311 us/op
Iteration  15: 623547.401 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  535949.986 ±(99.9%) 60203.739 us/op [Average]
  (min, avg, max) = (492056.149, 535949.986, 628175.175), stdev = 56314.614
  CI (99.9%): [475746.247, 596153.725] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 41.30% complete, ETA 04:45:22
# Fork: 1 of 1
# Warmup Iteration   1: 499055.201 us/op
# Warmup Iteration   2: 490462.514 us/op
# Warmup Iteration   3: 500951.409 us/op
# Warmup Iteration   4: 493850.472 us/op
# Warmup Iteration   5: 490797.985 us/op
Iteration   1: 487235.741 us/op
Iteration   2: 496096.007 us/op
Iteration   3: 496931.597 us/op
Iteration   4: 495760.086 us/op
Iteration   5: 491367.025 us/op
Iteration   6: 493530.575 us/op
Iteration   7: 493806.223 us/op
Iteration   8: 490019.344 us/op
Iteration   9: 493005.628 us/op
Iteration  10: 497658.119 us/op
Iteration  11: 488625.989 us/op
Iteration  12: 487750.238 us/op
Iteration  13: 492385.285 us/op
Iteration  14: 487044.429 us/op
Iteration  15: 497943.307 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  492610.640 ±(99.9%) 4088.560 us/op [Average]
  (min, avg, max) = (487044.429, 492610.640, 497943.307), stdev = 3824.441
  CI (99.9%): [488522.080, 496699.199] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 42.03% complete, ETA 04:42:04
# Fork: 1 of 1
# Warmup Iteration   1: 383.956 us/op
# Warmup Iteration   2: 384.056 us/op
# Warmup Iteration   3: 384.207 us/op
# Warmup Iteration   4: 383.449 us/op
# Warmup Iteration   5: 384.124 us/op
Iteration   1: 381.042 us/op
Iteration   2: 381.725 us/op
Iteration   3: 380.905 us/op
Iteration   4: 382.029 us/op
Iteration   5: 381.448 us/op
Iteration   6: 382.068 us/op
Iteration   7: 380.595 us/op
Iteration   8: 382.179 us/op
Iteration   9: 381.142 us/op
Iteration  10: 381.861 us/op
Iteration  11: 382.576 us/op
Iteration  12: 383.180 us/op
Iteration  13: 381.845 us/op
Iteration  14: 383.370 us/op
Iteration  15: 382.917 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  381.926 ±(99.9%) 0.887 us/op [Average]
  (min, avg, max) = (380.595, 381.926, 383.370), stdev = 0.830
  CI (99.9%): [381.038, 382.813] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 42.75% complete, ETA 04:38:36
# Fork: 1 of 1
# Warmup Iteration   1: 169.797 us/op
# Warmup Iteration   2: 168.957 us/op
# Warmup Iteration   3: 169.571 us/op
# Warmup Iteration   4: 170.764 us/op
# Warmup Iteration   5: 169.898 us/op
Iteration   1: 170.907 us/op
Iteration   2: 171.000 us/op
Iteration   3: 170.210 us/op
Iteration   4: 168.359 us/op
Iteration   5: 170.338 us/op
Iteration   6: 169.448 us/op
Iteration   7: 170.220 us/op
Iteration   8: 168.091 us/op
Iteration   9: 170.028 us/op
Iteration  10: 170.114 us/op
Iteration  11: 170.289 us/op
Iteration  12: 169.186 us/op
Iteration  13: 169.285 us/op
Iteration  14: 168.839 us/op
Iteration  15: 168.879 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  169.680 ±(99.9%) 0.948 us/op [Average]
  (min, avg, max) = (168.091, 169.680, 171.000), stdev = 0.887
  CI (99.9%): [168.732, 170.627] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 43.48% complete, ETA 04:35:09
# Fork: 1 of 1
# Warmup Iteration   1: 201.127 us/op
# Warmup Iteration   2: 200.967 us/op
# Warmup Iteration   3: 203.489 us/op
# Warmup Iteration   4: 201.904 us/op
# Warmup Iteration   5: 201.625 us/op
Iteration   1: 201.609 us/op
Iteration   2: 201.757 us/op
Iteration   3: 201.572 us/op
Iteration   4: 201.519 us/op
Iteration   5: 201.498 us/op
Iteration   6: 201.407 us/op
Iteration   7: 201.461 us/op
Iteration   8: 201.644 us/op
Iteration   9: 201.593 us/op
Iteration  10: 201.469 us/op
Iteration  11: 201.667 us/op
Iteration  12: 201.530 us/op
Iteration  13: 201.517 us/op
Iteration  14: 201.400 us/op
Iteration  15: 201.452 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  201.540 ±(99.9%) 0.108 us/op [Average]
  (min, avg, max) = (201.400, 201.540, 201.757), stdev = 0.101
  CI (99.9%): [201.432, 201.647] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 44.20% complete, ETA 04:31:41
# Fork: 1 of 1
# Warmup Iteration   1: 182.713 us/op
# Warmup Iteration   2: 183.463 us/op
# Warmup Iteration   3: 182.916 us/op
# Warmup Iteration   4: 183.067 us/op
# Warmup Iteration   5: 183.022 us/op
Iteration   1: 185.001 us/op
Iteration   2: 183.153 us/op
Iteration   3: 183.674 us/op
Iteration   4: 182.420 us/op
Iteration   5: 181.976 us/op
Iteration   6: 182.231 us/op
Iteration   7: 183.357 us/op
Iteration   8: 183.191 us/op
Iteration   9: 181.514 us/op
Iteration  10: 182.959 us/op
Iteration  11: 182.158 us/op
Iteration  12: 184.804 us/op
Iteration  13: 184.016 us/op
Iteration  14: 184.077 us/op
Iteration  15: 183.152 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  183.179 ±(99.9%) 1.089 us/op [Average]
  (min, avg, max) = (181.514, 183.179, 185.001), stdev = 1.019
  CI (99.9%): [182.090, 184.268] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 44.93% complete, ETA 04:28:13
# Fork: 1 of 1
# Warmup Iteration   1: 1307800.449 us/op
# Warmup Iteration   2: 1293771.079 us/op
# Warmup Iteration   3: 1292756.237 us/op
# Warmup Iteration   4: 1292466.528 us/op
# Warmup Iteration   5: 1291882.024 us/op
Iteration   1: 1293448.663 us/op
Iteration   2: 1297310.694 us/op
Iteration   3: 1293775.531 us/op
Iteration   4: 1291787.431 us/op
Iteration   5: 1292394.669 us/op
Iteration   6: 1299350.171 us/op
Iteration   7: 1293304.319 us/op
Iteration   8: 1292519.656 us/op
Iteration   9: 1294081.751 us/op
Iteration  10: 1294236.439 us/op
Iteration  11: 1292790.862 us/op
Iteration  12: 1293432.891 us/op
Iteration  13: 1293285.790 us/op
Iteration  14: 1294237.446 us/op
Iteration  15: 1292505.643 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  1293897.464 ±(99.9%) 2110.750 us/op [Average]
  (min, avg, max) = (1291787.431, 1293897.464, 1299350.171), stdev = 1974.397
  CI (99.9%): [1291786.713, 1296008.214] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 45.65% complete, ETA 04:24:54
# Fork: 1 of 1
# Warmup Iteration   1: 417732.822 us/op
# Warmup Iteration   2: 417745.778 us/op
# Warmup Iteration   3: 418017.747 us/op
# Warmup Iteration   4: 408110.373 us/op
# Warmup Iteration   5: 709169.881 us/op
Iteration   1: 706633.073 us/op
Iteration   2: 712807.620 us/op
Iteration   3: 708477.760 us/op
Iteration   4: 737362.056 us/op
Iteration   5: 737003.017 us/op
Iteration   6: 687504.656 us/op
Iteration   7: 725840.767 us/op
Iteration   8: 717422.721 us/op
Iteration   9: 705600.234 us/op
Iteration  10: 718144.226 us/op
Iteration  11: 709832.504 us/op
Iteration  12: 730669.241 us/op
Iteration  13: 705918.370 us/op
Iteration  14: 710005.681 us/op
Iteration  15: 709186.958 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  714827.259 ±(99.9%) 14263.519 us/op [Average]
  (min, avg, max) = (687504.656, 714827.259, 737362.056), stdev = 13342.105
  CI (99.9%): [700563.740, 729090.778] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 46.38% complete, ETA 04:21:37
# Fork: 1 of 1
# Warmup Iteration   1: 17049991.485 us/op
# Warmup Iteration   2: 17003606.738 us/op
# Warmup Iteration   3: 17413206.173 us/op
# Warmup Iteration   4: 16947521.058 us/op
# Warmup Iteration   5: 16747159.934 us/op
Iteration   1: 17185196.590 us/op
Iteration   2: 16743855.786 us/op
Iteration   3: 17058387.930 us/op
Iteration   4: 17240462.702 us/op
Iteration   5: 17240529.082 us/op
Iteration   6: 17114490.997 us/op
Iteration   7: 17085256.845 us/op
Iteration   8: 16898398.297 us/op
Iteration   9: 16294384.391 us/op
Iteration  10: 16892288.560 us/op
Iteration  11: 17135618.557 us/op
Iteration  12: 16928362.822 us/op
Iteration  13: 16984780.243 us/op
Iteration  14: 17004131.607 us/op
Iteration  15: 16934911.553 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  16982737.064 ±(99.9%) 252780.559 us/op [Average]
  (min, avg, max) = (16294384.391, 16982737.064, 17240529.082), stdev = 236451.092
  CI (99.9%): [16729956.505, 17235517.623] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 47.10% complete, ETA 04:20:46
# Fork: 1 of 1
# Warmup Iteration   1: 1.875 us/op
# Warmup Iteration   2: 1.874 us/op
# Warmup Iteration   3: 1.872 us/op
# Warmup Iteration   4: 1.870 us/op
# Warmup Iteration   5: 1.869 us/op
Iteration   1: 1.870 us/op
Iteration   2: 1.870 us/op
Iteration   3: 1.869 us/op
Iteration   4: 1.869 us/op
Iteration   5: 1.869 us/op
Iteration   6: 1.870 us/op
Iteration   7: 1.869 us/op
Iteration   8: 1.869 us/op
Iteration   9: 1.870 us/op
Iteration  10: 1.872 us/op
Iteration  11: 1.873 us/op
Iteration  12: 1.871 us/op
Iteration  13: 1.872 us/op
Iteration  14: 1.871 us/op
Iteration  15: 1.872 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  1.870 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (1.869, 1.870, 1.873), stdev = 0.001
  CI (99.9%): [1.869, 1.872] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 47.82% complete, ETA 04:17:12
# Fork: 1 of 1
# Warmup Iteration   1: 5.030 us/op
# Warmup Iteration   2: 5.015 us/op
# Warmup Iteration   3: 5.018 us/op
# Warmup Iteration   4: 5.016 us/op
# Warmup Iteration   5: 4.998 us/op
Iteration   1: 4.996 us/op
Iteration   2: 5.008 us/op
Iteration   3: 5.008 us/op
Iteration   4: 5.008 us/op
Iteration   5: 5.023 us/op
Iteration   6: 5.019 us/op
Iteration   7: 5.010 us/op
Iteration   8: 5.017 us/op
Iteration   9: 5.004 us/op
Iteration  10: 5.021 us/op
Iteration  11: 5.024 us/op
Iteration  12: 5.002 us/op
Iteration  13: 5.003 us/op
Iteration  14: 4.996 us/op
Iteration  15: 5.004 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  5.009 ±(99.9%) 0.010 us/op [Average]
  (min, avg, max) = (4.996, 5.009, 5.024), stdev = 0.009
  CI (99.9%): [5.000, 5.019] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 48.55% complete, ETA 04:13:38
# Fork: 1 of 1
# Warmup Iteration   1: 8.975 us/op
# Warmup Iteration   2: 9.006 us/op
# Warmup Iteration   3: 9.008 us/op
# Warmup Iteration   4: 8.988 us/op
# Warmup Iteration   5: 8.987 us/op
Iteration   1: 8.981 us/op
Iteration   2: 8.990 us/op
Iteration   3: 9.009 us/op
Iteration   4: 8.954 us/op
Iteration   5: 8.980 us/op
Iteration   6: 8.952 us/op
Iteration   7: 8.983 us/op
Iteration   8: 8.959 us/op
Iteration   9: 8.984 us/op
Iteration  10: 8.982 us/op
Iteration  11: 8.971 us/op
Iteration  12: 8.971 us/op
Iteration  13: 8.946 us/op
Iteration  14: 8.963 us/op
Iteration  15: 8.979 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  8.974 ±(99.9%) 0.018 us/op [Average]
  (min, avg, max) = (8.946, 8.974, 9.009), stdev = 0.017
  CI (99.9%): [8.956, 8.991] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 49.27% complete, ETA 04:10:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.052 us/op
# Warmup Iteration   2: 0.048 us/op
# Warmup Iteration   3: 0.039 us/op
# Warmup Iteration   4: 0.039 us/op
# Warmup Iteration   5: 0.039 us/op
Iteration   1: 0.039 us/op
Iteration   2: 0.039 us/op
Iteration   3: 0.039 us/op
Iteration   4: 0.039 us/op
Iteration   5: 0.039 us/op
Iteration   6: 0.039 us/op
Iteration   7: 0.039 us/op
Iteration   8: 0.039 us/op
Iteration   9: 0.039 us/op
Iteration  10: 0.039 us/op
Iteration  11: 0.039 us/op
Iteration  12: 0.039 us/op
Iteration  13: 0.039 us/op
Iteration  14: 0.039 us/op
Iteration  15: 0.040 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.039 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.039, 0.039, 0.040), stdev = 0.001
  CI (99.9%): [0.039, 0.039] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 50.00% complete, ETA 04:06:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.424 us/op
# Warmup Iteration   2: 0.423 us/op
# Warmup Iteration   3: 0.345 us/op
# Warmup Iteration   4: 0.348 us/op
# Warmup Iteration   5: 0.353 us/op
Iteration   1: 0.354 us/op
Iteration   2: 0.346 us/op
Iteration   3: 0.353 us/op
Iteration   4: 0.348 us/op
Iteration   5: 0.349 us/op
Iteration   6: 0.347 us/op
Iteration   7: 0.345 us/op
Iteration   8: 0.346 us/op
Iteration   9: 0.359 us/op
Iteration  10: 0.347 us/op
Iteration  11: 0.353 us/op
Iteration  12: 0.352 us/op
Iteration  13: 0.348 us/op
Iteration  14: 0.349 us/op
Iteration  15: 0.353 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.350 ±(99.9%) 0.004 us/op [Average]
  (min, avg, max) = (0.345, 0.350, 0.359), stdev = 0.004
  CI (99.9%): [0.346, 0.354] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 50.72% complete, ETA 04:02:55
# Fork: 1 of 1
# Warmup Iteration   1: 4.353 us/op
# Warmup Iteration   2: 4.460 us/op
# Warmup Iteration   3: 3.895 us/op
# Warmup Iteration   4: 3.921 us/op
# Warmup Iteration   5: 3.894 us/op
Iteration   1: 3.967 us/op
Iteration   2: 3.931 us/op
Iteration   3: 3.880 us/op
Iteration   4: 4.017 us/op
Iteration   5: 4.092 us/op
Iteration   6: 3.948 us/op
Iteration   7: 3.968 us/op
Iteration   8: 3.918 us/op
Iteration   9: 3.892 us/op
Iteration  10: 3.984 us/op
Iteration  11: 3.979 us/op
Iteration  12: 3.897 us/op
Iteration  13: 3.852 us/op
Iteration  14: 3.910 us/op
Iteration  15: 3.932 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  3.944 ±(99.9%) 0.064 us/op [Average]
  (min, avg, max) = (3.852, 3.944, 4.092), stdev = 0.060
  CI (99.9%): [3.880, 4.009] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 51.45% complete, ETA 03:59:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.044 us/op
# Warmup Iteration   2: 0.053 us/op
# Warmup Iteration   3: 0.039 us/op
# Warmup Iteration   4: 0.039 us/op
# Warmup Iteration   5: 0.039 us/op
Iteration   1: 0.039 us/op
Iteration   2: 0.039 us/op
Iteration   3: 0.039 us/op
Iteration   4: 0.039 us/op
Iteration   5: 0.039 us/op
Iteration   6: 0.040 us/op
Iteration   7: 0.039 us/op
Iteration   8: 0.039 us/op
Iteration   9: 0.039 us/op
Iteration  10: 0.039 us/op
Iteration  11: 0.040 us/op
Iteration  12: 0.039 us/op
Iteration  13: 0.039 us/op
Iteration  14: 0.040 us/op
Iteration  15: 0.039 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.039 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.039, 0.039, 0.040), stdev = 0.001
  CI (99.9%): [0.038, 0.040] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 52.17% complete, ETA 03:55:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.384 us/op
# Warmup Iteration   2: 0.421 us/op
# Warmup Iteration   3: 0.379 us/op
# Warmup Iteration   4: 0.379 us/op
# Warmup Iteration   5: 0.382 us/op
Iteration   1: 0.386 us/op
Iteration   2: 0.381 us/op
Iteration   3: 0.380 us/op
Iteration   4: 0.380 us/op
Iteration   5: 0.386 us/op
Iteration   6: 0.400 us/op
Iteration   7: 0.383 us/op
Iteration   8: 0.386 us/op
Iteration   9: 0.382 us/op
Iteration  10: 0.379 us/op
Iteration  11: 0.380 us/op
Iteration  12: 0.385 us/op
Iteration  13: 0.379 us/op
Iteration  14: 0.379 us/op
Iteration  15: 0.379 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.383 ±(99.9%) 0.006 us/op [Average]
  (min, avg, max) = (0.379, 0.383, 0.400), stdev = 0.006
  CI (99.9%): [0.377, 0.389] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 52.90% complete, ETA 03:52:13
# Fork: 1 of 1
# Warmup Iteration   1: 4.168 us/op
# Warmup Iteration   2: 4.030 us/op
# Warmup Iteration   3: 4.071 us/op
# Warmup Iteration   4: 4.097 us/op
# Warmup Iteration   5: 3.986 us/op
Iteration   1: 4.013 us/op
Iteration   2: 4.141 us/op
Iteration   3: 3.980 us/op
Iteration   4: 4.054 us/op
Iteration   5: 4.097 us/op
Iteration   6: 3.950 us/op
Iteration   7: 4.062 us/op
Iteration   8: 4.063 us/op
Iteration   9: 4.039 us/op
Iteration  10: 4.172 us/op
Iteration  11: 4.084 us/op
Iteration  12: 4.037 us/op
Iteration  13: 4.065 us/op
Iteration  14: 4.083 us/op
Iteration  15: 4.068 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  4.060 ±(99.9%) 0.060 us/op [Average]
  (min, avg, max) = (3.950, 4.060, 4.172), stdev = 0.056
  CI (99.9%): [4.001, 4.120] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 53.62% complete, ETA 03:48:39
# Fork: 1 of 1
# Warmup Iteration   1: 14645.241 us/op
# Warmup Iteration   2: 14582.161 us/op
# Warmup Iteration   3: 14570.790 us/op
# Warmup Iteration   4: 14576.649 us/op
# Warmup Iteration   5: 14585.626 us/op
Iteration   1: 14593.253 us/op
Iteration   2: 14612.746 us/op
Iteration   3: 14607.273 us/op
Iteration   4: 14610.643 us/op
Iteration   5: 14610.288 us/op
Iteration   6: 14628.258 us/op
Iteration   7: 14617.039 us/op
Iteration   8: 14594.504 us/op
Iteration   9: 14632.728 us/op
Iteration  10: 14598.745 us/op
Iteration  11: 14596.449 us/op
Iteration  12: 14609.042 us/op
Iteration  13: 14594.803 us/op
Iteration  14: 14613.526 us/op
Iteration  15: 14605.206 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  14608.300 ±(99.9%) 12.681 us/op [Average]
  (min, avg, max) = (14593.253, 14608.300, 14632.728), stdev = 11.861
  CI (99.9%): [14595.620, 14620.981] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 54.35% complete, ETA 03:45:06
# Fork: 1 of 1
# Warmup Iteration   1: 382.521 us/op
# Warmup Iteration   2: 382.442 us/op
# Warmup Iteration   3: 379.246 us/op
# Warmup Iteration   4: 378.667 us/op
# Warmup Iteration   5: 379.924 us/op
Iteration   1: 375.238 us/op
Iteration   2: 374.385 us/op
Iteration   3: 377.488 us/op
Iteration   4: 374.782 us/op
Iteration   5: 376.310 us/op
Iteration   6: 374.214 us/op
Iteration   7: 377.546 us/op
Iteration   8: 377.566 us/op
Iteration   9: 373.996 us/op
Iteration  10: 373.451 us/op
Iteration  11: 380.202 us/op
Iteration  12: 378.663 us/op
Iteration  13: 377.579 us/op
Iteration  14: 377.824 us/op
Iteration  15: 377.064 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  376.420 ±(99.9%) 2.111 us/op [Average]
  (min, avg, max) = (373.451, 376.420, 380.202), stdev = 1.974
  CI (99.9%): [374.310, 378.531] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 55.07% complete, ETA 03:41:34
# Fork: 1 of 1
# Warmup Iteration   1: 36904.262 us/op
# Warmup Iteration   2: 36531.349 us/op
# Warmup Iteration   3: 36549.849 us/op
# Warmup Iteration   4: 36666.440 us/op
# Warmup Iteration   5: 36386.667 us/op
Iteration   1: 36806.272 us/op
Iteration   2: 36508.876 us/op
Iteration   3: 36827.758 us/op
Iteration   4: 36556.434 us/op
Iteration   5: 36248.040 us/op
Iteration   6: 36607.158 us/op
Iteration   7: 36444.320 us/op
Iteration   8: 36752.677 us/op
Iteration   9: 36654.646 us/op
Iteration  10: 36788.443 us/op
Iteration  11: 36317.156 us/op
Iteration  12: 36290.815 us/op
Iteration  13: 36915.170 us/op
Iteration  14: 36792.489 us/op
Iteration  15: 36728.649 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  36615.927 ±(99.9%) 228.453 us/op [Average]
  (min, avg, max) = (36248.040, 36615.927, 36915.170), stdev = 213.695
  CI (99.9%): [36387.474, 36844.380] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 55.80% complete, ETA 03:38:02
# Fork: 1 of 1
# Warmup Iteration   1: 3811753.944 us/op
# Warmup Iteration   2: 11390076.067 us/op
# Warmup Iteration   3: 11841281.039 us/op
# Warmup Iteration   4: 11859524.094 us/op
# Warmup Iteration   5: 11867339.456 us/op
Iteration   1: 11874166.788 us/op
Iteration   2: 11835011.243 us/op
Iteration   3: 11812414.457 us/op
Iteration   4: 11825115.005 us/op
Iteration   5: 11866812.658 us/op
Iteration   6: 11847988.093 us/op
Iteration   7: 11818709.006 us/op
Iteration   8: 11895106.684 us/op
Iteration   9: 11949998.610 us/op
Iteration  10: 11850720.464 us/op
Iteration  11: 11866664.479 us/op
Iteration  12: 11813776.748 us/op
Iteration  13: 11787829.673 us/op
Iteration  14: 11832760.180 us/op
Iteration  15: 11828615.671 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  11847045.984 ±(99.9%) 42590.182 us/op [Average]
  (min, avg, max) = (11787829.673, 11847045.984, 11949998.610), stdev = 39838.883
  CI (99.9%): [11804455.802, 11889636.166] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 56.52% complete, ETA 03:34:57
# Fork: 1 of 1
# Warmup Iteration   1: 1909.698 us/op
# Warmup Iteration   2: 1903.193 us/op
# Warmup Iteration   3: 1905.254 us/op
# Warmup Iteration   4: 1907.772 us/op
# Warmup Iteration   5: 1906.488 us/op
Iteration   1: 1903.502 us/op
Iteration   2: 1902.644 us/op
Iteration   3: 1901.967 us/op
Iteration   4: 1896.985 us/op
Iteration   5: 1896.224 us/op
Iteration   6: 1895.044 us/op
Iteration   7: 1899.405 us/op
Iteration   8: 1899.568 us/op
Iteration   9: 1898.941 us/op
Iteration  10: 1898.106 us/op
Iteration  11: 1900.887 us/op
Iteration  12: 1894.218 us/op
Iteration  13: 1896.680 us/op
Iteration  14: 1897.225 us/op
Iteration  15: 1898.587 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  1898.666 ±(99.9%) 2.921 us/op [Average]
  (min, avg, max) = (1894.218, 1898.666, 1903.502), stdev = 2.732
  CI (99.9%): [1895.745, 1901.586] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 57.24% complete, ETA 03:31:23
# Fork: 1 of 1
# Warmup Iteration   1: 47063.219 us/op
# Warmup Iteration   2: 46939.392 us/op
# Warmup Iteration   3: 46958.338 us/op
# Warmup Iteration   4: 46977.076 us/op
# Warmup Iteration   5: 46959.507 us/op
Iteration   1: 46980.042 us/op
Iteration   2: 46959.419 us/op
Iteration   3: 46939.153 us/op
Iteration   4: 46930.820 us/op
Iteration   5: 46965.262 us/op
Iteration   6: 46944.585 us/op
Iteration   7: 46967.597 us/op
Iteration   8: 46931.712 us/op
Iteration   9: 46973.528 us/op
Iteration  10: 46951.258 us/op
Iteration  11: 46989.021 us/op
Iteration  12: 46915.772 us/op
Iteration  13: 47089.737 us/op
Iteration  14: 47011.601 us/op
Iteration  15: 46973.947 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  46968.230 ±(99.9%) 44.760 us/op [Average]
  (min, avg, max) = (46915.772, 46968.230, 47089.737), stdev = 41.869
  CI (99.9%): [46923.470, 47012.991] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 57.97% complete, ETA 03:27:48
# Fork: 1 of 1
# Warmup Iteration   1: 1722872.947 us/op
# Warmup Iteration   2: 1712037.521 us/op
# Warmup Iteration   3: 1714929.048 us/op
# Warmup Iteration   4: 1714569.162 us/op
# Warmup Iteration   5: 1713101.219 us/op
Iteration   1: 1715044.121 us/op
Iteration   2: 1715552.079 us/op
Iteration   3: 1714590.113 us/op
Iteration   4: 1716037.543 us/op
Iteration   5: 1714536.689 us/op
Iteration   6: 1713504.567 us/op
Iteration   7: 1716259.303 us/op
Iteration   8: 1718955.859 us/op
Iteration   9: 1715742.270 us/op
Iteration  10: 1714932.993 us/op
Iteration  11: 1712360.519 us/op
Iteration  12: 1711715.232 us/op
Iteration  13: 1713926.377 us/op
Iteration  14: 1715426.121 us/op
Iteration  15: 1713862.948 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  1714829.782 ±(99.9%) 1845.959 us/op [Average]
  (min, avg, max) = (1711715.232, 1714829.782, 1718955.859), stdev = 1726.711
  CI (99.9%): [1712983.824, 1716675.741] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 58.69% complete, ETA 03:24:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.500 us/op
# Warmup Iteration   2: 0.504 us/op
# Warmup Iteration   3: 0.500 us/op
# Warmup Iteration   4: 0.500 us/op
# Warmup Iteration   5: 0.500 us/op
Iteration   1: 0.499 us/op
Iteration   2: 0.501 us/op
Iteration   3: 0.500 us/op
Iteration   4: 0.500 us/op
Iteration   5: 0.501 us/op
Iteration   6: 0.501 us/op
Iteration   7: 0.501 us/op
Iteration   8: 0.500 us/op
Iteration   9: 0.500 us/op
Iteration  10: 0.501 us/op
Iteration  11: 0.501 us/op
Iteration  12: 0.511 us/op
Iteration  13: 0.511 us/op
Iteration  14: 0.510 us/op
Iteration  15: 0.511 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  0.503 ±(99.9%) 0.005 us/op [Average]
  (min, avg, max) = (0.499, 0.503, 0.511), stdev = 0.005
  CI (99.9%): [0.498, 0.508] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 59.42% complete, ETA 03:20:42
# Fork: 1 of 1
# Warmup Iteration   1: 8443.701 us/op
# Warmup Iteration   2: 8372.228 us/op
# Warmup Iteration   3: 8381.289 us/op
# Warmup Iteration   4: 8349.154 us/op
# Warmup Iteration   5: 8362.234 us/op
Iteration   1: 8367.459 us/op
Iteration   2: 8365.242 us/op
Iteration   3: 8367.243 us/op
Iteration   4: 8361.439 us/op
Iteration   5: 8362.372 us/op
Iteration   6: 8373.011 us/op
Iteration   7: 8357.248 us/op
Iteration   8: 8373.459 us/op
Iteration   9: 8376.511 us/op
Iteration  10: 8356.102 us/op
Iteration  11: 8361.653 us/op
Iteration  12: 8372.259 us/op
Iteration  13: 8358.248 us/op
Iteration  14: 8356.501 us/op
Iteration  15: 8355.197 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  8364.263 ±(99.9%) 7.602 us/op [Average]
  (min, avg, max) = (8355.197, 8364.263, 8376.511), stdev = 7.111
  CI (99.9%): [8356.661, 8371.865] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 60.14% complete, ETA 03:17:08
# Fork: 1 of 1
# Warmup Iteration   1: 34083.569 us/op
# Warmup Iteration   2: 34873.799 us/op
# Warmup Iteration   3: 38367.435 us/op
# Warmup Iteration   4: 32271.120 us/op
# Warmup Iteration   5: 31698.499 us/op
Iteration   1: 31291.056 us/op
Iteration   2: 31306.559 us/op
Iteration   3: 32432.638 us/op
Iteration   4: 34604.232 us/op
Iteration   5: 34281.937 us/op
Iteration   6: 33561.401 us/op
Iteration   7: 29921.929 us/op
Iteration   8: 33171.725 us/op
Iteration   9: 34112.102 us/op
Iteration  10: 36097.745 us/op
Iteration  11: 31700.110 us/op
Iteration  12: 37801.418 us/op
Iteration  13: 32682.764 us/op
Iteration  14: 30105.202 us/op
Iteration  15: 31506.084 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  32971.793 ±(99.9%) 2328.609 us/op [Average]
  (min, avg, max) = (29921.929, 32971.793, 37801.418), stdev = 2178.182
  CI (99.9%): [30643.184, 35300.403] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 60.87% complete, ETA 03:13:33
# Fork: 1 of 1
# Warmup Iteration   1: 88704.856 us/op
# Warmup Iteration   2: 29788.260 us/op
# Warmup Iteration   3: 29735.097 us/op
# Warmup Iteration   4: 29793.390 us/op
# Warmup Iteration   5: 29796.935 us/op
Iteration   1: 29787.310 us/op
Iteration   2: 29812.274 us/op
Iteration   3: 29790.508 us/op
Iteration   4: 29683.287 us/op
Iteration   5: 29763.702 us/op
Iteration   6: 29739.491 us/op
Iteration   7: 29783.338 us/op
Iteration   8: 29818.354 us/op
Iteration   9: 29677.492 us/op
Iteration  10: 29711.030 us/op
Iteration  11: 29799.107 us/op
Iteration  12: 29874.330 us/op
Iteration  13: 29820.471 us/op
Iteration  14: 29787.705 us/op
Iteration  15: 29834.357 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  29778.850 ±(99.9%) 59.322 us/op [Average]
  (min, avg, max) = (29677.492, 29778.850, 29874.330), stdev = 55.490
  CI (99.9%): [29719.528, 29838.172] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 61.59% complete, ETA 03:10:01
# Fork: 1 of 1
# Warmup Iteration   1: 161482.582 us/op
# Warmup Iteration   2: 152742.171 us/op
# Warmup Iteration   3: 153101.185 us/op
# Warmup Iteration   4: 154557.200 us/op
# Warmup Iteration   5: 153849.006 us/op
Iteration   1: 154596.030 us/op
Iteration   2: 157257.836 us/op
Iteration   3: 156508.438 us/op
Iteration   4: 157743.024 us/op
Iteration   5: 151533.143 us/op
Iteration   6: 151756.193 us/op
Iteration   7: 152795.909 us/op
Iteration   8: 153963.789 us/op
Iteration   9: 151734.567 us/op
Iteration  10: 155192.936 us/op
Iteration  11: 157776.632 us/op
Iteration  12: 153931.627 us/op
Iteration  13: 152008.009 us/op
Iteration  14: 156764.282 us/op
Iteration  15: 157686.543 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  154749.930 ±(99.9%) 2578.271 us/op [Average]
  (min, avg, max) = (151533.143, 154749.930, 157776.632), stdev = 2411.717
  CI (99.9%): [152171.659, 157328.202] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 62.32% complete, ETA 03:06:30
# Fork: 1 of 1
# Warmup Iteration   1: 20614.287 us/op
# Warmup Iteration   2: 19580.730 us/op
# Warmup Iteration   3: 18954.593 us/op
# Warmup Iteration   4: 18853.368 us/op
# Warmup Iteration   5: 18708.921 us/op
Iteration   1: 18551.925 us/op
Iteration   2: 18618.197 us/op
Iteration   3: 18691.758 us/op
Iteration   4: 19062.087 us/op
Iteration   5: 18764.625 us/op
Iteration   6: 18846.899 us/op
Iteration   7: 18805.475 us/op
Iteration   8: 18787.187 us/op
Iteration   9: 18912.984 us/op
Iteration  10: 19666.011 us/op
Iteration  11: 18790.581 us/op
Iteration  12: 20385.575 us/op
Iteration  13: 19609.487 us/op
Iteration  14: 18760.285 us/op
Iteration  15: 18713.956 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  18997.802 ±(99.9%) 537.036 us/op [Average]
  (min, avg, max) = (18551.925, 18997.802, 20385.575), stdev = 502.344
  CI (99.9%): [18460.766, 19534.838] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 63.04% complete, ETA 03:02:55
# Fork: 1 of 1
# Warmup Iteration   1: 37384.981 us/op
# Warmup Iteration   2: 38328.328 us/op
# Warmup Iteration   3: 37198.098 us/op
# Warmup Iteration   4: 37352.361 us/op
# Warmup Iteration   5: 38057.379 us/op
Iteration   1: 37878.396 us/op
Iteration   2: 38775.130 us/op
Iteration   3: 37359.675 us/op
Iteration   4: 39309.585 us/op
Iteration   5: 37487.653 us/op
Iteration   6: 38982.221 us/op
Iteration   7: 37757.186 us/op
Iteration   8: 39514.457 us/op
Iteration   9: 39884.629 us/op
Iteration  10: 37843.637 us/op
Iteration  11: 38239.443 us/op
Iteration  12: 37988.488 us/op
Iteration  13: 37655.336 us/op
Iteration  14: 36799.802 us/op
Iteration  15: 37445.585 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  38194.748 ±(99.9%) 958.411 us/op [Average]
  (min, avg, max) = (36799.802, 38194.748, 39884.629), stdev = 896.498
  CI (99.9%): [37236.337, 39153.159] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 63.77% complete, ETA 02:59:20
# Fork: 1 of 1
# Warmup Iteration   1: 1821.759 us/op
# Warmup Iteration   2: 1700.986 us/op
# Warmup Iteration   3: 1689.616 us/op
# Warmup Iteration   4: 1723.445 us/op
# Warmup Iteration   5: 1700.566 us/op
Iteration   1: 1712.695 us/op
Iteration   2: 1712.633 us/op
Iteration   3: 1718.255 us/op
Iteration   4: 1704.014 us/op
Iteration   5: 1695.161 us/op
Iteration   6: 1717.538 us/op
Iteration   7: 1708.381 us/op
Iteration   8: 1718.487 us/op
Iteration   9: 1702.769 us/op
Iteration  10: 1712.926 us/op
Iteration  11: 1731.401 us/op
Iteration  12: 1734.461 us/op
Iteration  13: 1726.338 us/op
Iteration  14: 1717.006 us/op
Iteration  15: 1706.038 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  1714.540 ±(99.9%) 11.463 us/op [Average]
  (min, avg, max) = (1695.161, 1714.540, 1734.461), stdev = 10.722
  CI (99.9%): [1703.078, 1726.003] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 64.49% complete, ETA 02:55:44
# Fork: 1 of 1
# Warmup Iteration   1: 45719.665 us/op
# Warmup Iteration   2: 21790.112 us/op
# Warmup Iteration   3: 21782.623 us/op
# Warmup Iteration   4: 21930.820 us/op
# Warmup Iteration   5: 22084.332 us/op
Iteration   1: 22023.730 us/op
Iteration   2: 21884.335 us/op
Iteration   3: 21803.941 us/op
Iteration   4: 21990.569 us/op
Iteration   5: 21961.104 us/op
Iteration   6: 21681.142 us/op
Iteration   7: 21743.958 us/op
Iteration   8: 21742.394 us/op
Iteration   9: 21797.692 us/op
Iteration  10: 21799.028 us/op
Iteration  11: 21871.677 us/op
Iteration  12: 21856.125 us/op
Iteration  13: 21863.483 us/op
Iteration  14: 22048.714 us/op
Iteration  15: 21842.296 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  21860.679 ±(99.9%) 114.567 us/op [Average]
  (min, avg, max) = (21681.142, 21860.679, 22048.714), stdev = 107.166
  CI (99.9%): [21746.113, 21975.246] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 65.22% complete, ETA 02:52:09
# Fork: 1 of 1
# Warmup Iteration   1: 875639.012 us/op
# Warmup Iteration   2: 935965.192 us/op
# Warmup Iteration   3: 948283.554 us/op
# Warmup Iteration   4: 943860.560 us/op
# Warmup Iteration   5: 943067.756 us/op
Iteration   1: 946348.216 us/op
Iteration   2: 950721.780 us/op
Iteration   3: 954228.529 us/op
Iteration   4: 943617.906 us/op
Iteration   5: 846981.440 us/op
Iteration   6: 302388.407 us/op
Iteration   7: 302100.945 us/op
Iteration   8: 301436.965 us/op
Iteration   9: 299821.060 us/op
Iteration  10: 301785.320 us/op
Iteration  11: 301565.780 us/op
Iteration  12: 303419.601 us/op
Iteration  13: 303789.250 us/op
Iteration  14: 301900.273 us/op
Iteration  15: 301858.413 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  510797.592 ±(99.9%) 327788.851 us/op [Average]
  (min, avg, max) = (299821.060, 510797.592, 954228.529), stdev = 306613.894
  CI (99.9%): [183008.742, 838586.443] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 65.94% complete, ETA 02:48:37
# Fork: 1 of 1
# Warmup Iteration   1: 2538522.542 us/op
# Warmup Iteration   2: 2533271.874 us/op
# Warmup Iteration   3: 2559819.036 us/op
# Warmup Iteration   4: 2505345.604 us/op
# Warmup Iteration   5: 2534919.510 us/op
Iteration   1: 2536603.653 us/op
Iteration   2: 2531023.740 us/op
Iteration   3: 2543106.442 us/op
Iteration   4: 2510615.101 us/op
Iteration   5: 2506593.766 us/op
Iteration   6: 2508890.460 us/op
Iteration   7: 2537658.793 us/op
Iteration   8: 2544169.067 us/op
Iteration   9: 2525368.158 us/op
Iteration  10: 2513589.148 us/op
Iteration  11: 2513968.671 us/op
Iteration  12: 2536134.027 us/op
Iteration  13: 1358806.101 us/op
Iteration  14: 1520918.720 us/op
Iteration  15: 2085308.208 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  2351516.937 ±(99.9%) 415254.080 us/op [Average]
  (min, avg, max) = (1358806.101, 2351516.937, 2544169.067), stdev = 388428.924
  CI (99.9%): [1936262.857, 2766771.017] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 66.66% complete, ETA 02:45:16
# Fork: 1 of 1
# Warmup Iteration   1: 246108.460 ±(99.9%) 3155.861 us/op
# Warmup Iteration   2: 247610.992 ±(99.9%) 4468.533 us/op
# Warmup Iteration   3: 247387.211 ±(99.9%) 6174.848 us/op
# Warmup Iteration   4: 245520.234 ±(99.9%) 4477.502 us/op
# Warmup Iteration   5: 248167.249 ±(99.9%) 5352.884 us/op
Iteration   1: 245916.647 ±(99.9%) 4283.778 us/op
                 createNewObjects·p0.00:   233308.160 us/op
                 createNewObjects·p0.50:   244056.064 us/op
                 createNewObjects·p0.90:   259732.275 us/op
                 createNewObjects·p0.95:   263559.578 us/op
                 createNewObjects·p0.99:   263979.008 us/op
                 createNewObjects·p0.999:  263979.008 us/op
                 createNewObjects·p0.9999: 263979.008 us/op
                 createNewObjects·p1.00:   263979.008 us/op

Iteration   2: 241684.285 ±(99.9%) 3195.779 us/op
                 createNewObjects·p0.00:   228851.712 us/op
                 createNewObjects·p0.50:   240648.192 us/op
                 createNewObjects·p0.90:   250662.093 us/op
                 createNewObjects·p0.95:   255302.042 us/op
                 createNewObjects·p0.99:   257687.552 us/op
                 createNewObjects·p0.999:  257687.552 us/op
                 createNewObjects·p0.9999: 257687.552 us/op
                 createNewObjects·p1.00:   257687.552 us/op

Iteration   3: 246006.160 ±(99.9%) 4423.135 us/op
                 createNewObjects·p0.00:   234094.592 us/op
                 createNewObjects·p0.50:   244056.064 us/op
                 createNewObjects·p0.90:   255537.971 us/op
                 createNewObjects·p0.95:   265368.371 us/op
                 createNewObjects·p0.99:   269484.032 us/op
                 createNewObjects·p0.999:  269484.032 us/op
                 createNewObjects·p0.9999: 269484.032 us/op
                 createNewObjects·p1.00:   269484.032 us/op

Iteration   4: 245245.303 ±(99.9%) 4514.534 us/op
                 createNewObjects·p0.00:   231473.152 us/op
                 createNewObjects·p0.50:   244318.208 us/op
                 createNewObjects·p0.90:   254803.968 us/op
                 createNewObjects·p0.95:   259706.061 us/op
                 createNewObjects·p0.99:   277872.640 us/op
                 createNewObjects·p0.999:  277872.640 us/op
                 createNewObjects·p0.9999: 277872.640 us/op
                 createNewObjects·p1.00:   277872.640 us/op

Iteration   5: 244701.833 ±(99.9%) 6376.475 us/op
                 createNewObjects·p0.00:   222035.968 us/op
                 createNewObjects·p0.50:   242221.056 us/op
                 createNewObjects·p0.90:   263402.291 us/op
                 createNewObjects·p0.95:   267727.667 us/op
                 createNewObjects·p0.99:   273678.336 us/op
                 createNewObjects·p0.999:  273678.336 us/op
                 createNewObjects·p0.9999: 273678.336 us/op
                 createNewObjects·p1.00:   273678.336 us/op

Iteration   6: 244024.095 ±(99.9%) 4872.957 us/op
                 createNewObjects·p0.00:   229900.288 us/op
                 createNewObjects·p0.50:   243269.632 us/op
                 createNewObjects·p0.90:   256848.691 us/op
                 createNewObjects·p0.95:   257949.696 us/op
                 createNewObjects·p0.99:   274726.912 us/op
                 createNewObjects·p0.999:  274726.912 us/op
                 createNewObjects·p0.9999: 274726.912 us/op
                 createNewObjects·p1.00:   274726.912 us/op

Iteration   7: 246543.235 ±(99.9%) 5467.312 us/op
                 createNewObjects·p0.00:   234094.592 us/op
                 createNewObjects·p0.50:   244056.064 us/op
                 createNewObjects·p0.90:   260099.277 us/op
                 createNewObjects·p0.95:   268881.101 us/op
                 createNewObjects·p0.99:   273678.336 us/op
                 createNewObjects·p0.999:  273678.336 us/op
                 createNewObjects·p0.9999: 273678.336 us/op
                 createNewObjects·p1.00:   273678.336 us/op

Iteration   8: 242645.480 ±(99.9%) 2819.793 us/op
                 createNewObjects·p0.00:   235405.312 us/op
                 createNewObjects·p0.50:   241565.696 us/op
                 createNewObjects·p0.90:   250373.734 us/op
                 createNewObjects·p0.95:   253860.250 us/op
                 createNewObjects·p0.99:   258736.128 us/op
                 createNewObjects·p0.999:  258736.128 us/op
                 createNewObjects·p0.9999: 258736.128 us/op
                 createNewObjects·p1.00:   258736.128 us/op

Iteration   9: 242801.518 ±(99.9%) 3773.441 us/op
                 createNewObjects·p0.00:   233046.016 us/op
                 createNewObjects·p0.50:   241172.480 us/op
                 createNewObjects·p0.90:   252706.816 us/op
                 createNewObjects·p0.95:   258093.875 us/op
                 createNewObjects·p0.99:   270532.608 us/op
                 createNewObjects·p0.999:  270532.608 us/op
                 createNewObjects·p0.9999: 270532.608 us/op
                 createNewObjects·p1.00:   270532.608 us/op

Iteration  10: 246070.097 ±(99.9%) 5380.647 us/op
                 createNewObjects·p0.00:   225705.984 us/op
                 createNewObjects·p0.50:   243793.920 us/op
                 createNewObjects·p0.90:   261986.714 us/op
                 createNewObjects·p0.95:   263349.862 us/op
                 createNewObjects·p0.99:   270532.608 us/op
                 createNewObjects·p0.999:  270532.608 us/op
                 createNewObjects·p0.9999: 270532.608 us/op
                 createNewObjects·p1.00:   270532.608 us/op

Iteration  11: 245769.591 ±(99.9%) 4558.095 us/op
                 createNewObjects·p0.00:   231997.440 us/op
                 createNewObjects·p0.50:   245104.640 us/op
                 createNewObjects·p0.90:   256009.830 us/op
                 createNewObjects·p0.95:   258264.269 us/op
                 createNewObjects·p0.99:   278396.928 us/op
                 createNewObjects·p0.999:  278396.928 us/op
                 createNewObjects·p0.9999: 278396.928 us/op
                 createNewObjects·p1.00:   278396.928 us/op

Iteration  12: 242938.831 ±(99.9%) 2951.657 us/op
                 createNewObjects·p0.00:   229900.288 us/op
                 createNewObjects·p0.50:   243924.992 us/op
                 createNewObjects·p0.90:   249613.517 us/op
                 createNewObjects·p0.95:   251094.630 us/op
                 createNewObjects·p0.99:   252968.960 us/op
                 createNewObjects·p0.999:  252968.960 us/op
                 createNewObjects·p0.9999: 252968.960 us/op
                 createNewObjects·p1.00:   252968.960 us/op

Iteration  13: 245469.084 ±(99.9%) 3635.560 us/op
                 createNewObjects·p0.00:   236191.744 us/op
                 createNewObjects·p0.50:   244580.352 us/op
                 createNewObjects·p0.90:   252497.101 us/op
                 createNewObjects·p0.95:   259260.416 us/op
                 createNewObjects·p0.99:   265551.872 us/op
                 createNewObjects·p0.999:  265551.872 us/op
                 createNewObjects·p0.9999: 265551.872 us/op
                 createNewObjects·p1.00:   265551.872 us/op

Iteration  14: 245162.184 ±(99.9%) 4133.979 us/op
                 createNewObjects·p0.00:   234094.592 us/op
                 createNewObjects·p0.50:   243793.920 us/op
                 createNewObjects·p0.90:   258316.698 us/op
                 createNewObjects·p0.95:   262930.432 us/op
                 createNewObjects·p0.99:   269484.032 us/op
                 createNewObjects·p0.999:  269484.032 us/op
                 createNewObjects·p0.9999: 269484.032 us/op
                 createNewObjects·p1.00:   269484.032 us/op

Iteration  15: 247361.636 ±(99.9%) 4771.905 us/op
                 createNewObjects·p0.00:   236978.176 us/op
                 createNewObjects·p0.50:   244842.496 us/op
                 createNewObjects·p0.90:   260151.706 us/op
                 createNewObjects·p0.95:   266469.376 us/op
                 createNewObjects·p0.99:   267124.736 us/op
                 createNewObjects·p0.999:  267124.736 us/op
                 createNewObjects·p0.9999: 267124.736 us/op
                 createNewObjects·p1.00:   267124.736 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 619
  mean = 244807.769 ±(99.9%) 1074.959 us/op

  Histogram, us/op:
    [220000.000, 225000.000) = 1 
    [225000.000, 230000.000) = 5 
    [230000.000, 235000.000) = 29 
    [235000.000, 240000.000) = 137 
    [240000.000, 245000.000) = 202 
    [245000.000, 250000.000) = 120 
    [250000.000, 255000.000) = 51 
    [255000.000, 260000.000) = 40 
    [260000.000, 265000.000) = 17 
    [265000.000, 270000.000) = 10 
    [270000.000, 275000.000) = 5 

  Percentiles, us/op:
      p(0.0000) = 222035.968 us/op
     p(50.0000) = 243269.632 us/op
     p(90.0000) = 256376.832 us/op
     p(95.0000) = 260571.136 us/op
     p(99.0000) = 270532.608 us/op
     p(99.9000) = 278396.928 us/op
     p(99.9900) = 278396.928 us/op
     p(99.9990) = 278396.928 us/op
     p(99.9999) = 278396.928 us/op
    p(100.0000) = 278396.928 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 67.39% complete, ETA 02:41:42
# Fork: 1 of 1
# Warmup Iteration   1: 236124.684 ±(99.9%) 3752.748 us/op
# Warmup Iteration   2: 234807.868 ±(99.9%) 2079.076 us/op
# Warmup Iteration   3: 238039.235 ±(99.9%) 4061.283 us/op
# Warmup Iteration   4: 237380.537 ±(99.9%) 4116.143 us/op
# Warmup Iteration   5: 235801.576 ±(99.9%) 2828.602 us/op
Iteration   1: 237862.150 ±(99.9%) 3326.509 us/op
                 createNewObjects·p0.00:   229900.288 us/op
                 createNewObjects·p0.50:   235405.312 us/op
                 createNewObjects·p0.90:   249246.515 us/op
                 createNewObjects·p0.95:   252968.960 us/op
                 createNewObjects·p0.99:   254279.680 us/op
                 createNewObjects·p0.999:  254279.680 us/op
                 createNewObjects·p0.9999: 254279.680 us/op
                 createNewObjects·p1.00:   254279.680 us/op

Iteration   2: 238444.934 ±(99.9%) 3537.368 us/op
                 createNewObjects·p0.00:   230162.432 us/op
                 createNewObjects·p0.50:   235405.312 us/op
                 createNewObjects·p0.90:   249797.018 us/op
                 createNewObjects·p0.95:   251540.275 us/op
                 createNewObjects·p0.99:   254279.680 us/op
                 createNewObjects·p0.999:  254279.680 us/op
                 createNewObjects·p0.9999: 254279.680 us/op
                 createNewObjects·p1.00:   254279.680 us/op

Iteration   3: 238831.909 ±(99.9%) 4429.609 us/op
                 createNewObjects·p0.00:   231211.008 us/op
                 createNewObjects·p0.50:   235929.600 us/op
                 createNewObjects·p0.90:   248958.157 us/op
                 createNewObjects·p0.95:   258172.518 us/op
                 createNewObjects·p0.99:   269484.032 us/op
                 createNewObjects·p0.999:  269484.032 us/op
                 createNewObjects·p0.9999: 269484.032 us/op
                 createNewObjects·p1.00:   269484.032 us/op

Iteration   4: 235246.806 ±(99.9%) 2380.799 us/op
                 createNewObjects·p0.00:   229638.144 us/op
                 createNewObjects·p0.50:   234356.736 us/op
                 createNewObjects·p0.90:   240490.906 us/op
                 createNewObjects·p0.95:   246153.216 us/op
                 createNewObjects·p0.99:   253231.104 us/op
                 createNewObjects·p0.999:  253231.104 us/op
                 createNewObjects·p0.9999: 253231.104 us/op
                 createNewObjects·p1.00:   253231.104 us/op

Iteration   5: 235923.504 ±(99.9%) 2926.432 us/op
                 createNewObjects·p0.00:   230424.576 us/op
                 createNewObjects·p0.50:   234094.592 us/op
                 createNewObjects·p0.90:   244790.067 us/op
                 createNewObjects·p0.95:   248774.656 us/op
                 createNewObjects·p0.99:   254279.680 us/op
                 createNewObjects·p0.999:  254279.680 us/op
                 createNewObjects·p0.9999: 254279.680 us/op
                 createNewObjects·p1.00:   254279.680 us/op

Iteration   6: 237026.947 ±(99.9%) 3926.654 us/op
                 createNewObjects·p0.00:   229638.144 us/op
                 createNewObjects·p0.50:   234094.592 us/op
                 createNewObjects·p0.90:   249298.944 us/op
                 createNewObjects·p0.95:   252654.387 us/op
                 createNewObjects·p0.99:   256376.832 us/op
                 createNewObjects·p0.999:  256376.832 us/op
                 createNewObjects·p0.9999: 256376.832 us/op
                 createNewObjects·p1.00:   256376.832 us/op

Iteration   7: 234338.447 ±(99.9%) 2273.413 us/op
                 createNewObjects·p0.00:   229900.288 us/op
                 createNewObjects·p0.50:   233308.160 us/op
                 createNewObjects·p0.90:   241906.483 us/op
                 createNewObjects·p0.95:   245314.355 us/op
                 createNewObjects·p0.99:   248512.512 us/op
                 createNewObjects·p0.999:  248512.512 us/op
                 createNewObjects·p0.9999: 248512.512 us/op
                 createNewObjects·p1.00:   248512.512 us/op

Iteration   8: 236972.080 ±(99.9%) 4044.733 us/op
                 createNewObjects·p0.00:   228589.568 us/op
                 createNewObjects·p0.50:   235143.168 us/op
                 createNewObjects·p0.90:   246258.074 us/op
                 createNewObjects·p0.95:   254908.826 us/op
                 createNewObjects·p0.99:   267386.880 us/op
                 createNewObjects·p0.999:  267386.880 us/op
                 createNewObjects·p0.9999: 267386.880 us/op
                 createNewObjects·p1.00:   267386.880 us/op

Iteration   9: 236978.176 ±(99.9%) 3146.703 us/op
                 createNewObjects·p0.00:   231473.152 us/op
                 createNewObjects·p0.50:   234356.736 us/op
                 createNewObjects·p0.90:   246729.933 us/op
                 createNewObjects·p0.95:   251605.811 us/op
                 createNewObjects·p0.99:   252706.816 us/op
                 createNewObjects·p0.999:  252706.816 us/op
                 createNewObjects·p0.9999: 252706.816 us/op
                 createNewObjects·p1.00:   252706.816 us/op

Iteration  10: 239187.675 ±(99.9%) 4539.350 us/op
                 createNewObjects·p0.00:   230948.864 us/op
                 createNewObjects·p0.50:   236322.816 us/op
                 createNewObjects·p0.90:   250268.877 us/op
                 createNewObjects·p0.95:   258303.590 us/op
                 createNewObjects·p0.99:   266076.160 us/op
                 createNewObjects·p0.999:  266076.160 us/op
                 createNewObjects·p0.9999: 266076.160 us/op
                 createNewObjects·p1.00:   266076.160 us/op

Iteration  11: 240311.150 ±(99.9%) 4861.127 us/op
                 createNewObjects·p0.00:   231211.008 us/op
                 createNewObjects·p0.50:   237109.248 us/op
                 createNewObjects·p0.90:   254305.894 us/op
                 createNewObjects·p0.95:   264778.547 us/op
                 createNewObjects·p0.99:   266338.304 us/op
                 createNewObjects·p0.999:  266338.304 us/op
                 createNewObjects·p0.9999: 266338.304 us/op
                 createNewObjects·p1.00:   266338.304 us/op

Iteration  12: 238931.773 ±(99.9%) 4555.671 us/op
                 createNewObjects·p0.00:   228851.712 us/op
                 createNewObjects·p0.50:   236191.744 us/op
                 createNewObjects·p0.90:   249272.730 us/op
                 createNewObjects·p0.95:   262353.715 us/op
                 createNewObjects·p0.99:   265027.584 us/op
                 createNewObjects·p0.999:  265027.584 us/op
                 createNewObjects·p0.9999: 265027.584 us/op
                 createNewObjects·p1.00:   265027.584 us/op

Iteration  13: 237569.524 ±(99.9%) 3483.171 us/op
                 createNewObjects·p0.00:   229113.856 us/op
                 createNewObjects·p0.50:   235143.168 us/op
                 createNewObjects·p0.90:   247254.221 us/op
                 createNewObjects·p0.95:   253755.392 us/op
                 createNewObjects·p0.99:   255590.400 us/op
                 createNewObjects·p0.999:  255590.400 us/op
                 createNewObjects·p0.9999: 255590.400 us/op
                 createNewObjects·p1.00:   255590.400 us/op

Iteration  14: 234923.699 ±(99.9%) 2910.676 us/op
                 createNewObjects·p0.00:   229638.144 us/op
                 createNewObjects·p0.50:   233046.016 us/op
                 createNewObjects·p0.90:   240910.336 us/op
                 createNewObjects·p0.95:   251081.523 us/op
                 createNewObjects·p0.99:   253231.104 us/op
                 createNewObjects·p0.999:  253231.104 us/op
                 createNewObjects·p0.9999: 253231.104 us/op
                 createNewObjects·p1.00:   253231.104 us/op

Iteration  15: 235076.108 ±(99.9%) 2858.367 us/op
                 createNewObjects·p0.00:   229113.856 us/op
                 createNewObjects·p0.50:   233832.448 us/op
                 createNewObjects·p0.90:   238970.470 us/op
                 createNewObjects·p0.95:   252864.102 us/op
                 createNewObjects·p0.99:   256376.832 us/op
                 createNewObjects·p0.999:  256376.832 us/op
                 createNewObjects·p0.9999: 256376.832 us/op
                 createNewObjects·p1.00:   256376.832 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 640
  mean = 237159.629 ±(99.9%) 892.152 us/op

  Histogram, us/op:
    [220000.000, 225000.000) = 0 
    [225000.000, 230000.000) = 16 
    [230000.000, 235000.000) = 326 
    [235000.000, 240000.000) = 151 
    [240000.000, 245000.000) = 55 
    [245000.000, 250000.000) = 50 
    [250000.000, 255000.000) = 25 
    [255000.000, 260000.000) = 10 
    [260000.000, 265000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 228589.568 us/op
     p(50.0000) = 234618.880 us/op
     p(90.0000) = 247201.792 us/op
     p(95.0000) = 251658.240 us/op
     p(99.0000) = 264705.147 us/op
     p(99.9000) = 269484.032 us/op
     p(99.9900) = 269484.032 us/op
     p(99.9990) = 269484.032 us/op
     p(99.9999) = 269484.032 us/op
    p(100.0000) = 269484.032 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 68.11% complete, ETA 02:38:07
# Fork: 1 of 1
# Warmup Iteration   1: 218126.603 ±(99.9%) 3275.011 us/op
# Warmup Iteration   2: 220645.465 ±(99.9%) 3609.302 us/op
# Warmup Iteration   3: 216519.789 ±(99.9%) 2117.881 us/op
# Warmup Iteration   4: 216385.928 ±(99.9%) 2345.218 us/op
# Warmup Iteration   5: 215744.512 ±(99.9%) 1931.700 us/op
Iteration   1: 215973.191 ±(99.9%) 2469.966 us/op
                 createNewObjects·p0.00:   210501.632 us/op
                 createNewObjects·p0.50:   214171.648 us/op
                 createNewObjects·p0.90:   223713.690 us/op
                 createNewObjects·p0.95:   226020.557 us/op
                 createNewObjects·p0.99:   233832.448 us/op
                 createNewObjects·p0.999:  233832.448 us/op
                 createNewObjects·p0.9999: 233832.448 us/op
                 createNewObjects·p1.00:   233832.448 us/op

Iteration   2: 218365.952 ±(99.9%) 3796.845 us/op
                 createNewObjects·p0.00:   210239.488 us/op
                 createNewObjects·p0.50:   215351.296 us/op
                 createNewObjects·p0.90:   231289.651 us/op
                 createNewObjects·p0.95:   236781.568 us/op
                 createNewObjects·p0.99:   237240.320 us/op
                 createNewObjects·p0.999:  237240.320 us/op
                 createNewObjects·p0.9999: 237240.320 us/op
                 createNewObjects·p1.00:   237240.320 us/op

Iteration   3: 218086.712 ±(99.9%) 3453.136 us/op
                 createNewObjects·p0.00:   210763.776 us/op
                 createNewObjects·p0.50:   216006.656 us/op
                 createNewObjects·p0.90:   226728.346 us/op
                 createNewObjects·p0.95:   231722.189 us/op
                 createNewObjects·p0.99:   242745.344 us/op
                 createNewObjects·p0.999:  242745.344 us/op
                 createNewObjects·p0.9999: 242745.344 us/op
                 createNewObjects·p1.00:   242745.344 us/op

Iteration   4: 218622.397 ±(99.9%) 3112.933 us/op
                 createNewObjects·p0.00:   211288.064 us/op
                 createNewObjects·p0.50:   217186.304 us/op
                 createNewObjects·p0.90:   229795.430 us/op
                 createNewObjects·p0.95:   232692.122 us/op
                 createNewObjects·p0.99:   237502.464 us/op
                 createNewObjects·p0.999:  237502.464 us/op
                 createNewObjects·p0.9999: 237502.464 us/op
                 createNewObjects·p1.00:   237502.464 us/op

Iteration   5: 217636.508 ±(99.9%) 4252.618 us/op
                 createNewObjects·p0.00:   211812.352 us/op
                 createNewObjects·p0.50:   214695.936 us/op
                 createNewObjects·p0.90:   228196.352 us/op
                 createNewObjects·p0.95:   239770.010 us/op
                 createNewObjects·p0.99:   248250.368 us/op
                 createNewObjects·p0.999:  248250.368 us/op
                 createNewObjects·p0.9999: 248250.368 us/op
                 createNewObjects·p1.00:   248250.368 us/op

Iteration   6: 216224.180 ±(99.9%) 2462.116 us/op
                 createNewObjects·p0.00:   210239.488 us/op
                 createNewObjects·p0.50:   214958.080 us/op
                 createNewObjects·p0.90:   224185.549 us/op
                 createNewObjects·p0.95:   227803.136 us/op
                 createNewObjects·p0.99:   233046.016 us/op
                 createNewObjects·p0.999:  233046.016 us/op
                 createNewObjects·p0.9999: 233046.016 us/op
                 createNewObjects·p1.00:   233046.016 us/op

Iteration   7: 217267.178 ±(99.9%) 2827.153 us/op
                 createNewObjects·p0.00:   209190.912 us/op
                 createNewObjects·p0.50:   216006.656 us/op
                 createNewObjects·p0.90:   223189.402 us/op
                 createNewObjects·p0.95:   233150.874 us/op
                 createNewObjects·p0.99:   236716.032 us/op
                 createNewObjects·p0.999:  236716.032 us/op
                 createNewObjects·p0.9999: 236716.032 us/op
                 createNewObjects·p1.00:   236716.032 us/op

Iteration   8: 220468.803 ±(99.9%) 3598.872 us/op
                 createNewObjects·p0.00:   212336.640 us/op
                 createNewObjects·p0.50:   218234.880 us/op
                 createNewObjects·p0.90:   231473.152 us/op
                 createNewObjects·p0.95:   236178.637 us/op
                 createNewObjects·p0.99:   244056.064 us/op
                 createNewObjects·p0.999:  244056.064 us/op
                 createNewObjects·p0.9999: 244056.064 us/op
                 createNewObjects·p1.00:   244056.064 us/op

Iteration   9: 217585.219 ±(99.9%) 2439.930 us/op
                 createNewObjects·p0.00:   212336.640 us/op
                 createNewObjects·p0.50:   215744.512 us/op
                 createNewObjects·p0.90:   223870.976 us/op
                 createNewObjects·p0.95:   225325.875 us/op
                 createNewObjects·p0.99:   237240.320 us/op
                 createNewObjects·p0.999:  237240.320 us/op
                 createNewObjects·p0.9999: 237240.320 us/op
                 createNewObjects·p1.00:   237240.320 us/op

Iteration  10: 221802.318 ±(99.9%) 5083.123 us/op
                 createNewObjects·p0.00:   213385.216 us/op
                 createNewObjects·p0.50:   216662.016 us/op
                 createNewObjects·p0.90:   232416.870 us/op
                 createNewObjects·p0.95:   245039.104 us/op
                 createNewObjects·p0.99:   261095.424 us/op
                 createNewObjects·p0.999:  261095.424 us/op
                 createNewObjects·p0.9999: 261095.424 us/op
                 createNewObjects·p1.00:   261095.424 us/op

Iteration  11: 219619.684 ±(99.9%) 4798.671 us/op
                 createNewObjects·p0.00:   210763.776 us/op
                 createNewObjects·p0.50:   215875.584 us/op
                 createNewObjects·p0.90:   232731.443 us/op
                 createNewObjects·p0.95:   241067.622 us/op
                 createNewObjects·p0.99:   260571.136 us/op
                 createNewObjects·p0.999:  260571.136 us/op
                 createNewObjects·p0.9999: 260571.136 us/op
                 createNewObjects·p1.00:   260571.136 us/op

Iteration  12: 217442.749 ±(99.9%) 3451.746 us/op
                 createNewObjects·p0.00:   211288.064 us/op
                 createNewObjects·p0.50:   215089.152 us/op
                 createNewObjects·p0.90:   228668.211 us/op
                 createNewObjects·p0.95:   236571.853 us/op
                 createNewObjects·p0.99:   240386.048 us/op
                 createNewObjects·p0.999:  240386.048 us/op
                 createNewObjects·p0.9999: 240386.048 us/op
                 createNewObjects·p1.00:   240386.048 us/op

Iteration  13: 217166.783 ±(99.9%) 3513.407 us/op
                 createNewObjects·p0.00:   209190.912 us/op
                 createNewObjects·p0.50:   214958.080 us/op
                 createNewObjects·p0.90:   227803.136 us/op
                 createNewObjects·p0.95:   237083.034 us/op
                 createNewObjects·p0.99:   239075.328 us/op
                 createNewObjects·p0.999:  239075.328 us/op
                 createNewObjects·p0.9999: 239075.328 us/op
                 createNewObjects·p1.00:   239075.328 us/op

Iteration  14: 214405.904 ±(99.9%) 1836.282 us/op
                 createNewObjects·p0.00:   208142.336 us/op
                 createNewObjects·p0.50:   214433.792 us/op
                 createNewObjects·p0.90:   218261.094 us/op
                 createNewObjects·p0.95:   220725.248 us/op
                 createNewObjects·p0.99:   228327.424 us/op
                 createNewObjects·p0.999:  228327.424 us/op
                 createNewObjects·p0.9999: 228327.424 us/op
                 createNewObjects·p1.00:   228327.424 us/op

Iteration  15: 215688.737 ±(99.9%) 2430.591 us/op
                 createNewObjects·p0.00:   209190.912 us/op
                 createNewObjects·p0.50:   214958.080 us/op
                 createNewObjects·p0.90:   221564.109 us/op
                 createNewObjects·p0.95:   227698.278 us/op
                 createNewObjects·p0.99:   232259.584 us/op
                 createNewObjects·p0.999:  232259.584 us/op
                 createNewObjects·p0.9999: 232259.584 us/op
                 createNewObjects·p1.00:   232259.584 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 696
  mean = 217742.983 ±(99.9%) 849.835 us/op

  Histogram, us/op:
    [200000.000, 205000.000) = 0 
    [205000.000, 210000.000) = 11 
    [210000.000, 215000.000) = 304 
    [215000.000, 220000.000) = 214 
    [220000.000, 225000.000) = 91 
    [225000.000, 230000.000) = 27 
    [230000.000, 235000.000) = 23 
    [235000.000, 240000.000) = 17 
    [240000.000, 245000.000) = 5 
    [245000.000, 250000.000) = 2 
    [250000.000, 255000.000) = 0 
    [255000.000, 260000.000) = 0 
    [260000.000, 265000.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 208142.336 us/op
     p(50.0000) = 215482.368 us/op
     p(90.0000) = 225705.984 us/op
     p(95.0000) = 232521.728 us/op
     p(99.0000) = 241473.946 us/op
     p(99.9000) = 261095.424 us/op
     p(99.9900) = 261095.424 us/op
     p(99.9990) = 261095.424 us/op
     p(99.9999) = 261095.424 us/op
    p(100.0000) = 261095.424 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 68.84% complete, ETA 02:34:32
# Fork: 1 of 1
# Warmup Iteration   1: 243893.784 ±(99.9%) 6285.198 us/op
# Warmup Iteration   2: 248966.469 ±(99.9%) 6834.403 us/op
# Warmup Iteration   3: 283982.052 ±(99.9%) 14677.994 us/op
# Warmup Iteration   4: 313982.976 ±(99.9%) 11970.918 us/op
# Warmup Iteration   5: 309941.589 ±(99.9%) 12127.238 us/op
Iteration   1: 311101.378 ±(99.9%) 12185.266 us/op
                 createNewObjects·p0.00:   267124.736 us/op
                 createNewObjects·p0.50:   313524.224 us/op
                 createNewObjects·p0.90:   335858.893 us/op
                 createNewObjects·p0.95:   339948.339 us/op
                 createNewObjects·p0.99:   342884.352 us/op
                 createNewObjects·p0.999:  342884.352 us/op
                 createNewObjects·p0.9999: 342884.352 us/op
                 createNewObjects·p1.00:   342884.352 us/op

Iteration   2: 312803.328 ±(99.9%) 13483.187 us/op
                 createNewObjects·p0.00:   263192.576 us/op
                 createNewObjects·p0.50:   317980.672 us/op
                 createNewObjects·p0.90:   337169.613 us/op
                 createNewObjects·p0.95:   339057.050 us/op
                 createNewObjects·p0.99:   339738.624 us/op
                 createNewObjects·p0.999:  339738.624 us/op
                 createNewObjects·p0.9999: 339738.624 us/op
                 createNewObjects·p1.00:   339738.624 us/op

Iteration   3: 312410.112 ±(99.9%) 13791.937 us/op
                 createNewObjects·p0.00:   265814.016 us/op
                 createNewObjects·p0.50:   316407.808 us/op
                 createNewObjects·p0.90:   334023.885 us/op
                 createNewObjects·p0.95:   335727.821 us/op
                 createNewObjects·p0.99:   336068.608 us/op
                 createNewObjects·p0.999:  336068.608 us/op
                 createNewObjects·p0.9999: 336068.608 us/op
                 createNewObjects·p1.00:   336068.608 us/op

Iteration   4: 311427.072 ±(99.9%) 11150.259 us/op
                 createNewObjects·p0.00:   272105.472 us/op
                 createNewObjects·p0.50:   318242.816 us/op
                 createNewObjects·p0.90:   329672.294 us/op
                 createNewObjects·p0.95:   331769.446 us/op
                 createNewObjects·p0.99:   333971.456 us/op
                 createNewObjects·p0.999:  333971.456 us/op
                 createNewObjects·p0.9999: 333971.456 us/op
                 createNewObjects·p1.00:   333971.456 us/op

Iteration   5: 308535.544 ±(99.9%) 11799.862 us/op
                 createNewObjects·p0.00:   267911.168 us/op
                 createNewObjects·p0.50:   312999.936 us/op
                 createNewObjects·p0.90:   329567.437 us/op
                 createNewObjects·p0.95:   334181.171 us/op
                 createNewObjects·p0.99:   337117.184 us/op
                 createNewObjects·p0.999:  337117.184 us/op
                 createNewObjects·p0.9999: 337117.184 us/op
                 createNewObjects·p1.00:   337117.184 us/op

Iteration   6: 312110.235 ±(99.9%) 11508.746 us/op
                 createNewObjects·p0.00:   268435.456 us/op
                 createNewObjects·p0.50:   316669.952 us/op
                 createNewObjects·p0.90:   328623.718 us/op
                 createNewObjects·p0.95:   333342.310 us/op
                 createNewObjects·p0.99:   339214.336 us/op
                 createNewObjects·p0.999:  339214.336 us/op
                 createNewObjects·p0.9999: 339214.336 us/op
                 createNewObjects·p1.00:   339214.336 us/op

Iteration   7: 310918.672 ±(99.9%) 10979.451 us/op
                 createNewObjects·p0.00:   270532.608 us/op
                 createNewObjects·p0.50:   316669.952 us/op
                 createNewObjects·p0.90:   327680.000 us/op
                 createNewObjects·p0.95:   336959.898 us/op
                 createNewObjects·p0.99:   340262.912 us/op
                 createNewObjects·p0.999:  340262.912 us/op
                 createNewObjects·p0.9999: 340262.912 us/op
                 createNewObjects·p1.00:   340262.912 us/op

Iteration   8: 312237.335 ±(99.9%) 12451.457 us/op
                 createNewObjects·p0.00:   268959.744 us/op
                 createNewObjects·p0.50:   316145.664 us/op
                 createNewObjects·p0.90:   331979.162 us/op
                 createNewObjects·p0.95:   338323.046 us/op
                 createNewObjects·p0.99:   349700.096 us/op
                 createNewObjects·p0.999:  349700.096 us/op
                 createNewObjects·p0.9999: 349700.096 us/op
                 createNewObjects·p1.00:   349700.096 us/op

Iteration   9: 309401.414 ±(99.9%) 12816.508 us/op
                 createNewObjects·p0.00:   264503.296 us/op
                 createNewObjects·p0.50:   315097.088 us/op
                 createNewObjects·p0.90:   329777.152 us/op
                 createNewObjects·p0.95:   332346.163 us/op
                 createNewObjects·p0.99:   333447.168 us/op
                 createNewObjects·p0.999:  333447.168 us/op
                 createNewObjects·p0.9999: 333447.168 us/op
                 createNewObjects·p1.00:   333447.168 us/op

Iteration  10: 311450.903 ±(99.9%) 11895.966 us/op
                 createNewObjects·p0.00:   266600.448 us/op
                 createNewObjects·p0.50:   315097.088 us/op
                 createNewObjects·p0.90:   332293.734 us/op
                 createNewObjects·p0.95:   339843.482 us/op
                 createNewObjects·p0.99:   341311.488 us/op
                 createNewObjects·p0.999:  341311.488 us/op
                 createNewObjects·p0.9999: 341311.488 us/op
                 createNewObjects·p1.00:   341311.488 us/op

Iteration  11: 310743.909 ±(99.9%) 11453.430 us/op
                 createNewObjects·p0.00:   270008.320 us/op
                 createNewObjects·p0.50:   316669.952 us/op
                 createNewObjects·p0.90:   326945.997 us/op
                 createNewObjects·p0.95:   333447.168 us/op
                 createNewObjects·p0.99:   337117.184 us/op
                 createNewObjects·p0.999:  337117.184 us/op
                 createNewObjects·p0.9999: 337117.184 us/op
                 createNewObjects·p1.00:   337117.184 us/op

Iteration  12: 312070.516 ±(99.9%) 13054.458 us/op
                 createNewObjects·p0.00:   262406.144 us/op
                 createNewObjects·p0.50:   317718.528 us/op
                 createNewObjects·p0.90:   333132.595 us/op
                 createNewObjects·p0.95:   339581.338 us/op
                 createNewObjects·p0.99:   346554.368 us/op
                 createNewObjects·p0.999:  346554.368 us/op
                 createNewObjects·p0.9999: 346554.368 us/op
                 createNewObjects·p1.00:   346554.368 us/op

Iteration  13: 312549.376 ±(99.9%) 14129.325 us/op
                 createNewObjects·p0.00:   262930.432 us/op
                 createNewObjects·p0.50:   317980.672 us/op
                 createNewObjects·p0.90:   336855.040 us/op
                 createNewObjects·p0.95:   341521.203 us/op
                 createNewObjects·p0.99:   342884.352 us/op
                 createNewObjects·p0.999:  342884.352 us/op
                 createNewObjects·p0.9999: 342884.352 us/op
                 createNewObjects·p1.00:   342884.352 us/op

Iteration  14: 314040.320 ±(99.9%) 14760.137 us/op
                 createNewObjects·p0.00:   262406.144 us/op
                 createNewObjects·p0.50:   318767.104 us/op
                 createNewObjects·p0.90:   334862.746 us/op
                 createNewObjects·p0.95:   346947.584 us/op
                 createNewObjects·p0.99:   362283.008 us/op
                 createNewObjects·p0.999:  362283.008 us/op
                 createNewObjects·p0.9999: 362283.008 us/op
                 createNewObjects·p1.00:   362283.008 us/op

Iteration  15: 311299.972 ±(99.9%) 12287.194 us/op
                 createNewObjects·p0.00:   266338.304 us/op
                 createNewObjects·p0.50:   319815.680 us/op
                 createNewObjects·p0.90:   327680.000 us/op
                 createNewObjects·p0.95:   331402.445 us/op
                 createNewObjects·p0.99:   337641.472 us/op
                 createNewObjects·p0.999:  337641.472 us/op
                 createNewObjects·p0.9999: 337641.472 us/op
                 createNewObjects·p1.00:   337641.472 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 491
  mean = 311528.513 ±(99.9%) 2920.387 us/op

  Histogram, us/op:
    [260000.000, 270000.000) = 22 
    [270000.000, 280000.000) = 41 
    [280000.000, 290000.000) = 29 
    [290000.000, 300000.000) = 15 
    [300000.000, 310000.000) = 37 
    [310000.000, 320000.000) = 165 
    [320000.000, 330000.000) = 123 
    [330000.000, 340000.000) = 51 
    [340000.000, 350000.000) = 7 
    [350000.000, 360000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 262406.144 us/op
     p(50.0000) = 316669.952 us/op
     p(90.0000) = 330825.728 us/op
     p(95.0000) = 335754.035 us/op
     p(99.0000) = 342884.352 us/op
     p(99.9000) = 362283.008 us/op
     p(99.9900) = 362283.008 us/op
     p(99.9990) = 362283.008 us/op
     p(99.9999) = 362283.008 us/op
    p(100.0000) = 362283.008 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 69.56% complete, ETA 02:30:57
# Fork: 1 of 1
# Warmup Iteration   1: 226713.782 ±(99.9%) 11942.941 us/op
# Warmup Iteration   2: 227191.467 ±(99.9%) 11787.602 us/op
# Warmup Iteration   3: 229244.928 ±(99.9%) 13852.573 us/op
# Warmup Iteration   4: 226154.542 ±(99.9%) 11424.278 us/op
# Warmup Iteration   5: 228273.804 ±(99.9%) 12977.734 us/op
Iteration   1: 227016.704 ±(99.9%) 11985.027 us/op
                 createNewObjects·p0.00:   202375.168 us/op
                 createNewObjects·p0.50:   220725.248 us/op
                 createNewObjects·p0.90:   257687.552 us/op
                 createNewObjects·p0.95:   264346.010 us/op
                 createNewObjects·p0.99:   270532.608 us/op
                 createNewObjects·p0.999:  270532.608 us/op
                 createNewObjects·p0.9999: 270532.608 us/op
                 createNewObjects·p1.00:   270532.608 us/op

Iteration   2: 227171.607 ±(99.9%) 12298.539 us/op
                 createNewObjects·p0.00:   204472.320 us/op
                 createNewObjects·p0.50:   216924.160 us/op
                 createNewObjects·p0.90:   259915.776 us/op
                 createNewObjects·p0.95:   269484.032 us/op
                 createNewObjects·p0.99:   275775.488 us/op
                 createNewObjects·p0.999:  275775.488 us/op
                 createNewObjects·p0.9999: 275775.488 us/op
                 createNewObjects·p1.00:   275775.488 us/op

Iteration   3: 225700.159 ±(99.9%) 11494.378 us/op
                 createNewObjects·p0.00:   201588.736 us/op
                 createNewObjects·p0.50:   225968.128 us/op
                 createNewObjects·p0.90:   254489.395 us/op
                 createNewObjects·p0.95:   258290.483 us/op
                 createNewObjects·p0.99:   269484.032 us/op
                 createNewObjects·p0.999:  269484.032 us/op
                 createNewObjects·p0.9999: 269484.032 us/op
                 createNewObjects·p1.00:   269484.032 us/op

Iteration   4: 226684.655 ±(99.9%) 12350.127 us/op
                 createNewObjects·p0.00:   200015.872 us/op
                 createNewObjects·p0.50:   232259.584 us/op
                 createNewObjects·p0.90:   257530.266 us/op
                 createNewObjects·p0.95:   264660.582 us/op
                 createNewObjects·p0.99:   277872.640 us/op
                 createNewObjects·p0.999:  277872.640 us/op
                 createNewObjects·p0.9999: 277872.640 us/op
                 createNewObjects·p1.00:   277872.640 us/op

Iteration   5: 226375.908 ±(99.9%) 12416.262 us/op
                 createNewObjects·p0.00:   200540.160 us/op
                 createNewObjects·p0.50:   230162.432 us/op
                 createNewObjects·p0.90:   259470.131 us/op
                 createNewObjects·p0.95:   261750.784 us/op
                 createNewObjects·p0.99:   274202.624 us/op
                 createNewObjects·p0.999:  274202.624 us/op
                 createNewObjects·p0.9999: 274202.624 us/op
                 createNewObjects·p1.00:   274202.624 us/op

Iteration   6: 246504.873 ±(99.9%) 18259.948 us/op
                 createNewObjects·p0.00:   202899.456 us/op
                 createNewObjects·p0.50:   245366.784 us/op
                 createNewObjects·p0.90:   295174.144 us/op
                 createNewObjects·p0.95:   310640.640 us/op
                 createNewObjects·p0.99:   325058.560 us/op
                 createNewObjects·p0.999:  325058.560 us/op
                 createNewObjects·p0.9999: 325058.560 us/op
                 createNewObjects·p1.00:   325058.560 us/op

Iteration   7: 257815.263 ±(99.9%) 17515.390 us/op
                 createNewObjects·p0.00:   223346.688 us/op
                 createNewObjects·p0.50:   269484.032 us/op
                 createNewObjects·p0.90:   295698.432 us/op
                 createNewObjects·p0.95:   302514.176 us/op
                 createNewObjects·p0.99:   306184.192 us/op
                 createNewObjects·p0.999:  306184.192 us/op
                 createNewObjects·p0.9999: 306184.192 us/op
                 createNewObjects·p1.00:   306184.192 us/op

Iteration   8: 267179.924 ±(99.9%) 24314.114 us/op
                 createNewObjects·p0.00:   224133.120 us/op
                 createNewObjects·p0.50:   258211.840 us/op
                 createNewObjects·p0.90:   314100.941 us/op
                 createNewObjects·p0.95:   325110.989 us/op
                 createNewObjects·p0.99:   326107.136 us/op
                 createNewObjects·p0.999:  326107.136 us/op
                 createNewObjects·p0.9999: 326107.136 us/op
                 createNewObjects·p1.00:   326107.136 us/op

Iteration   9: 266966.070 ±(99.9%) 24723.742 us/op
                 createNewObjects·p0.00:   222822.400 us/op
                 createNewObjects·p0.50:   255721.472 us/op
                 createNewObjects·p0.90:   315778.662 us/op
                 createNewObjects·p0.95:   318871.962 us/op
                 createNewObjects·p0.99:   330825.728 us/op
                 createNewObjects·p0.999:  330825.728 us/op
                 createNewObjects·p0.9999: 330825.728 us/op
                 createNewObjects·p1.00:   330825.728 us/op

Iteration  10: 267559.343 ±(99.9%) 24931.329 us/op
                 createNewObjects·p0.00:   224133.120 us/op
                 createNewObjects·p0.50:   252051.456 us/op
                 createNewObjects·p0.90:   318504.960 us/op
                 createNewObjects·p0.95:   324036.198 us/op
                 createNewObjects·p0.99:   324534.272 us/op
                 createNewObjects·p0.999:  324534.272 us/op
                 createNewObjects·p0.9999: 324534.272 us/op
                 createNewObjects·p1.00:   324534.272 us/op

Iteration  11: 267110.939 ±(99.9%) 24744.547 us/op
                 createNewObjects·p0.00:   224133.120 us/op
                 createNewObjects·p0.50:   250871.808 us/op
                 createNewObjects·p0.90:   315883.520 us/op
                 createNewObjects·p0.95:   326762.496 us/op
                 createNewObjects·p0.99:   339214.336 us/op
                 createNewObjects·p0.999:  339214.336 us/op
                 createNewObjects·p0.9999: 339214.336 us/op
                 createNewObjects·p1.00:   339214.336 us/op

Iteration  12: 272906.074 ±(99.9%) 27049.022 us/op
                 createNewObjects·p0.00:   224657.408 us/op
                 createNewObjects·p0.50:   281018.368 us/op
                 createNewObjects·p0.90:   329357.722 us/op
                 createNewObjects·p0.95:   335020.032 us/op
                 createNewObjects·p0.99:   335020.032 us/op
                 createNewObjects·p0.999:  335020.032 us/op
                 createNewObjects·p0.9999: 335020.032 us/op
                 createNewObjects·p1.00:   335020.032 us/op

Iteration  13: 270787.667 ±(99.9%) 25715.420 us/op
                 createNewObjects·p0.00:   224395.264 us/op
                 createNewObjects·p0.50:   284688.384 us/op
                 createNewObjects·p0.90:   318767.104 us/op
                 createNewObjects·p0.95:   328047.002 us/op
                 createNewObjects·p0.99:   331350.016 us/op
                 createNewObjects·p0.999:  331350.016 us/op
                 createNewObjects·p0.9999: 331350.016 us/op
                 createNewObjects·p1.00:   331350.016 us/op

Iteration  14: 266745.317 ±(99.9%) 24369.364 us/op
                 createNewObjects·p0.00:   222822.400 us/op
                 createNewObjects·p0.50:   254148.608 us/op
                 createNewObjects·p0.90:   314992.230 us/op
                 createNewObjects·p0.95:   318845.747 us/op
                 createNewObjects·p0.99:   320339.968 us/op
                 createNewObjects·p0.999:  320339.968 us/op
                 createNewObjects·p0.9999: 320339.968 us/op
                 createNewObjects·p1.00:   320339.968 us/op

Iteration  15: 267373.083 ±(99.9%) 24305.969 us/op
                 createNewObjects·p0.00:   224657.408 us/op
                 createNewObjects·p0.50:   257556.480 us/op
                 createNewObjects·p0.90:   313262.080 us/op
                 createNewObjects·p0.95:   318347.674 us/op
                 createNewObjects·p0.99:   320339.968 us/op
                 createNewObjects·p0.999:  320339.968 us/op
                 createNewObjects·p0.9999: 320339.968 us/op
                 createNewObjects·p1.00:   320339.968 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 606
  mean = 250734.680 ±(99.9%) 5367.432 us/op

  Histogram, us/op:
    [200000.000, 212500.000) = 121 
    [212500.000, 225000.000) = 32 
    [225000.000, 237500.000) = 164 
    [237500.000, 250000.000) = 53 
    [250000.000, 262500.000) = 40 
    [262500.000, 275000.000) = 19 
    [275000.000, 287500.000) = 21 
    [287500.000, 300000.000) = 21 
    [300000.000, 312500.000) = 81 
    [312500.000, 325000.000) = 41 
    [325000.000, 337500.000) = 12 
    [337500.000, 350000.000) = 1 
    [350000.000, 362500.000) = 0 
    [362500.000, 375000.000) = 0 
    [375000.000, 387500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 200015.872 us/op
     p(50.0000) = 234487.808 us/op
     p(90.0000) = 311951.360 us/op
     p(95.0000) = 318242.816 us/op
     p(99.0000) = 329740.452 us/op
     p(99.9000) = 339214.336 us/op
     p(99.9900) = 339214.336 us/op
     p(99.9990) = 339214.336 us/op
     p(99.9999) = 339214.336 us/op
    p(100.0000) = 339214.336 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 70.29% complete, ETA 02:27:23
# Fork: 1 of 1
# Warmup Iteration   1: 222158.302 ±(99.9%) 9716.456 us/op
# Warmup Iteration   2: 219887.527 ±(99.9%) 9300.714 us/op
# Warmup Iteration   3: 222560.256 ±(99.9%) 9831.290 us/op
# Warmup Iteration   4: 218565.409 ±(99.9%) 8536.404 us/op
# Warmup Iteration   5: 217904.351 ±(99.9%) 8273.015 us/op
Iteration   1: 221454.692 ±(99.9%) 8596.277 us/op
                 createNewObjects·p0.00:   197394.432 us/op
                 createNewObjects·p0.50:   222035.968 us/op
                 createNewObjects·p0.90:   245707.571 us/op
                 createNewObjects·p0.95:   249508.659 us/op
                 createNewObjects·p0.99:   264503.296 us/op
                 createNewObjects·p0.999:  264503.296 us/op
                 createNewObjects·p0.9999: 264503.296 us/op
                 createNewObjects·p1.00:   264503.296 us/op

Iteration   2: 217454.147 ±(99.9%) 7523.957 us/op
                 createNewObjects·p0.00:   197132.288 us/op
                 createNewObjects·p0.50:   219152.384 us/op
                 createNewObjects·p0.90:   237135.462 us/op
                 createNewObjects·p0.95:   245130.854 us/op
                 createNewObjects·p0.99:   251133.952 us/op
                 createNewObjects·p0.999:  251133.952 us/op
                 createNewObjects·p0.9999: 251133.952 us/op
                 createNewObjects·p1.00:   251133.952 us/op

Iteration   3: 219819.142 ±(99.9%) 8313.321 us/op
                 createNewObjects·p0.00:   197394.432 us/op
                 createNewObjects·p0.50:   220594.176 us/op
                 createNewObjects·p0.90:   242273.485 us/op
                 createNewObjects·p0.95:   250281.984 us/op
                 createNewObjects·p0.99:   251658.240 us/op
                 createNewObjects·p0.999:  251658.240 us/op
                 createNewObjects·p0.9999: 251658.240 us/op
                 createNewObjects·p1.00:   251658.240 us/op

Iteration   4: 219693.768 ±(99.9%) 7672.722 us/op
                 createNewObjects·p0.00:   197394.432 us/op
                 createNewObjects·p0.50:   220332.032 us/op
                 createNewObjects·p0.90:   238157.824 us/op
                 createNewObjects·p0.95:   248800.870 us/op
                 createNewObjects·p0.99:   252968.960 us/op
                 createNewObjects·p0.999:  252968.960 us/op
                 createNewObjects·p0.9999: 252968.960 us/op
                 createNewObjects·p1.00:   252968.960 us/op

Iteration   5: 219574.094 ±(99.9%) 9169.294 us/op
                 createNewObjects·p0.00:   196083.712 us/op
                 createNewObjects·p0.50:   217317.376 us/op
                 createNewObjects·p0.90:   244003.635 us/op
                 createNewObjects·p0.95:   258329.805 us/op
                 createNewObjects·p0.99:   270532.608 us/op
                 createNewObjects·p0.999:  270532.608 us/op
                 createNewObjects·p0.9999: 270532.608 us/op
                 createNewObjects·p1.00:   270532.608 us/op

Iteration   6: 219762.154 ±(99.9%) 9339.357 us/op
                 createNewObjects·p0.00:   193462.272 us/op
                 createNewObjects·p0.50:   217972.736 us/op
                 createNewObjects·p0.90:   244580.352 us/op
                 createNewObjects·p0.95:   258264.269 us/op
                 createNewObjects·p0.99:   271056.896 us/op
                 createNewObjects·p0.999:  271056.896 us/op
                 createNewObjects·p0.9999: 271056.896 us/op
                 createNewObjects·p1.00:   271056.896 us/op

Iteration   7: 219745.057 ±(99.9%) 8309.447 us/op
                 createNewObjects·p0.00:   197918.720 us/op
                 createNewObjects·p0.50:   219152.384 us/op
                 createNewObjects·p0.90:   246939.648 us/op
                 createNewObjects·p0.95:   251133.952 us/op
                 createNewObjects·p0.99:   256376.832 us/op
                 createNewObjects·p0.999:  256376.832 us/op
                 createNewObjects·p0.9999: 256376.832 us/op
                 createNewObjects·p1.00:   256376.832 us/op

Iteration   8: 219266.360 ±(99.9%) 8217.456 us/op
                 createNewObjects·p0.00:   196608.000 us/op
                 createNewObjects·p0.50:   217579.520 us/op
                 createNewObjects·p0.90:   247883.366 us/op
                 createNewObjects·p0.95:   253021.389 us/op
                 createNewObjects·p0.99:   257687.552 us/op
                 createNewObjects·p0.999:  257687.552 us/op
                 createNewObjects·p0.9999: 257687.552 us/op
                 createNewObjects·p1.00:   257687.552 us/op

Iteration   9: 219716.563 ±(99.9%) 8063.843 us/op
                 createNewObjects·p0.00:   196083.712 us/op
                 createNewObjects·p0.50:   219807.744 us/op
                 createNewObjects·p0.90:   240228.762 us/op
                 createNewObjects·p0.95:   246585.754 us/op
                 createNewObjects·p0.99:   257949.696 us/op
                 createNewObjects·p0.999:  257949.696 us/op
                 createNewObjects·p0.9999: 257949.696 us/op
                 createNewObjects·p1.00:   257949.696 us/op

Iteration  10: 220554.285 ±(99.9%) 9243.950 us/op
                 createNewObjects·p0.00:   196083.712 us/op
                 createNewObjects·p0.50:   218365.952 us/op
                 createNewObjects·p0.90:   244056.064 us/op
                 createNewObjects·p0.95:   257386.086 us/op
                 createNewObjects·p0.99:   267911.168 us/op
                 createNewObjects·p0.999:  267911.168 us/op
                 createNewObjects·p0.9999: 267911.168 us/op
                 createNewObjects·p1.00:   267911.168 us/op

Iteration  11: 217488.339 ±(99.9%) 7177.840 us/op
                 createNewObjects·p0.00:   197918.720 us/op
                 createNewObjects·p0.50:   218497.024 us/op
                 createNewObjects·p0.90:   238105.395 us/op
                 createNewObjects·p0.95:   243938.099 us/op
                 createNewObjects·p0.99:   254279.680 us/op
                 createNewObjects·p0.999:  254279.680 us/op
                 createNewObjects·p0.9999: 254279.680 us/op
                 createNewObjects·p1.00:   254279.680 us/op

Iteration  12: 219967.310 ±(99.9%) 8758.575 us/op
                 createNewObjects·p0.00:   196345.856 us/op
                 createNewObjects·p0.50:   218365.952 us/op
                 createNewObjects·p0.90:   245602.714 us/op
                 createNewObjects·p0.95:   247948.902 us/op
                 createNewObjects·p0.99:   258736.128 us/op
                 createNewObjects·p0.999:  258736.128 us/op
                 createNewObjects·p0.9999: 258736.128 us/op
                 createNewObjects·p1.00:   258736.128 us/op

Iteration  13: 220958.898 ±(99.9%) 8128.086 us/op
                 createNewObjects·p0.00:   196345.856 us/op
                 createNewObjects·p0.50:   222298.112 us/op
                 createNewObjects·p0.90:   240097.690 us/op
                 createNewObjects·p0.95:   246611.968 us/op
                 createNewObjects·p0.99:   254541.824 us/op
                 createNewObjects·p0.999:  254541.824 us/op
                 createNewObjects·p0.9999: 254541.824 us/op
                 createNewObjects·p1.00:   254541.824 us/op

Iteration  14: 218548.313 ±(99.9%) 7342.936 us/op
                 createNewObjects·p0.00:   195297.280 us/op
                 createNewObjects·p0.50:   218365.952 us/op
                 createNewObjects·p0.90:   239022.899 us/op
                 createNewObjects·p0.95:   245484.749 us/op
                 createNewObjects·p0.99:   247988.224 us/op
                 createNewObjects·p0.999:  247988.224 us/op
                 createNewObjects·p0.9999: 247988.224 us/op
                 createNewObjects·p1.00:   247988.224 us/op

Iteration  15: 221369.210 ±(99.9%) 9485.846 us/op
                 createNewObjects·p0.00:   197656.576 us/op
                 createNewObjects·p0.50:   218497.024 us/op
                 createNewObjects·p0.90:   247044.506 us/op
                 createNewObjects·p0.95:   256324.403 us/op
                 createNewObjects·p0.99:   273154.048 us/op
                 createNewObjects·p0.999:  273154.048 us/op
                 createNewObjects·p0.9999: 273154.048 us/op
                 createNewObjects·p1.00:   273154.048 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 690
  mean = 219691.489 ±(99.9%) 2017.248 us/op

  Histogram, us/op:
    [190000.000, 195000.000) = 1 
    [195000.000, 200000.000) = 102 
    [200000.000, 205000.000) = 57 
    [205000.000, 210000.000) = 56 
    [210000.000, 215000.000) = 50 
    [215000.000, 220000.000) = 103 
    [220000.000, 225000.000) = 84 
    [225000.000, 230000.000) = 68 
    [230000.000, 235000.000) = 47 
    [235000.000, 240000.000) = 43 
    [240000.000, 245000.000) = 27 
    [245000.000, 250000.000) = 23 
    [250000.000, 255000.000) = 16 
    [255000.000, 260000.000) = 5 
    [260000.000, 265000.000) = 4 
    [265000.000, 270000.000) = 1 
    [270000.000, 275000.000) = 3 

  Percentiles, us/op:
      p(0.0000) = 193462.272 us/op
     p(50.0000) = 218628.096 us/op
     p(90.0000) = 242194.842 us/op
     p(95.0000) = 247844.045 us/op
     p(99.0000) = 261404.754 us/op
     p(99.9000) = 273154.048 us/op
     p(99.9900) = 273154.048 us/op
     p(99.9990) = 273154.048 us/op
     p(99.9999) = 273154.048 us/op
    p(100.0000) = 273154.048 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 71.01% complete, ETA 02:23:47
# Fork: 1 of 1
# Warmup Iteration   1: 1305739.264 ±(99.9%) 39690.414 us/op
# Warmup Iteration   2: 1292369.920 ±(99.9%) 47961.043 us/op
# Warmup Iteration   3: 1293418.496 ±(99.9%) 75129.398 us/op
# Warmup Iteration   4: 1298661.376 ±(99.9%) 68274.365 us/op
# Warmup Iteration   5: 1286864.896 ±(99.9%) 53707.675 us/op
Iteration   1: 1297874.944 ±(99.9%) 81004.429 us/op
                 fillHeap·p0.00:   1226833.920 us/op
                 fillHeap·p0.50:   1296039.936 us/op
                 fillHeap·p0.90:   1365245.952 us/op
                 fillHeap·p0.95:   1365245.952 us/op
                 fillHeap·p0.99:   1365245.952 us/op
                 fillHeap·p0.999:  1365245.952 us/op
                 fillHeap·p0.9999: 1365245.952 us/op
                 fillHeap·p1.00:   1365245.952 us/op

Iteration   2: 1282670.592 ±(99.9%) 60996.357 us/op
                 fillHeap·p0.00:   1222639.616 us/op
                 fillHeap·p0.50:   1284505.600 us/op
                 fillHeap·p0.90:   1323302.912 us/op
                 fillHeap·p0.95:   1323302.912 us/op
                 fillHeap·p0.99:   1323302.912 us/op
                 fillHeap·p0.999:  1323302.912 us/op
                 fillHeap·p0.9999: 1323302.912 us/op
                 fillHeap·p1.00:   1323302.912 us/op

Iteration   3: 1288437.760 ±(99.9%) 56133.279 us/op
                 fillHeap·p0.00:   1245708.288 us/op
                 fillHeap·p0.50:   1294991.360 us/op
                 fillHeap·p0.90:   1329594.368 us/op
                 fillHeap·p0.95:   1329594.368 us/op
                 fillHeap·p0.99:   1329594.368 us/op
                 fillHeap·p0.999:  1329594.368 us/op
                 fillHeap·p0.9999: 1329594.368 us/op
                 fillHeap·p1.00:   1329594.368 us/op

Iteration   4: 1280835.584 ±(99.9%) 79727.282 us/op
                 fillHeap·p0.00:   1224736.768 us/op
                 fillHeap·p0.50:   1267728.384 us/op
                 fillHeap·p0.90:   1350565.888 us/op
                 fillHeap·p0.95:   1350565.888 us/op
                 fillHeap·p0.99:   1350565.888 us/op
                 fillHeap·p0.999:  1350565.888 us/op
                 fillHeap·p0.9999: 1350565.888 us/op
                 fillHeap·p1.00:   1350565.888 us/op

Iteration   5: 1285029.888 ±(99.9%) 70557.421 us/op
                 fillHeap·p0.00:   1231028.224 us/op
                 fillHeap·p0.50:   1288699.904 us/op
                 fillHeap·p0.90:   1331691.520 us/op
                 fillHeap·p0.95:   1331691.520 us/op
                 fillHeap·p0.99:   1331691.520 us/op
                 fillHeap·p0.999:  1331691.520 us/op
                 fillHeap·p0.9999: 1331691.520 us/op
                 fillHeap·p1.00:   1331691.520 us/op

Iteration   6: 1263009.792 ±(99.9%) 51293.306 us/op
                 fillHeap·p0.00:   1212153.856 us/op
                 fillHeap·p0.50:   1265631.232 us/op
                 fillHeap·p0.90:   1291845.632 us/op
                 fillHeap·p0.95:   1291845.632 us/op
                 fillHeap·p0.99:   1291845.632 us/op
                 fillHeap·p0.999:  1291845.632 us/op
                 fillHeap·p0.9999: 1291845.632 us/op
                 fillHeap·p1.00:   1291845.632 us/op

Iteration   7: 1482948.608 ±(99.9%) 514785.486 us/op
                 fillHeap·p0.00:   1210056.704 us/op
                 fillHeap·p0.50:   1437597.696 us/op
                 fillHeap·p0.90:   2017460.224 us/op
                 fillHeap·p0.95:   2017460.224 us/op
                 fillHeap·p0.99:   2017460.224 us/op
                 fillHeap·p0.999:  2017460.224 us/op
                 fillHeap·p0.9999: 2017460.224 us/op
                 fillHeap·p1.00:   2017460.224 us/op

Iteration   8: 874162.859 ±(99.9%) 33988.389 us/op
                 fillHeap·p0.00:   840957.952 us/op
                 fillHeap·p0.50:   867696.640 us/op
                 fillHeap·p0.90:   919810.867 us/op
                 fillHeap·p0.95:   924844.032 us/op
                 fillHeap·p0.99:   924844.032 us/op
                 fillHeap·p0.999:  924844.032 us/op
                 fillHeap·p0.9999: 924844.032 us/op
                 fillHeap·p1.00:   924844.032 us/op

Iteration   9: 918743.226 ±(99.9%) 249898.506 us/op
                 fillHeap·p0.00:   827326.464 us/op
                 fillHeap·p0.50:   859832.320 us/op
                 fillHeap·p0.90:   1352872.755 us/op
                 fillHeap·p0.95:   1457520.640 us/op
                 fillHeap·p0.99:   1457520.640 us/op
                 fillHeap·p0.999:  1457520.640 us/op
                 fillHeap·p0.9999: 1457520.640 us/op
                 fillHeap·p1.00:   1457520.640 us/op

Iteration  10: 878881.451 ±(99.9%) 33066.429 us/op
                 fillHeap·p0.00:   825229.312 us/op
                 fillHeap·p0.50:   879755.264 us/op
                 fillHeap·p0.90:   917294.285 us/op
                 fillHeap·p0.95:   924844.032 us/op
                 fillHeap·p0.99:   924844.032 us/op
                 fillHeap·p0.999:  924844.032 us/op
                 fillHeap·p0.9999: 924844.032 us/op
                 fillHeap·p1.00:   924844.032 us/op

Iteration  11: 875298.816 ±(99.9%) 20094.001 us/op
                 fillHeap·p0.00:   853540.864 us/op
                 fillHeap·p0.50:   871890.944 us/op
                 fillHeap·p0.90:   902089.933 us/op
                 fillHeap·p0.95:   904921.088 us/op
                 fillHeap·p0.99:   904921.088 us/op
                 fillHeap·p0.999:  904921.088 us/op
                 fillHeap·p0.9999: 904921.088 us/op
                 fillHeap·p1.00:   904921.088 us/op

Iteration  12: 865599.488 ±(99.9%) 27372.277 us/op
                 fillHeap·p0.00:   827326.464 us/op
                 fillHeap·p0.50:   869793.792 us/op
                 fillHeap·p0.90:   890241.024 us/op
                 fillHeap·p0.95:   890241.024 us/op
                 fillHeap·p0.99:   890241.024 us/op
                 fillHeap·p0.999:  890241.024 us/op
                 fillHeap·p0.9999: 890241.024 us/op
                 fillHeap·p1.00:   890241.024 us/op

Iteration  13: 857298.261 ±(99.9%) 17840.368 us/op
                 fillHeap·p0.00:   836763.648 us/op
                 fillHeap·p0.50:   856162.304 us/op
                 fillHeap·p0.90:   883634.995 us/op
                 fillHeap·p0.95:   890241.024 us/op
                 fillHeap·p0.99:   890241.024 us/op
                 fillHeap·p0.999:  890241.024 us/op
                 fillHeap·p0.9999: 890241.024 us/op
                 fillHeap·p1.00:   890241.024 us/op

Iteration  14: 862104.235 ±(99.9%) 24664.243 us/op
                 fillHeap·p0.00:   830472.192 us/op
                 fillHeap·p0.50:   863502.336 us/op
                 fillHeap·p0.90:   893491.610 us/op
                 fillHeap·p0.95:   900726.784 us/op
                 fillHeap·p0.99:   900726.784 us/op
                 fillHeap·p0.999:  900726.784 us/op
                 fillHeap·p0.9999: 900726.784 us/op
                 fillHeap·p1.00:   900726.784 us/op

Iteration  15: 862978.048 ±(99.9%) 22031.609 us/op
                 fillHeap·p0.00:   833617.920 us/op
                 fillHeap·p0.50:   862453.760 us/op
                 fillHeap·p0.90:   890450.739 us/op
                 fillHeap·p0.95:   892338.176 us/op
                 fillHeap·p0.99:   892338.176 us/op
                 fillHeap·p0.999:  892338.176 us/op
                 fillHeap·p0.9999: 892338.176 us/op
                 fillHeap·p1.00:   892338.176 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 151
  mean = 1036215.303 ±(99.9%) 62984.924 us/op

  Histogram, us/op:
    [      0.000,  250000.000) = 0 
    [ 250000.000,  500000.000) = 0 
    [ 500000.000,  750000.000) = 0 
    [ 750000.000, 1000000.000) = 94 
    [1000000.000, 1250000.000) = 10 
    [1250000.000, 1500000.000) = 43 
    [1500000.000, 1750000.000) = 3 
    [1750000.000, 2000000.000) = 0 
    [2000000.000, 2250000.000) = 1 
    [2250000.000, 2500000.000) = 0 
    [2500000.000, 2750000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 825229.312 us/op
     p(50.0000) = 886046.720 us/op
     p(90.0000) = 1312397.722 us/op
     p(95.0000) = 1345532.723 us/op
     p(99.0000) = 1814623.683 us/op
     p(99.9000) = 2017460.224 us/op
     p(99.9900) = 2017460.224 us/op
     p(99.9990) = 2017460.224 us/op
     p(99.9999) = 2017460.224 us/op
    p(100.0000) = 2017460.224 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 71.74% complete, ETA 02:20:15
# Fork: 1 of 1
# Warmup Iteration   1: 937140.969 ±(99.9%) 45016.814 us/op
# Warmup Iteration   2: 916646.074 ±(99.9%) 38900.651 us/op
# Warmup Iteration   3: 919410.502 ±(99.9%) 44583.665 us/op
# Warmup Iteration   4: 915025.548 ±(99.9%) 28589.340 us/op
# Warmup Iteration   5: 911689.169 ±(99.9%) 27441.502 us/op
Iteration   1: 915216.198 ±(99.9%) 34505.891 us/op
                 fillHeap·p0.00:   869269.504 us/op
                 fillHeap·p0.50:   911212.544 us/op
                 fillHeap·p0.90:   964060.774 us/op
                 fillHeap·p0.95:   970981.376 us/op
                 fillHeap·p0.99:   970981.376 us/op
                 fillHeap·p0.999:  970981.376 us/op
                 fillHeap·p0.9999: 970981.376 us/op
                 fillHeap·p1.00:   970981.376 us/op

Iteration   2: 903959.893 ±(99.9%) 23960.244 us/op
                 fillHeap·p0.00:   855638.016 us/op
                 fillHeap·p0.50:   903348.224 us/op
                 fillHeap·p0.90:   929457.766 us/op
                 fillHeap·p0.95:   930086.912 us/op
                 fillHeap·p0.99:   930086.912 us/op
                 fillHeap·p0.999:  930086.912 us/op
                 fillHeap·p0.9999: 930086.912 us/op
                 fillHeap·p1.00:   930086.912 us/op

Iteration   3: 899590.827 ±(99.9%) 18095.906 us/op
                 fillHeap·p0.00:   868220.928 us/op
                 fillHeap·p0.50:   899153.920 us/op
                 fillHeap·p0.90:   923900.314 us/op
                 fillHeap·p0.95:   931135.488 us/op
                 fillHeap·p0.99:   931135.488 us/op
                 fillHeap·p0.999:  931135.488 us/op
                 fillHeap·p0.9999: 931135.488 us/op
                 fillHeap·p1.00:   931135.488 us/op

Iteration   4: 909687.343 ±(99.9%) 31886.603 us/op
                 fillHeap·p0.00:   852492.288 us/op
                 fillHeap·p0.50:   909115.392 us/op
                 fillHeap·p0.90:   939733.811 us/op
                 fillHeap·p0.95:   942669.824 us/op
                 fillHeap·p0.99:   942669.824 us/op
                 fillHeap·p0.999:  942669.824 us/op
                 fillHeap·p0.9999: 942669.824 us/op
                 fillHeap·p1.00:   942669.824 us/op

Iteration   5: 917218.025 ±(99.9%) 21510.552 us/op
                 fillHeap·p0.00:   880803.840 us/op
                 fillHeap·p0.50:   919601.152 us/op
                 fillHeap·p0.90:   936168.653 us/op
                 fillHeap·p0.95:   936378.368 us/op
                 fillHeap·p0.99:   936378.368 us/op
                 fillHeap·p0.999:  936378.368 us/op
                 fillHeap·p0.9999: 936378.368 us/op
                 fillHeap·p1.00:   936378.368 us/op

Iteration   6: 923604.806 ±(99.9%) 31229.901 us/op
                 fillHeap·p0.00:   874512.384 us/op
                 fillHeap·p0.50:   926941.184 us/op
                 fillHeap·p0.90:   955462.451 us/op
                 fillHeap·p0.95:   959447.040 us/op
                 fillHeap·p0.99:   959447.040 us/op
                 fillHeap·p0.999:  959447.040 us/op
                 fillHeap·p0.9999: 959447.040 us/op
                 fillHeap·p1.00:   959447.040 us/op

Iteration   7: 927227.159 ±(99.9%) 37324.017 us/op
                 fillHeap·p0.00:   859832.320 us/op
                 fillHeap·p0.50:   929038.336 us/op
                 fillHeap·p0.90:   961334.477 us/op
                 fillHeap·p0.95:   964689.920 us/op
                 fillHeap·p0.99:   964689.920 us/op
                 fillHeap·p0.999:  964689.920 us/op
                 fillHeap·p0.9999: 964689.920 us/op
                 fillHeap·p1.00:   964689.920 us/op

Iteration   8: 911784.495 ±(99.9%) 22347.510 us/op
                 fillHeap·p0.00:   873463.808 us/op
                 fillHeap·p0.50:   914358.272 us/op
                 fillHeap·p0.90:   933232.640 us/op
                 fillHeap·p0.95:   934281.216 us/op
                 fillHeap·p0.99:   934281.216 us/op
                 fillHeap·p0.999:  934281.216 us/op
                 fillHeap·p0.9999: 934281.216 us/op
                 fillHeap·p1.00:   934281.216 us/op

Iteration   9: 905270.613 ±(99.9%) 30196.999 us/op
                 fillHeap·p0.00:   839909.376 us/op
                 fillHeap·p0.50:   912261.120 us/op
                 fillHeap·p0.90:   925578.035 us/op
                 fillHeap·p0.95:   925892.608 us/op
                 fillHeap·p0.99:   925892.608 us/op
                 fillHeap·p0.999:  925892.608 us/op
                 fillHeap·p0.9999: 925892.608 us/op
                 fillHeap·p1.00:   925892.608 us/op

Iteration  10: 918838.551 ±(99.9%) 29925.014 us/op
                 fillHeap·p0.00:   875560.960 us/op
                 fillHeap·p0.50:   916455.424 us/op
                 fillHeap·p0.90:   953994.445 us/op
                 fillHeap·p0.95:   957349.888 us/op
                 fillHeap·p0.99:   957349.888 us/op
                 fillHeap·p0.999:  957349.888 us/op
                 fillHeap·p0.9999: 957349.888 us/op
                 fillHeap·p1.00:   957349.888 us/op

Iteration  11: 908154.197 ±(99.9%) 37738.374 us/op
                 fillHeap·p0.00:   825229.312 us/op
                 fillHeap·p0.50:   914882.560 us/op
                 fillHeap·p0.90:   933756.928 us/op
                 fillHeap·p0.95:   935329.792 us/op
                 fillHeap·p0.99:   935329.792 us/op
                 fillHeap·p0.999:  935329.792 us/op
                 fillHeap·p0.9999: 935329.792 us/op
                 fillHeap·p1.00:   935329.792 us/op

Iteration  12: 909020.067 ±(99.9%) 28250.293 us/op
                 fillHeap·p0.00:   869269.504 us/op
                 fillHeap·p0.50:   909115.392 us/op
                 fillHeap·p0.90:   937636.659 us/op
                 fillHeap·p0.95:   939524.096 us/op
                 fillHeap·p0.99:   939524.096 us/op
                 fillHeap·p0.999:  939524.096 us/op
                 fillHeap·p0.9999: 939524.096 us/op
                 fillHeap·p1.00:   939524.096 us/op

Iteration  13: 906581.333 ±(99.9%) 24767.911 us/op
                 fillHeap·p0.00:   861929.472 us/op
                 fillHeap·p0.50:   909115.392 us/op
                 fillHeap·p0.90:   937322.086 us/op
                 fillHeap·p0.95:   942669.824 us/op
                 fillHeap·p0.99:   942669.824 us/op
                 fillHeap·p0.999:  942669.824 us/op
                 fillHeap·p0.9999: 942669.824 us/op
                 fillHeap·p1.00:   942669.824 us/op

Iteration  14: 901600.597 ±(99.9%) 19695.959 us/op
                 fillHeap·p0.00:   864026.624 us/op
                 fillHeap·p0.50:   900726.784 us/op
                 fillHeap·p0.90:   920335.155 us/op
                 fillHeap·p0.95:   920649.728 us/op
                 fillHeap·p0.99:   920649.728 us/op
                 fillHeap·p0.999:  920649.728 us/op
                 fillHeap·p0.9999: 920649.728 us/op
                 fillHeap·p1.00:   920649.728 us/op

Iteration  15: 912547.095 ±(99.9%) 22060.787 us/op
                 fillHeap·p0.00:   874512.384 us/op
                 fillHeap·p0.50:   914358.272 us/op
                 fillHeap·p0.90:   927989.760 us/op
                 fillHeap·p0.95:   927989.760 us/op
                 fillHeap·p0.99:   927989.760 us/op
                 fillHeap·p0.999:  927989.760 us/op
                 fillHeap·p0.9999: 927989.760 us/op
                 fillHeap·p1.00:   927989.760 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 171
  mean = 911102.168 ±(99.9%) 5511.630 us/op

  Histogram, us/op:
    [ 800000.000,  812500.000) = 0 
    [ 812500.000,  825000.000) = 0 
    [ 825000.000,  837500.000) = 1 
    [ 837500.000,  850000.000) = 1 
    [ 850000.000,  862500.000) = 4 
    [ 862500.000,  875000.000) = 7 
    [ 875000.000,  887500.000) = 3 
    [ 887500.000,  900000.000) = 22 
    [ 900000.000,  912500.000) = 53 
    [ 912500.000,  925000.000) = 40 
    [ 925000.000,  937500.000) = 28 
    [ 937500.000,  950000.000) = 8 
    [ 950000.000,  962500.000) = 2 
    [ 962500.000,  975000.000) = 2 
    [ 975000.000,  987500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 825229.312 us/op
     p(50.0000) = 911212.544 us/op
     p(90.0000) = 935329.792 us/op
     p(95.0000) = 941411.533 us/op
     p(99.0000) = 966451.528 us/op
     p(99.9000) = 970981.376 us/op
     p(99.9900) = 970981.376 us/op
     p(99.9990) = 970981.376 us/op
     p(99.9999) = 970981.376 us/op
    p(100.0000) = 970981.376 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 72.46% complete, ETA 02:16:41
# Fork: 1 of 1
# Warmup Iteration   1: 697023.420 ±(99.9%) 39740.384 us/op
# Warmup Iteration   2: 678638.387 ±(99.9%) 28961.027 us/op
# Warmup Iteration   3: 674863.514 ±(99.9%) 20867.996 us/op
# Warmup Iteration   4: 677100.476 ±(99.9%) 27743.013 us/op
# Warmup Iteration   5: 677100.476 ±(99.9%) 26828.509 us/op
Iteration   1: 682343.356 ±(99.9%) 24794.178 us/op
                 fillHeap·p0.00:   606076.928 us/op
                 fillHeap·p0.50:   684720.128 us/op
                 fillHeap·p0.90:   704223.642 us/op
                 fillHeap·p0.95:   706740.224 us/op
                 fillHeap·p0.99:   706740.224 us/op
                 fillHeap·p0.999:  706740.224 us/op
                 fillHeap·p0.9999: 706740.224 us/op
                 fillHeap·p1.00:   706740.224 us/op

Iteration   2: 681434.590 ±(99.9%) 29851.303 us/op
                 fillHeap·p0.00:   588251.136 us/op
                 fillHeap·p0.50:   685768.704 us/op
                 fillHeap·p0.90:   705062.502 us/op
                 fillHeap·p0.95:   705691.648 us/op
                 fillHeap·p0.99:   705691.648 us/op
                 fillHeap·p0.999:  705691.648 us/op
                 fillHeap·p0.9999: 705691.648 us/op
                 fillHeap·p1.00:   705691.648 us/op

Iteration   3: 675213.039 ±(99.9%) 24226.557 us/op
                 fillHeap·p0.00:   600834.048 us/op
                 fillHeap·p0.50:   678428.672 us/op
                 fillHeap·p0.90:   694157.312 us/op
                 fillHeap·p0.95:   694157.312 us/op
                 fillHeap·p0.99:   694157.312 us/op
                 fillHeap·p0.999:  694157.312 us/op
                 fillHeap·p0.9999: 694157.312 us/op
                 fillHeap·p1.00:   694157.312 us/op

Iteration   4: 683671.552 ±(99.9%) 31598.665 us/op
                 fillHeap·p0.00:   590348.288 us/op
                 fillHeap·p0.50:   685768.704 us/op
                 fillHeap·p0.90:   713241.395 us/op
                 fillHeap·p0.95:   727711.744 us/op
                 fillHeap·p0.99:   727711.744 us/op
                 fillHeap·p0.999:  727711.744 us/op
                 fillHeap·p0.9999: 727711.744 us/op
                 fillHeap·p1.00:   727711.744 us/op

Iteration   5: 678778.197 ±(99.9%) 30143.940 us/op
                 fillHeap·p0.00:   590348.288 us/op
                 fillHeap·p0.50:   679477.248 us/op
                 fillHeap·p0.90:   708208.230 us/op
                 fillHeap·p0.95:   721420.288 us/op
                 fillHeap·p0.99:   721420.288 us/op
                 fillHeap·p0.999:  721420.288 us/op
                 fillHeap·p0.9999: 721420.288 us/op
                 fillHeap·p1.00:   721420.288 us/op

Iteration   6: 673884.843 ±(99.9%) 28697.837 us/op
                 fillHeap·p0.00:   592445.440 us/op
                 fillHeap·p0.50:   676331.520 us/op
                 fillHeap·p0.90:   704223.642 us/op
                 fillHeap·p0.95:   725614.592 us/op
                 fillHeap·p0.99:   725614.592 us/op
                 fillHeap·p0.999:  725614.592 us/op
                 fillHeap·p0.9999: 725614.592 us/op
                 fillHeap·p1.00:   725614.592 us/op

Iteration   7: 679197.628 ±(99.9%) 26376.383 us/op
                 fillHeap·p0.00:   605028.352 us/op
                 fillHeap·p0.50:   678428.672 us/op
                 fillHeap·p0.90:   705901.363 us/op
                 fillHeap·p0.95:   723517.440 us/op
                 fillHeap·p0.99:   723517.440 us/op
                 fillHeap·p0.999:  723517.440 us/op
                 fillHeap·p0.9999: 723517.440 us/op
                 fillHeap·p1.00:   723517.440 us/op

Iteration   8: 670739.115 ±(99.9%) 25498.080 us/op
                 fillHeap·p0.00:   599785.472 us/op
                 fillHeap·p0.50:   671088.640 us/op
                 fillHeap·p0.90:   698980.762 us/op
                 fillHeap·p0.95:   701497.344 us/op
                 fillHeap·p0.99:   701497.344 us/op
                 fillHeap·p0.999:  701497.344 us/op
                 fillHeap·p0.9999: 701497.344 us/op
                 fillHeap·p1.00:   701497.344 us/op

Iteration   9: 673605.222 ±(99.9%) 26357.092 us/op
                 fillHeap·p0.00:   602931.200 us/op
                 fillHeap·p0.50:   673185.792 us/op
                 fillHeap·p0.90:   703594.496 us/op
                 fillHeap·p0.95:   703594.496 us/op
                 fillHeap·p0.99:   703594.496 us/op
                 fillHeap·p0.999:  703594.496 us/op
                 fillHeap·p0.9999: 703594.496 us/op
                 fillHeap·p1.00:   703594.496 us/op

Iteration  10: 675352.849 ±(99.9%) 24491.862 us/op
                 fillHeap·p0.00:   596639.744 us/op
                 fillHeap·p0.50:   681574.400 us/op
                 fillHeap·p0.90:   689963.008 us/op
                 fillHeap·p0.95:   693108.736 us/op
                 fillHeap·p0.99:   693108.736 us/op
                 fillHeap·p0.999:  693108.736 us/op
                 fillHeap·p0.9999: 693108.736 us/op
                 fillHeap·p1.00:   693108.736 us/op

Iteration  11: 673884.843 ±(99.9%) 31298.026 us/op
                 fillHeap·p0.00:   578813.952 us/op
                 fillHeap·p0.50:   680525.824 us/op
                 fillHeap·p0.90:   702755.635 us/op
                 fillHeap·p0.95:   704643.072 us/op
                 fillHeap·p0.99:   704643.072 us/op
                 fillHeap·p0.999:  704643.072 us/op
                 fillHeap·p0.9999: 704643.072 us/op
                 fillHeap·p1.00:   704643.072 us/op

Iteration  12: 673954.748 ±(99.9%) 28439.577 us/op
                 fillHeap·p0.00:   587202.560 us/op
                 fillHeap·p0.50:   678428.672 us/op
                 fillHeap·p0.90:   698771.046 us/op
                 fillHeap·p0.95:   708837.376 us/op
                 fillHeap·p0.99:   708837.376 us/op
                 fillHeap·p0.999:  708837.376 us/op
                 fillHeap·p0.9999: 708837.376 us/op
                 fillHeap·p1.00:   708837.376 us/op

Iteration  13: 673675.127 ±(99.9%) 28107.508 us/op
                 fillHeap·p0.00:   593494.016 us/op
                 fillHeap·p0.50:   677380.096 us/op
                 fillHeap·p0.90:   702755.635 us/op
                 fillHeap·p0.95:   707788.800 us/op
                 fillHeap·p0.99:   707788.800 us/op
                 fillHeap·p0.999:  707788.800 us/op
                 fillHeap·p0.9999: 707788.800 us/op
                 fillHeap·p1.00:   707788.800 us/op

Iteration  14: 668781.773 ±(99.9%) 22336.398 us/op
                 fillHeap·p0.00:   603979.776 us/op
                 fillHeap·p0.50:   671088.640 us/op
                 fillHeap·p0.90:   689753.293 us/op
                 fillHeap·p0.95:   691011.584 us/op
                 fillHeap·p0.99:   691011.584 us/op
                 fillHeap·p0.999:  691011.584 us/op
                 fillHeap·p0.9999: 691011.584 us/op
                 fillHeap·p1.00:   691011.584 us/op

Iteration  15: 674304.273 ±(99.9%) 26174.836 us/op
                 fillHeap·p0.00:   600834.048 us/op
                 fillHeap·p0.50:   678428.672 us/op
                 fillHeap·p0.90:   699609.907 us/op
                 fillHeap·p0.95:   710934.528 us/op
                 fillHeap·p0.99:   710934.528 us/op
                 fillHeap·p0.999:  710934.528 us/op
                 fillHeap·p0.9999: 710934.528 us/op
                 fillHeap·p1.00:   710934.528 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 225
  mean = 675921.410 ±(99.9%) 5583.919 us/op

  Histogram, us/op:
    [500000.000, 525000.000) = 0 
    [525000.000, 550000.000) = 0 
    [550000.000, 575000.000) = 0 
    [575000.000, 600000.000) = 9 
    [600000.000, 625000.000) = 6 
    [625000.000, 650000.000) = 0 
    [650000.000, 675000.000) = 68 
    [675000.000, 700000.000) = 124 
    [700000.000, 725000.000) = 16 
    [725000.000, 750000.000) = 2 
    [750000.000, 775000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 578813.952 us/op
     p(50.0000) = 678428.672 us/op
     p(90.0000) = 698771.046 us/op
     p(95.0000) = 704328.499 us/op
     p(99.0000) = 725069.332 us/op
     p(99.9000) = 727711.744 us/op
     p(99.9900) = 727711.744 us/op
     p(99.9990) = 727711.744 us/op
     p(99.9999) = 727711.744 us/op
    p(100.0000) = 727711.744 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 73.19% complete, ETA 02:13:06
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap(AllocationBenchmark.java:52)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_sample_jmhStub(AllocationBenchmark_fillHeap_jmhTest.java:388)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_SampleTime(AllocationBenchmark_fillHeap_jmhTest.java:324)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 73.91% complete, ETA 02:08:15
# Fork: 1 of 1
# Warmup Iteration   1: 498298.295 ±(99.9%) 13356.818 us/op
# Warmup Iteration   2: 499296.939 ±(99.9%) 15632.924 us/op
# Warmup Iteration   3: 500695.040 ±(99.9%) 15560.669 us/op
# Warmup Iteration   4: 499961.037 ±(99.9%) 12650.794 us/op
# Warmup Iteration   5: 499934.822 ±(99.9%) 14254.821 us/op
Iteration   1: 495527.058 ±(99.9%) 13470.129 us/op
                 fillHeap·p0.00:   459800.576 us/op
                 fillHeap·p0.50:   497025.024 us/op
                 fillHeap·p0.90:   522400.563 us/op
                 fillHeap·p0.95:   529111.450 us/op
                 fillHeap·p0.99:   529530.880 us/op
                 fillHeap·p0.999:  529530.880 us/op
                 fillHeap·p0.9999: 529530.880 us/op
                 fillHeap·p1.00:   529530.880 us/op

Iteration   2: 501612.544 ±(99.9%) 11566.516 us/op
                 fillHeap·p0.00:   477626.368 us/op
                 fillHeap·p0.50:   503316.480 us/op
                 fillHeap·p0.90:   522715.136 us/op
                 fillHeap·p0.95:   525756.006 us/op
                 fillHeap·p0.99:   525860.864 us/op
                 fillHeap·p0.999:  525860.864 us/op
                 fillHeap·p0.9999: 525860.864 us/op
                 fillHeap·p1.00:   525860.864 us/op

Iteration   3: 497549.312 ±(99.9%) 13711.834 us/op
                 fillHeap·p0.00:   472907.776 us/op
                 fillHeap·p0.50:   492830.720 us/op
                 fillHeap·p0.90:   526175.437 us/op
                 fillHeap·p0.95:   536923.341 us/op
                 fillHeap·p0.99:   537919.488 us/op
                 fillHeap·p0.999:  537919.488 us/op
                 fillHeap·p0.9999: 537919.488 us/op
                 fillHeap·p1.00:   537919.488 us/op

Iteration   4: 497249.719 ±(99.9%) 12482.274 us/op
                 fillHeap·p0.00:   468189.184 us/op
                 fillHeap·p0.50:   495976.448 us/op
                 fillHeap·p0.90:   519779.123 us/op
                 fillHeap·p0.95:   525756.006 us/op
                 fillHeap·p0.99:   526385.152 us/op
                 fillHeap·p0.999:  526385.152 us/op
                 fillHeap·p0.9999: 526385.152 us/op
                 fillHeap·p1.00:   526385.152 us/op

Iteration   5: 498722.718 ±(99.9%) 11093.766 us/op
                 fillHeap·p0.00:   476053.504 us/op
                 fillHeap·p0.50:   498597.888 us/op
                 fillHeap·p0.90:   521351.987 us/op
                 fillHeap·p0.95:   524969.574 us/op
                 fillHeap·p0.99:   525336.576 us/op
                 fillHeap·p0.999:  525336.576 us/op
                 fillHeap·p0.9999: 525336.576 us/op
                 fillHeap·p1.00:   525336.576 us/op

Iteration   6: 495776.719 ±(99.9%) 15009.501 us/op
                 fillHeap·p0.00:   458752.000 us/op
                 fillHeap·p0.50:   496500.736 us/op
                 fillHeap·p0.90:   521142.272 us/op
                 fillHeap·p0.95:   524130.714 us/op
                 fillHeap·p0.99:   524288.000 us/op
                 fillHeap·p0.999:  524288.000 us/op
                 fillHeap·p0.9999: 524288.000 us/op
                 fillHeap·p1.00:   524288.000 us/op

Iteration   7: 498323.261 ±(99.9%) 12179.503 us/op
                 fillHeap·p0.00:   465567.744 us/op
                 fillHeap·p0.50:   495976.448 us/op
                 fillHeap·p0.90:   521561.702 us/op
                 fillHeap·p0.95:   523134.566 us/op
                 fillHeap·p0.99:   523239.424 us/op
                 fillHeap·p0.999:  523239.424 us/op
                 fillHeap·p0.9999: 523239.424 us/op
                 fillHeap·p1.00:   523239.424 us/op

Iteration   8: 501009.613 ±(99.9%) 11813.367 us/op
                 fillHeap·p0.00:   478150.656 us/op
                 fillHeap·p0.50:   498073.600 us/op
                 fillHeap·p0.90:   519936.410 us/op
                 fillHeap·p0.95:   535035.904 us/op
                 fillHeap·p0.99:   535822.336 us/op
                 fillHeap·p0.999:  535822.336 us/op
                 fillHeap·p0.9999: 535822.336 us/op
                 fillHeap·p1.00:   535822.336 us/op

Iteration   9: 499721.362 ±(99.9%) 11618.465 us/op
                 fillHeap·p0.00:   476577.792 us/op
                 fillHeap·p0.50:   501219.328 us/op
                 fillHeap·p0.90:   521561.702 us/op
                 fillHeap·p0.95:   529478.451 us/op
                 fillHeap·p0.99:   530055.168 us/op
                 fillHeap·p0.999:  530055.168 us/op
                 fillHeap·p0.9999: 530055.168 us/op
                 fillHeap·p1.00:   530055.168 us/op

Iteration  10: 505072.845 ±(99.9%) 13337.424 us/op
                 fillHeap·p0.00:   477626.368 us/op
                 fillHeap·p0.50:   501481.472 us/op
                 fillHeap·p0.90:   525179.290 us/op
                 fillHeap·p0.95:   532309.606 us/op
                 fillHeap·p0.99:   532676.608 us/op
                 fillHeap·p0.999:  532676.608 us/op
                 fillHeap·p0.9999: 532676.608 us/op
                 fillHeap·p1.00:   532676.608 us/op

Iteration  11: 539106.035 ±(99.9%) 39269.503 us/op
                 fillHeap·p0.00:   486014.976 us/op
                 fillHeap·p0.50:   548405.248 us/op
                 fillHeap·p0.90:   589299.712 us/op
                 fillHeap·p0.95:   648019.968 us/op
                 fillHeap·p0.99:   648019.968 us/op
                 fillHeap·p0.999:  648019.968 us/op
                 fillHeap·p0.9999: 648019.968 us/op
                 fillHeap·p1.00:   648019.968 us/op

Iteration  12: 623594.315 ±(99.9%) 20241.404 us/op
                 fillHeap·p0.00:   576716.800 us/op
                 fillHeap·p0.50:   624951.296 us/op
                 fillHeap·p0.90:   649697.690 us/op
                 fillHeap·p0.95:   652214.272 us/op
                 fillHeap·p0.99:   652214.272 us/op
                 fillHeap·p0.999:  652214.272 us/op
                 fillHeap·p0.9999: 652214.272 us/op
                 fillHeap·p1.00:   652214.272 us/op

Iteration  13: 622915.825 ±(99.9%) 12948.383 us/op
                 fillHeap·p0.00:   596639.744 us/op
                 fillHeap·p0.50:   620756.992 us/op
                 fillHeap·p0.90:   641309.082 us/op
                 fillHeap·p0.95:   648019.968 us/op
                 fillHeap·p0.99:   648019.968 us/op
                 fillHeap·p0.999:  648019.968 us/op
                 fillHeap·p0.9999: 648019.968 us/op
                 fillHeap·p1.00:   648019.968 us/op

Iteration  14: 621127.078 ±(99.9%) 15842.989 us/op
                 fillHeap·p0.00:   576716.800 us/op
                 fillHeap·p0.50:   620756.992 us/op
                 fillHeap·p0.90:   640260.506 us/op
                 fillHeap·p0.95:   646971.392 us/op
                 fillHeap·p0.99:   646971.392 us/op
                 fillHeap·p0.999:  646971.392 us/op
                 fillHeap·p0.9999: 646971.392 us/op
                 fillHeap·p1.00:   646971.392 us/op

Iteration  15: 622854.144 ±(99.9%) 11967.804 us/op
                 fillHeap·p0.00:   590348.288 us/op
                 fillHeap·p0.50:   623902.720 us/op
                 fillHeap·p0.90:   637743.923 us/op
                 fillHeap·p0.95:   642777.088 us/op
                 fillHeap·p0.99:   642777.088 us/op
                 fillHeap·p0.999:  642777.088 us/op
                 fillHeap·p0.9999: 642777.088 us/op
                 fillHeap·p1.00:   642777.088 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 294
  mean = 530188.915 ±(99.9%) 10625.814 us/op

  Histogram, us/op:
    [400000.000, 425000.000) = 0 
    [425000.000, 450000.000) = 0 
    [450000.000, 475000.000) = 8 
    [475000.000, 500000.000) = 108 
    [500000.000, 525000.000) = 89 
    [525000.000, 550000.000) = 13 
    [550000.000, 575000.000) = 5 
    [575000.000, 600000.000) = 7 
    [600000.000, 625000.000) = 37 
    [625000.000, 650000.000) = 26 
    [650000.000, 675000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 458752.000 us/op
     p(50.0000) = 505151.488 us/op
     p(90.0000) = 624951.296 us/op
     p(95.0000) = 635699.200 us/op
     p(99.0000) = 648072.397 us/op
     p(99.9000) = 652214.272 us/op
     p(99.9900) = 652214.272 us/op
     p(99.9990) = 652214.272 us/op
     p(99.9999) = 652214.272 us/op
    p(100.0000) = 652214.272 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 74.64% complete, ETA 02:04:44
# Fork: 1 of 1
# Warmup Iteration   1: 498098.566 ±(99.9%) 17937.280 us/op
# Warmup Iteration   2: 490583.771 ±(99.9%) 15112.960 us/op
# Warmup Iteration   3: 485290.959 ±(99.9%) 16339.783 us/op
# Warmup Iteration   4: 490708.602 ±(99.9%) 11435.204 us/op
# Warmup Iteration   5: 490433.975 ±(99.9%) 15251.852 us/op
Iteration   1: 490508.873 ±(99.9%) 11149.286 us/op
                 fillHeap·p0.00:   470286.336 us/op
                 fillHeap·p0.50:   487587.840 us/op
                 fillHeap·p0.90:   513487.667 us/op
                 fillHeap·p0.95:   516738.253 us/op
                 fillHeap·p0.99:   516947.968 us/op
                 fillHeap·p0.999:  516947.968 us/op
                 fillHeap·p0.9999: 516947.968 us/op
                 fillHeap·p1.00:   516947.968 us/op

Iteration   2: 497599.244 ±(99.9%) 14084.406 us/op
                 fillHeap·p0.00:   455606.272 us/op
                 fillHeap·p0.50:   499122.176 us/op
                 fillHeap·p0.90:   514641.101 us/op
                 fillHeap·p0.95:   524759.859 us/op
                 fillHeap·p0.99:   525860.864 us/op
                 fillHeap·p0.999:  525860.864 us/op
                 fillHeap·p0.9999: 525860.864 us/op
                 fillHeap·p1.00:   525860.864 us/op

Iteration   3: 491507.517 ±(99.9%) 17622.621 us/op
                 fillHeap·p0.00:   451411.968 us/op
                 fillHeap·p0.50:   494403.584 us/op
                 fillHeap·p0.90:   517367.398 us/op
                 fillHeap·p0.95:   520880.128 us/op
                 fillHeap·p0.99:   521142.272 us/op
                 fillHeap·p0.999:  521142.272 us/op
                 fillHeap·p0.9999: 521142.272 us/op
                 fillHeap·p1.00:   521142.272 us/op

Iteration   4: 492531.127 ±(99.9%) 14392.735 us/op
                 fillHeap·p0.00:   463470.592 us/op
                 fillHeap·p0.50:   493355.008 us/op
                 fillHeap·p0.90:   512124.518 us/op
                 fillHeap·p0.95:   524025.856 us/op
                 fillHeap·p0.99:   525336.576 us/op
                 fillHeap·p0.999:  525336.576 us/op
                 fillHeap·p0.9999: 525336.576 us/op
                 fillHeap·p1.00:   525336.576 us/op

Iteration   5: 493280.110 ±(99.9%) 14572.017 us/op
                 fillHeap·p0.00:   458227.712 us/op
                 fillHeap·p0.50:   492830.720 us/op
                 fillHeap·p0.90:   517996.544 us/op
                 fillHeap·p0.95:   533200.896 us/op
                 fillHeap·p0.99:   534773.760 us/op
                 fillHeap·p0.999:  534773.760 us/op
                 fillHeap·p0.9999: 534773.760 us/op
                 fillHeap·p1.00:   534773.760 us/op

Iteration   6: 485990.010 ±(99.9%) 11566.755 us/op
                 fillHeap·p0.00:   468189.184 us/op
                 fillHeap·p0.50:   486539.264 us/op
                 fillHeap·p0.90:   511180.800 us/op
                 fillHeap·p0.95:   513120.666 us/op
                 fillHeap·p0.99:   513277.952 us/op
                 fillHeap·p0.999:  513277.952 us/op
                 fillHeap·p0.9999: 513277.952 us/op
                 fillHeap·p1.00:   513277.952 us/op

Iteration   7: 489585.128 ±(99.9%) 11517.299 us/op
                 fillHeap·p0.00:   462422.016 us/op
                 fillHeap·p0.50:   491257.856 us/op
                 fillHeap·p0.90:   508244.787 us/op
                 fillHeap·p0.95:   513277.952 us/op
                 fillHeap·p0.99:   513802.240 us/op
                 fillHeap·p0.999:  513802.240 us/op
                 fillHeap·p0.9999: 513802.240 us/op
                 fillHeap·p1.00:   513802.240 us/op

Iteration   8: 492456.229 ±(99.9%) 13521.049 us/op
                 fillHeap·p0.00:   461897.728 us/op
                 fillHeap·p0.50:   490209.280 us/op
                 fillHeap·p0.90:   513487.667 us/op
                 fillHeap·p0.95:   517577.114 us/op
                 fillHeap·p0.99:   517996.544 us/op
                 fillHeap·p0.999:  517996.544 us/op
                 fillHeap·p0.9999: 517996.544 us/op
                 fillHeap·p1.00:   517996.544 us/op

Iteration   9: 491857.042 ±(99.9%) 14068.822 us/op
                 fillHeap·p0.00:   464519.168 us/op
                 fillHeap·p0.50:   493355.008 us/op
                 fillHeap·p0.90:   509188.506 us/op
                 fillHeap·p0.95:   532257.178 us/op
                 fillHeap·p0.99:   534773.760 us/op
                 fillHeap·p0.999:  534773.760 us/op
                 fillHeap·p0.9999: 534773.760 us/op
                 fillHeap·p1.00:   534773.760 us/op

Iteration  10: 491507.517 ±(99.9%) 12507.925 us/op
                 fillHeap·p0.00:   464519.168 us/op
                 fillHeap·p0.50:   489684.992 us/op
                 fillHeap·p0.90:   511600.230 us/op
                 fillHeap·p0.95:   525913.293 us/op
                 fillHeap·p0.99:   527433.728 us/op
                 fillHeap·p0.999:  527433.728 us/op
                 fillHeap·p0.9999: 527433.728 us/op
                 fillHeap·p1.00:   527433.728 us/op

Iteration  11: 493904.262 ±(99.9%) 12379.997 us/op
                 fillHeap·p0.00:   468189.184 us/op
                 fillHeap·p0.50:   495452.160 us/op
                 fillHeap·p0.90:   509607.936 us/op
                 fillHeap·p0.95:   524235.571 us/op
                 fillHeap·p0.99:   525860.864 us/op
                 fillHeap·p0.999:  525860.864 us/op
                 fillHeap·p0.9999: 525860.864 us/op
                 fillHeap·p1.00:   525860.864 us/op

Iteration  12: 495227.465 ±(99.9%) 15732.019 us/op
                 fillHeap·p0.00:   469237.760 us/op
                 fillHeap·p0.50:   495452.160 us/op
                 fillHeap·p0.90:   521666.560 us/op
                 fillHeap·p0.95:   529268.736 us/op
                 fillHeap·p0.99:   530055.168 us/op
                 fillHeap·p0.999:  530055.168 us/op
                 fillHeap·p0.9999: 530055.168 us/op
                 fillHeap·p1.00:   530055.168 us/op

Iteration  13: 493280.110 ±(99.9%) 16010.493 us/op
                 fillHeap·p0.00:   458227.712 us/op
                 fillHeap·p0.50:   492306.432 us/op
                 fillHeap·p0.90:   523134.566 us/op
                 fillHeap·p0.95:   525179.290 us/op
                 fillHeap·p0.99:   525336.576 us/op
                 fillHeap·p0.999:  525336.576 us/op
                 fillHeap·p0.9999: 525336.576 us/op
                 fillHeap·p1.00:   525336.576 us/op

Iteration  14: 495976.448 ±(99.9%) 14286.162 us/op
                 fillHeap·p0.00:   452984.832 us/op
                 fillHeap·p0.50:   497025.024 us/op
                 fillHeap·p0.90:   523344.282 us/op
                 fillHeap·p0.95:   530474.598 us/op
                 fillHeap·p0.99:   531103.744 us/op
                 fillHeap·p0.999:  531103.744 us/op
                 fillHeap·p0.9999: 531103.744 us/op
                 fillHeap·p1.00:   531103.744 us/op

Iteration  15: 491083.093 ±(99.9%) 15951.655 us/op
                 fillHeap·p0.00:   458227.712 us/op
                 fillHeap·p0.50:   498073.600 us/op
                 fillHeap·p0.90:   515060.531 us/op
                 fillHeap·p0.95:   525756.006 us/op
                 fillHeap·p0.99:   526909.440 us/op
                 fillHeap·p0.999:  526909.440 us/op
                 fillHeap·p0.9999: 526909.440 us/op
                 fillHeap·p1.00:   526909.440 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 315
  mean = 492419.612 ±(99.9%) 3106.391 us/op

  Histogram, us/op:
    [450000.000, 455000.000) = 2 
    [455000.000, 460000.000) = 4 
    [460000.000, 465000.000) = 10 
    [465000.000, 470000.000) = 11 
    [470000.000, 475000.000) = 19 
    [475000.000, 480000.000) = 33 
    [480000.000, 485000.000) = 33 
    [485000.000, 490000.000) = 25 
    [490000.000, 495000.000) = 39 
    [495000.000, 500000.000) = 34 
    [500000.000, 505000.000) = 34 
    [505000.000, 510000.000) = 22 
    [510000.000, 515000.000) = 25 
    [515000.000, 520000.000) = 9 
    [520000.000, 525000.000) = 5 
    [525000.000, 530000.000) = 6 
    [530000.000, 535000.000) = 4 

  Percentiles, us/op:
      p(0.0000) = 451411.968 us/op
     p(50.0000) = 492306.432 us/op
     p(90.0000) = 513802.240 us/op
     p(95.0000) = 519779.123 us/op
     p(99.0000) = 530935.972 us/op
     p(99.9000) = 534773.760 us/op
     p(99.9900) = 534773.760 us/op
     p(99.9990) = 534773.760 us/op
     p(99.9999) = 534773.760 us/op
    p(100.0000) = 534773.760 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 75.36% complete, ETA 02:01:13
# Fork: 1 of 1
# Warmup Iteration   1: 382.975 ±(99.9%) 0.804 us/op
# Warmup Iteration   2: 380.864 ±(99.9%) 0.416 us/op
# Warmup Iteration   3: 382.034 ±(99.9%) 0.435 us/op
# Warmup Iteration   4: 380.787 ±(99.9%) 0.412 us/op
# Warmup Iteration   5: 379.954 ±(99.9%) 0.400 us/op
Iteration   1: 379.650 ±(99.9%) 0.384 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   376.320 us/op
                 read·p0.90:   390.656 us/op
                 read·p0.95:   397.312 us/op
                 read·p0.99:   428.544 us/op
                 read·p0.999:  594.944 us/op
                 read·p0.9999: 728.732 us/op
                 read·p1.00:   803.840 us/op

Iteration   2: 381.048 ±(99.9%) 0.417 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.344 us/op
                 read·p0.90:   392.704 us/op
                 read·p0.95:   399.872 us/op
                 read·p0.99:   437.760 us/op
                 read·p0.999:  621.568 us/op
                 read·p0.9999: 727.705 us/op
                 read·p1.00:   831.488 us/op

Iteration   3: 380.762 ±(99.9%) 0.396 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   376.832 us/op
                 read·p0.90:   392.704 us/op
                 read·p0.95:   400.384 us/op
                 read·p0.99:   438.600 us/op
                 read·p0.999:  599.581 us/op
                 read·p0.9999: 751.771 us/op
                 read·p1.00:   820.224 us/op

Iteration   4: 381.131 ±(99.9%) 0.409 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.344 us/op
                 read·p0.90:   392.192 us/op
                 read·p0.95:   398.848 us/op
                 read·p0.99:   437.248 us/op
                 read·p0.999:  612.137 us/op
                 read·p0.9999: 730.870 us/op
                 read·p1.00:   836.608 us/op

Iteration   5: 380.280 ±(99.9%) 0.396 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   376.832 us/op
                 read·p0.90:   391.168 us/op
                 read·p0.95:   398.336 us/op
                 read·p0.99:   435.364 us/op
                 read·p0.999:  597.742 us/op
                 read·p0.9999: 806.961 us/op
                 read·p1.00:   835.584 us/op

Iteration   6: 380.400 ±(99.9%) 0.407 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   376.832 us/op
                 read·p0.90:   391.680 us/op
                 read·p0.95:   398.848 us/op
                 read·p0.99:   436.429 us/op
                 read·p0.999:  609.014 us/op
                 read·p0.9999: 761.465 us/op
                 read·p1.00:   813.056 us/op

Iteration   7: 379.663 ±(99.9%) 0.384 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   376.320 us/op
                 read·p0.90:   390.656 us/op
                 read·p0.95:   396.800 us/op
                 read·p0.99:   425.472 us/op
                 read·p0.999:  592.257 us/op
                 read·p0.9999: 747.027 us/op
                 read·p1.00:   827.392 us/op

Iteration   8: 380.781 ±(99.9%) 0.413 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   376.832 us/op
                 read·p0.90:   392.192 us/op
                 read·p0.95:   399.872 us/op
                 read·p0.99:   454.144 us/op
                 read·p0.999:  599.040 us/op
                 read·p0.9999: 724.276 us/op
                 read·p1.00:   749.568 us/op

Iteration   9: 380.547 ±(99.9%) 0.406 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   376.320 us/op
                 read·p0.90:   392.192 us/op
                 read·p0.95:   400.384 us/op
                 read·p0.99:   445.696 us/op
                 read·p0.999:  605.184 us/op
                 read·p0.9999: 745.344 us/op
                 read·p1.00:   880.640 us/op

Iteration  10: 380.564 ±(99.9%) 0.417 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   376.832 us/op
                 read·p0.90:   391.680 us/op
                 read·p0.95:   399.360 us/op
                 read·p0.99:   453.381 us/op
                 read·p0.999:  606.208 us/op
                 read·p0.9999: 765.827 us/op
                 read·p1.00:   883.712 us/op

Iteration  11: 379.377 ±(99.9%) 0.382 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   376.320 us/op
                 read·p0.90:   390.144 us/op
                 read·p0.95:   396.800 us/op
                 read·p0.99:   433.152 us/op
                 read·p0.999:  594.604 us/op
                 read·p0.9999: 691.576 us/op
                 read·p1.00:   693.248 us/op

Iteration  12: 379.676 ±(99.9%) 0.380 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   376.320 us/op
                 read·p0.90:   390.656 us/op
                 read·p0.95:   397.312 us/op
                 read·p0.99:   429.000 us/op
                 read·p0.999:  593.920 us/op
                 read·p0.9999: 711.202 us/op
                 read·p1.00:   730.112 us/op

Iteration  13: 380.284 ±(99.9%) 0.394 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   376.832 us/op
                 read·p0.90:   391.680 us/op
                 read·p0.95:   398.848 us/op
                 read·p0.99:   431.104 us/op
                 read·p0.999:  594.870 us/op
                 read·p0.9999: 786.647 us/op
                 read·p1.00:   846.848 us/op

Iteration  14: 381.306 ±(99.9%) 0.409 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.344 us/op
                 read·p0.90:   393.216 us/op
                 read·p0.95:   400.384 us/op
                 read·p0.99:   441.359 us/op
                 read·p0.999:  611.126 us/op
                 read·p0.9999: 705.421 us/op
                 read·p1.00:   773.120 us/op

Iteration  15: 380.503 ±(99.9%) 0.403 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   376.832 us/op
                 read·p0.90:   391.680 us/op
                 read·p0.95:   398.848 us/op
                 read·p0.99:   433.905 us/op
                 read·p0.999:  618.237 us/op
                 read·p0.9999: 722.042 us/op
                 read·p1.00:   830.464 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  N = 393891
  mean =    380.397 ±(99.9%) 0.103 us/op

  Histogram, us/op:
    [300.000, 350.000) = 0 
    [350.000, 400.000) = 376682 
    [400.000, 450.000) = 13661 
    [450.000, 500.000) = 544 
    [500.000, 550.000) = 638 
    [550.000, 600.000) = 1934 
    [600.000, 650.000) = 259 
    [650.000, 700.000) = 120 
    [700.000, 750.000) = 26 
    [750.000, 800.000) = 13 
    [800.000, 850.000) = 12 

  Percentiles, us/op:
      p(0.0000) =    370.176 us/op
     p(50.0000) =    376.832 us/op
     p(90.0000) =    391.680 us/op
     p(95.0000) =    398.848 us/op
     p(99.0000) =    440.832 us/op
     p(99.9000) =    603.136 us/op
     p(99.9900) =    723.796 us/op
     p(99.9990) =    837.233 us/op
     p(99.9999) =    883.712 us/op
    p(100.0000) =    883.712 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 76.08% complete, ETA 01:57:39
# Fork: 1 of 1
# Warmup Iteration   1: 169.455 ±(99.9%) 0.392 us/op
# Warmup Iteration   2: 168.450 ±(99.9%) 0.193 us/op
# Warmup Iteration   3: 168.936 ±(99.9%) 0.186 us/op
# Warmup Iteration   4: 169.118 ±(99.9%) 0.209 us/op
# Warmup Iteration   5: 168.198 ±(99.9%) 0.186 us/op
Iteration   1: 169.618 ±(99.9%) 0.188 us/op
                 readAndWrite·p0.00:   160.512 us/op
                 readAndWrite·p0.50:   167.680 us/op
                 readAndWrite·p0.90:   175.616 us/op
                 readAndWrite·p0.95:   181.504 us/op
                 readAndWrite·p0.99:   197.888 us/op
                 readAndWrite·p0.999:  372.224 us/op
                 readAndWrite·p0.9999: 478.955 us/op
                 readAndWrite·p1.00:   520.192 us/op

Iteration   2: 168.589 ±(99.9%) 0.233 us/op
                 readAndWrite·p0.00:   160.512 us/op
                 readAndWrite·p0.50:   165.888 us/op
                 readAndWrite·p0.90:   174.592 us/op
                 readAndWrite·p0.95:   180.480 us/op
                 readAndWrite·p0.99:   194.560 us/op
                 readAndWrite·p0.999:  372.117 us/op
                 readAndWrite·p0.9999: 511.659 us/op
                 readAndWrite·p1.00:   2691.072 us/op

Iteration   3: 168.815 ±(99.9%) 0.177 us/op
                 readAndWrite·p0.00:   160.000 us/op
                 readAndWrite·p0.50:   167.680 us/op
                 readAndWrite·p0.90:   174.592 us/op
                 readAndWrite·p0.95:   180.224 us/op
                 readAndWrite·p0.99:   193.974 us/op
                 readAndWrite·p0.999:  356.798 us/op
                 readAndWrite·p0.9999: 494.424 us/op
                 readAndWrite·p1.00:   660.480 us/op

Iteration   4: 168.118 ±(99.9%) 0.184 us/op
                 readAndWrite·p0.00:   159.488 us/op
                 readAndWrite·p0.50:   165.120 us/op
                 readAndWrite·p0.90:   173.824 us/op
                 readAndWrite·p0.95:   180.736 us/op
                 readAndWrite·p0.99:   197.376 us/op
                 readAndWrite·p0.999:  374.080 us/op
                 readAndWrite·p0.9999: 463.904 us/op
                 readAndWrite·p1.00:   521.728 us/op

Iteration   5: 168.614 ±(99.9%) 0.203 us/op
                 readAndWrite·p0.00:   160.000 us/op
                 readAndWrite·p0.50:   165.632 us/op
                 readAndWrite·p0.90:   174.592 us/op
                 readAndWrite·p0.95:   180.992 us/op
                 readAndWrite·p0.99:   197.376 us/op
                 readAndWrite·p0.999:  375.808 us/op
                 readAndWrite·p0.9999: 599.245 us/op
                 readAndWrite·p1.00:   773.120 us/op

Iteration   6: 168.234 ±(99.9%) 0.185 us/op
                 readAndWrite·p0.00:   160.000 us/op
                 readAndWrite·p0.50:   165.376 us/op
                 readAndWrite·p0.90:   173.568 us/op
                 readAndWrite·p0.95:   180.736 us/op
                 readAndWrite·p0.99:   196.352 us/op
                 readAndWrite·p0.999:  370.519 us/op
                 readAndWrite·p0.9999: 473.772 us/op
                 readAndWrite·p1.00:   551.936 us/op

Iteration   7: 168.620 ±(99.9%) 0.192 us/op
                 readAndWrite·p0.00:   160.000 us/op
                 readAndWrite·p0.50:   165.632 us/op
                 readAndWrite·p0.90:   174.848 us/op
                 readAndWrite·p0.95:   182.272 us/op
                 readAndWrite·p0.99:   201.472 us/op
                 readAndWrite·p0.999:  371.712 us/op
                 readAndWrite·p0.9999: 488.802 us/op
                 readAndWrite·p1.00:   678.912 us/op

Iteration   8: 169.846 ±(99.9%) 0.195 us/op
                 readAndWrite·p0.00:   160.000 us/op
                 readAndWrite·p0.50:   167.680 us/op
                 readAndWrite·p0.90:   176.384 us/op
                 readAndWrite·p0.95:   184.832 us/op
                 readAndWrite·p0.99:   206.157 us/op
                 readAndWrite·p0.999:  370.135 us/op
                 readAndWrite·p0.9999: 489.850 us/op
                 readAndWrite·p1.00:   514.560 us/op

Iteration   9: 169.198 ±(99.9%) 0.199 us/op
                 readAndWrite·p0.00:   160.000 us/op
                 readAndWrite·p0.50:   166.400 us/op
                 readAndWrite·p0.90:   175.616 us/op
                 readAndWrite·p0.95:   183.552 us/op
                 readAndWrite·p0.99:   203.776 us/op
                 readAndWrite·p0.999:  368.640 us/op
                 readAndWrite·p0.9999: 533.921 us/op
                 readAndWrite·p1.00:   640.000 us/op

Iteration  10: 168.660 ±(99.9%) 0.180 us/op
                 readAndWrite·p0.00:   159.744 us/op
                 readAndWrite·p0.50:   165.888 us/op
                 readAndWrite·p0.90:   175.104 us/op
                 readAndWrite·p0.95:   181.760 us/op
                 readAndWrite·p0.99:   200.192 us/op
                 readAndWrite·p0.999:  367.104 us/op
                 readAndWrite·p0.9999: 484.989 us/op
                 readAndWrite·p1.00:   519.680 us/op

Iteration  11: 168.560 ±(99.9%) 0.185 us/op
                 readAndWrite·p0.00:   160.000 us/op
                 readAndWrite·p0.50:   165.888 us/op
                 readAndWrite·p0.90:   174.848 us/op
                 readAndWrite·p0.95:   181.504 us/op
                 readAndWrite·p0.99:   199.680 us/op
                 readAndWrite·p0.999:  368.128 us/op
                 readAndWrite·p0.9999: 510.351 us/op
                 readAndWrite·p1.00:   629.760 us/op

Iteration  12: 168.830 ±(99.9%) 0.185 us/op
                 readAndWrite·p0.00:   159.744 us/op
                 readAndWrite·p0.50:   166.144 us/op
                 readAndWrite·p0.90:   175.104 us/op
                 readAndWrite·p0.95:   182.016 us/op
                 readAndWrite·p0.99:   200.133 us/op
                 readAndWrite·p0.999:  367.041 us/op
                 readAndWrite·p0.9999: 501.293 us/op
                 readAndWrite·p1.00:   764.928 us/op

Iteration  13: 168.542 ±(99.9%) 0.185 us/op
                 readAndWrite·p0.00:   160.000 us/op
                 readAndWrite·p0.50:   165.376 us/op
                 readAndWrite·p0.90:   175.104 us/op
                 readAndWrite·p0.95:   181.760 us/op
                 readAndWrite·p0.99:   199.936 us/op
                 readAndWrite·p0.999:  370.856 us/op
                 readAndWrite·p0.9999: 469.204 us/op
                 readAndWrite·p1.00:   665.600 us/op

Iteration  14: 169.191 ±(99.9%) 0.175 us/op
                 readAndWrite·p0.00:   158.720 us/op
                 readAndWrite·p0.50:   167.680 us/op
                 readAndWrite·p0.90:   174.848 us/op
                 readAndWrite·p0.95:   181.504 us/op
                 readAndWrite·p0.99:   197.888 us/op
                 readAndWrite·p0.999:  358.913 us/op
                 readAndWrite·p0.9999: 481.948 us/op
                 readAndWrite·p1.00:   539.648 us/op

Iteration  15: 168.263 ±(99.9%) 0.179 us/op
                 readAndWrite·p0.00:   160.256 us/op
                 readAndWrite·p0.50:   165.632 us/op
                 readAndWrite·p0.90:   173.568 us/op
                 readAndWrite·p0.95:   181.504 us/op
                 readAndWrite·p0.99:   198.912 us/op
                 readAndWrite·p0.999:  361.472 us/op
                 readAndWrite·p0.9999: 464.018 us/op
                 readAndWrite·p1.00:   561.152 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  N = 887112
  mean =    168.778 ±(99.9%) 0.049 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 883673 
    [ 250.000,  500.000) = 3370 
    [ 500.000,  750.000) = 65 
    [ 750.000, 1000.000) = 3 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    158.720 us/op
     p(50.0000) =    166.144 us/op
     p(90.0000) =    174.848 us/op
     p(95.0000) =    181.760 us/op
     p(99.0000) =    199.168 us/op
     p(99.9000) =    367.616 us/op
     p(99.9900) =    488.084 us/op
     p(99.9990) =    650.240 us/op
     p(99.9999) =   2691.072 us/op
    p(100.0000) =   2691.072 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 76.81% complete, ETA 01:54:05
# Fork: 1 of 1
# Warmup Iteration   1: 201.148 ±(99.9%) 0.422 us/op
# Warmup Iteration   2: 202.411 ±(99.9%) 0.157 us/op
# Warmup Iteration   3: 204.178 ±(99.9%) 0.157 us/op
# Warmup Iteration   4: 204.273 ±(99.9%) 0.160 us/op
# Warmup Iteration   5: 204.176 ±(99.9%) 0.189 us/op
Iteration   1: 204.367 ±(99.9%) 0.170 us/op
                 swap·p0.00:   201.216 us/op
                 swap·p0.50:   201.728 us/op
                 swap·p0.90:   208.128 us/op
                 swap·p0.95:   211.456 us/op
                 swap·p0.99:   226.865 us/op
                 swap·p0.999:  372.736 us/op
                 swap·p0.9999: 533.097 us/op
                 swap·p1.00:   635.904 us/op

Iteration   2: 204.113 ±(99.9%) 0.154 us/op
                 swap·p0.00:   201.216 us/op
                 swap·p0.50:   201.728 us/op
                 swap·p0.90:   207.104 us/op
                 swap·p0.95:   211.200 us/op
                 swap·p0.99:   222.208 us/op
                 swap·p0.999:  357.405 us/op
                 swap·p0.9999: 442.343 us/op
                 swap·p1.00:   723.968 us/op

Iteration   3: 204.095 ±(99.9%) 0.149 us/op
                 swap·p0.00:   201.472 us/op
                 swap·p0.50:   201.728 us/op
                 swap·p0.90:   207.360 us/op
                 swap·p0.95:   211.200 us/op
                 swap·p0.99:   220.672 us/op
                 swap·p0.999:  354.357 us/op
                 swap·p0.9999: 463.521 us/op
                 swap·p1.00:   545.792 us/op

Iteration   4: 204.272 ±(99.9%) 0.158 us/op
                 swap·p0.00:   201.216 us/op
                 swap·p0.50:   201.728 us/op
                 swap·p0.90:   207.872 us/op
                 swap·p0.95:   211.712 us/op
                 swap·p0.99:   224.000 us/op
                 swap·p0.999:  365.251 us/op
                 swap·p0.9999: 456.857 us/op
                 swap·p1.00:   567.296 us/op

Iteration   5: 204.196 ±(99.9%) 0.156 us/op
                 swap·p0.00:   201.216 us/op
                 swap·p0.50:   201.728 us/op
                 swap·p0.90:   207.616 us/op
                 swap·p0.95:   211.456 us/op
                 swap·p0.99:   222.976 us/op
                 swap·p0.999:  352.846 us/op
                 swap·p0.9999: 488.156 us/op
                 swap·p1.00:   740.352 us/op

Iteration   6: 204.169 ±(99.9%) 0.153 us/op
                 swap·p0.00:   201.216 us/op
                 swap·p0.50:   201.728 us/op
                 swap·p0.90:   207.872 us/op
                 swap·p0.95:   211.456 us/op
                 swap·p0.99:   221.875 us/op
                 swap·p0.999:  357.412 us/op
                 swap·p0.9999: 460.379 us/op
                 swap·p1.00:   531.456 us/op

Iteration   7: 204.314 ±(99.9%) 0.161 us/op
                 swap·p0.00:   201.472 us/op
                 swap·p0.50:   201.728 us/op
                 swap·p0.90:   207.872 us/op
                 swap·p0.95:   211.712 us/op
                 swap·p0.99:   225.549 us/op
                 swap·p0.999:  362.496 us/op
                 swap·p0.9999: 459.145 us/op
                 swap·p1.00:   528.384 us/op

Iteration   8: 204.567 ±(99.9%) 0.180 us/op
                 swap·p0.00:   201.216 us/op
                 swap·p0.50:   201.728 us/op
                 swap·p0.90:   208.384 us/op
                 swap·p0.95:   212.736 us/op
                 swap·p0.99:   228.096 us/op
                 swap·p0.999:  379.988 us/op
                 swap·p0.9999: 485.306 us/op
                 swap·p1.00:   558.080 us/op

Iteration   9: 204.447 ±(99.9%) 0.171 us/op
                 swap·p0.00:   201.216 us/op
                 swap·p0.50:   201.728 us/op
                 swap·p0.90:   208.384 us/op
                 swap·p0.95:   212.480 us/op
                 swap·p0.99:   226.304 us/op
                 swap·p0.999:  376.390 us/op
                 swap·p0.9999: 464.442 us/op
                 swap·p1.00:   603.136 us/op

Iteration  10: 204.507 ±(99.9%) 0.177 us/op
                 swap·p0.00:   201.472 us/op
                 swap·p0.50:   201.728 us/op
                 swap·p0.90:   208.128 us/op
                 swap·p0.95:   212.480 us/op
                 swap·p0.99:   227.328 us/op
                 swap·p0.999:  371.200 us/op
                 swap·p0.9999: 534.565 us/op
                 swap·p1.00:   572.416 us/op

Iteration  11: 204.299 ±(99.9%) 0.170 us/op
                 swap·p0.00:   201.216 us/op
                 swap·p0.50:   201.728 us/op
                 swap·p0.90:   208.128 us/op
                 swap·p0.95:   211.712 us/op
                 swap·p0.99:   223.744 us/op
                 swap·p0.999:  368.692 us/op
                 swap·p0.9999: 486.029 us/op
                 swap·p1.00:   610.304 us/op

Iteration  12: 204.482 ±(99.9%) 0.190 us/op
                 swap·p0.00:   201.216 us/op
                 swap·p0.50:   201.728 us/op
                 swap·p0.90:   208.384 us/op
                 swap·p0.95:   211.968 us/op
                 swap·p0.99:   225.792 us/op
                 swap·p0.999:  380.416 us/op
                 swap·p0.9999: 600.541 us/op
                 swap·p1.00:   773.120 us/op

Iteration  13: 204.435 ±(99.9%) 0.171 us/op
                 swap·p0.00:   201.216 us/op
                 swap·p0.50:   201.728 us/op
                 swap·p0.90:   208.128 us/op
                 swap·p0.95:   212.224 us/op
                 swap·p0.99:   225.280 us/op
                 swap·p0.999:  371.781 us/op
                 swap·p0.9999: 470.744 us/op
                 swap·p1.00:   604.160 us/op

Iteration  14: 204.527 ±(99.9%) 0.170 us/op
                 swap·p0.00:   201.216 us/op
                 swap·p0.50:   201.728 us/op
                 swap·p0.90:   208.384 us/op
                 swap·p0.95:   212.736 us/op
                 swap·p0.99:   227.584 us/op
                 swap·p0.999:  375.808 us/op
                 swap·p0.9999: 440.320 us/op
                 swap·p1.00:   483.840 us/op

Iteration  15: 204.229 ±(99.9%) 0.162 us/op
                 swap·p0.00:   201.216 us/op
                 swap·p0.50:   201.728 us/op
                 swap·p0.90:   207.616 us/op
                 swap·p0.95:   211.712 us/op
                 swap·p0.99:   223.744 us/op
                 swap·p0.999:  366.080 us/op
                 swap·p0.9999: 459.862 us/op
                 swap·p1.00:   580.608 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  N = 733340
  mean =    204.334 ±(99.9%) 0.043 us/op

  Histogram, us/op:
    [200.000, 250.000) = 729351 
    [250.000, 300.000) = 989 
    [300.000, 350.000) = 1578 
    [350.000, 400.000) = 1111 
    [400.000, 450.000) = 195 
    [450.000, 500.000) = 70 
    [500.000, 550.000) = 21 
    [550.000, 600.000) = 13 
    [600.000, 650.000) = 7 
    [650.000, 700.000) = 0 
    [700.000, 750.000) = 4 

  Percentiles, us/op:
      p(0.0000) =    201.216 us/op
     p(50.0000) =    201.728 us/op
     p(90.0000) =    207.872 us/op
     p(95.0000) =    211.712 us/op
     p(99.0000) =    225.024 us/op
     p(99.9000) =    368.640 us/op
     p(99.9900) =    471.551 us/op
     p(99.9990) =    630.783 us/op
     p(99.9999) =    773.120 us/op
    p(100.0000) =    773.120 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 77.53% complete, ETA 01:50:32
# Fork: 1 of 1
# Warmup Iteration   1: 183.721 ±(99.9%) 0.404 us/op
# Warmup Iteration   2: 183.453 ±(99.9%) 0.214 us/op
# Warmup Iteration   3: 184.845 ±(99.9%) 0.247 us/op
# Warmup Iteration   4: 184.276 ±(99.9%) 0.304 us/op
# Warmup Iteration   5: 183.417 ±(99.9%) 0.214 us/op
Iteration   1: 183.433 ±(99.9%) 0.214 us/op
                 write·p0.00:   172.032 us/op
                 write·p0.50:   181.504 us/op
                 write·p0.90:   190.976 us/op
                 write·p0.95:   197.376 us/op
                 write·p0.99:   215.552 us/op
                 write·p0.999:  399.945 us/op
                 write·p0.9999: 526.474 us/op
                 write·p1.00:   687.104 us/op

Iteration   2: 181.433 ±(99.9%) 0.198 us/op
                 write·p0.00:   171.776 us/op
                 write·p0.50:   178.944 us/op
                 write·p0.90:   187.904 us/op
                 write·p0.95:   194.816 us/op
                 write·p0.99:   211.456 us/op
                 write·p0.999:  391.651 us/op
                 write·p0.9999: 497.384 us/op
                 write·p1.00:   653.312 us/op

Iteration   3: 182.937 ±(99.9%) 0.202 us/op
                 write·p0.00:   172.288 us/op
                 write·p0.50:   180.480 us/op
                 write·p0.90:   190.464 us/op
                 write·p0.95:   197.120 us/op
                 write·p0.99:   213.760 us/op
                 write·p0.999:  389.337 us/op
                 write·p0.9999: 479.362 us/op
                 write·p1.00:   674.816 us/op

Iteration   4: 182.047 ±(99.9%) 0.205 us/op
                 write·p0.00:   172.032 us/op
                 write·p0.50:   179.456 us/op
                 write·p0.90:   189.440 us/op
                 write·p0.95:   196.352 us/op
                 write·p0.99:   212.992 us/op
                 write·p0.999:  396.881 us/op
                 write·p0.9999: 483.987 us/op
                 write·p1.00:   565.248 us/op

Iteration   5: 181.295 ±(99.9%) 0.206 us/op
                 write·p0.00:   171.776 us/op
                 write·p0.50:   178.432 us/op
                 write·p0.90:   188.160 us/op
                 write·p0.95:   197.120 us/op
                 write·p0.99:   214.016 us/op
                 write·p0.999:  390.110 us/op
                 write·p0.9999: 490.659 us/op
                 write·p1.00:   602.112 us/op

Iteration   6: 183.213 ±(99.9%) 0.218 us/op
                 write·p0.00:   172.288 us/op
                 write·p0.50:   180.224 us/op
                 write·p0.90:   190.976 us/op
                 write·p0.95:   199.168 us/op
                 write·p0.99:   218.880 us/op
                 write·p0.999:  400.643 us/op
                 write·p0.9999: 492.511 us/op
                 write·p1.00:   540.672 us/op

Iteration   7: 183.216 ±(99.9%) 0.211 us/op
                 write·p0.00:   172.544 us/op
                 write·p0.50:   180.992 us/op
                 write·p0.90:   190.976 us/op
                 write·p0.95:   198.400 us/op
                 write·p0.99:   215.040 us/op
                 write·p0.999:  390.404 us/op
                 write·p0.9999: 519.540 us/op
                 write·p1.00:   663.552 us/op

Iteration   8: 182.517 ±(99.9%) 0.208 us/op
                 write·p0.00:   172.288 us/op
                 write·p0.50:   179.712 us/op
                 write·p0.90:   189.952 us/op
                 write·p0.95:   197.376 us/op
                 write·p0.99:   212.736 us/op
                 write·p0.999:  394.752 us/op
                 write·p0.9999: 491.464 us/op
                 write·p1.00:   656.384 us/op

Iteration   9: 184.345 ±(99.9%) 0.222 us/op
                 write·p0.00:   172.544 us/op
                 write·p0.50:   182.016 us/op
                 write·p0.90:   192.000 us/op
                 write·p0.95:   200.704 us/op
                 write·p0.99:   224.768 us/op
                 write·p0.999:  393.216 us/op
                 write·p0.9999: 536.495 us/op
                 write·p1.00:   634.880 us/op

Iteration  10: 183.237 ±(99.9%) 0.220 us/op
                 write·p0.00:   171.776 us/op
                 write·p0.50:   180.736 us/op
                 write·p0.90:   191.232 us/op
                 write·p0.95:   198.656 us/op
                 write·p0.99:   229.888 us/op
                 write·p0.999:  392.967 us/op
                 write·p0.9999: 514.488 us/op
                 write·p1.00:   603.136 us/op

Iteration  11: 182.964 ±(99.9%) 0.223 us/op
                 write·p0.00:   171.776 us/op
                 write·p0.50:   179.712 us/op
                 write·p0.90:   189.952 us/op
                 write·p0.95:   198.144 us/op
                 write·p0.99:   229.888 us/op
                 write·p0.999:  394.463 us/op
                 write·p0.9999: 521.039 us/op
                 write·p1.00:   681.984 us/op

Iteration  12: 183.316 ±(99.9%) 0.220 us/op
                 write·p0.00:   171.776 us/op
                 write·p0.50:   180.736 us/op
                 write·p0.90:   191.488 us/op
                 write·p0.95:   198.144 us/op
                 write·p0.99:   228.198 us/op
                 write·p0.999:  398.418 us/op
                 write·p0.9999: 486.338 us/op
                 write·p1.00:   538.624 us/op

Iteration  13: 182.853 ±(99.9%) 0.222 us/op
                 write·p0.00:   171.520 us/op
                 write·p0.50:   179.456 us/op
                 write·p0.90:   190.720 us/op
                 write·p0.95:   198.656 us/op
                 write·p0.99:   230.400 us/op
                 write·p0.999:  401.613 us/op
                 write·p0.9999: 501.259 us/op
                 write·p1.00:   544.768 us/op

Iteration  14: 182.905 ±(99.9%) 0.218 us/op
                 write·p0.00:   171.520 us/op
                 write·p0.50:   179.456 us/op
                 write·p0.90:   190.208 us/op
                 write·p0.95:   198.656 us/op
                 write·p0.99:   229.632 us/op
                 write·p0.999:  396.288 us/op
                 write·p0.9999: 484.866 us/op
                 write·p1.00:   572.416 us/op

Iteration  15: 182.854 ±(99.9%) 0.220 us/op
                 write·p0.00:   172.032 us/op
                 write·p0.50:   179.456 us/op
                 write·p0.90:   190.464 us/op
                 write·p0.95:   198.912 us/op
                 write·p0.99:   232.453 us/op
                 write·p0.999:  396.494 us/op
                 write·p0.9999: 479.785 us/op
                 write·p1.00:   694.272 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  N = 819061
  mean =    182.834 ±(99.9%) 0.055 us/op

  Histogram, us/op:
    [100.000, 150.000) = 0 
    [150.000, 200.000) = 785298 
    [200.000, 250.000) = 29396 
    [250.000, 300.000) = 1240 
    [300.000, 350.000) = 355 
    [350.000, 400.000) = 2095 
    [400.000, 450.000) = 472 
    [450.000, 500.000) = 131 
    [500.000, 550.000) = 45 
    [550.000, 600.000) = 14 
    [600.000, 650.000) = 7 

  Percentiles, us/op:
      p(0.0000) =    171.520 us/op
     p(50.0000) =    179.968 us/op
     p(90.0000) =    190.464 us/op
     p(95.0000) =    197.888 us/op
     p(99.0000) =    220.672 us/op
     p(99.9000) =    394.752 us/op
     p(99.9900) =    494.592 us/op
     p(99.9990) =    649.798 us/op
     p(99.9999) =    694.272 us/op
    p(100.0000) =    694.272 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 78.26% complete, ETA 01:46:58
# Fork: 1 of 1
# Warmup Iteration   1: 1168346.681 ±(99.9%) 22801.165 us/op
# Warmup Iteration   2: 1150870.414 ±(99.9%) 2936.773 us/op
# Warmup Iteration   3: 1152268.516 ±(99.9%) 8470.949 us/op
# Warmup Iteration   4: 1150404.380 ±(99.9%) 3107.989 us/op
# Warmup Iteration   5: 1150870.414 ±(99.9%) 3851.542 us/op
Iteration   1: 1150637.397 ±(99.9%) 5286.192 us/op
                 sumBigDecimals·p0.00:   1145044.992 us/op
                 sumBigDecimals·p0.50:   1151336.448 us/op
                 sumBigDecimals·p0.90:   1155530.752 us/op
                 sumBigDecimals·p0.95:   1155530.752 us/op
                 sumBigDecimals·p0.99:   1155530.752 us/op
                 sumBigDecimals·p0.999:  1155530.752 us/op
                 sumBigDecimals·p0.9999: 1155530.752 us/op
                 sumBigDecimals·p1.00:   1155530.752 us/op

Iteration   2: 1155763.769 ±(99.9%) 2754.938 us/op
                 sumBigDecimals·p0.00:   1153433.600 us/op
                 sumBigDecimals·p0.50:   1155530.752 us/op
                 sumBigDecimals·p0.90:   1157627.904 us/op
                 sumBigDecimals·p0.95:   1157627.904 us/op
                 sumBigDecimals·p0.99:   1157627.904 us/op
                 sumBigDecimals·p0.999:  1157627.904 us/op
                 sumBigDecimals·p0.9999: 1157627.904 us/op
                 sumBigDecimals·p1.00:   1157627.904 us/op

Iteration   3: 1148074.212 ±(99.9%) 3983.633 us/op
                 sumBigDecimals·p0.00:   1145044.992 us/op
                 sumBigDecimals·p0.50:   1147142.144 us/op
                 sumBigDecimals·p0.90:   1151336.448 us/op
                 sumBigDecimals·p0.95:   1151336.448 us/op
                 sumBigDecimals·p0.99:   1151336.448 us/op
                 sumBigDecimals·p0.999:  1151336.448 us/op
                 sumBigDecimals·p0.9999: 1151336.448 us/op
                 sumBigDecimals·p1.00:   1151336.448 us/op

Iteration   4: 1149705.330 ±(99.9%) 4587.386 us/op
                 sumBigDecimals·p0.00:   1147142.144 us/op
                 sumBigDecimals·p0.50:   1149239.296 us/op
                 sumBigDecimals·p0.90:   1155530.752 us/op
                 sumBigDecimals·p0.95:   1155530.752 us/op
                 sumBigDecimals·p0.99:   1155530.752 us/op
                 sumBigDecimals·p0.999:  1155530.752 us/op
                 sumBigDecimals·p0.9999: 1155530.752 us/op
                 sumBigDecimals·p1.00:   1155530.752 us/op

Iteration   5: 1150171.364 ±(99.9%) 3107.989 us/op
                 sumBigDecimals·p0.00:   1147142.144 us/op
                 sumBigDecimals·p0.50:   1149239.296 us/op
                 sumBigDecimals·p0.90:   1153433.600 us/op
                 sumBigDecimals·p0.95:   1153433.600 us/op
                 sumBigDecimals·p0.99:   1153433.600 us/op
                 sumBigDecimals·p0.999:  1153433.600 us/op
                 sumBigDecimals·p0.9999: 1153433.600 us/op
                 sumBigDecimals·p1.00:   1153433.600 us/op

Iteration   6: 1155530.752 ±(99.9%) 5572.136 us/op
                 sumBigDecimals·p0.00:   1151336.448 us/op
                 sumBigDecimals·p0.50:   1155530.752 us/op
                 sumBigDecimals·p0.90:   1159725.056 us/op
                 sumBigDecimals·p0.95:   1159725.056 us/op
                 sumBigDecimals·p0.99:   1159725.056 us/op
                 sumBigDecimals·p0.999:  1159725.056 us/op
                 sumBigDecimals·p0.9999: 1159725.056 us/op
                 sumBigDecimals·p1.00:   1159725.056 us/op

Iteration   7: 1150404.380 ±(99.9%) 4698.837 us/op
                 sumBigDecimals·p0.00:   1147142.144 us/op
                 sumBigDecimals·p0.50:   1151336.448 us/op
                 sumBigDecimals·p0.90:   1153433.600 us/op
                 sumBigDecimals·p0.95:   1153433.600 us/op
                 sumBigDecimals·p0.99:   1153433.600 us/op
                 sumBigDecimals·p0.999:  1153433.600 us/op
                 sumBigDecimals·p0.9999: 1153433.600 us/op
                 sumBigDecimals·p1.00:   1153433.600 us/op

Iteration   8: 1154831.701 ±(99.9%) 10862.092 us/op
                 sumBigDecimals·p0.00:   1147142.144 us/op
                 sumBigDecimals·p0.50:   1153433.600 us/op
                 sumBigDecimals·p0.90:   1170210.816 us/op
                 sumBigDecimals·p0.95:   1170210.816 us/op
                 sumBigDecimals·p0.99:   1170210.816 us/op
                 sumBigDecimals·p0.999:  1170210.816 us/op
                 sumBigDecimals·p0.9999: 1170210.816 us/op
                 sumBigDecimals·p1.00:   1170210.816 us/op

Iteration   9: 1150404.380 ±(99.9%) 5018.360 us/op
                 sumBigDecimals·p0.00:   1147142.144 us/op
                 sumBigDecimals·p0.50:   1149239.296 us/op
                 sumBigDecimals·p0.90:   1157627.904 us/op
                 sumBigDecimals·p0.95:   1157627.904 us/op
                 sumBigDecimals·p0.99:   1157627.904 us/op
                 sumBigDecimals·p0.999:  1157627.904 us/op
                 sumBigDecimals·p0.9999: 1157627.904 us/op
                 sumBigDecimals·p1.00:   1157627.904 us/op

Iteration  10: 1149472.313 ±(99.9%) 4473.160 us/op
                 sumBigDecimals·p0.00:   1145044.992 us/op
                 sumBigDecimals·p0.50:   1149239.296 us/op
                 sumBigDecimals·p0.90:   1153433.600 us/op
                 sumBigDecimals·p0.95:   1153433.600 us/op
                 sumBigDecimals·p0.99:   1153433.600 us/op
                 sumBigDecimals·p0.999:  1153433.600 us/op
                 sumBigDecimals·p0.9999: 1153433.600 us/op
                 sumBigDecimals·p1.00:   1153433.600 us/op

Iteration  11: 1149938.347 ±(99.9%) 5572.136 us/op
                 sumBigDecimals·p0.00:   1145044.992 us/op
                 sumBigDecimals·p0.50:   1149239.296 us/op
                 sumBigDecimals·p0.90:   1155530.752 us/op
                 sumBigDecimals·p0.95:   1155530.752 us/op
                 sumBigDecimals·p0.99:   1155530.752 us/op
                 sumBigDecimals·p0.999:  1155530.752 us/op
                 sumBigDecimals·p0.9999: 1155530.752 us/op
                 sumBigDecimals·p1.00:   1155530.752 us/op

Iteration  12: 1149938.347 ±(99.9%) 3940.095 us/op
                 sumBigDecimals·p0.00:   1147142.144 us/op
                 sumBigDecimals·p0.50:   1149239.296 us/op
                 sumBigDecimals·p0.90:   1153433.600 us/op
                 sumBigDecimals·p0.95:   1153433.600 us/op
                 sumBigDecimals·p0.99:   1153433.600 us/op
                 sumBigDecimals·p0.999:  1153433.600 us/op
                 sumBigDecimals·p0.9999: 1153433.600 us/op
                 sumBigDecimals·p1.00:   1153433.600 us/op

Iteration  13: 1149006.279 ±(99.9%) 3714.757 us/op
                 sumBigDecimals·p0.00:   1145044.992 us/op
                 sumBigDecimals·p0.50:   1149239.296 us/op
                 sumBigDecimals·p0.90:   1151336.448 us/op
                 sumBigDecimals·p0.95:   1151336.448 us/op
                 sumBigDecimals·p0.99:   1151336.448 us/op
                 sumBigDecimals·p0.999:  1151336.448 us/op
                 sumBigDecimals·p0.9999: 1151336.448 us/op
                 sumBigDecimals·p1.00:   1151336.448 us/op

Iteration  14: 1149938.347 ±(99.9%) 3051.984 us/op
                 sumBigDecimals·p0.00:   1147142.144 us/op
                 sumBigDecimals·p0.50:   1151336.448 us/op
                 sumBigDecimals·p0.90:   1151336.448 us/op
                 sumBigDecimals·p0.95:   1151336.448 us/op
                 sumBigDecimals·p0.99:   1151336.448 us/op
                 sumBigDecimals·p0.999:  1151336.448 us/op
                 sumBigDecimals·p0.9999: 1151336.448 us/op
                 sumBigDecimals·p1.00:   1151336.448 us/op

Iteration  15: 1149239.296 ±(99.9%) 3524.128 us/op
                 sumBigDecimals·p0.00:   1145044.992 us/op
                 sumBigDecimals·p0.50:   1149239.296 us/op
                 sumBigDecimals·p0.90:   1151336.448 us/op
                 sumBigDecimals·p0.95:   1151336.448 us/op
                 sumBigDecimals·p0.99:   1151336.448 us/op
                 sumBigDecimals·p0.999:  1151336.448 us/op
                 sumBigDecimals·p0.9999: 1151336.448 us/op
                 sumBigDecimals·p1.00:   1151336.448 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  N = 135
  mean = 1150870.414 ±(99.9%) 1066.587 us/op

  Histogram, us/op:
    [1140000.000, 1142500.000) = 0 
    [1142500.000, 1145000.000) = 0 
    [1145000.000, 1147500.000) = 31 
    [1147500.000, 1150000.000) = 33 
    [1150000.000, 1152500.000) = 36 
    [1152500.000, 1155000.000) = 16 
    [1155000.000, 1157500.000) = 9 
    [1157500.000, 1160000.000) = 9 
    [1160000.000, 1162500.000) = 0 
    [1162500.000, 1165000.000) = 0 
    [1165000.000, 1167500.000) = 0 
    [1167500.000, 1170000.000) = 0 
    [1170000.000, 1172500.000) = 1 
    [1172500.000, 1175000.000) = 0 
    [1175000.000, 1177500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1145044.992 us/op
     p(50.0000) = 1151336.448 us/op
     p(90.0000) = 1155530.752 us/op
     p(95.0000) = 1157627.904 us/op
     p(99.0000) = 1166435.942 us/op
     p(99.9000) = 1170210.816 us/op
     p(99.9900) = 1170210.816 us/op
     p(99.9990) = 1170210.816 us/op
     p(99.9999) = 1170210.816 us/op
    p(100.0000) = 1170210.816 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 78.98% complete, ETA 01:43:27
# Fork: 1 of 1
# Warmup Iteration   1: 940000.721 ±(99.9%) 30969.865 us/op
# Warmup Iteration   2: 928657.036 ±(99.9%) 7458.859 us/op
# Warmup Iteration   3: 931802.764 ±(99.9%) 9223.716 us/op
# Warmup Iteration   4: 934376.541 ±(99.9%) 10324.934 us/op
# Warmup Iteration   5: 960018.991 ±(99.9%) 9495.390 us/op
Iteration   1: 996147.200 ±(99.9%) 10151.268 us/op
                 countUppercase·p0.00:   989855.744 us/op
                 countUppercase·p0.50:   993001.472 us/op
                 countUppercase·p0.90:   1009149.542 us/op
                 countUppercase·p0.95:   1009778.688 us/op
                 countUppercase·p0.99:   1009778.688 us/op
                 countUppercase·p0.999:  1009778.688 us/op
                 countUppercase·p0.9999: 1009778.688 us/op
                 countUppercase·p1.00:   1009778.688 us/op

Iteration   2: 944290.351 ±(99.9%) 8289.245 us/op
                 countUppercase·p0.00:   939524.096 us/op
                 countUppercase·p0.50:   941621.248 us/op
                 countUppercase·p0.90:   956930.458 us/op
                 countUppercase·p0.95:   958398.464 us/op
                 countUppercase·p0.99:   958398.464 us/op
                 countUppercase·p0.999:  958398.464 us/op
                 countUppercase·p0.9999: 958398.464 us/op
                 countUppercase·p1.00:   958398.464 us/op

Iteration   3: 976128.931 ±(99.9%) 9585.567 us/op
                 countUppercase·p0.00:   970981.376 us/op
                 countUppercase·p0.50:   973078.528 us/op
                 countUppercase·p0.90:   991952.896 us/op
                 countUppercase·p0.95:   994050.048 us/op
                 countUppercase·p0.99:   994050.048 us/op
                 countUppercase·p0.999:  994050.048 us/op
                 countUppercase·p0.9999: 994050.048 us/op
                 countUppercase·p1.00:   994050.048 us/op

Iteration   4: 993573.423 ±(99.9%) 10703.155 us/op
                 countUppercase·p0.00:   986710.016 us/op
                 countUppercase·p0.50:   991952.896 us/op
                 countUppercase·p0.90:   1007471.821 us/op
                 countUppercase·p0.95:   1007681.536 us/op
                 countUppercase·p0.99:   1007681.536 us/op
                 countUppercase·p0.999:  1007681.536 us/op
                 countUppercase·p0.9999: 1007681.536 us/op
                 countUppercase·p1.00:   1007681.536 us/op

Iteration   5: 976319.581 ±(99.9%) 10665.578 us/op
                 countUppercase·p0.00:   969932.800 us/op
                 countUppercase·p0.50:   973078.528 us/op
                 countUppercase·p0.90:   993420.902 us/op
                 countUppercase·p0.95:   996147.200 us/op
                 countUppercase·p0.99:   996147.200 us/op
                 countUppercase·p0.999:  996147.200 us/op
                 countUppercase·p0.9999: 996147.200 us/op
                 countUppercase·p1.00:   996147.200 us/op

Iteration   6: 990046.394 ±(99.9%) 12853.845 us/op
                 countUppercase·p0.00:   983564.288 us/op
                 countUppercase·p0.50:   984612.864 us/op
                 countUppercase·p0.90:   1007471.821 us/op
                 countUppercase·p0.95:   1007681.536 us/op
                 countUppercase·p0.99:   1007681.536 us/op
                 countUppercase·p0.999:  1007681.536 us/op
                 countUppercase·p0.9999: 1007681.536 us/op
                 countUppercase·p1.00:   1007681.536 us/op

Iteration   7: 997291.101 ±(99.9%) 13203.094 us/op
                 countUppercase·p0.00:   990904.320 us/op
                 countUppercase·p0.50:   993001.472 us/op
                 countUppercase·p0.90:   1018377.011 us/op
                 countUppercase·p0.95:   1021313.024 us/op
                 countUppercase·p0.99:   1021313.024 us/op
                 countUppercase·p0.999:  1021313.024 us/op
                 countUppercase·p0.9999: 1021313.024 us/op
                 countUppercase·p1.00:   1021313.024 us/op

Iteration   8: 972506.577 ±(99.9%) 15103.672 us/op
                 countUppercase·p0.00:   961544.192 us/op
                 countUppercase·p0.50:   968884.224 us/op
                 countUppercase·p0.90:   997195.776 us/op
                 countUppercase·p0.95:   1002438.656 us/op
                 countUppercase·p0.99:   1002438.656 us/op
                 countUppercase·p0.999:  1002438.656 us/op
                 countUppercase·p0.9999: 1002438.656 us/op
                 countUppercase·p1.00:   1002438.656 us/op

Iteration   9: 970981.376 ±(99.9%) 14238.387 us/op
                 countUppercase·p0.00:   963641.344 us/op
                 countUppercase·p0.50:   967835.648 us/op
                 countUppercase·p0.90:   994888.909 us/op
                 countUppercase·p0.95:   999292.928 us/op
                 countUppercase·p0.99:   999292.928 us/op
                 countUppercase·p0.999:  999292.928 us/op
                 countUppercase·p0.9999: 999292.928 us/op
                 countUppercase·p1.00:   999292.928 us/op

Iteration  10: 987567.942 ±(99.9%) 9938.094 us/op
                 countUppercase·p0.00:   982515.712 us/op
                 countUppercase·p0.50:   984612.864 us/op
                 countUppercase·p0.90:   1003277.517 us/op
                 countUppercase·p0.95:   1005584.384 us/op
                 countUppercase·p0.99:   1005584.384 us/op
                 countUppercase·p0.999:  1005584.384 us/op
                 countUppercase·p0.9999: 1005584.384 us/op
                 countUppercase·p1.00:   1005584.384 us/op

Iteration  11: 976891.532 ±(99.9%) 13152.315 us/op
                 countUppercase·p0.00:   970981.376 us/op
                 countUppercase·p0.50:   973078.528 us/op
                 countUppercase·p0.90:   998244.352 us/op
                 countUppercase·p0.95:   1001390.080 us/op
                 countUppercase·p0.99:   1001390.080 us/op
                 countUppercase·p0.999:  1001390.080 us/op
                 countUppercase·p0.9999: 1001390.080 us/op
                 countUppercase·p1.00:   1001390.080 us/op

Iteration  12: 995670.575 ±(99.9%) 10241.270 us/op
                 countUppercase·p0.00:   988807.168 us/op
                 countUppercase·p0.50:   991952.896 us/op
                 countUppercase·p0.90:   1008939.827 us/op
                 countUppercase·p0.95:   1009778.688 us/op
                 countUppercase·p0.99:   1009778.688 us/op
                 countUppercase·p0.999:  1009778.688 us/op
                 countUppercase·p0.9999: 1009778.688 us/op
                 countUppercase·p1.00:   1009778.688 us/op

Iteration  13: 985566.115 ±(99.9%) 15160.526 us/op
                 countUppercase·p0.00:   976224.256 us/op
                 countUppercase·p0.50:   981467.136 us/op
                 countUppercase·p0.90:   1007471.821 us/op
                 countUppercase·p0.95:   1009778.688 us/op
                 countUppercase·p0.99:   1009778.688 us/op
                 countUppercase·p0.999:  1009778.688 us/op
                 countUppercase·p0.9999: 1009778.688 us/op
                 countUppercase·p1.00:   1009778.688 us/op

Iteration  14: 980513.885 ±(99.9%) 11500.486 us/op
                 countUppercase·p0.00:   972029.952 us/op
                 countUppercase·p0.50:   977272.832 us/op
                 countUppercase·p0.90:   995727.770 us/op
                 countUppercase·p0.95:   996147.200 us/op
                 countUppercase·p0.99:   996147.200 us/op
                 countUppercase·p0.999:  996147.200 us/op
                 countUppercase·p0.9999: 996147.200 us/op
                 countUppercase·p1.00:   996147.200 us/op

Iteration  15: 977368.157 ±(99.9%) 9951.552 us/op
                 countUppercase·p0.00:   970981.376 us/op
                 countUppercase·p0.50:   975175.680 us/op
                 countUppercase·p0.90:   992162.611 us/op
                 countUppercase·p0.95:   993001.472 us/op
                 countUppercase·p0.99:   993001.472 us/op
                 countUppercase·p0.999:  993001.472 us/op
                 countUppercase·p0.9999: 993001.472 us/op
                 countUppercase·p1.00:   993001.472 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 165
  mean = 981390.876 ±(99.9%) 4056.892 us/op

  Histogram, us/op:
    [ 930000.000,  940000.000) = 1 
    [ 940000.000,  950000.000) = 8 
    [ 950000.000,  960000.000) = 2 
    [ 960000.000,  970000.000) = 15 
    [ 970000.000,  980000.000) = 51 
    [ 980000.000,  990000.000) = 36 
    [ 990000.000, 1000000.000) = 34 
    [1000000.000, 1010000.000) = 17 
    [1010000.000, 1020000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 939524.096 us/op
     p(50.0000) = 982515.712 us/op
     p(90.0000) = 1001809.510 us/op
     p(95.0000) = 1006632.960 us/op
     p(99.0000) = 1013700.362 us/op
     p(99.9000) = 1021313.024 us/op
     p(99.9900) = 1021313.024 us/op
     p(99.9990) = 1021313.024 us/op
     p(99.9999) = 1021313.024 us/op
    p(100.0000) = 1021313.024 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 79.71% complete, ETA 01:39:56
# Fork: 1 of 1
# Warmup Iteration   1: 19126026.240 us/op
# Warmup Iteration   2: 18857590.784 us/op
# Warmup Iteration   3: 18857590.784 us/op
# Warmup Iteration   4: 19193135.104 us/op
# Warmup Iteration   5: 19931332.608 us/op
Iteration   1: 20266876.928 us/op
                 countUppercase·p0.00:   20266876.928 us/op
                 countUppercase·p0.50:   20266876.928 us/op
                 countUppercase·p0.90:   20266876.928 us/op
                 countUppercase·p0.95:   20266876.928 us/op
                 countUppercase·p0.99:   20266876.928 us/op
                 countUppercase·p0.999:  20266876.928 us/op
                 countUppercase·p0.9999: 20266876.928 us/op
                 countUppercase·p1.00:   20266876.928 us/op

Iteration   2: 19964887.040 us/op
                 countUppercase·p0.00:   19964887.040 us/op
                 countUppercase·p0.50:   19964887.040 us/op
                 countUppercase·p0.90:   19964887.040 us/op
                 countUppercase·p0.95:   19964887.040 us/op
                 countUppercase·p0.99:   19964887.040 us/op
                 countUppercase·p0.999:  19964887.040 us/op
                 countUppercase·p0.9999: 19964887.040 us/op
                 countUppercase·p1.00:   19964887.040 us/op

Iteration   3: 19797114.880 us/op
                 countUppercase·p0.00:   19797114.880 us/op
                 countUppercase·p0.50:   19797114.880 us/op
                 countUppercase·p0.90:   19797114.880 us/op
                 countUppercase·p0.95:   19797114.880 us/op
                 countUppercase·p0.99:   19797114.880 us/op
                 countUppercase·p0.999:  19797114.880 us/op
                 countUppercase·p0.9999: 19797114.880 us/op
                 countUppercase·p1.00:   19797114.880 us/op

Iteration   4: 20166213.632 us/op
                 countUppercase·p0.00:   20166213.632 us/op
                 countUppercase·p0.50:   20166213.632 us/op
                 countUppercase·p0.90:   20166213.632 us/op
                 countUppercase·p0.95:   20166213.632 us/op
                 countUppercase·p0.99:   20166213.632 us/op
                 countUppercase·p0.999:  20166213.632 us/op
                 countUppercase·p0.9999: 20166213.632 us/op
                 countUppercase·p1.00:   20166213.632 us/op

Iteration   5: 20031995.904 us/op
                 countUppercase·p0.00:   20031995.904 us/op
                 countUppercase·p0.50:   20031995.904 us/op
                 countUppercase·p0.90:   20031995.904 us/op
                 countUppercase·p0.95:   20031995.904 us/op
                 countUppercase·p0.99:   20031995.904 us/op
                 countUppercase·p0.999:  20031995.904 us/op
                 countUppercase·p0.9999: 20031995.904 us/op
                 countUppercase·p1.00:   20031995.904 us/op

Iteration   6: 20233322.496 us/op
                 countUppercase·p0.00:   20233322.496 us/op
                 countUppercase·p0.50:   20233322.496 us/op
                 countUppercase·p0.90:   20233322.496 us/op
                 countUppercase·p0.95:   20233322.496 us/op
                 countUppercase·p0.99:   20233322.496 us/op
                 countUppercase·p0.999:  20233322.496 us/op
                 countUppercase·p0.9999: 20233322.496 us/op
                 countUppercase·p1.00:   20233322.496 us/op

Iteration   7: 20266876.928 us/op
                 countUppercase·p0.00:   20266876.928 us/op
                 countUppercase·p0.50:   20266876.928 us/op
                 countUppercase·p0.90:   20266876.928 us/op
                 countUppercase·p0.95:   20266876.928 us/op
                 countUppercase·p0.99:   20266876.928 us/op
                 countUppercase·p0.999:  20266876.928 us/op
                 countUppercase·p0.9999: 20266876.928 us/op
                 countUppercase·p1.00:   20266876.928 us/op

Iteration   8: 19864223.744 us/op
                 countUppercase·p0.00:   19864223.744 us/op
                 countUppercase·p0.50:   19864223.744 us/op
                 countUppercase·p0.90:   19864223.744 us/op
                 countUppercase·p0.95:   19864223.744 us/op
                 countUppercase·p0.99:   19864223.744 us/op
                 countUppercase·p0.999:  19864223.744 us/op
                 countUppercase·p0.9999: 19864223.744 us/op
                 countUppercase·p1.00:   19864223.744 us/op

Iteration   9: 20065550.336 us/op
                 countUppercase·p0.00:   20065550.336 us/op
                 countUppercase·p0.50:   20065550.336 us/op
                 countUppercase·p0.90:   20065550.336 us/op
                 countUppercase·p0.95:   20065550.336 us/op
                 countUppercase·p0.99:   20065550.336 us/op
                 countUppercase·p0.999:  20065550.336 us/op
                 countUppercase·p0.9999: 20065550.336 us/op
                 countUppercase·p1.00:   20065550.336 us/op

Iteration  10: 19998441.472 us/op
                 countUppercase·p0.00:   19998441.472 us/op
                 countUppercase·p0.50:   19998441.472 us/op
                 countUppercase·p0.90:   19998441.472 us/op
                 countUppercase·p0.95:   19998441.472 us/op
                 countUppercase·p0.99:   19998441.472 us/op
                 countUppercase·p0.999:  19998441.472 us/op
                 countUppercase·p0.9999: 19998441.472 us/op
                 countUppercase·p1.00:   19998441.472 us/op

Iteration  11: 19931332.608 us/op
                 countUppercase·p0.00:   19931332.608 us/op
                 countUppercase·p0.50:   19931332.608 us/op
                 countUppercase·p0.90:   19931332.608 us/op
                 countUppercase·p0.95:   19931332.608 us/op
                 countUppercase·p0.99:   19931332.608 us/op
                 countUppercase·p0.999:  19931332.608 us/op
                 countUppercase·p0.9999: 19931332.608 us/op
                 countUppercase·p1.00:   19931332.608 us/op

Iteration  12: 19763560.448 us/op
                 countUppercase·p0.00:   19763560.448 us/op
                 countUppercase·p0.50:   19763560.448 us/op
                 countUppercase·p0.90:   19763560.448 us/op
                 countUppercase·p0.95:   19763560.448 us/op
                 countUppercase·p0.99:   19763560.448 us/op
                 countUppercase·p0.999:  19763560.448 us/op
                 countUppercase·p0.9999: 19763560.448 us/op
                 countUppercase·p1.00:   19763560.448 us/op

Iteration  13: 19662897.152 us/op
                 countUppercase·p0.00:   19662897.152 us/op
                 countUppercase·p0.50:   19662897.152 us/op
                 countUppercase·p0.90:   19662897.152 us/op
                 countUppercase·p0.95:   19662897.152 us/op
                 countUppercase·p0.99:   19662897.152 us/op
                 countUppercase·p0.999:  19662897.152 us/op
                 countUppercase·p0.9999: 19662897.152 us/op
                 countUppercase·p1.00:   19662897.152 us/op

Iteration  14: 19797114.880 us/op
                 countUppercase·p0.00:   19797114.880 us/op
                 countUppercase·p0.50:   19797114.880 us/op
                 countUppercase·p0.90:   19797114.880 us/op
                 countUppercase·p0.95:   19797114.880 us/op
                 countUppercase·p0.99:   19797114.880 us/op
                 countUppercase·p0.999:  19797114.880 us/op
                 countUppercase·p0.9999: 19797114.880 us/op
                 countUppercase·p1.00:   19797114.880 us/op

Iteration  15: 19797114.880 us/op
                 countUppercase·p0.00:   19797114.880 us/op
                 countUppercase·p0.50:   19797114.880 us/op
                 countUppercase·p0.90:   19797114.880 us/op
                 countUppercase·p0.95:   19797114.880 us/op
                 countUppercase·p0.99:   19797114.880 us/op
                 countUppercase·p0.999:  19797114.880 us/op
                 countUppercase·p0.9999: 19797114.880 us/op
                 countUppercase·p1.00:   19797114.880 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 15
  mean = 19973834.889 ±(99.9%) 209371.256 us/op

  Histogram, us/op:
    [19600000.000, 19650000.000) = 0 
    [19650000.000, 19700000.000) = 1 
    [19700000.000, 19750000.000) = 0 
    [19750000.000, 19800000.000) = 4 
    [19800000.000, 19850000.000) = 0 
    [19850000.000, 19900000.000) = 1 
    [19900000.000, 19950000.000) = 1 
    [19950000.000, 20000000.000) = 2 
    [20000000.000, 20050000.000) = 1 
    [20050000.000, 20100000.000) = 1 
    [20100000.000, 20150000.000) = 0 
    [20150000.000, 20200000.000) = 1 
    [20200000.000, 20250000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 19662897.152 us/op
     p(50.0000) = 19964887.040 us/op
     p(90.0000) = 20266876.928 us/op
     p(95.0000) = 20266876.928 us/op
     p(99.0000) = 20266876.928 us/op
     p(99.9000) = 20266876.928 us/op
     p(99.9900) = 20266876.928 us/op
     p(99.9990) = 20266876.928 us/op
     p(99.9999) = 20266876.928 us/op
    p(100.0000) = 20266876.928 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 80.43% complete, ETA 01:37:10
# Fork: 1 of 1
# Warmup Iteration   1: 1.928 ±(99.9%) 0.009 us/op
# Warmup Iteration   2: 1.926 ±(99.9%) 0.009 us/op
# Warmup Iteration   3: 1.933 ±(99.9%) 0.010 us/op
# Warmup Iteration   4: 1.936 ±(99.9%) 0.011 us/op
# Warmup Iteration   5: 1.931 ±(99.9%) 0.009 us/op
Iteration   1: 1.931 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   1.856 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.900 us/op
                 runFibonacci·p0.99:   2.092 us/op
                 runFibonacci·p0.999:  11.845 us/op
                 runFibonacci·p0.9999: 124.125 us/op
                 runFibonacci·p1.00:   338.432 us/op

Iteration   2: 1.930 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   1.856 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.896 us/op
                 runFibonacci·p0.99:   2.084 us/op
                 runFibonacci·p0.999:  11.760 us/op
                 runFibonacci·p0.9999: 123.026 us/op
                 runFibonacci·p1.00:   195.840 us/op

Iteration   3: 1.938 ±(99.9%) 0.011 us/op
                 runFibonacci·p0.00:   1.856 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.892 us/op
                 runFibonacci·p0.95:   1.900 us/op
                 runFibonacci·p0.99:   2.044 us/op
                 runFibonacci·p0.999:  12.565 us/op
                 runFibonacci·p0.9999: 138.156 us/op
                 runFibonacci·p1.00:   247.552 us/op

Iteration   4: 1.931 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   1.856 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.896 us/op
                 runFibonacci·p0.99:   2.048 us/op
                 runFibonacci·p0.999:  12.129 us/op
                 runFibonacci·p0.9999: 111.202 us/op
                 runFibonacci·p1.00:   217.600 us/op

Iteration   5: 1.935 ±(99.9%) 0.014 us/op
                 runFibonacci·p0.00:   1.856 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.896 us/op
                 runFibonacci·p0.99:   2.045 us/op
                 runFibonacci·p0.999:  12.114 us/op
                 runFibonacci·p0.9999: 125.056 us/op
                 runFibonacci·p1.00:   845.824 us/op

Iteration   6: 1.926 ±(99.9%) 0.009 us/op
                 runFibonacci·p0.00:   1.856 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.896 us/op
                 runFibonacci·p0.99:   2.024 us/op
                 runFibonacci·p0.999:  11.441 us/op
                 runFibonacci·p0.9999: 100.502 us/op
                 runFibonacci·p1.00:   234.752 us/op

Iteration   7: 1.928 ±(99.9%) 0.009 us/op
                 runFibonacci·p0.00:   1.856 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.896 us/op
                 runFibonacci·p0.99:   2.072 us/op
                 runFibonacci·p0.999:  11.971 us/op
                 runFibonacci·p0.9999: 102.933 us/op
                 runFibonacci·p1.00:   215.552 us/op

Iteration   8: 1.928 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   1.856 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.892 us/op
                 runFibonacci·p0.95:   1.898 us/op
                 runFibonacci·p0.99:   1.978 us/op
                 runFibonacci·p0.999:  11.696 us/op
                 runFibonacci·p0.9999: 101.183 us/op
                 runFibonacci·p1.00:   359.936 us/op

Iteration   9: 1.930 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   1.856 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.896 us/op
                 runFibonacci·p0.99:   2.020 us/op
                 runFibonacci·p0.999:  11.696 us/op
                 runFibonacci·p0.9999: 77.818 us/op
                 runFibonacci·p1.00:   296.960 us/op

Iteration  10: 1.930 ±(99.9%) 0.009 us/op
                 runFibonacci·p0.00:   1.856 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.898 us/op
                 runFibonacci·p0.99:   2.080 us/op
                 runFibonacci·p0.999:  12.165 us/op
                 runFibonacci·p0.9999: 58.030 us/op
                 runFibonacci·p1.00:   234.240 us/op

Iteration  11: 1.932 ±(99.9%) 0.011 us/op
                 runFibonacci·p0.00:   1.856 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.888 us/op
                 runFibonacci·p0.95:   1.896 us/op
                 runFibonacci·p0.99:   2.068 us/op
                 runFibonacci·p0.999:  12.353 us/op
                 runFibonacci·p0.9999: 122.401 us/op
                 runFibonacci·p1.00:   502.272 us/op

Iteration  12: 1.929 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.896 us/op
                 runFibonacci·p0.99:   2.028 us/op
                 runFibonacci·p0.999:  12.066 us/op
                 runFibonacci·p0.9999: 105.081 us/op
                 runFibonacci·p1.00:   219.136 us/op

Iteration  13: 1.936 ±(99.9%) 0.011 us/op
                 runFibonacci·p0.00:   1.856 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.898 us/op
                 runFibonacci·p0.99:   2.056 us/op
                 runFibonacci·p0.999:  11.899 us/op
                 runFibonacci·p0.9999: 121.840 us/op
                 runFibonacci·p1.00:   218.112 us/op

Iteration  14: 1.935 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   1.856 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.896 us/op
                 runFibonacci·p0.99:   2.028 us/op
                 runFibonacci·p0.999:  12.119 us/op
                 runFibonacci·p0.9999: 111.124 us/op
                 runFibonacci·p1.00:   261.376 us/op

Iteration  15: 1.932 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   1.856 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.890 us/op
                 runFibonacci·p0.95:   1.898 us/op
                 runFibonacci·p0.99:   2.095 us/op
                 runFibonacci·p0.999:  11.767 us/op
                 runFibonacci·p0.9999: 120.480 us/op
                 runFibonacci·p1.00:   294.400 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 4961321
  mean =      1.932 ±(99.9%) 0.003 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 4960631 
    [ 50.000, 100.000) = 154 
    [100.000, 150.000) = 330 
    [150.000, 200.000) = 155 
    [200.000, 250.000) = 40 
    [250.000, 300.000) = 5 
    [300.000, 350.000) = 2 
    [350.000, 400.000) = 2 
    [400.000, 450.000) = 0 
    [450.000, 500.000) = 0 
    [500.000, 550.000) = 1 
    [550.000, 600.000) = 0 
    [600.000, 650.000) = 0 
    [650.000, 700.000) = 0 
    [700.000, 750.000) = 0 
    [750.000, 800.000) = 0 
    [800.000, 850.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      1.856 us/op
     p(50.0000) =      1.880 us/op
     p(90.0000) =      1.890 us/op
     p(95.0000) =      1.898 us/op
     p(99.0000) =      2.052 us/op
     p(99.9000) =     11.968 us/op
     p(99.9900) =    112.384 us/op
     p(99.9990) =    202.793 us/op
     p(99.9999) =    339.264 us/op
    p(100.0000) =    845.824 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 81.16% complete, ETA 01:33:34
# Fork: 1 of 1
# Warmup Iteration   1: 5.108 ±(99.9%) 0.021 us/op
# Warmup Iteration   2: 5.085 ±(99.9%) 0.021 us/op
# Warmup Iteration   3: 5.083 ±(99.9%) 0.018 us/op
# Warmup Iteration   4: 5.085 ±(99.9%) 0.019 us/op
# Warmup Iteration   5: 5.089 ±(99.9%) 0.017 us/op
Iteration   1: 5.096 ±(99.9%) 0.018 us/op
                 runFibonacci·p0.00:   4.824 us/op
                 runFibonacci·p0.50:   4.984 us/op
                 runFibonacci·p0.90:   5.048 us/op
                 runFibonacci·p0.95:   5.072 us/op
                 runFibonacci·p0.99:   5.888 us/op
                 runFibonacci·p0.999:  20.113 us/op
                 runFibonacci·p0.9999: 165.185 us/op
                 runFibonacci·p1.00:   283.648 us/op

Iteration   2: 5.096 ±(99.9%) 0.018 us/op
                 runFibonacci·p0.00:   4.832 us/op
                 runFibonacci·p0.50:   4.976 us/op
                 runFibonacci·p0.90:   5.048 us/op
                 runFibonacci·p0.95:   5.064 us/op
                 runFibonacci·p0.99:   5.856 us/op
                 runFibonacci·p0.999:  20.781 us/op
                 runFibonacci·p0.9999: 164.158 us/op
                 runFibonacci·p1.00:   280.064 us/op

Iteration   3: 5.081 ±(99.9%) 0.017 us/op
                 runFibonacci·p0.00:   4.840 us/op
                 runFibonacci·p0.50:   4.976 us/op
                 runFibonacci·p0.90:   5.032 us/op
                 runFibonacci·p0.95:   5.064 us/op
                 runFibonacci·p0.99:   5.864 us/op
                 runFibonacci·p0.999:  19.175 us/op
                 runFibonacci·p0.9999: 155.505 us/op
                 runFibonacci·p1.00:   263.680 us/op

Iteration   4: 5.102 ±(99.9%) 0.017 us/op
                 runFibonacci·p0.00:   4.824 us/op
                 runFibonacci·p0.50:   4.992 us/op
                 runFibonacci·p0.90:   5.064 us/op
                 runFibonacci·p0.95:   5.080 us/op
                 runFibonacci·p0.99:   5.864 us/op
                 runFibonacci·p0.999:  19.518 us/op
                 runFibonacci·p0.9999: 157.410 us/op
                 runFibonacci·p1.00:   242.432 us/op

Iteration   5: 5.073 ±(99.9%) 0.017 us/op
                 runFibonacci·p0.00:   4.832 us/op
                 runFibonacci·p0.50:   4.968 us/op
                 runFibonacci·p0.90:   5.016 us/op
                 runFibonacci·p0.95:   5.032 us/op
                 runFibonacci·p0.99:   5.824 us/op
                 runFibonacci·p0.999:  19.474 us/op
                 runFibonacci·p0.9999: 165.969 us/op
                 runFibonacci·p1.00:   284.672 us/op

Iteration   6: 5.077 ±(99.9%) 0.017 us/op
                 runFibonacci·p0.00:   4.832 us/op
                 runFibonacci·p0.50:   4.976 us/op
                 runFibonacci·p0.90:   5.024 us/op
                 runFibonacci·p0.95:   5.048 us/op
                 runFibonacci·p0.99:   5.816 us/op
                 runFibonacci·p0.999:  19.453 us/op
                 runFibonacci·p0.9999: 155.525 us/op
                 runFibonacci·p1.00:   294.912 us/op

Iteration   7: 5.071 ±(99.9%) 0.016 us/op
                 runFibonacci·p0.00:   4.840 us/op
                 runFibonacci·p0.50:   4.968 us/op
                 runFibonacci·p0.90:   5.016 us/op
                 runFibonacci·p0.95:   5.040 us/op
                 runFibonacci·p0.99:   5.784 us/op
                 runFibonacci·p0.999:  19.059 us/op
                 runFibonacci·p0.9999: 154.665 us/op
                 runFibonacci·p1.00:   233.728 us/op

Iteration   8: 5.087 ±(99.9%) 0.016 us/op
                 runFibonacci·p0.00:   4.824 us/op
                 runFibonacci·p0.50:   4.984 us/op
                 runFibonacci·p0.90:   5.056 us/op
                 runFibonacci·p0.95:   5.072 us/op
                 runFibonacci·p0.99:   5.776 us/op
                 runFibonacci·p0.999:  19.662 us/op
                 runFibonacci·p0.9999: 154.104 us/op
                 runFibonacci·p1.00:   245.248 us/op

Iteration   9: 5.085 ±(99.9%) 0.019 us/op
                 runFibonacci·p0.00:   4.832 us/op
                 runFibonacci·p0.50:   4.976 us/op
                 runFibonacci·p0.90:   5.032 us/op
                 runFibonacci·p0.95:   5.056 us/op
                 runFibonacci·p0.99:   5.784 us/op
                 runFibonacci·p0.999:  19.520 us/op
                 runFibonacci·p0.9999: 167.311 us/op
                 runFibonacci·p1.00:   326.144 us/op

Iteration  10: 5.093 ±(99.9%) 0.019 us/op
                 runFibonacci·p0.00:   4.840 us/op
                 runFibonacci·p0.50:   4.984 us/op
                 runFibonacci·p0.90:   5.048 us/op
                 runFibonacci·p0.95:   5.072 us/op
                 runFibonacci·p0.99:   5.832 us/op
                 runFibonacci·p0.999:  19.315 us/op
                 runFibonacci·p0.9999: 156.248 us/op
                 runFibonacci·p1.00:   431.104 us/op

Iteration  11: 5.096 ±(99.9%) 0.023 us/op
                 runFibonacci·p0.00:   4.832 us/op
                 runFibonacci·p0.50:   4.976 us/op
                 runFibonacci·p0.90:   5.032 us/op
                 runFibonacci·p0.95:   5.064 us/op
                 runFibonacci·p0.99:   5.928 us/op
                 runFibonacci·p0.999:  20.170 us/op
                 runFibonacci·p0.9999: 174.908 us/op
                 runFibonacci·p1.00:   637.952 us/op

Iteration  12: 5.101 ±(99.9%) 0.020 us/op
                 runFibonacci·p0.00:   4.832 us/op
                 runFibonacci·p0.50:   4.968 us/op
                 runFibonacci·p0.90:   5.040 us/op
                 runFibonacci·p0.95:   5.064 us/op
                 runFibonacci·p0.99:   6.000 us/op
                 runFibonacci·p0.999:  21.600 us/op
                 runFibonacci·p0.9999: 179.261 us/op
                 runFibonacci·p1.00:   270.848 us/op

Iteration  13: 5.088 ±(99.9%) 0.019 us/op
                 runFibonacci·p0.00:   4.832 us/op
                 runFibonacci·p0.50:   4.968 us/op
                 runFibonacci·p0.90:   5.040 us/op
                 runFibonacci·p0.95:   5.064 us/op
                 runFibonacci·p0.99:   5.880 us/op
                 runFibonacci·p0.999:  20.226 us/op
                 runFibonacci·p0.9999: 170.410 us/op
                 runFibonacci·p1.00:   251.136 us/op

Iteration  14: 5.086 ±(99.9%) 0.019 us/op
                 runFibonacci·p0.00:   4.816 us/op
                 runFibonacci·p0.50:   4.968 us/op
                 runFibonacci·p0.90:   5.040 us/op
                 runFibonacci·p0.95:   5.064 us/op
                 runFibonacci·p0.99:   5.872 us/op
                 runFibonacci·p0.999:  19.623 us/op
                 runFibonacci·p0.9999: 175.526 us/op
                 runFibonacci·p1.00:   313.344 us/op

Iteration  15: 5.078 ±(99.9%) 0.019 us/op
                 runFibonacci·p0.00:   4.832 us/op
                 runFibonacci·p0.50:   4.960 us/op
                 runFibonacci·p0.90:   5.008 us/op
                 runFibonacci·p0.95:   5.032 us/op
                 runFibonacci·p0.99:   5.864 us/op
                 runFibonacci·p0.999:  21.205 us/op
                 runFibonacci·p0.9999: 175.316 us/op
                 runFibonacci·p1.00:   300.544 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 3717313
  mean =      5.087 ±(99.9%) 0.005 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 3716162 
    [ 50.000, 100.000) = 207 
    [100.000, 150.000) = 366 
    [150.000, 200.000) = 468 
    [200.000, 250.000) = 82 
    [250.000, 300.000) = 18 
    [300.000, 350.000) = 6 
    [350.000, 400.000) = 0 
    [400.000, 450.000) = 1 
    [450.000, 500.000) = 0 
    [500.000, 550.000) = 0 
    [550.000, 600.000) = 2 
    [600.000, 650.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      4.816 us/op
     p(50.0000) =      4.976 us/op
     p(90.0000) =      5.040 us/op
     p(95.0000) =      5.064 us/op
     p(99.0000) =      5.856 us/op
     p(99.9000) =     19.872 us/op
     p(99.9900) =    164.352 us/op
     p(99.9990) =    241.999 us/op
     p(99.9999) =    465.262 us/op
    p(100.0000) =    637.952 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 81.88% complete, ETA 01:29:58
# Fork: 1 of 1
# Warmup Iteration   1: 9.102 ±(99.9%) 0.020 us/op
# Warmup Iteration   2: 9.059 ±(99.9%) 0.020 us/op
# Warmup Iteration   3: 9.057 ±(99.9%) 0.018 us/op
# Warmup Iteration   4: 9.020 ±(99.9%) 0.018 us/op
# Warmup Iteration   5: 9.016 ±(99.9%) 0.018 us/op
Iteration   1: 9.052 ±(99.9%) 0.022 us/op
                 runFibonacci·p0.00:   8.624 us/op
                 runFibonacci·p0.50:   8.864 us/op
                 runFibonacci·p0.90:   8.992 us/op
                 runFibonacci·p0.95:   9.040 us/op
                 runFibonacci·p0.99:   13.584 us/op
                 runFibonacci·p0.999:  29.794 us/op
                 runFibonacci·p0.9999: 185.935 us/op
                 runFibonacci·p1.00:   347.648 us/op

Iteration   2: 9.047 ±(99.9%) 0.020 us/op
                 runFibonacci·p0.00:   8.576 us/op
                 runFibonacci·p0.50:   8.864 us/op
                 runFibonacci·p0.90:   8.976 us/op
                 runFibonacci·p0.95:   9.024 us/op
                 runFibonacci·p0.99:   13.456 us/op
                 runFibonacci·p0.999:  29.331 us/op
                 runFibonacci·p0.9999: 178.688 us/op
                 runFibonacci·p1.00:   284.672 us/op

Iteration   3: 9.047 ±(99.9%) 0.022 us/op
                 runFibonacci·p0.00:   8.592 us/op
                 runFibonacci·p0.50:   8.864 us/op
                 runFibonacci·p0.90:   8.976 us/op
                 runFibonacci·p0.95:   9.040 us/op
                 runFibonacci·p0.99:   13.408 us/op
                 runFibonacci·p0.999:  27.904 us/op
                 runFibonacci·p0.9999: 171.876 us/op
                 runFibonacci·p1.00:   555.008 us/op

Iteration   4: 9.067 ±(99.9%) 0.017 us/op
                 runFibonacci·p0.00:   8.608 us/op
                 runFibonacci·p0.50:   8.912 us/op
                 runFibonacci·p0.90:   9.040 us/op
                 runFibonacci·p0.95:   9.072 us/op
                 runFibonacci·p0.99:   13.184 us/op
                 runFibonacci·p0.999:  26.722 us/op
                 runFibonacci·p0.9999: 154.375 us/op
                 runFibonacci·p1.00:   261.376 us/op

Iteration   5: 9.057 ±(99.9%) 0.020 us/op
                 runFibonacci·p0.00:   8.592 us/op
                 runFibonacci·p0.50:   8.880 us/op
                 runFibonacci·p0.90:   9.008 us/op
                 runFibonacci·p0.95:   9.040 us/op
                 runFibonacci·p0.99:   13.360 us/op
                 runFibonacci·p0.999:  27.437 us/op
                 runFibonacci·p0.9999: 176.558 us/op
                 runFibonacci·p1.00:   251.136 us/op

Iteration   6: 9.049 ±(99.9%) 0.019 us/op
                 runFibonacci·p0.00:   8.624 us/op
                 runFibonacci·p0.50:   8.880 us/op
                 runFibonacci·p0.90:   9.008 us/op
                 runFibonacci·p0.95:   9.056 us/op
                 runFibonacci·p0.99:   13.504 us/op
                 runFibonacci·p0.999:  26.816 us/op
                 runFibonacci·p0.9999: 171.024 us/op
                 runFibonacci·p1.00:   317.440 us/op

Iteration   7: 9.036 ±(99.9%) 0.020 us/op
                 runFibonacci·p0.00:   8.640 us/op
                 runFibonacci·p0.50:   8.864 us/op
                 runFibonacci·p0.90:   8.976 us/op
                 runFibonacci·p0.95:   9.024 us/op
                 runFibonacci·p0.99:   13.344 us/op
                 runFibonacci·p0.999:  27.166 us/op
                 runFibonacci·p0.9999: 170.118 us/op
                 runFibonacci·p1.00:   306.688 us/op

Iteration   8: 9.064 ±(99.9%) 0.024 us/op
                 runFibonacci·p0.00:   8.592 us/op
                 runFibonacci·p0.50:   8.864 us/op
                 runFibonacci·p0.90:   8.960 us/op
                 runFibonacci·p0.95:   9.008 us/op
                 runFibonacci·p0.99:   13.888 us/op
                 runFibonacci·p0.999:  32.936 us/op
                 runFibonacci·p0.9999: 194.386 us/op
                 runFibonacci·p1.00:   306.688 us/op

Iteration   9: 9.066 ±(99.9%) 0.023 us/op
                 runFibonacci·p0.00:   8.624 us/op
                 runFibonacci·p0.50:   8.864 us/op
                 runFibonacci·p0.90:   8.992 us/op
                 runFibonacci·p0.95:   9.040 us/op
                 runFibonacci·p0.99:   13.648 us/op
                 runFibonacci·p0.999:  32.232 us/op
                 runFibonacci·p0.9999: 191.481 us/op
                 runFibonacci·p1.00:   299.520 us/op

Iteration  10: 9.051 ±(99.9%) 0.020 us/op
                 runFibonacci·p0.00:   8.624 us/op
                 runFibonacci·p0.50:   8.880 us/op
                 runFibonacci·p0.90:   9.008 us/op
                 runFibonacci·p0.95:   9.056 us/op
                 runFibonacci·p0.99:   13.296 us/op
                 runFibonacci·p0.999:  26.990 us/op
                 runFibonacci·p0.9999: 175.801 us/op
                 runFibonacci·p1.00:   522.240 us/op

Iteration  11: 9.047 ±(99.9%) 0.020 us/op
                 runFibonacci·p0.00:   8.640 us/op
                 runFibonacci·p0.50:   8.880 us/op
                 runFibonacci·p0.90:   9.008 us/op
                 runFibonacci·p0.95:   9.056 us/op
                 runFibonacci·p0.99:   13.500 us/op
                 runFibonacci·p0.999:  25.984 us/op
                 runFibonacci·p0.9999: 180.739 us/op
                 runFibonacci·p1.00:   272.384 us/op

Iteration  12: 9.028 ±(99.9%) 0.019 us/op
                 runFibonacci·p0.00:   8.640 us/op
                 runFibonacci·p0.50:   8.864 us/op
                 runFibonacci·p0.90:   8.976 us/op
                 runFibonacci·p0.95:   9.024 us/op
                 runFibonacci·p0.99:   13.216 us/op
                 runFibonacci·p0.999:  25.694 us/op
                 runFibonacci·p0.9999: 172.077 us/op
                 runFibonacci·p1.00:   258.560 us/op

Iteration  13: 9.036 ±(99.9%) 0.018 us/op
                 runFibonacci·p0.00:   8.656 us/op
                 runFibonacci·p0.50:   8.880 us/op
                 runFibonacci·p0.90:   9.008 us/op
                 runFibonacci·p0.95:   9.040 us/op
                 runFibonacci·p0.99:   13.184 us/op
                 runFibonacci·p0.999:  25.920 us/op
                 runFibonacci·p0.9999: 170.835 us/op
                 runFibonacci·p1.00:   329.216 us/op

Iteration  14: 9.037 ±(99.9%) 0.020 us/op
                 runFibonacci·p0.00:   8.624 us/op
                 runFibonacci·p0.50:   8.864 us/op
                 runFibonacci·p0.90:   8.976 us/op
                 runFibonacci·p0.95:   9.024 us/op
                 runFibonacci·p0.99:   13.408 us/op
                 runFibonacci·p0.999:  26.497 us/op
                 runFibonacci·p0.9999: 179.355 us/op
                 runFibonacci·p1.00:   332.800 us/op

Iteration  15: 9.045 ±(99.9%) 0.019 us/op
                 runFibonacci·p0.00:   8.640 us/op
                 runFibonacci·p0.50:   8.864 us/op
                 runFibonacci·p0.90:   8.992 us/op
                 runFibonacci·p0.95:   9.040 us/op
                 runFibonacci·p0.99:   13.360 us/op
                 runFibonacci·p0.999:  28.488 us/op
                 runFibonacci·p0.9999: 175.865 us/op
                 runFibonacci·p1.00:   314.880 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 4151288
  mean =      9.048 ±(99.9%) 0.005 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 4149466 
    [ 50.000, 100.000) = 426 
    [100.000, 150.000) = 435 
    [150.000, 200.000) = 766 
    [200.000, 250.000) = 136 
    [250.000, 300.000) = 44 
    [300.000, 350.000) = 9 
    [350.000, 400.000) = 2 
    [400.000, 450.000) = 1 
    [450.000, 500.000) = 0 
    [500.000, 550.000) = 2 

  Percentiles, us/op:
      p(0.0000) =      8.576 us/op
     p(50.0000) =      8.880 us/op
     p(90.0000) =      8.992 us/op
     p(95.0000) =      9.040 us/op
     p(99.0000) =     13.424 us/op
     p(99.9000) =     27.360 us/op
     p(99.9900) =    179.200 us/op
     p(99.9990) =    261.501 us/op
     p(99.9999) =    402.032 us/op
    p(100.0000) =    555.008 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 82.61% complete, ETA 01:26:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.094 ±(99.9%) 0.008 us/op
# Warmup Iteration   2: 0.077 ±(99.9%) 0.003 us/op
# Warmup Iteration   3: 0.106 ±(99.9%) 0.004 us/op
# Warmup Iteration   4: 0.104 ±(99.9%) 0.003 us/op
# Warmup Iteration   5: 0.102 ±(99.9%) 0.003 us/op
Iteration   1: 0.101 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.087 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.123 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.276 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.098 us/op
                 findLastPrefixUsingScanner1·p1.00:   171.008 us/op

Iteration   2: 0.101 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.087 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.112 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.120 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.326 us/op
                 findLastPrefixUsingScanner1·p0.9999: 11.376 us/op
                 findLastPrefixUsingScanner1·p1.00:   154.112 us/op

Iteration   3: 0.102 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.087 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.110 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.114 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.121 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.358 us/op
                 findLastPrefixUsingScanner1·p0.9999: 10.960 us/op
                 findLastPrefixUsingScanner1·p1.00:   185.600 us/op

Iteration   4: 0.102 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.081 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.087 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.120 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.293 us/op
                 findLastPrefixUsingScanner1·p0.9999: 10.313 us/op
                 findLastPrefixUsingScanner1·p1.00:   217.600 us/op

Iteration   5: 0.103 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.087 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.110 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.114 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.121 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.385 us/op
                 findLastPrefixUsingScanner1·p0.9999: 13.250 us/op
                 findLastPrefixUsingScanner1·p1.00:   243.200 us/op

Iteration   6: 0.102 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.081 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.087 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.110 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.114 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.122 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.322 us/op
                 findLastPrefixUsingScanner1·p0.9999: 12.011 us/op
                 findLastPrefixUsingScanner1·p1.00:   139.520 us/op

Iteration   7: 0.103 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.087 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.112 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.121 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.453 us/op
                 findLastPrefixUsingScanner1·p0.9999: 13.404 us/op
                 findLastPrefixUsingScanner1·p1.00:   253.184 us/op

Iteration   8: 0.101 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.087 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.121 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.327 us/op
                 findLastPrefixUsingScanner1·p0.9999: 10.571 us/op
                 findLastPrefixUsingScanner1·p1.00:   197.376 us/op

Iteration   9: 0.102 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.087 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.110 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.114 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.121 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.269 us/op
                 findLastPrefixUsingScanner1·p0.9999: 12.149 us/op
                 findLastPrefixUsingScanner1·p1.00:   144.896 us/op

Iteration  10: 0.102 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.087 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.120 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.278 us/op
                 findLastPrefixUsingScanner1·p0.9999: 12.015 us/op
                 findLastPrefixUsingScanner1·p1.00:   150.784 us/op

Iteration  11: 0.101 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.087 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.120 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.254 us/op
                 findLastPrefixUsingScanner1·p0.9999: 10.420 us/op
                 findLastPrefixUsingScanner1·p1.00:   149.760 us/op

Iteration  12: 0.103 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.087 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.121 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.367 us/op
                 findLastPrefixUsingScanner1·p0.9999: 11.833 us/op
                 findLastPrefixUsingScanner1·p1.00:   150.016 us/op

Iteration  13: 0.100 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.087 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.287 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.448 us/op
                 findLastPrefixUsingScanner1·p1.00:   153.344 us/op

Iteration  14: 0.102 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.087 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.121 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.395 us/op
                 findLastPrefixUsingScanner1·p0.9999: 11.279 us/op
                 findLastPrefixUsingScanner1·p1.00:   167.424 us/op

Iteration  15: 0.102 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.081 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.087 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.120 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.303 us/op
                 findLastPrefixUsingScanner1·p0.9999: 12.069 us/op
                 findLastPrefixUsingScanner1·p1.00:   156.416 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 4715609
  mean =      0.102 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 4715506 
    [ 25.000,  50.000) = 35 
    [ 50.000,  75.000) = 5 
    [ 75.000, 100.000) = 6 
    [100.000, 125.000) = 16 
    [125.000, 150.000) = 24 
    [150.000, 175.000) = 10 
    [175.000, 200.000) = 4 
    [200.000, 225.000) = 1 
    [225.000, 250.000) = 1 
    [250.000, 275.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      0.081 us/op
     p(50.0000) =      0.087 us/op
     p(90.0000) =      0.109 us/op
     p(95.0000) =      0.113 us/op
     p(99.0000) =      0.121 us/op
     p(99.9000) =      0.310 us/op
     p(99.9900) =     11.248 us/op
     p(99.9990) =    113.780 us/op
     p(99.9999) =    188.949 us/op
    p(100.0000) =    253.184 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 83.33% complete, ETA 01:22:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.457 ±(99.9%) 0.012 us/op
# Warmup Iteration   2: 0.451 ±(99.9%) 0.012 us/op
# Warmup Iteration   3: 0.482 ±(99.9%) 0.007 us/op
# Warmup Iteration   4: 0.482 ±(99.9%) 0.005 us/op
# Warmup Iteration   5: 0.480 ±(99.9%) 0.005 us/op
Iteration   1: 0.499 ±(99.9%) 0.039 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.448 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.462 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.483 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.484 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.494 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.802 us/op
                 findLastPrefixUsingScanner1·p0.9999: 23.765 us/op
                 findLastPrefixUsingScanner1·p1.00:   4173.824 us/op

Iteration   2: 0.488 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.450 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.463 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.484 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.484 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.503 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.038 us/op
                 findLastPrefixUsingScanner1·p0.9999: 20.913 us/op
                 findLastPrefixUsingScanner1·p1.00:   182.784 us/op

Iteration   3: 0.488 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.450 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.462 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.484 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.484 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.495 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.023 us/op
                 findLastPrefixUsingScanner1·p0.9999: 21.637 us/op
                 findLastPrefixUsingScanner1·p1.00:   193.536 us/op

Iteration   4: 0.482 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.443 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.457 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.478 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.479 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.496 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.915 us/op
                 findLastPrefixUsingScanner1·p0.9999: 23.167 us/op
                 findLastPrefixUsingScanner1·p1.00:   226.560 us/op

Iteration   5: 0.482 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.443 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.456 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.478 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.478 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.486 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.008 us/op
                 findLastPrefixUsingScanner1·p0.9999: 28.904 us/op
                 findLastPrefixUsingScanner1·p1.00:   188.672 us/op

Iteration   6: 0.480 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.443 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.457 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.478 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.478 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.493 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.421 us/op
                 findLastPrefixUsingScanner1·p0.9999: 24.293 us/op
                 findLastPrefixUsingScanner1·p1.00:   184.320 us/op

Iteration   7: 0.488 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.448 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.462 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.483 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.484 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.498 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.808 us/op
                 findLastPrefixUsingScanner1·p0.9999: 21.591 us/op
                 findLastPrefixUsingScanner1·p1.00:   216.320 us/op

Iteration   8: 0.491 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.451 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.465 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.486 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.487 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.505 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.889 us/op
                 findLastPrefixUsingScanner1·p0.9999: 16.919 us/op
                 findLastPrefixUsingScanner1·p1.00:   197.888 us/op

Iteration   9: 0.482 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.443 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.457 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.478 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.478 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.521 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.833 us/op
                 findLastPrefixUsingScanner1·p0.9999: 20.317 us/op
                 findLastPrefixUsingScanner1·p1.00:   220.416 us/op

Iteration  10: 0.483 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.447 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.460 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.480 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.481 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.501 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.645 us/op
                 findLastPrefixUsingScanner1·p0.9999: 16.453 us/op
                 findLastPrefixUsingScanner1·p1.00:   395.264 us/op

Iteration  11: 0.480 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.443 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.457 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.478 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.478 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.496 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.679 us/op
                 findLastPrefixUsingScanner1·p0.9999: 16.381 us/op
                 findLastPrefixUsingScanner1·p1.00:   226.816 us/op

Iteration  12: 0.486 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.448 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.462 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.483 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.484 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.506 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.682 us/op
                 findLastPrefixUsingScanner1·p0.9999: 15.509 us/op
                 findLastPrefixUsingScanner1·p1.00:   227.328 us/op

Iteration  13: 0.485 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.447 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.462 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.483 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.484 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.513 us/op
                 findLastPrefixUsingScanner1·p0.999:  4.844 us/op
                 findLastPrefixUsingScanner1·p0.9999: 17.048 us/op
                 findLastPrefixUsingScanner1·p1.00:   180.480 us/op

Iteration  14: 0.483 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.445 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.458 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.479 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.480 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.506 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.115 us/op
                 findLastPrefixUsingScanner1·p0.9999: 17.982 us/op
                 findLastPrefixUsingScanner1·p1.00:   312.832 us/op

Iteration  15: 0.496 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.450 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.465 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.486 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.487 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.526 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.120 us/op
                 findLastPrefixUsingScanner1·p0.9999: 24.490 us/op
                 findLastPrefixUsingScanner1·p1.00:   215.808 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 5369453
  mean =      0.486 ±(99.9%) 0.003 us/op

  Histogram, us/op:
    [   0.000,  500.000) = 5369452 
    [ 500.000, 1000.000) = 0 
    [1000.000, 1500.000) = 0 
    [1500.000, 2000.000) = 0 
    [2000.000, 2500.000) = 0 
    [2500.000, 3000.000) = 0 
    [3000.000, 3500.000) = 0 
    [3500.000, 4000.000) = 0 
    [4000.000, 4500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      0.443 us/op
     p(50.0000) =      0.462 us/op
     p(90.0000) =      0.483 us/op
     p(95.0000) =      0.485 us/op
     p(99.0000) =      0.499 us/op
     p(99.9000) =      4.840 us/op
     p(99.9900) =     20.163 us/op
     p(99.9990) =    175.083 us/op
     p(99.9999) =    235.238 us/op
    p(100.0000) =   4173.824 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 84.06% complete, ETA 01:19:10
# Fork: 1 of 1
# Warmup Iteration   1: 4.235 ±(99.9%) 0.020 us/op
# Warmup Iteration   2: 4.815 ±(99.9%) 0.018 us/op
# Warmup Iteration   3: 4.396 ±(99.9%) 0.016 us/op
# Warmup Iteration   4: 4.487 ±(99.9%) 0.043 us/op
# Warmup Iteration   5: 4.455 ±(99.9%) 0.046 us/op
Iteration   1: 4.492 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.296 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.392 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.424 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.440 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.552 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.761 us/op
                 findLastPrefixUsingScanner1·p0.9999: 166.120 us/op
                 findLastPrefixUsingScanner1·p1.00:   299.008 us/op

Iteration   2: 4.470 ±(99.9%) 0.016 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.280 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.376 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.400 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.416 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.704 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.660 us/op
                 findLastPrefixUsingScanner1·p0.9999: 164.577 us/op
                 findLastPrefixUsingScanner1·p1.00:   280.064 us/op

Iteration   3: 4.474 ±(99.9%) 0.018 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.280 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.368 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.392 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.416 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.712 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.036 us/op
                 findLastPrefixUsingScanner1·p0.9999: 173.897 us/op
                 findLastPrefixUsingScanner1·p1.00:   475.648 us/op

Iteration   4: 4.474 ±(99.9%) 0.015 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.296 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.384 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.408 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.424 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.477 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.237 us/op
                 findLastPrefixUsingScanner1·p0.9999: 164.881 us/op
                 findLastPrefixUsingScanner1·p1.00:   293.888 us/op

Iteration   5: 4.450 ±(99.9%) 0.015 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.272 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.360 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.376 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.392 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.541 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.711 us/op
                 findLastPrefixUsingScanner1·p0.9999: 166.475 us/op
                 findLastPrefixUsingScanner1·p1.00:   290.816 us/op

Iteration   6: 4.449 ±(99.9%) 0.034 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.264 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.344 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.368 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.376 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.776 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.402 us/op
                 findLastPrefixUsingScanner1·p0.9999: 164.049 us/op
                 findLastPrefixUsingScanner1·p1.00:   2654.208 us/op

Iteration   7: 4.478 ±(99.9%) 0.018 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.272 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.368 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.408 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.432 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.824 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.963 us/op
                 findLastPrefixUsingScanner1·p0.9999: 167.842 us/op
                 findLastPrefixUsingScanner1·p1.00:   367.104 us/op

Iteration   8: 4.436 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.248 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.336 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.360 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.376 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.720 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.278 us/op
                 findLastPrefixUsingScanner1·p0.9999: 171.404 us/op
                 findLastPrefixUsingScanner1·p1.00:   301.056 us/op

Iteration   9: 4.493 ±(99.9%) 0.016 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.320 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.392 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.416 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.432 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.744 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.377 us/op
                 findLastPrefixUsingScanner1·p0.9999: 166.887 us/op
                 findLastPrefixUsingScanner1·p1.00:   280.576 us/op

Iteration  10: 4.416 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.232 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.312 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.336 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.352 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.776 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.927 us/op
                 findLastPrefixUsingScanner1·p0.9999: 166.252 us/op
                 findLastPrefixUsingScanner1·p1.00:   379.392 us/op

Iteration  11: 4.473 ±(99.9%) 0.014 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.304 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.384 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.408 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.416 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.688 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.227 us/op
                 findLastPrefixUsingScanner1·p0.9999: 161.067 us/op
                 findLastPrefixUsingScanner1·p1.00:   265.216 us/op

Iteration  12: 4.420 ±(99.9%) 0.016 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.224 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.320 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.344 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.360 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.808 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.365 us/op
                 findLastPrefixUsingScanner1·p0.9999: 157.285 us/op
                 findLastPrefixUsingScanner1·p1.00:   337.920 us/op

Iteration  13: 4.410 ±(99.9%) 0.016 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.216 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.312 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.328 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.344 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.744 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.681 us/op
                 findLastPrefixUsingScanner1·p0.9999: 169.834 us/op
                 findLastPrefixUsingScanner1·p1.00:   339.456 us/op

Iteration  14: 4.582 ±(99.9%) 0.016 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.368 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.480 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.512 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.536 us/op
                 findLastPrefixUsingScanner1·p0.99:   6.088 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.774 us/op
                 findLastPrefixUsingScanner1·p0.9999: 170.616 us/op
                 findLastPrefixUsingScanner1·p1.00:   313.344 us/op

Iteration  15: 4.457 ±(99.9%) 0.015 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.272 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.360 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.384 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.392 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.616 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.794 us/op
                 findLastPrefixUsingScanner1·p0.9999: 167.082 us/op
                 findLastPrefixUsingScanner1·p1.00:   265.216 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 4240117
  mean =      4.465 ±(99.9%) 0.005 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 4240069 
    [ 250.000,  500.000) = 47 
    [ 500.000,  750.000) = 0 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      4.216 us/op
     p(50.0000) =      4.368 us/op
     p(90.0000) =      4.432 us/op
     p(95.0000) =      4.480 us/op
     p(99.0000) =      5.736 us/op
     p(99.9000) =     17.760 us/op
     p(99.9900) =    166.656 us/op
     p(99.9990) =    261.120 us/op
     p(99.9999) =    360.465 us/op
    p(100.0000) =   2654.208 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 84.78% complete, ETA 01:15:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.097 ±(99.9%) 0.004 us/op
# Warmup Iteration   2: 0.082 ±(99.9%) 0.005 us/op
# Warmup Iteration   3: 0.087 ±(99.9%) 0.004 us/op
# Warmup Iteration   4: 0.099 ±(99.9%) 0.003 us/op
# Warmup Iteration   5: 0.098 ±(99.9%) 0.002 us/op
Iteration   1: 0.104 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.079 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.097 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.116 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.123 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.132 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.302 us/op
                 findLastPrefixUsingScanner2·p0.9999: 10.577 us/op
                 findLastPrefixUsingScanner2·p1.00:   132.864 us/op

Iteration   2: 0.099 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.078 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.104 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.118 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.267 us/op
                 findLastPrefixUsingScanner2·p0.9999: 10.221 us/op
                 findLastPrefixUsingScanner2·p1.00:   190.464 us/op

Iteration   3: 0.102 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.078 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.103 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.117 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.301 us/op
                 findLastPrefixUsingScanner2·p0.9999: 12.076 us/op
                 findLastPrefixUsingScanner2·p1.00:   189.440 us/op

Iteration   4: 0.099 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.077 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.102 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.109 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.117 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.247 us/op
                 findLastPrefixUsingScanner2·p0.9999: 11.485 us/op
                 findLastPrefixUsingScanner2·p1.00:   188.160 us/op

Iteration   5: 0.099 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.078 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.103 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.117 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.240 us/op
                 findLastPrefixUsingScanner2·p0.9999: 10.936 us/op
                 findLastPrefixUsingScanner2·p1.00:   179.712 us/op

Iteration   6: 0.097 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.078 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.117 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.258 us/op
                 findLastPrefixUsingScanner2·p0.9999: 10.255 us/op
                 findLastPrefixUsingScanner2·p1.00:   45.312 us/op

Iteration   7: 0.099 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.078 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.118 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.268 us/op
                 findLastPrefixUsingScanner2·p0.9999: 9.390 us/op
                 findLastPrefixUsingScanner2·p1.00:   177.920 us/op

Iteration   8: 0.100 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.078 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.117 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.304 us/op
                 findLastPrefixUsingScanner2·p0.9999: 10.847 us/op
                 findLastPrefixUsingScanner2·p1.00:   185.088 us/op

Iteration   9: 0.101 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.078 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.108 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.118 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.274 us/op
                 findLastPrefixUsingScanner2·p0.9999: 11.583 us/op
                 findLastPrefixUsingScanner2·p1.00:   488.960 us/op

Iteration  10: 0.097 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.077 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.103 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.117 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.261 us/op
                 findLastPrefixUsingScanner2·p0.9999: 9.818 us/op
                 findLastPrefixUsingScanner2·p1.00:   150.272 us/op

Iteration  11: 0.099 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.078 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.259 us/op
                 findLastPrefixUsingScanner2·p0.9999: 10.186 us/op
                 findLastPrefixUsingScanner2·p1.00:   202.752 us/op

Iteration  12: 0.099 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.077 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.108 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.279 us/op
                 findLastPrefixUsingScanner2·p0.9999: 10.772 us/op
                 findLastPrefixUsingScanner2·p1.00:   207.616 us/op

Iteration  13: 0.099 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.077 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.295 us/op
                 findLastPrefixUsingScanner2·p0.9999: 10.255 us/op
                 findLastPrefixUsingScanner2·p1.00:   212.224 us/op

Iteration  14: 0.098 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.079 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.086 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.100 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.108 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.116 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.340 us/op
                 findLastPrefixUsingScanner2·p0.9999: 11.246 us/op
                 findLastPrefixUsingScanner2·p1.00:   277.504 us/op

Iteration  15: 0.098 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.077 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.107 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.118 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.266 us/op
                 findLastPrefixUsingScanner2·p0.9999: 9.242 us/op
                 findLastPrefixUsingScanner2·p1.00:   152.064 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 5129721
  mean =      0.099 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 5129659 
    [ 50.000, 100.000) = 9 
    [100.000, 150.000) = 22 
    [150.000, 200.000) = 26 
    [200.000, 250.000) = 3 
    [250.000, 300.000) = 1 
    [300.000, 350.000) = 0 
    [350.000, 400.000) = 0 
    [400.000, 450.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.077 us/op
     p(50.0000) =      0.089 us/op
     p(90.0000) =      0.108 us/op
     p(95.0000) =      0.110 us/op
     p(99.0000) =      0.122 us/op
     p(99.9000) =      0.275 us/op
     p(99.9900) =     10.496 us/op
     p(99.9990) =    111.579 us/op
     p(99.9999) =    202.353 us/op
    p(100.0000) =    488.960 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 85.50% complete, ETA 01:11:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.471 ±(99.9%) 0.016 us/op
# Warmup Iteration   2: 0.440 ±(99.9%) 0.004 us/op
# Warmup Iteration   3: 0.439 ±(99.9%) 0.005 us/op
# Warmup Iteration   4: 0.441 ±(99.9%) 0.005 us/op
# Warmup Iteration   5: 0.437 ±(99.9%) 0.005 us/op
Iteration   1: 0.437 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.407 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.419 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.428 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.430 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.449 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.400 us/op
                 findLastPrefixUsingScanner2·p0.9999: 17.046 us/op
                 findLastPrefixUsingScanner2·p1.00:   185.856 us/op

Iteration   2: 0.440 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.408 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.420 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.438 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.440 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.459 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.352 us/op
                 findLastPrefixUsingScanner2·p0.9999: 16.306 us/op
                 findLastPrefixUsingScanner2·p1.00:   258.048 us/op

Iteration   3: 0.441 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.408 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.418 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.429 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.431 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.448 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.354 us/op
                 findLastPrefixUsingScanner2·p0.9999: 21.907 us/op
                 findLastPrefixUsingScanner2·p1.00:   390.144 us/op

Iteration   4: 0.450 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.407 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.418 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.428 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.430 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.449 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.912 us/op
                 findLastPrefixUsingScanner2·p0.9999: 31.960 us/op
                 findLastPrefixUsingScanner2·p1.00:   167.424 us/op

Iteration   5: 0.442 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.407 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.419 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.429 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.432 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.453 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.811 us/op
                 findLastPrefixUsingScanner2·p0.9999: 24.087 us/op
                 findLastPrefixUsingScanner2·p1.00:   317.952 us/op

Iteration   6: 0.441 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.407 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.419 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.429 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.430 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.447 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.488 us/op
                 findLastPrefixUsingScanner2·p0.9999: 19.472 us/op
                 findLastPrefixUsingScanner2·p1.00:   234.752 us/op

Iteration   7: 0.453 ±(99.9%) 0.011 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.406 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.418 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.428 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.430 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.448 us/op
                 findLastPrefixUsingScanner2·p0.999:  7.681 us/op
                 findLastPrefixUsingScanner2·p0.9999: 43.940 us/op
                 findLastPrefixUsingScanner2·p1.00:   219.648 us/op

Iteration   8: 0.443 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.410 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.426 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.436 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.439 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.454 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.384 us/op
                 findLastPrefixUsingScanner2·p0.9999: 16.000 us/op
                 findLastPrefixUsingScanner2·p1.00:   233.984 us/op

Iteration   9: 0.439 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.408 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.420 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.430 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.433 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.450 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.509 us/op
                 findLastPrefixUsingScanner2·p0.9999: 15.803 us/op
                 findLastPrefixUsingScanner2·p1.00:   173.056 us/op

Iteration  10: 0.434 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.406 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.419 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.429 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.431 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.449 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.089 us/op
                 findLastPrefixUsingScanner2·p0.9999: 14.491 us/op
                 findLastPrefixUsingScanner2·p1.00:   178.432 us/op

Iteration  11: 0.435 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.407 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.419 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.429 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.431 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.448 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.118 us/op
                 findLastPrefixUsingScanner2·p0.9999: 14.690 us/op
                 findLastPrefixUsingScanner2·p1.00:   217.600 us/op

Iteration  12: 0.439 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.408 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.419 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.429 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.431 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.456 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.272 us/op
                 findLastPrefixUsingScanner2·p0.9999: 16.460 us/op
                 findLastPrefixUsingScanner2·p1.00:   204.032 us/op

Iteration  13: 0.449 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.407 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.418 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.428 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.430 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.450 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.550 us/op
                 findLastPrefixUsingScanner2·p0.9999: 22.132 us/op
                 findLastPrefixUsingScanner2·p1.00:   190.976 us/op

Iteration  14: 0.438 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.407 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.419 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.429 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.430 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.449 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.316 us/op
                 findLastPrefixUsingScanner2·p0.9999: 16.651 us/op
                 findLastPrefixUsingScanner2·p1.00:   222.720 us/op

Iteration  15: 0.436 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.407 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.419 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.429 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.430 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.450 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.163 us/op
                 findLastPrefixUsingScanner2·p0.9999: 15.768 us/op
                 findLastPrefixUsingScanner2·p1.00:   195.328 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 5341926
  mean =      0.440 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 5341584 
    [ 25.000,  50.000) = 121 
    [ 50.000,  75.000) = 26 
    [ 75.000, 100.000) = 11 
    [100.000, 125.000) = 30 
    [125.000, 150.000) = 79 
    [150.000, 175.000) = 40 
    [175.000, 200.000) = 19 
    [200.000, 225.000) = 8 
    [225.000, 250.000) = 4 
    [250.000, 275.000) = 1 
    [275.000, 300.000) = 1 
    [300.000, 325.000) = 1 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.406 us/op
     p(50.0000) =      0.419 us/op
     p(90.0000) =      0.430 us/op
     p(95.0000) =      0.435 us/op
     p(99.0000) =      0.452 us/op
     p(99.9000) =      4.520 us/op
     p(99.9900) =     17.722 us/op
     p(99.9990) =    161.577 us/op
     p(99.9999) =    234.577 us/op
    p(100.0000) =    390.144 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 86.23% complete, ETA 01:08:21
# Fork: 1 of 1
# Warmup Iteration   1: 4.256 ±(99.9%) 0.020 us/op
# Warmup Iteration   2: 3.831 ±(99.9%) 0.014 us/op
# Warmup Iteration   3: 4.756 ±(99.9%) 0.017 us/op
# Warmup Iteration   4: 4.754 ±(99.9%) 0.016 us/op
# Warmup Iteration   5: 4.891 ±(99.9%) 0.017 us/op
Iteration   1: 4.735 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.504 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.632 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.664 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.680 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.128 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.870 us/op
                 findLastPrefixUsingScanner2·p0.9999: 170.240 us/op
                 findLastPrefixUsingScanner2·p1.00:   266.752 us/op

Iteration   2: 4.820 ±(99.9%) 0.018 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.576 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.712 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.752 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.768 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.248 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.937 us/op
                 findLastPrefixUsingScanner2·p0.9999: 174.529 us/op
                 findLastPrefixUsingScanner2·p1.00:   256.256 us/op

Iteration   3: 4.939 ±(99.9%) 0.023 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.720 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.816 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.848 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.864 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.432 us/op
                 findLastPrefixUsingScanner2·p0.999:  19.748 us/op
                 findLastPrefixUsingScanner2·p0.9999: 176.952 us/op
                 findLastPrefixUsingScanner2·p1.00:   475.648 us/op

Iteration   4: 4.816 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.568 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.712 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.752 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.768 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.176 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.325 us/op
                 findLastPrefixUsingScanner2·p0.9999: 165.828 us/op
                 findLastPrefixUsingScanner2·p1.00:   331.264 us/op

Iteration   5: 4.924 ±(99.9%) 0.018 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.712 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.824 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.856 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.872 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.376 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.112 us/op
                 findLastPrefixUsingScanner2·p0.9999: 164.203 us/op
                 findLastPrefixUsingScanner2·p1.00:   420.864 us/op

Iteration   6: 4.841 ±(99.9%) 0.058 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.552 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.688 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.720 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.736 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.927 us/op
                 findLastPrefixUsingScanner2·p0.999:  25.989 us/op
                 findLastPrefixUsingScanner2·p0.9999: 186.930 us/op
                 findLastPrefixUsingScanner2·p1.00:   4333.568 us/op

Iteration   7: 4.719 ±(99.9%) 0.021 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.496 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.584 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.616 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.640 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.392 us/op
                 findLastPrefixUsingScanner2·p0.999:  23.035 us/op
                 findLastPrefixUsingScanner2·p0.9999: 200.900 us/op
                 findLastPrefixUsingScanner2·p1.00:   317.952 us/op

Iteration   8: 4.841 ±(99.9%) 0.018 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.616 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.736 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.760 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.776 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.352 us/op
                 findLastPrefixUsingScanner2·p0.999:  19.066 us/op
                 findLastPrefixUsingScanner2·p0.9999: 169.330 us/op
                 findLastPrefixUsingScanner2·p1.00:   314.368 us/op

Iteration   9: 4.797 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.592 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.696 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.728 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.744 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.120 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.656 us/op
                 findLastPrefixUsingScanner2·p0.9999: 165.092 us/op
                 findLastPrefixUsingScanner2·p1.00:   320.000 us/op

Iteration  10: 4.694 ±(99.9%) 0.018 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.488 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.592 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.616 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.632 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.160 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.567 us/op
                 findLastPrefixUsingScanner2·p0.9999: 172.038 us/op
                 findLastPrefixUsingScanner2·p1.00:   375.296 us/op

Iteration  11: 4.819 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.616 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.720 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.736 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.752 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.240 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.912 us/op
                 findLastPrefixUsingScanner2·p0.9999: 165.445 us/op
                 findLastPrefixUsingScanner2·p1.00:   318.464 us/op

Iteration  12: 4.907 ±(99.9%) 0.019 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.696 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.792 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.816 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.832 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.288 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.844 us/op
                 findLastPrefixUsingScanner2·p0.9999: 178.580 us/op
                 findLastPrefixUsingScanner2·p1.00:   263.680 us/op

Iteration  13: 4.910 ±(99.9%) 0.021 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.672 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.792 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.832 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.840 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.440 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.848 us/op
                 findLastPrefixUsingScanner2·p0.9999: 190.011 us/op
                 findLastPrefixUsingScanner2·p1.00:   350.720 us/op

Iteration  14: 4.832 ±(99.9%) 0.022 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.600 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.704 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.736 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.760 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.208 us/op
                 findLastPrefixUsingScanner2·p0.999:  19.744 us/op
                 findLastPrefixUsingScanner2·p0.9999: 196.961 us/op
                 findLastPrefixUsingScanner2·p1.00:   422.912 us/op

Iteration  15: 4.885 ±(99.9%) 0.020 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.640 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.768 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.816 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.832 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.400 us/op
                 findLastPrefixUsingScanner2·p0.999:  19.003 us/op
                 findLastPrefixUsingScanner2·p0.9999: 177.401 us/op
                 findLastPrefixUsingScanner2·p1.00:   239.616 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 3925072
  mean =      4.831 ±(99.9%) 0.006 us/op

  Histogram, us/op:
    [   0.000,  500.000) = 3925071 
    [ 500.000, 1000.000) = 0 
    [1000.000, 1500.000) = 0 
    [1500.000, 2000.000) = 0 
    [2000.000, 2500.000) = 0 
    [2500.000, 3000.000) = 0 
    [3000.000, 3500.000) = 0 
    [3500.000, 4000.000) = 0 
    [4000.000, 4500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      4.488 us/op
     p(50.0000) =      4.720 us/op
     p(90.0000) =      4.816 us/op
     p(95.0000) =      4.840 us/op
     p(99.0000) =      6.288 us/op
     p(99.9000) =     19.360 us/op
     p(99.9900) =    174.336 us/op
     p(99.9990) =    255.935 us/op
     p(99.9999) =    467.404 us/op
    p(100.0000) =   4333.568 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 86.95% complete, ETA 01:04:45
# Fork: 1 of 1
# Warmup Iteration   1: 14654.623 ±(99.9%) 114.967 us/op
# Warmup Iteration   2: 14571.156 ±(99.9%) 16.426 us/op
# Warmup Iteration   3: 14598.000 ±(99.9%) 18.689 us/op
# Warmup Iteration   4: 14584.483 ±(99.9%) 15.687 us/op
# Warmup Iteration   5: 14561.298 ±(99.9%) 14.639 us/op
Iteration   1: 14566.093 ±(99.9%) 15.785 us/op
                 runAlgorithm·p0.00:   14434.304 us/op
                 runAlgorithm·p0.50:   14516.224 us/op
                 runAlgorithm·p0.90:   14712.832 us/op
                 runAlgorithm·p0.95:   14761.984 us/op
                 runAlgorithm·p0.99:   15145.206 us/op
                 runAlgorithm·p0.999:  15302.656 us/op
                 runAlgorithm·p0.9999: 15302.656 us/op
                 runAlgorithm·p1.00:   15302.656 us/op

Iteration   2: 14566.976 ±(99.9%) 16.016 us/op
                 runAlgorithm·p0.00:   14417.920 us/op
                 runAlgorithm·p0.50:   14516.224 us/op
                 runAlgorithm·p0.90:   14712.832 us/op
                 runAlgorithm·p0.95:   14794.752 us/op
                 runAlgorithm·p0.99:   15056.896 us/op
                 runAlgorithm·p0.999:  15384.576 us/op
                 runAlgorithm·p0.9999: 15384.576 us/op
                 runAlgorithm·p1.00:   15384.576 us/op

Iteration   3: 14563.659 ±(99.9%) 16.460 us/op
                 runAlgorithm·p0.00:   14401.536 us/op
                 runAlgorithm·p0.50:   14516.224 us/op
                 runAlgorithm·p0.90:   14712.832 us/op
                 runAlgorithm·p0.95:   14745.600 us/op
                 runAlgorithm·p0.99:   15089.664 us/op
                 runAlgorithm·p0.999:  16072.704 us/op
                 runAlgorithm·p0.9999: 16072.704 us/op
                 runAlgorithm·p1.00:   16072.704 us/op

Iteration   4: 14567.167 ±(99.9%) 15.424 us/op
                 runAlgorithm·p0.00:   14434.304 us/op
                 runAlgorithm·p0.50:   14516.224 us/op
                 runAlgorithm·p0.90:   14717.747 us/op
                 runAlgorithm·p0.95:   14789.018 us/op
                 runAlgorithm·p0.99:   15075.410 us/op
                 runAlgorithm·p0.999:  15351.808 us/op
                 runAlgorithm·p0.9999: 15351.808 us/op
                 runAlgorithm·p1.00:   15351.808 us/op

Iteration   5: 14562.920 ±(99.9%) 14.711 us/op
                 runAlgorithm·p0.00:   14434.304 us/op
                 runAlgorithm·p0.50:   14516.224 us/op
                 runAlgorithm·p0.90:   14712.832 us/op
                 runAlgorithm·p0.95:   14771.814 us/op
                 runAlgorithm·p0.99:   15075.246 us/op
                 runAlgorithm·p0.999:  15253.504 us/op
                 runAlgorithm·p0.9999: 15253.504 us/op
                 runAlgorithm·p1.00:   15253.504 us/op

Iteration   6: 14571.347 ±(99.9%) 17.835 us/op
                 runAlgorithm·p0.00:   14417.920 us/op
                 runAlgorithm·p0.50:   14516.224 us/op
                 runAlgorithm·p0.90:   14717.747 us/op
                 runAlgorithm·p0.95:   14794.752 us/op
                 runAlgorithm·p0.99:   15042.642 us/op
                 runAlgorithm·p0.999:  16629.760 us/op
                 runAlgorithm·p0.9999: 16629.760 us/op
                 runAlgorithm·p1.00:   16629.760 us/op

Iteration   7: 14578.201 ±(99.9%) 16.594 us/op
                 runAlgorithm·p0.00:   14434.304 us/op
                 runAlgorithm·p0.50:   14532.608 us/op
                 runAlgorithm·p0.90:   14729.216 us/op
                 runAlgorithm·p0.95:   14827.520 us/op
                 runAlgorithm·p0.99:   15124.562 us/op
                 runAlgorithm·p0.999:  15433.728 us/op
                 runAlgorithm·p0.9999: 15433.728 us/op
                 runAlgorithm·p1.00:   15433.728 us/op

Iteration   8: 14572.565 ±(99.9%) 16.704 us/op
                 runAlgorithm·p0.00:   14434.304 us/op
                 runAlgorithm·p0.50:   14516.224 us/op
                 runAlgorithm·p0.90:   14745.600 us/op
                 runAlgorithm·p0.95:   14838.170 us/op
                 runAlgorithm·p0.99:   15075.410 us/op
                 runAlgorithm·p0.999:  15204.352 us/op
                 runAlgorithm·p0.9999: 15204.352 us/op
                 runAlgorithm·p1.00:   15204.352 us/op

Iteration   9: 14582.023 ±(99.9%) 15.488 us/op
                 runAlgorithm·p0.00:   14434.304 us/op
                 runAlgorithm·p0.50:   14532.608 us/op
                 runAlgorithm·p0.90:   14745.600 us/op
                 runAlgorithm·p0.95:   14827.520 us/op
                 runAlgorithm·p0.99:   15028.388 us/op
                 runAlgorithm·p0.999:  15155.200 us/op
                 runAlgorithm·p0.9999: 15155.200 us/op
                 runAlgorithm·p1.00:   15155.200 us/op

Iteration  10: 14583.456 ±(99.9%) 16.467 us/op
                 runAlgorithm·p0.00:   14434.304 us/op
                 runAlgorithm·p0.50:   14532.608 us/op
                 runAlgorithm·p0.90:   14745.600 us/op
                 runAlgorithm·p0.95:   14827.520 us/op
                 runAlgorithm·p0.99:   15138.816 us/op
                 runAlgorithm·p0.999:  15499.264 us/op
                 runAlgorithm·p0.9999: 15499.264 us/op
                 runAlgorithm·p1.00:   15499.264 us/op

Iteration  11: 14564.637 ±(99.9%) 16.628 us/op
                 runAlgorithm·p0.00:   14417.920 us/op
                 runAlgorithm·p0.50:   14516.224 us/op
                 runAlgorithm·p0.90:   14729.216 us/op
                 runAlgorithm·p0.95:   14761.984 us/op
                 runAlgorithm·p0.99:   15073.280 us/op
                 runAlgorithm·p0.999:  15908.864 us/op
                 runAlgorithm·p0.9999: 15908.864 us/op
                 runAlgorithm·p1.00:   15908.864 us/op

Iteration  12: 14561.226 ±(99.9%) 15.098 us/op
                 runAlgorithm·p0.00:   14417.920 us/op
                 runAlgorithm·p0.50:   14516.224 us/op
                 runAlgorithm·p0.90:   14729.216 us/op
                 runAlgorithm·p0.95:   14794.752 us/op
                 runAlgorithm·p0.99:   15011.676 us/op
                 runAlgorithm·p0.999:  15171.584 us/op
                 runAlgorithm·p0.9999: 15171.584 us/op
                 runAlgorithm·p1.00:   15171.584 us/op

Iteration  13: 14552.784 ±(99.9%) 16.130 us/op
                 runAlgorithm·p0.00:   14417.920 us/op
                 runAlgorithm·p0.50:   14499.840 us/op
                 runAlgorithm·p0.90:   14696.448 us/op
                 runAlgorithm·p0.95:   14745.600 us/op
                 runAlgorithm·p0.99:   15089.664 us/op
                 runAlgorithm·p0.999:  15515.648 us/op
                 runAlgorithm·p0.9999: 15515.648 us/op
                 runAlgorithm·p1.00:   15515.648 us/op

Iteration  14: 14556.147 ±(99.9%) 14.954 us/op
                 runAlgorithm·p0.00:   14417.920 us/op
                 runAlgorithm·p0.50:   14499.840 us/op
                 runAlgorithm·p0.90:   14712.832 us/op
                 runAlgorithm·p0.95:   14761.984 us/op
                 runAlgorithm·p0.99:   15026.094 us/op
                 runAlgorithm·p0.999:  15319.040 us/op
                 runAlgorithm·p0.9999: 15319.040 us/op
                 runAlgorithm·p1.00:   15319.040 us/op

Iteration  15: 14563.492 ±(99.9%) 15.725 us/op
                 runAlgorithm·p0.00:   14417.920 us/op
                 runAlgorithm·p0.50:   14516.224 us/op
                 runAlgorithm·p0.90:   14712.832 us/op
                 runAlgorithm·p0.95:   14771.814 us/op
                 runAlgorithm·p0.99:   15042.478 us/op
                 runAlgorithm·p0.999:  15663.104 us/op
                 runAlgorithm·p0.9999: 15663.104 us/op
                 runAlgorithm·p1.00:   15663.104 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  N = 10297
  mean =  14567.508 ±(99.9%) 4.126 us/op

  Histogram, us/op:
    [14000.000, 14250.000) = 0 
    [14250.000, 14500.000) = 4513 
    [14500.000, 14750.000) = 5093 
    [14750.000, 15000.000) = 553 
    [15000.000, 15250.000) = 111 
    [15250.000, 15500.000) = 22 
    [15500.000, 15750.000) = 2 
    [15750.000, 16000.000) = 1 
    [16000.000, 16250.000) = 1 
    [16250.000, 16500.000) = 0 
    [16500.000, 16750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  14401.536 us/op
     p(50.0000) =  14516.224 us/op
     p(90.0000) =  14712.832 us/op
     p(95.0000) =  14794.752 us/op
     p(99.0000) =  15056.896 us/op
     p(99.9000) =  15379.694 us/op
     p(99.9900) =  16613.160 us/op
     p(99.9990) =  16629.760 us/op
     p(99.9999) =  16629.760 us/op
    p(100.0000) =  16629.760 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 87.68% complete, ETA 01:01:10
# Fork: 1 of 1
# Warmup Iteration   1: 370.907 ±(99.9%) 8.802 us/op
# Warmup Iteration   2: 362.319 ±(99.9%) 6.010 us/op
# Warmup Iteration   3: 362.898 ±(99.9%) 7.283 us/op
# Warmup Iteration   4: 363.433 ±(99.9%) 7.664 us/op
# Warmup Iteration   5: 361.679 ±(99.9%) 5.805 us/op
Iteration   1: 364.389 ±(99.9%) 7.916 us/op
                 runAlgorithm·p0.00:   336.896 us/op
                 runAlgorithm·p0.50:   349.184 us/op
                 runAlgorithm·p0.90:   368.128 us/op
                 runAlgorithm·p0.95:   376.320 us/op
                 runAlgorithm·p0.99:   428.995 us/op
                 runAlgorithm·p0.999:  797.200 us/op
                 runAlgorithm·p0.9999: 19409.784 us/op
                 runAlgorithm·p1.00:   29261.824 us/op

Iteration   2: 362.411 ±(99.9%) 7.887 us/op
                 runAlgorithm·p0.00:   335.872 us/op
                 runAlgorithm·p0.50:   347.648 us/op
                 runAlgorithm·p0.90:   366.080 us/op
                 runAlgorithm·p0.95:   374.784 us/op
                 runAlgorithm·p0.99:   480.133 us/op
                 runAlgorithm·p0.999:  849.480 us/op
                 runAlgorithm·p0.9999: 22044.738 us/op
                 runAlgorithm·p1.00:   35389.440 us/op

Iteration   3: 362.618 ±(99.9%) 8.500 us/op
                 runAlgorithm·p0.00:   337.408 us/op
                 runAlgorithm·p0.50:   347.648 us/op
                 runAlgorithm·p0.90:   366.080 us/op
                 runAlgorithm·p0.95:   374.272 us/op
                 runAlgorithm·p0.99:   417.280 us/op
                 runAlgorithm·p0.999:  776.833 us/op
                 runAlgorithm·p0.9999: 25838.479 us/op
                 runAlgorithm·p1.00:   29753.344 us/op

Iteration   4: 359.930 ±(99.9%) 5.609 us/op
                 runAlgorithm·p0.00:   337.408 us/op
                 runAlgorithm·p0.50:   347.648 us/op
                 runAlgorithm·p0.90:   366.592 us/op
                 runAlgorithm·p0.95:   374.784 us/op
                 runAlgorithm·p0.99:   406.528 us/op
                 runAlgorithm·p0.999:  723.158 us/op
                 runAlgorithm·p0.9999: 15840.828 us/op
                 runAlgorithm·p1.00:   16547.840 us/op

Iteration   5: 360.631 ±(99.9%) 6.279 us/op
                 runAlgorithm·p0.00:   336.896 us/op
                 runAlgorithm·p0.50:   347.648 us/op
                 runAlgorithm·p0.90:   366.080 us/op
                 runAlgorithm·p0.95:   374.272 us/op
                 runAlgorithm·p0.99:   411.156 us/op
                 runAlgorithm·p0.999:  780.734 us/op
                 runAlgorithm·p0.9999: 13782.231 us/op
                 runAlgorithm·p1.00:   24215.552 us/op

Iteration   6: 362.783 ±(99.9%) 8.354 us/op
                 runAlgorithm·p0.00:   336.896 us/op
                 runAlgorithm·p0.50:   347.136 us/op
                 runAlgorithm·p0.90:   366.080 us/op
                 runAlgorithm·p0.95:   373.760 us/op
                 runAlgorithm·p0.99:   408.914 us/op
                 runAlgorithm·p0.999:  736.612 us/op
                 runAlgorithm·p0.9999: 25261.900 us/op
                 runAlgorithm·p1.00:   29065.216 us/op

Iteration   7: 363.121 ±(99.9%) 8.328 us/op
                 runAlgorithm·p0.00:   336.384 us/op
                 runAlgorithm·p0.50:   347.648 us/op
                 runAlgorithm·p0.90:   366.080 us/op
                 runAlgorithm·p0.95:   374.272 us/op
                 runAlgorithm·p0.99:   429.056 us/op
                 runAlgorithm·p0.999:  1165.084 us/op
                 runAlgorithm·p0.9999: 22353.697 us/op
                 runAlgorithm·p1.00:   31752.192 us/op

Iteration   8: 360.326 ±(99.9%) 6.002 us/op
                 runAlgorithm·p0.00:   336.896 us/op
                 runAlgorithm·p0.50:   347.648 us/op
                 runAlgorithm·p0.90:   366.080 us/op
                 runAlgorithm·p0.95:   373.760 us/op
                 runAlgorithm·p0.99:   407.757 us/op
                 runAlgorithm·p0.999:  790.682 us/op
                 runAlgorithm·p0.9999: 14381.744 us/op
                 runAlgorithm·p1.00:   21397.504 us/op

Iteration   9: 360.022 ±(99.9%) 6.483 us/op
                 runAlgorithm·p0.00:   336.896 us/op
                 runAlgorithm·p0.50:   347.136 us/op
                 runAlgorithm·p0.90:   365.568 us/op
                 runAlgorithm·p0.95:   373.760 us/op
                 runAlgorithm·p0.99:   409.364 us/op
                 runAlgorithm·p0.999:  804.282 us/op
                 runAlgorithm·p0.9999: 16635.042 us/op
                 runAlgorithm·p1.00:   28803.072 us/op

Iteration  10: 360.414 ±(99.9%) 5.808 us/op
                 runAlgorithm·p0.00:   337.408 us/op
                 runAlgorithm·p0.50:   348.160 us/op
                 runAlgorithm·p0.90:   366.592 us/op
                 runAlgorithm·p0.95:   374.784 us/op
                 runAlgorithm·p0.99:   405.504 us/op
                 runAlgorithm·p0.999:  1101.650 us/op
                 runAlgorithm·p0.9999: 13701.767 us/op
                 runAlgorithm·p1.00:   23232.512 us/op

Iteration  11: 361.416 ±(99.9%) 5.788 us/op
                 runAlgorithm·p0.00:   336.896 us/op
                 runAlgorithm·p0.50:   349.184 us/op
                 runAlgorithm·p0.90:   368.128 us/op
                 runAlgorithm·p0.95:   376.832 us/op
                 runAlgorithm·p0.99:   418.109 us/op
                 runAlgorithm·p0.999:  726.364 us/op
                 runAlgorithm·p0.9999: 11847.041 us/op
                 runAlgorithm·p1.00:   24739.840 us/op

Iteration  12: 362.054 ±(99.9%) 6.008 us/op
                 runAlgorithm·p0.00:   336.896 us/op
                 runAlgorithm·p0.50:   349.184 us/op
                 runAlgorithm·p0.90:   368.640 us/op
                 runAlgorithm·p0.95:   377.856 us/op
                 runAlgorithm·p0.99:   429.619 us/op
                 runAlgorithm·p0.999:  731.290 us/op
                 runAlgorithm·p0.9999: 14527.676 us/op
                 runAlgorithm·p1.00:   22216.704 us/op

Iteration  13: 361.061 ±(99.9%) 6.592 us/op
                 runAlgorithm·p0.00:   337.408 us/op
                 runAlgorithm·p0.50:   347.648 us/op
                 runAlgorithm·p0.90:   366.080 us/op
                 runAlgorithm·p0.95:   374.272 us/op
                 runAlgorithm·p0.99:   406.195 us/op
                 runAlgorithm·p0.999:  1106.627 us/op
                 runAlgorithm·p0.9999: 15859.622 us/op
                 runAlgorithm·p1.00:   23724.032 us/op

Iteration  14: 360.934 ±(99.9%) 6.650 us/op
                 runAlgorithm·p0.00:   336.384 us/op
                 runAlgorithm·p0.50:   347.648 us/op
                 runAlgorithm·p0.90:   366.592 us/op
                 runAlgorithm·p0.95:   375.296 us/op
                 runAlgorithm·p0.99:   415.616 us/op
                 runAlgorithm·p0.999:  732.365 us/op
                 runAlgorithm·p0.9999: 19724.452 us/op
                 runAlgorithm·p1.00:   25100.288 us/op

Iteration  15: 361.630 ±(99.9%) 6.972 us/op
                 runAlgorithm·p0.00:   337.408 us/op
                 runAlgorithm·p0.50:   348.672 us/op
                 runAlgorithm·p0.90:   368.128 us/op
                 runAlgorithm·p0.95:   376.832 us/op
                 runAlgorithm·p0.99:   422.799 us/op
                 runAlgorithm·p0.999:  1332.787 us/op
                 runAlgorithm·p0.9999: 15773.843 us/op
                 runAlgorithm·p1.00:   36110.336 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 414378
  mean =    361.578 ±(99.9%) 1.793 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 413988 
    [ 2500.000,  5000.000) = 0 
    [ 5000.000,  7500.000) = 108 
    [ 7500.000, 10000.000) = 151 
    [10000.000, 12500.000) = 52 
    [12500.000, 15000.000) = 28 
    [15000.000, 17500.000) = 11 
    [17500.000, 20000.000) = 10 
    [20000.000, 22500.000) = 7 
    [22500.000, 25000.000) = 12 
    [25000.000, 27500.000) = 3 
    [27500.000, 30000.000) = 5 
    [30000.000, 32500.000) = 1 
    [32500.000, 35000.000) = 0 
    [35000.000, 37500.000) = 2 

  Percentiles, us/op:
      p(0.0000) =    335.872 us/op
     p(50.0000) =    348.160 us/op
     p(90.0000) =    366.592 us/op
     p(95.0000) =    375.296 us/op
     p(99.0000) =    417.792 us/op
     p(99.9000) =    773.368 us/op
     p(99.9900) =  16824.123 us/op
     p(99.9990) =  29748.632 us/op
     p(99.9999) =  36110.336 us/op
    p(100.0000) =  36110.336 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 88.40% complete, ETA 00:57:34
# Fork: 1 of 1
# Warmup Iteration   1: 36718.404 ±(99.9%) 1164.582 us/op
# Warmup Iteration   2: 36406.082 ±(99.9%) 710.203 us/op
# Warmup Iteration   3: 36451.123 ±(99.9%) 807.768 us/op
# Warmup Iteration   4: 36412.040 ±(99.9%) 817.414 us/op
# Warmup Iteration   5: 36402.031 ±(99.9%) 730.738 us/op
Iteration   1: 36762.564 ±(99.9%) 912.645 us/op
                 runAlgorithm·p0.00:   34865.152 us/op
                 runAlgorithm·p0.50:   35454.976 us/op
                 runAlgorithm·p0.90:   36785.357 us/op
                 runAlgorithm·p0.95:   47647.949 us/op
                 runAlgorithm·p0.99:   58969.948 us/op
                 runAlgorithm·p0.999:  64487.424 us/op
                 runAlgorithm·p0.9999: 64487.424 us/op
                 runAlgorithm·p1.00:   64487.424 us/op

Iteration   2: 36768.587 ±(99.9%) 895.415 us/op
                 runAlgorithm·p0.00:   34930.688 us/op
                 runAlgorithm·p0.50:   35454.976 us/op
                 runAlgorithm·p0.90:   36333.158 us/op
                 runAlgorithm·p0.95:   46501.069 us/op
                 runAlgorithm·p0.99:   58884.751 us/op
                 runAlgorithm·p0.999:  60424.192 us/op
                 runAlgorithm·p0.9999: 60424.192 us/op
                 runAlgorithm·p1.00:   60424.192 us/op

Iteration   3: 36574.589 ±(99.9%) 763.238 us/op
                 runAlgorithm·p0.00:   34930.688 us/op
                 runAlgorithm·p0.50:   35454.976 us/op
                 runAlgorithm·p0.90:   36569.088 us/op
                 runAlgorithm·p0.95:   45203.456 us/op
                 runAlgorithm·p0.99:   56049.664 us/op
                 runAlgorithm·p0.999:  61865.984 us/op
                 runAlgorithm·p0.9999: 61865.984 us/op
                 runAlgorithm·p1.00:   61865.984 us/op

Iteration   4: 36201.517 ±(99.9%) 669.700 us/op
                 runAlgorithm·p0.00:   34799.616 us/op
                 runAlgorithm·p0.50:   35192.832 us/op
                 runAlgorithm·p0.90:   35802.317 us/op
                 runAlgorithm·p0.95:   44125.389 us/op
                 runAlgorithm·p0.99:   55503.749 us/op
                 runAlgorithm·p0.999:  58851.328 us/op
                 runAlgorithm·p0.9999: 58851.328 us/op
                 runAlgorithm·p1.00:   58851.328 us/op

Iteration   5: 36621.421 ±(99.9%) 984.130 us/op
                 runAlgorithm·p0.00:   34799.616 us/op
                 runAlgorithm·p0.50:   35323.904 us/op
                 runAlgorithm·p0.90:   36372.480 us/op
                 runAlgorithm·p0.95:   44839.731 us/op
                 runAlgorithm·p0.99:   68458.906 us/op
                 runAlgorithm·p0.999:  74448.896 us/op
                 runAlgorithm·p0.9999: 74448.896 us/op
                 runAlgorithm·p1.00:   74448.896 us/op

Iteration   6: 36314.542 ±(99.9%) 593.122 us/op
                 runAlgorithm·p0.00:   34930.688 us/op
                 runAlgorithm·p0.50:   35389.440 us/op
                 runAlgorithm·p0.90:   36864.000 us/op
                 runAlgorithm·p0.95:   44023.808 us/op
                 runAlgorithm·p0.99:   50157.978 us/op
                 runAlgorithm·p0.999:  53411.840 us/op
                 runAlgorithm·p0.9999: 53411.840 us/op
                 runAlgorithm·p1.00:   53411.840 us/op

Iteration   7: 36658.150 ±(99.9%) 956.162 us/op
                 runAlgorithm·p0.00:   34865.152 us/op
                 runAlgorithm·p0.50:   35258.368 us/op
                 runAlgorithm·p0.90:   36713.267 us/op
                 runAlgorithm·p0.95:   48273.818 us/op
                 runAlgorithm·p0.99:   62483.333 us/op
                 runAlgorithm·p0.999:  63963.136 us/op
                 runAlgorithm·p0.9999: 63963.136 us/op
                 runAlgorithm·p1.00:   63963.136 us/op

Iteration   8: 36404.176 ±(99.9%) 768.002 us/op
                 runAlgorithm·p0.00:   34865.152 us/op
                 runAlgorithm·p0.50:   35323.904 us/op
                 runAlgorithm·p0.90:   36162.765 us/op
                 runAlgorithm·p0.95:   44407.194 us/op
                 runAlgorithm·p0.99:   56025.416 us/op
                 runAlgorithm·p0.999:  68550.656 us/op
                 runAlgorithm·p0.9999: 68550.656 us/op
                 runAlgorithm·p1.00:   68550.656 us/op

Iteration   9: 36076.977 ±(99.9%) 525.693 us/op
                 runAlgorithm·p0.00:   34930.688 us/op
                 runAlgorithm·p0.50:   35258.368 us/op
                 runAlgorithm·p0.90:   36149.658 us/op
                 runAlgorithm·p0.95:   42958.848 us/op
                 runAlgorithm·p0.99:   48313.139 us/op
                 runAlgorithm·p0.999:  50003.968 us/op
                 runAlgorithm·p0.9999: 50003.968 us/op
                 runAlgorithm·p1.00:   50003.968 us/op

Iteration  10: 36308.131 ±(99.9%) 709.181 us/op
                 runAlgorithm·p0.00:   34865.152 us/op
                 runAlgorithm·p0.50:   35258.368 us/op
                 runAlgorithm·p0.90:   37152.358 us/op
                 runAlgorithm·p0.95:   43853.414 us/op
                 runAlgorithm·p0.99:   53046.804 us/op
                 runAlgorithm·p0.999:  63897.600 us/op
                 runAlgorithm·p0.9999: 63897.600 us/op
                 runAlgorithm·p1.00:   63897.600 us/op

Iteration  11: 36305.282 ±(99.9%) 752.963 us/op
                 runAlgorithm·p0.00:   34865.152 us/op
                 runAlgorithm·p0.50:   35258.368 us/op
                 runAlgorithm·p0.90:   35802.317 us/op
                 runAlgorithm·p0.95:   43837.030 us/op
                 runAlgorithm·p0.99:   53348.925 us/op
                 runAlgorithm·p0.999:  66322.432 us/op
                 runAlgorithm·p0.9999: 66322.432 us/op
                 runAlgorithm·p1.00:   66322.432 us/op

Iteration  12: 36353.653 ±(99.9%) 717.393 us/op
                 runAlgorithm·p0.00:   34865.152 us/op
                 runAlgorithm·p0.50:   35323.904 us/op
                 runAlgorithm·p0.90:   36621.517 us/op
                 runAlgorithm·p0.95:   44420.301 us/op
                 runAlgorithm·p0.99:   51081.380 us/op
                 runAlgorithm·p0.999:  65798.144 us/op
                 runAlgorithm·p0.9999: 65798.144 us/op
                 runAlgorithm·p1.00:   65798.144 us/op

Iteration  13: 36426.577 ±(99.9%) 654.608 us/op
                 runAlgorithm·p0.00:   34865.152 us/op
                 runAlgorithm·p0.50:   35389.440 us/op
                 runAlgorithm·p0.90:   36621.517 us/op
                 runAlgorithm·p0.95:   45259.162 us/op
                 runAlgorithm·p0.99:   48729.948 us/op
                 runAlgorithm·p0.999:  58130.432 us/op
                 runAlgorithm·p0.9999: 58130.432 us/op
                 runAlgorithm·p1.00:   58130.432 us/op

Iteration  14: 36312.168 ±(99.9%) 585.627 us/op
                 runAlgorithm·p0.00:   34930.688 us/op
                 runAlgorithm·p0.50:   35389.440 us/op
                 runAlgorithm·p0.90:   36660.838 us/op
                 runAlgorithm·p0.95:   44171.264 us/op
                 runAlgorithm·p0.99:   48414.720 us/op
                 runAlgorithm·p0.999:  53542.912 us/op
                 runAlgorithm·p0.9999: 53542.912 us/op
                 runAlgorithm·p1.00:   53542.912 us/op

Iteration  15: 36272.989 ±(99.9%) 638.621 us/op
                 runAlgorithm·p0.00:   34865.152 us/op
                 runAlgorithm·p0.50:   35323.904 us/op
                 runAlgorithm·p0.90:   36470.784 us/op
                 runAlgorithm·p0.95:   44249.907 us/op
                 runAlgorithm·p0.99:   52116.193 us/op
                 runAlgorithm·p0.999:  55902.208 us/op
                 runAlgorithm·p0.9999: 55902.208 us/op
                 runAlgorithm·p1.00:   55902.208 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 4122
  mean =  36422.975 ±(99.9%) 192.334 us/op

  Histogram, us/op:
    [30000.000, 35000.000) = 316 
    [35000.000, 40000.000) = 3416 
    [40000.000, 45000.000) = 208 
    [45000.000, 50000.000) = 115 
    [50000.000, 55000.000) = 26 
    [55000.000, 60000.000) = 26 
    [60000.000, 65000.000) = 8 
    [65000.000, 70000.000) = 6 
    [70000.000, 75000.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  34799.616 us/op
     p(50.0000) =  35323.904 us/op
     p(90.0000) =  36438.016 us/op
     p(95.0000) =  44423.578 us/op
     p(99.0000) =  55035.167 us/op
     p(99.9000) =  68046.684 us/op
     p(99.9900) =  74448.896 us/op
     p(99.9990) =  74448.896 us/op
     p(99.9999) =  74448.896 us/op
    p(100.0000) =  74448.896 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 89.13% complete, ETA 00:53:59
# Fork: 1 of 1
# Warmup Iteration   1: 3815418.539 ±(99.9%) 2363869.041 us/op
# Warmup Iteration   2: 11391729.664 us/op
# Warmup Iteration   3: 11861491.712 us/op
# Warmup Iteration   4: 11844714.496 us/op
# Warmup Iteration   5: 11878268.928 us/op
Iteration   1: 11811160.064 us/op
                 runAlgorithm·p0.00:   11811160.064 us/op
                 runAlgorithm·p0.50:   11811160.064 us/op
                 runAlgorithm·p0.90:   11811160.064 us/op
                 runAlgorithm·p0.95:   11811160.064 us/op
                 runAlgorithm·p0.99:   11811160.064 us/op
                 runAlgorithm·p0.999:  11811160.064 us/op
                 runAlgorithm·p0.9999: 11811160.064 us/op
                 runAlgorithm·p1.00:   11811160.064 us/op

Iteration   2: 11827937.280 us/op
                 runAlgorithm·p0.00:   11827937.280 us/op
                 runAlgorithm·p0.50:   11827937.280 us/op
                 runAlgorithm·p0.90:   11827937.280 us/op
                 runAlgorithm·p0.95:   11827937.280 us/op
                 runAlgorithm·p0.99:   11827937.280 us/op
                 runAlgorithm·p0.999:  11827937.280 us/op
                 runAlgorithm·p0.9999: 11827937.280 us/op
                 runAlgorithm·p1.00:   11827937.280 us/op

Iteration   3: 11827937.280 us/op
                 runAlgorithm·p0.00:   11827937.280 us/op
                 runAlgorithm·p0.50:   11827937.280 us/op
                 runAlgorithm·p0.90:   11827937.280 us/op
                 runAlgorithm·p0.95:   11827937.280 us/op
                 runAlgorithm·p0.99:   11827937.280 us/op
                 runAlgorithm·p0.999:  11827937.280 us/op
                 runAlgorithm·p0.9999: 11827937.280 us/op
                 runAlgorithm·p1.00:   11827937.280 us/op

Iteration   4: 11827937.280 us/op
                 runAlgorithm·p0.00:   11827937.280 us/op
                 runAlgorithm·p0.50:   11827937.280 us/op
                 runAlgorithm·p0.90:   11827937.280 us/op
                 runAlgorithm·p0.95:   11827937.280 us/op
                 runAlgorithm·p0.99:   11827937.280 us/op
                 runAlgorithm·p0.999:  11827937.280 us/op
                 runAlgorithm·p0.9999: 11827937.280 us/op
                 runAlgorithm·p1.00:   11827937.280 us/op

Iteration   5: 11794382.848 us/op
                 runAlgorithm·p0.00:   11794382.848 us/op
                 runAlgorithm·p0.50:   11794382.848 us/op
                 runAlgorithm·p0.90:   11794382.848 us/op
                 runAlgorithm·p0.95:   11794382.848 us/op
                 runAlgorithm·p0.99:   11794382.848 us/op
                 runAlgorithm·p0.999:  11794382.848 us/op
                 runAlgorithm·p0.9999: 11794382.848 us/op
                 runAlgorithm·p1.00:   11794382.848 us/op

Iteration   6: 11811160.064 us/op
                 runAlgorithm·p0.00:   11811160.064 us/op
                 runAlgorithm·p0.50:   11811160.064 us/op
                 runAlgorithm·p0.90:   11811160.064 us/op
                 runAlgorithm·p0.95:   11811160.064 us/op
                 runAlgorithm·p0.99:   11811160.064 us/op
                 runAlgorithm·p0.999:  11811160.064 us/op
                 runAlgorithm·p0.9999: 11811160.064 us/op
                 runAlgorithm·p1.00:   11811160.064 us/op

Iteration   7: 11777605.632 us/op
                 runAlgorithm·p0.00:   11777605.632 us/op
                 runAlgorithm·p0.50:   11777605.632 us/op
                 runAlgorithm·p0.90:   11777605.632 us/op
                 runAlgorithm·p0.95:   11777605.632 us/op
                 runAlgorithm·p0.99:   11777605.632 us/op
                 runAlgorithm·p0.999:  11777605.632 us/op
                 runAlgorithm·p0.9999: 11777605.632 us/op
                 runAlgorithm·p1.00:   11777605.632 us/op

Iteration   8: 11794382.848 us/op
                 runAlgorithm·p0.00:   11794382.848 us/op
                 runAlgorithm·p0.50:   11794382.848 us/op
                 runAlgorithm·p0.90:   11794382.848 us/op
                 runAlgorithm·p0.95:   11794382.848 us/op
                 runAlgorithm·p0.99:   11794382.848 us/op
                 runAlgorithm·p0.999:  11794382.848 us/op
                 runAlgorithm·p0.9999: 11794382.848 us/op
                 runAlgorithm·p1.00:   11794382.848 us/op

Iteration   9: 11794382.848 us/op
                 runAlgorithm·p0.00:   11794382.848 us/op
                 runAlgorithm·p0.50:   11794382.848 us/op
                 runAlgorithm·p0.90:   11794382.848 us/op
                 runAlgorithm·p0.95:   11794382.848 us/op
                 runAlgorithm·p0.99:   11794382.848 us/op
                 runAlgorithm·p0.999:  11794382.848 us/op
                 runAlgorithm·p0.9999: 11794382.848 us/op
                 runAlgorithm·p1.00:   11794382.848 us/op

Iteration  10: 11777605.632 us/op
                 runAlgorithm·p0.00:   11777605.632 us/op
                 runAlgorithm·p0.50:   11777605.632 us/op
                 runAlgorithm·p0.90:   11777605.632 us/op
                 runAlgorithm·p0.95:   11777605.632 us/op
                 runAlgorithm·p0.99:   11777605.632 us/op
                 runAlgorithm·p0.999:  11777605.632 us/op
                 runAlgorithm·p0.9999: 11777605.632 us/op
                 runAlgorithm·p1.00:   11777605.632 us/op

Iteration  11: 11811160.064 us/op
                 runAlgorithm·p0.00:   11811160.064 us/op
                 runAlgorithm·p0.50:   11811160.064 us/op
                 runAlgorithm·p0.90:   11811160.064 us/op
                 runAlgorithm·p0.95:   11811160.064 us/op
                 runAlgorithm·p0.99:   11811160.064 us/op
                 runAlgorithm·p0.999:  11811160.064 us/op
                 runAlgorithm·p0.9999: 11811160.064 us/op
                 runAlgorithm·p1.00:   11811160.064 us/op

Iteration  12: 11861491.712 us/op
                 runAlgorithm·p0.00:   11861491.712 us/op
                 runAlgorithm·p0.50:   11861491.712 us/op
                 runAlgorithm·p0.90:   11861491.712 us/op
                 runAlgorithm·p0.95:   11861491.712 us/op
                 runAlgorithm·p0.99:   11861491.712 us/op
                 runAlgorithm·p0.999:  11861491.712 us/op
                 runAlgorithm·p0.9999: 11861491.712 us/op
                 runAlgorithm·p1.00:   11861491.712 us/op

Iteration  13: 11962155.008 us/op
                 runAlgorithm·p0.00:   11962155.008 us/op
                 runAlgorithm·p0.50:   11962155.008 us/op
                 runAlgorithm·p0.90:   11962155.008 us/op
                 runAlgorithm·p0.95:   11962155.008 us/op
                 runAlgorithm·p0.99:   11962155.008 us/op
                 runAlgorithm·p0.999:  11962155.008 us/op
                 runAlgorithm·p0.9999: 11962155.008 us/op
                 runAlgorithm·p1.00:   11962155.008 us/op

Iteration  14: 11878268.928 us/op
                 runAlgorithm·p0.00:   11878268.928 us/op
                 runAlgorithm·p0.50:   11878268.928 us/op
                 runAlgorithm·p0.90:   11878268.928 us/op
                 runAlgorithm·p0.95:   11878268.928 us/op
                 runAlgorithm·p0.99:   11878268.928 us/op
                 runAlgorithm·p0.999:  11878268.928 us/op
                 runAlgorithm·p0.9999: 11878268.928 us/op
                 runAlgorithm·p1.00:   11878268.928 us/op

Iteration  15: 11811160.064 us/op
                 runAlgorithm·p0.00:   11811160.064 us/op
                 runAlgorithm·p0.50:   11811160.064 us/op
                 runAlgorithm·p0.90:   11811160.064 us/op
                 runAlgorithm·p0.95:   11811160.064 us/op
                 runAlgorithm·p0.99:   11811160.064 us/op
                 runAlgorithm·p0.999:  11811160.064 us/op
                 runAlgorithm·p0.9999: 11811160.064 us/op
                 runAlgorithm·p1.00:   11811160.064 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean = 11824581.837 ±(99.9%) 50366.615 us/op

  Histogram, us/op:
    [11700000.000, 11725000.000) = 0 
    [11725000.000, 11750000.000) = 0 
    [11750000.000, 11775000.000) = 0 
    [11775000.000, 11800000.000) = 5 
    [11800000.000, 11825000.000) = 4 
    [11825000.000, 11850000.000) = 3 
    [11850000.000, 11875000.000) = 1 
    [11875000.000, 11900000.000) = 1 
    [11900000.000, 11925000.000) = 0 
    [11925000.000, 11950000.000) = 0 
    [11950000.000, 11975000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 11777605.632 us/op
     p(50.0000) = 11811160.064 us/op
     p(90.0000) = 11911823.360 us/op
     p(95.0000) = 11962155.008 us/op
     p(99.0000) = 11962155.008 us/op
     p(99.9000) = 11962155.008 us/op
     p(99.9900) = 11962155.008 us/op
     p(99.9990) = 11962155.008 us/op
     p(99.9999) = 11962155.008 us/op
    p(100.0000) = 11962155.008 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 89.85% complete, ETA 00:50:27
# Fork: 1 of 1
# Warmup Iteration   1: 1902.606 ±(99.9%) 13.563 us/op
# Warmup Iteration   2: 1895.615 ±(99.9%) 1.951 us/op
# Warmup Iteration   3: 1896.507 ±(99.9%) 2.048 us/op
# Warmup Iteration   4: 1894.597 ±(99.9%) 2.127 us/op
# Warmup Iteration   5: 1895.676 ±(99.9%) 2.151 us/op
Iteration   1: 1898.199 ±(99.9%) 2.189 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1859.584 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1888.256 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1923.072 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1955.840 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2093.793 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2316.173 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3469.312 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3469.312 us/op

Iteration   2: 1896.771 ±(99.9%) 2.327 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1857.536 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1886.208 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1923.072 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1957.888 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2101.248 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2347.459 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3497.984 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3497.984 us/op

Iteration   3: 1894.937 ±(99.9%) 2.208 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1857.536 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1884.160 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1921.024 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1949.696 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2097.152 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2287.002 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3518.464 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3518.464 us/op

Iteration   4: 1897.810 ±(99.9%) 2.369 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1857.536 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1886.208 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1921.024 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1961.267 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2110.792 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2330.345 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3543.040 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3543.040 us/op

Iteration   5: 1893.166 ±(99.9%) 2.135 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1857.536 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1884.160 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1912.832 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1931.264 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2086.912 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2328.494 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3248.128 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3248.128 us/op

Iteration   6: 1891.371 ±(99.9%) 2.159 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1857.536 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1882.112 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1908.736 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1930.752 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2086.912 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2293.760 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3637.248 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3637.248 us/op

Iteration   7: 2266.447 ±(99.9%) 2.226 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2256.896 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2285.568 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2314.240 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2469.888 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2678.784 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2691.072 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2691.072 us/op

Iteration   8: 2266.854 ±(99.9%) 2.488 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2256.896 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2285.568 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2322.432 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2490.040 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2726.265 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2818.048 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2818.048 us/op

Iteration   9: 2272.140 ±(99.9%) 2.738 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2260.992 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2310.144 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2372.403 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2506.752 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2723.840 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2945.024 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2945.024 us/op

Iteration  10: 2268.117 ±(99.9%) 2.478 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2256.896 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2293.760 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2374.451 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2490.368 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2681.094 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2842.624 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2842.624 us/op

Iteration  11: 2267.174 ±(99.9%) 2.345 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2256.896 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2289.664 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2330.624 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2478.080 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2695.922 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2752.512 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2752.512 us/op

Iteration  12: 2267.607 ±(99.9%) 2.439 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2256.896 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2285.568 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2329.190 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2473.984 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2767.417 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3039.232 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3039.232 us/op

Iteration  13: 2273.295 ±(99.9%) 3.042 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2260.992 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2297.856 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2355.200 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2494.464 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2746.794 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 4456.448 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   4456.448 us/op

Iteration  14: 2272.013 ±(99.9%) 2.574 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2260.992 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2293.760 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2351.104 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2506.752 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2731.237 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2912.256 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2912.256 us/op

Iteration  15: 2271.819 ±(99.9%) 2.471 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2260.992 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2297.856 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2342.912 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2490.368 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2753.339 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2850.816 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2850.816 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  N = 71255
  mean =   2103.395 ±(99.9%) 2.374 us/op

  Histogram, us/op:
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 30441 
    [2000.000, 2250.000) = 14538 
    [2250.000, 2500.000) = 25960 
    [2500.000, 2750.000) = 288 
    [2750.000, 3000.000) = 20 
    [3000.000, 3250.000) = 2 
    [3250.000, 3500.000) = 2 
    [3500.000, 3750.000) = 3 
    [3750.000, 4000.000) = 0 
    [4000.000, 4250.000) = 0 
    [4250.000, 4500.000) = 1 
    [4500.000, 4750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   1857.536 us/op
     p(50.0000) =   2236.416 us/op
     p(90.0000) =   2277.376 us/op
     p(95.0000) =   2297.856 us/op
     p(99.0000) =   2461.696 us/op
     p(99.9000) =   2669.543 us/op
     p(99.9900) =   3221.891 us/op
     p(99.9990) =   4456.448 us/op
     p(99.9999) =   4456.448 us/op
    p(100.0000) =   4456.448 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 90.58% complete, ETA 00:46:51
# Fork: 1 of 1
# Warmup Iteration   1: 47073.001 ±(99.9%) 216.197 us/op
# Warmup Iteration   2: 46990.543 ±(99.9%) 122.040 us/op
# Warmup Iteration   3: 46960.698 ±(99.9%) 44.746 us/op
# Warmup Iteration   4: 46927.776 ±(99.9%) 38.893 us/op
# Warmup Iteration   5: 46934.853 ±(99.9%) 35.441 us/op
Iteration   1: 46928.699 ±(99.9%) 39.173 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46923.776 us/op
                 extractOperationOutOfLoop·p0.90:   47185.920 us/op
                 extractOperationOutOfLoop·p0.95:   47251.456 us/op
                 extractOperationOutOfLoop·p0.99:   47448.064 us/op
                 extractOperationOutOfLoop·p0.999:  47841.280 us/op
                 extractOperationOutOfLoop·p0.9999: 47841.280 us/op
                 extractOperationOutOfLoop·p1.00:   47841.280 us/op

Iteration   2: 46977.620 ±(99.9%) 85.322 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46923.776 us/op
                 extractOperationOutOfLoop·p0.90:   47251.456 us/op
                 extractOperationOutOfLoop·p0.95:   47467.725 us/op
                 extractOperationOutOfLoop·p0.99:   48141.435 us/op
                 extractOperationOutOfLoop·p0.999:  51249.152 us/op
                 extractOperationOutOfLoop·p0.9999: 51249.152 us/op
                 extractOperationOutOfLoop·p1.00:   51249.152 us/op

Iteration   3: 46973.313 ±(99.9%) 61.692 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46923.776 us/op
                 extractOperationOutOfLoop·p0.90:   47251.456 us/op
                 extractOperationOutOfLoop·p0.95:   47579.136 us/op
                 extractOperationOutOfLoop·p0.99:   48113.910 us/op
                 extractOperationOutOfLoop·p0.999:  48955.392 us/op
                 extractOperationOutOfLoop·p0.9999: 48955.392 us/op
                 extractOperationOutOfLoop·p1.00:   48955.392 us/op

Iteration   4: 46977.312 ±(99.9%) 80.773 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46923.776 us/op
                 extractOperationOutOfLoop·p0.90:   47382.528 us/op
                 extractOperationOutOfLoop·p0.95:   47513.600 us/op
                 extractOperationOutOfLoop·p0.99:   48001.188 us/op
                 extractOperationOutOfLoop·p0.999:  50724.864 us/op
                 extractOperationOutOfLoop·p0.9999: 50724.864 us/op
                 extractOperationOutOfLoop·p1.00:   50724.864 us/op

Iteration   5: 46936.391 ±(99.9%) 42.472 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46923.776 us/op
                 extractOperationOutOfLoop·p0.90:   47185.920 us/op
                 extractOperationOutOfLoop·p0.95:   47316.992 us/op
                 extractOperationOutOfLoop·p0.99:   47626.322 us/op
                 extractOperationOutOfLoop·p0.999:  47841.280 us/op
                 extractOperationOutOfLoop·p0.9999: 47841.280 us/op
                 extractOperationOutOfLoop·p1.00:   47841.280 us/op

Iteration   6: 46925.930 ±(99.9%) 39.576 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46923.776 us/op
                 extractOperationOutOfLoop·p0.90:   47120.384 us/op
                 extractOperationOutOfLoop·p0.95:   47316.992 us/op
                 extractOperationOutOfLoop·p0.99:   47560.786 us/op
                 extractOperationOutOfLoop·p0.999:  47644.672 us/op
                 extractOperationOutOfLoop·p0.9999: 47644.672 us/op
                 extractOperationOutOfLoop·p1.00:   47644.672 us/op

Iteration   7: 46912.445 ±(99.9%) 34.834 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46923.776 us/op
                 extractOperationOutOfLoop·p0.90:   47120.384 us/op
                 extractOperationOutOfLoop·p0.95:   47120.384 us/op
                 extractOperationOutOfLoop·p0.99:   47549.645 us/op
                 extractOperationOutOfLoop·p0.999:  47579.136 us/op
                 extractOperationOutOfLoop·p0.9999: 47579.136 us/op
                 extractOperationOutOfLoop·p1.00:   47579.136 us/op

Iteration   8: 46907.239 ±(99.9%) 38.493 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46858.240 us/op
                 extractOperationOutOfLoop·p0.90:   47120.384 us/op
                 extractOperationOutOfLoop·p0.95:   47251.456 us/op
                 extractOperationOutOfLoop·p0.99:   47513.600 us/op
                 extractOperationOutOfLoop·p0.999:  47579.136 us/op
                 extractOperationOutOfLoop·p0.9999: 47579.136 us/op
                 extractOperationOutOfLoop·p1.00:   47579.136 us/op

Iteration   9: 46904.176 ±(99.9%) 36.971 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46858.240 us/op
                 extractOperationOutOfLoop·p0.90:   47120.384 us/op
                 extractOperationOutOfLoop·p0.95:   47316.992 us/op
                 extractOperationOutOfLoop·p0.99:   47503.770 us/op
                 extractOperationOutOfLoop·p0.999:  47579.136 us/op
                 extractOperationOutOfLoop·p0.9999: 47579.136 us/op
                 extractOperationOutOfLoop·p1.00:   47579.136 us/op

Iteration  10: 46912.699 ±(99.9%) 40.307 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46858.240 us/op
                 extractOperationOutOfLoop·p0.90:   47159.706 us/op
                 extractOperationOutOfLoop·p0.95:   47316.992 us/op
                 extractOperationOutOfLoop·p0.99:   47504.425 us/op
                 extractOperationOutOfLoop·p0.999:  47644.672 us/op
                 extractOperationOutOfLoop·p0.9999: 47644.672 us/op
                 extractOperationOutOfLoop·p1.00:   47644.672 us/op

Iteration  11: 46905.708 ±(99.9%) 36.627 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46858.240 us/op
                 extractOperationOutOfLoop·p0.90:   47120.384 us/op
                 extractOperationOutOfLoop·p0.95:   47251.456 us/op
                 extractOperationOutOfLoop·p0.99:   47493.939 us/op
                 extractOperationOutOfLoop·p0.999:  47513.600 us/op
                 extractOperationOutOfLoop·p0.9999: 47513.600 us/op
                 extractOperationOutOfLoop·p1.00:   47513.600 us/op

Iteration  12: 46905.401 ±(99.9%) 39.526 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46858.240 us/op
                 extractOperationOutOfLoop·p0.90:   47120.384 us/op
                 extractOperationOutOfLoop·p0.95:   47316.992 us/op
                 extractOperationOutOfLoop·p0.99:   47559.475 us/op
                 extractOperationOutOfLoop·p0.999:  47710.208 us/op
                 extractOperationOutOfLoop·p0.9999: 47710.208 us/op
                 extractOperationOutOfLoop·p1.00:   47710.208 us/op

Iteration  13: 46905.708 ±(99.9%) 37.866 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46858.240 us/op
                 extractOperationOutOfLoop·p0.90:   47120.384 us/op
                 extractOperationOutOfLoop·p0.95:   47316.992 us/op
                 extractOperationOutOfLoop·p0.99:   47513.600 us/op
                 extractOperationOutOfLoop·p0.999:  47710.208 us/op
                 extractOperationOutOfLoop·p0.9999: 47710.208 us/op
                 extractOperationOutOfLoop·p1.00:   47710.208 us/op

Iteration  14: 46886.108 ±(99.9%) 35.839 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46858.240 us/op
                 extractOperationOutOfLoop·p0.90:   47120.384 us/op
                 extractOperationOutOfLoop·p0.95:   47202.304 us/op
                 extractOperationOutOfLoop·p0.99:   47372.698 us/op
                 extractOperationOutOfLoop·p0.999:  47775.744 us/op
                 extractOperationOutOfLoop·p0.9999: 47775.744 us/op
                 extractOperationOutOfLoop·p1.00:   47775.744 us/op

Iteration  15: 46884.883 ±(99.9%) 37.740 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46858.240 us/op
                 extractOperationOutOfLoop·p0.90:   47120.384 us/op
                 extractOperationOutOfLoop·p0.95:   47185.920 us/op
                 extractOperationOutOfLoop·p0.99:   47438.234 us/op
                 extractOperationOutOfLoop·p0.999:  47906.816 us/op
                 extractOperationOutOfLoop·p0.9999: 47906.816 us/op
                 extractOperationOutOfLoop·p1.00:   47906.816 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  N = 3203
  mean =  46922.855 ±(99.9%) 12.435 us/op

  Histogram, us/op:
    [46000.000, 46500.000) = 0 
    [46500.000, 47000.000) = 2592 
    [47000.000, 47500.000) = 552 
    [47500.000, 48000.000) = 53 
    [48000.000, 48500.000) = 3 
    [48500.000, 49000.000) = 1 
    [49000.000, 49500.000) = 0 
    [49500.000, 50000.000) = 0 
    [50000.000, 50500.000) = 0 
    [50500.000, 51000.000) = 1 
    [51000.000, 51500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  46661.632 us/op
     p(50.0000) =  46858.240 us/op
     p(90.0000) =  47120.384 us/op
     p(95.0000) =  47316.992 us/op
     p(99.0000) =  47579.136 us/op
     p(99.9000) =  48794.960 us/op
     p(99.9900) =  51249.152 us/op
     p(99.9990) =  51249.152 us/op
     p(99.9999) =  51249.152 us/op
    p(100.0000) =  51249.152 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 91.30% complete, ETA 00:43:14
# Fork: 1 of 1
# Warmup Iteration   1: 1711625.557 ±(99.9%) 60822.052 us/op
# Warmup Iteration   2: 1702537.899 ±(99.9%) 6874.928 us/op
# Warmup Iteration   3: 1700790.272 ±(99.9%) 3719.348 us/op
# Warmup Iteration   4: 1699741.696 ±(99.9%) 3221.050 us/op
# Warmup Iteration   5: 1699741.696 ±(99.9%) 4920.235 us/op
Iteration   1: 1702188.373 ±(99.9%) 4801.658 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1701838.848 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration   2: 1700091.221 ±(99.9%) 3036.835 us/op
                 reduceLoops·p0.00:   1698693.120 us/op
                 reduceLoops·p0.50:   1700790.272 us/op
                 reduceLoops·p0.90:   1700790.272 us/op
                 reduceLoops·p0.95:   1700790.272 us/op
                 reduceLoops·p0.99:   1700790.272 us/op
                 reduceLoops·p0.999:  1700790.272 us/op
                 reduceLoops·p0.9999: 1700790.272 us/op
                 reduceLoops·p1.00:   1700790.272 us/op

Iteration   3: 1699741.696 ±(99.9%) 3221.050 us/op
                 reduceLoops·p0.00:   1698693.120 us/op
                 reduceLoops·p0.50:   1699741.696 us/op
                 reduceLoops·p0.90:   1700790.272 us/op
                 reduceLoops·p0.95:   1700790.272 us/op
                 reduceLoops·p0.99:   1700790.272 us/op
                 reduceLoops·p0.999:  1700790.272 us/op
                 reduceLoops·p0.9999: 1700790.272 us/op
                 reduceLoops·p1.00:   1700790.272 us/op

Iteration   4: 1699392.171 ±(99.9%) 3036.835 us/op
                 reduceLoops·p0.00:   1698693.120 us/op
                 reduceLoops·p0.50:   1698693.120 us/op
                 reduceLoops·p0.90:   1700790.272 us/op
                 reduceLoops·p0.95:   1700790.272 us/op
                 reduceLoops·p0.99:   1700790.272 us/op
                 reduceLoops·p0.999:  1700790.272 us/op
                 reduceLoops·p0.9999: 1700790.272 us/op
                 reduceLoops·p1.00:   1700790.272 us/op

Iteration   5: 1702537.899 ±(99.9%) 5781.962 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1701838.848 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration   6: 1700440.747 ±(99.9%) 6874.928 us/op
                 reduceLoops·p0.00:   1696595.968 us/op
                 reduceLoops·p0.50:   1700790.272 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration   7: 1701489.323 ±(99.9%) 7122.010 us/op
                 reduceLoops·p0.00:   1698693.120 us/op
                 reduceLoops·p0.50:   1701838.848 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration   8: 1700440.747 ±(99.9%) 2400.829 us/op
                 reduceLoops·p0.00:   1698693.120 us/op
                 reduceLoops·p0.50:   1700790.272 us/op
                 reduceLoops·p0.90:   1700790.272 us/op
                 reduceLoops·p0.95:   1700790.272 us/op
                 reduceLoops·p0.99:   1700790.272 us/op
                 reduceLoops·p0.999:  1700790.272 us/op
                 reduceLoops·p0.9999: 1700790.272 us/op
                 reduceLoops·p1.00:   1700790.272 us/op

Iteration   9: 1701139.797 ±(99.9%) 4426.910 us/op
                 reduceLoops·p0.00:   1698693.120 us/op
                 reduceLoops·p0.50:   1700790.272 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration  10: 1701489.323 ±(99.9%) 3036.835 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1700790.272 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration  11: 1701838.848 ±(99.9%) 3221.050 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1701838.848 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op

Iteration  12: 1703586.475 ±(99.9%) 11563.923 us/op
                 reduceLoops·p0.00:   1700790.272 us/op
                 reduceLoops·p0.50:   1701838.848 us/op
                 reduceLoops·p0.90:   1711276.032 us/op
                 reduceLoops·p0.95:   1711276.032 us/op
                 reduceLoops·p0.99:   1711276.032 us/op
                 reduceLoops·p0.999:  1711276.032 us/op
                 reduceLoops·p0.9999: 1711276.032 us/op
                 reduceLoops·p1.00:   1711276.032 us/op

Iteration  13: 1701489.323 ±(99.9%) 7122.010 us/op
                 reduceLoops·p0.00:   1698693.120 us/op
                 reduceLoops·p0.50:   1701838.848 us/op
                 reduceLoops·p0.90:   1704984.576 us/op
                 reduceLoops·p0.95:   1704984.576 us/op
                 reduceLoops·p0.99:   1704984.576 us/op
                 reduceLoops·p0.999:  1704984.576 us/op
                 reduceLoops·p0.9999: 1704984.576 us/op
                 reduceLoops·p1.00:   1704984.576 us/op

Iteration  14: 1698693.120 ±(99.9%) 3719.348 us/op
                 reduceLoops·p0.00:   1696595.968 us/op
                 reduceLoops·p0.50:   1698693.120 us/op
                 reduceLoops·p0.90:   1700790.272 us/op
                 reduceLoops·p0.95:   1700790.272 us/op
                 reduceLoops·p0.99:   1700790.272 us/op
                 reduceLoops·p0.999:  1700790.272 us/op
                 reduceLoops·p0.9999: 1700790.272 us/op
                 reduceLoops·p1.00:   1700790.272 us/op

Iteration  15: 1700790.272 ±(99.9%) 3719.348 us/op
                 reduceLoops·p0.00:   1698693.120 us/op
                 reduceLoops·p0.50:   1700790.272 us/op
                 reduceLoops·p0.90:   1702887.424 us/op
                 reduceLoops·p0.95:   1702887.424 us/op
                 reduceLoops·p0.99:   1702887.424 us/op
                 reduceLoops·p0.999:  1702887.424 us/op
                 reduceLoops·p0.9999: 1702887.424 us/op
                 reduceLoops·p1.00:   1702887.424 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  N = 90
  mean = 1701023.289 ±(99.9%) 776.805 us/op

  Histogram, us/op:
    [1690000.000, 1692500.000) = 0 
    [1692500.000, 1695000.000) = 0 
    [1695000.000, 1697500.000) = 2 
    [1697500.000, 1700000.000) = 21 
    [1700000.000, 1702500.000) = 42 
    [1702500.000, 1705000.000) = 24 
    [1705000.000, 1707500.000) = 0 
    [1707500.000, 1710000.000) = 0 
    [1710000.000, 1712500.000) = 1 
    [1712500.000, 1715000.000) = 0 
    [1715000.000, 1717500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1696595.968 us/op
     p(50.0000) = 1700790.272 us/op
     p(90.0000) = 1702887.424 us/op
     p(95.0000) = 1704984.576 us/op
     p(99.0000) = 1711276.032 us/op
     p(99.9000) = 1711276.032 us/op
     p(99.9900) = 1711276.032 us/op
     p(99.9990) = 1711276.032 us/op
     p(99.9999) = 1711276.032 us/op
    p(100.0000) = 1711276.032 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 92.03% complete, ETA 00:39:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.586 ±(99.9%) 0.008 us/op
# Warmup Iteration   2: 0.564 ±(99.9%) 0.007 us/op
# Warmup Iteration   3: 0.575 ±(99.9%) 0.006 us/op
# Warmup Iteration   4: 0.575 ±(99.9%) 0.007 us/op
# Warmup Iteration   5: 0.570 ±(99.9%) 0.005 us/op
Iteration   1: 0.575 ±(99.9%) 0.007 us/op
                 reduceSynchronizedBlocks·p0.00:   0.488 us/op
                 reduceSynchronizedBlocks·p0.50:   0.549 us/op
                 reduceSynchronizedBlocks·p0.90:   0.577 us/op
                 reduceSynchronizedBlocks·p0.95:   0.586 us/op
                 reduceSynchronizedBlocks·p0.99:   0.614 us/op
                 reduceSynchronizedBlocks·p0.999:  5.616 us/op
                 reduceSynchronizedBlocks·p0.9999: 21.755 us/op
                 reduceSynchronizedBlocks·p1.00:   297.472 us/op

Iteration   2: 0.576 ±(99.9%) 0.007 us/op
                 reduceSynchronizedBlocks·p0.00:   0.489 us/op
                 reduceSynchronizedBlocks·p0.50:   0.551 us/op
                 reduceSynchronizedBlocks·p0.90:   0.580 us/op
                 reduceSynchronizedBlocks·p0.95:   0.591 us/op
                 reduceSynchronizedBlocks·p0.99:   0.632 us/op
                 reduceSynchronizedBlocks·p0.999:  5.630 us/op
                 reduceSynchronizedBlocks·p0.9999: 21.243 us/op
                 reduceSynchronizedBlocks·p1.00:   177.920 us/op

Iteration   3: 0.573 ±(99.9%) 0.007 us/op
                 reduceSynchronizedBlocks·p0.00:   0.489 us/op
                 reduceSynchronizedBlocks·p0.50:   0.549 us/op
                 reduceSynchronizedBlocks·p0.90:   0.576 us/op
                 reduceSynchronizedBlocks·p0.95:   0.584 us/op
                 reduceSynchronizedBlocks·p0.99:   0.610 us/op
                 reduceSynchronizedBlocks·p0.999:  5.272 us/op
                 reduceSynchronizedBlocks·p0.9999: 20.384 us/op
                 reduceSynchronizedBlocks·p1.00:   186.880 us/op

Iteration   4: 0.574 ±(99.9%) 0.006 us/op
                 reduceSynchronizedBlocks·p0.00:   0.488 us/op
                 reduceSynchronizedBlocks·p0.50:   0.548 us/op
                 reduceSynchronizedBlocks·p0.90:   0.576 us/op
                 reduceSynchronizedBlocks·p0.95:   0.586 us/op
                 reduceSynchronizedBlocks·p0.99:   0.814 us/op
                 reduceSynchronizedBlocks·p0.999:  5.451 us/op
                 reduceSynchronizedBlocks·p0.9999: 21.166 us/op
                 reduceSynchronizedBlocks·p1.00:   169.472 us/op

Iteration   5: 0.572 ±(99.9%) 0.007 us/op
                 reduceSynchronizedBlocks·p0.00:   0.488 us/op
                 reduceSynchronizedBlocks·p0.50:   0.548 us/op
                 reduceSynchronizedBlocks·p0.90:   0.575 us/op
                 reduceSynchronizedBlocks·p0.95:   0.583 us/op
                 reduceSynchronizedBlocks·p0.99:   0.609 us/op
                 reduceSynchronizedBlocks·p0.999:  5.120 us/op
                 reduceSynchronizedBlocks·p0.9999: 18.676 us/op
                 reduceSynchronizedBlocks·p1.00:   272.384 us/op

Iteration   6: 0.579 ±(99.9%) 0.007 us/op
                 reduceSynchronizedBlocks·p0.00:   0.486 us/op
                 reduceSynchronizedBlocks·p0.50:   0.551 us/op
                 reduceSynchronizedBlocks·p0.90:   0.580 us/op
                 reduceSynchronizedBlocks·p0.95:   0.591 us/op
                 reduceSynchronizedBlocks·p0.99:   0.821 us/op
                 reduceSynchronizedBlocks·p0.999:  5.847 us/op
                 reduceSynchronizedBlocks·p0.9999: 23.275 us/op
                 reduceSynchronizedBlocks·p1.00:   226.816 us/op

Iteration   7: 0.574 ±(99.9%) 0.007 us/op
                 reduceSynchronizedBlocks·p0.00:   0.489 us/op
                 reduceSynchronizedBlocks·p0.50:   0.550 us/op
                 reduceSynchronizedBlocks·p0.90:   0.577 us/op
                 reduceSynchronizedBlocks·p0.95:   0.586 us/op
                 reduceSynchronizedBlocks·p0.99:   0.612 us/op
                 reduceSynchronizedBlocks·p0.999:  5.421 us/op
                 reduceSynchronizedBlocks·p0.9999: 20.158 us/op
                 reduceSynchronizedBlocks·p1.00:   267.776 us/op

Iteration   8: 0.572 ±(99.9%) 0.007 us/op
                 reduceSynchronizedBlocks·p0.00:   0.485 us/op
                 reduceSynchronizedBlocks·p0.50:   0.550 us/op
                 reduceSynchronizedBlocks·p0.90:   0.578 us/op
                 reduceSynchronizedBlocks·p0.95:   0.587 us/op
                 reduceSynchronizedBlocks·p0.99:   0.612 us/op
                 reduceSynchronizedBlocks·p0.999:  4.972 us/op
                 reduceSynchronizedBlocks·p0.9999: 18.170 us/op
                 reduceSynchronizedBlocks·p1.00:   241.664 us/op

Iteration   9: 0.578 ±(99.9%) 0.007 us/op
                 reduceSynchronizedBlocks·p0.00:   0.489 us/op
                 reduceSynchronizedBlocks·p0.50:   0.550 us/op
                 reduceSynchronizedBlocks·p0.90:   0.579 us/op
                 reduceSynchronizedBlocks·p0.95:   0.590 us/op
                 reduceSynchronizedBlocks·p0.99:   0.619 us/op
                 reduceSynchronizedBlocks·p0.999:  5.503 us/op
                 reduceSynchronizedBlocks·p0.9999: 27.961 us/op
                 reduceSynchronizedBlocks·p1.00:   244.992 us/op

Iteration  10: 0.575 ±(99.9%) 0.007 us/op
                 reduceSynchronizedBlocks·p0.00:   0.488 us/op
                 reduceSynchronizedBlocks·p0.50:   0.548 us/op
                 reduceSynchronizedBlocks·p0.90:   0.575 us/op
                 reduceSynchronizedBlocks·p0.95:   0.584 us/op
                 reduceSynchronizedBlocks·p0.99:   0.612 us/op
                 reduceSynchronizedBlocks·p0.999:  6.319 us/op
                 reduceSynchronizedBlocks·p0.9999: 27.844 us/op
                 reduceSynchronizedBlocks·p1.00:   199.168 us/op

Iteration  11: 0.574 ±(99.9%) 0.006 us/op
                 reduceSynchronizedBlocks·p0.00:   0.488 us/op
                 reduceSynchronizedBlocks·p0.50:   0.550 us/op
                 reduceSynchronizedBlocks·p0.90:   0.579 us/op
                 reduceSynchronizedBlocks·p0.95:   0.589 us/op
                 reduceSynchronizedBlocks·p0.99:   0.619 us/op
                 reduceSynchronizedBlocks·p0.999:  5.531 us/op
                 reduceSynchronizedBlocks·p0.9999: 18.260 us/op
                 reduceSynchronizedBlocks·p1.00:   231.424 us/op

Iteration  12: 0.573 ±(99.9%) 0.007 us/op
                 reduceSynchronizedBlocks·p0.00:   0.490 us/op
                 reduceSynchronizedBlocks·p0.50:   0.546 us/op
                 reduceSynchronizedBlocks·p0.90:   0.572 us/op
                 reduceSynchronizedBlocks·p0.95:   0.580 us/op
                 reduceSynchronizedBlocks·p0.99:   0.615 us/op
                 reduceSynchronizedBlocks·p0.999:  6.063 us/op
                 reduceSynchronizedBlocks·p0.9999: 24.851 us/op
                 reduceSynchronizedBlocks·p1.00:   201.216 us/op

Iteration  13: 0.570 ±(99.9%) 0.007 us/op
                 reduceSynchronizedBlocks·p0.00:   0.490 us/op
                 reduceSynchronizedBlocks·p0.50:   0.545 us/op
                 reduceSynchronizedBlocks·p0.90:   0.571 us/op
                 reduceSynchronizedBlocks·p0.95:   0.578 us/op
                 reduceSynchronizedBlocks·p0.99:   0.603 us/op
                 reduceSynchronizedBlocks·p0.999:  5.696 us/op
                 reduceSynchronizedBlocks·p0.9999: 22.727 us/op
                 reduceSynchronizedBlocks·p1.00:   230.656 us/op

Iteration  14: 0.579 ±(99.9%) 0.006 us/op
                 reduceSynchronizedBlocks·p0.00:   0.492 us/op
                 reduceSynchronizedBlocks·p0.50:   0.547 us/op
                 reduceSynchronizedBlocks·p0.90:   0.575 us/op
                 reduceSynchronizedBlocks·p0.95:   0.589 us/op
                 reduceSynchronizedBlocks·p0.99:   0.893 us/op
                 reduceSynchronizedBlocks·p0.999:  5.408 us/op
                 reduceSynchronizedBlocks·p0.9999: 19.163 us/op
                 reduceSynchronizedBlocks·p1.00:   164.864 us/op

Iteration  15: 0.570 ±(99.9%) 0.007 us/op
                 reduceSynchronizedBlocks·p0.00:   0.491 us/op
                 reduceSynchronizedBlocks·p0.50:   0.546 us/op
                 reduceSynchronizedBlocks·p0.90:   0.572 us/op
                 reduceSynchronizedBlocks·p0.95:   0.579 us/op
                 reduceSynchronizedBlocks·p0.99:   0.605 us/op
                 reduceSynchronizedBlocks·p0.999:  5.897 us/op
                 reduceSynchronizedBlocks·p0.9999: 20.250 us/op
                 reduceSynchronizedBlocks·p1.00:   226.304 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  N = 4553352
  mean =      0.574 ±(99.9%) 0.002 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 4552979 
    [ 25.000,  50.000) = 103 
    [ 50.000,  75.000) = 25 
    [ 75.000, 100.000) = 15 
    [100.000, 125.000) = 61 
    [125.000, 150.000) = 90 
    [150.000, 175.000) = 48 
    [175.000, 200.000) = 19 
    [200.000, 225.000) = 2 
    [225.000, 250.000) = 7 
    [250.000, 275.000) = 2 

  Percentiles, us/op:
      p(0.0000) =      0.485 us/op
     p(50.0000) =      0.549 us/op
     p(90.0000) =      0.576 us/op
     p(95.0000) =      0.586 us/op
     p(99.0000) =      0.636 us/op
     p(99.9000) =      5.528 us/op
     p(99.9900) =     21.493 us/op
     p(99.9990) =    165.580 us/op
     p(99.9999) =    243.150 us/op
    p(100.0000) =    297.472 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 92.75% complete, ETA 00:36:02
# Fork: 1 of 1
# Warmup Iteration   1: 8474.332 ±(99.9%) 44.404 us/op
# Warmup Iteration   2: 8352.972 ±(99.9%) 8.317 us/op
# Warmup Iteration   3: 8352.370 ±(99.9%) 8.462 us/op
# Warmup Iteration   4: 8358.224 ±(99.9%) 8.778 us/op
# Warmup Iteration   5: 8371.195 ±(99.9%) 9.447 us/op
Iteration   1: 8363.676 ±(99.9%) 8.542 us/op
                 reduceYoungObjects·p0.00:   8183.808 us/op
                 reduceYoungObjects·p0.50:   8331.264 us/op
                 reduceYoungObjects·p0.90:   8470.528 us/op
                 reduceYoungObjects·p0.95:   8552.448 us/op
                 reduceYoungObjects·p0.99:   8749.711 us/op
                 reduceYoungObjects·p0.999:  8903.262 us/op
                 reduceYoungObjects·p0.9999: 8912.896 us/op
                 reduceYoungObjects·p1.00:   8912.896 us/op

Iteration   2: 8361.477 ±(99.9%) 8.760 us/op
                 reduceYoungObjects·p0.00:   8282.112 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8470.528 us/op
                 reduceYoungObjects·p0.95:   8536.064 us/op
                 reduceYoungObjects·p0.99:   8765.440 us/op
                 reduceYoungObjects·p0.999:  9076.982 us/op
                 reduceYoungObjects·p0.9999: 9093.120 us/op
                 reduceYoungObjects·p1.00:   9093.120 us/op

Iteration   3: 8359.799 ±(99.9%) 8.199 us/op
                 reduceYoungObjects·p0.00:   8167.424 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8475.443 us/op
                 reduceYoungObjects·p0.95:   8522.138 us/op
                 reduceYoungObjects·p0.99:   8700.396 us/op
                 reduceYoungObjects·p0.999:  8912.896 us/op
                 reduceYoungObjects·p0.9999: 8912.896 us/op
                 reduceYoungObjects·p1.00:   8912.896 us/op

Iteration   4: 8360.278 ±(99.9%) 9.140 us/op
                 reduceYoungObjects·p0.00:   8126.464 us/op
                 reduceYoungObjects·p0.50:   8331.264 us/op
                 reduceYoungObjects·p0.90:   8470.528 us/op
                 reduceYoungObjects·p0.95:   8536.064 us/op
                 reduceYoungObjects·p0.99:   8765.440 us/op
                 reduceYoungObjects·p0.999:  9533.981 us/op
                 reduceYoungObjects·p0.9999: 9650.176 us/op
                 reduceYoungObjects·p1.00:   9650.176 us/op

Iteration   5: 8353.342 ±(99.9%) 7.552 us/op
                 reduceYoungObjects·p0.00:   8216.576 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8457.421 us/op
                 reduceYoungObjects·p0.95:   8503.296 us/op
                 reduceYoungObjects·p0.99:   8699.904 us/op
                 reduceYoungObjects·p0.999:  8847.360 us/op
                 reduceYoungObjects·p0.9999: 8847.360 us/op
                 reduceYoungObjects·p1.00:   8847.360 us/op

Iteration   6: 8353.623 ±(99.9%) 7.577 us/op
                 reduceYoungObjects·p0.00:   8134.656 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8454.144 us/op
                 reduceYoungObjects·p0.95:   8503.296 us/op
                 reduceYoungObjects·p0.99:   8667.136 us/op
                 reduceYoungObjects·p0.999:  9011.364 us/op
                 reduceYoungObjects·p0.9999: 9027.584 us/op
                 reduceYoungObjects·p1.00:   9027.584 us/op

Iteration   7: 8356.799 ±(99.9%) 8.437 us/op
                 reduceYoungObjects·p0.00:   8192.000 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8454.144 us/op
                 reduceYoungObjects·p0.95:   8522.138 us/op
                 reduceYoungObjects·p0.99:   8749.548 us/op
                 reduceYoungObjects·p0.999:  8981.905 us/op
                 reduceYoungObjects·p0.9999: 8994.816 us/op
                 reduceYoungObjects·p1.00:   8994.816 us/op

Iteration   8: 8348.551 ±(99.9%) 7.360 us/op
                 reduceYoungObjects·p0.00:   8232.960 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8454.144 us/op
                 reduceYoungObjects·p0.95:   8503.296 us/op
                 reduceYoungObjects·p0.99:   8683.848 us/op
                 reduceYoungObjects·p0.999:  8847.360 us/op
                 reduceYoungObjects·p0.9999: 8847.360 us/op
                 reduceYoungObjects·p1.00:   8847.360 us/op

Iteration   9: 8351.754 ±(99.9%) 13.495 us/op
                 reduceYoungObjects·p0.00:   8159.232 us/op
                 reduceYoungObjects·p0.50:   8314.880 us/op
                 reduceYoungObjects·p0.90:   8454.144 us/op
                 reduceYoungObjects·p0.95:   8503.296 us/op
                 reduceYoungObjects·p0.99:   8716.616 us/op
                 reduceYoungObjects·p0.999:  11711.218 us/op
                 reduceYoungObjects·p0.9999: 12353.536 us/op
                 reduceYoungObjects·p1.00:   12353.536 us/op

Iteration  10: 8361.402 ±(99.9%) 8.521 us/op
                 reduceYoungObjects·p0.00:   8282.112 us/op
                 reduceYoungObjects·p0.50:   8331.264 us/op
                 reduceYoungObjects·p0.90:   8470.528 us/op
                 reduceYoungObjects·p0.95:   8536.064 us/op
                 reduceYoungObjects·p0.99:   8733.164 us/op
                 reduceYoungObjects·p0.999:  8893.284 us/op
                 reduceYoungObjects·p0.9999: 8896.512 us/op
                 reduceYoungObjects·p1.00:   8896.512 us/op

Iteration  11: 8359.847 ±(99.9%) 8.065 us/op
                 reduceYoungObjects·p0.00:   8200.192 us/op
                 reduceYoungObjects·p0.50:   8331.264 us/op
                 reduceYoungObjects·p0.90:   8470.528 us/op
                 reduceYoungObjects·p0.95:   8519.680 us/op
                 reduceYoungObjects·p0.99:   8732.672 us/op
                 reduceYoungObjects·p0.999:  8965.521 us/op
                 reduceYoungObjects·p0.9999: 8978.432 us/op
                 reduceYoungObjects·p1.00:   8978.432 us/op

Iteration  12: 8357.107 ±(99.9%) 8.391 us/op
                 reduceYoungObjects·p0.00:   8060.928 us/op
                 reduceYoungObjects·p0.50:   8331.264 us/op
                 reduceYoungObjects·p0.90:   8470.528 us/op
                 reduceYoungObjects·p0.95:   8536.064 us/op
                 reduceYoungObjects·p0.99:   8733.164 us/op
                 reduceYoungObjects·p0.999:  8860.516 us/op
                 reduceYoungObjects·p0.9999: 8863.744 us/op
                 reduceYoungObjects·p1.00:   8863.744 us/op

Iteration  13: 8353.917 ±(99.9%) 7.426 us/op
                 reduceYoungObjects·p0.00:   8200.192 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8454.144 us/op
                 reduceYoungObjects·p0.95:   8503.296 us/op
                 reduceYoungObjects·p0.99:   8667.464 us/op
                 reduceYoungObjects·p0.999:  9090.531 us/op
                 reduceYoungObjects·p0.9999: 9158.656 us/op
                 reduceYoungObjects·p1.00:   9158.656 us/op

Iteration  14: 8348.968 ±(99.9%) 7.446 us/op
                 reduceYoungObjects·p0.00:   8093.696 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8454.144 us/op
                 reduceYoungObjects·p0.95:   8503.296 us/op
                 reduceYoungObjects·p0.99:   8667.300 us/op
                 reduceYoungObjects·p0.999:  9021.145 us/op
                 reduceYoungObjects·p0.9999: 9043.968 us/op
                 reduceYoungObjects·p1.00:   9043.968 us/op

Iteration  15: 8360.320 ±(99.9%) 12.464 us/op
                 reduceYoungObjects·p0.00:   8077.312 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8470.528 us/op
                 reduceYoungObjects·p0.95:   8519.680 us/op
                 reduceYoungObjects·p0.99:   8733.164 us/op
                 reduceYoungObjects·p0.999:  11217.994 us/op
                 reduceYoungObjects·p0.9999: 11747.328 us/op
                 reduceYoungObjects·p1.00:   11747.328 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  N = 17947
  mean =   8356.721 ±(99.9%) 2.302 us/op

  Histogram, us/op:
    [ 8000.000,  8500.000) = 16771 
    [ 8500.000,  9000.000) = 1165 
    [ 9000.000,  9500.000) = 8 
    [ 9500.000, 10000.000) = 1 
    [10000.000, 10500.000) = 0 
    [10500.000, 11000.000) = 0 
    [11000.000, 11500.000) = 0 
    [11500.000, 12000.000) = 1 
    [12000.000, 12500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   8060.928 us/op
     p(50.0000) =   8323.072 us/op
     p(90.0000) =   8470.528 us/op
     p(95.0000) =   8519.680 us/op
     p(99.0000) =   8732.672 us/op
     p(99.9000) =   8929.280 us/op
     p(99.9900) =  11871.722 us/op
     p(99.9990) =  12353.536 us/op
     p(99.9999) =  12353.536 us/op
    p(100.0000) =  12353.536 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 93.48% complete, ETA 00:32:26
# Fork: 1 of 1
# Warmup Iteration   1: 31662.495 ±(99.9%) 491.103 us/op
# Warmup Iteration   2: 35123.617 ±(99.9%) 359.064 us/op
# Warmup Iteration   3: 34653.804 ±(99.9%) 223.507 us/op
# Warmup Iteration   4: 36504.509 ±(99.9%) 300.379 us/op
# Warmup Iteration   5: 31075.156 ±(99.9%) 279.855 us/op
Iteration   1: 30855.421 ±(99.9%) 437.118 us/op
                 redundantCode·p0.00:   30113.792 us/op
                 redundantCode·p0.50:   30670.848 us/op
                 redundantCode·p0.90:   31162.368 us/op
                 redundantCode·p0.95:   31318.016 us/op
                 redundantCode·p0.99:   31735.808 us/op
                 redundantCode·p0.999:  73007.104 us/op
                 redundantCode·p0.9999: 73007.104 us/op
                 redundantCode·p1.00:   73007.104 us/op

Iteration   2: 33189.101 ±(99.9%) 235.129 us/op
                 redundantCode·p0.00:   32669.696 us/op
                 redundantCode·p0.50:   33095.680 us/op
                 redundantCode·p0.90:   33511.834 us/op
                 redundantCode·p0.95:   33685.504 us/op
                 redundantCode·p0.99:   34333.000 us/op
                 redundantCode·p0.999:  53936.128 us/op
                 redundantCode·p0.9999: 53936.128 us/op
                 redundantCode·p1.00:   53936.128 us/op

Iteration   3: 38664.469 ±(99.9%) 201.003 us/op
                 redundantCode·p0.00:   38076.416 us/op
                 redundantCode·p0.50:   38535.168 us/op
                 redundantCode·p0.90:   38928.384 us/op
                 redundantCode·p0.95:   39124.992 us/op
                 redundantCode·p0.99:   40632.320 us/op
                 redundantCode·p0.999:  53280.768 us/op
                 redundantCode·p0.9999: 53280.768 us/op
                 redundantCode·p1.00:   53280.768 us/op

Iteration   4: 32881.610 ±(99.9%) 211.119 us/op
                 redundantCode·p0.00:   32342.016 us/op
                 redundantCode·p0.50:   32800.768 us/op
                 redundantCode·p0.90:   33128.448 us/op
                 redundantCode·p0.95:   33316.864 us/op
                 redundantCode·p0.99:   33682.227 us/op
                 redundantCode·p0.999:  51642.368 us/op
                 redundantCode·p0.9999: 51642.368 us/op
                 redundantCode·p1.00:   51642.368 us/op

Iteration   5: 33374.754 ±(99.9%) 218.372 us/op
                 redundantCode·p0.00:   32866.304 us/op
                 redundantCode·p0.50:   33259.520 us/op
                 redundantCode·p0.90:   33685.504 us/op
                 redundantCode·p0.95:   33882.112 us/op
                 redundantCode·p0.99:   34275.328 us/op
                 redundantCode·p0.999:  52297.728 us/op
                 redundantCode·p0.9999: 52297.728 us/op
                 redundantCode·p1.00:   52297.728 us/op

Iteration   6: 35993.173 ±(99.9%) 472.716 us/op
                 redundantCode·p0.00:   35389.440 us/op
                 redundantCode·p0.50:   35782.656 us/op
                 redundantCode·p0.90:   36182.426 us/op
                 redundantCode·p0.95:   36438.016 us/op
                 redundantCode·p0.99:   36941.332 us/op
                 redundantCode·p0.999:  75104.256 us/op
                 redundantCode·p0.9999: 75104.256 us/op
                 redundantCode·p1.00:   75104.256 us/op

Iteration   7: 34478.716 ±(99.9%) 371.356 us/op
                 redundantCode·p0.00:   33882.112 us/op
                 redundantCode·p0.50:   34275.328 us/op
                 redundantCode·p0.90:   34799.616 us/op
                 redundantCode·p0.95:   34960.179 us/op
                 redundantCode·p0.99:   37158.257 us/op
                 redundantCode·p0.999:  66125.824 us/op
                 redundantCode·p0.9999: 66125.824 us/op
                 redundantCode·p1.00:   66125.824 us/op

Iteration   8: 37557.302 ±(99.9%) 391.974 us/op
                 redundantCode·p0.00:   36962.304 us/op
                 redundantCode·p0.50:   37355.520 us/op
                 redundantCode·p0.90:   37814.272 us/op
                 redundantCode·p0.95:   38207.488 us/op
                 redundantCode·p0.99:   38775.030 us/op
                 redundantCode·p0.999:  68288.512 us/op
                 redundantCode·p0.9999: 68288.512 us/op
                 redundantCode·p1.00:   68288.512 us/op

Iteration   9: 34909.223 ±(99.9%) 527.198 us/op
                 redundantCode·p0.00:   34275.328 us/op
                 redundantCode·p0.50:   34668.544 us/op
                 redundantCode·p0.90:   35192.832 us/op
                 redundantCode·p0.95:   35323.904 us/op
                 redundantCode·p0.99:   35882.271 us/op
                 redundantCode·p0.999:  79953.920 us/op
                 redundantCode·p0.9999: 79953.920 us/op
                 redundantCode·p1.00:   79953.920 us/op

Iteration  10: 33903.439 ±(99.9%) 564.419 us/op
                 redundantCode·p0.00:   33325.056 us/op
                 redundantCode·p0.50:   33685.504 us/op
                 redundantCode·p0.90:   34013.184 us/op
                 redundantCode·p0.95:   34275.328 us/op
                 redundantCode·p0.99:   34893.988 us/op
                 redundantCode·p0.999:  83623.936 us/op
                 redundantCode·p0.9999: 83623.936 us/op
                 redundantCode·p1.00:   83623.936 us/op

Iteration  11: 45416.745 ±(99.9%) 572.072 us/op
                 redundantCode·p0.00:   44761.088 us/op
                 redundantCode·p0.50:   45154.304 us/op
                 redundantCode·p0.90:   45678.592 us/op
                 redundantCode·p0.95:   45940.736 us/op
                 redundantCode·p0.99:   46712.750 us/op
                 redundantCode·p0.999:  82837.504 us/op
                 redundantCode·p0.9999: 82837.504 us/op
                 redundantCode·p1.00:   82837.504 us/op

Iteration  12: 37420.565 ±(99.9%) 279.591 us/op
                 redundantCode·p0.00:   36831.232 us/op
                 redundantCode·p0.50:   37289.984 us/op
                 redundantCode·p0.90:   37748.736 us/op
                 redundantCode·p0.95:   37919.130 us/op
                 redundantCode·p0.99:   38679.347 us/op
                 redundantCode·p0.999:  59310.080 us/op
                 redundantCode·p0.9999: 59310.080 us/op
                 redundantCode·p1.00:   59310.080 us/op

Iteration  13: 33344.935 ±(99.9%) 335.916 us/op
                 redundantCode·p0.00:   32833.536 us/op
                 redundantCode·p0.50:   33193.984 us/op
                 redundantCode·p0.90:   33619.968 us/op
                 redundantCode·p0.95:   33751.040 us/op
                 redundantCode·p0.99:   34209.137 us/op
                 redundantCode·p0.999:  63242.240 us/op
                 redundantCode·p0.9999: 63242.240 us/op
                 redundantCode·p1.00:   63242.240 us/op

Iteration  14: 34067.129 ±(99.9%) 215.399 us/op
                 redundantCode·p0.00:   33554.432 us/op
                 redundantCode·p0.50:   33947.648 us/op
                 redundantCode·p0.90:   34340.864 us/op
                 redundantCode·p0.95:   34537.472 us/op
                 redundantCode·p0.99:   34865.152 us/op
                 redundantCode·p0.999:  52559.872 us/op
                 redundantCode·p0.9999: 52559.872 us/op
                 redundantCode·p1.00:   52559.872 us/op

Iteration  15: 32586.549 ±(99.9%) 180.773 us/op
                 redundantCode·p0.00:   32079.872 us/op
                 redundantCode·p0.50:   32473.088 us/op
                 redundantCode·p0.90:   32833.536 us/op
                 redundantCode·p0.95:   33017.037 us/op
                 redundantCode·p0.99:   33745.797 us/op
                 redundantCode·p0.999:  48431.104 us/op
                 redundantCode·p0.9999: 48431.104 us/op
                 redundantCode·p1.00:   48431.104 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  N = 4294
  mean =  34958.107 ±(99.9%) 184.614 us/op

  Histogram, us/op:
    [30000.000, 35000.000) = 2936 
    [35000.000, 40000.000) = 1122 
    [40000.000, 45000.000) = 36 
    [45000.000, 50000.000) = 186 
    [50000.000, 55000.000) = 5 
    [55000.000, 60000.000) = 1 
    [60000.000, 65000.000) = 1 
    [65000.000, 70000.000) = 2 
    [70000.000, 75000.000) = 1 
    [75000.000, 80000.000) = 2 
    [80000.000, 85000.000) = 2 

  Percentiles, us/op:
      p(0.0000) =  30113.792 us/op
     p(50.0000) =  33882.112 us/op
     p(90.0000) =  38469.632 us/op
     p(95.0000) =  44892.160 us/op
     p(99.0000) =  45613.056 us/op
     p(99.9000) =  74485.596 us/op
     p(99.9900) =  83623.936 us/op
     p(99.9990) =  83623.936 us/op
     p(99.9999) =  83623.936 us/op
    p(100.0000) =  83623.936 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 94.20% complete, ETA 00:28:50
# Fork: 1 of 1
# Warmup Iteration   1: 117612.062 ±(99.9%) 29407.052 us/op
# Warmup Iteration   2: 27310.427 ±(99.9%) 1738.558 us/op
# Warmup Iteration   3: 27276.101 ±(99.9%) 1694.221 us/op
# Warmup Iteration   4: 27399.165 ±(99.9%) 1777.437 us/op
# Warmup Iteration   5: 27294.494 ±(99.9%) 1708.155 us/op
Iteration   1: 27367.279 ±(99.9%) 1767.460 us/op
                 split·p0.00:   24707.072 us/op
                 split·p0.50:   24969.216 us/op
                 split·p0.90:   25296.896 us/op
                 split·p0.95:   64870.810 us/op
                 split·p0.99:   74616.668 us/op
                 split·p0.999:  78774.272 us/op
                 split·p0.9999: 78774.272 us/op
                 split·p1.00:   78774.272 us/op

Iteration   2: 27309.442 ±(99.9%) 1741.024 us/op
                 split·p0.00:   24707.072 us/op
                 split·p0.50:   24936.448 us/op
                 split·p0.90:   25296.896 us/op
                 split·p0.95:   66748.416 us/op
                 split·p0.99:   72744.960 us/op
                 split·p0.999:  77201.408 us/op
                 split·p0.9999: 77201.408 us/op
                 split·p1.00:   77201.408 us/op

Iteration   3: 27329.944 ±(99.9%) 1738.389 us/op
                 split·p0.00:   24674.304 us/op
                 split·p0.50:   24969.216 us/op
                 split·p0.90:   25329.664 us/op
                 split·p0.95:   67207.168 us/op
                 split·p0.99:   71823.524 us/op
                 split·p0.999:  74055.680 us/op
                 split·p0.9999: 74055.680 us/op
                 split·p1.00:   74055.680 us/op

Iteration   4: 27415.504 ±(99.9%) 1747.273 us/op
                 split·p0.00:   24674.304 us/op
                 split·p0.50:   25034.752 us/op
                 split·p0.90:   25493.504 us/op
                 split·p0.95:   65739.162 us/op
                 split·p0.99:   73271.869 us/op
                 split·p0.999:  74186.752 us/op
                 split·p0.9999: 74186.752 us/op
                 split·p1.00:   74186.752 us/op

Iteration   5: 32168.693 ±(99.9%) 1880.423 us/op
                 split·p0.00:   26607.616 us/op
                 split·p0.50:   29818.880 us/op
                 split·p0.90:   30271.078 us/op
                 split·p0.95:   70805.094 us/op
                 split·p0.99:   79639.347 us/op
                 split·p0.999:  81395.712 us/op
                 split·p0.9999: 81395.712 us/op
                 split·p1.00:   81395.712 us/op

Iteration   6: 32064.223 ±(99.9%) 1907.425 us/op
                 split·p0.00:   29294.592 us/op
                 split·p0.50:   29687.808 us/op
                 split·p0.90:   30113.792 us/op
                 split·p0.95:   71408.026 us/op
                 split·p0.99:   77070.336 us/op
                 split·p0.999:  88866.816 us/op
                 split·p0.9999: 88866.816 us/op
                 split·p1.00:   88866.816 us/op

Iteration   7: 31910.188 ±(99.9%) 1853.247 us/op
                 split·p0.00:   29327.360 us/op
                 split·p0.50:   29622.272 us/op
                 split·p0.90:   29949.952 us/op
                 split·p0.95:   71041.024 us/op
                 split·p0.99:   77201.408 us/op
                 split·p0.999:  78774.272 us/op
                 split·p0.9999: 78774.272 us/op
                 split·p1.00:   78774.272 us/op

Iteration   8: 31852.687 ±(99.9%) 1820.458 us/op
                 split·p0.00:   29294.592 us/op
                 split·p0.50:   29622.272 us/op
                 split·p0.90:   29933.568 us/op
                 split·p0.95:   70680.576 us/op
                 split·p0.99:   74520.986 us/op
                 split·p0.999:  80871.424 us/op
                 split·p0.9999: 80871.424 us/op
                 split·p1.00:   80871.424 us/op

Iteration   9: 32062.438 ±(99.9%) 1926.490 us/op
                 split·p0.00:   29229.056 us/op
                 split·p0.50:   29655.040 us/op
                 split·p0.90:   30179.328 us/op
                 split·p0.95:   71755.366 us/op
                 split·p0.99:   78198.866 us/op
                 split·p0.999:  85721.088 us/op
                 split·p0.9999: 85721.088 us/op
                 split·p1.00:   85721.088 us/op

Iteration  10: 31935.295 ±(99.9%) 1854.263 us/op
                 split·p0.00:   29261.824 us/op
                 split·p0.50:   29622.272 us/op
                 split·p0.90:   29969.613 us/op
                 split·p0.95:   71329.382 us/op
                 split·p0.99:   77578.895 us/op
                 split·p0.999:  78381.056 us/op
                 split·p0.9999: 78381.056 us/op
                 split·p1.00:   78381.056 us/op

Iteration  11: 31949.952 ±(99.9%) 1897.131 us/op
                 split·p0.00:   29327.360 us/op
                 split·p0.50:   29589.504 us/op
                 split·p0.90:   29917.184 us/op
                 split·p0.95:   72417.280 us/op
                 split·p0.99:   77429.473 us/op
                 split·p0.999:  79560.704 us/op
                 split·p0.9999: 79560.704 us/op
                 split·p1.00:   79560.704 us/op

Iteration  12: 31974.658 ±(99.9%) 1913.918 us/op
                 split·p0.00:   29294.592 us/op
                 split·p0.50:   29589.504 us/op
                 split·p0.90:   30015.488 us/op
                 split·p0.95:   71512.883 us/op
                 split·p0.99:   78045.512 us/op
                 split·p0.999:  83361.792 us/op
                 split·p0.9999: 83361.792 us/op
                 split·p1.00:   83361.792 us/op

Iteration  13: 31948.591 ±(99.9%) 1880.324 us/op
                 split·p0.00:   29261.824 us/op
                 split·p0.50:   29589.504 us/op
                 split·p0.90:   30212.096 us/op
                 split·p0.95:   70228.378 us/op
                 split·p0.99:   77240.730 us/op
                 split·p0.999:  80347.136 us/op
                 split·p0.9999: 80347.136 us/op
                 split·p1.00:   80347.136 us/op

Iteration  14: 31800.772 ±(99.9%) 1828.256 us/op
                 split·p0.00:   29196.288 us/op
                 split·p0.50:   29523.968 us/op
                 split·p0.90:   29884.416 us/op
                 split·p0.95:   71329.382 us/op
                 split·p0.99:   75916.902 us/op
                 split·p0.999:  76939.264 us/op
                 split·p0.9999: 76939.264 us/op
                 split·p1.00:   76939.264 us/op

Iteration  15: 31899.752 ±(99.9%) 1856.726 us/op
                 split·p0.00:   29196.288 us/op
                 split·p0.50:   29589.504 us/op
                 split·p0.90:   30031.872 us/op
                 split·p0.95:   71630.848 us/op
                 split·p0.99:   77103.104 us/op
                 split·p0.999:  78512.128 us/op
                 split·p0.9999: 78512.128 us/op
                 split·p1.00:   78512.128 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  N = 4907
  mean =  30587.415 ±(99.9%) 480.316 us/op

  Histogram, us/op:
    [20000.000, 25000.000) = 745 
    [25000.000, 30000.000) = 3695 
    [30000.000, 35000.000) = 213 
    [35000.000, 40000.000) = 2 
    [40000.000, 45000.000) = 0 
    [45000.000, 50000.000) = 0 
    [50000.000, 55000.000) = 0 
    [55000.000, 60000.000) = 0 
    [60000.000, 65000.000) = 1 
    [65000.000, 70000.000) = 34 
    [70000.000, 75000.000) = 148 
    [75000.000, 80000.000) = 62 
    [80000.000, 85000.000) = 5 

  Percentiles, us/op:
      p(0.0000) =  24674.304 us/op
     p(50.0000) =  29523.968 us/op
     p(90.0000) =  29982.720 us/op
     p(95.0000) =  66361.754 us/op
     p(99.0000) =  76414.976 us/op
     p(99.9000) =  81157.685 us/op
     p(99.9900) =  88866.816 us/op
     p(99.9990) =  88866.816 us/op
     p(99.9999) =  88866.816 us/op
    p(100.0000) =  88866.816 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 94.92% complete, ETA 00:25:14
# Fork: 1 of 1
# Warmup Iteration   1: 162794.545 ±(99.9%) 64150.045 us/op
# Warmup Iteration   2: 159233.755 ±(99.9%) 63240.410 us/op
# Warmup Iteration   3: 153969.270 ±(99.9%) 59153.582 us/op
# Warmup Iteration   4: 156133.471 ±(99.9%) 60722.609 us/op
# Warmup Iteration   5: 155453.408 ±(99.9%) 59945.054 us/op
Iteration   1: 153843.239 ±(99.9%) 59514.317 us/op
                 mapToPair·p0.00:   25952.256 us/op
                 mapToPair·p0.50:   42467.328 us/op
                 mapToPair·p0.90:   326211.994 us/op
                 mapToPair·p0.95:   385351.680 us/op
                 mapToPair·p0.99:   432537.600 us/op
                 mapToPair·p0.999:  432537.600 us/op
                 mapToPair·p0.9999: 432537.600 us/op
                 mapToPair·p1.00:   432537.600 us/op

Iteration   2: 151521.714 ±(99.9%) 58372.198 us/op
                 mapToPair·p0.00:   25755.648 us/op
                 mapToPair·p0.50:   42500.096 us/op
                 mapToPair·p0.90:   326631.424 us/op
                 mapToPair·p0.95:   368889.037 us/op
                 mapToPair·p0.99:   407371.776 us/op
                 mapToPair·p0.999:  407371.776 us/op
                 mapToPair·p0.9999: 407371.776 us/op
                 mapToPair·p1.00:   407371.776 us/op

Iteration   3: 149391.757 ±(99.9%) 56612.600 us/op
                 mapToPair·p0.00:   25690.112 us/op
                 mapToPair·p0.50:   42860.544 us/op
                 mapToPair·p0.90:   327680.000 us/op
                 mapToPair·p0.95:   346868.941 us/op
                 mapToPair·p0.99:   427294.720 us/op
                 mapToPair·p0.999:  427294.720 us/op
                 mapToPair·p0.9999: 427294.720 us/op
                 mapToPair·p1.00:   427294.720 us/op

Iteration   4: 155063.217 ±(99.9%) 59772.754 us/op
                 mapToPair·p0.00:   26050.560 us/op
                 mapToPair·p0.50:   42991.616 us/op
                 mapToPair·p0.90:   326526.566 us/op
                 mapToPair·p0.95:   390384.845 us/op
                 mapToPair·p0.99:   426246.144 us/op
                 mapToPair·p0.999:  426246.144 us/op
                 mapToPair·p0.9999: 426246.144 us/op
                 mapToPair·p1.00:   426246.144 us/op

Iteration   5: 157623.154 ±(99.9%) 61013.642 us/op
                 mapToPair·p0.00:   25919.488 us/op
                 mapToPair·p0.50:   42860.544 us/op
                 mapToPair·p0.90:   327680.000 us/op
                 mapToPair·p0.95:   393111.142 us/op
                 mapToPair·p0.99:   432013.312 us/op
                 mapToPair·p0.999:  432013.312 us/op
                 mapToPair·p0.9999: 432013.312 us/op
                 mapToPair·p1.00:   432013.312 us/op

Iteration   6: 156350.243 ±(99.9%) 60143.230 us/op
                 mapToPair·p0.00:   27426.816 us/op
                 mapToPair·p0.50:   43122.688 us/op
                 mapToPair·p0.90:   340262.912 us/op
                 mapToPair·p0.95:   372978.483 us/op
                 mapToPair·p0.99:   422576.128 us/op
                 mapToPair·p0.999:  422576.128 us/op
                 mapToPair·p0.9999: 422576.128 us/op
                 mapToPair·p1.00:   422576.128 us/op

Iteration   7: 154730.496 ±(99.9%) 58729.313 us/op
                 mapToPair·p0.00:   26017.792 us/op
                 mapToPair·p0.50:   42860.544 us/op
                 mapToPair·p0.90:   329986.867 us/op
                 mapToPair·p0.95:   380423.373 us/op
                 mapToPair·p0.99:   426246.144 us/op
                 mapToPair·p0.999:  426246.144 us/op
                 mapToPair·p0.9999: 426246.144 us/op
                 mapToPair·p1.00:   426246.144 us/op

Iteration   8: 151641.864 ±(99.9%) 58357.141 us/op
                 mapToPair·p0.00:   25952.256 us/op
                 mapToPair·p0.50:   43515.904 us/op
                 mapToPair·p0.90:   321807.974 us/op
                 mapToPair·p0.95:   386976.973 us/op
                 mapToPair·p0.99:   440401.920 us/op
                 mapToPair·p0.999:  440401.920 us/op
                 mapToPair·p0.9999: 440401.920 us/op
                 mapToPair·p1.00:   440401.920 us/op

Iteration   9: 154550.524 ±(99.9%) 59324.754 us/op
                 mapToPair·p0.00:   26083.328 us/op
                 mapToPair·p0.50:   43122.688 us/op
                 mapToPair·p0.90:   333552.026 us/op
                 mapToPair·p0.95:   344457.216 us/op
                 mapToPair·p0.99:   402653.184 us/op
                 mapToPair·p0.999:  402653.184 us/op
                 mapToPair·p0.9999: 402653.184 us/op
                 mapToPair·p1.00:   402653.184 us/op

Iteration  10: 155507.636 ±(99.9%) 58423.534 us/op
                 mapToPair·p0.00:   26279.936 us/op
                 mapToPair·p0.50:   43188.224 us/op
                 mapToPair·p0.90:   326841.139 us/op
                 mapToPair·p0.95:   389336.269 us/op
                 mapToPair·p0.99:   446169.088 us/op
                 mapToPair·p0.999:  446169.088 us/op
                 mapToPair·p0.9999: 446169.088 us/op
                 mapToPair·p1.00:   446169.088 us/op

Iteration  11: 153824.083 ±(99.9%) 58689.832 us/op
                 mapToPair·p0.00:   25919.488 us/op
                 mapToPair·p0.50:   42598.400 us/op
                 mapToPair·p0.90:   324743.987 us/op
                 mapToPair·p0.95:   355676.979 us/op
                 mapToPair·p0.99:   436207.616 us/op
                 mapToPair·p0.999:  436207.616 us/op
                 mapToPair·p0.9999: 436207.616 us/op
                 mapToPair·p1.00:   436207.616 us/op

Iteration  12: 154175.961 ±(99.9%) 59538.543 us/op
                 mapToPair·p0.00:   25788.416 us/op
                 mapToPair·p0.50:   42729.472 us/op
                 mapToPair·p0.90:   334810.317 us/op
                 mapToPair·p0.95:   365533.594 us/op
                 mapToPair·p0.99:   422051.840 us/op
                 mapToPair·p0.999:  422051.840 us/op
                 mapToPair·p0.9999: 422051.840 us/op
                 mapToPair·p1.00:   422051.840 us/op

Iteration  13: 153201.160 ±(99.9%) 56122.552 us/op
                 mapToPair·p0.00:   25591.808 us/op
                 mapToPair·p0.50:   42860.544 us/op
                 mapToPair·p0.90:   325163.418 us/op
                 mapToPair·p0.95:   346764.083 us/op
                 mapToPair·p0.99:   416808.960 us/op
                 mapToPair·p0.999:  416808.960 us/op
                 mapToPair·p0.9999: 416808.960 us/op
                 mapToPair·p1.00:   416808.960 us/op

Iteration  14: 151940.251 ±(99.9%) 58561.279 us/op
                 mapToPair·p0.00:   25821.184 us/op
                 mapToPair·p0.50:   51249.152 us/op
                 mapToPair·p0.90:   327155.712 us/op
                 mapToPair·p0.95:   360631.501 us/op
                 mapToPair·p0.99:   455606.272 us/op
                 mapToPair·p0.999:  455606.272 us/op
                 mapToPair·p0.9999: 455606.272 us/op
                 mapToPair·p1.00:   455606.272 us/op

Iteration  15: 153522.971 ±(99.9%) 58009.525 us/op
                 mapToPair·p0.00:   26247.168 us/op
                 mapToPair·p0.50:   42401.792 us/op
                 mapToPair·p0.90:   342989.210 us/op
                 mapToPair·p0.95:   358193.562 us/op
                 mapToPair·p0.99:   437256.192 us/op
                 mapToPair·p0.999:  437256.192 us/op
                 mapToPair·p0.9999: 437256.192 us/op
                 mapToPair·p1.00:   437256.192 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  N = 988
  mean = 153780.920 ±(99.9%) 14419.412 us/op

  Histogram, us/op:
    [     0.000,  50000.000) = 539 
    [ 50000.000, 100000.000) = 23 
    [100000.000, 150000.000) = 0 
    [150000.000, 200000.000) = 2 
    [200000.000, 250000.000) = 19 
    [250000.000, 300000.000) = 191 
    [300000.000, 350000.000) = 159 
    [350000.000, 400000.000) = 28 
    [400000.000, 450000.000) = 26 

  Percentiles, us/op:
      p(0.0000) =  25591.808 us/op
     p(50.0000) =  42795.008 us/op
     p(90.0000) = 327680.000 us/op
     p(95.0000) = 356856.627 us/op
     p(99.0000) = 427352.392 us/op
     p(99.9000) = 455606.272 us/op
     p(99.9900) = 455606.272 us/op
     p(99.9990) = 455606.272 us/op
     p(99.9999) = 455606.272 us/op
    p(100.0000) = 455606.272 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 95.65% complete, ETA 00:21:38
# Fork: 1 of 1
# Warmup Iteration   1: 20407.777 ±(99.9%) 690.570 us/op
# Warmup Iteration   2: 19531.712 ±(99.9%) 703.983 us/op
# Warmup Iteration   3: 19237.841 ±(99.9%) 699.246 us/op
# Warmup Iteration   4: 19425.507 ±(99.9%) 734.935 us/op
# Warmup Iteration   5: 19131.625 ±(99.9%) 674.107 us/op
Iteration   1: 18866.269 ±(99.9%) 701.333 us/op
                 plusOne·p0.00:   17694.720 us/op
                 plusOne·p0.50:   18087.936 us/op
                 plusOne·p0.90:   18936.627 us/op
                 plusOne·p0.95:   21364.736 us/op
                 plusOne·p0.99:   45879.132 us/op
                 plusOne·p0.999:  77463.552 us/op
                 plusOne·p0.9999: 77463.552 us/op
                 plusOne·p1.00:   77463.552 us/op

Iteration   2: 18669.201 ±(99.9%) 815.754 us/op
                 plusOne·p0.00:   17629.184 us/op
                 plusOne·p0.50:   18022.400 us/op
                 plusOne·p0.90:   18350.080 us/op
                 plusOne·p0.95:   18486.067 us/op
                 plusOne·p0.99:   54232.351 us/op
                 plusOne·p0.999:  96075.776 us/op
                 plusOne·p0.9999: 96075.776 us/op
                 plusOne·p1.00:   96075.776 us/op

Iteration   3: 18537.387 ±(99.9%) 738.575 us/op
                 plusOne·p0.00:   17563.648 us/op
                 plusOne·p0.50:   17956.864 us/op
                 plusOne·p0.90:   18219.008 us/op
                 plusOne·p0.95:   18382.848 us/op
                 plusOne·p0.99:   50475.827 us/op
                 plusOne·p0.999:  88080.384 us/op
                 plusOne·p0.9999: 88080.384 us/op
                 plusOne·p1.00:   88080.384 us/op

Iteration   4: 18922.155 ±(99.9%) 774.726 us/op
                 plusOne·p0.00:   17629.184 us/op
                 plusOne·p0.50:   18038.784 us/op
                 plusOne·p0.90:   20971.520 us/op
                 plusOne·p0.95:   21433.549 us/op
                 plusOne·p0.99:   52046.725 us/op
                 plusOne·p0.999:  89391.104 us/op
                 plusOne·p0.9999: 89391.104 us/op
                 plusOne·p1.00:   89391.104 us/op

Iteration   5: 18543.709 ±(99.9%) 687.158 us/op
                 plusOne·p0.00:   17629.184 us/op
                 plusOne·p0.50:   17989.632 us/op
                 plusOne·p0.90:   18284.544 us/op
                 plusOne·p0.95:   18448.384 us/op
                 plusOne·p0.99:   51983.155 us/op
                 plusOne·p0.999:  73924.608 us/op
                 plusOne·p0.9999: 73924.608 us/op
                 plusOne·p1.00:   73924.608 us/op

Iteration   6: 18728.139 ±(99.9%) 807.256 us/op
                 plusOne·p0.00:   17694.720 us/op
                 plusOne·p0.50:   18087.936 us/op
                 plusOne·p0.90:   18513.920 us/op
                 plusOne·p0.95:   18644.992 us/op
                 plusOne·p0.99:   56387.174 us/op
                 plusOne·p0.999:  85065.728 us/op
                 plusOne·p0.9999: 85065.728 us/op
                 plusOne·p1.00:   85065.728 us/op

Iteration   7: 18598.703 ±(99.9%) 719.967 us/op
                 plusOne·p0.00:   17629.184 us/op
                 plusOne·p0.50:   17989.632 us/op
                 plusOne·p0.90:   18415.616 us/op
                 plusOne·p0.95:   18613.862 us/op
                 plusOne·p0.99:   52663.419 us/op
                 plusOne·p0.999:  81002.496 us/op
                 plusOne·p0.9999: 81002.496 us/op
                 plusOne·p1.00:   81002.496 us/op

Iteration   8: 19220.890 ±(99.9%) 705.762 us/op
                 plusOne·p0.00:   17694.720 us/op
                 plusOne·p0.50:   18284.544 us/op
                 plusOne·p0.90:   21004.288 us/op
                 plusOne·p0.95:   22046.310 us/op
                 plusOne·p0.99:   51281.265 us/op
                 plusOne·p0.999:  71827.456 us/op
                 plusOne·p0.9999: 71827.456 us/op
                 plusOne·p1.00:   71827.456 us/op

Iteration   9: 19141.722 ±(99.9%) 785.514 us/op
                 plusOne·p0.00:   17596.416 us/op
                 plusOne·p0.50:   18219.008 us/op
                 plusOne·p0.90:   20054.016 us/op
                 plusOne·p0.95:   22323.200 us/op
                 plusOne·p0.99:   52428.145 us/op
                 plusOne·p0.999:  88342.528 us/op
                 plusOne·p0.9999: 88342.528 us/op
                 plusOne·p1.00:   88342.528 us/op

Iteration  10: 19555.635 ±(99.9%) 910.298 us/op
                 plusOne·p0.00:   17661.952 us/op
                 plusOne·p0.50:   18219.008 us/op
                 plusOne·p0.90:   23035.904 us/op
                 plusOne·p0.95:   24340.070 us/op
                 plusOne·p0.99:   48229.253 us/op
                 plusOne·p0.999:  95682.560 us/op
                 plusOne·p0.9999: 95682.560 us/op
                 plusOne·p1.00:   95682.560 us/op

Iteration  11: 19821.136 ±(99.9%) 769.037 us/op
                 plusOne·p0.00:   17727.488 us/op
                 plusOne·p0.50:   18284.544 us/op
                 plusOne·p0.90:   22315.008 us/op
                 plusOne·p0.95:   22675.456 us/op
                 plusOne·p0.99:   58138.296 us/op
                 plusOne·p0.999:  71696.384 us/op
                 plusOne·p0.9999: 71696.384 us/op
                 plusOne·p1.00:   71696.384 us/op

Iteration  12: 19081.107 ±(99.9%) 715.050 us/op
                 plusOne·p0.00:   17629.184 us/op
                 plusOne·p0.50:   18448.384 us/op
                 plusOne·p0.90:   19496.960 us/op
                 plusOne·p0.95:   19595.264 us/op
                 plusOne·p0.99:   47824.896 us/op
                 plusOne·p0.999:  79822.848 us/op
                 plusOne·p0.9999: 79822.848 us/op
                 plusOne·p1.00:   79822.848 us/op

Iteration  13: 19146.305 ±(99.9%) 780.222 us/op
                 plusOne·p0.00:   17596.416 us/op
                 plusOne·p0.50:   18382.848 us/op
                 plusOne·p0.90:   19529.728 us/op
                 plusOne·p0.95:   19721.421 us/op
                 plusOne·p0.99:   48589.701 us/op
                 plusOne·p0.999:  84017.152 us/op
                 plusOne·p0.9999: 84017.152 us/op
                 plusOne·p1.00:   84017.152 us/op

Iteration  14: 19178.085 ±(99.9%) 716.866 us/op
                 plusOne·p0.00:   17694.720 us/op
                 plusOne·p0.50:   18448.384 us/op
                 plusOne·p0.90:   19555.942 us/op
                 plusOne·p0.95:   19660.800 us/op
                 plusOne·p0.99:   55148.544 us/op
                 plusOne·p0.999:  75628.544 us/op
                 plusOne·p0.9999: 75628.544 us/op
                 plusOne·p1.00:   75628.544 us/op

Iteration  15: 19150.448 ±(99.9%) 767.437 us/op
                 plusOne·p0.00:   17629.184 us/op
                 plusOne·p0.50:   18382.848 us/op
                 plusOne·p0.90:   19496.960 us/op
                 plusOne·p0.95:   19726.336 us/op
                 plusOne·p0.99:   54639.985 us/op
                 plusOne·p0.999:  82968.576 us/op
                 plusOne·p0.9999: 82968.576 us/op
                 plusOne·p1.00:   82968.576 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  N = 7891
  mean =  19004.053 ±(99.9%) 195.745 us/op

  Histogram, us/op:
    [ 10000.000,  15000.000) = 0 
    [ 15000.000,  20000.000) = 7328 
    [ 20000.000,  25000.000) = 453 
    [ 25000.000,  30000.000) = 15 
    [ 30000.000,  35000.000) = 6 
    [ 35000.000,  40000.000) = 1 
    [ 40000.000,  45000.000) = 0 
    [ 45000.000,  50000.000) = 12 
    [ 50000.000,  55000.000) = 15 
    [ 55000.000,  60000.000) = 9 
    [ 60000.000,  65000.000) = 6 
    [ 65000.000,  70000.000) = 8 
    [ 70000.000,  75000.000) = 14 
    [ 75000.000,  80000.000) = 11 
    [ 80000.000,  85000.000) = 6 
    [ 85000.000,  90000.000) = 4 
    [ 90000.000,  95000.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  17563.648 us/op
     p(50.0000) =  18120.704 us/op
     p(90.0000) =  19496.960 us/op
     p(95.0000) =  21364.736 us/op
     p(99.0000) =  49615.995 us/op
     p(99.9000) =  84130.398 us/op
     p(99.9900) =  96075.776 us/op
     p(99.9990) =  96075.776 us/op
     p(99.9999) =  96075.776 us/op
    p(100.0000) =  96075.776 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 96.37% complete, ETA 00:18:02
# Fork: 1 of 1
# Warmup Iteration   1: 41986.822 ±(99.9%) 1366.385 us/op
# Warmup Iteration   2: 39381.202 ±(99.9%) 902.693 us/op
# Warmup Iteration   3: 38602.475 ±(99.9%) 853.937 us/op
# Warmup Iteration   4: 40685.068 ±(99.9%) 954.714 us/op
# Warmup Iteration   5: 38259.767 ±(99.9%) 803.906 us/op
Iteration   1: 38440.897 ±(99.9%) 1020.119 us/op
                 sort·p0.00:   37158.912 us/op
                 sort·p0.50:   37683.200 us/op
                 sort·p0.90:   38273.024 us/op
                 sort·p0.95:   38659.686 us/op
                 sort·p0.99:   73123.758 us/op
                 sort·p0.999:  87687.168 us/op
                 sort·p0.9999: 87687.168 us/op
                 sort·p1.00:   87687.168 us/op

Iteration   2: 39398.489 ±(99.9%) 989.695 us/op
                 sort·p0.00:   38207.488 us/op
                 sort·p0.50:   38731.776 us/op
                 sort·p0.90:   39059.456 us/op
                 sort·p0.95:   39403.520 us/op
                 sort·p0.99:   74855.219 us/op
                 sort·p0.999:  85852.160 us/op
                 sort·p0.9999: 85852.160 us/op
                 sort·p1.00:   85852.160 us/op

Iteration   3: 38723.902 ±(99.9%) 1113.636 us/op
                 sort·p0.00:   37421.056 us/op
                 sort·p0.50:   37945.344 us/op
                 sort·p0.90:   38338.560 us/op
                 sort·p0.95:   38669.517 us/op
                 sort·p0.99:   76556.534 us/op
                 sort·p0.999:  95027.200 us/op
                 sort·p0.9999: 95027.200 us/op
                 sort·p1.00:   95027.200 us/op

Iteration   4: 39740.562 ±(99.9%) 1034.795 us/op
                 sort·p0.00:   38666.240 us/op
                 sort·p0.50:   39059.456 us/op
                 sort·p0.90:   39387.136 us/op
                 sort·p0.95:   39583.744 us/op
                 sort·p0.99:   73104.097 us/op
                 sort·p0.999:  90308.608 us/op
                 sort·p0.9999: 90308.608 us/op
                 sort·p1.00:   90308.608 us/op

Iteration   5: 37294.875 ±(99.9%) 1010.609 us/op
                 sort·p0.00:   36044.800 us/op
                 sort·p0.50:   36503.552 us/op
                 sort·p0.90:   36962.304 us/op
                 sort·p0.95:   39455.949 us/op
                 sort·p0.99:   72718.746 us/op
                 sort·p0.999:  87031.808 us/op
                 sort·p0.9999: 87031.808 us/op
                 sort·p1.00:   87031.808 us/op

Iteration   6: 38261.017 ±(99.9%) 983.743 us/op
                 sort·p0.00:   37093.376 us/op
                 sort·p0.50:   37617.664 us/op
                 sort·p0.90:   38010.880 us/op
                 sort·p0.95:   38141.952 us/op
                 sort·p0.99:   73229.926 us/op
                 sort·p0.999:  85196.800 us/op
                 sort·p0.9999: 85196.800 us/op
                 sort·p1.00:   85196.800 us/op

Iteration   7: 38171.468 ±(99.9%) 1029.287 us/op
                 sort·p0.00:   36831.232 us/op
                 sort·p0.50:   37355.520 us/op
                 sort·p0.90:   37879.808 us/op
                 sort·p0.95:   41081.242 us/op
                 sort·p0.99:   75408.343 us/op
                 sort·p0.999:  87293.952 us/op
                 sort·p0.9999: 87293.952 us/op
                 sort·p1.00:   87293.952 us/op

Iteration   8: 40957.046 ±(99.9%) 1257.751 us/op
                 sort·p0.00:   39583.744 us/op
                 sort·p0.50:   40108.032 us/op
                 sort·p0.90:   40566.784 us/op
                 sort·p0.95:   40861.696 us/op
                 sort·p0.99:   86219.162 us/op
                 sort·p0.999:  99352.576 us/op
                 sort·p0.9999: 99352.576 us/op
                 sort·p1.00:   99352.576 us/op

Iteration   9: 39498.521 ±(99.9%) 1064.680 us/op
                 sort·p0.00:   38207.488 us/op
                 sort·p0.50:   38797.312 us/op
                 sort·p0.90:   39256.064 us/op
                 sort·p0.95:   39452.672 us/op
                 sort·p0.99:   77526.467 us/op
                 sort·p0.999:  86245.376 us/op
                 sort·p0.9999: 86245.376 us/op
                 sort·p1.00:   86245.376 us/op

Iteration  10: 39914.035 ±(99.9%) 1274.647 us/op
                 sort·p0.00:   38469.632 us/op
                 sort·p0.50:   39059.456 us/op
                 sort·p0.90:   39452.672 us/op
                 sort·p0.95:   39609.958 us/op
                 sort·p0.99:   87692.411 us/op
                 sort·p0.999:  98697.216 us/op
                 sort·p0.9999: 98697.216 us/op
                 sort·p1.00:   98697.216 us/op

Iteration  11: 39080.704 ±(99.9%) 1266.434 us/op
                 sort·p0.00:   37683.200 us/op
                 sort·p0.50:   38273.024 us/op
                 sort·p0.90:   38685.901 us/op
                 sort·p0.95:   38993.920 us/op
                 sort·p0.99:   87957.176 us/op
                 sort·p0.999:  96075.776 us/op
                 sort·p0.9999: 96075.776 us/op
                 sort·p1.00:   96075.776 us/op

Iteration  12: 40573.417 ±(99.9%) 995.245 us/op
                 sort·p0.00:   38207.488 us/op
                 sort·p0.50:   38993.920 us/op
                 sort·p0.90:   42467.328 us/op
                 sort·p0.95:   42663.936 us/op
                 sort·p0.99:   74291.610 us/op
                 sort·p0.999:  82706.432 us/op
                 sort·p0.9999: 82706.432 us/op
                 sort·p1.00:   82706.432 us/op

Iteration  13: 41019.358 ±(99.9%) 1167.923 us/op
                 sort·p0.00:   39714.816 us/op
                 sort·p0.50:   40239.104 us/op
                 sort·p0.90:   40763.392 us/op
                 sort·p0.95:   41025.536 us/op
                 sort·p0.99:   81978.982 us/op
                 sort·p0.999:  96075.776 us/op
                 sort·p0.9999: 96075.776 us/op
                 sort·p1.00:   96075.776 us/op

Iteration  14: 39673.726 ±(99.9%) 1297.723 us/op
                 sort·p0.00:   38338.560 us/op
                 sort·p0.50:   38862.848 us/op
                 sort·p0.90:   39301.939 us/op
                 sort·p0.95:   39518.208 us/op
                 sort·p0.99:   83680.297 us/op
                 sort·p0.999:  107085.824 us/op
                 sort·p0.9999: 107085.824 us/op
                 sort·p1.00:   107085.824 us/op

Iteration  15: 41369.465 ±(99.9%) 1130.694 us/op
                 sort·p0.00:   40042.496 us/op
                 sort·p0.50:   40632.320 us/op
                 sort·p0.90:   41005.875 us/op
                 sort·p0.95:   41287.680 us/op
                 sort·p0.99:   80794.092 us/op
                 sort·p0.999:  93716.480 us/op
                 sort·p0.9999: 93716.480 us/op
                 sort·p1.00:   93716.480 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  N = 3805
  mean =  39442.011 ±(99.9%) 289.977 us/op

  Histogram, us/op:
    [ 30000.000,  35000.000) = 0 
    [ 35000.000,  40000.000) = 3013 
    [ 40000.000,  45000.000) = 710 
    [ 45000.000,  50000.000) = 13 
    [ 50000.000,  55000.000) = 6 
    [ 55000.000,  60000.000) = 2 
    [ 60000.000,  65000.000) = 9 
    [ 65000.000,  70000.000) = 10 
    [ 70000.000,  75000.000) = 5 
    [ 75000.000,  80000.000) = 8 
    [ 80000.000,  85000.000) = 9 
    [ 85000.000,  90000.000) = 10 
    [ 90000.000,  95000.000) = 4 
    [ 95000.000, 100000.000) = 5 
    [100000.000, 105000.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  36044.800 us/op
     p(50.0000) =  38731.776 us/op
     p(90.0000) =  40566.784 us/op
     p(95.0000) =  41287.680 us/op
     p(99.0000) =  73785.672 us/op
     p(99.9000) =  96584.335 us/op
     p(99.9900) = 107085.824 us/op
     p(99.9990) = 107085.824 us/op
     p(99.9999) = 107085.824 us/op
    p(100.0000) = 107085.824 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 97.10% complete, ETA 00:14:25
# Fork: 1 of 1
# Warmup Iteration   1: 1804.015 ±(99.9%) 59.810 us/op
# Warmup Iteration   2: 1697.086 ±(99.9%) 48.449 us/op
# Warmup Iteration   3: 1694.331 ±(99.9%) 46.748 us/op
# Warmup Iteration   4: 1698.223 ±(99.9%) 51.008 us/op
# Warmup Iteration   5: 1703.395 ±(99.9%) 52.570 us/op
Iteration   1: 1705.763 ±(99.9%) 50.864 us/op
                 concatenateStrings·p0.00:   1327.104 us/op
                 concatenateStrings·p0.50:   1593.344 us/op
                 concatenateStrings·p0.90:   1763.328 us/op
                 concatenateStrings·p0.95:   1792.205 us/op
                 concatenateStrings·p0.99:   2051.768 us/op
                 concatenateStrings·p0.999:  23756.407 us/op
                 concatenateStrings·p0.9999: 33554.432 us/op
                 concatenateStrings·p1.00:   33554.432 us/op

Iteration   2: 1701.163 ±(99.9%) 46.355 us/op
                 concatenateStrings·p0.00:   1376.256 us/op
                 concatenateStrings·p0.50:   1593.344 us/op
                 concatenateStrings·p0.90:   1771.520 us/op
                 concatenateStrings·p0.95:   1798.144 us/op
                 concatenateStrings·p0.99:   2040.300 us/op
                 concatenateStrings·p0.999:  18805.686 us/op
                 concatenateStrings·p0.9999: 32210.944 us/op
                 concatenateStrings·p1.00:   32210.944 us/op

Iteration   3: 1700.491 ±(99.9%) 43.259 us/op
                 concatenateStrings·p0.00:   1384.448 us/op
                 concatenateStrings·p0.50:   1597.440 us/op
                 concatenateStrings·p0.90:   1777.664 us/op
                 concatenateStrings·p0.95:   1810.432 us/op
                 concatenateStrings·p0.99:   2092.237 us/op
                 concatenateStrings·p0.999:  15625.945 us/op
                 concatenateStrings·p0.9999: 32112.640 us/op
                 concatenateStrings·p1.00:   32112.640 us/op

Iteration   4: 1685.612 ±(99.9%) 41.868 us/op
                 concatenateStrings·p0.00:   1345.536 us/op
                 concatenateStrings·p0.50:   1587.200 us/op
                 concatenateStrings·p0.90:   1759.232 us/op
                 concatenateStrings·p0.95:   1785.856 us/op
                 concatenateStrings·p0.99:   1963.438 us/op
                 concatenateStrings·p0.999:  18884.624 us/op
                 concatenateStrings·p0.9999: 24674.304 us/op
                 concatenateStrings·p1.00:   24674.304 us/op

Iteration   5: 1698.397 ±(99.9%) 48.277 us/op
                 concatenateStrings·p0.00:   1372.160 us/op
                 concatenateStrings·p0.50:   1591.296 us/op
                 concatenateStrings·p0.90:   1763.328 us/op
                 concatenateStrings·p0.95:   1789.542 us/op
                 concatenateStrings·p0.99:   2025.800 us/op
                 concatenateStrings·p0.999:  21203.386 us/op
                 concatenateStrings·p0.9999: 35586.048 us/op
                 concatenateStrings·p1.00:   35586.048 us/op

Iteration   6: 1688.969 ±(99.9%) 37.126 us/op
                 concatenateStrings·p0.00:   1370.112 us/op
                 concatenateStrings·p0.50:   1593.344 us/op
                 concatenateStrings·p0.90:   1769.472 us/op
                 concatenateStrings·p0.95:   1794.048 us/op
                 concatenateStrings·p0.99:   1978.368 us/op
                 concatenateStrings·p0.999:  15416.558 us/op
                 concatenateStrings·p0.9999: 20021.248 us/op
                 concatenateStrings·p1.00:   20021.248 us/op

Iteration   7: 1682.480 ±(99.9%) 33.388 us/op
                 concatenateStrings·p0.00:   1366.016 us/op
                 concatenateStrings·p0.50:   1595.392 us/op
                 concatenateStrings·p0.90:   1773.568 us/op
                 concatenateStrings·p0.95:   1800.192 us/op
                 concatenateStrings·p0.99:   1996.800 us/op
                 concatenateStrings·p0.999:  11615.601 us/op
                 concatenateStrings·p0.9999: 22708.224 us/op
                 concatenateStrings·p1.00:   22708.224 us/op

Iteration   8: 1690.535 ±(99.9%) 44.459 us/op
                 concatenateStrings·p0.00:   1351.680 us/op
                 concatenateStrings·p0.50:   1589.248 us/op
                 concatenateStrings·p0.90:   1761.280 us/op
                 concatenateStrings·p0.95:   1792.000 us/op
                 concatenateStrings·p0.99:   2039.562 us/op
                 concatenateStrings·p0.999:  19776.930 us/op
                 concatenateStrings·p0.9999: 31719.424 us/op
                 concatenateStrings·p1.00:   31719.424 us/op

Iteration   9: 1689.619 ±(99.9%) 48.151 us/op
                 concatenateStrings·p0.00:   1374.208 us/op
                 concatenateStrings·p0.50:   1581.056 us/op
                 concatenateStrings·p0.90:   1748.992 us/op
                 concatenateStrings·p0.95:   1775.616 us/op
                 concatenateStrings·p0.99:   2049.434 us/op
                 concatenateStrings·p0.999:  19000.689 us/op
                 concatenateStrings·p0.9999: 32997.376 us/op
                 concatenateStrings·p1.00:   32997.376 us/op

Iteration  10: 1693.422 ±(99.9%) 45.297 us/op
                 concatenateStrings·p0.00:   1341.440 us/op
                 concatenateStrings·p0.50:   1591.296 us/op
                 concatenateStrings·p0.90:   1761.280 us/op
                 concatenateStrings·p0.95:   1787.904 us/op
                 concatenateStrings·p0.99:   1986.519 us/op
                 concatenateStrings·p0.999:  17561.027 us/op
                 concatenateStrings·p0.9999: 37093.376 us/op
                 concatenateStrings·p1.00:   37093.376 us/op

Iteration  11: 1682.712 ±(99.9%) 42.640 us/op
                 concatenateStrings·p0.00:   1329.152 us/op
                 concatenateStrings·p0.50:   1583.104 us/op
                 concatenateStrings·p0.90:   1755.136 us/op
                 concatenateStrings·p0.95:   1781.760 us/op
                 concatenateStrings·p0.99:   1992.704 us/op
                 concatenateStrings·p0.999:  20667.433 us/op
                 concatenateStrings·p0.9999: 24444.928 us/op
                 concatenateStrings·p1.00:   24444.928 us/op

Iteration  12: 1708.491 ±(99.9%) 55.468 us/op
                 concatenateStrings·p0.00:   1347.584 us/op
                 concatenateStrings·p0.50:   1587.200 us/op
                 concatenateStrings·p0.90:   1755.136 us/op
                 concatenateStrings·p0.95:   1785.856 us/op
                 concatenateStrings·p0.99:   2021.376 us/op
                 concatenateStrings·p0.999:  25065.882 us/op
                 concatenateStrings·p0.9999: 34471.936 us/op
                 concatenateStrings·p1.00:   34471.936 us/op

Iteration  13: 1684.802 ±(99.9%) 36.320 us/op
                 concatenateStrings·p0.00:   1370.112 us/op
                 concatenateStrings·p0.50:   1593.344 us/op
                 concatenateStrings·p0.90:   1761.280 us/op
                 concatenateStrings·p0.95:   1792.000 us/op
                 concatenateStrings·p0.99:   2046.689 us/op
                 concatenateStrings·p0.999:  14313.587 us/op
                 concatenateStrings·p0.9999: 20447.232 us/op
                 concatenateStrings·p1.00:   20447.232 us/op

Iteration  14: 1693.010 ±(99.9%) 38.912 us/op
                 concatenateStrings·p0.00:   1355.776 us/op
                 concatenateStrings·p0.50:   1599.488 us/op
                 concatenateStrings·p0.90:   1765.376 us/op
                 concatenateStrings·p0.95:   1796.096 us/op
                 concatenateStrings·p0.99:   2043.597 us/op
                 concatenateStrings·p0.999:  14689.337 us/op
                 concatenateStrings·p0.9999: 30015.488 us/op
                 concatenateStrings·p1.00:   30015.488 us/op

Iteration  15: 1714.341 ±(99.9%) 52.633 us/op
                 concatenateStrings·p0.00:   1347.584 us/op
                 concatenateStrings·p0.50:   1597.440 us/op
                 concatenateStrings·p0.90:   1773.568 us/op
                 concatenateStrings·p0.95:   1800.192 us/op
                 concatenateStrings·p0.99:   2010.112 us/op
                 concatenateStrings·p0.999:  23536.927 us/op
                 concatenateStrings·p0.9999: 32505.856 us/op
                 concatenateStrings·p1.00:   32505.856 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 88458
  mean =   1694.602 ±(99.9%) 11.533 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 87764 
    [ 2500.000,  5000.000) = 5 
    [ 5000.000,  7500.000) = 23 
    [ 7500.000, 10000.000) = 310 
    [10000.000, 12500.000) = 170 
    [12500.000, 15000.000) = 61 
    [15000.000, 17500.000) = 39 
    [17500.000, 20000.000) = 16 
    [20000.000, 22500.000) = 17 
    [22500.000, 25000.000) = 23 
    [25000.000, 27500.000) = 11 
    [27500.000, 30000.000) = 5 
    [30000.000, 32500.000) = 6 
    [32500.000, 35000.000) = 6 
    [35000.000, 37500.000) = 2 

  Percentiles, us/op:
      p(0.0000) =   1327.104 us/op
     p(50.0000) =   1591.296 us/op
     p(90.0000) =   1765.376 us/op
     p(95.0000) =   1794.048 us/op
     p(99.0000) =   2019.328 us/op
     p(99.9000) =  17450.303 us/op
     p(99.9900) =  32256.390 us/op
     p(99.9990) =  37093.376 us/op
     p(99.9999) =  37093.376 us/op
    p(100.0000) =  37093.376 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 97.82% complete, ETA 00:10:49
# Fork: 1 of 1
# Warmup Iteration   1: 43885.550 ±(99.9%) 5167.549 us/op
# Warmup Iteration   2: 22039.367 ±(99.9%) 672.350 us/op
# Warmup Iteration   3: 21837.225 ±(99.9%) 559.158 us/op
# Warmup Iteration   4: 21802.285 ±(99.9%) 581.638 us/op
# Warmup Iteration   5: 21880.420 ±(99.9%) 656.587 us/op
Iteration   1: 21983.871 ±(99.9%) 655.736 us/op
                 concatenateStrings·p0.00:   20447.232 us/op
                 concatenateStrings·p0.50:   20938.752 us/op
                 concatenateStrings·p0.90:   21659.648 us/op
                 concatenateStrings·p0.95:   29884.416 us/op
                 concatenateStrings·p0.99:   46643.282 us/op
                 concatenateStrings·p0.999:  60030.976 us/op
                 concatenateStrings·p0.9999: 60030.976 us/op
                 concatenateStrings·p1.00:   60030.976 us/op

Iteration   2: 21796.574 ±(99.9%) 604.431 us/op
                 concatenateStrings·p0.00:   20348.928 us/op
                 concatenateStrings·p0.50:   20807.680 us/op
                 concatenateStrings·p0.90:   21397.504 us/op
                 concatenateStrings·p0.95:   29196.288 us/op
                 concatenateStrings·p0.99:   42178.970 us/op
                 concatenateStrings·p0.999:  65929.216 us/op
                 concatenateStrings·p0.9999: 65929.216 us/op
                 concatenateStrings·p1.00:   65929.216 us/op

Iteration   3: 22199.775 ±(99.9%) 801.333 us/op
                 concatenateStrings·p0.00:   20381.696 us/op
                 concatenateStrings·p0.50:   20905.984 us/op
                 concatenateStrings·p0.90:   21456.486 us/op
                 concatenateStrings·p0.95:   31417.958 us/op
                 concatenateStrings·p0.99:   49041.900 us/op
                 concatenateStrings·p0.999:  68157.440 us/op
                 concatenateStrings·p0.9999: 68157.440 us/op
                 concatenateStrings·p1.00:   68157.440 us/op

Iteration   4: 21788.436 ±(99.9%) 534.642 us/op
                 concatenateStrings·p0.00:   20480.000 us/op
                 concatenateStrings·p0.50:   20873.216 us/op
                 concatenateStrings·p0.90:   21463.040 us/op
                 concatenateStrings·p0.95:   29556.736 us/op
                 concatenateStrings·p0.99:   37027.840 us/op
                 concatenateStrings·p0.999:  56492.032 us/op
                 concatenateStrings·p0.9999: 56492.032 us/op
                 concatenateStrings·p1.00:   56492.032 us/op

Iteration   5: 21751.042 ±(99.9%) 418.111 us/op
                 concatenateStrings·p0.00:   20480.000 us/op
                 concatenateStrings·p0.50:   20971.520 us/op
                 concatenateStrings·p0.90:   21528.576 us/op
                 concatenateStrings·p0.95:   28404.941 us/op
                 concatenateStrings·p0.99:   34152.120 us/op
                 concatenateStrings·p0.999:  40108.032 us/op
                 concatenateStrings·p0.9999: 40108.032 us/op
                 concatenateStrings·p1.00:   40108.032 us/op

Iteration   6: 21773.872 ±(99.9%) 414.224 us/op
                 concatenateStrings·p0.00:   20414.464 us/op
                 concatenateStrings·p0.50:   21037.056 us/op
                 concatenateStrings·p0.90:   21561.344 us/op
                 concatenateStrings·p0.95:   28901.376 us/op
                 concatenateStrings·p0.99:   34262.221 us/op
                 concatenateStrings·p0.999:  41877.504 us/op
                 concatenateStrings·p0.9999: 41877.504 us/op
                 concatenateStrings·p1.00:   41877.504 us/op

Iteration   7: 21645.746 ±(99.9%) 422.783 us/op
                 concatenateStrings·p0.00:   20381.696 us/op
                 concatenateStrings·p0.50:   20873.216 us/op
                 concatenateStrings·p0.90:   21626.880 us/op
                 concatenateStrings·p0.95:   28586.803 us/op
                 concatenateStrings·p0.99:   32862.700 us/op
                 concatenateStrings·p0.999:  44302.336 us/op
                 concatenateStrings·p0.9999: 44302.336 us/op
                 concatenateStrings·p1.00:   44302.336 us/op

Iteration   8: 21805.426 ±(99.9%) 511.832 us/op
                 concatenateStrings·p0.00:   20447.232 us/op
                 concatenateStrings·p0.50:   20938.752 us/op
                 concatenateStrings·p0.90:   21626.880 us/op
                 concatenateStrings·p0.95:   28868.608 us/op
                 concatenateStrings·p0.99:   36752.589 us/op
                 concatenateStrings·p0.999:  49807.360 us/op
                 concatenateStrings·p0.9999: 49807.360 us/op
                 concatenateStrings·p1.00:   49807.360 us/op

Iteration   9: 22027.530 ±(99.9%) 607.111 us/op
                 concatenateStrings·p0.00:   20381.696 us/op
                 concatenateStrings·p0.50:   20971.520 us/op
                 concatenateStrings·p0.90:   21692.416 us/op
                 concatenateStrings·p0.95:   30613.504 us/op
                 concatenateStrings·p0.99:   41694.003 us/op
                 concatenateStrings·p0.999:  44564.480 us/op
                 concatenateStrings·p0.9999: 44564.480 us/op
                 concatenateStrings·p1.00:   44564.480 us/op

Iteration  10: 21755.530 ±(99.9%) 517.123 us/op
                 concatenateStrings·p0.00:   20414.464 us/op
                 concatenateStrings·p0.50:   20774.912 us/op
                 concatenateStrings·p0.90:   21656.371 us/op
                 concatenateStrings·p0.95:   29587.866 us/op
                 concatenateStrings·p0.99:   40794.849 us/op
                 concatenateStrings·p0.999:  44171.264 us/op
                 concatenateStrings·p0.9999: 44171.264 us/op
                 concatenateStrings·p1.00:   44171.264 us/op

Iteration  11: 21767.518 ±(99.9%) 550.054 us/op
                 concatenateStrings·p0.00:   20414.464 us/op
                 concatenateStrings·p0.50:   20807.680 us/op
                 concatenateStrings·p0.90:   21528.576 us/op
                 concatenateStrings·p0.95:   29229.056 us/op
                 concatenateStrings·p0.99:   41956.147 us/op
                 concatenateStrings·p0.999:  49217.536 us/op
                 concatenateStrings·p0.9999: 49217.536 us/op
                 concatenateStrings·p1.00:   49217.536 us/op

Iteration  12: 21893.828 ±(99.9%) 633.923 us/op
                 concatenateStrings·p0.00:   20414.464 us/op
                 concatenateStrings·p0.50:   20840.448 us/op
                 concatenateStrings·p0.90:   21338.522 us/op
                 concatenateStrings·p0.95:   28383.642 us/op
                 concatenateStrings·p0.99:   44999.639 us/op
                 concatenateStrings·p0.999:  57475.072 us/op
                 concatenateStrings·p0.9999: 57475.072 us/op
                 concatenateStrings·p1.00:   57475.072 us/op

Iteration  13: 21756.314 ±(99.9%) 515.763 us/op
                 concatenateStrings·p0.00:   20447.232 us/op
                 concatenateStrings·p0.50:   20873.216 us/op
                 concatenateStrings·p0.90:   21525.299 us/op
                 concatenateStrings·p0.95:   29222.502 us/op
                 concatenateStrings·p0.99:   40996.700 us/op
                 concatenateStrings·p0.999:  49938.432 us/op
                 concatenateStrings·p0.9999: 49938.432 us/op
                 concatenateStrings·p1.00:   49938.432 us/op

Iteration  14: 21720.411 ±(99.9%) 423.416 us/op
                 concatenateStrings·p0.00:   20316.160 us/op
                 concatenateStrings·p0.50:   20938.752 us/op
                 concatenateStrings·p0.90:   21397.504 us/op
                 concatenateStrings·p0.95:   29515.776 us/op
                 concatenateStrings·p0.99:   32814.858 us/op
                 concatenateStrings·p0.999:  40173.568 us/op
                 concatenateStrings·p0.9999: 40173.568 us/op
                 concatenateStrings·p1.00:   40173.568 us/op

Iteration  15: 21720.767 ±(99.9%) 413.351 us/op
                 concatenateStrings·p0.00:   20447.232 us/op
                 concatenateStrings·p0.50:   20987.904 us/op
                 concatenateStrings·p0.90:   21594.112 us/op
                 concatenateStrings·p0.95:   28930.867 us/op
                 concatenateStrings·p0.99:   33263.452 us/op
                 concatenateStrings·p0.999:  42532.864 us/op
                 concatenateStrings·p0.9999: 42532.864 us/op
                 concatenateStrings·p1.00:   42532.864 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 6874
  mean =  21824.942 ±(99.9%) 139.701 us/op

  Histogram, us/op:
    [20000.000, 25000.000) = 6306 
    [25000.000, 30000.000) = 292 
    [30000.000, 35000.000) = 168 
    [35000.000, 40000.000) = 49 
    [40000.000, 45000.000) = 32 
    [45000.000, 50000.000) = 15 
    [50000.000, 55000.000) = 6 
    [55000.000, 60000.000) = 3 
    [60000.000, 65000.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  20316.160 us/op
     p(50.0000) =  20905.984 us/op
     p(90.0000) =  21544.960 us/op
     p(95.0000) =  29196.288 us/op
     p(99.0000) =  38502.400 us/op
     p(99.9000) =  53731.328 us/op
     p(99.9900) =  68157.440 us/op
     p(99.9990) =  68157.440 us/op
     p(99.9999) =  68157.440 us/op
    p(100.0000) =  68157.440 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 98.55% complete, ETA 00:07:13
# Fork: 1 of 1
# Warmup Iteration   1: 875823.104 ±(99.9%) 32457.239 us/op
# Warmup Iteration   2: 935520.442 ±(99.9%) 40114.319 us/op
# Warmup Iteration   3: 943718.400 ±(99.9%) 38755.396 us/op
# Warmup Iteration   4: 938570.845 ±(99.9%) 30311.593 us/op
# Warmup Iteration   5: 948103.354 ±(99.9%) 37102.075 us/op
Iteration   1: 937426.944 ±(99.9%) 24780.707 us/op
                 concatenateStrings·p0.00:   912261.120 us/op
                 concatenateStrings·p0.50:   932184.064 us/op
                 concatenateStrings·p0.90:   964060.774 us/op
                 concatenateStrings·p0.95:   964689.920 us/op
                 concatenateStrings·p0.99:   964689.920 us/op
                 concatenateStrings·p0.999:  964689.920 us/op
                 concatenateStrings·p0.9999: 964689.920 us/op
                 concatenateStrings·p1.00:   964689.920 us/op

Iteration   2: 947150.103 ±(99.9%) 24258.292 us/op
                 concatenateStrings·p0.00:   908066.816 us/op
                 concatenateStrings·p0.50:   946864.128 us/op
                 concatenateStrings·p0.90:   973707.674 us/op
                 concatenateStrings·p0.95:   975175.680 us/op
                 concatenateStrings·p0.99:   975175.680 us/op
                 concatenateStrings·p0.999:  975175.680 us/op
                 concatenateStrings·p0.9999: 975175.680 us/op
                 concatenateStrings·p1.00:   975175.680 us/op

Iteration   3: 945052.951 ±(99.9%) 38603.653 us/op
                 concatenateStrings·p0.00:   916455.424 us/op
                 concatenateStrings·p0.50:   929038.336 us/op
                 concatenateStrings·p0.90:   991533.466 us/op
                 concatenateStrings·p0.95:   993001.472 us/op
                 concatenateStrings·p0.99:   993001.472 us/op
                 concatenateStrings·p0.999:  993001.472 us/op
                 concatenateStrings·p0.9999: 993001.472 us/op
                 concatenateStrings·p1.00:   993001.472 us/op

Iteration   4: 947245.428 ±(99.9%) 28144.521 us/op
                 concatenateStrings·p0.00:   919601.152 us/op
                 concatenateStrings·p0.50:   945815.552 us/op
                 concatenateStrings·p0.90:   981047.706 us/op
                 concatenateStrings·p0.95:   983564.288 us/op
                 concatenateStrings·p0.99:   983564.288 us/op
                 concatenateStrings·p0.999:  983564.288 us/op
                 concatenateStrings·p0.9999: 983564.288 us/op
                 concatenateStrings·p1.00:   983564.288 us/op

Iteration   5: 792461.312 ±(99.9%) 343349.141 us/op
                 concatenateStrings·p0.00:   262930.432 us/op
                 concatenateStrings·p0.50:   929038.336 us/op
                 concatenateStrings·p0.90:   973288.243 us/op
                 concatenateStrings·p0.95:   980418.560 us/op
                 concatenateStrings·p0.99:   980418.560 us/op
                 concatenateStrings·p0.999:  980418.560 us/op
                 concatenateStrings·p0.9999: 980418.560 us/op
                 concatenateStrings·p1.00:   980418.560 us/op

Iteration   6: 298597.436 ±(99.9%) 15493.950 us/op
                 concatenateStrings·p0.00:   261095.424 us/op
                 concatenateStrings·p0.50:   303038.464 us/op
                 concatenateStrings·p0.90:   333185.024 us/op
                 concatenateStrings·p0.95:   349700.096 us/op
                 concatenateStrings·p0.99:   354418.688 us/op
                 concatenateStrings·p0.999:  354418.688 us/op
                 concatenateStrings·p0.9999: 354418.688 us/op
                 concatenateStrings·p1.00:   354418.688 us/op

Iteration   7: 300324.503 ±(99.9%) 16556.872 us/op
                 concatenateStrings·p0.00:   262406.144 us/op
                 concatenateStrings·p0.50:   302252.032 us/op
                 concatenateStrings·p0.90:   345505.792 us/op
                 concatenateStrings·p0.95:   352845.824 us/op
                 concatenateStrings·p0.99:   354418.688 us/op
                 concatenateStrings·p0.999:  354418.688 us/op
                 concatenateStrings·p0.9999: 354418.688 us/op
                 concatenateStrings·p1.00:   354418.688 us/op

Iteration   8: 299137.144 ±(99.9%) 16336.471 us/op
                 concatenateStrings·p0.00:   258473.984 us/op
                 concatenateStrings·p0.50:   304349.184 us/op
                 concatenateStrings·p0.90:   330039.296 us/op
                 concatenateStrings·p0.95:   356777.984 us/op
                 concatenateStrings·p0.99:   360710.144 us/op
                 concatenateStrings·p0.999:  360710.144 us/op
                 concatenateStrings·p0.9999: 360710.144 us/op
                 concatenateStrings·p1.00:   360710.144 us/op

Iteration   9: 299992.968 ±(99.9%) 16578.569 us/op
                 concatenateStrings·p0.00:   258998.272 us/op
                 concatenateStrings·p0.50:   299892.736 us/op
                 concatenateStrings·p0.90:   347340.800 us/op
                 concatenateStrings·p0.95:   351404.032 us/op
                 concatenateStrings·p0.99:   351797.248 us/op
                 concatenateStrings·p0.999:  351797.248 us/op
                 concatenateStrings·p0.9999: 351797.248 us/op
                 concatenateStrings·p1.00:   351797.248 us/op

Iteration  10: 299931.287 ±(99.9%) 16477.932 us/op
                 concatenateStrings·p0.00:   258998.272 us/op
                 concatenateStrings·p0.50:   307757.056 us/op
                 concatenateStrings·p0.90:   335020.032 us/op
                 concatenateStrings·p0.95:   350748.672 us/op
                 concatenateStrings·p0.99:   352321.536 us/op
                 concatenateStrings·p0.999:  352321.536 us/op
                 concatenateStrings·p0.9999: 352321.536 us/op
                 concatenateStrings·p1.00:   352321.536 us/op

Iteration  11: 299067.753 ±(99.9%) 16104.899 us/op
                 concatenateStrings·p0.00:   260046.848 us/op
                 concatenateStrings·p0.50:   303562.752 us/op
                 concatenateStrings·p0.90:   335544.320 us/op
                 concatenateStrings·p0.95:   350748.672 us/op
                 concatenateStrings·p0.99:   361758.720 us/op
                 concatenateStrings·p0.999:  361758.720 us/op
                 concatenateStrings·p0.9999: 361758.720 us/op
                 concatenateStrings·p1.00:   361758.720 us/op

Iteration  12: 301612.092 ±(99.9%) 17055.861 us/op
                 concatenateStrings·p0.00:   261357.568 us/op
                 concatenateStrings·p0.50:   301727.744 us/op
                 concatenateStrings·p0.90:   342884.352 us/op
                 concatenateStrings·p0.95:   361496.576 us/op
                 concatenateStrings·p0.99:   365428.736 us/op
                 concatenateStrings·p0.999:  365428.736 us/op
                 concatenateStrings·p0.9999: 365428.736 us/op
                 concatenateStrings·p1.00:   365428.736 us/op

Iteration  13: 301635.223 ±(99.9%) 17673.525 us/op
                 concatenateStrings·p0.00:   260308.992 us/op
                 concatenateStrings·p0.50:   305922.048 us/op
                 concatenateStrings·p0.90:   342622.208 us/op
                 concatenateStrings·p0.95:   361889.792 us/op
                 concatenateStrings·p0.99:   370147.328 us/op
                 concatenateStrings·p0.999:  370147.328 us/op
                 concatenateStrings·p0.9999: 370147.328 us/op
                 concatenateStrings·p1.00:   370147.328 us/op

Iteration  14: 301619.802 ±(99.9%) 16549.406 us/op
                 concatenateStrings·p0.00:   260833.280 us/op
                 concatenateStrings·p0.50:   305135.616 us/op
                 concatenateStrings·p0.90:   341049.344 us/op
                 concatenateStrings·p0.95:   349962.240 us/op
                 concatenateStrings·p0.99:   352321.536 us/op
                 concatenateStrings·p0.999:  352321.536 us/op
                 concatenateStrings·p0.9999: 352321.536 us/op
                 concatenateStrings·p1.00:   352321.536 us/op

Iteration  15: 299437.839 ±(99.9%) 16484.385 us/op
                 concatenateStrings·p0.00:   257687.552 us/op
                 concatenateStrings·p0.50:   301465.600 us/op
                 concatenateStrings·p0.90:   338427.904 us/op
                 concatenateStrings·p0.95:   347602.944 us/op
                 concatenateStrings·p0.99:   358612.992 us/op
                 concatenateStrings·p0.999:  358612.992 us/op
                 concatenateStrings·p0.9999: 358612.992 us/op
                 concatenateStrings·p1.00:   358612.992 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 397
  mean = 387641.643 ±(99.9%) 37022.219 us/op

  Histogram, us/op:
    [ 200000.000,  250000.000) = 0 
    [ 250000.000,  300000.000) = 146 
    [ 300000.000,  350000.000) = 181 
    [ 350000.000,  400000.000) = 16 
    [ 400000.000,  450000.000) = 0 
    [ 450000.000,  500000.000) = 0 
    [ 500000.000,  550000.000) = 0 
    [ 550000.000,  600000.000) = 0 
    [ 600000.000,  650000.000) = 0 
    [ 650000.000,  700000.000) = 0 
    [ 700000.000,  750000.000) = 0 
    [ 750000.000,  800000.000) = 0 
    [ 800000.000,  850000.000) = 0 
    [ 850000.000,  900000.000) = 0 
    [ 900000.000,  950000.000) = 36 

  Percentiles, us/op:
      p(0.0000) = 257687.552 us/op
     p(50.0000) = 306184.192 us/op
     p(90.0000) = 927360.614 us/op
     p(95.0000) = 947073.843 us/op
     p(99.0000) = 980481.475 us/op
     p(99.9000) = 993001.472 us/op
     p(99.9900) = 993001.472 us/op
     p(99.9990) = 993001.472 us/op
     p(99.9999) = 993001.472 us/op
    p(100.0000) = 993001.472 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 99.27% complete, ETA 00:03:37
# Fork: 1 of 1
# Warmup Iteration   1: 2514904.678 ±(99.9%) 1524456.573 us/op
# Warmup Iteration   2: 2520357.274 ±(99.9%) 1547847.313 us/op
# Warmup Iteration   3: 2501378.048 ±(99.9%) 3196445.202 us/op
# Warmup Iteration   4: 2533779.046 ±(99.9%) 1595684.755 us/op
# Warmup Iteration   5: 2528745.882 ±(99.9%) 1679082.213 us/op
Iteration   1: 2508613.222 ±(99.9%) 1576814.940 us/op
                 createNewObjectsWithRecursive·p0.00:   1776287.744 us/op
                 createNewObjectsWithRecursive·p0.50:   2692743.168 us/op
                 createNewObjectsWithRecursive·p0.90:   2701131.776 us/op
                 createNewObjectsWithRecursive·p0.95:   2701131.776 us/op
                 createNewObjectsWithRecursive·p0.99:   2701131.776 us/op
                 createNewObjectsWithRecursive·p0.999:  2701131.776 us/op
                 createNewObjectsWithRecursive·p0.9999: 2701131.776 us/op
                 createNewObjectsWithRecursive·p1.00:   2701131.776 us/op

Iteration   2: 2494352.589 ±(99.9%) 1620112.353 us/op
                 createNewObjectsWithRecursive·p0.00:   1742733.312 us/op
                 createNewObjectsWithRecursive·p0.50:   2684354.560 us/op
                 createNewObjectsWithRecursive·p0.90:   2705326.080 us/op
                 createNewObjectsWithRecursive·p0.95:   2705326.080 us/op
                 createNewObjectsWithRecursive·p0.99:   2705326.080 us/op
                 createNewObjectsWithRecursive·p0.999:  2705326.080 us/op
                 createNewObjectsWithRecursive·p0.9999: 2705326.080 us/op
                 createNewObjectsWithRecursive·p1.00:   2705326.080 us/op

Iteration   3: 2520776.704 ±(99.9%) 1529726.161 us/op
                 createNewObjectsWithRecursive·p0.00:   1811939.328 us/op
                 createNewObjectsWithRecursive·p0.50:   2675965.952 us/op
                 createNewObjectsWithRecursive·p0.90:   2738880.512 us/op
                 createNewObjectsWithRecursive·p0.95:   2738880.512 us/op
                 createNewObjectsWithRecursive·p0.99:   2738880.512 us/op
                 createNewObjectsWithRecursive·p0.999:  2738880.512 us/op
                 createNewObjectsWithRecursive·p0.9999: 2738880.512 us/op
                 createNewObjectsWithRecursive·p1.00:   2738880.512 us/op

Iteration   4: 2502321.766 ±(99.9%) 1574828.568 us/op
                 createNewObjectsWithRecursive·p0.00:   1774190.592 us/op
                 createNewObjectsWithRecursive·p0.50:   2675965.952 us/op
                 createNewObjectsWithRecursive·p0.90:   2734686.208 us/op
                 createNewObjectsWithRecursive·p0.95:   2734686.208 us/op
                 createNewObjectsWithRecursive·p0.99:   2734686.208 us/op
                 createNewObjectsWithRecursive·p0.999:  2734686.208 us/op
                 createNewObjectsWithRecursive·p0.9999: 2734686.208 us/op
                 createNewObjectsWithRecursive·p1.00:   2734686.208 us/op

Iteration   5: 2510710.374 ±(99.9%) 1613081.270 us/op
                 createNewObjectsWithRecursive·p0.00:   1761607.680 us/op
                 createNewObjectsWithRecursive·p0.50:   2696937.472 us/op
                 createNewObjectsWithRecursive·p0.90:   2709520.384 us/op
                 createNewObjectsWithRecursive·p0.95:   2709520.384 us/op
                 createNewObjectsWithRecursive·p0.99:   2709520.384 us/op
                 createNewObjectsWithRecursive·p0.999:  2709520.384 us/op
                 createNewObjectsWithRecursive·p0.9999: 2709520.384 us/op
                 createNewObjectsWithRecursive·p1.00:   2709520.384 us/op

Iteration   6: 2539651.072 ±(99.9%) 1477773.504 us/op
                 createNewObjectsWithRecursive·p0.00:   1855979.520 us/op
                 createNewObjectsWithRecursive·p0.50:   2684354.560 us/op
                 createNewObjectsWithRecursive·p0.90:   2759852.032 us/op
                 createNewObjectsWithRecursive·p0.95:   2759852.032 us/op
                 createNewObjectsWithRecursive·p0.99:   2759852.032 us/op
                 createNewObjectsWithRecursive·p0.999:  2759852.032 us/op
                 createNewObjectsWithRecursive·p0.9999: 2759852.032 us/op
                 createNewObjectsWithRecursive·p1.00:   2759852.032 us/op

Iteration   7: 2523293.286 ±(99.9%) 1506296.464 us/op
                 createNewObjectsWithRecursive·p0.00:   1824522.240 us/op
                 createNewObjectsWithRecursive·p0.50:   2680160.256 us/op
                 createNewObjectsWithRecursive·p0.90:   2726297.600 us/op
                 createNewObjectsWithRecursive·p0.95:   2726297.600 us/op
                 createNewObjectsWithRecursive·p0.99:   2726297.600 us/op
                 createNewObjectsWithRecursive·p0.999:  2726297.600 us/op
                 createNewObjectsWithRecursive·p0.9999: 2726297.600 us/op
                 createNewObjectsWithRecursive·p1.00:   2726297.600 us/op

Iteration   8: 2520357.274 ±(99.9%) 1586791.698 us/op
                 createNewObjectsWithRecursive·p0.00:   1784676.352 us/op
                 createNewObjectsWithRecursive·p0.50:   2692743.168 us/op
                 createNewObjectsWithRecursive·p0.90:   2743074.816 us/op
                 createNewObjectsWithRecursive·p0.95:   2743074.816 us/op
                 createNewObjectsWithRecursive·p0.99:   2743074.816 us/op
                 createNewObjectsWithRecursive·p0.999:  2743074.816 us/op
                 createNewObjectsWithRecursive·p0.9999: 2743074.816 us/op
                 createNewObjectsWithRecursive·p1.00:   2743074.816 us/op

Iteration   9: 2511549.235 ±(99.9%) 1591256.733 us/op
                 createNewObjectsWithRecursive·p0.00:   1774190.592 us/op
                 createNewObjectsWithRecursive·p0.50:   2701131.776 us/op
                 createNewObjectsWithRecursive·p0.90:   2722103.296 us/op
                 createNewObjectsWithRecursive·p0.95:   2722103.296 us/op
                 createNewObjectsWithRecursive·p0.99:   2722103.296 us/op
                 createNewObjectsWithRecursive·p0.999:  2722103.296 us/op
                 createNewObjectsWithRecursive·p0.9999: 2722103.296 us/op
                 createNewObjectsWithRecursive·p1.00:   2722103.296 us/op

Iteration  10: 2511549.235 ±(99.9%) 1553012.342 us/op
                 createNewObjectsWithRecursive·p0.00:   1790967.808 us/op
                 createNewObjectsWithRecursive·p0.50:   2675965.952 us/op
                 createNewObjectsWithRecursive·p0.90:   2722103.296 us/op
                 createNewObjectsWithRecursive·p0.95:   2722103.296 us/op
                 createNewObjectsWithRecursive·p0.99:   2722103.296 us/op
                 createNewObjectsWithRecursive·p0.999:  2722103.296 us/op
                 createNewObjectsWithRecursive·p0.9999: 2722103.296 us/op
                 createNewObjectsWithRecursive·p1.00:   2722103.296 us/op

Iteration  11: 2510290.944 ±(99.9%) 1571674.195 us/op
                 createNewObjectsWithRecursive·p0.00:   1780482.048 us/op
                 createNewObjectsWithRecursive·p0.50:   2688548.864 us/op
                 createNewObjectsWithRecursive·p0.90:   2709520.384 us/op
                 createNewObjectsWithRecursive·p0.95:   2709520.384 us/op
                 createNewObjectsWithRecursive·p0.99:   2709520.384 us/op
                 createNewObjectsWithRecursive·p0.999:  2709520.384 us/op
                 createNewObjectsWithRecursive·p0.9999: 2709520.384 us/op
                 createNewObjectsWithRecursive·p1.00:   2709520.384 us/op

Iteration  12: 2513646.387 ±(99.9%) 1653814.527 us/op
                 createNewObjectsWithRecursive·p0.00:   1746927.616 us/op
                 createNewObjectsWithRecursive·p0.50:   2684354.560 us/op
                 createNewObjectsWithRecursive·p0.90:   2751463.424 us/op
                 createNewObjectsWithRecursive·p0.95:   2751463.424 us/op
                 createNewObjectsWithRecursive·p0.99:   2751463.424 us/op
                 createNewObjectsWithRecursive·p0.999:  2751463.424 us/op
                 createNewObjectsWithRecursive·p0.9999: 2751463.424 us/op
                 createNewObjectsWithRecursive·p1.00:   2751463.424 us/op

Iteration  13: 2446537.523 ±(99.9%) 1426187.176 us/op
                 createNewObjectsWithRecursive·p0.00:   1784676.352 us/op
                 createNewObjectsWithRecursive·p0.50:   2604662.784 us/op
                 createNewObjectsWithRecursive·p0.90:   2629828.608 us/op
                 createNewObjectsWithRecursive·p0.95:   2629828.608 us/op
                 createNewObjectsWithRecursive·p0.99:   2629828.608 us/op
                 createNewObjectsWithRecursive·p0.999:  2629828.608 us/op
                 createNewObjectsWithRecursive·p0.9999: 2629828.608 us/op
                 createNewObjectsWithRecursive·p1.00:   2629828.608 us/op

Iteration  14: 2465411.891 ±(99.9%) 1502863.760 us/op
                 createNewObjectsWithRecursive·p0.00:   1769996.288 us/op
                 createNewObjectsWithRecursive·p0.50:   2625634.304 us/op
                 createNewObjectsWithRecursive·p0.90:   2696937.472 us/op
                 createNewObjectsWithRecursive·p0.95:   2696937.472 us/op
                 createNewObjectsWithRecursive·p0.99:   2696937.472 us/op
                 createNewObjectsWithRecursive·p0.999:  2696937.472 us/op
                 createNewObjectsWithRecursive·p0.9999: 2696937.472 us/op
                 createNewObjectsWithRecursive·p1.00:   2696937.472 us/op

Iteration  15: 2462475.878 ±(99.9%) 1579996.197 us/op
                 createNewObjectsWithRecursive·p0.00:   1730150.400 us/op
                 createNewObjectsWithRecursive·p0.50:   2650800.128 us/op
                 createNewObjectsWithRecursive·p0.90:   2675965.952 us/op
                 createNewObjectsWithRecursive·p0.95:   2675965.952 us/op
                 createNewObjectsWithRecursive·p0.99:   2675965.952 us/op
                 createNewObjectsWithRecursive·p0.999:  2675965.952 us/op
                 createNewObjectsWithRecursive·p0.9999: 2675965.952 us/op
                 createNewObjectsWithRecursive·p1.00:   2675965.952 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  N = 75
  mean = 2502769.159 ±(99.9%) 144563.120 us/op

  Histogram, us/op:
    [1000000.000, 1125000.000) = 0 
    [1125000.000, 1250000.000) = 0 
    [1250000.000, 1375000.000) = 0 
    [1375000.000, 1500000.000) = 0 
    [1500000.000, 1625000.000) = 0 
    [1625000.000, 1750000.000) = 3 
    [1750000.000, 1875000.000) = 12 
    [1875000.000, 2000000.000) = 0 
    [2000000.000, 2125000.000) = 0 
    [2125000.000, 2250000.000) = 0 
    [2250000.000, 2375000.000) = 0 
    [2375000.000, 2500000.000) = 0 
    [2500000.000, 2625000.000) = 4 
    [2625000.000, 2750000.000) = 54 
    [2750000.000, 2875000.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 1730150.400 us/op
     p(50.0000) = 2675965.952 us/op
     p(90.0000) = 2723781.018 us/op
     p(95.0000) = 2739719.373 us/op
     p(99.0000) = 2759852.032 us/op
     p(99.9000) = 2759852.032 us/op
     p(99.9900) = 2759852.032 us/op
     p(99.9990) = 2759852.032 us/op
     p(99.9999) = 2759852.032 us/op
    p(100.0000) = 2759852.032 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 254411.717 us/op
# Warmup Iteration   2: 241040.710 us/op
# Warmup Iteration   3: 248621.832 us/op
# Warmup Iteration   4: 255336.352 us/op
# Warmup Iteration   5: 253772.190 us/op
Iteration   1: 246940.708 us/op
Iteration   2: 245537.286 us/op
Iteration   3: 248648.390 us/op
Iteration   4: 249367.182 us/op
Iteration   5: 259523.354 us/op
Iteration   6: 249192.692 us/op
Iteration   7: 246899.680 us/op
Iteration   8: 254246.593 us/op
Iteration   9: 245141.727 us/op
Iteration  10: 251025.410 us/op
Iteration  11: 261464.423 us/op
Iteration  12: 247523.999 us/op
Iteration  13: 252069.850 us/op
Iteration  14: 245869.723 us/op
Iteration  15: 251984.765 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 250362.385 ±(99.9%) 5237.499 us/op

  Histogram, us/op:
    [240000.000, 242500.000) = 0 
    [242500.000, 245000.000) = 0 
    [245000.000, 247500.000) = 5 
    [247500.000, 250000.000) = 4 
    [250000.000, 252500.000) = 3 
    [252500.000, 255000.000) = 1 
    [255000.000, 257500.000) = 0 
    [257500.000, 260000.000) = 1 
    [260000.000, 262500.000) = 1 
    [262500.000, 265000.000) = 0 
    [265000.000, 267500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 245141.727 us/op
     p(50.0000) = 249192.692 us/op
     p(90.0000) = 260299.782 us/op
     p(95.0000) = 261464.423 us/op
     p(99.0000) = 261464.423 us/op
     p(99.9000) = 261464.423 us/op
     p(99.9900) = 261464.423 us/op
     p(99.9990) = 261464.423 us/op
     p(99.9999) = 261464.423 us/op
    p(100.0000) = 261464.423 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 233524.534 us/op
# Warmup Iteration   2: 216711.059 us/op
# Warmup Iteration   3: 236759.388 us/op
# Warmup Iteration   4: 236024.713 us/op
# Warmup Iteration   5: 253143.045 us/op
Iteration   1: 248392.883 us/op
Iteration   2: 232513.202 us/op
Iteration   3: 240079.598 us/op
Iteration   4: 234365.331 us/op
Iteration   5: 234902.828 us/op
Iteration   6: 236400.339 us/op
Iteration   7: 239644.323 us/op
Iteration   8: 240703.919 us/op
Iteration   9: 229680.898 us/op
Iteration  10: 232396.261 us/op
Iteration  11: 237851.814 us/op
Iteration  12: 236188.461 us/op
Iteration  13: 239047.306 us/op
Iteration  14: 240313.044 us/op
Iteration  15: 237650.029 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 237342.016 ±(99.9%) 4796.389 us/op

  Histogram, us/op:
    [220000.000, 222500.000) = 0 
    [222500.000, 225000.000) = 0 
    [225000.000, 227500.000) = 0 
    [227500.000, 230000.000) = 1 
    [230000.000, 232500.000) = 1 
    [232500.000, 235000.000) = 3 
    [235000.000, 237500.000) = 2 
    [237500.000, 240000.000) = 4 
    [240000.000, 242500.000) = 3 
    [242500.000, 245000.000) = 0 
    [245000.000, 247500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 229680.898 us/op
     p(50.0000) = 237650.029 us/op
     p(90.0000) = 243779.505 us/op
     p(95.0000) = 248392.883 us/op
     p(99.0000) = 248392.883 us/op
     p(99.9000) = 248392.883 us/op
     p(99.9900) = 248392.883 us/op
     p(99.9990) = 248392.883 us/op
     p(99.9999) = 248392.883 us/op
    p(100.0000) = 248392.883 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 221734.289 us/op
# Warmup Iteration   2: 222987.390 us/op
# Warmup Iteration   3: 218314.424 us/op
# Warmup Iteration   4: 222012.929 us/op
# Warmup Iteration   5: 234373.995 us/op
Iteration   1: 238112.755 us/op
Iteration   2: 222994.228 us/op
Iteration   3: 225831.711 us/op
Iteration   4: 227024.182 us/op
Iteration   5: 218781.629 us/op
Iteration   6: 224196.097 us/op
Iteration   7: 219576.540 us/op
Iteration   8: 221559.303 us/op
Iteration   9: 216144.744 us/op
Iteration  10: 221065.253 us/op
Iteration  11: 219253.784 us/op
Iteration  12: 231406.811 us/op
Iteration  13: 218675.670 us/op
Iteration  14: 235456.494 us/op
Iteration  15: 223779.809 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 224257.267 ±(99.9%) 6832.417 us/op

  Histogram, us/op:
    [210000.000, 212500.000) = 0 
    [212500.000, 215000.000) = 0 
    [215000.000, 217500.000) = 1 
    [217500.000, 220000.000) = 4 
    [220000.000, 222500.000) = 2 
    [222500.000, 225000.000) = 3 
    [225000.000, 227500.000) = 2 
    [227500.000, 230000.000) = 0 
    [230000.000, 232500.000) = 1 
    [232500.000, 235000.000) = 0 
    [235000.000, 237500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 216144.744 us/op
     p(50.0000) = 222994.228 us/op
     p(90.0000) = 236518.998 us/op
     p(95.0000) = 238112.755 us/op
     p(99.0000) = 238112.755 us/op
     p(99.9000) = 238112.755 us/op
     p(99.9900) = 238112.755 us/op
     p(99.9990) = 238112.755 us/op
     p(99.9999) = 238112.755 us/op
    p(100.0000) = 238112.755 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 228482.115 us/op
# Warmup Iteration   2: 227596.073 us/op
# Warmup Iteration   3: 241449.246 us/op
# Warmup Iteration   4: 249425.233 us/op
# Warmup Iteration   5: 235305.106 us/op
Iteration   1: 251597.607 us/op
Iteration   2: 237334.355 us/op
Iteration   3: 241099.907 us/op
Iteration   4: 246817.176 us/op
Iteration   5: 235948.299 us/op
Iteration   6: 241461.343 us/op
Iteration   7: 235343.903 us/op
Iteration   8: 242107.847 us/op
Iteration   9: 233353.791 us/op
Iteration  10: 227900.890 us/op
Iteration  11: 234682.326 us/op
Iteration  12: 230903.538 us/op
Iteration  13: 231185.723 us/op
Iteration  14: 236128.490 us/op
Iteration  15: 242672.681 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 237902.525 ±(99.9%) 6817.748 us/op

  Histogram, us/op:
    [220000.000, 222500.000) = 0 
    [222500.000, 225000.000) = 0 
    [225000.000, 227500.000) = 0 
    [227500.000, 230000.000) = 1 
    [230000.000, 232500.000) = 2 
    [232500.000, 235000.000) = 2 
    [235000.000, 237500.000) = 4 
    [237500.000, 240000.000) = 0 
    [240000.000, 242500.000) = 3 
    [242500.000, 245000.000) = 1 
    [245000.000, 247500.000) = 1 
    [247500.000, 250000.000) = 0 
    [250000.000, 252500.000) = 1 
    [252500.000, 255000.000) = 0 
    [255000.000, 257500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 227900.890 us/op
     p(50.0000) = 236128.490 us/op
     p(90.0000) = 248729.348 us/op
     p(95.0000) = 251597.607 us/op
     p(99.0000) = 251597.607 us/op
     p(99.9000) = 251597.607 us/op
     p(99.9900) = 251597.607 us/op
     p(99.9990) = 251597.607 us/op
     p(99.9999) = 251597.607 us/op
    p(100.0000) = 251597.607 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 222110.831 us/op
# Warmup Iteration   2: 245635.989 us/op
# Warmup Iteration   3: 223207.630 us/op
# Warmup Iteration   4: 223500.059 us/op
# Warmup Iteration   5: 229535.759 us/op
Iteration   1: 225372.140 us/op
Iteration   2: 224081.607 us/op
Iteration   3: 222967.229 us/op
Iteration   4: 223339.285 us/op
Iteration   5: 226315.827 us/op
Iteration   6: 234660.562 us/op
Iteration   7: 240296.230 us/op
Iteration   8: 225848.610 us/op
Iteration   9: 222247.666 us/op
Iteration  10: 234431.840 us/op
Iteration  11: 225333.388 us/op
Iteration  12: 236687.324 us/op
Iteration  13: 245675.193 us/op
Iteration  14: 245066.649 us/op
Iteration  15: 246933.551 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 231950.473 ±(99.9%) 9720.489 us/op

  Histogram, us/op:
    [220000.000, 222500.000) = 1 
    [222500.000, 225000.000) = 3 
    [225000.000, 227500.000) = 4 
    [227500.000, 230000.000) = 0 
    [230000.000, 232500.000) = 0 
    [232500.000, 235000.000) = 2 
    [235000.000, 237500.000) = 1 
    [237500.000, 240000.000) = 0 
    [240000.000, 242500.000) = 1 
    [242500.000, 245000.000) = 0 
    [245000.000, 247500.000) = 3 

  Percentiles, us/op:
      p(0.0000) = 222247.666 us/op
     p(50.0000) = 226315.827 us/op
     p(90.0000) = 246178.536 us/op
     p(95.0000) = 246933.551 us/op
     p(99.0000) = 246933.551 us/op
     p(99.9000) = 246933.551 us/op
     p(99.9900) = 246933.551 us/op
     p(99.9990) = 246933.551 us/op
     p(99.9999) = 246933.551 us/op
    p(100.0000) = 246933.551 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 216857.555 us/op
# Warmup Iteration   2: 246705.339 us/op
# Warmup Iteration   3: 245458.026 us/op
# Warmup Iteration   4: 231550.017 us/op
# Warmup Iteration   5: 247150.178 us/op
Iteration   1: 233909.975 us/op
Iteration   2: 216850.724 us/op
Iteration   3: 216804.757 us/op
Iteration   4: 221519.007 us/op
Iteration   5: 215291.395 us/op
Iteration   6: 244843.978 us/op
Iteration   7: 214221.798 us/op
Iteration   8: 222861.687 us/op
Iteration   9: 217374.558 us/op
Iteration  10: 227844.509 us/op
Iteration  11: 233554.672 us/op
Iteration  12: 225010.728 us/op
Iteration  13: 220918.820 us/op
Iteration  14: 240460.685 us/op
Iteration  15: 237358.795 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 225921.739 ±(99.9%) 10571.452 us/op

  Histogram, us/op:
    [210000.000, 212500.000) = 0 
    [212500.000, 215000.000) = 1 
    [215000.000, 217500.000) = 4 
    [217500.000, 220000.000) = 0 
    [220000.000, 222500.000) = 2 
    [222500.000, 225000.000) = 1 
    [225000.000, 227500.000) = 1 
    [227500.000, 230000.000) = 1 
    [230000.000, 232500.000) = 0 
    [232500.000, 235000.000) = 2 
    [235000.000, 237500.000) = 1 
    [237500.000, 240000.000) = 0 
    [240000.000, 242500.000) = 1 
    [242500.000, 245000.000) = 1 
    [245000.000, 247500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 214221.798 us/op
     p(50.0000) = 222861.687 us/op
     p(90.0000) = 242214.002 us/op
     p(95.0000) = 244843.978 us/op
     p(99.0000) = 244843.978 us/op
     p(99.9000) = 244843.978 us/op
     p(99.9900) = 244843.978 us/op
     p(99.9990) = 244843.978 us/op
     p(99.9999) = 244843.978 us/op
    p(100.0000) = 244843.978 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1303763.360 us/op
# Warmup Iteration   2: 1272623.804 us/op
# Warmup Iteration   3: 1225444.649 us/op
# Warmup Iteration   4: 1277961.385 us/op
# Warmup Iteration   5: 1237710.449 us/op
Iteration   1: 1284797.861 us/op
Iteration   2: 1259862.857 us/op
Iteration   3: 1264109.385 us/op
Iteration   4: 1262280.597 us/op
Iteration   5: 1261086.565 us/op
Iteration   6: 1291074.477 us/op
Iteration   7: 1299071.952 us/op
Iteration   8: 1753800.310 us/op
Iteration   9: 1305155.068 us/op
Iteration  10: 1263385.772 us/op
Iteration  11: 1272128.116 us/op
Iteration  12: 1280823.821 us/op
Iteration  13: 1273312.615 us/op
Iteration  14: 1279984.650 us/op
Iteration  15: 1260386.920 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 1307417.398 ±(99.9%) 132928.505 us/op

  Histogram, us/op:
    [1200000.000, 1250000.000) = 0 
    [1250000.000, 1300000.000) = 13 
    [1300000.000, 1350000.000) = 1 
    [1350000.000, 1400000.000) = 0 
    [1400000.000, 1450000.000) = 0 
    [1450000.000, 1500000.000) = 0 
    [1500000.000, 1550000.000) = 0 
    [1550000.000, 1600000.000) = 0 
    [1600000.000, 1650000.000) = 0 
    [1650000.000, 1700000.000) = 0 
    [1700000.000, 1750000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1259862.857 us/op
     p(50.0000) = 1273312.615 us/op
     p(90.0000) = 1484613.165 us/op
     p(95.0000) = 1753800.310 us/op
     p(99.0000) = 1753800.310 us/op
     p(99.9000) = 1753800.310 us/op
     p(99.9900) = 1753800.310 us/op
     p(99.9990) = 1753800.310 us/op
     p(99.9999) = 1753800.310 us/op
    p(100.0000) = 1753800.310 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 929657.502 us/op
# Warmup Iteration   2: 821347.636 us/op
# Warmup Iteration   3: 924587.478 us/op
# Warmup Iteration   4: 860486.658 us/op
# Warmup Iteration   5: 853619.591 us/op
Iteration   1: 852898.906 us/op
Iteration   2: 847301.094 us/op
Iteration   3: 850794.235 us/op
Iteration   4: 840623.077 us/op
Iteration   5: 825837.428 us/op
Iteration   6: 845345.686 us/op
Iteration   7: 844628.786 us/op
Iteration   8: 848208.957 us/op
Iteration   9: 846857.283 us/op
Iteration  10: 838469.679 us/op
Iteration  11: 857200.906 us/op
Iteration  12: 858300.828 us/op
Iteration  13: 852233.928 us/op
Iteration  14: 871197.582 us/op
Iteration  15: 834510.435 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 847627.254 ±(99.9%) 11482.837 us/op

  Histogram, us/op:
    [820000.000, 825000.000) = 0 
    [825000.000, 830000.000) = 1 
    [830000.000, 835000.000) = 1 
    [835000.000, 840000.000) = 1 
    [840000.000, 845000.000) = 2 
    [845000.000, 850000.000) = 4 
    [850000.000, 855000.000) = 3 
    [855000.000, 860000.000) = 2 
    [860000.000, 865000.000) = 0 
    [865000.000, 870000.000) = 0 
    [870000.000, 875000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 825837.428 us/op
     p(50.0000) = 847301.094 us/op
     p(90.0000) = 863459.530 us/op
     p(95.0000) = 871197.582 us/op
     p(99.0000) = 871197.582 us/op
     p(99.9000) = 871197.582 us/op
     p(99.9900) = 871197.582 us/op
     p(99.9990) = 871197.582 us/op
     p(99.9999) = 871197.582 us/op
    p(100.0000) = 871197.582 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 789686.327 us/op
# Warmup Iteration   2: 631049.057 us/op
# Warmup Iteration   3: 588015.098 us/op
# Warmup Iteration   4: 594011.514 us/op
# Warmup Iteration   5: 588127.261 us/op
Iteration   1: 597305.992 us/op
Iteration   2: 614525.801 us/op
Iteration   3: 591215.114 us/op
Iteration   4: 581661.452 us/op
Iteration   5: 607797.532 us/op
Iteration   6: 595408.750 us/op
Iteration   7: 578617.217 us/op
Iteration   8: 590033.567 us/op
Iteration   9: 595278.703 us/op
Iteration  10: 596540.077 us/op
Iteration  11: 588543.747 us/op
Iteration  12: 594321.768 us/op
Iteration  13: 584778.122 us/op
Iteration  14: 581186.060 us/op
Iteration  15: 587669.711 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 592325.574 ±(99.9%) 10389.201 us/op

  Histogram, us/op:
    [570000.000, 575000.000) = 0 
    [575000.000, 580000.000) = 1 
    [580000.000, 585000.000) = 3 
    [585000.000, 590000.000) = 2 
    [590000.000, 595000.000) = 3 
    [595000.000, 600000.000) = 4 
    [600000.000, 605000.000) = 0 
    [605000.000, 610000.000) = 1 
    [610000.000, 615000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 578617.217 us/op
     p(50.0000) = 591215.114 us/op
     p(90.0000) = 610488.840 us/op
     p(95.0000) = 614525.801 us/op
     p(99.0000) = 614525.801 us/op
     p(99.9000) = 614525.801 us/op
     p(99.9900) = 614525.801 us/op
     p(99.9990) = 614525.801 us/op
     p(99.9999) = 614525.801 us/op
    p(100.0000) = 614525.801 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap(AllocationBenchmark.java:52)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_ss_jmhStub(AllocationBenchmark_fillHeap_jmhTest.java:485)
	at com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.jmh_generated.AllocationBenchmark_fillHeap_jmhTest.fillHeap_SingleShotTime(AllocationBenchmark_fillHeap_jmhTest.java:443)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 495793.208 us/op
# Warmup Iteration   2: 482153.997 us/op
# Warmup Iteration   3: 488529.741 us/op
# Warmup Iteration   4: 475312.251 us/op
# Warmup Iteration   5: 499496.755 us/op
Iteration   1: 496574.651 us/op
Iteration   2: 498133.699 us/op
Iteration   3: 499850.931 us/op
Iteration   4: 479317.451 us/op
Iteration   5: 504956.672 us/op
Iteration   6: 507811.589 us/op
Iteration   7: 484733.160 us/op
Iteration   8: 499689.489 us/op
Iteration   9: 482952.180 us/op
Iteration  10: 494995.400 us/op
Iteration  11: 506126.913 us/op
Iteration  12: 486452.979 us/op
Iteration  13: 488472.206 us/op
Iteration  14: 515413.559 us/op
Iteration  15: 495250.995 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 496048.792 ±(99.9%) 10907.352 us/op

  Histogram, us/op:
    [470000.000, 475000.000) = 0 
    [475000.000, 480000.000) = 1 
    [480000.000, 485000.000) = 2 
    [485000.000, 490000.000) = 2 
    [490000.000, 495000.000) = 1 
    [495000.000, 500000.000) = 5 
    [500000.000, 505000.000) = 1 
    [505000.000, 510000.000) = 2 
    [510000.000, 515000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 479317.451 us/op
     p(50.0000) = 496574.651 us/op
     p(90.0000) = 510852.377 us/op
     p(95.0000) = 515413.559 us/op
     p(99.0000) = 515413.559 us/op
     p(99.9000) = 515413.559 us/op
     p(99.9900) = 515413.559 us/op
     p(99.9990) = 515413.559 us/op
     p(99.9999) = 515413.559 us/op
    p(100.0000) = 515413.559 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 478019.474 us/op
# Warmup Iteration   2: 476945.668 us/op
# Warmup Iteration   3: 467342.993 us/op
# Warmup Iteration   4: 484917.161 us/op
# Warmup Iteration   5: 490735.917 us/op
Iteration   1: 484591.224 us/op
Iteration   2: 469548.473 us/op
Iteration   3: 504030.463 us/op
Iteration   4: 496135.280 us/op
Iteration   5: 487950.008 us/op
Iteration   6: 451987.183 us/op
Iteration   7: 479739.113 us/op
Iteration   8: 501650.802 us/op
Iteration   9: 473080.755 us/op
Iteration  10: 481247.232 us/op
Iteration  11: 480445.430 us/op
Iteration  12: 440683.223 us/op
Iteration  13: 502929.722 us/op
Iteration  14: 440908.093 us/op
Iteration  15: 462558.646 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 477165.710 ±(99.9%) 22348.155 us/op

  Histogram, us/op:
    [440000.000, 445000.000) = 2 
    [445000.000, 450000.000) = 0 
    [450000.000, 455000.000) = 1 
    [455000.000, 460000.000) = 0 
    [460000.000, 465000.000) = 1 
    [465000.000, 470000.000) = 1 
    [470000.000, 475000.000) = 1 
    [475000.000, 480000.000) = 1 
    [480000.000, 485000.000) = 3 
    [485000.000, 490000.000) = 1 
    [490000.000, 495000.000) = 0 
    [495000.000, 500000.000) = 1 
    [500000.000, 505000.000) = 3 

  Percentiles, us/op:
      p(0.0000) = 440683.223 us/op
     p(50.0000) = 480445.430 us/op
     p(90.0000) = 503370.018 us/op
     p(95.0000) = 504030.463 us/op
     p(99.0000) = 504030.463 us/op
     p(99.9000) = 504030.463 us/op
     p(99.9900) = 504030.463 us/op
     p(99.9990) = 504030.463 us/op
     p(99.9999) = 504030.463 us/op
    p(100.0000) = 504030.463 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5093.192 us/op
# Warmup Iteration   2: 3038.146 us/op
# Warmup Iteration   3: 524.368 us/op
# Warmup Iteration   4: 531.366 us/op
# Warmup Iteration   5: 529.045 us/op
Iteration   1: 547.188 us/op
Iteration   2: 560.048 us/op
Iteration   3: 534.305 us/op
Iteration   4: 548.686 us/op
Iteration   5: 558.629 us/op
Iteration   6: 528.574 us/op
Iteration   7: 544.833 us/op
Iteration   8: 531.431 us/op
Iteration   9: 544.154 us/op
Iteration  10: 526.067 us/op
Iteration  11: 540.648 us/op
Iteration  12: 531.621 us/op
Iteration  13: 520.864 us/op
Iteration  14: 586.314 us/op
Iteration  15: 547.761 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  N = 15
  mean =    543.408 ±(99.9%) 17.648 us/op

  Histogram, us/op:
    [520.000, 525.000) = 1 
    [525.000, 530.000) = 2 
    [530.000, 535.000) = 3 
    [535.000, 540.000) = 0 
    [540.000, 545.000) = 3 
    [545.000, 550.000) = 3 
    [550.000, 555.000) = 0 
    [555.000, 560.000) = 1 
    [560.000, 565.000) = 1 
    [565.000, 570.000) = 0 
    [570.000, 575.000) = 0 
    [575.000, 580.000) = 0 
    [580.000, 585.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    520.864 us/op
     p(50.0000) =    544.154 us/op
     p(90.0000) =    570.554 us/op
     p(95.0000) =    586.314 us/op
     p(99.0000) =    586.314 us/op
     p(99.9000) =    586.314 us/op
     p(99.9900) =    586.314 us/op
     p(99.9990) =    586.314 us/op
     p(99.9999) =    586.314 us/op
    p(100.0000) =    586.314 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5516.265 us/op
# Warmup Iteration   2: 3278.472 us/op
# Warmup Iteration   3: 355.107 us/op
# Warmup Iteration   4: 357.409 us/op
# Warmup Iteration   5: 364.402 us/op
Iteration   1: 359.795 us/op
Iteration   2: 348.869 us/op
Iteration   3: 360.475 us/op
Iteration   4: 348.596 us/op
Iteration   5: 336.186 us/op
Iteration   6: 361.167 us/op
Iteration   7: 391.477 us/op
Iteration   8: 318.307 us/op
Iteration   9: 353.190 us/op
Iteration  10: 352.066 us/op
Iteration  11: 353.697 us/op
Iteration  12: 384.421 us/op
Iteration  13: 355.428 us/op
Iteration  14: 363.690 us/op
Iteration  15: 375.467 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  N = 15
  mean =    357.522 ±(99.9%) 19.122 us/op

  Histogram, us/op:
    [310.000, 315.000) = 0 
    [315.000, 320.000) = 1 
    [320.000, 325.000) = 0 
    [325.000, 330.000) = 0 
    [330.000, 335.000) = 0 
    [335.000, 340.000) = 1 
    [340.000, 345.000) = 0 
    [345.000, 350.000) = 2 
    [350.000, 355.000) = 3 
    [355.000, 360.000) = 2 
    [360.000, 365.000) = 3 
    [365.000, 370.000) = 0 
    [370.000, 375.000) = 0 
    [375.000, 380.000) = 1 
    [380.000, 385.000) = 1 
    [385.000, 390.000) = 0 
    [390.000, 395.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    318.307 us/op
     p(50.0000) =    355.428 us/op
     p(90.0000) =    387.243 us/op
     p(95.0000) =    391.477 us/op
     p(99.0000) =    391.477 us/op
     p(99.9000) =    391.477 us/op
     p(99.9900) =    391.477 us/op
     p(99.9990) =    391.477 us/op
     p(99.9999) =    391.477 us/op
    p(100.0000) =    391.477 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5377.974 us/op
# Warmup Iteration   2: 836.350 us/op
# Warmup Iteration   3: 211.605 us/op
# Warmup Iteration   4: 203.537 us/op
# Warmup Iteration   5: 203.576 us/op
Iteration   1: 208.010 us/op
Iteration   2: 206.039 us/op
Iteration   3: 202.850 us/op
Iteration   4: 202.865 us/op
Iteration   5: 207.199 us/op
Iteration   6: 203.216 us/op
Iteration   7: 208.681 us/op
Iteration   8: 203.699 us/op
Iteration   9: 235.468 us/op
Iteration  10: 210.505 us/op
Iteration  11: 264.659 us/op
Iteration  12: 208.237 us/op
Iteration  13: 203.431 us/op
Iteration  14: 203.912 us/op
Iteration  15: 203.510 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  N = 15
  mean =    211.485 ±(99.9%) 17.948 us/op

  Histogram, us/op:
    [200.000, 205.000) = 7 
    [205.000, 210.000) = 5 
    [210.000, 215.000) = 1 
    [215.000, 220.000) = 0 
    [220.000, 225.000) = 0 
    [225.000, 230.000) = 0 
    [230.000, 235.000) = 0 
    [235.000, 240.000) = 1 
    [240.000, 245.000) = 0 
    [245.000, 250.000) = 0 
    [250.000, 255.000) = 0 
    [255.000, 260.000) = 0 
    [260.000, 265.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    202.850 us/op
     p(50.0000) =    206.039 us/op
     p(90.0000) =    247.144 us/op
     p(95.0000) =    264.659 us/op
     p(99.0000) =    264.659 us/op
     p(99.9000) =    264.659 us/op
     p(99.9900) =    264.659 us/op
     p(99.9990) =    264.659 us/op
     p(99.9999) =    264.659 us/op
    p(100.0000) =    264.659 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4877.388 us/op
# Warmup Iteration   2: 3320.473 us/op
# Warmup Iteration   3: 445.158 us/op
# Warmup Iteration   4: 442.253 us/op
# Warmup Iteration   5: 446.080 us/op
Iteration   1: 432.448 us/op
Iteration   2: 431.970 us/op
Iteration   3: 428.055 us/op
Iteration   4: 417.928 us/op
Iteration   5: 443.599 us/op
Iteration   6: 539.281 us/op
Iteration   7: 492.004 us/op
Iteration   8: 468.072 us/op
Iteration   9: 454.628 us/op
Iteration  10: 477.628 us/op
Iteration  11: 429.728 us/op
Iteration  12: 429.423 us/op
Iteration  13: 463.325 us/op
Iteration  14: 413.272 us/op
Iteration  15: 460.724 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  N = 15
  mean =    452.139 ±(99.9%) 35.501 us/op

  Histogram, us/op:
    [400.000, 412.500) = 0 
    [412.500, 425.000) = 2 
    [425.000, 437.500) = 5 
    [437.500, 450.000) = 1 
    [450.000, 462.500) = 2 
    [462.500, 475.000) = 2 
    [475.000, 487.500) = 1 
    [487.500, 500.000) = 1 
    [500.000, 512.500) = 0 
    [512.500, 525.000) = 0 
    [525.000, 537.500) = 0 
    [537.500, 550.000) = 1 
    [550.000, 562.500) = 0 
    [562.500, 575.000) = 0 
    [575.000, 587.500) = 0 

  Percentiles, us/op:
      p(0.0000) =    413.272 us/op
     p(50.0000) =    443.599 us/op
     p(90.0000) =    510.915 us/op
     p(95.0000) =    539.281 us/op
     p(99.0000) =    539.281 us/op
     p(99.9000) =    539.281 us/op
     p(99.9900) =    539.281 us/op
     p(99.9990) =    539.281 us/op
     p(99.9999) =    539.281 us/op
    p(100.0000) =    539.281 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1350747.884 us/op
# Warmup Iteration   2: 1330448.125 us/op
# Warmup Iteration   3: 1325678.444 us/op
# Warmup Iteration   4: 1317027.077 us/op
# Warmup Iteration   5: 1317153.626 us/op
Iteration   1: 1314000.264 us/op
Iteration   2: 1372438.173 us/op
Iteration   3: 1373306.009 us/op
Iteration   4: 1373558.028 us/op
Iteration   5: 1374163.198 us/op
Iteration   6: 1383322.352 us/op
Iteration   7: 1381400.837 us/op
Iteration   8: 1382374.691 us/op
Iteration   9: 1377042.919 us/op
Iteration  10: 1378105.166 us/op
Iteration  11: 1378730.531 us/op
Iteration  12: 1378366.990 us/op
Iteration  13: 1375149.321 us/op
Iteration  14: 1376383.936 us/op
Iteration  15: 1376578.821 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  N = 15
  mean = 1372994.749 ±(99.9%) 17799.555 us/op

  Histogram, us/op:
    [1310000.000, 1315000.000) = 1 
    [1315000.000, 1320000.000) = 0 
    [1320000.000, 1325000.000) = 0 
    [1325000.000, 1330000.000) = 0 
    [1330000.000, 1335000.000) = 0 
    [1335000.000, 1340000.000) = 0 
    [1340000.000, 1345000.000) = 0 
    [1345000.000, 1350000.000) = 0 
    [1350000.000, 1355000.000) = 0 
    [1355000.000, 1360000.000) = 0 
    [1360000.000, 1365000.000) = 0 
    [1365000.000, 1370000.000) = 0 
    [1370000.000, 1375000.000) = 4 
    [1375000.000, 1380000.000) = 7 
    [1380000.000, 1385000.000) = 3 

  Percentiles, us/op:
      p(0.0000) = 1314000.264 us/op
     p(50.0000) = 1376578.821 us/op
     p(90.0000) = 1382753.755 us/op
     p(95.0000) = 1383322.352 us/op
     p(99.0000) = 1383322.352 us/op
     p(99.9000) = 1383322.352 us/op
     p(99.9900) = 1383322.352 us/op
     p(99.9990) = 1383322.352 us/op
     p(99.9999) = 1383322.352 us/op
    p(100.0000) = 1383322.352 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 947482.519 us/op
# Warmup Iteration   2: 870791.629 us/op
# Warmup Iteration   3: 838571.307 us/op
# Warmup Iteration   4: 856859.807 us/op
# Warmup Iteration   5: 1077567.521 us/op
Iteration   1: 1131313.909 us/op
Iteration   2: 1088706.686 us/op
Iteration   3: 1053537.485 us/op
Iteration   4: 1051750.863 us/op
Iteration   5: 1025337.765 us/op
Iteration   6: 1086521.334 us/op
Iteration   7: 1046485.402 us/op
Iteration   8: 1049811.106 us/op
Iteration   9: 1051515.029 us/op
Iteration  10: 1090099.862 us/op
Iteration  11: 1041507.646 us/op
Iteration  12: 1052928.299 us/op
Iteration  13: 1045983.045 us/op
Iteration  14: 1098074.828 us/op
Iteration  15: 1059950.007 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 15
  mean = 1064901.551 ±(99.9%) 29784.194 us/op

  Histogram, us/op:
    [1000000.000, 1012500.000) = 0 
    [1012500.000, 1025000.000) = 0 
    [1025000.000, 1037500.000) = 1 
    [1037500.000, 1050000.000) = 4 
    [1050000.000, 1062500.000) = 5 
    [1062500.000, 1075000.000) = 0 
    [1075000.000, 1087500.000) = 1 
    [1087500.000, 1100000.000) = 3 
    [1100000.000, 1112500.000) = 0 
    [1112500.000, 1125000.000) = 0 
    [1125000.000, 1137500.000) = 1 
    [1137500.000, 1150000.000) = 0 
    [1150000.000, 1162500.000) = 0 
    [1162500.000, 1175000.000) = 0 
    [1175000.000, 1187500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1025337.765 us/op
     p(50.0000) = 1052928.299 us/op
     p(90.0000) = 1111370.460 us/op
     p(95.0000) = 1131313.909 us/op
     p(99.0000) = 1131313.909 us/op
     p(99.9000) = 1131313.909 us/op
     p(99.9900) = 1131313.909 us/op
     p(99.9990) = 1131313.909 us/op
     p(99.9999) = 1131313.909 us/op
    p(100.0000) = 1131313.909 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 19517001.378 us/op
# Warmup Iteration   2: 19648384.927 us/op
# Warmup Iteration   3: 19517685.647 us/op
# Warmup Iteration   4: 19281241.043 us/op
# Warmup Iteration   5: 19968111.935 us/op
Iteration   1: 19851424.628 us/op
Iteration   2: 19927367.857 us/op
Iteration   3: 19972878.399 us/op
Iteration   4: 19984887.314 us/op
Iteration   5: 20017174.240 us/op
Iteration   6: 20048341.155 us/op
Iteration   7: 19774664.174 us/op
Iteration   8: 20375188.528 us/op
Iteration   9: 20161011.609 us/op
Iteration  10: 20209968.119 us/op
Iteration  11: 20373599.326 us/op
Iteration  12: 20118620.270 us/op
Iteration  13: 20117065.971 us/op
Iteration  14: 20091567.538 us/op
Iteration  15: 19800596.118 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 15
  mean = 20054957.016 ±(99.9%) 194350.314 us/op

  Histogram, us/op:
    [19700000.000, 19750000.000) = 0 
    [19750000.000, 19800000.000) = 1 
    [19800000.000, 19850000.000) = 1 
    [19850000.000, 19900000.000) = 1 
    [19900000.000, 19950000.000) = 1 
    [19950000.000, 20000000.000) = 2 
    [20000000.000, 20050000.000) = 2 
    [20050000.000, 20100000.000) = 1 
    [20100000.000, 20150000.000) = 2 
    [20150000.000, 20200000.000) = 1 
    [20200000.000, 20250000.000) = 1 
    [20250000.000, 20300000.000) = 0 
    [20300000.000, 20350000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 19774664.174 us/op
     p(50.0000) = 20048341.155 us/op
     p(90.0000) = 20374235.007 us/op
     p(95.0000) = 20375188.528 us/op
     p(99.0000) = 20375188.528 us/op
     p(99.9000) = 20375188.528 us/op
     p(99.9900) = 20375188.528 us/op
     p(99.9990) = 20375188.528 us/op
     p(99.9999) = 20375188.528 us/op
    p(100.0000) = 20375188.528 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 143.898 us/op
# Warmup Iteration   2: 21.390 us/op
# Warmup Iteration   3: 12.980 us/op
# Warmup Iteration   4: 12.026 us/op
# Warmup Iteration   5: 13.046 us/op
Iteration   1: 13.149 us/op
Iteration   2: 13.842 us/op
Iteration   3: 13.235 us/op
Iteration   4: 14.029 us/op
Iteration   5: 14.270 us/op
Iteration   6: 13.953 us/op
Iteration   7: 13.400 us/op
Iteration   8: 13.749 us/op
Iteration   9: 13.962 us/op
Iteration  10: 12.598 us/op
Iteration  11: 13.066 us/op
Iteration  12: 10.418 us/op
Iteration  13: 13.968 us/op
Iteration  14: 11.297 us/op
Iteration  15: 12.309 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     13.150 ±(99.9%) 1.172 us/op

  Histogram, us/op:
    [10.000, 10.500) = 1 
    [10.500, 11.000) = 0 
    [11.000, 11.500) = 1 
    [11.500, 12.000) = 0 
    [12.000, 12.500) = 1 
    [12.500, 13.000) = 1 
    [13.000, 13.500) = 4 
    [13.500, 14.000) = 5 
    [14.000, 14.500) = 2 

  Percentiles, us/op:
      p(0.0000) =     10.418 us/op
     p(50.0000) =     13.400 us/op
     p(90.0000) =     14.125 us/op
     p(95.0000) =     14.270 us/op
     p(99.0000) =     14.270 us/op
     p(99.9000) =     14.270 us/op
     p(99.9900) =     14.270 us/op
     p(99.9990) =     14.270 us/op
     p(99.9999) =     14.270 us/op
    p(100.0000) =     14.270 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 238.951 us/op
# Warmup Iteration   2: 38.469 us/op
# Warmup Iteration   3: 21.468 us/op
# Warmup Iteration   4: 29.379 us/op
# Warmup Iteration   5: 23.310 us/op
Iteration   1: 104.204 us/op
Iteration   2: 25.210 us/op
Iteration   3: 14.550 us/op
Iteration   4: 13.517 us/op
Iteration   5: 14.607 us/op
Iteration   6: 12.943 us/op
Iteration   7: 13.455 us/op
Iteration   8: 14.314 us/op
Iteration   9: 14.977 us/op
Iteration  10: 14.758 us/op
Iteration  11: 14.454 us/op
Iteration  12: 14.906 us/op
Iteration  13: 13.824 us/op
Iteration  14: 13.833 us/op
Iteration  15: 12.417 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     20.798 ±(99.9%) 24.870 us/op

  Histogram, us/op:
    [ 10.000,  20.000) = 13 
    [ 20.000,  30.000) = 1 
    [ 30.000,  40.000) = 0 
    [ 40.000,  50.000) = 0 
    [ 50.000,  60.000) = 0 
    [ 60.000,  70.000) = 0 
    [ 70.000,  80.000) = 0 
    [ 80.000,  90.000) = 0 
    [ 90.000, 100.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     12.417 us/op
     p(50.0000) =     14.454 us/op
     p(90.0000) =     56.808 us/op
     p(95.0000) =    104.204 us/op
     p(99.0000) =    104.204 us/op
     p(99.9000) =    104.204 us/op
     p(99.9900) =    104.204 us/op
     p(99.9990) =    104.204 us/op
     p(99.9999) =    104.204 us/op
    p(100.0000) =    104.204 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 394.008 us/op
# Warmup Iteration   2: 57.260 us/op
# Warmup Iteration   3: 45.286 us/op
# Warmup Iteration   4: 81.703 us/op
# Warmup Iteration   5: 33.530 us/op
Iteration   1: 21.239 us/op
Iteration   2: 20.925 us/op
Iteration   3: 24.890 us/op
Iteration   4: 20.663 us/op
Iteration   5: 21.113 us/op
Iteration   6: 20.587 us/op
Iteration   7: 21.312 us/op
Iteration   8: 22.049 us/op
Iteration   9: 19.200 us/op
Iteration  10: 21.413 us/op
Iteration  11: 20.168 us/op
Iteration  12: 24.908 us/op
Iteration  13: 25.358 us/op
Iteration  14: 24.226 us/op
Iteration  15: 24.069 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     22.141 ±(99.9%) 2.126 us/op

  Histogram, us/op:
    [19.000, 19.500) = 1 
    [19.500, 20.000) = 0 
    [20.000, 20.500) = 1 
    [20.500, 21.000) = 3 
    [21.000, 21.500) = 4 
    [21.500, 22.000) = 0 
    [22.000, 22.500) = 1 
    [22.500, 23.000) = 0 
    [23.000, 23.500) = 0 
    [23.500, 24.000) = 0 
    [24.000, 24.500) = 2 
    [24.500, 25.000) = 2 
    [25.000, 25.500) = 1 

  Percentiles, us/op:
      p(0.0000) =     19.200 us/op
     p(50.0000) =     21.312 us/op
     p(90.0000) =     25.088 us/op
     p(95.0000) =     25.358 us/op
     p(99.0000) =     25.358 us/op
     p(99.9000) =     25.358 us/op
     p(99.9900) =     25.358 us/op
     p(99.9990) =     25.358 us/op
     p(99.9999) =     25.358 us/op
    p(100.0000) =     25.358 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 303.070 us/op
# Warmup Iteration   2: 6.295 us/op
# Warmup Iteration   3: 5.870 us/op
# Warmup Iteration   4: 5.761 us/op
# Warmup Iteration   5: 5.803 us/op
Iteration   1: 5.586 us/op
Iteration   2: 7.143 us/op
Iteration   3: 6.397 us/op
Iteration   4: 6.787 us/op
Iteration   5: 7.741 us/op
Iteration   6: 6.132 us/op
Iteration   7: 5.913 us/op
Iteration   8: 7.248 us/op
Iteration   9: 5.999 us/op
Iteration  10: 6.605 us/op
Iteration  11: 147.206 us/op
Iteration  12: 6.628 us/op
Iteration  13: 6.203 us/op
Iteration  14: 6.638 us/op
Iteration  15: 6.146 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =     15.891 ±(99.9%) 38.840 us/op

  Histogram, us/op:
    [  0.000,  12.500) = 14 
    [ 12.500,  25.000) = 0 
    [ 25.000,  37.500) = 0 
    [ 37.500,  50.000) = 0 
    [ 50.000,  62.500) = 0 
    [ 62.500,  75.000) = 0 
    [ 75.000,  87.500) = 0 
    [ 87.500, 100.000) = 0 
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 0 
    [137.500, 150.000) = 1 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 0 

  Percentiles, us/op:
      p(0.0000) =      5.586 us/op
     p(50.0000) =      6.605 us/op
     p(90.0000) =     63.527 us/op
     p(95.0000) =    147.206 us/op
     p(99.0000) =    147.206 us/op
     p(99.9000) =    147.206 us/op
     p(99.9900) =    147.206 us/op
     p(99.9990) =    147.206 us/op
     p(99.9999) =    147.206 us/op
    p(100.0000) =    147.206 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 359.579 us/op
# Warmup Iteration   2: 27.922 us/op
# Warmup Iteration   3: 25.403 us/op
# Warmup Iteration   4: 27.108 us/op
# Warmup Iteration   5: 25.206 us/op
Iteration   1: 28.213 us/op
Iteration   2: 28.019 us/op
Iteration   3: 26.288 us/op
Iteration   4: 30.842 us/op
Iteration   5: 23.562 us/op
Iteration   6: 15.524 us/op
Iteration   7: 12.862 us/op
Iteration   8: 12.752 us/op
Iteration   9: 12.529 us/op
Iteration  10: 12.630 us/op
Iteration  11: 22.858 us/op
Iteration  12: 13.150 us/op
Iteration  13: 12.672 us/op
Iteration  14: 13.047 us/op
Iteration  15: 13.038 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =     18.532 ±(99.9%) 7.605 us/op

  Histogram, us/op:
    [10.000, 12.500) = 0 
    [12.500, 15.000) = 8 
    [15.000, 17.500) = 1 
    [17.500, 20.000) = 0 
    [20.000, 22.500) = 0 
    [22.500, 25.000) = 2 
    [25.000, 27.500) = 1 
    [27.500, 30.000) = 2 
    [30.000, 32.500) = 1 
    [32.500, 35.000) = 0 
    [35.000, 37.500) = 0 

  Percentiles, us/op:
      p(0.0000) =     12.529 us/op
     p(50.0000) =     13.150 us/op
     p(90.0000) =     29.265 us/op
     p(95.0000) =     30.842 us/op
     p(99.0000) =     30.842 us/op
     p(99.9000) =     30.842 us/op
     p(99.9900) =     30.842 us/op
     p(99.9990) =     30.842 us/op
     p(99.9999) =     30.842 us/op
    p(100.0000) =     30.842 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 923.719 us/op
# Warmup Iteration   2: 268.849 us/op
# Warmup Iteration   3: 127.141 us/op
# Warmup Iteration   4: 97.622 us/op
# Warmup Iteration   5: 99.674 us/op
Iteration   1: 91.143 us/op
Iteration   2: 95.946 us/op
Iteration   3: 94.003 us/op
Iteration   4: 108.561 us/op
Iteration   5: 92.197 us/op
Iteration   6: 89.320 us/op
Iteration   7: 163.820 us/op
Iteration   8: 89.319 us/op
Iteration   9: 82.297 us/op
Iteration  10: 83.559 us/op
Iteration  11: 91.084 us/op
Iteration  12: 92.950 us/op
Iteration  13: 84.706 us/op
Iteration  14: 91.403 us/op
Iteration  15: 85.790 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =     95.740 ±(99.9%) 21.221 us/op

  Histogram, us/op:
    [ 80.000,  85.000) = 3 
    [ 85.000,  90.000) = 3 
    [ 90.000,  95.000) = 6 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 0 
    [105.000, 110.000) = 1 
    [110.000, 115.000) = 0 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 0 
    [150.000, 155.000) = 0 
    [155.000, 160.000) = 0 
    [160.000, 165.000) = 1 

  Percentiles, us/op:
      p(0.0000) =     82.297 us/op
     p(50.0000) =     91.143 us/op
     p(90.0000) =    130.665 us/op
     p(95.0000) =    163.820 us/op
     p(99.0000) =    163.820 us/op
     p(99.9000) =    163.820 us/op
     p(99.9900) =    163.820 us/op
     p(99.9990) =    163.820 us/op
     p(99.9999) =    163.820 us/op
    p(100.0000) =    163.820 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 346.770 us/op
# Warmup Iteration   2: 6.858 us/op
# Warmup Iteration   3: 8.156 us/op
# Warmup Iteration   4: 6.607 us/op
# Warmup Iteration   5: 6.457 us/op
Iteration   1: 7.025 us/op
Iteration   2: 6.577 us/op
Iteration   3: 5.256 us/op
Iteration   4: 5.685 us/op
Iteration   5: 7.691 us/op
Iteration   6: 6.622 us/op
Iteration   7: 5.513 us/op
Iteration   8: 7.613 us/op
Iteration   9: 6.909 us/op
Iteration  10: 6.436 us/op
Iteration  11: 6.220 us/op
Iteration  12: 6.804 us/op
Iteration  13: 6.467 us/op
Iteration  14: 5.899 us/op
Iteration  15: 6.030 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =      6.450 ±(99.9%) 0.757 us/op

  Histogram, us/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 1 
    [5.500, 5.750) = 2 
    [5.750, 6.000) = 1 
    [6.000, 6.250) = 2 
    [6.250, 6.500) = 2 
    [6.500, 6.750) = 2 
    [6.750, 7.000) = 2 
    [7.000, 7.250) = 1 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 2 

  Percentiles, us/op:
      p(0.0000) =      5.256 us/op
     p(50.0000) =      6.467 us/op
     p(90.0000) =      7.644 us/op
     p(95.0000) =      7.691 us/op
     p(99.0000) =      7.691 us/op
     p(99.9000) =      7.691 us/op
     p(99.9900) =      7.691 us/op
     p(99.9990) =      7.691 us/op
     p(99.9999) =      7.691 us/op
    p(100.0000) =      7.691 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 393.059 us/op
# Warmup Iteration   2: 24.945 us/op
# Warmup Iteration   3: 24.047 us/op
# Warmup Iteration   4: 26.316 us/op
# Warmup Iteration   5: 25.117 us/op
Iteration   1: 18.741 us/op
Iteration   2: 17.574 us/op
Iteration   3: 13.836 us/op
Iteration   4: 23.442 us/op
Iteration   5: 23.664 us/op
Iteration   6: 16.918 us/op
Iteration   7: 11.846 us/op
Iteration   8: 12.884 us/op
Iteration   9: 13.328 us/op
Iteration  10: 13.918 us/op
Iteration  11: 13.820 us/op
Iteration  12: 12.800 us/op
Iteration  13: 13.033 us/op
Iteration  14: 12.615 us/op
Iteration  15: 12.816 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =     15.416 ±(99.9%) 4.124 us/op

  Histogram, us/op:
    [10.000, 11.250) = 0 
    [11.250, 12.500) = 1 
    [12.500, 13.750) = 6 
    [13.750, 15.000) = 3 
    [15.000, 16.250) = 0 
    [16.250, 17.500) = 1 
    [17.500, 18.750) = 2 
    [18.750, 20.000) = 0 
    [20.000, 21.250) = 0 
    [21.250, 22.500) = 0 
    [22.500, 23.750) = 2 
    [23.750, 25.000) = 0 
    [25.000, 26.250) = 0 
    [26.250, 27.500) = 0 
    [27.500, 28.750) = 0 

  Percentiles, us/op:
      p(0.0000) =     11.846 us/op
     p(50.0000) =     13.820 us/op
     p(90.0000) =     23.531 us/op
     p(95.0000) =     23.664 us/op
     p(99.0000) =     23.664 us/op
     p(99.9000) =     23.664 us/op
     p(99.9900) =     23.664 us/op
     p(99.9990) =     23.664 us/op
     p(99.9999) =     23.664 us/op
    p(100.0000) =     23.664 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 643.939 us/op
# Warmup Iteration   2: 215.773 us/op
# Warmup Iteration   3: 109.378 us/op
# Warmup Iteration   4: 91.953 us/op
# Warmup Iteration   5: 90.983 us/op
Iteration   1: 102.879 us/op
Iteration   2: 108.343 us/op
Iteration   3: 107.386 us/op
Iteration   4: 139.888 us/op
Iteration   5: 89.650 us/op
Iteration   6: 83.615 us/op
Iteration   7: 86.517 us/op
Iteration   8: 84.236 us/op
Iteration   9: 91.075 us/op
Iteration  10: 82.910 us/op
Iteration  11: 81.056 us/op
Iteration  12: 89.436 us/op
Iteration  13: 85.828 us/op
Iteration  14: 90.193 us/op
Iteration  15: 234.668 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =    103.845 ±(99.9%) 41.975 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 0 
    [ 25.000,  50.000) = 0 
    [ 50.000,  75.000) = 0 
    [ 75.000, 100.000) = 10 
    [100.000, 125.000) = 3 
    [125.000, 150.000) = 1 
    [150.000, 175.000) = 0 
    [175.000, 200.000) = 0 
    [200.000, 225.000) = 0 
    [225.000, 250.000) = 1 
    [250.000, 275.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     81.056 us/op
     p(50.0000) =     89.650 us/op
     p(90.0000) =    177.800 us/op
     p(95.0000) =    234.668 us/op
     p(99.0000) =    234.668 us/op
     p(99.9000) =    234.668 us/op
     p(99.9900) =    234.668 us/op
     p(99.9990) =    234.668 us/op
     p(99.9999) =    234.668 us/op
    p(100.0000) =    234.668 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 31884.390 us/op
# Warmup Iteration   2: 15441.066 us/op
# Warmup Iteration   3: 15368.823 us/op
# Warmup Iteration   4: 15237.801 us/op
# Warmup Iteration   5: 14796.184 us/op
Iteration   1: 15160.498 us/op
Iteration   2: 14723.392 us/op
Iteration   3: 14831.402 us/op
Iteration   4: 14669.122 us/op
Iteration   5: 14672.292 us/op
Iteration   6: 17427.704 us/op
Iteration   7: 14784.147 us/op
Iteration   8: 14715.166 us/op
Iteration   9: 14904.170 us/op
Iteration  10: 14845.164 us/op
Iteration  11: 14650.045 us/op
Iteration  12: 14804.566 us/op
Iteration  13: 14929.853 us/op
Iteration  14: 14699.280 us/op
Iteration  15: 15141.365 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  N = 15
  mean =  14997.211 ±(99.9%) 738.353 us/op

  Histogram, us/op:
    [14000.000, 14250.000) = 0 
    [14250.000, 14500.000) = 0 
    [14500.000, 14750.000) = 6 
    [14750.000, 15000.000) = 6 
    [15000.000, 15250.000) = 2 
    [15250.000, 15500.000) = 0 
    [15500.000, 15750.000) = 0 
    [15750.000, 16000.000) = 0 
    [16000.000, 16250.000) = 0 
    [16250.000, 16500.000) = 0 
    [16500.000, 16750.000) = 0 
    [16750.000, 17000.000) = 0 
    [17000.000, 17250.000) = 0 
    [17250.000, 17500.000) = 1 
    [17500.000, 17750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  14650.045 us/op
     p(50.0000) =  14804.566 us/op
     p(90.0000) =  16067.380 us/op
     p(95.0000) =  17427.704 us/op
     p(99.0000) =  17427.704 us/op
     p(99.9000) =  17427.704 us/op
     p(99.9900) =  17427.704 us/op
     p(99.9990) =  17427.704 us/op
     p(99.9999) =  17427.704 us/op
    p(100.0000) =  17427.704 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 15478.826 us/op
# Warmup Iteration   2: 2616.961 us/op
# Warmup Iteration   3: 2488.729 us/op
# Warmup Iteration   4: 2694.125 us/op
# Warmup Iteration   5: 2789.351 us/op
Iteration   1: 2801.108 us/op
Iteration   2: 10183.240 us/op
Iteration   3: 1974.232 us/op
Iteration   4: 1874.910 us/op
Iteration   5: 2614.520 us/op
Iteration   6: 1959.073 us/op
Iteration   7: 1219.335 us/op
Iteration   8: 1251.516 us/op
Iteration   9: 1233.984 us/op
Iteration  10: 1333.557 us/op
Iteration  11: 1110.054 us/op
Iteration  12: 1196.809 us/op
Iteration  13: 1131.422 us/op
Iteration  14: 1092.981 us/op
Iteration  15: 1119.086 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean =   2139.722 ±(99.9%) 2452.870 us/op

  Histogram, us/op:
    [ 1000.000,  2000.000) = 12 
    [ 2000.000,  3000.000) = 2 
    [ 3000.000,  4000.000) = 0 
    [ 4000.000,  5000.000) = 0 
    [ 5000.000,  6000.000) = 0 
    [ 6000.000,  7000.000) = 0 
    [ 7000.000,  8000.000) = 0 
    [ 8000.000,  9000.000) = 0 
    [ 9000.000, 10000.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   1092.981 us/op
     p(50.0000) =   1251.516 us/op
     p(90.0000) =   5753.961 us/op
     p(95.0000) =  10183.240 us/op
     p(99.0000) =  10183.240 us/op
     p(99.9000) =  10183.240 us/op
     p(99.9900) =  10183.240 us/op
     p(99.9990) =  10183.240 us/op
     p(99.9999) =  10183.240 us/op
    p(100.0000) =  10183.240 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 111335.882 us/op
# Warmup Iteration   2: 36859.663 us/op
# Warmup Iteration   3: 133962.269 us/op
# Warmup Iteration   4: 36032.164 us/op
# Warmup Iteration   5: 51353.109 us/op
Iteration   1: 37772.918 us/op
Iteration   2: 37267.686 us/op
Iteration   3: 37616.078 us/op
Iteration   4: 37224.863 us/op
Iteration   5: 112216.087 us/op
Iteration   6: 129486.564 us/op
Iteration   7: 107313.958 us/op
Iteration   8: 105650.435 us/op
Iteration   9: 105613.836 us/op
Iteration  10: 105777.859 us/op
Iteration  11: 105475.371 us/op
Iteration  12: 105466.543 us/op
Iteration  13: 105553.952 us/op
Iteration  14: 106437.541 us/op
Iteration  15: 105890.363 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean =  89650.937 ±(99.9%) 35421.413 us/op

  Histogram, us/op:
    [ 30000.000,  40000.000) = 4 
    [ 40000.000,  50000.000) = 0 
    [ 50000.000,  60000.000) = 0 
    [ 60000.000,  70000.000) = 0 
    [ 70000.000,  80000.000) = 0 
    [ 80000.000,  90000.000) = 0 
    [ 90000.000, 100000.000) = 0 
    [100000.000, 110000.000) = 9 
    [110000.000, 120000.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  37224.863 us/op
     p(50.0000) = 105613.836 us/op
     p(90.0000) = 119124.278 us/op
     p(95.0000) = 129486.564 us/op
     p(99.0000) = 129486.564 us/op
     p(99.9000) = 129486.564 us/op
     p(99.9900) = 129486.564 us/op
     p(99.9990) = 129486.564 us/op
     p(99.9999) = 129486.564 us/op
    p(100.0000) = 129486.564 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3690816.832 us/op
# Warmup Iteration   2: 11399639.162 us/op
# Warmup Iteration   3: 11840180.137 us/op
# Warmup Iteration   4: 11867187.835 us/op
# Warmup Iteration   5: 11895954.000 us/op
Iteration   1: 11856571.420 us/op
Iteration   2: 11920075.233 us/op
Iteration   3: 11887444.126 us/op
Iteration   4: 11837623.526 us/op
Iteration   5: 11827127.965 us/op
Iteration   6: 11883708.772 us/op
Iteration   7: 11842258.563 us/op
Iteration   8: 11806429.554 us/op
Iteration   9: 11781703.078 us/op
Iteration  10: 11861300.354 us/op
Iteration  11: 11829903.835 us/op
Iteration  12: 11862390.344 us/op
Iteration  13: 11873975.991 us/op
Iteration  14: 11861569.610 us/op
Iteration  15: 11792170.287 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean = 11848283.511 ±(99.9%) 39883.081 us/op

  Histogram, us/op:
    [11700000.000, 11725000.000) = 0 
    [11725000.000, 11750000.000) = 0 
    [11750000.000, 11775000.000) = 0 
    [11775000.000, 11800000.000) = 2 
    [11800000.000, 11825000.000) = 1 
    [11825000.000, 11850000.000) = 4 
    [11850000.000, 11875000.000) = 5 
    [11875000.000, 11900000.000) = 2 
    [11900000.000, 11925000.000) = 1 
    [11925000.000, 11950000.000) = 0 
    [11950000.000, 11975000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 11781703.078 us/op
     p(50.0000) = 11856571.420 us/op
     p(90.0000) = 11900496.569 us/op
     p(95.0000) = 11920075.233 us/op
     p(99.0000) = 11920075.233 us/op
     p(99.9000) = 11920075.233 us/op
     p(99.9900) = 11920075.233 us/op
     p(99.9990) = 11920075.233 us/op
     p(99.9999) = 11920075.233 us/op
    p(100.0000) = 11920075.233 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 21289.202 us/op
# Warmup Iteration   2: 10769.454 us/op
# Warmup Iteration   3: 1917.885 us/op
# Warmup Iteration   4: 1936.646 us/op
# Warmup Iteration   5: 1904.077 us/op
Iteration   1: 1900.355 us/op
Iteration   2: 1917.454 us/op
Iteration   3: 1926.560 us/op
Iteration   4: 1937.993 us/op
Iteration   5: 1897.409 us/op
Iteration   6: 1944.847 us/op
Iteration   7: 1892.581 us/op
Iteration   8: 2089.614 us/op
Iteration   9: 1946.931 us/op
Iteration  10: 1910.106 us/op
Iteration  11: 1909.419 us/op
Iteration  12: 1900.714 us/op
Iteration  13: 1982.706 us/op
Iteration  14: 1943.786 us/op
Iteration  15: 1916.006 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  N = 15
  mean =   1934.432 ±(99.9%) 52.765 us/op

  Histogram, us/op:
    [1800.000, 1825.000) = 0 
    [1825.000, 1850.000) = 0 
    [1850.000, 1875.000) = 0 
    [1875.000, 1900.000) = 2 
    [1900.000, 1925.000) = 6 
    [1925.000, 1950.000) = 5 
    [1950.000, 1975.000) = 0 
    [1975.000, 2000.000) = 1 
    [2000.000, 2025.000) = 0 
    [2025.000, 2050.000) = 0 
    [2050.000, 2075.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   1892.581 us/op
     p(50.0000) =   1917.454 us/op
     p(90.0000) =   2025.469 us/op
     p(95.0000) =   2089.614 us/op
     p(99.0000) =   2089.614 us/op
     p(99.9000) =   2089.614 us/op
     p(99.9900) =   2089.614 us/op
     p(99.9990) =   2089.614 us/op
     p(99.9999) =   2089.614 us/op
    p(100.0000) =   2089.614 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 59579.304 us/op
# Warmup Iteration   2: 51554.563 us/op
# Warmup Iteration   3: 47197.555 us/op
# Warmup Iteration   4: 47611.629 us/op
# Warmup Iteration   5: 47003.667 us/op
Iteration   1: 46986.071 us/op
Iteration   2: 46945.983 us/op
Iteration   3: 47007.660 us/op
Iteration   4: 47120.431 us/op
Iteration   5: 47051.943 us/op
Iteration   6: 47237.646 us/op
Iteration   7: 46814.148 us/op
Iteration   8: 46995.759 us/op
Iteration   9: 46963.581 us/op
Iteration  10: 47079.098 us/op
Iteration  11: 47039.337 us/op
Iteration  12: 47434.238 us/op
Iteration  13: 47098.341 us/op
Iteration  14: 46966.081 us/op
Iteration  15: 47393.592 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  N = 15
  mean =  47075.594 ±(99.9%) 178.230 us/op

  Histogram, us/op:
    [46800.000, 46850.000) = 1 
    [46850.000, 46900.000) = 0 
    [46900.000, 46950.000) = 1 
    [46950.000, 47000.000) = 4 
    [47000.000, 47050.000) = 2 
    [47050.000, 47100.000) = 3 
    [47100.000, 47150.000) = 1 
    [47150.000, 47200.000) = 0 
    [47200.000, 47250.000) = 1 
    [47250.000, 47300.000) = 0 
    [47300.000, 47350.000) = 0 
    [47350.000, 47400.000) = 1 
    [47400.000, 47450.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  46814.148 us/op
     p(50.0000) =  47039.337 us/op
     p(90.0000) =  47409.850 us/op
     p(95.0000) =  47434.238 us/op
     p(99.0000) =  47434.238 us/op
     p(99.9000) =  47434.238 us/op
     p(99.9900) =  47434.238 us/op
     p(99.9990) =  47434.238 us/op
     p(99.9999) =  47434.238 us/op
    p(100.0000) =  47434.238 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1754281.324 us/op
# Warmup Iteration   2: 1749324.901 us/op
# Warmup Iteration   3: 1715663.944 us/op
# Warmup Iteration   4: 1714392.934 us/op
# Warmup Iteration   5: 1712199.021 us/op
Iteration   1: 1713072.004 us/op
Iteration   2: 1712300.820 us/op
Iteration   3: 1717579.757 us/op
Iteration   4: 1712661.185 us/op
Iteration   5: 1711467.289 us/op
Iteration   6: 1714787.751 us/op
Iteration   7: 1714821.829 us/op
Iteration   8: 1714145.914 us/op
Iteration   9: 1723434.873 us/op
Iteration  10: 1712242.289 us/op
Iteration  11: 1716079.959 us/op
Iteration  12: 1718404.395 us/op
Iteration  13: 1717220.691 us/op
Iteration  14: 1717429.951 us/op
Iteration  15: 1717026.675 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  N = 15
  mean = 1715511.692 ±(99.9%) 3367.827 us/op

  Histogram, us/op:
    [1710000.000, 1711250.000) = 0 
    [1711250.000, 1712500.000) = 3 
    [1712500.000, 1713750.000) = 2 
    [1713750.000, 1715000.000) = 3 
    [1715000.000, 1716250.000) = 1 
    [1716250.000, 1717500.000) = 3 
    [1717500.000, 1718750.000) = 2 
    [1718750.000, 1720000.000) = 0 
    [1720000.000, 1721250.000) = 0 
    [1721250.000, 1722500.000) = 0 
    [1722500.000, 1723750.000) = 1 
    [1723750.000, 1725000.000) = 0 
    [1725000.000, 1726250.000) = 0 
    [1726250.000, 1727500.000) = 0 
    [1727500.000, 1728750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1711467.289 us/op
     p(50.0000) = 1714821.829 us/op
     p(90.0000) = 1720416.586 us/op
     p(95.0000) = 1723434.873 us/op
     p(99.0000) = 1723434.873 us/op
     p(99.9000) = 1723434.873 us/op
     p(99.9900) = 1723434.873 us/op
     p(99.9990) = 1723434.873 us/op
     p(99.9999) = 1723434.873 us/op
    p(100.0000) = 1723434.873 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 278.854 us/op
# Warmup Iteration   2: 11.707 us/op
# Warmup Iteration   3: 11.596 us/op
# Warmup Iteration   4: 11.326 us/op
# Warmup Iteration   5: 12.059 us/op
Iteration   1: 17.616 us/op
Iteration   2: 11.392 us/op
Iteration   3: 10.067 us/op
Iteration   4: 11.444 us/op
Iteration   5: 12.217 us/op
Iteration   6: 12.160 us/op
Iteration   7: 12.333 us/op
Iteration   8: 21.407 us/op
Iteration   9: 167.164 us/op
Iteration  10: 10.824 us/op
Iteration  11: 14.437 us/op
Iteration  12: 10.153 us/op
Iteration  13: 12.282 us/op
Iteration  14: 11.799 us/op
Iteration  15: 12.476 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  N = 15
  mean =     23.185 ±(99.9%) 42.700 us/op

  Histogram, us/op:
    [  0.000,  12.500) = 11 
    [ 12.500,  25.000) = 3 
    [ 25.000,  37.500) = 0 
    [ 37.500,  50.000) = 0 
    [ 50.000,  62.500) = 0 
    [ 62.500,  75.000) = 0 
    [ 75.000,  87.500) = 0 
    [ 87.500, 100.000) = 0 
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 0 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 1 
    [175.000, 187.500) = 0 

  Percentiles, us/op:
      p(0.0000) =     10.067 us/op
     p(50.0000) =     12.217 us/op
     p(90.0000) =     79.710 us/op
     p(95.0000) =    167.164 us/op
     p(99.0000) =    167.164 us/op
     p(99.9000) =    167.164 us/op
     p(99.9900) =    167.164 us/op
     p(99.9990) =    167.164 us/op
     p(99.9999) =    167.164 us/op
    p(100.0000) =    167.164 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 22266.236 us/op
# Warmup Iteration   2: 13141.618 us/op
# Warmup Iteration   3: 8676.963 us/op
# Warmup Iteration   4: 8805.048 us/op
# Warmup Iteration   5: 8759.617 us/op
Iteration   1: 8760.362 us/op
Iteration   2: 8773.780 us/op
Iteration   3: 8795.909 us/op
Iteration   4: 8872.550 us/op
Iteration   5: 8792.850 us/op
Iteration   6: 8762.902 us/op
Iteration   7: 8792.417 us/op
Iteration   8: 8803.357 us/op
Iteration   9: 8800.740 us/op
Iteration  10: 8766.555 us/op
Iteration  11: 8772.012 us/op
Iteration  12: 8780.513 us/op
Iteration  13: 8756.688 us/op
Iteration  14: 8833.925 us/op
Iteration  15: 8765.543 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  N = 15
  mean =   8788.674 ±(99.9%) 33.329 us/op

  Histogram, us/op:
    [8700.000, 8712.500) = 0 
    [8712.500, 8725.000) = 0 
    [8725.000, 8737.500) = 0 
    [8737.500, 8750.000) = 0 
    [8750.000, 8762.500) = 2 
    [8762.500, 8775.000) = 5 
    [8775.000, 8787.500) = 1 
    [8787.500, 8800.000) = 3 
    [8800.000, 8812.500) = 2 
    [8812.500, 8825.000) = 0 
    [8825.000, 8837.500) = 1 
    [8837.500, 8850.000) = 0 
    [8850.000, 8862.500) = 0 
    [8862.500, 8875.000) = 1 
    [8875.000, 8887.500) = 0 

  Percentiles, us/op:
      p(0.0000) =   8756.688 us/op
     p(50.0000) =   8780.513 us/op
     p(90.0000) =   8849.375 us/op
     p(95.0000) =   8872.550 us/op
     p(99.0000) =   8872.550 us/op
     p(99.9000) =   8872.550 us/op
     p(99.9900) =   8872.550 us/op
     p(99.9990) =   8872.550 us/op
     p(99.9999) =   8872.550 us/op
    p(100.0000) =   8872.550 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 76945.353 us/op
# Warmup Iteration   2: 54090.104 us/op
# Warmup Iteration   3: 35267.292 us/op
# Warmup Iteration   4: 38225.247 us/op
# Warmup Iteration   5: 34790.682 us/op
Iteration   1: 33721.293 us/op
Iteration   2: 37989.510 us/op
Iteration   3: 33887.365 us/op
Iteration   4: 33358.367 us/op
Iteration   5: 39623.253 us/op
Iteration   6: 36636.035 us/op
Iteration   7: 37213.996 us/op
Iteration   8: 36090.486 us/op
Iteration   9: 32318.431 us/op
Iteration  10: 33783.176 us/op
Iteration  11: 35265.577 us/op
Iteration  12: 35967.058 us/op
Iteration  13: 36533.984 us/op
Iteration  14: 37535.407 us/op
Iteration  15: 33969.766 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  N = 15
  mean =  35592.914 ±(99.9%) 2192.673 us/op

  Histogram, us/op:
    [32000.000, 32500.000) = 1 
    [32500.000, 33000.000) = 0 
    [33000.000, 33500.000) = 1 
    [33500.000, 34000.000) = 4 
    [34000.000, 34500.000) = 0 
    [34500.000, 35000.000) = 0 
    [35000.000, 35500.000) = 1 
    [35500.000, 36000.000) = 1 
    [36000.000, 36500.000) = 1 
    [36500.000, 37000.000) = 2 
    [37000.000, 37500.000) = 1 
    [37500.000, 38000.000) = 2 
    [38000.000, 38500.000) = 0 
    [38500.000, 39000.000) = 0 
    [39000.000, 39500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  32318.431 us/op
     p(50.0000) =  35967.058 us/op
     p(90.0000) =  38643.007 us/op
     p(95.0000) =  39623.253 us/op
     p(99.0000) =  39623.253 us/op
     p(99.9000) =  39623.253 us/op
     p(99.9900) =  39623.253 us/op
     p(99.9990) =  39623.253 us/op
     p(99.9999) =  39623.253 us/op
    p(100.0000) =  39623.253 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 64074.407 us/op
# Warmup Iteration   2: 36729.170 us/op
# Warmup Iteration   3: 27896.704 us/op
# Warmup Iteration   4: 27837.078 us/op
# Warmup Iteration   5: 27924.784 us/op
Iteration   1: 27973.554 us/op
Iteration   2: 28281.025 us/op
Iteration   3: 27899.536 us/op
Iteration   4: 28193.150 us/op
Iteration   5: 27860.954 us/op
Iteration   6: 28192.954 us/op
Iteration   7: 28037.925 us/op
Iteration   8: 28542.869 us/op
Iteration   9: 28892.451 us/op
Iteration  10: 28083.329 us/op
Iteration  11: 27936.419 us/op
Iteration  12: 28134.381 us/op
Iteration  13: 28467.382 us/op
Iteration  14: 28153.200 us/op
Iteration  15: 28252.381 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  N = 15
  mean =  28193.434 ±(99.9%) 292.727 us/op

  Histogram, us/op:
    [27000.000, 27125.000) = 0 
    [27125.000, 27250.000) = 0 
    [27250.000, 27375.000) = 0 
    [27375.000, 27500.000) = 0 
    [27500.000, 27625.000) = 0 
    [27625.000, 27750.000) = 0 
    [27750.000, 27875.000) = 1 
    [27875.000, 28000.000) = 3 
    [28000.000, 28125.000) = 2 
    [28125.000, 28250.000) = 4 
    [28250.000, 28375.000) = 2 
    [28375.000, 28500.000) = 1 
    [28500.000, 28625.000) = 1 
    [28625.000, 28750.000) = 0 
    [28750.000, 28875.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  27860.954 us/op
     p(50.0000) =  28153.200 us/op
     p(90.0000) =  28682.702 us/op
     p(95.0000) =  28892.451 us/op
     p(99.0000) =  28892.451 us/op
     p(99.9000) =  28892.451 us/op
     p(99.9900) =  28892.451 us/op
     p(99.9990) =  28892.451 us/op
     p(99.9999) =  28892.451 us/op
    p(100.0000) =  28892.451 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 48994.592 us/op
# Warmup Iteration   2: 29761.265 us/op
# Warmup Iteration   3: 29241.562 us/op
# Warmup Iteration   4: 29165.121 us/op
# Warmup Iteration   5: 29207.597 us/op
Iteration   1: 28311.117 us/op
Iteration   2: 26238.288 us/op
Iteration   3: 28858.887 us/op
Iteration   4: 29583.506 us/op
Iteration   5: 29306.561 us/op
Iteration   6: 32964.945 us/op
Iteration   7: 30821.648 us/op
Iteration   8: 30239.318 us/op
Iteration   9: 30300.934 us/op
Iteration  10: 30328.210 us/op
Iteration  11: 30596.747 us/op
Iteration  12: 30193.744 us/op
Iteration  13: 29776.888 us/op
Iteration  14: 28845.834 us/op
Iteration  15: 29384.048 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  N = 15
  mean =  29716.712 ±(99.9%) 1555.316 us/op

  Histogram, us/op:
    [26000.000, 26500.000) = 1 
    [26500.000, 27000.000) = 0 
    [27000.000, 27500.000) = 0 
    [27500.000, 28000.000) = 0 
    [28000.000, 28500.000) = 1 
    [28500.000, 29000.000) = 2 
    [29000.000, 29500.000) = 2 
    [29500.000, 30000.000) = 2 
    [30000.000, 30500.000) = 4 
    [30500.000, 31000.000) = 2 
    [31000.000, 31500.000) = 0 
    [31500.000, 32000.000) = 0 
    [32000.000, 32500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  26238.288 us/op
     p(50.0000) =  29776.888 us/op
     p(90.0000) =  31678.967 us/op
     p(95.0000) =  32964.945 us/op
     p(99.0000) =  32964.945 us/op
     p(99.9000) =  32964.945 us/op
     p(99.9900) =  32964.945 us/op
     p(99.9990) =  32964.945 us/op
     p(99.9999) =  32964.945 us/op
    p(100.0000) =  32964.945 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 47200.754 us/op
# Warmup Iteration   2: 23020.138 us/op
# Warmup Iteration   3: 24824.799 us/op
# Warmup Iteration   4: 20418.269 us/op
# Warmup Iteration   5: 23623.334 us/op
Iteration   1: 24329.124 us/op
Iteration   2: 23895.639 us/op
Iteration   3: 21770.169 us/op
Iteration   4: 20770.278 us/op
Iteration   5: 21421.063 us/op
Iteration   6: 21951.306 us/op
Iteration   7: 21634.641 us/op
Iteration   8: 20719.341 us/op
Iteration   9: 21405.852 us/op
Iteration  10: 21707.207 us/op
Iteration  11: 21255.296 us/op
Iteration  12: 21537.390 us/op
Iteration  13: 22538.816 us/op
Iteration  14: 22203.274 us/op
Iteration  15: 21885.884 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  N = 15
  mean =  21935.019 ±(99.9%) 1076.028 us/op

  Histogram, us/op:
    [20000.000, 20500.000) = 0 
    [20500.000, 21000.000) = 2 
    [21000.000, 21500.000) = 3 
    [21500.000, 22000.000) = 6 
    [22000.000, 22500.000) = 1 
    [22500.000, 23000.000) = 1 
    [23000.000, 23500.000) = 0 
    [23500.000, 24000.000) = 1 
    [24000.000, 24500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  20719.341 us/op
     p(50.0000) =  21707.207 us/op
     p(90.0000) =  24069.033 us/op
     p(95.0000) =  24329.124 us/op
     p(99.0000) =  24329.124 us/op
     p(99.9000) =  24329.124 us/op
     p(99.9900) =  24329.124 us/op
     p(99.9990) =  24329.124 us/op
     p(99.9999) =  24329.124 us/op
    p(100.0000) =  24329.124 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 78624.025 us/op
# Warmup Iteration   2: 46130.605 us/op
# Warmup Iteration   3: 38507.944 us/op
# Warmup Iteration   4: 39230.846 us/op
# Warmup Iteration   5: 39795.814 us/op
Iteration   1: 37301.766 us/op
Iteration   2: 39347.701 us/op
Iteration   3: 41193.707 us/op
Iteration   4: 40419.882 us/op
Iteration   5: 40797.895 us/op
Iteration   6: 40542.954 us/op
Iteration   7: 41489.998 us/op
Iteration   8: 42658.600 us/op
Iteration   9: 39615.559 us/op
Iteration  10: 40094.368 us/op
Iteration  11: 43122.432 us/op
Iteration  12: 41044.470 us/op
Iteration  13: 40729.920 us/op
Iteration  14: 38657.007 us/op
Iteration  15: 38095.989 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  N = 15
  mean =  40340.817 ±(99.9%) 1684.126 us/op

  Histogram, us/op:
    [37000.000, 37500.000) = 1 
    [37500.000, 38000.000) = 0 
    [38000.000, 38500.000) = 1 
    [38500.000, 39000.000) = 1 
    [39000.000, 39500.000) = 1 
    [39500.000, 40000.000) = 1 
    [40000.000, 40500.000) = 2 
    [40500.000, 41000.000) = 3 
    [41000.000, 41500.000) = 3 
    [41500.000, 42000.000) = 0 
    [42000.000, 42500.000) = 0 
    [42500.000, 43000.000) = 1 
    [43000.000, 43500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  37301.766 us/op
     p(50.0000) =  40542.954 us/op
     p(90.0000) =  42844.133 us/op
     p(95.0000) =  43122.432 us/op
     p(99.0000) =  43122.432 us/op
     p(99.9000) =  43122.432 us/op
     p(99.9900) =  43122.432 us/op
     p(99.9990) =  43122.432 us/op
     p(99.9999) =  43122.432 us/op
    p(100.0000) =  43122.432 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 7076.912 us/op
# Warmup Iteration   2: 6993.332 us/op
# Warmup Iteration   3: 6954.367 us/op
# Warmup Iteration   4: 6749.977 us/op
# Warmup Iteration   5: 6976.980 us/op
Iteration   1: 6842.994 us/op
Iteration   2: 7611.108 us/op
Iteration   3: 6867.748 us/op
Iteration   4: 6854.102 us/op
Iteration   5: 6886.162 us/op
Iteration   6: 6809.670 us/op
Iteration   7: 6705.851 us/op
Iteration   8: 6893.718 us/op
Iteration   9: 6833.171 us/op
Iteration  10: 6818.888 us/op
Iteration  11: 6792.536 us/op
Iteration  12: 6971.968 us/op
Iteration  13: 6791.792 us/op
Iteration  14: 7017.408 us/op
Iteration  15: 6720.823 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean =   6894.529 ±(99.9%) 229.124 us/op

  Histogram, us/op:
    [6700.000, 6800.000) = 4 
    [6800.000, 6900.000) = 8 
    [6900.000, 7000.000) = 1 
    [7000.000, 7100.000) = 1 
    [7100.000, 7200.000) = 0 
    [7200.000, 7300.000) = 0 
    [7300.000, 7400.000) = 0 
    [7400.000, 7500.000) = 0 
    [7500.000, 7600.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   6705.851 us/op
     p(50.0000) =   6842.994 us/op
     p(90.0000) =   7254.888 us/op
     p(95.0000) =   7611.108 us/op
     p(99.0000) =   7611.108 us/op
     p(99.9000) =   7611.108 us/op
     p(99.9900) =   7611.108 us/op
     p(99.9990) =   7611.108 us/op
     p(99.9999) =   7611.108 us/op
    p(100.0000) =   7611.108 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 81020.593 us/op
# Warmup Iteration   2: 65220.478 us/op
# Warmup Iteration   3: 64987.881 us/op
# Warmup Iteration   4: 64486.054 us/op
# Warmup Iteration   5: 64736.090 us/op
Iteration   1: 63508.491 us/op
Iteration   2: 64680.601 us/op
Iteration   3: 64766.479 us/op
Iteration   4: 64467.216 us/op
Iteration   5: 64154.185 us/op
Iteration   6: 63925.140 us/op
Iteration   7: 64527.427 us/op
Iteration   8: 64782.883 us/op
Iteration   9: 64485.758 us/op
Iteration  10: 64225.290 us/op
Iteration  11: 63276.241 us/op
Iteration  12: 65247.612 us/op
Iteration  13: 64683.961 us/op
Iteration  14: 63355.674 us/op
Iteration  15: 63391.474 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean =  64231.895 ±(99.9%) 654.336 us/op

  Histogram, us/op:
    [63000.000, 63250.000) = 0 
    [63250.000, 63500.000) = 3 
    [63500.000, 63750.000) = 1 
    [63750.000, 64000.000) = 1 
    [64000.000, 64250.000) = 2 
    [64250.000, 64500.000) = 2 
    [64500.000, 64750.000) = 3 
    [64750.000, 65000.000) = 2 
    [65000.000, 65250.000) = 1 
    [65250.000, 65500.000) = 0 
    [65500.000, 65750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  63276.241 us/op
     p(50.0000) =  64467.216 us/op
     p(90.0000) =  64968.775 us/op
     p(95.0000) =  65247.612 us/op
     p(99.0000) =  65247.612 us/op
     p(99.9000) =  65247.612 us/op
     p(99.9900) =  65247.612 us/op
     p(99.9990) =  65247.612 us/op
     p(99.9999) =  65247.612 us/op
    p(100.0000) =  65247.612 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 900857.251 us/op
# Warmup Iteration   2: 869352.474 us/op
# Warmup Iteration   3: 910182.334 us/op
# Warmup Iteration   4: 861343.564 us/op
# Warmup Iteration   5: 868117.865 us/op
Iteration   1: 870433.755 us/op
Iteration   2: 855792.556 us/op
Iteration   3: 877170.855 us/op
Iteration   4: 873230.858 us/op
Iteration   5: 870217.204 us/op
Iteration   6: 875136.807 us/op
Iteration   7: 870644.824 us/op
Iteration   8: 878365.409 us/op
Iteration   9: 876028.050 us/op
Iteration  10: 906647.646 us/op
Iteration  11: 903816.482 us/op
Iteration  12: 907023.992 us/op
Iteration  13: 930120.488 us/op
Iteration  14: 943346.215 us/op
Iteration  15: 943947.985 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean = 892128.208 ±(99.9%) 30468.935 us/op

  Histogram, us/op:
    [850000.000, 860000.000) = 1 
    [860000.000, 870000.000) = 0 
    [870000.000, 880000.000) = 8 
    [880000.000, 890000.000) = 0 
    [890000.000, 900000.000) = 0 
    [900000.000, 910000.000) = 3 
    [910000.000, 920000.000) = 0 
    [920000.000, 930000.000) = 0 
    [930000.000, 940000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 855792.556 us/op
     p(50.0000) = 877170.855 us/op
     p(90.0000) = 943586.923 us/op
     p(95.0000) = 943947.985 us/op
     p(99.0000) = 943947.985 us/op
     p(99.9000) = 943947.985 us/op
     p(99.9900) = 943947.985 us/op
     p(99.9990) = 943947.985 us/op
     p(99.9999) = 943947.985 us/op
    p(100.0000) = 943947.985 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1771780.206 us/op
# Warmup Iteration   2: 1887264.205 us/op
# Warmup Iteration   3: 1758736.164 us/op
# Warmup Iteration   4: 1753598.343 us/op
# Warmup Iteration   5: 1733151.755 us/op
Iteration   1: 1785273.430 us/op
Iteration   2: 1743763.030 us/op
Iteration   3: 1768856.342 us/op
Iteration   4: 1743895.631 us/op
Iteration   5: 1825202.980 us/op
Iteration   6: 1759102.371 us/op
Iteration   7: 1784402.912 us/op
Iteration   8: 1762230.699 us/op
Iteration   9: 1814149.341 us/op
Iteration  10: 1764968.754 us/op
Iteration  11: 1793971.983 us/op
Iteration  12: 1769121.061 us/op
Iteration  13: 1756198.910 us/op
Iteration  14: 1782048.743 us/op
Iteration  15: 1782095.328 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  N = 15
  mean = 1775685.434 ±(99.9%) 24884.289 us/op

  Histogram, us/op:
    [1740000.000, 1745000.000) = 2 
    [1745000.000, 1750000.000) = 0 
    [1750000.000, 1755000.000) = 0 
    [1755000.000, 1760000.000) = 2 
    [1760000.000, 1765000.000) = 2 
    [1765000.000, 1770000.000) = 2 
    [1770000.000, 1775000.000) = 0 
    [1775000.000, 1780000.000) = 0 
    [1780000.000, 1785000.000) = 3 
    [1785000.000, 1790000.000) = 1 
    [1790000.000, 1795000.000) = 1 
    [1795000.000, 1800000.000) = 0 
    [1800000.000, 1805000.000) = 0 
    [1805000.000, 1810000.000) = 0 
    [1810000.000, 1815000.000) = 1 
    [1815000.000, 1820000.000) = 0 
    [1820000.000, 1825000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1743763.030 us/op
     p(50.0000) = 1769121.061 us/op
     p(90.0000) = 1818570.797 us/op
     p(95.0000) = 1825202.980 us/op
     p(99.0000) = 1825202.980 us/op
     p(99.9000) = 1825202.980 us/op
     p(99.9900) = 1825202.980 us/op
     p(99.9990) = 1825202.980 us/op
     p(99.9999) = 1825202.980 us/op
    p(100.0000) = 1825202.980 us/op


# Run complete. Total time: 08:43:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                    (iterations)  (length)     (size)    Mode      Cnt         Score        Error   Units
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A   thrpt       15         0.003 ±      0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A   thrpt       15         0.006 ±      0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A   thrpt       15         0.003 ±      0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A   thrpt       15         0.005 ±      0.001  ops/us
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A   thrpt       15        ≈ 10⁻⁷               ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A   thrpt       15         0.535 ±      0.001  ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A   thrpt       15         0.200 ±      0.001  ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A   thrpt       15         0.111 ±      0.001  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10   thrpt       15        24.989 ±      0.342  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100   thrpt       15         2.371 ±      0.026  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000   thrpt       15         0.254 ±      0.005  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10   thrpt       15        25.327 ±      0.506  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100   thrpt       15         2.305 ±      0.036  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000   thrpt       15         0.247 ±      0.004  ops/us
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A   thrpt       15         0.003 ±      0.001  ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A   thrpt       15        ≈ 10⁻⁷               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A   thrpt       15         0.001 ±      0.001  ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A   thrpt       15         1.980 ±      0.014  ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A   thrpt       15         0.001 ±      0.001  ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024    avgt       15    247501.685 ±   2248.767   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240    avgt       15    237580.330 ±   1942.314   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400    avgt       15    219083.856 ±   1623.227   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576    avgt       15    311089.088 ±   2156.022   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760    avgt       15    253121.463 ±  21776.587   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600    avgt       15    218624.145 ±   1153.203   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024    avgt       15   1154763.971 ± 224927.850   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240    avgt       15    914883.880 ±  10369.644   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400    avgt       15    680264.707 ±   2089.031   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760    avgt       15    535949.986 ±  60203.739   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600    avgt       15    492610.640 ±   4088.560   us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A    avgt       15       381.926 ±      0.887   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A    avgt       15       169.680 ±      0.948   us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A    avgt       15       201.540 ±      0.108   us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A    avgt       15       183.179 ±      1.089   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A    avgt       15   1293897.464 ±   2110.750   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A    avgt       15    714827.259 ±  14263.519   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A    avgt       15  16982737.064 ± 252780.559   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A    avgt       15         1.870 ±      0.001   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A    avgt       15         5.009 ±      0.010   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A    avgt       15         8.974 ±      0.018   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10    avgt       15         0.039 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100    avgt       15         0.350 ±      0.004   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000    avgt       15         3.944 ±      0.064   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10    avgt       15         0.039 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100    avgt       15         0.383 ±      0.006   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000    avgt       15         4.060 ±      0.060   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A    avgt       15     14608.300 ±     12.681   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A    avgt       15       376.420 ±      2.111   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A    avgt       15     36615.927 ±    228.453   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A    avgt       15  11847045.984 ±  42590.182   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A    avgt       15      1898.666 ±      2.921   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A    avgt       15     46968.230 ±     44.760   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A    avgt       15   1714829.782 ±   1845.959   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A    avgt       15         0.503 ±      0.005   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A    avgt       15      8364.263 ±      7.602   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A    avgt       15     32971.793 ±   2328.609   us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A    avgt       15     29778.850 ±     59.322   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A    avgt       15    154749.930 ±   2578.271   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A    avgt       15     18997.802 ±    537.036   us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A    avgt       15     38194.748 ±    958.411   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A    avgt       15      1714.540 ±     11.463   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A    avgt       15     21860.679 ±    114.567   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A    avgt       15    510797.592 ± 327788.851   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A    avgt       15   2351516.937 ± 415254.080   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024  sample      619    244807.769 ±   1074.959   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A       1024  sample             222035.968                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A       1024  sample             243269.632                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A       1024  sample             256376.832                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A       1024  sample             260571.136                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A       1024  sample             270532.608                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A       1024  sample             278396.928                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A       1024  sample             278396.928                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A       1024  sample             278396.928                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240  sample      640    237159.629 ±    892.152   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A      10240  sample             228589.568                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A      10240  sample             234618.880                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A      10240  sample             247201.792                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A      10240  sample             251658.240                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A      10240  sample             264705.147                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A      10240  sample             269484.032                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A      10240  sample             269484.032                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A      10240  sample             269484.032                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400  sample      696    217742.983 ±    849.835   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A     102400  sample             208142.336                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A     102400  sample             215482.368                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A     102400  sample             225705.984                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A     102400  sample             232521.728                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A     102400  sample             241473.946                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A     102400  sample             261095.424                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A     102400  sample             261095.424                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A     102400  sample             261095.424                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576  sample      491    311528.513 ±   2920.387   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A    1048576  sample             262406.144                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A    1048576  sample             316669.952                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A    1048576  sample             330825.728                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A    1048576  sample             335754.035                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A    1048576  sample             342884.352                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A    1048576  sample             362283.008                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A    1048576  sample             362283.008                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A    1048576  sample             362283.008                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760  sample      606    250734.680 ±   5367.432   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A   10485760  sample             200015.872                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A   10485760  sample             234487.808                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A   10485760  sample             311951.360                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A   10485760  sample             318242.816                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A   10485760  sample             329740.452                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A   10485760  sample             339214.336                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A   10485760  sample             339214.336                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A   10485760  sample             339214.336                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600  sample      690    219691.489 ±   2017.248   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A  104857600  sample             193462.272                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A  104857600  sample             218628.096                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A  104857600  sample             242194.842                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A  104857600  sample             247844.045                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A  104857600  sample             261404.754                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A  104857600  sample             273154.048                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A  104857600  sample             273154.048                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A  104857600  sample             273154.048                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024  sample      151   1036215.303 ±  62984.924   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A       1024  sample             825229.312                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A       1024  sample             886046.720                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A       1024  sample            1312397.722                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A       1024  sample            1345532.723                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A       1024  sample            1814623.683                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A       1024  sample            2017460.224                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A       1024  sample            2017460.224                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A       1024  sample            2017460.224                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240  sample      171    911102.168 ±   5511.630   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A      10240  sample             825229.312                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A      10240  sample             911212.544                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A      10240  sample             935329.792                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A      10240  sample             941411.533                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A      10240  sample             966451.528                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A      10240  sample             970981.376                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A      10240  sample             970981.376                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A      10240  sample             970981.376                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400  sample      225    675921.410 ±   5583.919   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A     102400  sample             578813.952                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A     102400  sample             678428.672                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A     102400  sample             698771.046                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A     102400  sample             704328.499                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A     102400  sample             725069.332                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A     102400  sample             727711.744                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A     102400  sample             727711.744                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A     102400  sample             727711.744                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760  sample      294    530188.915 ±  10625.814   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A   10485760  sample             458752.000                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A   10485760  sample             505151.488                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A   10485760  sample             624951.296                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A   10485760  sample             635699.200                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A   10485760  sample             648072.397                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A   10485760  sample             652214.272                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A   10485760  sample             652214.272                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A   10485760  sample             652214.272                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600  sample      315    492419.612 ±   3106.391   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A  104857600  sample             451411.968                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A  104857600  sample             492306.432                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A  104857600  sample             513802.240                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A  104857600  sample             519779.123                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A  104857600  sample             530935.972                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A  104857600  sample             534773.760                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A  104857600  sample             534773.760                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A  104857600  sample             534773.760                us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A  sample   393891       380.397 ±      0.103   us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.00                                                                        N/A       N/A        N/A  sample                370.176                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.50                                                                        N/A       N/A        N/A  sample                376.832                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.90                                                                        N/A       N/A        N/A  sample                391.680                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.95                                                                        N/A       N/A        N/A  sample                398.848                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.99                                                                        N/A       N/A        N/A  sample                440.832                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.999                                                                       N/A       N/A        N/A  sample                603.136                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.9999                                                                      N/A       N/A        N/A  sample                723.796                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p1.00                                                                        N/A       N/A        N/A  sample                883.712                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A  sample   887112       168.778 ±      0.049   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.00                                                        N/A       N/A        N/A  sample                158.720                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.50                                                        N/A       N/A        N/A  sample                166.144                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.90                                                        N/A       N/A        N/A  sample                174.848                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.95                                                        N/A       N/A        N/A  sample                181.760                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.99                                                        N/A       N/A        N/A  sample                199.168                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.999                                                       N/A       N/A        N/A  sample                367.616                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.9999                                                      N/A       N/A        N/A  sample                488.084                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p1.00                                                        N/A       N/A        N/A  sample               2691.072                us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A  sample   733340       204.334 ±      0.043   us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.00                                                                        N/A       N/A        N/A  sample                201.216                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.50                                                                        N/A       N/A        N/A  sample                201.728                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.90                                                                        N/A       N/A        N/A  sample                207.872                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.95                                                                        N/A       N/A        N/A  sample                211.712                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.99                                                                        N/A       N/A        N/A  sample                225.024                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.999                                                                       N/A       N/A        N/A  sample                368.640                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.9999                                                                      N/A       N/A        N/A  sample                471.551                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p1.00                                                                        N/A       N/A        N/A  sample                773.120                us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A  sample   819061       182.834 ±      0.055   us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.00                                                                      N/A       N/A        N/A  sample                171.520                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.50                                                                      N/A       N/A        N/A  sample                179.968                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.90                                                                      N/A       N/A        N/A  sample                190.464                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.95                                                                      N/A       N/A        N/A  sample                197.888                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.99                                                                      N/A       N/A        N/A  sample                220.672                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.999                                                                     N/A       N/A        N/A  sample                394.752                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.9999                                                                    N/A       N/A        N/A  sample                494.592                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p1.00                                                                      N/A       N/A        N/A  sample                694.272                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A  sample      135   1150870.414 ±   1066.587   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.00                                          N/A       N/A        N/A  sample            1145044.992                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.50                                          N/A       N/A        N/A  sample            1151336.448                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.90                                          N/A       N/A        N/A  sample            1155530.752                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.95                                          N/A       N/A        N/A  sample            1157627.904                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.99                                          N/A       N/A        N/A  sample            1166435.942                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.999                                         N/A       N/A        N/A  sample            1170210.816                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.9999                                        N/A       N/A        N/A  sample            1170210.816                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p1.00                                          N/A       N/A        N/A  sample            1170210.816                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A  sample      165    981390.876 ±   4056.892   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.00                                  N/A       100        N/A  sample             939524.096                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.50                                  N/A       100        N/A  sample             982515.712                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.90                                  N/A       100        N/A  sample            1001809.510                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.95                                  N/A       100        N/A  sample            1006632.960                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.99                                  N/A       100        N/A  sample            1013700.362                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.999                                 N/A       100        N/A  sample            1021313.024                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.9999                                N/A       100        N/A  sample            1021313.024                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p1.00                                  N/A       100        N/A  sample            1021313.024                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A  sample       15  19973834.889 ± 209371.256   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.00                                  N/A      1000        N/A  sample           19662897.152                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.50                                  N/A      1000        N/A  sample           19964887.040                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.90                                  N/A      1000        N/A  sample           20266876.928                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.95                                  N/A      1000        N/A  sample           20266876.928                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.99                                  N/A      1000        N/A  sample           20266876.928                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.999                                 N/A      1000        N/A  sample           20266876.928                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.9999                                N/A      1000        N/A  sample           20266876.928                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p1.00                                  N/A      1000        N/A  sample           20266876.928                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A  sample  4961321         1.932 ±      0.003   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                                521       N/A        N/A  sample                  1.856                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                                521       N/A        N/A  sample                  1.880                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                                521       N/A        N/A  sample                  1.890                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                                521       N/A        N/A  sample                  1.898                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                                521       N/A        N/A  sample                  2.052                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                               521       N/A        N/A  sample                 11.968                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                              521       N/A        N/A  sample                112.384                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                                521       N/A        N/A  sample                845.824                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A  sample  3717313         5.087 ±      0.005   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                               1153       N/A        N/A  sample                  4.816                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                               1153       N/A        N/A  sample                  4.976                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                               1153       N/A        N/A  sample                  5.040                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                               1153       N/A        N/A  sample                  5.064                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                               1153       N/A        N/A  sample                  5.856                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                              1153       N/A        N/A  sample                 19.872                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                             1153       N/A        N/A  sample                164.352                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                               1153       N/A        N/A  sample                637.952                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A  sample  4151288         9.048 ±      0.005   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                               2021       N/A        N/A  sample                  8.576                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                               2021       N/A        N/A  sample                  8.880                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                               2021       N/A        N/A  sample                  8.992                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                               2021       N/A        N/A  sample                  9.040                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                               2021       N/A        N/A  sample                 13.424                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                              2021       N/A        N/A  sample                 27.360                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                             2021       N/A        N/A  sample                179.200                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                               2021       N/A        N/A  sample                555.008                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10  sample  4715609         0.102 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A         10  sample                  0.081                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A         10  sample                  0.087                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A         10  sample                  0.109                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A         10  sample                  0.113                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A         10  sample                  0.121                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A         10  sample                  0.310                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A         10  sample                 11.248                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A         10  sample                253.184                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100  sample  5369453         0.486 ±      0.003   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A        100  sample                  0.443                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A        100  sample                  0.462                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A        100  sample                  0.483                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A        100  sample                  0.485                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A        100  sample                  0.499                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A        100  sample                  4.840                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A        100  sample                 20.163                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A        100  sample               4173.824                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000  sample  4240117         4.465 ±      0.005   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A       1000  sample                  4.216                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A       1000  sample                  4.368                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A       1000  sample                  4.432                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A       1000  sample                  4.480                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A       1000  sample                  5.736                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A       1000  sample                 17.760                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A       1000  sample                166.656                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A       1000  sample               2654.208                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10  sample  5129721         0.099 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A         10  sample                  0.077                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A         10  sample                  0.089                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A         10  sample                  0.108                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A         10  sample                  0.110                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A         10  sample                  0.122                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A         10  sample                  0.275                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A         10  sample                 10.496                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A         10  sample                488.960                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100  sample  5341926         0.440 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A        100  sample                  0.406                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A        100  sample                  0.419                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A        100  sample                  0.430                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A        100  sample                  0.435                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A        100  sample                  0.452                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A        100  sample                  4.520                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A        100  sample                 17.722                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A        100  sample                390.144                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000  sample  3925072         4.831 ±      0.006   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A       1000  sample                  4.488                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A       1000  sample                  4.720                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A       1000  sample                  4.816                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A       1000  sample                  4.840                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A       1000  sample                  6.288                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A       1000  sample                 19.360                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A       1000  sample                174.336                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A       1000  sample               4333.568                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A  sample    10297     14567.508 ±      4.126   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.00                                  N/A       N/A        N/A  sample              14401.536                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.50                                  N/A       N/A        N/A  sample              14516.224                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.90                                  N/A       N/A        N/A  sample              14712.832                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.95                                  N/A       N/A        N/A  sample              14794.752                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.99                                  N/A       N/A        N/A  sample              15056.896                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.999                                 N/A       N/A        N/A  sample              15379.694                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.9999                                N/A       N/A        N/A  sample              16613.160                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p1.00                                  N/A       N/A        N/A  sample              16629.760                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A  sample   414378       361.578 ±      1.793   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A       100        N/A  sample                335.872                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A       100        N/A  sample                348.160                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A       100        N/A  sample                366.592                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A       100        N/A  sample                375.296                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A       100        N/A  sample                417.792                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A       100        N/A  sample                773.368                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A       100        N/A  sample              16824.123                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A       100        N/A  sample              36110.336                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A  sample     4122     36422.975 ±    192.334   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A      1000        N/A  sample              34799.616                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A      1000        N/A  sample              35323.904                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A      1000        N/A  sample              36438.016                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A      1000        N/A  sample              44423.578                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A      1000        N/A  sample              55035.167                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A      1000        N/A  sample              68046.684                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A      1000        N/A  sample              74448.896                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A      1000        N/A  sample              74448.896                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A  sample       15  11824581.837 ±  50366.615   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A     10000        N/A  sample           11777605.632                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A     10000        N/A  sample           11811160.064                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A     10000        N/A  sample           11911823.360                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A     10000        N/A  sample           11962155.008                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A     10000        N/A  sample           11962155.008                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A     10000        N/A  sample           11962155.008                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A     10000        N/A  sample           11962155.008                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A     10000        N/A  sample           11962155.008                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A  sample    71255      2103.395 ±      2.374   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.00             N/A       N/A        N/A  sample               1857.536                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.50             N/A       N/A        N/A  sample               2236.416                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.90             N/A       N/A        N/A  sample               2277.376                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.95             N/A       N/A        N/A  sample               2297.856                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.99             N/A       N/A        N/A  sample               2461.696                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.999            N/A       N/A        N/A  sample               2669.543                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.9999           N/A       N/A        N/A  sample               3221.891                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p1.00             N/A       N/A        N/A  sample               4456.448                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A  sample     3203     46922.855 ±     12.435   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.00                     N/A       N/A        N/A  sample              46661.632                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.50                     N/A       N/A        N/A  sample              46858.240                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.90                     N/A       N/A        N/A  sample              47120.384                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.95                     N/A       N/A        N/A  sample              47316.992                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.99                     N/A       N/A        N/A  sample              47579.136                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.999                    N/A       N/A        N/A  sample              48794.960                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.9999                   N/A       N/A        N/A  sample              51249.152                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p1.00                     N/A       N/A        N/A  sample              51249.152                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A  sample       90   1701023.289 ±    776.805   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.00                                                 N/A       N/A        N/A  sample            1696595.968                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.50                                                 N/A       N/A        N/A  sample            1700790.272                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.90                                                 N/A       N/A        N/A  sample            1702887.424                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.95                                                 N/A       N/A        N/A  sample            1704984.576                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.99                                                 N/A       N/A        N/A  sample            1711276.032                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.999                                                N/A       N/A        N/A  sample            1711276.032                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.9999                                               N/A       N/A        N/A  sample            1711276.032                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p1.00                                                 N/A       N/A        N/A  sample            1711276.032                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A  sample  4553352         0.574 ±      0.002   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.00                       N/A       N/A        N/A  sample                  0.485                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.50                       N/A       N/A        N/A  sample                  0.549                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.90                       N/A       N/A        N/A  sample                  0.576                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.95                       N/A       N/A        N/A  sample                  0.586                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.99                       N/A       N/A        N/A  sample                  0.636                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.999                      N/A       N/A        N/A  sample                  5.528                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.9999                     N/A       N/A        N/A  sample                 21.493                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p1.00                       N/A       N/A        N/A  sample                297.472                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A  sample    17947      8356.721 ±      2.302   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.00                                   N/A       N/A        N/A  sample               8060.928                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.50                                   N/A       N/A        N/A  sample               8323.072                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.90                                   N/A       N/A        N/A  sample               8470.528                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.95                                   N/A       N/A        N/A  sample               8519.680                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.99                                   N/A       N/A        N/A  sample               8732.672                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.999                                  N/A       N/A        N/A  sample               8929.280                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.9999                                 N/A       N/A        N/A  sample              11871.722                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p1.00                                   N/A       N/A        N/A  sample              12353.536                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A  sample     4294     34958.107 ±    184.614   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.00                                             N/A       N/A        N/A  sample              30113.792                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.50                                             N/A       N/A        N/A  sample              33882.112                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.90                                             N/A       N/A        N/A  sample              38469.632                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.95                                             N/A       N/A        N/A  sample              44892.160                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.99                                             N/A       N/A        N/A  sample              45613.056                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.999                                            N/A       N/A        N/A  sample              74485.596                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.9999                                           N/A       N/A        N/A  sample              83623.936                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p1.00                                             N/A       N/A        N/A  sample              83623.936                us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A  sample     4907     30587.415 ±    480.316   us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.00                                                              N/A       N/A        N/A  sample              24674.304                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.50                                                              N/A       N/A        N/A  sample              29523.968                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.90                                                              N/A       N/A        N/A  sample              29982.720                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.95                                                              N/A       N/A        N/A  sample              66361.754                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.99                                                              N/A       N/A        N/A  sample              76414.976                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.999                                                             N/A       N/A        N/A  sample              81157.685                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.9999                                                            N/A       N/A        N/A  sample              88866.816                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p1.00                                                              N/A       N/A        N/A  sample              88866.816                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A  sample      988    153780.920 ±  14419.412   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.00                                                            N/A       N/A        N/A  sample              25591.808                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.50                                                            N/A       N/A        N/A  sample              42795.008                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.90                                                            N/A       N/A        N/A  sample             327680.000                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.95                                                            N/A       N/A        N/A  sample             356856.627                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.99                                                            N/A       N/A        N/A  sample             427352.392                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.999                                                           N/A       N/A        N/A  sample             455606.272                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.9999                                                          N/A       N/A        N/A  sample             455606.272                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p1.00                                                            N/A       N/A        N/A  sample             455606.272                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A  sample     7891     19004.053 ±    195.745   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.00                                                                N/A       N/A        N/A  sample              17563.648                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.50                                                                N/A       N/A        N/A  sample              18120.704                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.90                                                                N/A       N/A        N/A  sample              19496.960                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.95                                                                N/A       N/A        N/A  sample              21364.736                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.99                                                                N/A       N/A        N/A  sample              49615.995                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.999                                                               N/A       N/A        N/A  sample              84130.398                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.9999                                                              N/A       N/A        N/A  sample              96075.776                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p1.00                                                                N/A       N/A        N/A  sample              96075.776                us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A  sample     3805     39442.011 ±    289.977   us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.00                                                                      N/A       N/A        N/A  sample              36044.800                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.50                                                                      N/A       N/A        N/A  sample              38731.776                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.90                                                                      N/A       N/A        N/A  sample              40566.784                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.95                                                                      N/A       N/A        N/A  sample              41287.680                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.99                                                                      N/A       N/A        N/A  sample              73785.672                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.999                                                                     N/A       N/A        N/A  sample              96584.335                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.9999                                                                    N/A       N/A        N/A  sample             107085.824                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p1.00                                                                      N/A       N/A        N/A  sample             107085.824                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A  sample    88458      1694.602 ±     11.533   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A        10        N/A  sample               1327.104                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A        10        N/A  sample               1591.296                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A        10        N/A  sample               1765.376                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A        10        N/A  sample               1794.048                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A        10        N/A  sample               2019.328                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A        10        N/A  sample              17450.303                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A        10        N/A  sample              32256.390                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A        10        N/A  sample              37093.376                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A  sample     6874     21824.942 ±    139.701   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A       100        N/A  sample              20316.160                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A       100        N/A  sample              20905.984                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A       100        N/A  sample              21544.960                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A       100        N/A  sample              29196.288                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A       100        N/A  sample              38502.400                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A       100        N/A  sample              53731.328                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A       100        N/A  sample              68157.440                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A       100        N/A  sample              68157.440                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A  sample      397    387641.643 ±  37022.219   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A      1000        N/A  sample             257687.552                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A      1000        N/A  sample             306184.192                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A      1000        N/A  sample             927360.614                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A      1000        N/A  sample             947073.843                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A      1000        N/A  sample             980481.475                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A      1000        N/A  sample             993001.472                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A      1000        N/A  sample             993001.472                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A      1000        N/A  sample             993001.472                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A  sample       75   2502769.159 ± 144563.120   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.00                        N/A       N/A        N/A  sample            1730150.400                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.50                        N/A       N/A        N/A  sample            2675965.952                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.90                        N/A       N/A        N/A  sample            2723781.018                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.95                        N/A       N/A        N/A  sample            2739719.373                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.99                        N/A       N/A        N/A  sample            2759852.032                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.999                       N/A       N/A        N/A  sample            2759852.032                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.9999                      N/A       N/A        N/A  sample            2759852.032                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p1.00                        N/A       N/A        N/A  sample            2759852.032                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024      ss       15    250362.385 ±   5237.499   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240      ss       15    237342.016 ±   4796.389   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400      ss       15    224257.267 ±   6832.417   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576      ss       15    237902.525 ±   6817.748   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760      ss       15    231950.473 ±   9720.489   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600      ss       15    225921.739 ±  10571.452   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024      ss       15   1307417.398 ± 132928.505   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240      ss       15    847627.254 ±  11482.837   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400      ss       15    592325.574 ±  10389.201   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760      ss       15    496048.792 ±  10907.352   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600      ss       15    477165.710 ±  22348.155   us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A      ss       15       543.408 ±     17.648   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A      ss       15       357.522 ±     19.122   us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A      ss       15       211.485 ±     17.948   us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A      ss       15       452.139 ±     35.501   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A      ss       15   1372994.749 ±  17799.555   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A      ss       15   1064901.551 ±  29784.194   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A      ss       15  20054957.016 ± 194350.314   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A      ss       15        13.150 ±      1.172   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A      ss       15        20.798 ±     24.870   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A      ss       15        22.141 ±      2.126   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10      ss       15        15.891 ±     38.840   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100      ss       15        18.532 ±      7.605   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000      ss       15        95.740 ±     21.221   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10      ss       15         6.450 ±      0.757   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100      ss       15        15.416 ±      4.124   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000      ss       15       103.845 ±     41.975   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A      ss       15     14997.211 ±    738.353   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A      ss       15      2139.722 ±   2452.870   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A      ss       15     89650.937 ±  35421.413   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A      ss       15  11848283.511 ±  39883.081   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A      ss       15      1934.432 ±     52.765   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A      ss       15     47075.594 ±    178.230   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A      ss       15   1715511.692 ±   3367.827   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A      ss       15        23.185 ±     42.700   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A      ss       15      8788.674 ±     33.329   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A      ss       15     35592.914 ±   2192.673   us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A      ss       15     28193.434 ±    292.727   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A      ss       15     29716.712 ±   1555.316   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A      ss       15     21935.019 ±   1076.028   us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A      ss       15     40340.817 ±   1684.126   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A      ss       15      6894.529 ±    229.124   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A      ss       15     64231.895 ±    654.336   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A      ss       15    892128.208 ±  30468.935   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A      ss       15   1775685.434 ±  24884.289   us/op
