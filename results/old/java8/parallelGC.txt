# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 0.00% complete, ETA 07:40:00
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 0.72% complete, ETA 08:14:17
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 1.45% complete, ETA 08:11:26
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 2.17% complete, ETA 08:07:51
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 2.90% complete, ETA 08:04:21
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 3.62% complete, ETA 08:00:27
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 4.35% complete, ETA 07:56:43
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 5.07% complete, ETA 08:02:13
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 5.80% complete, ETA 08:01:22
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 6.52% complete, ETA 07:59:34
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 7.25% complete, ETA 07:55:39
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 7.97% complete, ETA 07:52:16
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 8.70% complete, ETA 07:49:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ops/us
# Warmup Iteration   2: 0.003 ops/us
# Warmup Iteration   3: 0.003 ops/us
# Warmup Iteration   4: 0.003 ops/us
# Warmup Iteration   5: 0.003 ops/us
Iteration   1: 0.003 ops/us
Iteration   2: 0.003 ops/us
Iteration   3: 0.003 ops/us
Iteration   4: 0.003 ops/us
Iteration   5: 0.003 ops/us
Iteration   6: 0.003 ops/us
Iteration   7: 0.003 ops/us
Iteration   8: 0.003 ops/us
Iteration   9: 0.003 ops/us
Iteration  10: 0.003 ops/us
Iteration  11: 0.003 ops/us
Iteration  12: 0.003 ops/us
Iteration  13: 0.003 ops/us
Iteration  14: 0.003 ops/us
Iteration  15: 0.003 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  0.003 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 9.42% complete, ETA 07:44:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ops/us
# Warmup Iteration   2: 0.006 ops/us
# Warmup Iteration   3: 0.006 ops/us
# Warmup Iteration   4: 0.006 ops/us
# Warmup Iteration   5: 0.006 ops/us
Iteration   1: 0.006 ops/us
Iteration   2: 0.006 ops/us
Iteration   3: 0.006 ops/us
Iteration   4: 0.006 ops/us
Iteration   5: 0.006 ops/us
Iteration   6: 0.006 ops/us
Iteration   7: 0.006 ops/us
Iteration   8: 0.006 ops/us
Iteration   9: 0.006 ops/us
Iteration  10: 0.006 ops/us
Iteration  11: 0.006 ops/us
Iteration  12: 0.006 ops/us
Iteration  13: 0.006 ops/us
Iteration  14: 0.006 ops/us
Iteration  15: 0.006 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  0.006 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.006] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 10.14% complete, ETA 07:39:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ops/us
# Warmup Iteration   2: 0.005 ops/us
# Warmup Iteration   3: 0.005 ops/us
# Warmup Iteration   4: 0.005 ops/us
# Warmup Iteration   5: 0.005 ops/us
Iteration   1: 0.005 ops/us
Iteration   2: 0.005 ops/us
Iteration   3: 0.005 ops/us
Iteration   4: 0.005 ops/us
Iteration   5: 0.005 ops/us
Iteration   6: 0.005 ops/us
Iteration   7: 0.005 ops/us
Iteration   8: 0.005 ops/us
Iteration   9: 0.005 ops/us
Iteration  10: 0.005 ops/us
Iteration  11: 0.005 ops/us
Iteration  12: 0.005 ops/us
Iteration  13: 0.005 ops/us
Iteration  14: 0.005 ops/us
Iteration  15: 0.005 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  0.005 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.005, 0.005] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 10.87% complete, ETA 07:34:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ops/us
# Warmup Iteration   2: 0.005 ops/us
# Warmup Iteration   3: 0.005 ops/us
# Warmup Iteration   4: 0.006 ops/us
# Warmup Iteration   5: 0.006 ops/us
Iteration   1: 0.005 ops/us
Iteration   2: 0.005 ops/us
Iteration   3: 0.005 ops/us
Iteration   4: 0.005 ops/us
Iteration   5: 0.005 ops/us
Iteration   6: 0.005 ops/us
Iteration   7: 0.005 ops/us
Iteration   8: 0.005 ops/us
Iteration   9: 0.005 ops/us
Iteration  10: 0.005 ops/us
Iteration  11: 0.005 ops/us
Iteration  12: 0.005 ops/us
Iteration  13: 0.005 ops/us
Iteration  14: 0.005 ops/us
Iteration  15: 0.005 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  0.005 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.005, 0.005] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 11.59% complete, ETA 07:29:52
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 12.32% complete, ETA 07:27:24
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 13.04% complete, ETA 07:24:06
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁷ ops/us
# Warmup Iteration   2: ≈ 10⁻⁷ ops/us
# Warmup Iteration   3: ≈ 10⁻⁷ ops/us
# Warmup Iteration   4: ≈ 10⁻⁷ ops/us
# Warmup Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   1: ≈ 10⁻⁷ ops/us
Iteration   2: ≈ 10⁻⁷ ops/us
Iteration   3: ≈ 10⁻⁷ ops/us
Iteration   4: ≈ 10⁻⁷ ops/us
Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   6: ≈ 10⁻⁷ ops/us
Iteration   7: ≈ 10⁻⁷ ops/us
Iteration   8: ≈ 10⁻⁷ ops/us
Iteration   9: ≈ 10⁻⁷ ops/us
Iteration  10: ≈ 10⁻⁷ ops/us
Iteration  11: ≈ 10⁻⁷ ops/us
Iteration  12: ≈ 10⁻⁷ ops/us
Iteration  13: ≈ 10⁻⁷ ops/us
Iteration  14: ≈ 10⁻⁷ ops/us
Iteration  15: ≈ 10⁻⁷ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  ≈ 10⁻⁷ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 13.77% complete, ETA 07:39:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.533 ops/us
# Warmup Iteration   2: 0.534 ops/us
# Warmup Iteration   3: 0.535 ops/us
# Warmup Iteration   4: 0.535 ops/us
# Warmup Iteration   5: 0.535 ops/us
Iteration   1: 0.535 ops/us
Iteration   2: 0.534 ops/us
Iteration   3: 0.534 ops/us
Iteration   4: 0.535 ops/us
Iteration   5: 0.534 ops/us
Iteration   6: 0.535 ops/us
Iteration   7: 0.535 ops/us
Iteration   8: 0.535 ops/us
Iteration   9: 0.535 ops/us
Iteration  10: 0.535 ops/us
Iteration  11: 0.535 ops/us
Iteration  12: 0.534 ops/us
Iteration  13: 0.535 ops/us
Iteration  14: 0.534 ops/us
Iteration  15: 0.533 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.535 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.533, 0.535, 0.535), stdev = 0.001
  CI (99.9%): [0.534, 0.535] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 14.49% complete, ETA 07:34:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.200 ops/us
# Warmup Iteration   2: 0.200 ops/us
# Warmup Iteration   3: 0.199 ops/us
# Warmup Iteration   4: 0.200 ops/us
# Warmup Iteration   5: 0.199 ops/us
Iteration   1: 0.199 ops/us
Iteration   2: 0.200 ops/us
Iteration   3: 0.199 ops/us
Iteration   4: 0.200 ops/us
Iteration   5: 0.200 ops/us
Iteration   6: 0.200 ops/us
Iteration   7: 0.200 ops/us
Iteration   8: 0.200 ops/us
Iteration   9: 0.200 ops/us
Iteration  10: 0.200 ops/us
Iteration  11: 0.200 ops/us
Iteration  12: 0.200 ops/us
Iteration  13: 0.200 ops/us
Iteration  14: 0.200 ops/us
Iteration  15: 0.199 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.200 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.199, 0.200, 0.200), stdev = 0.001
  CI (99.9%): [0.199, 0.200] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 15.22% complete, ETA 07:28:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.111 ops/us
# Warmup Iteration   2: 0.111 ops/us
# Warmup Iteration   3: 0.111 ops/us
# Warmup Iteration   4: 0.111 ops/us
# Warmup Iteration   5: 0.111 ops/us
Iteration   1: 0.112 ops/us
Iteration   2: 0.112 ops/us
Iteration   3: 0.111 ops/us
Iteration   4: 0.112 ops/us
Iteration   5: 0.112 ops/us
Iteration   6: 0.111 ops/us
Iteration   7: 0.111 ops/us
Iteration   8: 0.112 ops/us
Iteration   9: 0.111 ops/us
Iteration  10: 0.112 ops/us
Iteration  11: 0.112 ops/us
Iteration  12: 0.111 ops/us
Iteration  13: 0.111 ops/us
Iteration  14: 0.111 ops/us
Iteration  15: 0.111 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.111 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.111, 0.111, 0.112), stdev = 0.001
  CI (99.9%): [0.111, 0.112] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 15.94% complete, ETA 07:23:25
# Fork: 1 of 1
# Warmup Iteration   1: 19.555 ops/us
# Warmup Iteration   2: 26.538 ops/us
# Warmup Iteration   3: 24.186 ops/us
# Warmup Iteration   4: 25.105 ops/us
# Warmup Iteration   5: 25.096 ops/us
Iteration   1: 24.156 ops/us
Iteration   2: 25.087 ops/us
Iteration   3: 25.133 ops/us
Iteration   4: 24.206 ops/us
Iteration   5: 24.188 ops/us
Iteration   6: 25.092 ops/us
Iteration   7: 25.108 ops/us
Iteration   8: 25.096 ops/us
Iteration   9: 25.114 ops/us
Iteration  10: 25.111 ops/us
Iteration  11: 25.110 ops/us
Iteration  12: 25.109 ops/us
Iteration  13: 24.209 ops/us
Iteration  14: 25.120 ops/us
Iteration  15: 25.106 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  24.863 ±(99.9%) 0.450 ops/us [Average]
  (min, avg, max) = (24.156, 24.863, 25.133), stdev = 0.421
  CI (99.9%): [24.413, 25.313] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 16.67% complete, ETA 07:18:21
# Fork: 1 of 1
# Warmup Iteration   1: 2.185 ops/us
# Warmup Iteration   2: 2.366 ops/us
# Warmup Iteration   3: 2.896 ops/us
# Warmup Iteration   4: 2.888 ops/us
# Warmup Iteration   5: 2.858 ops/us
Iteration   1: 2.878 ops/us
Iteration   2: 2.835 ops/us
Iteration   3: 2.822 ops/us
Iteration   4: 2.897 ops/us
Iteration   5: 2.898 ops/us
Iteration   6: 2.892 ops/us
Iteration   7: 2.876 ops/us
Iteration   8: 2.867 ops/us
Iteration   9: 2.816 ops/us
Iteration  10: 2.895 ops/us
Iteration  11: 2.896 ops/us
Iteration  12: 2.888 ops/us
Iteration  13: 2.755 ops/us
Iteration  14: 2.898 ops/us
Iteration  15: 2.876 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  2.866 ±(99.9%) 0.044 ops/us [Average]
  (min, avg, max) = (2.755, 2.866, 2.898), stdev = 0.041
  CI (99.9%): [2.822, 2.910] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 17.39% complete, ETA 07:13:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.227 ops/us
# Warmup Iteration   2: 0.236 ops/us
# Warmup Iteration   3: 0.253 ops/us
# Warmup Iteration   4: 0.254 ops/us
# Warmup Iteration   5: 0.258 ops/us
Iteration   1: 0.258 ops/us
Iteration   2: 0.255 ops/us
Iteration   3: 0.253 ops/us
Iteration   4: 0.255 ops/us
Iteration   5: 0.252 ops/us
Iteration   6: 0.253 ops/us
Iteration   7: 0.252 ops/us
Iteration   8: 0.255 ops/us
Iteration   9: 0.254 ops/us
Iteration  10: 0.252 ops/us
Iteration  11: 0.254 ops/us
Iteration  12: 0.259 ops/us
Iteration  13: 0.262 ops/us
Iteration  14: 0.249 ops/us
Iteration  15: 0.254 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.255 ±(99.9%) 0.003 ops/us [Average]
  (min, avg, max) = (0.249, 0.255, 0.262), stdev = 0.003
  CI (99.9%): [0.251, 0.258] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 18.12% complete, ETA 07:08:34
# Fork: 1 of 1
# Warmup Iteration   1: 22.513 ops/us
# Warmup Iteration   2: 19.412 ops/us
# Warmup Iteration   3: 22.584 ops/us
# Warmup Iteration   4: 23.584 ops/us
# Warmup Iteration   5: 23.558 ops/us
Iteration   1: 23.539 ops/us
Iteration   2: 23.378 ops/us
Iteration   3: 23.570 ops/us
Iteration   4: 23.384 ops/us
Iteration   5: 23.586 ops/us
Iteration   6: 23.596 ops/us
Iteration   7: 23.392 ops/us
Iteration   8: 23.564 ops/us
Iteration   9: 23.566 ops/us
Iteration  10: 23.532 ops/us
Iteration  11: 23.501 ops/us
Iteration  12: 23.539 ops/us
Iteration  13: 23.576 ops/us
Iteration  14: 23.360 ops/us
Iteration  15: 23.563 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  23.510 ±(99.9%) 0.091 ops/us [Average]
  (min, avg, max) = (23.360, 23.510, 23.596), stdev = 0.085
  CI (99.9%): [23.419, 23.601] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 18.84% complete, ETA 07:03:50
# Fork: 1 of 1
# Warmup Iteration   1: 2.161 ops/us
# Warmup Iteration   2: 2.127 ops/us
# Warmup Iteration   3: 2.584 ops/us
# Warmup Iteration   4: 2.508 ops/us
# Warmup Iteration   5: 2.550 ops/us
Iteration   1: 2.586 ops/us
Iteration   2: 2.557 ops/us
Iteration   3: 2.508 ops/us
Iteration   4: 2.620 ops/us
Iteration   5: 2.564 ops/us
Iteration   6: 2.597 ops/us
Iteration   7: 2.590 ops/us
Iteration   8: 2.513 ops/us
Iteration   9: 2.610 ops/us
Iteration  10: 2.619 ops/us
Iteration  11: 2.619 ops/us
Iteration  12: 2.572 ops/us
Iteration  13: 2.597 ops/us
Iteration  14: 2.582 ops/us
Iteration  15: 2.608 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  2.583 ±(99.9%) 0.038 ops/us [Average]
  (min, avg, max) = (2.508, 2.583, 2.620), stdev = 0.035
  CI (99.9%): [2.545, 2.620] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 19.56% complete, ETA 06:59:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.245 ops/us
# Warmup Iteration   2: 0.246 ops/us
# Warmup Iteration   3: 0.248 ops/us
# Warmup Iteration   4: 0.249 ops/us
# Warmup Iteration   5: 0.252 ops/us
Iteration   1: 0.243 ops/us
Iteration   2: 0.248 ops/us
Iteration   3: 0.246 ops/us
Iteration   4: 0.248 ops/us
Iteration   5: 0.249 ops/us
Iteration   6: 0.246 ops/us
Iteration   7: 0.245 ops/us
Iteration   8: 0.244 ops/us
Iteration   9: 0.244 ops/us
Iteration  10: 0.244 ops/us
Iteration  11: 0.241 ops/us
Iteration  12: 0.251 ops/us
Iteration  13: 0.246 ops/us
Iteration  14: 0.250 ops/us
Iteration  15: 0.247 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.246 ±(99.9%) 0.003 ops/us [Average]
  (min, avg, max) = (0.241, 0.246, 0.251), stdev = 0.003
  CI (99.9%): [0.243, 0.249] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 20.29% complete, ETA 06:54:36
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 21.01% complete, ETA 06:50:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ops/us
# Warmup Iteration   2: 0.003 ops/us
# Warmup Iteration   3: 0.003 ops/us
# Warmup Iteration   4: 0.003 ops/us
# Warmup Iteration   5: 0.003 ops/us
Iteration   1: 0.003 ops/us
Iteration   2: 0.003 ops/us
Iteration   3: 0.003 ops/us
Iteration   4: 0.003 ops/us
Iteration   5: 0.003 ops/us
Iteration   6: 0.003 ops/us
Iteration   7: 0.003 ops/us
Iteration   8: 0.003 ops/us
Iteration   9: 0.003 ops/us
Iteration  10: 0.003 ops/us
Iteration  11: 0.003 ops/us
Iteration  12: 0.003 ops/us
Iteration  13: 0.003 ops/us
Iteration  14: 0.003 ops/us
Iteration  15: 0.003 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  0.003 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 21.74% complete, ETA 06:45:40
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 22.46% complete, ETA 06:41:18
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁷ ops/us
# Warmup Iteration   2: ≈ 10⁻⁷ ops/us
# Warmup Iteration   3: ≈ 10⁻⁷ ops/us
# Warmup Iteration   4: ≈ 10⁻⁷ ops/us
# Warmup Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   1: ≈ 10⁻⁷ ops/us
Iteration   2: ≈ 10⁻⁷ ops/us
Iteration   3: ≈ 10⁻⁷ ops/us
Iteration   4: ≈ 10⁻⁷ ops/us
Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   6: ≈ 10⁻⁷ ops/us
Iteration   7: ≈ 10⁻⁷ ops/us
Iteration   8: ≈ 10⁻⁷ ops/us
Iteration   9: ≈ 10⁻⁷ ops/us
Iteration  10: ≈ 10⁻⁷ ops/us
Iteration  11: ≈ 10⁻⁷ ops/us
Iteration  12: ≈ 10⁻⁷ ops/us
Iteration  13: ≈ 10⁻⁷ ops/us
Iteration  14: ≈ 10⁻⁷ ops/us
Iteration  15: ≈ 10⁻⁷ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  ≈ 10⁻⁷ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 23.19% complete, ETA 06:38:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ops/us
# Warmup Iteration   2: 0.001 ops/us
# Warmup Iteration   3: 0.001 ops/us
# Warmup Iteration   4: 0.001 ops/us
# Warmup Iteration   5: 0.001 ops/us
Iteration   1: 0.001 ops/us
Iteration   2: 0.001 ops/us
Iteration   3: 0.001 ops/us
Iteration   4: 0.001 ops/us
Iteration   5: 0.001 ops/us
Iteration   6: 0.001 ops/us
Iteration   7: 0.001 ops/us
Iteration   8: 0.001 ops/us
Iteration   9: 0.001 ops/us
Iteration  10: 0.001 ops/us
Iteration  11: 0.001 ops/us
Iteration  12: 0.001 ops/us
Iteration  13: 0.001 ops/us
Iteration  14: 0.001 ops/us
Iteration  15: 0.001 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  0.001 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 23.91% complete, ETA 06:33:44
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 24.64% complete, ETA 06:29:31
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 25.36% complete, ETA 06:25:35
# Fork: 1 of 1
# Warmup Iteration   1: 1.935 ops/us
# Warmup Iteration   2: 1.953 ops/us
# Warmup Iteration   3: 1.955 ops/us
# Warmup Iteration   4: 1.955 ops/us
# Warmup Iteration   5: 1.952 ops/us
Iteration   1: 1.955 ops/us
Iteration   2: 1.951 ops/us
Iteration   3: 1.952 ops/us
Iteration   4: 1.953 ops/us
Iteration   5: 1.955 ops/us
Iteration   6: 1.955 ops/us
Iteration   7: 1.954 ops/us
Iteration   8: 1.955 ops/us
Iteration   9: 1.956 ops/us
Iteration  10: 1.955 ops/us
Iteration  11: 1.954 ops/us
Iteration  12: 1.934 ops/us
Iteration  13: 1.935 ops/us
Iteration  14: 1.939 ops/us
Iteration  15: 1.935 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  1.949 ±(99.9%) 0.009 ops/us [Average]
  (min, avg, max) = (1.934, 1.949, 1.956), stdev = 0.009
  CI (99.9%): [1.940, 1.958] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 26.09% complete, ETA 06:21:22
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 26.81% complete, ETA 06:17:29
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 27.54% complete, ETA 06:13:35
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 28.26% complete, ETA 06:09:26
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 28.98% complete, ETA 06:05:20
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 29.71% complete, ETA 06:01:15
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 30.43% complete, ETA 05:57:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ops/us
# Warmup Iteration   2: 0.001 ops/us
# Warmup Iteration   3: 0.001 ops/us
# Warmup Iteration   4: 0.001 ops/us
# Warmup Iteration   5: 0.001 ops/us
Iteration   1: 0.001 ops/us
Iteration   2: 0.001 ops/us
Iteration   3: 0.001 ops/us
Iteration   4: 0.001 ops/us
Iteration   5: 0.001 ops/us
Iteration   6: 0.001 ops/us
Iteration   7: 0.001 ops/us
Iteration   8: 0.001 ops/us
Iteration   9: 0.001 ops/us
Iteration  10: 0.001 ops/us
Iteration  11: 0.001 ops/us
Iteration  12: 0.001 ops/us
Iteration  13: 0.001 ops/us
Iteration  14: 0.001 ops/us
Iteration  15: 0.001 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  0.001 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 31.16% complete, ETA 05:53:09
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 31.88% complete, ETA 05:49:08
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 32.61% complete, ETA 05:45:15
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 33.33% complete, ETA 05:41:24
# Fork: 1 of 1
# Warmup Iteration   1: 240744.104 us/op
# Warmup Iteration   2: 233864.434 us/op
# Warmup Iteration   3: 236590.538 us/op
# Warmup Iteration   4: 235018.101 us/op
# Warmup Iteration   5: 234824.697 us/op
Iteration   1: 236684.186 us/op
Iteration   2: 235453.843 us/op
Iteration   3: 235135.324 us/op
Iteration   4: 232987.491 us/op
Iteration   5: 234931.184 us/op
Iteration   6: 237364.677 us/op
Iteration   7: 240549.003 us/op
Iteration   8: 235599.383 us/op
Iteration   9: 235272.430 us/op
Iteration  10: 235479.219 us/op
Iteration  11: 234322.311 us/op
Iteration  12: 238165.139 us/op
Iteration  13: 235739.565 us/op
Iteration  14: 236901.664 us/op
Iteration  15: 238619.226 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  236213.643 ±(99.9%) 2016.441 us/op [Average]
  (min, avg, max) = (232987.491, 236213.643, 240549.003), stdev = 1886.180
  CI (99.9%): [234197.202, 238230.084] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 34.06% complete, ETA 05:37:29
# Fork: 1 of 1
# Warmup Iteration   1: 231125.242 us/op
# Warmup Iteration   2: 232048.398 us/op
# Warmup Iteration   3: 232503.351 us/op
# Warmup Iteration   4: 232610.752 us/op
# Warmup Iteration   5: 233438.810 us/op
Iteration   1: 231879.736 us/op
Iteration   2: 234664.295 us/op
Iteration   3: 233173.394 us/op
Iteration   4: 232613.092 us/op
Iteration   5: 233139.079 us/op
Iteration   6: 233822.563 us/op
Iteration   7: 233843.773 us/op
Iteration   8: 232581.294 us/op
Iteration   9: 233611.443 us/op
Iteration  10: 232016.951 us/op
Iteration  11: 233052.232 us/op
Iteration  12: 233401.039 us/op
Iteration  13: 232125.778 us/op
Iteration  14: 233404.702 us/op
Iteration  15: 231897.592 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  233015.131 ±(99.9%) 877.467 us/op [Average]
  (min, avg, max) = (231879.736, 233015.131, 234664.295), stdev = 820.783
  CI (99.9%): [232137.664, 233892.597] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 34.78% complete, ETA 05:33:35
# Fork: 1 of 1
# Warmup Iteration   1: 210661.149 us/op
# Warmup Iteration   2: 215209.001 us/op
# Warmup Iteration   3: 214285.653 us/op
# Warmup Iteration   4: 212891.280 us/op
# Warmup Iteration   5: 213500.946 us/op
Iteration   1: 214252.920 us/op
Iteration   2: 216058.819 us/op
Iteration   3: 213933.073 us/op
Iteration   4: 215680.718 us/op
Iteration   5: 214477.167 us/op
Iteration   6: 213880.349 us/op
Iteration   7: 212886.612 us/op
Iteration   8: 212695.675 us/op
Iteration   9: 213407.501 us/op
Iteration  10: 212781.099 us/op
Iteration  11: 214155.450 us/op
Iteration  12: 213920.264 us/op
Iteration  13: 213136.271 us/op
Iteration  14: 214632.930 us/op
Iteration  15: 214148.579 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  214003.162 ±(99.9%) 1043.977 us/op [Average]
  (min, avg, max) = (212695.675, 214003.162, 216058.819), stdev = 976.537
  CI (99.9%): [212959.184, 215047.139] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 35.51% complete, ETA 05:29:41
# Fork: 1 of 1
# Warmup Iteration   1: 208671.990 us/op
# Warmup Iteration   2: 178547.024 us/op
# Warmup Iteration   3: 213573.033 us/op
# Warmup Iteration   4: 213030.300 us/op
# Warmup Iteration   5: 212459.385 us/op
Iteration   1: 212657.691 us/op
Iteration   2: 212489.495 us/op
Iteration   3: 211013.708 us/op
Iteration   4: 212611.520 us/op
Iteration   5: 212951.009 us/op
Iteration   6: 211469.188 us/op
Iteration   7: 210395.386 us/op
Iteration   8: 212481.254 us/op
Iteration   9: 210537.487 us/op
Iteration  10: 212956.341 us/op
Iteration  11: 213766.109 us/op
Iteration  12: 212802.115 us/op
Iteration  13: 211013.079 us/op
Iteration  14: 211421.562 us/op
Iteration  15: 213113.762 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  212111.980 ±(99.9%) 1113.514 us/op [Average]
  (min, avg, max) = (210395.386, 212111.980, 213766.109), stdev = 1041.582
  CI (99.9%): [210998.466, 213225.495] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 36.23% complete, ETA 05:25:48
# Fork: 1 of 1
# Warmup Iteration   1: 212865.367 us/op
# Warmup Iteration   2: 210608.769 us/op
# Warmup Iteration   3: 162061.631 us/op
# Warmup Iteration   4: 157264.246 us/op
# Warmup Iteration   5: 156551.791 us/op
Iteration   1: 156815.195 us/op
Iteration   2: 157032.514 us/op
Iteration   3: 161326.236 us/op
Iteration   4: 213019.666 us/op
Iteration   5: 212051.200 us/op
Iteration   6: 210768.547 us/op
Iteration   7: 212685.239 us/op
Iteration   8: 212244.396 us/op
Iteration   9: 211443.609 us/op
Iteration  10: 210343.707 us/op
Iteration  11: 212061.837 us/op
Iteration  12: 212429.527 us/op
Iteration  13: 212810.941 us/op
Iteration  14: 212819.630 us/op
Iteration  15: 212754.903 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  201373.810 ±(99.9%) 23817.866 us/op [Average]
  (min, avg, max) = (156815.195, 201373.810, 213019.666), stdev = 22279.246
  CI (99.9%): [177555.944, 225191.675] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 36.96% complete, ETA 05:21:56
# Fork: 1 of 1
# Warmup Iteration   1: 209339.174 us/op
# Warmup Iteration   2: 207679.911 us/op
# Warmup Iteration   3: 208705.404 us/op
# Warmup Iteration   4: 208697.919 us/op
# Warmup Iteration   5: 208778.532 us/op
Iteration   1: 208377.535 us/op
Iteration   2: 208654.443 us/op
Iteration   3: 208709.897 us/op
Iteration   4: 207644.246 us/op
Iteration   5: 208733.609 us/op
Iteration   6: 208387.835 us/op
Iteration   7: 208775.839 us/op
Iteration   8: 207126.055 us/op
Iteration   9: 207613.457 us/op
Iteration  10: 208710.112 us/op
Iteration  11: 208529.631 us/op
Iteration  12: 208753.823 us/op
Iteration  13: 207518.844 us/op
Iteration  14: 207319.638 us/op
Iteration  15: 208924.592 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  208251.970 ±(99.9%) 661.179 us/op [Average]
  (min, avg, max) = (207126.055, 208251.970, 208924.592), stdev = 618.467
  CI (99.9%): [207590.792, 208913.149] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 37.68% complete, ETA 05:18:04
# Fork: 1 of 1
# Warmup Iteration   1: 2602284.022 us/op
# Warmup Iteration   2: 2496676.876 us/op
# Warmup Iteration   3: 2491276.181 us/op
# Warmup Iteration   4: 2500219.159 us/op
# Warmup Iteration   5: 2488984.262 us/op
Iteration   1: 2496298.602 us/op
Iteration   2: 2497403.044 us/op
Iteration   3: 2481121.716 us/op
Iteration   4: 2492510.472 us/op
Iteration   5: 2500593.498 us/op
Iteration   6: 2490889.037 us/op
Iteration   7: 2490816.101 us/op
Iteration   8: 2503524.695 us/op
Iteration   9: 2505121.329 us/op
Iteration  10: 2493722.844 us/op
Iteration  11: 2468807.658 us/op
Iteration  12: 2498301.192 us/op
Iteration  13: 2497996.074 us/op
Iteration  14: 2476249.639 us/op
Iteration  15: 2485126.825 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  2491898.848 ±(99.9%) 10915.090 us/op [Average]
  (min, avg, max) = (2468807.658, 2491898.848, 2505121.329), stdev = 10209.982
  CI (99.9%): [2480983.759, 2502813.938] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 38.40% complete, ETA 05:15:15
# Fork: 1 of 1
# Warmup Iteration   1: 1119397.598 us/op
# Warmup Iteration   2: 1000753.832 us/op
# Warmup Iteration   3: 1009300.031 us/op
# Warmup Iteration   4: 1006400.198 us/op
# Warmup Iteration   5: 1011665.788 us/op
Iteration   1: 1012197.912 us/op
Iteration   2: 1010986.256 us/op
Iteration   3: 1014267.333 us/op
Iteration   4: 1008472.750 us/op
Iteration   5: 1006113.634 us/op
Iteration   6: 1004622.447 us/op
Iteration   7: 1011928.959 us/op
Iteration   8: 1007878.368 us/op
Iteration   9: 1010719.308 us/op
Iteration  10: 1000113.576 us/op
Iteration  11: 1010010.017 us/op
Iteration  12: 1006002.015 us/op
Iteration  13: 1010954.500 us/op
Iteration  14: 1007727.152 us/op
Iteration  15: 1010160.280 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1008810.300 ±(99.9%) 3808.798 us/op [Average]
  (min, avg, max) = (1000113.576, 1008810.300, 1014267.333), stdev = 3562.752
  CI (99.9%): [1005001.502, 1012619.099] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 39.13% complete, ETA 05:11:53
# Fork: 1 of 1
# Warmup Iteration   1: 860118.254 us/op
# Warmup Iteration   2: 830644.657 us/op
# Warmup Iteration   3: 841284.768 us/op
# Warmup Iteration   4: 833677.296 us/op
# Warmup Iteration   5: 838299.619 us/op
Iteration   1: 832577.457 us/op
Iteration   2: 840279.172 us/op
Iteration   3: 841160.601 us/op
Iteration   4: 846878.222 us/op
Iteration   5: 836004.022 us/op
Iteration   6: 839934.654 us/op
Iteration   7: 843476.468 us/op
Iteration   8: 843131.750 us/op
Iteration   9: 845225.795 us/op
Iteration  10: 854246.527 us/op
Iteration  11: 843356.008 us/op
Iteration  12: 854028.237 us/op
Iteration  13: 841938.668 us/op
Iteration  14: 838338.440 us/op
Iteration  15: 841413.823 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  842799.323 ±(99.9%) 6200.792 us/op [Average]
  (min, avg, max) = (832577.457, 842799.323, 854246.527), stdev = 5800.225
  CI (99.9%): [836598.531, 849000.115] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 39.85% complete, ETA 05:08:14
# Fork: 1 of 1
# Warmup Iteration   1: 840137.531 us/op
# Warmup Iteration   2: 810762.191 us/op
# Warmup Iteration   3: 751450.846 us/op
# Warmup Iteration   4: 834432.729 us/op
# Warmup Iteration   5: 841272.296 us/op
Iteration   1: 836760.592 us/op
Iteration   2: 837878.946 us/op
Iteration   3: 843563.806 us/op
Iteration   4: 837714.530 us/op
Iteration   5: 848089.616 us/op
Iteration   6: 833587.544 us/op
Iteration   7: 839016.212 us/op
Iteration   8: 843955.317 us/op
Iteration   9: 838744.694 us/op
Iteration  10: 839420.447 us/op
Iteration  11: 839565.885 us/op
Iteration  12: 839893.026 us/op
Iteration  13: 837935.563 us/op
Iteration  14: 833782.781 us/op
Iteration  15: 833705.167 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  838907.608 ±(99.9%) 4265.185 us/op [Average]
  (min, avg, max) = (833587.544, 838907.608, 848089.616), stdev = 3989.656
  CI (99.9%): [834642.424, 843172.793] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 40.58% complete, ETA 05:04:30
# Fork: 1 of 1
# Warmup Iteration   1: 881151.547 us/op
# Warmup Iteration   2: 896449.675 us/op
# Warmup Iteration   3: 896177.013 us/op
# Warmup Iteration   4: 911631.741 us/op
# Warmup Iteration   5: 895710.459 us/op
Iteration   1: 902851.647 us/op
Iteration   2: 898446.302 us/op
Iteration   3: 908485.615 us/op
Iteration   4: 873349.666 us/op
Iteration   5: 791049.046 us/op
Iteration   6: 789133.083 us/op
Iteration   7: 780262.150 us/op
Iteration   8: 782475.088 us/op
Iteration   9: 785273.978 us/op
Iteration  10: 778863.807 us/op
Iteration  11: 785740.330 us/op
Iteration  12: 777589.164 us/op
Iteration  13: 780384.030 us/op
Iteration  14: 778529.276 us/op
Iteration  15: 778686.467 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  812741.310 ±(99.9%) 56097.286 us/op [Average]
  (min, avg, max) = (777589.164, 812741.310, 908485.615), stdev = 52473.436
  CI (99.9%): [756644.024, 868838.596] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 41.30% complete, ETA 05:00:48
# Fork: 1 of 1
# Warmup Iteration   1: 813311.411 us/op
# Warmup Iteration   2: 813670.803 us/op
# Warmup Iteration   3: 819785.857 us/op
# Warmup Iteration   4: 819415.777 us/op
# Warmup Iteration   5: 811499.843 us/op
Iteration   1: 814430.754 us/op
Iteration   2: 812355.499 us/op
Iteration   3: 816139.939 us/op
Iteration   4: 815093.869 us/op
Iteration   5: 813874.099 us/op
Iteration   6: 815362.269 us/op
Iteration   7: 812156.915 us/op
Iteration   8: 821572.525 us/op
Iteration   9: 813055.270 us/op
Iteration  10: 816616.883 us/op
Iteration  11: 818374.058 us/op
Iteration  12: 816375.506 us/op
Iteration  13: 817003.885 us/op
Iteration  14: 819160.787 us/op
Iteration  15: 820034.697 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  816107.130 ±(99.9%) 2986.656 us/op [Average]
  (min, avg, max) = (812156.915, 816107.130, 821572.525), stdev = 2793.720
  CI (99.9%): [813120.474, 819093.786] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 42.03% complete, ETA 04:57:11
# Fork: 1 of 1
# Warmup Iteration   1: 383.326 us/op
# Warmup Iteration   2: 383.447 us/op
# Warmup Iteration   3: 382.577 us/op
# Warmup Iteration   4: 383.219 us/op
# Warmup Iteration   5: 382.617 us/op
Iteration   1: 382.287 us/op
Iteration   2: 382.504 us/op
Iteration   3: 384.579 us/op
Iteration   4: 383.142 us/op
Iteration   5: 382.177 us/op
Iteration   6: 382.183 us/op
Iteration   7: 382.767 us/op
Iteration   8: 381.665 us/op
Iteration   9: 381.746 us/op
Iteration  10: 382.209 us/op
Iteration  11: 381.937 us/op
Iteration  12: 381.572 us/op
Iteration  13: 382.004 us/op
Iteration  14: 381.594 us/op
Iteration  15: 381.090 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  382.230 ±(99.9%) 0.883 us/op [Average]
  (min, avg, max) = (381.090, 382.230, 384.579), stdev = 0.826
  CI (99.9%): [381.347, 383.113] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 42.75% complete, ETA 04:53:17
# Fork: 1 of 1
# Warmup Iteration   1: 168.962 us/op
# Warmup Iteration   2: 167.999 us/op
# Warmup Iteration   3: 167.937 us/op
# Warmup Iteration   4: 168.567 us/op
# Warmup Iteration   5: 169.913 us/op
Iteration   1: 168.786 us/op
Iteration   2: 169.294 us/op
Iteration   3: 170.043 us/op
Iteration   4: 169.921 us/op
Iteration   5: 170.138 us/op
Iteration   6: 169.629 us/op
Iteration   7: 170.007 us/op
Iteration   8: 170.857 us/op
Iteration   9: 169.321 us/op
Iteration  10: 169.409 us/op
Iteration  11: 170.826 us/op
Iteration  12: 168.691 us/op
Iteration  13: 168.889 us/op
Iteration  14: 169.652 us/op
Iteration  15: 169.828 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  169.686 ±(99.9%) 0.699 us/op [Average]
  (min, avg, max) = (168.691, 169.686, 170.857), stdev = 0.654
  CI (99.9%): [168.987, 170.385] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 43.48% complete, ETA 04:49:24
# Fork: 1 of 1
# Warmup Iteration   1: 201.607 us/op
# Warmup Iteration   2: 200.942 us/op
# Warmup Iteration   3: 203.244 us/op
# Warmup Iteration   4: 202.754 us/op
# Warmup Iteration   5: 202.807 us/op
Iteration   1: 202.655 us/op
Iteration   2: 202.708 us/op
Iteration   3: 202.636 us/op
Iteration   4: 202.838 us/op
Iteration   5: 202.609 us/op
Iteration   6: 202.689 us/op
Iteration   7: 202.563 us/op
Iteration   8: 202.970 us/op
Iteration   9: 202.633 us/op
Iteration  10: 202.848 us/op
Iteration  11: 202.684 us/op
Iteration  12: 202.600 us/op
Iteration  13: 202.478 us/op
Iteration  14: 202.516 us/op
Iteration  15: 202.358 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  202.652 ±(99.9%) 0.164 us/op [Average]
  (min, avg, max) = (202.358, 202.652, 202.970), stdev = 0.153
  CI (99.9%): [202.489, 202.816] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 44.20% complete, ETA 04:45:31
# Fork: 1 of 1
# Warmup Iteration   1: 174.812 us/op
# Warmup Iteration   2: 184.008 us/op
# Warmup Iteration   3: 184.248 us/op
# Warmup Iteration   4: 183.998 us/op
# Warmup Iteration   5: 184.492 us/op
Iteration   1: 184.283 us/op
Iteration   2: 183.760 us/op
Iteration   3: 185.461 us/op
Iteration   4: 185.068 us/op
Iteration   5: 184.248 us/op
Iteration   6: 183.458 us/op
Iteration   7: 184.102 us/op
Iteration   8: 184.933 us/op
Iteration   9: 185.202 us/op
Iteration  10: 185.595 us/op
Iteration  11: 176.750 us/op
Iteration  12: 184.546 us/op
Iteration  13: 184.770 us/op
Iteration  14: 184.088 us/op
Iteration  15: 183.697 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  183.997 ±(99.9%) 2.253 us/op [Average]
  (min, avg, max) = (176.750, 183.997, 185.595), stdev = 2.108
  CI (99.9%): [181.744, 186.251] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 44.93% complete, ETA 04:41:39
# Fork: 1 of 1
# Warmup Iteration   1: 1132990.365 us/op
# Warmup Iteration   2: 1130277.992 us/op
# Warmup Iteration   3: 1128046.029 us/op
# Warmup Iteration   4: 1129224.429 us/op
# Warmup Iteration   5: 1131257.732 us/op
Iteration   1: 1128042.756 us/op
Iteration   2: 1130055.678 us/op
Iteration   3: 1129461.127 us/op
Iteration   4: 1129687.117 us/op
Iteration   5: 1128121.041 us/op
Iteration   6: 1127599.382 us/op
Iteration   7: 1128395.958 us/op
Iteration   8: 1126988.392 us/op
Iteration   9: 1127515.210 us/op
Iteration  10: 1126806.823 us/op
Iteration  11: 1121534.237 us/op
Iteration  12: 1123344.833 us/op
Iteration  13: 1122290.143 us/op
Iteration  14: 1122358.482 us/op
Iteration  15: 1122749.901 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  1126330.072 ±(99.9%) 3205.430 us/op [Average]
  (min, avg, max) = (1121534.237, 1126330.072, 1130055.678), stdev = 2998.361
  CI (99.9%): [1123124.642, 1129535.502] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 45.65% complete, ETA 04:37:51
# Fork: 1 of 1
# Warmup Iteration   1: 1201674.096 us/op
# Warmup Iteration   2: 1210210.648 us/op
# Warmup Iteration   3: 1173207.962 us/op
# Warmup Iteration   4: 1195732.163 us/op
# Warmup Iteration   5: 1819035.414 us/op
Iteration   1: 1829303.973 us/op
Iteration   2: 1873988.933 us/op
Iteration   3: 1823070.430 us/op
Iteration   4: 1781418.134 us/op
Iteration   5: 1818455.888 us/op
Iteration   6: 1842922.142 us/op
Iteration   7: 1738468.279 us/op
Iteration   8: 1876015.240 us/op
Iteration   9: 1837257.959 us/op
Iteration  10: 1803791.120 us/op
Iteration  11: 1817221.076 us/op
Iteration  12: 1703556.922 us/op
Iteration  13: 1838532.420 us/op
Iteration  14: 1759388.281 us/op
Iteration  15: 1852403.510 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  1813052.954 ±(99.9%) 52125.316 us/op [Average]
  (min, avg, max) = (1703556.922, 1813052.954, 1876015.240), stdev = 48758.053
  CI (99.9%): [1760927.637, 1865178.270] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 46.38% complete, ETA 04:34:19
# Fork: 1 of 1
# Warmup Iteration   1: 16215414.839 us/op
# Warmup Iteration   2: 16457338.609 us/op
# Warmup Iteration   3: 16132363.376 us/op
# Warmup Iteration   4: 16477359.806 us/op
# Warmup Iteration   5: 17276996.217 us/op
Iteration   1: 17817977.320 us/op
Iteration   2: 17244339.574 us/op
Iteration   3: 17594538.902 us/op
Iteration   4: 17346597.010 us/op
Iteration   5: 17366716.002 us/op
Iteration   6: 17328476.741 us/op
Iteration   7: 17729294.045 us/op
Iteration   8: 17527221.462 us/op
Iteration   9: 17479328.183 us/op
Iteration  10: 17631014.228 us/op
Iteration  11: 17519557.395 us/op
Iteration  12: 17690877.106 us/op
Iteration  13: 17342556.282 us/op
Iteration  14: 17391470.458 us/op
Iteration  15: 17295854.880 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  17487054.639 ±(99.9%) 187266.792 us/op [Average]
  (min, avg, max) = (17244339.574, 17487054.639, 17817977.320), stdev = 175169.474
  CI (99.9%): [17299787.847, 17674321.432] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 47.10% complete, ETA 04:33:10
# Fork: 1 of 1
# Warmup Iteration   1: 1.875 us/op
# Warmup Iteration   2: 1.871 us/op
# Warmup Iteration   3: 1.870 us/op
# Warmup Iteration   4: 1.870 us/op
# Warmup Iteration   5: 1.870 us/op
Iteration   1: 1.869 us/op
Iteration   2: 1.870 us/op
Iteration   3: 1.870 us/op
Iteration   4: 1.871 us/op
Iteration   5: 1.874 us/op
Iteration   6: 1.872 us/op
Iteration   7: 1.870 us/op
Iteration   8: 1.869 us/op
Iteration   9: 1.872 us/op
Iteration  10: 1.872 us/op
Iteration  11: 1.871 us/op
Iteration  12: 1.870 us/op
Iteration  13: 1.871 us/op
Iteration  14: 1.870 us/op
Iteration  15: 1.871 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  1.871 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (1.869, 1.871, 1.874), stdev = 0.001
  CI (99.9%): [1.869, 1.872] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 47.82% complete, ETA 04:29:15
# Fork: 1 of 1
# Warmup Iteration   1: 5.475 us/op
# Warmup Iteration   2: 5.463 us/op
# Warmup Iteration   3: 5.458 us/op
# Warmup Iteration   4: 5.478 us/op
# Warmup Iteration   5: 5.474 us/op
Iteration   1: 5.464 us/op
Iteration   2: 5.476 us/op
Iteration   3: 5.471 us/op
Iteration   4: 5.491 us/op
Iteration   5: 5.464 us/op
Iteration   6: 5.468 us/op
Iteration   7: 5.475 us/op
Iteration   8: 5.462 us/op
Iteration   9: 5.473 us/op
Iteration  10: 5.479 us/op
Iteration  11: 5.474 us/op
Iteration  12: 5.465 us/op
Iteration  13: 5.450 us/op
Iteration  14: 5.451 us/op
Iteration  15: 5.469 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  5.469 ±(99.9%) 0.011 us/op [Average]
  (min, avg, max) = (5.450, 5.469, 5.491), stdev = 0.011
  CI (99.9%): [5.458, 5.480] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 48.55% complete, ETA 04:25:20
# Fork: 1 of 1
# Warmup Iteration   1: 9.668 us/op
# Warmup Iteration   2: 9.684 us/op
# Warmup Iteration   3: 9.704 us/op
# Warmup Iteration   4: 9.689 us/op
# Warmup Iteration   5: 9.693 us/op
Iteration   1: 9.687 us/op
Iteration   2: 9.652 us/op
Iteration   3: 9.695 us/op
Iteration   4: 9.650 us/op
Iteration   5: 9.657 us/op
Iteration   6: 9.622 us/op
Iteration   7: 9.694 us/op
Iteration   8: 9.656 us/op
Iteration   9: 9.682 us/op
Iteration  10: 9.678 us/op
Iteration  11: 9.700 us/op
Iteration  12: 9.655 us/op
Iteration  13: 9.665 us/op
Iteration  14: 9.680 us/op
Iteration  15: 9.701 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  9.672 ±(99.9%) 0.024 us/op [Average]
  (min, avg, max) = (9.622, 9.672, 9.701), stdev = 0.023
  CI (99.9%): [9.647, 9.696] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 49.27% complete, ETA 04:21:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 us/op
# Warmup Iteration   2: 0.038 us/op
# Warmup Iteration   3: 0.041 us/op
# Warmup Iteration   4: 0.040 us/op
# Warmup Iteration   5: 0.040 us/op
Iteration   1: 0.040 us/op
Iteration   2: 0.040 us/op
Iteration   3: 0.041 us/op
Iteration   4: 0.040 us/op
Iteration   5: 0.040 us/op
Iteration   6: 0.041 us/op
Iteration   7: 0.040 us/op
Iteration   8: 0.040 us/op
Iteration   9: 0.040 us/op
Iteration  10: 0.040 us/op
Iteration  11: 0.040 us/op
Iteration  12: 0.040 us/op
Iteration  13: 0.040 us/op
Iteration  14: 0.040 us/op
Iteration  15: 0.040 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.040 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.040, 0.040, 0.041), stdev = 0.001
  CI (99.9%): [0.039, 0.041] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 50.00% complete, ETA 04:17:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.458 us/op
# Warmup Iteration   2: 0.421 us/op
# Warmup Iteration   3: 0.350 us/op
# Warmup Iteration   4: 0.353 us/op
# Warmup Iteration   5: 0.347 us/op
Iteration   1: 0.349 us/op
Iteration   2: 0.348 us/op
Iteration   3: 0.353 us/op
Iteration   4: 0.348 us/op
Iteration   5: 0.347 us/op
Iteration   6: 0.346 us/op
Iteration   7: 0.348 us/op
Iteration   8: 0.346 us/op
Iteration   9: 0.347 us/op
Iteration  10: 0.348 us/op
Iteration  11: 0.353 us/op
Iteration  12: 0.346 us/op
Iteration  13: 0.345 us/op
Iteration  14: 0.348 us/op
Iteration  15: 0.349 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.348 ±(99.9%) 0.002 us/op [Average]
  (min, avg, max) = (0.345, 0.348, 0.353), stdev = 0.002
  CI (99.9%): [0.346, 0.350] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 50.72% complete, ETA 04:13:39
# Fork: 1 of 1
# Warmup Iteration   1: 4.485 us/op
# Warmup Iteration   2: 4.171 us/op
# Warmup Iteration   3: 3.931 us/op
# Warmup Iteration   4: 3.916 us/op
# Warmup Iteration   5: 3.983 us/op
Iteration   1: 3.925 us/op
Iteration   2: 3.907 us/op
Iteration   3: 4.003 us/op
Iteration   4: 4.054 us/op
Iteration   5: 3.982 us/op
Iteration   6: 4.010 us/op
Iteration   7: 3.925 us/op
Iteration   8: 3.975 us/op
Iteration   9: 3.999 us/op
Iteration  10: 3.981 us/op
Iteration  11: 3.950 us/op
Iteration  12: 3.941 us/op
Iteration  13: 3.969 us/op
Iteration  14: 3.954 us/op
Iteration  15: 3.909 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  3.966 ±(99.9%) 0.044 us/op [Average]
  (min, avg, max) = (3.907, 3.966, 4.054), stdev = 0.041
  CI (99.9%): [3.922, 4.010] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 51.45% complete, ETA 04:09:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.053 us/op
# Warmup Iteration   2: 0.053 us/op
# Warmup Iteration   3: 0.045 us/op
# Warmup Iteration   4: 0.045 us/op
# Warmup Iteration   5: 0.045 us/op
Iteration   1: 0.045 us/op
Iteration   2: 0.045 us/op
Iteration   3: 0.045 us/op
Iteration   4: 0.045 us/op
Iteration   5: 0.045 us/op
Iteration   6: 0.045 us/op
Iteration   7: 0.045 us/op
Iteration   8: 0.045 us/op
Iteration   9: 0.045 us/op
Iteration  10: 0.045 us/op
Iteration  11: 0.045 us/op
Iteration  12: 0.045 us/op
Iteration  13: 0.045 us/op
Iteration  14: 0.045 us/op
Iteration  15: 0.045 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.045 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.045, 0.045, 0.045), stdev = 0.001
  CI (99.9%): [0.045, 0.045] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 52.17% complete, ETA 04:05:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.462 us/op
# Warmup Iteration   2: 0.457 us/op
# Warmup Iteration   3: 0.389 us/op
# Warmup Iteration   4: 0.387 us/op
# Warmup Iteration   5: 0.382 us/op
Iteration   1: 0.395 us/op
Iteration   2: 0.384 us/op
Iteration   3: 0.389 us/op
Iteration   4: 0.386 us/op
Iteration   5: 0.382 us/op
Iteration   6: 0.390 us/op
Iteration   7: 0.393 us/op
Iteration   8: 0.385 us/op
Iteration   9: 0.385 us/op
Iteration  10: 0.391 us/op
Iteration  11: 0.383 us/op
Iteration  12: 0.386 us/op
Iteration  13: 0.390 us/op
Iteration  14: 0.385 us/op
Iteration  15: 0.391 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.388 ±(99.9%) 0.004 us/op [Average]
  (min, avg, max) = (0.382, 0.388, 0.395), stdev = 0.004
  CI (99.9%): [0.383, 0.392] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 52.90% complete, ETA 04:02:02
# Fork: 1 of 1
# Warmup Iteration   1: 4.013 us/op
# Warmup Iteration   2: 4.095 us/op
# Warmup Iteration   3: 3.989 us/op
# Warmup Iteration   4: 4.084 us/op
# Warmup Iteration   5: 4.067 us/op
Iteration   1: 4.117 us/op
Iteration   2: 4.018 us/op
Iteration   3: 4.040 us/op
Iteration   4: 4.022 us/op
Iteration   5: 4.001 us/op
Iteration   6: 4.073 us/op
Iteration   7: 4.027 us/op
Iteration   8: 4.071 us/op
Iteration   9: 4.003 us/op
Iteration  10: 3.990 us/op
Iteration  11: 3.931 us/op
Iteration  12: 4.114 us/op
Iteration  13: 3.893 us/op
Iteration  14: 4.074 us/op
Iteration  15: 3.954 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  4.022 ±(99.9%) 0.068 us/op [Average]
  (min, avg, max) = (3.893, 4.022, 4.117), stdev = 0.064
  CI (99.9%): [3.954, 4.090] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 53.62% complete, ETA 03:58:11
# Fork: 1 of 1
# Warmup Iteration   1: 14518.462 us/op
# Warmup Iteration   2: 14471.339 us/op
# Warmup Iteration   3: 14478.800 us/op
# Warmup Iteration   4: 14469.732 us/op
# Warmup Iteration   5: 14464.668 us/op
Iteration   1: 14491.713 us/op
Iteration   2: 14482.639 us/op
Iteration   3: 14463.191 us/op
Iteration   4: 14492.676 us/op
Iteration   5: 14530.101 us/op
Iteration   6: 14490.768 us/op
Iteration   7: 14472.854 us/op
Iteration   8: 14481.100 us/op
Iteration   9: 14483.609 us/op
Iteration  10: 14484.707 us/op
Iteration  11: 14482.759 us/op
Iteration  12: 14484.079 us/op
Iteration  13: 14488.634 us/op
Iteration  14: 14472.235 us/op
Iteration  15: 14466.688 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  14484.517 ±(99.9%) 16.491 us/op [Average]
  (min, avg, max) = (14463.191, 14484.517, 14530.101), stdev = 15.425
  CI (99.9%): [14468.026, 14501.007] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 54.35% complete, ETA 03:54:20
# Fork: 1 of 1
# Warmup Iteration   1: 359.292 us/op
# Warmup Iteration   2: 355.781 us/op
# Warmup Iteration   3: 355.657 us/op
# Warmup Iteration   4: 360.076 us/op
# Warmup Iteration   5: 356.582 us/op
Iteration   1: 354.085 us/op
Iteration   2: 352.604 us/op
Iteration   3: 355.256 us/op
Iteration   4: 354.316 us/op
Iteration   5: 354.301 us/op
Iteration   6: 353.738 us/op
Iteration   7: 353.014 us/op
Iteration   8: 354.563 us/op
Iteration   9: 352.035 us/op
Iteration  10: 353.323 us/op
Iteration  11: 355.055 us/op
Iteration  12: 355.353 us/op
Iteration  13: 353.805 us/op
Iteration  14: 354.771 us/op
Iteration  15: 355.119 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  354.089 ±(99.9%) 1.073 us/op [Average]
  (min, avg, max) = (352.035, 354.089, 355.353), stdev = 1.004
  CI (99.9%): [353.016, 355.162] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 55.07% complete, ETA 03:50:30
# Fork: 1 of 1
# Warmup Iteration   1: 36316.357 us/op
# Warmup Iteration   2: 35761.671 us/op
# Warmup Iteration   3: 35871.038 us/op
# Warmup Iteration   4: 35886.789 us/op
# Warmup Iteration   5: 35682.909 us/op
Iteration   1: 35797.399 us/op
Iteration   2: 35539.673 us/op
Iteration   3: 35737.213 us/op
Iteration   4: 35666.732 us/op
Iteration   5: 35753.286 us/op
Iteration   6: 35845.654 us/op
Iteration   7: 35811.184 us/op
Iteration   8: 35895.558 us/op
Iteration   9: 35650.219 us/op
Iteration  10: 35837.206 us/op
Iteration  11: 35674.393 us/op
Iteration  12: 35965.005 us/op
Iteration  13: 35697.666 us/op
Iteration  14: 35933.746 us/op
Iteration  15: 36083.862 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  35792.586 ±(99.9%) 150.630 us/op [Average]
  (min, avg, max) = (35539.673, 35792.586, 36083.862), stdev = 140.900
  CI (99.9%): [35641.956, 35943.217] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 55.80% complete, ETA 03:46:40
# Fork: 1 of 1
# Warmup Iteration   1: 3673285.358 us/op
# Warmup Iteration   2: 3655624.870 us/op
# Warmup Iteration   3: 3669624.710 us/op
# Warmup Iteration   4: 3653503.638 us/op
# Warmup Iteration   5: 3639537.353 us/op
Iteration   1: 3646555.974 us/op
Iteration   2: 3634128.187 us/op
Iteration   3: 3634582.768 us/op
Iteration   4: 3674027.885 us/op
Iteration   5: 3703575.159 us/op
Iteration   6: 3653723.221 us/op
Iteration   7: 3645002.033 us/op
Iteration   8: 3653108.035 us/op
Iteration   9: 3623398.266 us/op
Iteration  10: 3639159.446 us/op
Iteration  11: 3638635.353 us/op
Iteration  12: 3639271.615 us/op
Iteration  13: 3647202.166 us/op
Iteration  14: 3636874.211 us/op
Iteration  15: 3660253.235 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  3648633.170 ±(99.9%) 20848.149 us/op [Average]
  (min, avg, max) = (3623398.266, 3648633.170, 3703575.159), stdev = 19501.371
  CI (99.9%): [3627785.022, 3669481.319] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 56.52% complete, ETA 03:43:05
# Fork: 1 of 1
# Warmup Iteration   1: 1911.604 us/op
# Warmup Iteration   2: 1907.057 us/op
# Warmup Iteration   3: 1902.705 us/op
# Warmup Iteration   4: 1901.575 us/op
# Warmup Iteration   5: 1902.901 us/op
Iteration   1: 1905.873 us/op
Iteration   2: 1904.171 us/op
Iteration   3: 1902.261 us/op
Iteration   4: 1908.040 us/op
Iteration   5: 1903.434 us/op
Iteration   6: 1898.474 us/op
Iteration   7: 1897.551 us/op
Iteration   8: 1896.246 us/op
Iteration   9: 1899.379 us/op
Iteration  10: 1898.165 us/op
Iteration  11: 1900.249 us/op
Iteration  12: 1903.799 us/op
Iteration  13: 1905.786 us/op
Iteration  14: 1898.667 us/op
Iteration  15: 1897.607 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  1901.314 ±(99.9%) 3.930 us/op [Average]
  (min, avg, max) = (1896.246, 1901.314, 1908.040), stdev = 3.676
  CI (99.9%): [1897.383, 1905.244] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 57.24% complete, ETA 03:39:18
# Fork: 1 of 1
# Warmup Iteration   1: 47103.220 us/op
# Warmup Iteration   2: 46940.119 us/op
# Warmup Iteration   3: 46932.745 us/op
# Warmup Iteration   4: 46981.288 us/op
# Warmup Iteration   5: 46993.760 us/op
Iteration   1: 46940.665 us/op
Iteration   2: 46954.101 us/op
Iteration   3: 47020.499 us/op
Iteration   4: 46942.829 us/op
Iteration   5: 46954.800 us/op
Iteration   6: 46965.537 us/op
Iteration   7: 46925.932 us/op
Iteration   8: 46956.467 us/op
Iteration   9: 46948.935 us/op
Iteration  10: 46960.601 us/op
Iteration  11: 46989.971 us/op
Iteration  12: 46946.874 us/op
Iteration  13: 46983.141 us/op
Iteration  14: 46961.118 us/op
Iteration  15: 46952.958 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  46960.295 ±(99.9%) 24.533 us/op [Average]
  (min, avg, max) = (46925.932, 46960.295, 47020.499), stdev = 22.948
  CI (99.9%): [46935.762, 46984.828] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 57.97% complete, ETA 03:35:30
# Fork: 1 of 1
# Warmup Iteration   1: 1727184.714 us/op
# Warmup Iteration   2: 1715027.844 us/op
# Warmup Iteration   3: 1714127.381 us/op
# Warmup Iteration   4: 1714552.036 us/op
# Warmup Iteration   5: 1713756.049 us/op
Iteration   1: 1716820.880 us/op
Iteration   2: 1715756.509 us/op
Iteration   3: 1714997.696 us/op
Iteration   4: 1717062.329 us/op
Iteration   5: 1717645.284 us/op
Iteration   6: 1718408.159 us/op
Iteration   7: 1717122.221 us/op
Iteration   8: 1715001.171 us/op
Iteration   9: 1715117.900 us/op
Iteration  10: 1715590.590 us/op
Iteration  11: 1716158.576 us/op
Iteration  12: 1717450.640 us/op
Iteration  13: 1715669.506 us/op
Iteration  14: 1715658.896 us/op
Iteration  15: 1718415.608 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  1716458.398 ±(99.9%) 1265.367 us/op [Average]
  (min, avg, max) = (1714997.696, 1716458.398, 1718415.608), stdev = 1183.625
  CI (99.9%): [1715193.031, 1717723.764] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 58.69% complete, ETA 03:31:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.522 us/op
# Warmup Iteration   2: 0.520 us/op
# Warmup Iteration   3: 0.518 us/op
# Warmup Iteration   4: 0.523 us/op
# Warmup Iteration   5: 0.524 us/op
Iteration   1: 0.525 us/op
Iteration   2: 0.528 us/op
Iteration   3: 0.522 us/op
Iteration   4: 0.526 us/op
Iteration   5: 0.525 us/op
Iteration   6: 0.525 us/op
Iteration   7: 0.522 us/op
Iteration   8: 0.523 us/op
Iteration   9: 0.524 us/op
Iteration  10: 0.524 us/op
Iteration  11: 0.526 us/op
Iteration  12: 0.525 us/op
Iteration  13: 0.529 us/op
Iteration  14: 0.528 us/op
Iteration  15: 0.526 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  0.525 ±(99.9%) 0.002 us/op [Average]
  (min, avg, max) = (0.522, 0.525, 0.529), stdev = 0.002
  CI (99.9%): [0.523, 0.527] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 59.42% complete, ETA 03:27:57
# Fork: 1 of 1
# Warmup Iteration   1: 8387.196 us/op
# Warmup Iteration   2: 8361.114 us/op
# Warmup Iteration   3: 8361.958 us/op
# Warmup Iteration   4: 8368.945 us/op
# Warmup Iteration   5: 8369.476 us/op
Iteration   1: 8370.454 us/op
Iteration   2: 8368.717 us/op
Iteration   3: 8364.825 us/op
Iteration   4: 8377.051 us/op
Iteration   5: 8365.630 us/op
Iteration   6: 8377.500 us/op
Iteration   7: 8375.670 us/op
Iteration   8: 8376.541 us/op
Iteration   9: 8376.496 us/op
Iteration  10: 8376.790 us/op
Iteration  11: 8368.894 us/op
Iteration  12: 8379.452 us/op
Iteration  13: 8357.592 us/op
Iteration  14: 8353.064 us/op
Iteration  15: 8361.435 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  8370.007 ±(99.9%) 8.674 us/op [Average]
  (min, avg, max) = (8353.064, 8370.007, 8379.452), stdev = 8.114
  CI (99.9%): [8361.333, 8378.681] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 60.14% complete, ETA 03:24:13
# Fork: 1 of 1
# Warmup Iteration   1: 33790.097 us/op
# Warmup Iteration   2: 32929.553 us/op
# Warmup Iteration   3: 33908.721 us/op
# Warmup Iteration   4: 34064.717 us/op
# Warmup Iteration   5: 32119.848 us/op
Iteration   1: 34126.705 us/op
Iteration   2: 37567.566 us/op
Iteration   3: 33298.653 us/op
Iteration   4: 37416.056 us/op
Iteration   5: 33828.785 us/op
Iteration   6: 33681.676 us/op
Iteration   7: 39624.438 us/op
Iteration   8: 33213.427 us/op
Iteration   9: 34251.356 us/op
Iteration  10: 32938.937 us/op
Iteration  11: 33578.837 us/op
Iteration  12: 34244.291 us/op
Iteration  13: 36733.275 us/op
Iteration  14: 35811.736 us/op
Iteration  15: 35910.763 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  35081.767 ±(99.9%) 2129.811 us/op [Average]
  (min, avg, max) = (32938.937, 35081.767, 39624.438), stdev = 1992.227
  CI (99.9%): [32951.955, 37211.578] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 60.87% complete, ETA 03:20:28
# Fork: 1 of 1
# Warmup Iteration   1: 29446.689 us/op
# Warmup Iteration   2: 29783.596 us/op
# Warmup Iteration   3: 29359.170 us/op
# Warmup Iteration   4: 29835.281 us/op
# Warmup Iteration   5: 29544.694 us/op
Iteration   1: 29601.833 us/op
Iteration   2: 29654.091 us/op
Iteration   3: 29560.964 us/op
Iteration   4: 28524.458 us/op
Iteration   5: 29162.838 us/op
Iteration   6: 28496.851 us/op
Iteration   7: 29611.954 us/op
Iteration   8: 28451.770 us/op
Iteration   9: 28670.065 us/op
Iteration  10: 29736.221 us/op
Iteration  11: 28429.179 us/op
Iteration  12: 28515.189 us/op
Iteration  13: 29417.235 us/op
Iteration  14: 28602.033 us/op
Iteration  15: 28590.976 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  29001.710 ±(99.9%) 571.226 us/op [Average]
  (min, avg, max) = (28429.179, 29001.710, 29736.221), stdev = 534.326
  CI (99.9%): [28430.484, 29572.937] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 61.59% complete, ETA 03:16:40
# Fork: 1 of 1
# Warmup Iteration   1: 22066.032 us/op
# Warmup Iteration   2: 22059.342 us/op
# Warmup Iteration   3: 21906.622 us/op
# Warmup Iteration   4: 21752.591 us/op
# Warmup Iteration   5: 22087.293 us/op
Iteration   1: 21848.143 us/op
Iteration   2: 22134.736 us/op
Iteration   3: 21979.812 us/op
Iteration   4: 22279.952 us/op
Iteration   5: 22059.281 us/op
Iteration   6: 21688.161 us/op
Iteration   7: 21958.071 us/op
Iteration   8: 21903.174 us/op
Iteration   9: 21952.530 us/op
Iteration  10: 22059.635 us/op
Iteration  11: 21905.639 us/op
Iteration  12: 21652.859 us/op
Iteration  13: 21983.920 us/op
Iteration  14: 21913.861 us/op
Iteration  15: 22064.734 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  21958.967 ±(99.9%) 169.929 us/op [Average]
  (min, avg, max) = (21652.859, 21958.967, 22279.952), stdev = 158.952
  CI (99.9%): [21789.038, 22128.897] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 62.32% complete, ETA 03:12:53
# Fork: 1 of 1
# Warmup Iteration   1: 13787.604 us/op
# Warmup Iteration   2: 13680.403 us/op
# Warmup Iteration   3: 13645.207 us/op
# Warmup Iteration   4: 13739.191 us/op
# Warmup Iteration   5: 13742.219 us/op
Iteration   1: 13685.848 us/op
Iteration   2: 13666.510 us/op
Iteration   3: 13651.301 us/op
Iteration   4: 13615.081 us/op
Iteration   5: 13616.630 us/op
Iteration   6: 13646.105 us/op
Iteration   7: 13671.845 us/op
Iteration   8: 13662.722 us/op
Iteration   9: 13588.803 us/op
Iteration  10: 13617.474 us/op
Iteration  11: 13632.410 us/op
Iteration  12: 13629.518 us/op
Iteration  13: 13605.702 us/op
Iteration  14: 13636.978 us/op
Iteration  15: 13678.010 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  13640.329 ±(99.9%) 30.762 us/op [Average]
  (min, avg, max) = (13588.803, 13640.329, 13685.848), stdev = 28.775
  CI (99.9%): [13609.567, 13671.091] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 63.04% complete, ETA 03:09:06
# Fork: 1 of 1
# Warmup Iteration   1: 34519.494 us/op
# Warmup Iteration   2: 31545.317 us/op
# Warmup Iteration   3: 31956.557 us/op
# Warmup Iteration   4: 32342.875 us/op
# Warmup Iteration   5: 32385.011 us/op
Iteration   1: 31132.587 us/op
Iteration   2: 33680.340 us/op
Iteration   3: 31156.327 us/op
Iteration   4: 31368.577 us/op
Iteration   5: 33541.423 us/op
Iteration   6: 32533.211 us/op
Iteration   7: 31666.829 us/op
Iteration   8: 31826.609 us/op
Iteration   9: 31977.692 us/op
Iteration  10: 32387.039 us/op
Iteration  11: 32248.182 us/op
Iteration  12: 31483.585 us/op
Iteration  13: 34630.336 us/op
Iteration  14: 33832.283 us/op
Iteration  15: 33234.907 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  32446.662 ±(99.9%) 1170.215 us/op [Average]
  (min, avg, max) = (31132.587, 32446.662, 34630.336), stdev = 1094.620
  CI (99.9%): [31276.447, 33616.876] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 63.77% complete, ETA 03:05:19
# Fork: 1 of 1
# Warmup Iteration   1: 1403.217 us/op
# Warmup Iteration   2: 1320.291 us/op
# Warmup Iteration   3: 1323.356 us/op
# Warmup Iteration   4: 1307.924 us/op
# Warmup Iteration   5: 1318.967 us/op
Iteration   1: 1318.994 us/op
Iteration   2: 1313.630 us/op
Iteration   3: 1320.261 us/op
Iteration   4: 1318.770 us/op
Iteration   5: 1310.202 us/op
Iteration   6: 1309.185 us/op
Iteration   7: 1330.473 us/op
Iteration   8: 1313.759 us/op
Iteration   9: 1308.703 us/op
Iteration  10: 1320.128 us/op
Iteration  11: 1323.406 us/op
Iteration  12: 1316.209 us/op
Iteration  13: 1308.486 us/op
Iteration  14: 1310.494 us/op
Iteration  15: 1303.764 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  1315.098 ±(99.9%) 7.475 us/op [Average]
  (min, avg, max) = (1303.764, 1315.098, 1330.473), stdev = 6.992
  CI (99.9%): [1307.623, 1322.572] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 64.49% complete, ETA 03:01:32
# Fork: 1 of 1
# Warmup Iteration   1: 31757.360 us/op
# Warmup Iteration   2: 13688.393 us/op
# Warmup Iteration   3: 13703.256 us/op
# Warmup Iteration   4: 13758.774 us/op
# Warmup Iteration   5: 13709.263 us/op
Iteration   1: 13727.012 us/op
Iteration   2: 13845.948 us/op
Iteration   3: 13714.062 us/op
Iteration   4: 13716.989 us/op
Iteration   5: 13641.153 us/op
Iteration   6: 13718.268 us/op
Iteration   7: 13848.104 us/op
Iteration   8: 13820.094 us/op
Iteration   9: 13953.545 us/op
Iteration  10: 13889.368 us/op
Iteration  11: 13761.200 us/op
Iteration  12: 13749.936 us/op
Iteration  13: 14190.947 us/op
Iteration  14: 13865.727 us/op
Iteration  15: 13827.328 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  13817.979 ±(99.9%) 141.417 us/op [Average]
  (min, avg, max) = (13641.153, 13817.979, 14190.947), stdev = 132.281
  CI (99.9%): [13676.562, 13959.396] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 65.22% complete, ETA 02:57:46
# Fork: 1 of 1
# Warmup Iteration   1: 741896.309 us/op
# Warmup Iteration   2: 730250.214 us/op
# Warmup Iteration   3: 736104.793 us/op
# Warmup Iteration   4: 737929.821 us/op
# Warmup Iteration   5: 729704.281 us/op
Iteration   1: 732178.243 us/op
Iteration   2: 733534.504 us/op
Iteration   3: 589308.722 us/op
Iteration   4: 239018.890 us/op
Iteration   5: 238373.412 us/op
Iteration   6: 238160.134 us/op
Iteration   7: 239304.508 us/op
Iteration   8: 239502.096 us/op
Iteration   9: 238325.199 us/op
Iteration  10: 239964.097 us/op
Iteration  11: 239260.916 us/op
Iteration  12: 237103.273 us/op
Iteration  13: 239692.688 us/op
Iteration  14: 238547.472 us/op
Iteration  15: 239164.666 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  328095.921 ±(99.9%) 200296.869 us/op [Average]
  (min, avg, max) = (237103.273, 328095.921, 733534.504), stdev = 187357.815
  CI (99.9%): [127799.053, 528392.790] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 65.94% complete, ETA 02:54:01
# Fork: 1 of 1
# Warmup Iteration   1: 841172.422 us/op
# Warmup Iteration   2: 794615.161 us/op
# Warmup Iteration   3: 774775.162 us/op
# Warmup Iteration   4: 779552.575 us/op
# Warmup Iteration   5: 781541.641 us/op
Iteration   1: 786084.374 us/op
Iteration   2: 785613.917 us/op
Iteration   3: 784576.069 us/op
Iteration   4: 781824.864 us/op
Iteration   5: 784486.461 us/op
Iteration   6: 785722.136 us/op
Iteration   7: 790093.136 us/op
Iteration   8: 786403.718 us/op
Iteration   9: 786497.310 us/op
Iteration  10: 779774.115 us/op
Iteration  11: 794116.710 us/op
Iteration  12: 785622.870 us/op
Iteration  13: 789869.592 us/op
Iteration  14: 784337.287 us/op
Iteration  15: 782729.533 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  785850.140 ±(99.9%) 3747.488 us/op [Average]
  (min, avg, max) = (779774.115, 785850.140, 794116.710), stdev = 3505.403
  CI (99.9%): [782102.651, 789597.628] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 66.66% complete, ETA 02:50:18
# Fork: 1 of 1
# Warmup Iteration   1: 240061.489 ±(99.9%) 4702.149 us/op
# Warmup Iteration   2: 234210.423 ±(99.9%) 3177.472 us/op
# Warmup Iteration   3: 236466.081 ±(99.9%) 3121.320 us/op
# Warmup Iteration   4: 235478.468 ±(99.9%) 3275.191 us/op
# Warmup Iteration   5: 235917.407 ±(99.9%) 3668.148 us/op
Iteration   1: 236490.466 ±(99.9%) 3674.586 us/op
                 createNewObjects·p0.00:   225443.840 us/op
                 createNewObjects·p0.50:   236191.744 us/op
                 createNewObjects·p0.90:   244108.493 us/op
                 createNewObjects·p0.95:   254069.965 us/op
                 createNewObjects·p0.99:   255852.544 us/op
                 createNewObjects·p0.999:  255852.544 us/op
                 createNewObjects·p0.9999: 255852.544 us/op
                 createNewObjects·p1.00:   255852.544 us/op

Iteration   2: 235039.530 ±(99.9%) 3556.241 us/op
                 createNewObjects·p0.00:   219676.672 us/op
                 createNewObjects·p0.50:   235667.456 us/op
                 createNewObjects·p0.90:   243059.917 us/op
                 createNewObjects·p0.95:   244003.635 us/op
                 createNewObjects·p0.99:   251396.096 us/op
                 createNewObjects·p0.999:  251396.096 us/op
                 createNewObjects·p0.9999: 251396.096 us/op
                 createNewObjects·p1.00:   251396.096 us/op

Iteration   3: 234807.868 ±(99.9%) 3848.013 us/op
                 createNewObjects·p0.00:   220987.392 us/op
                 createNewObjects·p0.50:   234094.592 us/op
                 createNewObjects·p0.90:   245891.072 us/op
                 createNewObjects·p0.95:   247621.222 us/op
                 createNewObjects·p0.99:   249823.232 us/op
                 createNewObjects·p0.999:  249823.232 us/op
                 createNewObjects·p0.9999: 249823.232 us/op
                 createNewObjects·p1.00:   249823.232 us/op

Iteration   4: 236033.238 ±(99.9%) 3867.002 us/op
                 createNewObjects·p0.00:   222298.112 us/op
                 createNewObjects·p0.50:   234618.880 us/op
                 createNewObjects·p0.90:   247463.936 us/op
                 createNewObjects·p0.95:   252234.957 us/op
                 createNewObjects·p0.99:   253755.392 us/op
                 createNewObjects·p0.999:  253755.392 us/op
                 createNewObjects·p0.9999: 253755.392 us/op
                 createNewObjects·p1.00:   253755.392 us/op

Iteration   5: 234368.929 ±(99.9%) 3668.278 us/op
                 createNewObjects·p0.00:   222035.968 us/op
                 createNewObjects·p0.50:   233046.016 us/op
                 createNewObjects·p0.90:   242116.198 us/op
                 createNewObjects·p0.95:   250295.091 us/op
                 createNewObjects·p0.99:   258473.984 us/op
                 createNewObjects·p0.999:  258473.984 us/op
                 createNewObjects·p0.9999: 258473.984 us/op
                 createNewObjects·p1.00:   258473.984 us/op

Iteration   6: 234637.169 ±(99.9%) 3387.421 us/op
                 createNewObjects·p0.00:   223084.544 us/op
                 createNewObjects·p0.50:   234881.024 us/op
                 createNewObjects·p0.90:   243689.062 us/op
                 createNewObjects·p0.95:   248617.370 us/op
                 createNewObjects·p0.99:   249298.944 us/op
                 createNewObjects·p0.999:  249298.944 us/op
                 createNewObjects·p0.9999: 249298.944 us/op
                 createNewObjects·p1.00:   249298.944 us/op

Iteration   7: 240666.917 ±(99.9%) 4224.442 us/op
                 createNewObjects·p0.00:   223608.832 us/op
                 createNewObjects·p0.50:   239730.688 us/op
                 createNewObjects·p0.90:   252130.099 us/op
                 createNewObjects·p0.95:   255236.506 us/op
                 createNewObjects·p0.99:   258736.128 us/op
                 createNewObjects·p0.999:  258736.128 us/op
                 createNewObjects·p0.9999: 258736.128 us/op
                 createNewObjects·p1.00:   258736.128 us/op

Iteration   8: 235429.697 ±(99.9%) 3932.055 us/op
                 createNewObjects·p0.00:   224919.552 us/op
                 createNewObjects·p0.50:   234356.736 us/op
                 createNewObjects·p0.90:   243689.062 us/op
                 createNewObjects·p0.95:   244056.064 us/op
                 createNewObjects·p0.99:   266600.448 us/op
                 createNewObjects·p0.999:  266600.448 us/op
                 createNewObjects·p0.9999: 266600.448 us/op
                 createNewObjects·p1.00:   266600.448 us/op

Iteration   9: 234874.928 ±(99.9%) 3138.139 us/op
                 createNewObjects·p0.00:   224657.408 us/op
                 createNewObjects·p0.50:   234356.736 us/op
                 createNewObjects·p0.90:   242011.341 us/op
                 createNewObjects·p0.95:   244423.066 us/op
                 createNewObjects·p0.99:   255066.112 us/op
                 createNewObjects·p0.999:  255066.112 us/op
                 createNewObjects·p0.9999: 255066.112 us/op
                 createNewObjects·p1.00:   255066.112 us/op

Iteration  10: 235411.408 ±(99.9%) 4354.097 us/op
                 createNewObjects·p0.00:   220987.392 us/op
                 createNewObjects·p0.50:   233832.448 us/op
                 createNewObjects·p0.90:   249980.518 us/op
                 createNewObjects·p0.95:   251448.525 us/op
                 createNewObjects·p0.99:   253493.248 us/op
                 createNewObjects·p0.999:  253493.248 us/op
                 createNewObjects·p0.9999: 253493.248 us/op
                 createNewObjects·p1.00:   253493.248 us/op

Iteration  11: 235319.963 ±(99.9%) 4292.436 us/op
                 createNewObjects·p0.00:   222035.968 us/op
                 createNewObjects·p0.50:   235405.312 us/op
                 createNewObjects·p0.90:   248931.942 us/op
                 createNewObjects·p0.95:   251081.523 us/op
                 createNewObjects·p0.99:   256901.120 us/op
                 createNewObjects·p0.999:  256901.120 us/op
                 createNewObjects·p0.9999: 256901.120 us/op
                 createNewObjects·p1.00:   256901.120 us/op

Iteration  12: 239917.934 ±(99.9%) 4380.237 us/op
                 createNewObjects·p0.00:   220463.104 us/op
                 createNewObjects·p0.50:   239337.472 us/op
                 createNewObjects·p0.90:   251579.597 us/op
                 createNewObjects·p0.95:   252706.816 us/op
                 createNewObjects·p0.99:   255590.400 us/op
                 createNewObjects·p0.999:  255590.400 us/op
                 createNewObjects·p0.9999: 255590.400 us/op
                 createNewObjects·p1.00:   255590.400 us/op

Iteration  13: 234753.000 ±(99.9%) 3773.916 us/op
                 createNewObjects·p0.00:   222822.400 us/op
                 createNewObjects·p0.50:   233308.160 us/op
                 createNewObjects·p0.90:   244160.922 us/op
                 createNewObjects·p0.95:   245786.214 us/op
                 createNewObjects·p0.99:   259260.416 us/op
                 createNewObjects·p0.999:  259260.416 us/op
                 createNewObjects·p0.9999: 259260.416 us/op
                 createNewObjects·p1.00:   259260.416 us/op

Iteration  14: 235508.950 ±(99.9%) 3518.140 us/op
                 createNewObjects·p0.00:   224657.408 us/op
                 createNewObjects·p0.50:   234356.736 us/op
                 createNewObjects·p0.90:   243846.349 us/op
                 createNewObjects·p0.95:   247935.795 us/op
                 createNewObjects·p0.99:   256901.120 us/op
                 createNewObjects·p0.999:  256901.120 us/op
                 createNewObjects·p0.9999: 256901.120 us/op
                 createNewObjects·p1.00:   256901.120 us/op

Iteration  15: 233302.064 ±(99.9%) 3235.423 us/op
                 createNewObjects·p0.00:   221511.680 us/op
                 createNewObjects·p0.50:   232783.872 us/op
                 createNewObjects·p0.90:   241329.766 us/op
                 createNewObjects·p0.95:   244947.354 us/op
                 createNewObjects·p0.99:   247201.792 us/op
                 createNewObjects·p0.999:  247201.792 us/op
                 createNewObjects·p0.9999: 247201.792 us/op
                 createNewObjects·p1.00:   247201.792 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 643
  mean = 235756.740 ±(99.9%) 941.158 us/op

  Histogram, us/op:
    [210000.000, 215000.000) = 0 
    [215000.000, 220000.000) = 1 
    [220000.000, 225000.000) = 32 
    [225000.000, 230000.000) = 99 
    [230000.000, 235000.000) = 188 
    [235000.000, 240000.000) = 170 
    [240000.000, 245000.000) = 89 
    [245000.000, 250000.000) = 32 
    [250000.000, 255000.000) = 22 
    [255000.000, 260000.000) = 9 
    [260000.000, 265000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 219676.672 us/op
     p(50.0000) = 235143.168 us/op
     p(90.0000) = 245157.069 us/op
     p(95.0000) = 250032.947 us/op
     p(99.0000) = 256439.747 us/op
     p(99.9000) = 266600.448 us/op
     p(99.9900) = 266600.448 us/op
     p(99.9990) = 266600.448 us/op
     p(99.9999) = 266600.448 us/op
    p(100.0000) = 266600.448 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 67.39% complete, ETA 02:46:33
# Fork: 1 of 1
# Warmup Iteration   1: 232176.175 ±(99.9%) 2831.301 us/op
# Warmup Iteration   2: 233582.497 ±(99.9%) 1984.771 us/op
# Warmup Iteration   3: 233643.460 ±(99.9%) 2840.355 us/op
# Warmup Iteration   4: 234009.243 ±(99.9%) 3214.785 us/op
# Warmup Iteration   5: 233454.473 ±(99.9%) 2996.832 us/op
Iteration   1: 232814.354 ±(99.9%) 2398.152 us/op
                 createNewObjects·p0.00:   227016.704 us/op
                 createNewObjects·p0.50:   231473.152 us/op
                 createNewObjects·p0.90:   240123.904 us/op
                 createNewObjects·p0.95:   240648.192 us/op
                 createNewObjects·p0.99:   244318.208 us/op
                 createNewObjects·p0.999:  244318.208 us/op
                 createNewObjects·p0.9999: 244318.208 us/op
                 createNewObjects·p1.00:   244318.208 us/op

Iteration   2: 232509.535 ±(99.9%) 2678.051 us/op
                 createNewObjects·p0.00:   225443.840 us/op
                 createNewObjects·p0.50:   230686.720 us/op
                 createNewObjects·p0.90:   239809.331 us/op
                 createNewObjects·p0.95:   243846.349 us/op
                 createNewObjects·p0.99:   245366.784 us/op
                 createNewObjects·p0.999:  245366.784 us/op
                 createNewObjects·p0.9999: 245366.784 us/op
                 createNewObjects·p1.00:   245366.784 us/op

Iteration   3: 232893.607 ±(99.9%) 3014.093 us/op
                 createNewObjects·p0.00:   225181.696 us/op
                 createNewObjects·p0.50:   230686.720 us/op
                 createNewObjects·p0.90:   242430.771 us/op
                 createNewObjects·p0.95:   244737.638 us/op
                 createNewObjects·p0.99:   247988.224 us/op
                 createNewObjects·p0.999:  247988.224 us/op
                 createNewObjects·p0.9999: 247988.224 us/op
                 createNewObjects·p1.00:   247988.224 us/op

Iteration   4: 233155.751 ±(99.9%) 2998.092 us/op
                 createNewObjects·p0.00:   224133.120 us/op
                 createNewObjects·p0.50:   231473.152 us/op
                 createNewObjects·p0.90:   241382.195 us/op
                 createNewObjects·p0.95:   244790.067 us/op
                 createNewObjects·p0.99:   246415.360 us/op
                 createNewObjects·p0.999:  246415.360 us/op
                 createNewObjects·p0.9999: 246415.360 us/op
                 createNewObjects·p1.00:   246415.360 us/op

Iteration   5: 234240.905 ±(99.9%) 3094.096 us/op
                 createNewObjects·p0.00:   225968.128 us/op
                 createNewObjects·p0.50:   233046.016 us/op
                 createNewObjects·p0.90:   244737.638 us/op
                 createNewObjects·p0.95:   247359.078 us/op
                 createNewObjects·p0.99:   248512.512 us/op
                 createNewObjects·p0.999:  248512.512 us/op
                 createNewObjects·p0.9999: 248512.512 us/op
                 createNewObjects·p1.00:   248512.512 us/op

Iteration   6: 232576.595 ±(99.9%) 2595.072 us/op
                 createNewObjects·p0.00:   225181.696 us/op
                 createNewObjects·p0.50:   231211.008 us/op
                 createNewObjects·p0.90:   240490.906 us/op
                 createNewObjects·p0.95:   242955.059 us/op
                 createNewObjects·p0.99:   248512.512 us/op
                 createNewObjects·p0.999:  248512.512 us/op
                 createNewObjects·p0.9999: 248512.512 us/op
                 createNewObjects·p1.00:   248512.512 us/op

Iteration   7: 233350.835 ±(99.9%) 2438.467 us/op
                 createNewObjects·p0.00:   226754.560 us/op
                 createNewObjects·p0.50:   232521.728 us/op
                 createNewObjects·p0.90:   240281.190 us/op
                 createNewObjects·p0.95:   242430.771 us/op
                 createNewObjects·p0.99:   249036.800 us/op
                 createNewObjects·p0.999:  249036.800 us/op
                 createNewObjects·p0.9999: 249036.800 us/op
                 createNewObjects·p1.00:   249036.800 us/op

Iteration   8: 234478.663 ±(99.9%) 3809.207 us/op
                 createNewObjects·p0.00:   225968.128 us/op
                 createNewObjects·p0.50:   232259.584 us/op
                 createNewObjects·p0.90:   242430.771 us/op
                 createNewObjects·p0.95:   245104.640 us/op
                 createNewObjects·p0.99:   266600.448 us/op
                 createNewObjects·p0.999:  266600.448 us/op
                 createNewObjects·p0.9999: 266600.448 us/op
                 createNewObjects·p1.00:   266600.448 us/op

Iteration   9: 233228.907 ±(99.9%) 3108.413 us/op
                 createNewObjects·p0.00:   227016.704 us/op
                 createNewObjects·p0.50:   231211.008 us/op
                 createNewObjects·p0.90:   242273.485 us/op
                 createNewObjects·p0.95:   247830.938 us/op
                 createNewObjects·p0.99:   254279.680 us/op
                 createNewObjects·p0.999:  254279.680 us/op
                 createNewObjects·p0.9999: 254279.680 us/op
                 createNewObjects·p1.00:   254279.680 us/op

Iteration  10: 232480.023 ±(99.9%) 2539.845 us/op
                 createNewObjects·p0.00:   223870.976 us/op
                 createNewObjects·p0.50:   231211.008 us/op
                 createNewObjects·p0.90:   239206.400 us/op
                 createNewObjects·p0.95:   243531.776 us/op
                 createNewObjects·p0.99:   246677.504 us/op
                 createNewObjects·p0.999:  246677.504 us/op
                 createNewObjects·p0.9999: 246677.504 us/op
                 createNewObjects·p1.00:   246677.504 us/op

Iteration  11: 233009.438 ±(99.9%) 3001.164 us/op
                 createNewObjects·p0.00:   225968.128 us/op
                 createNewObjects·p0.50:   230686.720 us/op
                 createNewObjects·p0.90:   242640.486 us/op
                 createNewObjects·p0.95:   244737.638 us/op
                 createNewObjects·p0.99:   245366.784 us/op
                 createNewObjects·p0.999:  245366.784 us/op
                 createNewObjects·p0.9999: 245366.784 us/op
                 createNewObjects·p1.00:   245366.784 us/op

Iteration  12: 234173.845 ±(99.9%) 4059.429 us/op
                 createNewObjects·p0.00:   225181.696 us/op
                 createNewObjects·p0.50:   233046.016 us/op
                 createNewObjects·p0.90:   246677.504 us/op
                 createNewObjects·p0.95:   252444.672 us/op
                 createNewObjects·p0.99:   257163.264 us/op
                 createNewObjects·p0.999:  257163.264 us/op
                 createNewObjects·p0.9999: 257163.264 us/op
                 createNewObjects·p1.00:   257163.264 us/op

Iteration  13: 230740.340 ±(99.9%) 1972.097 us/op
                 createNewObjects·p0.00:   225705.984 us/op
                 createNewObjects·p0.50:   229638.144 us/op
                 createNewObjects·p0.90:   235667.456 us/op
                 createNewObjects·p0.95:   239009.792 us/op
                 createNewObjects·p0.99:   240910.336 us/op
                 createNewObjects·p0.999:  240910.336 us/op
                 createNewObjects·p0.9999: 240910.336 us/op
                 createNewObjects·p1.00:   240910.336 us/op

Iteration  14: 232062.976 ±(99.9%) 2674.367 us/op
                 createNewObjects·p0.00:   224133.120 us/op
                 createNewObjects·p0.50:   230031.360 us/op
                 createNewObjects·p0.90:   238944.256 us/op
                 createNewObjects·p0.95:   242417.664 us/op
                 createNewObjects·p0.99:   245366.784 us/op
                 createNewObjects·p0.999:  245366.784 us/op
                 createNewObjects·p0.9999: 245366.784 us/op
                 createNewObjects·p1.00:   245366.784 us/op

Iteration  15: 231830.621 ±(99.9%) 3065.358 us/op
                 createNewObjects·p0.00:   224919.552 us/op
                 createNewObjects·p0.50:   230293.504 us/op
                 createNewObjects·p0.90:   242614.272 us/op
                 createNewObjects·p0.95:   243793.920 us/op
                 createNewObjects·p0.99:   248774.656 us/op
                 createNewObjects·p0.999:  248774.656 us/op
                 createNewObjects·p0.9999: 248774.656 us/op
                 createNewObjects·p1.00:   248774.656 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 649
  mean = 232896.162 ±(99.9%) 711.892 us/op

  Histogram, us/op:
    [220000.000, 225000.000) = 4 
    [225000.000, 230000.000) = 243 
    [230000.000, 235000.000) = 214 
    [235000.000, 240000.000) = 115 
    [240000.000, 245000.000) = 47 
    [245000.000, 250000.000) = 21 
    [250000.000, 255000.000) = 3 
    [255000.000, 260000.000) = 1 
    [260000.000, 265000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 223870.976 us/op
     p(50.0000) = 231473.152 us/op
     p(90.0000) = 240648.192 us/op
     p(95.0000) = 243793.920 us/op
     p(99.0000) = 248905.728 us/op
     p(99.9000) = 266600.448 us/op
     p(99.9900) = 266600.448 us/op
     p(99.9990) = 266600.448 us/op
     p(99.9999) = 266600.448 us/op
    p(100.0000) = 266600.448 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 68.11% complete, ETA 02:42:48
# Fork: 1 of 1
# Warmup Iteration   1: 211812.352 ±(99.9%) 6982.216 us/op
# Warmup Iteration   2: 214322.241 ±(99.9%) 2534.179 us/op
# Warmup Iteration   3: 215153.294 ±(99.9%) 2899.002 us/op
# Warmup Iteration   4: 213864.884 ±(99.9%) 2425.801 us/op
# Warmup Iteration   5: 213942.969 ±(99.9%) 2517.212 us/op
Iteration   1: 214205.113 ±(99.9%) 3058.027 us/op
                 createNewObjects·p0.00:   208404.480 us/op
                 createNewObjects·p0.50:   212336.640 us/op
                 createNewObjects·p0.90:   222769.971 us/op
                 createNewObjects·p0.95:   229952.717 us/op
                 createNewObjects·p0.99:   235929.600 us/op
                 createNewObjects·p0.999:  235929.600 us/op
                 createNewObjects·p0.9999: 235929.600 us/op
                 createNewObjects·p1.00:   235929.600 us/op

Iteration   2: 216218.602 ±(99.9%) 3152.373 us/op
                 createNewObjects·p0.00:   207618.048 us/op
                 createNewObjects·p0.50:   215220.224 us/op
                 createNewObjects·p0.90:   224604.979 us/op
                 createNewObjects·p0.95:   231211.008 us/op
                 createNewObjects·p0.99:   235929.600 us/op
                 createNewObjects·p0.999:  235929.600 us/op
                 createNewObjects·p0.9999: 235929.600 us/op
                 createNewObjects·p1.00:   235929.600 us/op

Iteration   3: 214573.230 ±(99.9%) 2587.409 us/op
                 createNewObjects·p0.00:   207880.192 us/op
                 createNewObjects·p0.50:   213909.504 us/op
                 createNewObjects·p0.90:   223241.830 us/op
                 createNewObjects·p0.95:   226544.845 us/op
                 createNewObjects·p0.99:   227278.848 us/op
                 createNewObjects·p0.999:  227278.848 us/op
                 createNewObjects·p0.9999: 227278.848 us/op
                 createNewObjects·p1.00:   227278.848 us/op

Iteration   4: 214143.760 ±(99.9%) 3460.871 us/op
                 createNewObjects·p0.00:   206831.616 us/op
                 createNewObjects·p0.50:   211812.352 us/op
                 createNewObjects·p0.90:   223713.690 us/op
                 createNewObjects·p0.95:   234566.451 us/op
                 createNewObjects·p0.99:   236191.744 us/op
                 createNewObjects·p0.999:  236191.744 us/op
                 createNewObjects·p0.9999: 236191.744 us/op
                 createNewObjects·p1.00:   236191.744 us/op

Iteration   5: 211331.755 ±(99.9%) 1631.666 us/op
                 createNewObjects·p0.00:   207355.904 us/op
                 createNewObjects·p0.50:   210239.488 us/op
                 createNewObjects·p0.90:   216530.944 us/op
                 createNewObjects·p0.95:   217107.661 us/op
                 createNewObjects·p0.99:   223608.832 us/op
                 createNewObjects·p0.999:  223608.832 us/op
                 createNewObjects·p0.9999: 223608.832 us/op
                 createNewObjects·p1.00:   223608.832 us/op

Iteration   6: 213407.526 ±(99.9%) 2432.674 us/op
                 createNewObjects·p0.00:   201588.736 us/op
                 createNewObjects·p0.50:   212074.496 us/op
                 createNewObjects·p0.90:   220830.106 us/op
                 createNewObjects·p0.95:   222350.541 us/op
                 createNewObjects·p0.99:   227803.136 us/op
                 createNewObjects·p0.999:  227803.136 us/op
                 createNewObjects·p0.9999: 227803.136 us/op
                 createNewObjects·p1.00:   227803.136 us/op

Iteration   7: 215515.833 ±(99.9%) 3163.687 us/op
                 createNewObjects·p0.00:   206831.616 us/op
                 createNewObjects·p0.50:   213385.216 us/op
                 createNewObjects·p0.90:   225024.410 us/op
                 createNewObjects·p0.95:   229900.288 us/op
                 createNewObjects·p0.99:   234356.736 us/op
                 createNewObjects·p0.999:  234356.736 us/op
                 createNewObjects·p0.9999: 234356.736 us/op
                 createNewObjects·p1.00:   234356.736 us/op

Iteration   8: 213229.045 ±(99.9%) 3032.888 us/op
                 createNewObjects·p0.00:   204210.176 us/op
                 createNewObjects·p0.50:   212074.496 us/op
                 createNewObjects·p0.90:   222350.541 us/op
                 createNewObjects·p0.95:   226387.558 us/op
                 createNewObjects·p0.99:   228851.712 us/op
                 createNewObjects·p0.999:  228851.712 us/op
                 createNewObjects·p0.9999: 228851.712 us/op
                 createNewObjects·p1.00:   228851.712 us/op

Iteration   9: 212699.180 ±(99.9%) 2102.920 us/op
                 createNewObjects·p0.00:   205783.040 us/op
                 createNewObjects·p0.50:   211288.064 us/op
                 createNewObjects·p0.90:   219099.955 us/op
                 createNewObjects·p0.95:   222193.254 us/op
                 createNewObjects·p0.99:   223608.832 us/op
                 createNewObjects·p0.999:  223608.832 us/op
                 createNewObjects·p0.9999: 223608.832 us/op
                 createNewObjects·p1.00:   223608.832 us/op

Iteration  10: 215694.314 ±(99.9%) 2901.462 us/op
                 createNewObjects·p0.00:   206569.472 us/op
                 createNewObjects·p0.50:   215482.368 us/op
                 createNewObjects·p0.90:   224237.978 us/op
                 createNewObjects·p0.95:   229271.142 us/op
                 createNewObjects·p0.99:   232259.584 us/op
                 createNewObjects·p0.999:  232259.584 us/op
                 createNewObjects·p0.9999: 232259.584 us/op
                 createNewObjects·p1.00:   232259.584 us/op

Iteration  11: 213273.665 ±(99.9%) 2779.822 us/op
                 createNewObjects·p0.00:   205520.896 us/op
                 createNewObjects·p0.50:   212074.496 us/op
                 createNewObjects·p0.90:   221564.109 us/op
                 createNewObjects·p0.95:   226177.843 us/op
                 createNewObjects·p0.99:   227278.848 us/op
                 createNewObjects·p0.999:  227278.848 us/op
                 createNewObjects·p0.9999: 227278.848 us/op
                 createNewObjects·p1.00:   227278.848 us/op

Iteration  12: 212994.789 ±(99.9%) 2468.735 us/op
                 createNewObjects·p0.00:   206307.328 us/op
                 createNewObjects·p0.50:   211025.920 us/op
                 createNewObjects·p0.90:   220305.818 us/op
                 createNewObjects·p0.95:   222507.827 us/op
                 createNewObjects·p0.99:   230424.576 us/op
                 createNewObjects·p0.999:  230424.576 us/op
                 createNewObjects·p0.9999: 230424.576 us/op
                 createNewObjects·p1.00:   230424.576 us/op

Iteration  13: 214154.915 ±(99.9%) 2576.542 us/op
                 createNewObjects·p0.00:   207618.048 us/op
                 createNewObjects·p0.50:   213385.216 us/op
                 createNewObjects·p0.90:   220043.674 us/op
                 createNewObjects·p0.95:   227488.563 us/op
                 createNewObjects·p0.99:   229638.144 us/op
                 createNewObjects·p0.999:  229638.144 us/op
                 createNewObjects·p0.9999: 229638.144 us/op
                 createNewObjects·p1.00:   229638.144 us/op

Iteration  14: 214935.770 ±(99.9%) 3010.035 us/op
                 createNewObjects·p0.00:   206045.184 us/op
                 createNewObjects·p0.50:   214171.648 us/op
                 createNewObjects·p0.90:   221826.253 us/op
                 createNewObjects·p0.95:   228904.141 us/op
                 createNewObjects·p0.99:   233832.448 us/op
                 createNewObjects·p0.999:  233832.448 us/op
                 createNewObjects·p0.9999: 233832.448 us/op
                 createNewObjects·p1.00:   233832.448 us/op

Iteration  15: 214528.610 ±(99.9%) 2831.842 us/op
                 createNewObjects·p0.00:   207880.192 us/op
                 createNewObjects·p0.50:   213647.360 us/op
                 createNewObjects·p0.90:   222402.970 us/op
                 createNewObjects·p0.95:   228170.138 us/op
                 createNewObjects·p0.99:   231997.440 us/op
                 createNewObjects·p0.999:  231997.440 us/op
                 createNewObjects·p0.9999: 231997.440 us/op
                 createNewObjects·p1.00:   231997.440 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 706
  mean = 214056.542 ±(99.9%) 685.607 us/op

  Histogram, us/op:
    [200000.000, 202500.000) = 1 
    [202500.000, 205000.000) = 2 
    [205000.000, 207500.000) = 20 
    [207500.000, 210000.000) = 143 
    [210000.000, 212500.000) = 184 
    [212500.000, 215000.000) = 109 
    [215000.000, 217500.000) = 104 
    [217500.000, 220000.000) = 55 
    [220000.000, 222500.000) = 31 
    [222500.000, 225000.000) = 20 
    [225000.000, 227500.000) = 8 
    [227500.000, 230000.000) = 16 
    [230000.000, 232500.000) = 6 
    [232500.000, 235000.000) = 4 
    [235000.000, 237500.000) = 3 

  Percentiles, us/op:
      p(0.0000) = 201588.736 us/op
     p(50.0000) = 212598.784 us/op
     p(90.0000) = 221249.536 us/op
     p(95.0000) = 226230.272 us/op
     p(99.0000) = 233722.348 us/op
     p(99.9000) = 236191.744 us/op
     p(99.9900) = 236191.744 us/op
     p(99.9990) = 236191.744 us/op
     p(99.9999) = 236191.744 us/op
    p(100.0000) = 236191.744 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 68.84% complete, ETA 02:39:03
# Fork: 1 of 1
# Warmup Iteration   1: 209818.965 ±(99.9%) 6008.051 us/op
# Warmup Iteration   2: 179367.351 ±(99.9%) 13862.222 us/op
# Warmup Iteration   3: 211987.115 ±(99.9%) 2579.600 us/op
# Warmup Iteration   4: 212090.880 ±(99.9%) 2913.400 us/op
# Warmup Iteration   5: 210643.627 ±(99.9%) 2537.598 us/op
Iteration   1: 212637.827 ±(99.9%) 2823.447 us/op
                 createNewObjects·p0.00:   204734.464 us/op
                 createNewObjects·p0.50:   211550.208 us/op
                 createNewObjects·p0.90:   221197.107 us/op
                 createNewObjects·p0.95:   223346.688 us/op
                 createNewObjects·p0.99:   233308.160 us/op
                 createNewObjects·p0.999:  233308.160 us/op
                 createNewObjects·p0.9999: 233308.160 us/op
                 createNewObjects·p1.00:   233308.160 us/op

Iteration   2: 211626.667 ±(99.9%) 2431.881 us/op
                 createNewObjects·p0.00:   203948.032 us/op
                 createNewObjects·p0.50:   210501.632 us/op
                 createNewObjects·p0.90:   217920.307 us/op
                 createNewObjects·p0.95:   220397.568 us/op
                 createNewObjects·p0.99:   225705.984 us/op
                 createNewObjects·p0.999:  225705.984 us/op
                 createNewObjects·p0.9999: 225705.984 us/op
                 createNewObjects·p1.00:   225705.984 us/op

Iteration   3: 212473.173 ±(99.9%) 3128.496 us/op
                 createNewObjects·p0.00:   203948.032 us/op
                 createNewObjects·p0.50:   210501.632 us/op
                 createNewObjects·p0.90:   221406.822 us/op
                 createNewObjects·p0.95:   226780.774 us/op
                 createNewObjects·p0.99:   235143.168 us/op
                 createNewObjects·p0.999:  235143.168 us/op
                 createNewObjects·p0.9999: 235143.168 us/op
                 createNewObjects·p1.00:   235143.168 us/op

Iteration   4: 210660.011 ±(99.9%) 2500.923 us/op
                 createNewObjects·p0.00:   204996.608 us/op
                 createNewObjects·p0.50:   208928.768 us/op
                 createNewObjects·p0.90:   218130.022 us/op
                 createNewObjects·p0.95:   222494.720 us/op
                 createNewObjects·p0.99:   226230.272 us/op
                 createNewObjects·p0.999:  226230.272 us/op
                 createNewObjects·p0.9999: 226230.272 us/op
                 createNewObjects·p1.00:   226230.272 us/op

Iteration   5: 211817.813 ±(99.9%) 2537.381 us/op
                 createNewObjects·p0.00:   204472.320 us/op
                 createNewObjects·p0.50:   210632.704 us/op
                 createNewObjects·p0.90:   220043.674 us/op
                 createNewObjects·p0.95:   224303.514 us/op
                 createNewObjects·p0.99:   227016.704 us/op
                 createNewObjects·p0.999:  227016.704 us/op
                 createNewObjects·p0.9999: 227016.704 us/op
                 createNewObjects·p1.00:   227016.704 us/op

Iteration   6: 211697.664 ±(99.9%) 2628.676 us/op
                 createNewObjects·p0.00:   204996.608 us/op
                 createNewObjects·p0.50:   210763.776 us/op
                 createNewObjects·p0.90:   219702.886 us/op
                 createNewObjects·p0.95:   222848.614 us/op
                 createNewObjects·p0.99:   227278.848 us/op
                 createNewObjects·p0.999:  227278.848 us/op
                 createNewObjects·p0.9999: 227278.848 us/op
                 createNewObjects·p1.00:   227278.848 us/op

Iteration   7: 211025.920 ±(99.9%) 2179.110 us/op
                 createNewObjects·p0.00:   203948.032 us/op
                 createNewObjects·p0.50:   209977.344 us/op
                 createNewObjects·p0.90:   218890.240 us/op
                 createNewObjects·p0.95:   220607.283 us/op
                 createNewObjects·p0.99:   222822.400 us/op
                 createNewObjects·p0.999:  222822.400 us/op
                 createNewObjects·p0.9999: 222822.400 us/op
                 createNewObjects·p1.00:   222822.400 us/op

Iteration   8: 212041.728 ±(99.9%) 3138.153 us/op
                 createNewObjects·p0.00:   205258.752 us/op
                 createNewObjects·p0.50:   210239.488 us/op
                 createNewObjects·p0.90:   219047.526 us/op
                 createNewObjects·p0.95:   226898.739 us/op
                 createNewObjects·p0.99:   235929.600 us/op
                 createNewObjects·p0.999:  235929.600 us/op
                 createNewObjects·p0.9999: 235929.600 us/op
                 createNewObjects·p1.00:   235929.600 us/op

Iteration   9: 212693.602 ±(99.9%) 3262.418 us/op
                 createNewObjects·p0.00:   204210.176 us/op
                 createNewObjects·p0.50:   211288.064 us/op
                 createNewObjects·p0.90:   222612.685 us/op
                 createNewObjects·p0.95:   225338.982 us/op
                 createNewObjects·p0.99:   229113.856 us/op
                 createNewObjects·p0.999:  229113.856 us/op
                 createNewObjects·p0.9999: 229113.856 us/op
                 createNewObjects·p1.00:   229113.856 us/op

Iteration  10: 213123.072 ±(99.9%) 3497.640 us/op
                 createNewObjects·p0.00:   204734.464 us/op
                 createNewObjects·p0.50:   211025.920 us/op
                 createNewObjects·p0.90:   225601.126 us/op
                 createNewObjects·p0.95:   228117.709 us/op
                 createNewObjects·p0.99:   234356.736 us/op
                 createNewObjects·p0.999:  234356.736 us/op
                 createNewObjects·p0.9999: 234356.736 us/op
                 createNewObjects·p1.00:   234356.736 us/op

Iteration  11: 213195.580 ±(99.9%) 3660.651 us/op
                 createNewObjects·p0.00:   204996.608 us/op
                 createNewObjects·p0.50:   210763.776 us/op
                 createNewObjects·p0.90:   226020.557 us/op
                 createNewObjects·p0.95:   232574.157 us/op
                 createNewObjects·p0.99:   234094.592 us/op
                 createNewObjects·p0.999:  234094.592 us/op
                 createNewObjects·p0.9999: 234094.592 us/op
                 createNewObjects·p1.00:   234094.592 us/op

Iteration  12: 213770.066 ±(99.9%) 3450.258 us/op
                 createNewObjects·p0.00:   204734.464 us/op
                 createNewObjects·p0.50:   212598.784 us/op
                 createNewObjects·p0.90:   220567.962 us/op
                 createNewObjects·p0.95:   232049.869 us/op
                 createNewObjects·p0.99:   238026.752 us/op
                 createNewObjects·p0.999:  238026.752 us/op
                 createNewObjects·p0.9999: 238026.752 us/op
                 createNewObjects·p1.00:   238026.752 us/op

Iteration  13: 211446.443 ±(99.9%) 2189.374 us/op
                 createNewObjects·p0.00:   204210.176 us/op
                 createNewObjects·p0.50:   210763.776 us/op
                 createNewObjects·p0.90:   216557.158 us/op
                 createNewObjects·p0.95:   221066.035 us/op
                 createNewObjects·p0.99:   222035.968 us/op
                 createNewObjects·p0.999:  222035.968 us/op
                 createNewObjects·p0.9999: 222035.968 us/op
                 createNewObjects·p1.00:   222035.968 us/op

Iteration  14: 211544.747 ±(99.9%) 2202.660 us/op
                 createNewObjects·p0.00:   205258.752 us/op
                 createNewObjects·p0.50:   210370.560 us/op
                 createNewObjects·p0.90:   219152.384 us/op
                 createNewObjects·p0.95:   220607.283 us/op
                 createNewObjects·p0.99:   221249.536 us/op
                 createNewObjects·p0.999:  221249.536 us/op
                 createNewObjects·p0.9999: 221249.536 us/op
                 createNewObjects·p1.00:   221249.536 us/op

Iteration  15: 212676.869 ±(99.9%) 2388.375 us/op
                 createNewObjects·p0.00:   205258.752 us/op
                 createNewObjects·p0.50:   211025.920 us/op
                 createNewObjects·p0.90:   220200.960 us/op
                 createNewObjects·p0.95:   222612.685 us/op
                 createNewObjects·p0.99:   224395.264 us/op
                 createNewObjects·p0.999:  224395.264 us/op
                 createNewObjects·p0.9999: 224395.264 us/op
                 createNewObjects·p1.00:   224395.264 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 714
  mean = 212154.902 ±(99.9%) 690.450 us/op

  Histogram, us/op:
    [200000.000, 202500.000) = 0 
    [202500.000, 205000.000) = 19 
    [205000.000, 207500.000) = 97 
    [207500.000, 210000.000) = 207 
    [210000.000, 212500.000) = 127 
    [212500.000, 215000.000) = 96 
    [215000.000, 217500.000) = 63 
    [217500.000, 220000.000) = 40 
    [220000.000, 222500.000) = 24 
    [222500.000, 225000.000) = 13 
    [225000.000, 227500.000) = 15 
    [227500.000, 230000.000) = 4 
    [230000.000, 232500.000) = 1 
    [232500.000, 235000.000) = 4 
    [235000.000, 237500.000) = 3 

  Percentiles, us/op:
      p(0.0000) = 203948.032 us/op
     p(50.0000) = 210763.776 us/op
     p(90.0000) = 219414.528 us/op
     p(95.0000) = 223346.688 us/op
     p(99.0000) = 233229.517 us/op
     p(99.9000) = 238026.752 us/op
     p(99.9900) = 238026.752 us/op
     p(99.9990) = 238026.752 us/op
     p(99.9999) = 238026.752 us/op
    p(100.0000) = 238026.752 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 69.56% complete, ETA 02:35:19
# Fork: 1 of 1
# Warmup Iteration   1: 212429.483 ±(99.9%) 2574.380 us/op
# Warmup Iteration   2: 213156.537 ±(99.9%) 3309.527 us/op
# Warmup Iteration   3: 162892.899 ±(99.9%) 7093.711 us/op
# Warmup Iteration   4: 158228.480 ±(99.9%) 2424.859 us/op
# Warmup Iteration   5: 157835.264 ±(99.9%) 2308.686 us/op
Iteration   1: 159391.874 ±(99.9%) 2741.257 us/op
                 createNewObjects·p0.00:   150732.800 us/op
                 createNewObjects·p0.50:   158072.832 us/op
                 createNewObjects·p0.90:   169397.453 us/op
                 createNewObjects·p0.95:   172438.323 us/op
                 createNewObjects·p0.99:   179044.352 us/op
                 createNewObjects·p0.999:  179044.352 us/op
                 createNewObjects·p0.9999: 179044.352 us/op
                 createNewObjects·p1.00:   179044.352 us/op

Iteration   2: 158162.944 ±(99.9%) 3021.867 us/op
                 createNewObjects·p0.00:   150994.944 us/op
                 createNewObjects·p0.50:   155451.392 us/op
                 createNewObjects·p0.90:   169213.952 us/op
                 createNewObjects·p0.95:   172294.144 us/op
                 createNewObjects·p0.99:   179830.784 us/op
                 createNewObjects·p0.999:  179830.784 us/op
                 createNewObjects·p0.9999: 179830.784 us/op
                 createNewObjects·p1.00:   179830.784 us/op

Iteration   3: 161210.238 ±(99.9%) 6597.759 us/op
                 createNewObjects·p0.00:   151257.088 us/op
                 createNewObjects·p0.50:   155451.392 us/op
                 createNewObjects·p0.90:   181927.936 us/op
                 createNewObjects·p0.95:   207303.475 us/op
                 createNewObjects·p0.99:   212598.784 us/op
                 createNewObjects·p0.999:  212598.784 us/op
                 createNewObjects·p0.9999: 212598.784 us/op
                 createNewObjects·p1.00:   212598.784 us/op

Iteration   4: 211757.739 ±(99.9%) 2838.048 us/op
                 createNewObjects·p0.00:   202899.456 us/op
                 createNewObjects·p0.50:   210501.632 us/op
                 createNewObjects·p0.90:   220567.962 us/op
                 createNewObjects·p0.95:   222756.864 us/op
                 createNewObjects·p0.99:   229638.144 us/op
                 createNewObjects·p0.999:  229638.144 us/op
                 createNewObjects·p0.9999: 229638.144 us/op
                 createNewObjects·p1.00:   229638.144 us/op

Iteration   5: 211468.288 ±(99.9%) 2845.074 us/op
                 createNewObjects·p0.00:   203161.600 us/op
                 createNewObjects·p0.50:   209453.056 us/op
                 createNewObjects·p0.90:   217474.662 us/op
                 createNewObjects·p0.95:   224985.088 us/op
                 createNewObjects·p0.99:   230686.720 us/op
                 createNewObjects·p0.999:  230686.720 us/op
                 createNewObjects·p0.9999: 230686.720 us/op
                 createNewObjects·p1.00:   230686.720 us/op

Iteration   6: 212620.629 ±(99.9%) 2661.861 us/op
                 createNewObjects·p0.00:   205520.896 us/op
                 createNewObjects·p0.50:   211419.136 us/op
                 createNewObjects·p0.90:   220043.674 us/op
                 createNewObjects·p0.95:   224382.157 us/op
                 createNewObjects·p0.99:   230162.432 us/op
                 createNewObjects·p0.999:  230162.432 us/op
                 createNewObjects·p0.9999: 230162.432 us/op
                 createNewObjects·p1.00:   230162.432 us/op

Iteration   7: 212749.377 ±(99.9%) 2635.662 us/op
                 createNewObjects·p0.00:   206831.616 us/op
                 createNewObjects·p0.50:   210763.776 us/op
                 createNewObjects·p0.90:   222088.397 us/op
                 createNewObjects·p0.95:   225181.696 us/op
                 createNewObjects·p0.99:   225705.984 us/op
                 createNewObjects·p0.999:  225705.984 us/op
                 createNewObjects·p0.9999: 225705.984 us/op
                 createNewObjects·p1.00:   225705.984 us/op

Iteration   8: 211430.059 ±(99.9%) 2383.565 us/op
                 createNewObjects·p0.00:   203685.888 us/op
                 createNewObjects·p0.50:   211025.920 us/op
                 createNewObjects·p0.90:   218890.240 us/op
                 createNewObjects·p0.95:   220109.210 us/op
                 createNewObjects·p0.99:   220725.248 us/op
                 createNewObjects·p0.999:  220725.248 us/op
                 createNewObjects·p0.9999: 220725.248 us/op
                 createNewObjects·p1.00:   220725.248 us/op

Iteration   9: 212721.490 ±(99.9%) 2070.038 us/op
                 createNewObjects·p0.00:   207093.760 us/op
                 createNewObjects·p0.50:   212598.784 us/op
                 createNewObjects·p0.90:   218261.094 us/op
                 createNewObjects·p0.95:   220148.531 us/op
                 createNewObjects·p0.99:   226754.560 us/op
                 createNewObjects·p0.999:  226754.560 us/op
                 createNewObjects·p0.9999: 226754.560 us/op
                 createNewObjects·p1.00:   226754.560 us/op

Iteration  10: 211495.595 ±(99.9%) 2444.808 us/op
                 createNewObjects·p0.00:   204996.608 us/op
                 createNewObjects·p0.50:   210501.632 us/op
                 createNewObjects·p0.90:   218968.883 us/op
                 createNewObjects·p0.95:   221393.715 us/op
                 createNewObjects·p0.99:   227278.848 us/op
                 createNewObjects·p0.999:  227278.848 us/op
                 createNewObjects·p0.9999: 227278.848 us/op
                 createNewObjects·p1.00:   227278.848 us/op

Iteration  11: 212129.109 ±(99.9%) 2688.531 us/op
                 createNewObjects·p0.00:   201588.736 us/op
                 createNewObjects·p0.50:   210239.488 us/op
                 createNewObjects·p0.90:   218732.954 us/op
                 createNewObjects·p0.95:   222075.290 us/op
                 createNewObjects·p0.99:   233046.016 us/op
                 createNewObjects·p0.999:  233046.016 us/op
                 createNewObjects·p0.9999: 233046.016 us/op
                 createNewObjects·p1.00:   233046.016 us/op

Iteration  12: 211757.739 ±(99.9%) 2452.471 us/op
                 createNewObjects·p0.00:   203423.744 us/op
                 createNewObjects·p0.50:   210763.776 us/op
                 createNewObjects·p0.90:   219860.173 us/op
                 createNewObjects·p0.95:   222612.685 us/op
                 createNewObjects·p0.99:   224133.120 us/op
                 createNewObjects·p0.999:  224133.120 us/op
                 createNewObjects·p0.9999: 224133.120 us/op
                 createNewObjects·p1.00:   224133.120 us/op

Iteration  13: 211430.059 ±(99.9%) 3071.965 us/op
                 createNewObjects·p0.00:   202113.024 us/op
                 createNewObjects·p0.50:   209977.344 us/op
                 createNewObjects·p0.90:   222822.400 us/op
                 createNewObjects·p0.95:   224185.549 us/op
                 createNewObjects·p0.99:   226230.272 us/op
                 createNewObjects·p0.999:  226230.272 us/op
                 createNewObjects·p0.9999: 226230.272 us/op
                 createNewObjects·p1.00:   226230.272 us/op

Iteration  14: 212030.805 ±(99.9%) 3181.348 us/op
                 createNewObjects·p0.00:   205258.752 us/op
                 createNewObjects·p0.50:   210108.416 us/op
                 createNewObjects·p0.90:   218287.309 us/op
                 createNewObjects·p0.95:   227999.744 us/op
                 createNewObjects·p0.99:   238813.184 us/op
                 createNewObjects·p0.999:  238813.184 us/op
                 createNewObjects·p0.9999: 238813.184 us/op
                 createNewObjects·p1.00:   238813.184 us/op

Iteration  15: 212172.800 ±(99.9%) 3278.967 us/op
                 createNewObjects·p0.00:   204734.464 us/op
                 createNewObjects·p0.50:   210108.416 us/op
                 createNewObjects·p0.90:   222822.400 us/op
                 createNewObjects·p0.95:   227265.741 us/op
                 createNewObjects·p0.99:   229113.856 us/op
                 createNewObjects·p0.999:  229113.856 us/op
                 createNewObjects·p0.9999: 229113.856 us/op
                 createNewObjects·p1.00:   229113.856 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 764
  mean = 198947.052 ±(99.9%) 2832.050 us/op

  Histogram, us/op:
    [150000.000, 155000.000) = 81 
    [155000.000, 160000.000) = 47 
    [160000.000, 165000.000) = 31 
    [165000.000, 170000.000) = 14 
    [170000.000, 175000.000) = 7 
    [175000.000, 180000.000) = 3 
    [180000.000, 185000.000) = 2 
    [185000.000, 190000.000) = 0 
    [190000.000, 195000.000) = 0 
    [195000.000, 200000.000) = 0 
    [200000.000, 205000.000) = 18 
    [205000.000, 210000.000) = 248 
    [210000.000, 215000.000) = 184 
    [215000.000, 220000.000) = 79 
    [220000.000, 225000.000) = 32 
    [225000.000, 230000.000) = 14 
    [230000.000, 235000.000) = 3 

  Percentiles, us/op:
      p(0.0000) = 150732.800 us/op
     p(50.0000) = 208928.768 us/op
     p(90.0000) = 217841.664 us/op
     p(95.0000) = 221446.144 us/op
     p(99.0000) = 228419.174 us/op
     p(99.9000) = 238813.184 us/op
     p(99.9900) = 238813.184 us/op
     p(99.9990) = 238813.184 us/op
     p(99.9999) = 238813.184 us/op
    p(100.0000) = 238813.184 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 70.29% complete, ETA 02:31:35
# Fork: 1 of 1
# Warmup Iteration   1: 209218.219 ±(99.9%) 3981.155 us/op
# Warmup Iteration   2: 209289.216 ±(99.9%) 2890.281 us/op
# Warmup Iteration   3: 209835.349 ±(99.9%) 4043.418 us/op
# Warmup Iteration   4: 207409.403 ±(99.9%) 2113.135 us/op
# Warmup Iteration   5: 209556.821 ±(99.9%) 2378.330 us/op
Iteration   1: 209764.352 ±(99.9%) 3086.552 us/op
                 createNewObjects·p0.00:   201850.880 us/op
                 createNewObjects·p0.50:   208404.480 us/op
                 createNewObjects·p0.90:   218470.810 us/op
                 createNewObjects·p0.95:   223569.510 us/op
                 createNewObjects·p0.99:   230686.720 us/op
                 createNewObjects·p0.999:  230686.720 us/op
                 createNewObjects·p0.9999: 230686.720 us/op
                 createNewObjects·p1.00:   230686.720 us/op

Iteration   2: 209453.056 ±(99.9%) 2864.900 us/op
                 createNewObjects·p0.00:   200802.304 us/op
                 createNewObjects·p0.50:   208273.408 us/op
                 createNewObjects·p0.90:   218156.237 us/op
                 createNewObjects·p0.95:   222180.147 us/op
                 createNewObjects·p0.99:   222822.400 us/op
                 createNewObjects·p0.999:  222822.400 us/op
                 createNewObjects·p0.9999: 222822.400 us/op
                 createNewObjects·p1.00:   222822.400 us/op

Iteration   3: 208579.243 ±(99.9%) 3125.056 us/op
                 createNewObjects·p0.00:   200802.304 us/op
                 createNewObjects·p0.50:   207093.760 us/op
                 createNewObjects·p0.90:   216111.514 us/op
                 createNewObjects·p0.95:   221734.502 us/op
                 createNewObjects·p0.99:   230162.432 us/op
                 createNewObjects·p0.999:  230162.432 us/op
                 createNewObjects·p0.9999: 230162.432 us/op
                 createNewObjects·p1.00:   230162.432 us/op

Iteration   4: 210037.419 ±(99.9%) 3627.947 us/op
                 createNewObjects·p0.00:   201326.592 us/op
                 createNewObjects·p0.50:   207880.192 us/op
                 createNewObjects·p0.90:   220751.462 us/op
                 createNewObjects·p0.95:   228366.746 us/op
                 createNewObjects·p0.99:   230424.576 us/op
                 createNewObjects·p0.999:  230424.576 us/op
                 createNewObjects·p0.9999: 230424.576 us/op
                 createNewObjects·p1.00:   230424.576 us/op

Iteration   5: 208356.331 ±(99.9%) 3544.947 us/op
                 createNewObjects·p0.00:   201326.592 us/op
                 createNewObjects·p0.50:   205783.040 us/op
                 createNewObjects·p0.90:   221249.536 us/op
                 createNewObjects·p0.95:   225443.840 us/op
                 createNewObjects·p0.99:   232521.728 us/op
                 createNewObjects·p0.999:  232521.728 us/op
                 createNewObjects·p0.9999: 232521.728 us/op
                 createNewObjects·p1.00:   232521.728 us/op

Iteration   6: 208857.771 ±(99.9%) 2925.269 us/op
                 createNewObjects·p0.00:   200802.304 us/op
                 createNewObjects·p0.50:   208535.552 us/op
                 createNewObjects·p0.90:   217186.304 us/op
                 createNewObjects·p0.95:   220869.427 us/op
                 createNewObjects·p0.99:   224657.408 us/op
                 createNewObjects·p0.999:  224657.408 us/op
                 createNewObjects·p0.9999: 224657.408 us/op
                 createNewObjects·p1.00:   224657.408 us/op

Iteration   7: 208934.229 ±(99.9%) 2997.342 us/op
                 createNewObjects·p0.00:   201588.736 us/op
                 createNewObjects·p0.50:   207093.760 us/op
                 createNewObjects·p0.90:   219519.386 us/op
                 createNewObjects·p0.95:   222809.293 us/op
                 createNewObjects·p0.99:   224395.264 us/op
                 createNewObjects·p0.999:  224395.264 us/op
                 createNewObjects·p0.9999: 224395.264 us/op
                 createNewObjects·p1.00:   224395.264 us/op

Iteration   8: 209518.592 ±(99.9%) 4014.689 us/op
                 createNewObjects·p0.00:   201588.736 us/op
                 createNewObjects·p0.50:   206831.616 us/op
                 createNewObjects·p0.90:   219414.528 us/op
                 createNewObjects·p0.95:   226138.522 us/op
                 createNewObjects·p0.99:   244056.064 us/op
                 createNewObjects·p0.999:  244056.064 us/op
                 createNewObjects·p0.9999: 244056.064 us/op
                 createNewObjects·p1.00:   244056.064 us/op

Iteration   9: 207623.398 ±(99.9%) 2168.385 us/op
                 createNewObjects·p0.00:   202375.168 us/op
                 createNewObjects·p0.50:   206569.472 us/op
                 createNewObjects·p0.90:   214695.936 us/op
                 createNewObjects·p0.95:   217055.232 us/op
                 createNewObjects·p0.99:   221249.536 us/op
                 createNewObjects·p0.999:  221249.536 us/op
                 createNewObjects·p0.9999: 221249.536 us/op
                 createNewObjects·p1.00:   221249.536 us/op

Iteration  10: 210518.016 ±(99.9%) 3620.094 us/op
                 createNewObjects·p0.00:   198705.152 us/op
                 createNewObjects·p0.50:   209453.056 us/op
                 createNewObjects·p0.90:   219073.741 us/op
                 createNewObjects·p0.95:   226387.558 us/op
                 createNewObjects·p0.99:   239337.472 us/op
                 createNewObjects·p0.999:  239337.472 us/op
                 createNewObjects·p0.9999: 239337.472 us/op
                 createNewObjects·p1.00:   239337.472 us/op

Iteration  11: 208254.683 ±(99.9%) 2019.684 us/op
                 createNewObjects·p0.00:   202899.456 us/op
                 createNewObjects·p0.50:   207355.904 us/op
                 createNewObjects·p0.90:   214433.792 us/op
                 createNewObjects·p0.95:   216793.088 us/op
                 createNewObjects·p0.99:   218103.808 us/op
                 createNewObjects·p0.999:  218103.808 us/op
                 createNewObjects·p0.9999: 218103.808 us/op
                 createNewObjects·p1.00:   218103.808 us/op

Iteration  12: 209758.891 ±(99.9%) 2749.037 us/op
                 createNewObjects·p0.00:   202113.024 us/op
                 createNewObjects·p0.50:   209977.344 us/op
                 createNewObjects·p0.90:   217972.736 us/op
                 createNewObjects·p0.95:   220279.603 us/op
                 createNewObjects·p0.99:   224657.408 us/op
                 createNewObjects·p0.999:  224657.408 us/op
                 createNewObjects·p0.9999: 224657.408 us/op
                 createNewObjects·p1.00:   224657.408 us/op

Iteration  13: 208404.480 ±(99.9%) 2338.433 us/op
                 createNewObjects·p0.00:   202375.168 us/op
                 createNewObjects·p0.50:   206962.688 us/op
                 createNewObjects·p0.90:   214145.434 us/op
                 createNewObjects·p0.95:   217946.522 us/op
                 createNewObjects·p0.99:   223084.544 us/op
                 createNewObjects·p0.999:  223084.544 us/op
                 createNewObjects·p0.9999: 223084.544 us/op
                 createNewObjects·p1.00:   223084.544 us/op

Iteration  14: 208683.008 ±(99.9%) 2268.777 us/op
                 createNewObjects·p0.00:   201850.880 us/op
                 createNewObjects·p0.50:   208666.624 us/op
                 createNewObjects·p0.90:   215482.368 us/op
                 createNewObjects·p0.95:   216924.160 us/op
                 createNewObjects·p0.99:   218628.096 us/op
                 createNewObjects·p0.999:  218628.096 us/op
                 createNewObjects·p0.9999: 218628.096 us/op
                 createNewObjects·p1.00:   218628.096 us/op

Iteration  15: 207559.199 ±(99.9%) 2538.096 us/op
                 createNewObjects·p0.00:   201850.880 us/op
                 createNewObjects·p0.50:   206045.184 us/op
                 createNewObjects·p0.90:   215744.512 us/op
                 createNewObjects·p0.95:   220200.960 us/op
                 createNewObjects·p0.99:   223084.544 us/op
                 createNewObjects·p0.999:  223084.544 us/op
                 createNewObjects·p0.9999: 223084.544 us/op
                 createNewObjects·p1.00:   223084.544 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 724
  mean = 208947.958 ±(99.9%) 724.523 us/op

  Histogram, us/op:
    [190000.000, 195000.000) = 0 
    [195000.000, 200000.000) = 1 
    [200000.000, 205000.000) = 224 
    [205000.000, 210000.000) = 252 
    [210000.000, 215000.000) = 150 
    [215000.000, 220000.000) = 57 
    [220000.000, 225000.000) = 28 
    [225000.000, 230000.000) = 5 
    [230000.000, 235000.000) = 5 
    [235000.000, 240000.000) = 1 
    [240000.000, 245000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 198705.152 us/op
     p(50.0000) = 207355.904 us/op
     p(90.0000) = 216793.088 us/op
     p(95.0000) = 220725.248 us/op
     p(99.0000) = 230096.896 us/op
     p(99.9000) = 244056.064 us/op
     p(99.9900) = 244056.064 us/op
     p(99.9990) = 244056.064 us/op
     p(99.9999) = 244056.064 us/op
    p(100.0000) = 244056.064 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 71.01% complete, ETA 02:27:51
# Fork: 1 of 1
# Warmup Iteration   1: 2609905.664 ±(99.9%) 2263578.978 us/op
# Warmup Iteration   2: 2531262.464 ±(99.9%) 564422.296 us/op
# Warmup Iteration   3: 2544893.952 ±(99.9%) 357777.095 us/op
# Warmup Iteration   4: 2524971.008 ±(99.9%) 309027.990 us/op
# Warmup Iteration   5: 2512388.096 ±(99.9%) 344971.842 us/op
Iteration   1: 2500853.760 ±(99.9%) 334429.663 us/op
                 fillHeap·p0.00:   2424307.712 us/op
                 fillHeap·p0.50:   2520776.704 us/op
                 fillHeap·p0.90:   2537553.920 us/op
                 fillHeap·p0.95:   2537553.920 us/op
                 fillHeap·p0.99:   2537553.920 us/op
                 fillHeap·p0.999:  2537553.920 us/op
                 fillHeap·p0.9999: 2537553.920 us/op
                 fillHeap·p1.00:   2537553.920 us/op

Iteration   2: 2508193.792 ±(99.9%) 415784.087 us/op
                 fillHeap·p0.00:   2415919.104 us/op
                 fillHeap·p0.50:   2527068.160 us/op
                 fillHeap·p0.90:   2562719.744 us/op
                 fillHeap·p0.95:   2562719.744 us/op
                 fillHeap·p0.99:   2562719.744 us/op
                 fillHeap·p0.999:  2562719.744 us/op
                 fillHeap·p0.9999: 2562719.744 us/op
                 fillHeap·p1.00:   2562719.744 us/op

Iteration   3: 2501482.906 ±(99.9%) 276362.302 us/op
                 fillHeap·p0.00:   2373976.064 us/op
                 fillHeap·p0.50:   2524971.008 us/op
                 fillHeap·p0.90:   2541748.224 us/op
                 fillHeap·p0.95:   2541748.224 us/op
                 fillHeap·p0.99:   2541748.224 us/op
                 fillHeap·p0.999:  2541748.224 us/op
                 fillHeap·p0.9999: 2541748.224 us/op
                 fillHeap·p1.00:   2541748.224 us/op

Iteration   4: 2509242.368 ±(99.9%) 385452.091 us/op
                 fillHeap·p0.00:   2420113.408 us/op
                 fillHeap·p0.50:   2535456.768 us/op
                 fillHeap·p0.90:   2545942.528 us/op
                 fillHeap·p0.95:   2545942.528 us/op
                 fillHeap·p0.99:   2545942.528 us/op
                 fillHeap·p0.999:  2545942.528 us/op
                 fillHeap·p0.9999: 2545942.528 us/op
                 fillHeap·p1.00:   2545942.528 us/op

Iteration   5: 2485544.550 ±(99.9%) 160129.012 us/op
                 fillHeap·p0.00:   2411724.800 us/op
                 fillHeap·p0.50:   2499805.184 us/op
                 fillHeap·p0.90:   2512388.096 us/op
                 fillHeap·p0.95:   2512388.096 us/op
                 fillHeap·p0.99:   2512388.096 us/op
                 fillHeap·p0.999:  2512388.096 us/op
                 fillHeap·p0.9999: 2512388.096 us/op
                 fillHeap·p1.00:   2512388.096 us/op

Iteration   6: 2494772.019 ±(99.9%) 271553.978 us/op
                 fillHeap·p0.00:   2369781.760 us/op
                 fillHeap·p0.50:   2520776.704 us/op
                 fillHeap·p0.90:   2541748.224 us/op
                 fillHeap·p0.95:   2541748.224 us/op
                 fillHeap·p0.99:   2541748.224 us/op
                 fillHeap·p0.999:  2541748.224 us/op
                 fillHeap·p0.9999: 2541748.224 us/op
                 fillHeap·p1.00:   2541748.224 us/op

Iteration   7: 2505048.064 ±(99.9%) 509169.317 us/op
                 fillHeap·p0.00:   2390753.280 us/op
                 fillHeap·p0.50:   2529165.312 us/op
                 fillHeap·p0.90:   2571108.352 us/op
                 fillHeap·p0.95:   2571108.352 us/op
                 fillHeap·p0.99:   2571108.352 us/op
                 fillHeap·p0.999:  2571108.352 us/op
                 fillHeap·p0.9999: 2571108.352 us/op
                 fillHeap·p1.00:   2571108.352 us/op

Iteration   8: 2507145.216 ±(99.9%) 395485.868 us/op
                 fillHeap·p0.00:   2415919.104 us/op
                 fillHeap·p0.50:   2533359.616 us/op
                 fillHeap·p0.90:   2545942.528 us/op
                 fillHeap·p0.95:   2545942.528 us/op
                 fillHeap·p0.99:   2545942.528 us/op
                 fillHeap·p0.999:  2545942.528 us/op
                 fillHeap·p0.9999: 2545942.528 us/op
                 fillHeap·p1.00:   2545942.528 us/op

Iteration   9: 2500644.045 ±(99.9%) 172971.668 us/op
                 fillHeap·p0.00:   2424307.712 us/op
                 fillHeap·p0.50:   2512388.096 us/op
                 fillHeap·p0.90:   2541748.224 us/op
                 fillHeap·p0.95:   2541748.224 us/op
                 fillHeap·p0.99:   2541748.224 us/op
                 fillHeap·p0.999:  2541748.224 us/op
                 fillHeap·p0.9999: 2541748.224 us/op
                 fillHeap·p1.00:   2541748.224 us/op

Iteration  10: 2504838.349 ±(99.9%) 295475.259 us/op
                 fillHeap·p0.00:   2369781.760 us/op
                 fillHeap·p0.50:   2533359.616 us/op
                 fillHeap·p0.90:   2558525.440 us/op
                 fillHeap·p0.95:   2558525.440 us/op
                 fillHeap·p0.99:   2558525.440 us/op
                 fillHeap·p0.999:  2558525.440 us/op
                 fillHeap·p0.9999: 2558525.440 us/op
                 fillHeap·p1.00:   2558525.440 us/op

Iteration  11: 2506096.640 ±(99.9%) 366649.997 us/op
                 fillHeap·p0.00:   2424307.712 us/op
                 fillHeap·p0.50:   2524971.008 us/op
                 fillHeap·p0.90:   2550136.832 us/op
                 fillHeap·p0.95:   2550136.832 us/op
                 fillHeap·p0.99:   2550136.832 us/op
                 fillHeap·p0.999:  2550136.832 us/op
                 fillHeap·p0.9999: 2550136.832 us/op
                 fillHeap·p1.00:   2550136.832 us/op

Iteration  12: 2475478.221 ±(99.9%) 260273.073 us/op
                 fillHeap·p0.00:   2361393.152 us/op
                 fillHeap·p0.50:   2503999.488 us/op
                 fillHeap·p0.90:   2533359.616 us/op
                 fillHeap·p0.95:   2533359.616 us/op
                 fillHeap·p0.99:   2533359.616 us/op
                 fillHeap·p0.999:  2533359.616 us/op
                 fillHeap·p0.9999: 2533359.616 us/op
                 fillHeap·p1.00:   2533359.616 us/op

Iteration  13: 2484705.690 ±(99.9%) 260072.555 us/op
                 fillHeap·p0.00:   2369781.760 us/op
                 fillHeap·p0.50:   2516582.400 us/op
                 fillHeap·p0.90:   2533359.616 us/op
                 fillHeap·p0.95:   2533359.616 us/op
                 fillHeap·p0.99:   2533359.616 us/op
                 fillHeap·p0.999:  2533359.616 us/op
                 fillHeap·p0.9999: 2533359.616 us/op
                 fillHeap·p1.00:   2533359.616 us/op

Iteration  14: 2479672.525 ±(99.9%) 251091.257 us/op
                 fillHeap·p0.00:   2365587.456 us/op
                 fillHeap·p0.50:   2508193.792 us/op
                 fillHeap·p0.90:   2524971.008 us/op
                 fillHeap·p0.95:   2524971.008 us/op
                 fillHeap·p0.99:   2524971.008 us/op
                 fillHeap·p0.999:  2524971.008 us/op
                 fillHeap·p0.9999: 2524971.008 us/op
                 fillHeap·p1.00:   2524971.008 us/op

Iteration  15: 2476317.082 ±(99.9%) 236154.984 us/op
                 fillHeap·p0.00:   2369781.760 us/op
                 fillHeap·p0.50:   2495610.880 us/op
                 fillHeap·p0.90:   2520776.704 us/op
                 fillHeap·p0.95:   2520776.704 us/op
                 fillHeap·p0.99:   2520776.704 us/op
                 fillHeap·p0.999:  2520776.704 us/op
                 fillHeap·p0.9999: 2520776.704 us/op
                 fillHeap·p1.00:   2520776.704 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 69
  mean = 2495124.584 ±(99.9%) 23978.502 us/op

  Histogram, us/op:
    [2300000.000, 2325000.000) = 0 
    [2325000.000, 2350000.000) = 0 
    [2350000.000, 2375000.000) = 7 
    [2375000.000, 2400000.000) = 1 
    [2400000.000, 2425000.000) = 7 
    [2425000.000, 2450000.000) = 0 
    [2450000.000, 2475000.000) = 1 
    [2475000.000, 2500000.000) = 6 
    [2500000.000, 2525000.000) = 25 
    [2525000.000, 2550000.000) = 18 
    [2550000.000, 2575000.000) = 4 

  Percentiles, us/op:
      p(0.0000) = 2361393.152 us/op
     p(50.0000) = 2516582.400 us/op
     p(90.0000) = 2541748.224 us/op
     p(95.0000) = 2554331.136 us/op
     p(99.0000) = 2571108.352 us/op
     p(99.9000) = 2571108.352 us/op
     p(99.9900) = 2571108.352 us/op
     p(99.9990) = 2571108.352 us/op
     p(99.9999) = 2571108.352 us/op
    p(100.0000) = 2571108.352 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 71.74% complete, ETA 02:24:16
# Fork: 1 of 1
# Warmup Iteration   1: 1110756.557 ±(99.9%) 196386.493 us/op
# Warmup Iteration   2: 1007014.260 ±(99.9%) 198621.117 us/op
# Warmup Iteration   3: 1007109.585 ±(99.9%) 202390.812 us/op
# Warmup Iteration   4: 1016165.469 ±(99.9%) 202629.757 us/op
# Warmup Iteration   5: 1009397.388 ±(99.9%) 205023.281 us/op
Iteration   1: 1014163.642 ±(99.9%) 202171.918 us/op
                 fillHeap·p0.00:   806354.944 us/op
                 fillHeap·p0.50:   1041235.968 us/op
                 fillHeap·p0.90:   1191601.766 us/op
                 fillHeap·p0.95:   1193279.488 us/op
                 fillHeap·p0.99:   1193279.488 us/op
                 fillHeap·p0.999:  1193279.488 us/op
                 fillHeap·p0.9999: 1193279.488 us/op
                 fillHeap·p1.00:   1193279.488 us/op

Iteration   2: 1012257.140 ±(99.9%) 207768.274 us/op
                 fillHeap·p0.00:   804257.792 us/op
                 fillHeap·p0.50:   1040187.392 us/op
                 fillHeap·p0.90:   1192440.627 us/op
                 fillHeap·p0.95:   1193279.488 us/op
                 fillHeap·p0.99:   1193279.488 us/op
                 fillHeap·p0.999:  1193279.488 us/op
                 fillHeap·p0.9999: 1193279.488 us/op
                 fillHeap·p1.00:   1193279.488 us/op

Iteration   3: 1016356.119 ±(99.9%) 202742.475 us/op
                 fillHeap·p0.00:   795869.184 us/op
                 fillHeap·p0.50:   1041235.968 us/op
                 fillHeap·p0.90:   1205442.970 us/op
                 fillHeap·p0.95:   1207959.552 us/op
                 fillHeap·p0.99:   1207959.552 us/op
                 fillHeap·p0.999:  1207959.552 us/op
                 fillHeap·p0.9999: 1207959.552 us/op
                 fillHeap·p1.00:   1207959.552 us/op

Iteration   4: 1000436.829 ±(99.9%) 209052.008 us/op
                 fillHeap·p0.00:   792723.456 us/op
                 fillHeap·p0.50:   1010827.264 us/op
                 fillHeap·p0.90:   1204184.678 us/op
                 fillHeap·p0.95:   1205862.400 us/op
                 fillHeap·p0.99:   1205862.400 us/op
                 fillHeap·p0.999:  1205862.400 us/op
                 fillHeap·p0.9999: 1205862.400 us/op
                 fillHeap·p1.00:   1205862.400 us/op

Iteration   5: 1015974.819 ±(99.9%) 229963.669 us/op
                 fillHeap·p0.00:   796917.760 us/op
                 fillHeap·p0.50:   1047527.424 us/op
                 fillHeap·p0.90:   1238158.541 us/op
                 fillHeap·p0.95:   1239416.832 us/op
                 fillHeap·p0.99:   1239416.832 us/op
                 fillHeap·p0.999:  1239416.832 us/op
                 fillHeap·p0.9999: 1239416.832 us/op
                 fillHeap·p1.00:   1239416.832 us/op

Iteration   6: 1016260.794 ±(99.9%) 228813.423 us/op
                 fillHeap·p0.00:   796917.760 us/op
                 fillHeap·p0.50:   1015021.568 us/op
                 fillHeap·p0.90:   1230189.363 us/op
                 fillHeap·p0.95:   1231028.224 us/op
                 fillHeap·p0.99:   1231028.224 us/op
                 fillHeap·p0.999:  1231028.224 us/op
                 fillHeap·p0.9999: 1231028.224 us/op
                 fillHeap·p1.00:   1231028.224 us/op

Iteration   7: 1012447.791 ±(99.9%) 227073.889 us/op
                 fillHeap·p0.00:   796917.760 us/op
                 fillHeap·p0.50:   1024458.752 us/op
                 fillHeap·p0.90:   1242772.275 us/op
                 fillHeap·p0.95:   1245708.288 us/op
                 fillHeap·p0.99:   1245708.288 us/op
                 fillHeap·p0.999:  1245708.288 us/op
                 fillHeap·p0.9999: 1245708.288 us/op
                 fillHeap·p1.00:   1245708.288 us/op

Iteration   8: 1017785.996 ±(99.9%) 221595.344 us/op
                 fillHeap·p0.00:   808452.096 us/op
                 fillHeap·p0.50:   999292.928 us/op
                 fillHeap·p0.90:   1246127.718 us/op
                 fillHeap·p0.95:   1254096.896 us/op
                 fillHeap·p0.99:   1254096.896 us/op
                 fillHeap·p0.999:  1254096.896 us/op
                 fillHeap·p0.9999: 1254096.896 us/op
                 fillHeap·p1.00:   1254096.896 us/op

Iteration   9: 1022456.925 ±(99.9%) 231005.671 us/op
                 fillHeap·p0.00:   807403.520 us/op
                 fillHeap·p0.50:   1006632.960 us/op
                 fillHeap·p0.90:   1268357.530 us/op
                 fillHeap·p0.95:   1277165.568 us/op
                 fillHeap·p0.99:   1277165.568 us/op
                 fillHeap·p0.999:  1277165.568 us/op
                 fillHeap·p0.9999: 1277165.568 us/op
                 fillHeap·p1.00:   1277165.568 us/op

Iteration  10: 1019215.872 ±(99.9%) 223209.217 us/op
                 fillHeap·p0.00:   802160.640 us/op
                 fillHeap·p0.50:   1023410.176 us/op
                 fillHeap·p0.90:   1241933.414 us/op
                 fillHeap·p0.95:   1245708.288 us/op
                 fillHeap·p0.99:   1245708.288 us/op
                 fillHeap·p0.999:  1245708.288 us/op
                 fillHeap·p0.9999: 1245708.288 us/op
                 fillHeap·p1.00:   1245708.288 us/op

Iteration  11: 999712.358 ±(99.9%) 233226.393 us/op
                 fillHeap·p0.00:   815792.128 us/op
                 fillHeap·p0.50:   1020264.448 us/op
                 fillHeap·p0.90:   1236900.250 us/op
                 fillHeap·p0.95:   1237319.680 us/op
                 fillHeap·p0.99:   1237319.680 us/op
                 fillHeap·p0.999:  1237319.680 us/op
                 fillHeap·p0.9999: 1237319.680 us/op
                 fillHeap·p1.00:   1237319.680 us/op

Iteration  12: 1019597.172 ±(99.9%) 220749.084 us/op
                 fillHeap·p0.00:   800063.488 us/op
                 fillHeap·p0.50:   1052770.304 us/op
                 fillHeap·p0.90:   1225575.629 us/op
                 fillHeap·p0.95:   1226833.920 us/op
                 fillHeap·p0.99:   1226833.920 us/op
                 fillHeap·p0.999:  1226833.920 us/op
                 fillHeap·p0.9999: 1226833.920 us/op
                 fillHeap·p1.00:   1226833.920 us/op

Iteration  13: 1019597.172 ±(99.9%) 216052.926 us/op
                 fillHeap·p0.00:   802160.640 us/op
                 fillHeap·p0.50:   1021313.024 us/op
                 fillHeap·p0.90:   1226414.490 us/op
                 fillHeap·p0.95:   1228931.072 us/op
                 fillHeap·p0.99:   1228931.072 us/op
                 fillHeap·p0.999:  1228931.072 us/op
                 fillHeap·p0.9999: 1228931.072 us/op
                 fillHeap·p1.00:   1228931.072 us/op

Iteration  14: 1019692.497 ±(99.9%) 217397.939 us/op
                 fillHeap·p0.00:   799014.912 us/op
                 fillHeap·p0.50:   1018167.296 us/op
                 fillHeap·p0.90:   1240255.693 us/op
                 fillHeap·p0.95:   1247805.440 us/op
                 fillHeap·p0.99:   1247805.440 us/op
                 fillHeap·p0.999:  1247805.440 us/op
                 fillHeap·p0.9999: 1247805.440 us/op
                 fillHeap·p1.00:   1247805.440 us/op

Iteration  15: 1003067.802 ±(99.9%) 234822.909 us/op
                 fillHeap·p0.00:   796917.760 us/op
                 fillHeap·p0.50:   1028653.056 us/op
                 fillHeap·p0.90:   1232076.800 us/op
                 fillHeap·p0.95:   1233125.376 us/op
                 fillHeap·p0.99:   1233125.376 us/op
                 fillHeap·p0.999:  1233125.376 us/op
                 fillHeap·p0.9999: 1233125.376 us/op
                 fillHeap·p1.00:   1233125.376 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 163
  mean = 1014088.786 ±(99.9%) 39586.449 us/op

  Histogram, us/op:
    [ 700000.000,  750000.000) = 0 
    [ 750000.000,  800000.000) = 7 
    [ 800000.000,  850000.000) = 19 
    [ 850000.000,  900000.000) = 34 
    [ 900000.000,  950000.000) = 0 
    [ 950000.000, 1000000.000) = 8 
    [1000000.000, 1050000.000) = 24 
    [1050000.000, 1100000.000) = 28 
    [1100000.000, 1150000.000) = 0 
    [1150000.000, 1200000.000) = 12 
    [1200000.000, 1250000.000) = 29 

  Percentiles, us/op:
      p(0.0000) = 792723.456 us/op
     p(50.0000) = 1024458.752 us/op
     p(90.0000) = 1226833.920 us/op
     p(95.0000) = 1233125.376 us/op
     p(99.0000) = 1262401.618 us/op
     p(99.9000) = 1277165.568 us/op
     p(99.9900) = 1277165.568 us/op
     p(99.9990) = 1277165.568 us/op
     p(99.9999) = 1277165.568 us/op
    p(100.0000) = 1277165.568 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 72.46% complete, ETA 02:20:39
# Fork: 1 of 1
# Warmup Iteration   1: 840346.283 ±(99.9%) 127369.772 us/op
# Warmup Iteration   2: 847652.706 ±(99.9%) 159208.623 us/op
# Warmup Iteration   3: 843492.011 ±(99.9%) 175995.390 us/op
# Warmup Iteration   4: 839828.716 ±(99.9%) 127476.329 us/op
# Warmup Iteration   5: 847424.171 ±(99.9%) 164495.889 us/op
Iteration   1: 840695.808 ±(99.9%) 161229.857 us/op
                 fillHeap·p0.00:   734003.200 us/op
                 fillHeap·p0.50:   794820.608 us/op
                 fillHeap·p0.90:   1099746.509 us/op
                 fillHeap·p0.95:   1101004.800 us/op
                 fillHeap·p0.99:   1101004.800 us/op
                 fillHeap·p0.999:  1101004.800 us/op
                 fillHeap·p0.9999: 1101004.800 us/op
                 fillHeap·p1.00:   1101004.800 us/op

Iteration   2: 840232.015 ±(99.9%) 134497.379 us/op
                 fillHeap·p0.00:   716177.408 us/op
                 fillHeap·p0.50:   791674.880 us/op
                 fillHeap·p0.90:   1068708.659 us/op
                 fillHeap·p0.95:   1109393.408 us/op
                 fillHeap·p0.99:   1109393.408 us/op
                 fillHeap·p0.999:  1109393.408 us/op
                 fillHeap·p0.9999: 1109393.408 us/op
                 fillHeap·p1.00:   1109393.408 us/op

Iteration   3: 840957.952 ±(99.9%) 156446.645 us/op
                 fillHeap·p0.00:   718274.560 us/op
                 fillHeap·p0.50:   799014.912 us/op
                 fillHeap·p0.90:   1087792.742 us/op
                 fillHeap·p0.95:   1088421.888 us/op
                 fillHeap·p0.99:   1088421.888 us/op
                 fillHeap·p0.999:  1088421.888 us/op
                 fillHeap·p0.9999: 1088421.888 us/op
                 fillHeap·p1.00:   1088421.888 us/op

Iteration   4: 831359.449 ±(99.9%) 130689.397 us/op
                 fillHeap·p0.00:   708837.376 us/op
                 fillHeap·p0.50:   786432.000 us/op
                 fillHeap·p0.90:   1040606.822 us/op
                 fillHeap·p0.95:   1077936.128 us/op
                 fillHeap·p0.99:   1077936.128 us/op
                 fillHeap·p0.999:  1077936.128 us/op
                 fillHeap·p0.9999: 1077936.128 us/op
                 fillHeap·p1.00:   1077936.128 us/op

Iteration   5: 828455.700 ±(99.9%) 129813.348 us/op
                 fillHeap·p0.00:   732954.624 us/op
                 fillHeap·p0.50:   786432.000 us/op
                 fillHeap·p0.90:   1059061.760 us/op
                 fillHeap·p0.95:   1109393.408 us/op
                 fillHeap·p0.99:   1109393.408 us/op
                 fillHeap·p0.999:  1109393.408 us/op
                 fillHeap·p0.9999: 1109393.408 us/op
                 fillHeap·p1.00:   1109393.408 us/op

Iteration   6: 833792.683 ±(99.9%) 141700.722 us/op
                 fillHeap·p0.00:   720371.712 us/op
                 fillHeap·p0.50:   797442.048 us/op
                 fillHeap·p0.90:   1068079.514 us/op
                 fillHeap·p0.95:   1117782.016 us/op
                 fillHeap·p0.99:   1117782.016 us/op
                 fillHeap·p0.999:  1117782.016 us/op
                 fillHeap·p0.9999: 1117782.016 us/op
                 fillHeap·p1.00:   1117782.016 us/op

Iteration   7: 847410.727 ±(99.9%) 156079.813 us/op
                 fillHeap·p0.00:   730857.472 us/op
                 fillHeap·p0.50:   793772.032 us/op
                 fillHeap·p0.90:   1119040.307 us/op
                 fillHeap·p0.95:   1119879.168 us/op
                 fillHeap·p0.99:   1119879.168 us/op
                 fillHeap·p0.999:  1119879.168 us/op
                 fillHeap·p0.9999: 1119879.168 us/op
                 fillHeap·p1.00:   1119879.168 us/op

Iteration   8: 842167.847 ±(99.9%) 145364.404 us/op
                 fillHeap·p0.00:   711983.104 us/op
                 fillHeap·p0.50:   790626.304 us/op
                 fillHeap·p0.90:   1080452.710 us/op
                 fillHeap·p0.95:   1098907.648 us/op
                 fillHeap·p0.99:   1098907.648 us/op
                 fillHeap·p0.999:  1098907.648 us/op
                 fillHeap·p0.9999: 1098907.648 us/op
                 fillHeap·p1.00:   1098907.648 us/op

Iteration   9: 850475.796 ±(99.9%) 163939.269 us/op
                 fillHeap·p0.00:   718274.560 us/op
                 fillHeap·p0.50:   789577.728 us/op
                 fillHeap·p0.90:   1098068.787 us/op
                 fillHeap·p0.95:   1098907.648 us/op
                 fillHeap·p0.99:   1098907.648 us/op
                 fillHeap·p0.999:  1098907.648 us/op
                 fillHeap·p0.9999: 1098907.648 us/op
                 fillHeap·p1.00:   1098907.648 us/op

Iteration  10: 840346.283 ±(99.9%) 148218.487 us/op
                 fillHeap·p0.00:   734003.200 us/op
                 fillHeap·p0.50:   801112.064 us/op
                 fillHeap·p0.90:   1078774.989 us/op
                 fillHeap·p0.95:   1086324.736 us/op
                 fillHeap·p0.99:   1086324.736 us/op
                 fillHeap·p0.999:  1086324.736 us/op
                 fillHeap·p0.9999: 1086324.736 us/op
                 fillHeap·p1.00:   1086324.736 us/op

Iteration  11: 835069.794 ±(99.9%) 128142.617 us/op
                 fillHeap·p0.00:   735051.776 us/op
                 fillHeap·p0.50:   796917.760 us/op
                 fillHeap·p0.90:   1052770.304 us/op
                 fillHeap·p0.95:   1113587.712 us/op
                 fillHeap·p0.99:   1113587.712 us/op
                 fillHeap·p0.999:  1113587.712 us/op
                 fillHeap·p0.9999: 1113587.712 us/op
                 fillHeap·p1.00:   1113587.712 us/op

Iteration  12: 851040.414 ±(99.9%) 159169.827 us/op
                 fillHeap·p0.00:   724566.016 us/op
                 fillHeap·p0.50:   797966.336 us/op
                 fillHeap·p0.90:   1093874.483 us/op
                 fillHeap·p0.95:   1103101.952 us/op
                 fillHeap·p0.99:   1103101.952 us/op
                 fillHeap·p0.999:  1103101.952 us/op
                 fillHeap·p0.9999: 1103101.952 us/op
                 fillHeap·p1.00:   1103101.952 us/op

Iteration  13: 845716.874 ±(99.9%) 166383.449 us/op
                 fillHeap·p0.00:   709885.952 us/op
                 fillHeap·p0.50:   775946.240 us/op
                 fillHeap·p0.90:   1090519.040 us/op
                 fillHeap·p0.95:   1090519.040 us/op
                 fillHeap·p0.99:   1090519.040 us/op
                 fillHeap·p0.999:  1090519.040 us/op
                 fillHeap·p0.9999: 1090519.040 us/op
                 fillHeap·p1.00:   1090519.040 us/op

Iteration  14: 844506.978 ±(99.9%) 148130.092 us/op
                 fillHeap·p0.00:   732954.624 us/op
                 fillHeap·p0.50:   785383.424 us/op
                 fillHeap·p0.90:   1096810.496 us/op
                 fillHeap·p0.95:   1121976.320 us/op
                 fillHeap·p0.99:   1121976.320 us/op
                 fillHeap·p0.999:  1121976.320 us/op
                 fillHeap·p0.9999: 1121976.320 us/op
                 fillHeap·p1.00:   1121976.320 us/op

Iteration  15: 842651.806 ±(99.9%) 161722.563 us/op
                 fillHeap·p0.00:   703594.496 us/op
                 fillHeap·p0.50:   792723.456 us/op
                 fillHeap·p0.90:   1089260.749 us/op
                 fillHeap·p0.95:   1101004.800 us/op
                 fillHeap·p0.99:   1101004.800 us/op
                 fillHeap·p0.999:  1101004.800 us/op
                 fillHeap·p0.9999: 1101004.800 us/op
                 fillHeap·p1.00:   1101004.800 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 191
  mean = 841034.811 ±(99.9%) 28576.142 us/op

  Histogram, us/op:
    [ 700000.000,  750000.000) = 30 
    [ 750000.000,  800000.000) = 85 
    [ 800000.000,  850000.000) = 21 
    [ 850000.000,  900000.000) = 13 
    [ 900000.000,  950000.000) = 6 
    [ 950000.000, 1000000.000) = 6 
    [1000000.000, 1050000.000) = 4 
    [1050000.000, 1100000.000) = 16 
    [1100000.000, 1150000.000) = 10 

  Percentiles, us/op:
      p(0.0000) = 703594.496 us/op
     p(50.0000) = 792723.456 us/op
     p(90.0000) = 1085066.445 us/op
     p(95.0000) = 1101004.800 us/op
     p(99.0000) = 1120046.940 us/op
     p(99.9000) = 1121976.320 us/op
     p(99.9900) = 1121976.320 us/op
     p(99.9990) = 1121976.320 us/op
     p(99.9999) = 1121976.320 us/op
    p(100.0000) = 1121976.320 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 73.19% complete, ETA 02:16:59
# Fork: 1 of 1
# Warmup Iteration   1: 835715.072 ±(99.9%) 131273.456 us/op
# Warmup Iteration   2: 811194.526 ±(99.9%) 135492.320 us/op
# Warmup Iteration   3: 753626.551 ±(99.9%) 149383.492 us/op
# Warmup Iteration   4: 837570.245 ±(99.9%) 183055.691 us/op
# Warmup Iteration   5: 851443.712 ±(99.9%) 173490.294 us/op
Iteration   1: 834747.156 ±(99.9%) 111861.113 us/op
                 fillHeap·p0.00:   705691.648 us/op
                 fillHeap·p0.50:   852492.288 us/op
                 fillHeap·p0.90:   975595.110 us/op
                 fillHeap·p0.95:   991952.896 us/op
                 fillHeap·p0.99:   991952.896 us/op
                 fillHeap·p0.999:  991952.896 us/op
                 fillHeap·p0.9999: 991952.896 us/op
                 fillHeap·p1.00:   991952.896 us/op

Iteration   2: 852230.144 ±(99.9%) 170841.580 us/op
                 fillHeap·p0.00:   709885.952 us/op
                 fillHeap·p0.50:   801112.064 us/op
                 fillHeap·p0.90:   1063465.779 us/op
                 fillHeap·p0.95:   1077936.128 us/op
                 fillHeap·p0.99:   1077936.128 us/op
                 fillHeap·p0.999:  1077936.128 us/op
                 fillHeap·p0.9999: 1077936.128 us/op
                 fillHeap·p1.00:   1077936.128 us/op

Iteration   3: 808129.457 ±(99.9%) 95804.268 us/op
                 fillHeap·p0.00:   702545.920 us/op
                 fillHeap·p0.50:   771751.936 us/op
                 fillHeap·p0.90:   927989.760 us/op
                 fillHeap·p0.95:   944766.976 us/op
                 fillHeap·p0.99:   944766.976 us/op
                 fillHeap·p0.999:  944766.976 us/op
                 fillHeap·p0.9999: 944766.976 us/op
                 fillHeap·p1.00:   944766.976 us/op

Iteration   4: 845064.875 ±(99.9%) 161648.689 us/op
                 fillHeap·p0.00:   709885.952 us/op
                 fillHeap·p0.50:   803209.216 us/op
                 fillHeap·p0.90:   1048576.000 us/op
                 fillHeap·p0.95:   1067450.368 us/op
                 fillHeap·p0.99:   1067450.368 us/op
                 fillHeap·p0.999:  1067450.368 us/op
                 fillHeap·p0.9999: 1067450.368 us/op
                 fillHeap·p1.00:   1067450.368 us/op

Iteration   5: 827245.804 ±(99.9%) 108788.233 us/op
                 fillHeap·p0.00:   698351.616 us/op
                 fillHeap·p0.50:   822083.584 us/op
                 fillHeap·p0.90:   974546.534 us/op
                 fillHeap·p0.95:   995098.624 us/op
                 fillHeap·p0.99:   995098.624 us/op
                 fillHeap·p0.999:  995098.624 us/op
                 fillHeap·p0.9999: 995098.624 us/op
                 fillHeap·p1.00:   995098.624 us/op

Iteration   6: 846550.357 ±(99.9%) 164155.099 us/op
                 fillHeap·p0.00:   689963.008 us/op
                 fillHeap·p0.50:   815267.840 us/op
                 fillHeap·p0.90:   1038299.955 us/op
                 fillHeap·p0.95:   1049624.576 us/op
                 fillHeap·p0.99:   1049624.576 us/op
                 fillHeap·p0.999:  1049624.576 us/op
                 fillHeap·p0.9999: 1049624.576 us/op
                 fillHeap·p1.00:   1049624.576 us/op

Iteration   7: 833456.601 ±(99.9%) 105546.826 us/op
                 fillHeap·p0.00:   713031.680 us/op
                 fillHeap·p0.50:   825229.312 us/op
                 fillHeap·p0.90:   965738.496 us/op
                 fillHeap·p0.95:   982515.712 us/op
                 fillHeap·p0.99:   982515.712 us/op
                 fillHeap·p0.999:  982515.712 us/op
                 fillHeap·p0.9999: 982515.712 us/op
                 fillHeap·p1.00:   982515.712 us/op

Iteration   8: 845501.781 ±(99.9%) 157248.889 us/op
                 fillHeap·p0.00:   707788.800 us/op
                 fillHeap·p0.50:   803209.216 us/op
                 fillHeap·p0.90:   1040292.250 us/op
                 fillHeap·p0.95:   1056964.608 us/op
                 fillHeap·p0.99:   1056964.608 us/op
                 fillHeap·p0.999:  1056964.608 us/op
                 fillHeap·p0.9999: 1056964.608 us/op
                 fillHeap·p1.00:   1056964.608 us/op

Iteration   9: 835627.691 ±(99.9%) 123510.724 us/op
                 fillHeap·p0.00:   701497.344 us/op
                 fillHeap·p0.50:   814219.264 us/op
                 fillHeap·p0.90:   999292.928 us/op
                 fillHeap·p0.95:   1015021.568 us/op
                 fillHeap·p0.99:   1015021.568 us/op
                 fillHeap·p0.999:  1015021.568 us/op
                 fillHeap·p0.9999: 1015021.568 us/op
                 fillHeap·p1.00:   1015021.568 us/op

Iteration  10: 843492.011 ±(99.9%) 127019.099 us/op
                 fillHeap·p0.00:   724566.016 us/op
                 fillHeap·p0.50:   824705.024 us/op
                 fillHeap·p0.90:   1009149.542 us/op
                 fillHeap·p0.95:   1041235.968 us/op
                 fillHeap·p0.99:   1041235.968 us/op
                 fillHeap·p0.999:  1041235.968 us/op
                 fillHeap·p0.9999: 1041235.968 us/op
                 fillHeap·p1.00:   1041235.968 us/op

Iteration  11: 838161.749 ±(99.9%) 145874.232 us/op
                 fillHeap·p0.00:   697303.040 us/op
                 fillHeap·p0.50:   797442.048 us/op
                 fillHeap·p0.90:   1031798.784 us/op
                 fillHeap·p0.95:   1063256.064 us/op
                 fillHeap·p0.99:   1063256.064 us/op
                 fillHeap·p0.999:  1063256.064 us/op
                 fillHeap·p0.9999: 1063256.064 us/op
                 fillHeap·p1.00:   1063256.064 us/op

Iteration  12: 835802.453 ±(99.9%) 139473.589 us/op
                 fillHeap·p0.00:   703594.496 us/op
                 fillHeap·p0.50:   810549.248 us/op
                 fillHeap·p0.90:   1030330.778 us/op
                 fillHeap·p0.95:   1058013.184 us/op
                 fillHeap·p0.99:   1058013.184 us/op
                 fillHeap·p0.999:  1058013.184 us/op
                 fillHeap·p0.9999: 1058013.184 us/op
                 fillHeap·p1.00:   1058013.184 us/op

Iteration  13: 836326.741 ±(99.9%) 131127.794 us/op
                 fillHeap·p0.00:   716177.408 us/op
                 fillHeap·p0.50:   813694.976 us/op
                 fillHeap·p0.90:   1016594.432 us/op
                 fillHeap·p0.95:   1049624.576 us/op
                 fillHeap·p0.99:   1049624.576 us/op
                 fillHeap·p0.999:  1049624.576 us/op
                 fillHeap·p0.9999: 1049624.576 us/op
                 fillHeap·p1.00:   1049624.576 us/op

Iteration  14: 836239.360 ±(99.9%) 143625.662 us/op
                 fillHeap·p0.00:   704643.072 us/op
                 fillHeap·p0.50:   807927.808 us/op
                 fillHeap·p0.90:   1028548.198 us/op
                 fillHeap·p0.95:   1062207.488 us/op
                 fillHeap·p0.99:   1062207.488 us/op
                 fillHeap·p0.999:  1062207.488 us/op
                 fillHeap·p0.9999: 1062207.488 us/op
                 fillHeap·p1.00:   1062207.488 us/op

Iteration  15: 833880.064 ±(99.9%) 132651.713 us/op
                 fillHeap·p0.00:   699400.192 us/op
                 fillHeap·p0.50:   813170.688 us/op
                 fillHeap·p0.90:   1002858.086 us/op
                 fillHeap·p0.95:   1028653.056 us/op
                 fillHeap·p0.99:   1028653.056 us/op
                 fillHeap·p0.999:  1028653.056 us/op
                 fillHeap·p0.9999: 1028653.056 us/op
                 fillHeap·p1.00:   1028653.056 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 184
  mean = 836592.685 ±(99.9%) 25547.646 us/op

  Histogram, us/op:
    [ 600000.000,  650000.000) = 0 
    [ 650000.000,  700000.000) = 4 
    [ 700000.000,  750000.000) = 34 
    [ 750000.000,  800000.000) = 53 
    [ 800000.000,  850000.000) = 17 
    [ 850000.000,  900000.000) = 19 
    [ 900000.000,  950000.000) = 30 
    [ 950000.000, 1000000.000) = 9 
    [1000000.000, 1050000.000) = 12 

  Percentiles, us/op:
      p(0.0000) = 689963.008 us/op
     p(50.0000) = 818937.856 us/op
     p(90.0000) = 999817.216 us/op
     p(95.0000) = 1038352.384 us/op
     p(99.0000) = 1069023.232 us/op
     p(99.9000) = 1077936.128 us/op
     p(99.9900) = 1077936.128 us/op
     p(99.9990) = 1077936.128 us/op
     p(99.9999) = 1077936.128 us/op
    p(100.0000) = 1077936.128 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 73.91% complete, ETA 02:13:16
# Fork: 1 of 1
# Warmup Iteration   1: 872852.139 ±(99.9%) 149572.029 us/op
# Warmup Iteration   2: 889716.736 ±(99.9%) 142413.726 us/op
# Warmup Iteration   3: 892949.845 ±(99.9%) 164289.029 us/op
# Warmup Iteration   4: 908591.104 ±(99.9%) 165273.284 us/op
# Warmup Iteration   5: 897493.675 ±(99.9%) 157813.220 us/op
Iteration   1: 897668.437 ±(99.9%) 148795.991 us/op
                 fillHeap·p0.00:   735051.776 us/op
                 fillHeap·p0.50:   887619.584 us/op
                 fillHeap·p0.90:   1035993.088 us/op
                 fillHeap·p0.95:   1042284.544 us/op
                 fillHeap·p0.99:   1042284.544 us/op
                 fillHeap·p0.999:  1042284.544 us/op
                 fillHeap·p0.9999: 1042284.544 us/op
                 fillHeap·p1.00:   1042284.544 us/op

Iteration   2: 902037.504 ±(99.9%) 146735.920 us/op
                 fillHeap·p0.00:   721420.288 us/op
                 fillHeap·p0.50:   909115.392 us/op
                 fillHeap·p0.90:   1023829.606 us/op
                 fillHeap·p0.95:   1024458.752 us/op
                 fillHeap·p0.99:   1024458.752 us/op
                 fillHeap·p0.999:  1024458.752 us/op
                 fillHeap·p0.9999: 1024458.752 us/op
                 fillHeap·p1.00:   1024458.752 us/op

Iteration   3: 897318.912 ±(99.9%) 153437.878 us/op
                 fillHeap·p0.00:   734003.200 us/op
                 fillHeap·p0.50:   900726.784 us/op
                 fillHeap·p0.90:   1029806.490 us/op
                 fillHeap·p0.95:   1033895.936 us/op
                 fillHeap·p0.99:   1033895.936 us/op
                 fillHeap·p0.999:  1033895.936 us/op
                 fillHeap·p0.9999: 1033895.936 us/op
                 fillHeap·p1.00:   1033895.936 us/op

Iteration   4: 863240.192 ±(99.9%) 174573.072 us/op
                 fillHeap·p0.00:   629145.600 us/op
                 fillHeap·p0.50:   881328.128 us/op
                 fillHeap·p0.90:   1030645.350 us/op
                 fillHeap·p0.95:   1032847.360 us/op
                 fillHeap·p0.99:   1032847.360 us/op
                 fillHeap·p0.999:  1032847.360 us/op
                 fillHeap·p0.9999: 1032847.360 us/op
                 fillHeap·p1.00:   1032847.360 us/op

Iteration   5: 789013.110 ±(99.9%) 150662.374 us/op
                 fillHeap·p0.00:   614465.536 us/op
                 fillHeap·p0.50:   817889.280 us/op
                 fillHeap·p0.90:   925263.462 us/op
                 fillHeap·p0.95:   933232.640 us/op
                 fillHeap·p0.99:   933232.640 us/op
                 fillHeap·p0.999:  933232.640 us/op
                 fillHeap·p0.9999: 933232.640 us/op
                 fillHeap·p1.00:   933232.640 us/op

Iteration   6: 777478.774 ±(99.9%) 139593.688 us/op
                 fillHeap·p0.00:   606076.928 us/op
                 fillHeap·p0.50:   800063.488 us/op
                 fillHeap·p0.90:   920859.443 us/op
                 fillHeap·p0.95:   923795.456 us/op
                 fillHeap·p0.99:   923795.456 us/op
                 fillHeap·p0.999:  923795.456 us/op
                 fillHeap·p0.9999: 923795.456 us/op
                 fillHeap·p1.00:   923795.456 us/op

Iteration   7: 774655.685 ±(99.9%) 131533.564 us/op
                 fillHeap·p0.00:   606076.928 us/op
                 fillHeap·p0.50:   760217.600 us/op
                 fillHeap·p0.90:   921908.019 us/op
                 fillHeap·p0.95:   929038.336 us/op
                 fillHeap·p0.99:   929038.336 us/op
                 fillHeap·p0.999:  929038.336 us/op
                 fillHeap·p0.9999: 929038.336 us/op
                 fillHeap·p1.00:   929038.336 us/op

Iteration   8: 772477.873 ±(99.9%) 139308.904 us/op
                 fillHeap·p0.00:   610271.232 us/op
                 fillHeap·p0.50:   805306.368 us/op
                 fillHeap·p0.90:   907647.386 us/op
                 fillHeap·p0.95:   908066.816 us/op
                 fillHeap·p0.99:   908066.816 us/op
                 fillHeap·p0.999:  908066.816 us/op
                 fillHeap·p0.9999: 908066.816 us/op
                 fillHeap·p1.00:   908066.816 us/op

Iteration   9: 785867.382 ±(99.9%) 140962.233 us/op
                 fillHeap·p0.00:   605028.352 us/op
                 fillHeap·p0.50:   767557.632 us/op
                 fillHeap·p0.90:   937007.514 us/op
                 fillHeap·p0.95:   939524.096 us/op
                 fillHeap·p0.99:   939524.096 us/op
                 fillHeap·p0.999:  939524.096 us/op
                 fillHeap·p0.9999: 939524.096 us/op
                 fillHeap·p1.00:   939524.096 us/op

Iteration  10: 776833.497 ±(99.9%) 146043.485 us/op
                 fillHeap·p0.00:   606076.928 us/op
                 fillHeap·p0.50:   793772.032 us/op
                 fillHeap·p0.90:   937007.514 us/op
                 fillHeap·p0.95:   947912.704 us/op
                 fillHeap·p0.99:   947912.704 us/op
                 fillHeap·p0.999:  947912.704 us/op
                 fillHeap·p0.9999: 947912.704 us/op
                 fillHeap·p1.00:   947912.704 us/op

Iteration  11: 688844.527 ±(99.9%) 84040.679 us/op
                 fillHeap·p0.00:   610271.232 us/op
                 fillHeap·p0.50:   681574.400 us/op
                 fillHeap·p0.90:   838860.800 us/op
                 fillHeap·p0.95:   914358.272 us/op
                 fillHeap·p0.99:   914358.272 us/op
                 fillHeap·p0.999:  914358.272 us/op
                 fillHeap·p0.9999: 914358.272 us/op
                 fillHeap·p1.00:   914358.272 us/op

Iteration  12: 779766.053 ±(99.9%) 126268.303 us/op
                 fillHeap·p0.00:   610271.232 us/op
                 fillHeap·p0.50:   778043.392 us/op
                 fillHeap·p0.90:   966787.072 us/op
                 fillHeap·p0.95:   967835.648 us/op
                 fillHeap·p0.99:   967835.648 us/op
                 fillHeap·p0.999:  967835.648 us/op
                 fillHeap·p0.9999: 967835.648 us/op
                 fillHeap·p1.00:   967835.648 us/op

Iteration  13: 804015.813 ±(99.9%) 153923.425 us/op
                 fillHeap·p0.00:   630194.176 us/op
                 fillHeap·p0.50:   784334.848 us/op
                 fillHeap·p0.90:   956720.742 us/op
                 fillHeap·p0.95:   958398.464 us/op
                 fillHeap·p0.99:   958398.464 us/op
                 fillHeap·p0.999:  958398.464 us/op
                 fillHeap·p0.9999: 958398.464 us/op
                 fillHeap·p1.00:   958398.464 us/op

Iteration  14: 807484.180 ±(99.9%) 140273.397 us/op
                 fillHeap·p0.00:   615514.112 us/op
                 fillHeap·p0.50:   785383.424 us/op
                 fillHeap·p0.90:   959447.040 us/op
                 fillHeap·p0.95:   963641.344 us/op
                 fillHeap·p0.99:   963641.344 us/op
                 fillHeap·p0.999:  963641.344 us/op
                 fillHeap·p0.9999: 963641.344 us/op
                 fillHeap·p1.00:   963641.344 us/op

Iteration  15: 795143.247 ±(99.9%) 152947.335 us/op
                 fillHeap·p0.00:   612368.384 us/op
                 fillHeap·p0.50:   813694.976 us/op
                 fillHeap·p0.90:   950429.286 us/op
                 fillHeap·p0.95:   952107.008 us/op
                 fillHeap·p0.99:   952107.008 us/op
                 fillHeap·p0.999:  952107.008 us/op
                 fillHeap·p0.9999: 952107.008 us/op
                 fillHeap·p1.00:   952107.008 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 194
  mean = 804387.513 ±(99.9%) 30374.301 us/op

  Histogram, us/op:
    [ 600000.000,  650000.000) = 32 
    [ 650000.000,  700000.000) = 17 
    [ 700000.000,  750000.000) = 21 
    [ 750000.000,  800000.000) = 25 
    [ 800000.000,  850000.000) = 26 
    [ 850000.000,  900000.000) = 13 
    [ 900000.000,  950000.000) = 35 
    [ 950000.000, 1000000.000) = 8 
    [1000000.000, 1050000.000) = 17 

  Percentiles, us/op:
      p(0.0000) = 605028.352 us/op
     p(50.0000) = 803733.504 us/op
     p(90.0000) = 966787.072 us/op
     p(95.0000) = 1017380.864 us/op
     p(99.0000) = 1034315.366 us/op
     p(99.9000) = 1042284.544 us/op
     p(99.9900) = 1042284.544 us/op
     p(99.9990) = 1042284.544 us/op
     p(99.9999) = 1042284.544 us/op
    p(100.0000) = 1042284.544 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 74.64% complete, ETA 02:09:35
# Fork: 1 of 1
# Warmup Iteration   1: 808048.798 ±(99.9%) 58716.071 us/op
# Warmup Iteration   2: 814420.913 ±(99.9%) 121959.680 us/op
# Warmup Iteration   3: 814501.573 ±(99.9%) 119856.502 us/op
# Warmup Iteration   4: 820551.050 ±(99.9%) 124009.186 us/op
# Warmup Iteration   5: 813694.976 ±(99.9%) 117723.654 us/op
Iteration   1: 818534.558 ±(99.9%) 120648.045 us/op
                 fillHeap·p0.00:   654311.424 us/op
                 fillHeap·p0.50:   822083.584 us/op
                 fillHeap·p0.90:   939314.381 us/op
                 fillHeap·p0.95:   940572.672 us/op
                 fillHeap·p0.99:   940572.672 us/op
                 fillHeap·p0.999:  940572.672 us/op
                 fillHeap·p0.9999: 940572.672 us/op
                 fillHeap·p1.00:   940572.672 us/op

Iteration   2: 815792.128 ±(99.9%) 117647.729 us/op
                 fillHeap·p0.00:   652214.272 us/op
                 fillHeap·p0.50:   821035.008 us/op
                 fillHeap·p0.90:   934281.216 us/op
                 fillHeap·p0.95:   936378.368 us/op
                 fillHeap·p0.99:   936378.368 us/op
                 fillHeap·p0.999:  936378.368 us/op
                 fillHeap·p0.9999: 936378.368 us/op
                 fillHeap·p1.00:   936378.368 us/op

Iteration   3: 820389.730 ±(99.9%) 125529.853 us/op
                 fillHeap·p0.00:   640679.936 us/op
                 fillHeap·p0.50:   815792.128 us/op
                 fillHeap·p0.90:   952736.154 us/op
                 fillHeap·p0.95:   953155.584 us/op
                 fillHeap·p0.99:   953155.584 us/op
                 fillHeap·p0.999:  953155.584 us/op
                 fillHeap·p0.9999: 953155.584 us/op
                 fillHeap·p1.00:   953155.584 us/op

Iteration   4: 813452.997 ±(99.9%) 123006.494 us/op
                 fillHeap·p0.00:   651165.696 us/op
                 fillHeap·p0.50:   804257.792 us/op
                 fillHeap·p0.90:   939104.666 us/op
                 fillHeap·p0.95:   939524.096 us/op
                 fillHeap·p0.99:   939524.096 us/op
                 fillHeap·p0.999:  939524.096 us/op
                 fillHeap·p0.9999: 939524.096 us/op
                 fillHeap·p1.00:   939524.096 us/op

Iteration   5: 821438.306 ±(99.9%) 121359.326 us/op
                 fillHeap·p0.00:   651165.696 us/op
                 fillHeap·p0.50:   817889.280 us/op
                 fillHeap·p0.90:   952526.438 us/op
                 fillHeap·p0.95:   956301.312 us/op
                 fillHeap·p0.99:   956301.312 us/op
                 fillHeap·p0.999:  956301.312 us/op
                 fillHeap·p0.9999: 956301.312 us/op
                 fillHeap·p1.00:   956301.312 us/op

Iteration   6: 818453.898 ±(99.9%) 118768.911 us/op
                 fillHeap·p0.00:   643825.664 us/op
                 fillHeap·p0.50:   819986.432 us/op
                 fillHeap·p0.90:   934071.501 us/op
                 fillHeap·p0.95:   939524.096 us/op
                 fillHeap·p0.99:   939524.096 us/op
                 fillHeap·p0.999:  939524.096 us/op
                 fillHeap·p0.9999: 939524.096 us/op
                 fillHeap·p1.00:   939524.096 us/op

Iteration   7: 824503.375 ±(99.9%) 121506.324 us/op
                 fillHeap·p0.00:   645922.816 us/op
                 fillHeap·p0.50:   811597.824 us/op
                 fillHeap·p0.90:   948751.565 us/op
                 fillHeap·p0.95:   952107.008 us/op
                 fillHeap·p0.99:   952107.008 us/op
                 fillHeap·p0.999:  952107.008 us/op
                 fillHeap·p0.9999: 952107.008 us/op
                 fillHeap·p1.00:   952107.008 us/op

Iteration   8: 819583.134 ±(99.9%) 114873.630 us/op
                 fillHeap·p0.00:   653262.848 us/op
                 fillHeap·p0.50:   813694.976 us/op
                 fillHeap·p0.90:   933232.640 us/op
                 fillHeap·p0.95:   933232.640 us/op
                 fillHeap·p0.99:   933232.640 us/op
                 fillHeap·p0.999:  933232.640 us/op
                 fillHeap·p0.9999: 933232.640 us/op
                 fillHeap·p1.00:   933232.640 us/op

Iteration   9: 816195.426 ±(99.9%) 116770.526 us/op
                 fillHeap·p0.00:   646971.392 us/op
                 fillHeap·p0.50:   809500.672 us/op
                 fillHeap·p0.90:   927989.760 us/op
                 fillHeap·p0.95:   927989.760 us/op
                 fillHeap·p0.99:   927989.760 us/op
                 fillHeap·p0.999:  927989.760 us/op
                 fillHeap·p0.9999: 927989.760 us/op
                 fillHeap·p1.00:   927989.760 us/op

Iteration  10: 814985.531 ±(99.9%) 115756.301 us/op
                 fillHeap·p0.00:   645922.816 us/op
                 fillHeap·p0.50:   821035.008 us/op
                 fillHeap·p0.90:   933652.070 us/op
                 fillHeap·p0.95:   939524.096 us/op
                 fillHeap·p0.99:   939524.096 us/op
                 fillHeap·p0.999:  939524.096 us/op
                 fillHeap·p0.9999: 939524.096 us/op
                 fillHeap·p1.00:   939524.096 us/op

Iteration  11: 647036.928 ±(99.9%) 77128.915 us/op
                 fillHeap·p0.00:   554696.704 us/op
                 fillHeap·p0.50:   623902.720 us/op
                 fillHeap·p0.90:   756757.299 us/op
                 fillHeap·p0.95:   858783.744 us/op
                 fillHeap·p0.99:   858783.744 us/op
                 fillHeap·p0.999:  858783.744 us/op
                 fillHeap·p0.9999: 858783.744 us/op
                 fillHeap·p1.00:   858783.744 us/op

Iteration  12: 831117.470 ±(99.9%) 135131.072 us/op
                 fillHeap·p0.00:   654311.424 us/op
                 fillHeap·p0.50:   819986.432 us/op
                 fillHeap·p0.90:   972868.813 us/op
                 fillHeap·p0.95:   974127.104 us/op
                 fillHeap·p0.99:   974127.104 us/op
                 fillHeap·p0.999:  974127.104 us/op
                 fillHeap·p0.9999: 974127.104 us/op
                 fillHeap·p1.00:   974127.104 us/op

Iteration  13: 839183.439 ±(99.9%) 130484.667 us/op
                 fillHeap·p0.00:   655360.000 us/op
                 fillHeap·p0.50:   835715.072 us/op
                 fillHeap·p0.90:   975804.826 us/op
                 fillHeap·p0.95:   982515.712 us/op
                 fillHeap·p0.99:   982515.712 us/op
                 fillHeap·p0.999:  982515.712 us/op
                 fillHeap·p0.9999: 982515.712 us/op
                 fillHeap·p1.00:   982515.712 us/op

Iteration  14: 841119.271 ±(99.9%) 128482.923 us/op
                 fillHeap·p0.00:   649068.544 us/op
                 fillHeap·p0.50:   835715.072 us/op
                 fillHeap·p0.90:   971191.091 us/op
                 fillHeap·p0.95:   976224.256 us/op
                 fillHeap·p0.99:   976224.256 us/op
                 fillHeap·p0.999:  976224.256 us/op
                 fillHeap·p0.9999: 976224.256 us/op
                 fillHeap·p1.00:   976224.256 us/op

Iteration  15: 834928.640 ±(99.9%) 139775.034 us/op
                 fillHeap·p0.00:   660602.880 us/op
                 fillHeap·p0.50:   832045.056 us/op
                 fillHeap·p0.90:   981257.421 us/op
                 fillHeap·p0.95:   985661.440 us/op
                 fillHeap·p0.99:   985661.440 us/op
                 fillHeap·p0.999:  985661.440 us/op
                 fillHeap·p0.9999: 985661.440 us/op
                 fillHeap·p1.00:   985661.440 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 197
  mean = 809154.695 ±(99.9%) 25896.443 us/op

  Histogram, us/op:
    [ 500000.000,  550000.000) = 0 
    [ 550000.000,  600000.000) = 6 
    [ 600000.000,  650000.000) = 9 
    [ 650000.000,  700000.000) = 27 
    [ 700000.000,  750000.000) = 16 
    [ 750000.000,  800000.000) = 22 
    [ 800000.000,  850000.000) = 46 
    [ 850000.000,  900000.000) = 16 
    [ 900000.000,  950000.000) = 36 

  Percentiles, us/op:
      p(0.0000) = 554696.704 us/op
     p(50.0000) = 817889.280 us/op
     p(90.0000) = 947912.704 us/op
     p(95.0000) = 963851.059 us/op
     p(99.0000) = 982578.627 us/op
     p(99.9000) = 985661.440 us/op
     p(99.9900) = 985661.440 us/op
     p(99.9990) = 985661.440 us/op
     p(99.9999) = 985661.440 us/op
    p(100.0000) = 985661.440 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 75.36% complete, ETA 02:05:54
# Fork: 1 of 1
# Warmup Iteration   1: 383.285 ±(99.9%) 0.823 us/op
# Warmup Iteration   2: 382.505 ±(99.9%) 0.418 us/op
# Warmup Iteration   3: 381.574 ±(99.9%) 0.423 us/op
# Warmup Iteration   4: 381.460 ±(99.9%) 0.414 us/op
# Warmup Iteration   5: 381.537 ±(99.9%) 0.420 us/op
Iteration   1: 381.517 ±(99.9%) 0.425 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.344 us/op
                 read·p0.90:   394.240 us/op
                 read·p0.95:   401.408 us/op
                 read·p0.99:   430.592 us/op
                 read·p0.999:  626.688 us/op
                 read·p0.9999: 745.134 us/op
                 read·p1.00:   794.624 us/op

Iteration   2: 381.379 ±(99.9%) 0.407 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.344 us/op
                 read·p0.90:   394.240 us/op
                 read·p0.95:   402.944 us/op
                 read·p0.99:   432.666 us/op
                 read·p0.999:  608.256 us/op
                 read·p0.9999: 721.376 us/op
                 read·p1.00:   850.944 us/op

Iteration   3: 381.172 ±(99.9%) 0.409 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.344 us/op
                 read·p0.90:   393.728 us/op
                 read·p0.95:   401.920 us/op
                 read·p0.99:   425.938 us/op
                 read·p0.999:  611.114 us/op
                 read·p0.9999: 704.714 us/op
                 read·p1.00:   845.824 us/op

Iteration   4: 381.261 ±(99.9%) 0.417 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.344 us/op
                 read·p0.90:   394.240 us/op
                 read·p0.95:   401.408 us/op
                 read·p0.99:   428.017 us/op
                 read·p0.999:  611.936 us/op
                 read·p0.9999: 739.948 us/op
                 read·p1.00:   777.216 us/op

Iteration   5: 382.829 ±(99.9%) 0.448 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   378.368 us/op
                 read·p0.90:   396.800 us/op
                 read·p0.95:   404.992 us/op
                 read·p0.99:   442.880 us/op
                 read·p0.999:  633.659 us/op
                 read·p0.9999: 792.506 us/op
                 read·p1.00:   875.520 us/op

Iteration   6: 382.668 ±(99.9%) 0.549 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.856 us/op
                 read·p0.90:   396.800 us/op
                 read·p0.95:   405.504 us/op
                 read·p0.99:   436.224 us/op
                 read·p0.999:  619.520 us/op
                 read·p0.9999: 772.042 us/op
                 read·p1.00:   3088.384 us/op

Iteration   7: 381.880 ±(99.9%) 0.435 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.344 us/op
                 read·p0.90:   395.776 us/op
                 read·p0.95:   403.456 us/op
                 read·p0.99:   438.272 us/op
                 read·p0.999:  618.331 us/op
                 read·p0.9999: 876.214 us/op
                 read·p1.00:   906.240 us/op

Iteration   8: 382.204 ±(99.9%) 0.423 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.856 us/op
                 read·p0.90:   396.288 us/op
                 read·p0.95:   404.480 us/op
                 read·p0.99:   437.248 us/op
                 read·p0.999:  619.379 us/op
                 read·p0.9999: 724.921 us/op
                 read·p1.00:   729.088 us/op

Iteration   9: 381.887 ±(99.9%) 0.442 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.344 us/op
                 read·p0.90:   395.264 us/op
                 read·p0.95:   403.456 us/op
                 read·p0.99:   434.176 us/op
                 read·p0.999:  630.825 us/op
                 read·p0.9999: 841.630 us/op
                 read·p1.00:   932.864 us/op

Iteration  10: 382.296 ±(99.9%) 0.439 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.856 us/op
                 read·p0.90:   395.264 us/op
                 read·p0.95:   403.968 us/op
                 read·p0.99:   442.368 us/op
                 read·p0.999:  637.818 us/op
                 read·p0.9999: 749.367 us/op
                 read·p1.00:   826.368 us/op

Iteration  11: 381.426 ±(99.9%) 0.417 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.344 us/op
                 read·p0.90:   394.240 us/op
                 read·p0.95:   401.920 us/op
                 read·p0.99:   434.688 us/op
                 read·p0.999:  613.376 us/op
                 read·p0.9999: 722.063 us/op
                 read·p1.00:   778.240 us/op

Iteration  12: 381.398 ±(99.9%) 0.414 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.344 us/op
                 read·p0.90:   394.240 us/op
                 read·p0.95:   402.432 us/op
                 read·p0.99:   429.568 us/op
                 read·p0.999:  606.208 us/op
                 read·p0.9999: 783.064 us/op
                 read·p1.00:   801.792 us/op

Iteration  13: 381.494 ±(99.9%) 0.426 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.344 us/op
                 read·p0.90:   394.752 us/op
                 read·p0.95:   402.432 us/op
                 read·p0.99:   432.261 us/op
                 read·p0.999:  618.305 us/op
                 read·p0.9999: 711.827 us/op
                 read·p1.00:   733.184 us/op

Iteration  14: 380.960 ±(99.9%) 0.426 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   376.832 us/op
                 read·p0.90:   393.216 us/op
                 read·p0.95:   401.408 us/op
                 read·p0.99:   437.125 us/op
                 read·p0.999:  625.664 us/op
                 read·p0.9999: 732.704 us/op
                 read·p1.00:   790.528 us/op

Iteration  15: 382.292 ±(99.9%) 0.433 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.856 us/op
                 read·p0.90:   395.776 us/op
                 read·p0.95:   404.992 us/op
                 read·p0.99:   435.712 us/op
                 read·p0.999:  621.432 us/op
                 read·p0.9999: 741.732 us/op
                 read·p1.00:   825.344 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  N = 392499
  mean =    381.777 ±(99.9%) 0.112 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 0 
    [ 250.000,  500.000) = 389497 
    [ 500.000,  750.000) = 2973 
    [ 750.000, 1000.000) = 28 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 
    [2750.000, 3000.000) = 0 
    [3000.000, 3250.000) = 1 
    [3250.000, 3500.000) = 0 
    [3500.000, 3750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    370.176 us/op
     p(50.0000) =    377.344 us/op
     p(90.0000) =    394.752 us/op
     p(95.0000) =    402.944 us/op
     p(99.0000) =    434.688 us/op
     p(99.9000) =    618.496 us/op
     p(99.9900) =    735.232 us/op
     p(99.9990) =    890.138 us/op
     p(99.9999) =   3088.384 us/op
    p(100.0000) =   3088.384 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 76.08% complete, ETA 02:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 169.806 ±(99.9%) 0.453 us/op
# Warmup Iteration   2: 168.713 ±(99.9%) 0.202 us/op
# Warmup Iteration   3: 169.129 ±(99.9%) 0.311 us/op
# Warmup Iteration   4: 169.698 ±(99.9%) 0.215 us/op
# Warmup Iteration   5: 169.789 ±(99.9%) 0.221 us/op
Iteration   1: 168.713 ±(99.9%) 0.206 us/op
                 readAndWrite·p0.00:   160.000 us/op
                 readAndWrite·p0.50:   165.632 us/op
                 readAndWrite·p0.90:   174.848 us/op
                 readAndWrite·p0.95:   182.784 us/op
                 readAndWrite·p0.99:   201.472 us/op
                 readAndWrite·p0.999:  395.176 us/op
                 readAndWrite·p0.9999: 486.997 us/op
                 readAndWrite·p1.00:   629.760 us/op

Iteration   2: 168.468 ±(99.9%) 0.194 us/op
                 readAndWrite·p0.00:   160.000 us/op
                 readAndWrite·p0.50:   165.632 us/op
                 readAndWrite·p0.90:   174.336 us/op
                 readAndWrite·p0.95:   181.760 us/op
                 readAndWrite·p0.99:   197.632 us/op
                 readAndWrite·p0.999:  378.880 us/op
                 readAndWrite·p0.9999: 513.707 us/op
                 readAndWrite·p1.00:   663.552 us/op

Iteration   3: 169.532 ±(99.9%) 0.328 us/op
                 readAndWrite·p0.00:   160.256 us/op
                 readAndWrite·p0.50:   166.400 us/op
                 readAndWrite·p0.90:   175.872 us/op
                 readAndWrite·p0.95:   184.320 us/op
                 readAndWrite·p0.99:   202.240 us/op
                 readAndWrite·p0.999:  396.858 us/op
                 readAndWrite·p0.9999: 583.802 us/op
                 readAndWrite·p1.00:   4620.288 us/op

Iteration   4: 169.782 ±(99.9%) 0.202 us/op
                 readAndWrite·p0.00:   160.000 us/op
                 readAndWrite·p0.50:   167.424 us/op
                 readAndWrite·p0.90:   176.384 us/op
                 readAndWrite·p0.95:   184.064 us/op
                 readAndWrite·p0.99:   201.472 us/op
                 readAndWrite·p0.999:  397.312 us/op
                 readAndWrite·p0.9999: 473.272 us/op
                 readAndWrite·p1.00:   543.744 us/op

Iteration   5: 169.696 ±(99.9%) 0.197 us/op
                 readAndWrite·p0.00:   160.256 us/op
                 readAndWrite·p0.50:   167.424 us/op
                 readAndWrite·p0.90:   176.384 us/op
                 readAndWrite·p0.95:   183.552 us/op
                 readAndWrite·p0.99:   200.192 us/op
                 readAndWrite·p0.999:  394.414 us/op
                 readAndWrite·p0.9999: 498.236 us/op
                 readAndWrite·p1.00:   553.984 us/op

Iteration   6: 169.418 ±(99.9%) 0.257 us/op
                 readAndWrite·p0.00:   160.000 us/op
                 readAndWrite·p0.50:   167.680 us/op
                 readAndWrite·p0.90:   175.872 us/op
                 readAndWrite·p0.95:   182.016 us/op
                 readAndWrite·p0.99:   197.888 us/op
                 readAndWrite·p0.999:  389.195 us/op
                 readAndWrite·p0.9999: 556.151 us/op
                 readAndWrite·p1.00:   3039.232 us/op

Iteration   7: 169.183 ±(99.9%) 0.196 us/op
                 readAndWrite·p0.00:   160.000 us/op
                 readAndWrite·p0.50:   166.400 us/op
                 readAndWrite·p0.90:   175.360 us/op
                 readAndWrite·p0.95:   182.016 us/op
                 readAndWrite·p0.99:   198.144 us/op
                 readAndWrite·p0.999:  395.772 us/op
                 readAndWrite·p0.9999: 469.704 us/op
                 readAndWrite·p1.00:   590.848 us/op

Iteration   8: 169.814 ±(99.9%) 0.203 us/op
                 readAndWrite·p0.00:   159.488 us/op
                 readAndWrite·p0.50:   168.192 us/op
                 readAndWrite·p0.90:   175.872 us/op
                 readAndWrite·p0.95:   182.272 us/op
                 readAndWrite·p0.99:   198.656 us/op
                 readAndWrite·p0.999:  397.312 us/op
                 readAndWrite·p0.9999: 504.397 us/op
                 readAndWrite·p1.00:   661.504 us/op

Iteration   9: 170.844 ±(99.9%) 0.208 us/op
                 readAndWrite·p0.00:   159.744 us/op
                 readAndWrite·p0.50:   168.960 us/op
                 readAndWrite·p0.90:   176.640 us/op
                 readAndWrite·p0.95:   184.576 us/op
                 readAndWrite·p0.99:   201.216 us/op
                 readAndWrite·p0.999:  395.776 us/op
                 readAndWrite·p0.9999: 506.386 us/op
                 readAndWrite·p1.00:   733.184 us/op

Iteration  10: 169.479 ±(99.9%) 0.192 us/op
                 readAndWrite·p0.00:   160.256 us/op
                 readAndWrite·p0.50:   167.168 us/op
                 readAndWrite·p0.90:   175.872 us/op
                 readAndWrite·p0.95:   182.784 us/op
                 readAndWrite·p0.99:   197.888 us/op
                 readAndWrite·p0.999:  387.072 us/op
                 readAndWrite·p0.9999: 482.335 us/op
                 readAndWrite·p1.00:   579.584 us/op

Iteration  11: 170.220 ±(99.9%) 0.325 us/op
                 readAndWrite·p0.00:   160.256 us/op
                 readAndWrite·p0.50:   168.192 us/op
                 readAndWrite·p0.90:   176.128 us/op
                 readAndWrite·p0.95:   183.552 us/op
                 readAndWrite·p0.99:   200.704 us/op
                 readAndWrite·p0.999:  397.491 us/op
                 readAndWrite·p0.9999: 531.528 us/op
                 readAndWrite·p1.00:   3715.072 us/op

Iteration  12: 169.034 ±(99.9%) 0.184 us/op
                 readAndWrite·p0.00:   159.488 us/op
                 readAndWrite·p0.50:   166.656 us/op
                 readAndWrite·p0.90:   175.360 us/op
                 readAndWrite·p0.95:   182.016 us/op
                 readAndWrite·p0.99:   196.864 us/op
                 readAndWrite·p0.999:  382.433 us/op
                 readAndWrite·p0.9999: 450.243 us/op
                 readAndWrite·p1.00:   500.736 us/op

Iteration  13: 169.854 ±(99.9%) 0.201 us/op
                 readAndWrite·p0.00:   160.000 us/op
                 readAndWrite·p0.50:   167.424 us/op
                 readAndWrite·p0.90:   175.616 us/op
                 readAndWrite·p0.95:   184.064 us/op
                 readAndWrite·p0.99:   201.472 us/op
                 readAndWrite·p0.999:  389.349 us/op
                 readAndWrite·p0.9999: 511.091 us/op
                 readAndWrite·p1.00:   583.680 us/op

Iteration  14: 168.304 ±(99.9%) 0.192 us/op
                 readAndWrite·p0.00:   160.000 us/op
                 readAndWrite·p0.50:   165.632 us/op
                 readAndWrite·p0.90:   174.336 us/op
                 readAndWrite·p0.95:   180.736 us/op
                 readAndWrite·p0.99:   197.376 us/op
                 readAndWrite·p0.999:  378.717 us/op
                 readAndWrite·p0.9999: 499.422 us/op
                 readAndWrite·p1.00:   775.168 us/op

Iteration  15: 169.912 ±(99.9%) 0.204 us/op
                 readAndWrite·p0.00:   160.000 us/op
                 readAndWrite·p0.50:   167.936 us/op
                 readAndWrite·p0.90:   176.640 us/op
                 readAndWrite·p0.95:   183.296 us/op
                 readAndWrite·p0.99:   199.281 us/op
                 readAndWrite·p0.999:  397.050 us/op
                 readAndWrite·p0.9999: 503.916 us/op
                 readAndWrite·p1.00:   826.368 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  N = 883556
  mean =    169.481 ±(99.9%) 0.058 us/op

  Histogram, us/op:
    [   0.000,  500.000) = 883481 
    [ 500.000, 1000.000) = 71 
    [1000.000, 1500.000) = 0 
    [1500.000, 2000.000) = 0 
    [2000.000, 2500.000) = 0 
    [2500.000, 3000.000) = 1 
    [3000.000, 3500.000) = 1 
    [3500.000, 4000.000) = 1 
    [4000.000, 4500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    159.488 us/op
     p(50.0000) =    167.168 us/op
     p(90.0000) =    175.872 us/op
     p(95.0000) =    182.784 us/op
     p(99.0000) =    199.424 us/op
     p(99.9000) =    391.680 us/op
     p(99.9900) =    495.946 us/op
     p(99.9990) =    716.072 us/op
     p(99.9999) =   4620.288 us/op
    p(100.0000) =   4620.288 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 76.81% complete, ETA 01:58:26
# Fork: 1 of 1
# Warmup Iteration   1: 201.442 ±(99.9%) 0.527 us/op
# Warmup Iteration   2: 276.138 ±(99.9%) 1.212 us/op
# Warmup Iteration   3: 302.583 ±(99.9%) 0.269 us/op
# Warmup Iteration   4: 302.056 ±(99.9%) 0.240 us/op
# Warmup Iteration   5: 302.053 ±(99.9%) 0.260 us/op
Iteration   1: 301.991 ±(99.9%) 0.245 us/op
                 swap·p0.00:   296.960 us/op
                 swap·p0.50:   299.520 us/op
                 swap·p0.90:   307.712 us/op
                 swap·p0.95:   312.320 us/op
                 swap·p0.99:   340.480 us/op
                 swap·p0.999:  481.160 us/op
                 swap·p0.9999: 586.830 us/op
                 swap·p1.00:   634.880 us/op

Iteration   2: 301.824 ±(99.9%) 0.240 us/op
                 swap·p0.00:   296.960 us/op
                 swap·p0.50:   299.008 us/op
                 swap·p0.90:   307.200 us/op
                 swap·p0.95:   312.320 us/op
                 swap·p0.99:   333.824 us/op
                 swap·p0.999:  475.598 us/op
                 swap·p0.9999: 594.772 us/op
                 swap·p1.00:   722.944 us/op

Iteration   3: 301.731 ±(99.9%) 0.238 us/op
                 swap·p0.00:   296.960 us/op
                 swap·p0.50:   299.008 us/op
                 swap·p0.90:   307.200 us/op
                 swap·p0.95:   311.808 us/op
                 swap·p0.99:   333.312 us/op
                 swap·p0.999:  479.013 us/op
                 swap·p0.9999: 579.972 us/op
                 swap·p1.00:   664.576 us/op

Iteration   4: 302.168 ±(99.9%) 0.366 us/op
                 swap·p0.00:   296.960 us/op
                 swap·p0.50:   299.520 us/op
                 swap·p0.90:   307.712 us/op
                 swap·p0.95:   312.320 us/op
                 swap·p0.99:   338.944 us/op
                 swap·p0.999:  480.197 us/op
                 swap·p0.9999: 581.852 us/op
                 swap·p1.00:   3055.616 us/op

Iteration   5: 301.836 ±(99.9%) 0.234 us/op
                 swap·p0.00:   296.960 us/op
                 swap·p0.50:   299.008 us/op
                 swap·p0.90:   307.200 us/op
                 swap·p0.95:   312.320 us/op
                 swap·p0.99:   330.752 us/op
                 swap·p0.999:  470.894 us/op
                 swap·p0.9999: 539.161 us/op
                 swap·p1.00:   684.032 us/op

Iteration   6: 302.074 ±(99.9%) 0.398 us/op
                 swap·p0.00:   296.960 us/op
                 swap·p0.50:   299.008 us/op
                 swap·p0.90:   307.712 us/op
                 swap·p0.95:   312.832 us/op
                 swap·p0.99:   334.848 us/op
                 swap·p0.999:  485.888 us/op
                 swap·p0.9999: 610.954 us/op
                 swap·p1.00:   3411.968 us/op

Iteration   7: 302.384 ±(99.9%) 0.278 us/op
                 swap·p0.00:   296.960 us/op
                 swap·p0.50:   299.520 us/op
                 swap·p0.90:   307.712 us/op
                 swap·p0.95:   312.832 us/op
                 swap·p0.99:   348.672 us/op
                 swap·p0.999:  497.134 us/op
                 swap·p0.9999: 624.786 us/op
                 swap·p1.00:   834.560 us/op

Iteration   8: 302.410 ±(99.9%) 0.350 us/op
                 swap·p0.00:   296.960 us/op
                 swap·p0.50:   299.008 us/op
                 swap·p0.90:   308.224 us/op
                 swap·p0.95:   312.832 us/op
                 swap·p0.99:   347.648 us/op
                 swap·p0.999:  490.991 us/op
                 swap·p0.9999: 672.113 us/op
                 swap·p1.00:   2469.888 us/op

Iteration   9: 302.523 ±(99.9%) 0.299 us/op
                 swap·p0.00:   296.960 us/op
                 swap·p0.50:   299.008 us/op
                 swap·p0.90:   308.736 us/op
                 swap·p0.95:   313.856 us/op
                 swap·p0.99:   355.328 us/op
                 swap·p0.999:  502.743 us/op
                 swap·p0.9999: 715.233 us/op
                 swap·p1.00:   772.096 us/op

Iteration  10: 303.108 ±(99.9%) 0.315 us/op
                 swap·p0.00:   296.960 us/op
                 swap·p0.50:   300.032 us/op
                 swap·p0.90:   308.736 us/op
                 swap·p0.95:   314.880 us/op
                 swap·p0.99:   363.520 us/op
                 swap·p0.999:  531.591 us/op
                 swap·p0.9999: 657.382 us/op
                 swap·p1.00:   796.672 us/op

Iteration  11: 302.957 ±(99.9%) 0.306 us/op
                 swap·p0.00:   296.960 us/op
                 swap·p0.50:   299.520 us/op
                 swap·p0.90:   308.736 us/op
                 swap·p0.95:   314.368 us/op
                 swap·p0.99:   367.616 us/op
                 swap·p0.999:  510.007 us/op
                 swap·p0.9999: 644.068 us/op
                 swap·p1.00:   721.920 us/op

Iteration  12: 302.392 ±(99.9%) 0.267 us/op
                 swap·p0.00:   296.960 us/op
                 swap·p0.50:   299.520 us/op
                 swap·p0.90:   308.224 us/op
                 swap·p0.95:   313.344 us/op
                 swap·p0.99:   351.232 us/op
                 swap·p0.999:  491.980 us/op
                 swap·p0.9999: 598.878 us/op
                 swap·p1.00:   669.696 us/op

Iteration  13: 302.021 ±(99.9%) 0.256 us/op
                 swap·p0.00:   296.960 us/op
                 swap·p0.50:   299.008 us/op
                 swap·p0.90:   307.712 us/op
                 swap·p0.95:   312.320 us/op
                 swap·p0.99:   336.384 us/op
                 swap·p0.999:  480.179 us/op
                 swap·p0.9999: 622.359 us/op
                 swap·p1.00:   804.864 us/op

Iteration  14: 301.626 ±(99.9%) 0.235 us/op
                 swap·p0.00:   296.960 us/op
                 swap·p0.50:   299.008 us/op
                 swap·p0.90:   307.200 us/op
                 swap·p0.95:   311.808 us/op
                 swap·p0.99:   330.752 us/op
                 swap·p0.999:  465.348 us/op
                 swap·p0.9999: 588.878 us/op
                 swap·p1.00:   697.344 us/op

Iteration  15: 302.478 ±(99.9%) 0.304 us/op
                 swap·p0.00:   296.960 us/op
                 swap·p0.50:   299.520 us/op
                 swap·p0.90:   308.224 us/op
                 swap·p0.95:   313.344 us/op
                 swap·p0.99:   352.133 us/op
                 swap·p0.999:  502.772 us/op
                 swap·p0.9999: 827.199 us/op
                 swap·p1.00:   876.544 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  N = 495758
  mean =    302.234 ±(99.9%) 0.076 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 0 
    [ 250.000,  500.000) = 495361 
    [ 500.000,  750.000) = 386 
    [ 750.000, 1000.000) = 8 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 1 
    [2500.000, 2750.000) = 0 
    [2750.000, 3000.000) = 0 
    [3000.000, 3250.000) = 1 
    [3250.000, 3500.000) = 1 
    [3500.000, 3750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    296.960 us/op
     p(50.0000) =    299.520 us/op
     p(90.0000) =    307.712 us/op
     p(95.0000) =    312.832 us/op
     p(99.0000) =    348.160 us/op
     p(99.9000) =    489.984 us/op
     p(99.9900) =    625.943 us/op
     p(99.9990) =    871.641 us/op
     p(99.9999) =   3411.968 us/op
    p(100.0000) =   3411.968 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 77.53% complete, ETA 01:54:42
# Fork: 1 of 1
# Warmup Iteration   1: 176.090 ±(99.9%) 0.399 us/op
# Warmup Iteration   2: 185.123 ±(99.9%) 0.241 us/op
# Warmup Iteration   3: 183.715 ±(99.9%) 0.232 us/op
# Warmup Iteration   4: 183.631 ±(99.9%) 0.230 us/op
# Warmup Iteration   5: 185.151 ±(99.9%) 0.323 us/op
Iteration   1: 185.368 ±(99.9%) 0.248 us/op
                 write·p0.00:   171.776 us/op
                 write·p0.50:   182.528 us/op
                 write·p0.90:   193.536 us/op
                 write·p0.95:   204.800 us/op
                 write·p0.99:   226.304 us/op
                 write·p0.999:  425.679 us/op
                 write·p0.9999: 575.230 us/op
                 write·p1.00:   707.584 us/op

Iteration   2: 185.756 ±(99.9%) 0.260 us/op
                 write·p0.00:   172.032 us/op
                 write·p0.50:   182.784 us/op
                 write·p0.90:   194.816 us/op
                 write·p0.95:   206.080 us/op
                 write·p0.99:   232.824 us/op
                 write·p0.999:  431.869 us/op
                 write·p0.9999: 572.153 us/op
                 write·p1.00:   861.184 us/op

Iteration   3: 186.422 ±(99.9%) 0.468 us/op
                 write·p0.00:   172.032 us/op
                 write·p0.50:   183.296 us/op
                 write·p0.90:   194.048 us/op
                 write·p0.95:   205.824 us/op
                 write·p0.99:   243.712 us/op
                 write·p0.999:  417.792 us/op
                 write·p0.9999: 539.833 us/op
                 write·p1.00:   6569.984 us/op

Iteration   4: 183.773 ±(99.9%) 0.243 us/op
                 write·p0.00:   172.288 us/op
                 write·p0.50:   180.736 us/op
                 write·p0.90:   191.744 us/op
                 write·p0.95:   200.448 us/op
                 write·p0.99:   228.864 us/op
                 write·p0.999:  419.840 us/op
                 write·p0.9999: 532.159 us/op
                 write·p1.00:   695.296 us/op

Iteration   5: 183.799 ±(99.9%) 0.316 us/op
                 write·p0.00:   172.288 us/op
                 write·p0.50:   179.968 us/op
                 write·p0.90:   191.488 us/op
                 write·p0.95:   201.472 us/op
                 write·p0.99:   241.408 us/op
                 write·p0.999:  410.969 us/op
                 write·p0.9999: 648.019 us/op
                 write·p1.00:   3383.296 us/op

Iteration   6: 183.982 ±(99.9%) 0.243 us/op
                 write·p0.00:   171.776 us/op
                 write·p0.50:   180.224 us/op
                 write·p0.90:   192.000 us/op
                 write·p0.95:   201.984 us/op
                 write·p0.99:   239.690 us/op
                 write·p0.999:  414.581 us/op
                 write·p0.9999: 542.432 us/op
                 write·p1.00:   628.736 us/op

Iteration   7: 183.006 ±(99.9%) 0.222 us/op
                 write·p0.00:   171.520 us/op
                 write·p0.50:   179.712 us/op
                 write·p0.90:   190.976 us/op
                 write·p0.95:   198.400 us/op
                 write·p0.99:   217.856 us/op
                 write·p0.999:  413.123 us/op
                 write·p0.9999: 526.426 us/op
                 write·p1.00:   735.232 us/op

Iteration   8: 184.855 ±(99.9%) 0.227 us/op
                 write·p0.00:   172.544 us/op
                 write·p0.50:   182.784 us/op
                 write·p0.90:   192.256 us/op
                 write·p0.95:   201.216 us/op
                 write·p0.99:   219.904 us/op
                 write·p0.999:  418.296 us/op
                 write·p0.9999: 500.115 us/op
                 write·p1.00:   669.696 us/op

Iteration   9: 182.400 ±(99.9%) 0.212 us/op
                 write·p0.00:   172.544 us/op
                 write·p0.50:   179.712 us/op
                 write·p0.90:   189.184 us/op
                 write·p0.95:   196.864 us/op
                 write·p0.99:   213.760 us/op
                 write·p0.999:  407.302 us/op
                 write·p0.9999: 506.499 us/op
                 write·p1.00:   716.800 us/op

Iteration  10: 182.273 ±(99.9%) 0.221 us/op
                 write·p0.00:   171.520 us/op
                 write·p0.50:   179.200 us/op
                 write·p0.90:   189.696 us/op
                 write·p0.95:   196.864 us/op
                 write·p0.99:   214.784 us/op
                 write·p0.999:  410.737 us/op
                 write·p0.9999: 529.543 us/op
                 write·p1.00:   630.784 us/op

Iteration  11: 175.775 ±(99.9%) 0.218 us/op
                 write·p0.00:   163.840 us/op
                 write·p0.50:   172.800 us/op
                 write·p0.90:   183.296 us/op
                 write·p0.95:   190.208 us/op
                 write·p0.99:   209.152 us/op
                 write·p0.999:  411.136 us/op
                 write·p0.9999: 504.689 us/op
                 write·p1.00:   612.352 us/op

Iteration  12: 183.853 ±(99.9%) 0.216 us/op
                 write·p0.00:   172.032 us/op
                 write·p0.50:   182.016 us/op
                 write·p0.90:   190.976 us/op
                 write·p0.95:   198.797 us/op
                 write·p0.99:   218.112 us/op
                 write·p0.999:  403.810 us/op
                 write·p0.9999: 489.605 us/op
                 write·p1.00:   611.328 us/op

Iteration  13: 183.452 ±(99.9%) 0.222 us/op
                 write·p0.00:   172.032 us/op
                 write·p0.50:   180.480 us/op
                 write·p0.90:   191.488 us/op
                 write·p0.95:   199.424 us/op
                 write·p0.99:   222.720 us/op
                 write·p0.999:  415.305 us/op
                 write·p0.9999: 496.025 us/op
                 write·p1.00:   609.280 us/op

Iteration  14: 183.416 ±(99.9%) 0.228 us/op
                 write·p0.00:   171.776 us/op
                 write·p0.50:   180.224 us/op
                 write·p0.90:   191.488 us/op
                 write·p0.95:   199.680 us/op
                 write·p0.99:   219.648 us/op
                 write·p0.999:  420.127 us/op
                 write·p0.9999: 501.138 us/op
                 write·p1.00:   555.008 us/op

Iteration  15: 182.747 ±(99.9%) 0.235 us/op
                 write·p0.00:   171.776 us/op
                 write·p0.50:   179.200 us/op
                 write·p0.90:   189.696 us/op
                 write·p0.95:   199.424 us/op
                 write·p0.99:   224.768 us/op
                 write·p0.999:  420.537 us/op
                 write·p0.9999: 515.020 us/op
                 write·p1.00:   823.296 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  N = 816807
  mean =    183.361 ±(99.9%) 0.067 us/op

  Histogram, us/op:
    [   0.000,  500.000) = 816693 
    [ 500.000, 1000.000) = 112 
    [1000.000, 1500.000) = 0 
    [1500.000, 2000.000) = 0 
    [2000.000, 2500.000) = 0 
    [2500.000, 3000.000) = 0 
    [3000.000, 3500.000) = 1 
    [3500.000, 4000.000) = 0 
    [4000.000, 4500.000) = 0 
    [4500.000, 5000.000) = 0 
    [5000.000, 5500.000) = 0 
    [5500.000, 6000.000) = 0 
    [6000.000, 6500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    163.840 us/op
     p(50.0000) =    180.480 us/op
     p(90.0000) =    191.488 us/op
     p(95.0000) =    199.936 us/op
     p(99.0000) =    224.256 us/op
     p(99.9000) =    415.842 us/op
     p(99.9900) =    520.867 us/op
     p(99.9990) =    717.652 us/op
     p(99.9999) =   6569.984 us/op
    p(100.0000) =   6569.984 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 78.26% complete, ETA 01:50:58
# Fork: 1 of 1
# Warmup Iteration   1: 1153666.617 ±(99.9%) 20047.646 us/op
# Warmup Iteration   2: 1146909.127 ±(99.9%) 2754.938 us/op
# Warmup Iteration   3: 1149705.330 ±(99.9%) 3424.837 us/op
# Warmup Iteration   4: 1151802.482 ±(99.9%) 2936.773 us/op
# Warmup Iteration   5: 1154365.668 ±(99.9%) 7703.084 us/op
Iteration   1: 1150404.380 ±(99.9%) 5018.360 us/op
                 sumBigDecimals·p0.00:   1147142.144 us/op
                 sumBigDecimals·p0.50:   1151336.448 us/op
                 sumBigDecimals·p0.90:   1155530.752 us/op
                 sumBigDecimals·p0.95:   1155530.752 us/op
                 sumBigDecimals·p0.99:   1155530.752 us/op
                 sumBigDecimals·p0.999:  1155530.752 us/op
                 sumBigDecimals·p0.9999: 1155530.752 us/op
                 sumBigDecimals·p1.00:   1155530.752 us/op

Iteration   2: 1150637.397 ±(99.9%) 5572.136 us/op
                 sumBigDecimals·p0.00:   1145044.992 us/op
                 sumBigDecimals·p0.50:   1151336.448 us/op
                 sumBigDecimals·p0.90:   1155530.752 us/op
                 sumBigDecimals·p0.95:   1155530.752 us/op
                 sumBigDecimals·p0.99:   1155530.752 us/op
                 sumBigDecimals·p0.999:  1155530.752 us/op
                 sumBigDecimals·p0.9999: 1155530.752 us/op
                 sumBigDecimals·p1.00:   1155530.752 us/op

Iteration   3: 1151336.448 ±(99.9%) 4661.983 us/op
                 sumBigDecimals·p0.00:   1147142.144 us/op
                 sumBigDecimals·p0.50:   1151336.448 us/op
                 sumBigDecimals·p0.90:   1155530.752 us/op
                 sumBigDecimals·p0.95:   1155530.752 us/op
                 sumBigDecimals·p0.99:   1155530.752 us/op
                 sumBigDecimals·p0.999:  1155530.752 us/op
                 sumBigDecimals·p0.9999: 1155530.752 us/op
                 sumBigDecimals·p1.00:   1155530.752 us/op

Iteration   4: 1152967.566 ±(99.9%) 4235.475 us/op
                 sumBigDecimals·p0.00:   1149239.296 us/op
                 sumBigDecimals·p0.50:   1153433.600 us/op
                 sumBigDecimals·p0.90:   1157627.904 us/op
                 sumBigDecimals·p0.95:   1157627.904 us/op
                 sumBigDecimals·p0.99:   1157627.904 us/op
                 sumBigDecimals·p0.999:  1157627.904 us/op
                 sumBigDecimals·p0.9999: 1157627.904 us/op
                 sumBigDecimals·p1.00:   1157627.904 us/op

Iteration   5: 1152501.532 ±(99.9%) 6132.163 us/op
                 sumBigDecimals·p0.00:   1147142.144 us/op
                 sumBigDecimals·p0.50:   1151336.448 us/op
                 sumBigDecimals·p0.90:   1159725.056 us/op
                 sumBigDecimals·p0.95:   1159725.056 us/op
                 sumBigDecimals·p0.99:   1159725.056 us/op
                 sumBigDecimals·p0.999:  1159725.056 us/op
                 sumBigDecimals·p0.9999: 1159725.056 us/op
                 sumBigDecimals·p1.00:   1159725.056 us/op

Iteration   6: 1152268.516 ±(99.9%) 3983.633 us/op
                 sumBigDecimals·p0.00:   1147142.144 us/op
                 sumBigDecimals·p0.50:   1153433.600 us/op
                 sumBigDecimals·p0.90:   1155530.752 us/op
                 sumBigDecimals·p0.95:   1155530.752 us/op
                 sumBigDecimals·p0.99:   1155530.752 us/op
                 sumBigDecimals·p0.999:  1155530.752 us/op
                 sumBigDecimals·p0.9999: 1155530.752 us/op
                 sumBigDecimals·p1.00:   1155530.752 us/op

Iteration   7: 1149239.296 ±(99.9%) 3940.095 us/op
                 sumBigDecimals·p0.00:   1145044.992 us/op
                 sumBigDecimals·p0.50:   1149239.296 us/op
                 sumBigDecimals·p0.90:   1151336.448 us/op
                 sumBigDecimals·p0.95:   1151336.448 us/op
                 sumBigDecimals·p0.99:   1151336.448 us/op
                 sumBigDecimals·p0.999:  1151336.448 us/op
                 sumBigDecimals·p0.9999: 1151336.448 us/op
                 sumBigDecimals·p1.00:   1151336.448 us/op

Iteration   8: 1152734.549 ±(99.9%) 3524.128 us/op
                 sumBigDecimals·p0.00:   1149239.296 us/op
                 sumBigDecimals·p0.50:   1153433.600 us/op
                 sumBigDecimals·p0.90:   1155530.752 us/op
                 sumBigDecimals·p0.95:   1155530.752 us/op
                 sumBigDecimals·p0.99:   1155530.752 us/op
                 sumBigDecimals·p0.999:  1155530.752 us/op
                 sumBigDecimals·p0.9999: 1155530.752 us/op
                 sumBigDecimals·p1.00:   1155530.752 us/op

Iteration   9: 1151336.448 ±(99.9%) 5286.192 us/op
                 sumBigDecimals·p0.00:   1147142.144 us/op
                 sumBigDecimals·p0.50:   1151336.448 us/op
                 sumBigDecimals·p0.90:   1155530.752 us/op
                 sumBigDecimals·p0.95:   1155530.752 us/op
                 sumBigDecimals·p0.99:   1155530.752 us/op
                 sumBigDecimals·p0.999:  1155530.752 us/op
                 sumBigDecimals·p0.9999: 1155530.752 us/op
                 sumBigDecimals·p1.00:   1155530.752 us/op

Iteration  10: 1148307.228 ±(99.9%) 5018.360 us/op
                 sumBigDecimals·p0.00:   1142947.840 us/op
                 sumBigDecimals·p0.50:   1149239.296 us/op
                 sumBigDecimals·p0.90:   1151336.448 us/op
                 sumBigDecimals·p0.95:   1151336.448 us/op
                 sumBigDecimals·p0.99:   1151336.448 us/op
                 sumBigDecimals·p0.999:  1151336.448 us/op
                 sumBigDecimals·p0.9999: 1151336.448 us/op
                 sumBigDecimals·p1.00:   1151336.448 us/op

Iteration  11: 1144811.975 ±(99.9%) 3270.252 us/op
                 sumBigDecimals·p0.00:   1142947.840 us/op
                 sumBigDecimals·p0.50:   1145044.992 us/op
                 sumBigDecimals·p0.90:   1147142.144 us/op
                 sumBigDecimals·p0.95:   1147142.144 us/op
                 sumBigDecimals·p0.99:   1147142.144 us/op
                 sumBigDecimals·p0.999:  1147142.144 us/op
                 sumBigDecimals·p0.9999: 1147142.144 us/op
                 sumBigDecimals·p1.00:   1147142.144 us/op

Iteration  12: 1150171.364 ±(99.9%) 5018.360 us/op
                 sumBigDecimals·p0.00:   1145044.992 us/op
                 sumBigDecimals·p0.50:   1151336.448 us/op
                 sumBigDecimals·p0.90:   1155530.752 us/op
                 sumBigDecimals·p0.95:   1155530.752 us/op
                 sumBigDecimals·p0.99:   1155530.752 us/op
                 sumBigDecimals·p0.999:  1155530.752 us/op
                 sumBigDecimals·p0.9999: 1155530.752 us/op
                 sumBigDecimals·p1.00:   1155530.752 us/op

Iteration  13: 1151103.431 ±(99.9%) 3714.757 us/op
                 sumBigDecimals·p0.00:   1147142.144 us/op
                 sumBigDecimals·p0.50:   1151336.448 us/op
                 sumBigDecimals·p0.90:   1153433.600 us/op
                 sumBigDecimals·p0.95:   1153433.600 us/op
                 sumBigDecimals·p0.99:   1153433.600 us/op
                 sumBigDecimals·p0.999:  1153433.600 us/op
                 sumBigDecimals·p0.9999: 1153433.600 us/op
                 sumBigDecimals·p1.00:   1153433.600 us/op

Iteration  14: 1154831.701 ±(99.9%) 4316.158 us/op
                 sumBigDecimals·p0.00:   1151336.448 us/op
                 sumBigDecimals·p0.50:   1155530.752 us/op
                 sumBigDecimals·p0.90:   1157627.904 us/op
                 sumBigDecimals·p0.95:   1157627.904 us/op
                 sumBigDecimals·p0.99:   1157627.904 us/op
                 sumBigDecimals·p0.999:  1157627.904 us/op
                 sumBigDecimals·p0.9999: 1157627.904 us/op
                 sumBigDecimals·p1.00:   1157627.904 us/op

Iteration  15: 1152268.516 ±(99.9%) 3107.989 us/op
                 sumBigDecimals·p0.00:   1149239.296 us/op
                 sumBigDecimals·p0.50:   1151336.448 us/op
                 sumBigDecimals·p0.90:   1155530.752 us/op
                 sumBigDecimals·p0.95:   1155530.752 us/op
                 sumBigDecimals·p0.99:   1155530.752 us/op
                 sumBigDecimals·p0.999:  1155530.752 us/op
                 sumBigDecimals·p0.9999: 1155530.752 us/op
                 sumBigDecimals·p1.00:   1155530.752 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  N = 135
  mean = 1150994.690 ±(99.9%) 990.430 us/op

  Histogram, us/op:
    [1140000.000, 1141250.000) = 0 
    [1141250.000, 1142500.000) = 0 
    [1142500.000, 1143750.000) = 5 
    [1143750.000, 1145000.000) = 0 
    [1145000.000, 1146250.000) = 6 
    [1146250.000, 1147500.000) = 19 
    [1147500.000, 1148750.000) = 0 
    [1148750.000, 1150000.000) = 16 
    [1150000.000, 1151250.000) = 0 
    [1151250.000, 1152500.000) = 44 
    [1152500.000, 1153750.000) = 26 
    [1153750.000, 1155000.000) = 0 
    [1155000.000, 1156250.000) = 14 
    [1156250.000, 1157500.000) = 0 
    [1157500.000, 1158750.000) = 4 

  Percentiles, us/op:
      p(0.0000) = 1142947.840 us/op
     p(50.0000) = 1151336.448 us/op
     p(90.0000) = 1155530.752 us/op
     p(95.0000) = 1155530.752 us/op
     p(99.0000) = 1158970.081 us/op
     p(99.9000) = 1159725.056 us/op
     p(99.9900) = 1159725.056 us/op
     p(99.9990) = 1159725.056 us/op
     p(99.9999) = 1159725.056 us/op
    p(100.0000) = 1159725.056 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 78.98% complete, ETA 01:47:16
# Fork: 1 of 1
# Warmup Iteration   1: 1180696.576 ±(99.9%) 21436.433 us/op
# Warmup Iteration   2: 1151802.482 ±(99.9%) 17601.050 us/op
# Warmup Iteration   3: 1118015.033 ±(99.9%) 3270.252 us/op
# Warmup Iteration   4: 1118481.067 ±(99.9%) 3940.095 us/op
# Warmup Iteration   5: 1948953.259 ±(99.9%) 31705.489 us/op
Iteration   1: 1929379.840 ±(99.9%) 22003.960 us/op
                 countUppercase·p0.00:   1918894.080 us/op
                 countUppercase·p0.50:   1931476.992 us/op
                 countUppercase·p0.90:   1937768.448 us/op
                 countUppercase·p0.95:   1937768.448 us/op
                 countUppercase·p0.99:   1937768.448 us/op
                 countUppercase·p0.999:  1937768.448 us/op
                 countUppercase·p0.9999: 1937768.448 us/op
                 countUppercase·p1.00:   1937768.448 us/op

Iteration   2: 1961186.645 ±(99.9%) 22750.942 us/op
                 countUppercase·p0.00:   1952448.512 us/op
                 countUppercase·p0.50:   1960837.120 us/op
                 countUppercase·p0.90:   1975517.184 us/op
                 countUppercase·p0.95:   1975517.184 us/op
                 countUppercase·p0.99:   1975517.184 us/op
                 countUppercase·p0.999:  1975517.184 us/op
                 countUppercase·p0.9999: 1975517.184 us/op
                 countUppercase·p1.00:   1975517.184 us/op

Iteration   3: 1819978.411 ±(99.9%) 16389.065 us/op
                 countUppercase·p0.00:   1814036.480 us/op
                 countUppercase·p0.50:   1820327.936 us/op
                 countUppercase·p0.90:   1826619.392 us/op
                 countUppercase·p0.95:   1826619.392 us/op
                 countUppercase·p0.99:   1826619.392 us/op
                 countUppercase·p0.999:  1826619.392 us/op
                 countUppercase·p0.9999: 1826619.392 us/op
                 countUppercase·p1.00:   1826619.392 us/op

Iteration   4: 1875902.464 ±(99.9%) 9663.150 us/op
                 countUppercase·p0.00:   1870659.584 us/op
                 countUppercase·p0.50:   1875902.464 us/op
                 countUppercase·p0.90:   1881145.344 us/op
                 countUppercase·p0.95:   1881145.344 us/op
                 countUppercase·p0.99:   1881145.344 us/op
                 countUppercase·p0.999:  1881145.344 us/op
                 countUppercase·p0.9999: 1881145.344 us/op
                 countUppercase·p1.00:   1881145.344 us/op

Iteration   5: 1921340.757 ±(99.9%) 17212.453 us/op
                 countUppercase·p0.00:   1912602.624 us/op
                 countUppercase·p0.50:   1922039.808 us/op
                 countUppercase·p0.90:   1927282.688 us/op
                 countUppercase·p0.95:   1927282.688 us/op
                 countUppercase·p0.99:   1927282.688 us/op
                 countUppercase·p0.999:  1927282.688 us/op
                 countUppercase·p0.9999: 1927282.688 us/op
                 countUppercase·p1.00:   1927282.688 us/op

Iteration   6: 1871358.635 ±(99.9%) 9603.316 us/op
                 countUppercase·p0.00:   1866465.280 us/op
                 countUppercase·p0.50:   1871708.160 us/op
                 countUppercase·p0.90:   1874853.888 us/op
                 countUppercase·p0.95:   1874853.888 us/op
                 countUppercase·p0.99:   1874853.888 us/op
                 countUppercase·p0.999:  1874853.888 us/op
                 countUppercase·p0.9999: 1874853.888 us/op
                 countUppercase·p1.00:   1874853.888 us/op

Iteration   7: 1849338.539 ±(99.9%) 30082.300 us/op
                 countUppercase·p0.00:   1839202.304 us/op
                 countUppercase·p0.50:   1845493.760 us/op
                 countUppercase·p0.90:   1866465.280 us/op
                 countUppercase·p0.95:   1866465.280 us/op
                 countUppercase·p0.99:   1866465.280 us/op
                 countUppercase·p0.999:  1866465.280 us/op
                 countUppercase·p0.9999: 1866465.280 us/op
                 countUppercase·p1.00:   1866465.280 us/op

Iteration   8: 1914350.251 ±(99.9%) 21500.492 us/op
                 countUppercase·p0.00:   1904214.016 us/op
                 countUppercase·p0.50:   1914699.776 us/op
                 countUppercase·p0.90:   1923088.384 us/op
                 countUppercase·p0.95:   1923088.384 us/op
                 countUppercase·p0.99:   1923088.384 us/op
                 countUppercase·p0.999:  1923088.384 us/op
                 countUppercase·p0.9999: 1923088.384 us/op
                 countUppercase·p1.00:   1923088.384 us/op

Iteration   9: 1905961.643 ±(99.9%) 13623.514 us/op
                 countUppercase·p0.00:   1902116.864 us/op
                 countUppercase·p0.50:   1904214.016 us/op
                 countUppercase·p0.90:   1914699.776 us/op
                 countUppercase·p0.95:   1914699.776 us/op
                 countUppercase·p0.99:   1914699.776 us/op
                 countUppercase·p0.999:  1914699.776 us/op
                 countUppercase·p0.9999: 1914699.776 us/op
                 countUppercase·p1.00:   1914699.776 us/op

Iteration  10: 1852134.741 ±(99.9%) 15961.450 us/op
                 countUppercase·p0.00:   1845493.760 us/op
                 countUppercase·p0.50:   1850736.640 us/op
                 countUppercase·p0.90:   1862270.976 us/op
                 countUppercase·p0.95:   1862270.976 us/op
                 countUppercase·p0.99:   1862270.976 us/op
                 countUppercase·p0.999:  1862270.976 us/op
                 countUppercase·p0.9999: 1862270.976 us/op
                 countUppercase·p1.00:   1862270.976 us/op

Iteration  11: 1895126.357 ±(99.9%) 17312.624 us/op
                 countUppercase·p0.00:   1887436.800 us/op
                 countUppercase·p0.50:   1893728.256 us/op
                 countUppercase·p0.90:   1906311.168 us/op
                 countUppercase·p0.95:   1906311.168 us/op
                 countUppercase·p0.99:   1906311.168 us/op
                 countUppercase·p0.999:  1906311.168 us/op
                 countUppercase·p0.9999: 1906311.168 us/op
                 countUppercase·p1.00:   1906311.168 us/op

Iteration  12: 1862970.027 ±(99.9%) 23718.440 us/op
                 countUppercase·p0.00:   1851785.216 us/op
                 countUppercase·p0.50:   1861222.400 us/op
                 countUppercase·p0.90:   1874853.888 us/op
                 countUppercase·p0.95:   1874853.888 us/op
                 countUppercase·p0.99:   1874853.888 us/op
                 countUppercase·p0.999:  1874853.888 us/op
                 countUppercase·p0.9999: 1874853.888 us/op
                 countUppercase·p1.00:   1874853.888 us/op

Iteration  13: 1875552.939 ±(99.9%) 18843.066 us/op
                 countUppercase·p0.00:   1866465.280 us/op
                 countUppercase·p0.50:   1873805.312 us/op
                 countUppercase·p0.90:   1885339.648 us/op
                 countUppercase·p0.95:   1885339.648 us/op
                 countUppercase·p0.99:   1885339.648 us/op
                 countUppercase·p0.999:  1885339.648 us/op
                 countUppercase·p0.9999: 1885339.648 us/op
                 countUppercase·p1.00:   1885339.648 us/op

Iteration  14: 1894077.781 ±(99.9%) 25339.837 us/op
                 countUppercase·p0.00:   1883242.496 us/op
                 countUppercase·p0.50:   1892679.680 us/op
                 countUppercase·p0.90:   1908408.320 us/op
                 countUppercase·p0.95:   1908408.320 us/op
                 countUppercase·p0.99:   1908408.320 us/op
                 countUppercase·p0.999:  1908408.320 us/op
                 countUppercase·p0.9999: 1908408.320 us/op
                 countUppercase·p1.00:   1908408.320 us/op

Iteration  15: 1828017.493 ±(99.9%) 38949.703 us/op
                 countUppercase·p0.00:   1803550.720 us/op
                 countUppercase·p0.50:   1831862.272 us/op
                 countUppercase·p0.90:   1839202.304 us/op
                 countUppercase·p0.95:   1839202.304 us/op
                 countUppercase·p0.99:   1839202.304 us/op
                 countUppercase·p0.999:  1839202.304 us/op
                 countUppercase·p0.9999: 1839202.304 us/op
                 countUppercase·p1.00:   1839202.304 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 90
  mean = 1883778.435 ±(99.9%) 13803.776 us/op

  Histogram, us/op:
    [1800000.000, 1812500.000) = 1 
    [1812500.000, 1825000.000) = 6 
    [1825000.000, 1837500.000) = 3 
    [1837500.000, 1850000.000) = 9 
    [1850000.000, 1862500.000) = 8 
    [1862500.000, 1875000.000) = 16 
    [1875000.000, 1887500.000) = 8 
    [1887500.000, 1900000.000) = 6 
    [1900000.000, 1912500.000) = 11 
    [1912500.000, 1925000.000) = 9 
    [1925000.000, 1937500.000) = 6 
    [1937500.000, 1950000.000) = 1 
    [1950000.000, 1962500.000) = 4 
    [1962500.000, 1975000.000) = 1 
    [1975000.000, 1987500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 1803550.720 us/op
     p(50.0000) = 1879048.192 us/op
     p(90.0000) = 1933154.714 us/op
     p(95.0000) = 1957376.819 us/op
     p(99.0000) = 1975517.184 us/op
     p(99.9000) = 1975517.184 us/op
     p(99.9900) = 1975517.184 us/op
     p(99.9990) = 1975517.184 us/op
     p(99.9999) = 1975517.184 us/op
    p(100.0000) = 1975517.184 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 79.71% complete, ETA 01:43:38
# Fork: 1 of 1
# Warmup Iteration   1: 15216934.912 us/op
# Warmup Iteration   2: 15619588.096 us/op
# Warmup Iteration   3: 15334375.424 us/op
# Warmup Iteration   4: 15049162.752 us/op
# Warmup Iteration   5: 16542334.976 us/op
Iteration   1: 16575889.408 us/op
                 countUppercase·p0.00:   16575889.408 us/op
                 countUppercase·p0.50:   16575889.408 us/op
                 countUppercase·p0.90:   16575889.408 us/op
                 countUppercase·p0.95:   16575889.408 us/op
                 countUppercase·p0.99:   16575889.408 us/op
                 countUppercase·p0.999:  16575889.408 us/op
                 countUppercase·p0.9999: 16575889.408 us/op
                 countUppercase·p1.00:   16575889.408 us/op

Iteration   2: 16357785.600 us/op
                 countUppercase·p0.00:   16357785.600 us/op
                 countUppercase·p0.50:   16357785.600 us/op
                 countUppercase·p0.90:   16357785.600 us/op
                 countUppercase·p0.95:   16357785.600 us/op
                 countUppercase·p0.99:   16357785.600 us/op
                 countUppercase·p0.999:  16357785.600 us/op
                 countUppercase·p0.9999: 16357785.600 us/op
                 countUppercase·p1.00:   16357785.600 us/op

Iteration   3: 16458448.896 us/op
                 countUppercase·p0.00:   16458448.896 us/op
                 countUppercase·p0.50:   16458448.896 us/op
                 countUppercase·p0.90:   16458448.896 us/op
                 countUppercase·p0.95:   16458448.896 us/op
                 countUppercase·p0.99:   16458448.896 us/op
                 countUppercase·p0.999:  16458448.896 us/op
                 countUppercase·p0.9999: 16458448.896 us/op
                 countUppercase·p1.00:   16458448.896 us/op

Iteration   4: 16341008.384 us/op
                 countUppercase·p0.00:   16341008.384 us/op
                 countUppercase·p0.50:   16341008.384 us/op
                 countUppercase·p0.90:   16341008.384 us/op
                 countUppercase·p0.95:   16341008.384 us/op
                 countUppercase·p0.99:   16341008.384 us/op
                 countUppercase·p0.999:  16341008.384 us/op
                 countUppercase·p0.9999: 16341008.384 us/op
                 countUppercase·p1.00:   16341008.384 us/op

Iteration   5: 16844324.864 us/op
                 countUppercase·p0.00:   16844324.864 us/op
                 countUppercase·p0.50:   16844324.864 us/op
                 countUppercase·p0.90:   16844324.864 us/op
                 countUppercase·p0.95:   16844324.864 us/op
                 countUppercase·p0.99:   16844324.864 us/op
                 countUppercase·p0.999:  16844324.864 us/op
                 countUppercase·p0.9999: 16844324.864 us/op
                 countUppercase·p1.00:   16844324.864 us/op

Iteration   6: 16525557.760 us/op
                 countUppercase·p0.00:   16525557.760 us/op
                 countUppercase·p0.50:   16525557.760 us/op
                 countUppercase·p0.90:   16525557.760 us/op
                 countUppercase·p0.95:   16525557.760 us/op
                 countUppercase·p0.99:   16525557.760 us/op
                 countUppercase·p0.999:  16525557.760 us/op
                 countUppercase·p0.9999: 16525557.760 us/op
                 countUppercase·p1.00:   16525557.760 us/op

Iteration   7: 16710107.136 us/op
                 countUppercase·p0.00:   16710107.136 us/op
                 countUppercase·p0.50:   16710107.136 us/op
                 countUppercase·p0.90:   16710107.136 us/op
                 countUppercase·p0.95:   16710107.136 us/op
                 countUppercase·p0.99:   16710107.136 us/op
                 countUppercase·p0.999:  16710107.136 us/op
                 countUppercase·p0.9999: 16710107.136 us/op
                 countUppercase·p1.00:   16710107.136 us/op

Iteration   8: 16240345.088 us/op
                 countUppercase·p0.00:   16240345.088 us/op
                 countUppercase·p0.50:   16240345.088 us/op
                 countUppercase·p0.90:   16240345.088 us/op
                 countUppercase·p0.95:   16240345.088 us/op
                 countUppercase·p0.99:   16240345.088 us/op
                 countUppercase·p0.999:  16240345.088 us/op
                 countUppercase·p0.9999: 16240345.088 us/op
                 countUppercase·p1.00:   16240345.088 us/op

Iteration   9: 16626221.056 us/op
                 countUppercase·p0.00:   16626221.056 us/op
                 countUppercase·p0.50:   16626221.056 us/op
                 countUppercase·p0.90:   16626221.056 us/op
                 countUppercase·p0.95:   16626221.056 us/op
                 countUppercase·p0.99:   16626221.056 us/op
                 countUppercase·p0.999:  16626221.056 us/op
                 countUppercase·p0.9999: 16626221.056 us/op
                 countUppercase·p1.00:   16626221.056 us/op

Iteration  10: 16441671.680 us/op
                 countUppercase·p0.00:   16441671.680 us/op
                 countUppercase·p0.50:   16441671.680 us/op
                 countUppercase·p0.90:   16441671.680 us/op
                 countUppercase·p0.95:   16441671.680 us/op
                 countUppercase·p0.99:   16441671.680 us/op
                 countUppercase·p0.999:  16441671.680 us/op
                 countUppercase·p0.9999: 16441671.680 us/op
                 countUppercase·p1.00:   16441671.680 us/op

Iteration  11: 16206790.656 us/op
                 countUppercase·p0.00:   16206790.656 us/op
                 countUppercase·p0.50:   16206790.656 us/op
                 countUppercase·p0.90:   16206790.656 us/op
                 countUppercase·p0.95:   16206790.656 us/op
                 countUppercase·p0.99:   16206790.656 us/op
                 countUppercase·p0.999:  16206790.656 us/op
                 countUppercase·p0.9999: 16206790.656 us/op
                 countUppercase·p1.00:   16206790.656 us/op

Iteration  12: 16290676.736 us/op
                 countUppercase·p0.00:   16290676.736 us/op
                 countUppercase·p0.50:   16290676.736 us/op
                 countUppercase·p0.90:   16290676.736 us/op
                 countUppercase·p0.95:   16290676.736 us/op
                 countUppercase·p0.99:   16290676.736 us/op
                 countUppercase·p0.999:  16290676.736 us/op
                 countUppercase·p0.9999: 16290676.736 us/op
                 countUppercase·p1.00:   16290676.736 us/op

Iteration  13: 16492003.328 us/op
                 countUppercase·p0.00:   16492003.328 us/op
                 countUppercase·p0.50:   16492003.328 us/op
                 countUppercase·p0.90:   16492003.328 us/op
                 countUppercase·p0.95:   16492003.328 us/op
                 countUppercase·p0.99:   16492003.328 us/op
                 countUppercase·p0.999:  16492003.328 us/op
                 countUppercase·p0.9999: 16492003.328 us/op
                 countUppercase·p1.00:   16492003.328 us/op

Iteration  14: 16659775.488 us/op
                 countUppercase·p0.00:   16659775.488 us/op
                 countUppercase·p0.50:   16659775.488 us/op
                 countUppercase·p0.90:   16659775.488 us/op
                 countUppercase·p0.95:   16659775.488 us/op
                 countUppercase·p0.99:   16659775.488 us/op
                 countUppercase·p0.999:  16659775.488 us/op
                 countUppercase·p0.9999: 16659775.488 us/op
                 countUppercase·p1.00:   16659775.488 us/op

Iteration  15: 16575889.408 us/op
                 countUppercase·p0.00:   16575889.408 us/op
                 countUppercase·p0.50:   16575889.408 us/op
                 countUppercase·p0.90:   16575889.408 us/op
                 countUppercase·p0.95:   16575889.408 us/op
                 countUppercase·p0.99:   16575889.408 us/op
                 countUppercase·p0.999:  16575889.408 us/op
                 countUppercase·p0.9999: 16575889.408 us/op
                 countUppercase·p1.00:   16575889.408 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 15
  mean = 16489766.366 ±(99.9%) 194345.239 us/op

  Histogram, us/op:
    [16200000.000, 16250000.000) = 2 
    [16250000.000, 16300000.000) = 1 
    [16300000.000, 16350000.000) = 1 
    [16350000.000, 16400000.000) = 1 
    [16400000.000, 16450000.000) = 1 
    [16450000.000, 16500000.000) = 2 
    [16500000.000, 16550000.000) = 1 
    [16550000.000, 16600000.000) = 2 
    [16600000.000, 16650000.000) = 1 
    [16650000.000, 16700000.000) = 1 
    [16700000.000, 16750000.000) = 1 
    [16750000.000, 16800000.000) = 0 
    [16800000.000, 16850000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 16206790.656 us/op
     p(50.0000) = 16492003.328 us/op
     p(90.0000) = 16763794.227 us/op
     p(95.0000) = 16844324.864 us/op
     p(99.0000) = 16844324.864 us/op
     p(99.9000) = 16844324.864 us/op
     p(99.9900) = 16844324.864 us/op
     p(99.9990) = 16844324.864 us/op
     p(99.9999) = 16844324.864 us/op
    p(100.0000) = 16844324.864 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 80.43% complete, ETA 01:40:24
# Fork: 1 of 1
# Warmup Iteration   1: 1.941 ±(99.9%) 0.010 us/op
# Warmup Iteration   2: 1.933 ±(99.9%) 0.011 us/op
# Warmup Iteration   3: 1.931 ±(99.9%) 0.010 us/op
# Warmup Iteration   4: 1.930 ±(99.9%) 0.010 us/op
# Warmup Iteration   5: 1.931 ±(99.9%) 0.010 us/op
Iteration   1: 1.932 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.894 us/op
                 runFibonacci·p0.95:   1.900 us/op
                 runFibonacci·p0.99:   2.072 us/op
                 runFibonacci·p0.999:  11.836 us/op
                 runFibonacci·p0.9999: 116.913 us/op
                 runFibonacci·p1.00:   296.448 us/op

Iteration   2: 1.936 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.894 us/op
                 runFibonacci·p0.95:   1.898 us/op
                 runFibonacci·p0.99:   2.080 us/op
                 runFibonacci·p0.999:  12.716 us/op
                 runFibonacci·p0.9999: 126.197 us/op
                 runFibonacci·p1.00:   242.944 us/op

Iteration   3: 1.932 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.892 us/op
                 runFibonacci·p0.95:   1.898 us/op
                 runFibonacci·p0.99:   2.084 us/op
                 runFibonacci·p0.999:  12.144 us/op
                 runFibonacci·p0.9999: 96.087 us/op
                 runFibonacci·p1.00:   258.560 us/op

Iteration   4: 1.931 ±(99.9%) 0.009 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.894 us/op
                 runFibonacci·p0.95:   1.900 us/op
                 runFibonacci·p0.99:   2.080 us/op
                 runFibonacci·p0.999:  12.112 us/op
                 runFibonacci·p0.9999: 49.712 us/op
                 runFibonacci·p1.00:   300.032 us/op

Iteration   5: 1.931 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.894 us/op
                 runFibonacci·p0.95:   1.898 us/op
                 runFibonacci·p0.99:   2.060 us/op
                 runFibonacci·p0.999:  12.029 us/op
                 runFibonacci·p0.9999: 100.395 us/op
                 runFibonacci·p1.00:   267.264 us/op

Iteration   6: 1.932 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.894 us/op
                 runFibonacci·p0.95:   1.900 us/op
                 runFibonacci·p0.99:   2.060 us/op
                 runFibonacci·p0.999:  11.852 us/op
                 runFibonacci·p0.9999: 125.443 us/op
                 runFibonacci·p1.00:   231.424 us/op

Iteration   7: 1.936 ±(99.9%) 0.011 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.882 us/op
                 runFibonacci·p0.90:   1.896 us/op
                 runFibonacci·p0.95:   1.900 us/op
                 runFibonacci·p0.99:   2.112 us/op
                 runFibonacci·p0.999:  12.128 us/op
                 runFibonacci·p0.9999: 107.774 us/op
                 runFibonacci·p1.00:   295.936 us/op

Iteration   8: 1.941 ±(99.9%) 0.013 us/op
                 runFibonacci·p0.00:   1.856 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.894 us/op
                 runFibonacci·p0.95:   1.900 us/op
                 runFibonacci·p0.99:   2.128 us/op
                 runFibonacci·p0.999:  12.686 us/op
                 runFibonacci·p0.9999: 129.246 us/op
                 runFibonacci·p1.00:   388.608 us/op

Iteration   9: 1.937 ±(99.9%) 0.011 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.894 us/op
                 runFibonacci·p0.95:   1.898 us/op
                 runFibonacci·p0.99:   2.092 us/op
                 runFibonacci·p0.999:  11.835 us/op
                 runFibonacci·p0.9999: 141.039 us/op
                 runFibonacci·p1.00:   289.280 us/op

Iteration  10: 1.936 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.894 us/op
                 runFibonacci·p0.95:   1.898 us/op
                 runFibonacci·p0.99:   2.046 us/op
                 runFibonacci·p0.999:  11.981 us/op
                 runFibonacci·p0.9999: 121.943 us/op
                 runFibonacci·p1.00:   287.744 us/op

Iteration  11: 1.941 ±(99.9%) 0.011 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.882 us/op
                 runFibonacci·p0.90:   1.896 us/op
                 runFibonacci·p0.95:   1.902 us/op
                 runFibonacci·p0.99:   2.108 us/op
                 runFibonacci·p0.999:  13.452 us/op
                 runFibonacci·p0.9999: 105.533 us/op
                 runFibonacci·p1.00:   246.528 us/op

Iteration  12: 1.930 ±(99.9%) 0.009 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.894 us/op
                 runFibonacci·p0.95:   1.898 us/op
                 runFibonacci·p0.99:   2.080 us/op
                 runFibonacci·p0.999:  11.904 us/op
                 runFibonacci·p0.9999: 73.139 us/op
                 runFibonacci·p1.00:   208.384 us/op

Iteration  13: 1.933 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.894 us/op
                 runFibonacci·p0.95:   1.898 us/op
                 runFibonacci·p0.99:   2.080 us/op
                 runFibonacci·p0.999:  12.013 us/op
                 runFibonacci·p0.9999: 98.895 us/op
                 runFibonacci·p1.00:   342.528 us/op

Iteration  14: 1.935 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.894 us/op
                 runFibonacci·p0.95:   1.900 us/op
                 runFibonacci·p0.99:   2.124 us/op
                 runFibonacci·p0.999:  12.192 us/op
                 runFibonacci·p0.9999: 110.979 us/op
                 runFibonacci·p1.00:   306.176 us/op

Iteration  15: 1.931 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.880 us/op
                 runFibonacci·p0.90:   1.894 us/op
                 runFibonacci·p0.95:   1.900 us/op
                 runFibonacci·p0.99:   2.048 us/op
                 runFibonacci·p0.999:  11.388 us/op
                 runFibonacci·p0.9999: 81.101 us/op
                 runFibonacci·p1.00:   303.616 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 4953811
  mean =      1.934 ±(99.9%) 0.003 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 4952601 
    [ 25.000,  50.000) = 537 
    [ 50.000,  75.000) = 122 
    [ 75.000, 100.000) = 35 
    [100.000, 125.000) = 66 
    [125.000, 150.000) = 161 
    [150.000, 175.000) = 175 
    [175.000, 200.000) = 70 
    [200.000, 225.000) = 13 
    [225.000, 250.000) = 12 
    [250.000, 275.000) = 4 
    [275.000, 300.000) = 7 
    [300.000, 325.000) = 3 
    [325.000, 350.000) = 1 
    [350.000, 375.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      1.856 us/op
     p(50.0000) =      1.880 us/op
     p(90.0000) =      1.894 us/op
     p(95.0000) =      1.900 us/op
     p(99.0000) =      2.088 us/op
     p(99.9000) =     12.128 us/op
     p(99.9900) =    107.678 us/op
     p(99.9990) =    194.166 us/op
     p(99.9999) =    344.112 us/op
    p(100.0000) =    388.608 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 81.16% complete, ETA 01:36:39
# Fork: 1 of 1
# Warmup Iteration   1: 5.320 ±(99.9%) 0.022 us/op
# Warmup Iteration   2: 5.327 ±(99.9%) 0.021 us/op
# Warmup Iteration   3: 5.358 ±(99.9%) 0.024 us/op
# Warmup Iteration   4: 5.355 ±(99.9%) 0.023 us/op
# Warmup Iteration   5: 5.348 ±(99.9%) 0.023 us/op
Iteration   1: 5.315 ±(99.9%) 0.020 us/op
                 runFibonacci·p0.00:   5.056 us/op
                 runFibonacci·p0.50:   5.200 us/op
                 runFibonacci·p0.90:   5.256 us/op
                 runFibonacci·p0.95:   5.288 us/op
                 runFibonacci·p0.99:   6.024 us/op
                 runFibonacci·p0.999:  20.086 us/op
                 runFibonacci·p0.9999: 179.144 us/op
                 runFibonacci·p1.00:   274.944 us/op

Iteration   2: 5.339 ±(99.9%) 0.019 us/op
                 runFibonacci·p0.00:   5.040 us/op
                 runFibonacci·p0.50:   5.216 us/op
                 runFibonacci·p0.90:   5.312 us/op
                 runFibonacci·p0.95:   5.328 us/op
                 runFibonacci·p0.99:   6.112 us/op
                 runFibonacci·p0.999:  19.865 us/op
                 runFibonacci·p0.9999: 160.521 us/op
                 runFibonacci·p1.00:   288.256 us/op

Iteration   3: 5.322 ±(99.9%) 0.018 us/op
                 runFibonacci·p0.00:   5.064 us/op
                 runFibonacci·p0.50:   5.208 us/op
                 runFibonacci·p0.90:   5.296 us/op
                 runFibonacci·p0.95:   5.320 us/op
                 runFibonacci·p0.99:   6.216 us/op
                 runFibonacci·p0.999:  19.922 us/op
                 runFibonacci·p0.9999: 158.864 us/op
                 runFibonacci·p1.00:   323.584 us/op

Iteration   4: 5.317 ±(99.9%) 0.019 us/op
                 runFibonacci·p0.00:   5.048 us/op
                 runFibonacci·p0.50:   5.200 us/op
                 runFibonacci·p0.90:   5.280 us/op
                 runFibonacci·p0.95:   5.312 us/op
                 runFibonacci·p0.99:   6.040 us/op
                 runFibonacci·p0.999:  19.734 us/op
                 runFibonacci·p0.9999: 161.495 us/op
                 runFibonacci·p1.00:   299.520 us/op

Iteration   5: 5.324 ±(99.9%) 0.018 us/op
                 runFibonacci·p0.00:   5.064 us/op
                 runFibonacci·p0.50:   5.208 us/op
                 runFibonacci·p0.90:   5.312 us/op
                 runFibonacci·p0.95:   5.336 us/op
                 runFibonacci·p0.99:   6.064 us/op
                 runFibonacci·p0.999:  18.496 us/op
                 runFibonacci·p0.9999: 160.695 us/op
                 runFibonacci·p1.00:   424.448 us/op

Iteration   6: 5.336 ±(99.9%) 0.019 us/op
                 runFibonacci·p0.00:   5.064 us/op
                 runFibonacci·p0.50:   5.208 us/op
                 runFibonacci·p0.90:   5.304 us/op
                 runFibonacci·p0.95:   5.320 us/op
                 runFibonacci·p0.99:   6.168 us/op
                 runFibonacci·p0.999:  20.672 us/op
                 runFibonacci·p0.9999: 167.003 us/op
                 runFibonacci·p1.00:   286.720 us/op

Iteration   7: 5.321 ±(99.9%) 0.018 us/op
                 runFibonacci·p0.00:   5.056 us/op
                 runFibonacci·p0.50:   5.200 us/op
                 runFibonacci·p0.90:   5.288 us/op
                 runFibonacci·p0.95:   5.312 us/op
                 runFibonacci·p0.99:   6.355 us/op
                 runFibonacci·p0.999:  18.976 us/op
                 runFibonacci·p0.9999: 165.717 us/op
                 runFibonacci·p1.00:   236.800 us/op

Iteration   8: 5.344 ±(99.9%) 0.020 us/op
                 runFibonacci·p0.00:   5.064 us/op
                 runFibonacci·p0.50:   5.216 us/op
                 runFibonacci·p0.90:   5.304 us/op
                 runFibonacci·p0.95:   5.328 us/op
                 runFibonacci·p0.99:   6.436 us/op
                 runFibonacci·p0.999:  20.638 us/op
                 runFibonacci·p0.9999: 166.743 us/op
                 runFibonacci·p1.00:   282.624 us/op

Iteration   9: 5.309 ±(99.9%) 0.019 us/op
                 runFibonacci·p0.00:   5.056 us/op
                 runFibonacci·p0.50:   5.192 us/op
                 runFibonacci·p0.90:   5.256 us/op
                 runFibonacci·p0.95:   5.288 us/op
                 runFibonacci·p0.99:   6.112 us/op
                 runFibonacci·p0.999:  19.317 us/op
                 runFibonacci·p0.9999: 171.928 us/op
                 runFibonacci·p1.00:   402.944 us/op

Iteration  10: 5.332 ±(99.9%) 0.021 us/op
                 runFibonacci·p0.00:   5.056 us/op
                 runFibonacci·p0.50:   5.200 us/op
                 runFibonacci·p0.90:   5.296 us/op
                 runFibonacci·p0.95:   5.320 us/op
                 runFibonacci·p0.99:   6.128 us/op
                 runFibonacci·p0.999:  21.358 us/op
                 runFibonacci·p0.9999: 175.279 us/op
                 runFibonacci·p1.00:   372.224 us/op

Iteration  11: 5.326 ±(99.9%) 0.020 us/op
                 runFibonacci·p0.00:   5.064 us/op
                 runFibonacci·p0.50:   5.200 us/op
                 runFibonacci·p0.90:   5.272 us/op
                 runFibonacci·p0.95:   5.304 us/op
                 runFibonacci·p0.99:   6.296 us/op
                 runFibonacci·p0.999:  21.669 us/op
                 runFibonacci·p0.9999: 173.647 us/op
                 runFibonacci·p1.00:   289.792 us/op

Iteration  12: 5.311 ±(99.9%) 0.018 us/op
                 runFibonacci·p0.00:   5.064 us/op
                 runFibonacci·p0.50:   5.200 us/op
                 runFibonacci·p0.90:   5.272 us/op
                 runFibonacci·p0.95:   5.304 us/op
                 runFibonacci·p0.99:   6.056 us/op
                 runFibonacci·p0.999:  20.064 us/op
                 runFibonacci·p0.9999: 159.890 us/op
                 runFibonacci·p1.00:   286.720 us/op

Iteration  13: 5.349 ±(99.9%) 0.058 us/op
                 runFibonacci·p0.00:   5.056 us/op
                 runFibonacci·p0.50:   5.200 us/op
                 runFibonacci·p0.90:   5.288 us/op
                 runFibonacci·p0.95:   5.312 us/op
                 runFibonacci·p0.99:   6.121 us/op
                 runFibonacci·p0.999:  21.258 us/op
                 runFibonacci·p0.9999: 180.479 us/op
                 runFibonacci·p1.00:   3878.912 us/op

Iteration  14: 5.337 ±(99.9%) 0.021 us/op
                 runFibonacci·p0.00:   5.048 us/op
                 runFibonacci·p0.50:   5.208 us/op
                 runFibonacci·p0.90:   5.304 us/op
                 runFibonacci·p0.95:   5.328 us/op
                 runFibonacci·p0.99:   6.088 us/op
                 runFibonacci·p0.999:  20.299 us/op
                 runFibonacci·p0.9999: 159.744 us/op
                 runFibonacci·p1.00:   445.440 us/op

Iteration  15: 5.313 ±(99.9%) 0.018 us/op
                 runFibonacci·p0.00:   5.064 us/op
                 runFibonacci·p0.50:   5.200 us/op
                 runFibonacci·p0.90:   5.272 us/op
                 runFibonacci·p0.95:   5.304 us/op
                 runFibonacci·p0.99:   6.128 us/op
                 runFibonacci·p0.999:  19.743 us/op
                 runFibonacci·p0.9999: 162.200 us/op
                 runFibonacci·p1.00:   243.456 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 3551042
  mean =      5.326 ±(99.9%) 0.006 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 3551002 
    [ 250.000,  500.000) = 39 
    [ 500.000,  750.000) = 0 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 
    [2750.000, 3000.000) = 0 
    [3000.000, 3250.000) = 0 
    [3250.000, 3500.000) = 0 
    [3500.000, 3750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      5.040 us/op
     p(50.0000) =      5.200 us/op
     p(90.0000) =      5.296 us/op
     p(95.0000) =      5.320 us/op
     p(99.0000) =      6.120 us/op
     p(99.9000) =     20.096 us/op
     p(99.9900) =    165.888 us/op
     p(99.9990) =    258.805 us/op
     p(99.9999) =    430.195 us/op
    p(100.0000) =   3878.912 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 81.88% complete, ETA 01:32:54
# Fork: 1 of 1
# Warmup Iteration   1: 9.096 ±(99.9%) 0.023 us/op
# Warmup Iteration   2: 9.096 ±(99.9%) 0.022 us/op
# Warmup Iteration   3: 9.051 ±(99.9%) 0.021 us/op
# Warmup Iteration   4: 9.079 ±(99.9%) 0.024 us/op
# Warmup Iteration   5: 9.072 ±(99.9%) 0.023 us/op
Iteration   1: 9.065 ±(99.9%) 0.021 us/op
                 runFibonacci·p0.00:   8.640 us/op
                 runFibonacci·p0.50:   8.880 us/op
                 runFibonacci·p0.90:   9.008 us/op
                 runFibonacci·p0.95:   9.056 us/op
                 runFibonacci·p0.99:   13.456 us/op
                 runFibonacci·p0.999:  26.392 us/op
                 runFibonacci·p0.9999: 189.280 us/op
                 runFibonacci·p1.00:   359.936 us/op

Iteration   2: 9.064 ±(99.9%) 0.022 us/op
                 runFibonacci·p0.00:   8.640 us/op
                 runFibonacci·p0.50:   8.880 us/op
                 runFibonacci·p0.90:   8.992 us/op
                 runFibonacci·p0.95:   9.040 us/op
                 runFibonacci·p0.99:   13.568 us/op
                 runFibonacci·p0.999:  28.402 us/op
                 runFibonacci·p0.9999: 186.039 us/op
                 runFibonacci·p1.00:   480.768 us/op

Iteration   3: 9.077 ±(99.9%) 0.022 us/op
                 runFibonacci·p0.00:   8.624 us/op
                 runFibonacci·p0.50:   8.880 us/op
                 runFibonacci·p0.90:   9.008 us/op
                 runFibonacci·p0.95:   9.056 us/op
                 runFibonacci·p0.99:   13.760 us/op
                 runFibonacci·p0.999:  28.352 us/op
                 runFibonacci·p0.9999: 183.140 us/op
                 runFibonacci·p1.00:   324.608 us/op

Iteration   4: 9.074 ±(99.9%) 0.021 us/op
                 runFibonacci·p0.00:   8.640 us/op
                 runFibonacci·p0.50:   8.880 us/op
                 runFibonacci·p0.90:   9.024 us/op
                 runFibonacci·p0.95:   9.056 us/op
                 runFibonacci·p0.99:   13.664 us/op
                 runFibonacci·p0.999:  28.320 us/op
                 runFibonacci·p0.9999: 183.142 us/op
                 runFibonacci·p1.00:   324.608 us/op

Iteration   5: 9.087 ±(99.9%) 0.029 us/op
                 runFibonacci·p0.00:   8.640 us/op
                 runFibonacci·p0.50:   8.880 us/op
                 runFibonacci·p0.90:   8.992 us/op
                 runFibonacci·p0.95:   9.040 us/op
                 runFibonacci·p0.99:   13.792 us/op
                 runFibonacci·p0.999:  28.704 us/op
                 runFibonacci·p0.9999: 209.364 us/op
                 runFibonacci·p1.00:   1339.392 us/op

Iteration   6: 9.071 ±(99.9%) 0.023 us/op
                 runFibonacci·p0.00:   8.640 us/op
                 runFibonacci·p0.50:   8.880 us/op
                 runFibonacci·p0.90:   8.992 us/op
                 runFibonacci·p0.95:   9.040 us/op
                 runFibonacci·p0.99:   13.760 us/op
                 runFibonacci·p0.999:  27.607 us/op
                 runFibonacci·p0.9999: 203.103 us/op
                 runFibonacci·p1.00:   290.816 us/op

Iteration   7: 9.060 ±(99.9%) 0.023 us/op
                 runFibonacci·p0.00:   8.640 us/op
                 runFibonacci·p0.50:   8.880 us/op
                 runFibonacci·p0.90:   8.976 us/op
                 runFibonacci·p0.95:   9.024 us/op
                 runFibonacci·p0.99:   13.680 us/op
                 runFibonacci·p0.999:  26.592 us/op
                 runFibonacci·p0.9999: 199.949 us/op
                 runFibonacci·p1.00:   518.144 us/op

Iteration   8: 9.075 ±(99.9%) 0.023 us/op
                 runFibonacci·p0.00:   8.640 us/op
                 runFibonacci·p0.50:   8.880 us/op
                 runFibonacci·p0.90:   8.992 us/op
                 runFibonacci·p0.95:   9.056 us/op
                 runFibonacci·p0.99:   13.792 us/op
                 runFibonacci·p0.999:  27.842 us/op
                 runFibonacci·p0.9999: 198.258 us/op
                 runFibonacci·p1.00:   324.096 us/op

Iteration   9: 9.076 ±(99.9%) 0.022 us/op
                 runFibonacci·p0.00:   8.592 us/op
                 runFibonacci·p0.50:   8.880 us/op
                 runFibonacci·p0.90:   8.992 us/op
                 runFibonacci·p0.95:   9.040 us/op
                 runFibonacci·p0.99:   14.032 us/op
                 runFibonacci·p0.999:  30.789 us/op
                 runFibonacci·p0.9999: 186.310 us/op
                 runFibonacci·p1.00:   589.824 us/op

Iteration  10: 9.060 ±(99.9%) 0.021 us/op
                 runFibonacci·p0.00:   8.608 us/op
                 runFibonacci·p0.50:   8.880 us/op
                 runFibonacci·p0.90:   8.976 us/op
                 runFibonacci·p0.95:   9.024 us/op
                 runFibonacci·p0.99:   13.793 us/op
                 runFibonacci·p0.999:  28.112 us/op
                 runFibonacci·p0.9999: 196.608 us/op
                 runFibonacci·p1.00:   329.216 us/op

Iteration  11: 9.059 ±(99.9%) 0.021 us/op
                 runFibonacci·p0.00:   8.624 us/op
                 runFibonacci·p0.50:   8.880 us/op
                 runFibonacci·p0.90:   8.976 us/op
                 runFibonacci·p0.95:   9.040 us/op
                 runFibonacci·p0.99:   13.744 us/op
                 runFibonacci·p0.999:  28.534 us/op
                 runFibonacci·p0.9999: 184.534 us/op
                 runFibonacci·p1.00:   318.464 us/op

Iteration  12: 9.072 ±(99.9%) 0.022 us/op
                 runFibonacci·p0.00:   8.592 us/op
                 runFibonacci·p0.50:   8.880 us/op
                 runFibonacci·p0.90:   9.008 us/op
                 runFibonacci·p0.95:   9.040 us/op
                 runFibonacci·p0.99:   13.872 us/op
                 runFibonacci·p0.999:  30.268 us/op
                 runFibonacci·p0.9999: 186.880 us/op
                 runFibonacci·p1.00:   339.456 us/op

Iteration  13: 9.086 ±(99.9%) 0.022 us/op
                 runFibonacci·p0.00:   8.640 us/op
                 runFibonacci·p0.50:   8.896 us/op
                 runFibonacci·p0.90:   9.024 us/op
                 runFibonacci·p0.95:   9.072 us/op
                 runFibonacci·p0.99:   13.680 us/op
                 runFibonacci·p0.999:  28.736 us/op
                 runFibonacci·p0.9999: 197.849 us/op
                 runFibonacci·p1.00:   367.616 us/op

Iteration  14: 9.090 ±(99.9%) 0.037 us/op
                 runFibonacci·p0.00:   8.624 us/op
                 runFibonacci·p0.50:   8.880 us/op
                 runFibonacci·p0.90:   9.008 us/op
                 runFibonacci·p0.95:   9.056 us/op
                 runFibonacci·p0.99:   14.016 us/op
                 runFibonacci·p0.999:  29.447 us/op
                 runFibonacci·p0.9999: 194.668 us/op
                 runFibonacci·p1.00:   2498.560 us/op

Iteration  15: 9.054 ±(99.9%) 0.021 us/op
                 runFibonacci·p0.00:   8.608 us/op
                 runFibonacci·p0.50:   8.864 us/op
                 runFibonacci·p0.90:   8.992 us/op
                 runFibonacci·p0.95:   9.040 us/op
                 runFibonacci·p0.99:   13.744 us/op
                 runFibonacci·p0.999:  27.727 us/op
                 runFibonacci·p0.9999: 187.225 us/op
                 runFibonacci·p1.00:   313.856 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 4142225
  mean =      9.071 ±(99.9%) 0.006 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 4142136 
    [ 250.000,  500.000) = 85 
    [ 500.000,  750.000) = 2 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 1 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 1 
    [2500.000, 2750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      8.592 us/op
     p(50.0000) =      8.880 us/op
     p(90.0000) =      9.008 us/op
     p(95.0000) =      9.056 us/op
     p(99.0000) =     13.760 us/op
     p(99.9000) =     28.320 us/op
     p(99.9900) =    193.223 us/op
     p(99.9990) =    287.824 us/op
     p(99.9999) =    512.828 us/op
    p(100.0000) =   2498.560 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 82.61% complete, ETA 01:29:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.102 ±(99.9%) 0.030 us/op
# Warmup Iteration   2: 0.090 ±(99.9%) 0.004 us/op
# Warmup Iteration   3: 0.088 ±(99.9%) 0.007 us/op
# Warmup Iteration   4: 0.097 ±(99.9%) 0.004 us/op
# Warmup Iteration   5: 0.102 ±(99.9%) 0.003 us/op
Iteration   1: 0.097 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.076 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.112 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.120 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.254 us/op
                 findLastPrefixUsingScanner1·p0.9999: 11.840 us/op
                 findLastPrefixUsingScanner1·p1.00:   193.024 us/op

Iteration   2: 0.097 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.076 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.112 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.121 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.260 us/op
                 findLastPrefixUsingScanner1·p0.9999: 10.185 us/op
                 findLastPrefixUsingScanner1·p1.00:   52.416 us/op

Iteration   3: 0.097 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.076 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.087 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.116 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.126 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.268 us/op
                 findLastPrefixUsingScanner1·p0.9999: 10.207 us/op
                 findLastPrefixUsingScanner1·p1.00:   152.320 us/op

Iteration   4: 0.100 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.078 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.083 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.118 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.120 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.132 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.280 us/op
                 findLastPrefixUsingScanner1·p0.9999: 10.132 us/op
                 findLastPrefixUsingScanner1·p1.00:   165.120 us/op

Iteration   5: 0.099 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.076 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.112 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.118 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.127 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.257 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.519 us/op
                 findLastPrefixUsingScanner1·p1.00:   271.872 us/op

Iteration   6: 0.096 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.076 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.118 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.127 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.263 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.760 us/op
                 findLastPrefixUsingScanner1·p1.00:   137.984 us/op

Iteration   7: 0.099 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.076 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.112 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.118 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.127 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.267 us/op
                 findLastPrefixUsingScanner1·p0.9999: 11.347 us/op
                 findLastPrefixUsingScanner1·p1.00:   200.448 us/op

Iteration   8: 0.106 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.079 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.085 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.114 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.120 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.136 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.357 us/op
                 findLastPrefixUsingScanner1·p0.9999: 13.282 us/op
                 findLastPrefixUsingScanner1·p1.00:   365.568 us/op

Iteration   9: 0.096 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.076 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.104 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.208 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.388 us/op
                 findLastPrefixUsingScanner1·p1.00:   204.544 us/op

Iteration  10: 0.097 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.076 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.104 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.110 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.238 us/op
                 findLastPrefixUsingScanner1·p0.9999: 10.506 us/op
                 findLastPrefixUsingScanner1·p1.00:   180.224 us/op

Iteration  11: 0.096 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.077 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.104 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.121 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.238 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.475 us/op
                 findLastPrefixUsingScanner1·p1.00:   193.280 us/op

Iteration  12: 0.097 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.078 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.084 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.122 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.222 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.143 us/op
                 findLastPrefixUsingScanner1·p1.00:   177.152 us/op

Iteration  13: 0.098 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.076 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.104 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.279 us/op
                 findLastPrefixUsingScanner1·p0.9999: 11.364 us/op
                 findLastPrefixUsingScanner1·p1.00:   232.960 us/op

Iteration  14: 0.096 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.076 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.117 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.126 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.276 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.802 us/op
                 findLastPrefixUsingScanner1·p1.00:   181.248 us/op

Iteration  15: 0.098 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.076 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.114 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.125 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.329 us/op
                 findLastPrefixUsingScanner1·p0.9999: 10.416 us/op
                 findLastPrefixUsingScanner1·p1.00:   215.552 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 4977078
  mean =      0.098 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 4976967 
    [ 25.000,  50.000) = 40 
    [ 50.000,  75.000) = 10 
    [ 75.000, 100.000) = 5 
    [100.000, 125.000) = 2 
    [125.000, 150.000) = 18 
    [150.000, 175.000) = 19 
    [175.000, 200.000) = 9 
    [200.000, 225.000) = 4 
    [225.000, 250.000) = 1 
    [250.000, 275.000) = 1 
    [275.000, 300.000) = 0 
    [300.000, 325.000) = 1 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      0.076 us/op
     p(50.0000) =      0.083 us/op
     p(90.0000) =      0.111 us/op
     p(95.0000) =      0.117 us/op
     p(99.0000) =      0.126 us/op
     p(99.9000) =      0.261 us/op
     p(99.9900) =     10.261 us/op
     p(99.9990) =    138.987 us/op
     p(99.9999) =    215.951 us/op
    p(100.0000) =    365.568 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 83.33% complete, ETA 01:25:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.478 ±(99.9%) 0.006 us/op
# Warmup Iteration   2: 0.473 ±(99.9%) 0.007 us/op
# Warmup Iteration   3: 0.414 ±(99.9%) 0.009 us/op
# Warmup Iteration   4: 0.423 ±(99.9%) 0.010 us/op
# Warmup Iteration   5: 0.422 ±(99.9%) 0.009 us/op
Iteration   1: 0.412 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.371 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.385 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.399 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.408 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.432 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.337 us/op
                 findLastPrefixUsingScanner1·p0.9999: 19.131 us/op
                 findLastPrefixUsingScanner1·p1.00:   211.200 us/op

Iteration   2: 0.450 ±(99.9%) 0.058 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.370 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.398 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.412 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.421 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.455 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.652 us/op
                 findLastPrefixUsingScanner1·p0.9999: 33.803 us/op
                 findLastPrefixUsingScanner1·p1.00:   3780.608 us/op

Iteration   3: 0.414 ±(99.9%) 0.010 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.369 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.382 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.391 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.393 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.426 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.247 us/op
                 findLastPrefixUsingScanner1·p0.9999: 25.470 us/op
                 findLastPrefixUsingScanner1·p1.00:   360.448 us/op

Iteration   4: 0.413 ±(99.9%) 0.010 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.369 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.382 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.392 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.393 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.440 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.249 us/op
                 findLastPrefixUsingScanner1·p0.9999: 27.435 us/op
                 findLastPrefixUsingScanner1·p1.00:   261.376 us/op

Iteration   5: 0.415 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.375 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.389 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.400 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.402 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.434 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.829 us/op
                 findLastPrefixUsingScanner1·p0.9999: 22.192 us/op
                 findLastPrefixUsingScanner1·p1.00:   196.608 us/op

Iteration   6: 0.414 ±(99.9%) 0.010 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.369 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.382 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.391 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.393 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.422 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.009 us/op
                 findLastPrefixUsingScanner1·p0.9999: 36.836 us/op
                 findLastPrefixUsingScanner1·p1.00:   376.320 us/op

Iteration   7: 0.414 ±(99.9%) 0.010 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.370 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.383 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.392 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.393 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.425 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.763 us/op
                 findLastPrefixUsingScanner1·p0.9999: 32.399 us/op
                 findLastPrefixUsingScanner1·p1.00:   262.656 us/op

Iteration   8: 0.428 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.383 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.398 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.410 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.411 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.442 us/op
                 findLastPrefixUsingScanner1·p0.999:  7.024 us/op
                 findLastPrefixUsingScanner1·p0.9999: 25.427 us/op
                 findLastPrefixUsingScanner1·p1.00:   181.760 us/op

Iteration   9: 0.410 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.370 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.383 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.392 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.394 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.435 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.093 us/op
                 findLastPrefixUsingScanner1·p0.9999: 25.075 us/op
                 findLastPrefixUsingScanner1·p1.00:   188.160 us/op

Iteration  10: 0.413 ±(99.9%) 0.010 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.370 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.383 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.391 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.393 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.426 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.896 us/op
                 findLastPrefixUsingScanner1·p0.9999: 27.717 us/op
                 findLastPrefixUsingScanner1·p1.00:   283.648 us/op

Iteration  11: 0.414 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.375 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.389 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.400 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.402 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.436 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.113 us/op
                 findLastPrefixUsingScanner1·p0.9999: 18.808 us/op
                 findLastPrefixUsingScanner1·p1.00:   165.632 us/op

Iteration  12: 0.410 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.369 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.382 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.391 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.393 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.426 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.291 us/op
                 findLastPrefixUsingScanner1·p0.9999: 26.674 us/op
                 findLastPrefixUsingScanner1·p1.00:   191.232 us/op

Iteration  13: 0.412 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.370 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.383 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.393 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.394 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.439 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.139 us/op
                 findLastPrefixUsingScanner1·p0.9999: 29.136 us/op
                 findLastPrefixUsingScanner1·p1.00:   201.472 us/op

Iteration  14: 0.410 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.369 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.382 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.391 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.393 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.428 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.598 us/op
                 findLastPrefixUsingScanner1·p0.9999: 20.959 us/op
                 findLastPrefixUsingScanner1·p1.00:   237.312 us/op

Iteration  15: 0.410 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.370 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.383 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.392 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.393 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.427 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.003 us/op
                 findLastPrefixUsingScanner1·p0.9999: 19.006 us/op
                 findLastPrefixUsingScanner1·p1.00:   240.384 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 3276316
  mean =      0.416 ±(99.9%) 0.004 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 3276309 
    [ 250.000,  500.000) = 6 
    [ 500.000,  750.000) = 0 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 
    [2750.000, 3000.000) = 0 
    [3000.000, 3250.000) = 0 
    [3250.000, 3500.000) = 0 
    [3500.000, 3750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.369 us/op
     p(50.0000) =      0.385 us/op
     p(90.0000) =      0.399 us/op
     p(95.0000) =      0.407 us/op
     p(99.0000) =      0.437 us/op
     p(99.9000) =      6.253 us/op
     p(99.9900) =     25.120 us/op
     p(99.9990) =    180.136 us/op
     p(99.9999) =    350.686 us/op
    p(100.0000) =   3780.608 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 84.06% complete, ETA 01:21:41
# Fork: 1 of 1
# Warmup Iteration   1: 4.520 ±(99.9%) 0.024 us/op
# Warmup Iteration   2: 4.553 ±(99.9%) 0.018 us/op
# Warmup Iteration   3: 4.531 ±(99.9%) 0.019 us/op
# Warmup Iteration   4: 4.515 ±(99.9%) 0.018 us/op
# Warmup Iteration   5: 4.455 ±(99.9%) 0.033 us/op
Iteration   1: 4.460 ±(99.9%) 0.018 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.248 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.344 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.368 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.384 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.914 us/op
                 findLastPrefixUsingScanner1·p0.999:  19.981 us/op
                 findLastPrefixUsingScanner1·p0.9999: 180.041 us/op
                 findLastPrefixUsingScanner1·p1.00:   368.128 us/op

Iteration   2: 4.558 ±(99.9%) 0.018 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.352 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.448 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.480 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.504 us/op
                 findLastPrefixUsingScanner1·p0.99:   6.016 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.697 us/op
                 findLastPrefixUsingScanner1·p0.9999: 180.305 us/op
                 findLastPrefixUsingScanner1·p1.00:   358.400 us/op

Iteration   3: 4.486 ±(99.9%) 0.018 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.280 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.376 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.400 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.416 us/op
                 findLastPrefixUsingScanner1·p0.99:   6.001 us/op
                 findLastPrefixUsingScanner1·p0.999:  19.104 us/op
                 findLastPrefixUsingScanner1·p0.9999: 187.863 us/op
                 findLastPrefixUsingScanner1·p1.00:   327.680 us/op

Iteration   4: 4.468 ±(99.9%) 0.018 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.264 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.360 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.384 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.400 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.912 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.106 us/op
                 findLastPrefixUsingScanner1·p0.9999: 178.012 us/op
                 findLastPrefixUsingScanner1·p1.00:   295.424 us/op

Iteration   5: 4.405 ±(99.9%) 0.016 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.200 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.296 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.320 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.360 us/op
                 findLastPrefixUsingScanner1·p0.99:   6.169 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.816 us/op
                 findLastPrefixUsingScanner1·p0.9999: 177.252 us/op
                 findLastPrefixUsingScanner1·p1.00:   269.312 us/op

Iteration   6: 4.475 ±(99.9%) 0.018 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.280 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.360 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.384 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.408 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.864 us/op
                 findLastPrefixUsingScanner1·p0.999:  19.669 us/op
                 findLastPrefixUsingScanner1·p0.9999: 184.320 us/op
                 findLastPrefixUsingScanner1·p1.00:   352.256 us/op

Iteration   7: 4.431 ±(99.9%) 0.019 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.224 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.304 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.328 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.360 us/op
                 findLastPrefixUsingScanner1·p0.99:   6.200 us/op
                 findLastPrefixUsingScanner1·p0.999:  20.813 us/op
                 findLastPrefixUsingScanner1·p0.9999: 187.362 us/op
                 findLastPrefixUsingScanner1·p1.00:   276.480 us/op

Iteration   8: 4.411 ±(99.9%) 0.018 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.224 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.296 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.320 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.336 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.864 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.464 us/op
                 findLastPrefixUsingScanner1·p0.9999: 185.355 us/op
                 findLastPrefixUsingScanner1·p1.00:   356.864 us/op

Iteration   9: 4.511 ±(99.9%) 0.019 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.280 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.392 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.432 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.456 us/op
                 findLastPrefixUsingScanner1·p0.99:   6.895 us/op
                 findLastPrefixUsingScanner1·p0.999:  19.136 us/op
                 findLastPrefixUsingScanner1·p0.9999: 178.164 us/op
                 findLastPrefixUsingScanner1·p1.00:   407.040 us/op

Iteration  10: 4.490 ±(99.9%) 0.019 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.280 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.368 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.392 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.424 us/op
                 findLastPrefixUsingScanner1·p0.99:   6.344 us/op
                 findLastPrefixUsingScanner1·p0.999:  20.128 us/op
                 findLastPrefixUsingScanner1·p0.9999: 190.067 us/op
                 findLastPrefixUsingScanner1·p1.00:   278.016 us/op

Iteration  11: 4.569 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.376 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.472 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.504 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.520 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.808 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.962 us/op
                 findLastPrefixUsingScanner1·p0.9999: 177.237 us/op
                 findLastPrefixUsingScanner1·p1.00:   313.856 us/op

Iteration  12: 4.465 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.272 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.360 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.392 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.408 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.944 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.888 us/op
                 findLastPrefixUsingScanner1·p0.9999: 181.768 us/op
                 findLastPrefixUsingScanner1·p1.00:   372.736 us/op

Iteration  13: 4.453 ±(99.9%) 0.018 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.248 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.336 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.360 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.376 us/op
                 findLastPrefixUsingScanner1·p0.99:   6.049 us/op
                 findLastPrefixUsingScanner1·p0.999:  19.783 us/op
                 findLastPrefixUsingScanner1·p0.9999: 177.567 us/op
                 findLastPrefixUsingScanner1·p1.00:   343.552 us/op

Iteration  14: 4.457 ±(99.9%) 0.021 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.256 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.344 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.368 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.384 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.912 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.112 us/op
                 findLastPrefixUsingScanner1·p0.9999: 189.167 us/op
                 findLastPrefixUsingScanner1·p1.00:   458.240 us/op

Iteration  15: 4.471 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.280 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.360 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.384 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.400 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.984 us/op
                 findLastPrefixUsingScanner1·p0.999:  19.256 us/op
                 findLastPrefixUsingScanner1·p0.9999: 179.398 us/op
                 findLastPrefixUsingScanner1·p1.00:   306.688 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 4235794
  mean =      4.474 ±(99.9%) 0.005 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 4234546 
    [ 50.000, 100.000) = 261 
    [100.000, 150.000) = 182 
    [150.000, 200.000) = 603 
    [200.000, 250.000) = 139 
    [250.000, 300.000) = 43 
    [300.000, 350.000) = 9 
    [350.000, 400.000) = 9 
    [400.000, 450.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      4.200 us/op
     p(50.0000) =      4.360 us/op
     p(90.0000) =      4.456 us/op
     p(95.0000) =      4.480 us/op
     p(99.0000) =      6.008 us/op
     p(99.9000) =     19.008 us/op
     p(99.9900) =    181.760 us/op
     p(99.9990) =    267.593 us/op
     p(99.9999) =    385.652 us/op
    p(100.0000) =    458.240 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 84.78% complete, ETA 01:17:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.093 ±(99.9%) 0.020 us/op
# Warmup Iteration   2: 0.092 ±(99.9%) 0.003 us/op
# Warmup Iteration   3: 0.097 ±(99.9%) 0.003 us/op
# Warmup Iteration   4: 0.101 ±(99.9%) 0.004 us/op
# Warmup Iteration   5: 0.097 ±(99.9%) 0.002 us/op
Iteration   1: 0.100 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.074 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.111 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.116 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.269 us/op
                 findLastPrefixUsingScanner2·p0.9999: 12.309 us/op
                 findLastPrefixUsingScanner2·p1.00:   241.152 us/op

Iteration   2: 0.097 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.074 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.112 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.116 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.118 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.256 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.722 us/op
                 findLastPrefixUsingScanner2·p1.00:   132.096 us/op

Iteration   3: 0.099 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.074 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.113 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.117 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.257 us/op
                 findLastPrefixUsingScanner2·p0.9999: 10.844 us/op
                 findLastPrefixUsingScanner2·p1.00:   247.040 us/op

Iteration   4: 0.101 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.075 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.090 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.115 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.119 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.123 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.279 us/op
                 findLastPrefixUsingScanner2·p0.9999: 10.697 us/op
                 findLastPrefixUsingScanner2·p1.00:   151.040 us/op

Iteration   5: 0.099 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.074 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.114 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.117 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.241 us/op
                 findLastPrefixUsingScanner2·p0.9999: 10.312 us/op
                 findLastPrefixUsingScanner2·p1.00:   199.168 us/op

Iteration   6: 0.097 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.074 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.113 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.116 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.242 us/op
                 findLastPrefixUsingScanner2·p0.9999: 9.307 us/op
                 findLastPrefixUsingScanner2·p1.00:   222.976 us/op

Iteration   7: 0.099 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.074 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.111 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.116 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.248 us/op
                 findLastPrefixUsingScanner2·p0.9999: 10.733 us/op
                 findLastPrefixUsingScanner2·p1.00:   194.048 us/op

Iteration   8: 0.099 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.074 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.114 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.117 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.120 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.246 us/op
                 findLastPrefixUsingScanner2·p0.9999: 10.056 us/op
                 findLastPrefixUsingScanner2·p1.00:   261.888 us/op

Iteration   9: 0.099 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.074 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.089 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.115 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.117 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.231 us/op
                 findLastPrefixUsingScanner2·p0.9999: 11.463 us/op
                 findLastPrefixUsingScanner2·p1.00:   162.304 us/op

Iteration  10: 0.098 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.074 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.116 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.124 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.254 us/op
                 findLastPrefixUsingScanner2·p0.9999: 9.529 us/op
                 findLastPrefixUsingScanner2·p1.00:   253.952 us/op

Iteration  11: 0.097 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.074 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.116 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.231 us/op
                 findLastPrefixUsingScanner2·p0.9999: 9.424 us/op
                 findLastPrefixUsingScanner2·p1.00:   180.736 us/op

Iteration  12: 0.099 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.074 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.114 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.117 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.122 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.264 us/op
                 findLastPrefixUsingScanner2·p0.9999: 10.541 us/op
                 findLastPrefixUsingScanner2·p1.00:   272.896 us/op

Iteration  13: 0.099 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.074 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.116 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.117 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.225 us/op
                 findLastPrefixUsingScanner2·p0.9999: 9.648 us/op
                 findLastPrefixUsingScanner2·p1.00:   206.080 us/op

Iteration  14: 0.100 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.074 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.114 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.117 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.248 us/op
                 findLastPrefixUsingScanner2·p0.9999: 10.761 us/op
                 findLastPrefixUsingScanner2·p1.00:   172.544 us/op

Iteration  15: 0.099 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.074 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.110 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.116 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.122 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.258 us/op
                 findLastPrefixUsingScanner2·p0.9999: 12.137 us/op
                 findLastPrefixUsingScanner2·p1.00:   249.344 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 5497065
  mean =      0.099 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 5496964 
    [ 25.000,  50.000) = 32 
    [ 50.000,  75.000) = 10 
    [ 75.000, 100.000) = 4 
    [100.000, 125.000) = 8 
    [125.000, 150.000) = 16 
    [150.000, 175.000) = 13 
    [175.000, 200.000) = 7 
    [200.000, 225.000) = 3 
    [225.000, 250.000) = 5 
    [250.000, 275.000) = 3 

  Percentiles, us/op:
      p(0.0000) =      0.074 us/op
     p(50.0000) =      0.088 us/op
     p(90.0000) =      0.114 us/op
     p(95.0000) =      0.117 us/op
     p(99.0000) =      0.121 us/op
     p(99.9000) =      0.249 us/op
     p(99.9900) =     10.197 us/op
     p(99.9990) =    100.898 us/op
     p(99.9999) =    244.113 us/op
    p(100.0000) =    272.896 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 85.50% complete, ETA 01:14:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.490 ±(99.9%) 0.009 us/op
# Warmup Iteration   2: 0.455 ±(99.9%) 0.006 us/op
# Warmup Iteration   3: 0.457 ±(99.9%) 0.013 us/op
# Warmup Iteration   4: 0.446 ±(99.9%) 0.006 us/op
# Warmup Iteration   5: 0.448 ±(99.9%) 0.009 us/op
Iteration   1: 0.443 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.411 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.426 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.439 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.445 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.459 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.318 us/op
                 findLastPrefixUsingScanner2·p0.9999: 15.439 us/op
                 findLastPrefixUsingScanner2·p1.00:   206.080 us/op

Iteration   2: 0.447 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.405 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.417 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.430 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.437 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.461 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.513 us/op
                 findLastPrefixUsingScanner2·p0.9999: 41.474 us/op
                 findLastPrefixUsingScanner2·p1.00:   189.440 us/op

Iteration   3: 0.447 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.411 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.426 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.439 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.445 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.491 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.424 us/op
                 findLastPrefixUsingScanner2·p0.9999: 18.131 us/op
                 findLastPrefixUsingScanner2·p1.00:   273.920 us/op

Iteration   4: 0.451 ±(99.9%) 0.010 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.404 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.417 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.431 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.438 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.490 us/op
                 findLastPrefixUsingScanner2·p0.999:  7.749 us/op
                 findLastPrefixUsingScanner2·p0.9999: 32.456 us/op
                 findLastPrefixUsingScanner2·p1.00:   254.464 us/op

Iteration   5: 0.455 ±(99.9%) 0.011 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.405 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.417 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.431 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.434 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.477 us/op
                 findLastPrefixUsingScanner2·p0.999:  8.066 us/op
                 findLastPrefixUsingScanner2·p0.9999: 50.272 us/op
                 findLastPrefixUsingScanner2·p1.00:   226.048 us/op

Iteration   6: 0.449 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.405 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.418 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.431 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.437 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.460 us/op
                 findLastPrefixUsingScanner2·p0.999:  7.554 us/op
                 findLastPrefixUsingScanner2·p0.9999: 28.210 us/op
                 findLastPrefixUsingScanner2·p1.00:   179.712 us/op

Iteration   7: 0.448 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.404 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.417 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.430 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.432 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.483 us/op
                 findLastPrefixUsingScanner2·p0.999:  7.757 us/op
                 findLastPrefixUsingScanner2·p0.9999: 28.545 us/op
                 findLastPrefixUsingScanner2·p1.00:   179.200 us/op

Iteration   8: 0.450 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.406 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.419 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.432 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.434 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.468 us/op
                 findLastPrefixUsingScanner2·p0.999:  7.519 us/op
                 findLastPrefixUsingScanner2·p0.9999: 23.012 us/op
                 findLastPrefixUsingScanner2·p1.00:   183.808 us/op

Iteration   9: 0.446 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.406 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.419 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.432 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.438 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.456 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.056 us/op
                 findLastPrefixUsingScanner2·p0.9999: 21.616 us/op
                 findLastPrefixUsingScanner2·p1.00:   187.648 us/op

Iteration  10: 0.446 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.405 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.418 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.431 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.432 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.450 us/op
                 findLastPrefixUsingScanner2·p0.999:  7.154 us/op
                 findLastPrefixUsingScanner2·p0.9999: 21.620 us/op
                 findLastPrefixUsingScanner2·p1.00:   171.264 us/op

Iteration  11: 0.450 ±(99.9%) 0.010 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.405 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.418 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.431 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.438 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.479 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.760 us/op
                 findLastPrefixUsingScanner2·p0.9999: 28.485 us/op
                 findLastPrefixUsingScanner2·p1.00:   192.768 us/op

Iteration  12: 0.447 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.404 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.417 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.430 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.432 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.453 us/op
                 findLastPrefixUsingScanner2·p0.999:  7.258 us/op
                 findLastPrefixUsingScanner2·p0.9999: 25.411 us/op
                 findLastPrefixUsingScanner2·p1.00:   219.904 us/op

Iteration  13: 0.454 ±(99.9%) 0.012 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.404 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.417 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.430 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.432 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.479 us/op
                 findLastPrefixUsingScanner2·p0.999:  7.771 us/op
                 findLastPrefixUsingScanner2·p0.9999: 47.814 us/op
                 findLastPrefixUsingScanner2·p1.00:   396.800 us/op

Iteration  14: 0.443 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.406 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.419 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.435 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.440 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.451 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.539 us/op
                 findLastPrefixUsingScanner2·p0.9999: 27.004 us/op
                 findLastPrefixUsingScanner2·p1.00:   304.640 us/op

Iteration  15: 0.436 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.405 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.418 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.431 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.438 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.446 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.367 us/op
                 findLastPrefixUsingScanner2·p0.9999: 18.235 us/op
                 findLastPrefixUsingScanner2·p1.00:   297.984 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 3762422
  mean =      0.446 ±(99.9%) 0.002 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 3762059 
    [ 25.000,  50.000) = 141 
    [ 50.000,  75.000) = 34 
    [ 75.000, 100.000) = 17 
    [100.000, 125.000) = 20 
    [125.000, 150.000) = 61 
    [150.000, 175.000) = 59 
    [175.000, 200.000) = 19 
    [200.000, 225.000) = 6 
    [225.000, 250.000) = 1 
    [250.000, 275.000) = 2 
    [275.000, 300.000) = 1 
    [300.000, 325.000) = 1 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.404 us/op
     p(50.0000) =      0.419 us/op
     p(90.0000) =      0.432 us/op
     p(95.0000) =      0.439 us/op
     p(99.0000) =      0.464 us/op
     p(99.9000) =      5.768 us/op
     p(99.9900) =     24.377 us/op
     p(99.9990) =    171.264 us/op
     p(99.9999) =    279.637 us/op
    p(100.0000) =    396.800 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 86.23% complete, ETA 01:10:29
# Fork: 1 of 1
# Warmup Iteration   1: 3.933 ±(99.9%) 0.017 us/op
# Warmup Iteration   2: 4.461 ±(99.9%) 0.017 us/op
# Warmup Iteration   3: 4.550 ±(99.9%) 0.019 us/op
# Warmup Iteration   4: 4.729 ±(99.9%) 0.027 us/op
# Warmup Iteration   5: 4.620 ±(99.9%) 0.019 us/op
Iteration   1: 4.558 ±(99.9%) 0.019 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.400 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.448 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.456 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.480 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.208 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.207 us/op
                 findLastPrefixUsingScanner2·p0.9999: 186.880 us/op
                 findLastPrefixUsingScanner2·p1.00:   415.744 us/op

Iteration   2: 4.481 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.336 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.376 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.392 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.416 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.056 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.048 us/op
                 findLastPrefixUsingScanner2·p0.9999: 186.460 us/op
                 findLastPrefixUsingScanner2·p1.00:   310.784 us/op

Iteration   3: 4.515 ±(99.9%) 0.016 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.352 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.416 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.432 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.448 us/op
                 findLastPrefixUsingScanner2·p0.99:   5.792 us/op
                 findLastPrefixUsingScanner2·p0.999:  19.089 us/op
                 findLastPrefixUsingScanner2·p0.9999: 174.801 us/op
                 findLastPrefixUsingScanner2·p1.00:   253.184 us/op

Iteration   4: 4.578 ±(99.9%) 0.055 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.392 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.440 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.456 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.488 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.541 us/op
                 findLastPrefixUsingScanner2·p0.999:  21.760 us/op
                 findLastPrefixUsingScanner2·p0.9999: 173.109 us/op
                 findLastPrefixUsingScanner2·p1.00:   3489.792 us/op

Iteration   5: 4.556 ±(99.9%) 0.020 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.368 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.424 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.448 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.488 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.540 us/op
                 findLastPrefixUsingScanner2·p0.999:  22.784 us/op
                 findLastPrefixUsingScanner2·p0.9999: 186.938 us/op
                 findLastPrefixUsingScanner2·p1.00:   282.624 us/op

Iteration   6: 4.591 ±(99.9%) 0.021 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.392 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.456 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.488 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.520 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.144 us/op
                 findLastPrefixUsingScanner2·p0.999:  22.461 us/op
                 findLastPrefixUsingScanner2·p0.9999: 184.364 us/op
                 findLastPrefixUsingScanner2·p1.00:   390.144 us/op

Iteration   7: 4.520 ±(99.9%) 0.016 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.368 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.416 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.448 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.456 us/op
                 findLastPrefixUsingScanner2·p0.99:   5.927 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.624 us/op
                 findLastPrefixUsingScanner2·p0.9999: 169.803 us/op
                 findLastPrefixUsingScanner2·p1.00:   310.784 us/op

Iteration   8: 4.594 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.440 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.488 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.496 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.512 us/op
                 findLastPrefixUsingScanner2·p0.99:   5.984 us/op
                 findLastPrefixUsingScanner2·p0.999:  19.552 us/op
                 findLastPrefixUsingScanner2·p0.9999: 174.749 us/op
                 findLastPrefixUsingScanner2·p1.00:   276.992 us/op

Iteration   9: 4.596 ±(99.9%) 0.018 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.432 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.488 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.504 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.520 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.032 us/op
                 findLastPrefixUsingScanner2·p0.999:  20.160 us/op
                 findLastPrefixUsingScanner2·p0.9999: 180.206 us/op
                 findLastPrefixUsingScanner2·p1.00:   285.184 us/op

Iteration  10: 4.504 ±(99.9%) 0.016 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.360 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.408 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.416 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.432 us/op
                 findLastPrefixUsingScanner2·p0.99:   5.752 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.882 us/op
                 findLastPrefixUsingScanner2·p0.9999: 171.003 us/op
                 findLastPrefixUsingScanner2·p1.00:   266.240 us/op

Iteration  11: 4.528 ±(99.9%) 0.016 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.360 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.424 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.448 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.464 us/op
                 findLastPrefixUsingScanner2·p0.99:   5.809 us/op
                 findLastPrefixUsingScanner2·p0.999:  19.765 us/op
                 findLastPrefixUsingScanner2·p0.9999: 174.205 us/op
                 findLastPrefixUsingScanner2·p1.00:   297.472 us/op

Iteration  12: 4.587 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.408 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.472 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.496 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.504 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.040 us/op
                 findLastPrefixUsingScanner2·p0.999:  20.022 us/op
                 findLastPrefixUsingScanner2·p0.9999: 174.610 us/op
                 findLastPrefixUsingScanner2·p1.00:   270.336 us/op

Iteration  13: 4.560 ±(99.9%) 0.016 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.392 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.464 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.472 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.480 us/op
                 findLastPrefixUsingScanner2·p0.99:   5.792 us/op
                 findLastPrefixUsingScanner2·p0.999:  19.275 us/op
                 findLastPrefixUsingScanner2·p0.9999: 174.260 us/op
                 findLastPrefixUsingScanner2·p1.00:   254.208 us/op

Iteration  14: 4.492 ±(99.9%) 0.016 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.344 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.392 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.416 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.432 us/op
                 findLastPrefixUsingScanner2·p0.99:   5.920 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.154 us/op
                 findLastPrefixUsingScanner2·p0.9999: 171.758 us/op
                 findLastPrefixUsingScanner2·p1.00:   325.120 us/op

Iteration  15: 4.516 ±(99.9%) 0.040 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.352 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.392 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.400 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.448 us/op
                 findLastPrefixUsingScanner2·p0.99:   5.992 us/op
                 findLastPrefixUsingScanner2·p0.999:  20.122 us/op
                 findLastPrefixUsingScanner2·p0.9999: 188.595 us/op
                 findLastPrefixUsingScanner2·p1.00:   3043.328 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 4171178
  mean =      4.545 ±(99.9%) 0.006 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 4171134 
    [ 250.000,  500.000) = 41 
    [ 500.000,  750.000) = 0 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 1 
    [2750.000, 3000.000) = 0 
    [3000.000, 3250.000) = 1 
    [3250.000, 3500.000) = 1 
    [3500.000, 3750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      4.336 us/op
     p(50.0000) =      4.432 us/op
     p(90.0000) =      4.488 us/op
     p(95.0000) =      4.504 us/op
     p(99.0000) =      6.008 us/op
     p(99.9000) =     19.546 us/op
     p(99.9900) =    175.872 us/op
     p(99.9990) =    253.479 us/op
     p(99.9999) =    411.362 us/op
    p(100.0000) =   3489.792 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 86.95% complete, ETA 01:06:45
# Fork: 1 of 1
# Warmup Iteration   1: 14548.467 ±(99.9%) 80.841 us/op
# Warmup Iteration   2: 14510.755 ±(99.9%) 19.554 us/op
# Warmup Iteration   3: 14486.068 ±(99.9%) 15.112 us/op
# Warmup Iteration   4: 14532.036 ±(99.9%) 34.005 us/op
# Warmup Iteration   5: 14503.383 ±(99.9%) 16.623 us/op
Iteration   1: 14497.513 ±(99.9%) 17.130 us/op
                 runAlgorithm·p0.00:   14352.384 us/op
                 runAlgorithm·p0.50:   14434.304 us/op
                 runAlgorithm·p0.90:   14662.042 us/op
                 runAlgorithm·p0.95:   14761.984 us/op
                 runAlgorithm·p0.99:   15025.603 us/op
                 runAlgorithm·p0.999:  15368.192 us/op
                 runAlgorithm·p0.9999: 15368.192 us/op
                 runAlgorithm·p1.00:   15368.192 us/op

Iteration   2: 14507.925 ±(99.9%) 17.714 us/op
                 runAlgorithm·p0.00:   14352.384 us/op
                 runAlgorithm·p0.50:   14450.688 us/op
                 runAlgorithm·p0.90:   14680.064 us/op
                 runAlgorithm·p0.95:   14778.368 us/op
                 runAlgorithm·p0.99:   15089.664 us/op
                 runAlgorithm·p0.999:  15400.960 us/op
                 runAlgorithm·p0.9999: 15400.960 us/op
                 runAlgorithm·p1.00:   15400.960 us/op

Iteration   3: 14494.426 ±(99.9%) 15.561 us/op
                 runAlgorithm·p0.00:   14352.384 us/op
                 runAlgorithm·p0.50:   14434.304 us/op
                 runAlgorithm·p0.90:   14663.680 us/op
                 runAlgorithm·p0.95:   14712.832 us/op
                 runAlgorithm·p0.99:   14961.541 us/op
                 runAlgorithm·p0.999:  15433.728 us/op
                 runAlgorithm·p0.9999: 15433.728 us/op
                 runAlgorithm·p1.00:   15433.728 us/op

Iteration   4: 14509.090 ±(99.9%) 15.439 us/op
                 runAlgorithm·p0.00:   14336.000 us/op
                 runAlgorithm·p0.50:   14450.688 us/op
                 runAlgorithm·p0.90:   14663.680 us/op
                 runAlgorithm·p0.95:   14761.984 us/op
                 runAlgorithm·p0.99:   14929.101 us/op
                 runAlgorithm·p0.999:  15056.896 us/op
                 runAlgorithm·p0.9999: 15056.896 us/op
                 runAlgorithm·p1.00:   15056.896 us/op

Iteration   5: 14513.299 ±(99.9%) 18.796 us/op
                 runAlgorithm·p0.00:   14352.384 us/op
                 runAlgorithm·p0.50:   14467.072 us/op
                 runAlgorithm·p0.90:   14680.064 us/op
                 runAlgorithm·p0.95:   14761.984 us/op
                 runAlgorithm·p0.99:   14991.360 us/op
                 runAlgorithm·p0.999:  16334.848 us/op
                 runAlgorithm·p0.9999: 16334.848 us/op
                 runAlgorithm·p1.00:   16334.848 us/op

Iteration   6: 14519.173 ±(99.9%) 17.553 us/op
                 runAlgorithm·p0.00:   14336.000 us/op
                 runAlgorithm·p0.50:   14467.072 us/op
                 runAlgorithm·p0.90:   14696.448 us/op
                 runAlgorithm·p0.95:   14770.176 us/op
                 runAlgorithm·p0.99:   15043.789 us/op
                 runAlgorithm·p0.999:  15171.584 us/op
                 runAlgorithm·p0.9999: 15171.584 us/op
                 runAlgorithm·p1.00:   15171.584 us/op

Iteration   7: 14512.182 ±(99.9%) 16.300 us/op
                 runAlgorithm·p0.00:   14368.768 us/op
                 runAlgorithm·p0.50:   14467.072 us/op
                 runAlgorithm·p0.90:   14680.064 us/op
                 runAlgorithm·p0.95:   14745.600 us/op
                 runAlgorithm·p0.99:   14994.637 us/op
                 runAlgorithm·p0.999:  15400.960 us/op
                 runAlgorithm·p0.9999: 15400.960 us/op
                 runAlgorithm·p1.00:   15400.960 us/op

Iteration   8: 14511.468 ±(99.9%) 35.459 us/op
                 runAlgorithm·p0.00:   14352.384 us/op
                 runAlgorithm·p0.50:   14450.688 us/op
                 runAlgorithm·p0.90:   14663.680 us/op
                 runAlgorithm·p0.95:   14745.600 us/op
                 runAlgorithm·p0.99:   15011.021 us/op
                 runAlgorithm·p0.999:  20643.840 us/op
                 runAlgorithm·p0.9999: 20643.840 us/op
                 runAlgorithm·p1.00:   20643.840 us/op

Iteration   9: 14492.242 ±(99.9%) 16.061 us/op
                 runAlgorithm·p0.00:   14352.384 us/op
                 runAlgorithm·p0.50:   14434.304 us/op
                 runAlgorithm·p0.90:   14663.680 us/op
                 runAlgorithm·p0.95:   14745.600 us/op
                 runAlgorithm·p0.99:   14974.976 us/op
                 runAlgorithm·p0.999:  15155.200 us/op
                 runAlgorithm·p0.9999: 15155.200 us/op
                 runAlgorithm·p1.00:   15155.200 us/op

Iteration  10: 14486.044 ±(99.9%) 15.105 us/op
                 runAlgorithm·p0.00:   14352.384 us/op
                 runAlgorithm·p0.50:   14434.304 us/op
                 runAlgorithm·p0.90:   14647.296 us/op
                 runAlgorithm·p0.95:   14712.832 us/op
                 runAlgorithm·p0.99:   14943.683 us/op
                 runAlgorithm·p0.999:  15056.896 us/op
                 runAlgorithm·p0.9999: 15056.896 us/op
                 runAlgorithm·p1.00:   15056.896 us/op

Iteration  11: 14497.062 ±(99.9%) 17.301 us/op
                 runAlgorithm·p0.00:   14352.384 us/op
                 runAlgorithm·p0.50:   14434.304 us/op
                 runAlgorithm·p0.90:   14663.680 us/op
                 runAlgorithm·p0.95:   14745.600 us/op
                 runAlgorithm·p0.99:   15058.371 us/op
                 runAlgorithm·p0.999:  15253.504 us/op
                 runAlgorithm·p0.9999: 15253.504 us/op
                 runAlgorithm·p1.00:   15253.504 us/op

Iteration  12: 14518.626 ±(99.9%) 32.206 us/op
                 runAlgorithm·p0.00:   14336.000 us/op
                 runAlgorithm·p0.50:   14450.688 us/op
                 runAlgorithm·p0.90:   14696.448 us/op
                 runAlgorithm·p0.95:   14819.328 us/op
                 runAlgorithm·p0.99:   15127.347 us/op
                 runAlgorithm·p0.999:  18743.296 us/op
                 runAlgorithm·p0.9999: 18743.296 us/op
                 runAlgorithm·p1.00:   18743.296 us/op

Iteration  13: 14472.810 ±(99.9%) 14.759 us/op
                 runAlgorithm·p0.00:   14336.000 us/op
                 runAlgorithm·p0.50:   14417.920 us/op
                 runAlgorithm·p0.90:   14627.635 us/op
                 runAlgorithm·p0.95:   14696.448 us/op
                 runAlgorithm·p0.99:   14976.287 us/op
                 runAlgorithm·p0.999:  15155.200 us/op
                 runAlgorithm·p0.9999: 15155.200 us/op
                 runAlgorithm·p1.00:   15155.200 us/op

Iteration  14: 14485.854 ±(99.9%) 15.776 us/op
                 runAlgorithm·p0.00:   14352.384 us/op
                 runAlgorithm·p0.50:   14434.304 us/op
                 runAlgorithm·p0.90:   14647.296 us/op
                 runAlgorithm·p0.95:   14720.205 us/op
                 runAlgorithm·p0.99:   14960.067 us/op
                 runAlgorithm·p0.999:  15269.888 us/op
                 runAlgorithm·p0.9999: 15269.888 us/op
                 runAlgorithm·p1.00:   15269.888 us/op

Iteration  15: 14506.593 ±(99.9%) 18.433 us/op
                 runAlgorithm·p0.00:   14336.000 us/op
                 runAlgorithm·p0.50:   14450.688 us/op
                 runAlgorithm·p0.90:   14680.064 us/op
                 runAlgorithm·p0.95:   14794.752 us/op
                 runAlgorithm·p0.99:   15042.150 us/op
                 runAlgorithm·p0.999:  15597.568 us/op
                 runAlgorithm·p0.9999: 15597.568 us/op
                 runAlgorithm·p1.00:   15597.568 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  N = 10343
  mean =  14501.609 ±(99.9%) 5.113 us/op

  Histogram, us/op:
    [14000.000, 14500.000) = 7067 
    [14500.000, 15000.000) = 3170 
    [15000.000, 15500.000) = 100 
    [15500.000, 16000.000) = 1 
    [16000.000, 16500.000) = 1 
    [16500.000, 17000.000) = 0 
    [17000.000, 17500.000) = 1 
    [17500.000, 18000.000) = 0 
    [18000.000, 18500.000) = 1 
    [18500.000, 19000.000) = 1 
    [19000.000, 19500.000) = 0 
    [19500.000, 20000.000) = 0 
    [20000.000, 20500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  14336.000 us/op
     p(50.0000) =  14450.688 us/op
     p(90.0000) =  14663.680 us/op
     p(95.0000) =  14745.600 us/op
     p(99.0000) =  15007.744 us/op
     p(99.9000) =  15345.648 us/op
     p(99.9900) =  20578.461 us/op
     p(99.9990) =  20643.840 us/op
     p(99.9999) =  20643.840 us/op
    p(100.0000) =  20643.840 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 87.68% complete, ETA 01:03:01
# Fork: 1 of 1
# Warmup Iteration   1: 360.146 ±(99.9%) 6.390 us/op
# Warmup Iteration   2: 354.255 ±(99.9%) 4.739 us/op
# Warmup Iteration   3: 355.935 ±(99.9%) 5.603 us/op
# Warmup Iteration   4: 356.610 ±(99.9%) 5.394 us/op
# Warmup Iteration   5: 353.177 ±(99.9%) 3.782 us/op
Iteration   1: 354.064 ±(99.9%) 3.417 us/op
                 runAlgorithm·p0.00:   331.264 us/op
                 runAlgorithm·p0.50:   343.040 us/op
                 runAlgorithm·p0.90:   365.056 us/op
                 runAlgorithm·p0.95:   375.296 us/op
                 runAlgorithm·p0.99:   489.359 us/op
                 runAlgorithm·p0.999:  3260.830 us/op
                 runAlgorithm·p0.9999: 8908.913 us/op
                 runAlgorithm·p1.00:   9551.872 us/op

Iteration   2: 356.397 ±(99.9%) 6.348 us/op
                 runAlgorithm·p0.00:   330.752 us/op
                 runAlgorithm·p0.50:   342.528 us/op
                 runAlgorithm·p0.90:   362.496 us/op
                 runAlgorithm·p0.95:   371.712 us/op
                 runAlgorithm·p0.99:   451.154 us/op
                 runAlgorithm·p0.999:  3268.919 us/op
                 runAlgorithm·p0.9999: 16788.383 us/op
                 runAlgorithm·p1.00:   28639.232 us/op

Iteration   3: 356.049 ±(99.9%) 5.845 us/op
                 runAlgorithm·p0.00:   331.776 us/op
                 runAlgorithm·p0.50:   343.040 us/op
                 runAlgorithm·p0.90:   364.390 us/op
                 runAlgorithm·p0.95:   373.760 us/op
                 runAlgorithm·p0.99:   445.681 us/op
                 runAlgorithm·p0.999:  3315.806 us/op
                 runAlgorithm·p0.9999: 16030.872 us/op
                 runAlgorithm·p1.00:   26607.616 us/op

Iteration   4: 354.542 ±(99.9%) 5.043 us/op
                 runAlgorithm·p0.00:   331.264 us/op
                 runAlgorithm·p0.50:   342.016 us/op
                 runAlgorithm·p0.90:   362.496 us/op
                 runAlgorithm·p0.95:   372.224 us/op
                 runAlgorithm·p0.99:   452.116 us/op
                 runAlgorithm·p0.999:  3306.889 us/op
                 runAlgorithm·p0.9999: 13679.588 us/op
                 runAlgorithm·p1.00:   22085.632 us/op

Iteration   5: 354.615 ±(99.9%) 5.014 us/op
                 runAlgorithm·p0.00:   330.752 us/op
                 runAlgorithm·p0.50:   342.016 us/op
                 runAlgorithm·p0.90:   361.472 us/op
                 runAlgorithm·p0.95:   370.176 us/op
                 runAlgorithm·p0.99:   442.194 us/op
                 runAlgorithm·p0.999:  3356.668 us/op
                 runAlgorithm·p0.9999: 12786.862 us/op
                 runAlgorithm·p1.00:   18087.936 us/op

Iteration   6: 355.091 ±(99.9%) 4.846 us/op
                 runAlgorithm·p0.00:   330.752 us/op
                 runAlgorithm·p0.50:   342.528 us/op
                 runAlgorithm·p0.90:   363.520 us/op
                 runAlgorithm·p0.95:   372.224 us/op
                 runAlgorithm·p0.99:   453.985 us/op
                 runAlgorithm·p0.999:  3411.771 us/op
                 runAlgorithm·p0.9999: 14112.434 us/op
                 runAlgorithm·p1.00:   14827.520 us/op

Iteration   7: 354.639 ±(99.9%) 5.818 us/op
                 runAlgorithm·p0.00:   331.264 us/op
                 runAlgorithm·p0.50:   342.016 us/op
                 runAlgorithm·p0.90:   360.960 us/op
                 runAlgorithm·p0.95:   370.176 us/op
                 runAlgorithm·p0.99:   431.954 us/op
                 runAlgorithm·p0.999:  3222.184 us/op
                 runAlgorithm·p0.9999: 18913.077 us/op
                 runAlgorithm·p1.00:   22282.240 us/op

Iteration   8: 355.479 ±(99.9%) 5.339 us/op
                 runAlgorithm·p0.00:   331.264 us/op
                 runAlgorithm·p0.50:   342.016 us/op
                 runAlgorithm·p0.90:   360.448 us/op
                 runAlgorithm·p0.95:   369.664 us/op
                 runAlgorithm·p0.99:   431.621 us/op
                 runAlgorithm·p0.999:  3956.330 us/op
                 runAlgorithm·p0.9999: 13533.771 us/op
                 runAlgorithm·p1.00:   15826.944 us/op

Iteration   9: 356.033 ±(99.9%) 6.816 us/op
                 runAlgorithm·p0.00:   330.752 us/op
                 runAlgorithm·p0.50:   342.528 us/op
                 runAlgorithm·p0.90:   361.984 us/op
                 runAlgorithm·p0.95:   371.712 us/op
                 runAlgorithm·p0.99:   445.798 us/op
                 runAlgorithm·p0.999:  2952.991 us/op
                 runAlgorithm·p0.9999: 22599.303 us/op
                 runAlgorithm·p1.00:   32505.856 us/op

Iteration  10: 355.029 ±(99.9%) 4.179 us/op
                 runAlgorithm·p0.00:   330.752 us/op
                 runAlgorithm·p0.50:   343.040 us/op
                 runAlgorithm·p0.90:   364.032 us/op
                 runAlgorithm·p0.95:   372.736 us/op
                 runAlgorithm·p0.99:   487.245 us/op
                 runAlgorithm·p0.999:  3174.625 us/op
                 runAlgorithm·p0.9999: 11296.170 us/op
                 runAlgorithm·p1.00:   12681.216 us/op

Iteration  11: 353.849 ±(99.9%) 4.381 us/op
                 runAlgorithm·p0.00:   331.264 us/op
                 runAlgorithm·p0.50:   342.016 us/op
                 runAlgorithm·p0.90:   360.960 us/op
                 runAlgorithm·p0.95:   369.664 us/op
                 runAlgorithm·p0.99:   483.840 us/op
                 runAlgorithm·p0.999:  3301.376 us/op
                 runAlgorithm·p0.9999: 10836.679 us/op
                 runAlgorithm·p1.00:   18350.080 us/op

Iteration  12: 352.667 ±(99.9%) 4.208 us/op
                 runAlgorithm·p0.00:   330.240 us/op
                 runAlgorithm·p0.50:   341.504 us/op
                 runAlgorithm·p0.90:   360.448 us/op
                 runAlgorithm·p0.95:   368.128 us/op
                 runAlgorithm·p0.99:   431.892 us/op
                 runAlgorithm·p0.999:  3200.426 us/op
                 runAlgorithm·p0.9999: 10849.362 us/op
                 runAlgorithm·p1.00:   16187.392 us/op

Iteration  13: 353.821 ±(99.9%) 4.727 us/op
                 runAlgorithm·p0.00:   330.240 us/op
                 runAlgorithm·p0.50:   341.504 us/op
                 runAlgorithm·p0.90:   359.936 us/op
                 runAlgorithm·p0.95:   369.152 us/op
                 runAlgorithm·p0.99:   460.646 us/op
                 runAlgorithm·p0.999:  3829.883 us/op
                 runAlgorithm·p0.9999: 10214.048 us/op
                 runAlgorithm·p1.00:   16777.216 us/op

Iteration  14: 351.567 ±(99.9%) 3.906 us/op
                 runAlgorithm·p0.00:   330.752 us/op
                 runAlgorithm·p0.50:   340.992 us/op
                 runAlgorithm·p0.90:   358.400 us/op
                 runAlgorithm·p0.95:   366.080 us/op
                 runAlgorithm·p0.99:   412.672 us/op
                 runAlgorithm·p0.999:  3293.463 us/op
                 runAlgorithm·p0.9999: 10017.671 us/op
                 runAlgorithm·p1.00:   10731.520 us/op

Iteration  15: 352.606 ±(99.9%) 4.702 us/op
                 runAlgorithm·p0.00:   330.240 us/op
                 runAlgorithm·p0.50:   340.480 us/op
                 runAlgorithm·p0.90:   358.400 us/op
                 runAlgorithm·p0.95:   366.592 us/op
                 runAlgorithm·p0.99:   426.348 us/op
                 runAlgorithm·p0.999:  3188.142 us/op
                 runAlgorithm·p0.9999: 10781.226 us/op
                 runAlgorithm·p1.00:   17924.096 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 422725
  mean =    354.425 ±(99.9%) 1.303 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 422061 
    [ 2500.000,  5000.000) = 445 
    [ 5000.000,  7500.000) = 77 
    [ 7500.000, 10000.000) = 69 
    [10000.000, 12500.000) = 33 
    [12500.000, 15000.000) = 18 
    [15000.000, 17500.000) = 6 
    [17500.000, 20000.000) = 6 
    [20000.000, 22500.000) = 6 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 2 
    [27500.000, 30000.000) = 1 
    [30000.000, 32500.000) = 0 
    [32500.000, 35000.000) = 1 
    [35000.000, 37500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    330.240 us/op
     p(50.0000) =    342.016 us/op
     p(90.0000) =    361.472 us/op
     p(95.0000) =    370.688 us/op
     p(99.0000) =    448.512 us/op
     p(99.9000) =   3317.760 us/op
     p(99.9900) =  11287.095 us/op
     p(99.9990) =  25624.631 us/op
     p(99.9999) =  32505.856 us/op
    p(100.0000) =  32505.856 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 88.40% complete, ETA 00:59:18
# Fork: 1 of 1
# Warmup Iteration   1: 35871.682 ±(99.9%) 770.871 us/op
# Warmup Iteration   2: 35734.440 ±(99.9%) 485.516 us/op
# Warmup Iteration   3: 35870.977 ±(99.9%) 570.379 us/op
# Warmup Iteration   4: 35982.564 ±(99.9%) 555.430 us/op
# Warmup Iteration   5: 35876.849 ±(99.9%) 536.983 us/op
Iteration   1: 36186.992 ±(99.9%) 658.624 us/op
                 runAlgorithm·p0.00:   34406.400 us/op
                 runAlgorithm·p0.50:   34996.224 us/op
                 runAlgorithm·p0.90:   39242.957 us/op
                 runAlgorithm·p0.95:   44433.408 us/op
                 runAlgorithm·p0.99:   52123.402 us/op
                 runAlgorithm·p0.999:  62324.736 us/op
                 runAlgorithm·p0.9999: 62324.736 us/op
                 runAlgorithm·p1.00:   62324.736 us/op

Iteration   2: 35872.386 ±(99.9%) 492.211 us/op
                 runAlgorithm·p0.00:   34471.936 us/op
                 runAlgorithm·p0.50:   34930.688 us/op
                 runAlgorithm·p0.90:   38993.920 us/op
                 runAlgorithm·p0.95:   41025.536 us/op
                 runAlgorithm·p0.99:   49374.822 us/op
                 runAlgorithm·p0.999:  50397.184 us/op
                 runAlgorithm·p0.9999: 50397.184 us/op
                 runAlgorithm·p1.00:   50397.184 us/op

Iteration   3: 35770.251 ±(99.9%) 562.095 us/op
                 runAlgorithm·p0.00:   34340.864 us/op
                 runAlgorithm·p0.50:   34734.080 us/op
                 runAlgorithm·p0.90:   38528.614 us/op
                 runAlgorithm·p0.95:   42067.558 us/op
                 runAlgorithm·p0.99:   50156.012 us/op
                 runAlgorithm·p0.999:  52822.016 us/op
                 runAlgorithm·p0.9999: 52822.016 us/op
                 runAlgorithm·p1.00:   52822.016 us/op

Iteration   4: 35816.716 ±(99.9%) 552.062 us/op
                 runAlgorithm·p0.00:   34340.864 us/op
                 runAlgorithm·p0.50:   34799.616 us/op
                 runAlgorithm·p0.90:   38469.632 us/op
                 runAlgorithm·p0.95:   41091.072 us/op
                 runAlgorithm·p0.99:   50397.184 us/op
                 runAlgorithm·p0.999:  55836.672 us/op
                 runAlgorithm·p0.9999: 55836.672 us/op
                 runAlgorithm·p1.00:   55836.672 us/op

Iteration   5: 35689.033 ±(99.9%) 452.814 us/op
                 runAlgorithm·p0.00:   34275.328 us/op
                 runAlgorithm·p0.50:   34865.152 us/op
                 runAlgorithm·p0.90:   38266.470 us/op
                 runAlgorithm·p0.95:   40288.256 us/op
                 runAlgorithm·p0.99:   46505.001 us/op
                 runAlgorithm·p0.999:  53346.304 us/op
                 runAlgorithm·p0.9999: 53346.304 us/op
                 runAlgorithm·p1.00:   53346.304 us/op

Iteration   6: 35737.483 ±(99.9%) 376.499 us/op
                 runAlgorithm·p0.00:   34471.936 us/op
                 runAlgorithm·p0.50:   34996.224 us/op
                 runAlgorithm·p0.90:   38332.006 us/op
                 runAlgorithm·p0.95:   40029.389 us/op
                 runAlgorithm·p0.99:   44630.016 us/op
                 runAlgorithm·p0.999:  46465.024 us/op
                 runAlgorithm·p0.9999: 46465.024 us/op
                 runAlgorithm·p1.00:   46465.024 us/op

Iteration   7: 36303.382 ±(99.9%) 643.643 us/op
                 runAlgorithm·p0.00:   34406.400 us/op
                 runAlgorithm·p0.50:   35192.832 us/op
                 runAlgorithm·p0.90:   39144.653 us/op
                 runAlgorithm·p0.95:   42175.693 us/op
                 runAlgorithm·p0.99:   52804.321 us/op
                 runAlgorithm·p0.999:  64552.960 us/op
                 runAlgorithm·p0.9999: 64552.960 us/op
                 runAlgorithm·p1.00:   64552.960 us/op

Iteration   8: 35909.265 ±(99.9%) 569.843 us/op
                 runAlgorithm·p0.00:   34340.864 us/op
                 runAlgorithm·p0.50:   34865.152 us/op
                 runAlgorithm·p0.90:   38404.096 us/op
                 runAlgorithm·p0.95:   42270.720 us/op
                 runAlgorithm·p0.99:   50842.829 us/op
                 runAlgorithm·p0.999:  55443.456 us/op
                 runAlgorithm·p0.9999: 55443.456 us/op
                 runAlgorithm·p1.00:   55443.456 us/op

Iteration   9: 35689.267 ±(99.9%) 467.912 us/op
                 runAlgorithm·p0.00:   34340.864 us/op
                 runAlgorithm·p0.50:   34799.616 us/op
                 runAlgorithm·p0.90:   38535.168 us/op
                 runAlgorithm·p0.95:   40629.043 us/op
                 runAlgorithm·p0.99:   45732.987 us/op
                 runAlgorithm·p0.999:  50135.040 us/op
                 runAlgorithm·p0.9999: 50135.040 us/op
                 runAlgorithm·p1.00:   50135.040 us/op

Iteration  10: 35861.581 ±(99.9%) 605.309 us/op
                 runAlgorithm·p0.00:   34406.400 us/op
                 runAlgorithm·p0.50:   34799.616 us/op
                 runAlgorithm·p0.90:   38600.704 us/op
                 runAlgorithm·p0.95:   40632.320 us/op
                 runAlgorithm·p0.99:   51537.510 us/op
                 runAlgorithm·p0.999:  55508.992 us/op
                 runAlgorithm·p0.9999: 55508.992 us/op
                 runAlgorithm·p1.00:   55508.992 us/op

Iteration  11: 35904.802 ±(99.9%) 570.994 us/op
                 runAlgorithm·p0.00:   34406.400 us/op
                 runAlgorithm·p0.50:   34865.152 us/op
                 runAlgorithm·p0.90:   38993.920 us/op
                 runAlgorithm·p0.95:   41811.968 us/op
                 runAlgorithm·p0.99:   48300.032 us/op
                 runAlgorithm·p0.999:  58327.040 us/op
                 runAlgorithm·p0.9999: 58327.040 us/op
                 runAlgorithm·p1.00:   58327.040 us/op

Iteration  12: 35612.402 ±(99.9%) 402.722 us/op
                 runAlgorithm·p0.00:   34406.400 us/op
                 runAlgorithm·p0.50:   34799.616 us/op
                 runAlgorithm·p0.90:   38443.418 us/op
                 runAlgorithm·p0.95:   39564.083 us/op
                 runAlgorithm·p0.99:   44429.476 us/op
                 runAlgorithm·p0.999:  49807.360 us/op
                 runAlgorithm·p0.9999: 49807.360 us/op
                 runAlgorithm·p1.00:   49807.360 us/op

Iteration  13: 36161.203 ±(99.9%) 496.244 us/op
                 runAlgorithm·p0.00:   34603.008 us/op
                 runAlgorithm·p0.50:   35258.368 us/op
                 runAlgorithm·p0.90:   38993.920 us/op
                 runAlgorithm·p0.95:   40953.446 us/op
                 runAlgorithm·p0.99:   46856.929 us/op
                 runAlgorithm·p0.999:  54329.344 us/op
                 runAlgorithm·p0.9999: 54329.344 us/op
                 runAlgorithm·p1.00:   54329.344 us/op

Iteration  14: 35652.517 ±(99.9%) 454.399 us/op
                 runAlgorithm·p0.00:   34406.400 us/op
                 runAlgorithm·p0.50:   34799.616 us/op
                 runAlgorithm·p0.90:   38561.382 us/op
                 runAlgorithm·p0.95:   40881.357 us/op
                 runAlgorithm·p0.99:   45133.332 us/op
                 runAlgorithm·p0.999:  51052.544 us/op
                 runAlgorithm·p0.9999: 51052.544 us/op
                 runAlgorithm·p1.00:   51052.544 us/op

Iteration  15: 35630.594 ±(99.9%) 456.671 us/op
                 runAlgorithm·p0.00:   34340.864 us/op
                 runAlgorithm·p0.50:   34799.616 us/op
                 runAlgorithm·p0.90:   38404.096 us/op
                 runAlgorithm·p0.95:   40547.123 us/op
                 runAlgorithm·p0.99:   46302.495 us/op
                 runAlgorithm·p0.999:  48168.960 us/op
                 runAlgorithm·p0.9999: 48168.960 us/op
                 runAlgorithm·p1.00:   48168.960 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 4188
  mean =  35852.120 ±(99.9%) 133.959 us/op

  Histogram, us/op:
    [30000.000, 32500.000) = 0 
    [32500.000, 35000.000) = 2601 
    [35000.000, 37500.000) = 905 
    [37500.000, 40000.000) = 430 
    [40000.000, 42500.000) = 103 
    [42500.000, 45000.000) = 71 
    [45000.000, 47500.000) = 38 
    [47500.000, 50000.000) = 19 
    [50000.000, 52500.000) = 7 
    [52500.000, 55000.000) = 7 
    [55000.000, 57500.000) = 4 
    [57500.000, 60000.000) = 1 
    [60000.000, 62500.000) = 1 
    [62500.000, 65000.000) = 1 
    [65000.000, 67500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  34275.328 us/op
     p(50.0000) =  34865.152 us/op
     p(90.0000) =  38600.704 us/op
     p(95.0000) =  40697.856 us/op
     p(99.0000) =  47389.737 us/op
     p(99.9000) =  55774.740 us/op
     p(99.9900) =  64552.960 us/op
     p(99.9990) =  64552.960 us/op
     p(99.9999) =  64552.960 us/op
    p(100.0000) =  64552.960 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 89.13% complete, ETA 00:55:35
# Fork: 1 of 1
# Warmup Iteration   1: 3678404.608 ±(99.9%) 1457896.451 us/op
# Warmup Iteration   2: 3625276.757 ±(99.9%) 345046.524 us/op
# Warmup Iteration   3: 3607101.440 ±(99.9%) 265072.082 us/op
# Warmup Iteration   4: 3644850.176 ±(99.9%) 1147795.784 us/op
# Warmup Iteration   5: 3616888.149 ±(99.9%) 361618.084 us/op
Iteration   1: 3630869.163 ±(99.9%) 818200.610 us/op
                 runAlgorithm·p0.00:   3581935.616 us/op
                 runAlgorithm·p0.50:   3640655.872 us/op
                 runAlgorithm·p0.90:   3670016.000 us/op
                 runAlgorithm·p0.95:   3670016.000 us/op
                 runAlgorithm·p0.99:   3670016.000 us/op
                 runAlgorithm·p0.999:  3670016.000 us/op
                 runAlgorithm·p0.9999: 3670016.000 us/op
                 runAlgorithm·p1.00:   3670016.000 us/op

Iteration   2: 3635063.467 ±(99.9%) 245976.482 us/op
                 runAlgorithm·p0.00:   3619684.352 us/op
                 runAlgorithm·p0.50:   3640655.872 us/op
                 runAlgorithm·p0.90:   3644850.176 us/op
                 runAlgorithm·p0.95:   3644850.176 us/op
                 runAlgorithm·p0.99:   3644850.176 us/op
                 runAlgorithm·p0.999:  3644850.176 us/op
                 runAlgorithm·p0.9999: 3644850.176 us/op
                 runAlgorithm·p1.00:   3644850.176 us/op

Iteration   3: 3643452.075 ±(99.9%) 537456.843 us/op
                 runAlgorithm·p0.00:   3615490.048 us/op
                 runAlgorithm·p0.50:   3640655.872 us/op
                 runAlgorithm·p0.90:   3674210.304 us/op
                 runAlgorithm·p0.95:   3674210.304 us/op
                 runAlgorithm·p0.99:   3674210.304 us/op
                 runAlgorithm·p0.999:  3674210.304 us/op
                 runAlgorithm·p0.9999: 3674210.304 us/op
                 runAlgorithm·p1.00:   3674210.304 us/op

Iteration   4: 3649044.480 ±(99.9%) 827687.311 us/op
                 runAlgorithm·p0.00:   3598712.832 us/op
                 runAlgorithm·p0.50:   3661627.392 us/op
                 runAlgorithm·p0.90:   3686793.216 us/op
                 runAlgorithm·p0.95:   3686793.216 us/op
                 runAlgorithm·p0.99:   3686793.216 us/op
                 runAlgorithm·p0.999:  3686793.216 us/op
                 runAlgorithm·p0.9999: 3686793.216 us/op
                 runAlgorithm·p1.00:   3686793.216 us/op

Iteration   5: 3639257.771 ±(99.9%) 818200.610 us/op
                 runAlgorithm·p0.00:   3590324.224 us/op
                 runAlgorithm·p0.50:   3649044.480 us/op
                 runAlgorithm·p0.90:   3678404.608 us/op
                 runAlgorithm·p0.95:   3678404.608 us/op
                 runAlgorithm·p0.99:   3678404.608 us/op
                 runAlgorithm·p0.999:  3678404.608 us/op
                 runAlgorithm·p0.9999: 3678404.608 us/op
                 runAlgorithm·p1.00:   3678404.608 us/op

Iteration   6: 3657433.088 ±(99.9%) 404904.293 us/op
                 runAlgorithm·p0.00:   3632267.264 us/op
                 runAlgorithm·p0.50:   3665821.696 us/op
                 runAlgorithm·p0.90:   3674210.304 us/op
                 runAlgorithm·p0.95:   3674210.304 us/op
                 runAlgorithm·p0.99:   3674210.304 us/op
                 runAlgorithm·p0.999:  3674210.304 us/op
                 runAlgorithm·p0.9999: 3674210.304 us/op
                 runAlgorithm·p1.00:   3674210.304 us/op

Iteration   7: 3629471.061 ±(99.9%) 509493.396 us/op
                 runAlgorithm·p0.00:   3611295.744 us/op
                 runAlgorithm·p0.50:   3615490.048 us/op
                 runAlgorithm·p0.90:   3661627.392 us/op
                 runAlgorithm·p0.95:   3661627.392 us/op
                 runAlgorithm·p0.99:   3661627.392 us/op
                 runAlgorithm·p0.999:  3661627.392 us/op
                 runAlgorithm·p0.9999: 3661627.392 us/op
                 runAlgorithm·p1.00:   3661627.392 us/op

Iteration   8: 3647646.379 ±(99.9%) 309250.762 us/op
                 runAlgorithm·p0.00:   3628072.960 us/op
                 runAlgorithm·p0.50:   3657433.088 us/op
                 runAlgorithm·p0.90:   3657433.088 us/op
                 runAlgorithm·p0.95:   3657433.088 us/op
                 runAlgorithm·p0.99:   3657433.088 us/op
                 runAlgorithm·p0.999:  3657433.088 us/op
                 runAlgorithm·p0.9999: 3657433.088 us/op
                 runAlgorithm·p1.00:   3657433.088 us/op

Iteration   9: 3642053.973 ±(99.9%) 650792.600 us/op
                 runAlgorithm·p0.00:   3607101.440 us/op
                 runAlgorithm·p0.50:   3640655.872 us/op
                 runAlgorithm·p0.90:   3678404.608 us/op
                 runAlgorithm·p0.95:   3678404.608 us/op
                 runAlgorithm·p0.99:   3678404.608 us/op
                 runAlgorithm·p0.999:  3678404.608 us/op
                 runAlgorithm·p0.9999: 3678404.608 us/op
                 runAlgorithm·p1.00:   3678404.608 us/op

Iteration  10: 3654636.885 ±(99.9%) 650792.600 us/op
                 runAlgorithm·p0.00:   3619684.352 us/op
                 runAlgorithm·p0.50:   3653238.784 us/op
                 runAlgorithm·p0.90:   3690987.520 us/op
                 runAlgorithm·p0.95:   3690987.520 us/op
                 runAlgorithm·p0.99:   3690987.520 us/op
                 runAlgorithm·p0.999:  3690987.520 us/op
                 runAlgorithm·p0.9999: 3690987.520 us/op
                 runAlgorithm·p1.00:   3690987.520 us/op

Iteration  11: 3614091.947 ±(99.9%) 710988.573 us/op
                 runAlgorithm·p0.00:   3581935.616 us/op
                 runAlgorithm·p0.50:   3602907.136 us/op
                 runAlgorithm·p0.90:   3657433.088 us/op
                 runAlgorithm·p0.95:   3657433.088 us/op
                 runAlgorithm·p0.99:   3657433.088 us/op
                 runAlgorithm·p0.999:  3657433.088 us/op
                 runAlgorithm·p0.9999: 3657433.088 us/op
                 runAlgorithm·p1.00:   3657433.088 us/op

Iteration  12: 3647646.379 ±(99.9%) 268728.421 us/op
                 runAlgorithm·p0.00:   3632267.264 us/op
                 runAlgorithm·p0.50:   3649044.480 us/op
                 runAlgorithm·p0.90:   3661627.392 us/op
                 runAlgorithm·p0.95:   3661627.392 us/op
                 runAlgorithm·p0.99:   3661627.392 us/op
                 runAlgorithm·p0.999:  3661627.392 us/op
                 runAlgorithm·p0.9999: 3661627.392 us/op
                 runAlgorithm·p1.00:   3661627.392 us/op

Iteration  13: 3678404.608 ±(99.9%) 577711.209 us/op
                 runAlgorithm·p0.00:   3644850.176 us/op
                 runAlgorithm·p0.50:   3682598.912 us/op
                 runAlgorithm·p0.90:   3707764.736 us/op
                 runAlgorithm·p0.95:   3707764.736 us/op
                 runAlgorithm·p0.99:   3707764.736 us/op
                 runAlgorithm·p0.999:  3707764.736 us/op
                 runAlgorithm·p0.9999: 3707764.736 us/op
                 runAlgorithm·p1.00:   3707764.736 us/op

Iteration  14: 3656034.987 ±(99.9%) 1290289.771 us/op
                 runAlgorithm·p0.00:   3607101.440 us/op
                 runAlgorithm·p0.50:   3623878.656 us/op
                 runAlgorithm·p0.90:   3737124.864 us/op
                 runAlgorithm·p0.95:   3737124.864 us/op
                 runAlgorithm·p0.99:   3737124.864 us/op
                 runAlgorithm·p0.999:  3737124.864 us/op
                 runAlgorithm·p0.9999: 3737124.864 us/op
                 runAlgorithm·p1.00:   3737124.864 us/op

Iteration  15: 3630869.163 ±(99.9%) 377462.810 us/op
                 runAlgorithm·p0.00:   3607101.440 us/op
                 runAlgorithm·p0.50:   3640655.872 us/op
                 runAlgorithm·p0.90:   3644850.176 us/op
                 runAlgorithm·p0.95:   3644850.176 us/op
                 runAlgorithm·p0.99:   3644850.176 us/op
                 runAlgorithm·p0.999:  3644850.176 us/op
                 runAlgorithm·p0.9999: 3644850.176 us/op
                 runAlgorithm·p1.00:   3644850.176 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 45
  mean = 3643731.695 ±(99.9%) 17449.692 us/op

  Histogram, us/op:
    [3500000.000, 3525000.000) = 0 
    [3525000.000, 3550000.000) = 0 
    [3550000.000, 3575000.000) = 0 
    [3575000.000, 3600000.000) = 4 
    [3600000.000, 3625000.000) = 10 
    [3625000.000, 3650000.000) = 13 
    [3650000.000, 3675000.000) = 11 
    [3675000.000, 3700000.000) = 5 
    [3700000.000, 3725000.000) = 1 
    [3725000.000, 3750000.000) = 1 
    [3750000.000, 3775000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 3581935.616 us/op
     p(50.0000) = 3644850.176 us/op
     p(90.0000) = 3684276.634 us/op
     p(95.0000) = 3702731.571 us/op
     p(99.0000) = 3737124.864 us/op
     p(99.9000) = 3737124.864 us/op
     p(99.9900) = 3737124.864 us/op
     p(99.9990) = 3737124.864 us/op
     p(99.9999) = 3737124.864 us/op
    p(100.0000) = 3737124.864 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 89.85% complete, ETA 00:51:54
# Fork: 1 of 1
# Warmup Iteration   1: 1909.350 ±(99.9%) 13.524 us/op
# Warmup Iteration   2: 1903.351 ±(99.9%) 2.265 us/op
# Warmup Iteration   3: 1903.100 ±(99.9%) 2.124 us/op
# Warmup Iteration   4: 1908.051 ±(99.9%) 3.197 us/op
# Warmup Iteration   5: 1907.338 ±(99.9%) 2.229 us/op
Iteration   1: 1903.435 ±(99.9%) 2.031 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1861.632 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1894.400 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1927.168 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1955.840 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2111.529 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2226.201 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2400.256 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2400.256 us/op

Iteration   2: 1900.331 ±(99.9%) 2.014 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1861.632 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1892.352 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1923.072 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1957.888 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2101.248 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2252.636 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2396.160 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2396.160 us/op

Iteration   3: 1897.641 ±(99.9%) 2.078 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1859.584 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1888.256 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1918.976 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1951.027 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2109.440 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2283.381 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2383.872 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2383.872 us/op

Iteration   4: 1901.837 ±(99.9%) 3.323 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1859.584 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1890.304 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1923.072 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1955.840 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2129.920 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2386.919 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 4849.664 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   4849.664 us/op

Iteration   5: 1901.886 ±(99.9%) 2.253 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1859.584 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1890.304 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1927.168 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1978.368 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2109.440 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2318.238 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2809.856 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2809.856 us/op

Iteration   6: 1906.084 ±(99.9%) 2.418 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1859.584 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1894.400 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1945.600 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1984.512 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2128.118 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2382.873 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2859.008 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2859.008 us/op

Iteration   7: 2276.045 ±(99.9%) 2.586 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2265.088 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2318.336 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2359.296 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2502.656 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2689.470 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3108.864 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3108.864 us/op

Iteration   8: 2275.789 ±(99.9%) 2.566 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2265.088 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2301.952 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2351.104 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2502.656 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2707.640 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2895.872 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2895.872 us/op

Iteration   9: 2276.916 ±(99.9%) 2.560 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2265.088 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2306.048 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2355.200 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2490.368 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2735.444 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2826.240 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2826.240 us/op

Iteration  10: 2274.155 ±(99.9%) 3.882 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2265.088 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2293.760 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2360.525 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2498.560 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2754.249 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 6144.000 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   6144.000 us/op

Iteration  11: 2272.440 ±(99.9%) 2.719 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2260.992 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2293.760 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2363.392 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2490.450 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2783.650 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3608.576 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3608.576 us/op

Iteration  12: 2268.939 ±(99.9%) 2.361 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2260.992 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2289.664 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2334.720 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2473.984 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2695.168 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2850.816 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2850.816 us/op

Iteration  13: 2279.459 ±(99.9%) 3.785 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2265.088 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2306.048 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2416.640 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2531.983 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2746.221 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 5586.944 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   5586.944 us/op

Iteration  14: 2270.225 ±(99.9%) 2.491 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2260.992 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2293.760 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2346.598 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2486.190 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2771.345 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2801.664 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2801.664 us/op

Iteration  15: 2272.007 ±(99.9%) 2.588 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2260.992 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2293.760 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2359.706 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2502.656 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2740.224 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2871.296 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2871.296 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  N = 71069
  mean =   2108.918 ±(99.9%) 2.384 us/op

  Histogram, us/op:
    [1000.000, 1500.000) = 0 
    [1500.000, 2000.000) = 30229 
    [2000.000, 2500.000) = 40461 
    [2500.000, 3000.000) = 372 
    [3000.000, 3500.000) = 2 
    [3500.000, 4000.000) = 1 
    [4000.000, 4500.000) = 0 
    [4500.000, 5000.000) = 2 
    [5000.000, 5500.000) = 0 
    [5500.000, 6000.000) = 1 
    [6000.000, 6500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   1859.584 us/op
     p(50.0000) =   2240.512 us/op
     p(90.0000) =   2285.568 us/op
     p(95.0000) =   2301.952 us/op
     p(99.0000) =   2465.792 us/op
     p(99.9000) =   2690.785 us/op
     p(99.9900) =   3031.208 us/op
     p(99.9990) =   6144.000 us/op
     p(99.9999) =   6144.000 us/op
    p(100.0000) =   6144.000 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 90.58% complete, ETA 00:48:11
# Fork: 1 of 1
# Warmup Iteration   1: 47049.002 ±(99.9%) 215.049 us/op
# Warmup Iteration   2: 46967.159 ±(99.9%) 83.315 us/op
# Warmup Iteration   3: 46944.391 ±(99.9%) 39.671 us/op
# Warmup Iteration   4: 46965.621 ±(99.9%) 45.343 us/op
# Warmup Iteration   5: 46971.159 ±(99.9%) 41.405 us/op
Iteration   1: 46909.076 ±(99.9%) 35.706 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46858.240 us/op
                 extractOperationOutOfLoop·p0.90:   47120.384 us/op
                 extractOperationOutOfLoop·p0.95:   47251.456 us/op
                 extractOperationOutOfLoop·p0.99:   47428.403 us/op
                 extractOperationOutOfLoop·p0.999:  47644.672 us/op
                 extractOperationOutOfLoop·p0.9999: 47644.672 us/op
                 extractOperationOutOfLoop·p1.00:   47644.672 us/op

Iteration   2: 46944.391 ±(99.9%) 41.600 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46923.776 us/op
                 extractOperationOutOfLoop·p0.90:   47185.920 us/op
                 extractOperationOutOfLoop·p0.95:   47316.992 us/op
                 extractOperationOutOfLoop·p0.99:   47635.497 us/op
                 extractOperationOutOfLoop·p0.999:  47775.744 us/op
                 extractOperationOutOfLoop·p0.9999: 47775.744 us/op
                 extractOperationOutOfLoop·p1.00:   47775.744 us/op

Iteration   3: 47015.157 ±(99.9%) 66.305 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46923.776 us/op
                 extractOperationOutOfLoop·p0.90:   47421.850 us/op
                 extractOperationOutOfLoop·p0.95:   47598.797 us/op
                 extractOperationOutOfLoop·p0.99:   48310.518 us/op
                 extractOperationOutOfLoop·p0.999:  48889.856 us/op
                 extractOperationOutOfLoop·p0.9999: 48889.856 us/op
                 extractOperationOutOfLoop·p1.00:   48889.856 us/op

Iteration   4: 47017.926 ±(99.9%) 87.511 us/op
                 extractOperationOutOfLoop·p0.00:   46727.168 us/op
                 extractOperationOutOfLoop·p0.50:   46923.776 us/op
                 extractOperationOutOfLoop·p0.90:   47316.992 us/op
                 extractOperationOutOfLoop·p0.95:   47467.725 us/op
                 extractOperationOutOfLoop·p0.99:   48141.435 us/op
                 extractOperationOutOfLoop·p0.999:  51511.296 us/op
                 extractOperationOutOfLoop·p0.9999: 51511.296 us/op
                 extractOperationOutOfLoop·p1.00:   51511.296 us/op

Iteration   5: 46907.851 ±(99.9%) 35.472 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46858.240 us/op
                 extractOperationOutOfLoop·p0.90:   47120.384 us/op
                 extractOperationOutOfLoop·p0.95:   47251.456 us/op
                 extractOperationOutOfLoop·p0.99:   47382.528 us/op
                 extractOperationOutOfLoop·p0.999:  47448.064 us/op
                 extractOperationOutOfLoop·p0.9999: 47448.064 us/op
                 extractOperationOutOfLoop·p1.00:   47448.064 us/op

Iteration   6: 46994.850 ±(99.9%) 46.557 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46923.776 us/op
                 extractOperationOutOfLoop·p0.90:   47316.992 us/op
                 extractOperationOutOfLoop·p0.95:   47382.528 us/op
                 extractOperationOutOfLoop·p0.99:   47626.322 us/op
                 extractOperationOutOfLoop·p0.999:  47644.672 us/op
                 extractOperationOutOfLoop·p0.9999: 47644.672 us/op
                 extractOperationOutOfLoop·p1.00:   47644.672 us/op

Iteration   7: 46961.621 ±(99.9%) 43.687 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46923.776 us/op
                 extractOperationOutOfLoop·p0.90:   47185.920 us/op
                 extractOperationOutOfLoop·p0.95:   47316.992 us/op
                 extractOperationOutOfLoop·p0.99:   47795.405 us/op
                 extractOperationOutOfLoop·p0.999:  47841.280 us/op
                 extractOperationOutOfLoop·p0.9999: 47841.280 us/op
                 extractOperationOutOfLoop·p1.00:   47841.280 us/op

Iteration   8: 46946.852 ±(99.9%) 40.105 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46923.776 us/op
                 extractOperationOutOfLoop·p0.90:   47185.920 us/op
                 extractOperationOutOfLoop·p0.95:   47382.528 us/op
                 extractOperationOutOfLoop·p0.99:   47448.064 us/op
                 extractOperationOutOfLoop·p0.999:  47579.136 us/op
                 extractOperationOutOfLoop·p0.9999: 47579.136 us/op
                 extractOperationOutOfLoop·p1.00:   47579.136 us/op

Iteration   9: 46931.160 ±(99.9%) 35.372 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46923.776 us/op
                 extractOperationOutOfLoop·p0.90:   47185.920 us/op
                 extractOperationOutOfLoop·p0.95:   47251.456 us/op
                 extractOperationOutOfLoop·p0.99:   47382.528 us/op
                 extractOperationOutOfLoop·p0.999:  47513.600 us/op
                 extractOperationOutOfLoop·p0.9999: 47513.600 us/op
                 extractOperationOutOfLoop·p1.00:   47513.600 us/op

Iteration  10: 46942.852 ±(99.9%) 44.025 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46923.776 us/op
                 extractOperationOutOfLoop·p0.90:   47185.920 us/op
                 extractOperationOutOfLoop·p0.95:   47336.653 us/op
                 extractOperationOutOfLoop·p0.99:   47691.858 us/op
                 extractOperationOutOfLoop·p0.999:  48037.888 us/op
                 extractOperationOutOfLoop·p0.9999: 48037.888 us/op
                 extractOperationOutOfLoop·p1.00:   48037.888 us/op

Iteration  11: 46941.314 ±(99.9%) 38.614 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46923.776 us/op
                 extractOperationOutOfLoop·p0.90:   47159.706 us/op
                 extractOperationOutOfLoop·p0.95:   47251.456 us/op
                 extractOperationOutOfLoop·p0.99:   47560.786 us/op
                 extractOperationOutOfLoop·p0.999:  47841.280 us/op
                 extractOperationOutOfLoop·p0.9999: 47841.280 us/op
                 extractOperationOutOfLoop·p1.00:   47841.280 us/op

Iteration  12: 46974.236 ±(99.9%) 44.951 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46923.776 us/op
                 extractOperationOutOfLoop·p0.90:   47251.456 us/op
                 extractOperationOutOfLoop·p0.95:   47336.653 us/op
                 extractOperationOutOfLoop·p0.99:   47748.219 us/op
                 extractOperationOutOfLoop·p0.999:  48168.960 us/op
                 extractOperationOutOfLoop·p0.9999: 48168.960 us/op
                 extractOperationOutOfLoop·p1.00:   48168.960 us/op

Iteration  13: 47000.389 ±(99.9%) 59.938 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46923.776 us/op
                 extractOperationOutOfLoop·p0.90:   47316.992 us/op
                 extractOperationOutOfLoop·p0.95:   47382.528 us/op
                 extractOperationOutOfLoop·p0.99:   48019.538 us/op
                 extractOperationOutOfLoop·p0.999:  49217.536 us/op
                 extractOperationOutOfLoop·p0.9999: 49217.536 us/op
                 extractOperationOutOfLoop·p1.00:   49217.536 us/op

Iteration  14: 47025.003 ±(99.9%) 54.699 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46989.312 us/op
                 extractOperationOutOfLoop·p0.90:   47316.992 us/op
                 extractOperationOutOfLoop·p0.95:   47448.064 us/op
                 extractOperationOutOfLoop·p0.99:   48188.621 us/op
                 extractOperationOutOfLoop·p0.999:  48300.032 us/op
                 extractOperationOutOfLoop·p0.9999: 48300.032 us/op
                 extractOperationOutOfLoop·p1.00:   48300.032 us/op

Iteration  15: 47019.465 ±(99.9%) 56.677 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46989.312 us/op
                 extractOperationOutOfLoop·p0.90:   47316.992 us/op
                 extractOperationOutOfLoop·p0.95:   47402.189 us/op
                 extractOperationOutOfLoop·p0.99:   47992.013 us/op
                 extractOperationOutOfLoop·p0.999:  49152.000 us/op
                 extractOperationOutOfLoop·p0.9999: 49152.000 us/op
                 extractOperationOutOfLoop·p1.00:   49152.000 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  N = 3197
  mean =  46968.772 ±(99.9%) 13.081 us/op

  Histogram, us/op:
    [46000.000, 46500.000) = 0 
    [46500.000, 47000.000) = 2327 
    [47000.000, 47500.000) = 793 
    [47500.000, 48000.000) = 65 
    [48000.000, 48500.000) = 8 
    [48500.000, 49000.000) = 1 
    [49000.000, 49500.000) = 2 
    [49500.000, 50000.000) = 0 
    [50000.000, 50500.000) = 0 
    [50500.000, 51000.000) = 0 
    [51000.000, 51500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  46661.632 us/op
     p(50.0000) =  46923.776 us/op
     p(90.0000) =  47251.456 us/op
     p(95.0000) =  47382.528 us/op
     p(99.0000) =  47644.672 us/op
     p(99.9000) =  49100.095 us/op
     p(99.9900) =  51511.296 us/op
     p(99.9990) =  51511.296 us/op
     p(99.9999) =  51511.296 us/op
    p(100.0000) =  51511.296 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 91.30% complete, ETA 00:44:28
# Fork: 1 of 1
# Warmup Iteration   1: 1729800.875 ±(99.9%) 40644.268 us/op
# Warmup Iteration   2: 1713373.184 ±(99.9%) 7438.696 us/op
# Warmup Iteration   3: 1713023.659 ±(99.9%) 9421.533 us/op
# Warmup Iteration   4: 1716169.387 ±(99.9%) 6073.670 us/op
# Warmup Iteration   5: 1713722.709 ±(99.9%) 9421.533 us/op
Iteration   1: 1712674.133 ±(99.9%) 7122.010 us/op
                 reduceLoops·p0.00:   1709178.880 us/op
                 reduceLoops·p0.50:   1712324.608 us/op
                 reduceLoops·p0.90:   1715470.336 us/op
                 reduceLoops·p0.95:   1715470.336 us/op
                 reduceLoops·p0.99:   1715470.336 us/op
                 reduceLoops·p0.999:  1715470.336 us/op
                 reduceLoops·p0.9999: 1715470.336 us/op
                 reduceLoops·p1.00:   1715470.336 us/op

Iteration   2: 1713373.184 ±(99.9%) 7438.696 us/op
                 reduceLoops·p0.00:   1711276.032 us/op
                 reduceLoops·p0.50:   1712324.608 us/op
                 reduceLoops·p0.90:   1717567.488 us/op
                 reduceLoops·p0.95:   1717567.488 us/op
                 reduceLoops·p0.99:   1717567.488 us/op
                 reduceLoops·p0.999:  1717567.488 us/op
                 reduceLoops·p0.9999: 1717567.488 us/op
                 reduceLoops·p1.00:   1717567.488 us/op

Iteration   3: 1714421.760 ±(99.9%) 3221.050 us/op
                 reduceLoops·p0.00:   1713373.184 us/op
                 reduceLoops·p0.50:   1714421.760 us/op
                 reduceLoops·p0.90:   1715470.336 us/op
                 reduceLoops·p0.95:   1715470.336 us/op
                 reduceLoops·p0.99:   1715470.336 us/op
                 reduceLoops·p0.999:  1715470.336 us/op
                 reduceLoops·p0.9999: 1715470.336 us/op
                 reduceLoops·p1.00:   1715470.336 us/op

Iteration   4: 1714421.760 ±(99.9%) 4920.235 us/op
                 reduceLoops·p0.00:   1713373.184 us/op
                 reduceLoops·p0.50:   1713373.184 us/op
                 reduceLoops·p0.90:   1717567.488 us/op
                 reduceLoops·p0.95:   1717567.488 us/op
                 reduceLoops·p0.99:   1717567.488 us/op
                 reduceLoops·p0.999:  1717567.488 us/op
                 reduceLoops·p0.9999: 1717567.488 us/op
                 reduceLoops·p1.00:   1717567.488 us/op

Iteration   5: 1716868.437 ±(99.9%) 8853.820 us/op
                 reduceLoops·p0.00:   1713373.184 us/op
                 reduceLoops·p0.50:   1717567.488 us/op
                 reduceLoops·p0.90:   1719664.640 us/op
                 reduceLoops·p0.95:   1719664.640 us/op
                 reduceLoops·p0.99:   1719664.640 us/op
                 reduceLoops·p0.999:  1719664.640 us/op
                 reduceLoops·p0.9999: 1719664.640 us/op
                 reduceLoops·p1.00:   1719664.640 us/op

Iteration   6: 1714771.285 ±(99.9%) 3036.835 us/op
                 reduceLoops·p0.00:   1713373.184 us/op
                 reduceLoops·p0.50:   1715470.336 us/op
                 reduceLoops·p0.90:   1715470.336 us/op
                 reduceLoops·p0.95:   1715470.336 us/op
                 reduceLoops·p0.99:   1715470.336 us/op
                 reduceLoops·p0.999:  1715470.336 us/op
                 reduceLoops·p0.9999: 1715470.336 us/op
                 reduceLoops·p1.00:   1715470.336 us/op

Iteration   7: 1715470.336 ±(99.9%) 7438.696 us/op
                 reduceLoops·p0.00:   1713373.184 us/op
                 reduceLoops·p0.50:   1714421.760 us/op
                 reduceLoops·p0.90:   1719664.640 us/op
                 reduceLoops·p0.95:   1719664.640 us/op
                 reduceLoops·p0.99:   1719664.640 us/op
                 reduceLoops·p0.999:  1719664.640 us/op
                 reduceLoops·p0.9999: 1719664.640 us/op
                 reduceLoops·p1.00:   1719664.640 us/op

Iteration   8: 1717217.963 ±(99.9%) 4426.910 us/op
                 reduceLoops·p0.00:   1715470.336 us/op
                 reduceLoops·p0.50:   1717567.488 us/op
                 reduceLoops·p0.90:   1719664.640 us/op
                 reduceLoops·p0.95:   1719664.640 us/op
                 reduceLoops·p0.99:   1719664.640 us/op
                 reduceLoops·p0.999:  1719664.640 us/op
                 reduceLoops·p0.9999: 1719664.640 us/op
                 reduceLoops·p1.00:   1719664.640 us/op

Iteration   9: 1716169.387 ±(99.9%) 6073.670 us/op
                 reduceLoops·p0.00:   1713373.184 us/op
                 reduceLoops·p0.50:   1715470.336 us/op
                 reduceLoops·p0.90:   1719664.640 us/op
                 reduceLoops·p0.95:   1719664.640 us/op
                 reduceLoops·p0.99:   1719664.640 us/op
                 reduceLoops·p0.999:  1719664.640 us/op
                 reduceLoops·p0.9999: 1719664.640 us/op
                 reduceLoops·p1.00:   1719664.640 us/op

Iteration  10: 1713373.184 ±(99.9%) 3719.348 us/op
                 reduceLoops·p0.00:   1711276.032 us/op
                 reduceLoops·p0.50:   1713373.184 us/op
                 reduceLoops·p0.90:   1715470.336 us/op
                 reduceLoops·p0.95:   1715470.336 us/op
                 reduceLoops·p0.99:   1715470.336 us/op
                 reduceLoops·p0.999:  1715470.336 us/op
                 reduceLoops·p0.9999: 1715470.336 us/op
                 reduceLoops·p1.00:   1715470.336 us/op

Iteration  11: 1715120.811 ±(99.9%) 5781.962 us/op
                 reduceLoops·p0.00:   1713373.184 us/op
                 reduceLoops·p0.50:   1714421.760 us/op
                 reduceLoops·p0.90:   1717567.488 us/op
                 reduceLoops·p0.95:   1717567.488 us/op
                 reduceLoops·p0.99:   1717567.488 us/op
                 reduceLoops·p0.999:  1717567.488 us/op
                 reduceLoops·p0.9999: 1717567.488 us/op
                 reduceLoops·p1.00:   1717567.488 us/op

Iteration  12: 1717567.488 ±(99.9%) 16633.431 us/op
                 reduceLoops·p0.00:   1711276.032 us/op
                 reduceLoops·p0.50:   1715470.336 us/op
                 reduceLoops·p0.90:   1725956.096 us/op
                 reduceLoops·p0.95:   1725956.096 us/op
                 reduceLoops·p0.99:   1725956.096 us/op
                 reduceLoops·p0.999:  1725956.096 us/op
                 reduceLoops·p0.9999: 1725956.096 us/op
                 reduceLoops·p1.00:   1725956.096 us/op

Iteration  13: 1717567.488 ±(99.9%) 12884.200 us/op
                 reduceLoops·p0.00:   1713373.184 us/op
                 reduceLoops·p0.50:   1715470.336 us/op
                 reduceLoops·p0.90:   1725956.096 us/op
                 reduceLoops·p0.95:   1725956.096 us/op
                 reduceLoops·p0.99:   1725956.096 us/op
                 reduceLoops·p0.999:  1725956.096 us/op
                 reduceLoops·p0.9999: 1725956.096 us/op
                 reduceLoops·p1.00:   1725956.096 us/op

Iteration  14: 1715470.336 ±(99.9%) 12335.682 us/op
                 reduceLoops·p0.00:   1711276.032 us/op
                 reduceLoops·p0.50:   1714421.760 us/op
                 reduceLoops·p0.90:   1721761.792 us/op
                 reduceLoops·p0.95:   1721761.792 us/op
                 reduceLoops·p0.99:   1721761.792 us/op
                 reduceLoops·p0.999:  1721761.792 us/op
                 reduceLoops·p0.9999: 1721761.792 us/op
                 reduceLoops·p1.00:   1721761.792 us/op

Iteration  15: 1714771.285 ±(99.9%) 12147.340 us/op
                 reduceLoops·p0.00:   1709178.880 us/op
                 reduceLoops·p0.50:   1714421.760 us/op
                 reduceLoops·p0.90:   1719664.640 us/op
                 reduceLoops·p0.95:   1719664.640 us/op
                 reduceLoops·p0.99:   1719664.640 us/op
                 reduceLoops·p0.999:  1719664.640 us/op
                 reduceLoops·p0.9999: 1719664.640 us/op
                 reduceLoops·p1.00:   1719664.640 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  N = 90
  mean = 1715283.922 ±(99.9%) 1153.659 us/op

  Histogram, us/op:
    [1700000.000, 1702500.000) = 0 
    [1702500.000, 1705000.000) = 0 
    [1705000.000, 1707500.000) = 0 
    [1707500.000, 1710000.000) = 2 
    [1710000.000, 1712500.000) = 10 
    [1712500.000, 1715000.000) = 28 
    [1715000.000, 1717500.000) = 27 
    [1717500.000, 1720000.000) = 19 
    [1720000.000, 1722500.000) = 1 
    [1722500.000, 1725000.000) = 1 
    [1725000.000, 1727500.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 1709178.880 us/op
     p(50.0000) = 1715470.336 us/op
     p(90.0000) = 1719664.640 us/op
     p(95.0000) = 1720608.358 us/op
     p(99.0000) = 1725956.096 us/op
     p(99.9000) = 1725956.096 us/op
     p(99.9900) = 1725956.096 us/op
     p(99.9990) = 1725956.096 us/op
     p(99.9999) = 1725956.096 us/op
    p(100.0000) = 1725956.096 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 92.03% complete, ETA 00:40:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.584 ±(99.9%) 0.008 us/op
# Warmup Iteration   2: 0.571 ±(99.9%) 0.034 us/op
# Warmup Iteration   3: 0.576 ±(99.9%) 0.007 us/op
# Warmup Iteration   4: 0.580 ±(99.9%) 0.008 us/op
# Warmup Iteration   5: 0.574 ±(99.9%) 0.008 us/op
Iteration   1: 0.572 ±(99.9%) 0.007 us/op
                 reduceSynchronizedBlocks·p0.00:   0.493 us/op
                 reduceSynchronizedBlocks·p0.50:   0.548 us/op
                 reduceSynchronizedBlocks·p0.90:   0.572 us/op
                 reduceSynchronizedBlocks·p0.95:   0.580 us/op
                 reduceSynchronizedBlocks·p0.99:   0.625 us/op
                 reduceSynchronizedBlocks·p0.999:  5.635 us/op
                 reduceSynchronizedBlocks·p0.9999: 20.364 us/op
                 reduceSynchronizedBlocks·p1.00:   214.272 us/op

Iteration   2: 0.573 ±(99.9%) 0.007 us/op
                 reduceSynchronizedBlocks·p0.00:   0.491 us/op
                 reduceSynchronizedBlocks·p0.50:   0.547 us/op
                 reduceSynchronizedBlocks·p0.90:   0.572 us/op
                 reduceSynchronizedBlocks·p0.95:   0.580 us/op
                 reduceSynchronizedBlocks·p0.99:   0.612 us/op
                 reduceSynchronizedBlocks·p0.999:  5.787 us/op
                 reduceSynchronizedBlocks·p0.9999: 24.693 us/op
                 reduceSynchronizedBlocks·p1.00:   218.624 us/op

Iteration   3: 0.573 ±(99.9%) 0.009 us/op
                 reduceSynchronizedBlocks·p0.00:   0.489 us/op
                 reduceSynchronizedBlocks·p0.50:   0.545 us/op
                 reduceSynchronizedBlocks·p0.90:   0.569 us/op
                 reduceSynchronizedBlocks·p0.95:   0.577 us/op
                 reduceSynchronizedBlocks·p0.99:   0.616 us/op
                 reduceSynchronizedBlocks·p0.999:  5.654 us/op
                 reduceSynchronizedBlocks·p0.9999: 25.459 us/op
                 reduceSynchronizedBlocks·p1.00:   431.104 us/op

Iteration   4: 0.572 ±(99.9%) 0.006 us/op
                 reduceSynchronizedBlocks·p0.00:   0.492 us/op
                 reduceSynchronizedBlocks·p0.50:   0.549 us/op
                 reduceSynchronizedBlocks·p0.90:   0.573 us/op
                 reduceSynchronizedBlocks·p0.95:   0.581 us/op
                 reduceSynchronizedBlocks·p0.99:   0.617 us/op
                 reduceSynchronizedBlocks·p0.999:  5.780 us/op
                 reduceSynchronizedBlocks·p0.9999: 19.283 us/op
                 reduceSynchronizedBlocks·p1.00:   206.336 us/op

Iteration   5: 0.573 ±(99.9%) 0.007 us/op
                 reduceSynchronizedBlocks·p0.00:   0.490 us/op
                 reduceSynchronizedBlocks·p0.50:   0.545 us/op
                 reduceSynchronizedBlocks·p0.90:   0.570 us/op
                 reduceSynchronizedBlocks·p0.95:   0.579 us/op
                 reduceSynchronizedBlocks·p0.99:   0.823 us/op
                 reduceSynchronizedBlocks·p0.999:  5.980 us/op
                 reduceSynchronizedBlocks·p0.9999: 22.668 us/op
                 reduceSynchronizedBlocks·p1.00:   228.352 us/op

Iteration   6: 0.574 ±(99.9%) 0.007 us/op
                 reduceSynchronizedBlocks·p0.00:   0.490 us/op
                 reduceSynchronizedBlocks·p0.50:   0.546 us/op
                 reduceSynchronizedBlocks·p0.90:   0.570 us/op
                 reduceSynchronizedBlocks·p0.95:   0.578 us/op
                 reduceSynchronizedBlocks·p0.99:   0.605 us/op
                 reduceSynchronizedBlocks·p0.999:  6.342 us/op
                 reduceSynchronizedBlocks·p0.9999: 25.838 us/op
                 reduceSynchronizedBlocks·p1.00:   289.792 us/op

Iteration   7: 0.574 ±(99.9%) 0.007 us/op
                 reduceSynchronizedBlocks·p0.00:   0.492 us/op
                 reduceSynchronizedBlocks·p0.50:   0.547 us/op
                 reduceSynchronizedBlocks·p0.90:   0.570 us/op
                 reduceSynchronizedBlocks·p0.95:   0.578 us/op
                 reduceSynchronizedBlocks·p0.99:   0.619 us/op
                 reduceSynchronizedBlocks·p0.999:  6.146 us/op
                 reduceSynchronizedBlocks·p0.9999: 24.698 us/op
                 reduceSynchronizedBlocks·p1.00:   230.912 us/op

Iteration   8: 0.573 ±(99.9%) 0.008 us/op
                 reduceSynchronizedBlocks·p0.00:   0.490 us/op
                 reduceSynchronizedBlocks·p0.50:   0.546 us/op
                 reduceSynchronizedBlocks·p0.90:   0.570 us/op
                 reduceSynchronizedBlocks·p0.95:   0.578 us/op
                 reduceSynchronizedBlocks·p0.99:   0.607 us/op
                 reduceSynchronizedBlocks·p0.999:  5.649 us/op
                 reduceSynchronizedBlocks·p0.9999: 19.670 us/op
                 reduceSynchronizedBlocks·p1.00:   321.536 us/op

Iteration   9: 0.569 ±(99.9%) 0.005 us/op
                 reduceSynchronizedBlocks·p0.00:   0.492 us/op
                 reduceSynchronizedBlocks·p0.50:   0.548 us/op
                 reduceSynchronizedBlocks·p0.90:   0.571 us/op
                 reduceSynchronizedBlocks·p0.95:   0.579 us/op
                 reduceSynchronizedBlocks·p0.99:   0.606 us/op
                 reduceSynchronizedBlocks·p0.999:  5.455 us/op
                 reduceSynchronizedBlocks·p0.9999: 20.060 us/op
                 reduceSynchronizedBlocks·p1.00:   205.056 us/op

Iteration  10: 0.571 ±(99.9%) 0.006 us/op
                 reduceSynchronizedBlocks·p0.00:   0.489 us/op
                 reduceSynchronizedBlocks·p0.50:   0.545 us/op
                 reduceSynchronizedBlocks·p0.90:   0.569 us/op
                 reduceSynchronizedBlocks·p0.95:   0.577 us/op
                 reduceSynchronizedBlocks·p0.99:   0.608 us/op
                 reduceSynchronizedBlocks·p0.999:  6.321 us/op
                 reduceSynchronizedBlocks·p0.9999: 22.737 us/op
                 reduceSynchronizedBlocks·p1.00:   190.208 us/op

Iteration  11: 0.577 ±(99.9%) 0.008 us/op
                 reduceSynchronizedBlocks·p0.00:   0.495 us/op
                 reduceSynchronizedBlocks·p0.50:   0.547 us/op
                 reduceSynchronizedBlocks·p0.90:   0.571 us/op
                 reduceSynchronizedBlocks·p0.95:   0.579 us/op
                 reduceSynchronizedBlocks·p0.99:   0.622 us/op
                 reduceSynchronizedBlocks·p0.999:  5.820 us/op
                 reduceSynchronizedBlocks·p0.9999: 31.586 us/op
                 reduceSynchronizedBlocks·p1.00:   187.904 us/op

Iteration  12: 0.582 ±(99.9%) 0.006 us/op
                 reduceSynchronizedBlocks·p0.00:   0.503 us/op
                 reduceSynchronizedBlocks·p0.50:   0.558 us/op
                 reduceSynchronizedBlocks·p0.90:   0.578 us/op
                 reduceSynchronizedBlocks·p0.95:   0.584 us/op
                 reduceSynchronizedBlocks·p0.99:   0.613 us/op
                 reduceSynchronizedBlocks·p0.999:  5.842 us/op
                 reduceSynchronizedBlocks·p0.9999: 23.009 us/op
                 reduceSynchronizedBlocks·p1.00:   174.592 us/op

Iteration  13: 0.579 ±(99.9%) 0.006 us/op
                 reduceSynchronizedBlocks·p0.00:   0.504 us/op
                 reduceSynchronizedBlocks·p0.50:   0.555 us/op
                 reduceSynchronizedBlocks·p0.90:   0.575 us/op
                 reduceSynchronizedBlocks·p0.95:   0.582 us/op
                 reduceSynchronizedBlocks·p0.99:   0.612 us/op
                 reduceSynchronizedBlocks·p0.999:  6.008 us/op
                 reduceSynchronizedBlocks·p0.9999: 21.685 us/op
                 reduceSynchronizedBlocks·p1.00:   232.192 us/op

Iteration  14: 0.581 ±(99.9%) 0.008 us/op
                 reduceSynchronizedBlocks·p0.00:   0.501 us/op
                 reduceSynchronizedBlocks·p0.50:   0.555 us/op
                 reduceSynchronizedBlocks·p0.90:   0.574 us/op
                 reduceSynchronizedBlocks·p0.95:   0.580 us/op
                 reduceSynchronizedBlocks·p0.99:   0.611 us/op
                 reduceSynchronizedBlocks·p0.999:  6.416 us/op
                 reduceSynchronizedBlocks·p0.9999: 23.712 us/op
                 reduceSynchronizedBlocks·p1.00:   206.592 us/op

Iteration  15: 0.584 ±(99.9%) 0.007 us/op
                 reduceSynchronizedBlocks·p0.00:   0.503 us/op
                 reduceSynchronizedBlocks·p0.50:   0.556 us/op
                 reduceSynchronizedBlocks·p0.90:   0.576 us/op
                 reduceSynchronizedBlocks·p0.95:   0.583 us/op
                 reduceSynchronizedBlocks·p0.99:   0.840 us/op
                 reduceSynchronizedBlocks·p0.999:  6.248 us/op
                 reduceSynchronizedBlocks·p0.9999: 21.045 us/op
                 reduceSynchronizedBlocks·p1.00:   224.512 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  N = 4550049
  mean =      0.575 ±(99.9%) 0.002 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 4549793 
    [ 50.000, 100.000) = 51 
    [100.000, 150.000) = 101 
    [150.000, 200.000) = 86 
    [200.000, 250.000) = 13 
    [250.000, 300.000) = 2 
    [300.000, 350.000) = 2 
    [350.000, 400.000) = 0 
    [400.000, 450.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      0.489 us/op
     p(50.0000) =      0.549 us/op
     p(90.0000) =      0.572 us/op
     p(95.0000) =      0.580 us/op
     p(99.0000) =      0.620 us/op
     p(99.9000) =      5.912 us/op
     p(99.9900) =     22.816 us/op
     p(99.9990) =    172.288 us/op
     p(99.9999) =    270.923 us/op
    p(100.0000) =    431.104 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 92.75% complete, ETA 00:37:03
# Fork: 1 of 1
# Warmup Iteration   1: 8375.263 ±(99.9%) 42.290 us/op
# Warmup Iteration   2: 8352.712 ±(99.9%) 9.299 us/op
# Warmup Iteration   3: 8361.621 ±(99.9%) 12.797 us/op
# Warmup Iteration   4: 8358.292 ±(99.9%) 8.341 us/op
# Warmup Iteration   5: 8366.445 ±(99.9%) 8.928 us/op
Iteration   1: 8363.100 ±(99.9%) 9.085 us/op
                 reduceYoungObjects·p0.00:   8216.576 us/op
                 reduceYoungObjects·p0.50:   8331.264 us/op
                 reduceYoungObjects·p0.90:   8486.912 us/op
                 reduceYoungObjects·p0.95:   8536.064 us/op
                 reduceYoungObjects·p0.99:   8798.863 us/op
                 reduceYoungObjects·p0.999:  9004.777 us/op
                 reduceYoungObjects·p0.9999: 9011.200 us/op
                 reduceYoungObjects·p1.00:   9011.200 us/op

Iteration   2: 8352.870 ±(99.9%) 8.464 us/op
                 reduceYoungObjects·p0.00:   8175.616 us/op
                 reduceYoungObjects·p0.50:   8314.880 us/op
                 reduceYoungObjects·p0.90:   8470.528 us/op
                 reduceYoungObjects·p0.95:   8519.680 us/op
                 reduceYoungObjects·p0.99:   8733.000 us/op
                 reduceYoungObjects·p0.999:  9063.924 us/op
                 reduceYoungObjects·p0.9999: 9093.120 us/op
                 reduceYoungObjects·p1.00:   9093.120 us/op

Iteration   3: 8351.145 ±(99.9%) 8.956 us/op
                 reduceYoungObjects·p0.00:   8093.696 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8454.144 us/op
                 reduceYoungObjects·p0.95:   8519.680 us/op
                 reduceYoungObjects·p0.99:   8716.288 us/op
                 reduceYoungObjects·p0.999:  9707.618 us/op
                 reduceYoungObjects·p0.9999: 9879.552 us/op
                 reduceYoungObjects·p1.00:   9879.552 us/op

Iteration   4: 8352.042 ±(99.9%) 7.660 us/op
                 reduceYoungObjects·p0.00:   8273.920 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8470.528 us/op
                 reduceYoungObjects·p0.95:   8503.296 us/op
                 reduceYoungObjects·p0.99:   8749.056 us/op
                 reduceYoungObjects·p0.999:  8840.872 us/op
                 reduceYoungObjects·p0.9999: 8847.360 us/op
                 reduceYoungObjects·p1.00:   8847.360 us/op

Iteration   5: 8352.931 ±(99.9%) 8.062 us/op
                 reduceYoungObjects·p0.00:   8101.888 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8470.528 us/op
                 reduceYoungObjects·p0.95:   8503.296 us/op
                 reduceYoungObjects·p0.99:   8683.848 us/op
                 reduceYoungObjects·p0.999:  9175.532 us/op
                 reduceYoungObjects·p0.9999: 9224.192 us/op
                 reduceYoungObjects·p1.00:   9224.192 us/op

Iteration   6: 8354.800 ±(99.9%) 8.457 us/op
                 reduceYoungObjects·p0.00:   8265.728 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8470.528 us/op
                 reduceYoungObjects·p0.95:   8503.296 us/op
                 reduceYoungObjects·p0.99:   8766.095 us/op
                 reduceYoungObjects·p0.999:  9112.912 us/op
                 reduceYoungObjects·p0.9999: 9125.888 us/op
                 reduceYoungObjects·p1.00:   9125.888 us/op

Iteration   7: 8347.327 ±(99.9%) 7.132 us/op
                 reduceYoungObjects·p0.00:   8273.920 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8454.144 us/op
                 reduceYoungObjects·p0.95:   8486.912 us/op
                 reduceYoungObjects·p0.99:   8667.136 us/op
                 reduceYoungObjects·p0.999:  8873.607 us/op
                 reduceYoungObjects·p0.9999: 8880.128 us/op
                 reduceYoungObjects·p1.00:   8880.128 us/op

Iteration   8: 8350.399 ±(99.9%) 7.527 us/op
                 reduceYoungObjects·p0.00:   8241.152 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8454.144 us/op
                 reduceYoungObjects·p0.95:   8503.296 us/op
                 reduceYoungObjects·p0.99:   8683.848 us/op
                 reduceYoungObjects·p0.999:  8857.256 us/op
                 reduceYoungObjects·p0.9999: 8863.744 us/op
                 reduceYoungObjects·p1.00:   8863.744 us/op

Iteration   9: 8365.081 ±(99.9%) 8.662 us/op
                 reduceYoungObjects·p0.00:   8126.464 us/op
                 reduceYoungObjects·p0.50:   8331.264 us/op
                 reduceYoungObjects·p0.90:   8486.912 us/op
                 reduceYoungObjects·p0.95:   8552.448 us/op
                 reduceYoungObjects·p0.99:   8749.056 us/op
                 reduceYoungObjects·p0.999:  8969.126 us/op
                 reduceYoungObjects·p0.9999: 8994.816 us/op
                 reduceYoungObjects·p1.00:   8994.816 us/op

Iteration  10: 8363.538 ±(99.9%) 8.816 us/op
                 reduceYoungObjects·p0.00:   8249.344 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8486.912 us/op
                 reduceYoungObjects·p0.95:   8552.448 us/op
                 reduceYoungObjects·p0.99:   8733.327 us/op
                 reduceYoungObjects·p0.999:  8929.608 us/op
                 reduceYoungObjects·p0.9999: 8945.664 us/op
                 reduceYoungObjects·p1.00:   8945.664 us/op

Iteration  11: 8370.070 ±(99.9%) 9.213 us/op
                 reduceYoungObjects·p0.00:   8134.656 us/op
                 reduceYoungObjects·p0.50:   8331.264 us/op
                 reduceYoungObjects·p0.90:   8486.912 us/op
                 reduceYoungObjects·p0.95:   8568.832 us/op
                 reduceYoungObjects·p0.99:   8782.643 us/op
                 reduceYoungObjects·p0.999:  8939.274 us/op
                 reduceYoungObjects·p0.9999: 8945.664 us/op
                 reduceYoungObjects·p1.00:   8945.664 us/op

Iteration  12: 8366.390 ±(99.9%) 16.066 us/op
                 reduceYoungObjects·p0.00:   8085.504 us/op
                 reduceYoungObjects·p0.50:   8331.264 us/op
                 reduceYoungObjects·p0.90:   8486.912 us/op
                 reduceYoungObjects·p0.95:   8536.064 us/op
                 reduceYoungObjects·p0.99:   8684.175 us/op
                 reduceYoungObjects·p0.999:  12495.225 us/op
                 reduceYoungObjects·p0.9999: 13336.576 us/op
                 reduceYoungObjects·p1.00:   13336.576 us/op

Iteration  13: 8369.493 ±(99.9%) 9.201 us/op
                 reduceYoungObjects·p0.00:   8257.536 us/op
                 reduceYoungObjects·p0.50:   8331.264 us/op
                 reduceYoungObjects·p0.90:   8486.912 us/op
                 reduceYoungObjects·p0.95:   8568.832 us/op
                 reduceYoungObjects·p0.99:   8749.875 us/op
                 reduceYoungObjects·p0.999:  9040.773 us/op
                 reduceYoungObjects·p0.9999: 9043.968 us/op
                 reduceYoungObjects·p1.00:   9043.968 us/op

Iteration  14: 8359.107 ±(99.9%) 8.131 us/op
                 reduceYoungObjects·p0.00:   8069.120 us/op
                 reduceYoungObjects·p0.50:   8331.264 us/op
                 reduceYoungObjects·p0.90:   8470.528 us/op
                 reduceYoungObjects·p0.95:   8536.064 us/op
                 reduceYoungObjects·p0.99:   8684.012 us/op
                 reduceYoungObjects·p0.999:  8975.450 us/op
                 reduceYoungObjects·p0.9999: 8994.816 us/op
                 reduceYoungObjects·p1.00:   8994.816 us/op

Iteration  15: 8358.840 ±(99.9%) 7.660 us/op
                 reduceYoungObjects·p0.00:   8265.728 us/op
                 reduceYoungObjects·p0.50:   8331.264 us/op
                 reduceYoungObjects·p0.90:   8470.528 us/op
                 reduceYoungObjects·p0.95:   8519.680 us/op
                 reduceYoungObjects·p0.99:   8699.904 us/op
                 reduceYoungObjects·p0.999:  8923.070 us/op
                 reduceYoungObjects·p0.9999: 8945.664 us/op
                 reduceYoungObjects·p1.00:   8945.664 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  N = 17940
  mean =   8358.468 ±(99.9%) 2.350 us/op

  Histogram, us/op:
    [ 8000.000,  8500.000) = 16659 
    [ 8500.000,  9000.000) = 1268 
    [ 9000.000,  9500.000) = 11 
    [ 9500.000, 10000.000) = 1 
    [10000.000, 10500.000) = 0 
    [10500.000, 11000.000) = 0 
    [11000.000, 11500.000) = 0 
    [11500.000, 12000.000) = 0 
    [12000.000, 12500.000) = 0 
    [12500.000, 13000.000) = 0 
    [13000.000, 13500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   8069.120 us/op
     p(50.0000) =   8323.072 us/op
     p(90.0000) =   8470.528 us/op
     p(95.0000) =   8519.680 us/op
     p(99.0000) =   8716.288 us/op
     p(99.9000) =   8978.432 us/op
     p(99.9900) =  10591.353 us/op
     p(99.9990) =  13336.576 us/op
     p(99.9999) =  13336.576 us/op
    p(100.0000) =  13336.576 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 93.48% complete, ETA 00:33:20
# Fork: 1 of 1
# Warmup Iteration   1: 41520.455 ±(99.9%) 556.454 us/op
# Warmup Iteration   2: 35953.568 ±(99.9%) 137.696 us/op
# Warmup Iteration   3: 39313.890 ±(99.9%) 208.022 us/op
# Warmup Iteration   4: 34612.532 ±(99.9%) 126.089 us/op
# Warmup Iteration   5: 34061.556 ±(99.9%) 100.322 us/op
Iteration   1: 34307.423 ±(99.9%) 102.761 us/op
                 redundantCode·p0.00:   33882.112 us/op
                 redundantCode·p0.50:   34275.328 us/op
                 redundantCode·p0.90:   34537.472 us/op
                 redundantCode·p0.95:   34734.080 us/op
                 redundantCode·p0.99:   35439.247 us/op
                 redundantCode·p0.999:  40566.784 us/op
                 redundantCode·p0.9999: 40566.784 us/op
                 redundantCode·p1.00:   40566.784 us/op

Iteration   2: 31911.023 ±(99.9%) 126.409 us/op
                 redundantCode·p0.00:   31490.048 us/op
                 redundantCode·p0.50:   31817.728 us/op
                 redundantCode·p0.90:   32079.872 us/op
                 redundantCode·p0.95:   32317.440 us/op
                 redundantCode·p0.99:   36226.662 us/op
                 redundantCode·p0.999:  40173.568 us/op
                 redundantCode·p0.9999: 40173.568 us/op
                 redundantCode·p1.00:   40173.568 us/op

Iteration   3: 32673.765 ±(99.9%) 173.118 us/op
                 redundantCode·p0.00:   32210.944 us/op
                 redundantCode·p0.50:   32571.392 us/op
                 redundantCode·p0.90:   32908.902 us/op
                 redundantCode·p0.95:   33138.278 us/op
                 redundantCode·p0.99:   33547.551 us/op
                 redundantCode·p0.999:  45809.664 us/op
                 redundantCode·p0.9999: 45809.664 us/op
                 redundantCode·p1.00:   45809.664 us/op

Iteration   4: 33651.081 ±(99.9%) 95.333 us/op
                 redundantCode·p0.00:   33292.288 us/op
                 redundantCode·p0.50:   33619.968 us/op
                 redundantCode·p0.90:   33882.112 us/op
                 redundantCode·p0.95:   34013.184 us/op
                 redundantCode·p0.99:   34502.083 us/op
                 redundantCode·p0.999:  39256.064 us/op
                 redundantCode·p0.9999: 39256.064 us/op
                 redundantCode·p1.00:   39256.064 us/op

Iteration   5: 31882.951 ±(99.9%) 237.311 us/op
                 redundantCode·p0.00:   31424.512 us/op
                 redundantCode·p0.50:   31735.808 us/op
                 redundantCode·p0.90:   32063.488 us/op
                 redundantCode·p0.95:   32219.136 us/op
                 redundantCode·p0.99:   37253.939 us/op
                 redundantCode·p0.999:  50724.864 us/op
                 redundantCode·p0.9999: 50724.864 us/op
                 redundantCode·p1.00:   50724.864 us/op

Iteration   6: 36877.180 ±(99.9%) 124.727 us/op
                 redundantCode·p0.00:   36438.016 us/op
                 redundantCode·p0.50:   36765.696 us/op
                 redundantCode·p0.90:   37093.376 us/op
                 redundantCode·p0.95:   37355.520 us/op
                 redundantCode·p0.99:   39083.049 us/op
                 redundantCode·p0.999:  44695.552 us/op
                 redundantCode·p0.9999: 44695.552 us/op
                 redundantCode·p1.00:   44695.552 us/op

Iteration   7: 38338.309 ±(99.9%) 149.091 us/op
                 redundantCode·p0.00:   37748.736 us/op
                 redundantCode·p0.50:   38207.488 us/op
                 redundantCode·p0.90:   38731.776 us/op
                 redundantCode·p0.95:   38928.384 us/op
                 redundantCode·p0.99:   40784.364 us/op
                 redundantCode·p0.999:  47382.528 us/op
                 redundantCode·p0.9999: 47382.528 us/op
                 redundantCode·p1.00:   47382.528 us/op

Iteration   8: 38442.913 ±(99.9%) 158.579 us/op
                 redundantCode·p0.00:   37945.344 us/op
                 redundantCode·p0.50:   38338.560 us/op
                 redundantCode·p0.90:   38731.776 us/op
                 redundantCode·p0.95:   38862.848 us/op
                 redundantCode·p0.99:   41756.262 us/op
                 redundantCode·p0.999:  47972.352 us/op
                 redundantCode·p0.9999: 47972.352 us/op
                 redundantCode·p1.00:   47972.352 us/op

Iteration   9: 32360.786 ±(99.9%) 122.618 us/op
                 redundantCode·p0.00:   31916.032 us/op
                 redundantCode·p0.50:   32243.712 us/op
                 redundantCode·p0.90:   32604.160 us/op
                 redundantCode·p0.95:   32833.536 us/op
                 redundantCode·p0.99:   37529.190 us/op
                 redundantCode·p0.999:  39190.528 us/op
                 redundantCode·p0.9999: 39190.528 us/op
                 redundantCode·p1.00:   39190.528 us/op

Iteration  10: 38390.537 ±(99.9%) 174.963 us/op
                 redundantCode·p0.00:   37945.344 us/op
                 redundantCode·p0.50:   38273.024 us/op
                 redundantCode·p0.90:   38600.704 us/op
                 redundantCode·p0.95:   38790.758 us/op
                 redundantCode·p0.99:   41350.595 us/op
                 redundantCode·p0.999:  49872.896 us/op
                 redundantCode·p0.9999: 49872.896 us/op
                 redundantCode·p1.00:   49872.896 us/op

Iteration  11: 34999.890 ±(99.9%) 247.263 us/op
                 redundantCode·p0.00:   34537.472 us/op
                 redundantCode·p0.50:   34865.152 us/op
                 redundantCode·p0.90:   35127.296 us/op
                 redundantCode·p0.95:   35389.440 us/op
                 redundantCode·p0.99:   37202.821 us/op
                 redundantCode·p0.999:  52559.872 us/op
                 redundantCode·p0.9999: 52559.872 us/op
                 redundantCode·p1.00:   52559.872 us/op

Iteration  12: 34013.630 ±(99.9%) 122.991 us/op
                 redundantCode·p0.00:   33619.968 us/op
                 redundantCode·p0.50:   33947.648 us/op
                 redundantCode·p0.90:   34275.328 us/op
                 redundantCode·p0.95:   34471.936 us/op
                 redundantCode·p0.99:   35386.163 us/op
                 redundantCode·p0.999:  41943.040 us/op
                 redundantCode·p0.9999: 41943.040 us/op
                 redundantCode·p1.00:   41943.040 us/op

Iteration  13: 36723.926 ±(99.9%) 112.905 us/op
                 redundantCode·p0.00:   36306.944 us/op
                 redundantCode·p0.50:   36634.624 us/op
                 redundantCode·p0.90:   36896.768 us/op
                 redundantCode·p0.95:   37093.376 us/op
                 redundantCode·p0.99:   39089.603 us/op
                 redundantCode·p0.999:  42926.080 us/op
                 redundantCode·p0.9999: 42926.080 us/op
                 redundantCode·p1.00:   42926.080 us/op

Iteration  14: 36311.218 ±(99.9%) 267.830 us/op
                 redundantCode·p0.00:   35848.192 us/op
                 redundantCode·p0.50:   36175.872 us/op
                 redundantCode·p0.90:   36569.088 us/op
                 redundantCode·p0.95:   36775.526 us/op
                 redundantCode·p0.99:   39539.835 us/op
                 redundantCode·p0.999:  56819.712 us/op
                 redundantCode·p0.9999: 56819.712 us/op
                 redundantCode·p1.00:   56819.712 us/op

Iteration  15: 32694.326 ±(99.9%) 109.836 us/op
                 redundantCode·p0.00:   32309.248 us/op
                 redundantCode·p0.50:   32604.160 us/op
                 redundantCode·p0.90:   33007.206 us/op
                 redundantCode·p0.95:   33193.984 us/op
                 redundantCode·p0.99:   33610.793 us/op
                 redundantCode·p0.999:  39911.424 us/op
                 redundantCode·p0.9999: 39911.424 us/op
                 redundantCode·p1.00:   39911.424 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  N = 4320
  mean =  34749.577 ±(99.9%) 123.901 us/op

  Histogram, us/op:
    [30000.000, 32500.000) = 1053 
    [32500.000, 35000.000) = 1587 
    [35000.000, 37500.000) = 863 
    [37500.000, 40000.000) = 795 
    [40000.000, 42500.000) = 7 
    [42500.000, 45000.000) = 5 
    [45000.000, 47500.000) = 5 
    [47500.000, 50000.000) = 2 
    [50000.000, 52500.000) = 1 
    [52500.000, 55000.000) = 1 
    [55000.000, 57500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  31424.512 us/op
     p(50.0000) =  34144.256 us/op
     p(90.0000) =  38273.024 us/op
     p(95.0000) =  38469.632 us/op
     p(99.0000) =  38980.157 us/op
     p(99.9000) =  49262.821 us/op
     p(99.9900) =  56819.712 us/op
     p(99.9990) =  56819.712 us/op
     p(99.9999) =  56819.712 us/op
    p(100.0000) =  56819.712 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 94.20% complete, ETA 00:29:37
# Fork: 1 of 1
# Warmup Iteration   1: 30315.563 ±(99.9%) 3200.104 us/op
# Warmup Iteration   2: 29596.872 ±(99.9%) 2993.968 us/op
# Warmup Iteration   3: 28674.441 ±(99.9%) 2413.823 us/op
# Warmup Iteration   4: 29574.477 ±(99.9%) 2985.632 us/op
# Warmup Iteration   5: 29014.454 ±(99.9%) 2694.597 us/op
Iteration   1: 28687.680 ±(99.9%) 2481.816 us/op
                 split·p0.00:   24051.712 us/op
                 split·p0.50:   24412.160 us/op
                 split·p0.90:   37748.736 us/op
                 split·p0.95:   69271.552 us/op
                 split·p0.99:   91619.328 us/op
                 split·p0.999:  109182.976 us/op
                 split·p0.9999: 109182.976 us/op
                 split·p1.00:   109182.976 us/op

Iteration   2: 28601.876 ±(99.9%) 2369.183 us/op
                 split·p0.00:   24150.016 us/op
                 split·p0.50:   24461.312 us/op
                 split·p0.90:   38279.578 us/op
                 split·p0.95:   75019.059 us/op
                 split·p0.99:   84407.747 us/op
                 split·p0.999:  86114.304 us/op
                 split·p0.9999: 86114.304 us/op
                 split·p1.00:   86114.304 us/op

Iteration   3: 29609.572 ±(99.9%) 2998.724 us/op
                 split·p0.00:   23986.176 us/op
                 split·p0.50:   24346.624 us/op
                 split·p0.90:   39439.565 us/op
                 split·p0.95:   68852.122 us/op
                 split·p0.99:   105647.964 us/op
                 split·p0.999:  108920.832 us/op
                 split·p0.9999: 108920.832 us/op
                 split·p1.00:   108920.832 us/op

Iteration   4: 29603.093 ±(99.9%) 3026.899 us/op
                 split·p0.00:   24051.712 us/op
                 split·p0.50:   24346.624 us/op
                 split·p0.90:   39570.637 us/op
                 split·p0.95:   76867.174 us/op
                 split·p0.99:   107156.603 us/op
                 split·p0.999:  120061.952 us/op
                 split·p0.9999: 120061.952 us/op
                 split·p1.00:   120061.952 us/op

Iteration   5: 29352.440 ±(99.9%) 2942.030 us/op
                 split·p0.00:   24051.712 us/op
                 split·p0.50:   24346.624 us/op
                 split·p0.90:   35756.442 us/op
                 split·p0.95:   68996.301 us/op
                 split·p0.99:   109384.827 us/op
                 split·p0.999:  115343.360 us/op
                 split·p0.9999: 115343.360 us/op
                 split·p1.00:   115343.360 us/op

Iteration   6: 28371.983 ±(99.9%) 2370.164 us/op
                 split·p0.00:   23986.176 us/op
                 split·p0.50:   24281.088 us/op
                 split·p0.90:   37853.594 us/op
                 split·p0.95:   76926.157 us/op
                 split·p0.99:   85296.415 us/op
                 split·p0.999:  88211.456 us/op
                 split·p0.9999: 88211.456 us/op
                 split·p1.00:   88211.456 us/op

Iteration   7: 28392.727 ±(99.9%) 2363.235 us/op
                 split·p0.00:   23986.176 us/op
                 split·p0.50:   24281.088 us/op
                 split·p0.90:   37650.432 us/op
                 split·p0.95:   75104.256 us/op
                 split·p0.99:   83993.559 us/op
                 split·p0.999:  87425.024 us/op
                 split·p0.9999: 87425.024 us/op
                 split·p1.00:   87425.024 us/op

Iteration   8: 29409.184 ±(99.9%) 2935.229 us/op
                 split·p0.00:   24051.712 us/op
                 split·p0.50:   24297.472 us/op
                 split·p0.90:   38594.150 us/op
                 split·p0.95:   70955.827 us/op
                 split·p0.99:   106357.064 us/op
                 split·p0.999:  115212.288 us/op
                 split·p0.9999: 115212.288 us/op
                 split·p1.00:   115212.288 us/op

Iteration   9: 28345.063 ±(99.9%) 2339.150 us/op
                 split·p0.00:   23986.176 us/op
                 split·p0.50:   24313.856 us/op
                 split·p0.90:   37617.664 us/op
                 split·p0.95:   73911.501 us/op
                 split·p0.99:   84701.348 us/op
                 split·p0.999:  86376.448 us/op
                 split·p0.9999: 86376.448 us/op
                 split·p1.00:   86376.448 us/op

Iteration  10: 28337.358 ±(99.9%) 2349.563 us/op
                 split·p0.00:   23986.176 us/op
                 split·p0.50:   24281.088 us/op
                 split·p0.90:   37499.699 us/op
                 split·p0.95:   75235.328 us/op
                 split·p0.99:   82968.576 us/op
                 split·p0.999:  89128.960 us/op
                 split·p0.9999: 89128.960 us/op
                 split·p1.00:   89128.960 us/op

Iteration  11: 29542.140 ±(99.9%) 3026.624 us/op
                 split·p0.00:   24051.712 us/op
                 split·p0.50:   24346.624 us/op
                 split·p0.90:   39059.456 us/op
                 split·p0.95:   69468.160 us/op
                 split·p0.99:   108868.403 us/op
                 split·p0.999:  117440.512 us/op
                 split·p0.9999: 117440.512 us/op
                 split·p1.00:   117440.512 us/op

Iteration  12: 28337.265 ±(99.9%) 2319.193 us/op
                 split·p0.00:   24051.712 us/op
                 split·p0.50:   24313.856 us/op
                 split·p0.90:   37722.522 us/op
                 split·p0.95:   75471.258 us/op
                 split·p0.99:   82433.802 us/op
                 split·p0.999:  84410.368 us/op
                 split·p0.9999: 84410.368 us/op
                 split·p1.00:   84410.368 us/op

Iteration  13: 28513.855 ±(99.9%) 2394.248 us/op
                 split·p0.00:   23953.408 us/op
                 split·p0.50:   24313.856 us/op
                 split·p0.90:   38469.632 us/op
                 split·p0.95:   77489.766 us/op
                 split·p0.99:   85186.314 us/op
                 split·p0.999:  89653.248 us/op
                 split·p0.9999: 89653.248 us/op
                 split·p1.00:   89653.248 us/op

Iteration  14: 29111.510 ±(99.9%) 2783.704 us/op
                 split·p0.00:   24051.712 us/op
                 split·p0.50:   24346.624 us/op
                 split·p0.90:   38010.880 us/op
                 split·p0.95:   65470.464 us/op
                 split·p0.99:   106076.570 us/op
                 split·p0.999:  114950.144 us/op
                 split·p0.9999: 114950.144 us/op
                 split·p1.00:   114950.144 us/op

Iteration  15: 28509.000 ±(99.9%) 2423.983 us/op
                 split·p0.00:   24051.712 us/op
                 split·p0.50:   24313.856 us/op
                 split·p0.90:   37617.664 us/op
                 split·p0.95:   76939.264 us/op
                 split·p0.99:   84646.298 us/op
                 split·p0.999:  94502.912 us/op
                 split·p0.9999: 94502.912 us/op
                 split·p1.00:   94502.912 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  N = 5207
  mean =  28839.968 ±(99.9%) 669.226 us/op

  Histogram, us/op:
    [ 20000.000,  30000.000) = 4605 
    [ 30000.000,  40000.000) = 171 
    [ 40000.000,  50000.000) = 69 
    [ 50000.000,  60000.000) = 40 
    [ 60000.000,  70000.000) = 51 
    [ 70000.000,  80000.000) = 89 
    [ 80000.000,  90000.000) = 121 
    [ 90000.000, 100000.000) = 25 
    [100000.000, 110000.000) = 26 
    [110000.000, 120000.000) = 9 

  Percentiles, us/op:
      p(0.0000) =  23953.408 us/op
     p(50.0000) =  24346.624 us/op
     p(90.0000) =  37748.736 us/op
     p(95.0000) =  72325.530 us/op
     p(99.0000) =  95105.843 us/op
     p(99.9000) = 114841.092 us/op
     p(99.9900) = 120061.952 us/op
     p(99.9990) = 120061.952 us/op
     p(99.9999) = 120061.952 us/op
    p(100.0000) = 120061.952 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 94.92% complete, ETA 00:25:55
# Fork: 1 of 1
# Warmup Iteration   1: 22116.515 ±(99.9%) 1138.809 us/op
# Warmup Iteration   2: 22047.451 ±(99.9%) 1075.166 us/op
# Warmup Iteration   3: 21864.287 ±(99.9%) 1029.131 us/op
# Warmup Iteration   4: 21927.038 ±(99.9%) 1064.693 us/op
# Warmup Iteration   5: 22165.772 ±(99.9%) 1153.617 us/op
Iteration   1: 22311.936 ±(99.9%) 1200.227 us/op
                 mapToPair·p0.00:   19628.032 us/op
                 mapToPair·p0.50:   20054.016 us/op
                 mapToPair·p0.90:   22036.480 us/op
                 mapToPair·p0.95:   42100.326 us/op
                 mapToPair·p0.99:   58566.246 us/op
                 mapToPair·p0.999:  64618.496 us/op
                 mapToPair·p0.9999: 64618.496 us/op
                 mapToPair·p1.00:   64618.496 us/op

Iteration   2: 22280.416 ±(99.9%) 1188.331 us/op
                 mapToPair·p0.00:   19660.800 us/op
                 mapToPair·p0.50:   20054.016 us/op
                 mapToPair·p0.90:   21692.416 us/op
                 mapToPair·p0.95:   42860.544 us/op
                 mapToPair·p0.99:   60096.512 us/op
                 mapToPair·p0.999:  61538.304 us/op
                 mapToPair·p0.9999: 61538.304 us/op
                 mapToPair·p1.00:   61538.304 us/op

Iteration   3: 22143.411 ±(99.9%) 1150.422 us/op
                 mapToPair·p0.00:   19628.032 us/op
                 mapToPair·p0.50:   20021.248 us/op
                 mapToPair·p0.90:   22180.659 us/op
                 mapToPair·p0.95:   39708.262 us/op
                 mapToPair·p0.99:   58241.843 us/op
                 mapToPair·p0.999:  65273.856 us/op
                 mapToPair·p0.9999: 65273.856 us/op
                 mapToPair·p1.00:   65273.856 us/op

Iteration   4: 22058.723 ±(99.9%) 1097.041 us/op
                 mapToPair·p0.00:   19595.264 us/op
                 mapToPair·p0.50:   20021.248 us/op
                 mapToPair·p0.90:   21987.328 us/op
                 mapToPair·p0.95:   41477.734 us/op
                 mapToPair·p0.99:   57994.117 us/op
                 mapToPair·p0.999:  62062.592 us/op
                 mapToPair·p0.9999: 62062.592 us/op
                 mapToPair·p1.00:   62062.592 us/op

Iteration   5: 22152.621 ±(99.9%) 1160.337 us/op
                 mapToPair·p0.00:   19431.424 us/op
                 mapToPair·p0.50:   20021.248 us/op
                 mapToPair·p0.90:   21764.506 us/op
                 mapToPair·p0.95:   41169.715 us/op
                 mapToPair·p0.99:   58342.769 us/op
                 mapToPair·p0.999:  61669.376 us/op
                 mapToPair·p0.9999: 61669.376 us/op
                 mapToPair·p1.00:   61669.376 us/op

Iteration   6: 22433.516 ±(99.9%) 1218.369 us/op
                 mapToPair·p0.00:   19595.264 us/op
                 mapToPair·p0.50:   20054.016 us/op
                 mapToPair·p0.90:   22629.581 us/op
                 mapToPair·p0.95:   46851.686 us/op
                 mapToPair·p0.99:   54888.366 us/op
                 mapToPair·p0.999:  58916.864 us/op
                 mapToPair·p0.9999: 58916.864 us/op
                 mapToPair·p1.00:   58916.864 us/op

Iteration   7: 22180.158 ±(99.9%) 1114.536 us/op
                 mapToPair·p0.00:   19660.800 us/op
                 mapToPair·p0.50:   20054.016 us/op
                 mapToPair·p0.90:   22242.918 us/op
                 mapToPair·p0.95:   41327.002 us/op
                 mapToPair·p0.99:   55938.908 us/op
                 mapToPair·p0.999:  60555.264 us/op
                 mapToPair·p0.9999: 60555.264 us/op
                 mapToPair·p1.00:   60555.264 us/op

Iteration   8: 22125.215 ±(99.9%) 1132.359 us/op
                 mapToPair·p0.00:   19595.264 us/op
                 mapToPair·p0.50:   20021.248 us/op
                 mapToPair·p0.90:   21987.328 us/op
                 mapToPair·p0.95:   40940.339 us/op
                 mapToPair·p0.99:   56730.583 us/op
                 mapToPair·p0.999:  64028.672 us/op
                 mapToPair·p0.9999: 64028.672 us/op
                 mapToPair·p1.00:   64028.672 us/op

Iteration   9: 21981.711 ±(99.9%) 1075.525 us/op
                 mapToPair·p0.00:   19529.728 us/op
                 mapToPair·p0.50:   19988.480 us/op
                 mapToPair·p0.90:   22105.293 us/op
                 mapToPair·p0.95:   38023.987 us/op
                 mapToPair·p0.99:   55312.384 us/op
                 mapToPair·p0.999:  65929.216 us/op
                 mapToPair·p0.9999: 65929.216 us/op
                 mapToPair·p1.00:   65929.216 us/op

Iteration  10: 22121.880 ±(99.9%) 1136.785 us/op
                 mapToPair·p0.00:   19628.032 us/op
                 mapToPair·p0.50:   19988.480 us/op
                 mapToPair·p0.90:   22177.382 us/op
                 mapToPair·p0.95:   42578.739 us/op
                 mapToPair·p0.99:   57543.885 us/op
                 mapToPair·p0.999:  60620.800 us/op
                 mapToPair·p0.9999: 60620.800 us/op
                 mapToPair·p1.00:   60620.800 us/op

Iteration  11: 21974.509 ±(99.9%) 1076.069 us/op
                 mapToPair·p0.00:   19628.032 us/op
                 mapToPair·p0.50:   20054.016 us/op
                 mapToPair·p0.90:   21993.882 us/op
                 mapToPair·p0.95:   35363.226 us/op
                 mapToPair·p0.99:   58864.435 us/op
                 mapToPair·p0.999:  62914.560 us/op
                 mapToPair·p0.9999: 62914.560 us/op
                 mapToPair·p1.00:   62914.560 us/op

Iteration  12: 22504.236 ±(99.9%) 1280.642 us/op
                 mapToPair·p0.00:   19726.336 us/op
                 mapToPair·p0.50:   20119.552 us/op
                 mapToPair·p0.90:   22265.856 us/op
                 mapToPair·p0.95:   45875.200 us/op
                 mapToPair·p0.99:   61548.134 us/op
                 mapToPair·p0.999:  63504.384 us/op
                 mapToPair·p0.9999: 63504.384 us/op
                 mapToPair·p1.00:   63504.384 us/op

Iteration  13: 22130.072 ±(99.9%) 1083.902 us/op
                 mapToPair·p0.00:   19759.104 us/op
                 mapToPair·p0.50:   20152.320 us/op
                 mapToPair·p0.90:   21761.229 us/op
                 mapToPair·p0.95:   38417.203 us/op
                 mapToPair·p0.99:   57852.559 us/op
                 mapToPair·p0.999:  67502.080 us/op
                 mapToPair·p0.9999: 67502.080 us/op
                 mapToPair·p1.00:   67502.080 us/op

Iteration  14: 22253.851 ±(99.9%) 1135.894 us/op
                 mapToPair·p0.00:   19693.568 us/op
                 mapToPair·p0.50:   20152.320 us/op
                 mapToPair·p0.90:   21692.416 us/op
                 mapToPair·p0.95:   40534.016 us/op
                 mapToPair·p0.99:   56983.552 us/op
                 mapToPair·p0.999:  63700.992 us/op
                 mapToPair·p0.9999: 63700.992 us/op
                 mapToPair·p1.00:   63700.992 us/op

Iteration  15: 22435.500 ±(99.9%) 1229.601 us/op
                 mapToPair·p0.00:   19562.496 us/op
                 mapToPair·p0.50:   20086.784 us/op
                 mapToPair·p0.90:   22138.061 us/op
                 mapToPair·p0.95:   42287.104 us/op
                 mapToPair·p0.99:   59587.953 us/op
                 mapToPair·p0.999:  62980.096 us/op
                 mapToPair·p0.9999: 62980.096 us/op
                 mapToPair·p1.00:   62980.096 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  N = 6755
  mean =  22204.761 ±(99.9%) 295.570 us/op

  Histogram, us/op:
    [10000.000, 15000.000) = 0 
    [15000.000, 20000.000) = 2775 
    [20000.000, 25000.000) = 3389 
    [25000.000, 30000.000) = 62 
    [30000.000, 35000.000) = 91 
    [35000.000, 40000.000) = 81 
    [40000.000, 45000.000) = 92 
    [45000.000, 50000.000) = 71 
    [50000.000, 55000.000) = 91 
    [55000.000, 60000.000) = 70 
    [60000.000, 65000.000) = 30 

  Percentiles, us/op:
      p(0.0000) =  19431.424 us/op
     p(50.0000) =  20054.016 us/op
     p(90.0000) =  22020.096 us/op
     p(95.0000) =  40842.035 us/op
     p(99.0000) =  57933.824 us/op
     p(99.9000) =  63552.356 us/op
     p(99.9900) =  67502.080 us/op
     p(99.9990) =  67502.080 us/op
     p(99.9999) =  67502.080 us/op
    p(100.0000) =  67502.080 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 95.65% complete, ETA 00:22:13
# Fork: 1 of 1
# Warmup Iteration   1: 13790.198 ±(99.9%) 165.080 us/op
# Warmup Iteration   2: 13671.563 ±(99.9%) 98.074 us/op
# Warmup Iteration   3: 13745.951 ±(99.9%) 146.788 us/op
# Warmup Iteration   4: 13762.447 ±(99.9%) 150.782 us/op
# Warmup Iteration   5: 13782.582 ±(99.9%) 156.677 us/op
Iteration   1: 13716.532 ±(99.9%) 123.031 us/op
                 plusOne·p0.00:   13287.424 us/op
                 plusOne·p0.50:   13565.952 us/op
                 plusOne·p0.90:   13811.712 us/op
                 plusOne·p0.95:   13991.936 us/op
                 plusOne·p0.99:   18654.822 us/op
                 plusOne·p0.999:  31522.816 us/op
                 plusOne·p0.9999: 31522.816 us/op
                 plusOne·p1.00:   31522.816 us/op

Iteration   2: 13712.262 ±(99.9%) 136.816 us/op
                 plusOne·p0.00:   13238.272 us/op
                 plusOne·p0.50:   13533.184 us/op
                 plusOne·p0.90:   13778.944 us/op
                 plusOne·p0.95:   13901.824 us/op
                 plusOne·p0.99:   20076.954 us/op
                 plusOne·p0.999:  26148.864 us/op
                 plusOne·p0.9999: 26148.864 us/op
                 plusOne·p1.00:   26148.864 us/op

Iteration   3: 13749.376 ±(99.9%) 198.644 us/op
                 plusOne·p0.00:   13303.808 us/op
                 plusOne·p0.50:   13549.568 us/op
                 plusOne·p0.90:   13795.328 us/op
                 plusOne·p0.95:   13942.784 us/op
                 plusOne·p0.99:   18692.178 us/op
                 plusOne·p0.999:  42008.576 us/op
                 plusOne·p0.9999: 42008.576 us/op
                 plusOne·p1.00:   42008.576 us/op

Iteration   4: 13770.978 ±(99.9%) 146.009 us/op
                 plusOne·p0.00:   13254.656 us/op
                 plusOne·p0.50:   13516.800 us/op
                 plusOne·p0.90:   13991.936 us/op
                 plusOne·p0.95:   14723.482 us/op
                 plusOne·p0.99:   19726.336 us/op
                 plusOne·p0.999:  28082.176 us/op
                 plusOne·p0.9999: 28082.176 us/op
                 plusOne·p1.00:   28082.176 us/op

Iteration   5: 13799.238 ±(99.9%) 108.071 us/op
                 plusOne·p0.00:   13385.728 us/op
                 plusOne·p0.50:   13664.256 us/op
                 plusOne·p0.90:   13900.186 us/op
                 plusOne·p0.95:   14008.320 us/op
                 plusOne·p0.99:   18626.642 us/op
                 plusOne·p0.999:  23855.104 us/op
                 plusOne·p0.9999: 23855.104 us/op
                 plusOne·p1.00:   23855.104 us/op

Iteration   6: 13716.465 ±(99.9%) 109.435 us/op
                 plusOne·p0.00:   13303.808 us/op
                 plusOne·p0.50:   13565.952 us/op
                 plusOne·p0.90:   13828.096 us/op
                 plusOne·p0.95:   13942.784 us/op
                 plusOne·p0.99:   18592.563 us/op
                 plusOne·p0.999:  24051.712 us/op
                 plusOne·p0.9999: 24051.712 us/op
                 plusOne·p1.00:   24051.712 us/op

Iteration   7: 13652.035 ±(99.9%) 112.027 us/op
                 plusOne·p0.00:   13254.656 us/op
                 plusOne·p0.50:   13500.416 us/op
                 plusOne·p0.90:   13746.176 us/op
                 plusOne·p0.95:   13844.480 us/op
                 plusOne·p0.99:   19018.220 us/op
                 plusOne·p0.999:  25034.752 us/op
                 plusOne·p0.9999: 25034.752 us/op
                 plusOne·p1.00:   25034.752 us/op

Iteration   8: 13659.018 ±(99.9%) 144.605 us/op
                 plusOne·p0.00:   13238.272 us/op
                 plusOne·p0.50:   13467.648 us/op
                 plusOne·p0.90:   13729.792 us/op
                 plusOne·p0.95:   13921.485 us/op
                 plusOne·p0.99:   18274.058 us/op
                 plusOne·p0.999:  32604.160 us/op
                 plusOne·p0.9999: 32604.160 us/op
                 plusOne·p1.00:   32604.160 us/op

Iteration   9: 13672.302 ±(99.9%) 147.176 us/op
                 plusOne·p0.00:   13221.888 us/op
                 plusOne·p0.50:   13500.416 us/op
                 plusOne·p0.90:   13746.176 us/op
                 plusOne·p0.95:   13913.293 us/op
                 plusOne·p0.99:   18284.544 us/op
                 plusOne·p0.999:  31784.960 us/op
                 plusOne·p0.9999: 31784.960 us/op
                 plusOne·p1.00:   31784.960 us/op

Iteration  10: 13734.338 ±(99.9%) 173.503 us/op
                 plusOne·p0.00:   13221.888 us/op
                 plusOne·p0.50:   13500.416 us/op
                 plusOne·p0.90:   13844.480 us/op
                 plusOne·p0.95:   14090.240 us/op
                 plusOne·p0.99:   21105.869 us/op
                 plusOne·p0.999:  34799.616 us/op
                 plusOne·p0.9999: 34799.616 us/op
                 plusOne·p1.00:   34799.616 us/op

Iteration  11: 13703.106 ±(99.9%) 119.379 us/op
                 plusOne·p0.00:   13287.424 us/op
                 plusOne·p0.50:   13533.184 us/op
                 plusOne·p0.90:   13828.096 us/op
                 plusOne·p0.95:   14006.682 us/op
                 plusOne·p0.99:   19118.490 us/op
                 plusOne·p0.999:  27230.208 us/op
                 plusOne·p0.9999: 27230.208 us/op
                 plusOne·p1.00:   27230.208 us/op

Iteration  12: 13692.221 ±(99.9%) 123.749 us/op
                 plusOne·p0.00:   13221.888 us/op
                 plusOne·p0.50:   13533.184 us/op
                 plusOne·p0.90:   13795.328 us/op
                 plusOne·p0.95:   13999.309 us/op
                 plusOne·p0.99:   18176.082 us/op
                 plusOne·p0.999:  27951.104 us/op
                 plusOne·p0.9999: 27951.104 us/op
                 plusOne·p1.00:   27951.104 us/op

Iteration  13: 13614.345 ±(99.9%) 126.717 us/op
                 plusOne·p0.00:   13221.888 us/op
                 plusOne·p0.50:   13451.264 us/op
                 plusOne·p0.90:   13697.024 us/op
                 plusOne·p0.95:   13832.192 us/op
                 plusOne·p0.99:   18389.402 us/op
                 plusOne·p0.999:  27951.104 us/op
                 plusOne·p0.9999: 27951.104 us/op
                 plusOne·p1.00:   27951.104 us/op

Iteration  14: 13617.850 ±(99.9%) 110.090 us/op
                 plusOne·p0.00:   13238.272 us/op
                 plusOne·p0.50:   13484.032 us/op
                 plusOne·p0.90:   13713.408 us/op
                 plusOne·p0.95:   13832.192 us/op
                 plusOne·p0.99:   18207.539 us/op
                 plusOne·p0.999:  26148.864 us/op
                 plusOne·p0.9999: 26148.864 us/op
                 plusOne·p1.00:   26148.864 us/op

Iteration  15: 13709.205 ±(99.9%) 117.291 us/op
                 plusOne·p0.00:   13271.040 us/op
                 plusOne·p0.50:   13549.568 us/op
                 plusOne·p0.90:   13844.480 us/op
                 plusOne·p0.95:   14049.280 us/op
                 plusOne·p0.99:   18644.992 us/op
                 plusOne·p0.999:  25886.720 us/op
                 plusOne·p0.9999: 25886.720 us/op
                 plusOne·p1.00:   25886.720 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  N = 10945
  mean =  13701.109 ±(99.9%) 34.827 us/op

  Histogram, us/op:
    [10000.000, 12500.000) = 0 
    [12500.000, 15000.000) = 10696 
    [15000.000, 17500.000) = 42 
    [17500.000, 20000.000) = 134 
    [20000.000, 22500.000) = 31 
    [22500.000, 25000.000) = 18 
    [25000.000, 27500.000) = 13 
    [27500.000, 30000.000) = 4 
    [30000.000, 32500.000) = 3 
    [32500.000, 35000.000) = 2 
    [35000.000, 37500.000) = 0 
    [37500.000, 40000.000) = 0 
    [40000.000, 42500.000) = 2 
    [42500.000, 45000.000) = 0 
    [45000.000, 47500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  13221.888 us/op
     p(50.0000) =  13533.184 us/op
     p(90.0000) =  13795.328 us/op
     p(95.0000) =  13975.552 us/op
     p(99.0000) =  18629.919 us/op
     p(99.9000) =  27951.104 us/op
     p(99.9900) =  41890.782 us/op
     p(99.9990) =  42008.576 us/op
     p(99.9999) =  42008.576 us/op
    p(100.0000) =  42008.576 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 96.37% complete, ETA 00:18:30
# Fork: 1 of 1
# Warmup Iteration   1: 32754.721 ±(99.9%) 498.797 us/op
# Warmup Iteration   2: 33924.099 ±(99.9%) 237.486 us/op
# Warmup Iteration   3: 32281.342 ±(99.9%) 176.630 us/op
# Warmup Iteration   4: 32557.837 ±(99.9%) 264.216 us/op
# Warmup Iteration   5: 33063.993 ±(99.9%) 228.314 us/op
Iteration   1: 34078.497 ±(99.9%) 116.170 us/op
                 sort·p0.00:   33619.968 us/op
                 sort·p0.50:   33947.648 us/op
                 sort·p0.90:   34340.864 us/op
                 sort·p0.95:   34504.704 us/op
                 sort·p0.99:   37892.915 us/op
                 sort·p0.999:  38141.952 us/op
                 sort·p0.9999: 38141.952 us/op
                 sort·p1.00:   38141.952 us/op

Iteration   2: 32646.428 ±(99.9%) 223.545 us/op
                 sort·p0.00:   32112.640 us/op
                 sort·p0.50:   32440.320 us/op
                 sort·p0.90:   32899.072 us/op
                 sort·p0.95:   33036.698 us/op
                 sort·p0.99:   37672.714 us/op
                 sort·p0.999:  47054.848 us/op
                 sort·p0.9999: 47054.848 us/op
                 sort·p1.00:   47054.848 us/op

Iteration   3: 31799.107 ±(99.9%) 199.907 us/op
                 sort·p0.00:   31162.368 us/op
                 sort·p0.50:   31621.120 us/op
                 sort·p0.90:   32014.336 us/op
                 sort·p0.95:   32348.570 us/op
                 sort·p0.99:   37782.815 us/op
                 sort·p0.999:  42598.400 us/op
                 sort·p0.9999: 42598.400 us/op
                 sort·p1.00:   42598.400 us/op

Iteration   4: 32339.796 ±(99.9%) 195.279 us/op
                 sort·p0.00:   31784.960 us/op
                 sort·p0.50:   32178.176 us/op
                 sort·p0.90:   32473.088 us/op
                 sort·p0.95:   32666.419 us/op
                 sort·p0.99:   38653.133 us/op
                 sort·p0.999:  41680.896 us/op
                 sort·p0.9999: 41680.896 us/op
                 sort·p1.00:   41680.896 us/op

Iteration   5: 32639.169 ±(99.9%) 186.530 us/op
                 sort·p0.00:   32112.640 us/op
                 sort·p0.50:   32473.088 us/op
                 sort·p0.90:   32800.768 us/op
                 sort·p0.95:   32997.376 us/op
                 sort·p0.99:   39069.942 us/op
                 sort·p0.999:  41943.040 us/op
                 sort·p0.9999: 41943.040 us/op
                 sort·p1.00:   41943.040 us/op

Iteration   6: 32529.049 ±(99.9%) 236.925 us/op
                 sort·p0.00:   31948.800 us/op
                 sort·p0.50:   32309.248 us/op
                 sort·p0.90:   32702.464 us/op
                 sort·p0.95:   32931.840 us/op
                 sort·p0.99:   37611.766 us/op
                 sort·p0.999:  47644.672 us/op
                 sort·p0.9999: 47644.672 us/op
                 sort·p1.00:   47644.672 us/op

Iteration   7: 33306.114 ±(99.9%) 263.960 us/op
                 sort·p0.00:   32702.464 us/op
                 sort·p0.50:   33095.680 us/op
                 sort·p0.90:   33390.592 us/op
                 sort·p0.95:   33613.414 us/op
                 sort·p0.99:   43053.220 us/op
                 sort·p0.999:  47120.384 us/op
                 sort·p0.9999: 47120.384 us/op
                 sort·p1.00:   47120.384 us/op

Iteration   8: 34273.981 ±(99.9%) 248.324 us/op
                 sort·p0.00:   33751.040 us/op
                 sort·p0.50:   34078.720 us/op
                 sort·p0.90:   34406.400 us/op
                 sort·p0.95:   34668.544 us/op
                 sort·p0.99:   41495.429 us/op
                 sort·p0.999:  48758.784 us/op
                 sort·p0.9999: 48758.784 us/op
                 sort·p1.00:   48758.784 us/op

Iteration   9: 34054.088 ±(99.9%) 437.310 us/op
                 sort·p0.00:   33390.592 us/op
                 sort·p0.50:   33816.576 us/op
                 sort·p0.90:   34144.256 us/op
                 sort·p0.95:   34291.712 us/op
                 sort·p0.99:   38731.776 us/op
                 sort·p0.999:  71041.024 us/op
                 sort·p0.9999: 71041.024 us/op
                 sort·p1.00:   71041.024 us/op

Iteration  10: 32860.395 ±(99.9%) 231.061 us/op
                 sort·p0.00:   32309.248 us/op
                 sort·p0.50:   32669.696 us/op
                 sort·p0.90:   32997.376 us/op
                 sort·p0.95:   33272.627 us/op
                 sort·p0.99:   41345.352 us/op
                 sort·p0.999:  44433.408 us/op
                 sort·p0.9999: 44433.408 us/op
                 sort·p1.00:   44433.408 us/op

Iteration  11: 33378.359 ±(99.9%) 244.913 us/op
                 sort·p0.00:   32768.000 us/op
                 sort·p0.50:   33177.600 us/op
                 sort·p0.90:   33554.432 us/op
                 sort·p0.95:   33813.299 us/op
                 sort·p0.99:   41977.119 us/op
                 sort·p0.999:  46399.488 us/op
                 sort·p0.9999: 46399.488 us/op
                 sort·p1.00:   46399.488 us/op

Iteration  12: 33162.627 ±(99.9%) 157.255 us/op
                 sort·p0.00:   32571.392 us/op
                 sort·p0.50:   33030.144 us/op
                 sort·p0.90:   33390.592 us/op
                 sort·p0.95:   33619.968 us/op
                 sort·p0.99:   38584.975 us/op
                 sort·p0.999:  40108.032 us/op
                 sort·p0.9999: 40108.032 us/op
                 sort·p1.00:   40108.032 us/op

Iteration  13: 31360.517 ±(99.9%) 362.898 us/op
                 sort·p0.00:   30670.848 us/op
                 sort·p0.50:   31064.064 us/op
                 sort·p0.90:   31424.512 us/op
                 sort·p0.95:   31784.960 us/op
                 sort·p0.99:   41602.253 us/op
                 sort·p0.999:  57606.144 us/op
                 sort·p0.9999: 57606.144 us/op
                 sort·p1.00:   57606.144 us/op

Iteration  14: 32131.755 ±(99.9%) 178.596 us/op
                 sort·p0.00:   31588.352 us/op
                 sort·p0.50:   31981.568 us/op
                 sort·p0.90:   32309.248 us/op
                 sort·p0.95:   32505.856 us/op
                 sort·p0.99:   37518.049 us/op
                 sort·p0.999:  41418.752 us/op
                 sort·p0.9999: 41418.752 us/op
                 sort·p1.00:   41418.752 us/op

Iteration  15: 32618.463 ±(99.9%) 184.599 us/op
                 sort·p0.00:   32047.104 us/op
                 sort·p0.50:   32440.320 us/op
                 sort·p0.90:   32800.768 us/op
                 sort·p0.95:   32984.269 us/op
                 sort·p0.99:   37434.163 us/op
                 sort·p0.999:  41943.040 us/op
                 sort·p0.9999: 41943.040 us/op
                 sort·p1.00:   41943.040 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  N = 4573
  mean =  32858.479 ±(99.9%) 73.652 us/op

  Histogram, us/op:
    [30000.000, 35000.000) = 4453 
    [35000.000, 40000.000) = 90 
    [40000.000, 45000.000) = 21 
    [45000.000, 50000.000) = 7 
    [50000.000, 55000.000) = 0 
    [55000.000, 60000.000) = 1 
    [60000.000, 65000.000) = 0 
    [65000.000, 70000.000) = 0 
    [70000.000, 75000.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  30670.848 us/op
     p(50.0000) =  32604.160 us/op
     p(90.0000) =  34013.184 us/op
     p(95.0000) =  34209.792 us/op
     p(99.0000) =  38324.142 us/op
     p(99.9000) =  47343.731 us/op
     p(99.9900) =  71041.024 us/op
     p(99.9990) =  71041.024 us/op
     p(99.9999) =  71041.024 us/op
    p(100.0000) =  71041.024 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 97.10% complete, ETA 00:14:48
# Fork: 1 of 1
# Warmup Iteration   1: 1402.210 ±(99.9%) 37.542 us/op
# Warmup Iteration   2: 1316.500 ±(99.9%) 21.425 us/op
# Warmup Iteration   3: 1319.711 ±(99.9%) 28.228 us/op
# Warmup Iteration   4: 1322.687 ±(99.9%) 27.647 us/op
# Warmup Iteration   5: 1309.511 ±(99.9%) 21.851 us/op
Iteration   1: 1327.170 ±(99.9%) 27.958 us/op
                 concatenateStrings·p0.00:   1130.496 us/op
                 concatenateStrings·p0.50:   1249.280 us/op
                 concatenateStrings·p0.90:   1325.056 us/op
                 concatenateStrings·p0.95:   1387.725 us/op
                 concatenateStrings·p0.99:   3781.263 us/op
                 concatenateStrings·p0.999:  12577.276 us/op
                 concatenateStrings·p0.9999: 22347.776 us/op
                 concatenateStrings·p1.00:   22347.776 us/op

Iteration   2: 1321.408 ±(99.9%) 24.729 us/op
                 concatenateStrings·p0.00:   1138.688 us/op
                 concatenateStrings·p0.50:   1251.328 us/op
                 concatenateStrings·p0.90:   1320.960 us/op
                 concatenateStrings·p0.95:   1353.728 us/op
                 concatenateStrings·p0.99:   3798.385 us/op
                 concatenateStrings·p0.999:  11097.555 us/op
                 concatenateStrings·p0.9999: 20545.536 us/op
                 concatenateStrings·p1.00:   20545.536 us/op

Iteration   3: 1320.454 ±(99.9%) 24.987 us/op
                 concatenateStrings·p0.00:   1142.784 us/op
                 concatenateStrings·p0.50:   1249.280 us/op
                 concatenateStrings·p0.90:   1318.912 us/op
                 concatenateStrings·p0.95:   1353.728 us/op
                 concatenateStrings·p0.99:   3907.461 us/op
                 concatenateStrings·p0.999:  11247.534 us/op
                 concatenateStrings·p0.9999: 18710.528 us/op
                 concatenateStrings·p1.00:   18710.528 us/op

Iteration   4: 1332.184 ±(99.9%) 32.918 us/op
                 concatenateStrings·p0.00:   1136.640 us/op
                 concatenateStrings·p0.50:   1249.280 us/op
                 concatenateStrings·p0.90:   1316.864 us/op
                 concatenateStrings·p0.95:   1351.680 us/op
                 concatenateStrings·p0.99:   3813.130 us/op
                 concatenateStrings·p0.999:  17038.901 us/op
                 concatenateStrings·p0.9999: 28180.480 us/op
                 concatenateStrings·p1.00:   28180.480 us/op

Iteration   5: 1317.149 ±(99.9%) 26.682 us/op
                 concatenateStrings·p0.00:   1132.544 us/op
                 concatenateStrings·p0.50:   1247.232 us/op
                 concatenateStrings·p0.90:   1316.864 us/op
                 concatenateStrings·p0.95:   1345.536 us/op
                 concatenateStrings·p0.99:   3679.805 us/op
                 concatenateStrings·p0.999:  12799.066 us/op
                 concatenateStrings·p0.9999: 20316.160 us/op
                 concatenateStrings·p1.00:   20316.160 us/op

Iteration   6: 1327.899 ±(99.9%) 32.418 us/op
                 concatenateStrings·p0.00:   1138.688 us/op
                 concatenateStrings·p0.50:   1247.232 us/op
                 concatenateStrings·p0.90:   1314.816 us/op
                 concatenateStrings·p0.95:   1347.584 us/op
                 concatenateStrings·p0.99:   3741.696 us/op
                 concatenateStrings·p0.999:  15575.040 us/op
                 concatenateStrings·p0.9999: 25427.968 us/op
                 concatenateStrings·p1.00:   25427.968 us/op

Iteration   7: 1334.616 ±(99.9%) 34.577 us/op
                 concatenateStrings·p0.00:   1132.544 us/op
                 concatenateStrings·p0.50:   1247.232 us/op
                 concatenateStrings·p0.90:   1314.816 us/op
                 concatenateStrings·p0.95:   1347.584 us/op
                 concatenateStrings·p0.99:   3856.630 us/op
                 concatenateStrings·p0.999:  18646.696 us/op
                 concatenateStrings·p0.9999: 29392.896 us/op
                 concatenateStrings·p1.00:   29392.896 us/op

Iteration   8: 1327.600 ±(99.9%) 26.595 us/op
                 concatenateStrings·p0.00:   1132.544 us/op
                 concatenateStrings·p0.50:   1251.328 us/op
                 concatenateStrings·p0.90:   1320.960 us/op
                 concatenateStrings·p0.95:   1351.680 us/op
                 concatenateStrings·p0.99:   3738.542 us/op
                 concatenateStrings·p0.999:  11523.047 us/op
                 concatenateStrings·p0.9999: 18481.152 us/op
                 concatenateStrings·p1.00:   18481.152 us/op

Iteration   9: 1322.516 ±(99.9%) 26.951 us/op
                 concatenateStrings·p0.00:   1124.352 us/op
                 concatenateStrings·p0.50:   1251.328 us/op
                 concatenateStrings·p0.90:   1314.816 us/op
                 concatenateStrings·p0.95:   1345.946 us/op
                 concatenateStrings·p0.99:   3861.545 us/op
                 concatenateStrings·p0.999:  11590.762 us/op
                 concatenateStrings·p0.9999: 21594.112 us/op
                 concatenateStrings·p1.00:   21594.112 us/op

Iteration  10: 1304.710 ±(99.9%) 23.799 us/op
                 concatenateStrings·p0.00:   1138.688 us/op
                 concatenateStrings·p0.50:   1241.088 us/op
                 concatenateStrings·p0.90:   1306.624 us/op
                 concatenateStrings·p0.95:   1337.344 us/op
                 concatenateStrings·p0.99:   3676.242 us/op
                 concatenateStrings·p0.999:  11562.713 us/op
                 concatenateStrings·p0.9999: 21397.504 us/op
                 concatenateStrings·p1.00:   21397.504 us/op

Iteration  11: 1320.682 ±(99.9%) 30.021 us/op
                 concatenateStrings·p0.00:   1134.592 us/op
                 concatenateStrings·p0.50:   1243.136 us/op
                 concatenateStrings·p0.90:   1308.672 us/op
                 concatenateStrings·p0.95:   1339.392 us/op
                 concatenateStrings·p0.99:   3772.498 us/op
                 concatenateStrings·p0.999:  13133.185 us/op
                 concatenateStrings·p0.9999: 28737.536 us/op
                 concatenateStrings·p1.00:   28737.536 us/op

Iteration  12: 1322.139 ±(99.9%) 28.293 us/op
                 concatenateStrings·p0.00:   1126.400 us/op
                 concatenateStrings·p0.50:   1249.280 us/op
                 concatenateStrings·p0.90:   1316.864 us/op
                 concatenateStrings·p0.95:   1345.536 us/op
                 concatenateStrings·p0.99:   3687.465 us/op
                 concatenateStrings·p0.999:  12761.072 us/op
                 concatenateStrings·p0.9999: 22085.632 us/op
                 concatenateStrings·p1.00:   22085.632 us/op

Iteration  13: 1322.409 ±(99.9%) 27.415 us/op
                 concatenateStrings·p0.00:   1140.736 us/op
                 concatenateStrings·p0.50:   1251.328 us/op
                 concatenateStrings·p0.90:   1318.912 us/op
                 concatenateStrings·p0.95:   1351.680 us/op
                 concatenateStrings·p0.99:   3774.218 us/op
                 concatenateStrings·p0.999:  12828.213 us/op
                 concatenateStrings·p0.9999: 21856.256 us/op
                 concatenateStrings·p1.00:   21856.256 us/op

Iteration  14: 1331.828 ±(99.9%) 30.809 us/op
                 concatenateStrings·p0.00:   1142.784 us/op
                 concatenateStrings·p0.50:   1255.424 us/op
                 concatenateStrings·p0.90:   1323.008 us/op
                 concatenateStrings·p0.95:   1353.728 us/op
                 concatenateStrings·p0.99:   3783.844 us/op
                 concatenateStrings·p0.999:  14029.095 us/op
                 concatenateStrings·p0.9999: 24903.680 us/op
                 concatenateStrings·p1.00:   24903.680 us/op

Iteration  15: 1329.589 ±(99.9%) 32.003 us/op
                 concatenateStrings·p0.00:   1140.736 us/op
                 concatenateStrings·p0.50:   1249.280 us/op
                 concatenateStrings·p0.90:   1316.864 us/op
                 concatenateStrings·p0.95:   1351.680 us/op
                 concatenateStrings·p0.99:   3796.378 us/op
                 concatenateStrings·p0.999:  13972.685 us/op
                 concatenateStrings·p0.9999: 28377.088 us/op
                 concatenateStrings·p1.00:   28377.088 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 113180
  mean =   1324.118 ±(99.9%) 7.440 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 111594 
    [ 2500.000,  5000.000) = 963 
    [ 5000.000,  7500.000) = 239 
    [ 7500.000, 10000.000) = 124 
    [10000.000, 12500.000) = 155 
    [12500.000, 15000.000) = 35 
    [15000.000, 17500.000) = 12 
    [17500.000, 20000.000) = 27 
    [20000.000, 22500.000) = 19 
    [22500.000, 25000.000) = 6 
    [25000.000, 27500.000) = 2 

  Percentiles, us/op:
      p(0.0000) =   1124.352 us/op
     p(50.0000) =   1249.280 us/op
     p(90.0000) =   1316.864 us/op
     p(95.0000) =   1349.632 us/op
     p(99.0000) =   3772.416 us/op
     p(99.9000) =  12134.613 us/op
     p(99.9900) =  23427.681 us/op
     p(99.9990) =  29306.513 us/op
     p(99.9999) =  29392.896 us/op
    p(100.0000) =  29392.896 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 97.82% complete, ETA 00:11:06
# Fork: 1 of 1
# Warmup Iteration   1: 31927.600 ±(99.9%) 4655.736 us/op
# Warmup Iteration   2: 13786.831 ±(99.9%) 305.225 us/op
# Warmup Iteration   3: 13766.081 ±(99.9%) 264.507 us/op
# Warmup Iteration   4: 13746.875 ±(99.9%) 268.792 us/op
# Warmup Iteration   5: 13817.098 ±(99.9%) 279.777 us/op
Iteration   1: 13843.686 ±(99.9%) 294.300 us/op
                 concatenateStrings·p0.00:   12255.232 us/op
                 concatenateStrings·p0.50:   13123.584 us/op
                 concatenateStrings·p0.90:   15854.797 us/op
                 concatenateStrings·p0.95:   19243.008 us/op
                 concatenateStrings·p0.99:   24493.425 us/op
                 concatenateStrings·p0.999:  30900.224 us/op
                 concatenateStrings·p0.9999: 30900.224 us/op
                 concatenateStrings·p1.00:   30900.224 us/op

Iteration   2: 13770.301 ±(99.9%) 300.166 us/op
                 concatenateStrings·p0.00:   12320.768 us/op
                 concatenateStrings·p0.50:   13074.432 us/op
                 concatenateStrings·p0.90:   15799.091 us/op
                 concatenateStrings·p0.95:   16941.875 us/op
                 concatenateStrings·p0.99:   26477.527 us/op
                 concatenateStrings·p0.999:  34603.008 us/op
                 concatenateStrings·p0.9999: 34603.008 us/op
                 concatenateStrings·p1.00:   34603.008 us/op

Iteration   3: 13657.071 ±(99.9%) 239.341 us/op
                 concatenateStrings·p0.00:   12255.232 us/op
                 concatenateStrings·p0.50:   13090.816 us/op
                 concatenateStrings·p0.90:   15641.805 us/op
                 concatenateStrings·p0.95:   16624.845 us/op
                 concatenateStrings·p0.99:   23552.655 us/op
                 concatenateStrings·p0.999:  34275.328 us/op
                 concatenateStrings·p0.9999: 34275.328 us/op
                 concatenateStrings·p1.00:   34275.328 us/op

Iteration   4: 13797.249 ±(99.9%) 270.115 us/op
                 concatenateStrings·p0.00:   12386.304 us/op
                 concatenateStrings·p0.50:   13123.584 us/op
                 concatenateStrings·p0.90:   15958.016 us/op
                 concatenateStrings·p0.95:   18012.570 us/op
                 concatenateStrings·p0.99:   23484.826 us/op
                 concatenateStrings·p0.999:  33685.504 us/op
                 concatenateStrings·p0.9999: 33685.504 us/op
                 concatenateStrings·p1.00:   33685.504 us/op

Iteration   5: 13800.103 ±(99.9%) 277.950 us/op
                 concatenateStrings·p0.00:   12337.152 us/op
                 concatenateStrings·p0.50:   13123.584 us/op
                 concatenateStrings·p0.90:   15917.056 us/op
                 concatenateStrings·p0.95:   17448.960 us/op
                 concatenateStrings·p0.99:   24150.016 us/op
                 concatenateStrings·p0.999:  33357.824 us/op
                 concatenateStrings·p0.9999: 33357.824 us/op
                 concatenateStrings·p1.00:   33357.824 us/op

Iteration   6: 13774.950 ±(99.9%) 234.449 us/op
                 concatenateStrings·p0.00:   12238.848 us/op
                 concatenateStrings·p0.50:   13205.504 us/op
                 concatenateStrings·p0.90:   15841.690 us/op
                 concatenateStrings·p0.95:   17252.352 us/op
                 concatenateStrings·p0.99:   23149.281 us/op
                 concatenateStrings·p0.999:  26083.328 us/op
                 concatenateStrings·p0.9999: 26083.328 us/op
                 concatenateStrings·p1.00:   26083.328 us/op

Iteration   7: 13879.933 ±(99.9%) 347.995 us/op
                 concatenateStrings·p0.00:   12288.000 us/op
                 concatenateStrings·p0.50:   13107.200 us/op
                 concatenateStrings·p0.90:   15754.854 us/op
                 concatenateStrings·p0.95:   17955.226 us/op
                 concatenateStrings·p0.99:   31312.445 us/op
                 concatenateStrings·p0.999:  40828.928 us/op
                 concatenateStrings·p0.9999: 40828.928 us/op
                 concatenateStrings·p1.00:   40828.928 us/op

Iteration   8: 13638.350 ±(99.9%) 229.270 us/op
                 concatenateStrings·p0.00:   12173.312 us/op
                 concatenateStrings·p0.50:   13041.664 us/op
                 concatenateStrings·p0.90:   15731.917 us/op
                 concatenateStrings·p0.95:   16695.296 us/op
                 concatenateStrings·p0.99:   22795.387 us/op
                 concatenateStrings·p0.999:  25952.256 us/op
                 concatenateStrings·p0.9999: 25952.256 us/op
                 concatenateStrings·p1.00:   25952.256 us/op

Iteration   9: 13802.017 ±(99.9%) 280.129 us/op
                 concatenateStrings·p0.00:   12353.536 us/op
                 concatenateStrings·p0.50:   13139.968 us/op
                 concatenateStrings·p0.90:   15892.480 us/op
                 concatenateStrings·p0.95:   17707.827 us/op
                 concatenateStrings·p0.99:   24673.649 us/op
                 concatenateStrings·p0.999:  31916.032 us/op
                 concatenateStrings·p0.9999: 31916.032 us/op
                 concatenateStrings·p1.00:   31916.032 us/op

Iteration  10: 13944.795 ±(99.9%) 325.612 us/op
                 concatenateStrings·p0.00:   12369.920 us/op
                 concatenateStrings·p0.50:   13172.736 us/op
                 concatenateStrings·p0.90:   16033.382 us/op
                 concatenateStrings·p0.95:   18130.534 us/op
                 concatenateStrings·p0.99:   27243.315 us/op
                 concatenateStrings·p0.999:  34275.328 us/op
                 concatenateStrings·p0.9999: 34275.328 us/op
                 concatenateStrings·p1.00:   34275.328 us/op

Iteration  11: 13843.935 ±(99.9%) 289.643 us/op
                 concatenateStrings·p0.00:   12337.152 us/op
                 concatenateStrings·p0.50:   13123.584 us/op
                 concatenateStrings·p0.90:   15926.886 us/op
                 concatenateStrings·p0.95:   18076.467 us/op
                 concatenateStrings·p0.99:   23981.588 us/op
                 concatenateStrings·p0.999:  34144.256 us/op
                 concatenateStrings·p0.9999: 34144.256 us/op
                 concatenateStrings·p1.00:   34144.256 us/op

Iteration  12: 13900.058 ±(99.9%) 307.491 us/op
                 concatenateStrings·p0.00:   12304.384 us/op
                 concatenateStrings·p0.50:   13172.736 us/op
                 concatenateStrings·p0.90:   16007.168 us/op
                 concatenateStrings·p0.95:   18022.400 us/op
                 concatenateStrings·p0.99:   24412.160 us/op
                 concatenateStrings·p0.999:  33325.056 us/op
                 concatenateStrings·p0.9999: 33325.056 us/op
                 concatenateStrings·p1.00:   33325.056 us/op

Iteration  13: 13684.697 ±(99.9%) 258.199 us/op
                 concatenateStrings·p0.00:   12255.232 us/op
                 concatenateStrings·p0.50:   13041.664 us/op
                 concatenateStrings·p0.90:   15846.605 us/op
                 concatenateStrings·p0.95:   17373.594 us/op
                 concatenateStrings·p0.99:   23606.067 us/op
                 concatenateStrings·p0.999:  31162.368 us/op
                 concatenateStrings·p0.9999: 31162.368 us/op
                 concatenateStrings·p1.00:   31162.368 us/op

Iteration  14: 13706.868 ±(99.9%) 288.322 us/op
                 concatenateStrings·p0.00:   12288.000 us/op
                 concatenateStrings·p0.50:   13025.280 us/op
                 concatenateStrings·p0.90:   15597.568 us/op
                 concatenateStrings·p0.95:   17104.896 us/op
                 concatenateStrings·p0.99:   24631.706 us/op
                 concatenateStrings·p0.999:  34340.864 us/op
                 concatenateStrings·p0.9999: 34340.864 us/op
                 concatenateStrings·p1.00:   34340.864 us/op

Iteration  15: 13655.930 ±(99.9%) 215.114 us/op
                 concatenateStrings·p0.00:   12288.000 us/op
                 concatenateStrings·p0.50:   13090.816 us/op
                 concatenateStrings·p0.90:   15745.024 us/op
                 concatenateStrings·p0.95:   16854.221 us/op
                 concatenateStrings·p0.99:   21999.452 us/op
                 concatenateStrings·p0.999:  27099.136 us/op
                 concatenateStrings·p0.9999: 27099.136 us/op
                 concatenateStrings·p1.00:   27099.136 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 10883
  mean =  13779.382 ±(99.9%) 71.804 us/op

  Histogram, us/op:
    [10000.000, 12500.000) = 325 
    [12500.000, 15000.000) = 9087 
    [15000.000, 17500.000) = 937 
    [17500.000, 20000.000) = 176 
    [20000.000, 22500.000) = 143 
    [22500.000, 25000.000) = 140 
    [25000.000, 27500.000) = 25 
    [27500.000, 30000.000) = 13 
    [30000.000, 32500.000) = 18 
    [32500.000, 35000.000) = 18 
    [35000.000, 37500.000) = 0 
    [37500.000, 40000.000) = 0 
    [40000.000, 42500.000) = 1 
    [42500.000, 45000.000) = 0 
    [45000.000, 47500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  12173.312 us/op
     p(50.0000) =  13107.200 us/op
     p(90.0000) =  15794.176 us/op
     p(95.0000) =  17432.576 us/op
     p(99.0000) =  23800.054 us/op
     p(99.9000) =  33912.521 us/op
     p(99.9900) =  40278.557 us/op
     p(99.9990) =  40828.928 us/op
     p(99.9999) =  40828.928 us/op
    p(100.0000) =  40828.928 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 98.55% complete, ETA 00:07:24
# Fork: 1 of 1
# Warmup Iteration   1: 733628.709 ±(99.9%) 9515.149 us/op
# Warmup Iteration   2: 731007.269 ±(99.9%) 15054.349 us/op
# Warmup Iteration   3: 731531.557 ±(99.9%) 9447.038 us/op
# Warmup Iteration   4: 725015.406 ±(99.9%) 9414.022 us/op
# Warmup Iteration   5: 725015.406 ±(99.9%) 10087.339 us/op
Iteration   1: 729059.913 ±(99.9%) 11481.668 us/op
                 concatenateStrings·p0.00:   713031.680 us/op
                 concatenateStrings·p0.50:   728236.032 us/op
                 concatenateStrings·p0.90:   745013.248 us/op
                 concatenateStrings·p0.95:   747634.688 us/op
                 concatenateStrings·p0.99:   747634.688 us/op
                 concatenateStrings·p0.999:  747634.688 us/op
                 concatenateStrings·p0.9999: 747634.688 us/op
                 concatenateStrings·p1.00:   747634.688 us/op

Iteration   2: 726513.371 ±(99.9%) 9449.885 us/op
                 concatenateStrings·p0.00:   714080.256 us/op
                 concatenateStrings·p0.50:   724041.728 us/op
                 concatenateStrings·p0.90:   740818.944 us/op
                 concatenateStrings·p0.95:   743440.384 us/op
                 concatenateStrings·p0.99:   743440.384 us/op
                 concatenateStrings·p0.999:  743440.384 us/op
                 concatenateStrings·p0.9999: 743440.384 us/op
                 concatenateStrings·p1.00:   743440.384 us/op

Iteration   3: 562313.444 ±(99.9%) 219122.764 us/op
                 concatenateStrings·p0.00:   233570.304 us/op
                 concatenateStrings·p0.50:   717225.984 us/op
                 concatenateStrings·p0.90:   733164.339 us/op
                 concatenateStrings·p0.95:   735051.776 us/op
                 concatenateStrings·p0.99:   735051.776 us/op
                 concatenateStrings·p0.999:  735051.776 us/op
                 concatenateStrings·p0.9999: 735051.776 us/op
                 concatenateStrings·p1.00:   735051.776 us/op

Iteration   4: 239930.417 ±(99.9%) 2756.709 us/op
                 concatenateStrings·p0.00:   232259.584 us/op
                 concatenateStrings·p0.50:   238813.184 us/op
                 concatenateStrings·p0.90:   247673.651 us/op
                 concatenateStrings·p0.95:   250373.734 us/op
                 concatenateStrings·p0.99:   253493.248 us/op
                 concatenateStrings·p0.999:  253493.248 us/op
                 concatenateStrings·p0.9999: 253493.248 us/op
                 concatenateStrings·p1.00:   253493.248 us/op

Iteration   5: 237807.283 ±(99.9%) 2474.526 us/op
                 concatenateStrings·p0.00:   229900.288 us/op
                 concatenateStrings·p0.50:   236978.176 us/op
                 concatenateStrings·p0.90:   244056.064 us/op
                 concatenateStrings·p0.95:   248512.512 us/op
                 concatenateStrings·p0.99:   251658.240 us/op
                 concatenateStrings·p0.999:  251658.240 us/op
                 concatenateStrings·p0.9999: 251658.240 us/op
                 concatenateStrings·p1.00:   251658.240 us/op

Iteration   6: 239156.468 ±(99.9%) 2500.287 us/op
                 concatenateStrings·p0.00:   232783.872 us/op
                 concatenateStrings·p0.50:   238157.824 us/op
                 concatenateStrings·p0.90:   247070.720 us/op
                 concatenateStrings·p0.95:   250150.912 us/op
                 concatenateStrings·p0.99:   252706.816 us/op
                 concatenateStrings·p0.999:  252706.816 us/op
                 concatenateStrings·p0.9999: 252706.816 us/op
                 concatenateStrings·p1.00:   252706.816 us/op

Iteration   7: 238987.947 ±(99.9%) 2517.903 us/op
                 concatenateStrings·p0.00:   231211.008 us/op
                 concatenateStrings·p0.50:   238157.824 us/op
                 concatenateStrings·p0.90:   245995.930 us/op
                 concatenateStrings·p0.95:   247162.470 us/op
                 concatenateStrings·p0.99:   252706.816 us/op
                 concatenateStrings·p0.999:  252706.816 us/op
                 concatenateStrings·p0.9999: 252706.816 us/op
                 concatenateStrings·p1.00:   252706.816 us/op

Iteration   8: 237801.186 ±(99.9%) 2200.646 us/op
                 concatenateStrings·p0.00:   231735.296 us/op
                 concatenateStrings·p0.50:   237764.608 us/op
                 concatenateStrings·p0.90:   241958.912 us/op
                 concatenateStrings·p0.95:   242483.200 us/op
                 concatenateStrings·p0.99:   256376.832 us/op
                 concatenateStrings·p0.999:  256376.832 us/op
                 concatenateStrings·p0.9999: 256376.832 us/op
                 concatenateStrings·p1.00:   256376.832 us/op

Iteration   9: 240024.040 ±(99.9%) 2999.817 us/op
                 concatenateStrings·p0.00:   230686.720 us/op
                 concatenateStrings·p0.50:   239075.328 us/op
                 concatenateStrings·p0.90:   249928.090 us/op
                 concatenateStrings·p0.95:   252798.566 us/op
                 concatenateStrings·p0.99:   254279.680 us/op
                 concatenateStrings·p0.999:  254279.680 us/op
                 concatenateStrings·p0.9999: 254279.680 us/op
                 concatenateStrings·p1.00:   254279.680 us/op

Iteration  10: 239612.099 ±(99.9%) 3739.602 us/op
                 concatenateStrings·p0.00:   230948.864 us/op
                 concatenateStrings·p0.50:   237371.392 us/op
                 concatenateStrings·p0.90:   250006.733 us/op
                 concatenateStrings·p0.95:   256468.582 us/op
                 concatenateStrings·p0.99:   261619.712 us/op
                 concatenateStrings·p0.999:  261619.712 us/op
                 concatenateStrings·p0.9999: 261619.712 us/op
                 concatenateStrings·p1.00:   261619.712 us/op

Iteration  11: 237234.224 ±(99.9%) 2164.185 us/op
                 concatenateStrings·p0.00:   230162.432 us/op
                 concatenateStrings·p0.50:   235667.456 us/op
                 concatenateStrings·p0.90:   243269.632 us/op
                 concatenateStrings·p0.95:   244580.352 us/op
                 concatenateStrings·p0.99:   245628.928 us/op
                 concatenateStrings·p0.999:  245628.928 us/op
                 concatenateStrings·p0.9999: 245628.928 us/op
                 concatenateStrings·p1.00:   245628.928 us/op

Iteration  12: 238694.595 ±(99.9%) 2844.616 us/op
                 concatenateStrings·p0.00:   230424.576 us/op
                 concatenateStrings·p0.50:   237633.536 us/op
                 concatenateStrings·p0.90:   245314.355 us/op
                 concatenateStrings·p0.95:   248211.046 us/op
                 concatenateStrings·p0.99:   257425.408 us/op
                 concatenateStrings·p0.999:  257425.408 us/op
                 concatenateStrings·p0.9999: 257425.408 us/op
                 concatenateStrings·p1.00:   257425.408 us/op

Iteration  13: 239243.849 ±(99.9%) 3320.685 us/op
                 concatenateStrings·p0.00:   230162.432 us/op
                 concatenateStrings·p0.50:   238026.752 us/op
                 concatenateStrings·p0.90:   248958.157 us/op
                 concatenateStrings·p0.95:   253414.605 us/op
                 concatenateStrings·p0.99:   254803.968 us/op
                 concatenateStrings·p0.999:  254803.968 us/op
                 concatenateStrings·p0.9999: 254803.968 us/op
                 concatenateStrings·p1.00:   254803.968 us/op

Iteration  14: 239768.137 ±(99.9%) 3101.347 us/op
                 concatenateStrings·p0.00:   231473.152 us/op
                 concatenateStrings·p0.50:   238419.968 us/op
                 concatenateStrings·p0.90:   246782.362 us/op
                 concatenateStrings·p0.95:   251553.382 us/op
                 concatenateStrings·p0.99:   256376.832 us/op
                 concatenateStrings·p0.999:  256376.832 us/op
                 concatenateStrings·p0.9999: 256376.832 us/op
                 concatenateStrings·p1.00:   256376.832 us/op

Iteration  15: 239580.891 ±(99.9%) 3727.577 us/op
                 concatenateStrings·p0.00:   230424.576 us/op
                 concatenateStrings·p0.50:   238026.752 us/op
                 concatenateStrings·p0.90:   251867.955 us/op
                 concatenateStrings·p0.95:   256534.118 us/op
                 concatenateStrings·p0.99:   258736.128 us/op
                 concatenateStrings·p0.999:  258736.128 us/op
                 concatenateStrings·p0.9999: 258736.128 us/op
                 concatenateStrings·p1.00:   258736.128 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 553
  mean = 274252.872 ±(99.9%) 17797.970 us/op

  Histogram, us/op:
    [200000.000, 250000.000) = 486 
    [250000.000, 300000.000) = 27 
    [300000.000, 350000.000) = 0 
    [350000.000, 400000.000) = 0 
    [400000.000, 450000.000) = 0 
    [450000.000, 500000.000) = 0 
    [500000.000, 550000.000) = 0 
    [550000.000, 600000.000) = 0 
    [600000.000, 650000.000) = 0 
    [650000.000, 700000.000) = 0 
    [700000.000, 750000.000) = 40 

  Percentiles, us/op:
      p(0.0000) = 229900.288 us/op
     p(50.0000) = 238288.896 us/op
     p(90.0000) = 252968.960 us/op
     p(95.0000) = 721420.288 us/op
     p(99.0000) = 738197.504 us/op
     p(99.9000) = 747634.688 us/op
     p(99.9900) = 747634.688 us/op
     p(99.9990) = 747634.688 us/op
     p(99.9999) = 747634.688 us/op
    p(100.0000) = 747634.688 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 99.27% complete, ETA 00:03:42
# Fork: 1 of 1
# Warmup Iteration   1: 847773.696 ±(99.9%) 125641.919 us/op
# Warmup Iteration   2: 796917.760 ±(99.9%) 38788.412 us/op
# Warmup Iteration   3: 791836.199 ±(99.9%) 32177.618 us/op
# Warmup Iteration   4: 787238.597 ±(99.9%) 34240.323 us/op
# Warmup Iteration   5: 798692.273 ±(99.9%) 35488.700 us/op
Iteration   1: 791110.262 ±(99.9%) 30688.450 us/op
                 createNewObjectsWithRecursive·p0.00:   732954.624 us/op
                 createNewObjectsWithRecursive·p0.50:   791674.880 us/op
                 createNewObjectsWithRecursive·p0.90:   832569.344 us/op
                 createNewObjectsWithRecursive·p0.95:   834666.496 us/op
                 createNewObjectsWithRecursive·p0.99:   834666.496 us/op
                 createNewObjectsWithRecursive·p0.999:  834666.496 us/op
                 createNewObjectsWithRecursive·p0.9999: 834666.496 us/op
                 createNewObjectsWithRecursive·p1.00:   834666.496 us/op

Iteration   2: 793691.372 ±(99.9%) 36997.211 us/op
                 createNewObjectsWithRecursive·p0.00:   716177.408 us/op
                 createNewObjectsWithRecursive·p0.50:   796917.760 us/op
                 createNewObjectsWithRecursive·p0.90:   835715.072 us/op
                 createNewObjectsWithRecursive·p0.95:   844103.680 us/op
                 createNewObjectsWithRecursive·p0.99:   844103.680 us/op
                 createNewObjectsWithRecursive·p0.999:  844103.680 us/op
                 createNewObjectsWithRecursive·p0.9999: 844103.680 us/op
                 createNewObjectsWithRecursive·p1.00:   844103.680 us/op

Iteration   3: 792804.116 ±(99.9%) 29227.170 us/op
                 createNewObjectsWithRecursive·p0.00:   731906.048 us/op
                 createNewObjectsWithRecursive·p0.50:   800063.488 us/op
                 createNewObjectsWithRecursive·p0.90:   818728.141 us/op
                 createNewObjectsWithRecursive·p0.95:   822083.584 us/op
                 createNewObjectsWithRecursive·p0.99:   822083.584 us/op
                 createNewObjectsWithRecursive·p0.999:  822083.584 us/op
                 createNewObjectsWithRecursive·p0.9999: 822083.584 us/op
                 createNewObjectsWithRecursive·p1.00:   822083.584 us/op

Iteration   4: 792642.796 ±(99.9%) 33789.537 us/op
                 createNewObjectsWithRecursive·p0.00:   738197.504 us/op
                 createNewObjectsWithRecursive·p0.50:   796917.760 us/op
                 createNewObjectsWithRecursive·p0.90:   826487.603 us/op
                 createNewObjectsWithRecursive·p0.95:   827326.464 us/op
                 createNewObjectsWithRecursive·p0.99:   827326.464 us/op
                 createNewObjectsWithRecursive·p0.999:  827326.464 us/op
                 createNewObjectsWithRecursive·p0.9999: 827326.464 us/op
                 createNewObjectsWithRecursive·p1.00:   827326.464 us/op

Iteration   5: 794659.289 ±(99.9%) 33736.547 us/op
                 createNewObjectsWithRecursive·p0.00:   726663.168 us/op
                 createNewObjectsWithRecursive·p0.50:   796917.760 us/op
                 createNewObjectsWithRecursive·p0.90:   826277.888 us/op
                 createNewObjectsWithRecursive·p0.95:   830472.192 us/op
                 createNewObjectsWithRecursive·p0.99:   830472.192 us/op
                 createNewObjectsWithRecursive·p0.999:  830472.192 us/op
                 createNewObjectsWithRecursive·p0.9999: 830472.192 us/op
                 createNewObjectsWithRecursive·p1.00:   830472.192 us/op

Iteration   6: 792965.435 ±(99.9%) 34404.945 us/op
                 createNewObjectsWithRecursive·p0.00:   732954.624 us/op
                 createNewObjectsWithRecursive·p0.50:   796917.760 us/op
                 createNewObjectsWithRecursive·p0.90:   834876.211 us/op
                 createNewObjectsWithRecursive·p0.95:   835715.072 us/op
                 createNewObjectsWithRecursive·p0.99:   835715.072 us/op
                 createNewObjectsWithRecursive·p0.999:  835715.072 us/op
                 createNewObjectsWithRecursive·p0.9999: 835715.072 us/op
                 createNewObjectsWithRecursive·p1.00:   835715.072 us/op

Iteration   7: 792723.456 ±(99.9%) 33147.772 us/op
                 createNewObjectsWithRecursive·p0.00:   724566.016 us/op
                 createNewObjectsWithRecursive·p0.50:   794820.608 us/op
                 createNewObjectsWithRecursive·p0.90:   828165.325 us/op
                 createNewObjectsWithRecursive·p0.95:   829423.616 us/op
                 createNewObjectsWithRecursive·p0.99:   829423.616 us/op
                 createNewObjectsWithRecursive·p0.999:  829423.616 us/op
                 createNewObjectsWithRecursive·p0.9999: 829423.616 us/op
                 createNewObjectsWithRecursive·p1.00:   829423.616 us/op

Iteration   8: 794014.011 ±(99.9%) 32857.734 us/op
                 createNewObjectsWithRecursive·p0.00:   737148.928 us/op
                 createNewObjectsWithRecursive·p0.50:   792723.456 us/op
                 createNewObjectsWithRecursive·p0.90:   833198.490 us/op
                 createNewObjectsWithRecursive·p0.95:   833617.920 us/op
                 createNewObjectsWithRecursive·p0.99:   833617.920 us/op
                 createNewObjectsWithRecursive·p0.999:  833617.920 us/op
                 createNewObjectsWithRecursive·p0.9999: 833617.920 us/op
                 createNewObjectsWithRecursive·p1.00:   833617.920 us/op

Iteration   9: 792320.158 ±(99.9%) 31130.245 us/op
                 createNewObjectsWithRecursive·p0.00:   731906.048 us/op
                 createNewObjectsWithRecursive·p0.50:   797966.336 us/op
                 createNewObjectsWithRecursive·p0.90:   820615.578 us/op
                 createNewObjectsWithRecursive·p0.95:   823132.160 us/op
                 createNewObjectsWithRecursive·p0.99:   823132.160 us/op
                 createNewObjectsWithRecursive·p0.999:  823132.160 us/op
                 createNewObjectsWithRecursive·p0.9999: 823132.160 us/op
                 createNewObjectsWithRecursive·p1.00:   823132.160 us/op

Iteration  10: 786351.340 ±(99.9%) 30299.973 us/op
                 createNewObjectsWithRecursive·p0.00:   724566.016 us/op
                 createNewObjectsWithRecursive·p0.50:   786432.000 us/op
                 createNewObjectsWithRecursive·p0.90:   823132.160 us/op
                 createNewObjectsWithRecursive·p0.95:   829423.616 us/op
                 createNewObjectsWithRecursive·p0.99:   829423.616 us/op
                 createNewObjectsWithRecursive·p0.999:  829423.616 us/op
                 createNewObjectsWithRecursive·p0.9999: 829423.616 us/op
                 createNewObjectsWithRecursive·p1.00:   829423.616 us/op

Iteration  11: 792320.158 ±(99.9%) 37798.580 us/op
                 createNewObjectsWithRecursive·p0.00:   731906.048 us/op
                 createNewObjectsWithRecursive·p0.50:   792723.456 us/op
                 createNewObjectsWithRecursive·p0.90:   841167.667 us/op
                 createNewObjectsWithRecursive·p0.95:   848297.984 us/op
                 createNewObjectsWithRecursive·p0.99:   848297.984 us/op
                 createNewObjectsWithRecursive·p0.999:  848297.984 us/op
                 createNewObjectsWithRecursive·p0.9999: 848297.984 us/op
                 createNewObjectsWithRecursive·p1.00:   848297.984 us/op

Iteration  12: 783931.550 ±(99.9%) 35132.026 us/op
                 createNewObjectsWithRecursive·p0.00:   723517.440 us/op
                 createNewObjectsWithRecursive·p0.50:   788529.152 us/op
                 createNewObjectsWithRecursive·p0.90:   829633.331 us/op
                 createNewObjectsWithRecursive·p0.95:   830472.192 us/op
                 createNewObjectsWithRecursive·p0.99:   830472.192 us/op
                 createNewObjectsWithRecursive·p0.999:  830472.192 us/op
                 createNewObjectsWithRecursive·p0.9999: 830472.192 us/op
                 createNewObjectsWithRecursive·p1.00:   830472.192 us/op

Iteration  13: 785706.063 ±(99.9%) 31565.537 us/op
                 createNewObjectsWithRecursive·p0.00:   720371.712 us/op
                 createNewObjectsWithRecursive·p0.50:   785383.424 us/op
                 createNewObjectsWithRecursive·p0.90:   817469.850 us/op
                 createNewObjectsWithRecursive·p0.95:   819986.432 us/op
                 createNewObjectsWithRecursive·p0.99:   819986.432 us/op
                 createNewObjectsWithRecursive·p0.999:  819986.432 us/op
                 createNewObjectsWithRecursive·p0.9999: 819986.432 us/op
                 createNewObjectsWithRecursive·p1.00:   819986.432 us/op

Iteration  14: 791916.859 ±(99.9%) 25229.876 us/op
                 createNewObjectsWithRecursive·p0.00:   741343.232 us/op
                 createNewObjectsWithRecursive·p0.50:   795869.184 us/op
                 createNewObjectsWithRecursive·p0.90:   821244.723 us/op
                 createNewObjectsWithRecursive·p0.95:   824180.736 us/op
                 createNewObjectsWithRecursive·p0.99:   824180.736 us/op
                 createNewObjectsWithRecursive·p0.999:  824180.736 us/op
                 createNewObjectsWithRecursive·p0.9999: 824180.736 us/op
                 createNewObjectsWithRecursive·p1.00:   824180.736 us/op

Iteration  15: 786432.000 ±(99.9%) 34285.754 us/op
                 createNewObjectsWithRecursive·p0.00:   722468.864 us/op
                 createNewObjectsWithRecursive·p0.50:   788529.152 us/op
                 createNewObjectsWithRecursive·p0.90:   829004.186 us/op
                 createNewObjectsWithRecursive·p0.95:   842006.528 us/op
                 createNewObjectsWithRecursive·p0.99:   842006.528 us/op
                 createNewObjectsWithRecursive·p0.999:  842006.528 us/op
                 createNewObjectsWithRecursive·p0.9999: 842006.528 us/op
                 createNewObjectsWithRecursive·p1.00:   842006.528 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  N = 195
  mean = 790905.924 ±(99.9%) 6368.880 us/op

  Histogram, us/op:
    [700000.000, 712500.000) = 0 
    [712500.000, 725000.000) = 6 
    [725000.000, 737500.000) = 7 
    [737500.000, 750000.000) = 3 
    [750000.000, 762500.000) = 9 
    [762500.000, 775000.000) = 19 
    [775000.000, 787500.000) = 37 
    [787500.000, 800000.000) = 41 
    [800000.000, 812500.000) = 32 
    [812500.000, 825000.000) = 22 
    [825000.000, 837500.000) = 16 
    [837500.000, 850000.000) = 3 
    [850000.000, 862500.000) = 0 
    [862500.000, 875000.000) = 0 
    [875000.000, 887500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 716177.408 us/op
     p(50.0000) = 793772.032 us/op
     p(90.0000) = 824600.166 us/op
     p(95.0000) = 830472.192 us/op
     p(99.0000) = 844271.452 us/op
     p(99.9000) = 848297.984 us/op
     p(99.9900) = 848297.984 us/op
     p(99.9990) = 848297.984 us/op
     p(99.9999) = 848297.984 us/op
    p(100.0000) = 848297.984 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 100.00% complete, ETA 00:00:01
# Fork: 1 of 1
# Warmup Iteration   1: 233186.073 us/op
# Warmup Iteration   2: 233567.398 us/op
# Warmup Iteration   3: 237125.008 us/op
# Warmup Iteration   4: 233321.077 us/op
# Warmup Iteration   5: 231879.143 us/op
Iteration   1: 224038.593 us/op
Iteration   2: 230051.332 us/op
Iteration   3: 240371.581 us/op
Iteration   4: 235099.469 us/op
Iteration   5: 238432.416 us/op
Iteration   6: 228623.069 us/op
Iteration   7: 231295.457 us/op
Iteration   8: 246556.220 us/op
Iteration   9: 245165.101 us/op
Iteration  10: 242783.585 us/op
Iteration  11: 228539.036 us/op
Iteration  12: 226456.816 us/op
Iteration  13: 233122.138 us/op
Iteration  14: 231784.945 us/op
Iteration  15: 234867.127 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 234479.126 ±(99.9%) 7349.558 us/op

  Histogram, us/op:
    [220000.000, 222500.000) = 0 
    [222500.000, 225000.000) = 1 
    [225000.000, 227500.000) = 1 
    [227500.000, 230000.000) = 2 
    [230000.000, 232500.000) = 3 
    [232500.000, 235000.000) = 2 
    [235000.000, 237500.000) = 1 
    [237500.000, 240000.000) = 1 
    [240000.000, 242500.000) = 1 
    [242500.000, 245000.000) = 1 
    [245000.000, 247500.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 224038.593 us/op
     p(50.0000) = 233122.138 us/op
     p(90.0000) = 245721.549 us/op
     p(95.0000) = 246556.220 us/op
     p(99.0000) = 246556.220 us/op
     p(99.9000) = 246556.220 us/op
     p(99.9900) = 246556.220 us/op
     p(99.9990) = 246556.220 us/op
     p(99.9999) = 246556.220 us/op
    p(100.0000) = 246556.220 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 218333.590 us/op
# Warmup Iteration   2: 207714.770 us/op
# Warmup Iteration   3: 234819.621 us/op
# Warmup Iteration   4: 227052.331 us/op
# Warmup Iteration   5: 228773.979 us/op
Iteration   1: 227176.826 us/op
Iteration   2: 235918.005 us/op
Iteration   3: 229544.194 us/op
Iteration   4: 233002.264 us/op
Iteration   5: 225593.235 us/op
Iteration   6: 231011.643 us/op
Iteration   7: 231105.528 us/op
Iteration   8: 226065.481 us/op
Iteration   9: 228526.872 us/op
Iteration  10: 226913.864 us/op
Iteration  11: 226444.198 us/op
Iteration  12: 226058.681 us/op
Iteration  13: 228248.857 us/op
Iteration  14: 225483.912 us/op
Iteration  15: 227429.571 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 228568.209 ±(99.9%) 3239.478 us/op

  Histogram, us/op:
    [220000.000, 221250.000) = 0 
    [221250.000, 222500.000) = 0 
    [222500.000, 223750.000) = 0 
    [223750.000, 225000.000) = 0 
    [225000.000, 226250.000) = 4 
    [226250.000, 227500.000) = 4 
    [227500.000, 228750.000) = 2 
    [228750.000, 230000.000) = 1 
    [230000.000, 231250.000) = 2 
    [231250.000, 232500.000) = 0 
    [232500.000, 233750.000) = 1 
    [233750.000, 235000.000) = 0 
    [235000.000, 236250.000) = 1 
    [236250.000, 237500.000) = 0 
    [237500.000, 238750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 225483.912 us/op
     p(50.0000) = 227429.571 us/op
     p(90.0000) = 234168.560 us/op
     p(95.0000) = 235918.005 us/op
     p(99.0000) = 235918.005 us/op
     p(99.9000) = 235918.005 us/op
     p(99.9900) = 235918.005 us/op
     p(99.9990) = 235918.005 us/op
     p(99.9999) = 235918.005 us/op
    p(100.0000) = 235918.005 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 218330.742 us/op
# Warmup Iteration   2: 213629.334 us/op
# Warmup Iteration   3: 220643.728 us/op
# Warmup Iteration   4: 211022.395 us/op
# Warmup Iteration   5: 193244.476 us/op
Iteration   1: 167549.905 us/op
Iteration   2: 172717.005 us/op
Iteration   3: 162331.354 us/op
Iteration   4: 206337.983 us/op
Iteration   5: 209231.800 us/op
Iteration   6: 208824.493 us/op
Iteration   7: 211162.578 us/op
Iteration   8: 208751.084 us/op
Iteration   9: 216662.183 us/op
Iteration  10: 207776.456 us/op
Iteration  11: 215695.107 us/op
Iteration  12: 211392.564 us/op
Iteration  13: 208811.925 us/op
Iteration  14: 234470.962 us/op
Iteration  15: 209673.943 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 203425.956 ±(99.9%) 21224.870 us/op

  Histogram, us/op:
    [160000.000, 165000.000) = 1 
    [165000.000, 170000.000) = 1 
    [170000.000, 175000.000) = 1 
    [175000.000, 180000.000) = 0 
    [180000.000, 185000.000) = 0 
    [185000.000, 190000.000) = 0 
    [190000.000, 195000.000) = 0 
    [195000.000, 200000.000) = 0 
    [200000.000, 205000.000) = 0 
    [205000.000, 210000.000) = 7 
    [210000.000, 215000.000) = 2 
    [215000.000, 220000.000) = 2 
    [220000.000, 225000.000) = 0 
    [225000.000, 230000.000) = 0 
    [230000.000, 235000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 162331.354 us/op
     p(50.0000) = 208824.493 us/op
     p(90.0000) = 223785.695 us/op
     p(95.0000) = 234470.962 us/op
     p(99.0000) = 234470.962 us/op
     p(99.9000) = 234470.962 us/op
     p(99.9900) = 234470.962 us/op
     p(99.9990) = 234470.962 us/op
     p(99.9999) = 234470.962 us/op
    p(100.0000) = 234470.962 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 219397.736 us/op
# Warmup Iteration   2: 210839.649 us/op
# Warmup Iteration   3: 222684.344 us/op
# Warmup Iteration   4: 217535.361 us/op
# Warmup Iteration   5: 214972.830 us/op
Iteration   1: 206485.261 us/op
Iteration   2: 211164.373 us/op
Iteration   3: 210653.689 us/op
Iteration   4: 208068.108 us/op
Iteration   5: 216952.553 us/op
Iteration   6: 210622.858 us/op
Iteration   7: 210812.102 us/op
Iteration   8: 206371.845 us/op
Iteration   9: 212304.416 us/op
Iteration  10: 211560.749 us/op
Iteration  11: 211580.519 us/op
Iteration  12: 207858.600 us/op
Iteration  13: 209393.264 us/op
Iteration  14: 208065.604 us/op
Iteration  15: 207691.217 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 209972.344 ±(99.9%) 2923.230 us/op

  Histogram, us/op:
    [200000.000, 201250.000) = 0 
    [201250.000, 202500.000) = 0 
    [202500.000, 203750.000) = 0 
    [203750.000, 205000.000) = 0 
    [205000.000, 206250.000) = 0 
    [206250.000, 207500.000) = 2 
    [207500.000, 208750.000) = 4 
    [208750.000, 210000.000) = 1 
    [210000.000, 211250.000) = 4 
    [211250.000, 212500.000) = 3 
    [212500.000, 213750.000) = 0 
    [213750.000, 215000.000) = 0 
    [215000.000, 216250.000) = 0 
    [216250.000, 217500.000) = 1 
    [217500.000, 218750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 206371.845 us/op
     p(50.0000) = 210622.858 us/op
     p(90.0000) = 214163.671 us/op
     p(95.0000) = 216952.553 us/op
     p(99.0000) = 216952.553 us/op
     p(99.9000) = 216952.553 us/op
     p(99.9900) = 216952.553 us/op
     p(99.9990) = 216952.553 us/op
     p(99.9999) = 216952.553 us/op
    p(100.0000) = 216952.553 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 232270.289 us/op
# Warmup Iteration   2: 208017.429 us/op
# Warmup Iteration   3: 213126.770 us/op
# Warmup Iteration   4: 204682.391 us/op
# Warmup Iteration   5: 215238.203 us/op
Iteration   1: 204633.224 us/op
Iteration   2: 205986.940 us/op
Iteration   3: 205670.110 us/op
Iteration   4: 211860.731 us/op
Iteration   5: 210703.308 us/op
Iteration   6: 216237.837 us/op
Iteration   7: 206276.029 us/op
Iteration   8: 210109.438 us/op
Iteration   9: 206752.472 us/op
Iteration  10: 208588.385 us/op
Iteration  11: 208869.378 us/op
Iteration  12: 213080.457 us/op
Iteration  13: 203716.034 us/op
Iteration  14: 214280.666 us/op
Iteration  15: 208289.632 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 209003.643 ±(99.9%) 3933.751 us/op

  Histogram, us/op:
    [200000.000, 201250.000) = 0 
    [201250.000, 202500.000) = 0 
    [202500.000, 203750.000) = 1 
    [203750.000, 205000.000) = 1 
    [205000.000, 206250.000) = 2 
    [206250.000, 207500.000) = 2 
    [207500.000, 208750.000) = 2 
    [208750.000, 210000.000) = 1 
    [210000.000, 211250.000) = 2 
    [211250.000, 212500.000) = 1 
    [212500.000, 213750.000) = 1 
    [213750.000, 215000.000) = 1 
    [215000.000, 216250.000) = 1 
    [216250.000, 217500.000) = 0 
    [217500.000, 218750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 203716.034 us/op
     p(50.0000) = 208588.385 us/op
     p(90.0000) = 215063.534 us/op
     p(95.0000) = 216237.837 us/op
     p(99.0000) = 216237.837 us/op
     p(99.9000) = 216237.837 us/op
     p(99.9900) = 216237.837 us/op
     p(99.9990) = 216237.837 us/op
     p(99.9999) = 216237.837 us/op
    p(100.0000) = 216237.837 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 208728.898 us/op
# Warmup Iteration   2: 209053.136 us/op
# Warmup Iteration   3: 208621.347 us/op
# Warmup Iteration   4: 204543.263 us/op
# Warmup Iteration   5: 206706.772 us/op
Iteration   1: 205328.153 us/op
Iteration   2: 226454.157 us/op
Iteration   3: 219144.359 us/op
Iteration   4: 212389.382 us/op
Iteration   5: 203530.850 us/op
Iteration   6: 204341.452 us/op
Iteration   7: 213967.207 us/op
Iteration   8: 206541.751 us/op
Iteration   9: 202439.434 us/op
Iteration  10: 207585.419 us/op
Iteration  11: 211446.971 us/op
Iteration  12: 228749.092 us/op
Iteration  13: 214013.544 us/op
Iteration  14: 218663.560 us/op
Iteration  15: 205858.595 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 212030.262 ±(99.9%) 8790.492 us/op

  Histogram, us/op:
    [200000.000, 202500.000) = 1 
    [202500.000, 205000.000) = 2 
    [205000.000, 207500.000) = 3 
    [207500.000, 210000.000) = 1 
    [210000.000, 212500.000) = 2 
    [212500.000, 215000.000) = 2 
    [215000.000, 217500.000) = 0 
    [217500.000, 220000.000) = 2 
    [220000.000, 222500.000) = 0 
    [222500.000, 225000.000) = 0 
    [225000.000, 227500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 202439.434 us/op
     p(50.0000) = 211446.971 us/op
     p(90.0000) = 227372.131 us/op
     p(95.0000) = 228749.092 us/op
     p(99.0000) = 228749.092 us/op
     p(99.9000) = 228749.092 us/op
     p(99.9900) = 228749.092 us/op
     p(99.9990) = 228749.092 us/op
     p(99.9999) = 228749.092 us/op
    p(100.0000) = 228749.092 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2191650.818 us/op
# Warmup Iteration   2: 2941218.949 us/op
# Warmup Iteration   3: 2414461.448 us/op
# Warmup Iteration   4: 2424839.349 us/op
# Warmup Iteration   5: 2431670.387 us/op
Iteration   1: 2397989.699 us/op
Iteration   2: 2420951.920 us/op
Iteration   3: 2420849.085 us/op
Iteration   4: 2481614.100 us/op
Iteration   5: 2410646.356 us/op
Iteration   6: 2434489.853 us/op
Iteration   7: 2431314.015 us/op
Iteration   8: 2385527.498 us/op
Iteration   9: 2421978.813 us/op
Iteration  10: 2437703.599 us/op
Iteration  11: 2429394.792 us/op
Iteration  12: 2423169.947 us/op
Iteration  13: 2432930.288 us/op
Iteration  14: 2451555.890 us/op
Iteration  15: 2422424.088 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 2426835.996 ±(99.9%) 23525.770 us/op

  Histogram, us/op:
    [2380000.000, 2390000.000) = 1 
    [2390000.000, 2400000.000) = 1 
    [2400000.000, 2410000.000) = 0 
    [2410000.000, 2420000.000) = 1 
    [2420000.000, 2430000.000) = 6 
    [2430000.000, 2440000.000) = 4 
    [2440000.000, 2450000.000) = 0 
    [2450000.000, 2460000.000) = 1 
    [2460000.000, 2470000.000) = 0 
    [2470000.000, 2480000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 2385527.498 us/op
     p(50.0000) = 2423169.947 us/op
     p(90.0000) = 2463579.174 us/op
     p(95.0000) = 2481614.100 us/op
     p(99.0000) = 2481614.100 us/op
     p(99.9000) = 2481614.100 us/op
     p(99.9900) = 2481614.100 us/op
     p(99.9990) = 2481614.100 us/op
     p(99.9999) = 2481614.100 us/op
    p(100.0000) = 2481614.100 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1126185.369 us/op
# Warmup Iteration   2: 1201518.615 us/op
# Warmup Iteration   3: 1130337.003 us/op
# Warmup Iteration   4: 969178.970 us/op
# Warmup Iteration   5: 788145.171 us/op
Iteration   1: 782131.243 us/op
Iteration   2: 791212.708 us/op
Iteration   3: 784222.530 us/op
Iteration   4: 805565.420 us/op
Iteration   5: 791265.864 us/op
Iteration   6: 798802.765 us/op
Iteration   7: 810180.412 us/op
Iteration   8: 802876.993 us/op
Iteration   9: 787959.076 us/op
Iteration  10: 792110.720 us/op
Iteration  11: 822549.418 us/op
Iteration  12: 794601.590 us/op
Iteration  13: 791887.895 us/op
Iteration  14: 803209.575 us/op
Iteration  15: 790864.998 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 796629.414 ±(99.9%) 11428.863 us/op

  Histogram, us/op:
    [780000.000, 785000.000) = 2 
    [785000.000, 790000.000) = 1 
    [790000.000, 795000.000) = 6 
    [795000.000, 800000.000) = 1 
    [800000.000, 805000.000) = 2 
    [805000.000, 810000.000) = 1 
    [810000.000, 815000.000) = 1 
    [815000.000, 820000.000) = 0 
    [820000.000, 825000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 782131.243 us/op
     p(50.0000) = 792110.720 us/op
     p(90.0000) = 815128.014 us/op
     p(95.0000) = 822549.418 us/op
     p(99.0000) = 822549.418 us/op
     p(99.9000) = 822549.418 us/op
     p(99.9900) = 822549.418 us/op
     p(99.9990) = 822549.418 us/op
     p(99.9999) = 822549.418 us/op
    p(100.0000) = 822549.418 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1021941.162 us/op
# Warmup Iteration   2: 828342.150 us/op
# Warmup Iteration   3: 779126.829 us/op
# Warmup Iteration   4: 610751.360 us/op
# Warmup Iteration   5: 716643.040 us/op
Iteration   1: 738971.272 us/op
Iteration   2: 730275.871 us/op
Iteration   3: 744070.580 us/op
Iteration   4: 739945.457 us/op
Iteration   5: 730551.648 us/op
Iteration   6: 739035.364 us/op
Iteration   7: 734134.970 us/op
Iteration   8: 734720.720 us/op
Iteration   9: 736175.714 us/op
Iteration  10: 721856.762 us/op
Iteration  11: 729833.091 us/op
Iteration  12: 733001.374 us/op
Iteration  13: 740080.068 us/op
Iteration  14: 705415.004 us/op
Iteration  15: 739432.461 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 733166.690 ±(99.9%) 10129.309 us/op

  Histogram, us/op:
    [700000.000, 705000.000) = 0 
    [705000.000, 710000.000) = 1 
    [710000.000, 715000.000) = 0 
    [715000.000, 720000.000) = 0 
    [720000.000, 725000.000) = 1 
    [725000.000, 730000.000) = 1 
    [730000.000, 735000.000) = 5 
    [735000.000, 740000.000) = 5 
    [740000.000, 745000.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 705415.004 us/op
     p(50.0000) = 734720.720 us/op
     p(90.0000) = 741676.273 us/op
     p(95.0000) = 744070.580 us/op
     p(99.0000) = 744070.580 us/op
     p(99.9000) = 744070.580 us/op
     p(99.9900) = 744070.580 us/op
     p(99.9990) = 744070.580 us/op
     p(99.9999) = 744070.580 us/op
    p(100.0000) = 744070.580 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 938466.415 us/op
# Warmup Iteration   2: 832631.778 us/op
# Warmup Iteration   3: 957462.080 us/op
# Warmup Iteration   4: 704174.631 us/op
# Warmup Iteration   5: 709126.066 us/op
Iteration   1: 720472.230 us/op
Iteration   2: 723567.138 us/op
Iteration   3: 715700.929 us/op
Iteration   4: 702722.559 us/op
Iteration   5: 710240.597 us/op
Iteration   6: 706308.656 us/op
Iteration   7: 716349.577 us/op
Iteration   8: 718280.861 us/op
Iteration   9: 720683.527 us/op
Iteration  10: 751687.080 us/op
Iteration  11: 732075.895 us/op
Iteration  12: 707231.243 us/op
Iteration  13: 712981.386 us/op
Iteration  14: 721367.621 us/op
Iteration  15: 701651.805 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 717421.407 ±(99.9%) 13493.587 us/op

  Histogram, us/op:
    [700000.000, 705000.000) = 2 
    [705000.000, 710000.000) = 2 
    [710000.000, 715000.000) = 2 
    [715000.000, 720000.000) = 3 
    [720000.000, 725000.000) = 4 
    [725000.000, 730000.000) = 0 
    [730000.000, 735000.000) = 1 
    [735000.000, 740000.000) = 0 
    [740000.000, 745000.000) = 0 
    [745000.000, 750000.000) = 0 
    [750000.000, 755000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 701651.805 us/op
     p(50.0000) = 716349.577 us/op
     p(90.0000) = 739920.369 us/op
     p(95.0000) = 751687.080 us/op
     p(99.0000) = 751687.080 us/op
     p(99.9000) = 751687.080 us/op
     p(99.9900) = 751687.080 us/op
     p(99.9990) = 751687.080 us/op
     p(99.9999) = 751687.080 us/op
    p(100.0000) = 751687.080 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 873158.009 us/op
# Warmup Iteration   2: 837988.067 us/op
# Warmup Iteration   3: 1019747.504 us/op
# Warmup Iteration   4: 1022686.905 us/op
# Warmup Iteration   5: 1009989.962 us/op
Iteration   1: 1000408.744 us/op
Iteration   2: 994704.184 us/op
Iteration   3: 1028763.193 us/op
Iteration   4: 992020.697 us/op
Iteration   5: 1005606.277 us/op
Iteration   6: 1025574.828 us/op
Iteration   7: 1027666.433 us/op
Iteration   8: 1003537.699 us/op
Iteration   9: 1049383.035 us/op
Iteration  10: 1010670.919 us/op
Iteration  11: 1027506.362 us/op
Iteration  12: 1012087.045 us/op
Iteration  13: 1004593.867 us/op
Iteration  14: 998655.928 us/op
Iteration  15: 992477.931 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 1011577.143 ±(99.9%) 17858.981 us/op

  Histogram, us/op:
    [ 990000.000,  995000.000) = 3 
    [ 995000.000, 1000000.000) = 1 
    [1000000.000, 1005000.000) = 3 
    [1005000.000, 1010000.000) = 1 
    [1010000.000, 1015000.000) = 2 
    [1015000.000, 1020000.000) = 0 
    [1020000.000, 1025000.000) = 0 
    [1025000.000, 1030000.000) = 4 
    [1030000.000, 1035000.000) = 0 
    [1035000.000, 1040000.000) = 0 
    [1040000.000, 1045000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 992020.697 us/op
     p(50.0000) = 1005606.277 us/op
     p(90.0000) = 1037011.130 us/op
     p(95.0000) = 1049383.035 us/op
     p(99.0000) = 1049383.035 us/op
     p(99.9000) = 1049383.035 us/op
     p(99.9900) = 1049383.035 us/op
     p(99.9990) = 1049383.035 us/op
     p(99.9999) = 1049383.035 us/op
    p(100.0000) = 1049383.035 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 913257.342 us/op
# Warmup Iteration   2: 782074.795 us/op
# Warmup Iteration   3: 818278.037 us/op
# Warmup Iteration   4: 825558.685 us/op
# Warmup Iteration   5: 847942.106 us/op
Iteration   1: 817830.451 us/op
Iteration   2: 816112.754 us/op
Iteration   3: 810522.996 us/op
Iteration   4: 835209.119 us/op
Iteration   5: 820290.020 us/op
Iteration   6: 821856.006 us/op
Iteration   7: 812580.048 us/op
Iteration   8: 811989.997 us/op
Iteration   9: 815302.866 us/op
Iteration  10: 818066.816 us/op
Iteration  11: 810612.440 us/op
Iteration  12: 802622.184 us/op
Iteration  13: 825703.231 us/op
Iteration  14: 800478.542 us/op
Iteration  15: 822765.746 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 816129.548 ±(99.9%) 9372.985 us/op

  Histogram, us/op:
    [800000.000, 802500.000) = 1 
    [802500.000, 805000.000) = 1 
    [805000.000, 807500.000) = 0 
    [807500.000, 810000.000) = 0 
    [810000.000, 812500.000) = 3 
    [812500.000, 815000.000) = 1 
    [815000.000, 817500.000) = 2 
    [817500.000, 820000.000) = 2 
    [820000.000, 822500.000) = 2 
    [822500.000, 825000.000) = 1 
    [825000.000, 827500.000) = 1 
    [827500.000, 830000.000) = 0 
    [830000.000, 832500.000) = 0 
    [832500.000, 835000.000) = 0 
    [835000.000, 837500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 800478.542 us/op
     p(50.0000) = 816112.754 us/op
     p(90.0000) = 829505.586 us/op
     p(95.0000) = 835209.119 us/op
     p(99.0000) = 835209.119 us/op
     p(99.9000) = 835209.119 us/op
     p(99.9900) = 835209.119 us/op
     p(99.9990) = 835209.119 us/op
     p(99.9999) = 835209.119 us/op
    p(100.0000) = 835209.119 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4769.671 us/op
# Warmup Iteration   2: 3109.392 us/op
# Warmup Iteration   3: 557.186 us/op
# Warmup Iteration   4: 549.112 us/op
# Warmup Iteration   5: 574.406 us/op
Iteration   1: 551.973 us/op
Iteration   2: 554.731 us/op
Iteration   3: 528.722 us/op
Iteration   4: 582.434 us/op
Iteration   5: 577.582 us/op
Iteration   6: 531.217 us/op
Iteration   7: 553.529 us/op
Iteration   8: 572.972 us/op
Iteration   9: 578.051 us/op
Iteration  10: 563.815 us/op
Iteration  11: 561.216 us/op
Iteration  12: 536.340 us/op
Iteration  13: 572.418 us/op
Iteration  14: 547.534 us/op
Iteration  15: 567.675 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  N = 15
  mean =    558.681 ±(99.9%) 18.441 us/op

  Histogram, us/op:
    [520.000, 525.000) = 0 
    [525.000, 530.000) = 1 
    [530.000, 535.000) = 1 
    [535.000, 540.000) = 1 
    [540.000, 545.000) = 0 
    [545.000, 550.000) = 1 
    [550.000, 555.000) = 3 
    [555.000, 560.000) = 0 
    [560.000, 565.000) = 2 
    [565.000, 570.000) = 1 
    [570.000, 575.000) = 2 
    [575.000, 580.000) = 2 
    [580.000, 585.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    528.722 us/op
     p(50.0000) =    561.216 us/op
     p(90.0000) =    579.804 us/op
     p(95.0000) =    582.434 us/op
     p(99.0000) =    582.434 us/op
     p(99.9000) =    582.434 us/op
     p(99.9900) =    582.434 us/op
     p(99.9990) =    582.434 us/op
     p(99.9999) =    582.434 us/op
    p(100.0000) =    582.434 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5315.122 us/op
# Warmup Iteration   2: 3464.862 us/op
# Warmup Iteration   3: 329.495 us/op
# Warmup Iteration   4: 361.551 us/op
# Warmup Iteration   5: 355.457 us/op
Iteration   1: 342.311 us/op
Iteration   2: 362.458 us/op
Iteration   3: 303.215 us/op
Iteration   4: 335.812 us/op
Iteration   5: 348.820 us/op
Iteration   6: 357.685 us/op
Iteration   7: 329.128 us/op
Iteration   8: 375.207 us/op
Iteration   9: 344.652 us/op
Iteration  10: 366.589 us/op
Iteration  11: 322.561 us/op
Iteration  12: 385.912 us/op
Iteration  13: 350.559 us/op
Iteration  14: 361.913 us/op
Iteration  15: 331.717 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  N = 15
  mean =    347.903 ±(99.9%) 23.023 us/op

  Histogram, us/op:
    [300.000, 305.000) = 1 
    [305.000, 310.000) = 0 
    [310.000, 315.000) = 0 
    [315.000, 320.000) = 0 
    [320.000, 325.000) = 1 
    [325.000, 330.000) = 1 
    [330.000, 335.000) = 1 
    [335.000, 340.000) = 1 
    [340.000, 345.000) = 2 
    [345.000, 350.000) = 1 
    [350.000, 355.000) = 1 
    [355.000, 360.000) = 1 
    [360.000, 365.000) = 2 
    [365.000, 370.000) = 1 
    [370.000, 375.000) = 0 
    [375.000, 380.000) = 1 
    [380.000, 385.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    303.215 us/op
     p(50.0000) =    348.820 us/op
     p(90.0000) =    379.489 us/op
     p(95.0000) =    385.912 us/op
     p(99.0000) =    385.912 us/op
     p(99.9000) =    385.912 us/op
     p(99.9900) =    385.912 us/op
     p(99.9990) =    385.912 us/op
     p(99.9999) =    385.912 us/op
    p(100.0000) =    385.912 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5485.708 us/op
# Warmup Iteration   2: 2398.997 us/op
# Warmup Iteration   3: 1086.976 us/op
# Warmup Iteration   4: 371.231 us/op
# Warmup Iteration   5: 366.948 us/op
Iteration   1: 374.571 us/op
Iteration   2: 386.860 us/op
Iteration   3: 369.120 us/op
Iteration   4: 363.608 us/op
Iteration   5: 368.358 us/op
Iteration   6: 363.681 us/op
Iteration   7: 366.091 us/op
Iteration   8: 365.120 us/op
Iteration   9: 370.140 us/op
Iteration  10: 392.762 us/op
Iteration  11: 359.792 us/op
Iteration  12: 365.273 us/op
Iteration  13: 382.588 us/op
Iteration  14: 371.182 us/op
Iteration  15: 366.994 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  N = 15
  mean =    371.076 ±(99.9%) 9.999 us/op

  Histogram, us/op:
    [350.000, 355.000) = 0 
    [355.000, 360.000) = 1 
    [360.000, 365.000) = 2 
    [365.000, 370.000) = 6 
    [370.000, 375.000) = 3 
    [375.000, 380.000) = 0 
    [380.000, 385.000) = 1 
    [385.000, 390.000) = 1 
    [390.000, 395.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    359.792 us/op
     p(50.0000) =    368.358 us/op
     p(90.0000) =    389.221 us/op
     p(95.0000) =    392.762 us/op
     p(99.0000) =    392.762 us/op
     p(99.9000) =    392.762 us/op
     p(99.9900) =    392.762 us/op
     p(99.9990) =    392.762 us/op
     p(99.9999) =    392.762 us/op
    p(100.0000) =    392.762 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4994.639 us/op
# Warmup Iteration   2: 3346.379 us/op
# Warmup Iteration   3: 398.542 us/op
# Warmup Iteration   4: 449.631 us/op
# Warmup Iteration   5: 426.313 us/op
Iteration   1: 436.906 us/op
Iteration   2: 428.809 us/op
Iteration   3: 458.979 us/op
Iteration   4: 441.076 us/op
Iteration   5: 462.560 us/op
Iteration   6: 438.776 us/op
Iteration   7: 438.948 us/op
Iteration   8: 454.886 us/op
Iteration   9: 424.382 us/op
Iteration  10: 461.714 us/op
Iteration  11: 464.616 us/op
Iteration  12: 427.598 us/op
Iteration  13: 459.401 us/op
Iteration  14: 447.955 us/op
Iteration  15: 425.759 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  N = 15
  mean =    444.824 ±(99.9%) 15.644 us/op

  Histogram, us/op:
    [420.000, 425.000) = 1 
    [425.000, 430.000) = 3 
    [430.000, 435.000) = 0 
    [435.000, 440.000) = 3 
    [440.000, 445.000) = 1 
    [445.000, 450.000) = 1 
    [450.000, 455.000) = 1 
    [455.000, 460.000) = 2 
    [460.000, 465.000) = 3 

  Percentiles, us/op:
      p(0.0000) =    424.382 us/op
     p(50.0000) =    441.076 us/op
     p(90.0000) =    463.382 us/op
     p(95.0000) =    464.616 us/op
     p(99.0000) =    464.616 us/op
     p(99.9000) =    464.616 us/op
     p(99.9900) =    464.616 us/op
     p(99.9990) =    464.616 us/op
     p(99.9999) =    464.616 us/op
    p(100.0000) =    464.616 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1222340.530 us/op
# Warmup Iteration   2: 1191509.947 us/op
# Warmup Iteration   3: 1191230.239 us/op
# Warmup Iteration   4: 1184558.874 us/op
# Warmup Iteration   5: 1187744.886 us/op
Iteration   1: 1184820.065 us/op
Iteration   2: 1183109.352 us/op
Iteration   3: 1182800.356 us/op
Iteration   4: 1190769.824 us/op
Iteration   5: 1197983.952 us/op
Iteration   6: 1199741.697 us/op
Iteration   7: 1190462.952 us/op
Iteration   8: 1186621.220 us/op
Iteration   9: 1183728.708 us/op
Iteration  10: 1188411.578 us/op
Iteration  11: 1187809.421 us/op
Iteration  12: 1190895.583 us/op
Iteration  13: 1184002.017 us/op
Iteration  14: 1193404.416 us/op
Iteration  15: 1183958.115 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  N = 15
  mean = 1188567.950 ±(99.9%) 5698.465 us/op

  Histogram, us/op:
    [1180000.000, 1181250.000) = 0 
    [1181250.000, 1182500.000) = 0 
    [1182500.000, 1183750.000) = 3 
    [1183750.000, 1185000.000) = 3 
    [1185000.000, 1186250.000) = 0 
    [1186250.000, 1187500.000) = 1 
    [1187500.000, 1188750.000) = 2 
    [1188750.000, 1190000.000) = 0 
    [1190000.000, 1191250.000) = 3 
    [1191250.000, 1192500.000) = 0 
    [1192500.000, 1193750.000) = 1 
    [1193750.000, 1195000.000) = 0 
    [1195000.000, 1196250.000) = 0 
    [1196250.000, 1197500.000) = 0 
    [1197500.000, 1198750.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 1182800.356 us/op
     p(50.0000) = 1187809.421 us/op
     p(90.0000) = 1198687.050 us/op
     p(95.0000) = 1199741.697 us/op
     p(99.0000) = 1199741.697 us/op
     p(99.9000) = 1199741.697 us/op
     p(99.9900) = 1199741.697 us/op
     p(99.9990) = 1199741.697 us/op
     p(99.9999) = 1199741.697 us/op
    p(100.0000) = 1199741.697 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 968781.484 us/op
# Warmup Iteration   2: 920367.349 us/op
# Warmup Iteration   3: 899212.216 us/op
# Warmup Iteration   4: 890171.880 us/op
# Warmup Iteration   5: 922678.530 us/op
Iteration   1: 883126.933 us/op
Iteration   2: 891671.130 us/op
Iteration   3: 895032.047 us/op
Iteration   4: 883587.897 us/op
Iteration   5: 883847.142 us/op
Iteration   6: 901919.230 us/op
Iteration   7: 896591.902 us/op
Iteration   8: 912116.752 us/op
Iteration   9: 889444.300 us/op
Iteration  10: 878368.634 us/op
Iteration  11: 894739.298 us/op
Iteration  12: 890269.478 us/op
Iteration  13: 902302.636 us/op
Iteration  14: 892123.691 us/op
Iteration  15: 878424.396 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 15
  mean = 891571.031 ±(99.9%) 10061.049 us/op

  Histogram, us/op:
    [870000.000, 875000.000) = 0 
    [875000.000, 880000.000) = 2 
    [880000.000, 885000.000) = 3 
    [885000.000, 890000.000) = 1 
    [890000.000, 895000.000) = 4 
    [895000.000, 900000.000) = 2 
    [900000.000, 905000.000) = 2 
    [905000.000, 910000.000) = 0 
    [910000.000, 915000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 878368.634 us/op
     p(50.0000) = 891671.130 us/op
     p(90.0000) = 906228.282 us/op
     p(95.0000) = 912116.752 us/op
     p(99.0000) = 912116.752 us/op
     p(99.9000) = 912116.752 us/op
     p(99.9900) = 912116.752 us/op
     p(99.9990) = 912116.752 us/op
     p(99.9999) = 912116.752 us/op
    p(100.0000) = 912116.752 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 19152249.937 us/op
# Warmup Iteration   2: 19142919.448 us/op
# Warmup Iteration   3: 18765085.420 us/op
# Warmup Iteration   4: 19011051.836 us/op
# Warmup Iteration   5: 19786230.922 us/op
Iteration   1: 19551416.735 us/op
Iteration   2: 19958929.906 us/op
Iteration   3: 20023440.011 us/op
Iteration   4: 19776795.692 us/op
Iteration   5: 19800937.995 us/op
Iteration   6: 20061342.828 us/op
Iteration   7: 20213039.486 us/op
Iteration   8: 19965333.658 us/op
Iteration   9: 19628047.668 us/op
Iteration  10: 19938591.164 us/op
Iteration  11: 19646302.734 us/op
Iteration  12: 20273370.831 us/op
Iteration  13: 20181570.222 us/op
Iteration  14: 19990230.744 us/op
Iteration  15: 19527197.195 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 15
  mean = 19902436.458 ±(99.9%) 255400.750 us/op

  Histogram, us/op:
    [19500000.000, 19550000.000) = 1 
    [19550000.000, 19600000.000) = 1 
    [19600000.000, 19650000.000) = 2 
    [19650000.000, 19700000.000) = 0 
    [19700000.000, 19750000.000) = 0 
    [19750000.000, 19800000.000) = 1 
    [19800000.000, 19850000.000) = 1 
    [19850000.000, 19900000.000) = 0 
    [19900000.000, 19950000.000) = 1 
    [19950000.000, 20000000.000) = 3 
    [20000000.000, 20050000.000) = 1 
    [20050000.000, 20100000.000) = 1 
    [20100000.000, 20150000.000) = 0 
    [20150000.000, 20200000.000) = 1 
    [20200000.000, 20250000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 19527197.195 us/op
     p(50.0000) = 19958929.906 us/op
     p(90.0000) = 20237172.024 us/op
     p(95.0000) = 20273370.831 us/op
     p(99.0000) = 20273370.831 us/op
     p(99.9000) = 20273370.831 us/op
     p(99.9900) = 20273370.831 us/op
     p(99.9990) = 20273370.831 us/op
     p(99.9999) = 20273370.831 us/op
    p(100.0000) = 20273370.831 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 147.671 us/op
# Warmup Iteration   2: 28.486 us/op
# Warmup Iteration   3: 12.732 us/op
# Warmup Iteration   4: 15.576 us/op
# Warmup Iteration   5: 16.009 us/op
Iteration   1: 13.029 us/op
Iteration   2: 13.768 us/op
Iteration   3: 11.999 us/op
Iteration   4: 12.670 us/op
Iteration   5: 13.529 us/op
Iteration   6: 13.247 us/op
Iteration   7: 14.407 us/op
Iteration   8: 12.883 us/op
Iteration   9: 12.173 us/op
Iteration  10: 12.921 us/op
Iteration  11: 10.471 us/op
Iteration  12: 11.752 us/op
Iteration  13: 13.073 us/op
Iteration  14: 13.351 us/op
Iteration  15: 12.997 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     12.818 ±(99.9%) 1.002 us/op

  Histogram, us/op:
    [10.000, 10.500) = 1 
    [10.500, 11.000) = 0 
    [11.000, 11.500) = 0 
    [11.500, 12.000) = 2 
    [12.000, 12.500) = 1 
    [12.500, 13.000) = 4 
    [13.000, 13.500) = 4 
    [13.500, 14.000) = 2 
    [14.000, 14.500) = 1 

  Percentiles, us/op:
      p(0.0000) =     10.471 us/op
     p(50.0000) =     12.997 us/op
     p(90.0000) =     14.024 us/op
     p(95.0000) =     14.407 us/op
     p(99.0000) =     14.407 us/op
     p(99.9000) =     14.407 us/op
     p(99.9900) =     14.407 us/op
     p(99.9990) =     14.407 us/op
     p(99.9999) =     14.407 us/op
    p(100.0000) =     14.407 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 235.540 us/op
# Warmup Iteration   2: 36.067 us/op
# Warmup Iteration   3: 26.994 us/op
# Warmup Iteration   4: 32.055 us/op
# Warmup Iteration   5: 25.671 us/op
Iteration   1: 162.161 us/op
Iteration   2: 25.251 us/op
Iteration   3: 12.940 us/op
Iteration   4: 13.789 us/op
Iteration   5: 13.937 us/op
Iteration   6: 13.358 us/op
Iteration   7: 13.495 us/op
Iteration   8: 13.886 us/op
Iteration   9: 13.767 us/op
Iteration  10: 15.165 us/op
Iteration  11: 12.390 us/op
Iteration  12: 15.684 us/op
Iteration  13: 15.084 us/op
Iteration  14: 15.458 us/op
Iteration  15: 16.193 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     24.837 ±(99.9%) 40.742 us/op

  Histogram, us/op:
    [  0.000,  12.500) = 1 
    [ 12.500,  25.000) = 12 
    [ 25.000,  37.500) = 1 
    [ 37.500,  50.000) = 0 
    [ 50.000,  62.500) = 0 
    [ 62.500,  75.000) = 0 
    [ 75.000,  87.500) = 0 
    [ 87.500, 100.000) = 0 
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 0 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 1 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 0 

  Percentiles, us/op:
      p(0.0000) =     12.390 us/op
     p(50.0000) =     13.937 us/op
     p(90.0000) =     80.015 us/op
     p(95.0000) =    162.161 us/op
     p(99.0000) =    162.161 us/op
     p(99.9000) =    162.161 us/op
     p(99.9900) =    162.161 us/op
     p(99.9990) =    162.161 us/op
     p(99.9999) =    162.161 us/op
    p(100.0000) =    162.161 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 422.785 us/op
# Warmup Iteration   2: 156.878 us/op
# Warmup Iteration   3: 46.374 us/op
# Warmup Iteration   4: 69.438 us/op
# Warmup Iteration   5: 30.928 us/op
Iteration   1: 20.585 us/op
Iteration   2: 20.088 us/op
Iteration   3: 20.910 us/op
Iteration   4: 20.548 us/op
Iteration   5: 21.690 us/op
Iteration   6: 91.841 us/op
Iteration   7: 18.771 us/op
Iteration   8: 19.375 us/op
Iteration   9: 20.148 us/op
Iteration  10: 20.417 us/op
Iteration  11: 18.392 us/op
Iteration  12: 23.886 us/op
Iteration  13: 18.204 us/op
Iteration  14: 24.360 us/op
Iteration  15: 24.127 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     25.556 ±(99.9%) 19.716 us/op

  Histogram, us/op:
    [ 10.000,  15.000) = 0 
    [ 15.000,  20.000) = 4 
    [ 20.000,  25.000) = 10 
    [ 25.000,  30.000) = 0 
    [ 30.000,  35.000) = 0 
    [ 35.000,  40.000) = 0 
    [ 40.000,  45.000) = 0 
    [ 45.000,  50.000) = 0 
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 0 
    [ 60.000,  65.000) = 0 
    [ 65.000,  70.000) = 0 
    [ 70.000,  75.000) = 0 
    [ 75.000,  80.000) = 0 
    [ 80.000,  85.000) = 0 
    [ 85.000,  90.000) = 0 
    [ 90.000,  95.000) = 1 

  Percentiles, us/op:
      p(0.0000) =     18.204 us/op
     p(50.0000) =     20.548 us/op
     p(90.0000) =     51.352 us/op
     p(95.0000) =     91.841 us/op
     p(99.0000) =     91.841 us/op
     p(99.9000) =     91.841 us/op
     p(99.9900) =     91.841 us/op
     p(99.9990) =     91.841 us/op
     p(99.9999) =     91.841 us/op
    p(100.0000) =     91.841 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 332.073 us/op
# Warmup Iteration   2: 6.902 us/op
# Warmup Iteration   3: 8.059 us/op
# Warmup Iteration   4: 7.624 us/op
# Warmup Iteration   5: 6.853 us/op
Iteration   1: 6.125 us/op
Iteration   2: 6.584 us/op
Iteration   3: 5.809 us/op
Iteration   4: 4.984 us/op
Iteration   5: 8.242 us/op
Iteration   6: 5.639 us/op
Iteration   7: 5.912 us/op
Iteration   8: 6.892 us/op
Iteration   9: 6.291 us/op
Iteration  10: 5.502 us/op
Iteration  11: 5.517 us/op
Iteration  12: 6.172 us/op
Iteration  13: 6.316 us/op
Iteration  14: 5.834 us/op
Iteration  15: 102.549 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =     12.558 ±(99.9%) 26.627 us/op

  Histogram, us/op:
    [  0.000,  10.000) = 14 
    [ 10.000,  20.000) = 0 
    [ 20.000,  30.000) = 0 
    [ 30.000,  40.000) = 0 
    [ 40.000,  50.000) = 0 
    [ 50.000,  60.000) = 0 
    [ 60.000,  70.000) = 0 
    [ 70.000,  80.000) = 0 
    [ 80.000,  90.000) = 0 
    [ 90.000, 100.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      4.984 us/op
     p(50.0000) =      6.125 us/op
     p(90.0000) =     45.965 us/op
     p(95.0000) =    102.549 us/op
     p(99.0000) =    102.549 us/op
     p(99.9000) =    102.549 us/op
     p(99.9900) =    102.549 us/op
     p(99.9990) =    102.549 us/op
     p(99.9999) =    102.549 us/op
    p(100.0000) =    102.549 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 351.278 us/op
# Warmup Iteration   2: 30.417 us/op
# Warmup Iteration   3: 23.777 us/op
# Warmup Iteration   4: 23.363 us/op
# Warmup Iteration   5: 24.945 us/op
Iteration   1: 30.866 us/op
Iteration   2: 19.940 us/op
Iteration   3: 13.428 us/op
Iteration   4: 38.972 us/op
Iteration   5: 24.777 us/op
Iteration   6: 16.833 us/op
Iteration   7: 13.286 us/op
Iteration   8: 13.334 us/op
Iteration   9: 13.300 us/op
Iteration  10: 13.401 us/op
Iteration  11: 15.985 us/op
Iteration  12: 14.546 us/op
Iteration  13: 12.624 us/op
Iteration  14: 13.817 us/op
Iteration  15: 12.262 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =     17.825 ±(99.9%) 8.376 us/op

  Histogram, us/op:
    [10.000, 12.500) = 1 
    [12.500, 15.000) = 8 
    [15.000, 17.500) = 2 
    [17.500, 20.000) = 1 
    [20.000, 22.500) = 0 
    [22.500, 25.000) = 1 
    [25.000, 27.500) = 0 
    [27.500, 30.000) = 0 
    [30.000, 32.500) = 1 
    [32.500, 35.000) = 0 
    [35.000, 37.500) = 0 

  Percentiles, us/op:
      p(0.0000) =     12.262 us/op
     p(50.0000) =     13.817 us/op
     p(90.0000) =     34.108 us/op
     p(95.0000) =     38.972 us/op
     p(99.0000) =     38.972 us/op
     p(99.9000) =     38.972 us/op
     p(99.9900) =     38.972 us/op
     p(99.9990) =     38.972 us/op
     p(99.9999) =     38.972 us/op
    p(100.0000) =     38.972 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 605.598 us/op
# Warmup Iteration   2: 137.654 us/op
# Warmup Iteration   3: 117.847 us/op
# Warmup Iteration   4: 94.475 us/op
# Warmup Iteration   5: 89.019 us/op
Iteration   1: 99.340 us/op
Iteration   2: 180.588 us/op
Iteration   3: 146.941 us/op
Iteration   4: 89.958 us/op
Iteration   5: 113.434 us/op
Iteration   6: 96.950 us/op
Iteration   7: 90.363 us/op
Iteration   8: 79.966 us/op
Iteration   9: 90.145 us/op
Iteration  10: 216.108 us/op
Iteration  11: 82.756 us/op
Iteration  12: 88.954 us/op
Iteration  13: 87.960 us/op
Iteration  14: 83.808 us/op
Iteration  15: 80.535 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =    108.520 ±(99.9%) 43.499 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 0 
    [ 25.000,  50.000) = 0 
    [ 50.000,  75.000) = 0 
    [ 75.000, 100.000) = 11 
    [100.000, 125.000) = 1 
    [125.000, 150.000) = 1 
    [150.000, 175.000) = 0 
    [175.000, 200.000) = 1 
    [200.000, 225.000) = 1 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     79.966 us/op
     p(50.0000) =     90.145 us/op
     p(90.0000) =    194.796 us/op
     p(95.0000) =    216.108 us/op
     p(99.0000) =    216.108 us/op
     p(99.9000) =    216.108 us/op
     p(99.9900) =    216.108 us/op
     p(99.9990) =    216.108 us/op
     p(99.9999) =    216.108 us/op
    p(100.0000) =    216.108 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 320.224 us/op
# Warmup Iteration   2: 9.021 us/op
# Warmup Iteration   3: 8.369 us/op
# Warmup Iteration   4: 8.568 us/op
# Warmup Iteration   5: 6.284 us/op
Iteration   1: 6.412 us/op
Iteration   2: 6.839 us/op
Iteration   3: 5.910 us/op
Iteration   4: 6.071 us/op
Iteration   5: 7.871 us/op
Iteration   6: 5.965 us/op
Iteration   7: 6.750 us/op
Iteration   8: 7.734 us/op
Iteration   9: 5.479 us/op
Iteration  10: 6.244 us/op
Iteration  11: 6.534 us/op
Iteration  12: 6.051 us/op
Iteration  13: 6.640 us/op
Iteration  14: 6.479 us/op
Iteration  15: 5.997 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =      6.465 ±(99.9%) 0.698 us/op

  Histogram, us/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 1 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 3 
    [6.000, 6.250) = 3 
    [6.250, 6.500) = 2 
    [6.500, 6.750) = 2 
    [6.750, 7.000) = 2 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 1 

  Percentiles, us/op:
      p(0.0000) =      5.479 us/op
     p(50.0000) =      6.412 us/op
     p(90.0000) =      7.789 us/op
     p(95.0000) =      7.871 us/op
     p(99.0000) =      7.871 us/op
     p(99.9000) =      7.871 us/op
     p(99.9900) =      7.871 us/op
     p(99.9990) =      7.871 us/op
     p(99.9999) =      7.871 us/op
    p(100.0000) =      7.871 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 369.044 us/op
# Warmup Iteration   2: 23.867 us/op
# Warmup Iteration   3: 724.462 us/op
# Warmup Iteration   4: 15.559 us/op
# Warmup Iteration   5: 13.933 us/op
Iteration   1: 14.060 us/op
Iteration   2: 14.744 us/op
Iteration   3: 13.804 us/op
Iteration   4: 26.053 us/op
Iteration   5: 24.910 us/op
Iteration   6: 19.509 us/op
Iteration   7: 14.406 us/op
Iteration   8: 13.449 us/op
Iteration   9: 19.054 us/op
Iteration  10: 13.219 us/op
Iteration  11: 13.965 us/op
Iteration  12: 19.530 us/op
Iteration  13: 12.924 us/op
Iteration  14: 14.433 us/op
Iteration  15: 13.064 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =     16.475 ±(99.9%) 4.632 us/op

  Histogram, us/op:
    [10.000, 11.250) = 0 
    [11.250, 12.500) = 0 
    [12.500, 13.750) = 4 
    [13.750, 15.000) = 6 
    [15.000, 16.250) = 0 
    [16.250, 17.500) = 0 
    [17.500, 18.750) = 0 
    [18.750, 20.000) = 3 
    [20.000, 21.250) = 0 
    [21.250, 22.500) = 0 
    [22.500, 23.750) = 0 
    [23.750, 25.000) = 1 
    [25.000, 26.250) = 1 
    [26.250, 27.500) = 0 
    [27.500, 28.750) = 0 

  Percentiles, us/op:
      p(0.0000) =     12.924 us/op
     p(50.0000) =     14.406 us/op
     p(90.0000) =     25.367 us/op
     p(95.0000) =     26.053 us/op
     p(99.0000) =     26.053 us/op
     p(99.9000) =     26.053 us/op
     p(99.9900) =     26.053 us/op
     p(99.9990) =     26.053 us/op
     p(99.9999) =     26.053 us/op
    p(100.0000) =     26.053 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 598.364 us/op
# Warmup Iteration   2: 233.809 us/op
# Warmup Iteration   3: 118.453 us/op
# Warmup Iteration   4: 110.470 us/op
# Warmup Iteration   5: 99.766 us/op
Iteration   1: 205.279 us/op
Iteration   2: 104.365 us/op
Iteration   3: 85.243 us/op
Iteration   4: 100.962 us/op
Iteration   5: 86.900 us/op
Iteration   6: 85.040 us/op
Iteration   7: 87.703 us/op
Iteration   8: 91.556 us/op
Iteration   9: 90.601 us/op
Iteration  10: 82.194 us/op
Iteration  11: 89.501 us/op
Iteration  12: 90.281 us/op
Iteration  13: 82.713 us/op
Iteration  14: 230.622 us/op
Iteration  15: 91.686 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =    106.976 ±(99.9%) 48.865 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 0 
    [ 25.000,  50.000) = 0 
    [ 50.000,  75.000) = 0 
    [ 75.000, 100.000) = 11 
    [100.000, 125.000) = 2 
    [125.000, 150.000) = 0 
    [150.000, 175.000) = 0 
    [175.000, 200.000) = 0 
    [200.000, 225.000) = 1 
    [225.000, 250.000) = 1 
    [250.000, 275.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     82.194 us/op
     p(50.0000) =     90.281 us/op
     p(90.0000) =    215.416 us/op
     p(95.0000) =    230.622 us/op
     p(99.0000) =    230.622 us/op
     p(99.9000) =    230.622 us/op
     p(99.9900) =    230.622 us/op
     p(99.9990) =    230.622 us/op
     p(99.9999) =    230.622 us/op
    p(100.0000) =    230.622 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 30261.145 us/op
# Warmup Iteration   2: 15490.633 us/op
# Warmup Iteration   3: 15120.961 us/op
# Warmup Iteration   4: 14924.859 us/op
# Warmup Iteration   5: 14682.473 us/op
Iteration   1: 15328.135 us/op
Iteration   2: 14635.716 us/op
Iteration   3: 14772.667 us/op
Iteration   4: 14900.080 us/op
Iteration   5: 14691.244 us/op
Iteration   6: 16238.200 us/op
Iteration   7: 14642.965 us/op
Iteration   8: 14952.744 us/op
Iteration   9: 14610.186 us/op
Iteration  10: 14748.744 us/op
Iteration  11: 14604.361 us/op
Iteration  12: 14653.742 us/op
Iteration  13: 14534.732 us/op
Iteration  14: 14544.444 us/op
Iteration  15: 14597.673 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  N = 15
  mean =  14830.376 ±(99.9%) 470.006 us/op

  Histogram, us/op:
    [14000.000, 14250.000) = 0 
    [14250.000, 14500.000) = 0 
    [14500.000, 14750.000) = 10 
    [14750.000, 15000.000) = 3 
    [15000.000, 15250.000) = 0 
    [15250.000, 15500.000) = 1 
    [15500.000, 15750.000) = 0 
    [15750.000, 16000.000) = 0 
    [16000.000, 16250.000) = 1 
    [16250.000, 16500.000) = 0 
    [16500.000, 16750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  14534.732 us/op
     p(50.0000) =  14653.742 us/op
     p(90.0000) =  15692.161 us/op
     p(95.0000) =  16238.200 us/op
     p(99.0000) =  16238.200 us/op
     p(99.9000) =  16238.200 us/op
     p(99.9900) =  16238.200 us/op
     p(99.9990) =  16238.200 us/op
     p(99.9999) =  16238.200 us/op
    p(100.0000) =  16238.200 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 15234.833 us/op
# Warmup Iteration   2: 3314.528 us/op
# Warmup Iteration   3: 3193.986 us/op
# Warmup Iteration   4: 3080.030 us/op
# Warmup Iteration   5: 3030.081 us/op
Iteration   1: 3286.966 us/op
Iteration   2: 7651.737 us/op
Iteration   3: 1846.390 us/op
Iteration   4: 1888.701 us/op
Iteration   5: 1809.278 us/op
Iteration   6: 1909.134 us/op
Iteration   7: 809.431 us/op
Iteration   8: 1032.094 us/op
Iteration   9: 947.240 us/op
Iteration  10: 839.690 us/op
Iteration  11: 801.226 us/op
Iteration  12: 949.621 us/op
Iteration  13: 972.738 us/op
Iteration  14: 781.839 us/op
Iteration  15: 888.594 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean =   1760.979 ±(99.9%) 1894.073 us/op

  Histogram, us/op:
    [   0.000,  500.000) = 0 
    [ 500.000, 1000.000) = 8 
    [1000.000, 1500.000) = 1 
    [1500.000, 2000.000) = 4 
    [2000.000, 2500.000) = 0 
    [2500.000, 3000.000) = 0 
    [3000.000, 3500.000) = 1 
    [3500.000, 4000.000) = 0 
    [4000.000, 4500.000) = 0 
    [4500.000, 5000.000) = 0 
    [5000.000, 5500.000) = 0 
    [5500.000, 6000.000) = 0 
    [6000.000, 6500.000) = 0 
    [6500.000, 7000.000) = 0 
    [7000.000, 7500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    781.839 us/op
     p(50.0000) =    972.738 us/op
     p(90.0000) =   5032.874 us/op
     p(95.0000) =   7651.737 us/op
     p(99.0000) =   7651.737 us/op
     p(99.9000) =   7651.737 us/op
     p(99.9900) =   7651.737 us/op
     p(99.9990) =   7651.737 us/op
     p(99.9999) =   7651.737 us/op
    p(100.0000) =   7651.737 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 84823.818 us/op
# Warmup Iteration   2: 35259.432 us/op
# Warmup Iteration   3: 110568.140 us/op
# Warmup Iteration   4: 34588.665 us/op
# Warmup Iteration   5: 44657.579 us/op
Iteration   1: 35553.247 us/op
Iteration   2: 35692.268 us/op
Iteration   3: 35443.856 us/op
Iteration   4: 36098.088 us/op
Iteration   5: 107156.204 us/op
Iteration   6: 106257.408 us/op
Iteration   7: 105780.223 us/op
Iteration   8: 106686.229 us/op
Iteration   9: 106558.919 us/op
Iteration  10: 106189.722 us/op
Iteration  11: 105615.456 us/op
Iteration  12: 105859.982 us/op
Iteration  13: 105882.883 us/op
Iteration  14: 106461.016 us/op
Iteration  15: 106468.704 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean =  87446.947 ±(99.9%) 34535.336 us/op

  Histogram, us/op:
    [ 30000.000,  35000.000) = 0 
    [ 35000.000,  40000.000) = 4 
    [ 40000.000,  45000.000) = 0 
    [ 45000.000,  50000.000) = 0 
    [ 50000.000,  55000.000) = 0 
    [ 55000.000,  60000.000) = 0 
    [ 60000.000,  65000.000) = 0 
    [ 65000.000,  70000.000) = 0 
    [ 70000.000,  75000.000) = 0 
    [ 75000.000,  80000.000) = 0 
    [ 80000.000,  85000.000) = 0 
    [ 85000.000,  90000.000) = 0 
    [ 90000.000,  95000.000) = 0 
    [ 95000.000, 100000.000) = 0 
    [100000.000, 105000.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  35443.856 us/op
     p(50.0000) = 105882.883 us/op
     p(90.0000) = 106874.219 us/op
     p(95.0000) = 107156.204 us/op
     p(99.0000) = 107156.204 us/op
     p(99.9000) = 107156.204 us/op
     p(99.9900) = 107156.204 us/op
     p(99.9990) = 107156.204 us/op
     p(99.9999) = 107156.204 us/op
    p(100.0000) = 107156.204 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3693363.412 us/op
# Warmup Iteration   2: 11148760.161 us/op
# Warmup Iteration   3: 11169016.653 us/op
# Warmup Iteration   4: 11179403.388 us/op
# Warmup Iteration   5: 11173796.911 us/op
Iteration   1: 11169677.034 us/op
Iteration   2: 11198243.484 us/op
Iteration   3: 11167403.374 us/op
Iteration   4: 11162110.820 us/op
Iteration   5: 11201751.116 us/op
Iteration   6: 11146395.743 us/op
Iteration   7: 11161936.212 us/op
Iteration   8: 11146409.242 us/op
Iteration   9: 11228346.425 us/op
Iteration  10: 11136740.926 us/op
Iteration  11: 11151557.804 us/op
Iteration  12: 11185092.775 us/op
Iteration  13: 11196327.700 us/op
Iteration  14: 11164561.946 us/op
Iteration  15: 11188175.488 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean = 11173648.673 ±(99.9%) 27083.606 us/op

  Histogram, us/op:
    [11130000.000, 11140000.000) = 1 
    [11140000.000, 11150000.000) = 2 
    [11150000.000, 11160000.000) = 1 
    [11160000.000, 11170000.000) = 5 
    [11170000.000, 11180000.000) = 0 
    [11180000.000, 11190000.000) = 2 
    [11190000.000, 11200000.000) = 2 
    [11200000.000, 11210000.000) = 1 
    [11210000.000, 11220000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 11136740.926 us/op
     p(50.0000) = 11167403.374 us/op
     p(90.0000) = 11212389.240 us/op
     p(95.0000) = 11228346.425 us/op
     p(99.0000) = 11228346.425 us/op
     p(99.9000) = 11228346.425 us/op
     p(99.9900) = 11228346.425 us/op
     p(99.9990) = 11228346.425 us/op
     p(99.9999) = 11228346.425 us/op
    p(100.0000) = 11228346.425 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 21093.302 us/op
# Warmup Iteration   2: 10749.583 us/op
# Warmup Iteration   3: 1943.031 us/op
# Warmup Iteration   4: 1891.927 us/op
# Warmup Iteration   5: 1923.184 us/op
Iteration   1: 1920.734 us/op
Iteration   2: 1917.296 us/op
Iteration   3: 1932.407 us/op
Iteration   4: 1917.895 us/op
Iteration   5: 1906.735 us/op
Iteration   6: 1901.953 us/op
Iteration   7: 1886.393 us/op
Iteration   8: 1928.985 us/op
Iteration   9: 1896.242 us/op
Iteration  10: 1919.854 us/op
Iteration  11: 1891.116 us/op
Iteration  12: 1927.739 us/op
Iteration  13: 1913.362 us/op
Iteration  14: 1894.364 us/op
Iteration  15: 1943.563 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  N = 15
  mean =   1913.243 ±(99.9%) 17.862 us/op

  Histogram, us/op:
    [1880.000, 1885.000) = 0 
    [1885.000, 1890.000) = 1 
    [1890.000, 1895.000) = 2 
    [1895.000, 1900.000) = 1 
    [1900.000, 1905.000) = 1 
    [1905.000, 1910.000) = 1 
    [1910.000, 1915.000) = 1 
    [1915.000, 1920.000) = 3 
    [1920.000, 1925.000) = 1 
    [1925.000, 1930.000) = 2 
    [1930.000, 1935.000) = 1 
    [1935.000, 1940.000) = 0 
    [1940.000, 1945.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   1886.393 us/op
     p(50.0000) =   1917.296 us/op
     p(90.0000) =   1936.869 us/op
     p(95.0000) =   1943.563 us/op
     p(99.0000) =   1943.563 us/op
     p(99.9000) =   1943.563 us/op
     p(99.9900) =   1943.563 us/op
     p(99.9990) =   1943.563 us/op
     p(99.9999) =   1943.563 us/op
    p(100.0000) =   1943.563 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 60624.150 us/op
# Warmup Iteration   2: 52670.906 us/op
# Warmup Iteration   3: 46998.484 us/op
# Warmup Iteration   4: 46913.249 us/op
# Warmup Iteration   5: 47116.805 us/op
Iteration   1: 46928.071 us/op
Iteration   2: 46974.785 us/op
Iteration   3: 47017.718 us/op
Iteration   4: 47094.558 us/op
Iteration   5: 47087.756 us/op
Iteration   6: 46998.182 us/op
Iteration   7: 47026.590 us/op
Iteration   8: 46950.763 us/op
Iteration   9: 46822.519 us/op
Iteration  10: 47076.930 us/op
Iteration  11: 47229.664 us/op
Iteration  12: 47379.014 us/op
Iteration  13: 47119.956 us/op
Iteration  14: 46948.824 us/op
Iteration  15: 47215.129 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  N = 15
  mean =  47058.031 ±(99.9%) 149.147 us/op

  Histogram, us/op:
    [46800.000, 46850.000) = 1 
    [46850.000, 46900.000) = 0 
    [46900.000, 46950.000) = 2 
    [46950.000, 47000.000) = 3 
    [47000.000, 47050.000) = 2 
    [47050.000, 47100.000) = 3 
    [47100.000, 47150.000) = 1 
    [47150.000, 47200.000) = 0 
    [47200.000, 47250.000) = 2 
    [47250.000, 47300.000) = 0 
    [47300.000, 47350.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  46822.519 us/op
     p(50.0000) =  47026.590 us/op
     p(90.0000) =  47289.404 us/op
     p(95.0000) =  47379.014 us/op
     p(99.0000) =  47379.014 us/op
     p(99.9000) =  47379.014 us/op
     p(99.9900) =  47379.014 us/op
     p(99.9990) =  47379.014 us/op
     p(99.9999) =  47379.014 us/op
    p(100.0000) =  47379.014 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1758831.831 us/op
# Warmup Iteration   2: 1761888.708 us/op
# Warmup Iteration   3: 1713906.376 us/op
# Warmup Iteration   4: 1715890.770 us/op
# Warmup Iteration   5: 1732141.674 us/op
Iteration   1: 1713814.422 us/op
Iteration   2: 1713293.181 us/op
Iteration   3: 1723282.294 us/op
Iteration   4: 1712286.899 us/op
Iteration   5: 1717201.655 us/op
Iteration   6: 1712675.081 us/op
Iteration   7: 1715273.006 us/op
Iteration   8: 1715413.996 us/op
Iteration   9: 1716817.604 us/op
Iteration  10: 1715375.957 us/op
Iteration  11: 1717927.070 us/op
Iteration  12: 1715256.758 us/op
Iteration  13: 1718293.709 us/op
Iteration  14: 1714281.010 us/op
Iteration  15: 1720675.950 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  N = 15
  mean = 1716124.573 ±(99.9%) 3225.776 us/op

  Histogram, us/op:
    [1710000.000, 1711250.000) = 0 
    [1711250.000, 1712500.000) = 1 
    [1712500.000, 1713750.000) = 2 
    [1713750.000, 1715000.000) = 2 
    [1715000.000, 1716250.000) = 4 
    [1716250.000, 1717500.000) = 2 
    [1717500.000, 1718750.000) = 2 
    [1718750.000, 1720000.000) = 0 
    [1720000.000, 1721250.000) = 1 
    [1721250.000, 1722500.000) = 0 
    [1722500.000, 1723750.000) = 1 
    [1723750.000, 1725000.000) = 0 
    [1725000.000, 1726250.000) = 0 
    [1726250.000, 1727500.000) = 0 
    [1727500.000, 1728750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1712286.899 us/op
     p(50.0000) = 1715375.957 us/op
     p(90.0000) = 1721718.488 us/op
     p(95.0000) = 1723282.294 us/op
     p(99.0000) = 1723282.294 us/op
     p(99.9000) = 1723282.294 us/op
     p(99.9900) = 1723282.294 us/op
     p(99.9990) = 1723282.294 us/op
     p(99.9999) = 1723282.294 us/op
    p(100.0000) = 1723282.294 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 281.971 us/op
# Warmup Iteration   2: 9.961 us/op
# Warmup Iteration   3: 11.196 us/op
# Warmup Iteration   4: 11.381 us/op
# Warmup Iteration   5: 11.880 us/op
Iteration   1: 12.075 us/op
Iteration   2: 10.434 us/op
Iteration   3: 11.128 us/op
Iteration   4: 11.804 us/op
Iteration   5: 10.597 us/op
Iteration   6: 11.611 us/op
Iteration   7: 10.746 us/op
Iteration   8: 20.586 us/op
Iteration   9: 11.987 us/op
Iteration  10: 15.369 us/op
Iteration  11: 15.026 us/op
Iteration  12: 12.301 us/op
Iteration  13: 13.004 us/op
Iteration  14: 10.499 us/op
Iteration  15: 13.832 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  N = 15
  mean =     12.733 ±(99.9%) 2.855 us/op

  Histogram, us/op:
    [10.000, 11.250) = 5 
    [11.250, 12.500) = 5 
    [12.500, 13.750) = 1 
    [13.750, 15.000) = 1 
    [15.000, 16.250) = 2 
    [16.250, 17.500) = 0 
    [17.500, 18.750) = 0 
    [18.750, 20.000) = 0 
    [20.000, 21.250) = 1 
    [21.250, 22.500) = 0 
    [22.500, 23.750) = 0 
    [23.750, 25.000) = 0 
    [25.000, 26.250) = 0 
    [26.250, 27.500) = 0 
    [27.500, 28.750) = 0 

  Percentiles, us/op:
      p(0.0000) =     10.434 us/op
     p(50.0000) =     11.987 us/op
     p(90.0000) =     17.456 us/op
     p(95.0000) =     20.586 us/op
     p(99.0000) =     20.586 us/op
     p(99.9000) =     20.586 us/op
     p(99.9900) =     20.586 us/op
     p(99.9990) =     20.586 us/op
     p(99.9999) =     20.586 us/op
    p(100.0000) =     20.586 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 22672.237 us/op
# Warmup Iteration   2: 13194.269 us/op
# Warmup Iteration   3: 8785.724 us/op
# Warmup Iteration   4: 8825.495 us/op
# Warmup Iteration   5: 8771.609 us/op
Iteration   1: 8785.535 us/op
Iteration   2: 8767.429 us/op
Iteration   3: 8776.544 us/op
Iteration   4: 8750.639 us/op
Iteration   5: 8777.767 us/op
Iteration   6: 8816.140 us/op
Iteration   7: 8838.400 us/op
Iteration   8: 8747.928 us/op
Iteration   9: 8786.459 us/op
Iteration  10: 9086.304 us/op
Iteration  11: 8758.937 us/op
Iteration  12: 8823.680 us/op
Iteration  13: 8830.348 us/op
Iteration  14: 8757.932 us/op
Iteration  15: 8754.199 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  N = 15
  mean =   8803.883 ±(99.9%) 89.517 us/op

  Histogram, us/op:
    [8700.000, 8725.000) = 0 
    [8725.000, 8750.000) = 1 
    [8750.000, 8775.000) = 5 
    [8775.000, 8800.000) = 4 
    [8800.000, 8825.000) = 2 
    [8825.000, 8850.000) = 2 
    [8850.000, 8875.000) = 0 
    [8875.000, 8900.000) = 0 
    [8900.000, 8925.000) = 0 
    [8925.000, 8950.000) = 0 
    [8950.000, 8975.000) = 0 
    [8975.000, 9000.000) = 0 
    [9000.000, 9025.000) = 0 
    [9025.000, 9050.000) = 0 
    [9050.000, 9075.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   8747.928 us/op
     p(50.0000) =   8777.767 us/op
     p(90.0000) =   8937.562 us/op
     p(95.0000) =   9086.304 us/op
     p(99.0000) =   9086.304 us/op
     p(99.9000) =   9086.304 us/op
     p(99.9900) =   9086.304 us/op
     p(99.9990) =   9086.304 us/op
     p(99.9999) =   9086.304 us/op
    p(100.0000) =   9086.304 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 64074.325 us/op
# Warmup Iteration   2: 49462.194 us/op
# Warmup Iteration   3: 33794.810 us/op
# Warmup Iteration   4: 33327.818 us/op
# Warmup Iteration   5: 31782.503 us/op
Iteration   1: 32812.103 us/op
Iteration   2: 37000.338 us/op
Iteration   3: 32444.229 us/op
Iteration   4: 35455.735 us/op
Iteration   5: 39493.381 us/op
Iteration   6: 34831.189 us/op
Iteration   7: 31399.074 us/op
Iteration   8: 38702.830 us/op
Iteration   9: 33686.143 us/op
Iteration  10: 33986.563 us/op
Iteration  11: 34047.933 us/op
Iteration  12: 30420.207 us/op
Iteration  13: 34723.743 us/op
Iteration  14: 32716.550 us/op
Iteration  15: 32704.990 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  N = 15
  mean =  34295.001 ±(99.9%) 2712.985 us/op

  Histogram, us/op:
    [30000.000, 31000.000) = 1 
    [31000.000, 32000.000) = 1 
    [32000.000, 33000.000) = 4 
    [33000.000, 34000.000) = 2 
    [34000.000, 35000.000) = 3 
    [35000.000, 36000.000) = 1 
    [36000.000, 37000.000) = 0 
    [37000.000, 38000.000) = 1 
    [38000.000, 39000.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  30420.207 us/op
     p(50.0000) =  33986.563 us/op
     p(90.0000) =  39019.050 us/op
     p(95.0000) =  39493.381 us/op
     p(99.0000) =  39493.381 us/op
     p(99.9000) =  39493.381 us/op
     p(99.9900) =  39493.381 us/op
     p(99.9990) =  39493.381 us/op
     p(99.9999) =  39493.381 us/op
    p(100.0000) =  39493.381 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 75064.695 us/op
# Warmup Iteration   2: 31023.990 us/op
# Warmup Iteration   3: 24553.810 us/op
# Warmup Iteration   4: 24462.913 us/op
# Warmup Iteration   5: 24450.120 us/op
Iteration   1: 24488.684 us/op
Iteration   2: 24417.896 us/op
Iteration   3: 24692.348 us/op
Iteration   4: 24530.110 us/op
Iteration   5: 24390.499 us/op
Iteration   6: 24344.887 us/op
Iteration   7: 24682.716 us/op
Iteration   8: 24438.593 us/op
Iteration   9: 24649.983 us/op
Iteration  10: 24547.357 us/op
Iteration  11: 24627.875 us/op
Iteration  12: 24383.867 us/op
Iteration  13: 24493.752 us/op
Iteration  14: 24404.256 us/op
Iteration  15: 24647.536 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  N = 15
  mean =  24516.024 ±(99.9%) 127.674 us/op

  Histogram, us/op:
    [24300.000, 24325.000) = 0 
    [24325.000, 24350.000) = 1 
    [24350.000, 24375.000) = 0 
    [24375.000, 24400.000) = 2 
    [24400.000, 24425.000) = 2 
    [24425.000, 24450.000) = 1 
    [24450.000, 24475.000) = 0 
    [24475.000, 24500.000) = 2 
    [24500.000, 24525.000) = 0 
    [24525.000, 24550.000) = 2 
    [24550.000, 24575.000) = 0 
    [24575.000, 24600.000) = 0 
    [24600.000, 24625.000) = 0 
    [24625.000, 24650.000) = 3 
    [24650.000, 24675.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  24344.887 us/op
     p(50.0000) =  24493.752 us/op
     p(90.0000) =  24686.569 us/op
     p(95.0000) =  24692.348 us/op
     p(99.0000) =  24692.348 us/op
     p(99.9000) =  24692.348 us/op
     p(99.9900) =  24692.348 us/op
     p(99.9990) =  24692.348 us/op
     p(99.9999) =  24692.348 us/op
    p(100.0000) =  24692.348 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 36293.801 us/op
# Warmup Iteration   2: 19901.663 us/op
# Warmup Iteration   3: 20009.590 us/op
# Warmup Iteration   4: 20067.678 us/op
# Warmup Iteration   5: 19965.646 us/op
Iteration   1: 20064.450 us/op
Iteration   2: 19812.302 us/op
Iteration   3: 20635.118 us/op
Iteration   4: 21346.819 us/op
Iteration   5: 20061.329 us/op
Iteration   6: 20084.043 us/op
Iteration   7: 19994.624 us/op
Iteration   8: 19904.638 us/op
Iteration   9: 19945.442 us/op
Iteration  10: 20768.816 us/op
Iteration  11: 19888.165 us/op
Iteration  12: 20448.750 us/op
Iteration  13: 20004.809 us/op
Iteration  14: 19920.136 us/op
Iteration  15: 20731.588 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  N = 15
  mean =  20240.735 ±(99.9%) 474.403 us/op

  Histogram, us/op:
    [19000.000, 19250.000) = 0 
    [19250.000, 19500.000) = 0 
    [19500.000, 19750.000) = 0 
    [19750.000, 20000.000) = 6 
    [20000.000, 20250.000) = 4 
    [20250.000, 20500.000) = 1 
    [20500.000, 20750.000) = 2 
    [20750.000, 21000.000) = 1 
    [21000.000, 21250.000) = 0 
    [21250.000, 21500.000) = 1 
    [21500.000, 21750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  19812.302 us/op
     p(50.0000) =  20061.329 us/op
     p(90.0000) =  21000.017 us/op
     p(95.0000) =  21346.819 us/op
     p(99.0000) =  21346.819 us/op
     p(99.9000) =  21346.819 us/op
     p(99.9900) =  21346.819 us/op
     p(99.9990) =  21346.819 us/op
     p(99.9999) =  21346.819 us/op
    p(100.0000) =  21346.819 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 31315.928 us/op
# Warmup Iteration   2: 19408.486 us/op
# Warmup Iteration   3: 14083.095 us/op
# Warmup Iteration   4: 14486.390 us/op
# Warmup Iteration   5: 14147.772 us/op
Iteration   1: 14026.785 us/op
Iteration   2: 14489.897 us/op
Iteration   3: 14192.167 us/op
Iteration   4: 14444.924 us/op
Iteration   5: 14134.432 us/op
Iteration   6: 14479.711 us/op
Iteration   7: 14068.773 us/op
Iteration   8: 14090.888 us/op
Iteration   9: 14071.459 us/op
Iteration  10: 14115.181 us/op
Iteration  11: 14154.295 us/op
Iteration  12: 14270.333 us/op
Iteration  13: 14039.576 us/op
Iteration  14: 14066.153 us/op
Iteration  15: 14269.052 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  N = 15
  mean =  14194.242 ±(99.9%) 172.483 us/op

  Histogram, us/op:
    [14000.000, 14050.000) = 2 
    [14050.000, 14100.000) = 4 
    [14100.000, 14150.000) = 2 
    [14150.000, 14200.000) = 2 
    [14200.000, 14250.000) = 0 
    [14250.000, 14300.000) = 2 
    [14300.000, 14350.000) = 0 
    [14350.000, 14400.000) = 0 
    [14400.000, 14450.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  14026.785 us/op
     p(50.0000) =  14134.432 us/op
     p(90.0000) =  14483.785 us/op
     p(95.0000) =  14489.897 us/op
     p(99.0000) =  14489.897 us/op
     p(99.9000) =  14489.897 us/op
     p(99.9900) =  14489.897 us/op
     p(99.9990) =  14489.897 us/op
     p(99.9999) =  14489.897 us/op
    p(100.0000) =  14489.897 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 111468.019 us/op
# Warmup Iteration   2: 43416.451 us/op
# Warmup Iteration   3: 32421.364 us/op
# Warmup Iteration   4: 35219.088 us/op
# Warmup Iteration   5: 37379.634 us/op
Iteration   1: 33798.115 us/op
Iteration   2: 32960.073 us/op
Iteration   3: 35686.536 us/op
Iteration   4: 32851.438 us/op
Iteration   5: 34146.666 us/op
Iteration   6: 35756.657 us/op
Iteration   7: 35394.845 us/op
Iteration   8: 33789.455 us/op
Iteration   9: 37435.594 us/op
Iteration  10: 35090.586 us/op
Iteration  11: 33808.519 us/op
Iteration  12: 34532.818 us/op
Iteration  13: 33639.356 us/op
Iteration  14: 36180.456 us/op
Iteration  15: 33153.542 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  N = 15
  mean =  34548.310 ±(99.9%) 1422.511 us/op

  Histogram, us/op:
    [32000.000, 32500.000) = 0 
    [32500.000, 33000.000) = 2 
    [33000.000, 33500.000) = 1 
    [33500.000, 34000.000) = 4 
    [34000.000, 34500.000) = 1 
    [34500.000, 35000.000) = 1 
    [35000.000, 35500.000) = 2 
    [35500.000, 36000.000) = 2 
    [36000.000, 36500.000) = 1 
    [36500.000, 37000.000) = 0 
    [37000.000, 37500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  32851.438 us/op
     p(50.0000) =  34146.666 us/op
     p(90.0000) =  36682.511 us/op
     p(95.0000) =  37435.594 us/op
     p(99.0000) =  37435.594 us/op
     p(99.9000) =  37435.594 us/op
     p(99.9900) =  37435.594 us/op
     p(99.9990) =  37435.594 us/op
     p(99.9999) =  37435.594 us/op
    p(100.0000) =  37435.594 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6056.257 us/op
# Warmup Iteration   2: 6705.980 us/op
# Warmup Iteration   3: 6616.318 us/op
# Warmup Iteration   4: 6659.624 us/op
# Warmup Iteration   5: 6647.874 us/op
Iteration   1: 6687.594 us/op
Iteration   2: 6630.490 us/op
Iteration   3: 6717.719 us/op
Iteration   4: 6640.455 us/op
Iteration   5: 6693.383 us/op
Iteration   6: 6501.747 us/op
Iteration   7: 6716.685 us/op
Iteration   8: 6686.322 us/op
Iteration   9: 6474.265 us/op
Iteration  10: 6687.102 us/op
Iteration  11: 6541.863 us/op
Iteration  12: 6982.814 us/op
Iteration  13: 6668.000 us/op
Iteration  14: 6565.637 us/op
Iteration  15: 6627.508 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean =   6654.772 ±(99.9%) 127.272 us/op

  Histogram, us/op:
    [6400.000, 6450.000) = 0 
    [6450.000, 6500.000) = 1 
    [6500.000, 6550.000) = 2 
    [6550.000, 6600.000) = 1 
    [6600.000, 6650.000) = 3 
    [6650.000, 6700.000) = 5 
    [6700.000, 6750.000) = 2 
    [6750.000, 6800.000) = 0 
    [6800.000, 6850.000) = 0 
    [6850.000, 6900.000) = 0 
    [6900.000, 6950.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   6474.265 us/op
     p(50.0000) =   6668.000 us/op
     p(90.0000) =   6823.757 us/op
     p(95.0000) =   6982.814 us/op
     p(99.0000) =   6982.814 us/op
     p(99.9000) =   6982.814 us/op
     p(99.9900) =   6982.814 us/op
     p(99.9990) =   6982.814 us/op
     p(99.9999) =   6982.814 us/op
    p(100.0000) =   6982.814 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 62736.755 us/op
# Warmup Iteration   2: 64428.367 us/op
# Warmup Iteration   3: 64178.074 us/op
# Warmup Iteration   4: 62563.718 us/op
# Warmup Iteration   5: 62194.394 us/op
Iteration   1: 62920.119 us/op
Iteration   2: 63119.892 us/op
Iteration   3: 62834.398 us/op
Iteration   4: 62920.182 us/op
Iteration   5: 62939.498 us/op
Iteration   6: 63241.138 us/op
Iteration   7: 62907.528 us/op
Iteration   8: 63563.856 us/op
Iteration   9: 64056.154 us/op
Iteration  10: 63576.845 us/op
Iteration  11: 64275.870 us/op
Iteration  12: 62695.901 us/op
Iteration  13: 63467.394 us/op
Iteration  14: 63293.417 us/op
Iteration  15: 62897.069 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean =  63247.284 ±(99.9%) 495.644 us/op

  Histogram, us/op:
    [62000.000, 62250.000) = 0 
    [62250.000, 62500.000) = 0 
    [62500.000, 62750.000) = 1 
    [62750.000, 63000.000) = 6 
    [63000.000, 63250.000) = 2 
    [63250.000, 63500.000) = 2 
    [63500.000, 63750.000) = 2 
    [63750.000, 64000.000) = 0 
    [64000.000, 64250.000) = 1 
    [64250.000, 64500.000) = 1 
    [64500.000, 64750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  62695.901 us/op
     p(50.0000) =  63119.892 us/op
     p(90.0000) =  64144.040 us/op
     p(95.0000) =  64275.870 us/op
     p(99.0000) =  64275.870 us/op
     p(99.9000) =  64275.870 us/op
     p(99.9900) =  64275.870 us/op
     p(99.9990) =  64275.870 us/op
     p(99.9999) =  64275.870 us/op
    p(100.0000) =  64275.870 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 734155.907 us/op
# Warmup Iteration   2: 718107.855 us/op
# Warmup Iteration   3: 723026.350 us/op
# Warmup Iteration   4: 742781.434 us/op
# Warmup Iteration   5: 729512.467 us/op
Iteration   1: 730818.240 us/op
Iteration   2: 727933.302 us/op
Iteration   3: 737415.438 us/op
Iteration   4: 748089.383 us/op
Iteration   5: 745067.791 us/op
Iteration   6: 716341.051 us/op
Iteration   7: 727220.967 us/op
Iteration   8: 734762.816 us/op
Iteration   9: 725979.880 us/op
Iteration  10: 711176.501 us/op
Iteration  11: 722610.705 us/op
Iteration  12: 713563.610 us/op
Iteration  13: 736911.243 us/op
Iteration  14: 722466.387 us/op
Iteration  15: 724707.820 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean = 728337.676 ±(99.9%) 11491.027 us/op

  Histogram, us/op:
    [710000.000, 712500.000) = 1 
    [712500.000, 715000.000) = 1 
    [715000.000, 717500.000) = 1 
    [717500.000, 720000.000) = 0 
    [720000.000, 722500.000) = 1 
    [722500.000, 725000.000) = 2 
    [725000.000, 727500.000) = 2 
    [727500.000, 730000.000) = 1 
    [730000.000, 732500.000) = 1 
    [732500.000, 735000.000) = 1 
    [735000.000, 737500.000) = 2 
    [737500.000, 740000.000) = 0 
    [740000.000, 742500.000) = 0 
    [742500.000, 745000.000) = 0 
    [745000.000, 747500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 711176.501 us/op
     p(50.0000) = 727220.967 us/op
     p(90.0000) = 746276.428 us/op
     p(95.0000) = 748089.383 us/op
     p(99.0000) = 748089.383 us/op
     p(99.9000) = 748089.383 us/op
     p(99.9900) = 748089.383 us/op
     p(99.9990) = 748089.383 us/op
     p(99.9999) = 748089.383 us/op
    p(100.0000) = 748089.383 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1009060.543 us/op
# Warmup Iteration   2: 936361.222 us/op
# Warmup Iteration   3: 705100.206 us/op
# Warmup Iteration   4: 673894.541 us/op
# Warmup Iteration   5: 718762.744 us/op
Iteration   1: 734921.519 us/op
Iteration   2: 722544.270 us/op
Iteration   3: 731664.097 us/op
Iteration   4: 716855.283 us/op
Iteration   5: 740637.891 us/op
Iteration   6: 699674.507 us/op
Iteration   7: 745146.270 us/op
Iteration   8: 727538.568 us/op
Iteration   9: 720967.184 us/op
Iteration  10: 734185.824 us/op
Iteration  11: 671093.135 us/op
Iteration  12: 735776.096 us/op
Iteration  13: 734250.177 us/op
Iteration  14: 718959.593 us/op
Iteration  15: 720481.197 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  N = 15
  mean = 723646.374 ±(99.9%) 19694.190 us/op

  Histogram, us/op:
    [670000.000, 675000.000) = 1 
    [675000.000, 680000.000) = 0 
    [680000.000, 685000.000) = 0 
    [685000.000, 690000.000) = 0 
    [690000.000, 695000.000) = 0 
    [695000.000, 700000.000) = 1 
    [700000.000, 705000.000) = 0 
    [705000.000, 710000.000) = 0 
    [710000.000, 715000.000) = 0 
    [715000.000, 720000.000) = 2 
    [720000.000, 725000.000) = 3 
    [725000.000, 730000.000) = 1 
    [730000.000, 735000.000) = 4 
    [735000.000, 740000.000) = 1 
    [740000.000, 745000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 671093.135 us/op
     p(50.0000) = 727538.568 us/op
     p(90.0000) = 742441.243 us/op
     p(95.0000) = 745146.270 us/op
     p(99.0000) = 745146.270 us/op
     p(99.9000) = 745146.270 us/op
     p(99.9900) = 745146.270 us/op
     p(99.9990) = 745146.270 us/op
     p(99.9999) = 745146.270 us/op
    p(100.0000) = 745146.270 us/op


# Run complete. Total time: 08:55:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                    (iterations)  (length)     (size)    Mode      Cnt         Score        Error   Units
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A   thrpt       15         0.003 ±      0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A   thrpt       15         0.006 ±      0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A   thrpt       15         0.005 ±      0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A   thrpt       15         0.005 ±      0.001  ops/us
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A   thrpt       15        ≈ 10⁻⁷               ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A   thrpt       15         0.535 ±      0.001  ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A   thrpt       15         0.200 ±      0.001  ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A   thrpt       15         0.111 ±      0.001  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10   thrpt       15        24.863 ±      0.450  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100   thrpt       15         2.866 ±      0.044  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000   thrpt       15         0.255 ±      0.003  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10   thrpt       15        23.510 ±      0.091  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100   thrpt       15         2.583 ±      0.038  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000   thrpt       15         0.246 ±      0.003  ops/us
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A   thrpt       15         0.003 ±      0.001  ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A   thrpt       15        ≈ 10⁻⁷               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A   thrpt       15         0.001 ±      0.001  ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A   thrpt       15         1.949 ±      0.009  ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A   thrpt       15         0.001 ±      0.001  ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024    avgt       15    236213.643 ±   2016.441   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240    avgt       15    233015.131 ±    877.467   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400    avgt       15    214003.162 ±   1043.977   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576    avgt       15    212111.980 ±   1113.514   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760    avgt       15    201373.810 ±  23817.866   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600    avgt       15    208251.970 ±    661.179   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024    avgt       15   2491898.848 ±  10915.090   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240    avgt       15   1008810.300 ±   3808.798   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400    avgt       15    842799.323 ±   6200.792   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576    avgt       15    838907.608 ±   4265.185   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760    avgt       15    812741.310 ±  56097.286   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600    avgt       15    816107.130 ±   2986.656   us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A    avgt       15       382.230 ±      0.883   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A    avgt       15       169.686 ±      0.699   us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A    avgt       15       202.652 ±      0.164   us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A    avgt       15       183.997 ±      2.253   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A    avgt       15   1126330.072 ±   3205.430   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A    avgt       15   1813052.954 ±  52125.316   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A    avgt       15  17487054.639 ± 187266.792   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A    avgt       15         1.871 ±      0.001   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A    avgt       15         5.469 ±      0.011   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A    avgt       15         9.672 ±      0.024   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10    avgt       15         0.040 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100    avgt       15         0.348 ±      0.002   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000    avgt       15         3.966 ±      0.044   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10    avgt       15         0.045 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100    avgt       15         0.388 ±      0.004   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000    avgt       15         4.022 ±      0.068   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A    avgt       15     14484.517 ±     16.491   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A    avgt       15       354.089 ±      1.073   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A    avgt       15     35792.586 ±    150.630   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A    avgt       15   3648633.170 ±  20848.149   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A    avgt       15      1901.314 ±      3.930   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A    avgt       15     46960.295 ±     24.533   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A    avgt       15   1716458.398 ±   1265.367   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A    avgt       15         0.525 ±      0.002   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A    avgt       15      8370.007 ±      8.674   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A    avgt       15     35081.767 ±   2129.811   us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A    avgt       15     29001.710 ±    571.226   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A    avgt       15     21958.967 ±    169.929   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A    avgt       15     13640.329 ±     30.762   us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A    avgt       15     32446.662 ±   1170.215   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A    avgt       15      1315.098 ±      7.475   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A    avgt       15     13817.979 ±    141.417   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A    avgt       15    328095.921 ± 200296.869   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A    avgt       15    785850.140 ±   3747.488   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024  sample      643    235756.740 ±    941.158   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A       1024  sample             219676.672                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A       1024  sample             235143.168                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A       1024  sample             245157.069                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A       1024  sample             250032.947                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A       1024  sample             256439.747                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A       1024  sample             266600.448                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A       1024  sample             266600.448                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A       1024  sample             266600.448                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240  sample      649    232896.162 ±    711.892   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A      10240  sample             223870.976                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A      10240  sample             231473.152                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A      10240  sample             240648.192                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A      10240  sample             243793.920                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A      10240  sample             248905.728                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A      10240  sample             266600.448                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A      10240  sample             266600.448                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A      10240  sample             266600.448                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400  sample      706    214056.542 ±    685.607   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A     102400  sample             201588.736                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A     102400  sample             212598.784                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A     102400  sample             221249.536                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A     102400  sample             226230.272                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A     102400  sample             233722.348                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A     102400  sample             236191.744                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A     102400  sample             236191.744                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A     102400  sample             236191.744                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576  sample      714    212154.902 ±    690.450   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A    1048576  sample             203948.032                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A    1048576  sample             210763.776                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A    1048576  sample             219414.528                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A    1048576  sample             223346.688                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A    1048576  sample             233229.517                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A    1048576  sample             238026.752                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A    1048576  sample             238026.752                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A    1048576  sample             238026.752                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760  sample      764    198947.052 ±   2832.050   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A   10485760  sample             150732.800                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A   10485760  sample             208928.768                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A   10485760  sample             217841.664                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A   10485760  sample             221446.144                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A   10485760  sample             228419.174                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A   10485760  sample             238813.184                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A   10485760  sample             238813.184                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A   10485760  sample             238813.184                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600  sample      724    208947.958 ±    724.523   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A  104857600  sample             198705.152                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A  104857600  sample             207355.904                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A  104857600  sample             216793.088                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A  104857600  sample             220725.248                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A  104857600  sample             230096.896                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A  104857600  sample             244056.064                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A  104857600  sample             244056.064                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A  104857600  sample             244056.064                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024  sample       69   2495124.584 ±  23978.502   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A       1024  sample            2361393.152                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A       1024  sample            2516582.400                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A       1024  sample            2541748.224                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A       1024  sample            2554331.136                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A       1024  sample            2571108.352                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A       1024  sample            2571108.352                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A       1024  sample            2571108.352                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A       1024  sample            2571108.352                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240  sample      163   1014088.786 ±  39586.449   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A      10240  sample             792723.456                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A      10240  sample            1024458.752                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A      10240  sample            1226833.920                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A      10240  sample            1233125.376                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A      10240  sample            1262401.618                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A      10240  sample            1277165.568                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A      10240  sample            1277165.568                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A      10240  sample            1277165.568                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400  sample      191    841034.811 ±  28576.142   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A     102400  sample             703594.496                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A     102400  sample             792723.456                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A     102400  sample            1085066.445                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A     102400  sample            1101004.800                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A     102400  sample            1120046.940                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A     102400  sample            1121976.320                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A     102400  sample            1121976.320                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A     102400  sample            1121976.320                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576  sample      184    836592.685 ±  25547.646   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A    1048576  sample             689963.008                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A    1048576  sample             818937.856                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A    1048576  sample             999817.216                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A    1048576  sample            1038352.384                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A    1048576  sample            1069023.232                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A    1048576  sample            1077936.128                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A    1048576  sample            1077936.128                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A    1048576  sample            1077936.128                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760  sample      194    804387.513 ±  30374.301   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A   10485760  sample             605028.352                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A   10485760  sample             803733.504                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A   10485760  sample             966787.072                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A   10485760  sample            1017380.864                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A   10485760  sample            1034315.366                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A   10485760  sample            1042284.544                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A   10485760  sample            1042284.544                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A   10485760  sample            1042284.544                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600  sample      197    809154.695 ±  25896.443   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A  104857600  sample             554696.704                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A  104857600  sample             817889.280                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A  104857600  sample             947912.704                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A  104857600  sample             963851.059                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A  104857600  sample             982578.627                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A  104857600  sample             985661.440                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A  104857600  sample             985661.440                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A  104857600  sample             985661.440                us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A  sample   392499       381.777 ±      0.112   us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.00                                                                        N/A       N/A        N/A  sample                370.176                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.50                                                                        N/A       N/A        N/A  sample                377.344                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.90                                                                        N/A       N/A        N/A  sample                394.752                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.95                                                                        N/A       N/A        N/A  sample                402.944                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.99                                                                        N/A       N/A        N/A  sample                434.688                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.999                                                                       N/A       N/A        N/A  sample                618.496                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.9999                                                                      N/A       N/A        N/A  sample                735.232                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p1.00                                                                        N/A       N/A        N/A  sample               3088.384                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A  sample   883556       169.481 ±      0.058   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.00                                                        N/A       N/A        N/A  sample                159.488                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.50                                                        N/A       N/A        N/A  sample                167.168                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.90                                                        N/A       N/A        N/A  sample                175.872                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.95                                                        N/A       N/A        N/A  sample                182.784                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.99                                                        N/A       N/A        N/A  sample                199.424                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.999                                                       N/A       N/A        N/A  sample                391.680                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.9999                                                      N/A       N/A        N/A  sample                495.946                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p1.00                                                        N/A       N/A        N/A  sample               4620.288                us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A  sample   495758       302.234 ±      0.076   us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.00                                                                        N/A       N/A        N/A  sample                296.960                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.50                                                                        N/A       N/A        N/A  sample                299.520                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.90                                                                        N/A       N/A        N/A  sample                307.712                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.95                                                                        N/A       N/A        N/A  sample                312.832                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.99                                                                        N/A       N/A        N/A  sample                348.160                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.999                                                                       N/A       N/A        N/A  sample                489.984                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.9999                                                                      N/A       N/A        N/A  sample                625.943                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p1.00                                                                        N/A       N/A        N/A  sample               3411.968                us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A  sample   816807       183.361 ±      0.067   us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.00                                                                      N/A       N/A        N/A  sample                163.840                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.50                                                                      N/A       N/A        N/A  sample                180.480                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.90                                                                      N/A       N/A        N/A  sample                191.488                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.95                                                                      N/A       N/A        N/A  sample                199.936                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.99                                                                      N/A       N/A        N/A  sample                224.256                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.999                                                                     N/A       N/A        N/A  sample                415.842                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.9999                                                                    N/A       N/A        N/A  sample                520.867                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p1.00                                                                      N/A       N/A        N/A  sample               6569.984                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A  sample      135   1150994.690 ±    990.430   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.00                                          N/A       N/A        N/A  sample            1142947.840                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.50                                          N/A       N/A        N/A  sample            1151336.448                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.90                                          N/A       N/A        N/A  sample            1155530.752                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.95                                          N/A       N/A        N/A  sample            1155530.752                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.99                                          N/A       N/A        N/A  sample            1158970.081                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.999                                         N/A       N/A        N/A  sample            1159725.056                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.9999                                        N/A       N/A        N/A  sample            1159725.056                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p1.00                                          N/A       N/A        N/A  sample            1159725.056                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A  sample       90   1883778.435 ±  13803.776   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.00                                  N/A       100        N/A  sample            1803550.720                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.50                                  N/A       100        N/A  sample            1879048.192                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.90                                  N/A       100        N/A  sample            1933154.714                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.95                                  N/A       100        N/A  sample            1957376.819                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.99                                  N/A       100        N/A  sample            1975517.184                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.999                                 N/A       100        N/A  sample            1975517.184                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.9999                                N/A       100        N/A  sample            1975517.184                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p1.00                                  N/A       100        N/A  sample            1975517.184                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A  sample       15  16489766.366 ± 194345.239   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.00                                  N/A      1000        N/A  sample           16206790.656                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.50                                  N/A      1000        N/A  sample           16492003.328                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.90                                  N/A      1000        N/A  sample           16763794.227                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.95                                  N/A      1000        N/A  sample           16844324.864                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.99                                  N/A      1000        N/A  sample           16844324.864                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.999                                 N/A      1000        N/A  sample           16844324.864                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.9999                                N/A      1000        N/A  sample           16844324.864                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p1.00                                  N/A      1000        N/A  sample           16844324.864                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A  sample  4953811         1.934 ±      0.003   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                                521       N/A        N/A  sample                  1.856                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                                521       N/A        N/A  sample                  1.880                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                                521       N/A        N/A  sample                  1.894                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                                521       N/A        N/A  sample                  1.900                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                                521       N/A        N/A  sample                  2.088                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                               521       N/A        N/A  sample                 12.128                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                              521       N/A        N/A  sample                107.678                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                                521       N/A        N/A  sample                388.608                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A  sample  3551042         5.326 ±      0.006   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                               1153       N/A        N/A  sample                  5.040                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                               1153       N/A        N/A  sample                  5.200                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                               1153       N/A        N/A  sample                  5.296                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                               1153       N/A        N/A  sample                  5.320                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                               1153       N/A        N/A  sample                  6.120                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                              1153       N/A        N/A  sample                 20.096                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                             1153       N/A        N/A  sample                165.888                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                               1153       N/A        N/A  sample               3878.912                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A  sample  4142225         9.071 ±      0.006   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                               2021       N/A        N/A  sample                  8.592                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                               2021       N/A        N/A  sample                  8.880                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                               2021       N/A        N/A  sample                  9.008                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                               2021       N/A        N/A  sample                  9.056                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                               2021       N/A        N/A  sample                 13.760                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                              2021       N/A        N/A  sample                 28.320                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                             2021       N/A        N/A  sample                193.223                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                               2021       N/A        N/A  sample               2498.560                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10  sample  4977078         0.098 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A         10  sample                  0.076                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A         10  sample                  0.083                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A         10  sample                  0.111                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A         10  sample                  0.117                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A         10  sample                  0.126                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A         10  sample                  0.261                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A         10  sample                 10.261                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A         10  sample                365.568                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100  sample  3276316         0.416 ±      0.004   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A        100  sample                  0.369                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A        100  sample                  0.385                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A        100  sample                  0.399                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A        100  sample                  0.407                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A        100  sample                  0.437                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A        100  sample                  6.253                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A        100  sample                 25.120                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A        100  sample               3780.608                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000  sample  4235794         4.474 ±      0.005   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A       1000  sample                  4.200                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A       1000  sample                  4.360                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A       1000  sample                  4.456                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A       1000  sample                  4.480                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A       1000  sample                  6.008                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A       1000  sample                 19.008                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A       1000  sample                181.760                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A       1000  sample                458.240                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10  sample  5497065         0.099 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A         10  sample                  0.074                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A         10  sample                  0.088                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A         10  sample                  0.114                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A         10  sample                  0.117                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A         10  sample                  0.121                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A         10  sample                  0.249                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A         10  sample                 10.197                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A         10  sample                272.896                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100  sample  3762422         0.446 ±      0.002   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A        100  sample                  0.404                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A        100  sample                  0.419                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A        100  sample                  0.432                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A        100  sample                  0.439                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A        100  sample                  0.464                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A        100  sample                  5.768                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A        100  sample                 24.377                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A        100  sample                396.800                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000  sample  4171178         4.545 ±      0.006   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A       1000  sample                  4.336                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A       1000  sample                  4.432                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A       1000  sample                  4.488                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A       1000  sample                  4.504                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A       1000  sample                  6.008                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A       1000  sample                 19.546                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A       1000  sample                175.872                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A       1000  sample               3489.792                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A  sample    10343     14501.609 ±      5.113   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.00                                  N/A       N/A        N/A  sample              14336.000                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.50                                  N/A       N/A        N/A  sample              14450.688                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.90                                  N/A       N/A        N/A  sample              14663.680                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.95                                  N/A       N/A        N/A  sample              14745.600                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.99                                  N/A       N/A        N/A  sample              15007.744                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.999                                 N/A       N/A        N/A  sample              15345.648                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.9999                                N/A       N/A        N/A  sample              20578.461                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p1.00                                  N/A       N/A        N/A  sample              20643.840                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A  sample   422725       354.425 ±      1.303   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A       100        N/A  sample                330.240                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A       100        N/A  sample                342.016                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A       100        N/A  sample                361.472                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A       100        N/A  sample                370.688                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A       100        N/A  sample                448.512                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A       100        N/A  sample               3317.760                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A       100        N/A  sample              11287.095                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A       100        N/A  sample              32505.856                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A  sample     4188     35852.120 ±    133.959   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A      1000        N/A  sample              34275.328                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A      1000        N/A  sample              34865.152                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A      1000        N/A  sample              38600.704                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A      1000        N/A  sample              40697.856                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A      1000        N/A  sample              47389.737                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A      1000        N/A  sample              55774.740                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A      1000        N/A  sample              64552.960                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A      1000        N/A  sample              64552.960                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A  sample       45   3643731.695 ±  17449.692   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A     10000        N/A  sample            3581935.616                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A     10000        N/A  sample            3644850.176                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A     10000        N/A  sample            3684276.634                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A     10000        N/A  sample            3702731.571                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A     10000        N/A  sample            3737124.864                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A     10000        N/A  sample            3737124.864                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A     10000        N/A  sample            3737124.864                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A     10000        N/A  sample            3737124.864                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A  sample    71069      2108.918 ±      2.384   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.00             N/A       N/A        N/A  sample               1859.584                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.50             N/A       N/A        N/A  sample               2240.512                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.90             N/A       N/A        N/A  sample               2285.568                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.95             N/A       N/A        N/A  sample               2301.952                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.99             N/A       N/A        N/A  sample               2465.792                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.999            N/A       N/A        N/A  sample               2690.785                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.9999           N/A       N/A        N/A  sample               3031.208                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p1.00             N/A       N/A        N/A  sample               6144.000                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A  sample     3197     46968.772 ±     13.081   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.00                     N/A       N/A        N/A  sample              46661.632                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.50                     N/A       N/A        N/A  sample              46923.776                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.90                     N/A       N/A        N/A  sample              47251.456                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.95                     N/A       N/A        N/A  sample              47382.528                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.99                     N/A       N/A        N/A  sample              47644.672                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.999                    N/A       N/A        N/A  sample              49100.095                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.9999                   N/A       N/A        N/A  sample              51511.296                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p1.00                     N/A       N/A        N/A  sample              51511.296                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A  sample       90   1715283.922 ±   1153.659   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.00                                                 N/A       N/A        N/A  sample            1709178.880                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.50                                                 N/A       N/A        N/A  sample            1715470.336                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.90                                                 N/A       N/A        N/A  sample            1719664.640                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.95                                                 N/A       N/A        N/A  sample            1720608.358                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.99                                                 N/A       N/A        N/A  sample            1725956.096                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.999                                                N/A       N/A        N/A  sample            1725956.096                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.9999                                               N/A       N/A        N/A  sample            1725956.096                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p1.00                                                 N/A       N/A        N/A  sample            1725956.096                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A  sample  4550049         0.575 ±      0.002   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.00                       N/A       N/A        N/A  sample                  0.489                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.50                       N/A       N/A        N/A  sample                  0.549                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.90                       N/A       N/A        N/A  sample                  0.572                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.95                       N/A       N/A        N/A  sample                  0.580                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.99                       N/A       N/A        N/A  sample                  0.620                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.999                      N/A       N/A        N/A  sample                  5.912                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.9999                     N/A       N/A        N/A  sample                 22.816                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p1.00                       N/A       N/A        N/A  sample                431.104                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A  sample    17940      8358.468 ±      2.350   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.00                                   N/A       N/A        N/A  sample               8069.120                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.50                                   N/A       N/A        N/A  sample               8323.072                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.90                                   N/A       N/A        N/A  sample               8470.528                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.95                                   N/A       N/A        N/A  sample               8519.680                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.99                                   N/A       N/A        N/A  sample               8716.288                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.999                                  N/A       N/A        N/A  sample               8978.432                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.9999                                 N/A       N/A        N/A  sample              10591.353                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p1.00                                   N/A       N/A        N/A  sample              13336.576                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A  sample     4320     34749.577 ±    123.901   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.00                                             N/A       N/A        N/A  sample              31424.512                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.50                                             N/A       N/A        N/A  sample              34144.256                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.90                                             N/A       N/A        N/A  sample              38273.024                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.95                                             N/A       N/A        N/A  sample              38469.632                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.99                                             N/A       N/A        N/A  sample              38980.157                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.999                                            N/A       N/A        N/A  sample              49262.821                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.9999                                           N/A       N/A        N/A  sample              56819.712                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p1.00                                             N/A       N/A        N/A  sample              56819.712                us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A  sample     5207     28839.968 ±    669.226   us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.00                                                              N/A       N/A        N/A  sample              23953.408                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.50                                                              N/A       N/A        N/A  sample              24346.624                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.90                                                              N/A       N/A        N/A  sample              37748.736                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.95                                                              N/A       N/A        N/A  sample              72325.530                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.99                                                              N/A       N/A        N/A  sample              95105.843                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.999                                                             N/A       N/A        N/A  sample             114841.092                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.9999                                                            N/A       N/A        N/A  sample             120061.952                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p1.00                                                              N/A       N/A        N/A  sample             120061.952                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A  sample     6755     22204.761 ±    295.570   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.00                                                            N/A       N/A        N/A  sample              19431.424                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.50                                                            N/A       N/A        N/A  sample              20054.016                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.90                                                            N/A       N/A        N/A  sample              22020.096                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.95                                                            N/A       N/A        N/A  sample              40842.035                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.99                                                            N/A       N/A        N/A  sample              57933.824                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.999                                                           N/A       N/A        N/A  sample              63552.356                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.9999                                                          N/A       N/A        N/A  sample              67502.080                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p1.00                                                            N/A       N/A        N/A  sample              67502.080                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A  sample    10945     13701.109 ±     34.827   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.00                                                                N/A       N/A        N/A  sample              13221.888                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.50                                                                N/A       N/A        N/A  sample              13533.184                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.90                                                                N/A       N/A        N/A  sample              13795.328                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.95                                                                N/A       N/A        N/A  sample              13975.552                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.99                                                                N/A       N/A        N/A  sample              18629.919                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.999                                                               N/A       N/A        N/A  sample              27951.104                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.9999                                                              N/A       N/A        N/A  sample              41890.782                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p1.00                                                                N/A       N/A        N/A  sample              42008.576                us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A  sample     4573     32858.479 ±     73.652   us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.00                                                                      N/A       N/A        N/A  sample              30670.848                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.50                                                                      N/A       N/A        N/A  sample              32604.160                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.90                                                                      N/A       N/A        N/A  sample              34013.184                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.95                                                                      N/A       N/A        N/A  sample              34209.792                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.99                                                                      N/A       N/A        N/A  sample              38324.142                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.999                                                                     N/A       N/A        N/A  sample              47343.731                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.9999                                                                    N/A       N/A        N/A  sample              71041.024                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p1.00                                                                      N/A       N/A        N/A  sample              71041.024                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A  sample   113180      1324.118 ±      7.440   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A        10        N/A  sample               1124.352                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A        10        N/A  sample               1249.280                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A        10        N/A  sample               1316.864                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A        10        N/A  sample               1349.632                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A        10        N/A  sample               3772.416                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A        10        N/A  sample              12134.613                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A        10        N/A  sample              23427.681                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A        10        N/A  sample              29392.896                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A  sample    10883     13779.382 ±     71.804   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A       100        N/A  sample              12173.312                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A       100        N/A  sample              13107.200                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A       100        N/A  sample              15794.176                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A       100        N/A  sample              17432.576                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A       100        N/A  sample              23800.054                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A       100        N/A  sample              33912.521                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A       100        N/A  sample              40278.557                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A       100        N/A  sample              40828.928                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A  sample      553    274252.872 ±  17797.970   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A      1000        N/A  sample             229900.288                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A      1000        N/A  sample             238288.896                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A      1000        N/A  sample             252968.960                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A      1000        N/A  sample             721420.288                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A      1000        N/A  sample             738197.504                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A      1000        N/A  sample             747634.688                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A      1000        N/A  sample             747634.688                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A      1000        N/A  sample             747634.688                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A  sample      195    790905.924 ±   6368.880   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.00                        N/A       N/A        N/A  sample             716177.408                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.50                        N/A       N/A        N/A  sample             793772.032                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.90                        N/A       N/A        N/A  sample             824600.166                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.95                        N/A       N/A        N/A  sample             830472.192                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.99                        N/A       N/A        N/A  sample             844271.452                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.999                       N/A       N/A        N/A  sample             848297.984                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.9999                      N/A       N/A        N/A  sample             848297.984                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p1.00                        N/A       N/A        N/A  sample             848297.984                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024      ss       15    234479.126 ±   7349.558   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240      ss       15    228568.209 ±   3239.478   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400      ss       15    203425.956 ±  21224.870   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576      ss       15    209972.344 ±   2923.230   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760      ss       15    209003.643 ±   3933.751   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600      ss       15    212030.262 ±   8790.492   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024      ss       15   2426835.996 ±  23525.770   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240      ss       15    796629.414 ±  11428.863   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400      ss       15    733166.690 ±  10129.309   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576      ss       15    717421.407 ±  13493.587   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760      ss       15   1011577.143 ±  17858.981   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600      ss       15    816129.548 ±   9372.985   us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A      ss       15       558.681 ±     18.441   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A      ss       15       347.903 ±     23.023   us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A      ss       15       371.076 ±      9.999   us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A      ss       15       444.824 ±     15.644   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A      ss       15   1188567.950 ±   5698.465   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A      ss       15    891571.031 ±  10061.049   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A      ss       15  19902436.458 ± 255400.750   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A      ss       15        12.818 ±      1.002   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A      ss       15        24.837 ±     40.742   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A      ss       15        25.556 ±     19.716   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10      ss       15        12.558 ±     26.627   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100      ss       15        17.825 ±      8.376   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000      ss       15       108.520 ±     43.499   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10      ss       15         6.465 ±      0.698   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100      ss       15        16.475 ±      4.632   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000      ss       15       106.976 ±     48.865   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A      ss       15     14830.376 ±    470.006   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A      ss       15      1760.979 ±   1894.073   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A      ss       15     87446.947 ±  34535.336   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A      ss       15  11173648.673 ±  27083.606   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A      ss       15      1913.243 ±     17.862   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A      ss       15     47058.031 ±    149.147   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A      ss       15   1716124.573 ±   3225.776   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A      ss       15        12.733 ±      2.855   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A      ss       15      8803.883 ±     89.517   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A      ss       15     34295.001 ±   2712.985   us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A      ss       15     24516.024 ±    127.674   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A      ss       15     20240.735 ±    474.403   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A      ss       15     14194.242 ±    172.483   us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A      ss       15     34548.310 ±   1422.511   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A      ss       15      6654.772 ±    127.272   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A      ss       15     63247.284 ±    495.644   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A      ss       15    728337.676 ±  11491.027   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A      ss       15    723646.374 ±  19694.190   us/op
