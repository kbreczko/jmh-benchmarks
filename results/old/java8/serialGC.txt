# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 0.00% complete, ETA 07:40:00
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 0.72% complete, ETA 08:19:58
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 1.45% complete, ETA 08:13:59
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 2.17% complete, ETA 08:09:14
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 2.90% complete, ETA 08:04:20
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 3.62% complete, ETA 08:00:03
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 4.35% complete, ETA 07:56:09
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 5.07% complete, ETA 07:59:43
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 5.80% complete, ETA 07:56:35
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 6.52% complete, ETA 07:53:40
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 7.25% complete, ETA 07:50:16
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 7.97% complete, ETA 07:47:16
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 8.70% complete, ETA 07:43:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ops/us
# Warmup Iteration   2: 0.003 ops/us
# Warmup Iteration   3: 0.003 ops/us
# Warmup Iteration   4: 0.003 ops/us
# Warmup Iteration   5: 0.003 ops/us
Iteration   1: 0.003 ops/us
Iteration   2: 0.003 ops/us
Iteration   3: 0.003 ops/us
Iteration   4: 0.003 ops/us
Iteration   5: 0.003 ops/us
Iteration   6: 0.003 ops/us
Iteration   7: 0.003 ops/us
Iteration   8: 0.003 ops/us
Iteration   9: 0.003 ops/us
Iteration  10: 0.003 ops/us
Iteration  11: 0.003 ops/us
Iteration  12: 0.003 ops/us
Iteration  13: 0.003 ops/us
Iteration  14: 0.003 ops/us
Iteration  15: 0.003 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  0.003 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 9.42% complete, ETA 07:38:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ops/us
# Warmup Iteration   2: 0.006 ops/us
# Warmup Iteration   3: 0.006 ops/us
# Warmup Iteration   4: 0.006 ops/us
# Warmup Iteration   5: 0.006 ops/us
Iteration   1: 0.006 ops/us
Iteration   2: 0.006 ops/us
Iteration   3: 0.006 ops/us
Iteration   4: 0.006 ops/us
Iteration   5: 0.006 ops/us
Iteration   6: 0.006 ops/us
Iteration   7: 0.006 ops/us
Iteration   8: 0.006 ops/us
Iteration   9: 0.006 ops/us
Iteration  10: 0.006 ops/us
Iteration  11: 0.006 ops/us
Iteration  12: 0.006 ops/us
Iteration  13: 0.006 ops/us
Iteration  14: 0.006 ops/us
Iteration  15: 0.006 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  0.006 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.006] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 10.14% complete, ETA 07:34:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ops/us
# Warmup Iteration   2: 0.005 ops/us
# Warmup Iteration   3: 0.004 ops/us
# Warmup Iteration   4: 0.003 ops/us
# Warmup Iteration   5: 0.003 ops/us
Iteration   1: 0.003 ops/us
Iteration   2: 0.003 ops/us
Iteration   3: 0.003 ops/us
Iteration   4: 0.003 ops/us
Iteration   5: 0.003 ops/us
Iteration   6: 0.003 ops/us
Iteration   7: 0.003 ops/us
Iteration   8: 0.003 ops/us
Iteration   9: 0.003 ops/us
Iteration  10: 0.003 ops/us
Iteration  11: 0.003 ops/us
Iteration  12: 0.003 ops/us
Iteration  13: 0.003 ops/us
Iteration  14: 0.003 ops/us
Iteration  15: 0.003 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  0.003 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 10.87% complete, ETA 07:29:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ops/us
# Warmup Iteration   2: 0.005 ops/us
# Warmup Iteration   3: 0.005 ops/us
# Warmup Iteration   4: 0.005 ops/us
# Warmup Iteration   5: 0.005 ops/us
Iteration   1: 0.005 ops/us
Iteration   2: 0.005 ops/us
Iteration   3: 0.005 ops/us
Iteration   4: 0.005 ops/us
Iteration   5: 0.005 ops/us
Iteration   6: 0.005 ops/us
Iteration   7: 0.005 ops/us
Iteration   8: 0.005 ops/us
Iteration   9: 0.005 ops/us
Iteration  10: 0.005 ops/us
Iteration  11: 0.005 ops/us
Iteration  12: 0.005 ops/us
Iteration  13: 0.005 ops/us
Iteration  14: 0.005 ops/us
Iteration  15: 0.005 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  0.005 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.005, 0.005] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 11.59% complete, ETA 07:25:30
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 12.32% complete, ETA 07:22:56
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 13.04% complete, ETA 07:20:45
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁷ ops/us
# Warmup Iteration   2: ≈ 10⁻⁷ ops/us
# Warmup Iteration   3: ≈ 10⁻⁷ ops/us
# Warmup Iteration   4: ≈ 10⁻⁷ ops/us
# Warmup Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   1: ≈ 10⁻⁷ ops/us
Iteration   2: ≈ 10⁻⁷ ops/us
Iteration   3: ≈ 10⁻⁷ ops/us
Iteration   4: ≈ 10⁻⁷ ops/us
Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   6: ≈ 10⁻⁷ ops/us
Iteration   7: ≈ 10⁻⁷ ops/us
Iteration   8: ≈ 10⁻⁷ ops/us
Iteration   9: ≈ 10⁻⁷ ops/us
Iteration  10: ≈ 10⁻⁷ ops/us
Iteration  11: ≈ 10⁻⁷ ops/us
Iteration  12: ≈ 10⁻⁷ ops/us
Iteration  13: ≈ 10⁻⁷ ops/us
Iteration  14: ≈ 10⁻⁷ ops/us
Iteration  15: ≈ 10⁻⁷ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  ≈ 10⁻⁷ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 13.77% complete, ETA 07:36:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.533 ops/us
# Warmup Iteration   2: 0.533 ops/us
# Warmup Iteration   3: 0.535 ops/us
# Warmup Iteration   4: 0.534 ops/us
# Warmup Iteration   5: 0.535 ops/us
Iteration   1: 0.535 ops/us
Iteration   2: 0.534 ops/us
Iteration   3: 0.535 ops/us
Iteration   4: 0.535 ops/us
Iteration   5: 0.535 ops/us
Iteration   6: 0.535 ops/us
Iteration   7: 0.535 ops/us
Iteration   8: 0.535 ops/us
Iteration   9: 0.535 ops/us
Iteration  10: 0.535 ops/us
Iteration  11: 0.534 ops/us
Iteration  12: 0.534 ops/us
Iteration  13: 0.533 ops/us
Iteration  14: 0.535 ops/us
Iteration  15: 0.535 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.535 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.533, 0.535, 0.535), stdev = 0.001
  CI (99.9%): [0.534, 0.535] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 14.49% complete, ETA 07:30:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.199 ops/us
# Warmup Iteration   2: 0.200 ops/us
# Warmup Iteration   3: 0.200 ops/us
# Warmup Iteration   4: 0.199 ops/us
# Warmup Iteration   5: 0.200 ops/us
Iteration   1: 0.199 ops/us
Iteration   2: 0.200 ops/us
Iteration   3: 0.200 ops/us
Iteration   4: 0.200 ops/us
Iteration   5: 0.200 ops/us
Iteration   6: 0.200 ops/us
Iteration   7: 0.200 ops/us
Iteration   8: 0.200 ops/us
Iteration   9: 0.200 ops/us
Iteration  10: 0.199 ops/us
Iteration  11: 0.200 ops/us
Iteration  12: 0.200 ops/us
Iteration  13: 0.201 ops/us
Iteration  14: 0.200 ops/us
Iteration  15: 0.199 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.200 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.199, 0.200, 0.201), stdev = 0.001
  CI (99.9%): [0.199, 0.200] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 15.22% complete, ETA 07:25:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.111 ops/us
# Warmup Iteration   2: 0.111 ops/us
# Warmup Iteration   3: 0.111 ops/us
# Warmup Iteration   4: 0.111 ops/us
# Warmup Iteration   5: 0.111 ops/us
Iteration   1: 0.111 ops/us
Iteration   2: 0.111 ops/us
Iteration   3: 0.111 ops/us
Iteration   4: 0.111 ops/us
Iteration   5: 0.111 ops/us
Iteration   6: 0.111 ops/us
Iteration   7: 0.111 ops/us
Iteration   8: 0.111 ops/us
Iteration   9: 0.111 ops/us
Iteration  10: 0.111 ops/us
Iteration  11: 0.111 ops/us
Iteration  12: 0.111 ops/us
Iteration  13: 0.111 ops/us
Iteration  14: 0.112 ops/us
Iteration  15: 0.111 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  0.111 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.111, 0.111, 0.112), stdev = 0.001
  CI (99.9%): [0.111, 0.111] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 15.94% complete, ETA 07:20:30
# Fork: 1 of 1
# Warmup Iteration   1: 19.321 ops/us
# Warmup Iteration   2: 26.838 ops/us
# Warmup Iteration   3: 25.118 ops/us
# Warmup Iteration   4: 25.127 ops/us
# Warmup Iteration   5: 25.115 ops/us
Iteration   1: 25.111 ops/us
Iteration   2: 25.106 ops/us
Iteration   3: 25.118 ops/us
Iteration   4: 25.057 ops/us
Iteration   5: 25.121 ops/us
Iteration   6: 25.126 ops/us
Iteration   7: 25.105 ops/us
Iteration   8: 25.121 ops/us
Iteration   9: 25.128 ops/us
Iteration  10: 25.132 ops/us
Iteration  11: 24.213 ops/us
Iteration  12: 25.120 ops/us
Iteration  13: 25.126 ops/us
Iteration  14: 25.096 ops/us
Iteration  15: 25.120 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  25.053 ±(99.9%) 0.249 ops/us [Average]
  (min, avg, max) = (24.213, 25.053, 25.132), stdev = 0.233
  CI (99.9%): [24.804, 25.303] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 16.67% complete, ETA 07:15:33
# Fork: 1 of 1
# Warmup Iteration   1: 2.606 ops/us
# Warmup Iteration   2: 2.349 ops/us
# Warmup Iteration   3: 2.821 ops/us
# Warmup Iteration   4: 2.890 ops/us
# Warmup Iteration   5: 2.874 ops/us
Iteration   1: 2.858 ops/us
Iteration   2: 2.861 ops/us
Iteration   3: 2.872 ops/us
Iteration   4: 2.835 ops/us
Iteration   5: 2.825 ops/us
Iteration   6: 2.860 ops/us
Iteration   7: 2.878 ops/us
Iteration   8: 2.785 ops/us
Iteration   9: 2.889 ops/us
Iteration  10: 2.859 ops/us
Iteration  11: 2.823 ops/us
Iteration  12: 2.878 ops/us
Iteration  13: 2.892 ops/us
Iteration  14: 2.862 ops/us
Iteration  15: 2.887 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  2.857 ±(99.9%) 0.031 ops/us [Average]
  (min, avg, max) = (2.785, 2.857, 2.892), stdev = 0.029
  CI (99.9%): [2.826, 2.889] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 17.39% complete, ETA 07:10:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.223 ops/us
# Warmup Iteration   2: 0.243 ops/us
# Warmup Iteration   3: 0.249 ops/us
# Warmup Iteration   4: 0.252 ops/us
# Warmup Iteration   5: 0.253 ops/us
Iteration   1: 0.257 ops/us
Iteration   2: 0.254 ops/us
Iteration   3: 0.248 ops/us
Iteration   4: 0.247 ops/us
Iteration   5: 0.256 ops/us
Iteration   6: 0.251 ops/us
Iteration   7: 0.251 ops/us
Iteration   8: 0.252 ops/us
Iteration   9: 0.247 ops/us
Iteration  10: 0.256 ops/us
Iteration  11: 0.255 ops/us
Iteration  12: 0.257 ops/us
Iteration  13: 0.246 ops/us
Iteration  14: 0.254 ops/us
Iteration  15: 0.258 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.253 ±(99.9%) 0.004 ops/us [Average]
  (min, avg, max) = (0.246, 0.253, 0.258), stdev = 0.004
  CI (99.9%): [0.248, 0.257] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 18.12% complete, ETA 07:05:58
# Fork: 1 of 1
# Warmup Iteration   1: 22.550 ops/us
# Warmup Iteration   2: 19.438 ops/us
# Warmup Iteration   3: 23.534 ops/us
# Warmup Iteration   4: 23.547 ops/us
# Warmup Iteration   5: 22.540 ops/us
Iteration   1: 23.555 ops/us
Iteration   2: 21.868 ops/us
Iteration   3: 23.546 ops/us
Iteration   4: 23.560 ops/us
Iteration   5: 23.539 ops/us
Iteration   6: 23.574 ops/us
Iteration   7: 23.559 ops/us
Iteration   8: 23.538 ops/us
Iteration   9: 23.571 ops/us
Iteration  10: 23.551 ops/us
Iteration  11: 23.551 ops/us
Iteration  12: 23.536 ops/us
Iteration  13: 22.572 ops/us
Iteration  14: 23.554 ops/us
Iteration  15: 23.564 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  23.376 ±(99.9%) 0.522 ops/us [Average]
  (min, avg, max) = (21.868, 23.376, 23.574), stdev = 0.488
  CI (99.9%): [22.855, 23.898] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 18.84% complete, ETA 07:01:19
# Fork: 1 of 1
# Warmup Iteration   1: 2.608 ops/us
# Warmup Iteration   2: 2.375 ops/us
# Warmup Iteration   3: 3.604 ops/us
# Warmup Iteration   4: 3.601 ops/us
# Warmup Iteration   5: 3.189 ops/us
Iteration   1: 3.477 ops/us
Iteration   2: 3.356 ops/us
Iteration   3: 3.200 ops/us
Iteration   4: 3.665 ops/us
Iteration   5: 3.392 ops/us
Iteration   6: 3.277 ops/us
Iteration   7: 3.599 ops/us
Iteration   8: 3.085 ops/us
Iteration   9: 3.662 ops/us
Iteration  10: 3.388 ops/us
Iteration  11: 3.385 ops/us
Iteration  12: 3.202 ops/us
Iteration  13: 3.389 ops/us
Iteration  14: 3.178 ops/us
Iteration  15: 3.406 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  3.377 ±(99.9%) 0.186 ops/us [Average]
  (min, avg, max) = (3.085, 3.377, 3.665), stdev = 0.174
  CI (99.9%): [3.192, 3.563] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 19.56% complete, ETA 06:56:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.243 ops/us
# Warmup Iteration   2: 0.245 ops/us
# Warmup Iteration   3: 0.263 ops/us
# Warmup Iteration   4: 0.261 ops/us
# Warmup Iteration   5: 0.262 ops/us
Iteration   1: 0.265 ops/us
Iteration   2: 0.259 ops/us
Iteration   3: 0.263 ops/us
Iteration   4: 0.260 ops/us
Iteration   5: 0.263 ops/us
Iteration   6: 0.262 ops/us
Iteration   7: 0.266 ops/us
Iteration   8: 0.264 ops/us
Iteration   9: 0.268 ops/us
Iteration  10: 0.258 ops/us
Iteration  11: 0.261 ops/us
Iteration  12: 0.260 ops/us
Iteration  13: 0.256 ops/us
Iteration  14: 0.265 ops/us
Iteration  15: 0.260 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.262 ±(99.9%) 0.003 ops/us [Average]
  (min, avg, max) = (0.256, 0.262, 0.268), stdev = 0.003
  CI (99.9%): [0.259, 0.265] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 20.29% complete, ETA 06:52:15
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 21.01% complete, ETA 06:47:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ops/us
# Warmup Iteration   2: 0.003 ops/us
# Warmup Iteration   3: 0.003 ops/us
# Warmup Iteration   4: 0.003 ops/us
# Warmup Iteration   5: 0.003 ops/us
Iteration   1: 0.003 ops/us
Iteration   2: 0.003 ops/us
Iteration   3: 0.003 ops/us
Iteration   4: 0.003 ops/us
Iteration   5: 0.003 ops/us
Iteration   6: 0.003 ops/us
Iteration   7: 0.003 ops/us
Iteration   8: 0.003 ops/us
Iteration   9: 0.003 ops/us
Iteration  10: 0.003 ops/us
Iteration  11: 0.003 ops/us
Iteration  12: 0.003 ops/us
Iteration  13: 0.003 ops/us
Iteration  14: 0.003 ops/us
Iteration  15: 0.003 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  0.003 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 21.74% complete, ETA 06:43:36
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 22.46% complete, ETA 06:39:21
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁷ ops/us
# Warmup Iteration   2: ≈ 10⁻⁷ ops/us
# Warmup Iteration   3: ≈ 10⁻⁷ ops/us
# Warmup Iteration   4: ≈ 10⁻⁷ ops/us
# Warmup Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   1: ≈ 10⁻⁷ ops/us
Iteration   2: ≈ 10⁻⁷ ops/us
Iteration   3: ≈ 10⁻⁷ ops/us
Iteration   4: ≈ 10⁻⁷ ops/us
Iteration   5: ≈ 10⁻⁷ ops/us
Iteration   6: ≈ 10⁻⁷ ops/us
Iteration   7: ≈ 10⁻⁷ ops/us
Iteration   8: ≈ 10⁻⁷ ops/us
Iteration   9: ≈ 10⁻⁷ ops/us
Iteration  10: ≈ 10⁻⁷ ops/us
Iteration  11: ≈ 10⁻⁷ ops/us
Iteration  12: ≈ 10⁻⁷ ops/us
Iteration  13: ≈ 10⁻⁷ ops/us
Iteration  14: ≈ 10⁻⁷ ops/us
Iteration  15: ≈ 10⁻⁷ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  ≈ 10⁻⁷ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 23.19% complete, ETA 06:36:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ops/us
# Warmup Iteration   2: 0.001 ops/us
# Warmup Iteration   3: 0.001 ops/us
# Warmup Iteration   4: 0.001 ops/us
# Warmup Iteration   5: 0.001 ops/us
Iteration   1: 0.001 ops/us
Iteration   2: 0.001 ops/us
Iteration   3: 0.001 ops/us
Iteration   4: 0.001 ops/us
Iteration   5: 0.001 ops/us
Iteration   6: 0.001 ops/us
Iteration   7: 0.001 ops/us
Iteration   8: 0.001 ops/us
Iteration   9: 0.001 ops/us
Iteration  10: 0.001 ops/us
Iteration  11: 0.001 ops/us
Iteration  12: 0.001 ops/us
Iteration  13: 0.001 ops/us
Iteration  14: 0.001 ops/us
Iteration  15: 0.001 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  0.001 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 23.91% complete, ETA 06:31:55
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 24.64% complete, ETA 06:27:43
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 25.36% complete, ETA 06:23:49
# Fork: 1 of 1
# Warmup Iteration   1: 1.934 ops/us
# Warmup Iteration   2: 1.906 ops/us
# Warmup Iteration   3: 1.878 ops/us
# Warmup Iteration   4: 1.932 ops/us
# Warmup Iteration   5: 1.932 ops/us
Iteration   1: 1.935 ops/us
Iteration   2: 1.934 ops/us
Iteration   3: 1.930 ops/us
Iteration   4: 1.932 ops/us
Iteration   5: 1.929 ops/us
Iteration   6: 1.926 ops/us
Iteration   7: 1.933 ops/us
Iteration   8: 1.924 ops/us
Iteration   9: 1.924 ops/us
Iteration  10: 1.930 ops/us
Iteration  11: 1.930 ops/us
Iteration  12: 1.897 ops/us
Iteration  13: 1.899 ops/us
Iteration  14: 1.890 ops/us
Iteration  15: 1.896 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  1.921 ±(99.9%) 0.017 ops/us [Average]
  (min, avg, max) = (1.890, 1.921, 1.935), stdev = 0.016
  CI (99.9%): [1.903, 1.938] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 26.09% complete, ETA 06:19:38
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 26.81% complete, ETA 06:15:31
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁵ ops/us
# Warmup Iteration   3: ≈ 10⁻⁵ ops/us
# Warmup Iteration   4: ≈ 10⁻⁵ ops/us
# Warmup Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   1: ≈ 10⁻⁵ ops/us
Iteration   2: ≈ 10⁻⁵ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 27.54% complete, ETA 06:11:26
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 28.26% complete, ETA 06:07:24
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 28.98% complete, ETA 06:03:22
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 29.71% complete, ETA 05:59:20
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 30.43% complete, ETA 05:55:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ops/us
# Warmup Iteration   2: 0.001 ops/us
# Warmup Iteration   3: 0.001 ops/us
# Warmup Iteration   4: 0.001 ops/us
# Warmup Iteration   5: 0.001 ops/us
Iteration   1: 0.001 ops/us
Iteration   2: 0.001 ops/us
Iteration   3: 0.001 ops/us
Iteration   4: 0.001 ops/us
Iteration   5: 0.001 ops/us
Iteration   6: 0.001 ops/us
Iteration   7: 0.001 ops/us
Iteration   8: 0.001 ops/us
Iteration   9: 0.001 ops/us
Iteration  10: 0.001 ops/us
Iteration  11: 0.001 ops/us
Iteration  12: 0.001 ops/us
Iteration  13: 0.001 ops/us
Iteration  14: 0.001 ops/us
Iteration  15: 0.001 ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  0.001 ±(99.9%) 0.001 ops/us [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 31.16% complete, ETA 05:51:21
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ops/us
# Warmup Iteration   2: ≈ 10⁻⁴ ops/us
# Warmup Iteration   3: ≈ 10⁻⁴ ops/us
# Warmup Iteration   4: ≈ 10⁻⁴ ops/us
# Warmup Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   1: ≈ 10⁻⁴ ops/us
Iteration   2: ≈ 10⁻⁴ ops/us
Iteration   3: ≈ 10⁻⁴ ops/us
Iteration   4: ≈ 10⁻⁴ ops/us
Iteration   5: ≈ 10⁻⁴ ops/us
Iteration   6: ≈ 10⁻⁴ ops/us
Iteration   7: ≈ 10⁻⁴ ops/us
Iteration   8: ≈ 10⁻⁴ ops/us
Iteration   9: ≈ 10⁻⁴ ops/us
Iteration  10: ≈ 10⁻⁴ ops/us
Iteration  11: ≈ 10⁻⁴ ops/us
Iteration  12: ≈ 10⁻⁴ ops/us
Iteration  13: ≈ 10⁻⁴ ops/us
Iteration  14: ≈ 10⁻⁴ ops/us
Iteration  15: ≈ 10⁻⁴ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  ≈ 10⁻⁴ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 31.88% complete, ETA 05:47:22
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁵ ops/us
Iteration   4: ≈ 10⁻⁵ ops/us
Iteration   5: ≈ 10⁻⁵ ops/us
Iteration   6: ≈ 10⁻⁵ ops/us
Iteration   7: ≈ 10⁻⁵ ops/us
Iteration   8: ≈ 10⁻⁵ ops/us
Iteration   9: ≈ 10⁻⁵ ops/us
Iteration  10: ≈ 10⁻⁵ ops/us
Iteration  11: ≈ 10⁻⁵ ops/us
Iteration  12: ≈ 10⁻⁵ ops/us
Iteration  13: ≈ 10⁻⁵ ops/us
Iteration  14: ≈ 10⁻⁵ ops/us
Iteration  15: ≈ 10⁻⁵ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  ≈ 10⁻⁵ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 32.61% complete, ETA 05:43:37
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁶ ops/us
# Warmup Iteration   2: ≈ 10⁻⁶ ops/us
# Warmup Iteration   3: ≈ 10⁻⁶ ops/us
# Warmup Iteration   4: ≈ 10⁻⁶ ops/us
# Warmup Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   1: ≈ 10⁻⁶ ops/us
Iteration   2: ≈ 10⁻⁶ ops/us
Iteration   3: ≈ 10⁻⁶ ops/us
Iteration   4: ≈ 10⁻⁶ ops/us
Iteration   5: ≈ 10⁻⁶ ops/us
Iteration   6: ≈ 10⁻⁶ ops/us
Iteration   7: ≈ 10⁻⁶ ops/us
Iteration   8: ≈ 10⁻⁶ ops/us
Iteration   9: ≈ 10⁻⁶ ops/us
Iteration  10: ≈ 10⁻⁶ ops/us
Iteration  11: ≈ 10⁻⁶ ops/us
Iteration  12: ≈ 10⁻⁶ ops/us
Iteration  13: ≈ 10⁻⁶ ops/us
Iteration  14: ≈ 10⁻⁶ ops/us
Iteration  15: ≈ 10⁻⁶ ops/us


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  ≈ 10⁻⁶ ops/us


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 33.33% complete, ETA 05:39:51
# Fork: 1 of 1
# Warmup Iteration   1: 227017.359 us/op
# Warmup Iteration   2: 230412.091 us/op
# Warmup Iteration   3: 228148.733 us/op
# Warmup Iteration   4: 228916.565 us/op
# Warmup Iteration   5: 229236.006 us/op
Iteration   1: 228090.561 us/op
Iteration   2: 229708.498 us/op
Iteration   3: 228215.307 us/op
Iteration   4: 229555.247 us/op
Iteration   5: 228788.199 us/op
Iteration   6: 228165.581 us/op
Iteration   7: 227383.016 us/op
Iteration   8: 230505.749 us/op
Iteration   9: 229362.533 us/op
Iteration  10: 229500.962 us/op
Iteration  11: 230799.718 us/op
Iteration  12: 229600.242 us/op
Iteration  13: 231309.656 us/op
Iteration  14: 228930.929 us/op
Iteration  15: 229013.394 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  229261.973 ±(99.9%) 1148.851 us/op [Average]
  (min, avg, max) = (227383.016, 229261.973, 231309.656), stdev = 1074.636
  CI (99.9%): [228113.121, 230410.824] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 34.06% complete, ETA 05:35:59
# Fork: 1 of 1
# Warmup Iteration   1: 225936.321 us/op
# Warmup Iteration   2: 225965.371 us/op
# Warmup Iteration   3: 225555.953 us/op
# Warmup Iteration   4: 224418.602 us/op
# Warmup Iteration   5: 225417.947 us/op
Iteration   1: 225418.107 us/op
Iteration   2: 225528.491 us/op
Iteration   3: 225541.026 us/op
Iteration   4: 224494.496 us/op
Iteration   5: 224160.115 us/op
Iteration   6: 224568.473 us/op
Iteration   7: 225529.159 us/op
Iteration   8: 224500.833 us/op
Iteration   9: 225000.864 us/op
Iteration  10: 225326.492 us/op
Iteration  11: 224468.344 us/op
Iteration  12: 225456.670 us/op
Iteration  13: 225676.072 us/op
Iteration  14: 224999.107 us/op
Iteration  15: 225664.639 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  225088.859 ±(99.9%) 557.066 us/op [Average]
  (min, avg, max) = (224160.115, 225088.859, 225676.072), stdev = 521.080
  CI (99.9%): [224531.793, 225645.925] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 34.78% complete, ETA 05:32:09
# Fork: 1 of 1
# Warmup Iteration   1: 203598.307 us/op
# Warmup Iteration   2: 206966.327 us/op
# Warmup Iteration   3: 207410.732 us/op
# Warmup Iteration   4: 206883.446 us/op
# Warmup Iteration   5: 207064.128 us/op
Iteration   1: 207004.550 us/op
Iteration   2: 207019.627 us/op
Iteration   3: 206914.402 us/op
Iteration   4: 206594.365 us/op
Iteration   5: 207406.319 us/op
Iteration   6: 206906.606 us/op
Iteration   7: 206043.073 us/op
Iteration   8: 207040.741 us/op
Iteration   9: 206624.644 us/op
Iteration  10: 206637.602 us/op
Iteration  11: 206282.893 us/op
Iteration  12: 206994.318 us/op
Iteration  13: 206570.444 us/op
Iteration  14: 207450.332 us/op
Iteration  15: 207822.858 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  206887.518 ±(99.9%) 488.619 us/op [Average]
  (min, avg, max) = (206043.073, 206887.518, 207822.858), stdev = 457.055
  CI (99.9%): [206398.899, 207376.138] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 35.51% complete, ETA 05:28:18
# Fork: 1 of 1
# Warmup Iteration   1: 202259.289 us/op
# Warmup Iteration   2: 175993.592 us/op
# Warmup Iteration   3: 206500.500 us/op
# Warmup Iteration   4: 204707.118 us/op
# Warmup Iteration   5: 203836.226 us/op
Iteration   1: 204020.440 us/op
Iteration   2: 204510.329 us/op
Iteration   3: 203906.693 us/op
Iteration   4: 203822.170 us/op
Iteration   5: 204556.340 us/op
Iteration   6: 204747.632 us/op
Iteration   7: 205148.340 us/op
Iteration   8: 205071.077 us/op
Iteration   9: 206345.893 us/op
Iteration  10: 206163.788 us/op
Iteration  11: 205215.776 us/op
Iteration  12: 205936.918 us/op
Iteration  13: 205623.935 us/op
Iteration  14: 206077.355 us/op
Iteration  15: 205911.061 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  205137.183 ±(99.9%) 915.077 us/op [Average]
  (min, avg, max) = (203822.170, 205137.183, 206345.893), stdev = 855.964
  CI (99.9%): [204222.106, 206052.260] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 36.23% complete, ETA 05:24:27
# Fork: 1 of 1
# Warmup Iteration   1: 204809.966 us/op
# Warmup Iteration   2: 203226.211 us/op
# Warmup Iteration   3: 152755.748 us/op
# Warmup Iteration   4: 151954.313 us/op
# Warmup Iteration   5: 151631.491 us/op
Iteration   1: 151726.109 us/op
Iteration   2: 151933.094 us/op
Iteration   3: 168743.986 us/op
Iteration   4: 203298.165 us/op
Iteration   5: 204413.414 us/op
Iteration   6: 204446.853 us/op
Iteration   7: 204004.768 us/op
Iteration   8: 204352.553 us/op
Iteration   9: 205267.247 us/op
Iteration  10: 205947.771 us/op
Iteration  11: 206148.926 us/op
Iteration  12: 205102.752 us/op
Iteration  13: 204340.900 us/op
Iteration  14: 204420.582 us/op
Iteration  15: 204316.055 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  195230.878 ±(99.9%) 21277.224 us/op [Average]
  (min, avg, max) = (151726.109, 195230.878, 206148.926), stdev = 19902.729
  CI (99.9%): [173953.654, 216508.102] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 36.96% complete, ETA 05:20:35
# Fork: 1 of 1
# Warmup Iteration   1: 200294.690 us/op
# Warmup Iteration   2: 200011.854 us/op
# Warmup Iteration   3: 199975.259 us/op
# Warmup Iteration   4: 199924.782 us/op
# Warmup Iteration   5: 200293.769 us/op
Iteration   1: 200243.598 us/op
Iteration   2: 199927.877 us/op
Iteration   3: 200378.920 us/op
Iteration   4: 199614.148 us/op
Iteration   5: 200805.964 us/op
Iteration   6: 198953.491 us/op
Iteration   7: 198639.928 us/op
Iteration   8: 199284.176 us/op
Iteration   9: 200066.553 us/op
Iteration  10: 200488.583 us/op
Iteration  11: 200809.176 us/op
Iteration  12: 200129.528 us/op
Iteration  13: 200132.012 us/op
Iteration  14: 199634.216 us/op
Iteration  15: 200139.552 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  199949.848 ±(99.9%) 670.777 us/op [Average]
  (min, avg, max) = (198639.928, 199949.848, 200809.176), stdev = 627.445
  CI (99.9%): [199279.071, 200620.625] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 37.68% complete, ETA 05:16:45
# Fork: 1 of 1
# Warmup Iteration   1: 1455431.639 us/op
# Warmup Iteration   2: 1405534.317 us/op
# Warmup Iteration   3: 1399441.027 us/op
# Warmup Iteration   4: 1409264.604 us/op
# Warmup Iteration   5: 1403672.598 us/op
Iteration   1: 1414379.774 us/op
Iteration   2: 1407806.901 us/op
Iteration   3: 1428584.590 us/op
Iteration   4: 1411573.411 us/op
Iteration   5: 1419329.360 us/op
Iteration   6: 1408348.362 us/op
Iteration   7: 1414449.594 us/op
Iteration   8: 1400735.338 us/op
Iteration   9: 1416817.115 us/op
Iteration  10: 1397099.189 us/op
Iteration  11: 1415540.306 us/op
Iteration  12: 1426284.590 us/op
Iteration  13: 1415909.607 us/op
Iteration  14: 1420317.402 us/op
Iteration  15: 1412436.322 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1413974.124 ±(99.9%) 8973.754 us/op [Average]
  (min, avg, max) = (1397099.189, 1413974.124, 1428584.590), stdev = 8394.055
  CI (99.9%): [1405000.370, 1422947.878] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 38.40% complete, ETA 05:13:35
# Fork: 1 of 1
# Warmup Iteration   1: 1023895.609 us/op
# Warmup Iteration   2: 1027495.276 us/op
# Warmup Iteration   3: 1024650.661 us/op
# Warmup Iteration   4: 1029032.958 us/op
# Warmup Iteration   5: 1022524.698 us/op
Iteration   1: 1031295.295 us/op
Iteration   2: 1029170.049 us/op
Iteration   3: 1033847.680 us/op
Iteration   4: 1026822.915 us/op
Iteration   5: 1026163.637 us/op
Iteration   6: 1022201.086 us/op
Iteration   7: 1026729.198 us/op
Iteration   8: 1018378.116 us/op
Iteration   9: 1023262.582 us/op
Iteration  10: 1023305.161 us/op
Iteration  11: 1026480.094 us/op
Iteration  12: 1027578.695 us/op
Iteration  13: 1025740.109 us/op
Iteration  14: 1025839.339 us/op
Iteration  15: 1024625.400 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  1026095.957 ±(99.9%) 3966.850 us/op [Average]
  (min, avg, max) = (1018378.116, 1026095.957, 1033847.680), stdev = 3710.594
  CI (99.9%): [1022129.107, 1030062.808] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 39.13% complete, ETA 05:09:51
# Fork: 1 of 1
# Warmup Iteration   1: 869632.316 us/op
# Warmup Iteration   2: 870457.765 us/op
# Warmup Iteration   3: 872509.775 us/op
# Warmup Iteration   4: 869788.266 us/op
# Warmup Iteration   5: 870877.820 us/op
Iteration   1: 870427.357 us/op
Iteration   2: 870599.537 us/op
Iteration   3: 873342.695 us/op
Iteration   4: 870736.934 us/op
Iteration   5: 873177.835 us/op
Iteration   6: 870701.068 us/op
Iteration   7: 868201.046 us/op
Iteration   8: 867332.301 us/op
Iteration   9: 866366.463 us/op
Iteration  10: 873916.693 us/op
Iteration  11: 870799.437 us/op
Iteration  12: 868084.887 us/op
Iteration  13: 861451.611 us/op
Iteration  14: 860879.409 us/op
Iteration  15: 867804.615 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  868921.459 ±(99.9%) 4137.325 us/op [Average]
  (min, avg, max) = (860879.409, 868921.459, 873916.693), stdev = 3870.056
  CI (99.9%): [864784.135, 873058.784] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 39.85% complete, ETA 05:06:12
# Fork: 1 of 1
# Warmup Iteration   1: 860785.585 us/op
# Warmup Iteration   2: 848911.571 us/op
# Warmup Iteration   3: 756884.544 us/op
# Warmup Iteration   4: 834009.753 us/op
# Warmup Iteration   5: 861845.800 us/op
Iteration   1: 858317.606 us/op
Iteration   2: 859421.262 us/op
Iteration   3: 860564.955 us/op
Iteration   4: 857322.036 us/op
Iteration   5: 859591.572 us/op
Iteration   6: 865074.727 us/op
Iteration   7: 863940.560 us/op
Iteration   8: 859071.377 us/op
Iteration   9: 856831.750 us/op
Iteration  10: 859696.863 us/op
Iteration  11: 857743.790 us/op
Iteration  12: 856716.259 us/op
Iteration  13: 852836.500 us/op
Iteration  14: 861747.913 us/op
Iteration  15: 856964.130 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  859056.087 ±(99.9%) 3247.553 us/op [Average]
  (min, avg, max) = (852836.500, 859056.087, 865074.727), stdev = 3037.763
  CI (99.9%): [855808.534, 862303.640] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 40.58% complete, ETA 05:02:29
# Fork: 1 of 1
# Warmup Iteration   1: 860525.033 us/op
# Warmup Iteration   2: 870075.228 us/op
# Warmup Iteration   3: 859294.029 us/op
# Warmup Iteration   4: 856615.842 us/op
# Warmup Iteration   5: 851291.738 us/op
Iteration   1: 855880.985 us/op
Iteration   2: 858240.749 us/op
Iteration   3: 858184.332 us/op
Iteration   4: 819506.779 us/op
Iteration   5: 749879.309 us/op
Iteration   6: 753958.117 us/op
Iteration   7: 756540.291 us/op
Iteration   8: 754937.234 us/op
Iteration   9: 756175.879 us/op
Iteration  10: 751329.676 us/op
Iteration  11: 747218.625 us/op
Iteration  12: 757471.697 us/op
Iteration  13: 760562.284 us/op
Iteration  14: 762924.704 us/op
Iteration  15: 759439.316 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  780149.998 ±(99.9%) 46406.666 us/op [Average]
  (min, avg, max) = (747218.625, 780149.998, 858240.749), stdev = 43408.824
  CI (99.9%): [733743.333, 826556.664] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 41.30% complete, ETA 04:58:51
# Fork: 1 of 1
# Warmup Iteration   1: 937053.948 us/op
# Warmup Iteration   2: 941999.082 us/op
# Warmup Iteration   3: 941497.864 us/op
# Warmup Iteration   4: 945525.693 us/op
# Warmup Iteration   5: 944924.649 us/op
Iteration   1: 939720.278 us/op
Iteration   2: 936794.686 us/op
Iteration   3: 936830.159 us/op
Iteration   4: 937567.366 us/op
Iteration   5: 934951.651 us/op
Iteration   6: 937227.568 us/op
Iteration   7: 935599.704 us/op
Iteration   8: 933827.767 us/op
Iteration   9: 940716.618 us/op
Iteration  10: 940086.861 us/op
Iteration  11: 933375.233 us/op
Iteration  12: 936334.429 us/op
Iteration  13: 937212.924 us/op
Iteration  14: 935897.141 us/op
Iteration  15: 936927.667 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  936871.337 ±(99.9%) 2249.870 us/op [Average]
  (min, avg, max) = (933375.233, 936871.337, 940716.618), stdev = 2104.530
  CI (99.9%): [934621.466, 939121.207] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 42.03% complete, ETA 04:55:08
# Fork: 1 of 1
# Warmup Iteration   1: 382.367 us/op
# Warmup Iteration   2: 380.840 us/op
# Warmup Iteration   3: 381.034 us/op
# Warmup Iteration   4: 379.864 us/op
# Warmup Iteration   5: 381.483 us/op
Iteration   1: 379.802 us/op
Iteration   2: 380.252 us/op
Iteration   3: 380.496 us/op
Iteration   4: 380.679 us/op
Iteration   5: 383.945 us/op
Iteration   6: 384.611 us/op
Iteration   7: 384.101 us/op
Iteration   8: 385.451 us/op
Iteration   9: 387.098 us/op
Iteration  10: 385.987 us/op
Iteration  11: 386.148 us/op
Iteration  12: 385.516 us/op
Iteration  13: 385.367 us/op
Iteration  14: 384.373 us/op
Iteration  15: 384.525 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  383.890 ±(99.9%) 2.556 us/op [Average]
  (min, avg, max) = (379.802, 383.890, 387.098), stdev = 2.391
  CI (99.9%): [381.334, 386.446] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 42.75% complete, ETA 04:51:17
# Fork: 1 of 1
# Warmup Iteration   1: 169.847 us/op
# Warmup Iteration   2: 168.338 us/op
# Warmup Iteration   3: 167.644 us/op
# Warmup Iteration   4: 168.977 us/op
# Warmup Iteration   5: 168.648 us/op
Iteration   1: 168.203 us/op
Iteration   2: 169.921 us/op
Iteration   3: 168.700 us/op
Iteration   4: 168.689 us/op
Iteration   5: 169.269 us/op
Iteration   6: 169.424 us/op
Iteration   7: 169.123 us/op
Iteration   8: 169.633 us/op
Iteration   9: 169.643 us/op
Iteration  10: 170.019 us/op
Iteration  11: 169.057 us/op
Iteration  12: 170.304 us/op
Iteration  13: 169.583 us/op
Iteration  14: 169.828 us/op
Iteration  15: 168.986 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  169.359 ±(99.9%) 0.612 us/op [Average]
  (min, avg, max) = (168.203, 169.359, 170.304), stdev = 0.573
  CI (99.9%): [168.747, 169.971] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 43.48% complete, ETA 04:47:26
# Fork: 1 of 1
# Warmup Iteration   1: 200.953 us/op
# Warmup Iteration   2: 200.683 us/op
# Warmup Iteration   3: 202.956 us/op
# Warmup Iteration   4: 201.637 us/op
# Warmup Iteration   5: 201.533 us/op
Iteration   1: 201.546 us/op
Iteration   2: 201.529 us/op
Iteration   3: 201.521 us/op
Iteration   4: 201.563 us/op
Iteration   5: 201.493 us/op
Iteration   6: 201.632 us/op
Iteration   7: 201.213 us/op
Iteration   8: 201.371 us/op
Iteration   9: 201.244 us/op
Iteration  10: 201.452 us/op
Iteration  11: 201.131 us/op
Iteration  12: 201.351 us/op
Iteration  13: 201.315 us/op
Iteration  14: 201.216 us/op
Iteration  15: 201.261 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  201.389 ±(99.9%) 0.166 us/op [Average]
  (min, avg, max) = (201.131, 201.389, 201.632), stdev = 0.155
  CI (99.9%): [201.223, 201.555] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 44.20% complete, ETA 04:43:36
# Fork: 1 of 1
# Warmup Iteration   1: 182.856 us/op
# Warmup Iteration   2: 184.145 us/op
# Warmup Iteration   3: 181.425 us/op
# Warmup Iteration   4: 183.180 us/op
# Warmup Iteration   5: 182.054 us/op
Iteration   1: 183.375 us/op
Iteration   2: 182.911 us/op
Iteration   3: 182.963 us/op
Iteration   4: 184.409 us/op
Iteration   5: 183.780 us/op
Iteration   6: 183.930 us/op
Iteration   7: 182.871 us/op
Iteration   8: 183.872 us/op
Iteration   9: 184.894 us/op
Iteration  10: 186.062 us/op
Iteration  11: 175.729 us/op
Iteration  12: 183.937 us/op
Iteration  13: 183.180 us/op
Iteration  14: 181.433 us/op
Iteration  15: 183.409 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  183.117 ±(99.9%) 2.450 us/op [Average]
  (min, avg, max) = (175.729, 183.117, 186.062), stdev = 2.292
  CI (99.9%): [180.667, 185.567] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 44.93% complete, ETA 04:39:47
# Fork: 1 of 1
# Warmup Iteration   1: 1083279.278 us/op
# Warmup Iteration   2: 1075945.286 us/op
# Warmup Iteration   3: 1076919.292 us/op
# Warmup Iteration   4: 1077888.806 us/op
# Warmup Iteration   5: 1074692.171 us/op
Iteration   1: 1076651.934 us/op
Iteration   2: 1077594.037 us/op
Iteration   3: 1077223.593 us/op
Iteration   4: 1075582.486 us/op
Iteration   5: 1075944.815 us/op
Iteration   6: 1078822.345 us/op
Iteration   7: 1075881.987 us/op
Iteration   8: 1078866.720 us/op
Iteration   9: 1078905.629 us/op
Iteration  10: 1077794.525 us/op
Iteration  11: 1073608.184 us/op
Iteration  12: 1077376.394 us/op
Iteration  13: 1077628.273 us/op
Iteration  14: 1076021.792 us/op
Iteration  15: 1079142.576 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  1077136.353 ±(99.9%) 1648.139 us/op [Average]
  (min, avg, max) = (1073608.184, 1077136.353, 1079142.576), stdev = 1541.671
  CI (99.9%): [1075488.213, 1078784.492] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 45.65% complete, ETA 04:36:17
# Fork: 1 of 1
# Warmup Iteration   1: 919996.301 us/op
# Warmup Iteration   2: 927582.732 us/op
# Warmup Iteration   3: 927417.855 us/op
# Warmup Iteration   4: 903020.816 us/op
# Warmup Iteration   5: 938137.280 us/op
Iteration   1: 898931.024 us/op
Iteration   2: 901713.109 us/op
Iteration   3: 936263.969 us/op
Iteration   4: 911672.504 us/op
Iteration   5: 884253.304 us/op
Iteration   6: 915605.159 us/op
Iteration   7: 931089.875 us/op
Iteration   8: 933240.466 us/op
Iteration   9: 929171.970 us/op
Iteration  10: 939642.651 us/op
Iteration  11: 899949.564 us/op
Iteration  12: 854995.343 us/op
Iteration  13: 959125.149 us/op
Iteration  14: 897805.423 us/op
Iteration  15: 931639.401 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  915006.594 ±(99.9%) 27980.049 us/op [Average]
  (min, avg, max) = (854995.343, 915006.594, 959125.149), stdev = 26172.555
  CI (99.9%): [887026.545, 942986.643] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 46.38% complete, ETA 04:32:38
# Fork: 1 of 1
# Warmup Iteration   1: 19064960.126 us/op
# Warmup Iteration   2: 18932939.707 us/op
# Warmup Iteration   3: 18632269.570 us/op
# Warmup Iteration   4: 19090222.641 us/op
# Warmup Iteration   5: 19726135.235 us/op
Iteration   1: 19786169.260 us/op
Iteration   2: 20045478.105 us/op
Iteration   3: 20131812.188 us/op
Iteration   4: 19566423.708 us/op
Iteration   5: 21808464.178 us/op
Iteration   6: 19798740.116 us/op
Iteration   7: 19389531.856 us/op
Iteration   8: 20039330.996 us/op
Iteration   9: 19956045.439 us/op
Iteration  10: 19727081.799 us/op
Iteration  11: 19631570.682 us/op
Iteration  12: 19842107.119 us/op
Iteration  13: 19643776.259 us/op
Iteration  14: 20146744.813 us/op
Iteration  15: 19760937.491 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  19951614.267 ±(99.9%) 595637.063 us/op [Average]
  (min, avg, max) = (19389531.856, 19951614.267, 21808464.178), stdev = 557159.279
  CI (99.9%): [19355977.204, 20547251.331] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 47.10% complete, ETA 04:32:29
# Fork: 1 of 1
# Warmup Iteration   1: 1.873 us/op
# Warmup Iteration   2: 1.875 us/op
# Warmup Iteration   3: 1.872 us/op
# Warmup Iteration   4: 1.872 us/op
# Warmup Iteration   5: 1.868 us/op
Iteration   1: 1.867 us/op
Iteration   2: 1.868 us/op
Iteration   3: 1.867 us/op
Iteration   4: 1.869 us/op
Iteration   5: 1.867 us/op
Iteration   6: 1.868 us/op
Iteration   7: 1.871 us/op
Iteration   8: 1.869 us/op
Iteration   9: 1.868 us/op
Iteration  10: 1.872 us/op
Iteration  11: 1.870 us/op
Iteration  12: 1.867 us/op
Iteration  13: 1.869 us/op
Iteration  14: 1.867 us/op
Iteration  15: 1.867 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  1.868 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (1.867, 1.868, 1.872), stdev = 0.001
  CI (99.9%): [1.867, 1.870] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 47.82% complete, ETA 04:28:34
# Fork: 1 of 1
# Warmup Iteration   1: 5.464 us/op
# Warmup Iteration   2: 5.454 us/op
# Warmup Iteration   3: 5.471 us/op
# Warmup Iteration   4: 5.463 us/op
# Warmup Iteration   5: 5.467 us/op
Iteration   1: 5.466 us/op
Iteration   2: 5.457 us/op
Iteration   3: 5.476 us/op
Iteration   4: 5.462 us/op
Iteration   5: 5.453 us/op
Iteration   6: 5.480 us/op
Iteration   7: 5.506 us/op
Iteration   8: 5.463 us/op
Iteration   9: 5.463 us/op
Iteration  10: 5.500 us/op
Iteration  11: 5.452 us/op
Iteration  12: 5.472 us/op
Iteration  13: 5.448 us/op
Iteration  14: 5.428 us/op
Iteration  15: 5.442 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  5.465 ±(99.9%) 0.022 us/op [Average]
  (min, avg, max) = (5.428, 5.465, 5.506), stdev = 0.020
  CI (99.9%): [5.443, 5.487] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 48.55% complete, ETA 04:24:40
# Fork: 1 of 1
# Warmup Iteration   1: 9.408 us/op
# Warmup Iteration   2: 9.432 us/op
# Warmup Iteration   3: 9.403 us/op
# Warmup Iteration   4: 9.392 us/op
# Warmup Iteration   5: 9.417 us/op
Iteration   1: 9.470 us/op
Iteration   2: 9.399 us/op
Iteration   3: 9.424 us/op
Iteration   4: 9.399 us/op
Iteration   5: 9.379 us/op
Iteration   6: 9.418 us/op
Iteration   7: 9.399 us/op
Iteration   8: 9.430 us/op
Iteration   9: 9.410 us/op
Iteration  10: 9.414 us/op
Iteration  11: 9.414 us/op
Iteration  12: 9.424 us/op
Iteration  13: 9.431 us/op
Iteration  14: 9.438 us/op
Iteration  15: 9.384 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  9.415 ±(99.9%) 0.024 us/op [Average]
  (min, avg, max) = (9.379, 9.415, 9.470), stdev = 0.023
  CI (99.9%): [9.391, 9.440] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 49.27% complete, ETA 04:20:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 us/op
# Warmup Iteration   2: 0.038 us/op
# Warmup Iteration   3: 0.040 us/op
# Warmup Iteration   4: 0.040 us/op
# Warmup Iteration   5: 0.040 us/op
Iteration   1: 0.040 us/op
Iteration   2: 0.040 us/op
Iteration   3: 0.040 us/op
Iteration   4: 0.040 us/op
Iteration   5: 0.040 us/op
Iteration   6: 0.040 us/op
Iteration   7: 0.040 us/op
Iteration   8: 0.040 us/op
Iteration   9: 0.041 us/op
Iteration  10: 0.040 us/op
Iteration  11: 0.040 us/op
Iteration  12: 0.040 us/op
Iteration  13: 0.040 us/op
Iteration  14: 0.040 us/op
Iteration  15: 0.040 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.040 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.040, 0.040, 0.041), stdev = 0.001
  CI (99.9%): [0.039, 0.040] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 50.00% complete, ETA 04:16:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.384 us/op
# Warmup Iteration   2: 0.458 us/op
# Warmup Iteration   3: 0.355 us/op
# Warmup Iteration   4: 0.351 us/op
# Warmup Iteration   5: 0.347 us/op
Iteration   1: 0.353 us/op
Iteration   2: 0.353 us/op
Iteration   3: 0.349 us/op
Iteration   4: 0.345 us/op
Iteration   5: 0.345 us/op
Iteration   6: 0.350 us/op
Iteration   7: 0.349 us/op
Iteration   8: 0.352 us/op
Iteration   9: 0.356 us/op
Iteration  10: 0.354 us/op
Iteration  11: 0.354 us/op
Iteration  12: 0.347 us/op
Iteration  13: 0.350 us/op
Iteration  14: 0.346 us/op
Iteration  15: 0.347 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  0.350 ±(99.9%) 0.004 us/op [Average]
  (min, avg, max) = (0.345, 0.350, 0.356), stdev = 0.003
  CI (99.9%): [0.346, 0.354] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 50.72% complete, ETA 04:13:00
# Fork: 1 of 1
# Warmup Iteration   1: 4.447 us/op
# Warmup Iteration   2: 4.121 us/op
# Warmup Iteration   3: 3.933 us/op
# Warmup Iteration   4: 4.103 us/op
# Warmup Iteration   5: 3.873 us/op
Iteration   1: 3.929 us/op
Iteration   2: 4.051 us/op
Iteration   3: 3.854 us/op
Iteration   4: 4.059 us/op
Iteration   5: 3.946 us/op
Iteration   6: 3.821 us/op
Iteration   7: 3.920 us/op
Iteration   8: 4.000 us/op
Iteration   9: 3.987 us/op
Iteration  10: 4.085 us/op
Iteration  11: 3.922 us/op
Iteration  12: 3.968 us/op
Iteration  13: 3.954 us/op
Iteration  14: 3.926 us/op
Iteration  15: 3.930 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  3.957 ±(99.9%) 0.077 us/op [Average]
  (min, avg, max) = (3.821, 3.957, 4.085), stdev = 0.072
  CI (99.9%): [3.880, 4.034] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 51.45% complete, ETA 04:09:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.044 us/op
# Warmup Iteration   2: 0.051 us/op
# Warmup Iteration   3: 0.043 us/op
# Warmup Iteration   4: 0.042 us/op
# Warmup Iteration   5: 0.044 us/op
Iteration   1: 0.042 us/op
Iteration   2: 0.042 us/op
Iteration   3: 0.042 us/op
Iteration   4: 0.042 us/op
Iteration   5: 0.042 us/op
Iteration   6: 0.044 us/op
Iteration   7: 0.042 us/op
Iteration   8: 0.042 us/op
Iteration   9: 0.042 us/op
Iteration  10: 0.044 us/op
Iteration  11: 0.043 us/op
Iteration  12: 0.042 us/op
Iteration  13: 0.042 us/op
Iteration  14: 0.044 us/op
Iteration  15: 0.042 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.043 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.042, 0.043, 0.044), stdev = 0.001
  CI (99.9%): [0.042, 0.044] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 52.17% complete, ETA 04:05:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.383 us/op
# Warmup Iteration   2: 0.422 us/op
# Warmup Iteration   3: 0.345 us/op
# Warmup Iteration   4: 0.343 us/op
# Warmup Iteration   5: 0.345 us/op
Iteration   1: 0.360 us/op
Iteration   2: 0.352 us/op
Iteration   3: 0.353 us/op
Iteration   4: 0.345 us/op
Iteration   5: 0.354 us/op
Iteration   6: 0.353 us/op
Iteration   7: 0.345 us/op
Iteration   8: 0.356 us/op
Iteration   9: 0.343 us/op
Iteration  10: 0.343 us/op
Iteration  11: 0.353 us/op
Iteration  12: 0.344 us/op
Iteration  13: 0.359 us/op
Iteration  14: 0.344 us/op
Iteration  15: 0.344 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  0.350 ±(99.9%) 0.007 us/op [Average]
  (min, avg, max) = (0.343, 0.350, 0.360), stdev = 0.006
  CI (99.9%): [0.343, 0.356] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 52.90% complete, ETA 04:01:26
# Fork: 1 of 1
# Warmup Iteration   1: 4.034 us/op
# Warmup Iteration   2: 4.027 us/op
# Warmup Iteration   3: 4.049 us/op
# Warmup Iteration   4: 4.012 us/op
# Warmup Iteration   5: 4.012 us/op
Iteration   1: 4.076 us/op
Iteration   2: 4.039 us/op
Iteration   3: 4.038 us/op
Iteration   4: 4.022 us/op
Iteration   5: 4.057 us/op
Iteration   6: 4.007 us/op
Iteration   7: 4.010 us/op
Iteration   8: 4.058 us/op
Iteration   9: 4.013 us/op
Iteration  10: 4.058 us/op
Iteration  11: 4.015 us/op
Iteration  12: 3.993 us/op
Iteration  13: 4.043 us/op
Iteration  14: 3.892 us/op
Iteration  15: 4.078 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  4.027 ±(99.9%) 0.048 us/op [Average]
  (min, avg, max) = (3.892, 4.027, 4.078), stdev = 0.045
  CI (99.9%): [3.978, 4.075] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 53.62% complete, ETA 03:57:35
# Fork: 1 of 1
# Warmup Iteration   1: 14685.388 us/op
# Warmup Iteration   2: 14639.169 us/op
# Warmup Iteration   3: 14624.574 us/op
# Warmup Iteration   4: 14638.583 us/op
# Warmup Iteration   5: 14625.250 us/op
Iteration   1: 14617.175 us/op
Iteration   2: 14609.013 us/op
Iteration   3: 14618.466 us/op
Iteration   4: 14622.952 us/op
Iteration   5: 14625.505 us/op
Iteration   6: 14618.353 us/op
Iteration   7: 14630.626 us/op
Iteration   8: 14630.790 us/op
Iteration   9: 14626.371 us/op
Iteration  10: 14620.316 us/op
Iteration  11: 14598.401 us/op
Iteration  12: 14613.643 us/op
Iteration  13: 14627.648 us/op
Iteration  14: 14612.553 us/op
Iteration  15: 14623.414 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  14619.682 ±(99.9%) 9.363 us/op [Average]
  (min, avg, max) = (14598.401, 14619.682, 14630.790), stdev = 8.758
  CI (99.9%): [14610.319, 14629.045] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 54.35% complete, ETA 03:53:46
# Fork: 1 of 1
# Warmup Iteration   1: 350.476 us/op
# Warmup Iteration   2: 347.969 us/op
# Warmup Iteration   3: 348.875 us/op
# Warmup Iteration   4: 347.505 us/op
# Warmup Iteration   5: 348.084 us/op
Iteration   1: 347.761 us/op
Iteration   2: 347.757 us/op
Iteration   3: 347.354 us/op
Iteration   4: 349.333 us/op
Iteration   5: 346.510 us/op
Iteration   6: 347.461 us/op
Iteration   7: 347.785 us/op
Iteration   8: 348.481 us/op
Iteration   9: 349.465 us/op
Iteration  10: 349.585 us/op
Iteration  11: 349.241 us/op
Iteration  12: 348.083 us/op
Iteration  13: 347.814 us/op
Iteration  14: 346.894 us/op
Iteration  15: 347.371 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  348.060 ±(99.9%) 1.026 us/op [Average]
  (min, avg, max) = (346.510, 348.060, 349.585), stdev = 0.960
  CI (99.9%): [347.033, 349.086] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 55.07% complete, ETA 03:49:57
# Fork: 1 of 1
# Warmup Iteration   1: 35482.755 us/op
# Warmup Iteration   2: 35223.455 us/op
# Warmup Iteration   3: 35275.719 us/op
# Warmup Iteration   4: 35141.589 us/op
# Warmup Iteration   5: 35252.236 us/op
Iteration   1: 35295.536 us/op
Iteration   2: 35238.968 us/op
Iteration   3: 35160.435 us/op
Iteration   4: 35164.853 us/op
Iteration   5: 35180.400 us/op
Iteration   6: 35169.497 us/op
Iteration   7: 35112.884 us/op
Iteration   8: 35091.067 us/op
Iteration   9: 35188.018 us/op
Iteration  10: 35195.907 us/op
Iteration  11: 35278.592 us/op
Iteration  12: 35348.195 us/op
Iteration  13: 35444.029 us/op
Iteration  14: 35343.406 us/op
Iteration  15: 35313.596 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  35235.026 ±(99.9%) 105.806 us/op [Average]
  (min, avg, max) = (35091.067, 35235.026, 35444.029), stdev = 98.971
  CI (99.9%): [35129.220, 35340.831] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 55.80% complete, ETA 03:46:09
# Fork: 1 of 1
# Warmup Iteration   1: 3619758.320 us/op
# Warmup Iteration   2: 3650593.670 us/op
# Warmup Iteration   3: 3655963.921 us/op
# Warmup Iteration   4: 3662203.461 us/op
# Warmup Iteration   5: 3659437.177 us/op
Iteration   1: 3648707.172 us/op
Iteration   2: 3655400.673 us/op
Iteration   3: 3664295.774 us/op
Iteration   4: 3652870.696 us/op
Iteration   5: 3693762.315 us/op
Iteration   6: 3648287.540 us/op
Iteration   7: 3653534.140 us/op
Iteration   8: 3643777.306 us/op
Iteration   9: 3640231.506 us/op
Iteration  10: 3638316.382 us/op
Iteration  11: 3650646.663 us/op
Iteration  12: 3656493.745 us/op
Iteration  13: 3663760.439 us/op
Iteration  14: 3661236.307 us/op
Iteration  15: 3650136.488 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  3654763.810 ±(99.9%) 14178.275 us/op [Average]
  (min, avg, max) = (3638316.382, 3654763.810, 3693762.315), stdev = 13262.368
  CI (99.9%): [3640585.535, 3668942.085] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 56.52% complete, ETA 03:42:36
# Fork: 1 of 1
# Warmup Iteration   1: 1905.157 us/op
# Warmup Iteration   2: 1902.559 us/op
# Warmup Iteration   3: 1898.489 us/op
# Warmup Iteration   4: 1899.286 us/op
# Warmup Iteration   5: 1897.871 us/op
Iteration   1: 1898.480 us/op
Iteration   2: 1899.266 us/op
Iteration   3: 1898.440 us/op
Iteration   4: 1894.316 us/op
Iteration   5: 1901.432 us/op
Iteration   6: 1897.820 us/op
Iteration   7: 1897.630 us/op
Iteration   8: 1896.930 us/op
Iteration   9: 1893.906 us/op
Iteration  10: 1893.812 us/op
Iteration  11: 1896.094 us/op
Iteration  12: 1895.025 us/op
Iteration  13: 1894.230 us/op
Iteration  14: 1895.981 us/op
Iteration  15: 1899.484 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  1896.856 ±(99.9%) 2.496 us/op [Average]
  (min, avg, max) = (1893.812, 1896.856, 1901.432), stdev = 2.335
  CI (99.9%): [1894.360, 1899.353] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 57.24% complete, ETA 03:38:47
# Fork: 1 of 1
# Warmup Iteration   1: 47109.419 us/op
# Warmup Iteration   2: 46950.143 us/op
# Warmup Iteration   3: 46938.340 us/op
# Warmup Iteration   4: 46917.141 us/op
# Warmup Iteration   5: 46882.898 us/op
Iteration   1: 46938.360 us/op
Iteration   2: 46937.373 us/op
Iteration   3: 46908.470 us/op
Iteration   4: 46930.489 us/op
Iteration   5: 46936.250 us/op
Iteration   6: 46937.582 us/op
Iteration   7: 47003.569 us/op
Iteration   8: 46951.702 us/op
Iteration   9: 46946.633 us/op
Iteration  10: 46965.522 us/op
Iteration  11: 46970.960 us/op
Iteration  12: 46928.946 us/op
Iteration  13: 46969.728 us/op
Iteration  14: 46956.260 us/op
Iteration  15: 46940.711 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  46948.170 ±(99.9%) 24.270 us/op [Average]
  (min, avg, max) = (46908.470, 46948.170, 47003.569), stdev = 22.702
  CI (99.9%): [46923.900, 46972.440] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 57.97% complete, ETA 03:34:59
# Fork: 1 of 1
# Warmup Iteration   1: 1723475.200 us/op
# Warmup Iteration   2: 1719243.200 us/op
# Warmup Iteration   3: 1715025.429 us/op
# Warmup Iteration   4: 1712517.502 us/op
# Warmup Iteration   5: 1712380.760 us/op
Iteration   1: 1712710.394 us/op
Iteration   2: 1712213.498 us/op
Iteration   3: 1712169.314 us/op
Iteration   4: 1713835.578 us/op
Iteration   5: 1712785.154 us/op
Iteration   6: 1712965.265 us/op
Iteration   7: 1715732.619 us/op
Iteration   8: 1714019.133 us/op
Iteration   9: 1714545.268 us/op
Iteration  10: 1716981.704 us/op
Iteration  11: 1714045.121 us/op
Iteration  12: 1710811.645 us/op
Iteration  13: 1713092.669 us/op
Iteration  14: 1714598.348 us/op
Iteration  15: 1715149.209 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  1713710.328 ±(99.9%) 1675.315 us/op [Average]
  (min, avg, max) = (1710811.645, 1713710.328, 1716981.704), stdev = 1567.090
  CI (99.9%): [1712035.013, 1715385.642] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 58.69% complete, ETA 03:31:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.505 us/op
# Warmup Iteration   2: 0.503 us/op
# Warmup Iteration   3: 0.509 us/op
# Warmup Iteration   4: 0.507 us/op
# Warmup Iteration   5: 0.507 us/op
Iteration   1: 0.507 us/op
Iteration   2: 0.506 us/op
Iteration   3: 0.506 us/op
Iteration   4: 0.508 us/op
Iteration   5: 0.506 us/op
Iteration   6: 0.507 us/op
Iteration   7: 0.508 us/op
Iteration   8: 0.505 us/op
Iteration   9: 0.507 us/op
Iteration  10: 0.507 us/op
Iteration  11: 0.508 us/op
Iteration  12: 0.515 us/op
Iteration  13: 0.515 us/op
Iteration  14: 0.514 us/op
Iteration  15: 0.514 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  0.509 ±(99.9%) 0.004 us/op [Average]
  (min, avg, max) = (0.505, 0.509, 0.515), stdev = 0.004
  CI (99.9%): [0.505, 0.513] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 59.42% complete, ETA 03:27:27
# Fork: 1 of 1
# Warmup Iteration   1: 8389.162 us/op
# Warmup Iteration   2: 8356.772 us/op
# Warmup Iteration   3: 8358.705 us/op
# Warmup Iteration   4: 8367.767 us/op
# Warmup Iteration   5: 8359.483 us/op
Iteration   1: 8370.927 us/op
Iteration   2: 8360.281 us/op
Iteration   3: 8363.901 us/op
Iteration   4: 8359.119 us/op
Iteration   5: 8368.603 us/op
Iteration   6: 8359.350 us/op
Iteration   7: 8358.205 us/op
Iteration   8: 8363.493 us/op
Iteration   9: 8364.618 us/op
Iteration  10: 8359.116 us/op
Iteration  11: 8345.710 us/op
Iteration  12: 8356.633 us/op
Iteration  13: 8356.996 us/op
Iteration  14: 8360.035 us/op
Iteration  15: 8367.060 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  8360.936 ±(99.9%) 6.444 us/op [Average]
  (min, avg, max) = (8345.710, 8360.936, 8370.927), stdev = 6.028
  CI (99.9%): [8354.492, 8367.381] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 60.14% complete, ETA 03:23:40
# Fork: 1 of 1
# Warmup Iteration   1: 32795.841 us/op
# Warmup Iteration   2: 37535.635 us/op
# Warmup Iteration   3: 32902.384 us/op
# Warmup Iteration   4: 33592.938 us/op
# Warmup Iteration   5: 35801.381 us/op
Iteration   1: 34522.285 us/op
Iteration   2: 35252.571 us/op
Iteration   3: 36268.003 us/op
Iteration   4: 36765.124 us/op
Iteration   5: 36306.035 us/op
Iteration   6: 34071.987 us/op
Iteration   7: 35175.493 us/op
Iteration   8: 37692.091 us/op
Iteration   9: 36424.248 us/op
Iteration  10: 34926.388 us/op
Iteration  11: 33884.086 us/op
Iteration  12: 35220.673 us/op
Iteration  13: 35854.288 us/op
Iteration  14: 32332.640 us/op
Iteration  15: 33833.230 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  35235.276 ±(99.9%) 1472.603 us/op [Average]
  (min, avg, max) = (32332.640, 35235.276, 37692.091), stdev = 1377.474
  CI (99.9%): [33762.673, 36707.880] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 60.87% complete, ETA 03:19:53
# Fork: 1 of 1
# Warmup Iteration   1: 30632.442 us/op
# Warmup Iteration   2: 31034.907 us/op
# Warmup Iteration   3: 31094.826 us/op
# Warmup Iteration   4: 29966.942 us/op
# Warmup Iteration   5: 30242.492 us/op
Iteration   1: 30370.952 us/op
Iteration   2: 30328.500 us/op
Iteration   3: 30443.959 us/op
Iteration   4: 30497.926 us/op
Iteration   5: 30549.919 us/op
Iteration   6: 30609.790 us/op
Iteration   7: 30587.367 us/op
Iteration   8: 30637.592 us/op
Iteration   9: 30505.937 us/op
Iteration  10: 30558.655 us/op
Iteration  11: 30565.807 us/op
Iteration  12: 30506.671 us/op
Iteration  13: 30406.409 us/op
Iteration  14: 30591.575 us/op
Iteration  15: 30706.984 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  30524.536 ±(99.9%) 110.336 us/op [Average]
  (min, avg, max) = (30328.500, 30524.536, 30706.984), stdev = 103.209
  CI (99.9%): [30414.200, 30634.873] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 61.59% complete, ETA 03:16:07
# Fork: 1 of 1
# Warmup Iteration   1: 22487.115 us/op
# Warmup Iteration   2: 22772.379 us/op
# Warmup Iteration   3: 22639.298 us/op
# Warmup Iteration   4: 22610.272 us/op
# Warmup Iteration   5: 22460.237 us/op
Iteration   1: 22348.768 us/op
Iteration   2: 22391.723 us/op
Iteration   3: 22393.821 us/op
Iteration   4: 22559.294 us/op
Iteration   5: 22604.908 us/op
Iteration   6: 22312.437 us/op
Iteration   7: 22263.359 us/op
Iteration   8: 22327.805 us/op
Iteration   9: 22329.408 us/op
Iteration  10: 22256.628 us/op
Iteration  11: 22388.409 us/op
Iteration  12: 22399.090 us/op
Iteration  13: 22229.554 us/op
Iteration  14: 22255.346 us/op
Iteration  15: 22257.500 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  22354.537 ±(99.9%) 116.620 us/op [Average]
  (min, avg, max) = (22229.554, 22354.537, 22604.908), stdev = 109.086
  CI (99.9%): [22237.917, 22471.156] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 62.32% complete, ETA 03:12:21
# Fork: 1 of 1
# Warmup Iteration   1: 14058.726 us/op
# Warmup Iteration   2: 13942.844 us/op
# Warmup Iteration   3: 13960.141 us/op
# Warmup Iteration   4: 14031.568 us/op
# Warmup Iteration   5: 14034.194 us/op
Iteration   1: 14004.863 us/op
Iteration   2: 13971.434 us/op
Iteration   3: 13956.535 us/op
Iteration   4: 13937.550 us/op
Iteration   5: 13947.711 us/op
Iteration   6: 13934.785 us/op
Iteration   7: 13913.247 us/op
Iteration   8: 13959.616 us/op
Iteration   9: 13992.432 us/op
Iteration  10: 13995.609 us/op
Iteration  11: 14006.754 us/op
Iteration  12: 14010.020 us/op
Iteration  13: 13988.527 us/op
Iteration  14: 13962.959 us/op
Iteration  15: 13964.824 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  13969.791 ±(99.9%) 31.361 us/op [Average]
  (min, avg, max) = (13913.247, 13969.791, 14010.020), stdev = 29.335
  CI (99.9%): [13938.430, 14001.152] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 63.04% complete, ETA 03:08:34
# Fork: 1 of 1
# Warmup Iteration   1: 32539.680 us/op
# Warmup Iteration   2: 32671.835 us/op
# Warmup Iteration   3: 33001.590 us/op
# Warmup Iteration   4: 31766.087 us/op
# Warmup Iteration   5: 34187.172 us/op
Iteration   1: 32068.648 us/op
Iteration   2: 33499.083 us/op
Iteration   3: 32965.724 us/op
Iteration   4: 33530.660 us/op
Iteration   5: 32528.229 us/op
Iteration   6: 32480.798 us/op
Iteration   7: 31967.312 us/op
Iteration   8: 34945.230 us/op
Iteration   9: 32612.214 us/op
Iteration  10: 32980.441 us/op
Iteration  11: 32113.432 us/op
Iteration  12: 32029.443 us/op
Iteration  13: 34074.425 us/op
Iteration  14: 32620.760 us/op
Iteration  15: 34273.886 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  32979.352 ±(99.9%) 970.397 us/op [Average]
  (min, avg, max) = (31967.312, 32979.352, 34945.230), stdev = 907.710
  CI (99.9%): [32008.955, 33949.749] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 63.77% complete, ETA 03:04:48
# Fork: 1 of 1
# Warmup Iteration   1: 1357.368 us/op
# Warmup Iteration   2: 1276.694 us/op
# Warmup Iteration   3: 1275.241 us/op
# Warmup Iteration   4: 1275.269 us/op
# Warmup Iteration   5: 1271.457 us/op
Iteration   1: 1271.491 us/op
Iteration   2: 1273.584 us/op
Iteration   3: 1276.470 us/op
Iteration   4: 1276.650 us/op
Iteration   5: 1276.000 us/op
Iteration   6: 1278.011 us/op
Iteration   7: 1275.333 us/op
Iteration   8: 1270.182 us/op
Iteration   9: 1278.127 us/op
Iteration  10: 1270.547 us/op
Iteration  11: 1274.604 us/op
Iteration  12: 1270.554 us/op
Iteration  13: 1278.667 us/op
Iteration  14: 1274.839 us/op
Iteration  15: 1287.533 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  1275.506 ±(99.9%) 4.685 us/op [Average]
  (min, avg, max) = (1270.182, 1275.506, 1287.533), stdev = 4.382
  CI (99.9%): [1270.822, 1280.191] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 64.49% complete, ETA 03:01:02
# Fork: 1 of 1
# Warmup Iteration   1: 30066.533 us/op
# Warmup Iteration   2: 13369.657 us/op
# Warmup Iteration   3: 13310.894 us/op
# Warmup Iteration   4: 13330.561 us/op
# Warmup Iteration   5: 13495.852 us/op
Iteration   1: 13429.461 us/op
Iteration   2: 13334.139 us/op
Iteration   3: 13416.441 us/op
Iteration   4: 13361.745 us/op
Iteration   5: 13366.152 us/op
Iteration   6: 13495.334 us/op
Iteration   7: 13424.162 us/op
Iteration   8: 13459.233 us/op
Iteration   9: 13369.680 us/op
Iteration  10: 13398.151 us/op
Iteration  11: 13383.589 us/op
Iteration  12: 13381.875 us/op
Iteration  13: 13366.438 us/op
Iteration  14: 13308.866 us/op
Iteration  15: 13348.247 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  13389.568 ±(99.9%) 52.111 us/op [Average]
  (min, avg, max) = (13308.866, 13389.568, 13495.334), stdev = 48.744
  CI (99.9%): [13337.457, 13441.678] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 65.22% complete, ETA 02:57:17
# Fork: 1 of 1
# Warmup Iteration   1: 710334.271 us/op
# Warmup Iteration   2: 713752.113 us/op
# Warmup Iteration   3: 712867.827 us/op
# Warmup Iteration   4: 713100.931 us/op
# Warmup Iteration   5: 709531.136 us/op
Iteration   1: 710011.613 us/op
Iteration   2: 710798.593 us/op
Iteration   3: 307928.186 us/op
Iteration   4: 236390.741 us/op
Iteration   5: 237318.987 us/op
Iteration   6: 236075.948 us/op
Iteration   7: 235483.493 us/op
Iteration   8: 236253.233 us/op
Iteration   9: 237183.425 us/op
Iteration  10: 239511.389 us/op
Iteration  11: 238217.771 us/op
Iteration  12: 238083.604 us/op
Iteration  13: 238452.062 us/op
Iteration  14: 237925.689 us/op
Iteration  15: 237677.272 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  305154.134 ±(99.9%) 176960.500 us/op [Average]
  (min, avg, max) = (235483.493, 305154.134, 710798.593), stdev = 165528.961
  CI (99.9%): [128193.634, 482114.633] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 65.94% complete, ETA 02:53:35
# Fork: 1 of 1
# Warmup Iteration   1: 1783744.009 us/op
# Warmup Iteration   2: 1760770.757 us/op
# Warmup Iteration   3: 1699489.670 us/op
# Warmup Iteration   4: 1708864.549 us/op
# Warmup Iteration   5: 1710500.915 us/op
Iteration   1: 1702306.334 us/op
Iteration   2: 1694199.092 us/op
Iteration   3: 1686345.514 us/op
Iteration   4: 1697470.241 us/op
Iteration   5: 1698749.285 us/op
Iteration   6: 1715830.156 us/op
Iteration   7: 1711816.166 us/op
Iteration   8: 1715105.412 us/op
Iteration   9: 1711659.537 us/op
Iteration  10: 1726226.377 us/op
Iteration  11: 1724124.092 us/op
Iteration  12: 1715599.897 us/op
Iteration  13: 1711867.327 us/op
Iteration  14: 1707194.477 us/op
Iteration  15: 1716751.970 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  1709016.392 ±(99.9%) 11968.353 us/op [Average]
  (min, avg, max) = (1686345.514, 1709016.392, 1726226.377), stdev = 11195.205
  CI (99.9%): [1697048.038, 1720984.745] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 66.66% complete, ETA 02:49:54
# Fork: 1 of 1
# Warmup Iteration   1: 231157.388 ±(99.9%) 2046.497 us/op
# Warmup Iteration   2: 231181.219 ±(99.9%) 1986.889 us/op
# Warmup Iteration   3: 229918.161 ±(99.9%) 2152.615 us/op
# Warmup Iteration   4: 230704.593 ±(99.9%) 2013.204 us/op
# Warmup Iteration   5: 230621.184 ±(99.9%) 1744.804 us/op
Iteration   1: 230972.695 ±(99.9%) 2492.472 us/op
                 createNewObjects·p0.00:   219152.384 us/op
                 createNewObjects·p0.50:   231866.368 us/op
                 createNewObjects·p0.90:   235536.384 us/op
                 createNewObjects·p0.95:   236126.208 us/op
                 createNewObjects·p0.99:   244056.064 us/op
                 createNewObjects·p0.999:  244056.064 us/op
                 createNewObjects·p0.9999: 244056.064 us/op
                 createNewObjects·p1.00:   244056.064 us/op

Iteration   2: 230698.636 ±(99.9%) 2243.211 us/op
                 createNewObjects·p0.00:   217055.232 us/op
                 createNewObjects·p0.50:   231342.080 us/op
                 createNewObjects·p0.90:   235667.456 us/op
                 createNewObjects·p0.95:   236584.960 us/op
                 createNewObjects·p0.99:   237764.608 us/op
                 createNewObjects·p0.999:  237764.608 us/op
                 createNewObjects·p0.9999: 237764.608 us/op
                 createNewObjects·p1.00:   237764.608 us/op

Iteration   3: 231431.447 ±(99.9%) 2614.204 us/op
                 createNewObjects·p0.00:   219938.816 us/op
                 createNewObjects·p0.50:   232783.872 us/op
                 createNewObjects·p0.90:   237371.392 us/op
                 createNewObjects·p0.95:   238747.648 us/op
                 createNewObjects·p0.99:   239861.760 us/op
                 createNewObjects·p0.999:  239861.760 us/op
                 createNewObjects·p0.9999: 239861.760 us/op
                 createNewObjects·p1.00:   239861.760 us/op

Iteration   4: 230942.906 ±(99.9%) 2515.029 us/op
                 createNewObjects·p0.00:   215220.224 us/op
                 createNewObjects·p0.50:   231735.296 us/op
                 createNewObjects·p0.90:   236191.744 us/op
                 createNewObjects·p0.95:   236912.640 us/op
                 createNewObjects·p0.99:   237240.320 us/op
                 createNewObjects·p0.999:  237240.320 us/op
                 createNewObjects·p0.9999: 237240.320 us/op
                 createNewObjects·p1.00:   237240.320 us/op

Iteration   5: 230186.263 ±(99.9%) 2053.842 us/op
                 createNewObjects·p0.00:   219676.672 us/op
                 createNewObjects·p0.50:   230424.576 us/op
                 createNewObjects·p0.90:   235405.312 us/op
                 createNewObjects·p0.95:   236322.816 us/op
                 createNewObjects·p0.99:   236716.032 us/op
                 createNewObjects·p0.999:  236716.032 us/op
                 createNewObjects·p0.9999: 236716.032 us/op
                 createNewObjects·p1.00:   236716.032 us/op

Iteration   6: 230662.889 ±(99.9%) 2371.393 us/op
                 createNewObjects·p0.00:   220725.248 us/op
                 createNewObjects·p0.50:   230948.864 us/op
                 createNewObjects·p0.90:   236191.744 us/op
                 createNewObjects·p0.95:   237240.320 us/op
                 createNewObjects·p0.99:   241434.624 us/op
                 createNewObjects·p0.999:  241434.624 us/op
                 createNewObjects·p0.9999: 241434.624 us/op
                 createNewObjects·p1.00:   241434.624 us/op

Iteration   7: 231127.599 ±(99.9%) 2504.793 us/op
                 createNewObjects·p0.00:   219414.528 us/op
                 createNewObjects·p0.50:   231604.224 us/op
                 createNewObjects·p0.90:   235536.384 us/op
                 createNewObjects·p0.95:   238944.256 us/op
                 createNewObjects·p0.99:   240386.048 us/op
                 createNewObjects·p0.999:  240386.048 us/op
                 createNewObjects·p0.9999: 240386.048 us/op
                 createNewObjects·p1.00:   240386.048 us/op

Iteration   8: 230353.082 ±(99.9%) 2482.008 us/op
                 createNewObjects·p0.00:   219676.672 us/op
                 createNewObjects·p0.50:   231604.224 us/op
                 createNewObjects·p0.90:   236060.672 us/op
                 createNewObjects·p0.95:   236716.032 us/op
                 createNewObjects·p0.99:   237764.608 us/op
                 createNewObjects·p0.999:  237764.608 us/op
                 createNewObjects·p0.9999: 237764.608 us/op
                 createNewObjects·p1.00:   237764.608 us/op

Iteration   9: 230168.390 ±(99.9%) 2471.789 us/op
                 createNewObjects·p0.00:   219676.672 us/op
                 createNewObjects·p0.50:   230293.504 us/op
                 createNewObjects·p0.90:   236060.672 us/op
                 createNewObjects·p0.95:   236453.888 us/op
                 createNewObjects·p0.99:   238551.040 us/op
                 createNewObjects·p0.999:  238551.040 us/op
                 createNewObjects·p0.9999: 238551.040 us/op
                 createNewObjects·p1.00:   238551.040 us/op

Iteration  10: 231139.514 ±(99.9%) 2400.357 us/op
                 createNewObjects·p0.00:   221249.536 us/op
                 createNewObjects·p0.50:   231604.224 us/op
                 createNewObjects·p0.90:   236191.744 us/op
                 createNewObjects·p0.95:   239075.328 us/op
                 createNewObjects·p0.99:   240386.048 us/op
                 createNewObjects·p0.999:  240386.048 us/op
                 createNewObjects·p0.9999: 240386.048 us/op
                 createNewObjects·p1.00:   240386.048 us/op

Iteration  11: 230704.593 ±(99.9%) 1999.204 us/op
                 createNewObjects·p0.00:   223346.688 us/op
                 createNewObjects·p0.50:   231211.008 us/op
                 createNewObjects·p0.90:   235274.240 us/op
                 createNewObjects·p0.95:   236912.640 us/op
                 createNewObjects·p0.99:   239599.616 us/op
                 createNewObjects·p0.999:  239599.616 us/op
                 createNewObjects·p0.9999: 239599.616 us/op
                 createNewObjects·p1.00:   239599.616 us/op

Iteration  12: 231884.241 ±(99.9%) 2489.668 us/op
                 createNewObjects·p0.00:   218365.952 us/op
                 createNewObjects·p0.50:   232259.584 us/op
                 createNewObjects·p0.90:   236978.176 us/op
                 createNewObjects·p0.95:   237174.784 us/op
                 createNewObjects·p0.99:   241958.912 us/op
                 createNewObjects·p0.999:  241958.912 us/op
                 createNewObjects·p0.9999: 241958.912 us/op
                 createNewObjects·p1.00:   241958.912 us/op

Iteration  13: 230609.268 ±(99.9%) 2904.250 us/op
                 createNewObjects·p0.00:   218890.240 us/op
                 createNewObjects·p0.50:   230948.864 us/op
                 createNewObjects·p0.90:   236716.032 us/op
                 createNewObjects·p0.95:   239009.792 us/op
                 createNewObjects·p0.99:   239599.616 us/op
                 createNewObjects·p0.999:  239599.616 us/op
                 createNewObjects·p0.9999: 239599.616 us/op
                 createNewObjects·p1.00:   239599.616 us/op

Iteration  14: 230216.052 ±(99.9%) 2559.503 us/op
                 createNewObjects·p0.00:   218628.096 us/op
                 createNewObjects·p0.50:   229638.144 us/op
                 createNewObjects·p0.90:   237109.248 us/op
                 createNewObjects·p0.95:   237830.144 us/op
                 createNewObjects·p0.99:   241172.480 us/op
                 createNewObjects·p0.999:  241172.480 us/op
                 createNewObjects·p0.9999: 241172.480 us/op
                 createNewObjects·p1.00:   241172.480 us/op

Iteration  15: 230192.221 ±(99.9%) 1438.592 us/op
                 createNewObjects·p0.00:   224395.264 us/op
                 createNewObjects·p0.50:   230031.360 us/op
                 createNewObjects·p0.90:   233308.160 us/op
                 createNewObjects·p0.95:   236126.208 us/op
                 createNewObjects·p0.99:   237240.320 us/op
                 createNewObjects·p0.999:  237240.320 us/op
                 createNewObjects·p0.9999: 237240.320 us/op
                 createNewObjects·p1.00:   237240.320 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 660
  mean = 230752.653 ±(99.9%) 575.235 us/op

  Histogram, us/op:
    [210000.000, 212500.000) = 0 
    [212500.000, 215000.000) = 0 
    [215000.000, 217500.000) = 2 
    [217500.000, 220000.000) = 15 
    [220000.000, 222500.000) = 12 
    [222500.000, 225000.000) = 41 
    [225000.000, 227500.000) = 73 
    [227500.000, 230000.000) = 132 
    [230000.000, 232500.000) = 128 
    [232500.000, 235000.000) = 141 
    [235000.000, 237500.000) = 95 
    [237500.000, 240000.000) = 15 
    [240000.000, 242500.000) = 5 
    [242500.000, 245000.000) = 1 
    [245000.000, 247500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 215220.224 us/op
     p(50.0000) = 231211.008 us/op
     p(90.0000) = 235929.600 us/op
     p(95.0000) = 236978.176 us/op
     p(99.0000) = 240066.232 us/op
     p(99.9000) = 244056.064 us/op
     p(99.9900) = 244056.064 us/op
     p(99.9990) = 244056.064 us/op
     p(99.9999) = 244056.064 us/op
    p(100.0000) = 244056.064 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 67.39% complete, ETA 02:46:10
# Fork: 1 of 1
# Warmup Iteration   1: 225461.316 ±(99.9%) 2202.236 us/op
# Warmup Iteration   2: 225315.681 ±(99.9%) 701.705 us/op
# Warmup Iteration   3: 224843.822 ±(99.9%) 635.225 us/op
# Warmup Iteration   4: 224721.488 ±(99.9%) 673.169 us/op
# Warmup Iteration   5: 225385.586 ±(99.9%) 545.531 us/op
Iteration   1: 224313.708 ±(99.9%) 810.255 us/op
                 createNewObjects·p0.00:   221773.824 us/op
                 createNewObjects·p0.50:   224133.120 us/op
                 createNewObjects·p0.90:   226544.845 us/op
                 createNewObjects·p0.95:   227462.349 us/op
                 createNewObjects·p0.99:   227540.992 us/op
                 createNewObjects·p0.999:  227540.992 us/op
                 createNewObjects·p0.9999: 227540.992 us/op
                 createNewObjects·p1.00:   227540.992 us/op

Iteration   2: 224785.567 ±(99.9%) 786.367 us/op
                 createNewObjects·p0.00:   222035.968 us/op
                 createNewObjects·p0.50:   224657.408 us/op
                 createNewObjects·p0.90:   226964.275 us/op
                 createNewObjects·p0.95:   227278.848 us/op
                 createNewObjects·p0.99:   227540.992 us/op
                 createNewObjects·p0.999:  227540.992 us/op
                 createNewObjects·p0.9999: 227540.992 us/op
                 createNewObjects·p1.00:   227540.992 us/op

Iteration   3: 225111.791 ±(99.9%) 1013.932 us/op
                 createNewObjects·p0.00:   222560.256 us/op
                 createNewObjects·p0.50:   224919.552 us/op
                 createNewObjects·p0.90:   228065.280 us/op
                 createNewObjects·p0.95:   228327.424 us/op
                 createNewObjects·p0.99:   230424.576 us/op
                 createNewObjects·p0.999:  230424.576 us/op
                 createNewObjects·p0.9999: 230424.576 us/op
                 createNewObjects·p1.00:   230424.576 us/op

Iteration   4: 225711.809 ±(99.9%) 936.090 us/op
                 createNewObjects·p0.00:   222298.112 us/op
                 createNewObjects·p0.50:   225705.984 us/op
                 createNewObjects·p0.90:   228274.995 us/op
                 createNewObjects·p0.95:   228589.568 us/op
                 createNewObjects·p0.99:   229376.000 us/op
                 createNewObjects·p0.999:  229376.000 us/op
                 createNewObjects·p0.9999: 229376.000 us/op
                 createNewObjects·p1.00:   229376.000 us/op

Iteration   5: 225344.808 ±(99.9%) 690.340 us/op
                 createNewObjects·p0.00:   221511.680 us/op
                 createNewObjects·p0.50:   225443.840 us/op
                 createNewObjects·p0.90:   226754.560 us/op
                 createNewObjects·p0.95:   227462.349 us/op
                 createNewObjects·p0.99:   227540.992 us/op
                 createNewObjects·p0.999:  227540.992 us/op
                 createNewObjects·p0.9999: 227540.992 us/op
                 createNewObjects·p1.00:   227540.992 us/op

Iteration   6: 223970.008 ±(99.9%) 753.110 us/op
                 createNewObjects·p0.00:   220987.392 us/op
                 createNewObjects·p0.50:   224133.120 us/op
                 createNewObjects·p0.90:   225810.842 us/op
                 createNewObjects·p0.95:   226518.630 us/op
                 createNewObjects·p0.99:   227016.704 us/op
                 createNewObjects·p0.999:  227016.704 us/op
                 createNewObjects·p0.9999: 227016.704 us/op
                 createNewObjects·p1.00:   227016.704 us/op

Iteration   7: 225251.601 ±(99.9%) 769.046 us/op
                 createNewObjects·p0.00:   222298.112 us/op
                 createNewObjects·p0.50:   225181.696 us/op
                 createNewObjects·p0.90:   227278.848 us/op
                 createNewObjects·p0.95:   228091.494 us/op
                 createNewObjects·p0.99:   228589.568 us/op
                 createNewObjects·p0.999:  228589.568 us/op
                 createNewObjects·p0.9999: 228589.568 us/op
                 createNewObjects·p1.00:   228589.568 us/op

Iteration   8: 225502.094 ±(99.9%) 738.999 us/op
                 createNewObjects·p0.00:   221773.824 us/op
                 createNewObjects·p0.50:   225443.840 us/op
                 createNewObjects·p0.90:   227016.704 us/op
                 createNewObjects·p0.95:   227383.706 us/op
                 createNewObjects·p0.99:   229113.856 us/op
                 createNewObjects·p0.999:  229113.856 us/op
                 createNewObjects·p0.9999: 229113.856 us/op
                 createNewObjects·p1.00:   229113.856 us/op

Iteration   9: 224622.455 ±(99.9%) 766.348 us/op
                 createNewObjects·p0.00:   222035.968 us/op
                 createNewObjects·p0.50:   224657.408 us/op
                 createNewObjects·p0.90:   226859.418 us/op
                 createNewObjects·p0.95:   227383.706 us/op
                 createNewObjects·p0.99:   227540.992 us/op
                 createNewObjects·p0.999:  227540.992 us/op
                 createNewObjects·p0.9999: 227540.992 us/op
                 createNewObjects·p1.00:   227540.992 us/op

Iteration  10: 224733.138 ±(99.9%) 829.619 us/op
                 createNewObjects·p0.00:   221773.824 us/op
                 createNewObjects·p0.50:   224395.264 us/op
                 createNewObjects·p0.90:   227121.562 us/op
                 createNewObjects·p0.95:   227724.493 us/op
                 createNewObjects·p0.99:   228065.280 us/op
                 createNewObjects·p0.999:  228065.280 us/op
                 createNewObjects·p0.9999: 228065.280 us/op
                 createNewObjects·p1.00:   228065.280 us/op

Iteration  11: 225420.538 ±(99.9%) 727.189 us/op
                 createNewObjects·p0.00:   222822.400 us/op
                 createNewObjects·p0.50:   225443.840 us/op
                 createNewObjects·p0.90:   227540.992 us/op
                 createNewObjects·p0.95:   227803.136 us/op
                 createNewObjects·p0.99:   228065.280 us/op
                 createNewObjects·p0.999:  228065.280 us/op
                 createNewObjects·p0.9999: 228065.280 us/op
                 createNewObjects·p1.00:   228065.280 us/op

Iteration  12: 225379.760 ±(99.9%) 725.010 us/op
                 createNewObjects·p0.00:   221511.680 us/op
                 createNewObjects·p0.50:   225443.840 us/op
                 createNewObjects·p0.90:   226859.418 us/op
                 createNewObjects·p0.95:   227462.349 us/op
                 createNewObjects·p0.99:   228327.424 us/op
                 createNewObjects·p0.999:  228327.424 us/op
                 createNewObjects·p0.9999: 228327.424 us/op
                 createNewObjects·p1.00:   228327.424 us/op

Iteration  13: 224302.057 ±(99.9%) 643.011 us/op
                 createNewObjects·p0.00:   221773.824 us/op
                 createNewObjects·p0.50:   224133.120 us/op
                 createNewObjects·p0.90:   226335.130 us/op
                 createNewObjects·p0.95:   226675.917 us/op
                 createNewObjects·p0.99:   227016.704 us/op
                 createNewObjects·p0.999:  227016.704 us/op
                 createNewObjects·p0.9999: 227016.704 us/op
                 createNewObjects·p1.00:   227016.704 us/op

Iteration  14: 225152.569 ±(99.9%) 712.444 us/op
                 createNewObjects·p0.00:   222298.112 us/op
                 createNewObjects·p0.50:   225181.696 us/op
                 createNewObjects·p0.90:   226754.560 us/op
                 createNewObjects·p0.95:   228012.851 us/op
                 createNewObjects·p0.99:   228589.568 us/op
                 createNewObjects·p0.999:  228589.568 us/op
                 createNewObjects·p0.9999: 228589.568 us/op
                 createNewObjects·p1.00:   228589.568 us/op

Iteration  15: 226160.367 ±(99.9%) 525.807 us/op
                 createNewObjects·p0.00:   223870.976 us/op
                 createNewObjects·p0.50:   226230.272 us/op
                 createNewObjects·p0.90:   227540.992 us/op
                 createNewObjects·p0.95:   228248.781 us/op
                 createNewObjects·p0.99:   228327.424 us/op
                 createNewObjects·p0.999:  228327.424 us/op
                 createNewObjects·p0.9999: 228327.424 us/op
                 createNewObjects·p1.00:   228327.424 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 675
  mean = 225050.818 ±(99.9%) 198.157 us/op

  Histogram, us/op:
    [220000.000, 221000.000) = 1 
    [221000.000, 222000.000) = 8 
    [222000.000, 223000.000) = 53 
    [223000.000, 224000.000) = 119 
    [224000.000, 225000.000) = 148 
    [225000.000, 226000.000) = 173 
    [226000.000, 227000.000) = 91 
    [227000.000, 228000.000) = 60 
    [228000.000, 229000.000) = 19 
    [229000.000, 230000.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 220987.392 us/op
     p(50.0000) = 225181.696 us/op
     p(90.0000) = 227016.704 us/op
     p(95.0000) = 227540.992 us/op
     p(99.0000) = 228589.568 us/op
     p(99.9000) = 230424.576 us/op
     p(99.9900) = 230424.576 us/op
     p(99.9990) = 230424.576 us/op
     p(99.9999) = 230424.576 us/op
    p(100.0000) = 230424.576 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 68.11% complete, ETA 02:42:26
# Fork: 1 of 1
# Warmup Iteration   1: 202259.825 ±(99.9%) 6346.050 us/op
# Warmup Iteration   2: 205911.437 ±(99.9%) 556.331 us/op
# Warmup Iteration   3: 206039.834 ±(99.9%) 626.360 us/op
# Warmup Iteration   4: 205547.645 ±(99.9%) 732.917 us/op
# Warmup Iteration   5: 206184.281 ±(99.9%) 565.279 us/op
Iteration   1: 206569.472 ±(99.9%) 668.233 us/op
                 createNewObjects·p0.00:   202637.312 us/op
                 createNewObjects·p0.50:   206569.472 us/op
                 createNewObjects·p0.90:   207880.192 us/op
                 createNewObjects·p0.95:   208404.480 us/op
                 createNewObjects·p0.99:   209977.344 us/op
                 createNewObjects·p0.999:  209977.344 us/op
                 createNewObjects·p0.9999: 209977.344 us/op
                 createNewObjects·p1.00:   209977.344 us/op

Iteration   2: 206713.919 ±(99.9%) 845.621 us/op
                 createNewObjects·p0.00:   202899.456 us/op
                 createNewObjects·p0.50:   206569.472 us/op
                 createNewObjects·p0.90:   208404.480 us/op
                 createNewObjects·p0.95:   210108.416 us/op
                 createNewObjects·p0.99:   212860.928 us/op
                 createNewObjects·p0.999:  212860.928 us/op
                 createNewObjects·p0.9999: 212860.928 us/op
                 createNewObjects·p1.00:   212860.928 us/op

Iteration   3: 206419.675 ±(99.9%) 652.469 us/op
                 createNewObjects·p0.00:   203423.744 us/op
                 createNewObjects·p0.50:   206307.328 us/op
                 createNewObjects·p0.90:   208142.336 us/op
                 createNewObjects·p0.95:   208404.480 us/op
                 createNewObjects·p0.99:   208928.768 us/op
                 createNewObjects·p0.999:  208928.768 us/op
                 createNewObjects·p0.9999: 208928.768 us/op
                 createNewObjects·p1.00:   208928.768 us/op

Iteration   4: 205724.191 ±(99.9%) 582.888 us/op
                 createNewObjects·p0.00:   203161.600 us/op
                 createNewObjects·p0.50:   205520.896 us/op
                 createNewObjects·p0.90:   207355.904 us/op
                 createNewObjects·p0.95:   207486.976 us/op
                 createNewObjects·p0.99:   207880.192 us/op
                 createNewObjects·p0.999:  207880.192 us/op
                 createNewObjects·p0.9999: 207880.192 us/op
                 createNewObjects·p1.00:   207880.192 us/op

Iteration   5: 206922.564 ±(99.9%) 804.949 us/op
                 createNewObjects·p0.00:   201850.880 us/op
                 createNewObjects·p0.50:   207093.760 us/op
                 createNewObjects·p0.90:   209190.912 us/op
                 createNewObjects·p0.95:   209584.128 us/op
                 createNewObjects·p0.99:   210501.632 us/op
                 createNewObjects·p0.999:  210501.632 us/op
                 createNewObjects·p0.9999: 210501.632 us/op
                 createNewObjects·p1.00:   210501.632 us/op

Iteration   6: 206697.869 ±(99.9%) 650.333 us/op
                 createNewObjects·p0.00:   203685.888 us/op
                 createNewObjects·p0.50:   206831.616 us/op
                 createNewObjects·p0.90:   208142.336 us/op
                 createNewObjects·p0.95:   208928.768 us/op
                 createNewObjects·p0.99:   209715.200 us/op
                 createNewObjects·p0.999:  209715.200 us/op
                 createNewObjects·p0.9999: 209715.200 us/op
                 createNewObjects·p1.00:   209715.200 us/op

Iteration   7: 206681.819 ±(99.9%) 477.800 us/op
                 createNewObjects·p0.00:   204734.464 us/op
                 createNewObjects·p0.50:   206569.472 us/op
                 createNewObjects·p0.90:   207880.192 us/op
                 createNewObjects·p0.95:   208666.624 us/op
                 createNewObjects·p0.99:   208928.768 us/op
                 createNewObjects·p0.999:  208928.768 us/op
                 createNewObjects·p0.9999: 208928.768 us/op
                 createNewObjects·p1.00:   208928.768 us/op

Iteration   8: 206906.514 ±(99.9%) 522.992 us/op
                 createNewObjects·p0.00:   203685.888 us/op
                 createNewObjects·p0.50:   206831.616 us/op
                 createNewObjects·p0.90:   208142.336 us/op
                 createNewObjects·p0.95:   208928.768 us/op
                 createNewObjects·p0.99:   208928.768 us/op
                 createNewObjects·p0.999:  208928.768 us/op
                 createNewObjects·p0.9999: 208928.768 us/op
                 createNewObjects·p1.00:   208928.768 us/op

Iteration   9: 207190.058 ±(99.9%) 620.720 us/op
                 createNewObjects·p0.00:   203948.032 us/op
                 createNewObjects·p0.50:   207093.760 us/op
                 createNewObjects·p0.90:   208928.768 us/op
                 createNewObjects·p0.95:   209190.912 us/op
                 createNewObjects·p0.99:   209190.912 us/op
                 createNewObjects·p0.999:  209190.912 us/op
                 createNewObjects·p0.9999: 209190.912 us/op
                 createNewObjects·p1.00:   209190.912 us/op

Iteration  10: 206205.680 ±(99.9%) 622.523 us/op
                 createNewObjects·p0.00:   203161.600 us/op
                 createNewObjects·p0.50:   206307.328 us/op
                 createNewObjects·p0.90:   207880.192 us/op
                 createNewObjects·p0.95:   208142.336 us/op
                 createNewObjects·p0.99:   208142.336 us/op
                 createNewObjects·p0.999:  208142.336 us/op
                 createNewObjects·p0.9999: 208142.336 us/op
                 createNewObjects·p1.00:   208142.336 us/op

Iteration  11: 205708.142 ±(99.9%) 719.948 us/op
                 createNewObjects·p0.00:   202899.456 us/op
                 createNewObjects·p0.50:   205783.040 us/op
                 createNewObjects·p0.90:   207618.048 us/op
                 createNewObjects·p0.95:   208928.768 us/op
                 createNewObjects·p0.99:   209190.912 us/op
                 createNewObjects·p0.999:  209190.912 us/op
                 createNewObjects·p0.9999: 209190.912 us/op
                 createNewObjects·p1.00:   209190.912 us/op

Iteration  12: 206045.184 ±(99.9%) 665.002 us/op
                 createNewObjects·p0.00:   203685.888 us/op
                 createNewObjects·p0.50:   205783.040 us/op
                 createNewObjects·p0.90:   208142.336 us/op
                 createNewObjects·p0.95:   208404.480 us/op
                 createNewObjects·p0.99:   209190.912 us/op
                 createNewObjects·p0.999:  209190.912 us/op
                 createNewObjects·p0.9999: 209190.912 us/op
                 createNewObjects·p1.00:   209190.912 us/op

Iteration  13: 205750.941 ±(99.9%) 739.930 us/op
                 createNewObjects·p0.00:   203161.600 us/op
                 createNewObjects·p0.50:   205783.040 us/op
                 createNewObjects·p0.90:   207618.048 us/op
                 createNewObjects·p0.95:   208797.696 us/op
                 createNewObjects·p0.99:   209977.344 us/op
                 createNewObjects·p0.999:  209977.344 us/op
                 createNewObjects·p0.9999: 209977.344 us/op
                 createNewObjects·p1.00:   209977.344 us/op

Iteration  14: 205392.499 ±(99.9%) 685.271 us/op
                 createNewObjects·p0.00:   203161.600 us/op
                 createNewObjects·p0.50:   205258.752 us/op
                 createNewObjects·p0.90:   207355.904 us/op
                 createNewObjects·p0.95:   208142.336 us/op
                 createNewObjects·p0.99:   209190.912 us/op
                 createNewObjects·p0.999:  209190.912 us/op
                 createNewObjects·p0.9999: 209190.912 us/op
                 createNewObjects·p1.00:   209190.912 us/op

Iteration  15: 205799.090 ±(99.9%) 615.327 us/op
                 createNewObjects·p0.00:   203423.744 us/op
                 createNewObjects·p0.50:   205520.896 us/op
                 createNewObjects·p0.90:   207355.904 us/op
                 createNewObjects·p0.95:   208142.336 us/op
                 createNewObjects·p0.99:   208666.624 us/op
                 createNewObjects·p0.999:  208666.624 us/op
                 createNewObjects·p0.9999: 208666.624 us/op
                 createNewObjects·p1.00:   208666.624 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 735
  mean = 206315.174 ±(99.9%) 172.853 us/op

  Histogram, us/op:
    [200000.000, 201250.000) = 0 
    [201250.000, 202500.000) = 1 
    [202500.000, 203750.000) = 32 
    [203750.000, 205000.000) = 110 
    [205000.000, 206250.000) = 192 
    [206250.000, 207500.000) = 252 
    [207500.000, 208750.000) = 120 
    [208750.000, 210000.000) = 25 
    [210000.000, 211250.000) = 1 
    [211250.000, 212500.000) = 1 
    [212500.000, 213750.000) = 1 
    [213750.000, 215000.000) = 0 
    [215000.000, 216250.000) = 0 
    [216250.000, 217500.000) = 0 
    [217500.000, 218750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 201850.880 us/op
     p(50.0000) = 206307.328 us/op
     p(90.0000) = 208142.336 us/op
     p(95.0000) = 208666.624 us/op
     p(99.0000) = 209620.828 us/op
     p(99.9000) = 212860.928 us/op
     p(99.9900) = 212860.928 us/op
     p(99.9990) = 212860.928 us/op
     p(99.9999) = 212860.928 us/op
    p(100.0000) = 212860.928 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 68.84% complete, ETA 02:38:42
# Fork: 1 of 1
# Warmup Iteration   1: 201101.148 ±(99.9%) 6884.985 us/op
# Warmup Iteration   2: 175175.468 ±(99.9%) 11958.817 us/op
# Warmup Iteration   3: 204830.762 ±(99.9%) 710.257 us/op
# Warmup Iteration   4: 204536.519 ±(99.9%) 735.501 us/op
# Warmup Iteration   5: 204675.615 ±(99.9%) 731.946 us/op
Iteration   1: 205162.454 ±(99.9%) 606.683 us/op
                 createNewObjects·p0.00:   201326.592 us/op
                 createNewObjects·p0.50:   205258.752 us/op
                 createNewObjects·p0.90:   206569.472 us/op
                 createNewObjects·p0.95:   206962.688 us/op
                 createNewObjects·p0.99:   207093.760 us/op
                 createNewObjects·p0.999:  207093.760 us/op
                 createNewObjects·p0.9999: 207093.760 us/op
                 createNewObjects·p1.00:   207093.760 us/op

Iteration   2: 205355.050 ±(99.9%) 637.270 us/op
                 createNewObjects·p0.00:   202637.312 us/op
                 createNewObjects·p0.50:   205258.752 us/op
                 createNewObjects·p0.90:   207093.760 us/op
                 createNewObjects·p0.95:   207618.048 us/op
                 createNewObjects·p0.99:   208404.480 us/op
                 createNewObjects·p0.999:  208404.480 us/op
                 createNewObjects·p0.9999: 208404.480 us/op
                 createNewObjects·p1.00:   208404.480 us/op

Iteration   3: 205082.206 ±(99.9%) 885.161 us/op
                 createNewObjects·p0.00:   200540.160 us/op
                 createNewObjects·p0.50:   205258.752 us/op
                 createNewObjects·p0.90:   207093.760 us/op
                 createNewObjects·p0.95:   207486.976 us/op
                 createNewObjects·p0.99:   210501.632 us/op
                 createNewObjects·p0.999:  210501.632 us/op
                 createNewObjects·p0.9999: 210501.632 us/op
                 createNewObjects·p1.00:   210501.632 us/op

Iteration   4: 204504.419 ±(99.9%) 794.664 us/op
                 createNewObjects·p0.00:   200015.872 us/op
                 createNewObjects·p0.50:   204734.464 us/op
                 createNewObjects·p0.90:   206045.184 us/op
                 createNewObjects·p0.95:   206831.616 us/op
                 createNewObjects·p0.99:   207618.048 us/op
                 createNewObjects·p0.999:  207618.048 us/op
                 createNewObjects·p0.9999: 207618.048 us/op
                 createNewObjects·p1.00:   207618.048 us/op

Iteration   5: 204825.412 ±(99.9%) 702.563 us/op
                 createNewObjects·p0.00:   201064.448 us/op
                 createNewObjects·p0.50:   204996.608 us/op
                 createNewObjects·p0.90:   206307.328 us/op
                 createNewObjects·p0.95:   206831.616 us/op
                 createNewObjects·p0.99:   207618.048 us/op
                 createNewObjects·p0.999:  207618.048 us/op
                 createNewObjects·p0.9999: 207618.048 us/op
                 createNewObjects·p1.00:   207618.048 us/op

Iteration   6: 206104.033 ±(99.9%) 684.822 us/op
                 createNewObjects·p0.00:   200802.304 us/op
                 createNewObjects·p0.50:   206307.328 us/op
                 createNewObjects·p0.90:   207355.904 us/op
                 createNewObjects·p0.95:   207749.120 us/op
                 createNewObjects·p0.99:   207880.192 us/op
                 createNewObjects·p0.999:  207880.192 us/op
                 createNewObjects·p0.9999: 207880.192 us/op
                 createNewObjects·p1.00:   207880.192 us/op

Iteration   7: 205697.442 ±(99.9%) 867.548 us/op
                 createNewObjects·p0.00:   201326.592 us/op
                 createNewObjects·p0.50:   206307.328 us/op
                 createNewObjects·p0.90:   207618.048 us/op
                 createNewObjects·p0.95:   208535.552 us/op
                 createNewObjects·p0.99:   208666.624 us/op
                 createNewObjects·p0.999:  208666.624 us/op
                 createNewObjects·p0.9999: 208666.624 us/op
                 createNewObjects·p1.00:   208666.624 us/op

Iteration   8: 204354.623 ±(99.9%) 534.574 us/op
                 createNewObjects·p0.00:   201850.880 us/op
                 createNewObjects·p0.50:   204472.320 us/op
                 createNewObjects·p0.90:   205520.896 us/op
                 createNewObjects·p0.95:   205783.040 us/op
                 createNewObjects·p0.99:   206045.184 us/op
                 createNewObjects·p0.999:  206045.184 us/op
                 createNewObjects·p0.9999: 206045.184 us/op
                 createNewObjects·p1.00:   206045.184 us/op

Iteration   9: 204290.424 ±(99.9%) 650.929 us/op
                 createNewObjects·p0.00:   200802.304 us/op
                 createNewObjects·p0.50:   204472.320 us/op
                 createNewObjects·p0.90:   206045.184 us/op
                 createNewObjects·p0.95:   206569.472 us/op
                 createNewObjects·p0.99:   206831.616 us/op
                 createNewObjects·p0.999:  206831.616 us/op
                 createNewObjects·p0.9999: 206831.616 us/op
                 createNewObjects·p1.00:   206831.616 us/op

Iteration  10: 204418.821 ±(99.9%) 782.990 us/op
                 createNewObjects·p0.00:   199753.728 us/op
                 createNewObjects·p0.50:   204472.320 us/op
                 createNewObjects·p0.90:   206307.328 us/op
                 createNewObjects·p0.95:   206831.616 us/op
                 createNewObjects·p0.99:   207355.904 us/op
                 createNewObjects·p0.999:  207355.904 us/op
                 createNewObjects·p0.9999: 207355.904 us/op
                 createNewObjects·p1.00:   207355.904 us/op

Iteration  11: 204220.876 ±(99.9%) 629.486 us/op
                 createNewObjects·p0.00:   200540.160 us/op
                 createNewObjects·p0.50:   204210.176 us/op
                 createNewObjects·p0.90:   205783.040 us/op
                 createNewObjects·p0.95:   205914.112 us/op
                 createNewObjects·p0.99:   206045.184 us/op
                 createNewObjects·p0.999:  206045.184 us/op
                 createNewObjects·p0.9999: 206045.184 us/op
                 createNewObjects·p1.00:   206045.184 us/op

Iteration  12: 203470.930 ±(99.9%) 673.387 us/op
                 createNewObjects·p0.00:   200540.160 us/op
                 createNewObjects·p0.50:   203292.672 us/op
                 createNewObjects·p0.90:   205520.896 us/op
                 createNewObjects·p0.95:   205783.040 us/op
                 createNewObjects·p0.99:   205783.040 us/op
                 createNewObjects·p0.999:  205783.040 us/op
                 createNewObjects·p0.9999: 205783.040 us/op
                 createNewObjects·p1.00:   205783.040 us/op

Iteration  13: 203932.303 ±(99.9%) 832.143 us/op
                 createNewObjects·p0.00:   200278.016 us/op
                 createNewObjects·p0.50:   203948.032 us/op
                 createNewObjects·p0.90:   206281.114 us/op
                 createNewObjects·p0.95:   207067.546 us/op
                 createNewObjects·p0.99:   207618.048 us/op
                 createNewObjects·p0.999:  207618.048 us/op
                 createNewObjects·p0.9999: 207618.048 us/op
                 createNewObjects·p1.00:   207618.048 us/op

Iteration  14: 204071.079 ±(99.9%) 825.447 us/op
                 createNewObjects·p0.00:   201326.592 us/op
                 createNewObjects·p0.50:   203685.888 us/op
                 createNewObjects·p0.90:   206569.472 us/op
                 createNewObjects·p0.95:   207093.760 us/op
                 createNewObjects·p0.99:   207880.192 us/op
                 createNewObjects·p0.999:  207880.192 us/op
                 createNewObjects·p0.9999: 207880.192 us/op
                 createNewObjects·p1.00:   207880.192 us/op

Iteration  15: 203329.372 ±(99.9%) 829.806 us/op
                 createNewObjects·p0.00:   200015.872 us/op
                 createNewObjects·p0.50:   203554.816 us/op
                 createNewObjects·p0.90:   205494.682 us/op
                 createNewObjects·p0.95:   206136.934 us/op
                 createNewObjects·p0.99:   206569.472 us/op
                 createNewObjects·p0.999:  206569.472 us/op
                 createNewObjects·p0.9999: 206569.472 us/op
                 createNewObjects·p1.00:   206569.472 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 738
  mean = 204583.856 ±(99.9%) 200.237 us/op

  Histogram, us/op:
    [190000.000, 192500.000) = 0 
    [192500.000, 195000.000) = 0 
    [195000.000, 197500.000) = 0 
    [197500.000, 200000.000) = 1 
    [200000.000, 202500.000) = 80 
    [202500.000, 205000.000) = 370 
    [205000.000, 207500.000) = 271 
    [207500.000, 210000.000) = 15 
    [210000.000, 212500.000) = 1 
    [212500.000, 215000.000) = 0 
    [215000.000, 217500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 199753.728 us/op
     p(50.0000) = 204734.464 us/op
     p(90.0000) = 206569.472 us/op
     p(95.0000) = 207093.760 us/op
     p(99.0000) = 207880.192 us/op
     p(99.9000) = 210501.632 us/op
     p(99.9900) = 210501.632 us/op
     p(99.9990) = 210501.632 us/op
     p(99.9999) = 210501.632 us/op
    p(100.0000) = 210501.632 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 69.56% complete, ETA 02:34:58
# Fork: 1 of 1
# Warmup Iteration   1: 204381.372 ±(99.9%) 710.185 us/op
# Warmup Iteration   2: 204188.776 ±(99.9%) 878.424 us/op
# Warmup Iteration   3: 155366.699 ±(99.9%) 4701.438 us/op
# Warmup Iteration   4: 152758.458 ±(99.9%) 556.768 us/op
# Warmup Iteration   5: 152520.145 ±(99.9%) 628.790 us/op
Iteration   1: 152941.165 ±(99.9%) 787.865 us/op
                 createNewObjects·p0.00:   149159.936 us/op
                 createNewObjects·p0.50:   153354.240 us/op
                 createNewObjects·p0.90:   155189.248 us/op
                 createNewObjects·p0.95:   155621.786 us/op
                 createNewObjects·p0.99:   156499.968 us/op
                 createNewObjects·p0.999:  156499.968 us/op
                 createNewObjects·p0.9999: 156499.968 us/op
                 createNewObjects·p1.00:   156499.968 us/op

Iteration   2: 153250.971 ±(99.9%) 521.230 us/op
                 createNewObjects·p0.00:   150732.800 us/op
                 createNewObjects·p0.50:   153354.240 us/op
                 createNewObjects·p0.90:   154927.104 us/op
                 createNewObjects·p0.95:   155189.248 us/op
                 createNewObjects·p0.99:   155713.536 us/op
                 createNewObjects·p0.999:  155713.536 us/op
                 createNewObjects·p0.9999: 155713.536 us/op
                 createNewObjects·p1.00:   155713.536 us/op

Iteration   3: 168043.042 ±(99.9%) 10393.304 us/op
                 createNewObjects·p0.00:   150994.944 us/op
                 createNewObjects·p0.50:   154271.744 us/op
                 createNewObjects·p0.90:   204472.320 us/op
                 createNewObjects·p0.95:   206045.184 us/op
                 createNewObjects·p0.99:   206831.616 us/op
                 createNewObjects·p0.999:  206831.616 us/op
                 createNewObjects·p0.9999: 206831.616 us/op
                 createNewObjects·p1.00:   206831.616 us/op

Iteration   4: 204622.117 ±(99.9%) 780.704 us/op
                 createNewObjects·p0.00:   201326.592 us/op
                 createNewObjects·p0.50:   204734.464 us/op
                 createNewObjects·p0.90:   206569.472 us/op
                 createNewObjects·p0.95:   207486.976 us/op
                 createNewObjects·p0.99:   208404.480 us/op
                 createNewObjects·p0.999:  208404.480 us/op
                 createNewObjects·p0.9999: 208404.480 us/op
                 createNewObjects·p1.00:   208404.480 us/op

Iteration   5: 203570.545 ±(99.9%) 614.390 us/op
                 createNewObjects·p0.00:   199491.584 us/op
                 createNewObjects·p0.50:   203423.744 us/op
                 createNewObjects·p0.90:   205468.467 us/op
                 createNewObjects·p0.95:   205520.896 us/op
                 createNewObjects·p0.99:   205783.040 us/op
                 createNewObjects·p0.999:  205783.040 us/op
                 createNewObjects·p0.9999: 205783.040 us/op
                 createNewObjects·p1.00:   205783.040 us/op

Iteration   6: 205510.196 ±(99.9%) 570.875 us/op
                 createNewObjects·p0.00:   202637.312 us/op
                 createNewObjects·p0.50:   205520.896 us/op
                 createNewObjects·p0.90:   207093.760 us/op
                 createNewObjects·p0.95:   207355.904 us/op
                 createNewObjects·p0.99:   207618.048 us/op
                 createNewObjects·p0.999:  207618.048 us/op
                 createNewObjects·p0.9999: 207618.048 us/op
                 createNewObjects·p1.00:   207618.048 us/op

Iteration   7: 205001.958 ±(99.9%) 810.256 us/op
                 createNewObjects·p0.00:   200015.872 us/op
                 createNewObjects·p0.50:   205520.896 us/op
                 createNewObjects·p0.90:   206307.328 us/op
                 createNewObjects·p0.95:   207093.760 us/op
                 createNewObjects·p0.99:   207618.048 us/op
                 createNewObjects·p0.999:  207618.048 us/op
                 createNewObjects·p0.9999: 207618.048 us/op
                 createNewObjects·p1.00:   207618.048 us/op

Iteration   8: 205125.005 ±(99.9%) 685.271 us/op
                 createNewObjects·p0.00:   201326.592 us/op
                 createNewObjects·p0.50:   205520.896 us/op
                 createNewObjects·p0.90:   206831.616 us/op
                 createNewObjects·p0.95:   206962.688 us/op
                 createNewObjects·p0.99:   207880.192 us/op
                 createNewObjects·p0.999:  207880.192 us/op
                 createNewObjects·p0.9999: 207880.192 us/op
                 createNewObjects·p1.00:   207880.192 us/op

Iteration   9: 204761.213 ±(99.9%) 789.048 us/op
                 createNewObjects·p0.00:   199229.440 us/op
                 createNewObjects·p0.50:   204996.608 us/op
                 createNewObjects·p0.90:   206569.472 us/op
                 createNewObjects·p0.95:   207093.760 us/op
                 createNewObjects·p0.99:   207355.904 us/op
                 createNewObjects·p0.999:  207355.904 us/op
                 createNewObjects·p0.9999: 207355.904 us/op
                 createNewObjects·p1.00:   207355.904 us/op

Iteration  10: 205269.452 ±(99.9%) 576.506 us/op
                 createNewObjects·p0.00:   202113.024 us/op
                 createNewObjects·p0.50:   205258.752 us/op
                 createNewObjects·p0.90:   206831.616 us/op
                 createNewObjects·p0.95:   207486.976 us/op
                 createNewObjects·p0.99:   207618.048 us/op
                 createNewObjects·p0.999:  207618.048 us/op
                 createNewObjects·p0.9999: 207618.048 us/op
                 createNewObjects·p1.00:   207618.048 us/op

Iteration  11: 205339.000 ±(99.9%) 629.055 us/op
                 createNewObjects·p0.00:   201064.448 us/op
                 createNewObjects·p0.50:   205520.896 us/op
                 createNewObjects·p0.90:   206831.616 us/op
                 createNewObjects·p0.95:   207486.976 us/op
                 createNewObjects·p0.99:   207618.048 us/op
                 createNewObjects·p0.999:  207618.048 us/op
                 createNewObjects·p0.9999: 207618.048 us/op
                 createNewObjects·p1.00:   207618.048 us/op

Iteration  12: 204408.121 ±(99.9%) 589.176 us/op
                 createNewObjects·p0.00:   202113.024 us/op
                 createNewObjects·p0.50:   204472.320 us/op
                 createNewObjects·p0.90:   206045.184 us/op
                 createNewObjects·p0.95:   206831.616 us/op
                 createNewObjects·p0.99:   208142.336 us/op
                 createNewObjects·p0.999:  208142.336 us/op
                 createNewObjects·p0.9999: 208142.336 us/op
                 createNewObjects·p1.00:   208142.336 us/op

Iteration  13: 204199.476 ±(99.9%) 552.340 us/op
                 createNewObjects·p0.00:   201850.880 us/op
                 createNewObjects·p0.50:   204210.176 us/op
                 createNewObjects·p0.90:   205783.040 us/op
                 createNewObjects·p0.95:   206176.256 us/op
                 createNewObjects·p0.99:   206307.328 us/op
                 createNewObjects·p0.999:  206307.328 us/op
                 createNewObjects·p0.9999: 206307.328 us/op
                 createNewObjects·p1.00:   206307.328 us/op

Iteration  14: 204456.270 ±(99.9%) 614.159 us/op
                 createNewObjects·p0.00:   200802.304 us/op
                 createNewObjects·p0.50:   204472.320 us/op
                 createNewObjects·p0.90:   206045.184 us/op
                 createNewObjects·p0.95:   206307.328 us/op
                 createNewObjects·p0.99:   206569.472 us/op
                 createNewObjects·p0.999:  206569.472 us/op
                 createNewObjects·p0.9999: 206569.472 us/op
                 createNewObjects·p1.00:   206569.472 us/op

Iteration  15: 205627.894 ±(99.9%) 711.381 us/op
                 createNewObjects·p0.00:   201064.448 us/op
                 createNewObjects·p0.50:   206045.184 us/op
                 createNewObjects·p0.90:   207093.760 us/op
                 createNewObjects·p0.95:   207486.976 us/op
                 createNewObjects·p0.99:   208142.336 us/op
                 createNewObjects·p0.999:  208142.336 us/op
                 createNewObjects·p0.9999: 208142.336 us/op
                 createNewObjects·p1.00:   208142.336 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 781
  mean = 193254.168 ±(99.9%) 2550.635 us/op

  Histogram, us/op:
    [140000.000, 145000.000) = 0 
    [145000.000, 150000.000) = 7 
    [150000.000, 155000.000) = 148 
    [155000.000, 160000.000) = 19 
    [160000.000, 165000.000) = 0 
    [165000.000, 170000.000) = 0 
    [170000.000, 175000.000) = 1 
    [175000.000, 180000.000) = 0 
    [180000.000, 185000.000) = 0 
    [185000.000, 190000.000) = 0 
    [190000.000, 195000.000) = 0 
    [195000.000, 200000.000) = 2 
    [200000.000, 205000.000) = 348 

  Percentiles, us/op:
      p(0.0000) = 149159.936 us/op
     p(50.0000) = 204472.320 us/op
     p(90.0000) = 206307.328 us/op
     p(95.0000) = 206831.616 us/op
     p(99.0000) = 207618.048 us/op
     p(99.9000) = 208404.480 us/op
     p(99.9900) = 208404.480 us/op
     p(99.9990) = 208404.480 us/op
     p(99.9999) = 208404.480 us/op
    p(100.0000) = 208404.480 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 70.29% complete, ETA 02:31:14
# Fork: 1 of 1
# Warmup Iteration   1: 201017.262 ±(99.9%) 537.105 us/op
# Warmup Iteration   2: 200592.589 ±(99.9%) 583.307 us/op
# Warmup Iteration   3: 200639.775 ±(99.9%) 675.527 us/op
# Warmup Iteration   4: 200131.215 ±(99.9%) 869.211 us/op
# Warmup Iteration   5: 201452.421 ±(99.9%) 623.872 us/op
Iteration   1: 201206.006 ±(99.9%) 616.652 us/op
                 createNewObjects·p0.00:   197656.576 us/op
                 createNewObjects·p0.50:   201326.592 us/op
                 createNewObjects·p0.90:   202899.456 us/op
                 createNewObjects·p0.95:   203017.421 us/op
                 createNewObjects·p0.99:   203423.744 us/op
                 createNewObjects·p0.999:  203423.744 us/op
                 createNewObjects·p0.9999: 203423.744 us/op
                 createNewObjects·p1.00:   203423.744 us/op

Iteration   2: 201358.049 ±(99.9%) 483.886 us/op
                 createNewObjects·p0.00:   198705.152 us/op
                 createNewObjects·p0.50:   201588.736 us/op
                 createNewObjects·p0.90:   202611.098 us/op
                 createNewObjects·p0.95:   203017.421 us/op
                 createNewObjects·p0.99:   203161.600 us/op
                 createNewObjects·p0.999:  203161.600 us/op
                 createNewObjects·p0.9999: 203161.600 us/op
                 createNewObjects·p1.00:   203161.600 us/op

Iteration   3: 199409.343 ±(99.9%) 769.333 us/op
                 createNewObjects·p0.00:   196083.712 us/op
                 createNewObjects·p0.50:   199229.440 us/op
                 createNewObjects·p0.90:   201588.736 us/op
                 createNewObjects·p0.95:   202217.882 us/op
                 createNewObjects·p0.99:   203685.888 us/op
                 createNewObjects·p0.999:  203685.888 us/op
                 createNewObjects·p0.9999: 203685.888 us/op
                 createNewObjects·p1.00:   203685.888 us/op

Iteration   4: 199973.929 ±(99.9%) 794.514 us/op
                 createNewObjects·p0.00:   196083.712 us/op
                 createNewObjects·p0.50:   200278.016 us/op
                 createNewObjects·p0.90:   201850.880 us/op
                 createNewObjects·p0.95:   202375.168 us/op
                 createNewObjects·p0.99:   202637.312 us/op
                 createNewObjects·p0.999:  202637.312 us/op
                 createNewObjects·p0.9999: 202637.312 us/op
                 createNewObjects·p1.00:   202637.312 us/op

Iteration   5: 199979.172 ±(99.9%) 792.196 us/op
                 createNewObjects·p0.00:   195559.424 us/op
                 createNewObjects·p0.50:   200278.016 us/op
                 createNewObjects·p0.90:   201588.736 us/op
                 createNewObjects·p0.95:   202755.277 us/op
                 createNewObjects·p0.99:   202899.456 us/op
                 createNewObjects·p0.999:  202899.456 us/op
                 createNewObjects·p0.9999: 202899.456 us/op
                 createNewObjects·p1.00:   202899.456 us/op

Iteration   6: 200152.187 ±(99.9%) 629.902 us/op
                 createNewObjects·p0.00:   197656.576 us/op
                 createNewObjects·p0.50:   200278.016 us/op
                 createNewObjects·p0.90:   201824.666 us/op
                 createNewObjects·p0.95:   202113.024 us/op
                 createNewObjects·p0.99:   202637.312 us/op
                 createNewObjects·p0.999:  202637.312 us/op
                 createNewObjects·p0.9999: 202637.312 us/op
                 createNewObjects·p1.00:   202637.312 us/op

Iteration   7: 200141.701 ±(99.9%) 618.338 us/op
                 createNewObjects·p0.00:   197394.432 us/op
                 createNewObjects·p0.50:   200015.872 us/op
                 createNewObjects·p0.90:   201824.666 us/op
                 createNewObjects·p0.95:   202348.954 us/op
                 createNewObjects·p0.99:   203161.600 us/op
                 createNewObjects·p0.999:  203161.600 us/op
                 createNewObjects·p0.9999: 203161.600 us/op
                 createNewObjects·p1.00:   203161.600 us/op

Iteration   8: 200068.301 ±(99.9%) 769.301 us/op
                 createNewObjects·p0.00:   196870.144 us/op
                 createNewObjects·p0.50:   200146.944 us/op
                 createNewObjects·p0.90:   201850.880 us/op
                 createNewObjects·p0.95:   202466.918 us/op
                 createNewObjects·p0.99:   204996.608 us/op
                 createNewObjects·p0.999:  204996.608 us/op
                 createNewObjects·p0.9999: 204996.608 us/op
                 createNewObjects·p1.00:   204996.608 us/op

Iteration   9: 200823.276 ±(99.9%) 460.746 us/op
                 createNewObjects·p0.00:   198705.152 us/op
                 createNewObjects·p0.50:   200802.304 us/op
                 createNewObjects·p0.90:   202086.810 us/op
                 createNewObjects·p0.95:   202230.989 us/op
                 createNewObjects·p0.99:   202637.312 us/op
                 createNewObjects·p0.999:  202637.312 us/op
                 createNewObjects·p0.9999: 202637.312 us/op
                 createNewObjects·p1.00:   202637.312 us/op

Iteration  10: 200482.488 ±(99.9%) 603.742 us/op
                 createNewObjects·p0.00:   197394.432 us/op
                 createNewObjects·p0.50:   200671.232 us/op
                 createNewObjects·p0.90:   201850.880 us/op
                 createNewObjects·p0.95:   202230.989 us/op
                 createNewObjects·p0.99:   202637.312 us/op
                 createNewObjects·p0.999:  202637.312 us/op
                 createNewObjects·p0.9999: 202637.312 us/op
                 createNewObjects·p1.00:   202637.312 us/op

Iteration  11: 200713.175 ±(99.9%) 507.440 us/op
                 createNewObjects·p0.00:   197918.720 us/op
                 createNewObjects·p0.50:   200802.304 us/op
                 createNewObjects·p0.90:   202086.810 us/op
                 createNewObjects·p0.95:   202375.168 us/op
                 createNewObjects·p0.99:   202899.456 us/op
                 createNewObjects·p0.999:  202899.456 us/op
                 createNewObjects·p0.9999: 202899.456 us/op
                 createNewObjects·p1.00:   202899.456 us/op

Iteration  12: 200298.988 ±(99.9%) 440.926 us/op
                 createNewObjects·p0.00:   198443.008 us/op
                 createNewObjects·p0.50:   200278.016 us/op
                 createNewObjects·p0.90:   201326.592 us/op
                 createNewObjects·p0.95:   201706.701 us/op
                 createNewObjects·p0.99:   202375.168 us/op
                 createNewObjects·p0.999:  202375.168 us/op
                 createNewObjects·p0.9999: 202375.168 us/op
                 createNewObjects·p1.00:   202375.168 us/op

Iteration  13: 200639.775 ±(99.9%) 663.723 us/op
                 createNewObjects·p0.00:   196345.856 us/op
                 createNewObjects·p0.50:   200933.376 us/op
                 createNewObjects·p0.90:   201850.880 us/op
                 createNewObjects·p0.95:   202230.989 us/op
                 createNewObjects·p0.99:   202899.456 us/op
                 createNewObjects·p0.999:  202899.456 us/op
                 createNewObjects·p0.9999: 202899.456 us/op
                 createNewObjects·p1.00:   202899.456 us/op

Iteration  14: 200959.590 ±(99.9%) 544.294 us/op
                 createNewObjects·p0.00:   198443.008 us/op
                 createNewObjects·p0.50:   201064.448 us/op
                 createNewObjects·p0.90:   202375.168 us/op
                 createNewObjects·p0.95:   202493.133 us/op
                 createNewObjects·p0.99:   202637.312 us/op
                 createNewObjects·p0.999:  202637.312 us/op
                 createNewObjects·p0.9999: 202637.312 us/op
                 createNewObjects·p1.00:   202637.312 us/op

Iteration  15: 201064.448 ±(99.9%) 595.552 us/op
                 createNewObjects·p0.00:   198443.008 us/op
                 createNewObjects·p0.50:   201064.448 us/op
                 createNewObjects·p0.90:   202375.168 us/op
                 createNewObjects·p0.95:   203279.565 us/op
                 createNewObjects·p0.99:   204734.464 us/op
                 createNewObjects·p0.999:  204734.464 us/op
                 createNewObjects·p0.9999: 204734.464 us/op
                 createNewObjects·p1.00:   204734.464 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 751
  mean = 200483.263 ±(99.9%) 164.962 us/op

  Histogram, us/op:
    [195000.000, 196000.000) = 1 
    [196000.000, 197000.000) = 9 
    [197000.000, 198000.000) = 34 
    [198000.000, 199000.000) = 72 
    [199000.000, 200000.000) = 108 
    [200000.000, 201000.000) = 231 
    [201000.000, 202000.000) = 210 
    [202000.000, 203000.000) = 76 
    [203000.000, 204000.000) = 8 

  Percentiles, us/op:
      p(0.0000) = 195559.424 us/op
     p(50.0000) = 200540.160 us/op
     p(90.0000) = 202113.024 us/op
     p(95.0000) = 202375.168 us/op
     p(99.0000) = 203161.600 us/op
     p(99.9000) = 204996.608 us/op
     p(99.9900) = 204996.608 us/op
     p(99.9990) = 204996.608 us/op
     p(99.9999) = 204996.608 us/op
    p(100.0000) = 204996.608 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 71.01% complete, ETA 02:27:30
# Fork: 1 of 1
# Warmup Iteration   1: 1450929.591 ±(99.9%) 168000.534 us/op
# Warmup Iteration   2: 1408761.856 ±(99.9%) 120914.784 us/op
# Warmup Iteration   3: 1406140.416 ±(99.9%) 117626.622 us/op
# Warmup Iteration   4: 1433665.536 ±(99.9%) 142022.375 us/op
# Warmup Iteration   5: 1418199.040 ±(99.9%) 129499.827 us/op
Iteration   1: 1420034.048 ±(99.9%) 120031.839 us/op
                 fillHeap·p0.00:   1277165.568 us/op
                 fillHeap·p0.50:   1429209.088 us/op
                 fillHeap·p0.90:   1480589.312 us/op
                 fillHeap·p0.95:   1480589.312 us/op
                 fillHeap·p0.99:   1480589.312 us/op
                 fillHeap·p0.999:  1480589.312 us/op
                 fillHeap·p0.9999: 1480589.312 us/op
                 fillHeap·p1.00:   1480589.312 us/op

Iteration   2: 1417936.896 ±(99.9%) 133803.576 us/op
                 fillHeap·p0.00:   1258291.200 us/op
                 fillHeap·p0.50:   1435500.544 us/op
                 fillHeap·p0.90:   1476395.008 us/op
                 fillHeap·p0.95:   1476395.008 us/op
                 fillHeap·p0.99:   1476395.008 us/op
                 fillHeap·p0.999:  1476395.008 us/op
                 fillHeap·p0.9999: 1476395.008 us/op
                 fillHeap·p1.00:   1476395.008 us/op

Iteration   3: 1434714.112 ±(99.9%) 134556.742 us/op
                 fillHeap·p0.00:   1279262.720 us/op
                 fillHeap·p0.50:   1449132.032 us/op
                 fillHeap·p0.90:   1501560.832 us/op
                 fillHeap·p0.95:   1501560.832 us/op
                 fillHeap·p0.99:   1501560.832 us/op
                 fillHeap·p0.999:  1501560.832 us/op
                 fillHeap·p0.9999: 1501560.832 us/op
                 fillHeap·p1.00:   1501560.832 us/op

Iteration   4: 1414004.736 ±(99.9%) 122911.798 us/op
                 fillHeap·p0.00:   1268776.960 us/op
                 fillHeap·p0.50:   1432354.816 us/op
                 fillHeap·p0.90:   1468006.400 us/op
                 fillHeap·p0.95:   1468006.400 us/op
                 fillHeap·p0.99:   1468006.400 us/op
                 fillHeap·p0.999:  1468006.400 us/op
                 fillHeap·p0.9999: 1468006.400 us/op
                 fillHeap·p1.00:   1468006.400 us/op

Iteration   5: 1422917.632 ±(99.9%) 122016.245 us/op
                 fillHeap·p0.00:   1277165.568 us/op
                 fillHeap·p0.50:   1442840.576 us/op
                 fillHeap·p0.90:   1478492.160 us/op
                 fillHeap·p0.95:   1478492.160 us/op
                 fillHeap·p0.99:   1478492.160 us/op
                 fillHeap·p0.999:  1478492.160 us/op
                 fillHeap·p0.9999: 1478492.160 us/op
                 fillHeap·p1.00:   1478492.160 us/op

Iteration   6: 1401946.112 ±(99.9%) 119159.218 us/op
                 fillHeap·p0.00:   1260388.352 us/op
                 fillHeap·p0.50:   1410334.720 us/op
                 fillHeap·p0.90:   1463812.096 us/op
                 fillHeap·p0.95:   1463812.096 us/op
                 fillHeap·p0.99:   1463812.096 us/op
                 fillHeap·p0.999:  1463812.096 us/op
                 fillHeap·p0.9999: 1463812.096 us/op
                 fillHeap·p1.00:   1463812.096 us/op

Iteration   7: 1424228.352 ±(99.9%) 130765.100 us/op
                 fillHeap·p0.00:   1272971.264 us/op
                 fillHeap·p0.50:   1436549.120 us/op
                 fillHeap·p0.90:   1495269.376 us/op
                 fillHeap·p0.95:   1495269.376 us/op
                 fillHeap·p0.99:   1495269.376 us/op
                 fillHeap·p0.999:  1495269.376 us/op
                 fillHeap·p0.9999: 1495269.376 us/op
                 fillHeap·p1.00:   1495269.376 us/op

Iteration   8: 1407451.136 ±(99.9%) 121836.109 us/op
                 fillHeap·p0.00:   1266679.808 us/op
                 fillHeap·p0.50:   1418723.328 us/op
                 fillHeap·p0.90:   1470103.552 us/op
                 fillHeap·p0.95:   1470103.552 us/op
                 fillHeap·p0.99:   1470103.552 us/op
                 fillHeap·p0.999:  1470103.552 us/op
                 fillHeap·p0.9999: 1470103.552 us/op
                 fillHeap·p1.00:   1470103.552 us/op

Iteration   9: 1423441.920 ±(99.9%) 125738.363 us/op
                 fillHeap·p0.00:   1277165.568 us/op
                 fillHeap·p0.50:   1439694.848 us/op
                 fillHeap·p0.90:   1478492.160 us/op
                 fillHeap·p0.95:   1478492.160 us/op
                 fillHeap·p0.99:   1478492.160 us/op
                 fillHeap·p0.999:  1478492.160 us/op
                 fillHeap·p0.9999: 1478492.160 us/op
                 fillHeap·p1.00:   1478492.160 us/op

Iteration  10: 1412431.872 ±(99.9%) 128614.432 us/op
                 fillHeap·p0.00:   1260388.352 us/op
                 fillHeap·p0.50:   1429209.088 us/op
                 fillHeap·p0.90:   1478492.160 us/op
                 fillHeap·p0.95:   1478492.160 us/op
                 fillHeap·p0.99:   1478492.160 us/op
                 fillHeap·p0.999:  1478492.160 us/op
                 fillHeap·p0.9999: 1478492.160 us/op
                 fillHeap·p1.00:   1478492.160 us/op

Iteration  11: 1411383.296 ±(99.9%) 117938.630 us/op
                 fillHeap·p0.00:   1270874.112 us/op
                 fillHeap·p0.50:   1425014.784 us/op
                 fillHeap·p0.90:   1461714.944 us/op
                 fillHeap·p0.95:   1461714.944 us/op
                 fillHeap·p0.99:   1461714.944 us/op
                 fillHeap·p0.999:  1461714.944 us/op
                 fillHeap·p0.9999: 1461714.944 us/op
                 fillHeap·p1.00:   1461714.944 us/op

Iteration  12: 1412694.016 ±(99.9%) 128987.795 us/op
                 fillHeap·p0.00:   1264582.656 us/op
                 fillHeap·p0.50:   1426063.360 us/op
                 fillHeap·p0.90:   1480589.312 us/op
                 fillHeap·p0.95:   1480589.312 us/op
                 fillHeap·p0.99:   1480589.312 us/op
                 fillHeap·p0.999:  1480589.312 us/op
                 fillHeap·p0.9999: 1480589.312 us/op
                 fillHeap·p1.00:   1480589.312 us/op

Iteration  13: 1429995.520 ±(99.9%) 126061.040 us/op
                 fillHeap·p0.00:   1287651.328 us/op
                 fillHeap·p0.50:   1433403.392 us/op
                 fillHeap·p0.90:   1501560.832 us/op
                 fillHeap·p0.95:   1501560.832 us/op
                 fillHeap·p0.99:   1501560.832 us/op
                 fillHeap·p0.999:  1501560.832 us/op
                 fillHeap·p0.9999: 1501560.832 us/op
                 fillHeap·p1.00:   1501560.832 us/op

Iteration  14: 1421606.912 ±(99.9%) 114869.157 us/op
                 fillHeap·p0.00:   1285554.176 us/op
                 fillHeap·p0.50:   1438646.272 us/op
                 fillHeap·p0.90:   1476395.008 us/op
                 fillHeap·p0.95:   1476395.008 us/op
                 fillHeap·p0.99:   1476395.008 us/op
                 fillHeap·p0.999:  1476395.008 us/op
                 fillHeap·p0.9999: 1476395.008 us/op
                 fillHeap·p1.00:   1476395.008 us/op

Iteration  15: 1418199.040 ±(99.9%) 119289.255 us/op
                 fillHeap·p0.00:   1277165.568 us/op
                 fillHeap·p0.50:   1435500.544 us/op
                 fillHeap·p0.90:   1470103.552 us/op
                 fillHeap·p0.95:   1470103.552 us/op
                 fillHeap·p0.99:   1470103.552 us/op
                 fillHeap·p0.999:  1470103.552 us/op
                 fillHeap·p0.9999: 1470103.552 us/op
                 fillHeap·p1.00:   1470103.552 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 120
  mean = 1418199.040 ±(99.9%) 19022.747 us/op

  Histogram, us/op:
    [1200000.000, 1225000.000) = 0 
    [1225000.000, 1250000.000) = 0 
    [1250000.000, 1275000.000) = 8 
    [1275000.000, 1300000.000) = 7 
    [1300000.000, 1325000.000) = 0 
    [1325000.000, 1350000.000) = 0 
    [1350000.000, 1375000.000) = 0 
    [1375000.000, 1400000.000) = 8 
    [1400000.000, 1425000.000) = 30 
    [1425000.000, 1450000.000) = 27 
    [1450000.000, 1475000.000) = 28 
    [1475000.000, 1500000.000) = 10 
    [1500000.000, 1525000.000) = 2 
    [1525000.000, 1550000.000) = 0 
    [1550000.000, 1575000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1258291.200 us/op
     p(50.0000) = 1430257.664 us/op
     p(90.0000) = 1475975.578 us/op
     p(95.0000) = 1480589.312 us/op
     p(99.0000) = 1501560.832 us/op
     p(99.9000) = 1501560.832 us/op
     p(99.9900) = 1501560.832 us/op
     p(99.9990) = 1501560.832 us/op
     p(99.9999) = 1501560.832 us/op
    p(100.0000) = 1501560.832 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 71.74% complete, ETA 02:23:57
# Fork: 1 of 1
# Warmup Iteration   1: 1015021.568 ±(99.9%) 98203.164 us/op
# Warmup Iteration   2: 1022256.742 ±(99.9%) 86577.328 us/op
# Warmup Iteration   3: 1028653.056 ±(99.9%) 87859.738 us/op
# Warmup Iteration   4: 1025717.043 ±(99.9%) 86051.128 us/op
# Warmup Iteration   5: 1027499.622 ±(99.9%) 93568.210 us/op
Iteration   1: 1026555.904 ±(99.9%) 84267.991 us/op
                 fillHeap·p0.00:   941621.248 us/op
                 fillHeap·p0.50:   1035468.800 us/op
                 fillHeap·p0.90:   1105828.250 us/op
                 fillHeap·p0.95:   1107296.256 us/op
                 fillHeap·p0.99:   1107296.256 us/op
                 fillHeap·p0.999:  1107296.256 us/op
                 fillHeap·p0.9999: 1107296.256 us/op
                 fillHeap·p1.00:   1107296.256 us/op

Iteration   2: 1024668.467 ±(99.9%) 88410.393 us/op
                 fillHeap·p0.00:   938475.520 us/op
                 fillHeap·p0.50:   1025507.328 us/op
                 fillHeap·p0.90:   1115055.718 us/op
                 fillHeap·p0.95:   1117782.016 us/op
                 fillHeap·p0.99:   1117782.016 us/op
                 fillHeap·p0.999:  1117782.016 us/op
                 fillHeap·p0.9999: 1117782.016 us/op
                 fillHeap·p1.00:   1117782.016 us/op

Iteration   3: 1021627.597 ±(99.9%) 77825.199 us/op
                 fillHeap·p0.00:   937426.944 us/op
                 fillHeap·p0.50:   1023934.464 us/op
                 fillHeap·p0.90:   1090099.610 us/op
                 fillHeap·p0.95:   1090519.040 us/op
                 fillHeap·p0.99:   1090519.040 us/op
                 fillHeap·p0.999:  1090519.040 us/op
                 fillHeap·p0.9999: 1090519.040 us/op
                 fillHeap·p1.00:   1090519.040 us/op

Iteration   4: 1033161.933 ±(99.9%) 90081.999 us/op
                 fillHeap·p0.00:   940572.672 us/op
                 fillHeap·p0.50:   1033371.648 us/op
                 fillHeap·p0.90:   1123444.326 us/op
                 fillHeap·p0.95:   1126170.624 us/op
                 fillHeap·p0.99:   1126170.624 us/op
                 fillHeap·p0.999:  1126170.624 us/op
                 fillHeap·p0.9999: 1126170.624 us/op
                 fillHeap·p1.00:   1126170.624 us/op

Iteration   5: 1020998.451 ±(99.9%) 83318.395 us/op
                 fillHeap·p0.00:   938475.520 us/op
                 fillHeap·p0.50:   1022361.600 us/op
                 fillHeap·p0.90:   1097859.072 us/op
                 fillHeap·p0.95:   1098907.648 us/op
                 fillHeap·p0.99:   1098907.648 us/op
                 fillHeap·p0.999:  1098907.648 us/op
                 fillHeap·p0.9999: 1098907.648 us/op
                 fillHeap·p1.00:   1098907.648 us/op

Iteration   6: 1026660.762 ±(99.9%) 85607.521 us/op
                 fillHeap·p0.00:   944766.976 us/op
                 fillHeap·p0.50:   1028128.768 us/op
                 fillHeap·p0.90:   1107925.402 us/op
                 fillHeap·p0.95:   1109393.408 us/op
                 fillHeap·p0.99:   1109393.408 us/op
                 fillHeap·p0.999:  1109393.408 us/op
                 fillHeap·p0.9999: 1109393.408 us/op
                 fillHeap·p1.00:   1109393.408 us/op

Iteration   7: 1021103.309 ±(99.9%) 85363.675 us/op
                 fillHeap·p0.00:   937426.944 us/op
                 fillHeap·p0.50:   1019740.160 us/op
                 fillHeap·p0.90:   1103940.813 us/op
                 fillHeap·p0.95:   1105199.104 us/op
                 fillHeap·p0.99:   1105199.104 us/op
                 fillHeap·p0.999:  1105199.104 us/op
                 fillHeap·p0.9999: 1105199.104 us/op
                 fillHeap·p1.00:   1105199.104 us/op

Iteration   8: 1025087.898 ±(99.9%) 87503.687 us/op
                 fillHeap·p0.00:   933232.640 us/op
                 fillHeap·p0.50:   1028128.768 us/op
                 fillHeap·p0.90:   1104150.528 us/op
                 fillHeap·p0.95:   1105199.104 us/op
                 fillHeap·p0.99:   1105199.104 us/op
                 fillHeap·p0.999:  1105199.104 us/op
                 fillHeap·p0.9999: 1105199.104 us/op
                 fillHeap·p1.00:   1105199.104 us/op

Iteration   9: 1019320.730 ±(99.9%) 85077.457 us/op
                 fillHeap·p0.00:   939524.096 us/op
                 fillHeap·p0.50:   1019215.872 us/op
                 fillHeap·p0.90:   1106667.110 us/op
                 fillHeap·p0.95:   1109393.408 us/op
                 fillHeap·p0.99:   1109393.408 us/op
                 fillHeap·p0.999:  1109393.408 us/op
                 fillHeap·p0.9999: 1109393.408 us/op
                 fillHeap·p1.00:   1109393.408 us/op

Iteration  10: 1030121.062 ±(99.9%) 88123.772 us/op
                 fillHeap·p0.00:   946864.128 us/op
                 fillHeap·p0.50:   1032323.072 us/op
                 fillHeap·p0.90:   1114636.288 us/op
                 fillHeap·p0.95:   1115684.864 us/op
                 fillHeap·p0.99:   1115684.864 us/op
                 fillHeap·p0.999:  1115684.864 us/op
                 fillHeap·p0.9999: 1115684.864 us/op
                 fillHeap·p1.00:   1115684.864 us/op

Iteration  11: 1028653.056 ±(99.9%) 83435.448 us/op
                 fillHeap·p0.00:   946864.128 us/op
                 fillHeap·p0.50:   1029177.344 us/op
                 fillHeap·p0.90:   1112958.566 us/op
                 fillHeap·p0.95:   1115684.864 us/op
                 fillHeap·p0.99:   1115684.864 us/op
                 fillHeap·p0.999:  1115684.864 us/op
                 fillHeap·p0.9999: 1115684.864 us/op
                 fillHeap·p1.00:   1115684.864 us/op

Iteration  12: 1025297.613 ±(99.9%) 87349.097 us/op
                 fillHeap·p0.00:   944766.976 us/op
                 fillHeap·p0.50:   1023410.176 us/op
                 fillHeap·p0.90:   1110441.984 us/op
                 fillHeap·p0.95:   1111490.560 us/op
                 fillHeap·p0.99:   1111490.560 us/op
                 fillHeap·p0.999:  1111490.560 us/op
                 fillHeap·p0.9999: 1111490.560 us/op
                 fillHeap·p1.00:   1111490.560 us/op

Iteration  13: 1026136.474 ±(99.9%) 85070.072 us/op
                 fillHeap·p0.00:   943718.400 us/op
                 fillHeap·p0.50:   1026555.904 us/op
                 fillHeap·p0.90:   1111490.560 us/op
                 fillHeap·p0.95:   1113587.712 us/op
                 fillHeap·p0.99:   1113587.712 us/op
                 fillHeap·p0.999:  1113587.712 us/op
                 fillHeap·p0.9999: 1113587.712 us/op
                 fillHeap·p1.00:   1113587.712 us/op

Iteration  14: 1036622.234 ±(99.9%) 88481.115 us/op
                 fillHeap·p0.00:   952107.008 us/op
                 fillHeap·p0.50:   1037565.952 us/op
                 fillHeap·p0.90:   1123863.757 us/op
                 fillHeap·p0.95:   1126170.624 us/op
                 fillHeap·p0.99:   1126170.624 us/op
                 fillHeap·p0.999:  1126170.624 us/op
                 fillHeap·p0.9999: 1126170.624 us/op
                 fillHeap·p1.00:   1126170.624 us/op

Iteration  15: 1031903.642 ±(99.9%) 88175.249 us/op
                 fillHeap·p0.00:   946864.128 us/op
                 fillHeap·p0.50:   1032847.360 us/op
                 fillHeap·p0.90:   1120088.883 us/op
                 fillHeap·p0.95:   1121976.320 us/op
                 fillHeap·p0.99:   1121976.320 us/op
                 fillHeap·p0.999:  1121976.320 us/op
                 fillHeap·p0.9999: 1121976.320 us/op
                 fillHeap·p1.00:   1121976.320 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 150
  mean = 1026527.942 ±(99.9%) 14884.726 us/op

  Histogram, us/op:
    [ 900000.000,  925000.000) = 0 
    [ 925000.000,  950000.000) = 23 
    [ 950000.000,  975000.000) = 7 
    [ 975000.000, 1000000.000) = 16 
    [1000000.000, 1025000.000) = 26 
    [1025000.000, 1050000.000) = 27 
    [1050000.000, 1075000.000) = 20 
    [1075000.000, 1100000.000) = 14 
    [1100000.000, 1125000.000) = 15 
    [1125000.000, 1150000.000) = 2 
    [1150000.000, 1175000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 933232.640 us/op
     p(50.0000) = 1029701.632 us/op
     p(90.0000) = 1103101.952 us/op
     p(95.0000) = 1112434.278 us/op
     p(99.0000) = 1126170.624 us/op
     p(99.9000) = 1126170.624 us/op
     p(99.9900) = 1126170.624 us/op
     p(99.9990) = 1126170.624 us/op
     p(99.9999) = 1126170.624 us/op
    p(100.0000) = 1126170.624 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 72.46% complete, ETA 02:20:15
# Fork: 1 of 1
# Warmup Iteration   1: 873114.283 ±(99.9%) 70712.804 us/op
# Warmup Iteration   2: 868483.072 ±(99.9%) 49533.476 us/op
# Warmup Iteration   3: 870667.605 ±(99.9%) 48188.366 us/op
# Warmup Iteration   4: 872153.088 ±(99.9%) 47103.509 us/op
# Warmup Iteration   5: 868046.165 ±(99.9%) 49496.080 us/op
Iteration   1: 870405.461 ±(99.9%) 49769.069 us/op
                 fillHeap·p0.00:   810549.248 us/op
                 fillHeap·p0.50:   871890.944 us/op
                 fillHeap·p0.90:   929038.336 us/op
                 fillHeap·p0.95:   935329.792 us/op
                 fillHeap·p0.99:   935329.792 us/op
                 fillHeap·p0.999:  935329.792 us/op
                 fillHeap·p0.9999: 935329.792 us/op
                 fillHeap·p1.00:   935329.792 us/op

Iteration   2: 869706.411 ±(99.9%) 43265.002 us/op
                 fillHeap·p0.00:   822083.584 us/op
                 fillHeap·p0.50:   871890.944 us/op
                 fillHeap·p0.90:   918028.288 us/op
                 fillHeap·p0.95:   922746.880 us/op
                 fillHeap·p0.99:   922746.880 us/op
                 fillHeap·p0.999:  922746.880 us/op
                 fillHeap·p0.9999: 922746.880 us/op
                 fillHeap·p1.00:   922746.880 us/op

Iteration   3: 869007.360 ±(99.9%) 46178.839 us/op
                 fillHeap·p0.00:   814743.552 us/op
                 fillHeap·p0.50:   866123.776 us/op
                 fillHeap·p0.90:   922222.592 us/op
                 fillHeap·p0.95:   926941.184 us/op
                 fillHeap·p0.99:   926941.184 us/op
                 fillHeap·p0.999:  926941.184 us/op
                 fillHeap·p0.9999: 926941.184 us/op
                 fillHeap·p1.00:   926941.184 us/op

Iteration   4: 871279.275 ±(99.9%) 48283.980 us/op
                 fillHeap·p0.00:   817889.280 us/op
                 fillHeap·p0.50:   872939.520 us/op
                 fillHeap·p0.90:   927150.899 us/op
                 fillHeap·p0.95:   932184.064 us/op
                 fillHeap·p0.99:   932184.064 us/op
                 fillHeap·p0.999:  932184.064 us/op
                 fillHeap·p0.9999: 932184.064 us/op
                 fillHeap·p1.00:   932184.064 us/op

Iteration   5: 870754.987 ±(99.9%) 46667.483 us/op
                 fillHeap·p0.00:   811597.824 us/op
                 fillHeap·p0.50:   872415.232 us/op
                 fillHeap·p0.90:   922222.592 us/op
                 fillHeap·p0.95:   926941.184 us/op
                 fillHeap·p0.99:   926941.184 us/op
                 fillHeap·p0.999:  926941.184 us/op
                 fillHeap·p0.9999: 926941.184 us/op
                 fillHeap·p1.00:   926941.184 us/op

Iteration   6: 871978.325 ±(99.9%) 47268.006 us/op
                 fillHeap·p0.00:   812646.400 us/op
                 fillHeap·p0.50:   878182.400 us/op
                 fillHeap·p0.90:   922222.592 us/op
                 fillHeap·p0.95:   926941.184 us/op
                 fillHeap·p0.99:   926941.184 us/op
                 fillHeap·p0.999:  926941.184 us/op
                 fillHeap·p0.9999: 926941.184 us/op
                 fillHeap·p1.00:   926941.184 us/op

Iteration   7: 870405.461 ±(99.9%) 50973.603 us/op
                 fillHeap·p0.00:   803209.216 us/op
                 fillHeap·p0.50:   871890.944 us/op
                 fillHeap·p0.90:   929143.194 us/op
                 fillHeap·p0.95:   936378.368 us/op
                 fillHeap·p0.99:   936378.368 us/op
                 fillHeap·p0.999:  936378.368 us/op
                 fillHeap·p0.9999: 936378.368 us/op
                 fillHeap·p1.00:   936378.368 us/op

Iteration   8: 871104.512 ±(99.9%) 46652.254 us/op
                 fillHeap·p0.00:   809500.672 us/op
                 fillHeap·p0.50:   868745.216 us/op
                 fillHeap·p0.90:   921174.016 us/op
                 fillHeap·p0.95:   925892.608 us/op
                 fillHeap·p0.99:   925892.608 us/op
                 fillHeap·p0.999:  925892.608 us/op
                 fillHeap·p0.9999: 925892.608 us/op
                 fillHeap·p1.00:   925892.608 us/op

Iteration   9: 868657.835 ±(99.9%) 49818.468 us/op
                 fillHeap·p0.00:   805306.368 us/op
                 fillHeap·p0.50:   869793.792 us/op
                 fillHeap·p0.90:   923690.598 us/op
                 fillHeap·p0.95:   929038.336 us/op
                 fillHeap·p0.99:   929038.336 us/op
                 fillHeap·p0.999:  929038.336 us/op
                 fillHeap·p0.9999: 929038.336 us/op
                 fillHeap·p1.00:   929038.336 us/op

Iteration  10: 869968.555 ±(99.9%) 47911.933 us/op
                 fillHeap·p0.00:   814743.552 us/op
                 fillHeap·p0.50:   871890.944 us/op
                 fillHeap·p0.90:   922117.734 us/op
                 fillHeap·p0.95:   925892.608 us/op
                 fillHeap·p0.99:   925892.608 us/op
                 fillHeap·p0.999:  925892.608 us/op
                 fillHeap·p0.9999: 925892.608 us/op
                 fillHeap·p1.00:   925892.608 us/op

Iteration  11: 870580.224 ±(99.9%) 52387.712 us/op
                 fillHeap·p0.00:   806354.944 us/op
                 fillHeap·p0.50:   873463.808 us/op
                 fillHeap·p0.90:   927465.472 us/op
                 fillHeap·p0.95:   935329.792 us/op
                 fillHeap·p0.99:   935329.792 us/op
                 fillHeap·p0.999:  935329.792 us/op
                 fillHeap·p0.9999: 935329.792 us/op
                 fillHeap·p1.00:   935329.792 us/op

Iteration  12: 869793.792 ±(99.9%) 50107.430 us/op
                 fillHeap·p0.00:   810549.248 us/op
                 fillHeap·p0.50:   872415.232 us/op
                 fillHeap·p0.90:   927465.472 us/op
                 fillHeap·p0.95:   932184.064 us/op
                 fillHeap·p0.99:   932184.064 us/op
                 fillHeap·p0.999:  932184.064 us/op
                 fillHeap·p0.9999: 932184.064 us/op
                 fillHeap·p1.00:   932184.064 us/op

Iteration  13: 867172.352 ±(99.9%) 49117.495 us/op
                 fillHeap·p0.00:   809500.672 us/op
                 fillHeap·p0.50:   873988.096 us/op
                 fillHeap·p0.90:   923271.168 us/op
                 fillHeap·p0.95:   931135.488 us/op
                 fillHeap·p0.99:   931135.488 us/op
                 fillHeap·p0.999:  931135.488 us/op
                 fillHeap·p0.9999: 931135.488 us/op
                 fillHeap·p1.00:   931135.488 us/op

Iteration  14: 864550.912 ±(99.9%) 48436.711 us/op
                 fillHeap·p0.00:   801112.064 us/op
                 fillHeap·p0.50:   864026.624 us/op
                 fillHeap·p0.90:   917504.000 us/op
                 fillHeap·p0.95:   920649.728 us/op
                 fillHeap·p0.99:   920649.728 us/op
                 fillHeap·p0.999:  920649.728 us/op
                 fillHeap·p0.9999: 920649.728 us/op
                 fillHeap·p1.00:   920649.728 us/op

Iteration  15: 866211.157 ±(99.9%) 45196.586 us/op
                 fillHeap·p0.00:   809500.672 us/op
                 fillHeap·p0.50:   868220.928 us/op
                 fillHeap·p0.90:   915826.278 us/op
                 fillHeap·p0.95:   916455.424 us/op
                 fillHeap·p0.99:   916455.424 us/op
                 fillHeap·p0.999:  916455.424 us/op
                 fillHeap·p0.9999: 916455.424 us/op
                 fillHeap·p1.00:   916455.424 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 180
  mean = 869438.441 ±(99.9%) 9021.367 us/op

  Histogram, us/op:
    [ 800000.000,  812500.000) = 10 
    [ 812500.000,  825000.000) = 19 
    [ 825000.000,  837500.000) = 16 
    [ 837500.000,  850000.000) = 11 
    [ 850000.000,  862500.000) = 19 
    [ 862500.000,  875000.000) = 24 
    [ 875000.000,  887500.000) = 18 
    [ 887500.000,  900000.000) = 19 
    [ 900000.000,  912500.000) = 24 
    [ 912500.000,  925000.000) = 8 
    [ 925000.000,  937500.000) = 12 
    [ 937500.000,  950000.000) = 0 
    [ 950000.000,  962500.000) = 0 
    [ 962500.000,  975000.000) = 0 
    [ 975000.000,  987500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 801112.064 us/op
     p(50.0000) = 870842.368 us/op
     p(90.0000) = 914358.272 us/op
     p(95.0000) = 926941.184 us/op
     p(99.0000) = 935529.021 us/op
     p(99.9000) = 936378.368 us/op
     p(99.9900) = 936378.368 us/op
     p(99.9990) = 936378.368 us/op
     p(99.9999) = 936378.368 us/op
    p(100.0000) = 936378.368 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 73.19% complete, ETA 02:16:34
# Fork: 1 of 1
# Warmup Iteration   1: 863851.861 ±(99.9%) 54126.503 us/op
# Warmup Iteration   2: 856511.829 ±(99.9%) 62103.480 us/op
# Warmup Iteration   3: 765011.090 ±(99.9%) 48730.263 us/op
# Warmup Iteration   4: 832918.869 ±(99.9%) 92265.008 us/op
# Warmup Iteration   5: 858434.219 ±(99.9%) 55225.704 us/op
Iteration   1: 857822.549 ±(99.9%) 53778.872 us/op
                 fillHeap·p0.00:   787480.576 us/op
                 fillHeap·p0.50:   852492.288 us/op
                 fillHeap·p0.90:   931345.203 us/op
                 fillHeap·p0.95:   936378.368 us/op
                 fillHeap·p0.99:   936378.368 us/op
                 fillHeap·p0.999:  936378.368 us/op
                 fillHeap·p0.9999: 936378.368 us/op
                 fillHeap·p1.00:   936378.368 us/op

Iteration   2: 862191.616 ±(99.9%) 51541.994 us/op
                 fillHeap·p0.00:   799014.912 us/op
                 fillHeap·p0.50:   860356.608 us/op
                 fillHeap·p0.90:   931659.776 us/op
                 fillHeap·p0.95:   936378.368 us/op
                 fillHeap·p0.99:   936378.368 us/op
                 fillHeap·p0.999:  936378.368 us/op
                 fillHeap·p0.9999: 936378.368 us/op
                 fillHeap·p1.00:   936378.368 us/op

Iteration   3: 853628.245 ±(99.9%) 50857.658 us/op
                 fillHeap·p0.00:   790626.304 us/op
                 fillHeap·p0.50:   854065.152 us/op
                 fillHeap·p0.90:   915931.136 us/op
                 fillHeap·p0.95:   920649.728 us/op
                 fillHeap·p0.99:   920649.728 us/op
                 fillHeap·p0.999:  920649.728 us/op
                 fillHeap·p0.9999: 920649.728 us/op
                 fillHeap·p1.00:   920649.728 us/op

Iteration   4: 853540.864 ±(99.9%) 51001.075 us/op
                 fillHeap·p0.00:   783286.272 us/op
                 fillHeap·p0.50:   855113.728 us/op
                 fillHeap·p0.90:   912261.120 us/op
                 fillHeap·p0.95:   918552.576 us/op
                 fillHeap·p0.99:   918552.576 us/op
                 fillHeap·p0.999:  918552.576 us/op
                 fillHeap·p0.9999: 918552.576 us/op
                 fillHeap·p1.00:   918552.576 us/op

Iteration   5: 860968.277 ±(99.9%) 55640.226 us/op
                 fillHeap·p0.00:   786432.000 us/op
                 fillHeap·p0.50:   858783.744 us/op
                 fillHeap·p0.90:   932813.210 us/op
                 fillHeap·p0.95:   938475.520 us/op
                 fillHeap·p0.99:   938475.520 us/op
                 fillHeap·p0.999:  938475.520 us/op
                 fillHeap·p0.9999: 938475.520 us/op
                 fillHeap·p1.00:   938475.520 us/op

Iteration   6: 876784.299 ±(99.9%) 67247.960 us/op
                 fillHeap·p0.00:   805306.368 us/op
                 fillHeap·p0.50:   878182.400 us/op
                 fillHeap·p0.90:   965633.638 us/op
                 fillHeap·p0.95:   977272.832 us/op
                 fillHeap·p0.99:   977272.832 us/op
                 fillHeap·p0.999:  977272.832 us/op
                 fillHeap·p0.9999: 977272.832 us/op
                 fillHeap·p1.00:   977272.832 us/op

Iteration   7: 866473.301 ±(99.9%) 59892.312 us/op
                 fillHeap·p0.00:   787480.576 us/op
                 fillHeap·p0.50:   867172.352 us/op
                 fillHeap·p0.90:   931974.349 us/op
                 fillHeap·p0.95:   936378.368 us/op
                 fillHeap·p0.99:   936378.368 us/op
                 fillHeap·p0.999:  936378.368 us/op
                 fillHeap·p0.9999: 936378.368 us/op
                 fillHeap·p1.00:   936378.368 us/op

Iteration   8: 865949.013 ±(99.9%) 55063.637 us/op
                 fillHeap·p0.00:   795869.184 us/op
                 fillHeap·p0.50:   860356.608 us/op
                 fillHeap·p0.90:   941830.963 us/op
                 fillHeap·p0.95:   950009.856 us/op
                 fillHeap·p0.99:   950009.856 us/op
                 fillHeap·p0.999:  950009.856 us/op
                 fillHeap·p0.9999: 950009.856 us/op
                 fillHeap·p1.00:   950009.856 us/op

Iteration   9: 862016.853 ±(99.9%) 54832.724 us/op
                 fillHeap·p0.00:   794820.608 us/op
                 fillHeap·p0.50:   865075.200 us/op
                 fillHeap·p0.90:   929982.054 us/op
                 fillHeap·p0.95:   935329.792 us/op
                 fillHeap·p0.99:   935329.792 us/op
                 fillHeap·p0.999:  935329.792 us/op
                 fillHeap·p0.9999: 935329.792 us/op
                 fillHeap·p1.00:   935329.792 us/op

Iteration  10: 859744.939 ±(99.9%) 54496.746 us/op
                 fillHeap·p0.00:   789577.728 us/op
                 fillHeap·p0.50:   855638.016 us/op
                 fillHeap·p0.90:   930716.058 us/op
                 fillHeap·p0.95:   933232.640 us/op
                 fillHeap·p0.99:   933232.640 us/op
                 fillHeap·p0.999:  933232.640 us/op
                 fillHeap·p0.9999: 933232.640 us/op
                 fillHeap·p1.00:   933232.640 us/op

Iteration  11: 857909.931 ±(99.9%) 53804.403 us/op
                 fillHeap·p0.00:   786432.000 us/op
                 fillHeap·p0.50:   855638.016 us/op
                 fillHeap·p0.90:   925158.605 us/op
                 fillHeap·p0.95:   931135.488 us/op
                 fillHeap·p0.99:   931135.488 us/op
                 fillHeap·p0.999:  931135.488 us/op
                 fillHeap·p0.9999: 931135.488 us/op
                 fillHeap·p1.00:   931135.488 us/op

Iteration  12: 854676.821 ±(99.9%) 55772.693 us/op
                 fillHeap·p0.00:   788529.152 us/op
                 fillHeap·p0.50:   851968.000 us/op
                 fillHeap·p0.90:   927884.902 us/op
                 fillHeap·p0.95:   933232.640 us/op
                 fillHeap·p0.99:   933232.640 us/op
                 fillHeap·p0.999:  933232.640 us/op
                 fillHeap·p0.9999: 933232.640 us/op
                 fillHeap·p1.00:   933232.640 us/op

Iteration  13: 857909.931 ±(99.9%) 56940.594 us/op
                 fillHeap·p0.00:   776994.816 us/op
                 fillHeap·p0.50:   866123.776 us/op
                 fillHeap·p0.90:   923271.168 us/op
                 fillHeap·p0.95:   927989.760 us/op
                 fillHeap·p0.99:   927989.760 us/op
                 fillHeap·p0.999:  927989.760 us/op
                 fillHeap·p0.9999: 927989.760 us/op
                 fillHeap·p1.00:   927989.760 us/op

Iteration  14: 858608.981 ±(99.9%) 52860.456 us/op
                 fillHeap·p0.00:   791674.880 us/op
                 fillHeap·p0.50:   855638.016 us/op
                 fillHeap·p0.90:   926941.184 us/op
                 fillHeap·p0.95:   933232.640 us/op
                 fillHeap·p0.99:   933232.640 us/op
                 fillHeap·p0.999:  933232.640 us/op
                 fillHeap·p0.9999: 933232.640 us/op
                 fillHeap·p1.00:   933232.640 us/op

Iteration  15: 861754.709 ±(99.9%) 52757.984 us/op
                 fillHeap·p0.00:   801112.064 us/op
                 fillHeap·p0.50:   858259.456 us/op
                 fillHeap·p0.90:   928409.190 us/op
                 fillHeap·p0.95:   932184.064 us/op
                 fillHeap·p0.99:   932184.064 us/op
                 fillHeap·p0.999:  932184.064 us/op
                 fillHeap·p0.9999: 932184.064 us/op
                 fillHeap·p1.00:   932184.064 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 180
  mean = 860665.355 ±(99.9%) 10424.937 us/op

  Histogram, us/op:
    [ 700000.000,  725000.000) = 0 
    [ 725000.000,  750000.000) = 0 
    [ 750000.000,  775000.000) = 0 
    [ 775000.000,  800000.000) = 16 
    [ 800000.000,  825000.000) = 17 
    [ 825000.000,  850000.000) = 40 
    [ 850000.000,  875000.000) = 41 
    [ 875000.000,  900000.000) = 35 
    [ 900000.000,  925000.000) = 16 
    [ 925000.000,  950000.000) = 13 
    [ 950000.000,  975000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 776994.816 us/op
     p(50.0000) = 858783.744 us/op
     p(90.0000) = 921593.446 us/op
     p(95.0000) = 933232.640 us/op
     p(99.0000) = 955189.821 us/op
     p(99.9000) = 977272.832 us/op
     p(99.9900) = 977272.832 us/op
     p(99.9990) = 977272.832 us/op
     p(99.9999) = 977272.832 us/op
    p(100.0000) = 977272.832 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 73.91% complete, ETA 02:12:52
# Fork: 1 of 1
# Warmup Iteration   1: 862278.997 ±(99.9%) 54619.602 us/op
# Warmup Iteration   2: 868745.216 ±(99.9%) 53473.208 us/op
# Warmup Iteration   3: 859133.269 ±(99.9%) 46491.017 us/op
# Warmup Iteration   4: 857385.643 ±(99.9%) 46487.489 us/op
# Warmup Iteration   5: 853715.627 ±(99.9%) 42160.749 us/op
Iteration   1: 860007.083 ±(99.9%) 47310.918 us/op
                 fillHeap·p0.00:   796917.760 us/op
                 fillHeap·p0.50:   859832.320 us/op
                 fillHeap·p0.90:   910897.971 us/op
                 fillHeap·p0.95:   911212.544 us/op
                 fillHeap·p0.99:   911212.544 us/op
                 fillHeap·p0.999:  911212.544 us/op
                 fillHeap·p0.9999: 911212.544 us/op
                 fillHeap·p1.00:   911212.544 us/op

Iteration   2: 859744.939 ±(99.9%) 46741.216 us/op
                 fillHeap·p0.00:   792723.456 us/op
                 fillHeap·p0.50:   862978.048 us/op
                 fillHeap·p0.90:   914882.560 us/op
                 fillHeap·p0.95:   922746.880 us/op
                 fillHeap·p0.99:   922746.880 us/op
                 fillHeap·p0.999:  922746.880 us/op
                 fillHeap·p0.9999: 922746.880 us/op
                 fillHeap·p1.00:   922746.880 us/op

Iteration   3: 852492.288 ±(99.9%) 45854.107 us/op
                 fillHeap·p0.00:   788529.152 us/op
                 fillHeap·p0.50:   850919.424 us/op
                 fillHeap·p0.90:   909115.392 us/op
                 fillHeap·p0.95:   915406.848 us/op
                 fillHeap·p0.99:   915406.848 us/op
                 fillHeap·p0.999:  915406.848 us/op
                 fillHeap·p0.9999: 915406.848 us/op
                 fillHeap·p1.00:   915406.848 us/op

Iteration   4: 818937.856 ±(99.9%) 79186.195 us/op
                 fillHeap·p0.00:   720371.712 us/op
                 fillHeap·p0.50:   814743.552 us/op
                 fillHeap·p0.90:   913938.842 us/op
                 fillHeap·p0.95:   914358.272 us/op
                 fillHeap·p0.99:   914358.272 us/op
                 fillHeap·p0.999:  914358.272 us/op
                 fillHeap·p0.9999: 914358.272 us/op
                 fillHeap·p1.00:   914358.272 us/op

Iteration   5: 752203.483 ±(99.9%) 45511.760 us/op
                 fillHeap·p0.00:   683671.552 us/op
                 fillHeap·p0.50:   754450.432 us/op
                 fillHeap·p0.90:   808452.096 us/op
                 fillHeap·p0.95:   816840.704 us/op
                 fillHeap·p0.99:   816840.704 us/op
                 fillHeap·p0.999:  816840.704 us/op
                 fillHeap·p0.9999: 816840.704 us/op
                 fillHeap·p1.00:   816840.704 us/op

Iteration   6: 745762.231 ±(99.9%) 43367.348 us/op
                 fillHeap·p0.00:   691011.584 us/op
                 fillHeap·p0.50:   748158.976 us/op
                 fillHeap·p0.90:   803733.504 us/op
                 fillHeap·p0.95:   809500.672 us/op
                 fillHeap·p0.99:   809500.672 us/op
                 fillHeap·p0.999:  809500.672 us/op
                 fillHeap·p0.9999: 809500.672 us/op
                 fillHeap·p1.00:   809500.672 us/op

Iteration   7: 747484.891 ±(99.9%) 40395.818 us/op
                 fillHeap·p0.00:   689963.008 us/op
                 fillHeap·p0.50:   745013.248 us/op
                 fillHeap·p0.90:   798490.624 us/op
                 fillHeap·p0.95:   804257.792 us/op
                 fillHeap·p0.99:   804257.792 us/op
                 fillHeap·p0.999:  804257.792 us/op
                 fillHeap·p0.9999: 804257.792 us/op
                 fillHeap·p1.00:   804257.792 us/op

Iteration   8: 754300.635 ±(99.9%) 46973.406 us/op
                 fillHeap·p0.00:   686817.280 us/op
                 fillHeap·p0.50:   753926.144 us/op
                 fillHeap·p0.90:   815792.128 us/op
                 fillHeap·p0.95:   822083.584 us/op
                 fillHeap·p0.99:   822083.584 us/op
                 fillHeap·p0.999:  822083.584 us/op
                 fillHeap·p0.9999: 822083.584 us/op
                 fillHeap·p1.00:   822083.584 us/op

Iteration   9: 750480.823 ±(99.9%) 47087.421 us/op
                 fillHeap·p0.00:   678428.672 us/op
                 fillHeap·p0.50:   748683.264 us/op
                 fillHeap·p0.90:   816316.416 us/op
                 fillHeap·p0.95:   825229.312 us/op
                 fillHeap·p0.99:   825229.312 us/op
                 fillHeap·p0.999:  825229.312 us/op
                 fillHeap·p0.9999: 825229.312 us/op
                 fillHeap·p1.00:   825229.312 us/op

Iteration  10: 749357.349 ±(99.9%) 42104.166 us/op
                 fillHeap·p0.00:   689963.008 us/op
                 fillHeap·p0.50:   750256.128 us/op
                 fillHeap·p0.90:   803209.216 us/op
                 fillHeap·p0.95:   811597.824 us/op
                 fillHeap·p0.99:   811597.824 us/op
                 fillHeap·p0.999:  811597.824 us/op
                 fillHeap·p0.9999: 811597.824 us/op
                 fillHeap·p1.00:   811597.824 us/op

Iteration  11: 752727.771 ±(99.9%) 44681.822 us/op
                 fillHeap·p0.00:   688914.432 us/op
                 fillHeap·p0.50:   752877.568 us/op
                 fillHeap·p0.90:   811597.824 us/op
                 fillHeap·p0.95:   817889.280 us/op
                 fillHeap·p0.99:   817889.280 us/op
                 fillHeap·p0.999:  817889.280 us/op
                 fillHeap·p0.9999: 817889.280 us/op
                 fillHeap·p1.00:   817889.280 us/op

Iteration  12: 744488.960 ±(99.9%) 43525.450 us/op
                 fillHeap·p0.00:   682622.976 us/op
                 fillHeap·p0.50:   747634.688 us/op
                 fillHeap·p0.90:   800063.488 us/op
                 fillHeap·p0.95:   813694.976 us/op
                 fillHeap·p0.99:   813694.976 us/op
                 fillHeap·p0.999:  813694.976 us/op
                 fillHeap·p0.9999: 813694.976 us/op
                 fillHeap·p1.00:   813694.976 us/op

Iteration  13: 754375.534 ±(99.9%) 44986.352 us/op
                 fillHeap·p0.00:   689963.008 us/op
                 fillHeap·p0.50:   758644.736 us/op
                 fillHeap·p0.90:   812646.400 us/op
                 fillHeap·p0.95:   824180.736 us/op
                 fillHeap·p0.99:   824180.736 us/op
                 fillHeap·p0.999:  824180.736 us/op
                 fillHeap·p0.9999: 824180.736 us/op
                 fillHeap·p1.00:   824180.736 us/op

Iteration  14: 750930.213 ±(99.9%) 42612.976 us/op
                 fillHeap·p0.00:   692060.160 us/op
                 fillHeap·p0.50:   753926.144 us/op
                 fillHeap·p0.90:   811073.536 us/op
                 fillHeap·p0.95:   819986.432 us/op
                 fillHeap·p0.99:   819986.432 us/op
                 fillHeap·p0.999:  819986.432 us/op
                 fillHeap·p0.9999: 819986.432 us/op
                 fillHeap·p1.00:   819986.432 us/op

Iteration  15: 747559.790 ±(99.9%) 44555.441 us/op
                 fillHeap·p0.00:   688914.432 us/op
                 fillHeap·p0.50:   746586.112 us/op
                 fillHeap·p0.90:   806354.944 us/op
                 fillHeap·p0.95:   807403.520 us/op
                 fillHeap·p0.99:   807403.520 us/op
                 fillHeap·p0.999:  807403.520 us/op
                 fillHeap·p0.9999: 807403.520 us/op
                 fillHeap·p1.00:   807403.520 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 203
  mean = 773441.021 ±(99.9%) 13632.793 us/op

  Histogram, us/op:
    [ 600000.000,  625000.000) = 0 
    [ 625000.000,  650000.000) = 0 
    [ 650000.000,  675000.000) = 0 
    [ 675000.000,  700000.000) = 22 
    [ 700000.000,  725000.000) = 22 
    [ 725000.000,  750000.000) = 33 
    [ 750000.000,  775000.000) = 38 
    [ 775000.000,  800000.000) = 30 
    [ 800000.000,  825000.000) = 22 
    [ 825000.000,  850000.000) = 11 
    [ 850000.000,  875000.000) = 10 
    [ 875000.000,  900000.000) = 9 
    [ 900000.000,  925000.000) = 6 
    [ 925000.000,  950000.000) = 0 
    [ 950000.000,  975000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 678428.672 us/op
     p(50.0000) = 767557.632 us/op
     p(90.0000) = 862558.618 us/op
     p(95.0000) = 890450.739 us/op
     p(99.0000) = 915364.905 us/op
     p(99.9000) = 922746.880 us/op
     p(99.9900) = 922746.880 us/op
     p(99.9990) = 922746.880 us/op
     p(99.9999) = 922746.880 us/op
    p(100.0000) = 922746.880 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 74.64% complete, ETA 02:09:11
# Fork: 1 of 1
# Warmup Iteration   1: 933423.290 ±(99.9%) 93387.204 us/op
# Warmup Iteration   2: 938094.220 ±(99.9%) 93167.279 us/op
# Warmup Iteration   3: 936283.043 ±(99.9%) 91633.675 us/op
# Warmup Iteration   4: 936854.993 ±(99.9%) 95064.577 us/op
# Warmup Iteration   5: 939333.446 ±(99.9%) 94804.185 us/op
Iteration   1: 937903.569 ±(99.9%) 93649.290 us/op
                 fillHeap·p0.00:   867172.352 us/op
                 fillHeap·p0.50:   910163.968 us/op
                 fillHeap·p0.90:   1059271.475 us/op
                 fillHeap·p0.95:   1060110.336 us/op
                 fillHeap·p0.99:   1060110.336 us/op
                 fillHeap·p0.999:  1060110.336 us/op
                 fillHeap·p0.9999: 1060110.336 us/op
                 fillHeap·p1.00:   1060110.336 us/op

Iteration   2: 929800.937 ±(99.9%) 94620.495 us/op
                 fillHeap·p0.00:   858783.744 us/op
                 fillHeap·p0.50:   902823.936 us/op
                 fillHeap·p0.90:   1055286.886 us/op
                 fillHeap·p0.95:   1056964.608 us/op
                 fillHeap·p0.99:   1056964.608 us/op
                 fillHeap·p0.999:  1056964.608 us/op
                 fillHeap·p0.9999: 1056964.608 us/op
                 fillHeap·p1.00:   1056964.608 us/op

Iteration   3: 937617.594 ±(99.9%) 96036.201 us/op
                 fillHeap·p0.00:   864026.624 us/op
                 fillHeap·p0.50:   916455.424 us/op
                 fillHeap·p0.90:   1061158.912 us/op
                 fillHeap·p0.95:   1061158.912 us/op
                 fillHeap·p0.99:   1061158.912 us/op
                 fillHeap·p0.999:  1061158.912 us/op
                 fillHeap·p0.9999: 1061158.912 us/op
                 fillHeap·p1.00:   1061158.912 us/op

Iteration   4: 934948.492 ±(99.9%) 94242.303 us/op
                 fillHeap·p0.00:   864026.624 us/op
                 fillHeap·p0.50:   911212.544 us/op
                 fillHeap·p0.90:   1063256.064 us/op
                 fillHeap·p0.95:   1066401.792 us/op
                 fillHeap·p0.99:   1066401.792 us/op
                 fillHeap·p0.999:  1066401.792 us/op
                 fillHeap·p0.9999: 1066401.792 us/op
                 fillHeap·p1.00:   1066401.792 us/op

Iteration   5: 935997.068 ±(99.9%) 94873.935 us/op
                 fillHeap·p0.00:   862978.048 us/op
                 fillHeap·p0.50:   912261.120 us/op
                 fillHeap·p0.90:   1060110.336 us/op
                 fillHeap·p0.95:   1061158.912 us/op
                 fillHeap·p0.99:   1061158.912 us/op
                 fillHeap·p0.999:  1061158.912 us/op
                 fillHeap·p0.9999: 1061158.912 us/op
                 fillHeap·p1.00:   1061158.912 us/op

Iteration   6: 938189.545 ±(99.9%) 94244.129 us/op
                 fillHeap·p0.00:   866123.776 us/op
                 fillHeap·p0.50:   915406.848 us/op
                 fillHeap·p0.90:   1061997.773 us/op
                 fillHeap·p0.95:   1063256.064 us/op
                 fillHeap·p0.99:   1063256.064 us/op
                 fillHeap·p0.999:  1063256.064 us/op
                 fillHeap·p0.9999: 1063256.064 us/op
                 fillHeap·p1.00:   1063256.064 us/op

Iteration   7: 939524.096 ±(99.9%) 96845.613 us/op
                 fillHeap·p0.00:   861929.472 us/op
                 fillHeap·p0.50:   920649.728 us/op
                 fillHeap·p0.90:   1065982.362 us/op
                 fillHeap·p0.95:   1067450.368 us/op
                 fillHeap·p0.99:   1067450.368 us/op
                 fillHeap·p0.999:  1067450.368 us/op
                 fillHeap·p0.9999: 1067450.368 us/op
                 fillHeap·p1.00:   1067450.368 us/op

Iteration   8: 935615.767 ±(99.9%) 93322.490 us/op
                 fillHeap·p0.00:   864026.624 us/op
                 fillHeap·p0.50:   918552.576 us/op
                 fillHeap·p0.90:   1055706.317 us/op
                 fillHeap·p0.95:   1055916.032 us/op
                 fillHeap·p0.99:   1055916.032 us/op
                 fillHeap·p0.999:  1055916.032 us/op
                 fillHeap·p0.9999: 1055916.032 us/op
                 fillHeap·p1.00:   1055916.032 us/op

Iteration   9: 939524.096 ±(99.9%) 95187.577 us/op
                 fillHeap·p0.00:   866123.776 us/op
                 fillHeap·p0.50:   916455.424 us/op
                 fillHeap·p0.90:   1061158.912 us/op
                 fillHeap·p0.95:   1061158.912 us/op
                 fillHeap·p0.99:   1061158.912 us/op
                 fillHeap·p0.999:  1061158.912 us/op
                 fillHeap·p0.9999: 1061158.912 us/op
                 fillHeap·p1.00:   1061158.912 us/op

Iteration  10: 940572.672 ±(99.9%) 95282.531 us/op
                 fillHeap·p0.00:   867172.352 us/op
                 fillHeap·p0.50:   917504.000 us/op
                 fillHeap·p0.90:   1065143.501 us/op
                 fillHeap·p0.95:   1066401.792 us/op
                 fillHeap·p0.99:   1066401.792 us/op
                 fillHeap·p0.999:  1066401.792 us/op
                 fillHeap·p0.9999: 1066401.792 us/op
                 fillHeap·p1.00:   1066401.792 us/op

Iteration  11: 943051.124 ±(99.9%) 96006.534 us/op
                 fillHeap·p0.00:   868220.928 us/op
                 fillHeap·p0.50:   919601.152 us/op
                 fillHeap·p0.90:   1065353.216 us/op
                 fillHeap·p0.95:   1065353.216 us/op
                 fillHeap·p0.99:   1065353.216 us/op
                 fillHeap·p0.999:  1065353.216 us/op
                 fillHeap·p0.9999: 1065353.216 us/op
                 fillHeap·p1.00:   1065353.216 us/op

Iteration  12: 940763.322 ±(99.9%) 91781.273 us/op
                 fillHeap·p0.00:   870318.080 us/op
                 fillHeap·p0.50:   919601.152 us/op
                 fillHeap·p0.90:   1057803.469 us/op
                 fillHeap·p0.95:   1058013.184 us/op
                 fillHeap·p0.99:   1058013.184 us/op
                 fillHeap·p0.999:  1058013.184 us/op
                 fillHeap·p0.9999: 1058013.184 us/op
                 fillHeap·p1.00:   1058013.184 us/op

Iteration  13: 940763.322 ±(99.9%) 95410.059 us/op
                 fillHeap·p0.00:   872415.232 us/op
                 fillHeap·p0.50:   920649.728 us/op
                 fillHeap·p0.90:   1066192.077 us/op
                 fillHeap·p0.95:   1066401.792 us/op
                 fillHeap·p0.99:   1066401.792 us/op
                 fillHeap·p0.999:  1066401.792 us/op
                 fillHeap·p0.9999: 1066401.792 us/op
                 fillHeap·p1.00:   1066401.792 us/op

Iteration  14: 931135.488 ±(99.9%) 92466.535 us/op
                 fillHeap·p0.00:   860880.896 us/op
                 fillHeap·p0.50:   904921.088 us/op
                 fillHeap·p0.90:   1051931.443 us/op
                 fillHeap·p0.95:   1052770.304 us/op
                 fillHeap·p0.99:   1052770.304 us/op
                 fillHeap·p0.999:  1052770.304 us/op
                 fillHeap·p0.9999: 1052770.304 us/op
                 fillHeap·p1.00:   1052770.304 us/op

Iteration  15: 938570.845 ±(99.9%) 95947.771 us/op
                 fillHeap·p0.00:   865075.200 us/op
                 fillHeap·p0.50:   918552.576 us/op
                 fillHeap·p0.90:   1063885.210 us/op
                 fillHeap·p0.95:   1064304.640 us/op
                 fillHeap·p0.99:   1064304.640 us/op
                 fillHeap·p0.999:  1064304.640 us/op
                 fillHeap·p0.9999: 1064304.640 us/op
                 fillHeap·p1.00:   1064304.640 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 165
  mean = 937598.529 ±(99.9%) 17102.196 us/op

  Histogram, us/op:
    [ 800000.000,  825000.000) = 0 
    [ 825000.000,  850000.000) = 0 
    [ 850000.000,  875000.000) = 30 
    [ 875000.000,  900000.000) = 30 
    [ 900000.000,  925000.000) = 30 
    [ 925000.000,  950000.000) = 16 
    [ 950000.000,  975000.000) = 29 
    [ 975000.000, 1000000.000) = 0 
    [1000000.000, 1025000.000) = 0 
    [1025000.000, 1050000.000) = 2 
    [1050000.000, 1075000.000) = 28 

  Percentiles, us/op:
      p(0.0000) = 858783.744 us/op
     p(50.0000) = 916455.424 us/op
     p(90.0000) = 1060110.336 us/op
     p(95.0000) = 1063990.067 us/op
     p(99.0000) = 1066758.308 us/op
     p(99.9000) = 1067450.368 us/op
     p(99.9900) = 1067450.368 us/op
     p(99.9990) = 1067450.368 us/op
     p(99.9999) = 1067450.368 us/op
    p(100.0000) = 1067450.368 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 75.36% complete, ETA 02:05:29
# Fork: 1 of 1
# Warmup Iteration   1: 381.927 ±(99.9%) 0.780 us/op
# Warmup Iteration   2: 381.835 ±(99.9%) 0.604 us/op
# Warmup Iteration   3: 381.171 ±(99.9%) 0.441 us/op
# Warmup Iteration   4: 381.069 ±(99.9%) 0.425 us/op
# Warmup Iteration   5: 381.926 ±(99.9%) 0.442 us/op
Iteration   1: 382.261 ±(99.9%) 0.464 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.856 us/op
                 read·p0.90:   394.752 us/op
                 read·p0.95:   402.944 us/op
                 read·p0.99:   448.860 us/op
                 read·p0.999:  650.105 us/op
                 read·p0.9999: 818.901 us/op
                 read·p1.00:   863.232 us/op

Iteration   2: 382.000 ±(99.9%) 0.441 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.344 us/op
                 read·p0.90:   394.752 us/op
                 read·p0.95:   403.456 us/op
                 read·p0.99:   449.526 us/op
                 read·p0.999:  631.808 us/op
                 read·p0.9999: 786.687 us/op
                 read·p1.00:   846.848 us/op

Iteration   3: 381.253 ±(99.9%) 0.433 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.344 us/op
                 read·p0.90:   393.728 us/op
                 read·p0.95:   400.896 us/op
                 read·p0.99:   445.440 us/op
                 read·p0.999:  632.625 us/op
                 read·p0.9999: 719.911 us/op
                 read·p1.00:   854.016 us/op

Iteration   4: 380.700 ±(99.9%) 0.433 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   376.320 us/op
                 read·p0.90:   393.216 us/op
                 read·p0.95:   400.896 us/op
                 read·p0.99:   441.651 us/op
                 read·p0.999:  634.429 us/op
                 read·p0.9999: 748.691 us/op
                 read·p1.00:   809.984 us/op

Iteration   5: 381.745 ±(99.9%) 0.443 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.344 us/op
                 read·p0.90:   394.240 us/op
                 read·p0.95:   401.920 us/op
                 read·p0.99:   447.468 us/op
                 read·p0.999:  634.880 us/op
                 read·p0.9999: 716.082 us/op
                 read·p1.00:   736.256 us/op

Iteration   6: 381.519 ±(99.9%) 0.442 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.344 us/op
                 read·p0.90:   393.728 us/op
                 read·p0.95:   401.408 us/op
                 read·p0.99:   449.106 us/op
                 read·p0.999:  627.147 us/op
                 read·p0.9999: 734.599 us/op
                 read·p1.00:   809.984 us/op

Iteration   7: 381.372 ±(99.9%) 0.420 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.344 us/op
                 read·p0.90:   393.216 us/op
                 read·p0.95:   400.384 us/op
                 read·p0.99:   431.140 us/op
                 read·p0.999:  621.568 us/op
                 read·p0.9999: 745.560 us/op
                 read·p1.00:   824.320 us/op

Iteration   8: 381.600 ±(99.9%) 0.439 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.344 us/op
                 read·p0.90:   393.728 us/op
                 read·p0.95:   401.920 us/op
                 read·p0.99:   439.921 us/op
                 read·p0.999:  638.177 us/op
                 read·p0.9999: 733.602 us/op
                 read·p1.00:   766.976 us/op

Iteration   9: 381.176 ±(99.9%) 0.425 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   376.832 us/op
                 read·p0.90:   394.240 us/op
                 read·p0.95:   401.920 us/op
                 read·p0.99:   439.808 us/op
                 read·p0.999:  622.168 us/op
                 read·p0.9999: 744.872 us/op
                 read·p1.00:   774.144 us/op

Iteration  10: 381.554 ±(99.9%) 0.434 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.344 us/op
                 read·p0.90:   394.240 us/op
                 read·p0.95:   401.408 us/op
                 read·p0.99:   438.272 us/op
                 read·p0.999:  634.139 us/op
                 read·p0.9999: 721.287 us/op
                 read·p1.00:   732.160 us/op

Iteration  11: 382.093 ±(99.9%) 0.436 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.344 us/op
                 read·p0.90:   396.288 us/op
                 read·p0.95:   404.992 us/op
                 read·p0.99:   451.359 us/op
                 read·p0.999:  621.568 us/op
                 read·p0.9999: 781.559 us/op
                 read·p1.00:   799.744 us/op

Iteration  12: 382.806 ±(99.9%) 0.493 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.856 us/op
                 read·p0.90:   396.288 us/op
                 read·p0.95:   403.968 us/op
                 read·p0.99:   470.589 us/op
                 read·p0.999:  661.111 us/op
                 read·p0.9999: 796.798 us/op
                 read·p1.00:   957.440 us/op

Iteration  13: 382.614 ±(99.9%) 0.700 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.856 us/op
                 read·p0.90:   394.752 us/op
                 read·p0.95:   402.432 us/op
                 read·p0.99:   465.818 us/op
                 read·p0.999:  662.303 us/op
                 read·p0.9999: 1530.458 us/op
                 read·p1.00:   4034.560 us/op

Iteration  14: 381.521 ±(99.9%) 0.451 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.344 us/op
                 read·p0.90:   393.728 us/op
                 read·p0.95:   401.408 us/op
                 read·p0.99:   438.784 us/op
                 read·p0.999:  639.623 us/op
                 read·p0.9999: 884.157 us/op
                 read·p1.00:   907.264 us/op

Iteration  15: 381.539 ±(99.9%) 0.433 us/op
                 read·p0.00:   370.176 us/op
                 read·p0.50:   377.344 us/op
                 read·p0.90:   393.728 us/op
                 read·p0.95:   401.920 us/op
                 read·p0.99:   435.799 us/op
                 read·p0.999:  623.429 us/op
                 read·p0.9999: 791.342 us/op
                 read·p1.00:   827.392 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  N = 392538
  mean =    381.716 ±(99.9%) 0.120 us/op

  Histogram, us/op:
    [   0.000,  500.000) = 389425 
    [ 500.000, 1000.000) = 3110 
    [1000.000, 1500.000) = 1 
    [1500.000, 2000.000) = 0 
    [2000.000, 2500.000) = 1 
    [2500.000, 3000.000) = 0 
    [3000.000, 3500.000) = 0 
    [3500.000, 4000.000) = 0 
    [4000.000, 4500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    370.176 us/op
     p(50.0000) =    377.344 us/op
     p(90.0000) =    394.240 us/op
     p(95.0000) =    402.432 us/op
     p(99.0000) =    445.440 us/op
     p(99.9000) =    634.880 us/op
     p(99.9900) =    762.620 us/op
     p(99.9990) =    961.795 us/op
     p(99.9999) =   4034.560 us/op
    p(100.0000) =   4034.560 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 76.08% complete, ETA 02:01:46
# Fork: 1 of 1
# Warmup Iteration   1: 170.865 ±(99.9%) 0.416 us/op
# Warmup Iteration   2: 169.651 ±(99.9%) 0.234 us/op
# Warmup Iteration   3: 169.487 ±(99.9%) 0.219 us/op
# Warmup Iteration   4: 171.122 ±(99.9%) 0.224 us/op
# Warmup Iteration   5: 168.559 ±(99.9%) 0.210 us/op
Iteration   1: 169.799 ±(99.9%) 0.235 us/op
                 readAndWrite·p0.00:   160.000 us/op
                 readAndWrite·p0.50:   166.912 us/op
                 readAndWrite·p0.90:   176.128 us/op
                 readAndWrite·p0.95:   184.064 us/op
                 readAndWrite·p0.99:   205.327 us/op
                 readAndWrite·p0.999:  416.768 us/op
                 readAndWrite·p0.9999: 569.925 us/op
                 readAndWrite·p1.00:   1636.352 us/op

Iteration   2: 170.406 ±(99.9%) 0.233 us/op
                 readAndWrite·p0.00:   160.000 us/op
                 readAndWrite·p0.50:   168.192 us/op
                 readAndWrite·p0.90:   175.872 us/op
                 readAndWrite·p0.95:   184.320 us/op
                 readAndWrite·p0.99:   225.825 us/op
                 readAndWrite·p0.999:  416.467 us/op
                 readAndWrite·p0.9999: 514.115 us/op
                 readAndWrite·p1.00:   662.528 us/op

Iteration   3: 169.439 ±(99.9%) 0.227 us/op
                 readAndWrite·p0.00:   159.744 us/op
                 readAndWrite·p0.50:   165.888 us/op
                 readAndWrite·p0.90:   175.616 us/op
                 readAndWrite·p0.95:   184.576 us/op
                 readAndWrite·p0.99:   226.816 us/op
                 readAndWrite·p0.999:  404.010 us/op
                 readAndWrite·p0.9999: 511.129 us/op
                 readAndWrite·p1.00:   624.640 us/op

Iteration   4: 169.606 ±(99.9%) 0.226 us/op
                 readAndWrite·p0.00:   159.744 us/op
                 readAndWrite·p0.50:   166.400 us/op
                 readAndWrite·p0.90:   175.616 us/op
                 readAndWrite·p0.95:   183.808 us/op
                 readAndWrite·p0.99:   222.052 us/op
                 readAndWrite·p0.999:  410.624 us/op
                 readAndWrite·p0.9999: 527.477 us/op
                 readAndWrite·p1.00:   646.144 us/op

Iteration   5: 168.815 ±(99.9%) 0.258 us/op
                 readAndWrite·p0.00:   159.744 us/op
                 readAndWrite·p0.50:   165.376 us/op
                 readAndWrite·p0.90:   174.592 us/op
                 readAndWrite·p0.95:   182.272 us/op
                 readAndWrite·p0.99:   207.872 us/op
                 readAndWrite·p0.999:  415.092 us/op
                 readAndWrite·p0.9999: 547.081 us/op
                 readAndWrite·p1.00:   2605.056 us/op

Iteration   6: 170.091 ±(99.9%) 0.231 us/op
                 readAndWrite·p0.00:   160.512 us/op
                 readAndWrite·p0.50:   167.680 us/op
                 readAndWrite·p0.90:   176.384 us/op
                 readAndWrite·p0.95:   185.600 us/op
                 readAndWrite·p0.99:   214.528 us/op
                 readAndWrite·p0.999:  419.090 us/op
                 readAndWrite·p0.9999: 523.267 us/op
                 readAndWrite·p1.00:   650.240 us/op

Iteration   7: 169.264 ±(99.9%) 0.227 us/op
                 readAndWrite·p0.00:   160.256 us/op
                 readAndWrite·p0.50:   166.144 us/op
                 readAndWrite·p0.90:   175.360 us/op
                 readAndWrite·p0.95:   183.552 us/op
                 readAndWrite·p0.99:   209.459 us/op
                 readAndWrite·p0.999:  412.682 us/op
                 readAndWrite·p0.9999: 592.206 us/op
                 readAndWrite·p1.00:   843.776 us/op

Iteration   8: 168.794 ±(99.9%) 0.213 us/op
                 readAndWrite·p0.00:   160.000 us/op
                 readAndWrite·p0.50:   165.632 us/op
                 readAndWrite·p0.90:   174.848 us/op
                 readAndWrite·p0.95:   183.040 us/op
                 readAndWrite·p0.99:   203.407 us/op
                 readAndWrite·p0.999:  411.791 us/op
                 readAndWrite·p0.9999: 481.951 us/op
                 readAndWrite·p1.00:   626.688 us/op

Iteration   9: 169.944 ±(99.9%) 0.212 us/op
                 readAndWrite·p0.00:   159.744 us/op
                 readAndWrite·p0.50:   167.936 us/op
                 readAndWrite·p0.90:   176.128 us/op
                 readAndWrite·p0.95:   183.808 us/op
                 readAndWrite·p0.99:   203.520 us/op
                 readAndWrite·p0.999:  421.376 us/op
                 readAndWrite·p0.9999: 477.575 us/op
                 readAndWrite·p1.00:   625.664 us/op

Iteration  10: 169.501 ±(99.9%) 0.247 us/op
                 readAndWrite·p0.00:   160.000 us/op
                 readAndWrite·p0.50:   166.144 us/op
                 readAndWrite·p0.90:   176.128 us/op
                 readAndWrite·p0.95:   184.576 us/op
                 readAndWrite·p0.99:   206.848 us/op
                 readAndWrite·p0.999:  417.843 us/op
                 readAndWrite·p0.9999: 532.357 us/op
                 readAndWrite·p1.00:   2207.744 us/op

Iteration  11: 169.767 ±(99.9%) 0.258 us/op
                 readAndWrite·p0.00:   160.256 us/op
                 readAndWrite·p0.50:   166.656 us/op
                 readAndWrite·p0.90:   176.128 us/op
                 readAndWrite·p0.95:   184.576 us/op
                 readAndWrite·p0.99:   206.833 us/op
                 readAndWrite·p0.999:  419.213 us/op
                 readAndWrite·p0.9999: 561.259 us/op
                 readAndWrite·p1.00:   2457.600 us/op

Iteration  12: 169.402 ±(99.9%) 0.220 us/op
                 readAndWrite·p0.00:   159.744 us/op
                 readAndWrite·p0.50:   166.400 us/op
                 readAndWrite·p0.90:   176.000 us/op
                 readAndWrite·p0.95:   183.808 us/op
                 readAndWrite·p0.99:   208.384 us/op
                 readAndWrite·p0.999:  416.768 us/op
                 readAndWrite·p0.9999: 507.274 us/op
                 readAndWrite·p1.00:   649.216 us/op

Iteration  13: 170.471 ±(99.9%) 0.223 us/op
                 readAndWrite·p0.00:   160.256 us/op
                 readAndWrite·p0.50:   168.448 us/op
                 readAndWrite·p0.90:   176.640 us/op
                 readAndWrite·p0.95:   184.832 us/op
                 readAndWrite·p0.99:   207.104 us/op
                 readAndWrite·p0.999:  412.093 us/op
                 readAndWrite·p0.9999: 593.190 us/op
                 readAndWrite·p1.00:   758.784 us/op

Iteration  14: 170.751 ±(99.9%) 0.238 us/op
                 readAndWrite·p0.00:   160.000 us/op
                 readAndWrite·p0.50:   168.704 us/op
                 readAndWrite·p0.90:   176.128 us/op
                 readAndWrite·p0.95:   183.808 us/op
                 readAndWrite·p0.99:   203.520 us/op
                 readAndWrite·p0.999:  423.184 us/op
                 readAndWrite·p0.9999: 588.683 us/op
                 readAndWrite·p1.00:   1255.424 us/op

Iteration  15: 170.010 ±(99.9%) 0.225 us/op
                 readAndWrite·p0.00:   160.256 us/op
                 readAndWrite·p0.50:   167.424 us/op
                 readAndWrite·p0.90:   176.128 us/op
                 readAndWrite·p0.95:   183.552 us/op
                 readAndWrite·p0.99:   206.275 us/op
                 readAndWrite·p0.999:  418.304 us/op
                 readAndWrite·p0.9999: 507.096 us/op
                 readAndWrite·p1.00:   628.736 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  N = 882241
  mean =    169.735 ±(99.9%) 0.060 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 877568 
    [ 250.000,  500.000) = 4543 
    [ 500.000,  750.000) = 123 
    [ 750.000, 1000.000) = 2 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 1 
    [1500.000, 1750.000) = 1 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 1 
    [2250.000, 2500.000) = 1 
    [2500.000, 2750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    159.744 us/op
     p(50.0000) =    167.168 us/op
     p(90.0000) =    175.872 us/op
     p(95.0000) =    184.064 us/op
     p(99.0000) =    209.664 us/op
     p(99.9000) =    415.232 us/op
     p(99.9900) =    526.336 us/op
     p(99.9990) =    727.605 us/op
     p(99.9999) =   2605.056 us/op
    p(100.0000) =   2605.056 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 76.81% complete, ETA 01:58:02
# Fork: 1 of 1
# Warmup Iteration   1: 201.333 ±(99.9%) 0.427 us/op
# Warmup Iteration   2: 202.285 ±(99.9%) 0.159 us/op
# Warmup Iteration   3: 207.227 ±(99.9%) 0.160 us/op
# Warmup Iteration   4: 207.332 ±(99.9%) 0.167 us/op
# Warmup Iteration   5: 207.306 ±(99.9%) 0.190 us/op
Iteration   1: 207.552 ±(99.9%) 0.192 us/op
                 swap·p0.00:   202.240 us/op
                 swap·p0.50:   204.800 us/op
                 swap·p0.90:   211.200 us/op
                 swap·p0.95:   215.040 us/op
                 swap·p0.99:   230.400 us/op
                 swap·p0.999:  396.288 us/op
                 swap·p0.9999: 479.613 us/op
                 swap·p1.00:   495.616 us/op

Iteration   2: 207.157 ±(99.9%) 0.156 us/op
                 swap·p0.00:   202.240 us/op
                 swap·p0.50:   204.800 us/op
                 swap·p0.90:   210.432 us/op
                 swap·p0.95:   214.528 us/op
                 swap·p0.99:   227.328 us/op
                 swap·p0.999:  361.472 us/op
                 swap·p0.9999: 447.232 us/op
                 swap·p1.00:   576.512 us/op

Iteration   3: 207.267 ±(99.9%) 0.167 us/op
                 swap·p0.00:   202.240 us/op
                 swap·p0.50:   204.800 us/op
                 swap·p0.90:   210.688 us/op
                 swap·p0.95:   214.784 us/op
                 swap·p0.99:   226.816 us/op
                 swap·p0.999:  368.128 us/op
                 swap·p0.9999: 476.796 us/op
                 swap·p1.00:   615.424 us/op

Iteration   4: 207.234 ±(99.9%) 0.165 us/op
                 swap·p0.00:   202.240 us/op
                 swap·p0.50:   204.800 us/op
                 swap·p0.90:   210.688 us/op
                 swap·p0.95:   214.784 us/op
                 swap·p0.99:   226.304 us/op
                 swap·p0.999:  364.948 us/op
                 swap·p0.9999: 490.226 us/op
                 swap·p1.00:   680.960 us/op

Iteration   5: 207.113 ±(99.9%) 0.154 us/op
                 swap·p0.00:   202.240 us/op
                 swap·p0.50:   204.800 us/op
                 swap·p0.90:   210.176 us/op
                 swap·p0.95:   214.528 us/op
                 swap·p0.99:   225.536 us/op
                 swap·p0.999:  360.448 us/op
                 swap·p0.9999: 461.280 us/op
                 swap·p1.00:   535.552 us/op

Iteration   6: 207.464 ±(99.9%) 0.308 us/op
                 swap·p0.00:   202.240 us/op
                 swap·p0.50:   205.056 us/op
                 swap·p0.90:   211.200 us/op
                 swap·p0.95:   215.040 us/op
                 swap·p0.99:   228.352 us/op
                 swap·p0.999:  372.143 us/op
                 swap·p0.9999: 490.186 us/op
                 swap·p1.00:   4026.368 us/op

Iteration   7: 207.640 ±(99.9%) 0.195 us/op
                 swap·p0.00:   202.240 us/op
                 swap·p0.50:   205.056 us/op
                 swap·p0.90:   211.200 us/op
                 swap·p0.95:   215.040 us/op
                 swap·p0.99:   233.172 us/op
                 swap·p0.999:  381.440 us/op
                 swap·p0.9999: 583.899 us/op
                 swap·p1.00:   731.136 us/op

Iteration   8: 207.210 ±(99.9%) 0.162 us/op
                 swap·p0.00:   202.240 us/op
                 swap·p0.50:   204.800 us/op
                 swap·p0.90:   210.688 us/op
                 swap·p0.95:   214.272 us/op
                 swap·p0.99:   226.560 us/op
                 swap·p0.999:  357.776 us/op
                 swap·p0.9999: 464.217 us/op
                 swap·p1.00:   534.528 us/op

Iteration   9: 207.095 ±(99.9%) 0.151 us/op
                 swap·p0.00:   202.240 us/op
                 swap·p0.50:   204.800 us/op
                 swap·p0.90:   210.432 us/op
                 swap·p0.95:   214.016 us/op
                 swap·p0.99:   224.768 us/op
                 swap·p0.999:  357.251 us/op
                 swap·p0.9999: 445.467 us/op
                 swap·p1.00:   576.512 us/op

Iteration  10: 207.202 ±(99.9%) 0.157 us/op
                 swap·p0.00:   202.240 us/op
                 swap·p0.50:   204.800 us/op
                 swap·p0.90:   210.432 us/op
                 swap·p0.95:   214.285 us/op
                 swap·p0.99:   227.072 us/op
                 swap·p0.999:  362.272 us/op
                 swap·p0.9999: 460.534 us/op
                 swap·p1.00:   510.464 us/op

Iteration  11: 207.116 ±(99.9%) 0.150 us/op
                 swap·p0.00:   202.240 us/op
                 swap·p0.50:   204.800 us/op
                 swap·p0.90:   210.432 us/op
                 swap·p0.95:   214.528 us/op
                 swap·p0.99:   226.048 us/op
                 swap·p0.999:  358.278 us/op
                 swap·p0.9999: 429.896 us/op
                 swap·p1.00:   486.912 us/op

Iteration  12: 206.950 ±(99.9%) 0.143 us/op
                 swap·p0.00:   202.240 us/op
                 swap·p0.50:   204.800 us/op
                 swap·p0.90:   209.920 us/op
                 swap·p0.95:   213.760 us/op
                 swap·p0.99:   222.976 us/op
                 swap·p0.999:  354.162 us/op
                 swap·p0.9999: 439.574 us/op
                 swap·p1.00:   521.728 us/op

Iteration  13: 207.267 ±(99.9%) 0.158 us/op
                 swap·p0.00:   202.240 us/op
                 swap·p0.50:   204.800 us/op
                 swap·p0.90:   210.688 us/op
                 swap·p0.95:   214.784 us/op
                 swap·p0.99:   237.312 us/op
                 swap·p0.999:  359.832 us/op
                 swap·p0.9999: 443.340 us/op
                 swap·p1.00:   560.128 us/op

Iteration  14: 207.362 ±(99.9%) 0.172 us/op
                 swap·p0.00:   202.240 us/op
                 swap·p0.50:   204.800 us/op
                 swap·p0.90:   210.944 us/op
                 swap·p0.95:   214.528 us/op
                 swap·p0.99:   236.288 us/op
                 swap·p0.999:  368.128 us/op
                 swap·p0.9999: 560.776 us/op
                 swap·p1.00:   750.592 us/op

Iteration  15: 207.497 ±(99.9%) 0.183 us/op
                 swap·p0.00:   202.240 us/op
                 swap·p0.50:   204.800 us/op
                 swap·p0.90:   210.944 us/op
                 swap·p0.95:   215.296 us/op
                 swap·p0.99:   239.104 us/op
                 swap·p0.999:  369.075 us/op
                 swap·p0.9999: 482.848 us/op
                 swap·p1.00:   1298.432 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  N = 723016
  mean =    207.275 ±(99.9%) 0.046 us/op

  Histogram, us/op:
    [   0.000,  500.000) = 722969 
    [ 500.000, 1000.000) = 45 
    [1000.000, 1500.000) = 1 
    [1500.000, 2000.000) = 0 
    [2000.000, 2500.000) = 0 
    [2500.000, 3000.000) = 0 
    [3000.000, 3500.000) = 0 
    [3500.000, 4000.000) = 0 
    [4000.000, 4500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    202.240 us/op
     p(50.0000) =    204.800 us/op
     p(90.0000) =    210.688 us/op
     p(95.0000) =    214.528 us/op
     p(99.0000) =    228.608 us/op
     p(99.9000) =    366.080 us/op
     p(99.9900) =    468.683 us/op
     p(99.9990) =    631.426 us/op
     p(99.9999) =   4026.368 us/op
    p(100.0000) =   4026.368 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 77.53% complete, ETA 01:54:19
# Fork: 1 of 1
# Warmup Iteration   1: 174.078 ±(99.9%) 0.371 us/op
# Warmup Iteration   2: 184.172 ±(99.9%) 0.246 us/op
# Warmup Iteration   3: 183.713 ±(99.9%) 0.237 us/op
# Warmup Iteration   4: 182.727 ±(99.9%) 0.229 us/op
# Warmup Iteration   5: 183.166 ±(99.9%) 0.233 us/op
Iteration   1: 183.929 ±(99.9%) 0.241 us/op
                 write·p0.00:   172.032 us/op
                 write·p0.50:   181.504 us/op
                 write·p0.90:   191.232 us/op
                 write·p0.95:   198.656 us/op
                 write·p0.99:   220.204 us/op
                 write·p0.999:  444.638 us/op
                 write·p0.9999: 562.910 us/op
                 write·p1.00:   607.232 us/op

Iteration   2: 182.488 ±(99.9%) 0.236 us/op
                 write·p0.00:   171.776 us/op
                 write·p0.50:   179.200 us/op
                 write·p0.90:   189.696 us/op
                 write·p0.95:   197.120 us/op
                 write·p0.99:   215.552 us/op
                 write·p0.999:  438.272 us/op
                 write·p0.9999: 523.323 us/op
                 write·p1.00:   675.840 us/op

Iteration   3: 184.503 ±(99.9%) 0.308 us/op
                 write·p0.00:   172.032 us/op
                 write·p0.50:   182.016 us/op
                 write·p0.90:   192.000 us/op
                 write·p0.95:   199.680 us/op
                 write·p0.99:   222.464 us/op
                 write·p0.999:  440.713 us/op
                 write·p0.9999: 558.626 us/op
                 write·p1.00:   3198.976 us/op

Iteration   4: 184.011 ±(99.9%) 0.241 us/op
                 write·p0.00:   171.776 us/op
                 write·p0.50:   181.504 us/op
                 write·p0.90:   192.000 us/op
                 write·p0.95:   199.168 us/op
                 write·p0.99:   222.464 us/op
                 write·p0.999:  446.976 us/op
                 write·p0.9999: 513.839 us/op
                 write·p1.00:   572.416 us/op

Iteration   5: 182.083 ±(99.9%) 0.242 us/op
                 write·p0.00:   171.776 us/op
                 write·p0.50:   178.688 us/op
                 write·p0.90:   189.184 us/op
                 write·p0.95:   196.608 us/op
                 write·p0.99:   220.160 us/op
                 write·p0.999:  436.736 us/op
                 write·p0.9999: 524.817 us/op
                 write·p1.00:   795.648 us/op

Iteration   6: 182.676 ±(99.9%) 0.239 us/op
                 write·p0.00:   171.776 us/op
                 write·p0.50:   179.456 us/op
                 write·p0.90:   190.208 us/op
                 write·p0.95:   197.376 us/op
                 write·p0.99:   216.320 us/op
                 write·p0.999:  438.112 us/op
                 write·p0.9999: 535.216 us/op
                 write·p1.00:   931.840 us/op

Iteration   7: 183.842 ±(99.9%) 0.260 us/op
                 write·p0.00:   172.288 us/op
                 write·p0.50:   180.992 us/op
                 write·p0.90:   191.488 us/op
                 write·p0.95:   198.656 us/op
                 write·p0.99:   219.392 us/op
                 write·p0.999:  447.488 us/op
                 write·p0.9999: 718.654 us/op
                 write·p1.00:   828.416 us/op

Iteration   8: 182.945 ±(99.9%) 0.235 us/op
                 write·p0.00:   172.032 us/op
                 write·p0.50:   179.968 us/op
                 write·p0.90:   190.208 us/op
                 write·p0.95:   197.632 us/op
                 write·p0.99:   220.160 us/op
                 write·p0.999:  434.611 us/op
                 write·p0.9999: 532.654 us/op
                 write·p1.00:   627.712 us/op

Iteration   9: 184.595 ±(99.9%) 0.345 us/op
                 write·p0.00:   172.288 us/op
                 write·p0.50:   182.016 us/op
                 write·p0.90:   192.256 us/op
                 write·p0.95:   200.448 us/op
                 write·p0.99:   226.816 us/op
                 write·p0.999:  459.731 us/op
                 write·p0.9999: 602.067 us/op
                 write·p1.00:   3682.304 us/op

Iteration  10: 182.803 ±(99.9%) 0.223 us/op
                 write·p0.00:   172.288 us/op
                 write·p0.50:   180.224 us/op
                 write·p0.90:   189.440 us/op
                 write·p0.95:   196.608 us/op
                 write·p0.99:   216.576 us/op
                 write·p0.999:  428.544 us/op
                 write·p0.9999: 517.861 us/op
                 write·p1.00:   648.192 us/op

Iteration  11: 173.863 ±(99.9%) 0.235 us/op
                 write·p0.00:   163.328 us/op
                 write·p0.50:   170.752 us/op
                 write·p0.90:   180.224 us/op
                 write·p0.95:   186.624 us/op
                 write·p0.99:   206.080 us/op
                 write·p0.999:  420.864 us/op
                 write·p0.9999: 515.249 us/op
                 write·p1.00:   1611.776 us/op

Iteration  12: 182.818 ±(99.9%) 0.229 us/op
                 write·p0.00:   172.032 us/op
                 write·p0.50:   180.480 us/op
                 write·p0.90:   189.952 us/op
                 write·p0.95:   196.608 us/op
                 write·p0.99:   214.784 us/op
                 write·p0.999:  438.272 us/op
                 write·p0.9999: 513.220 us/op
                 write·p1.00:   569.344 us/op

Iteration  13: 183.815 ±(99.9%) 0.247 us/op
                 write·p0.00:   171.776 us/op
                 write·p0.50:   181.504 us/op
                 write·p0.90:   190.976 us/op
                 write·p0.95:   198.400 us/op
                 write·p0.99:   220.928 us/op
                 write·p0.999:  435.712 us/op
                 write·p0.9999: 608.838 us/op
                 write·p1.00:   675.840 us/op

Iteration  14: 182.380 ±(99.9%) 0.233 us/op
                 write·p0.00:   171.520 us/op
                 write·p0.50:   179.712 us/op
                 write·p0.90:   189.184 us/op
                 write·p0.95:   196.096 us/op
                 write·p0.99:   217.344 us/op
                 write·p0.999:  428.803 us/op
                 write·p0.9999: 543.238 us/op
                 write·p1.00:   708.608 us/op

Iteration  15: 181.767 ±(99.9%) 0.234 us/op
                 write·p0.00:   171.008 us/op
                 write·p0.50:   178.432 us/op
                 write·p0.90:   189.184 us/op
                 write·p0.95:   195.328 us/op
                 write·p0.99:   214.272 us/op
                 write·p0.999:  437.760 us/op
                 write·p0.9999: 551.009 us/op
                 write·p1.00:   754.688 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  N = 820481
  mean =    182.533 ±(99.9%) 0.066 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 815860 
    [ 250.000,  500.000) = 4440 
    [ 500.000,  750.000) = 168 
    [ 750.000, 1000.000) = 10 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 1 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 
    [2750.000, 3000.000) = 0 
    [3000.000, 3250.000) = 1 
    [3250.000, 3500.000) = 0 
    [3500.000, 3750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    163.328 us/op
     p(50.0000) =    179.712 us/op
     p(90.0000) =    190.208 us/op
     p(95.0000) =    197.120 us/op
     p(99.0000) =    218.368 us/op
     p(99.9000) =    437.760 us/op
     p(99.9900) =    549.839 us/op
     p(99.9990) =    821.704 us/op
     p(99.9999) =   3682.304 us/op
    p(100.0000) =   3682.304 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 78.26% complete, ETA 01:50:36
# Fork: 1 of 1
# Warmup Iteration   1: 1234523.477 ±(99.9%) 23041.976 us/op
# Warmup Iteration   2: 1228232.021 ±(99.9%) 4316.158 us/op
# Warmup Iteration   3: 1227999.004 ±(99.9%) 3983.633 us/op
# Warmup Iteration   4: 1226833.920 ±(99.9%) 6353.212 us/op
# Warmup Iteration   5: 1230329.173 ±(99.9%) 7265.176 us/op
Iteration   1: 1226367.886 ±(99.9%) 4235.475 us/op
                 sumBigDecimals·p0.00:   1222639.616 us/op
                 sumBigDecimals·p0.50:   1226833.920 us/op
                 sumBigDecimals·p0.90:   1231028.224 us/op
                 sumBigDecimals·p0.95:   1231028.224 us/op
                 sumBigDecimals·p0.99:   1231028.224 us/op
                 sumBigDecimals·p0.999:  1231028.224 us/op
                 sumBigDecimals·p0.9999: 1231028.224 us/op
                 sumBigDecimals·p1.00:   1231028.224 us/op

Iteration   2: 1227066.937 ±(99.9%) 5120.439 us/op
                 sumBigDecimals·p0.00:   1222639.616 us/op
                 sumBigDecimals·p0.50:   1226833.920 us/op
                 sumBigDecimals·p0.90:   1233125.376 us/op
                 sumBigDecimals·p0.95:   1233125.376 us/op
                 sumBigDecimals·p0.99:   1233125.376 us/op
                 sumBigDecimals·p0.999:  1233125.376 us/op
                 sumBigDecimals·p0.9999: 1233125.376 us/op
                 sumBigDecimals·p1.00:   1233125.376 us/op

Iteration   3: 1226833.920 ±(99.9%) 3051.984 us/op
                 sumBigDecimals·p0.00:   1224736.768 us/op
                 sumBigDecimals·p0.50:   1226833.920 us/op
                 sumBigDecimals·p0.90:   1231028.224 us/op
                 sumBigDecimals·p0.95:   1231028.224 us/op
                 sumBigDecimals·p0.99:   1231028.224 us/op
                 sumBigDecimals·p0.999:  1231028.224 us/op
                 sumBigDecimals·p0.9999: 1231028.224 us/op
                 sumBigDecimals·p1.00:   1231028.224 us/op

Iteration   4: 1227299.954 ±(99.9%) 4235.475 us/op
                 sumBigDecimals·p0.00:   1222639.616 us/op
                 sumBigDecimals·p0.50:   1226833.920 us/op
                 sumBigDecimals·p0.90:   1231028.224 us/op
                 sumBigDecimals·p0.95:   1231028.224 us/op
                 sumBigDecimals·p0.99:   1231028.224 us/op
                 sumBigDecimals·p0.999:  1231028.224 us/op
                 sumBigDecimals·p0.9999: 1231028.224 us/op
                 sumBigDecimals·p1.00:   1231028.224 us/op

Iteration   5: 1226600.903 ±(99.9%) 4111.483 us/op
                 sumBigDecimals·p0.00:   1222639.616 us/op
                 sumBigDecimals·p0.50:   1226833.920 us/op
                 sumBigDecimals·p0.90:   1231028.224 us/op
                 sumBigDecimals·p0.95:   1231028.224 us/op
                 sumBigDecimals·p0.99:   1231028.224 us/op
                 sumBigDecimals·p0.999:  1231028.224 us/op
                 sumBigDecimals·p0.9999: 1231028.224 us/op
                 sumBigDecimals·p1.00:   1231028.224 us/op

Iteration   6: 1225435.819 ±(99.9%) 2491.935 us/op
                 sumBigDecimals·p0.00:   1222639.616 us/op
                 sumBigDecimals·p0.50:   1224736.768 us/op
                 sumBigDecimals·p0.90:   1226833.920 us/op
                 sumBigDecimals·p0.95:   1226833.920 us/op
                 sumBigDecimals·p0.99:   1226833.920 us/op
                 sumBigDecimals·p0.999:  1226833.920 us/op
                 sumBigDecimals·p0.9999: 1226833.920 us/op
                 sumBigDecimals·p1.00:   1226833.920 us/op

Iteration   7: 1227532.971 ±(99.9%) 2491.935 us/op
                 sumBigDecimals·p0.00:   1224736.768 us/op
                 sumBigDecimals·p0.50:   1226833.920 us/op
                 sumBigDecimals·p0.90:   1228931.072 us/op
                 sumBigDecimals·p0.95:   1228931.072 us/op
                 sumBigDecimals·p0.99:   1228931.072 us/op
                 sumBigDecimals·p0.999:  1228931.072 us/op
                 sumBigDecimals·p0.9999: 1228931.072 us/op
                 sumBigDecimals·p1.00:   1228931.072 us/op

Iteration   8: 1227299.954 ±(99.9%) 4235.475 us/op
                 sumBigDecimals·p0.00:   1222639.616 us/op
                 sumBigDecimals·p0.50:   1226833.920 us/op
                 sumBigDecimals·p0.90:   1231028.224 us/op
                 sumBigDecimals·p0.95:   1231028.224 us/op
                 sumBigDecimals·p0.99:   1231028.224 us/op
                 sumBigDecimals·p0.999:  1231028.224 us/op
                 sumBigDecimals·p0.9999: 1231028.224 us/op
                 sumBigDecimals·p1.00:   1231028.224 us/op

Iteration   9: 1225901.852 ±(99.9%) 3983.633 us/op
                 sumBigDecimals·p0.00:   1222639.616 us/op
                 sumBigDecimals·p0.50:   1224736.768 us/op
                 sumBigDecimals·p0.90:   1231028.224 us/op
                 sumBigDecimals·p0.95:   1231028.224 us/op
                 sumBigDecimals·p0.99:   1231028.224 us/op
                 sumBigDecimals·p0.999:  1231028.224 us/op
                 sumBigDecimals·p0.9999: 1231028.224 us/op
                 sumBigDecimals·p1.00:   1231028.224 us/op

Iteration  10: 1227765.988 ±(99.9%) 5873.547 us/op
                 sumBigDecimals·p0.00:   1222639.616 us/op
                 sumBigDecimals·p0.50:   1226833.920 us/op
                 sumBigDecimals·p0.90:   1235222.528 us/op
                 sumBigDecimals·p0.95:   1235222.528 us/op
                 sumBigDecimals·p0.99:   1235222.528 us/op
                 sumBigDecimals·p0.999:  1235222.528 us/op
                 sumBigDecimals·p0.9999: 1235222.528 us/op
                 sumBigDecimals·p1.00:   1235222.528 us/op

Iteration  11: 1225901.852 ±(99.9%) 3572.739 us/op
                 sumBigDecimals·p0.00:   1222639.616 us/op
                 sumBigDecimals·p0.50:   1224736.768 us/op
                 sumBigDecimals·p0.90:   1228931.072 us/op
                 sumBigDecimals·p0.95:   1228931.072 us/op
                 sumBigDecimals·p0.99:   1228931.072 us/op
                 sumBigDecimals·p0.999:  1228931.072 us/op
                 sumBigDecimals·p0.9999: 1228931.072 us/op
                 sumBigDecimals·p1.00:   1228931.072 us/op

Iteration  12: 1226134.869 ±(99.9%) 5286.192 us/op
                 sumBigDecimals·p0.00:   1222639.616 us/op
                 sumBigDecimals·p0.50:   1226833.920 us/op
                 sumBigDecimals·p0.90:   1231028.224 us/op
                 sumBigDecimals·p0.95:   1231028.224 us/op
                 sumBigDecimals·p0.99:   1231028.224 us/op
                 sumBigDecimals·p0.999:  1231028.224 us/op
                 sumBigDecimals·p0.9999: 1231028.224 us/op
                 sumBigDecimals·p1.00:   1231028.224 us/op

Iteration  13: 1227532.971 ±(99.9%) 3524.128 us/op
                 sumBigDecimals·p0.00:   1224736.768 us/op
                 sumBigDecimals·p0.50:   1226833.920 us/op
                 sumBigDecimals·p0.90:   1231028.224 us/op
                 sumBigDecimals·p0.95:   1231028.224 us/op
                 sumBigDecimals·p0.99:   1231028.224 us/op
                 sumBigDecimals·p0.999:  1231028.224 us/op
                 sumBigDecimals·p0.9999: 1231028.224 us/op
                 sumBigDecimals·p1.00:   1231028.224 us/op

Iteration  14: 1225901.852 ±(99.9%) 3107.989 us/op
                 sumBigDecimals·p0.00:   1222639.616 us/op
                 sumBigDecimals·p0.50:   1226833.920 us/op
                 sumBigDecimals·p0.90:   1228931.072 us/op
                 sumBigDecimals·p0.95:   1228931.072 us/op
                 sumBigDecimals·p0.99:   1228931.072 us/op
                 sumBigDecimals·p0.999:  1228931.072 us/op
                 sumBigDecimals·p0.9999: 1228931.072 us/op
                 sumBigDecimals·p1.00:   1228931.072 us/op

Iteration  15: 1228931.072 ±(99.9%) 5286.192 us/op
                 sumBigDecimals·p0.00:   1224736.768 us/op
                 sumBigDecimals·p0.50:   1228931.072 us/op
                 sumBigDecimals·p0.90:   1235222.528 us/op
                 sumBigDecimals·p0.95:   1235222.528 us/op
                 sumBigDecimals·p0.99:   1235222.528 us/op
                 sumBigDecimals·p0.999:  1235222.528 us/op
                 sumBigDecimals·p0.9999: 1235222.528 us/op
                 sumBigDecimals·p1.00:   1235222.528 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  N = 135
  mean = 1226833.920 ±(99.9%) 726.937 us/op

  Histogram, us/op:
    [1220000.000, 1221250.000) = 0 
    [1221250.000, 1222500.000) = 0 
    [1222500.000, 1223750.000) = 13 
    [1223750.000, 1225000.000) = 32 
    [1225000.000, 1226250.000) = 0 
    [1226250.000, 1227500.000) = 50 
    [1227500.000, 1228750.000) = 0 
    [1228750.000, 1230000.000) = 27 
    [1230000.000, 1231250.000) = 10 
    [1231250.000, 1232500.000) = 0 
    [1232500.000, 1233750.000) = 1 
    [1233750.000, 1235000.000) = 0 
    [1235000.000, 1236250.000) = 2 
    [1236250.000, 1237500.000) = 0 
    [1237500.000, 1238750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1222639.616 us/op
     p(50.0000) = 1226833.920 us/op
     p(90.0000) = 1229769.933 us/op
     p(95.0000) = 1231028.224 us/op
     p(99.0000) = 1235222.528 us/op
     p(99.9000) = 1235222.528 us/op
     p(99.9900) = 1235222.528 us/op
     p(99.9990) = 1235222.528 us/op
     p(99.9999) = 1235222.528 us/op
    p(100.0000) = 1235222.528 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 78.98% complete, ETA 01:46:58
# Fork: 1 of 1
# Warmup Iteration   1: 947912.704 ±(99.9%) 18332.034 us/op
# Warmup Iteration   2: 931993.414 ±(99.9%) 1423.570 us/op
# Warmup Iteration   3: 934853.167 ±(99.9%) 1759.882 us/op
# Warmup Iteration   4: 906406.571 ±(99.9%) 2021.368 us/op
# Warmup Iteration   5: 999292.928 ±(99.9%) 1297.081 us/op
Iteration   1: 951058.432 ±(99.9%) 4676.694 us/op
                 countUppercase·p0.00:   943718.400 us/op
                 countUppercase·p0.50:   951058.432 us/op
                 countUppercase·p0.90:   956091.597 us/op
                 countUppercase·p0.95:   956301.312 us/op
                 countUppercase·p0.99:   956301.312 us/op
                 countUppercase·p0.999:  956301.312 us/op
                 countUppercase·p0.9999: 956301.312 us/op
                 countUppercase·p1.00:   956301.312 us/op

Iteration   2: 976891.532 ±(99.9%) 2078.644 us/op
                 countUppercase·p0.00:   975175.680 us/op
                 countUppercase·p0.50:   976224.256 us/op
                 countUppercase·p0.90:   979369.984 us/op
                 countUppercase·p0.95:   979369.984 us/op
                 countUppercase·p0.99:   979369.984 us/op
                 countUppercase·p0.999:  979369.984 us/op
                 countUppercase·p0.9999: 979369.984 us/op
                 countUppercase·p1.00:   979369.984 us/op

Iteration   3: 974603.729 ±(99.9%) 3632.039 us/op
                 countUppercase·p0.00:   970981.376 us/op
                 countUppercase·p0.50:   974127.104 us/op
                 countUppercase·p0.90:   979579.699 us/op
                 countUppercase·p0.95:   980418.560 us/op
                 countUppercase·p0.99:   980418.560 us/op
                 countUppercase·p0.999:  980418.560 us/op
                 countUppercase·p0.9999: 980418.560 us/op
                 countUppercase·p1.00:   980418.560 us/op

Iteration   4: 963546.019 ±(99.9%) 3140.876 us/op
                 countUppercase·p0.00:   959447.040 us/op
                 countUppercase·p0.50:   963641.344 us/op
                 countUppercase·p0.90:   968045.363 us/op
                 countUppercase·p0.95:   968884.224 us/op
                 countUppercase·p0.99:   968884.224 us/op
                 countUppercase·p0.999:  968884.224 us/op
                 countUppercase·p0.9999: 968884.224 us/op
                 countUppercase·p1.00:   968884.224 us/op

Iteration   5: 957635.863 ±(99.9%) 3673.908 us/op
                 countUppercase·p0.00:   955252.736 us/op
                 countUppercase·p0.50:   956301.312 us/op
                 countUppercase·p0.90:   962383.053 us/op
                 countUppercase·p0.95:   962592.768 us/op
                 countUppercase·p0.99:   962592.768 us/op
                 countUppercase·p0.999:  962592.768 us/op
                 countUppercase·p0.9999: 962592.768 us/op
                 countUppercase·p1.00:   962592.768 us/op

Iteration   6: 976700.881 ±(99.9%) 1354.757 us/op
                 countUppercase·p0.00:   974127.104 us/op
                 countUppercase·p0.50:   977272.832 us/op
                 countUppercase·p0.90:   977272.832 us/op
                 countUppercase·p0.95:   977272.832 us/op
                 countUppercase·p0.99:   977272.832 us/op
                 countUppercase·p0.999:  977272.832 us/op
                 countUppercase·p0.9999: 977272.832 us/op
                 countUppercase·p1.00:   977272.832 us/op

Iteration   7: 943051.124 ±(99.9%) 1974.881 us/op
                 countUppercase·p0.00:   940572.672 us/op
                 countUppercase·p0.50:   942669.824 us/op
                 countUppercase·p0.90:   944766.976 us/op
                 countUppercase·p0.95:   944766.976 us/op
                 countUppercase·p0.99:   944766.976 us/op
                 countUppercase·p0.999:  944766.976 us/op
                 countUppercase·p0.9999: 944766.976 us/op
                 countUppercase·p1.00:   944766.976 us/op

Iteration   8: 962402.118 ±(99.9%) 2032.136 us/op
                 countUppercase·p0.00:   960495.616 us/op
                 countUppercase·p0.50:   962592.768 us/op
                 countUppercase·p0.90:   964689.920 us/op
                 countUppercase·p0.95:   964689.920 us/op
                 countUppercase·p0.99:   964689.920 us/op
                 countUppercase·p0.999:  964689.920 us/op
                 countUppercase·p0.9999: 964689.920 us/op
                 countUppercase·p1.00:   964689.920 us/op

Iteration   9: 976224.256 ±(99.9%) 5268.770 us/op
                 countUppercase·p0.00:   966787.072 us/op
                 countUppercase·p0.50:   977272.832 us/op
                 countUppercase·p0.90:   980208.845 us/op
                 countUppercase·p0.95:   980418.560 us/op
                 countUppercase·p0.99:   980418.560 us/op
                 countUppercase·p0.999:  980418.560 us/op
                 countUppercase·p0.9999: 980418.560 us/op
                 countUppercase·p1.00:   980418.560 us/op

Iteration  10: 972315.927 ±(99.9%) 3048.204 us/op
                 countUppercase·p0.00:   968884.224 us/op
                 countUppercase·p0.50:   972029.952 us/op
                 countUppercase·p0.90:   976014.541 us/op
                 countUppercase·p0.95:   976224.256 us/op
                 countUppercase·p0.99:   976224.256 us/op
                 countUppercase·p0.999:  976224.256 us/op
                 countUppercase·p0.9999: 976224.256 us/op
                 countUppercase·p1.00:   976224.256 us/op

Iteration  11: 963069.393 ±(99.9%) 2623.476 us/op
                 countUppercase·p0.00:   959447.040 us/op
                 countUppercase·p0.50:   962592.768 us/op
                 countUppercase·p0.90:   965738.496 us/op
                 countUppercase·p0.95:   965738.496 us/op
                 countUppercase·p0.99:   965738.496 us/op
                 countUppercase·p0.999:  965738.496 us/op
                 countUppercase·p0.9999: 965738.496 us/op
                 countUppercase·p1.00:   965738.496 us/op

Iteration  12: 941525.923 ±(99.9%) 2709.515 us/op
                 countUppercase·p0.00:   939524.096 us/op
                 countUppercase·p0.50:   940572.672 us/op
                 countUppercase·p0.90:   945396.122 us/op
                 countUppercase·p0.95:   945815.552 us/op
                 countUppercase·p0.99:   945815.552 us/op
                 countUppercase·p0.999:  945815.552 us/op
                 countUppercase·p0.9999: 945815.552 us/op
                 countUppercase·p1.00:   945815.552 us/op

Iteration  13: 947912.704 ±(99.9%) 10437.275 us/op
                 countUppercase·p0.00:   942669.824 us/op
                 countUppercase·p0.50:   944766.976 us/op
                 countUppercase·p0.90:   965948.211 us/op
                 countUppercase·p0.95:   968884.224 us/op
                 countUppercase·p0.99:   968884.224 us/op
                 countUppercase·p0.999:  968884.224 us/op
                 countUppercase·p0.9999: 968884.224 us/op
                 countUppercase·p1.00:   968884.224 us/op

Iteration  14: 954776.111 ±(99.9%) 3689.486 us/op
                 countUppercase·p0.00:   951058.432 us/op
                 countUppercase·p0.50:   955252.736 us/op
                 countUppercase·p0.90:   959027.610 us/op
                 countUppercase·p0.95:   959447.040 us/op
                 countUppercase·p0.99:   959447.040 us/op
                 countUppercase·p0.999:  959447.040 us/op
                 countUppercase·p0.9999: 959447.040 us/op
                 countUppercase·p1.00:   959447.040 us/op

Iteration  15: 937998.895 ±(99.9%) 1759.882 us/op
                 countUppercase·p0.00:   936378.368 us/op
                 countUppercase·p0.50:   938475.520 us/op
                 countUppercase·p0.90:   939524.096 us/op
                 countUppercase·p0.95:   939524.096 us/op
                 countUppercase·p0.99:   939524.096 us/op
                 countUppercase·p0.999:  939524.096 us/op
                 countUppercase·p0.9999: 939524.096 us/op
                 countUppercase·p1.00:   939524.096 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 165
  mean = 959980.861 ±(99.9%) 3517.193 us/op

  Histogram, us/op:
    [930000.000, 935000.000) = 0 
    [935000.000, 940000.000) = 13 
    [940000.000, 945000.000) = 26 
    [945000.000, 950000.000) = 6 
    [950000.000, 955000.000) = 12 
    [955000.000, 960000.000) = 18 
    [960000.000, 965000.000) = 31 
    [965000.000, 970000.000) = 7 
    [970000.000, 975000.000) = 16 
    [975000.000, 980000.000) = 34 
    [980000.000, 985000.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 936378.368 us/op
     p(50.0000) = 961544.192 us/op
     p(90.0000) = 977272.832 us/op
     p(95.0000) = 978321.408 us/op
     p(99.0000) = 980418.560 us/op
     p(99.9000) = 980418.560 us/op
     p(99.9900) = 980418.560 us/op
     p(99.9990) = 980418.560 us/op
     p(99.9999) = 980418.560 us/op
    p(100.0000) = 980418.560 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 79.71% complete, ETA 01:43:18
# Fork: 1 of 1
# Warmup Iteration   1: 16156459.008 us/op
# Warmup Iteration   2: 15485370.368 us/op
# Warmup Iteration   3: 16156459.008 us/op
# Warmup Iteration   4: 16408117.248 us/op
# Warmup Iteration   5: 17045651.456 us/op
Iteration   1: 16508780.544 us/op
                 countUppercase·p0.00:   16508780.544 us/op
                 countUppercase·p0.50:   16508780.544 us/op
                 countUppercase·p0.90:   16508780.544 us/op
                 countUppercase·p0.95:   16508780.544 us/op
                 countUppercase·p0.99:   16508780.544 us/op
                 countUppercase·p0.999:  16508780.544 us/op
                 countUppercase·p0.9999: 16508780.544 us/op
                 countUppercase·p1.00:   16508780.544 us/op

Iteration   2: 17179869.184 us/op
                 countUppercase·p0.00:   17179869.184 us/op
                 countUppercase·p0.50:   17179869.184 us/op
                 countUppercase·p0.90:   17179869.184 us/op
                 countUppercase·p0.95:   17179869.184 us/op
                 countUppercase·p0.99:   17179869.184 us/op
                 countUppercase·p0.999:  17179869.184 us/op
                 countUppercase·p0.9999: 17179869.184 us/op
                 countUppercase·p1.00:   17179869.184 us/op

Iteration   3: 17347641.344 us/op
                 countUppercase·p0.00:   17347641.344 us/op
                 countUppercase·p0.50:   17347641.344 us/op
                 countUppercase·p0.90:   17347641.344 us/op
                 countUppercase·p0.95:   17347641.344 us/op
                 countUppercase·p0.99:   17347641.344 us/op
                 countUppercase·p0.999:  17347641.344 us/op
                 countUppercase·p0.9999: 17347641.344 us/op
                 countUppercase·p1.00:   17347641.344 us/op

Iteration   4: 17414750.208 us/op
                 countUppercase·p0.00:   17414750.208 us/op
                 countUppercase·p0.50:   17414750.208 us/op
                 countUppercase·p0.90:   17414750.208 us/op
                 countUppercase·p0.95:   17414750.208 us/op
                 countUppercase·p0.99:   17414750.208 us/op
                 countUppercase·p0.999:  17414750.208 us/op
                 countUppercase·p0.9999: 17414750.208 us/op
                 countUppercase·p1.00:   17414750.208 us/op

Iteration   5: 16978542.592 us/op
                 countUppercase·p0.00:   16978542.592 us/op
                 countUppercase·p0.50:   16978542.592 us/op
                 countUppercase·p0.90:   16978542.592 us/op
                 countUppercase·p0.95:   16978542.592 us/op
                 countUppercase·p0.99:   16978542.592 us/op
                 countUppercase·p0.999:  16978542.592 us/op
                 countUppercase·p0.9999: 16978542.592 us/op
                 countUppercase·p1.00:   16978542.592 us/op

Iteration   6: 17028874.240 us/op
                 countUppercase·p0.00:   17028874.240 us/op
                 countUppercase·p0.50:   17028874.240 us/op
                 countUppercase·p0.90:   17028874.240 us/op
                 countUppercase·p0.95:   17028874.240 us/op
                 countUppercase·p0.99:   17028874.240 us/op
                 countUppercase·p0.999:  17028874.240 us/op
                 countUppercase·p0.9999: 17028874.240 us/op
                 countUppercase·p1.00:   17028874.240 us/op

Iteration   7: 16911433.728 us/op
                 countUppercase·p0.00:   16911433.728 us/op
                 countUppercase·p0.50:   16911433.728 us/op
                 countUppercase·p0.90:   16911433.728 us/op
                 countUppercase·p0.95:   16911433.728 us/op
                 countUppercase·p0.99:   16911433.728 us/op
                 countUppercase·p0.999:  16911433.728 us/op
                 countUppercase·p0.9999: 16911433.728 us/op
                 countUppercase·p1.00:   16911433.728 us/op

Iteration   8: 17314086.912 us/op
                 countUppercase·p0.00:   17314086.912 us/op
                 countUppercase·p0.50:   17314086.912 us/op
                 countUppercase·p0.90:   17314086.912 us/op
                 countUppercase·p0.95:   17314086.912 us/op
                 countUppercase·p0.99:   17314086.912 us/op
                 countUppercase·p0.999:  17314086.912 us/op
                 countUppercase·p0.9999: 17314086.912 us/op
                 countUppercase·p1.00:   17314086.912 us/op

Iteration   9: 17112760.320 us/op
                 countUppercase·p0.00:   17112760.320 us/op
                 countUppercase·p0.50:   17112760.320 us/op
                 countUppercase·p0.90:   17112760.320 us/op
                 countUppercase·p0.95:   17112760.320 us/op
                 countUppercase·p0.99:   17112760.320 us/op
                 countUppercase·p0.999:  17112760.320 us/op
                 countUppercase·p0.9999: 17112760.320 us/op
                 countUppercase·p1.00:   17112760.320 us/op

Iteration  10: 17582522.368 us/op
                 countUppercase·p0.00:   17582522.368 us/op
                 countUppercase·p0.50:   17582522.368 us/op
                 countUppercase·p0.90:   17582522.368 us/op
                 countUppercase·p0.95:   17582522.368 us/op
                 countUppercase·p0.99:   17582522.368 us/op
                 countUppercase·p0.999:  17582522.368 us/op
                 countUppercase·p0.9999: 17582522.368 us/op
                 countUppercase·p1.00:   17582522.368 us/op

Iteration  11: 17448304.640 us/op
                 countUppercase·p0.00:   17448304.640 us/op
                 countUppercase·p0.50:   17448304.640 us/op
                 countUppercase·p0.90:   17448304.640 us/op
                 countUppercase·p0.95:   17448304.640 us/op
                 countUppercase·p0.99:   17448304.640 us/op
                 countUppercase·p0.999:  17448304.640 us/op
                 countUppercase·p0.9999: 17448304.640 us/op
                 countUppercase·p1.00:   17448304.640 us/op

Iteration  12: 17314086.912 us/op
                 countUppercase·p0.00:   17314086.912 us/op
                 countUppercase·p0.50:   17314086.912 us/op
                 countUppercase·p0.90:   17314086.912 us/op
                 countUppercase·p0.95:   17314086.912 us/op
                 countUppercase·p0.99:   17314086.912 us/op
                 countUppercase·p0.999:  17314086.912 us/op
                 countUppercase·p0.9999: 17314086.912 us/op
                 countUppercase·p1.00:   17314086.912 us/op

Iteration  13: 17179869.184 us/op
                 countUppercase·p0.00:   17179869.184 us/op
                 countUppercase·p0.50:   17179869.184 us/op
                 countUppercase·p0.90:   17179869.184 us/op
                 countUppercase·p0.95:   17179869.184 us/op
                 countUppercase·p0.99:   17179869.184 us/op
                 countUppercase·p0.999:  17179869.184 us/op
                 countUppercase·p0.9999: 17179869.184 us/op
                 countUppercase·p1.00:   17179869.184 us/op

Iteration  14: 17347641.344 us/op
                 countUppercase·p0.00:   17347641.344 us/op
                 countUppercase·p0.50:   17347641.344 us/op
                 countUppercase·p0.90:   17347641.344 us/op
                 countUppercase·p0.95:   17347641.344 us/op
                 countUppercase·p0.99:   17347641.344 us/op
                 countUppercase·p0.999:  17347641.344 us/op
                 countUppercase·p0.9999: 17347641.344 us/op
                 countUppercase·p1.00:   17347641.344 us/op

Iteration  15: 17481859.072 us/op
                 countUppercase·p0.00:   17481859.072 us/op
                 countUppercase·p0.50:   17481859.072 us/op
                 countUppercase·p0.90:   17481859.072 us/op
                 countUppercase·p0.95:   17481859.072 us/op
                 countUppercase·p0.99:   17481859.072 us/op
                 countUppercase·p0.999:  17481859.072 us/op
                 countUppercase·p0.9999: 17481859.072 us/op
                 countUppercase·p1.00:   17481859.072 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 15
  mean = 17210068.173 ±(99.9%) 292697.811 us/op

  Histogram, us/op:
    [16000000.000, 16125000.000) = 0 
    [16125000.000, 16250000.000) = 0 
    [16250000.000, 16375000.000) = 0 
    [16375000.000, 16500000.000) = 0 
    [16500000.000, 16625000.000) = 1 
    [16625000.000, 16750000.000) = 0 
    [16750000.000, 16875000.000) = 0 
    [16875000.000, 17000000.000) = 2 
    [17000000.000, 17125000.000) = 2 
    [17125000.000, 17250000.000) = 2 
    [17250000.000, 17375000.000) = 4 
    [17375000.000, 17500000.000) = 3 
    [17500000.000, 17625000.000) = 1 
    [17625000.000, 17750000.000) = 0 
    [17750000.000, 17875000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 16508780.544 us/op
     p(50.0000) = 17314086.912 us/op
     p(90.0000) = 17522124.390 us/op
     p(95.0000) = 17582522.368 us/op
     p(99.0000) = 17582522.368 us/op
     p(99.9000) = 17582522.368 us/op
     p(99.9900) = 17582522.368 us/op
     p(99.9990) = 17582522.368 us/op
     p(99.9999) = 17582522.368 us/op
    p(100.0000) = 17582522.368 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 80.43% complete, ETA 01:40:09
# Fork: 1 of 1
# Warmup Iteration   1: 1.933 ±(99.9%) 0.010 us/op
# Warmup Iteration   2: 1.932 ±(99.9%) 0.011 us/op
# Warmup Iteration   3: 1.936 ±(99.9%) 0.011 us/op
# Warmup Iteration   4: 1.935 ±(99.9%) 0.010 us/op
# Warmup Iteration   5: 1.933 ±(99.9%) 0.010 us/op
Iteration   1: 1.934 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.882 us/op
                 runFibonacci·p0.90:   1.898 us/op
                 runFibonacci·p0.95:   1.902 us/op
                 runFibonacci·p0.99:   2.096 us/op
                 runFibonacci·p0.999:  11.722 us/op
                 runFibonacci·p0.9999: 122.401 us/op
                 runFibonacci·p1.00:   228.352 us/op

Iteration   2: 1.932 ±(99.9%) 0.009 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.882 us/op
                 runFibonacci·p0.90:   1.896 us/op
                 runFibonacci·p0.95:   1.902 us/op
                 runFibonacci·p0.99:   2.136 us/op
                 runFibonacci·p0.999:  11.819 us/op
                 runFibonacci·p0.9999: 88.290 us/op
                 runFibonacci·p1.00:   273.408 us/op

Iteration   3: 1.930 ±(99.9%) 0.009 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.882 us/op
                 runFibonacci·p0.90:   1.898 us/op
                 runFibonacci·p0.95:   1.902 us/op
                 runFibonacci·p0.99:   2.056 us/op
                 runFibonacci·p0.999:  11.152 us/op
                 runFibonacci·p0.9999: 118.563 us/op
                 runFibonacci·p1.00:   257.024 us/op

Iteration   4: 1.937 ±(99.9%) 0.012 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.882 us/op
                 runFibonacci·p0.90:   1.896 us/op
                 runFibonacci·p0.95:   1.902 us/op
                 runFibonacci·p0.99:   2.128 us/op
                 runFibonacci·p0.999:  11.612 us/op
                 runFibonacci·p0.9999: 133.861 us/op
                 runFibonacci·p1.00:   509.952 us/op

Iteration   5: 1.934 ±(99.9%) 0.011 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.882 us/op
                 runFibonacci·p0.90:   1.896 us/op
                 runFibonacci·p0.95:   1.902 us/op
                 runFibonacci·p0.99:   2.056 us/op
                 runFibonacci·p0.999:  11.074 us/op
                 runFibonacci·p0.9999: 130.102 us/op
                 runFibonacci·p1.00:   285.184 us/op

Iteration   6: 1.933 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.882 us/op
                 runFibonacci·p0.90:   1.896 us/op
                 runFibonacci·p0.95:   1.900 us/op
                 runFibonacci·p0.99:   2.068 us/op
                 runFibonacci·p0.999:  11.525 us/op
                 runFibonacci·p0.9999: 105.299 us/op
                 runFibonacci·p1.00:   260.608 us/op

Iteration   7: 1.935 ±(99.9%) 0.011 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.882 us/op
                 runFibonacci·p0.90:   1.896 us/op
                 runFibonacci·p0.95:   1.902 us/op
                 runFibonacci·p0.99:   2.128 us/op
                 runFibonacci·p0.999:  11.721 us/op
                 runFibonacci·p0.9999: 107.128 us/op
                 runFibonacci·p1.00:   284.160 us/op

Iteration   8: 1.930 ±(99.9%) 0.010 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.882 us/op
                 runFibonacci·p0.90:   1.896 us/op
                 runFibonacci·p0.95:   1.902 us/op
                 runFibonacci·p0.99:   2.092 us/op
                 runFibonacci·p0.999:  11.242 us/op
                 runFibonacci·p0.9999: 104.541 us/op
                 runFibonacci·p1.00:   389.120 us/op

Iteration   9: 1.940 ±(99.9%) 0.011 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.882 us/op
                 runFibonacci·p0.90:   1.896 us/op
                 runFibonacci·p0.95:   1.902 us/op
                 runFibonacci·p0.99:   2.068 us/op
                 runFibonacci·p0.999:  12.272 us/op
                 runFibonacci·p0.9999: 138.710 us/op
                 runFibonacci·p1.00:   384.512 us/op

Iteration  10: 1.936 ±(99.9%) 0.009 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.882 us/op
                 runFibonacci·p0.90:   1.900 us/op
                 runFibonacci·p0.95:   1.906 us/op
                 runFibonacci·p0.99:   2.104 us/op
                 runFibonacci·p0.999:  12.192 us/op
                 runFibonacci·p0.9999: 79.338 us/op
                 runFibonacci·p1.00:   258.560 us/op

Iteration  11: 1.942 ±(99.9%) 0.011 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.884 us/op
                 runFibonacci·p0.90:   1.900 us/op
                 runFibonacci·p0.95:   1.908 us/op
                 runFibonacci·p0.99:   2.096 us/op
                 runFibonacci·p0.999:  12.407 us/op
                 runFibonacci·p0.9999: 123.408 us/op
                 runFibonacci·p1.00:   397.312 us/op

Iteration  12: 1.933 ±(99.9%) 0.009 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.882 us/op
                 runFibonacci·p0.90:   1.898 us/op
                 runFibonacci·p0.95:   1.906 us/op
                 runFibonacci·p0.99:   2.100 us/op
                 runFibonacci·p0.999:  11.440 us/op
                 runFibonacci·p0.9999: 50.103 us/op
                 runFibonacci·p1.00:   263.168 us/op

Iteration  13: 1.945 ±(99.9%) 0.012 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.882 us/op
                 runFibonacci·p0.90:   1.898 us/op
                 runFibonacci·p0.95:   1.904 us/op
                 runFibonacci·p0.99:   2.144 us/op
                 runFibonacci·p0.999:  12.900 us/op
                 runFibonacci·p0.9999: 146.516 us/op
                 runFibonacci·p1.00:   254.464 us/op

Iteration  14: 1.935 ±(99.9%) 0.009 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.882 us/op
                 runFibonacci·p0.90:   1.898 us/op
                 runFibonacci·p0.95:   1.904 us/op
                 runFibonacci·p0.99:   2.104 us/op
                 runFibonacci·p0.999:  12.348 us/op
                 runFibonacci·p0.9999: 110.954 us/op
                 runFibonacci·p1.00:   224.256 us/op

Iteration  15: 1.937 ±(99.9%) 0.011 us/op
                 runFibonacci·p0.00:   1.858 us/op
                 runFibonacci·p0.50:   1.882 us/op
                 runFibonacci·p0.90:   1.896 us/op
                 runFibonacci·p0.95:   1.902 us/op
                 runFibonacci·p0.99:   2.100 us/op
                 runFibonacci·p0.999:  11.888 us/op
                 runFibonacci·p0.9999: 125.046 us/op
                 runFibonacci·p1.00:   283.136 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 4952101
  mean =      1.935 ±(99.9%) 0.003 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 4951467 
    [ 50.000, 100.000) = 96 
    [100.000, 150.000) = 269 
    [150.000, 200.000) = 217 
    [200.000, 250.000) = 33 
    [250.000, 300.000) = 14 
    [300.000, 350.000) = 1 
    [350.000, 400.000) = 3 
    [400.000, 450.000) = 0 
    [450.000, 500.000) = 0 
    [500.000, 550.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      1.858 us/op
     p(50.0000) =      1.882 us/op
     p(90.0000) =      1.898 us/op
     p(95.0000) =      1.904 us/op
     p(99.0000) =      2.100 us/op
     p(99.9000) =     11.776 us/op
     p(99.9900) =    113.354 us/op
     p(99.9990) =    204.010 us/op
     p(99.9999) =    344.051 us/op
    p(100.0000) =    509.952 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 81.16% complete, ETA 01:36:25
# Fork: 1 of 1
# Warmup Iteration   1: 5.227 ±(99.9%) 0.018 us/op
# Warmup Iteration   2: 5.262 ±(99.9%) 0.048 us/op
# Warmup Iteration   3: 5.296 ±(99.9%) 0.019 us/op
# Warmup Iteration   4: 5.261 ±(99.9%) 0.020 us/op
# Warmup Iteration   5: 5.246 ±(99.9%) 0.018 us/op
Iteration   1: 5.254 ±(99.9%) 0.016 us/op
                 runFibonacci·p0.00:   5.008 us/op
                 runFibonacci·p0.50:   5.144 us/op
                 runFibonacci·p0.90:   5.248 us/op
                 runFibonacci·p0.95:   5.272 us/op
                 runFibonacci·p0.99:   5.984 us/op
                 runFibonacci·p0.999:  19.200 us/op
                 runFibonacci·p0.9999: 147.000 us/op
                 runFibonacci·p1.00:   288.768 us/op

Iteration   2: 5.283 ±(99.9%) 0.018 us/op
                 runFibonacci·p0.00:   5.000 us/op
                 runFibonacci·p0.50:   5.152 us/op
                 runFibonacci·p0.90:   5.272 us/op
                 runFibonacci·p0.95:   5.288 us/op
                 runFibonacci·p0.99:   6.133 us/op
                 runFibonacci·p0.999:  20.402 us/op
                 runFibonacci·p0.9999: 159.056 us/op
                 runFibonacci·p1.00:   279.040 us/op

Iteration   3: 5.273 ±(99.9%) 0.020 us/op
                 runFibonacci·p0.00:   5.000 us/op
                 runFibonacci·p0.50:   5.144 us/op
                 runFibonacci·p0.90:   5.248 us/op
                 runFibonacci·p0.95:   5.272 us/op
                 runFibonacci·p0.99:   6.056 us/op
                 runFibonacci·p0.999:  20.576 us/op
                 runFibonacci·p0.9999: 175.892 us/op
                 runFibonacci·p1.00:   289.280 us/op

Iteration   4: 5.284 ±(99.9%) 0.021 us/op
                 runFibonacci·p0.00:   5.000 us/op
                 runFibonacci·p0.50:   5.144 us/op
                 runFibonacci·p0.90:   5.264 us/op
                 runFibonacci·p0.95:   5.288 us/op
                 runFibonacci·p0.99:   6.080 us/op
                 runFibonacci·p0.999:  20.616 us/op
                 runFibonacci·p0.9999: 174.176 us/op
                 runFibonacci·p1.00:   314.368 us/op

Iteration   5: 5.276 ±(99.9%) 0.046 us/op
                 runFibonacci·p0.00:   5.000 us/op
                 runFibonacci·p0.50:   5.136 us/op
                 runFibonacci·p0.90:   5.232 us/op
                 runFibonacci·p0.95:   5.264 us/op
                 runFibonacci·p0.99:   6.000 us/op
                 runFibonacci·p0.999:  20.672 us/op
                 runFibonacci·p0.9999: 166.667 us/op
                 runFibonacci·p1.00:   2961.408 us/op

Iteration   6: 5.277 ±(99.9%) 0.019 us/op
                 runFibonacci·p0.00:   5.000 us/op
                 runFibonacci·p0.50:   5.144 us/op
                 runFibonacci·p0.90:   5.248 us/op
                 runFibonacci·p0.95:   5.272 us/op
                 runFibonacci·p0.99:   6.096 us/op
                 runFibonacci·p0.999:  22.937 us/op
                 runFibonacci·p0.9999: 162.089 us/op
                 runFibonacci·p1.00:   286.720 us/op

Iteration   7: 5.279 ±(99.9%) 0.020 us/op
                 runFibonacci·p0.00:   5.000 us/op
                 runFibonacci·p0.50:   5.144 us/op
                 runFibonacci·p0.90:   5.256 us/op
                 runFibonacci·p0.95:   5.280 us/op
                 runFibonacci·p0.99:   6.016 us/op
                 runFibonacci·p0.999:  22.686 us/op
                 runFibonacci·p0.9999: 164.376 us/op
                 runFibonacci·p1.00:   343.552 us/op

Iteration   8: 5.264 ±(99.9%) 0.019 us/op
                 runFibonacci·p0.00:   5.008 us/op
                 runFibonacci·p0.50:   5.136 us/op
                 runFibonacci·p0.90:   5.240 us/op
                 runFibonacci·p0.95:   5.264 us/op
                 runFibonacci·p0.99:   6.040 us/op
                 runFibonacci·p0.999:  20.781 us/op
                 runFibonacci·p0.9999: 160.060 us/op
                 runFibonacci·p1.00:   252.928 us/op

Iteration   9: 5.275 ±(99.9%) 0.019 us/op
                 runFibonacci·p0.00:   5.008 us/op
                 runFibonacci·p0.50:   5.144 us/op
                 runFibonacci·p0.90:   5.264 us/op
                 runFibonacci·p0.95:   5.280 us/op
                 runFibonacci·p0.99:   5.984 us/op
                 runFibonacci·p0.999:  20.896 us/op
                 runFibonacci·p0.9999: 160.885 us/op
                 runFibonacci·p1.00:   289.280 us/op

Iteration  10: 5.258 ±(99.9%) 0.019 us/op
                 runFibonacci·p0.00:   4.992 us/op
                 runFibonacci·p0.50:   5.136 us/op
                 runFibonacci·p0.90:   5.184 us/op
                 runFibonacci·p0.95:   5.232 us/op
                 runFibonacci·p0.99:   6.096 us/op
                 runFibonacci·p0.999:  22.435 us/op
                 runFibonacci·p0.9999: 171.018 us/op
                 runFibonacci·p1.00:   236.800 us/op

Iteration  11: 5.295 ±(99.9%) 0.018 us/op
                 runFibonacci·p0.00:   5.008 us/op
                 runFibonacci·p0.50:   5.160 us/op
                 runFibonacci·p0.90:   5.272 us/op
                 runFibonacci·p0.95:   5.288 us/op
                 runFibonacci·p0.99:   6.262 us/op
                 runFibonacci·p0.999:  22.012 us/op
                 runFibonacci·p0.9999: 157.872 us/op
                 runFibonacci·p1.00:   270.848 us/op

Iteration  12: 5.244 ±(99.9%) 0.019 us/op
                 runFibonacci·p0.00:   5.008 us/op
                 runFibonacci·p0.50:   5.128 us/op
                 runFibonacci·p0.90:   5.176 us/op
                 runFibonacci·p0.95:   5.216 us/op
                 runFibonacci·p0.99:   5.992 us/op
                 runFibonacci·p0.999:  21.402 us/op
                 runFibonacci·p0.9999: 171.501 us/op
                 runFibonacci·p1.00:   256.768 us/op

Iteration  13: 5.267 ±(99.9%) 0.018 us/op
                 runFibonacci·p0.00:   5.008 us/op
                 runFibonacci·p0.50:   5.144 us/op
                 runFibonacci·p0.90:   5.256 us/op
                 runFibonacci·p0.95:   5.272 us/op
                 runFibonacci·p0.99:   5.976 us/op
                 runFibonacci·p0.999:  20.224 us/op
                 runFibonacci·p0.9999: 156.179 us/op
                 runFibonacci·p1.00:   279.552 us/op

Iteration  14: 5.267 ±(99.9%) 0.019 us/op
                 runFibonacci·p0.00:   5.008 us/op
                 runFibonacci·p0.50:   5.136 us/op
                 runFibonacci·p0.90:   5.256 us/op
                 runFibonacci·p0.95:   5.280 us/op
                 runFibonacci·p0.99:   6.008 us/op
                 runFibonacci·p0.999:  20.352 us/op
                 runFibonacci·p0.9999: 160.018 us/op
                 runFibonacci·p1.00:   264.704 us/op

Iteration  15: 5.262 ±(99.9%) 0.021 us/op
                 runFibonacci·p0.00:   5.008 us/op
                 runFibonacci·p0.50:   5.128 us/op
                 runFibonacci·p0.90:   5.224 us/op
                 runFibonacci·p0.95:   5.256 us/op
                 runFibonacci·p0.99:   6.064 us/op
                 runFibonacci·p0.999:  21.628 us/op
                 runFibonacci·p0.9999: 167.407 us/op
                 runFibonacci·p1.00:   313.344 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 3589679
  mean =      5.271 ±(99.9%) 0.006 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 3589647 
    [ 250.000,  500.000) = 30 
    [ 500.000,  750.000) = 0 
    [ 750.000, 1000.000) = 1 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      4.992 us/op
     p(50.0000) =      5.144 us/op
     p(90.0000) =      5.248 us/op
     p(95.0000) =      5.272 us/op
     p(99.0000) =      6.040 us/op
     p(99.9000) =     21.024 us/op
     p(99.9900) =    164.104 us/op
     p(99.9990) =    248.064 us/op
     p(99.9999) =    326.343 us/op
    p(100.0000) =   2961.408 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 81.88% complete, ETA 01:32:41
# Fork: 1 of 1
# Warmup Iteration   1: 9.240 ±(99.9%) 0.021 us/op
# Warmup Iteration   2: 9.198 ±(99.9%) 0.021 us/op
# Warmup Iteration   3: 9.234 ±(99.9%) 0.019 us/op
# Warmup Iteration   4: 9.188 ±(99.9%) 0.019 us/op
# Warmup Iteration   5: 9.265 ±(99.9%) 0.021 us/op
Iteration   1: 9.234 ±(99.9%) 0.020 us/op
                 runFibonacci·p0.00:   8.816 us/op
                 runFibonacci·p0.50:   9.040 us/op
                 runFibonacci·p0.90:   9.200 us/op
                 runFibonacci·p0.95:   9.248 us/op
                 runFibonacci·p0.99:   13.648 us/op
                 runFibonacci·p0.999:  30.778 us/op
                 runFibonacci·p0.9999: 174.818 us/op
                 runFibonacci·p1.00:   296.960 us/op

Iteration   2: 9.179 ±(99.9%) 0.018 us/op
                 runFibonacci·p0.00:   8.784 us/op
                 runFibonacci·p0.50:   9.024 us/op
                 runFibonacci·p0.90:   9.120 us/op
                 runFibonacci·p0.95:   9.184 us/op
                 runFibonacci·p0.99:   13.664 us/op
                 runFibonacci·p0.999:  26.560 us/op
                 runFibonacci·p0.9999: 169.594 us/op
                 runFibonacci·p1.00:   254.464 us/op

Iteration   3: 9.207 ±(99.9%) 0.019 us/op
                 runFibonacci·p0.00:   8.800 us/op
                 runFibonacci·p0.50:   9.040 us/op
                 runFibonacci·p0.90:   9.152 us/op
                 runFibonacci·p0.95:   9.216 us/op
                 runFibonacci·p0.99:   13.664 us/op
                 runFibonacci·p0.999:  27.282 us/op
                 runFibonacci·p0.9999: 168.821 us/op
                 runFibonacci·p1.00:   291.840 us/op

Iteration   4: 9.232 ±(99.9%) 0.053 us/op
                 runFibonacci·p0.00:   8.800 us/op
                 runFibonacci·p0.50:   9.024 us/op
                 runFibonacci·p0.90:   9.168 us/op
                 runFibonacci·p0.95:   9.232 us/op
                 runFibonacci·p0.99:   13.696 us/op
                 runFibonacci·p0.999:  27.567 us/op
                 runFibonacci·p0.9999: 185.048 us/op
                 runFibonacci·p1.00:   3936.256 us/op

Iteration   5: 9.216 ±(99.9%) 0.020 us/op
                 runFibonacci·p0.00:   8.800 us/op
                 runFibonacci·p0.50:   9.040 us/op
                 runFibonacci·p0.90:   9.200 us/op
                 runFibonacci·p0.95:   9.248 us/op
                 runFibonacci·p0.99:   13.767 us/op
                 runFibonacci·p0.999:  26.763 us/op
                 runFibonacci·p0.9999: 174.082 us/op
                 runFibonacci·p1.00:   308.736 us/op

Iteration   6: 9.217 ±(99.9%) 0.019 us/op
                 runFibonacci·p0.00:   8.800 us/op
                 runFibonacci·p0.50:   9.040 us/op
                 runFibonacci·p0.90:   9.184 us/op
                 runFibonacci·p0.95:   9.232 us/op
                 runFibonacci·p0.99:   13.696 us/op
                 runFibonacci·p0.999:  27.632 us/op
                 runFibonacci·p0.9999: 166.681 us/op
                 runFibonacci·p1.00:   316.416 us/op

Iteration   7: 9.252 ±(99.9%) 0.021 us/op
                 runFibonacci·p0.00:   8.800 us/op
                 runFibonacci·p0.50:   9.056 us/op
                 runFibonacci·p0.90:   9.232 us/op
                 runFibonacci·p0.95:   9.264 us/op
                 runFibonacci·p0.99:   13.824 us/op
                 runFibonacci·p0.999:  28.813 us/op
                 runFibonacci·p0.9999: 172.212 us/op
                 runFibonacci·p1.00:   379.904 us/op

Iteration   8: 9.231 ±(99.9%) 0.020 us/op
                 runFibonacci·p0.00:   8.816 us/op
                 runFibonacci·p0.50:   9.040 us/op
                 runFibonacci·p0.90:   9.216 us/op
                 runFibonacci·p0.95:   9.248 us/op
                 runFibonacci·p0.99:   13.712 us/op
                 runFibonacci·p0.999:  27.584 us/op
                 runFibonacci·p0.9999: 175.747 us/op
                 runFibonacci·p1.00:   296.448 us/op

Iteration   9: 9.228 ±(99.9%) 0.020 us/op
                 runFibonacci·p0.00:   8.784 us/op
                 runFibonacci·p0.50:   9.040 us/op
                 runFibonacci·p0.90:   9.216 us/op
                 runFibonacci·p0.95:   9.248 us/op
                 runFibonacci·p0.99:   13.728 us/op
                 runFibonacci·p0.999:  27.275 us/op
                 runFibonacci·p0.9999: 170.069 us/op
                 runFibonacci·p1.00:   294.400 us/op

Iteration  10: 9.231 ±(99.9%) 0.020 us/op
                 runFibonacci·p0.00:   8.816 us/op
                 runFibonacci·p0.50:   9.040 us/op
                 runFibonacci·p0.90:   9.216 us/op
                 runFibonacci·p0.95:   9.248 us/op
                 runFibonacci·p0.99:   13.824 us/op
                 runFibonacci·p0.999:  27.418 us/op
                 runFibonacci·p0.9999: 171.715 us/op
                 runFibonacci·p1.00:   292.352 us/op

Iteration  11: 9.237 ±(99.9%) 0.024 us/op
                 runFibonacci·p0.00:   8.784 us/op
                 runFibonacci·p0.50:   9.040 us/op
                 runFibonacci·p0.90:   9.216 us/op
                 runFibonacci·p0.95:   9.264 us/op
                 runFibonacci·p0.99:   13.664 us/op
                 runFibonacci·p0.999:  28.219 us/op
                 runFibonacci·p0.9999: 183.089 us/op
                 runFibonacci·p1.00:   590.848 us/op

Iteration  12: 9.234 ±(99.9%) 0.019 us/op
                 runFibonacci·p0.00:   8.800 us/op
                 runFibonacci·p0.50:   9.056 us/op
                 runFibonacci·p0.90:   9.232 us/op
                 runFibonacci·p0.95:   9.264 us/op
                 runFibonacci·p0.99:   13.376 us/op
                 runFibonacci·p0.999:  26.979 us/op
                 runFibonacci·p0.9999: 164.027 us/op
                 runFibonacci·p1.00:   243.968 us/op

Iteration  13: 9.226 ±(99.9%) 0.020 us/op
                 runFibonacci·p0.00:   8.768 us/op
                 runFibonacci·p0.50:   9.040 us/op
                 runFibonacci·p0.90:   9.216 us/op
                 runFibonacci·p0.95:   9.248 us/op
                 runFibonacci·p0.99:   13.616 us/op
                 runFibonacci·p0.999:  27.424 us/op
                 runFibonacci·p0.9999: 167.951 us/op
                 runFibonacci·p1.00:   276.992 us/op

Iteration  14: 9.222 ±(99.9%) 0.020 us/op
                 runFibonacci·p0.00:   8.816 us/op
                 runFibonacci·p0.50:   9.040 us/op
                 runFibonacci·p0.90:   9.216 us/op
                 runFibonacci·p0.95:   9.264 us/op
                 runFibonacci·p0.99:   13.536 us/op
                 runFibonacci·p0.999:  25.821 us/op
                 runFibonacci·p0.9999: 170.980 us/op
                 runFibonacci·p1.00:   580.608 us/op

Iteration  15: 9.217 ±(99.9%) 0.021 us/op
                 runFibonacci·p0.00:   8.800 us/op
                 runFibonacci·p0.50:   9.024 us/op
                 runFibonacci·p0.90:   9.200 us/op
                 runFibonacci·p0.95:   9.248 us/op
                 runFibonacci·p0.99:   13.840 us/op
                 runFibonacci·p0.999:  26.452 us/op
                 runFibonacci·p0.9999: 185.530 us/op
                 runFibonacci·p1.00:   354.304 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 4070234
  mean =      9.224 ±(99.9%) 0.006 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 4070180 
    [ 250.000,  500.000) = 45 
    [ 500.000,  750.000) = 8 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 0 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 
    [2750.000, 3000.000) = 0 
    [3000.000, 3250.000) = 0 
    [3250.000, 3500.000) = 0 
    [3500.000, 3750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      8.768 us/op
     p(50.0000) =      9.040 us/op
     p(90.0000) =      9.200 us/op
     p(95.0000) =      9.248 us/op
     p(99.0000) =     13.680 us/op
     p(99.9000) =     27.360 us/op
     p(99.9900) =    172.538 us/op
     p(99.9990) =    263.473 us/op
     p(99.9999) =    572.721 us/op
    p(100.0000) =   3936.256 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 82.61% complete, ETA 01:28:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.094 ±(99.9%) 0.010 us/op
# Warmup Iteration   2: 0.084 ±(99.9%) 0.004 us/op
# Warmup Iteration   3: 0.083 ±(99.9%) 0.005 us/op
# Warmup Iteration   4: 0.090 ±(99.9%) 0.003 us/op
# Warmup Iteration   5: 0.089 ±(99.9%) 0.001 us/op
Iteration   1: 0.091 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.070 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.086 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.101 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.105 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.112 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.204 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.552 us/op
                 findLastPrefixUsingScanner1·p1.00:   137.984 us/op

Iteration   2: 0.091 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.070 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.084 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.106 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.119 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.195 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.414 us/op
                 findLastPrefixUsingScanner1·p1.00:   177.920 us/op

Iteration   3: 0.091 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.070 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.084 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.100 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.104 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.112 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.225 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.868 us/op
                 findLastPrefixUsingScanner1·p1.00:   172.032 us/op

Iteration   4: 0.090 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.070 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.086 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.105 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.222 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.221 us/op
                 findLastPrefixUsingScanner1·p1.00:   157.952 us/op

Iteration   5: 0.088 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.070 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.100 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.104 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.112 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.215 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.833 us/op
                 findLastPrefixUsingScanner1·p1.00:   130.176 us/op

Iteration   6: 0.090 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.070 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.084 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.104 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.194 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.663 us/op
                 findLastPrefixUsingScanner1·p1.00:   146.944 us/op

Iteration   7: 0.091 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.070 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.084 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.101 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.104 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.109 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.209 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.067 us/op
                 findLastPrefixUsingScanner1·p1.00:   291.328 us/op

Iteration   8: 0.089 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.070 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.083 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.097 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.111 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.209 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.182 us/op
                 findLastPrefixUsingScanner1·p1.00:   139.520 us/op

Iteration   9: 0.088 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.070 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.081 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.097 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.112 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.203 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.242 us/op
                 findLastPrefixUsingScanner1·p1.00:   146.176 us/op

Iteration  10: 0.092 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.070 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.083 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.097 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.110 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.244 us/op
                 findLastPrefixUsingScanner1·p0.9999: 10.555 us/op
                 findLastPrefixUsingScanner1·p1.00:   265.728 us/op

Iteration  11: 0.091 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.070 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.083 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.104 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.105 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.219 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.072 us/op
                 findLastPrefixUsingScanner1·p1.00:   181.248 us/op

Iteration  12: 0.090 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.070 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.084 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.104 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.105 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.190 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.767 us/op
                 findLastPrefixUsingScanner1·p1.00:   261.120 us/op

Iteration  13: 0.091 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.070 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.082 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.103 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.105 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.204 us/op
                 findLastPrefixUsingScanner1·p0.9999: 9.283 us/op
                 findLastPrefixUsingScanner1·p1.00:   172.544 us/op

Iteration  14: 0.090 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.070 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.086 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.099 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.104 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.184 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.732 us/op
                 findLastPrefixUsingScanner1·p1.00:   143.872 us/op

Iteration  15: 0.090 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.070 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.086 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.100 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.104 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.113 us/op
                 findLastPrefixUsingScanner1·p0.999:  0.188 us/op
                 findLastPrefixUsingScanner1·p0.9999: 8.006 us/op
                 findLastPrefixUsingScanner1·p1.00:   154.368 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 5949231
  mean =      0.090 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 5949145 
    [ 25.000,  50.000) = 35 
    [ 50.000,  75.000) = 4 
    [ 75.000, 100.000) = 4 
    [100.000, 125.000) = 6 
    [125.000, 150.000) = 22 
    [150.000, 175.000) = 9 
    [175.000, 200.000) = 3 
    [200.000, 225.000) = 0 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 2 

  Percentiles, us/op:
      p(0.0000) =      0.070 us/op
     p(50.0000) =      0.084 us/op
     p(90.0000) =      0.101 us/op
     p(95.0000) =      0.105 us/op
     p(99.0000) =      0.113 us/op
     p(99.9000) =      0.206 us/op
     p(99.9900) =      8.913 us/op
     p(99.9990) =     41.193 us/op
     p(99.9999) =    177.920 us/op
    p(100.0000) =    291.328 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 83.33% complete, ETA 01:25:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.477 ±(99.9%) 0.006 us/op
# Warmup Iteration   2: 0.479 ±(99.9%) 0.007 us/op
# Warmup Iteration   3: 0.424 ±(99.9%) 0.011 us/op
# Warmup Iteration   4: 0.413 ±(99.9%) 0.009 us/op
# Warmup Iteration   5: 0.418 ±(99.9%) 0.009 us/op
Iteration   1: 0.414 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.372 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.384 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.398 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.399 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.428 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.751 us/op
                 findLastPrefixUsingScanner1·p0.9999: 26.489 us/op
                 findLastPrefixUsingScanner1·p1.00:   266.240 us/op

Iteration   2: 0.410 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.368 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.381 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.395 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.396 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.420 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.997 us/op
                 findLastPrefixUsingScanner1·p0.9999: 22.811 us/op
                 findLastPrefixUsingScanner1·p1.00:   211.200 us/op

Iteration   3: 0.409 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.369 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.382 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.395 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.396 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.420 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.184 us/op
                 findLastPrefixUsingScanner1·p0.9999: 21.816 us/op
                 findLastPrefixUsingScanner1·p1.00:   233.984 us/op

Iteration   4: 0.409 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.372 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.384 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.398 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.399 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.423 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.043 us/op
                 findLastPrefixUsingScanner1·p0.9999: 18.325 us/op
                 findLastPrefixUsingScanner1·p1.00:   286.720 us/op

Iteration   5: 0.410 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.369 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.381 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.395 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.396 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.419 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.301 us/op
                 findLastPrefixUsingScanner1·p0.9999: 21.084 us/op
                 findLastPrefixUsingScanner1·p1.00:   235.776 us/op

Iteration   6: 0.409 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.369 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.382 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.395 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.396 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.418 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.103 us/op
                 findLastPrefixUsingScanner1·p0.9999: 18.933 us/op
                 findLastPrefixUsingScanner1·p1.00:   182.272 us/op

Iteration   7: 0.412 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.374 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.389 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.402 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.403 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.426 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.689 us/op
                 findLastPrefixUsingScanner1·p0.9999: 17.215 us/op
                 findLastPrefixUsingScanner1·p1.00:   151.040 us/op

Iteration   8: 0.415 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.375 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.389 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.402 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.403 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.420 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.454 us/op
                 findLastPrefixUsingScanner1·p0.9999: 18.674 us/op
                 findLastPrefixUsingScanner1·p1.00:   342.016 us/op

Iteration   9: 0.409 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.370 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.383 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.397 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.398 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.422 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.514 us/op
                 findLastPrefixUsingScanner1·p0.9999: 18.604 us/op
                 findLastPrefixUsingScanner1·p1.00:   162.816 us/op

Iteration  10: 0.417 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.375 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.389 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.401 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.403 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.426 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.381 us/op
                 findLastPrefixUsingScanner1·p0.9999: 20.540 us/op
                 findLastPrefixUsingScanner1·p1.00:   240.128 us/op

Iteration  11: 0.410 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.370 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.382 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.396 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.397 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.420 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.153 us/op
                 findLastPrefixUsingScanner1·p0.9999: 23.264 us/op
                 findLastPrefixUsingScanner1·p1.00:   170.752 us/op

Iteration  12: 0.418 ±(99.9%) 0.007 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.375 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.390 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.403 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.404 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.428 us/op
                 findLastPrefixUsingScanner1·p0.999:  6.507 us/op
                 findLastPrefixUsingScanner1·p0.9999: 24.694 us/op
                 findLastPrefixUsingScanner1·p1.00:   203.264 us/op

Iteration  13: 0.405 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.370 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.382 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.395 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.396 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.418 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.261 us/op
                 findLastPrefixUsingScanner1·p0.9999: 20.064 us/op
                 findLastPrefixUsingScanner1·p1.00:   168.704 us/op

Iteration  14: 0.414 ±(99.9%) 0.006 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.374 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.389 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.402 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.403 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.423 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.514 us/op
                 findLastPrefixUsingScanner1·p0.9999: 18.773 us/op
                 findLastPrefixUsingScanner1·p1.00:   170.496 us/op

Iteration  15: 0.412 ±(99.9%) 0.010 us/op
                 findLastPrefixUsingScanner1·p0.00:   0.369 us/op
                 findLastPrefixUsingScanner1·p0.50:   0.382 us/op
                 findLastPrefixUsingScanner1·p0.90:   0.395 us/op
                 findLastPrefixUsingScanner1·p0.95:   0.396 us/op
                 findLastPrefixUsingScanner1·p0.99:   0.419 us/op
                 findLastPrefixUsingScanner1·p0.999:  5.842 us/op
                 findLastPrefixUsingScanner1·p0.9999: 24.930 us/op
                 findLastPrefixUsingScanner1·p1.00:   328.192 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 3275314
  mean =      0.411 ±(99.9%) 0.002 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 3275063 
    [ 25.000,  50.000) = 84 
    [ 50.000,  75.000) = 19 
    [ 75.000, 100.000) = 13 
    [100.000, 125.000) = 33 
    [125.000, 150.000) = 51 
    [150.000, 175.000) = 33 
    [175.000, 200.000) = 7 
    [200.000, 225.000) = 3 
    [225.000, 250.000) = 3 
    [250.000, 275.000) = 2 
    [275.000, 300.000) = 1 
    [300.000, 325.000) = 0 
    [325.000, 350.000) = 2 
    [350.000, 375.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.368 us/op
     p(50.0000) =      0.386 us/op
     p(90.0000) =      0.399 us/op
     p(95.0000) =      0.402 us/op
     p(99.0000) =      0.421 us/op
     p(99.9000) =      5.645 us/op
     p(99.9900) =     20.960 us/op
     p(99.9990) =    158.527 us/op
     p(99.9999) =    281.082 us/op
    p(100.0000) =    342.016 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 84.06% complete, ETA 01:21:29
# Fork: 1 of 1
# Warmup Iteration   1: 4.571 ±(99.9%) 0.024 us/op
# Warmup Iteration   2: 4.562 ±(99.9%) 0.019 us/op
# Warmup Iteration   3: 4.484 ±(99.9%) 0.019 us/op
# Warmup Iteration   4: 4.546 ±(99.9%) 0.019 us/op
# Warmup Iteration   5: 4.438 ±(99.9%) 0.017 us/op
Iteration   1: 4.438 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.248 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.336 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.368 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.384 us/op
                 findLastPrefixUsingScanner1·p0.99:   6.144 us/op
                 findLastPrefixUsingScanner1·p0.999:  16.705 us/op
                 findLastPrefixUsingScanner1·p0.9999: 177.152 us/op
                 findLastPrefixUsingScanner1·p1.00:   397.824 us/op

Iteration   2: 4.578 ±(99.9%) 0.033 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.328 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.456 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.496 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.520 us/op
                 findLastPrefixUsingScanner1·p0.99:   6.448 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.080 us/op
                 findLastPrefixUsingScanner1·p0.9999: 185.045 us/op
                 findLastPrefixUsingScanner1·p1.00:   2195.456 us/op

Iteration   3: 4.489 ±(99.9%) 0.043 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.264 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.368 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.392 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.408 us/op
                 findLastPrefixUsingScanner1·p0.99:   6.240 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.286 us/op
                 findLastPrefixUsingScanner1·p0.9999: 190.110 us/op
                 findLastPrefixUsingScanner1·p1.00:   3076.096 us/op

Iteration   4: 4.499 ±(99.9%) 0.022 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.280 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.376 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.400 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.416 us/op
                 findLastPrefixUsingScanner1·p0.99:   6.256 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.397 us/op
                 findLastPrefixUsingScanner1·p0.9999: 201.444 us/op
                 findLastPrefixUsingScanner1·p1.00:   546.816 us/op

Iteration   5: 4.437 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.256 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.336 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.360 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.368 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.712 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.532 us/op
                 findLastPrefixUsingScanner1·p0.9999: 176.791 us/op
                 findLastPrefixUsingScanner1·p1.00:   305.152 us/op

Iteration   6: 4.457 ±(99.9%) 0.019 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.256 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.344 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.368 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.384 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.941 us/op
                 findLastPrefixUsingScanner1·p0.999:  19.328 us/op
                 findLastPrefixUsingScanner1·p0.9999: 186.754 us/op
                 findLastPrefixUsingScanner1·p1.00:   352.256 us/op

Iteration   7: 4.472 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.280 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.368 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.392 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.408 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.936 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.046 us/op
                 findLastPrefixUsingScanner1·p0.9999: 179.403 us/op
                 findLastPrefixUsingScanner1·p1.00:   278.528 us/op

Iteration   8: 4.376 ±(99.9%) 0.016 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.192 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.288 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.304 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.320 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.552 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.183 us/op
                 findLastPrefixUsingScanner1·p0.9999: 172.588 us/op
                 findLastPrefixUsingScanner1·p1.00:   280.576 us/op

Iteration   9: 4.516 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.344 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.416 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.448 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.456 us/op
                 findLastPrefixUsingScanner1·p0.99:   6.001 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.440 us/op
                 findLastPrefixUsingScanner1·p0.9999: 178.991 us/op
                 findLastPrefixUsingScanner1·p1.00:   410.624 us/op

Iteration  10: 4.463 ±(99.9%) 0.018 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.272 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.368 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.392 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.408 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.736 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.135 us/op
                 findLastPrefixUsingScanner1·p0.9999: 179.116 us/op
                 findLastPrefixUsingScanner1·p1.00:   403.968 us/op

Iteration  11: 4.472 ±(99.9%) 0.015 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.296 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.376 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.400 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.416 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.891 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.665 us/op
                 findLastPrefixUsingScanner1·p0.9999: 177.975 us/op
                 findLastPrefixUsingScanner1·p1.00:   265.728 us/op

Iteration  12: 4.450 ±(99.9%) 0.018 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.272 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.352 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.376 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.384 us/op
                 findLastPrefixUsingScanner1·p0.99:   5.736 us/op
                 findLastPrefixUsingScanner1·p0.999:  17.464 us/op
                 findLastPrefixUsingScanner1·p0.9999: 179.042 us/op
                 findLastPrefixUsingScanner1·p1.00:   324.608 us/op

Iteration  13: 4.452 ±(99.9%) 0.028 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.256 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.336 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.368 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.384 us/op
                 findLastPrefixUsingScanner1·p0.99:   6.040 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.624 us/op
                 findLastPrefixUsingScanner1·p0.9999: 189.642 us/op
                 findLastPrefixUsingScanner1·p1.00:   1843.200 us/op

Iteration  14: 4.428 ±(99.9%) 0.033 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.216 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.304 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.328 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.352 us/op
                 findLastPrefixUsingScanner1·p0.99:   6.088 us/op
                 findLastPrefixUsingScanner1·p0.999:  19.552 us/op
                 findLastPrefixUsingScanner1·p0.9999: 183.704 us/op
                 findLastPrefixUsingScanner1·p1.00:   2322.432 us/op

Iteration  15: 4.468 ±(99.9%) 0.019 us/op
                 findLastPrefixUsingScanner1·p0.00:   4.256 us/op
                 findLastPrefixUsingScanner1·p0.50:   4.352 us/op
                 findLastPrefixUsingScanner1·p0.90:   4.376 us/op
                 findLastPrefixUsingScanner1·p0.95:   4.400 us/op
                 findLastPrefixUsingScanner1·p0.99:   6.224 us/op
                 findLastPrefixUsingScanner1·p0.999:  18.957 us/op
                 findLastPrefixUsingScanner1·p0.9999: 188.472 us/op
                 findLastPrefixUsingScanner1·p1.00:   426.496 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 4240509
  mean =      4.466 ±(99.9%) 0.006 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 4240427 
    [ 250.000,  500.000) = 75 
    [ 500.000,  750.000) = 2 
    [ 750.000, 1000.000) = 0 
    [1000.000, 1250.000) = 0 
    [1250.000, 1500.000) = 1 
    [1500.000, 1750.000) = 0 
    [1750.000, 2000.000) = 1 
    [2000.000, 2250.000) = 1 
    [2250.000, 2500.000) = 1 
    [2500.000, 2750.000) = 0 
    [2750.000, 3000.000) = 0 
    [3000.000, 3250.000) = 1 
    [3250.000, 3500.000) = 0 
    [3500.000, 3750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      4.192 us/op
     p(50.0000) =      4.360 us/op
     p(90.0000) =      4.432 us/op
     p(95.0000) =      4.464 us/op
     p(99.0000) =      6.032 us/op
     p(99.9000) =     17.920 us/op
     p(99.9900) =    183.040 us/op
     p(99.9990) =    290.097 us/op
     p(99.9999) =   1743.209 us/op
    p(100.0000) =   3076.096 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 84.78% complete, ETA 01:17:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.079 ±(99.9%) 0.006 us/op
# Warmup Iteration   2: 0.076 ±(99.9%) 0.002 us/op
# Warmup Iteration   3: 0.086 ±(99.9%) 0.003 us/op
# Warmup Iteration   4: 0.086 ±(99.9%) 0.002 us/op
# Warmup Iteration   5: 0.085 ±(99.9%) 0.003 us/op
Iteration   1: 0.086 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.073 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.078 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.087 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.092 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.105 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.244 us/op
                 findLastPrefixUsingScanner2·p0.9999: 9.340 us/op
                 findLastPrefixUsingScanner2·p1.00:   91.904 us/op

Iteration   2: 0.087 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.073 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.078 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.087 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.093 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.106 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.217 us/op
                 findLastPrefixUsingScanner2·p0.9999: 9.231 us/op
                 findLastPrefixUsingScanner2·p1.00:   218.624 us/op

Iteration   3: 0.086 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.078 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.087 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.092 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.099 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.229 us/op
                 findLastPrefixUsingScanner2·p0.9999: 9.348 us/op
                 findLastPrefixUsingScanner2·p1.00:   191.232 us/op

Iteration   4: 0.084 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.078 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.085 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.087 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.099 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.198 us/op
                 findLastPrefixUsingScanner2·p0.9999: 9.297 us/op
                 findLastPrefixUsingScanner2·p1.00:   149.504 us/op

Iteration   5: 0.088 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.073 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.080 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.093 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.108 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.238 us/op
                 findLastPrefixUsingScanner2·p0.9999: 9.571 us/op
                 findLastPrefixUsingScanner2·p1.00:   284.160 us/op

Iteration   6: 0.085 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.078 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.086 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.091 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.101 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.220 us/op
                 findLastPrefixUsingScanner2·p0.9999: 9.002 us/op
                 findLastPrefixUsingScanner2·p1.00:   137.728 us/op

Iteration   7: 0.084 ±(99.9%) 0.001 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.078 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.086 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.091 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.099 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.220 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.176 us/op
                 findLastPrefixUsingScanner2·p1.00:   47.872 us/op

Iteration   8: 0.085 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.077 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.086 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.091 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.101 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.229 us/op
                 findLastPrefixUsingScanner2·p0.9999: 10.017 us/op
                 findLastPrefixUsingScanner2·p1.00:   208.896 us/op

Iteration   9: 0.085 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.077 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.086 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.090 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.099 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.223 us/op
                 findLastPrefixUsingScanner2·p0.9999: 10.133 us/op
                 findLastPrefixUsingScanner2·p1.00:   160.000 us/op

Iteration  10: 0.087 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.077 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.086 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.091 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.100 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.235 us/op
                 findLastPrefixUsingScanner2·p0.9999: 11.702 us/op
                 findLastPrefixUsingScanner2·p1.00:   248.320 us/op

Iteration  11: 0.084 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.077 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.084 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.088 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.100 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.224 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.840 us/op
                 findLastPrefixUsingScanner2·p1.00:   157.952 us/op

Iteration  12: 0.085 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.077 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.086 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.091 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.100 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.240 us/op
                 findLastPrefixUsingScanner2·p0.9999: 10.554 us/op
                 findLastPrefixUsingScanner2·p1.00:   158.976 us/op

Iteration  13: 0.084 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.077 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.084 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.090 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.100 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.202 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.590 us/op
                 findLastPrefixUsingScanner2·p1.00:   171.264 us/op

Iteration  14: 0.085 ±(99.9%) 0.002 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.072 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.077 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.087 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.092 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.101 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.242 us/op
                 findLastPrefixUsingScanner2·p0.9999: 9.948 us/op
                 findLastPrefixUsingScanner2·p1.00:   189.440 us/op

Iteration  15: 0.086 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.073 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.078 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.091 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.092 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.101 us/op
                 findLastPrefixUsingScanner2·p0.999:  0.213 us/op
                 findLastPrefixUsingScanner2·p0.9999: 8.755 us/op
                 findLastPrefixUsingScanner2·p1.00:   145.152 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 5441997
  mean =      0.085 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 5441916 
    [ 25.000,  50.000) = 24 
    [ 50.000,  75.000) = 6 
    [ 75.000, 100.000) = 6 
    [100.000, 125.000) = 10 
    [125.000, 150.000) = 18 
    [150.000, 175.000) = 10 
    [175.000, 200.000) = 2 
    [200.000, 225.000) = 2 
    [225.000, 250.000) = 2 
    [250.000, 275.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.072 us/op
     p(50.0000) =      0.078 us/op
     p(90.0000) =      0.086 us/op
     p(95.0000) =      0.091 us/op
     p(99.0000) =      0.101 us/op
     p(99.9000) =      0.223 us/op
     p(99.9900) =      9.405 us/op
     p(99.9990) =     59.699 us/op
     p(99.9999) =    201.089 us/op
    p(100.0000) =    284.160 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 85.50% complete, ETA 01:14:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.476 ±(99.9%) 0.006 us/op
# Warmup Iteration   2: 0.403 ±(99.9%) 0.008 us/op
# Warmup Iteration   3: 0.444 ±(99.9%) 0.004 us/op
# Warmup Iteration   4: 0.442 ±(99.9%) 0.007 us/op
# Warmup Iteration   5: 0.443 ±(99.9%) 0.005 us/op
Iteration   1: 0.443 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.411 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.426 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.440 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.447 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.458 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.177 us/op
                 findLastPrefixUsingScanner2·p0.9999: 15.239 us/op
                 findLastPrefixUsingScanner2·p1.00:   258.816 us/op

Iteration   2: 0.442 ±(99.9%) 0.003 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.411 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.426 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.441 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.447 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.459 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.208 us/op
                 findLastPrefixUsingScanner2·p0.9999: 14.531 us/op
                 findLastPrefixUsingScanner2·p1.00:   186.880 us/op

Iteration   3: 0.456 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.406 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.430 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.440 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.454 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.467 us/op
                 findLastPrefixUsingScanner2·p0.999:  7.115 us/op
                 findLastPrefixUsingScanner2·p0.9999: 27.865 us/op
                 findLastPrefixUsingScanner2·p1.00:   183.040 us/op

Iteration   4: 0.443 ±(99.9%) 0.008 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.405 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.418 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.438 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.440 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.450 us/op
                 findLastPrefixUsingScanner2·p0.999:  5.925 us/op
                 findLastPrefixUsingScanner2·p0.9999: 17.417 us/op
                 findLastPrefixUsingScanner2·p1.00:   209.664 us/op

Iteration   5: 0.445 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.405 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.427 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.447 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.449 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.458 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.149 us/op
                 findLastPrefixUsingScanner2·p0.9999: 17.858 us/op
                 findLastPrefixUsingScanner2·p1.00:   190.208 us/op

Iteration   6: 0.449 ±(99.9%) 0.011 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.404 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.417 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.432 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.438 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.448 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.107 us/op
                 findLastPrefixUsingScanner2·p0.9999: 23.541 us/op
                 findLastPrefixUsingScanner2·p1.00:   260.352 us/op

Iteration   7: 0.449 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.405 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.418 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.435 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.439 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.484 us/op
                 findLastPrefixUsingScanner2·p0.999:  6.204 us/op
                 findLastPrefixUsingScanner2·p0.9999: 31.009 us/op
                 findLastPrefixUsingScanner2·p1.00:   159.488 us/op

Iteration   8: 0.438 ±(99.9%) 0.004 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.407 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.419 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.438 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.441 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.452 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.299 us/op
                 findLastPrefixUsingScanner2·p0.9999: 16.843 us/op
                 findLastPrefixUsingScanner2·p1.00:   177.152 us/op

Iteration   9: 0.449 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.406 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.418 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.437 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.439 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.483 us/op
                 findLastPrefixUsingScanner2·p0.999:  7.014 us/op
                 findLastPrefixUsingScanner2·p0.9999: 21.805 us/op
                 findLastPrefixUsingScanner2·p1.00:   215.552 us/op

Iteration  10: 0.438 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.405 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.418 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.438 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.439 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.449 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.222 us/op
                 findLastPrefixUsingScanner2·p0.9999: 18.148 us/op
                 findLastPrefixUsingScanner2·p1.00:   173.056 us/op

Iteration  11: 0.451 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.406 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.419 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.438 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.440 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.469 us/op
                 findLastPrefixUsingScanner2·p0.999:  7.336 us/op
                 findLastPrefixUsingScanner2·p0.9999: 25.257 us/op
                 findLastPrefixUsingScanner2·p1.00:   244.480 us/op

Iteration  12: 0.445 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.411 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.426 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.444 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.447 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.460 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.514 us/op
                 findLastPrefixUsingScanner2·p0.9999: 16.396 us/op
                 findLastPrefixUsingScanner2·p1.00:   188.928 us/op

Iteration  13: 0.450 ±(99.9%) 0.010 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.404 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.417 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.432 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.439 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.456 us/op
                 findLastPrefixUsingScanner2·p0.999:  7.038 us/op
                 findLastPrefixUsingScanner2·p0.9999: 29.028 us/op
                 findLastPrefixUsingScanner2·p1.00:   268.800 us/op

Iteration  14: 0.449 ±(99.9%) 0.009 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.405 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.418 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.432 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.439 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.480 us/op
                 findLastPrefixUsingScanner2·p0.999:  7.242 us/op
                 findLastPrefixUsingScanner2·p0.9999: 22.839 us/op
                 findLastPrefixUsingScanner2·p1.00:   228.352 us/op

Iteration  15: 0.439 ±(99.9%) 0.005 us/op
                 findLastPrefixUsingScanner2·p0.00:   0.407 us/op
                 findLastPrefixUsingScanner2·p0.50:   0.419 us/op
                 findLastPrefixUsingScanner2·p0.90:   0.439 us/op
                 findLastPrefixUsingScanner2·p0.95:   0.440 us/op
                 findLastPrefixUsingScanner2·p0.99:   0.451 us/op
                 findLastPrefixUsingScanner2·p0.999:  4.319 us/op
                 findLastPrefixUsingScanner2·p0.9999: 17.048 us/op
                 findLastPrefixUsingScanner2·p1.00:   215.552 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 4341914
  mean =      0.444 ±(99.9%) 0.002 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 4341626 
    [ 25.000,  50.000) = 93 
    [ 50.000,  75.000) = 14 
    [ 75.000, 100.000) = 18 
    [100.000, 125.000) = 24 
    [125.000, 150.000) = 72 
    [150.000, 175.000) = 43 
    [175.000, 200.000) = 10 
    [200.000, 225.000) = 8 
    [225.000, 250.000) = 2 
    [250.000, 275.000) = 4 

  Percentiles, us/op:
      p(0.0000) =      0.404 us/op
     p(50.0000) =      0.420 us/op
     p(90.0000) =      0.439 us/op
     p(95.0000) =      0.442 us/op
     p(99.0000) =      0.459 us/op
     p(99.9000) =      4.912 us/op
     p(99.9900) =     18.586 us/op
     p(99.9990) =    161.280 us/op
     p(99.9999) =    253.409 us/op
    p(100.0000) =    268.800 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 86.23% complete, ETA 01:10:18
# Fork: 1 of 1
# Warmup Iteration   1: 3.871 ±(99.9%) 0.021 us/op
# Warmup Iteration   2: 4.490 ±(99.9%) 0.017 us/op
# Warmup Iteration   3: 4.470 ±(99.9%) 0.017 us/op
# Warmup Iteration   4: 4.536 ±(99.9%) 0.019 us/op
# Warmup Iteration   5: 4.502 ±(99.9%) 0.019 us/op
Iteration   1: 4.513 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.360 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.408 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.440 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.456 us/op
                 findLastPrefixUsingScanner2·p0.99:   5.896 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.449 us/op
                 findLastPrefixUsingScanner2·p0.9999: 176.397 us/op
                 findLastPrefixUsingScanner2·p1.00:   338.944 us/op

Iteration   2: 4.589 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.440 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.488 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.512 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.528 us/op
                 findLastPrefixUsingScanner2·p0.99:   5.888 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.735 us/op
                 findLastPrefixUsingScanner2·p0.9999: 177.285 us/op
                 findLastPrefixUsingScanner2·p1.00:   253.440 us/op

Iteration   3: 4.463 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.328 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.368 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.384 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.400 us/op
                 findLastPrefixUsingScanner2·p0.99:   5.560 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.933 us/op
                 findLastPrefixUsingScanner2·p0.9999: 179.037 us/op
                 findLastPrefixUsingScanner2·p1.00:   312.832 us/op

Iteration   4: 4.512 ±(99.9%) 0.016 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.376 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.416 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.432 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.440 us/op
                 findLastPrefixUsingScanner2·p0.99:   5.380 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.586 us/op
                 findLastPrefixUsingScanner2·p0.9999: 171.036 us/op
                 findLastPrefixUsingScanner2·p1.00:   337.920 us/op

Iteration   5: 4.442 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.304 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.344 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.360 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.376 us/op
                 findLastPrefixUsingScanner2·p0.99:   5.592 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.299 us/op
                 findLastPrefixUsingScanner2·p0.9999: 172.949 us/op
                 findLastPrefixUsingScanner2·p1.00:   306.176 us/op

Iteration   6: 4.584 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.416 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.480 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.512 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.528 us/op
                 findLastPrefixUsingScanner2·p0.99:   5.832 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.267 us/op
                 findLastPrefixUsingScanner2·p0.9999: 174.437 us/op
                 findLastPrefixUsingScanner2·p1.00:   352.768 us/op

Iteration   7: 4.525 ±(99.9%) 0.015 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.392 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.440 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.448 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.456 us/op
                 findLastPrefixUsingScanner2·p0.99:   5.153 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.440 us/op
                 findLastPrefixUsingScanner2·p0.9999: 164.312 us/op
                 findLastPrefixUsingScanner2·p1.00:   236.800 us/op

Iteration   8: 4.643 ±(99.9%) 0.016 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.504 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.544 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.560 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.568 us/op
                 findLastPrefixUsingScanner2·p0.99:   5.728 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.159 us/op
                 findLastPrefixUsingScanner2·p0.9999: 166.283 us/op
                 findLastPrefixUsingScanner2·p1.00:   337.408 us/op

Iteration   9: 4.525 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.384 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.432 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.440 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.456 us/op
                 findLastPrefixUsingScanner2·p0.99:   5.640 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.472 us/op
                 findLastPrefixUsingScanner2·p0.9999: 174.336 us/op
                 findLastPrefixUsingScanner2·p1.00:   419.840 us/op

Iteration  10: 4.557 ±(99.9%) 0.019 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.392 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.440 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.472 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.496 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.416 us/op
                 findLastPrefixUsingScanner2·p0.999:  19.039 us/op
                 findLastPrefixUsingScanner2·p0.9999: 175.302 us/op
                 findLastPrefixUsingScanner2·p1.00:   342.528 us/op

Iteration  11: 4.483 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.224 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.376 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.400 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.416 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.320 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.016 us/op
                 findLastPrefixUsingScanner2·p0.9999: 172.216 us/op
                 findLastPrefixUsingScanner2·p1.00:   301.568 us/op

Iteration  12: 4.623 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.480 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.528 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.536 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.552 us/op
                 findLastPrefixUsingScanner2·p0.99:   6.144 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.100 us/op
                 findLastPrefixUsingScanner2·p0.9999: 179.287 us/op
                 findLastPrefixUsingScanner2·p1.00:   290.304 us/op

Iteration  13: 4.501 ±(99.9%) 0.017 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.352 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.400 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.424 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.440 us/op
                 findLastPrefixUsingScanner2·p0.99:   5.936 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.457 us/op
                 findLastPrefixUsingScanner2·p0.9999: 172.783 us/op
                 findLastPrefixUsingScanner2·p1.00:   381.440 us/op

Iteration  14: 4.437 ±(99.9%) 0.016 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.296 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.344 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.360 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.376 us/op
                 findLastPrefixUsingScanner2·p0.99:   5.632 us/op
                 findLastPrefixUsingScanner2·p0.999:  17.792 us/op
                 findLastPrefixUsingScanner2·p0.9999: 167.470 us/op
                 findLastPrefixUsingScanner2·p1.00:   354.816 us/op

Iteration  15: 4.573 ±(99.9%) 0.016 us/op
                 findLastPrefixUsingScanner2·p0.00:   4.368 us/op
                 findLastPrefixUsingScanner2·p0.50:   4.472 us/op
                 findLastPrefixUsingScanner2·p0.90:   4.504 us/op
                 findLastPrefixUsingScanner2·p0.95:   4.520 us/op
                 findLastPrefixUsingScanner2·p0.99:   5.920 us/op
                 findLastPrefixUsingScanner2·p0.999:  18.054 us/op
                 findLastPrefixUsingScanner2·p0.9999: 169.224 us/op
                 findLastPrefixUsingScanner2·p1.00:   263.168 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 4175894
  mean =      4.531 ±(99.9%) 0.004 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 4174835 
    [ 50.000, 100.000) = 186 
    [100.000, 150.000) = 159 
    [150.000, 200.000) = 566 
    [200.000, 250.000) = 107 
    [250.000, 300.000) = 22 
    [300.000, 350.000) = 15 
    [350.000, 400.000) = 3 
    [400.000, 450.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      4.224 us/op
     p(50.0000) =      4.432 us/op
     p(90.0000) =      4.528 us/op
     p(95.0000) =      4.552 us/op
     p(99.0000) =      5.840 us/op
     p(99.9000) =     18.016 us/op
     p(99.9900) =    172.649 us/op
     p(99.9990) =    249.748 us/op
     p(99.9999) =    350.967 us/op
    p(100.0000) =    419.840 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 86.95% complete, ETA 01:06:35
# Fork: 1 of 1
# Warmup Iteration   1: 14590.658 ±(99.9%) 100.855 us/op
# Warmup Iteration   2: 14551.615 ±(99.9%) 15.781 us/op
# Warmup Iteration   3: 14545.892 ±(99.9%) 14.508 us/op
# Warmup Iteration   4: 14539.085 ±(99.9%) 14.190 us/op
# Warmup Iteration   5: 14553.762 ±(99.9%) 15.800 us/op
Iteration   1: 14596.948 ±(99.9%) 28.083 us/op
                 runAlgorithm·p0.00:   14417.920 us/op
                 runAlgorithm·p0.50:   14532.608 us/op
                 runAlgorithm·p0.90:   14778.368 us/op
                 runAlgorithm·p0.95:   14860.288 us/op
                 runAlgorithm·p0.99:   15141.110 us/op
                 runAlgorithm·p0.999:  17989.632 us/op
                 runAlgorithm·p0.9999: 17989.632 us/op
                 runAlgorithm·p1.00:   17989.632 us/op

Iteration   2: 14584.124 ±(99.9%) 18.488 us/op
                 runAlgorithm·p0.00:   14417.920 us/op
                 runAlgorithm·p0.50:   14516.224 us/op
                 runAlgorithm·p0.90:   14761.984 us/op
                 runAlgorithm·p0.95:   14876.672 us/op
                 runAlgorithm·p0.99:   15110.308 us/op
                 runAlgorithm·p0.999:  15564.800 us/op
                 runAlgorithm·p0.9999: 15564.800 us/op
                 runAlgorithm·p1.00:   15564.800 us/op

Iteration   3: 14565.925 ±(99.9%) 16.497 us/op
                 runAlgorithm·p0.00:   14417.920 us/op
                 runAlgorithm·p0.50:   14516.224 us/op
                 runAlgorithm·p0.90:   14729.216 us/op
                 runAlgorithm·p0.95:   14820.966 us/op
                 runAlgorithm·p0.99:   15026.094 us/op
                 runAlgorithm·p0.999:  15286.272 us/op
                 runAlgorithm·p0.9999: 15286.272 us/op
                 runAlgorithm·p1.00:   15286.272 us/op

Iteration   4: 14551.496 ±(99.9%) 15.317 us/op
                 runAlgorithm·p0.00:   14417.920 us/op
                 runAlgorithm·p0.50:   14499.840 us/op
                 runAlgorithm·p0.90:   14712.832 us/op
                 runAlgorithm·p0.95:   14778.368 us/op
                 runAlgorithm·p0.99:   15011.676 us/op
                 runAlgorithm·p0.999:  15237.120 us/op
                 runAlgorithm·p0.9999: 15237.120 us/op
                 runAlgorithm·p1.00:   15237.120 us/op

Iteration   5: 14572.231 ±(99.9%) 17.534 us/op
                 runAlgorithm·p0.00:   14417.920 us/op
                 runAlgorithm·p0.50:   14516.224 us/op
                 runAlgorithm·p0.90:   14729.216 us/op
                 runAlgorithm·p0.95:   14805.402 us/op
                 runAlgorithm·p0.99:   15056.896 us/op
                 runAlgorithm·p0.999:  16056.320 us/op
                 runAlgorithm·p0.9999: 16056.320 us/op
                 runAlgorithm·p1.00:   16056.320 us/op

Iteration   6: 14567.048 ±(99.9%) 16.101 us/op
                 runAlgorithm·p0.00:   14417.920 us/op
                 runAlgorithm·p0.50:   14516.224 us/op
                 runAlgorithm·p0.90:   14729.216 us/op
                 runAlgorithm·p0.95:   14821.786 us/op
                 runAlgorithm·p0.99:   15024.128 us/op
                 runAlgorithm·p0.999:  15187.968 us/op
                 runAlgorithm·p0.9999: 15187.968 us/op
                 runAlgorithm·p1.00:   15187.968 us/op

Iteration   7: 14558.269 ±(99.9%) 16.638 us/op
                 runAlgorithm·p0.00:   14417.920 us/op
                 runAlgorithm·p0.50:   14499.840 us/op
                 runAlgorithm·p0.90:   14712.832 us/op
                 runAlgorithm·p0.95:   14778.368 us/op
                 runAlgorithm·p0.99:   15089.664 us/op
                 runAlgorithm·p0.999:  15761.408 us/op
                 runAlgorithm·p0.9999: 15761.408 us/op
                 runAlgorithm·p1.00:   15761.408 us/op

Iteration   8: 14553.309 ±(99.9%) 15.592 us/op
                 runAlgorithm·p0.00:   14417.920 us/op
                 runAlgorithm·p0.50:   14499.840 us/op
                 runAlgorithm·p0.90:   14712.832 us/op
                 runAlgorithm·p0.95:   14804.582 us/op
                 runAlgorithm·p0.99:   14960.558 us/op
                 runAlgorithm·p0.999:  15253.504 us/op
                 runAlgorithm·p0.9999: 15253.504 us/op
                 runAlgorithm·p1.00:   15253.504 us/op

Iteration   9: 14562.156 ±(99.9%) 16.430 us/op
                 runAlgorithm·p0.00:   14417.920 us/op
                 runAlgorithm·p0.50:   14516.224 us/op
                 runAlgorithm·p0.90:   14712.832 us/op
                 runAlgorithm·p0.95:   14820.966 us/op
                 runAlgorithm·p0.99:   15075.246 us/op
                 runAlgorithm·p0.999:  15269.888 us/op
                 runAlgorithm·p0.9999: 15269.888 us/op
                 runAlgorithm·p1.00:   15269.888 us/op

Iteration  10: 14569.716 ±(99.9%) 17.038 us/op
                 runAlgorithm·p0.00:   14417.920 us/op
                 runAlgorithm·p0.50:   14516.224 us/op
                 runAlgorithm·p0.90:   14732.493 us/op
                 runAlgorithm·p0.95:   14853.734 us/op
                 runAlgorithm·p0.99:   15073.280 us/op
                 runAlgorithm·p0.999:  15335.424 us/op
                 runAlgorithm·p0.9999: 15335.424 us/op
                 runAlgorithm·p1.00:   15335.424 us/op

Iteration  11: 14561.966 ±(99.9%) 16.671 us/op
                 runAlgorithm·p0.00:   14417.920 us/op
                 runAlgorithm·p0.50:   14499.840 us/op
                 runAlgorithm·p0.90:   14729.216 us/op
                 runAlgorithm·p0.95:   14794.752 us/op
                 runAlgorithm·p0.99:   15064.760 us/op
                 runAlgorithm·p0.999:  15384.576 us/op
                 runAlgorithm·p0.9999: 15384.576 us/op
                 runAlgorithm·p1.00:   15384.576 us/op

Iteration  12: 14565.614 ±(99.9%) 17.232 us/op
                 runAlgorithm·p0.00:   14401.536 us/op
                 runAlgorithm·p0.50:   14516.224 us/op
                 runAlgorithm·p0.90:   14745.600 us/op
                 runAlgorithm·p0.95:   14820.966 us/op
                 runAlgorithm·p0.99:   15093.596 us/op
                 runAlgorithm·p0.999:  15532.032 us/op
                 runAlgorithm·p0.9999: 15532.032 us/op
                 runAlgorithm·p1.00:   15532.032 us/op

Iteration  13: 14578.440 ±(99.9%) 16.789 us/op
                 runAlgorithm·p0.00:   14434.304 us/op
                 runAlgorithm·p0.50:   14516.224 us/op
                 runAlgorithm·p0.90:   14745.600 us/op
                 runAlgorithm·p0.95:   14811.136 us/op
                 runAlgorithm·p0.99:   15093.924 us/op
                 runAlgorithm·p0.999:  15433.728 us/op
                 runAlgorithm·p0.9999: 15433.728 us/op
                 runAlgorithm·p1.00:   15433.728 us/op

Iteration  14: 14564.684 ±(99.9%) 15.352 us/op
                 runAlgorithm·p0.00:   14434.304 us/op
                 runAlgorithm·p0.50:   14516.224 us/op
                 runAlgorithm·p0.90:   14729.216 us/op
                 runAlgorithm·p0.95:   14778.368 us/op
                 runAlgorithm·p0.99:   15056.896 us/op
                 runAlgorithm·p0.999:  15220.736 us/op
                 runAlgorithm·p0.9999: 15220.736 us/op
                 runAlgorithm·p1.00:   15220.736 us/op

Iteration  15: 14561.322 ±(99.9%) 20.436 us/op
                 runAlgorithm·p0.00:   14417.920 us/op
                 runAlgorithm·p0.50:   14499.840 us/op
                 runAlgorithm·p0.90:   14712.832 us/op
                 runAlgorithm·p0.95:   14788.198 us/op
                 runAlgorithm·p0.99:   15093.596 us/op
                 runAlgorithm·p0.999:  17072.128 us/op
                 runAlgorithm·p0.9999: 17072.128 us/op
                 runAlgorithm·p1.00:   17072.128 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  N = 10299
  mean =  14567.541 ±(99.9%) 4.608 us/op

  Histogram, us/op:
    [14000.000, 14250.000) = 0 
    [14250.000, 14500.000) = 4866 
    [14500.000, 14750.000) = 4583 
    [14750.000, 15000.000) = 694 
    [15000.000, 15250.000) = 136 
    [15250.000, 15500.000) = 12 
    [15500.000, 15750.000) = 3 
    [15750.000, 16000.000) = 1 
    [16000.000, 16250.000) = 1 
    [16250.000, 16500.000) = 0 
    [16500.000, 16750.000) = 0 
    [16750.000, 17000.000) = 0 
    [17000.000, 17250.000) = 1 
    [17250.000, 17500.000) = 0 
    [17500.000, 17750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  14401.536 us/op
     p(50.0000) =  14516.224 us/op
     p(90.0000) =  14729.216 us/op
     p(95.0000) =  14811.136 us/op
     p(99.0000) =  15056.896 us/op
     p(99.9000) =  15423.898 us/op
     p(99.9900) =  17980.785 us/op
     p(99.9990) =  17989.632 us/op
     p(99.9999) =  17989.632 us/op
    p(100.0000) =  17989.632 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 87.68% complete, ETA 01:02:52
# Fork: 1 of 1
# Warmup Iteration   1: 353.929 ±(99.9%) 2.170 us/op
# Warmup Iteration   2: 347.838 ±(99.9%) 0.829 us/op
# Warmup Iteration   3: 347.488 ±(99.9%) 0.833 us/op
# Warmup Iteration   4: 348.068 ±(99.9%) 0.845 us/op
# Warmup Iteration   5: 347.637 ±(99.9%) 0.775 us/op
Iteration   1: 348.336 ±(99.9%) 0.865 us/op
                 runAlgorithm·p0.00:   331.264 us/op
                 runAlgorithm·p0.50:   342.016 us/op
                 runAlgorithm·p0.90:   363.520 us/op
                 runAlgorithm·p0.95:   373.248 us/op
                 runAlgorithm·p0.99:   460.544 us/op
                 runAlgorithm·p0.999:  1185.741 us/op
                 runAlgorithm·p0.9999: 1464.320 us/op
                 runAlgorithm·p1.00:   1486.848 us/op

Iteration   2: 348.151 ±(99.9%) 0.847 us/op
                 runAlgorithm·p0.00:   330.752 us/op
                 runAlgorithm·p0.50:   342.528 us/op
                 runAlgorithm·p0.90:   362.496 us/op
                 runAlgorithm·p0.95:   371.712 us/op
                 runAlgorithm·p0.99:   434.284 us/op
                 runAlgorithm·p0.999:  1193.984 us/op
                 runAlgorithm·p0.9999: 1339.927 us/op
                 runAlgorithm·p1.00:   1343.488 us/op

Iteration   3: 348.989 ±(99.9%) 0.838 us/op
                 runAlgorithm·p0.00:   331.776 us/op
                 runAlgorithm·p0.50:   343.040 us/op
                 runAlgorithm·p0.90:   363.520 us/op
                 runAlgorithm·p0.95:   372.224 us/op
                 runAlgorithm·p0.99:   487.828 us/op
                 runAlgorithm·p0.999:  1148.928 us/op
                 runAlgorithm·p0.9999: 1311.850 us/op
                 runAlgorithm·p1.00:   1431.552 us/op

Iteration   4: 348.999 ±(99.9%) 0.844 us/op
                 runAlgorithm·p0.00:   330.752 us/op
                 runAlgorithm·p0.50:   343.040 us/op
                 runAlgorithm·p0.90:   364.032 us/op
                 runAlgorithm·p0.95:   372.736 us/op
                 runAlgorithm·p0.99:   459.914 us/op
                 runAlgorithm·p0.999:  1169.408 us/op
                 runAlgorithm·p0.9999: 1404.715 us/op
                 runAlgorithm·p1.00:   1460.224 us/op

Iteration   5: 348.605 ±(99.9%) 0.838 us/op
                 runAlgorithm·p0.00:   331.264 us/op
                 runAlgorithm·p0.50:   343.040 us/op
                 runAlgorithm·p0.90:   363.008 us/op
                 runAlgorithm·p0.95:   372.224 us/op
                 runAlgorithm·p0.99:   449.772 us/op
                 runAlgorithm·p0.999:  1169.486 us/op
                 runAlgorithm·p0.9999: 1349.671 us/op
                 runAlgorithm·p1.00:   1533.952 us/op

Iteration   6: 347.919 ±(99.9%) 0.834 us/op
                 runAlgorithm·p0.00:   331.264 us/op
                 runAlgorithm·p0.50:   342.016 us/op
                 runAlgorithm·p0.90:   362.496 us/op
                 runAlgorithm·p0.95:   372.224 us/op
                 runAlgorithm·p0.99:   468.787 us/op
                 runAlgorithm·p0.999:  1152.164 us/op
                 runAlgorithm·p0.9999: 1357.097 us/op
                 runAlgorithm·p1.00:   1390.592 us/op

Iteration   7: 347.284 ±(99.9%) 0.834 us/op
                 runAlgorithm·p0.00:   330.752 us/op
                 runAlgorithm·p0.50:   340.992 us/op
                 runAlgorithm·p0.90:   361.472 us/op
                 runAlgorithm·p0.95:   370.688 us/op
                 runAlgorithm·p0.99:   469.893 us/op
                 runAlgorithm·p0.999:  1154.486 us/op
                 runAlgorithm·p0.9999: 1379.299 us/op
                 runAlgorithm·p1.00:   1449.984 us/op

Iteration   8: 348.315 ±(99.9%) 0.855 us/op
                 runAlgorithm·p0.00:   331.264 us/op
                 runAlgorithm·p0.50:   342.528 us/op
                 runAlgorithm·p0.90:   361.984 us/op
                 runAlgorithm·p0.95:   370.688 us/op
                 runAlgorithm·p0.99:   477.143 us/op
                 runAlgorithm·p0.999:  1199.403 us/op
                 runAlgorithm·p0.9999: 1370.351 us/op
                 runAlgorithm·p1.00:   1421.312 us/op

Iteration   9: 346.695 ±(99.9%) 0.820 us/op
                 runAlgorithm·p0.00:   330.752 us/op
                 runAlgorithm·p0.50:   339.968 us/op
                 runAlgorithm·p0.90:   359.936 us/op
                 runAlgorithm·p0.95:   369.152 us/op
                 runAlgorithm·p0.99:   476.616 us/op
                 runAlgorithm·p0.999:  1129.609 us/op
                 runAlgorithm·p0.9999: 1318.712 us/op
                 runAlgorithm·p1.00:   1439.744 us/op

Iteration  10: 346.662 ±(99.9%) 0.820 us/op
                 runAlgorithm·p0.00:   330.752 us/op
                 runAlgorithm·p0.50:   340.480 us/op
                 runAlgorithm·p0.90:   359.424 us/op
                 runAlgorithm·p0.95:   369.664 us/op
                 runAlgorithm·p0.99:   441.856 us/op
                 runAlgorithm·p0.999:  1138.688 us/op
                 runAlgorithm·p0.9999: 1413.848 us/op
                 runAlgorithm·p1.00:   1462.272 us/op

Iteration  11: 348.334 ±(99.9%) 0.843 us/op
                 runAlgorithm·p0.00:   330.240 us/op
                 runAlgorithm·p0.50:   342.016 us/op
                 runAlgorithm·p0.90:   363.008 us/op
                 runAlgorithm·p0.95:   373.248 us/op
                 runAlgorithm·p0.99:   476.047 us/op
                 runAlgorithm·p0.999:  1158.455 us/op
                 runAlgorithm·p0.9999: 1325.599 us/op
                 runAlgorithm·p1.00:   1417.216 us/op

Iteration  12: 348.717 ±(99.9%) 0.942 us/op
                 runAlgorithm·p0.00:   330.752 us/op
                 runAlgorithm·p0.50:   342.528 us/op
                 runAlgorithm·p0.90:   362.496 us/op
                 runAlgorithm·p0.95:   371.712 us/op
                 runAlgorithm·p0.99:   470.682 us/op
                 runAlgorithm·p0.999:  1168.087 us/op
                 runAlgorithm·p0.9999: 1417.455 us/op
                 runAlgorithm·p1.00:   3719.168 us/op

Iteration  13: 348.720 ±(99.9%) 0.866 us/op
                 runAlgorithm·p0.00:   331.264 us/op
                 runAlgorithm·p0.50:   343.040 us/op
                 runAlgorithm·p0.90:   363.008 us/op
                 runAlgorithm·p0.95:   373.248 us/op
                 runAlgorithm·p0.99:   487.194 us/op
                 runAlgorithm·p0.999:  1185.198 us/op
                 runAlgorithm·p0.9999: 1388.716 us/op
                 runAlgorithm·p1.00:   1409.024 us/op

Iteration  14: 349.275 ±(99.9%) 0.885 us/op
                 runAlgorithm·p0.00:   331.776 us/op
                 runAlgorithm·p0.50:   343.040 us/op
                 runAlgorithm·p0.90:   364.544 us/op
                 runAlgorithm·p0.95:   374.272 us/op
                 runAlgorithm·p0.99:   491.520 us/op
                 runAlgorithm·p0.999:  1137.877 us/op
                 runAlgorithm·p0.9999: 1402.267 us/op
                 runAlgorithm·p1.00:   3112.960 us/op

Iteration  15: 349.238 ±(99.9%) 0.875 us/op
                 runAlgorithm·p0.00:   330.752 us/op
                 runAlgorithm·p0.50:   343.040 us/op
                 runAlgorithm·p0.90:   363.520 us/op
                 runAlgorithm·p0.95:   372.736 us/op
                 runAlgorithm·p0.99:   466.422 us/op
                 runAlgorithm·p0.999:  1204.214 us/op
                 runAlgorithm·p0.9999: 1401.851 us/op
                 runAlgorithm·p1.00:   1456.128 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 430188
  mean =    348.281 ±(99.9%) 0.221 us/op

  Histogram, us/op:
    [   0.000,  250.000) = 0 
    [ 250.000,  500.000) = 426339 
    [ 500.000,  750.000) = 2892 
    [ 750.000, 1000.000) = 44 
    [1000.000, 1250.000) = 724 
    [1250.000, 1500.000) = 186 
    [1500.000, 1750.000) = 1 
    [1750.000, 2000.000) = 0 
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 0 
    [2500.000, 2750.000) = 0 
    [2750.000, 3000.000) = 0 
    [3000.000, 3250.000) = 1 
    [3250.000, 3500.000) = 0 
    [3500.000, 3750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    330.240 us/op
     p(50.0000) =    342.016 us/op
     p(90.0000) =    362.496 us/op
     p(95.0000) =    372.224 us/op
     p(99.0000) =    469.048 us/op
     p(99.9000) =   1167.360 us/op
     p(99.9900) =   1372.121 us/op
     p(99.9990) =   1480.047 us/op
     p(99.9999) =   3719.168 us/op
    p(100.0000) =   3719.168 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 88.40% complete, ETA 00:59:09
# Fork: 1 of 1
# Warmup Iteration   1: 35469.385 ±(99.9%) 610.884 us/op
# Warmup Iteration   2: 35182.909 ±(99.9%) 175.336 us/op
# Warmup Iteration   3: 35257.445 ±(99.9%) 178.173 us/op
# Warmup Iteration   4: 35276.137 ±(99.9%) 181.658 us/op
# Warmup Iteration   5: 35293.905 ±(99.9%) 183.345 us/op
Iteration   1: 35311.630 ±(99.9%) 175.605 us/op
                 runAlgorithm·p0.00:   34471.936 us/op
                 runAlgorithm·p0.50:   34865.152 us/op
                 runAlgorithm·p0.90:   36896.768 us/op
                 runAlgorithm·p0.95:   37093.376 us/op
                 runAlgorithm·p0.99:   37617.664 us/op
                 runAlgorithm·p0.999:  37814.272 us/op
                 runAlgorithm·p0.9999: 37814.272 us/op
                 runAlgorithm·p1.00:   37814.272 us/op

Iteration   2: 35325.525 ±(99.9%) 176.713 us/op
                 runAlgorithm·p0.00:   34471.936 us/op
                 runAlgorithm·p0.50:   34930.688 us/op
                 runAlgorithm·p0.90:   37027.840 us/op
                 runAlgorithm·p0.95:   37145.805 us/op
                 runAlgorithm·p0.99:   37486.592 us/op
                 runAlgorithm·p0.999:  37683.200 us/op
                 runAlgorithm·p0.9999: 37683.200 us/op
                 runAlgorithm·p1.00:   37683.200 us/op

Iteration   3: 35270.598 ±(99.9%) 173.085 us/op
                 runAlgorithm·p0.00:   34471.936 us/op
                 runAlgorithm·p0.50:   34865.152 us/op
                 runAlgorithm·p0.90:   36831.232 us/op
                 runAlgorithm·p0.95:   37076.992 us/op
                 runAlgorithm·p0.99:   37561.958 us/op
                 runAlgorithm·p0.999:  37617.664 us/op
                 runAlgorithm·p0.9999: 37617.664 us/op
                 runAlgorithm·p1.00:   37617.664 us/op

Iteration   4: 35174.140 ±(99.9%) 171.322 us/op
                 runAlgorithm·p0.00:   34406.400 us/op
                 runAlgorithm·p0.50:   34799.616 us/op
                 runAlgorithm·p0.90:   36765.696 us/op
                 runAlgorithm·p0.95:   36962.304 us/op
                 runAlgorithm·p0.99:   37309.645 us/op
                 runAlgorithm·p0.999:  37421.056 us/op
                 runAlgorithm·p0.9999: 37421.056 us/op
                 runAlgorithm·p1.00:   37421.056 us/op

Iteration   5: 35183.832 ±(99.9%) 172.809 us/op
                 runAlgorithm·p0.00:   34406.400 us/op
                 runAlgorithm·p0.50:   34734.080 us/op
                 runAlgorithm·p0.90:   36765.696 us/op
                 runAlgorithm·p0.95:   36962.304 us/op
                 runAlgorithm·p0.99:   37404.672 us/op
                 runAlgorithm·p0.999:  37683.200 us/op
                 runAlgorithm·p0.9999: 37683.200 us/op
                 runAlgorithm·p1.00:   37683.200 us/op

Iteration   6: 35256.983 ±(99.9%) 174.433 us/op
                 runAlgorithm·p0.00:   34406.400 us/op
                 runAlgorithm·p0.50:   34865.152 us/op
                 runAlgorithm·p0.90:   36896.768 us/op
                 runAlgorithm·p0.95:   37011.456 us/op
                 runAlgorithm·p0.99:   37496.422 us/op
                 runAlgorithm·p0.999:  37814.272 us/op
                 runAlgorithm·p0.9999: 37814.272 us/op
                 runAlgorithm·p1.00:   37814.272 us/op

Iteration   7: 35217.062 ±(99.9%) 158.961 us/op
                 runAlgorithm·p0.00:   34406.400 us/op
                 runAlgorithm·p0.50:   34865.152 us/op
                 runAlgorithm·p0.90:   36634.624 us/op
                 runAlgorithm·p0.95:   36831.232 us/op
                 runAlgorithm·p0.99:   37168.742 us/op
                 runAlgorithm·p0.999:  38010.880 us/op
                 runAlgorithm·p0.9999: 38010.880 us/op
                 runAlgorithm·p1.00:   38010.880 us/op

Iteration   8: 35087.744 ±(99.9%) 160.983 us/op
                 runAlgorithm·p0.00:   34340.864 us/op
                 runAlgorithm·p0.50:   34734.080 us/op
                 runAlgorithm·p0.90:   36569.088 us/op
                 runAlgorithm·p0.95:   36765.696 us/op
                 runAlgorithm·p0.99:   37233.623 us/op
                 runAlgorithm·p0.999:  37355.520 us/op
                 runAlgorithm·p0.9999: 37355.520 us/op
                 runAlgorithm·p1.00:   37355.520 us/op

Iteration   9: 35143.393 ±(99.9%) 163.203 us/op
                 runAlgorithm·p0.00:   34340.864 us/op
                 runAlgorithm·p0.50:   34734.080 us/op
                 runAlgorithm·p0.90:   36634.624 us/op
                 runAlgorithm·p0.95:   36765.696 us/op
                 runAlgorithm·p0.99:   37130.076 us/op
                 runAlgorithm·p0.999:  38010.880 us/op
                 runAlgorithm·p0.9999: 38010.880 us/op
                 runAlgorithm·p1.00:   38010.880 us/op

Iteration  10: 35119.248 ±(99.9%) 164.327 us/op
                 runAlgorithm·p0.00:   34275.328 us/op
                 runAlgorithm·p0.50:   34734.080 us/op
                 runAlgorithm·p0.90:   36700.160 us/op
                 runAlgorithm·p0.95:   36877.107 us/op
                 runAlgorithm·p0.99:   37102.551 us/op
                 runAlgorithm·p0.999:  37158.912 us/op
                 runAlgorithm·p0.9999: 37158.912 us/op
                 runAlgorithm·p1.00:   37158.912 us/op

Iteration  11: 35124.077 ±(99.9%) 157.894 us/op
                 runAlgorithm·p0.00:   34340.864 us/op
                 runAlgorithm·p0.50:   34734.080 us/op
                 runAlgorithm·p0.90:   36595.302 us/op
                 runAlgorithm·p0.95:   36765.696 us/op
                 runAlgorithm·p0.99:   36980.654 us/op
                 runAlgorithm·p0.999:  37093.376 us/op
                 runAlgorithm·p0.9999: 37093.376 us/op
                 runAlgorithm·p1.00:   37093.376 us/op

Iteration  12: 35064.979 ±(99.9%) 164.378 us/op
                 runAlgorithm·p0.00:   34340.864 us/op
                 runAlgorithm·p0.50:   34668.544 us/op
                 runAlgorithm·p0.90:   36569.088 us/op
                 runAlgorithm·p0.95:   36765.696 us/op
                 runAlgorithm·p0.99:   37224.448 us/op
                 runAlgorithm·p0.999:  37355.520 us/op
                 runAlgorithm·p0.9999: 37355.520 us/op
                 runAlgorithm·p1.00:   37355.520 us/op

Iteration  13: 35080.156 ±(99.9%) 160.602 us/op
                 runAlgorithm·p0.00:   34340.864 us/op
                 runAlgorithm·p0.50:   34734.080 us/op
                 runAlgorithm·p0.90:   36569.088 us/op
                 runAlgorithm·p0.95:   36746.035 us/op
                 runAlgorithm·p0.99:   37111.726 us/op
                 runAlgorithm·p0.999:  37617.664 us/op
                 runAlgorithm·p0.9999: 37617.664 us/op
                 runAlgorithm·p1.00:   37617.664 us/op

Iteration  14: 35085.905 ±(99.9%) 166.832 us/op
                 runAlgorithm·p0.00:   34340.864 us/op
                 runAlgorithm·p0.50:   34668.544 us/op
                 runAlgorithm·p0.90:   36634.624 us/op
                 runAlgorithm·p0.95:   36831.232 us/op
                 runAlgorithm·p0.99:   37299.159 us/op
                 runAlgorithm·p0.999:  37486.592 us/op
                 runAlgorithm·p0.9999: 37486.592 us/op
                 runAlgorithm·p1.00:   37486.592 us/op

Iteration  15: 35092.573 ±(99.9%) 162.728 us/op
                 runAlgorithm·p0.00:   34275.328 us/op
                 runAlgorithm·p0.50:   34668.544 us/op
                 runAlgorithm·p0.90:   36569.088 us/op
                 runAlgorithm·p0.95:   36765.696 us/op
                 runAlgorithm·p0.99:   37055.365 us/op
                 runAlgorithm·p0.999:  37224.448 us/op
                 runAlgorithm·p0.9999: 37224.448 us/op
                 runAlgorithm·p1.00:   37224.448 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 4266
  mean =  35168.990 ±(99.9%) 42.849 us/op

  Histogram, us/op:
    [34000.000, 34500.000) = 398 
    [34500.000, 35000.000) = 2617 
    [35000.000, 35500.000) = 300 
    [35500.000, 36000.000) = 36 
    [36000.000, 36500.000) = 171 
    [36500.000, 37000.000) = 593 
    [37000.000, 37500.000) = 135 
    [37500.000, 38000.000) = 14 
    [38000.000, 38500.000) = 2 

  Percentiles, us/op:
      p(0.0000) =  34275.328 us/op
     p(50.0000) =  34799.616 us/op
     p(90.0000) =  36700.160 us/op
     p(95.0000) =  36896.768 us/op
     p(99.0000) =  37289.984 us/op
     p(99.9000) =  37779.276 us/op
     p(99.9900) =  38010.880 us/op
     p(99.9990) =  38010.880 us/op
     p(99.9999) =  38010.880 us/op
    p(100.0000) =  38010.880 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 89.13% complete, ETA 00:55:27
# Fork: 1 of 1
# Warmup Iteration   1: 3644850.176 ±(99.9%) 3239234.348 us/op
# Warmup Iteration   2: 3650442.581 ±(99.9%) 1843368.341 us/op
# Warmup Iteration   3: 3650442.581 ±(99.9%) 1781995.140 us/op
# Warmup Iteration   4: 3633665.365 ±(99.9%) 1837004.565 us/op
# Warmup Iteration   5: 3639257.771 ±(99.9%) 1896598.516 us/op
Iteration   1: 3647646.379 ±(99.9%) 1694412.221 us/op
                 runAlgorithm·p0.00:   3581935.616 us/op
                 runAlgorithm·p0.50:   3607101.440 us/op
                 runAlgorithm·p0.90:   3753902.080 us/op
                 runAlgorithm·p0.95:   3753902.080 us/op
                 runAlgorithm·p0.99:   3753902.080 us/op
                 runAlgorithm·p0.999:  3753902.080 us/op
                 runAlgorithm·p0.9999: 3753902.080 us/op
                 runAlgorithm·p1.00:   3753902.080 us/op

Iteration   2: 3651840.683 ±(99.9%) 1765489.736 us/op
                 runAlgorithm·p0.00:   3581935.616 us/op
                 runAlgorithm·p0.50:   3611295.744 us/op
                 runAlgorithm·p0.90:   3762290.688 us/op
                 runAlgorithm·p0.95:   3762290.688 us/op
                 runAlgorithm·p0.99:   3762290.688 us/op
                 runAlgorithm·p0.999:  3762290.688 us/op
                 runAlgorithm·p0.9999: 3762290.688 us/op
                 runAlgorithm·p1.00:   3762290.688 us/op

Iteration   3: 3640655.872 ±(99.9%) 1931270.392 us/op
                 runAlgorithm·p0.00:   3569352.704 us/op
                 runAlgorithm·p0.50:   3590324.224 us/op
                 runAlgorithm·p0.90:   3762290.688 us/op
                 runAlgorithm·p0.95:   3762290.688 us/op
                 runAlgorithm·p0.99:   3762290.688 us/op
                 runAlgorithm·p0.999:  3762290.688 us/op
                 runAlgorithm·p0.9999: 3762290.688 us/op
                 runAlgorithm·p1.00:   3762290.688 us/op

Iteration   4: 3649044.480 ±(99.9%) 1799434.040 us/op
                 runAlgorithm·p0.00:   3581935.616 us/op
                 runAlgorithm·p0.50:   3602907.136 us/op
                 runAlgorithm·p0.90:   3762290.688 us/op
                 runAlgorithm·p0.95:   3762290.688 us/op
                 runAlgorithm·p0.99:   3762290.688 us/op
                 runAlgorithm·p0.999:  3762290.688 us/op
                 runAlgorithm·p0.9999: 3762290.688 us/op
                 runAlgorithm·p1.00:   3762290.688 us/op

Iteration   5: 3674210.304 ±(99.9%) 1132388.431 us/op
                 runAlgorithm·p0.00:   3632267.264 us/op
                 runAlgorithm·p0.50:   3644850.176 us/op
                 runAlgorithm·p0.90:   3745513.472 us/op
                 runAlgorithm·p0.95:   3745513.472 us/op
                 runAlgorithm·p0.99:   3745513.472 us/op
                 runAlgorithm·p0.999:  3745513.472 us/op
                 runAlgorithm·p0.9999: 3745513.472 us/op
                 runAlgorithm·p1.00:   3745513.472 us/op

Iteration   6: 3643452.075 ±(99.9%) 2019212.188 us/op
                 runAlgorithm·p0.00:   3569352.704 us/op
                 runAlgorithm·p0.50:   3590324.224 us/op
                 runAlgorithm·p0.90:   3770679.296 us/op
                 runAlgorithm·p0.95:   3770679.296 us/op
                 runAlgorithm·p0.99:   3770679.296 us/op
                 runAlgorithm·p0.999:  3770679.296 us/op
                 runAlgorithm·p0.9999: 3770679.296 us/op
                 runAlgorithm·p1.00:   3770679.296 us/op

Iteration   7: 3651840.683 ±(99.9%) 1949876.994 us/op
                 runAlgorithm·p0.00:   3581935.616 us/op
                 runAlgorithm·p0.50:   3598712.832 us/op
                 runAlgorithm·p0.90:   3774873.600 us/op
                 runAlgorithm·p0.95:   3774873.600 us/op
                 runAlgorithm·p0.99:   3774873.600 us/op
                 runAlgorithm·p0.999:  3774873.600 us/op
                 runAlgorithm·p0.9999: 3774873.600 us/op
                 runAlgorithm·p1.00:   3774873.600 us/op

Iteration   8: 3653238.784 ±(99.9%) 1940344.539 us/op
                 runAlgorithm·p0.00:   3577741.312 us/op
                 runAlgorithm·p0.50:   3607101.440 us/op
                 runAlgorithm·p0.90:   3774873.600 us/op
                 runAlgorithm·p0.95:   3774873.600 us/op
                 runAlgorithm·p0.99:   3774873.600 us/op
                 runAlgorithm·p0.999:  3774873.600 us/op
                 runAlgorithm·p0.9999: 3774873.600 us/op
                 runAlgorithm·p1.00:   3774873.600 us/op

Iteration   9: 3646248.277 ±(99.9%) 1711603.181 us/op
                 runAlgorithm·p0.00:   3581935.616 us/op
                 runAlgorithm·p0.50:   3602907.136 us/op
                 runAlgorithm·p0.90:   3753902.080 us/op
                 runAlgorithm·p0.95:   3753902.080 us/op
                 runAlgorithm·p0.99:   3753902.080 us/op
                 runAlgorithm·p0.999:  3753902.080 us/op
                 runAlgorithm·p0.9999: 3753902.080 us/op
                 runAlgorithm·p1.00:   3753902.080 us/op

Iteration  10: 3639257.771 ±(99.9%) 1745477.241 us/op
                 runAlgorithm·p0.00:   3581935.616 us/op
                 runAlgorithm·p0.50:   3586129.920 us/op
                 runAlgorithm·p0.90:   3749707.776 us/op
                 runAlgorithm·p0.95:   3749707.776 us/op
                 runAlgorithm·p0.99:   3749707.776 us/op
                 runAlgorithm·p0.999:  3749707.776 us/op
                 runAlgorithm·p0.9999: 3749707.776 us/op
                 runAlgorithm·p1.00:   3749707.776 us/op

Iteration  11: 3635063.467 ±(99.9%) 1812941.466 us/op
                 runAlgorithm·p0.00:   3573547.008 us/op
                 runAlgorithm·p0.50:   3581935.616 us/op
                 runAlgorithm·p0.90:   3749707.776 us/op
                 runAlgorithm·p0.95:   3749707.776 us/op
                 runAlgorithm·p0.99:   3749707.776 us/op
                 runAlgorithm·p0.999:  3749707.776 us/op
                 runAlgorithm·p0.9999: 3749707.776 us/op
                 runAlgorithm·p1.00:   3749707.776 us/op

Iteration  12: 3644850.176 ±(99.9%) 1799434.040 us/op
                 runAlgorithm·p0.00:   3577741.312 us/op
                 runAlgorithm·p0.50:   3598712.832 us/op
                 runAlgorithm·p0.90:   3758096.384 us/op
                 runAlgorithm·p0.95:   3758096.384 us/op
                 runAlgorithm·p0.99:   3758096.384 us/op
                 runAlgorithm·p0.999:  3758096.384 us/op
                 runAlgorithm·p0.9999: 3758096.384 us/op
                 runAlgorithm·p1.00:   3758096.384 us/op

Iteration  13: 3650442.581 ±(99.9%) 1781995.140 us/op
                 runAlgorithm·p0.00:   3581935.616 us/op
                 runAlgorithm·p0.50:   3607101.440 us/op
                 runAlgorithm·p0.90:   3762290.688 us/op
                 runAlgorithm·p0.95:   3762290.688 us/op
                 runAlgorithm·p0.99:   3762290.688 us/op
                 runAlgorithm·p0.999:  3762290.688 us/op
                 runAlgorithm·p0.9999: 3762290.688 us/op
                 runAlgorithm·p1.00:   3762290.688 us/op

Iteration  14: 3646248.277 ±(99.9%) 1969299.055 us/op
                 runAlgorithm·p0.00:   3577741.312 us/op
                 runAlgorithm·p0.50:   3590324.224 us/op
                 runAlgorithm·p0.90:   3770679.296 us/op
                 runAlgorithm·p0.95:   3770679.296 us/op
                 runAlgorithm·p0.99:   3770679.296 us/op
                 runAlgorithm·p0.999:  3770679.296 us/op
                 runAlgorithm·p0.9999: 3770679.296 us/op
                 runAlgorithm·p1.00:   3770679.296 us/op

Iteration  15: 3635063.467 ±(99.9%) 1755512.006 us/op
                 runAlgorithm·p0.00:   3569352.704 us/op
                 runAlgorithm·p0.50:   3590324.224 us/op
                 runAlgorithm·p0.90:   3745513.472 us/op
                 runAlgorithm·p0.95:   3745513.472 us/op
                 runAlgorithm·p0.99:   3745513.472 us/op
                 runAlgorithm·p0.999:  3745513.472 us/op
                 runAlgorithm·p0.9999: 3745513.472 us/op
                 runAlgorithm·p1.00:   3745513.472 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 45
  mean = 3647273.552 ±(99.9%) 43057.175 us/op

  Histogram, us/op:
    [3500000.000, 3525000.000) = 0 
    [3525000.000, 3550000.000) = 0 
    [3550000.000, 3575000.000) = 4 
    [3575000.000, 3600000.000) = 18 
    [3600000.000, 3625000.000) = 6 
    [3625000.000, 3650000.000) = 2 
    [3650000.000, 3675000.000) = 0 
    [3675000.000, 3700000.000) = 0 
    [3700000.000, 3725000.000) = 0 
    [3725000.000, 3750000.000) = 4 
    [3750000.000, 3775000.000) = 11 

  Percentiles, us/op:
      p(0.0000) = 3569352.704 us/op
     p(50.0000) = 3602907.136 us/op
     p(90.0000) = 3765646.131 us/op
     p(95.0000) = 3773615.309 us/op
     p(99.0000) = 3774873.600 us/op
     p(99.9000) = 3774873.600 us/op
     p(99.9900) = 3774873.600 us/op
     p(99.9990) = 3774873.600 us/op
     p(99.9999) = 3774873.600 us/op
    p(100.0000) = 3774873.600 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 89.85% complete, ETA 00:51:47
# Fork: 1 of 1
# Warmup Iteration   1: 1905.584 ±(99.9%) 13.718 us/op
# Warmup Iteration   2: 1898.231 ±(99.9%) 2.006 us/op
# Warmup Iteration   3: 1897.736 ±(99.9%) 2.034 us/op
# Warmup Iteration   4: 1899.646 ±(99.9%) 2.822 us/op
# Warmup Iteration   5: 1896.924 ±(99.9%) 2.033 us/op
Iteration   1: 1896.586 ±(99.9%) 2.112 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1859.584 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1888.256 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1916.928 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1943.552 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2097.152 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2399.801 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2469.888 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2469.888 us/op

Iteration   2: 1896.932 ±(99.9%) 3.898 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1857.536 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1886.208 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1914.880 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1945.600 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2109.440 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2370.961 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 6488.064 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   6488.064 us/op

Iteration   3: 1894.078 ±(99.9%) 2.059 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1857.536 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1884.160 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1914.880 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1943.552 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2093.527 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2328.355 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2543.616 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2543.616 us/op

Iteration   4: 1893.809 ±(99.9%) 2.603 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1857.536 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1884.160 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1912.832 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1941.504 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2091.008 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2389.787 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 4358.144 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   4358.144 us/op

Iteration   5: 1893.547 ±(99.9%) 2.092 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1857.536 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1884.160 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1912.832 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1943.552 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2101.248 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2351.772 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2539.520 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2539.520 us/op

Iteration   6: 1892.836 ±(99.9%) 2.012 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   1857.536 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   1884.160 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   1912.832 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   1935.360 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2097.152 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2318.500 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2387.968 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2387.968 us/op

Iteration   7: 2270.806 ±(99.9%) 2.520 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2260.992 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2293.760 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2355.200 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2482.176 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2745.131 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2899.968 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2899.968 us/op

Iteration   8: 2271.852 ±(99.9%) 2.656 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2260.992 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2293.760 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2367.693 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2494.464 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2754.994 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2879.488 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2879.488 us/op

Iteration   9: 2271.310 ±(99.9%) 3.736 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2260.992 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2293.760 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2351.104 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2494.464 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2697.626 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 5980.160 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   5980.160 us/op

Iteration  10: 2271.462 ±(99.9%) 2.589 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2260.992 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2297.856 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2347.008 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2498.560 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2711.572 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 3039.232 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   3039.232 us/op

Iteration  11: 2267.778 ±(99.9%) 2.328 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2256.896 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2289.664 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2325.094 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2478.080 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2681.975 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2842.624 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2842.624 us/op

Iteration  12: 2266.645 ±(99.9%) 2.254 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2256.896 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2285.568 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2310.144 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2473.984 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2649.928 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2854.912 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2854.912 us/op

Iteration  13: 2268.728 ±(99.9%) 2.269 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2260.992 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2289.664 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2318.336 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2473.984 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2704.814 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2772.992 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2772.992 us/op

Iteration  14: 2267.685 ±(99.9%) 4.201 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2256.896 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2285.568 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2318.336 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2481.889 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2809.283 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 6594.560 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   6594.560 us/op

Iteration  15: 2265.097 ±(99.9%) 2.270 us/op
                 eliminateConditionsAlwaysTrue·p0.00:   2232.320 us/op
                 eliminateConditionsAlwaysTrue·p0.50:   2256.896 us/op
                 eliminateConditionsAlwaysTrue·p0.90:   2281.472 us/op
                 eliminateConditionsAlwaysTrue·p0.95:   2314.240 us/op
                 eliminateConditionsAlwaysTrue·p0.99:   2469.888 us/op
                 eliminateConditionsAlwaysTrue·p0.999:  2666.496 us/op
                 eliminateConditionsAlwaysTrue·p0.9999: 2781.184 us/op
                 eliminateConditionsAlwaysTrue·p1.00:   2781.184 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  N = 71276
  mean =   2102.804 ±(99.9%) 2.398 us/op

  Histogram, us/op:
    [1000.000, 1500.000) = 0 
    [1500.000, 2000.000) = 30443 
    [2000.000, 2500.000) = 40553 
    [2500.000, 3000.000) = 273 
    [3000.000, 3500.000) = 1 
    [3500.000, 4000.000) = 1 
    [4000.000, 4500.000) = 2 
    [4500.000, 5000.000) = 0 
    [5000.000, 5500.000) = 0 
    [5500.000, 6000.000) = 1 
    [6000.000, 6500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   1857.536 us/op
     p(50.0000) =   2236.416 us/op
     p(90.0000) =   2277.376 us/op
     p(95.0000) =   2293.760 us/op
     p(99.0000) =   2453.504 us/op
     p(99.9000) =   2670.592 us/op
     p(99.9900) =   3021.448 us/op
     p(99.9990) =   6594.560 us/op
     p(99.9999) =   6594.560 us/op
    p(100.0000) =   6594.560 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 90.58% complete, ETA 00:48:04
# Fork: 1 of 1
# Warmup Iteration   1: 47016.080 ±(99.9%) 224.245 us/op
# Warmup Iteration   2: 46929.622 ±(99.9%) 44.448 us/op
# Warmup Iteration   3: 46936.391 ±(99.9%) 48.677 us/op
# Warmup Iteration   4: 46969.005 ±(99.9%) 70.462 us/op
# Warmup Iteration   5: 46948.390 ±(99.9%) 44.788 us/op
Iteration   1: 46915.469 ±(99.9%) 46.864 us/op
                 extractOperationOutOfLoop·p0.00:   46596.096 us/op
                 extractOperationOutOfLoop·p0.50:   46858.240 us/op
                 extractOperationOutOfLoop·p0.90:   47185.920 us/op
                 extractOperationOutOfLoop·p0.95:   47382.528 us/op
                 extractOperationOutOfLoop·p0.99:   47569.961 us/op
                 extractOperationOutOfLoop·p0.999:  47775.744 us/op
                 extractOperationOutOfLoop·p0.9999: 47775.744 us/op
                 extractOperationOutOfLoop·p1.00:   47775.744 us/op

Iteration   2: 46949.314 ±(99.9%) 75.309 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46858.240 us/op
                 extractOperationOutOfLoop·p0.90:   47120.384 us/op
                 extractOperationOutOfLoop·p0.95:   47382.528 us/op
                 extractOperationOutOfLoop·p0.99:   49165.107 us/op
                 extractOperationOutOfLoop·p0.999:  49807.360 us/op
                 extractOperationOutOfLoop·p0.9999: 49807.360 us/op
                 extractOperationOutOfLoop·p1.00:   49807.360 us/op

Iteration   3: 46979.159 ±(99.9%) 79.943 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46923.776 us/op
                 extractOperationOutOfLoop·p0.90:   47316.992 us/op
                 extractOperationOutOfLoop·p0.95:   47448.064 us/op
                 extractOperationOutOfLoop·p0.99:   49386.619 us/op
                 extractOperationOutOfLoop·p0.999:  49479.680 us/op
                 extractOperationOutOfLoop·p0.9999: 49479.680 us/op
                 extractOperationOutOfLoop·p1.00:   49479.680 us/op

Iteration   4: 46907.239 ±(99.9%) 43.821 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46858.240 us/op
                 extractOperationOutOfLoop·p0.90:   47054.848 us/op
                 extractOperationOutOfLoop·p0.95:   47382.528 us/op
                 extractOperationOutOfLoop·p0.99:   47634.842 us/op
                 extractOperationOutOfLoop·p0.999:  47841.280 us/op
                 extractOperationOutOfLoop·p0.9999: 47841.280 us/op
                 extractOperationOutOfLoop·p1.00:   47841.280 us/op

Iteration   5: 46926.237 ±(99.9%) 44.856 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46858.240 us/op
                 extractOperationOutOfLoop·p0.90:   47185.920 us/op
                 extractOperationOutOfLoop·p0.95:   47336.653 us/op
                 extractOperationOutOfLoop·p0.99:   47710.208 us/op
                 extractOperationOutOfLoop·p0.999:  47710.208 us/op
                 extractOperationOutOfLoop·p0.9999: 47710.208 us/op
                 extractOperationOutOfLoop·p1.00:   47710.208 us/op

Iteration   6: 46864.671 ±(99.9%) 30.641 us/op
                 extractOperationOutOfLoop·p0.00:   46596.096 us/op
                 extractOperationOutOfLoop·p0.50:   46858.240 us/op
                 extractOperationOutOfLoop·p0.90:   47054.848 us/op
                 extractOperationOutOfLoop·p0.95:   47120.384 us/op
                 extractOperationOutOfLoop·p0.99:   47241.626 us/op
                 extractOperationOutOfLoop·p0.999:  47382.528 us/op
                 extractOperationOutOfLoop·p0.9999: 47382.528 us/op
                 extractOperationOutOfLoop·p1.00:   47382.528 us/op

Iteration   7: 46897.133 ±(99.9%) 43.403 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46858.240 us/op
                 extractOperationOutOfLoop·p0.90:   47120.384 us/op
                 extractOperationOutOfLoop·p0.95:   47333.376 us/op
                 extractOperationOutOfLoop·p0.99:   47634.842 us/op
                 extractOperationOutOfLoop·p0.999:  47841.280 us/op
                 extractOperationOutOfLoop·p0.9999: 47841.280 us/op
                 extractOperationOutOfLoop·p1.00:   47841.280 us/op

Iteration   8: 46921.622 ±(99.9%) 77.609 us/op
                 extractOperationOutOfLoop·p0.00:   46596.096 us/op
                 extractOperationOutOfLoop·p0.50:   46858.240 us/op
                 extractOperationOutOfLoop·p0.90:   47120.384 us/op
                 extractOperationOutOfLoop·p0.95:   47316.992 us/op
                 extractOperationOutOfLoop·p0.99:   47888.466 us/op
                 extractOperationOutOfLoop·p0.999:  50987.008 us/op
                 extractOperationOutOfLoop·p0.9999: 50987.008 us/op
                 extractOperationOutOfLoop·p1.00:   50987.008 us/op

Iteration   9: 46879.065 ±(99.9%) 34.921 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46858.240 us/op
                 extractOperationOutOfLoop·p0.90:   47054.848 us/op
                 extractOperationOutOfLoop·p0.95:   47185.920 us/op
                 extractOperationOutOfLoop·p0.99:   47503.770 us/op
                 extractOperationOutOfLoop·p0.999:  47579.136 us/op
                 extractOperationOutOfLoop·p0.9999: 47579.136 us/op
                 extractOperationOutOfLoop·p1.00:   47579.136 us/op

Iteration  10: 46895.602 ±(99.9%) 38.522 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46858.240 us/op
                 extractOperationOutOfLoop·p0.90:   47087.616 us/op
                 extractOperationOutOfLoop·p0.95:   47251.456 us/op
                 extractOperationOutOfLoop·p0.99:   47448.064 us/op
                 extractOperationOutOfLoop·p0.999:  47710.208 us/op
                 extractOperationOutOfLoop·p0.9999: 47710.208 us/op
                 extractOperationOutOfLoop·p1.00:   47710.208 us/op

Iteration  11: 46899.889 ±(99.9%) 41.902 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46858.240 us/op
                 extractOperationOutOfLoop·p0.90:   47120.384 us/op
                 extractOperationOutOfLoop·p0.95:   47251.456 us/op
                 extractOperationOutOfLoop·p0.99:   47625.011 us/op
                 extractOperationOutOfLoop·p0.999:  47906.816 us/op
                 extractOperationOutOfLoop·p0.9999: 47906.816 us/op
                 extractOperationOutOfLoop·p1.00:   47906.816 us/op

Iteration  12: 46924.391 ±(99.9%) 39.404 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46923.776 us/op
                 extractOperationOutOfLoop·p0.90:   47185.920 us/op
                 extractOperationOutOfLoop·p0.95:   47251.456 us/op
                 extractOperationOutOfLoop·p0.99:   47504.425 us/op
                 extractOperationOutOfLoop·p0.999:  47710.208 us/op
                 extractOperationOutOfLoop·p0.9999: 47710.208 us/op
                 extractOperationOutOfLoop·p1.00:   47710.208 us/op

Iteration  13: 46906.933 ±(99.9%) 65.367 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46858.240 us/op
                 extractOperationOutOfLoop·p0.90:   47120.384 us/op
                 extractOperationOutOfLoop·p0.95:   47251.456 us/op
                 extractOperationOutOfLoop·p0.99:   47700.378 us/op
                 extractOperationOutOfLoop·p0.999:  50266.112 us/op
                 extractOperationOutOfLoop·p0.9999: 50266.112 us/op
                 extractOperationOutOfLoop·p1.00:   50266.112 us/op

Iteration  14: 46872.633 ±(99.9%) 32.271 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46858.240 us/op
                 extractOperationOutOfLoop·p0.90:   47054.848 us/op
                 extractOperationOutOfLoop·p0.95:   47185.920 us/op
                 extractOperationOutOfLoop·p0.99:   47316.992 us/op
                 extractOperationOutOfLoop·p0.999:  47448.064 us/op
                 extractOperationOutOfLoop·p0.9999: 47448.064 us/op
                 extractOperationOutOfLoop·p1.00:   47448.064 us/op

Iteration  15: 46908.158 ±(99.9%) 38.226 us/op
                 extractOperationOutOfLoop·p0.00:   46661.632 us/op
                 extractOperationOutOfLoop·p0.50:   46858.240 us/op
                 extractOperationOutOfLoop·p0.90:   47120.384 us/op
                 extractOperationOutOfLoop·p0.95:   47316.992 us/op
                 extractOperationOutOfLoop·p0.99:   47513.600 us/op
                 extractOperationOutOfLoop·p0.999:  47644.672 us/op
                 extractOperationOutOfLoop·p0.9999: 47644.672 us/op
                 extractOperationOutOfLoop·p1.00:   47644.672 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  N = 3204
  mean =  46909.785 ±(99.9%) 13.192 us/op

  Histogram, us/op:
    [46000.000, 46500.000) = 0 
    [46500.000, 47000.000) = 2666 
    [47000.000, 47500.000) = 481 
    [47500.000, 48000.000) = 49 
    [48000.000, 48500.000) = 1 
    [48500.000, 49000.000) = 0 
    [49000.000, 49500.000) = 4 
    [49500.000, 50000.000) = 1 
    [50000.000, 50500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  46596.096 us/op
     p(50.0000) =  46858.240 us/op
     p(90.0000) =  47120.384 us/op
     p(95.0000) =  47316.992 us/op
     p(99.0000) =  47641.395 us/op
     p(99.9000) =  49740.186 us/op
     p(99.9900) =  50987.008 us/op
     p(99.9990) =  50987.008 us/op
     p(99.9999) =  50987.008 us/op
    p(100.0000) =  50987.008 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 91.30% complete, ETA 00:44:21
# Fork: 1 of 1
# Warmup Iteration   1: 1723159.893 ±(99.9%) 62642.775 us/op
# Warmup Iteration   2: 1710227.456 ±(99.9%) 4920.235 us/op
# Warmup Iteration   3: 1709877.931 ±(99.9%) 3036.835 us/op
# Warmup Iteration   4: 1711625.557 ±(99.9%) 4426.910 us/op
# Warmup Iteration   5: 1715470.336 ±(99.9%) 15335.265 us/op
Iteration   1: 1713023.659 ±(99.9%) 10129.108 us/op
                 reduceLoops·p0.00:   1709178.880 us/op
                 reduceLoops·p0.50:   1712324.608 us/op
                 reduceLoops·p0.90:   1719664.640 us/op
                 reduceLoops·p0.95:   1719664.640 us/op
                 reduceLoops·p0.99:   1719664.640 us/op
                 reduceLoops·p0.999:  1719664.640 us/op
                 reduceLoops·p0.9999: 1719664.640 us/op
                 reduceLoops·p1.00:   1719664.640 us/op

Iteration   2: 1713023.659 ±(99.9%) 6874.928 us/op
                 reduceLoops·p0.00:   1709178.880 us/op
                 reduceLoops·p0.50:   1713373.184 us/op
                 reduceLoops·p0.90:   1715470.336 us/op
                 reduceLoops·p0.95:   1715470.336 us/op
                 reduceLoops·p0.99:   1715470.336 us/op
                 reduceLoops·p0.999:  1715470.336 us/op
                 reduceLoops·p0.9999: 1715470.336 us/op
                 reduceLoops·p1.00:   1715470.336 us/op

Iteration   3: 1713023.659 ±(99.9%) 4426.910 us/op
                 reduceLoops·p0.00:   1711276.032 us/op
                 reduceLoops·p0.50:   1713373.184 us/op
                 reduceLoops·p0.90:   1715470.336 us/op
                 reduceLoops·p0.95:   1715470.336 us/op
                 reduceLoops·p0.99:   1715470.336 us/op
                 reduceLoops·p0.999:  1715470.336 us/op
                 reduceLoops·p0.9999: 1715470.336 us/op
                 reduceLoops·p1.00:   1715470.336 us/op

Iteration   4: 1710926.507 ±(99.9%) 4426.910 us/op
                 reduceLoops·p0.00:   1709178.880 us/op
                 reduceLoops·p0.50:   1711276.032 us/op
                 reduceLoops·p0.90:   1713373.184 us/op
                 reduceLoops·p0.95:   1713373.184 us/op
                 reduceLoops·p0.99:   1713373.184 us/op
                 reduceLoops·p0.999:  1713373.184 us/op
                 reduceLoops·p0.9999: 1713373.184 us/op
                 reduceLoops·p1.00:   1713373.184 us/op

Iteration   5: 1711975.083 ±(99.9%) 4801.658 us/op
                 reduceLoops·p0.00:   1709178.880 us/op
                 reduceLoops·p0.50:   1712324.608 us/op
                 reduceLoops·p0.90:   1713373.184 us/op
                 reduceLoops·p0.95:   1713373.184 us/op
                 reduceLoops·p0.99:   1713373.184 us/op
                 reduceLoops·p0.999:  1713373.184 us/op
                 reduceLoops·p0.9999: 1713373.184 us/op
                 reduceLoops·p1.00:   1713373.184 us/op

Iteration   6: 1711625.557 ±(99.9%) 2400.829 us/op
                 reduceLoops·p0.00:   1711276.032 us/op
                 reduceLoops·p0.50:   1711276.032 us/op
                 reduceLoops·p0.90:   1713373.184 us/op
                 reduceLoops·p0.95:   1713373.184 us/op
                 reduceLoops·p0.99:   1713373.184 us/op
                 reduceLoops·p0.999:  1713373.184 us/op
                 reduceLoops·p0.9999: 1713373.184 us/op
                 reduceLoops·p1.00:   1713373.184 us/op

Iteration   7: 1712324.608 ±(99.9%) 6167.841 us/op
                 reduceLoops·p0.00:   1709178.880 us/op
                 reduceLoops·p0.50:   1712324.608 us/op
                 reduceLoops·p0.90:   1715470.336 us/op
                 reduceLoops·p0.95:   1715470.336 us/op
                 reduceLoops·p0.99:   1715470.336 us/op
                 reduceLoops·p0.999:  1715470.336 us/op
                 reduceLoops·p0.9999: 1715470.336 us/op
                 reduceLoops·p1.00:   1715470.336 us/op

Iteration   8: 1711975.083 ±(99.9%) 10949.465 us/op
                 reduceLoops·p0.00:   1709178.880 us/op
                 reduceLoops·p0.50:   1711276.032 us/op
                 reduceLoops·p0.90:   1719664.640 us/op
                 reduceLoops·p0.95:   1719664.640 us/op
                 reduceLoops·p0.99:   1719664.640 us/op
                 reduceLoops·p0.999:  1719664.640 us/op
                 reduceLoops·p0.9999: 1719664.640 us/op
                 reduceLoops·p1.00:   1719664.640 us/op

Iteration   9: 1714771.285 ±(99.9%) 12147.340 us/op
                 reduceLoops·p0.00:   1709178.880 us/op
                 reduceLoops·p0.50:   1714421.760 us/op
                 reduceLoops·p0.90:   1719664.640 us/op
                 reduceLoops·p0.95:   1719664.640 us/op
                 reduceLoops·p0.99:   1719664.640 us/op
                 reduceLoops·p0.999:  1719664.640 us/op
                 reduceLoops·p0.9999: 1719664.640 us/op
                 reduceLoops·p1.00:   1719664.640 us/op

Iteration  10: 1711276.032 ±(99.9%) 7438.696 us/op
                 reduceLoops·p0.00:   1709178.880 us/op
                 reduceLoops·p0.50:   1710227.456 us/op
                 reduceLoops·p0.90:   1715470.336 us/op
                 reduceLoops·p0.95:   1715470.336 us/op
                 reduceLoops·p0.99:   1715470.336 us/op
                 reduceLoops·p0.999:  1715470.336 us/op
                 reduceLoops·p0.9999: 1715470.336 us/op
                 reduceLoops·p1.00:   1715470.336 us/op

Iteration  11: 1710926.507 ±(99.9%) 4426.910 us/op
                 reduceLoops·p0.00:   1709178.880 us/op
                 reduceLoops·p0.50:   1711276.032 us/op
                 reduceLoops·p0.90:   1713373.184 us/op
                 reduceLoops·p0.95:   1713373.184 us/op
                 reduceLoops·p0.99:   1713373.184 us/op
                 reduceLoops·p0.999:  1713373.184 us/op
                 reduceLoops·p0.9999: 1713373.184 us/op
                 reduceLoops·p1.00:   1713373.184 us/op

Iteration  12: 1711625.557 ±(99.9%) 5781.962 us/op
                 reduceLoops·p0.00:   1709178.880 us/op
                 reduceLoops·p0.50:   1712324.608 us/op
                 reduceLoops·p0.90:   1713373.184 us/op
                 reduceLoops·p0.95:   1713373.184 us/op
                 reduceLoops·p0.99:   1713373.184 us/op
                 reduceLoops·p0.999:  1713373.184 us/op
                 reduceLoops·p0.9999: 1713373.184 us/op
                 reduceLoops·p1.00:   1713373.184 us/op

Iteration  13: 1712674.133 ±(99.9%) 6073.670 us/op
                 reduceLoops·p0.00:   1709178.880 us/op
                 reduceLoops·p0.50:   1713373.184 us/op
                 reduceLoops·p0.90:   1715470.336 us/op
                 reduceLoops·p0.95:   1715470.336 us/op
                 reduceLoops·p0.99:   1715470.336 us/op
                 reduceLoops·p0.999:  1715470.336 us/op
                 reduceLoops·p0.9999: 1715470.336 us/op
                 reduceLoops·p1.00:   1715470.336 us/op

Iteration  14: 1711276.032 ±(99.9%) 3719.348 us/op
                 reduceLoops·p0.00:   1709178.880 us/op
                 reduceLoops·p0.50:   1711276.032 us/op
                 reduceLoops·p0.90:   1713373.184 us/op
                 reduceLoops·p0.95:   1713373.184 us/op
                 reduceLoops·p0.99:   1713373.184 us/op
                 reduceLoops·p0.999:  1713373.184 us/op
                 reduceLoops·p0.9999: 1713373.184 us/op
                 reduceLoops·p1.00:   1713373.184 us/op

Iteration  15: 1710576.981 ±(99.9%) 3036.835 us/op
                 reduceLoops·p0.00:   1709178.880 us/op
                 reduceLoops·p0.50:   1711276.032 us/op
                 reduceLoops·p0.90:   1711276.032 us/op
                 reduceLoops·p0.95:   1711276.032 us/op
                 reduceLoops·p0.99:   1711276.032 us/op
                 reduceLoops·p0.999:  1711276.032 us/op
                 reduceLoops·p0.9999: 1711276.032 us/op
                 reduceLoops·p1.00:   1711276.032 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  N = 90
  mean = 1712068.289 ±(99.9%) 884.976 us/op

  Histogram, us/op:
    [1700000.000, 1701250.000) = 0 
    [1701250.000, 1702500.000) = 0 
    [1702500.000, 1703750.000) = 0 
    [1703750.000, 1705000.000) = 0 
    [1705000.000, 1706250.000) = 0 
    [1706250.000, 1707500.000) = 0 
    [1707500.000, 1708750.000) = 0 
    [1708750.000, 1710000.000) = 20 
    [1710000.000, 1711250.000) = 0 
    [1711250.000, 1712500.000) = 35 
    [1712500.000, 1713750.000) = 24 
    [1713750.000, 1715000.000) = 0 
    [1715000.000, 1716250.000) = 7 
    [1716250.000, 1717500.000) = 0 
    [1717500.000, 1718750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1709178.880 us/op
     p(50.0000) = 1711276.032 us/op
     p(90.0000) = 1715470.336 us/op
     p(95.0000) = 1717357.773 us/op
     p(99.0000) = 1719664.640 us/op
     p(99.9000) = 1719664.640 us/op
     p(99.9900) = 1719664.640 us/op
     p(99.9990) = 1719664.640 us/op
     p(99.9999) = 1719664.640 us/op
    p(100.0000) = 1719664.640 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 92.03% complete, ETA 00:40:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.573 ±(99.9%) 0.009 us/op
# Warmup Iteration   2: 0.568 ±(99.9%) 0.007 us/op
# Warmup Iteration   3: 0.570 ±(99.9%) 0.007 us/op
# Warmup Iteration   4: 0.575 ±(99.9%) 0.008 us/op
# Warmup Iteration   5: 0.571 ±(99.9%) 0.006 us/op
Iteration   1: 0.581 ±(99.9%) 0.007 us/op
                 reduceSynchronizedBlocks·p0.00:   0.487 us/op
                 reduceSynchronizedBlocks·p0.50:   0.547 us/op
                 reduceSynchronizedBlocks·p0.90:   0.574 us/op
                 reduceSynchronizedBlocks·p0.95:   0.589 us/op
                 reduceSynchronizedBlocks·p0.99:   0.873 us/op
                 reduceSynchronizedBlocks·p0.999:  5.751 us/op
                 reduceSynchronizedBlocks·p0.9999: 22.726 us/op
                 reduceSynchronizedBlocks·p1.00:   211.456 us/op

Iteration   2: 0.612 ±(99.9%) 0.008 us/op
                 reduceSynchronizedBlocks·p0.00:   0.484 us/op
                 reduceSynchronizedBlocks·p0.50:   0.549 us/op
                 reduceSynchronizedBlocks·p0.90:   0.833 us/op
                 reduceSynchronizedBlocks·p0.95:   0.860 us/op
                 reduceSynchronizedBlocks·p0.99:   0.982 us/op
                 reduceSynchronizedBlocks·p0.999:  6.994 us/op
                 reduceSynchronizedBlocks·p0.9999: 22.667 us/op
                 reduceSynchronizedBlocks·p1.00:   264.704 us/op

Iteration   3: 0.568 ±(99.9%) 0.005 us/op
                 reduceSynchronizedBlocks·p0.00:   0.489 us/op
                 reduceSynchronizedBlocks·p0.50:   0.548 us/op
                 reduceSynchronizedBlocks·p0.90:   0.572 us/op
                 reduceSynchronizedBlocks·p0.95:   0.581 us/op
                 reduceSynchronizedBlocks·p0.99:   0.620 us/op
                 reduceSynchronizedBlocks·p0.999:  5.294 us/op
                 reduceSynchronizedBlocks·p0.9999: 16.910 us/op
                 reduceSynchronizedBlocks·p1.00:   237.568 us/op

Iteration   4: 0.574 ±(99.9%) 0.007 us/op
                 reduceSynchronizedBlocks·p0.00:   0.488 us/op
                 reduceSynchronizedBlocks·p0.50:   0.546 us/op
                 reduceSynchronizedBlocks·p0.90:   0.572 us/op
                 reduceSynchronizedBlocks·p0.95:   0.581 us/op
                 reduceSynchronizedBlocks·p0.99:   0.620 us/op
                 reduceSynchronizedBlocks·p0.999:  6.693 us/op
                 reduceSynchronizedBlocks·p0.9999: 23.375 us/op
                 reduceSynchronizedBlocks·p1.00:   224.512 us/op

Iteration   5: 0.572 ±(99.9%) 0.007 us/op
                 reduceSynchronizedBlocks·p0.00:   0.487 us/op
                 reduceSynchronizedBlocks·p0.50:   0.548 us/op
                 reduceSynchronizedBlocks·p0.90:   0.573 us/op
                 reduceSynchronizedBlocks·p0.95:   0.582 us/op
                 reduceSynchronizedBlocks·p0.99:   0.614 us/op
                 reduceSynchronizedBlocks·p0.999:  5.138 us/op
                 reduceSynchronizedBlocks·p0.9999: 19.083 us/op
                 reduceSynchronizedBlocks·p1.00:   191.744 us/op

Iteration   6: 0.573 ±(99.9%) 0.007 us/op
                 reduceSynchronizedBlocks·p0.00:   0.492 us/op
                 reduceSynchronizedBlocks·p0.50:   0.549 us/op
                 reduceSynchronizedBlocks·p0.90:   0.574 us/op
                 reduceSynchronizedBlocks·p0.95:   0.583 us/op
                 reduceSynchronizedBlocks·p0.99:   0.613 us/op
                 reduceSynchronizedBlocks·p0.999:  5.530 us/op
                 reduceSynchronizedBlocks·p0.9999: 20.469 us/op
                 reduceSynchronizedBlocks·p1.00:   248.576 us/op

Iteration   7: 0.577 ±(99.9%) 0.009 us/op
                 reduceSynchronizedBlocks·p0.00:   0.491 us/op
                 reduceSynchronizedBlocks·p0.50:   0.549 us/op
                 reduceSynchronizedBlocks·p0.90:   0.574 us/op
                 reduceSynchronizedBlocks·p0.95:   0.582 us/op
                 reduceSynchronizedBlocks·p0.99:   0.610 us/op
                 reduceSynchronizedBlocks·p0.999:  5.916 us/op
                 reduceSynchronizedBlocks·p0.9999: 24.549 us/op
                 reduceSynchronizedBlocks·p1.00:   504.320 us/op

Iteration   8: 0.571 ±(99.9%) 0.006 us/op
                 reduceSynchronizedBlocks·p0.00:   0.491 us/op
                 reduceSynchronizedBlocks·p0.50:   0.548 us/op
                 reduceSynchronizedBlocks·p0.90:   0.573 us/op
                 reduceSynchronizedBlocks·p0.95:   0.582 us/op
                 reduceSynchronizedBlocks·p0.99:   0.612 us/op
                 reduceSynchronizedBlocks·p0.999:  5.228 us/op
                 reduceSynchronizedBlocks·p0.9999: 17.733 us/op
                 reduceSynchronizedBlocks·p1.00:   189.696 us/op

Iteration   9: 0.574 ±(99.9%) 0.006 us/op
                 reduceSynchronizedBlocks·p0.00:   0.489 us/op
                 reduceSynchronizedBlocks·p0.50:   0.548 us/op
                 reduceSynchronizedBlocks·p0.90:   0.572 us/op
                 reduceSynchronizedBlocks·p0.95:   0.581 us/op
                 reduceSynchronizedBlocks·p0.99:   0.615 us/op
                 reduceSynchronizedBlocks·p0.999:  5.999 us/op
                 reduceSynchronizedBlocks·p0.9999: 21.315 us/op
                 reduceSynchronizedBlocks·p1.00:   219.136 us/op

Iteration  10: 0.570 ±(99.9%) 0.006 us/op
                 reduceSynchronizedBlocks·p0.00:   0.492 us/op
                 reduceSynchronizedBlocks·p0.50:   0.547 us/op
                 reduceSynchronizedBlocks·p0.90:   0.572 us/op
                 reduceSynchronizedBlocks·p0.95:   0.580 us/op
                 reduceSynchronizedBlocks·p0.99:   0.610 us/op
                 reduceSynchronizedBlocks·p0.999:  5.220 us/op
                 reduceSynchronizedBlocks·p0.9999: 19.087 us/op
                 reduceSynchronizedBlocks·p1.00:   225.536 us/op

Iteration  11: 0.571 ±(99.9%) 0.007 us/op
                 reduceSynchronizedBlocks·p0.00:   0.492 us/op
                 reduceSynchronizedBlocks·p0.50:   0.546 us/op
                 reduceSynchronizedBlocks·p0.90:   0.569 us/op
                 reduceSynchronizedBlocks·p0.95:   0.578 us/op
                 reduceSynchronizedBlocks·p0.99:   0.609 us/op
                 reduceSynchronizedBlocks·p0.999:  5.912 us/op
                 reduceSynchronizedBlocks·p0.9999: 18.816 us/op
                 reduceSynchronizedBlocks·p1.00:   220.672 us/op

Iteration  12: 0.618 ±(99.9%) 0.008 us/op
                 reduceSynchronizedBlocks·p0.00:   0.495 us/op
                 reduceSynchronizedBlocks·p0.50:   0.551 us/op
                 reduceSynchronizedBlocks·p0.90:   0.838 us/op
                 reduceSynchronizedBlocks·p0.95:   0.870 us/op
                 reduceSynchronizedBlocks·p0.99:   1.023 us/op
                 reduceSynchronizedBlocks·p0.999:  7.551 us/op
                 reduceSynchronizedBlocks·p0.9999: 25.278 us/op
                 reduceSynchronizedBlocks·p1.00:   216.832 us/op

Iteration  13: 0.575 ±(99.9%) 0.006 us/op
                 reduceSynchronizedBlocks·p0.00:   0.493 us/op
                 reduceSynchronizedBlocks·p0.50:   0.550 us/op
                 reduceSynchronizedBlocks·p0.90:   0.575 us/op
                 reduceSynchronizedBlocks·p0.95:   0.584 us/op
                 reduceSynchronizedBlocks·p0.99:   0.621 us/op
                 reduceSynchronizedBlocks·p0.999:  5.431 us/op
                 reduceSynchronizedBlocks·p0.9999: 21.974 us/op
                 reduceSynchronizedBlocks·p1.00:   186.624 us/op

Iteration  14: 0.574 ±(99.9%) 0.005 us/op
                 reduceSynchronizedBlocks·p0.00:   0.497 us/op
                 reduceSynchronizedBlocks·p0.50:   0.549 us/op
                 reduceSynchronizedBlocks·p0.90:   0.576 us/op
                 reduceSynchronizedBlocks·p0.95:   0.585 us/op
                 reduceSynchronizedBlocks·p0.99:   0.830 us/op
                 reduceSynchronizedBlocks·p0.999:  5.374 us/op
                 reduceSynchronizedBlocks·p0.9999: 17.641 us/op
                 reduceSynchronizedBlocks·p1.00:   180.736 us/op

Iteration  15: 0.576 ±(99.9%) 0.007 us/op
                 reduceSynchronizedBlocks·p0.00:   0.497 us/op
                 reduceSynchronizedBlocks·p0.50:   0.550 us/op
                 reduceSynchronizedBlocks·p0.90:   0.576 us/op
                 reduceSynchronizedBlocks·p0.95:   0.584 us/op
                 reduceSynchronizedBlocks·p0.99:   0.630 us/op
                 reduceSynchronizedBlocks·p0.999:  5.824 us/op
                 reduceSynchronizedBlocks·p0.9999: 20.139 us/op
                 reduceSynchronizedBlocks·p1.00:   224.256 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  N = 4473160
  mean =      0.579 ±(99.9%) 0.002 us/op

  Histogram, us/op:
    [  0.000,  50.000) = 4472937 
    [ 50.000, 100.000) = 31 
    [100.000, 150.000) = 101 
    [150.000, 200.000) = 77 
    [200.000, 250.000) = 12 
    [250.000, 300.000) = 1 
    [300.000, 350.000) = 0 
    [350.000, 400.000) = 0 
    [400.000, 450.000) = 0 
    [450.000, 500.000) = 0 
    [500.000, 550.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      0.484 us/op
     p(50.0000) =      0.548 us/op
     p(90.0000) =      0.575 us/op
     p(95.0000) =      0.586 us/op
     p(99.0000) =      0.867 us/op
     p(99.9000) =      5.783 us/op
     p(99.9900) =     20.598 us/op
     p(99.9990) =    169.285 us/op
     p(99.9999) =    231.875 us/op
    p(100.0000) =    504.320 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 92.75% complete, ETA 00:36:57
# Fork: 1 of 1
# Warmup Iteration   1: 8493.802 ±(99.9%) 48.102 us/op
# Warmup Iteration   2: 9393.483 ±(99.9%) 9.290 us/op
# Warmup Iteration   3: 9417.341 ±(99.9%) 14.753 us/op
# Warmup Iteration   4: 8354.800 ±(99.9%) 7.740 us/op
# Warmup Iteration   5: 8360.463 ±(99.9%) 8.450 us/op
Iteration   1: 8349.373 ±(99.9%) 7.383 us/op
                 reduceYoungObjects·p0.00:   8142.848 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8454.144 us/op
                 reduceYoungObjects·p0.95:   8486.912 us/op
                 reduceYoungObjects·p0.99:   8699.904 us/op
                 reduceYoungObjects·p0.999:  8903.164 us/op
                 reduceYoungObjects·p0.9999: 8912.896 us/op
                 reduceYoungObjects·p1.00:   8912.896 us/op

Iteration   2: 8348.605 ±(99.9%) 7.701 us/op
                 reduceYoungObjects·p0.00:   8265.728 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8454.144 us/op
                 reduceYoungObjects·p0.95:   8486.912 us/op
                 reduceYoungObjects·p0.99:   8683.684 us/op
                 reduceYoungObjects·p0.999:  9066.955 us/op
                 reduceYoungObjects·p0.9999: 9076.736 us/op
                 reduceYoungObjects·p1.00:   9076.736 us/op

Iteration   3: 8346.362 ±(99.9%) 6.942 us/op
                 reduceYoungObjects·p0.00:   8118.272 us/op
                 reduceYoungObjects·p0.50:   8314.880 us/op
                 reduceYoungObjects·p0.90:   8454.144 us/op
                 reduceYoungObjects·p0.95:   8486.912 us/op
                 reduceYoungObjects·p0.99:   8650.752 us/op
                 reduceYoungObjects·p0.999:  8847.442 us/op
                 reduceYoungObjects·p0.9999: 8863.744 us/op
                 reduceYoungObjects·p1.00:   8863.744 us/op

Iteration   4: 8341.931 ±(99.9%) 6.907 us/op
                 reduceYoungObjects·p0.00:   8077.312 us/op
                 reduceYoungObjects·p0.50:   8314.880 us/op
                 reduceYoungObjects·p0.90:   8437.760 us/op
                 reduceYoungObjects·p0.95:   8486.912 us/op
                 reduceYoungObjects·p0.99:   8601.928 us/op
                 reduceYoungObjects·p0.999:  8893.252 us/op
                 reduceYoungObjects·p0.9999: 8896.512 us/op
                 reduceYoungObjects·p1.00:   8896.512 us/op

Iteration   5: 8363.388 ±(99.9%) 17.039 us/op
                 reduceYoungObjects·p0.00:   8085.504 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8454.144 us/op
                 reduceYoungObjects·p0.95:   8519.680 us/op
                 reduceYoungObjects·p0.99:   8766.095 us/op
                 reduceYoungObjects·p0.999:  12072.518 us/op
                 reduceYoungObjects·p0.9999: 12271.616 us/op
                 reduceYoungObjects·p1.00:   12271.616 us/op

Iteration   6: 8358.484 ±(99.9%) 8.879 us/op
                 reduceYoungObjects·p0.00:   8183.808 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8470.528 us/op
                 reduceYoungObjects·p0.95:   8536.064 us/op
                 reduceYoungObjects·p0.99:   8700.887 us/op
                 reduceYoungObjects·p0.999:  9441.640 us/op
                 reduceYoungObjects·p0.9999: 9519.104 us/op
                 reduceYoungObjects·p1.00:   9519.104 us/op

Iteration   7: 8354.444 ±(99.9%) 8.189 us/op
                 reduceYoungObjects·p0.00:   8159.232 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8454.144 us/op
                 reduceYoungObjects·p0.95:   8519.680 us/op
                 reduceYoungObjects·p0.99:   8733.000 us/op
                 reduceYoungObjects·p0.999:  8988.492 us/op
                 reduceYoungObjects·p0.9999: 9011.200 us/op
                 reduceYoungObjects·p1.00:   9011.200 us/op

Iteration   8: 8354.793 ±(99.9%) 7.146 us/op
                 reduceYoungObjects·p0.00:   8224.768 us/op
                 reduceYoungObjects·p0.50:   8331.264 us/op
                 reduceYoungObjects·p0.90:   8454.144 us/op
                 reduceYoungObjects·p0.95:   8503.296 us/op
                 reduceYoungObjects·p0.99:   8651.407 us/op
                 reduceYoungObjects·p0.999:  8939.340 us/op
                 reduceYoungObjects·p0.9999: 8962.048 us/op
                 reduceYoungObjects·p1.00:   8962.048 us/op

Iteration   9: 8346.814 ±(99.9%) 7.191 us/op
                 reduceYoungObjects·p0.00:   8085.504 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8437.760 us/op
                 reduceYoungObjects·p0.95:   8503.296 us/op
                 reduceYoungObjects·p0.99:   8699.904 us/op
                 reduceYoungObjects·p0.999:  8860.566 us/op
                 reduceYoungObjects·p0.9999: 8880.128 us/op
                 reduceYoungObjects·p1.00:   8880.128 us/op

Iteration  10: 8347.026 ±(99.9%) 7.442 us/op
                 reduceYoungObjects·p0.00:   8142.848 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8454.144 us/op
                 reduceYoungObjects·p0.95:   8503.296 us/op
                 reduceYoungObjects·p0.99:   8683.520 us/op
                 reduceYoungObjects·p0.999:  8939.225 us/op
                 reduceYoungObjects·p0.9999: 8962.048 us/op
                 reduceYoungObjects·p1.00:   8962.048 us/op

Iteration  11: 8356.909 ±(99.9%) 8.024 us/op
                 reduceYoungObjects·p0.00:   8151.040 us/op
                 reduceYoungObjects·p0.50:   8331.264 us/op
                 reduceYoungObjects·p0.90:   8470.528 us/op
                 reduceYoungObjects·p0.95:   8536.064 us/op
                 reduceYoungObjects·p0.99:   8700.396 us/op
                 reduceYoungObjects·p0.999:  8988.361 us/op
                 reduceYoungObjects·p0.9999: 8994.816 us/op
                 reduceYoungObjects·p1.00:   8994.816 us/op

Iteration  12: 8348.017 ±(99.9%) 7.074 us/op
                 reduceYoungObjects·p0.00:   8134.656 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8454.144 us/op
                 reduceYoungObjects·p0.95:   8486.912 us/op
                 reduceYoungObjects·p0.99:   8618.148 us/op
                 reduceYoungObjects·p0.999:  8981.856 us/op
                 reduceYoungObjects·p0.9999: 9011.200 us/op
                 reduceYoungObjects·p1.00:   9011.200 us/op

Iteration  13: 8349.510 ±(99.9%) 8.402 us/op
                 reduceYoungObjects·p0.00:   8110.080 us/op
                 reduceYoungObjects·p0.50:   8314.880 us/op
                 reduceYoungObjects·p0.90:   8454.144 us/op
                 reduceYoungObjects·p0.95:   8486.912 us/op
                 reduceYoungObjects·p0.99:   8781.824 us/op
                 reduceYoungObjects·p0.999:  9014.608 us/op
                 reduceYoungObjects·p0.9999: 9027.584 us/op
                 reduceYoungObjects·p1.00:   9027.584 us/op

Iteration  14: 8343.231 ±(99.9%) 7.157 us/op
                 reduceYoungObjects·p0.00:   8208.384 us/op
                 reduceYoungObjects·p0.50:   8314.880 us/op
                 reduceYoungObjects·p0.90:   8437.760 us/op
                 reduceYoungObjects·p0.95:   8486.912 us/op
                 reduceYoungObjects·p0.99:   8683.520 us/op
                 reduceYoungObjects·p0.999:  8850.702 us/op
                 reduceYoungObjects·p0.9999: 8863.744 us/op
                 reduceYoungObjects·p1.00:   8863.744 us/op

Iteration  15: 8349.735 ±(99.9%) 7.706 us/op
                 reduceYoungObjects·p0.00:   8167.424 us/op
                 reduceYoungObjects·p0.50:   8323.072 us/op
                 reduceYoungObjects·p0.90:   8454.144 us/op
                 reduceYoungObjects·p0.95:   8503.296 us/op
                 reduceYoungObjects·p0.99:   8700.232 us/op
                 reduceYoungObjects·p0.999:  8995.144 us/op
                 reduceYoungObjects·p0.9999: 9027.584 us/op
                 reduceYoungObjects·p1.00:   9027.584 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  N = 17958
  mean =   8350.571 ±(99.9%) 2.208 us/op

  Histogram, us/op:
    [ 8000.000,  8500.000) = 16993 
    [ 8500.000,  9000.000) = 952 
    [ 9000.000,  9500.000) = 8 
    [ 9500.000, 10000.000) = 1 
    [10000.000, 10500.000) = 2 
    [10500.000, 11000.000) = 0 
    [11000.000, 11500.000) = 1 
    [11500.000, 12000.000) = 0 
    [12000.000, 12500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   8077.312 us/op
     p(50.0000) =   8323.072 us/op
     p(90.0000) =   8454.144 us/op
     p(95.0000) =   8503.296 us/op
     p(99.0000) =   8699.904 us/op
     p(99.9000) =   8962.048 us/op
     p(99.9900) =  11463.134 us/op
     p(99.9990) =  12271.616 us/op
     p(99.9999) =  12271.616 us/op
    p(100.0000) =  12271.616 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 93.48% complete, ETA 00:33:15
# Fork: 1 of 1
# Warmup Iteration   1: 34764.800 ±(99.9%) 456.208 us/op
# Warmup Iteration   2: 34509.450 ±(99.9%) 131.204 us/op
# Warmup Iteration   3: 37621.852 ±(99.9%) 146.902 us/op
# Warmup Iteration   4: 34531.370 ±(99.9%) 100.308 us/op
# Warmup Iteration   5: 34382.303 ±(99.9%) 104.351 us/op
Iteration   1: 33307.093 ±(99.9%) 96.352 us/op
                 redundantCode·p0.00:   32899.072 us/op
                 redundantCode·p0.50:   33226.752 us/op
                 redundantCode·p0.90:   33554.432 us/op
                 redundantCode·p0.95:   33816.576 us/op
                 redundantCode·p0.99:   37212.652 us/op
                 redundantCode·p0.999:  37421.056 us/op
                 redundantCode·p0.9999: 37421.056 us/op
                 redundantCode·p1.00:   37421.056 us/op

Iteration   2: 37172.555 ±(99.9%) 98.223 us/op
                 redundantCode·p0.00:   36765.696 us/op
                 redundantCode·p0.50:   37093.376 us/op
                 redundantCode·p0.90:   37421.056 us/op
                 redundantCode·p0.95:   37617.664 us/op
                 redundantCode·p0.99:   40901.018 us/op
                 redundantCode·p0.999:  41484.288 us/op
                 redundantCode·p0.9999: 41484.288 us/op
                 redundantCode·p1.00:   41484.288 us/op

Iteration   3: 34012.738 ±(99.9%) 93.891 us/op
                 redundantCode·p0.00:   33619.968 us/op
                 redundantCode·p0.50:   33947.648 us/op
                 redundantCode·p0.90:   34275.328 us/op
                 redundantCode·p0.95:   34471.936 us/op
                 redundantCode·p0.99:   38148.506 us/op
                 redundantCode·p0.999:  38273.024 us/op
                 redundantCode·p0.9999: 38273.024 us/op
                 redundantCode·p1.00:   38273.024 us/op

Iteration   4: 38023.838 ±(99.9%) 103.343 us/op
                 redundantCode·p0.00:   37617.664 us/op
                 redundantCode·p0.50:   37945.344 us/op
                 redundantCode·p0.90:   38207.488 us/op
                 redundantCode·p0.95:   38338.560 us/op
                 redundantCode·p0.99:   42126.541 us/op
                 redundantCode·p0.999:  42795.008 us/op
                 redundantCode·p0.9999: 42795.008 us/op
                 redundantCode·p1.00:   42795.008 us/op

Iteration   5: 36490.397 ±(99.9%) 101.479 us/op
                 redundantCode·p0.00:   36044.800 us/op
                 redundantCode·p0.50:   36438.016 us/op
                 redundantCode·p0.90:   36765.696 us/op
                 redundantCode·p0.95:   36962.304 us/op
                 redundantCode·p0.99:   40501.248 us/op
                 redundantCode·p0.999:  40960.000 us/op
                 redundantCode·p0.9999: 40960.000 us/op
                 redundantCode·p1.00:   40960.000 us/op

Iteration   6: 34432.750 ±(99.9%) 97.698 us/op
                 redundantCode·p0.00:   33947.648 us/op
                 redundantCode·p0.50:   34340.864 us/op
                 redundantCode·p0.90:   34668.544 us/op
                 redundantCode·p0.95:   34891.366 us/op
                 redundantCode·p0.99:   38480.118 us/op
                 redundantCode·p0.999:  39059.456 us/op
                 redundantCode·p0.9999: 39059.456 us/op
                 redundantCode·p1.00:   39059.456 us/op

Iteration   7: 34605.956 ±(99.9%) 99.828 us/op
                 redundantCode·p0.00:   34144.256 us/op
                 redundantCode·p0.50:   34537.472 us/op
                 redundantCode·p0.90:   34930.688 us/op
                 redundantCode·p0.95:   35127.296 us/op
                 redundantCode·p0.99:   38679.347 us/op
                 redundantCode·p0.999:  39124.992 us/op
                 redundantCode·p0.9999: 39124.992 us/op
                 redundantCode·p1.00:   39124.992 us/op

Iteration   8: 32612.806 ±(99.9%) 93.625 us/op
                 redundantCode·p0.00:   32145.408 us/op
                 redundantCode·p0.50:   32538.624 us/op
                 redundantCode·p0.90:   32866.304 us/op
                 redundantCode·p0.95:   33128.448 us/op
                 redundantCode·p0.99:   36469.473 us/op
                 redundantCode·p0.999:  37093.376 us/op
                 redundantCode·p0.9999: 37093.376 us/op
                 redundantCode·p1.00:   37093.376 us/op

Iteration   9: 35688.799 ±(99.9%) 104.141 us/op
                 redundantCode·p0.00:   35258.368 us/op
                 redundantCode·p0.50:   35586.048 us/op
                 redundantCode·p0.90:   35979.264 us/op
                 redundantCode·p0.95:   36175.872 us/op
                 redundantCode·p0.99:   39920.599 us/op
                 redundantCode·p0.999:  40435.712 us/op
                 redundantCode·p0.9999: 40435.712 us/op
                 redundantCode·p1.00:   40435.712 us/op

Iteration  10: 33493.718 ±(99.9%) 108.112 us/op
                 redundantCode·p0.00:   32964.608 us/op
                 redundantCode·p0.50:   33390.592 us/op
                 redundantCode·p0.90:   33751.040 us/op
                 redundantCode·p0.95:   33882.112 us/op
                 redundantCode·p0.99:   37879.808 us/op
                 redundantCode·p0.999:  38076.416 us/op
                 redundantCode·p0.9999: 38076.416 us/op
                 redundantCode·p1.00:   38076.416 us/op

Iteration  11: 34383.879 ±(99.9%) 100.092 us/op
                 redundantCode·p0.00:   33947.648 us/op
                 redundantCode·p0.50:   34340.864 us/op
                 redundantCode·p0.90:   34655.437 us/op
                 redundantCode·p0.95:   34865.152 us/op
                 redundantCode·p0.99:   38802.555 us/op
                 redundantCode·p0.999:  39059.456 us/op
                 redundantCode·p0.9999: 39059.456 us/op
                 redundantCode·p1.00:   39059.456 us/op

Iteration  12: 35160.409 ±(99.9%) 106.788 us/op
                 redundantCode·p0.00:   34734.080 us/op
                 redundantCode·p0.50:   35061.760 us/op
                 redundantCode·p0.90:   35454.976 us/op
                 redundantCode·p0.95:   35586.048 us/op
                 redundantCode·p0.99:   39527.383 us/op
                 redundantCode·p0.999:  40632.320 us/op
                 redundantCode·p0.9999: 40632.320 us/op
                 redundantCode·p1.00:   40632.320 us/op

Iteration  13: 35347.062 ±(99.9%) 178.302 us/op
                 redundantCode·p0.00:   34734.080 us/op
                 redundantCode·p0.50:   35127.296 us/op
                 redundantCode·p0.90:   35559.834 us/op
                 redundantCode·p0.95:   37879.808 us/op
                 redundantCode·p0.99:   39452.672 us/op
                 redundantCode·p0.999:  39452.672 us/op
                 redundantCode·p0.9999: 39452.672 us/op
                 redundantCode·p1.00:   39452.672 us/op

Iteration  14: 37198.380 ±(99.9%) 122.595 us/op
                 redundantCode·p0.00:   36700.160 us/op
                 redundantCode·p0.50:   37093.376 us/op
                 redundantCode·p0.90:   37486.592 us/op
                 redundantCode·p0.95:   37748.736 us/op
                 redundantCode·p0.99:   41615.360 us/op
                 redundantCode·p0.999:  42139.648 us/op
                 redundantCode·p0.9999: 42139.648 us/op
                 redundantCode·p1.00:   42139.648 us/op

Iteration  15: 31656.791 ±(99.9%) 85.145 us/op
                 redundantCode·p0.00:   31227.904 us/op
                 redundantCode·p0.50:   31621.120 us/op
                 redundantCode·p0.90:   31827.558 us/op
                 redundantCode·p0.95:   31953.715 us/op
                 redundantCode·p0.99:   35317.678 us/op
                 redundantCode·p0.999:  35979.264 us/op
                 redundantCode·p0.9999: 35979.264 us/op
                 redundantCode·p1.00:   35979.264 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  N = 4311
  mean =  34818.710 ±(99.9%) 91.232 us/op

  Histogram, us/op:
    [30000.000, 31250.000) = 1 
    [31250.000, 32500.000) = 437 
    [32500.000, 33750.000) = 762 
    [33750.000, 35000.000) = 1345 
    [35000.000, 36250.000) = 697 
    [36250.000, 37500.000) = 721 
    [37500.000, 38750.000) = 313 
    [38750.000, 40000.000) = 19 
    [40000.000, 41250.000) = 8 
    [41250.000, 42500.000) = 7 
    [42500.000, 43750.000) = 1 
    [43750.000, 45000.000) = 0 
    [45000.000, 46250.000) = 0 
    [46250.000, 47500.000) = 0 
    [47500.000, 48750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  31227.904 us/op
     p(50.0000) =  34537.472 us/op
     p(90.0000) =  37289.984 us/op
     p(95.0000) =  37879.808 us/op
     p(99.0000) =  38461.768 us/op
     p(99.9000) =  41885.893 us/op
     p(99.9900) =  42795.008 us/op
     p(99.9990) =  42795.008 us/op
     p(99.9999) =  42795.008 us/op
    p(100.0000) =  42795.008 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 94.20% complete, ETA 00:29:33
# Fork: 1 of 1
# Warmup Iteration   1: 31073.121 ±(99.9%) 3814.446 us/op
# Warmup Iteration   2: 30889.099 ±(99.9%) 3853.089 us/op
# Warmup Iteration   3: 29934.353 ±(99.9%) 3354.872 us/op
# Warmup Iteration   4: 30287.264 ±(99.9%) 3501.953 us/op
# Warmup Iteration   5: 30313.875 ±(99.9%) 3543.988 us/op
Iteration   1: 30392.569 ±(99.9%) 3571.681 us/op
                 split·p0.00:   24084.480 us/op
                 split·p0.50:   24412.160 us/op
                 split·p0.90:   42860.544 us/op
                 split·p0.95:   84082.688 us/op
                 split·p0.99:   123574.682 us/op
                 split·p0.999:  124387.328 us/op
                 split·p0.9999: 124387.328 us/op
                 split·p1.00:   124387.328 us/op

Iteration   2: 30330.458 ±(99.9%) 3567.296 us/op
                 split·p0.00:   24051.712 us/op
                 split·p0.50:   24346.624 us/op
                 split·p0.90:   41333.555 us/op
                 split·p0.95:   83813.990 us/op
                 split·p0.99:   122611.302 us/op
                 split·p0.999:  125566.976 us/op
                 split·p0.9999: 125566.976 us/op
                 split·p1.00:   125566.976 us/op

Iteration   3: 30410.298 ±(99.9%) 3589.273 us/op
                 split·p0.00:   24117.248 us/op
                 split·p0.50:   24379.392 us/op
                 split·p0.90:   43057.152 us/op
                 split·p0.95:   84148.224 us/op
                 split·p0.99:   122958.643 us/op
                 split·p0.999:  124649.472 us/op
                 split·p0.9999: 124649.472 us/op
                 split·p1.00:   124649.472 us/op

Iteration   4: 30424.241 ±(99.9%) 3591.708 us/op
                 split·p0.00:   24117.248 us/op
                 split·p0.50:   24379.392 us/op
                 split·p0.90:   43450.368 us/op
                 split·p0.95:   84738.048 us/op
                 split·p0.99:   123364.966 us/op
                 split·p0.999:  124256.256 us/op
                 split·p0.9999: 124256.256 us/op
                 split·p1.00:   124256.256 us/op

Iteration   5: 30473.241 ±(99.9%) 3610.765 us/op
                 split·p0.00:   24117.248 us/op
                 split·p0.50:   24412.160 us/op
                 split·p0.90:   42919.526 us/op
                 split·p0.95:   85190.246 us/op
                 split·p0.99:   122514.309 us/op
                 split·p0.999:  124911.616 us/op
                 split·p0.9999: 124911.616 us/op
                 split·p1.00:   124911.616 us/op

Iteration   6: 30432.608 ±(99.9%) 3603.094 us/op
                 split·p0.00:   24117.248 us/op
                 split·p0.50:   24379.392 us/op
                 split·p0.90:   42991.616 us/op
                 split·p0.95:   85262.336 us/op
                 split·p0.99:   123430.502 us/op
                 split·p0.999:  125960.192 us/op
                 split·p0.9999: 125960.192 us/op
                 split·p1.00:   125960.192 us/op

Iteration   7: 30593.923 ±(99.9%) 3626.738 us/op
                 split·p0.00:   24084.480 us/op
                 split·p0.50:   24510.464 us/op
                 split·p0.90:   43941.888 us/op
                 split·p0.95:   85688.320 us/op
                 split·p0.99:   123634.975 us/op
                 split·p0.999:  125698.048 us/op
                 split·p0.9999: 125698.048 us/op
                 split·p1.00:   125698.048 us/op

Iteration   8: 30526.089 ±(99.9%) 3611.798 us/op
                 split·p0.00:   24117.248 us/op
                 split·p0.50:   24444.928 us/op
                 split·p0.90:   43365.171 us/op
                 split·p0.95:   84698.726 us/op
                 split·p0.99:   124104.212 us/op
                 split·p0.999:  125435.904 us/op
                 split·p0.9999: 125435.904 us/op
                 split·p1.00:   125435.904 us/op

Iteration   9: 30497.717 ±(99.9%) 3619.330 us/op
                 split·p0.00:   24084.480 us/op
                 split·p0.50:   24412.160 us/op
                 split·p0.90:   43338.957 us/op
                 split·p0.95:   84508.672 us/op
                 split·p0.99:   123486.863 us/op
                 split·p0.999:  125173.760 us/op
                 split·p0.9999: 125173.760 us/op
                 split·p1.00:   125173.760 us/op

Iteration  10: 30523.692 ±(99.9%) 3610.401 us/op
                 split·p0.00:   24051.712 us/op
                 split·p0.50:   24412.160 us/op
                 split·p0.90:   43594.547 us/op
                 split·p0.95:   84593.869 us/op
                 split·p0.99:   123000.586 us/op
                 split·p0.999:  125566.976 us/op
                 split·p0.9999: 125566.976 us/op
                 split·p1.00:   125566.976 us/op

Iteration  11: 30480.834 ±(99.9%) 3611.125 us/op
                 split·p0.00:   24084.480 us/op
                 split·p0.50:   24412.160 us/op
                 split·p0.90:   43116.134 us/op
                 split·p0.95:   84475.904 us/op
                 split·p0.99:   123690.025 us/op
                 split·p0.999:  124518.400 us/op
                 split·p0.9999: 124518.400 us/op
                 split·p1.00:   124518.400 us/op

Iteration  12: 30653.865 ±(99.9%) 3634.751 us/op
                 split·p0.00:   24150.016 us/op
                 split·p0.50:   24543.232 us/op
                 split·p0.90:   42945.741 us/op
                 split·p0.95:   84856.013 us/op
                 split·p0.99:   123973.140 us/op
                 split·p0.999:  127008.768 us/op
                 split·p0.9999: 127008.768 us/op
                 split·p1.00:   127008.768 us/op

Iteration  13: 30298.782 ±(99.9%) 3587.315 us/op
                 split·p0.00:   23855.104 us/op
                 split·p0.50:   24248.320 us/op
                 split·p0.90:   42080.666 us/op
                 split·p0.95:   84122.010 us/op
                 split·p0.99:   123881.390 us/op
                 split·p0.999:  125173.760 us/op
                 split·p0.9999: 125173.760 us/op
                 split·p1.00:   125173.760 us/op

Iteration  14: 30346.246 ±(99.9%) 3566.050 us/op
                 split·p0.00:   24018.944 us/op
                 split·p0.50:   24346.624 us/op
                 split·p0.90:   41759.539 us/op
                 split·p0.95:   84456.243 us/op
                 split·p0.99:   122448.773 us/op
                 split·p0.999:  123994.112 us/op
                 split·p0.9999: 123994.112 us/op
                 split·p1.00:   123994.112 us/op

Iteration  15: 30396.055 ±(99.9%) 3607.627 us/op
                 split·p0.00:   24018.944 us/op
                 split·p0.50:   24313.856 us/op
                 split·p0.90:   43122.688 us/op
                 split·p0.95:   85065.728 us/op
                 split·p0.99:   123351.859 us/op
                 split·p0.999:  124387.328 us/op
                 split·p0.9999: 124387.328 us/op
                 split·p1.00:   124387.328 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  N = 4931
  mean =  30451.845 ±(99.9%) 920.539 us/op

  Histogram, us/op:
    [     0.000,  12500.000) = 0 
    [ 12500.000,  25000.000) = 4296 
    [ 25000.000,  37500.000) = 140 
    [ 37500.000,  50000.000) = 75 
    [ 50000.000,  62500.000) = 60 
    [ 62500.000,  75000.000) = 75 
    [ 75000.000,  87500.000) = 75 
    [ 87500.000, 100000.000) = 75 
    [100000.000, 112500.000) = 72 
    [112500.000, 125000.000) = 52 
    [125000.000, 137500.000) = 11 
    [137500.000, 150000.000) = 0 
    [150000.000, 162500.000) = 0 
    [162500.000, 175000.000) = 0 
    [175000.000, 187500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  23855.104 us/op
     p(50.0000) =  24379.392 us/op
     p(90.0000) =  42860.544 us/op
     p(95.0000) =  84279.296 us/op
     p(99.0000) = 123076.608 us/op
     p(99.9000) = 125575.889 us/op
     p(99.9900) = 127008.768 us/op
     p(99.9990) = 127008.768 us/op
     p(99.9999) = 127008.768 us/op
    p(100.0000) = 127008.768 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 94.92% complete, ETA 00:25:51
# Fork: 1 of 1
# Warmup Iteration   1: 22459.924 ±(99.9%) 1418.026 us/op
# Warmup Iteration   2: 22620.373 ±(99.9%) 1500.337 us/op
# Warmup Iteration   3: 22362.804 ±(99.9%) 1405.592 us/op
# Warmup Iteration   4: 22311.058 ±(99.9%) 1405.967 us/op
# Warmup Iteration   5: 22322.322 ±(99.9%) 1357.838 us/op
Iteration   1: 22358.919 ±(99.9%) 1390.758 us/op
                 mapToPair·p0.00:   19464.192 us/op
                 mapToPair·p0.50:   19824.640 us/op
                 mapToPair·p0.90:   22223.258 us/op
                 mapToPair·p0.95:   46098.022 us/op
                 mapToPair·p0.99:   67381.494 us/op
                 mapToPair·p0.999:  71696.384 us/op
                 mapToPair·p0.9999: 71696.384 us/op
                 mapToPair·p1.00:   71696.384 us/op

Iteration   2: 22305.865 ±(99.9%) 1361.368 us/op
                 mapToPair·p0.00:   19398.656 us/op
                 mapToPair·p0.50:   19824.640 us/op
                 mapToPair·p0.90:   21446.656 us/op
                 mapToPair·p0.95:   44466.176 us/op
                 mapToPair·p0.99:   65235.845 us/op
                 mapToPair·p0.999:  70909.952 us/op
                 mapToPair·p0.9999: 70909.952 us/op
                 mapToPair·p1.00:   70909.952 us/op

Iteration   3: 22478.627 ±(99.9%) 1438.543 us/op
                 mapToPair·p0.00:   19464.192 us/op
                 mapToPair·p0.50:   19824.640 us/op
                 mapToPair·p0.90:   22662.349 us/op
                 mapToPair·p0.95:   47821.619 us/op
                 mapToPair·p0.99:   67201.925 us/op
                 mapToPair·p0.999:  73924.608 us/op
                 mapToPair·p0.9999: 73924.608 us/op
                 mapToPair·p1.00:   73924.608 us/op

Iteration   4: 22280.561 ±(99.9%) 1374.079 us/op
                 mapToPair·p0.00:   19431.424 us/op
                 mapToPair·p0.50:   19791.872 us/op
                 mapToPair·p0.90:   21725.184 us/op
                 mapToPair·p0.95:   45285.376 us/op
                 mapToPair·p0.99:   66256.896 us/op
                 mapToPair·p0.999:  72089.600 us/op
                 mapToPair·p0.9999: 72089.600 us/op
                 mapToPair·p1.00:   72089.600 us/op

Iteration   5: 22283.262 ±(99.9%) 1385.415 us/op
                 mapToPair·p0.00:   19464.192 us/op
                 mapToPair·p0.50:   19791.872 us/op
                 mapToPair·p0.90:   21463.040 us/op
                 mapToPair·p0.95:   46301.184 us/op
                 mapToPair·p0.99:   66453.504 us/op
                 mapToPair·p0.999:  72220.672 us/op
                 mapToPair·p0.9999: 72220.672 us/op
                 mapToPair·p1.00:   72220.672 us/op

Iteration   6: 22270.563 ±(99.9%) 1383.048 us/op
                 mapToPair·p0.00:   19431.424 us/op
                 mapToPair·p0.50:   19759.104 us/op
                 mapToPair·p0.90:   21331.968 us/op
                 mapToPair·p0.95:   46202.880 us/op
                 mapToPair·p0.99:   66322.432 us/op
                 mapToPair·p0.999:  72089.600 us/op
                 mapToPair·p0.9999: 72089.600 us/op
                 mapToPair·p1.00:   72089.600 us/op

Iteration   7: 22258.449 ±(99.9%) 1383.393 us/op
                 mapToPair·p0.00:   19431.424 us/op
                 mapToPair·p0.50:   19759.104 us/op
                 mapToPair·p0.90:   21266.432 us/op
                 mapToPair·p0.95:   45875.200 us/op
                 mapToPair·p0.99:   66322.432 us/op
                 mapToPair·p0.999:  72089.600 us/op
                 mapToPair·p0.9999: 72089.600 us/op
                 mapToPair·p1.00:   72089.600 us/op

Iteration   8: 22231.526 ±(99.9%) 1374.110 us/op
                 mapToPair·p0.00:   19365.888 us/op
                 mapToPair·p0.50:   19693.568 us/op
                 mapToPair·p0.90:   21908.685 us/op
                 mapToPair·p0.95:   46622.310 us/op
                 mapToPair·p0.99:   66264.760 us/op
                 mapToPair·p0.999:  71565.312 us/op
                 mapToPair·p0.9999: 71565.312 us/op
                 mapToPair·p1.00:   71565.312 us/op

Iteration   9: 22307.986 ±(99.9%) 1396.721 us/op
                 mapToPair·p0.00:   19365.888 us/op
                 mapToPair·p0.50:   19759.104 us/op
                 mapToPair·p0.90:   22141.338 us/op
                 mapToPair·p0.95:   46881.178 us/op
                 mapToPair·p0.99:   67747.840 us/op
                 mapToPair·p0.999:  72220.672 us/op
                 mapToPair·p0.9999: 72220.672 us/op
                 mapToPair·p1.00:   72220.672 us/op

Iteration  10: 22381.644 ±(99.9%) 1412.038 us/op
                 mapToPair·p0.00:   19365.888 us/op
                 mapToPair·p0.50:   19759.104 us/op
                 mapToPair·p0.90:   22577.152 us/op
                 mapToPair·p0.95:   45573.734 us/op
                 mapToPair·p0.99:   66369.618 us/op
                 mapToPair·p0.999:  71958.528 us/op
                 mapToPair·p0.9999: 71958.528 us/op
                 mapToPair·p1.00:   71958.528 us/op

Iteration  11: 22331.173 ±(99.9%) 1388.476 us/op
                 mapToPair·p0.00:   19365.888 us/op
                 mapToPair·p0.50:   19791.872 us/op
                 mapToPair·p0.90:   21662.925 us/op
                 mapToPair·p0.95:   45911.245 us/op
                 mapToPair·p0.99:   67052.503 us/op
                 mapToPair·p0.999:  71565.312 us/op
                 mapToPair·p0.9999: 71565.312 us/op
                 mapToPair·p1.00:   71565.312 us/op

Iteration  12: 22271.877 ±(99.9%) 1353.532 us/op
                 mapToPair·p0.00:   19431.424 us/op
                 mapToPair·p0.50:   19791.872 us/op
                 mapToPair·p0.90:   21954.560 us/op
                 mapToPair·p0.95:   44072.960 us/op
                 mapToPair·p0.99:   65110.016 us/op
                 mapToPair·p0.999:  71565.312 us/op
                 mapToPair·p0.9999: 71565.312 us/op
                 mapToPair·p1.00:   71565.312 us/op

Iteration  13: 22782.175 ±(99.9%) 1454.805 us/op
                 mapToPair·p0.00:   19595.264 us/op
                 mapToPair·p0.50:   20086.784 us/op
                 mapToPair·p0.90:   22564.045 us/op
                 mapToPair·p0.95:   48463.872 us/op
                 mapToPair·p0.99:   68436.623 us/op
                 mapToPair·p0.999:  72744.960 us/op
                 mapToPair·p0.9999: 72744.960 us/op
                 mapToPair·p1.00:   72744.960 us/op

Iteration  14: 22477.228 ±(99.9%) 1397.714 us/op
                 mapToPair·p0.00:   19529.728 us/op
                 mapToPair·p0.50:   19955.712 us/op
                 mapToPair·p0.90:   21607.219 us/op
                 mapToPair·p0.95:   46478.131 us/op
                 mapToPair·p0.99:   66676.326 us/op
                 mapToPair·p0.999:  72613.888 us/op
                 mapToPair·p0.9999: 72613.888 us/op
                 mapToPair·p1.00:   72613.888 us/op

Iteration  15: 22452.192 ±(99.9%) 1395.465 us/op
                 mapToPair·p0.00:   19496.960 us/op
                 mapToPair·p0.50:   19955.712 us/op
                 mapToPair·p0.90:   21541.683 us/op
                 mapToPair·p0.95:   46432.256 us/op
                 mapToPair·p0.99:   66546.565 us/op
                 mapToPair·p0.999:  73138.176 us/op
                 mapToPair·p0.9999: 73138.176 us/op
                 mapToPair·p1.00:   73138.176 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  N = 6709
  mean =  22364.035 ±(99.9%) 357.023 us/op

  Histogram, us/op:
    [10000.000, 15000.000) = 0 
    [15000.000, 20000.000) = 4786 
    [20000.000, 25000.000) = 1315 
    [25000.000, 30000.000) = 105 
    [30000.000, 35000.000) = 94 
    [35000.000, 40000.000) = 3 
    [40000.000, 45000.000) = 66 
    [45000.000, 50000.000) = 63 
    [50000.000, 55000.000) = 73 
    [55000.000, 60000.000) = 71 
    [60000.000, 65000.000) = 58 
    [65000.000, 70000.000) = 47 
    [70000.000, 75000.000) = 28 

  Percentiles, us/op:
      p(0.0000) =  19365.888 us/op
     p(50.0000) =  19824.640 us/op
     p(90.0000) =  21725.184 us/op
     p(95.0000) =  45547.520 us/op
     p(99.0000) =  66250.342 us/op
     p(99.9000) =  72296.694 us/op
     p(99.9900) =  73924.608 us/op
     p(99.9990) =  73924.608 us/op
     p(99.9999) =  73924.608 us/op
    p(100.0000) =  73924.608 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 95.65% complete, ETA 00:22:09
# Fork: 1 of 1
# Warmup Iteration   1: 13731.165 ±(99.9%) 141.791 us/op
# Warmup Iteration   2: 13652.505 ±(99.9%) 66.182 us/op
# Warmup Iteration   3: 13669.366 ±(99.9%) 80.775 us/op
# Warmup Iteration   4: 13664.592 ±(99.9%) 75.967 us/op
# Warmup Iteration   5: 13660.406 ±(99.9%) 78.047 us/op
Iteration   1: 13651.140 ±(99.9%) 77.723 us/op
                 plusOne·p0.00:   13287.424 us/op
                 plusOne·p0.50:   13533.184 us/op
                 plusOne·p0.90:   13778.944 us/op
                 plusOne·p0.95:   13866.598 us/op
                 plusOne·p0.99:   17695.048 us/op
                 plusOne·p0.999:  17858.560 us/op
                 plusOne·p0.9999: 17858.560 us/op
                 plusOne·p1.00:   17858.560 us/op

Iteration   2: 13625.394 ±(99.9%) 75.035 us/op
                 plusOne·p0.00:   13238.272 us/op
                 plusOne·p0.50:   13500.416 us/op
                 plusOne·p0.90:   13721.600 us/op
                 plusOne·p0.95:   13864.960 us/op
                 plusOne·p0.99:   17465.344 us/op
                 plusOne·p0.999:  17694.720 us/op
                 plusOne·p0.9999: 17694.720 us/op
                 plusOne·p1.00:   17694.720 us/op

Iteration   3: 13596.313 ±(99.9%) 76.478 us/op
                 plusOne·p0.00:   13205.504 us/op
                 plusOne·p0.50:   13467.648 us/op
                 plusOne·p0.90:   13729.792 us/op
                 plusOne·p0.95:   13860.864 us/op
                 plusOne·p0.99:   17432.576 us/op
                 plusOne·p0.999:  17825.792 us/op
                 plusOne·p0.9999: 17825.792 us/op
                 plusOne·p1.00:   17825.792 us/op

Iteration   4: 13638.797 ±(99.9%) 77.354 us/op
                 plusOne·p0.00:   13205.504 us/op
                 plusOne·p0.50:   13516.800 us/op
                 plusOne·p0.90:   13795.328 us/op
                 plusOne·p0.95:   14029.619 us/op
                 plusOne·p0.99:   17585.275 us/op
                 plusOne·p0.999:  17989.632 us/op
                 plusOne·p0.9999: 17989.632 us/op
                 plusOne·p1.00:   17989.632 us/op

Iteration   5: 13648.654 ±(99.9%) 76.982 us/op
                 plusOne·p0.00:   13254.656 us/op
                 plusOne·p0.50:   13533.184 us/op
                 plusOne·p0.90:   13795.328 us/op
                 plusOne·p0.95:   13959.168 us/op
                 plusOne·p0.99:   17585.275 us/op
                 plusOne·p0.999:  17891.328 us/op
                 plusOne·p0.9999: 17891.328 us/op
                 plusOne·p1.00:   17891.328 us/op

Iteration   6: 13590.305 ±(99.9%) 77.381 us/op
                 plusOne·p0.00:   13221.888 us/op
                 plusOne·p0.50:   13467.648 us/op
                 plusOne·p0.90:   13697.024 us/op
                 plusOne·p0.95:   13893.632 us/op
                 plusOne·p0.99:   17584.292 us/op
                 plusOne·p0.999:  17956.864 us/op
                 plusOne·p0.9999: 17956.864 us/op
                 plusOne·p1.00:   17956.864 us/op

Iteration   7: 13588.636 ±(99.9%) 76.612 us/op
                 plusOne·p0.00:   13221.888 us/op
                 plusOne·p0.50:   13467.648 us/op
                 plusOne·p0.90:   13746.176 us/op
                 plusOne·p0.95:   13945.242 us/op
                 plusOne·p0.99:   17498.112 us/op
                 plusOne·p0.999:  17891.328 us/op
                 plusOne·p0.9999: 17891.328 us/op
                 plusOne·p1.00:   17891.328 us/op

Iteration   8: 13599.478 ±(99.9%) 75.327 us/op
                 plusOne·p0.00:   13172.736 us/op
                 plusOne·p0.50:   13484.032 us/op
                 plusOne·p0.90:   13736.346 us/op
                 plusOne·p0.95:   13864.141 us/op
                 plusOne·p0.99:   17432.576 us/op
                 plusOne·p0.999:  17825.792 us/op
                 plusOne·p0.9999: 17825.792 us/op
                 plusOne·p1.00:   17825.792 us/op

Iteration   9: 13589.170 ±(99.9%) 74.729 us/op
                 plusOne·p0.00:   13189.120 us/op
                 plusOne·p0.50:   13467.648 us/op
                 plusOne·p0.90:   13729.792 us/op
                 plusOne·p0.95:   13877.248 us/op
                 plusOne·p0.99:   17399.808 us/op
                 plusOne·p0.999:  17661.952 us/op
                 plusOne·p0.9999: 17661.952 us/op
                 plusOne·p1.00:   17661.952 us/op

Iteration  10: 13596.246 ±(99.9%) 74.881 us/op
                 plusOne·p0.00:   13221.888 us/op
                 plusOne·p0.50:   13467.648 us/op
                 plusOne·p0.90:   13729.792 us/op
                 plusOne·p0.95:   13910.016 us/op
                 plusOne·p0.99:   17399.808 us/op
                 plusOne·p0.999:  17858.560 us/op
                 plusOne·p0.9999: 17858.560 us/op
                 plusOne·p1.00:   17858.560 us/op

Iteration  11: 13551.100 ±(99.9%) 72.413 us/op
                 plusOne·p0.00:   13205.504 us/op
                 plusOne·p0.50:   13434.880 us/op
                 plusOne·p0.90:   13664.256 us/op
                 plusOne·p0.95:   13813.350 us/op
                 plusOne·p0.99:   17288.724 us/op
                 plusOne·p0.999:  17694.720 us/op
                 plusOne·p0.9999: 17694.720 us/op
                 plusOne·p1.00:   17694.720 us/op

Iteration  12: 13565.707 ±(99.9%) 81.511 us/op
                 plusOne·p0.00:   13172.736 us/op
                 plusOne·p0.50:   13434.880 us/op
                 plusOne·p0.90:   13680.640 us/op
                 plusOne·p0.95:   13877.248 us/op
                 plusOne·p0.99:   17538.744 us/op
                 plusOne·p0.999:  18939.904 us/op
                 plusOne·p0.9999: 18939.904 us/op
                 plusOne·p1.00:   18939.904 us/op

Iteration  13: 13591.285 ±(99.9%) 76.201 us/op
                 plusOne·p0.00:   13221.888 us/op
                 plusOne·p0.50:   13484.032 us/op
                 plusOne·p0.90:   13713.408 us/op
                 plusOne·p0.95:   13828.096 us/op
                 plusOne·p0.99:   17453.220 us/op
                 plusOne·p0.999:  17891.328 us/op
                 plusOne·p0.9999: 17891.328 us/op
                 plusOne·p1.00:   17891.328 us/op

Iteration  14: 13661.055 ±(99.9%) 79.492 us/op
                 plusOne·p0.00:   13238.272 us/op
                 plusOne·p0.50:   13533.184 us/op
                 plusOne·p0.90:   13811.712 us/op
                 plusOne·p0.95:   14024.704 us/op
                 plusOne·p0.99:   17683.907 us/op
                 plusOne·p0.999:  18579.456 us/op
                 plusOne·p0.9999: 18579.456 us/op
                 plusOne·p1.00:   18579.456 us/op

Iteration  15: 13645.682 ±(99.9%) 77.245 us/op
                 plusOne·p0.00:   13287.424 us/op
                 plusOne·p0.50:   13516.800 us/op
                 plusOne·p0.90:   13795.328 us/op
                 plusOne·p0.95:   14024.704 us/op
                 plusOne·p0.99:   17563.648 us/op
                 plusOne·p0.999:  17825.792 us/op
                 plusOne·p0.9999: 17825.792 us/op
                 plusOne·p1.00:   17825.792 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  N = 11021
  mean =  13609.187 ±(99.9%) 19.730 us/op

  Histogram, us/op:
    [13000.000, 13500.000) = 5639 
    [13500.000, 14000.000) = 4939 
    [14000.000, 14500.000) = 165 
    [14500.000, 15000.000) = 3 
    [15000.000, 15500.000) = 1 
    [15500.000, 16000.000) = 1 
    [16000.000, 16500.000) = 5 
    [16500.000, 17000.000) = 27 
    [17000.000, 17500.000) = 136 
    [17500.000, 18000.000) = 101 
    [18000.000, 18500.000) = 2 

  Percentiles, us/op:
      p(0.0000) =  13172.736 us/op
     p(50.0000) =  13484.032 us/op
     p(90.0000) =  13746.176 us/op
     p(95.0000) =  13910.016 us/op
     p(99.0000) =  17498.112 us/op
     p(99.9000) =  17891.328 us/op
     p(99.9900) =  18903.066 us/op
     p(99.9990) =  18939.904 us/op
     p(99.9999) =  18939.904 us/op
    p(100.0000) =  18939.904 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 96.37% complete, ETA 00:18:28
# Fork: 1 of 1
# Warmup Iteration   1: 32988.508 ±(99.9%) 391.601 us/op
# Warmup Iteration   2: 33685.504 ±(99.9%) 130.344 us/op
# Warmup Iteration   3: 35974.549 ±(99.9%) 142.216 us/op
# Warmup Iteration   4: 32110.434 ±(99.9%) 128.672 us/op
# Warmup Iteration   5: 32319.184 ±(99.9%) 128.738 us/op
Iteration   1: 32887.970 ±(99.9%) 143.294 us/op
                 sort·p0.00:   32309.248 us/op
                 sort·p0.50:   32768.000 us/op
                 sort·p0.90:   33062.912 us/op
                 sort·p0.95:   33415.168 us/op
                 sort·p0.99:   37185.126 us/op
                 sort·p0.999:  41025.536 us/op
                 sort·p0.9999: 41025.536 us/op
                 sort·p1.00:   41025.536 us/op

Iteration   2: 32982.717 ±(99.9%) 109.426 us/op
                 sort·p0.00:   32440.320 us/op
                 sort·p0.50:   32866.304 us/op
                 sort·p0.90:   33243.136 us/op
                 sort·p0.95:   33488.896 us/op
                 sort·p0.99:   36369.203 us/op
                 sort·p0.999:  37224.448 us/op
                 sort·p0.9999: 37224.448 us/op
                 sort·p1.00:   37224.448 us/op

Iteration   3: 33822.554 ±(99.9%) 126.581 us/op
                 sort·p0.00:   33357.824 us/op
                 sort·p0.50:   33685.504 us/op
                 sort·p0.90:   34032.845 us/op
                 sort·p0.95:   34275.328 us/op
                 sort·p0.99:   37693.030 us/op
                 sort·p0.999:  38404.096 us/op
                 sort·p0.9999: 38404.096 us/op
                 sort·p1.00:   38404.096 us/op

Iteration   4: 32477.131 ±(99.9%) 132.886 us/op
                 sort·p0.00:   31948.800 us/op
                 sort·p0.50:   32342.016 us/op
                 sort·p0.90:   32669.696 us/op
                 sort·p0.95:   33197.261 us/op
                 sort·p0.99:   36700.160 us/op
                 sort·p0.999:  37224.448 us/op
                 sort·p0.9999: 37224.448 us/op
                 sort·p1.00:   37224.448 us/op

Iteration   5: 32329.649 ±(99.9%) 127.116 us/op
                 sort·p0.00:   31719.424 us/op
                 sort·p0.50:   32210.944 us/op
                 sort·p0.90:   32538.624 us/op
                 sort·p0.95:   32735.232 us/op
                 sort·p0.99:   36234.199 us/op
                 sort·p0.999:  36896.768 us/op
                 sort·p0.9999: 36896.768 us/op
                 sort·p1.00:   36896.768 us/op

Iteration   6: 32646.107 ±(99.9%) 121.531 us/op
                 sort·p0.00:   32112.640 us/op
                 sort·p0.50:   32538.624 us/op
                 sort·p0.90:   32840.090 us/op
                 sort·p0.95:   33062.912 us/op
                 sort·p0.99:   36427.530 us/op
                 sort·p0.999:  36962.304 us/op
                 sort·p0.9999: 36962.304 us/op
                 sort·p1.00:   36962.304 us/op

Iteration   7: 35801.849 ±(99.9%) 131.086 us/op
                 sort·p0.00:   35258.368 us/op
                 sort·p0.50:   35651.584 us/op
                 sort·p0.90:   36110.336 us/op
                 sort·p0.95:   36500.275 us/op
                 sort·p0.99:   39518.208 us/op
                 sort·p0.999:  40239.104 us/op
                 sort·p0.9999: 40239.104 us/op
                 sort·p1.00:   40239.104 us/op

Iteration   8: 32512.559 ±(99.9%) 129.372 us/op
                 sort·p0.00:   31850.496 us/op
                 sort·p0.50:   32342.016 us/op
                 sort·p0.90:   32833.536 us/op
                 sort·p0.95:   33095.680 us/op
                 sort·p0.99:   36372.480 us/op
                 sort·p0.999:  37421.056 us/op
                 sort·p0.9999: 37421.056 us/op
                 sort·p1.00:   37421.056 us/op

Iteration   9: 32012.661 ±(99.9%) 126.829 us/op
                 sort·p0.00:   31457.280 us/op
                 sort·p0.50:   31883.264 us/op
                 sort·p0.90:   32178.176 us/op
                 sort·p0.95:   32482.918 us/op
                 sort·p0.99:   36111.647 us/op
                 sort·p0.999:  37093.376 us/op
                 sort·p0.9999: 37093.376 us/op
                 sort·p1.00:   37093.376 us/op

Iteration  10: 32926.989 ±(99.9%) 122.799 us/op
                 sort·p0.00:   32440.320 us/op
                 sort·p0.50:   32800.768 us/op
                 sort·p0.90:   33177.600 us/op
                 sort·p0.95:   33456.128 us/op
                 sort·p0.99:   36555.981 us/op
                 sort·p0.999:  37486.592 us/op
                 sort·p0.9999: 37486.592 us/op
                 sort·p1.00:   37486.592 us/op

Iteration  11: 32359.938 ±(99.9%) 125.766 us/op
                 sort·p0.00:   31850.496 us/op
                 sort·p0.50:   32210.944 us/op
                 sort·p0.90:   32636.928 us/op
                 sort·p0.95:   32915.456 us/op
                 sort·p0.99:   36424.909 us/op
                 sort·p0.999:  36896.768 us/op
                 sort·p0.9999: 36896.768 us/op
                 sort·p1.00:   36896.768 us/op

Iteration  12: 32160.686 ±(99.9%) 136.117 us/op
                 sort·p0.00:   31588.352 us/op
                 sort·p0.50:   32014.336 us/op
                 sort·p0.90:   32505.856 us/op
                 sort·p0.95:   32990.822 us/op
                 sort·p0.99:   36144.415 us/op
                 sort·p0.999:  37093.376 us/op
                 sort·p0.9999: 37093.376 us/op
                 sort·p1.00:   37093.376 us/op

Iteration  13: 32357.923 ±(99.9%) 121.438 us/op
                 sort·p0.00:   31850.496 us/op
                 sort·p0.50:   32243.712 us/op
                 sort·p0.90:   32604.160 us/op
                 sort·p0.95:   32866.304 us/op
                 sort·p0.99:   36012.032 us/op
                 sort·p0.999:  36831.232 us/op
                 sort·p0.9999: 36831.232 us/op
                 sort·p1.00:   36831.232 us/op

Iteration  14: 32984.290 ±(99.9%) 119.308 us/op
                 sort·p0.00:   32473.088 us/op
                 sort·p0.50:   32866.304 us/op
                 sort·p0.90:   33259.520 us/op
                 sort·p0.95:   33547.878 us/op
                 sort·p0.99:   36752.589 us/op
                 sort·p0.999:  37617.664 us/op
                 sort·p0.9999: 37617.664 us/op
                 sort·p1.00:   37617.664 us/op

Iteration  15: 32436.290 ±(99.9%) 125.024 us/op
                 sort·p0.00:   31916.032 us/op
                 sort·p0.50:   32309.248 us/op
                 sort·p0.90:   32702.464 us/op
                 sort·p0.95:   32882.688 us/op
                 sort·p0.99:   36470.784 us/op
                 sort·p0.999:  36896.768 us/op
                 sort·p0.9999: 36896.768 us/op
                 sort·p1.00:   36896.768 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  N = 4575
  mean =  32823.752 ±(99.9%) 53.377 us/op

  Histogram, us/op:
    [31000.000, 32000.000) = 508 
    [32000.000, 33000.000) = 3125 
    [33000.000, 34000.000) = 494 
    [34000.000, 35000.000) = 61 
    [35000.000, 36000.000) = 282 
    [36000.000, 37000.000) = 77 
    [37000.000, 38000.000) = 16 
    [38000.000, 39000.000) = 6 
    [39000.000, 40000.000) = 4 
    [40000.000, 41000.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  31457.280 us/op
     p(50.0000) =  32538.624 us/op
     p(90.0000) =  33947.648 us/op
     p(95.0000) =  35651.584 us/op
     p(99.0000) =  36634.624 us/op
     p(99.9000) =  39404.962 us/op
     p(99.9900) =  41025.536 us/op
     p(99.9990) =  41025.536 us/op
     p(99.9999) =  41025.536 us/op
    p(100.0000) =  41025.536 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 97.10% complete, ETA 00:14:46
# Fork: 1 of 1
# Warmup Iteration   1: 1358.304 ±(99.9%) 24.948 us/op
# Warmup Iteration   2: 1288.898 ±(99.9%) 4.854 us/op
# Warmup Iteration   3: 1290.859 ±(99.9%) 4.852 us/op
# Warmup Iteration   4: 1284.173 ±(99.9%) 4.594 us/op
# Warmup Iteration   5: 1282.118 ±(99.9%) 4.518 us/op
Iteration   1: 1285.122 ±(99.9%) 4.677 us/op
                 concatenateStrings·p0.00:   1161.216 us/op
                 concatenateStrings·p0.50:   1263.616 us/op
                 concatenateStrings·p0.90:   1333.248 us/op
                 concatenateStrings·p0.95:   1374.208 us/op
                 concatenateStrings·p0.99:   2105.344 us/op
                 concatenateStrings·p0.999:  2387.968 us/op
                 concatenateStrings·p0.9999: 2437.120 us/op
                 concatenateStrings·p1.00:   2437.120 us/op

Iteration   2: 1290.195 ±(99.9%) 4.562 us/op
                 concatenateStrings·p0.00:   1163.264 us/op
                 concatenateStrings·p0.50:   1269.760 us/op
                 concatenateStrings·p0.90:   1337.344 us/op
                 concatenateStrings·p0.95:   1384.448 us/op
                 concatenateStrings·p0.99:   2088.059 us/op
                 concatenateStrings·p0.999:  2317.386 us/op
                 concatenateStrings·p0.9999: 2473.984 us/op
                 concatenateStrings·p1.00:   2473.984 us/op

Iteration   3: 1288.680 ±(99.9%) 4.662 us/op
                 concatenateStrings·p0.00:   1157.120 us/op
                 concatenateStrings·p0.50:   1267.712 us/op
                 concatenateStrings·p0.90:   1337.344 us/op
                 concatenateStrings·p0.95:   1388.544 us/op
                 concatenateStrings·p0.99:   2107.269 us/op
                 concatenateStrings·p0.999:  2334.671 us/op
                 concatenateStrings·p0.9999: 2433.024 us/op
                 concatenateStrings·p1.00:   2433.024 us/op

Iteration   4: 1279.938 ±(99.9%) 4.622 us/op
                 concatenateStrings·p0.00:   1155.072 us/op
                 concatenateStrings·p0.50:   1257.472 us/op
                 concatenateStrings·p0.90:   1329.152 us/op
                 concatenateStrings·p0.95:   1376.256 us/op
                 concatenateStrings·p0.99:   2088.817 us/op
                 concatenateStrings·p0.999:  2317.402 us/op
                 concatenateStrings·p0.9999: 2449.408 us/op
                 concatenateStrings·p1.00:   2449.408 us/op

Iteration   5: 1282.983 ±(99.9%) 4.469 us/op
                 concatenateStrings·p0.00:   1142.784 us/op
                 concatenateStrings·p0.50:   1263.616 us/op
                 concatenateStrings·p0.90:   1331.610 us/op
                 concatenateStrings·p0.95:   1374.208 us/op
                 concatenateStrings·p0.99:   2064.630 us/op
                 concatenateStrings·p0.999:  2261.860 us/op
                 concatenateStrings·p0.9999: 2424.832 us/op
                 concatenateStrings·p1.00:   2424.832 us/op

Iteration   6: 1284.795 ±(99.9%) 4.373 us/op
                 concatenateStrings·p0.00:   1155.072 us/op
                 concatenateStrings·p0.50:   1263.616 us/op
                 concatenateStrings·p0.90:   1333.248 us/op
                 concatenateStrings·p0.95:   1368.064 us/op
                 concatenateStrings·p0.99:   1971.528 us/op
                 concatenateStrings·p0.999:  2306.499 us/op
                 concatenateStrings·p0.9999: 3710.976 us/op
                 concatenateStrings·p1.00:   3710.976 us/op

Iteration   7: 1283.117 ±(99.9%) 4.627 us/op
                 concatenateStrings·p0.00:   1144.832 us/op
                 concatenateStrings·p0.50:   1261.568 us/op
                 concatenateStrings·p0.90:   1329.152 us/op
                 concatenateStrings·p0.95:   1376.256 us/op
                 concatenateStrings·p0.99:   2089.206 us/op
                 concatenateStrings·p0.999:  2332.361 us/op
                 concatenateStrings·p0.9999: 2367.488 us/op
                 concatenateStrings·p1.00:   2367.488 us/op

Iteration   8: 1273.395 ±(99.9%) 4.525 us/op
                 concatenateStrings·p0.00:   1142.784 us/op
                 concatenateStrings·p0.50:   1253.376 us/op
                 concatenateStrings·p0.90:   1320.960 us/op
                 concatenateStrings·p0.95:   1366.016 us/op
                 concatenateStrings·p0.99:   2058.363 us/op
                 concatenateStrings·p0.999:  2315.493 us/op
                 concatenateStrings·p0.9999: 2461.696 us/op
                 concatenateStrings·p1.00:   2461.696 us/op

Iteration   9: 1283.123 ±(99.9%) 4.833 us/op
                 concatenateStrings·p0.00:   1150.976 us/op
                 concatenateStrings·p0.50:   1261.568 us/op
                 concatenateStrings·p0.90:   1329.562 us/op
                 concatenateStrings·p0.95:   1374.208 us/op
                 concatenateStrings·p0.99:   2091.745 us/op
                 concatenateStrings·p0.999:  2388.836 us/op
                 concatenateStrings·p0.9999: 4341.760 us/op
                 concatenateStrings·p1.00:   4341.760 us/op

Iteration  10: 1289.352 ±(99.9%) 4.548 us/op
                 concatenateStrings·p0.00:   1146.880 us/op
                 concatenateStrings·p0.50:   1267.712 us/op
                 concatenateStrings·p0.90:   1335.296 us/op
                 concatenateStrings·p0.95:   1384.448 us/op
                 concatenateStrings·p0.99:   2078.720 us/op
                 concatenateStrings·p0.999:  2301.952 us/op
                 concatenateStrings·p0.9999: 2486.272 us/op
                 concatenateStrings·p1.00:   2486.272 us/op

Iteration  11: 1284.544 ±(99.9%) 4.511 us/op
                 concatenateStrings·p0.00:   1150.976 us/op
                 concatenateStrings·p0.50:   1263.616 us/op
                 concatenateStrings·p0.90:   1335.296 us/op
                 concatenateStrings·p0.95:   1380.352 us/op
                 concatenateStrings·p0.99:   2064.384 us/op
                 concatenateStrings·p0.999:  2311.479 us/op
                 concatenateStrings·p0.9999: 2404.352 us/op
                 concatenateStrings·p1.00:   2404.352 us/op

Iteration  12: 1281.393 ±(99.9%) 4.527 us/op
                 concatenateStrings·p0.00:   1136.640 us/op
                 concatenateStrings·p0.50:   1261.568 us/op
                 concatenateStrings·p0.90:   1329.152 us/op
                 concatenateStrings·p0.95:   1368.064 us/op
                 concatenateStrings·p0.99:   2070.569 us/op
                 concatenateStrings·p0.999:  2293.760 us/op
                 concatenateStrings·p0.9999: 2404.352 us/op
                 concatenateStrings·p1.00:   2404.352 us/op

Iteration  13: 1269.883 ±(99.9%) 4.289 us/op
                 concatenateStrings·p0.00:   1132.544 us/op
                 concatenateStrings·p0.50:   1251.328 us/op
                 concatenateStrings·p0.90:   1316.864 us/op
                 concatenateStrings·p0.95:   1349.632 us/op
                 concatenateStrings·p0.99:   2002.944 us/op
                 concatenateStrings·p0.999:  2402.939 us/op
                 concatenateStrings·p0.9999: 2625.536 us/op
                 concatenateStrings·p1.00:   2625.536 us/op

Iteration  14: 1286.599 ±(99.9%) 4.508 us/op
                 concatenateStrings·p0.00:   1153.024 us/op
                 concatenateStrings·p0.50:   1265.664 us/op
                 concatenateStrings·p0.90:   1333.248 us/op
                 concatenateStrings·p0.95:   1378.304 us/op
                 concatenateStrings·p0.99:   2045.256 us/op
                 concatenateStrings·p0.999:  2300.441 us/op
                 concatenateStrings·p0.9999: 2564.096 us/op
                 concatenateStrings·p1.00:   2564.096 us/op

Iteration  15: 1284.757 ±(99.9%) 4.571 us/op
                 concatenateStrings·p0.00:   1159.168 us/op
                 concatenateStrings·p0.50:   1263.616 us/op
                 concatenateStrings·p0.90:   1333.248 us/op
                 concatenateStrings·p0.95:   1378.304 us/op
                 concatenateStrings·p0.99:   2081.219 us/op
                 concatenateStrings·p0.999:  2331.533 us/op
                 concatenateStrings·p0.9999: 2420.736 us/op
                 concatenateStrings·p1.00:   2420.736 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 116793
  mean =   1283.169 ±(99.9%) 1.177 us/op

  Histogram, us/op:
    [1000.000, 1250.000) = 45856 
    [1250.000, 1500.000) = 68355 
    [1500.000, 1750.000) = 513 
    [1750.000, 2000.000) = 529 
    [2000.000, 2250.000) = 1293 
    [2250.000, 2500.000) = 239 
    [2500.000, 2750.000) = 6 
    [2750.000, 3000.000) = 0 
    [3000.000, 3250.000) = 0 
    [3250.000, 3500.000) = 0 
    [3500.000, 3750.000) = 1 
    [3750.000, 4000.000) = 0 
    [4000.000, 4250.000) = 0 
    [4250.000, 4500.000) = 1 
    [4500.000, 4750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   1132.544 us/op
     p(50.0000) =   1261.568 us/op
     p(90.0000) =   1331.200 us/op
     p(95.0000) =   1374.208 us/op
     p(99.0000) =   2072.576 us/op
     p(99.9000) =   2318.336 us/op
     p(99.9900) =   2465.636 us/op
     p(99.9990) =   4235.826 us/op
     p(99.9999) =   4341.760 us/op
    p(100.0000) =   4341.760 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 97.82% complete, ETA 00:11:04
# Fork: 1 of 1
# Warmup Iteration   1: 29427.158 ±(99.9%) 4215.392 us/op
# Warmup Iteration   2: 13368.862 ±(99.9%) 70.746 us/op
# Warmup Iteration   3: 13291.999 ±(99.9%) 67.808 us/op
# Warmup Iteration   4: 13351.385 ±(99.9%) 65.751 us/op
# Warmup Iteration   5: 13398.181 ±(99.9%) 70.966 us/op
Iteration   1: 13379.104 ±(99.9%) 73.263 us/op
                 concatenateStrings·p0.00:   12468.224 us/op
                 concatenateStrings·p0.50:   13254.656 us/op
                 concatenateStrings·p0.90:   14286.848 us/op
                 concatenateStrings·p0.95:   14598.144 us/op
                 concatenateStrings·p0.99:   15212.872 us/op
                 concatenateStrings·p0.999:  15925.248 us/op
                 concatenateStrings·p0.9999: 15925.248 us/op
                 concatenateStrings·p1.00:   15925.248 us/op

Iteration   2: 13339.263 ±(99.9%) 70.503 us/op
                 concatenateStrings·p0.00:   12468.224 us/op
                 concatenateStrings·p0.50:   13205.504 us/op
                 concatenateStrings·p0.90:   14057.472 us/op
                 concatenateStrings·p0.95:   14425.293 us/op
                 concatenateStrings·p0.99:   15186.657 us/op
                 concatenateStrings·p0.999:  15958.016 us/op
                 concatenateStrings·p0.9999: 15958.016 us/op
                 concatenateStrings·p1.00:   15958.016 us/op

Iteration   3: 13383.908 ±(99.9%) 70.234 us/op
                 concatenateStrings·p0.00:   12402.688 us/op
                 concatenateStrings·p0.50:   13271.040 us/op
                 concatenateStrings·p0.90:   14204.928 us/op
                 concatenateStrings·p0.95:   14581.760 us/op
                 concatenateStrings·p0.99:   15163.720 us/op
                 concatenateStrings·p0.999:  15990.784 us/op
                 concatenateStrings·p0.9999: 15990.784 us/op
                 concatenateStrings·p1.00:   15990.784 us/op

Iteration   4: 13355.585 ±(99.9%) 71.604 us/op
                 concatenateStrings·p0.00:   12419.072 us/op
                 concatenateStrings·p0.50:   13238.272 us/op
                 concatenateStrings·p0.90:   14204.928 us/op
                 concatenateStrings·p0.95:   14458.880 us/op
                 concatenateStrings·p0.99:   14950.400 us/op
                 concatenateStrings·p0.999:  17301.504 us/op
                 concatenateStrings·p0.9999: 17301.504 us/op
                 concatenateStrings·p1.00:   17301.504 us/op

Iteration   5: 13365.051 ±(99.9%) 67.628 us/op
                 concatenateStrings·p0.00:   12402.688 us/op
                 concatenateStrings·p0.50:   13238.272 us/op
                 concatenateStrings·p0.90:   14172.160 us/op
                 concatenateStrings·p0.95:   14516.224 us/op
                 concatenateStrings·p0.99:   14893.056 us/op
                 concatenateStrings·p0.999:  15368.192 us/op
                 concatenateStrings·p0.9999: 15368.192 us/op
                 concatenateStrings·p1.00:   15368.192 us/op

Iteration   6: 13335.265 ±(99.9%) 66.396 us/op
                 concatenateStrings·p0.00:   12468.224 us/op
                 concatenateStrings·p0.50:   13238.272 us/op
                 concatenateStrings·p0.90:   14090.240 us/op
                 concatenateStrings·p0.95:   14376.141 us/op
                 concatenateStrings·p0.99:   14958.592 us/op
                 concatenateStrings·p0.999:  15810.560 us/op
                 concatenateStrings·p0.9999: 15810.560 us/op
                 concatenateStrings·p1.00:   15810.560 us/op

Iteration   7: 13321.043 ±(99.9%) 66.877 us/op
                 concatenateStrings·p0.00:   12435.456 us/op
                 concatenateStrings·p0.50:   13205.504 us/op
                 concatenateStrings·p0.90:   14155.776 us/op
                 concatenateStrings·p0.95:   14352.384 us/op
                 concatenateStrings·p0.99:   14900.920 us/op
                 concatenateStrings·p0.999:  15515.648 us/op
                 concatenateStrings·p0.9999: 15515.648 us/op
                 concatenateStrings·p1.00:   15515.648 us/op

Iteration   8: 13280.157 ±(99.9%) 67.225 us/op
                 concatenateStrings·p0.00:   12353.536 us/op
                 concatenateStrings·p0.50:   13172.736 us/op
                 concatenateStrings·p0.90:   14050.918 us/op
                 concatenateStrings·p0.95:   14368.768 us/op
                 concatenateStrings·p0.99:   15079.506 us/op
                 concatenateStrings·p0.999:  15630.336 us/op
                 concatenateStrings·p0.9999: 15630.336 us/op
                 concatenateStrings·p1.00:   15630.336 us/op

Iteration   9: 13350.379 ±(99.9%) 72.307 us/op
                 concatenateStrings·p0.00:   12288.000 us/op
                 concatenateStrings·p0.50:   13205.504 us/op
                 concatenateStrings·p0.90:   14204.928 us/op
                 concatenateStrings·p0.95:   14540.800 us/op
                 concatenateStrings·p0.99:   15278.080 us/op
                 concatenateStrings·p0.999:  15630.336 us/op
                 concatenateStrings·p0.9999: 15630.336 us/op
                 concatenateStrings·p1.00:   15630.336 us/op

Iteration  10: 13378.008 ±(99.9%) 72.483 us/op
                 concatenateStrings·p0.00:   12419.072 us/op
                 concatenateStrings·p0.50:   13238.272 us/op
                 concatenateStrings·p0.90:   14224.589 us/op
                 concatenateStrings·p0.95:   14575.206 us/op
                 concatenateStrings·p0.99:   15122.432 us/op
                 concatenateStrings·p0.999:  15794.176 us/op
                 concatenateStrings·p0.9999: 15794.176 us/op
                 concatenateStrings·p1.00:   15794.176 us/op

Iteration  11: 13336.336 ±(99.9%) 69.429 us/op
                 concatenateStrings·p0.00:   12435.456 us/op
                 concatenateStrings·p0.50:   13189.120 us/op
                 concatenateStrings·p0.90:   14106.624 us/op
                 concatenateStrings·p0.95:   14499.840 us/op
                 concatenateStrings·p0.99:   15007.744 us/op
                 concatenateStrings·p0.999:  15745.024 us/op
                 concatenateStrings·p0.9999: 15745.024 us/op
                 concatenateStrings·p1.00:   15745.024 us/op

Iteration  12: 13340.426 ±(99.9%) 69.668 us/op
                 concatenateStrings·p0.00:   12419.072 us/op
                 concatenateStrings·p0.50:   13205.504 us/op
                 concatenateStrings·p0.90:   14123.008 us/op
                 concatenateStrings·p0.95:   14491.648 us/op
                 concatenateStrings·p0.99:   14966.784 us/op
                 concatenateStrings·p0.999:  16564.224 us/op
                 concatenateStrings·p0.9999: 16564.224 us/op
                 concatenateStrings·p1.00:   16564.224 us/op

Iteration  13: 13407.581 ±(99.9%) 71.656 us/op
                 concatenateStrings·p0.00:   12419.072 us/op
                 concatenateStrings·p0.50:   13254.656 us/op
                 concatenateStrings·p0.90:   14275.379 us/op
                 concatenateStrings·p0.95:   14614.528 us/op
                 concatenateStrings·p0.99:   15050.179 us/op
                 concatenateStrings·p0.999:  15532.032 us/op
                 concatenateStrings·p0.9999: 15532.032 us/op
                 concatenateStrings·p1.00:   15532.032 us/op

Iteration  14: 13372.849 ±(99.9%) 72.022 us/op
                 concatenateStrings·p0.00:   12484.608 us/op
                 concatenateStrings·p0.50:   13221.888 us/op
                 concatenateStrings·p0.90:   14206.566 us/op
                 concatenateStrings·p0.95:   14616.166 us/op
                 concatenateStrings·p0.99:   15122.760 us/op
                 concatenateStrings·p0.999:  15892.480 us/op
                 concatenateStrings·p0.9999: 15892.480 us/op
                 concatenateStrings·p1.00:   15892.480 us/op

Iteration  15: 13472.417 ±(99.9%) 74.386 us/op
                 concatenateStrings·p0.00:   12533.760 us/op
                 concatenateStrings·p0.50:   13328.384 us/op
                 concatenateStrings·p0.90:   14368.768 us/op
                 concatenateStrings·p0.95:   14729.216 us/op
                 concatenateStrings·p0.99:   15272.182 us/op
                 concatenateStrings·p0.999:  15826.944 us/op
                 concatenateStrings·p0.9999: 15826.944 us/op
                 concatenateStrings·p1.00:   15826.944 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 11226
  mean =  13361.022 ±(99.9%) 18.147 us/op

  Histogram, us/op:
    [12000.000, 12500.000) = 58 
    [12500.000, 13000.000) = 3620 
    [13000.000, 13500.000) = 3648 
    [13500.000, 14000.000) = 2318 
    [14000.000, 14500.000) = 1017 
    [14500.000, 15000.000) = 428 
    [15000.000, 15500.000) = 102 
    [15500.000, 16000.000) = 32 
    [16000.000, 16500.000) = 1 
    [16500.000, 17000.000) = 1 
    [17000.000, 17500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  12288.000 us/op
     p(50.0000) =  13238.272 us/op
     p(90.0000) =  14188.544 us/op
     p(95.0000) =  14516.224 us/op
     p(99.0000) =  15056.896 us/op
     p(99.9000) =  15794.176 us/op
     p(99.9900) =  17211.040 us/op
     p(99.9990) =  17301.504 us/op
     p(99.9999) =  17301.504 us/op
    p(100.0000) =  17301.504 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 98.55% complete, ETA 00:07:23
# Fork: 1 of 1
# Warmup Iteration   1: 713870.541 ±(99.9%) 5979.955 us/op
# Warmup Iteration   2: 714454.747 ±(99.9%) 3428.483 us/op
# Warmup Iteration   3: 711773.389 ±(99.9%) 2816.854 us/op
# Warmup Iteration   4: 711843.294 ±(99.9%) 5010.838 us/op
# Warmup Iteration   5: 710724.813 ±(99.9%) 2404.259 us/op
Iteration   1: 710724.813 ±(99.9%) 4889.961 us/op
                 concatenateStrings·p0.00:   702545.920 us/op
                 concatenateStrings·p0.50:   711983.104 us/op
                 concatenateStrings·p0.90:   716806.554 us/op
                 concatenateStrings·p0.95:   722468.864 us/op
                 concatenateStrings·p0.99:   722468.864 us/op
                 concatenateStrings·p0.999:  722468.864 us/op
                 concatenateStrings·p0.9999: 722468.864 us/op
                 concatenateStrings·p1.00:   722468.864 us/op

Iteration   2: 710934.528 ±(99.9%) 3860.044 us/op
                 concatenateStrings·p0.00:   704643.072 us/op
                 concatenateStrings·p0.50:   709885.952 us/op
                 concatenateStrings·p0.90:   716806.554 us/op
                 concatenateStrings·p0.95:   719323.136 us/op
                 concatenateStrings·p0.99:   719323.136 us/op
                 concatenateStrings·p0.999:  719323.136 us/op
                 concatenateStrings·p0.9999: 719323.136 us/op
                 concatenateStrings·p1.00:   719323.136 us/op

Iteration   3: 328457.976 ±(99.9%) 125422.048 us/op
                 concatenateStrings·p0.00:   233046.016 us/op
                 concatenateStrings·p0.50:   236978.176 us/op
                 concatenateStrings·p0.90:   712821.965 us/op
                 concatenateStrings·p0.95:   718064.845 us/op
                 concatenateStrings·p0.99:   719323.136 us/op
                 concatenateStrings·p0.999:  719323.136 us/op
                 concatenateStrings·p0.9999: 719323.136 us/op
                 concatenateStrings·p1.00:   719323.136 us/op

Iteration   4: 236179.551 ±(99.9%) 1302.048 us/op
                 concatenateStrings·p0.00:   231997.440 us/op
                 concatenateStrings·p0.50:   236191.744 us/op
                 concatenateStrings·p0.90:   239337.472 us/op
                 concatenateStrings·p0.95:   240071.475 us/op
                 concatenateStrings·p0.99:   244842.496 us/op
                 concatenateStrings·p0.999:  244842.496 us/op
                 concatenateStrings·p0.9999: 244842.496 us/op
                 concatenateStrings·p1.00:   244842.496 us/op

Iteration   5: 235082.204 ±(99.9%) 1336.301 us/op
                 concatenateStrings·p0.00:   230424.576 us/op
                 concatenateStrings·p0.50:   234881.024 us/op
                 concatenateStrings·p0.90:   238079.181 us/op
                 concatenateStrings·p0.95:   240438.477 us/op
                 concatenateStrings·p0.99:   243793.920 us/op
                 concatenateStrings·p0.999:  243793.920 us/op
                 concatenateStrings·p0.9999: 243793.920 us/op
                 concatenateStrings·p1.00:   243793.920 us/op

Iteration   6: 234984.662 ±(99.9%) 937.176 us/op
                 concatenateStrings·p0.00:   232521.728 us/op
                 concatenateStrings·p0.50:   234618.880 us/op
                 concatenateStrings·p0.90:   237397.606 us/op
                 concatenateStrings·p0.95:   239022.899 us/op
                 concatenateStrings·p0.99:   239337.472 us/op
                 concatenateStrings·p0.999:  239337.472 us/op
                 concatenateStrings·p0.9999: 239337.472 us/op
                 concatenateStrings·p1.00:   239337.472 us/op

Iteration   7: 236155.166 ±(99.9%) 1196.304 us/op
                 concatenateStrings·p0.00:   231997.440 us/op
                 concatenateStrings·p0.50:   236191.744 us/op
                 concatenateStrings·p0.90:   238970.470 us/op
                 concatenateStrings·p0.95:   240228.762 us/op
                 concatenateStrings·p0.99:   241434.624 us/op
                 concatenateStrings·p0.999:  241434.624 us/op
                 concatenateStrings·p0.9999: 241434.624 us/op
                 concatenateStrings·p1.00:   241434.624 us/op

Iteration   8: 236770.899 ±(99.9%) 1210.148 us/op
                 concatenateStrings·p0.00:   233046.016 us/op
                 concatenateStrings·p0.50:   236978.176 us/op
                 concatenateStrings·p0.90:   239914.189 us/op
                 concatenateStrings·p0.95:   240805.478 us/op
                 concatenateStrings·p0.99:   242221.056 us/op
                 concatenateStrings·p0.999:  242221.056 us/op
                 concatenateStrings·p0.9999: 242221.056 us/op
                 concatenateStrings·p1.00:   242221.056 us/op

Iteration   9: 235563.818 ±(99.9%) 1473.034 us/op
                 concatenateStrings·p0.00:   231211.008 us/op
                 concatenateStrings·p0.50:   235405.312 us/op
                 concatenateStrings·p0.90:   239127.757 us/op
                 concatenateStrings·p0.95:   239809.331 us/op
                 concatenateStrings·p0.99:   243269.632 us/op
                 concatenateStrings·p0.999:  243269.632 us/op
                 concatenateStrings·p0.9999: 243269.632 us/op
                 concatenateStrings·p1.00:   243269.632 us/op

Iteration  10: 235204.132 ±(99.9%) 945.622 us/op
                 concatenateStrings·p0.00:   231473.152 us/op
                 concatenateStrings·p0.50:   235405.312 us/op
                 concatenateStrings·p0.90:   237397.606 us/op
                 concatenateStrings·p0.95:   238393.754 us/op
                 concatenateStrings·p0.99:   238813.184 us/op
                 concatenateStrings·p0.999:  238813.184 us/op
                 concatenateStrings·p0.9999: 238813.184 us/op
                 concatenateStrings·p1.00:   238813.184 us/op

Iteration  11: 236088.106 ±(99.9%) 985.717 us/op
                 concatenateStrings·p0.00:   231473.152 us/op
                 concatenateStrings·p0.50:   235929.600 us/op
                 concatenateStrings·p0.90:   238288.896 us/op
                 concatenateStrings·p0.95:   240176.333 us/op
                 concatenateStrings·p0.99:   241172.480 us/op
                 concatenateStrings·p0.999:  241172.480 us/op
                 concatenateStrings·p0.9999: 241172.480 us/op
                 concatenateStrings·p1.00:   241172.480 us/op

Iteration  12: 233460.569 ±(99.9%) 1206.867 us/op
                 concatenateStrings·p0.00:   229900.288 us/op
                 concatenateStrings·p0.50:   233308.160 us/op
                 concatenateStrings·p0.90:   237030.605 us/op
                 concatenateStrings·p0.95:   237659.750 us/op
                 concatenateStrings·p0.99:   238551.040 us/op
                 concatenateStrings·p0.999:  238551.040 us/op
                 concatenateStrings·p0.9999: 238551.040 us/op
                 concatenateStrings·p1.00:   238551.040 us/op

Iteration  13: 235319.963 ±(99.9%) 1151.327 us/op
                 concatenateStrings·p0.00:   231211.008 us/op
                 concatenateStrings·p0.50:   235143.168 us/op
                 concatenateStrings·p0.90:   238551.040 us/op
                 concatenateStrings·p0.95:   240019.046 us/op
                 concatenateStrings·p0.99:   240648.192 us/op
                 concatenateStrings·p0.999:  240648.192 us/op
                 concatenateStrings·p0.9999: 240648.192 us/op
                 concatenateStrings·p1.00:   240648.192 us/op

Iteration  14: 234058.014 ±(99.9%) 1366.169 us/op
                 concatenateStrings·p0.00:   228065.280 us/op
                 concatenateStrings·p0.50:   234094.592 us/op
                 concatenateStrings·p0.90:   237659.750 us/op
                 concatenateStrings·p0.95:   238288.896 us/op
                 concatenateStrings·p0.99:   238813.184 us/op
                 concatenateStrings·p0.999:  238813.184 us/op
                 concatenateStrings·p0.9999: 238813.184 us/op
                 concatenateStrings·p1.00:   238813.184 us/op

Iteration  15: 234362.832 ±(99.9%) 1303.705 us/op
                 concatenateStrings·p0.00:   229638.144 us/op
                 concatenateStrings·p0.50:   234356.736 us/op
                 concatenateStrings·p0.90:   238236.467 us/op
                 concatenateStrings·p0.95:   239442.330 us/op
                 concatenateStrings·p0.99:   239861.760 us/op
                 concatenateStrings·p0.999:  239861.760 us/op
                 concatenateStrings·p0.9999: 239861.760 us/op
                 concatenateStrings·p1.00:   239861.760 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 577
  mean = 265001.688 ±(99.9%) 15866.116 us/op

  Histogram, us/op:
    [200000.000, 250000.000) = 541 
    [250000.000, 300000.000) = 0 
    [300000.000, 350000.000) = 0 
    [350000.000, 400000.000) = 0 
    [400000.000, 450000.000) = 0 
    [450000.000, 500000.000) = 0 
    [500000.000, 550000.000) = 0 
    [550000.000, 600000.000) = 0 
    [600000.000, 650000.000) = 0 
    [650000.000, 700000.000) = 0 
    [700000.000, 750000.000) = 36 

  Percentiles, us/op:
      p(0.0000) = 228065.280 us/op
     p(50.0000) = 235405.312 us/op
     p(90.0000) = 239599.616 us/op
     p(95.0000) = 707788.800 us/op
     p(99.0000) = 714310.943 us/op
     p(99.9000) = 722468.864 us/op
     p(99.9900) = 722468.864 us/op
     p(99.9990) = 722468.864 us/op
     p(99.9999) = 722468.864 us/op
    p(100.0000) = 722468.864 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 15 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 99.27% complete, ETA 00:03:42
# Fork: 1 of 1
# Warmup Iteration   1: 1777336.320 ±(99.9%) 693224.539 us/op
# Warmup Iteration   2: 1753918.123 ±(99.9%) 313456.695 us/op
# Warmup Iteration   3: 1690304.512 ±(99.9%) 313816.902 us/op
# Warmup Iteration   4: 1685760.683 ±(99.9%) 294989.488 us/op
# Warmup Iteration   5: 1684362.581 ±(99.9%) 279605.364 us/op
Iteration   1: 1689605.461 ±(99.9%) 291528.257 us/op
                 createNewObjectsWithRecursive·p0.00:   1533018.112 us/op
                 createNewObjectsWithRecursive·p0.50:   1709178.880 us/op
                 createNewObjectsWithRecursive·p0.90:   1809842.176 us/op
                 createNewObjectsWithRecursive·p0.95:   1809842.176 us/op
                 createNewObjectsWithRecursive·p0.99:   1809842.176 us/op
                 createNewObjectsWithRecursive·p0.999:  1809842.176 us/op
                 createNewObjectsWithRecursive·p0.9999: 1809842.176 us/op
                 createNewObjectsWithRecursive·p1.00:   1809842.176 us/op

Iteration   2: 1683314.005 ±(99.9%) 290720.457 us/op
                 createNewObjectsWithRecursive·p0.00:   1533018.112 us/op
                 createNewObjectsWithRecursive·p0.50:   1704984.576 us/op
                 createNewObjectsWithRecursive·p0.90:   1795162.112 us/op
                 createNewObjectsWithRecursive·p0.95:   1795162.112 us/op
                 createNewObjectsWithRecursive·p0.99:   1795162.112 us/op
                 createNewObjectsWithRecursive·p0.999:  1795162.112 us/op
                 createNewObjectsWithRecursive·p0.9999: 1795162.112 us/op
                 createNewObjectsWithRecursive·p1.00:   1795162.112 us/op

Iteration   3: 1693450.240 ±(99.9%) 266569.863 us/op
                 createNewObjectsWithRecursive·p0.00:   1549795.328 us/op
                 createNewObjectsWithRecursive·p0.50:   1709178.880 us/op
                 createNewObjectsWithRecursive·p0.90:   1807745.024 us/op
                 createNewObjectsWithRecursive·p0.95:   1807745.024 us/op
                 createNewObjectsWithRecursive·p0.99:   1807745.024 us/op
                 createNewObjectsWithRecursive·p0.999:  1807745.024 us/op
                 createNewObjectsWithRecursive·p0.9999: 1807745.024 us/op
                 createNewObjectsWithRecursive·p1.00:   1807745.024 us/op

Iteration   4: 1692401.664 ±(99.9%) 286075.665 us/op
                 createNewObjectsWithRecursive·p0.00:   1530920.960 us/op
                 createNewObjectsWithRecursive·p0.50:   1718616.064 us/op
                 createNewObjectsWithRecursive·p0.90:   1807745.024 us/op
                 createNewObjectsWithRecursive·p0.95:   1807745.024 us/op
                 createNewObjectsWithRecursive·p0.99:   1807745.024 us/op
                 createNewObjectsWithRecursive·p0.999:  1807745.024 us/op
                 createNewObjectsWithRecursive·p0.9999: 1807745.024 us/op
                 createNewObjectsWithRecursive·p1.00:   1807745.024 us/op

Iteration   5: 1700440.747 ±(99.9%) 311236.705 us/op
                 createNewObjectsWithRecursive·p0.00:   1537212.416 us/op
                 createNewObjectsWithRecursive·p0.50:   1722810.368 us/op
                 createNewObjectsWithRecursive·p0.90:   1835008.000 us/op
                 createNewObjectsWithRecursive·p0.95:   1835008.000 us/op
                 createNewObjectsWithRecursive·p0.99:   1835008.000 us/op
                 createNewObjectsWithRecursive·p0.999:  1835008.000 us/op
                 createNewObjectsWithRecursive·p0.9999: 1835008.000 us/op
                 createNewObjectsWithRecursive·p1.00:   1835008.000 us/op

Iteration   6: 1697295.019 ±(99.9%) 301282.507 us/op
                 createNewObjectsWithRecursive·p0.00:   1537212.416 us/op
                 createNewObjectsWithRecursive·p0.50:   1712324.608 us/op
                 createNewObjectsWithRecursive·p0.90:   1824522.240 us/op
                 createNewObjectsWithRecursive·p0.95:   1824522.240 us/op
                 createNewObjectsWithRecursive·p0.99:   1824522.240 us/op
                 createNewObjectsWithRecursive·p0.999:  1824522.240 us/op
                 createNewObjectsWithRecursive·p0.9999: 1824522.240 us/op
                 createNewObjectsWithRecursive·p1.00:   1824522.240 us/op

Iteration   7: 1693100.715 ±(99.9%) 259067.129 us/op
                 createNewObjectsWithRecursive·p0.00:   1553989.632 us/op
                 createNewObjectsWithRecursive·p0.50:   1717567.488 us/op
                 createNewObjectsWithRecursive·p0.90:   1799356.416 us/op
                 createNewObjectsWithRecursive·p0.95:   1799356.416 us/op
                 createNewObjectsWithRecursive·p0.99:   1799356.416 us/op
                 createNewObjectsWithRecursive·p0.999:  1799356.416 us/op
                 createNewObjectsWithRecursive·p0.9999: 1799356.416 us/op
                 createNewObjectsWithRecursive·p1.00:   1799356.416 us/op

Iteration   8: 1690304.512 ±(99.9%) 294956.269 us/op
                 createNewObjectsWithRecursive·p0.00:   1543503.872 us/op
                 createNewObjectsWithRecursive·p0.50:   1703936.000 us/op
                 createNewObjectsWithRecursive·p0.90:   1820327.936 us/op
                 createNewObjectsWithRecursive·p0.95:   1820327.936 us/op
                 createNewObjectsWithRecursive·p0.99:   1820327.936 us/op
                 createNewObjectsWithRecursive·p0.999:  1820327.936 us/op
                 createNewObjectsWithRecursive·p0.9999: 1820327.936 us/op
                 createNewObjectsWithRecursive·p1.00:   1820327.936 us/op

Iteration   9: 1694498.816 ±(99.9%) 288794.871 us/op
                 createNewObjectsWithRecursive·p0.00:   1539309.568 us/op
                 createNewObjectsWithRecursive·p0.50:   1718616.064 us/op
                 createNewObjectsWithRecursive·p0.90:   1814036.480 us/op
                 createNewObjectsWithRecursive·p0.95:   1814036.480 us/op
                 createNewObjectsWithRecursive·p0.99:   1814036.480 us/op
                 createNewObjectsWithRecursive·p0.999:  1814036.480 us/op
                 createNewObjectsWithRecursive·p0.9999: 1814036.480 us/op
                 createNewObjectsWithRecursive·p1.00:   1814036.480 us/op

Iteration  10: 1685061.632 ±(99.9%) 278100.564 us/op
                 createNewObjectsWithRecursive·p0.00:   1537212.416 us/op
                 createNewObjectsWithRecursive·p0.50:   1697644.544 us/op
                 createNewObjectsWithRecursive·p0.90:   1793064.960 us/op
                 createNewObjectsWithRecursive·p0.95:   1793064.960 us/op
                 createNewObjectsWithRecursive·p0.99:   1793064.960 us/op
                 createNewObjectsWithRecursive·p0.999:  1793064.960 us/op
                 createNewObjectsWithRecursive·p0.9999: 1793064.960 us/op
                 createNewObjectsWithRecursive·p1.00:   1793064.960 us/op

Iteration  11: 1687857.835 ±(99.9%) 268319.888 us/op
                 createNewObjectsWithRecursive·p0.00:   1547698.176 us/op
                 createNewObjectsWithRecursive·p0.50:   1707081.728 us/op
                 createNewObjectsWithRecursive·p0.90:   1790967.808 us/op
                 createNewObjectsWithRecursive·p0.95:   1790967.808 us/op
                 createNewObjectsWithRecursive·p0.99:   1790967.808 us/op
                 createNewObjectsWithRecursive·p0.999:  1790967.808 us/op
                 createNewObjectsWithRecursive·p0.9999: 1790967.808 us/op
                 createNewObjectsWithRecursive·p1.00:   1790967.808 us/op

Iteration  12: 1686809.259 ±(99.9%) 280031.763 us/op
                 createNewObjectsWithRecursive·p0.00:   1535115.264 us/op
                 createNewObjectsWithRecursive·p0.50:   1702887.424 us/op
                 createNewObjectsWithRecursive·p0.90:   1797259.264 us/op
                 createNewObjectsWithRecursive·p0.95:   1797259.264 us/op
                 createNewObjectsWithRecursive·p0.99:   1797259.264 us/op
                 createNewObjectsWithRecursive·p0.999:  1797259.264 us/op
                 createNewObjectsWithRecursive·p0.9999: 1797259.264 us/op
                 createNewObjectsWithRecursive·p1.00:   1797259.264 us/op

Iteration  13: 1686459.733 ±(99.9%) 292564.425 us/op
                 createNewObjectsWithRecursive·p0.00:   1530920.960 us/op
                 createNewObjectsWithRecursive·p0.50:   1708130.304 us/op
                 createNewObjectsWithRecursive·p0.90:   1805647.872 us/op
                 createNewObjectsWithRecursive·p0.95:   1805647.872 us/op
                 createNewObjectsWithRecursive·p0.99:   1805647.872 us/op
                 createNewObjectsWithRecursive·p0.999:  1805647.872 us/op
                 createNewObjectsWithRecursive·p0.9999: 1805647.872 us/op
                 createNewObjectsWithRecursive·p1.00:   1805647.872 us/op

Iteration  14: 1688207.360 ±(99.9%) 264021.329 us/op
                 createNewObjectsWithRecursive·p0.00:   1553989.632 us/op
                 createNewObjectsWithRecursive·p0.50:   1707081.728 us/op
                 createNewObjectsWithRecursive·p0.90:   1795162.112 us/op
                 createNewObjectsWithRecursive·p0.95:   1795162.112 us/op
                 createNewObjectsWithRecursive·p0.99:   1795162.112 us/op
                 createNewObjectsWithRecursive·p0.999:  1795162.112 us/op
                 createNewObjectsWithRecursive·p0.9999: 1795162.112 us/op
                 createNewObjectsWithRecursive·p1.00:   1795162.112 us/op

Iteration  15: 1703586.475 ±(99.9%) 273154.831 us/op
                 createNewObjectsWithRecursive·p0.00:   1558183.936 us/op
                 createNewObjectsWithRecursive·p0.50:   1718616.064 us/op
                 createNewObjectsWithRecursive·p0.90:   1822425.088 us/op
                 createNewObjectsWithRecursive·p0.95:   1822425.088 us/op
                 createNewObjectsWithRecursive·p0.99:   1822425.088 us/op
                 createNewObjectsWithRecursive·p0.999:  1822425.088 us/op
                 createNewObjectsWithRecursive·p0.9999: 1822425.088 us/op
                 createNewObjectsWithRecursive·p1.00:   1822425.088 us/op



Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  N = 90
  mean = 1691492.898 ±(99.9%) 33347.985 us/op

  Histogram, us/op:
    [1500000.000, 1525000.000) = 0 
    [1525000.000, 1550000.000) = 12 
    [1550000.000, 1575000.000) = 3 
    [1575000.000, 1600000.000) = 1 
    [1600000.000, 1625000.000) = 12 
    [1625000.000, 1650000.000) = 2 
    [1650000.000, 1675000.000) = 5 
    [1675000.000, 1700000.000) = 10 
    [1700000.000, 1725000.000) = 0 
    [1725000.000, 1750000.000) = 14 
    [1750000.000, 1775000.000) = 15 
    [1775000.000, 1800000.000) = 7 
    [1800000.000, 1825000.000) = 8 
    [1825000.000, 1850000.000) = 1 
    [1850000.000, 1875000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1530920.960 us/op
     p(50.0000) = 1713373.184 us/op
     p(90.0000) = 1805018.726 us/op
     p(95.0000) = 1816867.635 us/op
     p(99.0000) = 1835008.000 us/op
     p(99.9000) = 1835008.000 us/op
     p(99.9900) = 1835008.000 us/op
     p(99.9990) = 1835008.000 us/op
     p(99.9999) = 1835008.000 us/op
    p(100.0000) = 1835008.000 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1024)

# Run progress: 100.00% complete, ETA 00:00:01
# Fork: 1 of 1
# Warmup Iteration   1: 233971.739 us/op
# Warmup Iteration   2: 230208.237 us/op
# Warmup Iteration   3: 236188.569 us/op
# Warmup Iteration   4: 238172.785 us/op
# Warmup Iteration   5: 233584.303 us/op
Iteration   1: 237219.722 us/op
Iteration   2: 242538.713 us/op
Iteration   3: 238201.885 us/op
Iteration   4: 227654.766 us/op
Iteration   5: 229925.296 us/op
Iteration   6: 242993.166 us/op
Iteration   7: 233312.787 us/op
Iteration   8: 235608.299 us/op
Iteration   9: 236345.931 us/op
Iteration  10: 236073.437 us/op
Iteration  11: 237837.798 us/op
Iteration  12: 239076.420 us/op
Iteration  13: 228457.530 us/op
Iteration  14: 238804.440 us/op
Iteration  15: 239172.130 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 236214.821 ±(99.9%) 4940.580 us/op

  Histogram, us/op:
    [220000.000, 222500.000) = 0 
    [222500.000, 225000.000) = 0 
    [225000.000, 227500.000) = 0 
    [227500.000, 230000.000) = 3 
    [230000.000, 232500.000) = 0 
    [232500.000, 235000.000) = 1 
    [235000.000, 237500.000) = 4 
    [237500.000, 240000.000) = 5 
    [240000.000, 242500.000) = 0 
    [242500.000, 245000.000) = 2 
    [245000.000, 247500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 227654.766 us/op
     p(50.0000) = 237219.722 us/op
     p(90.0000) = 242720.494 us/op
     p(95.0000) = 242993.166 us/op
     p(99.0000) = 242993.166 us/op
     p(99.9000) = 242993.166 us/op
     p(99.9900) = 242993.166 us/op
     p(99.9990) = 242993.166 us/op
     p(99.9999) = 242993.166 us/op
    p(100.0000) = 242993.166 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10240)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 213307.146 us/op
# Warmup Iteration   2: 204211.296 us/op
# Warmup Iteration   3: 227738.006 us/op
# Warmup Iteration   4: 227972.780 us/op
# Warmup Iteration   5: 226914.719 us/op
Iteration   1: 228727.681 us/op
Iteration   2: 226274.134 us/op
Iteration   3: 227257.919 us/op
Iteration   4: 226604.926 us/op
Iteration   5: 226115.167 us/op
Iteration   6: 228303.044 us/op
Iteration   7: 227817.173 us/op
Iteration   8: 227060.920 us/op
Iteration   9: 228157.670 us/op
Iteration  10: 224335.187 us/op
Iteration  11: 228452.423 us/op
Iteration  12: 227656.332 us/op
Iteration  13: 224851.812 us/op
Iteration  14: 225858.876 us/op
Iteration  15: 225475.681 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 226863.263 ±(99.9%) 1452.069 us/op

  Histogram, us/op:
    [224000.000, 224500.000) = 1 
    [224500.000, 225000.000) = 1 
    [225000.000, 225500.000) = 1 
    [225500.000, 226000.000) = 1 
    [226000.000, 226500.000) = 2 
    [226500.000, 227000.000) = 1 
    [227000.000, 227500.000) = 2 
    [227500.000, 228000.000) = 2 
    [228000.000, 228500.000) = 3 

  Percentiles, us/op:
      p(0.0000) = 224335.187 us/op
     p(50.0000) = 227060.920 us/op
     p(90.0000) = 228562.526 us/op
     p(95.0000) = 228727.681 us/op
     p(99.0000) = 228727.681 us/op
     p(99.9000) = 228727.681 us/op
     p(99.9900) = 228727.681 us/op
     p(99.9990) = 228727.681 us/op
     p(99.9999) = 228727.681 us/op
    p(100.0000) = 228727.681 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 102400)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 208543.604 us/op
# Warmup Iteration   2: 208815.517 us/op
# Warmup Iteration   3: 208108.722 us/op
# Warmup Iteration   4: 209564.658 us/op
# Warmup Iteration   5: 182720.831 us/op
Iteration   1: 156432.202 us/op
Iteration   2: 155784.397 us/op
Iteration   3: 157136.279 us/op
Iteration   4: 205701.511 us/op
Iteration   5: 207104.608 us/op
Iteration   6: 203971.710 us/op
Iteration   7: 209399.290 us/op
Iteration   8: 208957.917 us/op
Iteration   9: 208206.818 us/op
Iteration  10: 208879.402 us/op
Iteration  11: 208277.839 us/op
Iteration  12: 207424.505 us/op
Iteration  13: 208955.806 us/op
Iteration  14: 204740.429 us/op
Iteration  15: 208922.877 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 197326.373 ±(99.9%) 22683.119 us/op

  Histogram, us/op:
    [150000.000, 155000.000) = 0 
    [155000.000, 160000.000) = 3 
    [160000.000, 165000.000) = 0 
    [165000.000, 170000.000) = 0 
    [170000.000, 175000.000) = 0 
    [175000.000, 180000.000) = 0 
    [180000.000, 185000.000) = 0 
    [185000.000, 190000.000) = 0 
    [190000.000, 195000.000) = 0 
    [195000.000, 200000.000) = 0 
    [200000.000, 205000.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 155784.397 us/op
     p(50.0000) = 207424.505 us/op
     p(90.0000) = 209134.466 us/op
     p(95.0000) = 209399.290 us/op
     p(99.0000) = 209399.290 us/op
     p(99.9000) = 209399.290 us/op
     p(99.9900) = 209399.290 us/op
     p(99.9990) = 209399.290 us/op
     p(99.9999) = 209399.290 us/op
    p(100.0000) = 209399.290 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 1048576)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 206438.780 us/op
# Warmup Iteration   2: 204651.821 us/op
# Warmup Iteration   3: 206527.919 us/op
# Warmup Iteration   4: 205883.830 us/op
# Warmup Iteration   5: 205835.661 us/op
Iteration   1: 207093.801 us/op
Iteration   2: 208125.100 us/op
Iteration   3: 206635.980 us/op
Iteration   4: 206894.906 us/op
Iteration   5: 205700.215 us/op
Iteration   6: 206727.518 us/op
Iteration   7: 205896.502 us/op
Iteration   8: 206342.916 us/op
Iteration   9: 207193.350 us/op
Iteration  10: 206650.275 us/op
Iteration  11: 207266.566 us/op
Iteration  12: 207774.604 us/op
Iteration  13: 207554.542 us/op
Iteration  14: 206573.067 us/op
Iteration  15: 209199.091 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 207041.896 ±(99.9%) 945.965 us/op

  Histogram, us/op:
    [205000.000, 205500.000) = 0 
    [205500.000, 206000.000) = 2 
    [206000.000, 206500.000) = 1 
    [206500.000, 207000.000) = 5 
    [207000.000, 207500.000) = 3 
    [207500.000, 208000.000) = 2 
    [208000.000, 208500.000) = 1 
    [208500.000, 209000.000) = 0 
    [209000.000, 209500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 205700.215 us/op
     p(50.0000) = 206894.906 us/op
     p(90.0000) = 208554.696 us/op
     p(95.0000) = 209199.091 us/op
     p(99.0000) = 209199.091 us/op
     p(99.9000) = 209199.091 us/op
     p(99.9900) = 209199.091 us/op
     p(99.9990) = 209199.091 us/op
     p(99.9999) = 209199.091 us/op
    p(100.0000) = 209199.091 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 10485760)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 205764.288 us/op
# Warmup Iteration   2: 204873.934 us/op
# Warmup Iteration   3: 208151.592 us/op
# Warmup Iteration   4: 207108.782 us/op
# Warmup Iteration   5: 208714.135 us/op
Iteration   1: 204384.494 us/op
Iteration   2: 206473.206 us/op
Iteration   3: 208888.569 us/op
Iteration   4: 203662.128 us/op
Iteration   5: 206669.818 us/op
Iteration   6: 205600.133 us/op
Iteration   7: 204953.004 us/op
Iteration   8: 207660.756 us/op
Iteration   9: 202576.770 us/op
Iteration  10: 206549.294 us/op
Iteration  11: 205427.957 us/op
Iteration  12: 207212.597 us/op
Iteration  13: 206028.099 us/op
Iteration  14: 205503.969 us/op
Iteration  15: 207222.187 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 205920.865 ±(99.9%) 1727.844 us/op

  Histogram, us/op:
    [202000.000, 202500.000) = 0 
    [202500.000, 203000.000) = 1 
    [203000.000, 203500.000) = 0 
    [203500.000, 204000.000) = 1 
    [204000.000, 204500.000) = 1 
    [204500.000, 205000.000) = 1 
    [205000.000, 205500.000) = 1 
    [205500.000, 206000.000) = 2 
    [206000.000, 206500.000) = 2 
    [206500.000, 207000.000) = 2 
    [207000.000, 207500.000) = 2 
    [207500.000, 208000.000) = 1 
    [208000.000, 208500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 202576.770 us/op
     p(50.0000) = 206028.099 us/op
     p(90.0000) = 208151.881 us/op
     p(95.0000) = 208888.569 us/op
     p(99.0000) = 208888.569 us/op
     p(99.9000) = 208888.569 us/op
     p(99.9900) = 208888.569 us/op
     p(99.9990) = 208888.569 us/op
     p(99.9999) = 208888.569 us/op
    p(100.0000) = 208888.569 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects
# Parameters: (size = 104857600)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 204308.277 us/op
# Warmup Iteration   2: 201677.896 us/op
# Warmup Iteration   3: 201445.591 us/op
# Warmup Iteration   4: 196805.176 us/op
# Warmup Iteration   5: 203104.094 us/op
Iteration   1: 203140.708 us/op
Iteration   2: 203321.044 us/op
Iteration   3: 202144.720 us/op
Iteration   4: 201676.776 us/op
Iteration   5: 201939.164 us/op
Iteration   6: 201861.651 us/op
Iteration   7: 199378.291 us/op
Iteration   8: 200932.545 us/op
Iteration   9: 201607.253 us/op
Iteration  10: 200976.516 us/op
Iteration  11: 201306.485 us/op
Iteration  12: 202207.604 us/op
Iteration  13: 201902.101 us/op
Iteration  14: 201880.255 us/op
Iteration  15: 201467.229 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.createNewObjects":
  N = 15
  mean = 201716.156 ±(99.9%) 991.099 us/op

  Histogram, us/op:
    [199000.000, 199500.000) = 1 
    [199500.000, 200000.000) = 0 
    [200000.000, 200500.000) = 0 
    [200500.000, 201000.000) = 2 
    [201000.000, 201500.000) = 2 
    [201500.000, 202000.000) = 6 
    [202000.000, 202500.000) = 2 
    [202500.000, 203000.000) = 0 
    [203000.000, 203500.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 199378.291 us/op
     p(50.0000) = 201861.651 us/op
     p(90.0000) = 203212.842 us/op
     p(95.0000) = 203321.044 us/op
     p(99.0000) = 203321.044 us/op
     p(99.9000) = 203321.044 us/op
     p(99.9900) = 203321.044 us/op
     p(99.9990) = 203321.044 us/op
     p(99.9999) = 203321.044 us/op
    p(100.0000) = 203321.044 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1024)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1494378.682 us/op
# Warmup Iteration   2: 1266230.437 us/op
# Warmup Iteration   3: 1257553.836 us/op
# Warmup Iteration   4: 1268777.271 us/op
# Warmup Iteration   5: 1263054.412 us/op
Iteration   1: 1265783.004 us/op
Iteration   2: 1274879.708 us/op
Iteration   3: 1278994.835 us/op
Iteration   4: 1264158.208 us/op
Iteration   5: 1263054.535 us/op
Iteration   6: 1266255.259 us/op
Iteration   7: 1273750.485 us/op
Iteration   8: 1274655.807 us/op
Iteration   9: 1278679.145 us/op
Iteration  10: 1267886.994 us/op
Iteration  11: 1272350.203 us/op
Iteration  12: 1270376.112 us/op
Iteration  13: 1258826.023 us/op
Iteration  14: 1246448.392 us/op
Iteration  15: 1269696.697 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 1268386.360 ±(99.9%) 8947.420 us/op

  Histogram, us/op:
    [1240000.000, 1242500.000) = 0 
    [1242500.000, 1245000.000) = 0 
    [1245000.000, 1247500.000) = 1 
    [1247500.000, 1250000.000) = 0 
    [1250000.000, 1252500.000) = 0 
    [1252500.000, 1255000.000) = 0 
    [1255000.000, 1257500.000) = 0 
    [1257500.000, 1260000.000) = 1 
    [1260000.000, 1262500.000) = 0 
    [1262500.000, 1265000.000) = 2 
    [1265000.000, 1267500.000) = 2 
    [1267500.000, 1270000.000) = 2 
    [1270000.000, 1272500.000) = 2 
    [1272500.000, 1275000.000) = 3 
    [1275000.000, 1277500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1246448.392 us/op
     p(50.0000) = 1269696.697 us/op
     p(90.0000) = 1278805.421 us/op
     p(95.0000) = 1278994.835 us/op
     p(99.0000) = 1278994.835 us/op
     p(99.9000) = 1278994.835 us/op
     p(99.9900) = 1278994.835 us/op
     p(99.9990) = 1278994.835 us/op
     p(99.9999) = 1278994.835 us/op
    p(100.0000) = 1278994.835 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10240)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 902723.776 us/op
# Warmup Iteration   2: 940758.292 us/op
# Warmup Iteration   3: 947832.363 us/op
# Warmup Iteration   4: 950695.084 us/op
# Warmup Iteration   5: 947399.584 us/op
Iteration   1: 951104.969 us/op
Iteration   2: 939244.165 us/op
Iteration   3: 941556.069 us/op
Iteration   4: 949047.301 us/op
Iteration   5: 952095.958 us/op
Iteration   6: 941129.246 us/op
Iteration   7: 953453.788 us/op
Iteration   8: 945574.245 us/op
Iteration   9: 943237.836 us/op
Iteration  10: 933117.278 us/op
Iteration  11: 947938.498 us/op
Iteration  12: 941026.756 us/op
Iteration  13: 950250.013 us/op
Iteration  14: 945992.941 us/op
Iteration  15: 940360.152 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 945008.614 ±(99.9%) 6091.734 us/op

  Histogram, us/op:
    [930000.000, 932500.000) = 0 
    [932500.000, 935000.000) = 1 
    [935000.000, 937500.000) = 0 
    [937500.000, 940000.000) = 1 
    [940000.000, 942500.000) = 4 
    [942500.000, 945000.000) = 1 
    [945000.000, 947500.000) = 2 
    [947500.000, 950000.000) = 2 
    [950000.000, 952500.000) = 3 
    [952500.000, 955000.000) = 1 
    [955000.000, 957500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 933117.278 us/op
     p(50.0000) = 945574.245 us/op
     p(90.0000) = 952639.090 us/op
     p(95.0000) = 953453.788 us/op
     p(99.0000) = 953453.788 us/op
     p(99.9000) = 953453.788 us/op
     p(99.9900) = 953453.788 us/op
     p(99.9990) = 953453.788 us/op
     p(99.9999) = 953453.788 us/op
    p(100.0000) = 953453.788 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 102400)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 811471.310 us/op
# Warmup Iteration   2: 815937.301 us/op
# Warmup Iteration   3: 742361.232 us/op
# Warmup Iteration   4: 719606.055 us/op
# Warmup Iteration   5: 820649.156 us/op
Iteration   1: 822987.906 us/op
Iteration   2: 825895.567 us/op
Iteration   3: 827726.703 us/op
Iteration   4: 828166.056 us/op
Iteration   5: 823562.167 us/op
Iteration   6: 821106.844 us/op
Iteration   7: 818107.477 us/op
Iteration   8: 818671.603 us/op
Iteration   9: 822253.704 us/op
Iteration  10: 815448.116 us/op
Iteration  11: 816613.948 us/op
Iteration  12: 825837.279 us/op
Iteration  13: 824234.144 us/op
Iteration  14: 821662.142 us/op
Iteration  15: 829745.163 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 822801.255 ±(99.9%) 4594.861 us/op

  Histogram, us/op:
    [810000.000, 811250.000) = 0 
    [811250.000, 812500.000) = 0 
    [812500.000, 813750.000) = 0 
    [813750.000, 815000.000) = 0 
    [815000.000, 816250.000) = 1 
    [816250.000, 817500.000) = 1 
    [817500.000, 818750.000) = 2 
    [818750.000, 820000.000) = 0 
    [820000.000, 821250.000) = 1 
    [821250.000, 822500.000) = 2 
    [822500.000, 823750.000) = 2 
    [823750.000, 825000.000) = 1 
    [825000.000, 826250.000) = 2 
    [826250.000, 827500.000) = 0 
    [827500.000, 828750.000) = 2 

  Percentiles, us/op:
      p(0.0000) = 815448.116 us/op
     p(50.0000) = 822987.906 us/op
     p(90.0000) = 828797.699 us/op
     p(95.0000) = 829745.163 us/op
     p(99.0000) = 829745.163 us/op
     p(99.9000) = 829745.163 us/op
     p(99.9900) = 829745.163 us/op
     p(99.9990) = 829745.163 us/op
     p(99.9999) = 829745.163 us/op
    p(100.0000) = 829745.163 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 1048576)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 813120.160 us/op
# Warmup Iteration   2: 807508.487 us/op
# Warmup Iteration   3: 800500.246 us/op
# Warmup Iteration   4: 805538.197 us/op
# Warmup Iteration   5: 803296.003 us/op
Iteration   1: 806504.934 us/op
Iteration   2: 810120.516 us/op
Iteration   3: 809961.246 us/op
Iteration   4: 813251.906 us/op
Iteration   5: 804997.719 us/op
Iteration   6: 811467.243 us/op
Iteration   7: 823390.695 us/op
Iteration   8: 821520.153 us/op
Iteration   9: 823168.667 us/op
Iteration  10: 813856.318 us/op
Iteration  11: 806677.455 us/op
Iteration  12: 816913.085 us/op
Iteration  13: 806505.182 us/op
Iteration  14: 804821.395 us/op
Iteration  15: 817188.160 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 812689.645 ±(99.9%) 6947.779 us/op

  Histogram, us/op:
    [800000.000, 802500.000) = 0 
    [802500.000, 805000.000) = 2 
    [805000.000, 807500.000) = 3 
    [807500.000, 810000.000) = 1 
    [810000.000, 812500.000) = 2 
    [812500.000, 815000.000) = 2 
    [815000.000, 817500.000) = 2 
    [817500.000, 820000.000) = 0 
    [820000.000, 822500.000) = 1 
    [822500.000, 825000.000) = 2 
    [825000.000, 827500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 804821.395 us/op
     p(50.0000) = 811467.243 us/op
     p(90.0000) = 823257.478 us/op
     p(95.0000) = 823390.695 us/op
     p(99.0000) = 823390.695 us/op
     p(99.9000) = 823390.695 us/op
     p(99.9900) = 823390.695 us/op
     p(99.9990) = 823390.695 us/op
     p(99.9999) = 823390.695 us/op
    p(100.0000) = 823390.695 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 10485760)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 908327.765 us/op
# Warmup Iteration   2: 796477.001 us/op
# Warmup Iteration   3: 804223.430 us/op
# Warmup Iteration   4: 801262.620 us/op
# Warmup Iteration   5: 808138.108 us/op
Iteration   1: 798503.223 us/op
Iteration   2: 795405.943 us/op
Iteration   3: 807033.844 us/op
Iteration   4: 796838.159 us/op
Iteration   5: 796321.920 us/op
Iteration   6: 803851.378 us/op
Iteration   7: 795650.160 us/op
Iteration   8: 803691.316 us/op
Iteration   9: 808364.800 us/op
Iteration  10: 801699.005 us/op
Iteration  11: 803072.990 us/op
Iteration  12: 806442.763 us/op
Iteration  13: 799591.332 us/op
Iteration  14: 794557.027 us/op
Iteration  15: 795378.649 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 800426.834 ±(99.9%) 5078.659 us/op

  Histogram, us/op:
    [790000.000, 791250.000) = 0 
    [791250.000, 792500.000) = 0 
    [792500.000, 793750.000) = 0 
    [793750.000, 795000.000) = 1 
    [795000.000, 796250.000) = 3 
    [796250.000, 797500.000) = 2 
    [797500.000, 798750.000) = 1 
    [798750.000, 800000.000) = 1 
    [800000.000, 801250.000) = 0 
    [801250.000, 802500.000) = 1 
    [802500.000, 803750.000) = 2 
    [803750.000, 805000.000) = 1 
    [805000.000, 806250.000) = 0 
    [806250.000, 807500.000) = 2 
    [807500.000, 808750.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 794557.027 us/op
     p(50.0000) = 799591.332 us/op
     p(90.0000) = 807566.226 us/op
     p(95.0000) = 808364.800 us/op
     p(99.0000) = 808364.800 us/op
     p(99.9000) = 808364.800 us/op
     p(99.9900) = 808364.800 us/op
     p(99.9990) = 808364.800 us/op
     p(99.9999) = 808364.800 us/op
    p(100.0000) = 808364.800 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap
# Parameters: (size = 104857600)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 941068.057 us/op
# Warmup Iteration   2: 932789.146 us/op
# Warmup Iteration   3: 940487.121 us/op
# Warmup Iteration   4: 936616.853 us/op
# Warmup Iteration   5: 933081.677 us/op
Iteration   1: 933447.162 us/op
Iteration   2: 935725.200 us/op
Iteration   3: 938381.043 us/op
Iteration   4: 945524.868 us/op
Iteration   5: 940462.816 us/op
Iteration   6: 939535.471 us/op
Iteration   7: 936783.215 us/op
Iteration   8: 938694.484 us/op
Iteration   9: 937505.816 us/op
Iteration  10: 940655.623 us/op
Iteration  11: 927298.326 us/op
Iteration  12: 937674.134 us/op
Iteration  13: 943243.569 us/op
Iteration  14: 944971.453 us/op
Iteration  15: 936897.208 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.allocation.AllocationBenchmark.fillHeap":
  N = 15
  mean = 938453.359 ±(99.9%) 4859.027 us/op

  Histogram, us/op:
    [920000.000, 922500.000) = 0 
    [922500.000, 925000.000) = 0 
    [925000.000, 927500.000) = 1 
    [927500.000, 930000.000) = 0 
    [930000.000, 932500.000) = 0 
    [932500.000, 935000.000) = 1 
    [935000.000, 937500.000) = 3 
    [937500.000, 940000.000) = 5 
    [940000.000, 942500.000) = 2 
    [942500.000, 945000.000) = 2 
    [945000.000, 947500.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 927298.326 us/op
     p(50.0000) = 938381.043 us/op
     p(90.0000) = 945192.819 us/op
     p(95.0000) = 945524.868 us/op
     p(99.0000) = 945524.868 us/op
     p(99.9000) = 945524.868 us/op
     p(99.9900) = 945524.868 us/op
     p(99.9990) = 945524.868 us/op
     p(99.9999) = 945524.868 us/op
    p(100.0000) = 945524.868 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5026.312 us/op
# Warmup Iteration   2: 3143.089 us/op
# Warmup Iteration   3: 550.044 us/op
# Warmup Iteration   4: 536.620 us/op
# Warmup Iteration   5: 550.091 us/op
Iteration   1: 574.005 us/op
Iteration   2: 585.369 us/op
Iteration   3: 532.672 us/op
Iteration   4: 540.021 us/op
Iteration   5: 568.764 us/op
Iteration   6: 571.825 us/op
Iteration   7: 557.007 us/op
Iteration   8: 555.112 us/op
Iteration   9: 546.378 us/op
Iteration  10: 546.105 us/op
Iteration  11: 581.605 us/op
Iteration  12: 577.589 us/op
Iteration  13: 612.024 us/op
Iteration  14: 562.693 us/op
Iteration  15: 573.616 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.read":
  N = 15
  mean =    565.652 ±(99.9%) 21.778 us/op

  Histogram, us/op:
    [530.000, 535.000) = 1 
    [535.000, 540.000) = 0 
    [540.000, 545.000) = 1 
    [545.000, 550.000) = 2 
    [550.000, 555.000) = 0 
    [555.000, 560.000) = 2 
    [560.000, 565.000) = 1 
    [565.000, 570.000) = 1 
    [570.000, 575.000) = 3 
    [575.000, 580.000) = 1 
    [580.000, 585.000) = 1 
    [585.000, 590.000) = 1 
    [590.000, 595.000) = 0 
    [595.000, 600.000) = 0 
    [600.000, 605.000) = 0 
    [605.000, 610.000) = 0 
    [610.000, 615.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    532.672 us/op
     p(50.0000) =    568.764 us/op
     p(90.0000) =    596.031 us/op
     p(95.0000) =    612.024 us/op
     p(99.0000) =    612.024 us/op
     p(99.9000) =    612.024 us/op
     p(99.9900) =    612.024 us/op
     p(99.9990) =    612.024 us/op
     p(99.9999) =    612.024 us/op
    p(100.0000) =    612.024 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5398.050 us/op
# Warmup Iteration   2: 3430.783 us/op
# Warmup Iteration   3: 414.461 us/op
# Warmup Iteration   4: 357.784 us/op
# Warmup Iteration   5: 344.111 us/op
Iteration   1: 414.807 us/op
Iteration   2: 362.522 us/op
Iteration   3: 387.025 us/op
Iteration   4: 365.249 us/op
Iteration   5: 402.465 us/op
Iteration   6: 354.347 us/op
Iteration   7: 352.447 us/op
Iteration   8: 379.692 us/op
Iteration   9: 366.750 us/op
Iteration  10: 384.756 us/op
Iteration  11: 405.348 us/op
Iteration  12: 376.189 us/op
Iteration  13: 372.299 us/op
Iteration  14: 347.878 us/op
Iteration  15: 389.353 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.readAndWrite":
  N = 15
  mean =    377.408 ±(99.9%) 21.456 us/op

  Histogram, us/op:
    [340.000, 345.000) = 0 
    [345.000, 350.000) = 1 
    [350.000, 355.000) = 2 
    [355.000, 360.000) = 0 
    [360.000, 365.000) = 1 
    [365.000, 370.000) = 2 
    [370.000, 375.000) = 1 
    [375.000, 380.000) = 2 
    [380.000, 385.000) = 1 
    [385.000, 390.000) = 2 
    [390.000, 395.000) = 0 
    [395.000, 400.000) = 0 
    [400.000, 405.000) = 1 
    [405.000, 410.000) = 1 
    [410.000, 415.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    347.878 us/op
     p(50.0000) =    376.189 us/op
     p(90.0000) =    409.132 us/op
     p(95.0000) =    414.807 us/op
     p(99.0000) =    414.807 us/op
     p(99.9000) =    414.807 us/op
     p(99.9900) =    414.807 us/op
     p(99.9990) =    414.807 us/op
     p(99.9999) =    414.807 us/op
    p(100.0000) =    414.807 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5783.160 us/op
# Warmup Iteration   2: 2378.753 us/op
# Warmup Iteration   3: 203.832 us/op
# Warmup Iteration   4: 296.816 us/op
# Warmup Iteration   5: 205.772 us/op
Iteration   1: 207.857 us/op
Iteration   2: 211.062 us/op
Iteration   3: 206.274 us/op
Iteration   4: 208.707 us/op
Iteration   5: 204.416 us/op
Iteration   6: 204.755 us/op
Iteration   7: 204.746 us/op
Iteration   8: 209.053 us/op
Iteration   9: 204.563 us/op
Iteration  10: 208.772 us/op
Iteration  11: 203.925 us/op
Iteration  12: 203.818 us/op
Iteration  13: 203.944 us/op
Iteration  14: 209.282 us/op
Iteration  15: 221.676 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.swap":
  N = 15
  mean =    207.523 ±(99.9%) 4.917 us/op

  Histogram, us/op:
    [200.000, 202.500) = 0 
    [202.500, 205.000) = 7 
    [205.000, 207.500) = 1 
    [207.500, 210.000) = 5 
    [210.000, 212.500) = 1 
    [212.500, 215.000) = 0 
    [215.000, 217.500) = 0 
    [217.500, 220.000) = 0 
    [220.000, 222.500) = 1 
    [222.500, 225.000) = 0 
    [225.000, 227.500) = 0 

  Percentiles, us/op:
      p(0.0000) =    203.818 us/op
     p(50.0000) =    206.274 us/op
     p(90.0000) =    215.308 us/op
     p(95.0000) =    221.676 us/op
     p(99.0000) =    221.676 us/op
     p(99.9000) =    221.676 us/op
     p(99.9900) =    221.676 us/op
     p(99.9990) =    221.676 us/op
     p(99.9999) =    221.676 us/op
    p(100.0000) =    221.676 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5072.223 us/op
# Warmup Iteration   2: 3059.088 us/op
# Warmup Iteration   3: 462.051 us/op
# Warmup Iteration   4: 452.889 us/op
# Warmup Iteration   5: 453.590 us/op
Iteration   1: 454.690 us/op
Iteration   2: 468.562 us/op
Iteration   3: 467.063 us/op
Iteration   4: 488.541 us/op
Iteration   5: 518.462 us/op
Iteration   6: 494.713 us/op
Iteration   7: 473.026 us/op
Iteration   8: 493.821 us/op
Iteration   9: 446.724 us/op
Iteration  10: 473.354 us/op
Iteration  11: 461.441 us/op
Iteration  12: 507.343 us/op
Iteration  13: 458.283 us/op
Iteration  14: 415.272 us/op
Iteration  15: 477.690 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.array.ArrayBenchmark.write":
  N = 15
  mean =    473.266 ±(99.9%) 27.371 us/op

  Histogram, us/op:
    [400.000, 412.500) = 0 
    [412.500, 425.000) = 1 
    [425.000, 437.500) = 0 
    [437.500, 450.000) = 1 
    [450.000, 462.500) = 3 
    [462.500, 475.000) = 4 
    [475.000, 487.500) = 1 
    [487.500, 500.000) = 3 
    [500.000, 512.500) = 1 
    [512.500, 525.000) = 1 
    [525.000, 537.500) = 0 
    [537.500, 550.000) = 0 
    [550.000, 562.500) = 0 
    [562.500, 575.000) = 0 
    [575.000, 587.500) = 0 

  Percentiles, us/op:
      p(0.0000) =    415.272 us/op
     p(50.0000) =    473.026 us/op
     p(90.0000) =    511.791 us/op
     p(95.0000) =    518.462 us/op
     p(99.0000) =    518.462 us/op
     p(99.9000) =    518.462 us/op
     p(99.9900) =    518.462 us/op
     p(99.9990) =    518.462 us/op
     p(99.9999) =    518.462 us/op
    p(100.0000) =    518.462 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 792947.874 us/op
# Warmup Iteration   2: 740529.497 us/op
# Warmup Iteration   3: 745567.963 us/op
# Warmup Iteration   4: 730124.922 us/op
# Warmup Iteration   5: 728891.038 us/op
Iteration   1: 740980.739 us/op
Iteration   2: 732342.828 us/op
Iteration   3: 729797.390 us/op
Iteration   4: 732577.161 us/op
Iteration   5: 729631.363 us/op
Iteration   6: 735901.503 us/op
Iteration   7: 732357.991 us/op
Iteration   8: 729904.656 us/op
Iteration   9: 731140.607 us/op
Iteration  10: 730104.091 us/op
Iteration  11: 730579.862 us/op
Iteration  12: 730530.101 us/op
Iteration  13: 729170.500 us/op
Iteration  14: 730526.679 us/op
Iteration  15: 728252.761 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.calculator.CalculatorBenchmark.sumBigDecimals":
  N = 15
  mean = 731586.549 ±(99.9%) 3398.386 us/op

  Histogram, us/op:
    [720000.000, 722500.000) = 0 
    [722500.000, 725000.000) = 0 
    [725000.000, 727500.000) = 0 
    [727500.000, 730000.000) = 5 
    [730000.000, 732500.000) = 7 
    [732500.000, 735000.000) = 1 
    [735000.000, 737500.000) = 1 
    [737500.000, 740000.000) = 0 
    [740000.000, 742500.000) = 1 
    [742500.000, 745000.000) = 0 
    [745000.000, 747500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 728252.761 us/op
     p(50.0000) = 730530.101 us/op
     p(90.0000) = 737933.197 us/op
     p(95.0000) = 740980.739 us/op
     p(99.0000) = 740980.739 us/op
     p(99.9000) = 740980.739 us/op
     p(99.9900) = 740980.739 us/op
     p(99.9990) = 740980.739 us/op
     p(99.9999) = 740980.739 us/op
    p(100.0000) = 740980.739 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1233173.284 us/op
# Warmup Iteration   2: 1246588.001 us/op
# Warmup Iteration   3: 1250591.443 us/op
# Warmup Iteration   4: 1218532.067 us/op
# Warmup Iteration   5: 782935.532 us/op
Iteration   1: 780368.547 us/op
Iteration   2: 767553.024 us/op
Iteration   3: 766207.439 us/op
Iteration   4: 762817.598 us/op
Iteration   5: 773745.320 us/op
Iteration   6: 770966.229 us/op
Iteration   7: 782084.491 us/op
Iteration   8: 768753.803 us/op
Iteration   9: 778300.095 us/op
Iteration  10: 782745.166 us/op
Iteration  11: 778695.567 us/op
Iteration  12: 756901.273 us/op
Iteration  13: 732099.766 us/op
Iteration  14: 769123.915 us/op
Iteration  15: 767447.346 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 15
  mean = 769187.305 ±(99.9%) 13565.877 us/op

  Histogram, us/op:
    [730000.000, 735000.000) = 1 
    [735000.000, 740000.000) = 0 
    [740000.000, 745000.000) = 0 
    [745000.000, 750000.000) = 0 
    [750000.000, 755000.000) = 0 
    [755000.000, 760000.000) = 1 
    [760000.000, 765000.000) = 1 
    [765000.000, 770000.000) = 5 
    [770000.000, 775000.000) = 2 
    [775000.000, 780000.000) = 2 
    [780000.000, 785000.000) = 3 

  Percentiles, us/op:
      p(0.0000) = 732099.766 us/op
     p(50.0000) = 769123.915 us/op
     p(90.0000) = 782348.761 us/op
     p(95.0000) = 782745.166 us/op
     p(99.0000) = 782745.166 us/op
     p(99.9000) = 782745.166 us/op
     p(99.9900) = 782745.166 us/op
     p(99.9990) = 782745.166 us/op
     p(99.9999) = 782745.166 us/op
    p(100.0000) = 782745.166 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 15854257.909 us/op
# Warmup Iteration   2: 15693237.910 us/op
# Warmup Iteration   3: 15829369.002 us/op
# Warmup Iteration   4: 15335169.388 us/op
# Warmup Iteration   5: 16122586.786 us/op
Iteration   1: 16889026.123 us/op
Iteration   2: 16183945.495 us/op
Iteration   3: 16151144.573 us/op
Iteration   4: 16458796.840 us/op
Iteration   5: 16467038.694 us/op
Iteration   6: 16207809.629 us/op
Iteration   7: 16384104.296 us/op
Iteration   8: 15936454.041 us/op
Iteration   9: 16398576.223 us/op
Iteration  10: 16116548.753 us/op
Iteration  11: 16435608.949 us/op
Iteration  12: 16143454.398 us/op
Iteration  13: 16089079.224 us/op
Iteration  14: 16329287.264 us/op
Iteration  15: 15877500.381 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.countuppercase.CountUppercaseBenchmark.countUppercase":
  N = 15
  mean = 16271224.992 ±(99.9%) 268200.354 us/op

  Histogram, us/op:
    [15000000.000, 15125000.000) = 0 
    [15125000.000, 15250000.000) = 0 
    [15250000.000, 15375000.000) = 0 
    [15375000.000, 15500000.000) = 0 
    [15500000.000, 15625000.000) = 0 
    [15625000.000, 15750000.000) = 0 
    [15750000.000, 15875000.000) = 0 
    [15875000.000, 16000000.000) = 2 
    [16000000.000, 16125000.000) = 2 
    [16125000.000, 16250000.000) = 4 
    [16250000.000, 16375000.000) = 1 
    [16375000.000, 16500000.000) = 5 
    [16500000.000, 16625000.000) = 0 
    [16625000.000, 16750000.000) = 0 
    [16750000.000, 16875000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 15877500.381 us/op
     p(50.0000) = 16207809.629 us/op
     p(90.0000) = 16635833.666 us/op
     p(95.0000) = 16889026.123 us/op
     p(99.0000) = 16889026.123 us/op
     p(99.9000) = 16889026.123 us/op
     p(99.9900) = 16889026.123 us/op
     p(99.9990) = 16889026.123 us/op
     p(99.9999) = 16889026.123 us/op
    p(100.0000) = 16889026.123 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 521)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 133.752 us/op
# Warmup Iteration   2: 25.167 us/op
# Warmup Iteration   3: 12.727 us/op
# Warmup Iteration   4: 12.784 us/op
# Warmup Iteration   5: 10.779 us/op
Iteration   1: 12.693 us/op
Iteration   2: 11.814 us/op
Iteration   3: 17.336 us/op
Iteration   4: 12.513 us/op
Iteration   5: 13.578 us/op
Iteration   6: 13.556 us/op
Iteration   7: 11.356 us/op
Iteration   8: 12.838 us/op
Iteration   9: 12.471 us/op
Iteration  10: 13.257 us/op
Iteration  11: 12.370 us/op
Iteration  12: 15.607 us/op
Iteration  13: 14.069 us/op
Iteration  14: 12.671 us/op
Iteration  15: 17.366 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     13.566 ±(99.9%) 1.958 us/op

  Histogram, us/op:
    [11.000, 11.500) = 1 
    [11.500, 12.000) = 1 
    [12.000, 12.500) = 2 
    [12.500, 13.000) = 4 
    [13.000, 13.500) = 1 
    [13.500, 14.000) = 2 
    [14.000, 14.500) = 1 
    [14.500, 15.000) = 0 
    [15.000, 15.500) = 0 
    [15.500, 16.000) = 1 
    [16.000, 16.500) = 0 
    [16.500, 17.000) = 0 
    [17.000, 17.500) = 2 

  Percentiles, us/op:
      p(0.0000) =     11.356 us/op
     p(50.0000) =     12.838 us/op
     p(90.0000) =     17.348 us/op
     p(95.0000) =     17.366 us/op
     p(99.0000) =     17.366 us/op
     p(99.9000) =     17.366 us/op
     p(99.9900) =     17.366 us/op
     p(99.9990) =     17.366 us/op
     p(99.9999) =     17.366 us/op
    p(100.0000) =     17.366 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 1153)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 312.737 us/op
# Warmup Iteration   2: 35.886 us/op
# Warmup Iteration   3: 23.511 us/op
# Warmup Iteration   4: 28.926 us/op
# Warmup Iteration   5: 26.843 us/op
Iteration   1: 54.642 us/op
Iteration   2: 24.633 us/op
Iteration   3: 13.610 us/op
Iteration   4: 13.891 us/op
Iteration   5: 14.311 us/op
Iteration   6: 14.064 us/op
Iteration   7: 13.445 us/op
Iteration   8: 13.528 us/op
Iteration   9: 14.193 us/op
Iteration  10: 13.904 us/op
Iteration  11: 11.956 us/op
Iteration  12: 15.421 us/op
Iteration  13: 14.732 us/op
Iteration  14: 16.958 us/op
Iteration  15: 16.016 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     17.687 ±(99.9%) 11.362 us/op

  Histogram, us/op:
    [10.000, 15.000) = 10 
    [15.000, 20.000) = 3 
    [20.000, 25.000) = 1 
    [25.000, 30.000) = 0 
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 0 
    [40.000, 45.000) = 0 
    [45.000, 50.000) = 0 
    [50.000, 55.000) = 1 

  Percentiles, us/op:
      p(0.0000) =     11.956 us/op
     p(50.0000) =     14.193 us/op
     p(90.0000) =     36.637 us/op
     p(95.0000) =     54.642 us/op
     p(99.0000) =     54.642 us/op
     p(99.9000) =     54.642 us/op
     p(99.9900) =     54.642 us/op
     p(99.9990) =     54.642 us/op
     p(99.9999) =     54.642 us/op
    p(100.0000) =     54.642 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci
# Parameters: (iterations = 2021)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 400.969 us/op
# Warmup Iteration   2: 159.340 us/op
# Warmup Iteration   3: 40.621 us/op
# Warmup Iteration   4: 75.543 us/op
# Warmup Iteration   5: 29.616 us/op
Iteration   1: 16.054 us/op
Iteration   2: 23.263 us/op
Iteration   3: 26.135 us/op
Iteration   4: 22.700 us/op
Iteration   5: 22.604 us/op
Iteration   6: 21.111 us/op
Iteration   7: 22.349 us/op
Iteration   8: 20.169 us/op
Iteration   9: 22.417 us/op
Iteration  10: 21.501 us/op
Iteration  11: 19.668 us/op
Iteration  12: 25.592 us/op
Iteration  13: 30.876 us/op
Iteration  14: 24.474 us/op
Iteration  15: 24.620 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.fibanacci.FibonacciBenchmark.runFibonacci":
  N = 15
  mean =     22.902 ±(99.9%) 3.586 us/op

  Histogram, us/op:
    [10.000, 12.500) = 0 
    [12.500, 15.000) = 0 
    [15.000, 17.500) = 1 
    [17.500, 20.000) = 1 
    [20.000, 22.500) = 5 
    [22.500, 25.000) = 5 
    [25.000, 27.500) = 2 
    [27.500, 30.000) = 0 
    [30.000, 32.500) = 1 
    [32.500, 35.000) = 0 
    [35.000, 37.500) = 0 

  Percentiles, us/op:
      p(0.0000) =     16.054 us/op
     p(50.0000) =     22.604 us/op
     p(90.0000) =     28.031 us/op
     p(95.0000) =     30.876 us/op
     p(99.0000) =     30.876 us/op
     p(99.9000) =     30.876 us/op
     p(99.9900) =     30.876 us/op
     p(99.9990) =     30.876 us/op
     p(99.9999) =     30.876 us/op
    p(100.0000) =     30.876 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 317.544 us/op
# Warmup Iteration   2: 7.208 us/op
# Warmup Iteration   3: 5.339 us/op
# Warmup Iteration   4: 5.935 us/op
# Warmup Iteration   5: 5.676 us/op
Iteration   1: 6.322 us/op
Iteration   2: 5.904 us/op
Iteration   3: 5.286 us/op
Iteration   4: 5.790 us/op
Iteration   5: 7.114 us/op
Iteration   6: 5.727 us/op
Iteration   7: 5.857 us/op
Iteration   8: 6.906 us/op
Iteration   9: 6.551 us/op
Iteration  10: 5.701 us/op
Iteration  11: 6.127 us/op
Iteration  12: 6.149 us/op
Iteration  13: 5.979 us/op
Iteration  14: 5.695 us/op
Iteration  15: 6.029 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =      6.076 ±(99.9%) 0.516 us/op

  Histogram, us/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 1 
    [5.500, 5.750) = 3 
    [5.750, 6.000) = 4 
    [6.000, 6.250) = 3 
    [6.250, 6.500) = 1 
    [6.500, 6.750) = 1 
    [6.750, 7.000) = 1 
    [7.000, 7.250) = 1 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 

  Percentiles, us/op:
      p(0.0000) =      5.286 us/op
     p(50.0000) =      5.979 us/op
     p(90.0000) =      6.989 us/op
     p(95.0000) =      7.114 us/op
     p(99.0000) =      7.114 us/op
     p(99.9000) =      7.114 us/op
     p(99.9900) =      7.114 us/op
     p(99.9990) =      7.114 us/op
     p(99.9999) =      7.114 us/op
    p(100.0000) =      7.114 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 392.984 us/op
# Warmup Iteration   2: 24.294 us/op
# Warmup Iteration   3: 39.550 us/op
# Warmup Iteration   4: 22.581 us/op
# Warmup Iteration   5: 13.993 us/op
Iteration   1: 15.910 us/op
Iteration   2: 14.515 us/op
Iteration   3: 53.144 us/op
Iteration   4: 26.242 us/op
Iteration   5: 28.680 us/op
Iteration   6: 17.181 us/op
Iteration   7: 12.863 us/op
Iteration   8: 12.334 us/op
Iteration   9: 31.560 us/op
Iteration  10: 12.185 us/op
Iteration  11: 13.102 us/op
Iteration  12: 13.997 us/op
Iteration  13: 12.888 us/op
Iteration  14: 12.583 us/op
Iteration  15: 14.055 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =     19.416 ±(99.9%) 12.093 us/op

  Histogram, us/op:
    [10.000, 15.000) = 9 
    [15.000, 20.000) = 2 
    [20.000, 25.000) = 0 
    [25.000, 30.000) = 2 
    [30.000, 35.000) = 1 
    [35.000, 40.000) = 0 
    [40.000, 45.000) = 0 
    [45.000, 50.000) = 0 
    [50.000, 55.000) = 1 

  Percentiles, us/op:
      p(0.0000) =     12.185 us/op
     p(50.0000) =     14.055 us/op
     p(90.0000) =     40.194 us/op
     p(95.0000) =     53.144 us/op
     p(99.0000) =     53.144 us/op
     p(99.9000) =     53.144 us/op
     p(99.9900) =     53.144 us/op
     p(99.9990) =     53.144 us/op
     p(99.9999) =     53.144 us/op
    p(100.0000) =     53.144 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1
# Parameters: (size = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 627.590 us/op
# Warmup Iteration   2: 211.458 us/op
# Warmup Iteration   3: 126.596 us/op
# Warmup Iteration   4: 99.946 us/op
# Warmup Iteration   5: 98.143 us/op
Iteration   1: 116.563 us/op
Iteration   2: 93.227 us/op
Iteration   3: 95.165 us/op
Iteration   4: 103.959 us/op
Iteration   5: 85.768 us/op
Iteration   6: 80.639 us/op
Iteration   7: 79.263 us/op
Iteration   8: 87.580 us/op
Iteration   9: 100.091 us/op
Iteration  10: 87.913 us/op
Iteration  11: 81.306 us/op
Iteration  12: 265.204 us/op
Iteration  13: 81.111 us/op
Iteration  14: 82.155 us/op
Iteration  15: 80.300 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner1":
  N = 15
  mean =    101.350 ±(99.9%) 49.772 us/op

  Histogram, us/op:
    [  0.000,  25.000) = 0 
    [ 25.000,  50.000) = 0 
    [ 50.000,  75.000) = 0 
    [ 75.000, 100.000) = 11 
    [100.000, 125.000) = 3 
    [125.000, 150.000) = 0 
    [150.000, 175.000) = 0 
    [175.000, 200.000) = 0 
    [200.000, 225.000) = 0 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 1 

  Percentiles, us/op:
      p(0.0000) =     79.263 us/op
     p(50.0000) =     87.580 us/op
     p(90.0000) =    176.019 us/op
     p(95.0000) =    265.204 us/op
     p(99.0000) =    265.204 us/op
     p(99.9000) =    265.204 us/op
     p(99.9900) =    265.204 us/op
     p(99.9990) =    265.204 us/op
     p(99.9999) =    265.204 us/op
    p(100.0000) =    265.204 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 342.270 us/op
# Warmup Iteration   2: 5.918 us/op
# Warmup Iteration   3: 5.664 us/op
# Warmup Iteration   4: 5.679 us/op
# Warmup Iteration   5: 6.192 us/op
Iteration   1: 7.229 us/op
Iteration   2: 7.064 us/op
Iteration   3: 5.934 us/op
Iteration   4: 30.035 us/op
Iteration   5: 10.726 us/op
Iteration   6: 6.902 us/op
Iteration   7: 6.072 us/op
Iteration   8: 7.604 us/op
Iteration   9: 6.412 us/op
Iteration  10: 5.959 us/op
Iteration  11: 6.251 us/op
Iteration  12: 7.184 us/op
Iteration  13: 7.378 us/op
Iteration  14: 7.410 us/op
Iteration  15: 6.395 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =      8.570 ±(99.9%) 6.469 us/op

  Histogram, us/op:
    [ 0.000,  2.500) = 0 
    [ 2.500,  5.000) = 0 
    [ 5.000,  7.500) = 12 
    [ 7.500, 10.000) = 1 
    [10.000, 12.500) = 1 
    [12.500, 15.000) = 0 
    [15.000, 17.500) = 0 
    [17.500, 20.000) = 0 
    [20.000, 22.500) = 0 
    [22.500, 25.000) = 0 
    [25.000, 27.500) = 0 
    [27.500, 30.000) = 0 
    [30.000, 32.500) = 1 
    [32.500, 35.000) = 0 
    [35.000, 37.500) = 0 

  Percentiles, us/op:
      p(0.0000) =      5.934 us/op
     p(50.0000) =      7.064 us/op
     p(90.0000) =     18.450 us/op
     p(95.0000) =     30.035 us/op
     p(99.0000) =     30.035 us/op
     p(99.9000) =     30.035 us/op
     p(99.9900) =     30.035 us/op
     p(99.9990) =     30.035 us/op
     p(99.9999) =     30.035 us/op
    p(100.0000) =     30.035 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 380.492 us/op
# Warmup Iteration   2: 26.028 us/op
# Warmup Iteration   3: 333.364 us/op
# Warmup Iteration   4: 25.993 us/op
# Warmup Iteration   5: 13.311 us/op
Iteration   1: 13.653 us/op
Iteration   2: 14.322 us/op
Iteration   3: 14.343 us/op
Iteration   4: 23.543 us/op
Iteration   5: 24.115 us/op
Iteration   6: 15.912 us/op
Iteration   7: 13.353 us/op
Iteration   8: 33.349 us/op
Iteration   9: 13.680 us/op
Iteration  10: 12.999 us/op
Iteration  11: 12.685 us/op
Iteration  12: 13.324 us/op
Iteration  13: 12.602 us/op
Iteration  14: 11.950 us/op
Iteration  15: 13.110 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =     16.196 ±(99.9%) 6.453 us/op

  Histogram, us/op:
    [10.000, 12.500) = 1 
    [12.500, 15.000) = 10 
    [15.000, 17.500) = 1 
    [17.500, 20.000) = 0 
    [20.000, 22.500) = 0 
    [22.500, 25.000) = 2 
    [25.000, 27.500) = 0 
    [27.500, 30.000) = 0 
    [30.000, 32.500) = 0 
    [32.500, 35.000) = 1 
    [35.000, 37.500) = 0 

  Percentiles, us/op:
      p(0.0000) =     11.950 us/op
     p(50.0000) =     13.653 us/op
     p(90.0000) =     27.809 us/op
     p(95.0000) =     33.349 us/op
     p(99.0000) =     33.349 us/op
     p(99.9000) =     33.349 us/op
     p(99.9900) =     33.349 us/op
     p(99.9990) =     33.349 us/op
     p(99.9999) =     33.349 us/op
    p(100.0000) =     33.349 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2
# Parameters: (size = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 835.992 us/op
# Warmup Iteration   2: 335.901 us/op
# Warmup Iteration   3: 166.236 us/op
# Warmup Iteration   4: 99.124 us/op
# Warmup Iteration   5: 94.648 us/op
Iteration   1: 169.861 us/op
Iteration   2: 114.598 us/op
Iteration   3: 94.786 us/op
Iteration   4: 94.472 us/op
Iteration   5: 163.670 us/op
Iteration   6: 147.892 us/op
Iteration   7: 83.290 us/op
Iteration   8: 92.614 us/op
Iteration   9: 85.516 us/op
Iteration  10: 87.813 us/op
Iteration  11: 84.124 us/op
Iteration  12: 131.396 us/op
Iteration  13: 84.756 us/op
Iteration  14: 83.624 us/op
Iteration  15: 89.709 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.findlast.FindLastBenchmark.findLastPrefixUsingScanner2":
  N = 15
  mean =    107.208 ±(99.9%) 32.896 us/op

  Histogram, us/op:
    [ 80.000,  85.000) = 4 
    [ 85.000,  90.000) = 3 
    [ 90.000,  95.000) = 3 
    [ 95.000, 100.000) = 0 
    [100.000, 105.000) = 0 
    [105.000, 110.000) = 0 
    [110.000, 115.000) = 1 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 1 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 1 
    [150.000, 155.000) = 0 
    [155.000, 160.000) = 0 
    [160.000, 165.000) = 1 

  Percentiles, us/op:
      p(0.0000) =     83.290 us/op
     p(50.0000) =     92.614 us/op
     p(90.0000) =    166.146 us/op
     p(95.0000) =    169.861 us/op
     p(99.0000) =    169.861 us/op
     p(99.9000) =    169.861 us/op
     p(99.9900) =    169.861 us/op
     p(99.9990) =    169.861 us/op
     p(99.9999) =    169.861 us/op
    p(100.0000) =    169.861 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 30492.797 us/op
# Warmup Iteration   2: 15638.074 us/op
# Warmup Iteration   3: 15148.222 us/op
# Warmup Iteration   4: 15262.099 us/op
# Warmup Iteration   5: 14874.509 us/op
Iteration   1: 14856.581 us/op
Iteration   2: 14915.242 us/op
Iteration   3: 14923.305 us/op
Iteration   4: 15077.046 us/op
Iteration   5: 14775.996 us/op
Iteration   6: 14787.260 us/op
Iteration   7: 14837.026 us/op
Iteration   8: 14824.548 us/op
Iteration   9: 14550.905 us/op
Iteration  10: 14681.806 us/op
Iteration  11: 14629.017 us/op
Iteration  12: 14625.305 us/op
Iteration  13: 14700.107 us/op
Iteration  14: 14621.618 us/op
Iteration  15: 14544.221 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm":
  N = 15
  mean =  14756.666 ±(99.9%) 163.129 us/op

  Histogram, us/op:
    [14500.000, 14550.000) = 1 
    [14550.000, 14600.000) = 1 
    [14600.000, 14650.000) = 3 
    [14650.000, 14700.000) = 1 
    [14700.000, 14750.000) = 1 
    [14750.000, 14800.000) = 2 
    [14800.000, 14850.000) = 2 
    [14850.000, 14900.000) = 1 
    [14900.000, 14950.000) = 2 
    [14950.000, 15000.000) = 0 
    [15000.000, 15050.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  14544.221 us/op
     p(50.0000) =  14775.996 us/op
     p(90.0000) =  14984.801 us/op
     p(95.0000) =  15077.046 us/op
     p(99.0000) =  15077.046 us/op
     p(99.9000) =  15077.046 us/op
     p(99.9900) =  15077.046 us/op
     p(99.9990) =  15077.046 us/op
     p(99.9999) =  15077.046 us/op
    p(100.0000) =  15077.046 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 15482.135 us/op
# Warmup Iteration   2: 3172.827 us/op
# Warmup Iteration   3: 2678.346 us/op
# Warmup Iteration   4: 2632.874 us/op
# Warmup Iteration   5: 2456.745 us/op
Iteration   1: 2571.183 us/op
Iteration   2: 9170.288 us/op
Iteration   3: 1707.678 us/op
Iteration   4: 1730.210 us/op
Iteration   5: 1745.378 us/op
Iteration   6: 1906.734 us/op
Iteration   7: 1247.883 us/op
Iteration   8: 1087.668 us/op
Iteration   9: 1234.075 us/op
Iteration  10: 1227.840 us/op
Iteration  11: 1224.011 us/op
Iteration  12: 1138.020 us/op
Iteration  13: 1092.618 us/op
Iteration  14: 1083.840 us/op
Iteration  15: 1274.050 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean =   1962.765 ±(99.9%) 2177.205 us/op

  Histogram, us/op:
    [ 1000.000,  1500.000) = 9 
    [ 1500.000,  2000.000) = 4 
    [ 2000.000,  2500.000) = 0 
    [ 2500.000,  3000.000) = 1 
    [ 3000.000,  3500.000) = 0 
    [ 3500.000,  4000.000) = 0 
    [ 4000.000,  4500.000) = 0 
    [ 4500.000,  5000.000) = 0 
    [ 5000.000,  5500.000) = 0 
    [ 5500.000,  6000.000) = 0 
    [ 6000.000,  6500.000) = 0 
    [ 6500.000,  7000.000) = 0 
    [ 7000.000,  7500.000) = 0 
    [ 7500.000,  8000.000) = 0 
    [ 8000.000,  8500.000) = 0 
    [ 8500.000,  9000.000) = 0 
    [ 9000.000,  9500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   1083.840 us/op
     p(50.0000) =   1247.883 us/op
     p(90.0000) =   5210.825 us/op
     p(95.0000) =   9170.288 us/op
     p(99.0000) =   9170.288 us/op
     p(99.9000) =   9170.288 us/op
     p(99.9900) =   9170.288 us/op
     p(99.9990) =   9170.288 us/op
     p(99.9999) =   9170.288 us/op
    p(100.0000) =   9170.288 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 83558.031 us/op
# Warmup Iteration   2: 104522.706 us/op
# Warmup Iteration   3: 109824.056 us/op
# Warmup Iteration   4: 109414.746 us/op
# Warmup Iteration   5: 110056.047 us/op
Iteration   1: 110517.872 us/op
Iteration   2: 109671.043 us/op
Iteration   3: 110354.650 us/op
Iteration   4: 109672.752 us/op
Iteration   5: 110648.175 us/op
Iteration   6: 110737.625 us/op
Iteration   7: 109788.983 us/op
Iteration   8: 111436.477 us/op
Iteration   9: 110185.141 us/op
Iteration  10: 109931.454 us/op
Iteration  11: 109784.497 us/op
Iteration  12: 109642.299 us/op
Iteration  13: 109473.560 us/op
Iteration  14: 109489.646 us/op
Iteration  15: 112761.521 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean = 110273.046 ±(99.9%) 945.039 us/op

  Histogram, us/op:
    [109000.000, 109250.000) = 0 
    [109250.000, 109500.000) = 2 
    [109500.000, 109750.000) = 3 
    [109750.000, 110000.000) = 3 
    [110000.000, 110250.000) = 1 
    [110250.000, 110500.000) = 1 
    [110500.000, 110750.000) = 3 
    [110750.000, 111000.000) = 0 
    [111000.000, 111250.000) = 0 
    [111250.000, 111500.000) = 1 
    [111500.000, 111750.000) = 0 
    [111750.000, 112000.000) = 0 
    [112000.000, 112250.000) = 0 
    [112250.000, 112500.000) = 0 
    [112500.000, 112750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 109473.560 us/op
     p(50.0000) = 109931.454 us/op
     p(90.0000) = 111966.495 us/op
     p(95.0000) = 112761.521 us/op
     p(99.0000) = 112761.521 us/op
     p(99.9000) = 112761.521 us/op
     p(99.9900) = 112761.521 us/op
     p(99.9990) = 112761.521 us/op
     p(99.9999) = 112761.521 us/op
    p(100.0000) = 112761.521 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm
# Parameters: (length = 10000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3543379.564 us/op
# Warmup Iteration   2: 11055850.312 us/op
# Warmup Iteration   3: 11086829.623 us/op
# Warmup Iteration   4: 11090710.917 us/op
# Warmup Iteration   5: 11074449.839 us/op
Iteration   1: 11071686.877 us/op
Iteration   2: 11071939.811 us/op
Iteration   3: 11060306.459 us/op
Iteration   4: 11066022.787 us/op
Iteration   5: 11065140.665 us/op
Iteration   6: 11061497.025 us/op
Iteration   7: 11060465.048 us/op
Iteration   8: 11091632.284 us/op
Iteration   9: 11112698.669 us/op
Iteration  10: 11094071.445 us/op
Iteration  11: 11070470.134 us/op
Iteration  12: 11073804.533 us/op
Iteration  13: 11059370.014 us/op
Iteration  14: 11050920.942 us/op
Iteration  15: 11056710.914 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm":
  N = 15
  mean = 11071115.840 ±(99.9%) 17667.045 us/op

  Histogram, us/op:
    [11050000.000, 11055000.000) = 1 
    [11055000.000, 11060000.000) = 2 
    [11060000.000, 11065000.000) = 3 
    [11065000.000, 11070000.000) = 2 
    [11070000.000, 11075000.000) = 4 
    [11075000.000, 11080000.000) = 0 
    [11080000.000, 11085000.000) = 0 
    [11085000.000, 11090000.000) = 0 
    [11090000.000, 11095000.000) = 2 
    [11095000.000, 11100000.000) = 0 
    [11100000.000, 11105000.000) = 0 
    [11105000.000, 11110000.000) = 0 
    [11110000.000, 11115000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 11050920.942 us/op
     p(50.0000) = 11066022.787 us/op
     p(90.0000) = 11101522.335 us/op
     p(95.0000) = 11112698.669 us/op
     p(99.0000) = 11112698.669 us/op
     p(99.9000) = 11112698.669 us/op
     p(99.9900) = 11112698.669 us/op
     p(99.9990) = 11112698.669 us/op
     p(99.9999) = 11112698.669 us/op
    p(100.0000) = 11112698.669 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 21339.765 us/op
# Warmup Iteration   2: 10573.059 us/op
# Warmup Iteration   3: 1958.240 us/op
# Warmup Iteration   4: 1885.741 us/op
# Warmup Iteration   5: 1896.408 us/op
Iteration   1: 1916.100 us/op
Iteration   2: 1925.281 us/op
Iteration   3: 1892.984 us/op
Iteration   4: 1910.051 us/op
Iteration   5: 1898.720 us/op
Iteration   6: 1917.789 us/op
Iteration   7: 1902.624 us/op
Iteration   8: 1919.057 us/op
Iteration   9: 1907.041 us/op
Iteration  10: 1902.601 us/op
Iteration  11: 1943.862 us/op
Iteration  12: 1880.068 us/op
Iteration  13: 1935.998 us/op
Iteration  14: 1917.311 us/op
Iteration  15: 1912.634 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue":
  N = 15
  mean =   1912.141 ±(99.9%) 17.281 us/op

  Histogram, us/op:
    [1880.000, 1885.000) = 1 
    [1885.000, 1890.000) = 0 
    [1890.000, 1895.000) = 1 
    [1895.000, 1900.000) = 1 
    [1900.000, 1905.000) = 2 
    [1905.000, 1910.000) = 1 
    [1910.000, 1915.000) = 2 
    [1915.000, 1920.000) = 4 
    [1920.000, 1925.000) = 0 
    [1925.000, 1930.000) = 1 
    [1930.000, 1935.000) = 0 
    [1935.000, 1940.000) = 1 
    [1940.000, 1945.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   1880.068 us/op
     p(50.0000) =   1912.634 us/op
     p(90.0000) =   1939.144 us/op
     p(95.0000) =   1943.862 us/op
     p(99.0000) =   1943.862 us/op
     p(99.9000) =   1943.862 us/op
     p(99.9900) =   1943.862 us/op
     p(99.9990) =   1943.862 us/op
     p(99.9999) =   1943.862 us/op
    p(100.0000) =   1943.862 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 59785.122 us/op
# Warmup Iteration   2: 51489.174 us/op
# Warmup Iteration   3: 46920.922 us/op
# Warmup Iteration   4: 46739.113 us/op
# Warmup Iteration   5: 47050.953 us/op
Iteration   1: 47285.471 us/op
Iteration   2: 46968.261 us/op
Iteration   3: 46967.428 us/op
Iteration   4: 47134.409 us/op
Iteration   5: 46984.471 us/op
Iteration   6: 46970.007 us/op
Iteration   7: 46966.509 us/op
Iteration   8: 47233.553 us/op
Iteration   9: 46736.296 us/op
Iteration  10: 46969.246 us/op
Iteration  11: 47066.178 us/op
Iteration  12: 47015.183 us/op
Iteration  13: 47148.226 us/op
Iteration  14: 46923.443 us/op
Iteration  15: 46897.820 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.extractOperationOutOfLoop":
  N = 15
  mean =  47017.767 ±(99.9%) 147.656 us/op

  Histogram, us/op:
    [46700.000, 46750.000) = 1 
    [46750.000, 46800.000) = 0 
    [46800.000, 46850.000) = 0 
    [46850.000, 46900.000) = 1 
    [46900.000, 46950.000) = 1 
    [46950.000, 47000.000) = 6 
    [47000.000, 47050.000) = 1 
    [47050.000, 47100.000) = 1 
    [47100.000, 47150.000) = 2 
    [47150.000, 47200.000) = 0 
    [47200.000, 47250.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  46736.296 us/op
     p(50.0000) =  46970.007 us/op
     p(90.0000) =  47254.320 us/op
     p(95.0000) =  47285.471 us/op
     p(99.0000) =  47285.471 us/op
     p(99.9000) =  47285.471 us/op
     p(99.9900) =  47285.471 us/op
     p(99.9990) =  47285.471 us/op
     p(99.9999) =  47285.471 us/op
    p(100.0000) =  47285.471 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1758999.834 us/op
# Warmup Iteration   2: 1736635.833 us/op
# Warmup Iteration   3: 1715746.269 us/op
# Warmup Iteration   4: 1711911.099 us/op
# Warmup Iteration   5: 1715612.629 us/op
Iteration   1: 1716375.386 us/op
Iteration   2: 1714457.308 us/op
Iteration   3: 1715814.939 us/op
Iteration   4: 1715216.463 us/op
Iteration   5: 1714084.479 us/op
Iteration   6: 1716732.781 us/op
Iteration   7: 1716402.465 us/op
Iteration   8: 1715505.899 us/op
Iteration   9: 1713372.322 us/op
Iteration  10: 1709500.572 us/op
Iteration  11: 1710977.223 us/op
Iteration  12: 1718047.057 us/op
Iteration  13: 1714375.093 us/op
Iteration  14: 1714238.873 us/op
Iteration  15: 1717548.078 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceLoops":
  N = 15
  mean = 1714843.263 ±(99.9%) 2464.727 us/op

  Histogram, us/op:
    [1709000.000, 1710000.000) = 1 
    [1710000.000, 1711000.000) = 1 
    [1711000.000, 1712000.000) = 0 
    [1712000.000, 1713000.000) = 0 
    [1713000.000, 1714000.000) = 1 
    [1714000.000, 1715000.000) = 4 
    [1715000.000, 1716000.000) = 3 
    [1716000.000, 1717000.000) = 3 
    [1717000.000, 1718000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 1709500.572 us/op
     p(50.0000) = 1715216.463 us/op
     p(90.0000) = 1717747.670 us/op
     p(95.0000) = 1718047.057 us/op
     p(99.0000) = 1718047.057 us/op
     p(99.9000) = 1718047.057 us/op
     p(99.9900) = 1718047.057 us/op
     p(99.9990) = 1718047.057 us/op
     p(99.9999) = 1718047.057 us/op
    p(100.0000) = 1718047.057 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 273.317 us/op
# Warmup Iteration   2: 10.830 us/op
# Warmup Iteration   3: 10.481 us/op
# Warmup Iteration   4: 10.721 us/op
# Warmup Iteration   5: 10.748 us/op
Iteration   1: 10.793 us/op
Iteration   2: 10.604 us/op
Iteration   3: 20.844 us/op
Iteration   4: 11.615 us/op
Iteration   5: 10.475 us/op
Iteration   6: 10.107 us/op
Iteration   7: 11.410 us/op
Iteration   8: 14.715 us/op
Iteration   9: 10.943 us/op
Iteration  10: 11.375 us/op
Iteration  11: 15.668 us/op
Iteration  12: 10.012 us/op
Iteration  13: 13.957 us/op
Iteration  14: 10.257 us/op
Iteration  15: 12.880 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks":
  N = 15
  mean =     12.377 ±(99.9%) 3.128 us/op

  Histogram, us/op:
    [10.000, 11.250) = 7 
    [11.250, 12.500) = 3 
    [12.500, 13.750) = 1 
    [13.750, 15.000) = 2 
    [15.000, 16.250) = 1 
    [16.250, 17.500) = 0 
    [17.500, 18.750) = 0 
    [18.750, 20.000) = 0 
    [20.000, 21.250) = 1 
    [21.250, 22.500) = 0 
    [22.500, 23.750) = 0 
    [23.750, 25.000) = 0 
    [25.000, 26.250) = 0 
    [26.250, 27.500) = 0 
    [27.500, 28.750) = 0 

  Percentiles, us/op:
      p(0.0000) =     10.012 us/op
     p(50.0000) =     11.375 us/op
     p(90.0000) =     17.738 us/op
     p(95.0000) =     20.844 us/op
     p(99.0000) =     20.844 us/op
     p(99.9000) =     20.844 us/op
     p(99.9900) =     20.844 us/op
     p(99.9990) =     20.844 us/op
     p(99.9999) =     20.844 us/op
    p(100.0000) =     20.844 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 24225.196 us/op
# Warmup Iteration   2: 14810.830 us/op
# Warmup Iteration   3: 8842.837 us/op
# Warmup Iteration   4: 9002.860 us/op
# Warmup Iteration   5: 8858.817 us/op
Iteration   1: 8753.180 us/op
Iteration   2: 9256.124 us/op
Iteration   3: 9127.787 us/op
Iteration   4: 9043.810 us/op
Iteration   5: 9040.376 us/op
Iteration   6: 9784.097 us/op
Iteration   7: 9041.069 us/op
Iteration   8: 8336.512 us/op
Iteration   9: 8309.842 us/op
Iteration  10: 8525.237 us/op
Iteration  11: 8365.121 us/op
Iteration  12: 8335.924 us/op
Iteration  13: 8395.444 us/op
Iteration  14: 8323.772 us/op
Iteration  15: 8392.703 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.reduceYoungObjects":
  N = 15
  mean =   8735.400 ±(99.9%) 485.745 us/op

  Histogram, us/op:
    [ 8000.000,  8125.000) = 0 
    [ 8125.000,  8250.000) = 0 
    [ 8250.000,  8375.000) = 5 
    [ 8375.000,  8500.000) = 2 
    [ 8500.000,  8625.000) = 1 
    [ 8625.000,  8750.000) = 0 
    [ 8750.000,  8875.000) = 1 
    [ 8875.000,  9000.000) = 0 
    [ 9000.000,  9125.000) = 3 
    [ 9125.000,  9250.000) = 1 
    [ 9250.000,  9375.000) = 1 
    [ 9375.000,  9500.000) = 0 
    [ 9500.000,  9625.000) = 0 
    [ 9625.000,  9750.000) = 0 
    [ 9750.000,  9875.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   8309.842 us/op
     p(50.0000) =   8525.237 us/op
     p(90.0000) =   9467.313 us/op
     p(95.0000) =   9784.097 us/op
     p(99.0000) =   9784.097 us/op
     p(99.9000) =   9784.097 us/op
     p(99.9900) =   9784.097 us/op
     p(99.9990) =   9784.097 us/op
     p(99.9999) =   9784.097 us/op
    p(100.0000) =   9784.097 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 62809.951 us/op
# Warmup Iteration   2: 46943.259 us/op
# Warmup Iteration   3: 30738.901 us/op
# Warmup Iteration   4: 30325.666 us/op
# Warmup Iteration   5: 32674.430 us/op
Iteration   1: 35344.709 us/op
Iteration   2: 31073.512 us/op
Iteration   3: 33940.614 us/op
Iteration   4: 31733.133 us/op
Iteration   5: 35620.285 us/op
Iteration   6: 33748.453 us/op
Iteration   7: 33221.754 us/op
Iteration   8: 36865.060 us/op
Iteration   9: 31666.123 us/op
Iteration  10: 35925.687 us/op
Iteration  11: 32098.163 us/op
Iteration  12: 34149.619 us/op
Iteration  13: 36955.243 us/op
Iteration  14: 32232.890 us/op
Iteration  15: 33135.066 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.simples.JitCompilerBenchmarks.redundantCode":
  N = 15
  mean =  33847.354 ±(99.9%) 2061.672 us/op

  Histogram, us/op:
    [31000.000, 31500.000) = 1 
    [31500.000, 32000.000) = 2 
    [32000.000, 32500.000) = 2 
    [32500.000, 33000.000) = 0 
    [33000.000, 33500.000) = 2 
    [33500.000, 34000.000) = 2 
    [34000.000, 34500.000) = 1 
    [34500.000, 35000.000) = 0 
    [35000.000, 35500.000) = 1 
    [35500.000, 36000.000) = 2 
    [36000.000, 36500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  31073.512 us/op
     p(50.0000) =  33748.453 us/op
     p(90.0000) =  36901.133 us/op
     p(95.0000) =  36955.243 us/op
     p(99.0000) =  36955.243 us/op
     p(99.9000) =  36955.243 us/op
     p(99.9900) =  36955.243 us/op
     p(99.9990) =  36955.243 us/op
     p(99.9999) =  36955.243 us/op
    p(100.0000) =  36955.243 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 77799.048 us/op
# Warmup Iteration   2: 31206.373 us/op
# Warmup Iteration   3: 24411.827 us/op
# Warmup Iteration   4: 24516.170 us/op
# Warmup Iteration   5: 24633.007 us/op
Iteration   1: 24392.057 us/op
Iteration   2: 24779.897 us/op
Iteration   3: 24462.040 us/op
Iteration   4: 24318.054 us/op
Iteration   5: 24509.368 us/op
Iteration   6: 24392.206 us/op
Iteration   7: 24299.434 us/op
Iteration   8: 24572.370 us/op
Iteration   9: 24939.593 us/op
Iteration  10: 24376.755 us/op
Iteration  11: 24852.264 us/op
Iteration  12: 24375.178 us/op
Iteration  13: 24398.175 us/op
Iteration  14: 24553.819 us/op
Iteration  15: 24444.991 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.split.SplittingListBenchmark.split":
  N = 15
  mean =  24511.080 ±(99.9%) 210.786 us/op

  Histogram, us/op:
    [24200.000, 24250.000) = 0 
    [24250.000, 24300.000) = 1 
    [24300.000, 24350.000) = 1 
    [24350.000, 24400.000) = 5 
    [24400.000, 24450.000) = 1 
    [24450.000, 24500.000) = 1 
    [24500.000, 24550.000) = 1 
    [24550.000, 24600.000) = 2 
    [24600.000, 24650.000) = 0 
    [24650.000, 24700.000) = 0 
    [24700.000, 24750.000) = 0 
    [24750.000, 24800.000) = 1 
    [24800.000, 24850.000) = 0 
    [24850.000, 24900.000) = 1 
    [24900.000, 24950.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  24299.434 us/op
     p(50.0000) =  24444.991 us/op
     p(90.0000) =  24887.196 us/op
     p(95.0000) =  24939.593 us/op
     p(99.0000) =  24939.593 us/op
     p(99.9000) =  24939.593 us/op
     p(99.9900) =  24939.593 us/op
     p(99.9990) =  24939.593 us/op
     p(99.9999) =  24939.593 us/op
    p(100.0000) =  24939.593 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 42696.427 us/op
# Warmup Iteration   2: 20327.701 us/op
# Warmup Iteration   3: 21586.541 us/op
# Warmup Iteration   4: 21699.216 us/op
# Warmup Iteration   5: 21841.765 us/op
Iteration   1: 20953.523 us/op
Iteration   2: 20842.124 us/op
Iteration   3: 20803.251 us/op
Iteration   4: 20737.946 us/op
Iteration   5: 20841.420 us/op
Iteration   6: 20976.256 us/op
Iteration   7: 20737.762 us/op
Iteration   8: 20915.935 us/op
Iteration   9: 20817.669 us/op
Iteration  10: 20681.013 us/op
Iteration  11: 21421.801 us/op
Iteration  12: 20924.735 us/op
Iteration  13: 20903.613 us/op
Iteration  14: 20899.223 us/op
Iteration  15: 20779.144 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.mapToPair":
  N = 15
  mean =  20882.361 ±(99.9%) 184.113 us/op

  Histogram, us/op:
    [20600.000, 20650.000) = 0 
    [20650.000, 20700.000) = 1 
    [20700.000, 20750.000) = 2 
    [20750.000, 20800.000) = 1 
    [20800.000, 20850.000) = 4 
    [20850.000, 20900.000) = 1 
    [20900.000, 20950.000) = 3 
    [20950.000, 21000.000) = 2 
    [21000.000, 21050.000) = 0 
    [21050.000, 21100.000) = 0 
    [21100.000, 21150.000) = 0 
    [21150.000, 21200.000) = 0 
    [21200.000, 21250.000) = 0 
    [21250.000, 21300.000) = 0 
    [21300.000, 21350.000) = 0 
    [21350.000, 21400.000) = 0 
    [21400.000, 21450.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  20681.013 us/op
     p(50.0000) =  20842.124 us/op
     p(90.0000) =  21154.474 us/op
     p(95.0000) =  21421.801 us/op
     p(99.0000) =  21421.801 us/op
     p(99.9000) =  21421.801 us/op
     p(99.9900) =  21421.801 us/op
     p(99.9990) =  21421.801 us/op
     p(99.9999) =  21421.801 us/op
    p(100.0000) =  21421.801 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 32555.004 us/op
# Warmup Iteration   2: 19220.985 us/op
# Warmup Iteration   3: 13754.185 us/op
# Warmup Iteration   4: 13617.938 us/op
# Warmup Iteration   5: 13706.694 us/op
Iteration   1: 13672.850 us/op
Iteration   2: 13817.249 us/op
Iteration   3: 13584.845 us/op
Iteration   4: 13708.136 us/op
Iteration   5: 13751.725 us/op
Iteration   6: 13794.969 us/op
Iteration   7: 13687.231 us/op
Iteration   8: 13713.266 us/op
Iteration   9: 14231.446 us/op
Iteration  10: 13850.926 us/op
Iteration  11: 13800.888 us/op
Iteration  12: 13808.277 us/op
Iteration  13: 13777.191 us/op
Iteration  14: 13724.251 us/op
Iteration  15: 13768.446 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.plusOne":
  N = 15
  mean =  13779.446 ±(99.9%) 152.134 us/op

  Histogram, us/op:
    [13500.000, 13550.000) = 0 
    [13550.000, 13600.000) = 1 
    [13600.000, 13650.000) = 0 
    [13650.000, 13700.000) = 2 
    [13700.000, 13750.000) = 3 
    [13750.000, 13800.000) = 4 
    [13800.000, 13850.000) = 3 
    [13850.000, 13900.000) = 1 
    [13900.000, 13950.000) = 0 
    [13950.000, 14000.000) = 0 
    [14000.000, 14050.000) = 0 
    [14050.000, 14100.000) = 0 
    [14100.000, 14150.000) = 0 
    [14150.000, 14200.000) = 0 
    [14200.000, 14250.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  13584.845 us/op
     p(50.0000) =  13768.446 us/op
     p(90.0000) =  14003.134 us/op
     p(95.0000) =  14231.446 us/op
     p(99.0000) =  14231.446 us/op
     p(99.9000) =  14231.446 us/op
     p(99.9900) =  14231.446 us/op
     p(99.9990) =  14231.446 us/op
     p(99.9999) =  14231.446 us/op
    p(100.0000) =  14231.446 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 71068.919 us/op
# Warmup Iteration   2: 41687.651 us/op
# Warmup Iteration   3: 33062.570 us/op
# Warmup Iteration   4: 34004.413 us/op
# Warmup Iteration   5: 33612.790 us/op
Iteration   1: 34235.881 us/op
Iteration   2: 34060.590 us/op
Iteration   3: 32446.103 us/op
Iteration   4: 32926.300 us/op
Iteration   5: 33777.445 us/op
Iteration   6: 32848.288 us/op
Iteration   7: 33254.173 us/op
Iteration   8: 33071.434 us/op
Iteration   9: 33232.619 us/op
Iteration  10: 33595.108 us/op
Iteration  11: 34605.885 us/op
Iteration  12: 32958.495 us/op
Iteration  13: 33898.241 us/op
Iteration  14: 32737.853 us/op
Iteration  15: 34799.197 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stream.StreamBenchmark.sort":
  N = 15
  mean =  33496.507 ±(99.9%) 759.461 us/op

  Histogram, us/op:
    [32000.000, 32250.000) = 0 
    [32250.000, 32500.000) = 1 
    [32500.000, 32750.000) = 1 
    [32750.000, 33000.000) = 3 
    [33000.000, 33250.000) = 2 
    [33250.000, 33500.000) = 1 
    [33500.000, 33750.000) = 1 
    [33750.000, 34000.000) = 2 
    [34000.000, 34250.000) = 2 
    [34250.000, 34500.000) = 0 
    [34500.000, 34750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  32446.103 us/op
     p(50.0000) =  33254.173 us/op
     p(90.0000) =  34683.210 us/op
     p(95.0000) =  34799.197 us/op
     p(99.0000) =  34799.197 us/op
     p(99.9000) =  34799.197 us/op
     p(99.9900) =  34799.197 us/op
     p(99.9990) =  34799.197 us/op
     p(99.9999) =  34799.197 us/op
    p(100.0000) =  34799.197 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 10)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5789.248 us/op
# Warmup Iteration   2: 6643.580 us/op
# Warmup Iteration   3: 7082.780 us/op
# Warmup Iteration   4: 6566.939 us/op
# Warmup Iteration   5: 6429.854 us/op
Iteration   1: 6934.319 us/op
Iteration   2: 6525.565 us/op
Iteration   3: 6534.331 us/op
Iteration   4: 6632.595 us/op
Iteration   5: 6517.888 us/op
Iteration   6: 6938.928 us/op
Iteration   7: 6536.313 us/op
Iteration   8: 6915.540 us/op
Iteration   9: 6511.398 us/op
Iteration  10: 6520.219 us/op
Iteration  11: 6409.062 us/op
Iteration  12: 6619.178 us/op
Iteration  13: 6529.962 us/op
Iteration  14: 6643.738 us/op
Iteration  15: 6705.192 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean =   6631.615 ±(99.9%) 181.122 us/op

  Histogram, us/op:
    [6400.000, 6450.000) = 1 
    [6450.000, 6500.000) = 0 
    [6500.000, 6550.000) = 7 
    [6550.000, 6600.000) = 0 
    [6600.000, 6650.000) = 3 
    [6650.000, 6700.000) = 0 
    [6700.000, 6750.000) = 1 
    [6750.000, 6800.000) = 0 
    [6800.000, 6850.000) = 0 
    [6850.000, 6900.000) = 0 
    [6900.000, 6950.000) = 3 

  Percentiles, us/op:
      p(0.0000) =   6409.062 us/op
     p(50.0000) =   6536.313 us/op
     p(90.0000) =   6936.163 us/op
     p(95.0000) =   6938.928 us/op
     p(99.0000) =   6938.928 us/op
     p(99.9000) =   6938.928 us/op
     p(99.9900) =   6938.928 us/op
     p(99.9990) =   6938.928 us/op
     p(99.9999) =   6938.928 us/op
    p(100.0000) =   6938.928 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 100)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 63307.066 us/op
# Warmup Iteration   2: 63121.086 us/op
# Warmup Iteration   3: 62648.127 us/op
# Warmup Iteration   4: 62352.745 us/op
# Warmup Iteration   5: 62660.342 us/op
Iteration   1: 62118.365 us/op
Iteration   2: 63456.872 us/op
Iteration   3: 62724.546 us/op
Iteration   4: 63299.230 us/op
Iteration   5: 62329.485 us/op
Iteration   6: 62913.587 us/op
Iteration   7: 62524.630 us/op
Iteration   8: 62371.613 us/op
Iteration   9: 62651.891 us/op
Iteration  10: 63465.806 us/op
Iteration  11: 63828.607 us/op
Iteration  12: 65019.965 us/op
Iteration  13: 63974.083 us/op
Iteration  14: 62523.472 us/op
Iteration  15: 63024.158 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean =  63081.754 ±(99.9%) 828.612 us/op

  Histogram, us/op:
    [62000.000, 62250.000) = 1 
    [62250.000, 62500.000) = 2 
    [62500.000, 62750.000) = 4 
    [62750.000, 63000.000) = 1 
    [63000.000, 63250.000) = 1 
    [63250.000, 63500.000) = 3 
    [63500.000, 63750.000) = 0 
    [63750.000, 64000.000) = 2 
    [64000.000, 64250.000) = 0 
    [64250.000, 64500.000) = 0 
    [64500.000, 64750.000) = 0 
    [64750.000, 65000.000) = 0 
    [65000.000, 65250.000) = 1 
    [65250.000, 65500.000) = 0 
    [65500.000, 65750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  62118.365 us/op
     p(50.0000) =  62913.587 us/op
     p(90.0000) =  64392.436 us/op
     p(95.0000) =  65019.965 us/op
     p(99.0000) =  65019.965 us/op
     p(99.9000) =  65019.965 us/op
     p(99.9900) =  65019.965 us/op
     p(99.9990) =  65019.965 us/op
     p(99.9999) =  65019.965 us/op
    p(100.0000) =  65019.965 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings
# Parameters: (length = 1000)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 722265.807 us/op
# Warmup Iteration   2: 715308.441 us/op
# Warmup Iteration   3: 721766.214 us/op
# Warmup Iteration   4: 717232.284 us/op
# Warmup Iteration   5: 723703.191 us/op
Iteration   1: 715372.234 us/op
Iteration   2: 718363.598 us/op
Iteration   3: 720333.717 us/op
Iteration   4: 723893.595 us/op
Iteration   5: 725609.043 us/op
Iteration   6: 715138.682 us/op
Iteration   7: 714038.609 us/op
Iteration   8: 719529.897 us/op
Iteration   9: 718512.429 us/op
Iteration  10: 721080.091 us/op
Iteration  11: 719771.464 us/op
Iteration  12: 716801.615 us/op
Iteration  13: 712916.254 us/op
Iteration  14: 715045.926 us/op
Iteration  15: 720006.212 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.stringconcatenation.StringConcatenationBenchmark.concatenateStrings":
  N = 15
  mean = 718427.558 ±(99.9%) 3849.398 us/op

  Histogram, us/op:
    [710000.000, 711250.000) = 0 
    [711250.000, 712500.000) = 0 
    [712500.000, 713750.000) = 1 
    [713750.000, 715000.000) = 1 
    [715000.000, 716250.000) = 3 
    [716250.000, 717500.000) = 1 
    [717500.000, 718750.000) = 2 
    [718750.000, 720000.000) = 2 
    [720000.000, 721250.000) = 3 
    [721250.000, 722500.000) = 0 
    [722500.000, 723750.000) = 0 
    [723750.000, 725000.000) = 1 
    [725000.000, 726250.000) = 1 
    [726250.000, 727500.000) = 0 
    [727500.000, 728750.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 712916.254 us/op
     p(50.0000) = 718512.429 us/op
     p(90.0000) = 724579.774 us/op
     p(95.0000) = 725609.043 us/op
     p(99.0000) = 725609.043 us/op
     p(99.9000) = 725609.043 us/op
     p(99.9900) = 725609.043 us/op
     p(99.9990) = 725609.043 us/op
     p(99.9999) = 725609.043 us/op
    p(100.0000) = 725609.043 us/op


# JMH version: 1.29
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /home/kamykbb/jdk8u292-b10/jre/bin/java
# VM options: -Xms2g -Xmx2g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, single-shot each
# Measurement: 15 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1770719.242 us/op
# Warmup Iteration   2: 1784097.719 us/op
# Warmup Iteration   3: 1789789.067 us/op
# Warmup Iteration   4: 1781694.737 us/op
# Warmup Iteration   5: 1779396.674 us/op
Iteration   1: 1775486.160 us/op
Iteration   2: 1790237.255 us/op
Iteration   3: 1770156.922 us/op
Iteration   4: 1772900.712 us/op
Iteration   5: 1771334.107 us/op
Iteration   6: 1775622.577 us/op
Iteration   7: 1793909.944 us/op
Iteration   8: 1786795.532 us/op
Iteration   9: 1786311.914 us/op
Iteration  10: 1791823.906 us/op
Iteration  11: 1798912.515 us/op
Iteration  12: 1790017.441 us/op
Iteration  13: 1796170.709 us/op
Iteration  14: 1790206.049 us/op
Iteration  15: 1801154.249 us/op


Result "com.github.kbreczko.jmhbenchmarks.benchmarks.tree.TreeBenchmark.createNewObjectsWithRecursive":
  N = 15
  mean = 1786069.333 ±(99.9%) 11083.043 us/op

  Histogram, us/op:
    [1770000.000, 1772500.000) = 2 
    [1772500.000, 1775000.000) = 1 
    [1775000.000, 1777500.000) = 2 
    [1777500.000, 1780000.000) = 0 
    [1780000.000, 1782500.000) = 0 
    [1782500.000, 1785000.000) = 0 
    [1785000.000, 1787500.000) = 2 
    [1787500.000, 1790000.000) = 0 
    [1790000.000, 1792500.000) = 4 
    [1792500.000, 1795000.000) = 1 
    [1795000.000, 1797500.000) = 1 
    [1797500.000, 1800000.000) = 1 
    [1800000.000, 1802500.000) = 1 
    [1802500.000, 1805000.000) = 0 
    [1805000.000, 1807500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 1770156.922 us/op
     p(50.0000) = 1790017.441 us/op
     p(90.0000) = 1799809.209 us/op
     p(95.0000) = 1801154.249 us/op
     p(99.0000) = 1801154.249 us/op
     p(99.9000) = 1801154.249 us/op
     p(99.9900) = 1801154.249 us/op
     p(99.9990) = 1801154.249 us/op
     p(99.9999) = 1801154.249 us/op
    p(100.0000) = 1801154.249 us/op


# Run complete. Total time: 08:53:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                    (iterations)  (length)     (size)    Mode      Cnt         Score        Error   Units
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A   thrpt       15         0.003 ±      0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A   thrpt       15         0.006 ±      0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A   thrpt       15         0.003 ±      0.001  ops/us
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A   thrpt       15         0.005 ±      0.001  ops/us
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A   thrpt       15        ≈ 10⁻⁷               ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A   thrpt       15         0.535 ±      0.001  ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A   thrpt       15         0.200 ±      0.001  ops/us
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A   thrpt       15         0.111 ±      0.001  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10   thrpt       15        25.053 ±      0.249  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100   thrpt       15         2.857 ±      0.031  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000   thrpt       15         0.253 ±      0.004  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10   thrpt       15        23.376 ±      0.522  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100   thrpt       15         3.377 ±      0.186  ops/us
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000   thrpt       15         0.262 ±      0.003  ops/us
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A   thrpt       15         0.003 ±      0.001  ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A   thrpt       15        ≈ 10⁻⁷               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A   thrpt       15         0.001 ±      0.001  ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A   thrpt       15         1.921 ±      0.017  ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A   thrpt       15         0.001 ±      0.001  ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A   thrpt       15        ≈ 10⁻⁴               ops/us
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A   thrpt       15        ≈ 10⁻⁵               ops/us
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A   thrpt       15        ≈ 10⁻⁶               ops/us
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024    avgt       15    229261.973 ±   1148.851   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240    avgt       15    225088.859 ±    557.066   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400    avgt       15    206887.518 ±    488.619   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576    avgt       15    205137.183 ±    915.077   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760    avgt       15    195230.878 ±  21277.224   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600    avgt       15    199949.848 ±    670.777   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024    avgt       15   1413974.124 ±   8973.754   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240    avgt       15   1026095.957 ±   3966.850   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400    avgt       15    868921.459 ±   4137.325   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576    avgt       15    859056.087 ±   3247.553   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760    avgt       15    780149.998 ±  46406.666   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600    avgt       15    936871.337 ±   2249.870   us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A    avgt       15       383.890 ±      2.556   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A    avgt       15       169.359 ±      0.612   us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A    avgt       15       201.389 ±      0.166   us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A    avgt       15       183.117 ±      2.450   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A    avgt       15   1077136.353 ±   1648.139   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A    avgt       15    915006.594 ±  27980.049   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A    avgt       15  19951614.267 ± 595637.063   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A    avgt       15         1.868 ±      0.001   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A    avgt       15         5.465 ±      0.022   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A    avgt       15         9.415 ±      0.024   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10    avgt       15         0.040 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100    avgt       15         0.350 ±      0.004   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000    avgt       15         3.957 ±      0.077   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10    avgt       15         0.043 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100    avgt       15         0.350 ±      0.007   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000    avgt       15         4.027 ±      0.048   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A    avgt       15     14619.682 ±      9.363   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A    avgt       15       348.060 ±      1.026   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A    avgt       15     35235.026 ±    105.806   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A    avgt       15   3654763.810 ±  14178.275   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A    avgt       15      1896.856 ±      2.496   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A    avgt       15     46948.170 ±     24.270   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A    avgt       15   1713710.328 ±   1675.315   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A    avgt       15         0.509 ±      0.004   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A    avgt       15      8360.936 ±      6.444   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A    avgt       15     35235.276 ±   1472.603   us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A    avgt       15     30524.536 ±    110.336   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A    avgt       15     22354.537 ±    116.620   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A    avgt       15     13969.791 ±     31.361   us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A    avgt       15     32979.352 ±    970.397   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A    avgt       15      1275.506 ±      4.685   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A    avgt       15     13389.568 ±     52.111   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A    avgt       15    305154.134 ± 176960.500   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A    avgt       15   1709016.392 ±  11968.353   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024  sample      660    230752.653 ±    575.235   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A       1024  sample             215220.224                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A       1024  sample             231211.008                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A       1024  sample             235929.600                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A       1024  sample             236978.176                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A       1024  sample             240066.232                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A       1024  sample             244056.064                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A       1024  sample             244056.064                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A       1024  sample             244056.064                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240  sample      675    225050.818 ±    198.157   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A      10240  sample             220987.392                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A      10240  sample             225181.696                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A      10240  sample             227016.704                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A      10240  sample             227540.992                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A      10240  sample             228589.568                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A      10240  sample             230424.576                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A      10240  sample             230424.576                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A      10240  sample             230424.576                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400  sample      735    206315.174 ±    172.853   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A     102400  sample             201850.880                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A     102400  sample             206307.328                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A     102400  sample             208142.336                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A     102400  sample             208666.624                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A     102400  sample             209620.828                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A     102400  sample             212860.928                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A     102400  sample             212860.928                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A     102400  sample             212860.928                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576  sample      738    204583.856 ±    200.237   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A    1048576  sample             199753.728                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A    1048576  sample             204734.464                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A    1048576  sample             206569.472                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A    1048576  sample             207093.760                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A    1048576  sample             207880.192                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A    1048576  sample             210501.632                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A    1048576  sample             210501.632                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A    1048576  sample             210501.632                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760  sample      781    193254.168 ±   2550.635   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A   10485760  sample             149159.936                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A   10485760  sample             204472.320                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A   10485760  sample             206307.328                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A   10485760  sample             206831.616                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A   10485760  sample             207618.048                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A   10485760  sample             208404.480                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A   10485760  sample             208404.480                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A   10485760  sample             208404.480                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600  sample      751    200483.263 ±    164.962   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.00                                      N/A       N/A  104857600  sample             195559.424                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.50                                      N/A       N/A  104857600  sample             200540.160                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.90                                      N/A       N/A  104857600  sample             202113.024                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.95                                      N/A       N/A  104857600  sample             202375.168                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.99                                      N/A       N/A  104857600  sample             203161.600                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.999                                     N/A       N/A  104857600  sample             204996.608                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p0.9999                                    N/A       N/A  104857600  sample             204996.608                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects:createNewObjects·p1.00                                      N/A       N/A  104857600  sample             204996.608                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024  sample      120   1418199.040 ±  19022.747   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A       1024  sample            1258291.200                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A       1024  sample            1430257.664                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A       1024  sample            1475975.578                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A       1024  sample            1480589.312                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A       1024  sample            1501560.832                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A       1024  sample            1501560.832                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A       1024  sample            1501560.832                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A       1024  sample            1501560.832                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240  sample      150   1026527.942 ±  14884.726   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A      10240  sample             933232.640                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A      10240  sample            1029701.632                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A      10240  sample            1103101.952                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A      10240  sample            1112434.278                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A      10240  sample            1126170.624                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A      10240  sample            1126170.624                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A      10240  sample            1126170.624                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A      10240  sample            1126170.624                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400  sample      180    869438.441 ±   9021.367   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A     102400  sample             801112.064                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A     102400  sample             870842.368                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A     102400  sample             914358.272                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A     102400  sample             926941.184                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A     102400  sample             935529.021                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A     102400  sample             936378.368                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A     102400  sample             936378.368                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A     102400  sample             936378.368                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576  sample      180    860665.355 ±  10424.937   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A    1048576  sample             776994.816                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A    1048576  sample             858783.744                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A    1048576  sample             921593.446                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A    1048576  sample             933232.640                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A    1048576  sample             955189.821                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A    1048576  sample             977272.832                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A    1048576  sample             977272.832                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A    1048576  sample             977272.832                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760  sample      203    773441.021 ±  13632.793   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A   10485760  sample             678428.672                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A   10485760  sample             767557.632                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A   10485760  sample             862558.618                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A   10485760  sample             890450.739                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A   10485760  sample             915364.905                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A   10485760  sample             922746.880                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A   10485760  sample             922746.880                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A   10485760  sample             922746.880                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600  sample      165    937598.529 ±  17102.196   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.00                                                      N/A       N/A  104857600  sample             858783.744                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.50                                                      N/A       N/A  104857600  sample             916455.424                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.90                                                      N/A       N/A  104857600  sample            1060110.336                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.95                                                      N/A       N/A  104857600  sample            1063990.067                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.99                                                      N/A       N/A  104857600  sample            1066758.308                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.999                                                     N/A       N/A  104857600  sample            1067450.368                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p0.9999                                                    N/A       N/A  104857600  sample            1067450.368                us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap:fillHeap·p1.00                                                      N/A       N/A  104857600  sample            1067450.368                us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A  sample   392538       381.716 ±      0.120   us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.00                                                                        N/A       N/A        N/A  sample                370.176                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.50                                                                        N/A       N/A        N/A  sample                377.344                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.90                                                                        N/A       N/A        N/A  sample                394.240                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.95                                                                        N/A       N/A        N/A  sample                402.432                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.99                                                                        N/A       N/A        N/A  sample                445.440                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.999                                                                       N/A       N/A        N/A  sample                634.880                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p0.9999                                                                      N/A       N/A        N/A  sample                762.620                us/op
c.g.k.j.b.array.ArrayBenchmark.read:read·p1.00                                                                        N/A       N/A        N/A  sample               4034.560                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A  sample   882241       169.735 ±      0.060   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.00                                                        N/A       N/A        N/A  sample                159.744                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.50                                                        N/A       N/A        N/A  sample                167.168                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.90                                                        N/A       N/A        N/A  sample                175.872                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.95                                                        N/A       N/A        N/A  sample                184.064                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.99                                                        N/A       N/A        N/A  sample                209.664                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.999                                                       N/A       N/A        N/A  sample                415.232                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p0.9999                                                      N/A       N/A        N/A  sample                526.336                us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite:readAndWrite·p1.00                                                        N/A       N/A        N/A  sample               2605.056                us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A  sample   723016       207.275 ±      0.046   us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.00                                                                        N/A       N/A        N/A  sample                202.240                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.50                                                                        N/A       N/A        N/A  sample                204.800                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.90                                                                        N/A       N/A        N/A  sample                210.688                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.95                                                                        N/A       N/A        N/A  sample                214.528                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.99                                                                        N/A       N/A        N/A  sample                228.608                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.999                                                                       N/A       N/A        N/A  sample                366.080                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p0.9999                                                                      N/A       N/A        N/A  sample                468.683                us/op
c.g.k.j.b.array.ArrayBenchmark.swap:swap·p1.00                                                                        N/A       N/A        N/A  sample               4026.368                us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A  sample   820481       182.533 ±      0.066   us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.00                                                                      N/A       N/A        N/A  sample                163.328                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.50                                                                      N/A       N/A        N/A  sample                179.712                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.90                                                                      N/A       N/A        N/A  sample                190.208                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.95                                                                      N/A       N/A        N/A  sample                197.120                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.99                                                                      N/A       N/A        N/A  sample                218.368                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.999                                                                     N/A       N/A        N/A  sample                437.760                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p0.9999                                                                    N/A       N/A        N/A  sample                549.839                us/op
c.g.k.j.b.array.ArrayBenchmark.write:write·p1.00                                                                      N/A       N/A        N/A  sample               3682.304                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A  sample      135   1226833.920 ±    726.937   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.00                                          N/A       N/A        N/A  sample            1222639.616                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.50                                          N/A       N/A        N/A  sample            1226833.920                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.90                                          N/A       N/A        N/A  sample            1229769.933                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.95                                          N/A       N/A        N/A  sample            1231028.224                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.99                                          N/A       N/A        N/A  sample            1235222.528                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.999                                         N/A       N/A        N/A  sample            1235222.528                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p0.9999                                        N/A       N/A        N/A  sample            1235222.528                us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals:sumBigDecimals·p1.00                                          N/A       N/A        N/A  sample            1235222.528                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A  sample      165    959980.861 ±   3517.193   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.00                                  N/A       100        N/A  sample             936378.368                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.50                                  N/A       100        N/A  sample             961544.192                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.90                                  N/A       100        N/A  sample             977272.832                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.95                                  N/A       100        N/A  sample             978321.408                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.99                                  N/A       100        N/A  sample             980418.560                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.999                                 N/A       100        N/A  sample             980418.560                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.9999                                N/A       100        N/A  sample             980418.560                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p1.00                                  N/A       100        N/A  sample             980418.560                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A  sample       15  17210068.173 ± 292697.811   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.00                                  N/A      1000        N/A  sample           16508780.544                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.50                                  N/A      1000        N/A  sample           17314086.912                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.90                                  N/A      1000        N/A  sample           17522124.390                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.95                                  N/A      1000        N/A  sample           17582522.368                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.99                                  N/A      1000        N/A  sample           17582522.368                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.999                                 N/A      1000        N/A  sample           17582522.368                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p0.9999                                N/A      1000        N/A  sample           17582522.368                us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase:countUppercase·p1.00                                  N/A      1000        N/A  sample           17582522.368                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A  sample  4952101         1.935 ±      0.003   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                                521       N/A        N/A  sample                  1.858                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                                521       N/A        N/A  sample                  1.882                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                                521       N/A        N/A  sample                  1.898                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                                521       N/A        N/A  sample                  1.904                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                                521       N/A        N/A  sample                  2.100                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                               521       N/A        N/A  sample                 11.776                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                              521       N/A        N/A  sample                113.354                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                                521       N/A        N/A  sample                509.952                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A  sample  3589679         5.271 ±      0.006   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                               1153       N/A        N/A  sample                  4.992                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                               1153       N/A        N/A  sample                  5.144                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                               1153       N/A        N/A  sample                  5.248                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                               1153       N/A        N/A  sample                  5.272                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                               1153       N/A        N/A  sample                  6.040                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                              1153       N/A        N/A  sample                 21.024                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                             1153       N/A        N/A  sample                164.104                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                               1153       N/A        N/A  sample               2961.408                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A  sample  4070234         9.224 ±      0.006   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.00                                               2021       N/A        N/A  sample                  8.768                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.50                                               2021       N/A        N/A  sample                  9.040                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.90                                               2021       N/A        N/A  sample                  9.200                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.95                                               2021       N/A        N/A  sample                  9.248                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.99                                               2021       N/A        N/A  sample                 13.680                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.999                                              2021       N/A        N/A  sample                 27.360                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p0.9999                                             2021       N/A        N/A  sample                172.538                us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci:runFibonacci·p1.00                                               2021       N/A        N/A  sample               3936.256                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10  sample  5949231         0.090 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A         10  sample                  0.070                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A         10  sample                  0.084                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A         10  sample                  0.101                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A         10  sample                  0.105                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A         10  sample                  0.113                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A         10  sample                  0.206                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A         10  sample                  8.913                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A         10  sample                291.328                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100  sample  3275314         0.411 ±      0.002   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A        100  sample                  0.368                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A        100  sample                  0.386                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A        100  sample                  0.399                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A        100  sample                  0.402                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A        100  sample                  0.421                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A        100  sample                  5.645                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A        100  sample                 20.960                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A        100  sample                342.016                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000  sample  4240509         4.466 ±      0.006   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.00                    N/A       N/A       1000  sample                  4.192                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.50                    N/A       N/A       1000  sample                  4.360                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.90                    N/A       N/A       1000  sample                  4.432                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.95                    N/A       N/A       1000  sample                  4.464                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.99                    N/A       N/A       1000  sample                  6.032                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.999                   N/A       N/A       1000  sample                 17.920                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p0.9999                  N/A       N/A       1000  sample                183.040                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1:findLastPrefixUsingScanner1·p1.00                    N/A       N/A       1000  sample               3076.096                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10  sample  5441997         0.085 ±      0.001   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A         10  sample                  0.072                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A         10  sample                  0.078                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A         10  sample                  0.086                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A         10  sample                  0.091                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A         10  sample                  0.101                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A         10  sample                  0.223                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A         10  sample                  9.405                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A         10  sample                284.160                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100  sample  4341914         0.444 ±      0.002   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A        100  sample                  0.404                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A        100  sample                  0.420                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A        100  sample                  0.439                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A        100  sample                  0.442                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A        100  sample                  0.459                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A        100  sample                  4.912                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A        100  sample                 18.586                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A        100  sample                268.800                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000  sample  4175894         4.531 ±      0.004   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.00                    N/A       N/A       1000  sample                  4.224                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.50                    N/A       N/A       1000  sample                  4.432                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.90                    N/A       N/A       1000  sample                  4.528                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.95                    N/A       N/A       1000  sample                  4.552                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.99                    N/A       N/A       1000  sample                  5.840                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.999                   N/A       N/A       1000  sample                 18.016                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p0.9999                  N/A       N/A       1000  sample                172.649                us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2:findLastPrefixUsingScanner2·p1.00                    N/A       N/A       1000  sample                419.840                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A  sample    10299     14567.541 ±      4.608   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.00                                  N/A       N/A        N/A  sample              14401.536                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.50                                  N/A       N/A        N/A  sample              14516.224                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.90                                  N/A       N/A        N/A  sample              14729.216                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.95                                  N/A       N/A        N/A  sample              14811.136                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.99                                  N/A       N/A        N/A  sample              15056.896                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.999                                 N/A       N/A        N/A  sample              15423.898                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p0.9999                                N/A       N/A        N/A  sample              17980.785                us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm:runAlgorithm·p1.00                                  N/A       N/A        N/A  sample              17989.632                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A  sample   430188       348.281 ±      0.221   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A       100        N/A  sample                330.240                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A       100        N/A  sample                342.016                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A       100        N/A  sample                362.496                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A       100        N/A  sample                372.224                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A       100        N/A  sample                469.048                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A       100        N/A  sample               1167.360                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A       100        N/A  sample               1372.121                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A       100        N/A  sample               3719.168                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A  sample     4266     35168.990 ±     42.849   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A      1000        N/A  sample              34275.328                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A      1000        N/A  sample              34799.616                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A      1000        N/A  sample              36700.160                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A      1000        N/A  sample              36896.768                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A      1000        N/A  sample              37289.984                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A      1000        N/A  sample              37779.276                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A      1000        N/A  sample              38010.880                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A      1000        N/A  sample              38010.880                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A  sample       45   3647273.552 ±  43057.175   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.00                                    N/A     10000        N/A  sample            3569352.704                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.50                                    N/A     10000        N/A  sample            3602907.136                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.90                                    N/A     10000        N/A  sample            3765646.131                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.95                                    N/A     10000        N/A  sample            3773615.309                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.99                                    N/A     10000        N/A  sample            3774873.600                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.999                                   N/A     10000        N/A  sample            3774873.600                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p0.9999                                  N/A     10000        N/A  sample            3774873.600                us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm:runAlgorithm·p1.00                                    N/A     10000        N/A  sample            3774873.600                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A  sample    71276      2102.804 ±      2.398   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.00             N/A       N/A        N/A  sample               1857.536                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.50             N/A       N/A        N/A  sample               2236.416                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.90             N/A       N/A        N/A  sample               2277.376                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.95             N/A       N/A        N/A  sample               2293.760                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.99             N/A       N/A        N/A  sample               2453.504                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.999            N/A       N/A        N/A  sample               2670.592                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p0.9999           N/A       N/A        N/A  sample               3021.448                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue:eliminateConditionsAlwaysTrue·p1.00             N/A       N/A        N/A  sample               6594.560                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A  sample     3204     46909.785 ±     13.192   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.00                     N/A       N/A        N/A  sample              46596.096                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.50                     N/A       N/A        N/A  sample              46858.240                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.90                     N/A       N/A        N/A  sample              47120.384                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.95                     N/A       N/A        N/A  sample              47316.992                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.99                     N/A       N/A        N/A  sample              47641.395                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.999                    N/A       N/A        N/A  sample              49740.186                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p0.9999                   N/A       N/A        N/A  sample              50987.008                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop:extractOperationOutOfLoop·p1.00                     N/A       N/A        N/A  sample              50987.008                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A  sample       90   1712068.289 ±    884.976   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.00                                                 N/A       N/A        N/A  sample            1709178.880                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.50                                                 N/A       N/A        N/A  sample            1711276.032                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.90                                                 N/A       N/A        N/A  sample            1715470.336                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.95                                                 N/A       N/A        N/A  sample            1717357.773                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.99                                                 N/A       N/A        N/A  sample            1719664.640                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.999                                                N/A       N/A        N/A  sample            1719664.640                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p0.9999                                               N/A       N/A        N/A  sample            1719664.640                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops:reduceLoops·p1.00                                                 N/A       N/A        N/A  sample            1719664.640                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A  sample  4473160         0.579 ±      0.002   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.00                       N/A       N/A        N/A  sample                  0.484                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.50                       N/A       N/A        N/A  sample                  0.548                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.90                       N/A       N/A        N/A  sample                  0.575                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.95                       N/A       N/A        N/A  sample                  0.586                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.99                       N/A       N/A        N/A  sample                  0.867                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.999                      N/A       N/A        N/A  sample                  5.783                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p0.9999                     N/A       N/A        N/A  sample                 20.598                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks:reduceSynchronizedBlocks·p1.00                       N/A       N/A        N/A  sample                504.320                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A  sample    17958      8350.571 ±      2.208   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.00                                   N/A       N/A        N/A  sample               8077.312                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.50                                   N/A       N/A        N/A  sample               8323.072                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.90                                   N/A       N/A        N/A  sample               8454.144                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.95                                   N/A       N/A        N/A  sample               8503.296                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.99                                   N/A       N/A        N/A  sample               8699.904                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.999                                  N/A       N/A        N/A  sample               8962.048                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p0.9999                                 N/A       N/A        N/A  sample              11463.134                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects:reduceYoungObjects·p1.00                                   N/A       N/A        N/A  sample              12271.616                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A  sample     4311     34818.710 ±     91.232   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.00                                             N/A       N/A        N/A  sample              31227.904                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.50                                             N/A       N/A        N/A  sample              34537.472                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.90                                             N/A       N/A        N/A  sample              37289.984                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.95                                             N/A       N/A        N/A  sample              37879.808                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.99                                             N/A       N/A        N/A  sample              38461.768                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.999                                            N/A       N/A        N/A  sample              41885.893                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p0.9999                                           N/A       N/A        N/A  sample              42795.008                us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode:redundantCode·p1.00                                             N/A       N/A        N/A  sample              42795.008                us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A  sample     4931     30451.845 ±    920.539   us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.00                                                              N/A       N/A        N/A  sample              23855.104                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.50                                                              N/A       N/A        N/A  sample              24379.392                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.90                                                              N/A       N/A        N/A  sample              42860.544                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.95                                                              N/A       N/A        N/A  sample              84279.296                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.99                                                              N/A       N/A        N/A  sample             123076.608                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.999                                                             N/A       N/A        N/A  sample             125575.889                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p0.9999                                                            N/A       N/A        N/A  sample             127008.768                us/op
c.g.k.j.b.split.SplittingListBenchmark.split:split·p1.00                                                              N/A       N/A        N/A  sample             127008.768                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A  sample     6709     22364.035 ±    357.023   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.00                                                            N/A       N/A        N/A  sample              19365.888                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.50                                                            N/A       N/A        N/A  sample              19824.640                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.90                                                            N/A       N/A        N/A  sample              21725.184                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.95                                                            N/A       N/A        N/A  sample              45547.520                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.99                                                            N/A       N/A        N/A  sample              66250.342                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.999                                                           N/A       N/A        N/A  sample              72296.694                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p0.9999                                                          N/A       N/A        N/A  sample              73924.608                us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair:mapToPair·p1.00                                                            N/A       N/A        N/A  sample              73924.608                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A  sample    11021     13609.187 ±     19.730   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.00                                                                N/A       N/A        N/A  sample              13172.736                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.50                                                                N/A       N/A        N/A  sample              13484.032                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.90                                                                N/A       N/A        N/A  sample              13746.176                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.95                                                                N/A       N/A        N/A  sample              13910.016                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.99                                                                N/A       N/A        N/A  sample              17498.112                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.999                                                               N/A       N/A        N/A  sample              17891.328                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p0.9999                                                              N/A       N/A        N/A  sample              18903.066                us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne:plusOne·p1.00                                                                N/A       N/A        N/A  sample              18939.904                us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A  sample     4575     32823.752 ±     53.377   us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.00                                                                      N/A       N/A        N/A  sample              31457.280                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.50                                                                      N/A       N/A        N/A  sample              32538.624                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.90                                                                      N/A       N/A        N/A  sample              33947.648                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.95                                                                      N/A       N/A        N/A  sample              35651.584                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.99                                                                      N/A       N/A        N/A  sample              36634.624                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.999                                                                     N/A       N/A        N/A  sample              39404.962                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p0.9999                                                                    N/A       N/A        N/A  sample              41025.536                us/op
c.g.k.j.b.stream.StreamBenchmark.sort:sort·p1.00                                                                      N/A       N/A        N/A  sample              41025.536                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A  sample   116793      1283.169 ±      1.177   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A        10        N/A  sample               1132.544                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A        10        N/A  sample               1261.568                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A        10        N/A  sample               1331.200                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A        10        N/A  sample               1374.208                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A        10        N/A  sample               2072.576                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A        10        N/A  sample               2318.336                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A        10        N/A  sample               2465.636                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A        10        N/A  sample               4341.760                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A  sample    11226     13361.022 ±     18.147   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A       100        N/A  sample              12288.000                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A       100        N/A  sample              13238.272                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A       100        N/A  sample              14188.544                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A       100        N/A  sample              14516.224                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A       100        N/A  sample              15056.896                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A       100        N/A  sample              15794.176                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A       100        N/A  sample              17211.040                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A       100        N/A  sample              17301.504                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A  sample      577    265001.688 ±  15866.116   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.00                N/A      1000        N/A  sample             228065.280                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.50                N/A      1000        N/A  sample             235405.312                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.90                N/A      1000        N/A  sample             239599.616                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.95                N/A      1000        N/A  sample             707788.800                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.99                N/A      1000        N/A  sample             714310.943                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.999               N/A      1000        N/A  sample             722468.864                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p0.9999              N/A      1000        N/A  sample             722468.864                us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings:concatenateStrings·p1.00                N/A      1000        N/A  sample             722468.864                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A  sample       90   1691492.898 ±  33347.985   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.00                        N/A       N/A        N/A  sample            1530920.960                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.50                        N/A       N/A        N/A  sample            1713373.184                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.90                        N/A       N/A        N/A  sample            1805018.726                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.95                        N/A       N/A        N/A  sample            1816867.635                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.99                        N/A       N/A        N/A  sample            1835008.000                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.999                       N/A       N/A        N/A  sample            1835008.000                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p0.9999                      N/A       N/A        N/A  sample            1835008.000                us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive:createNewObjectsWithRecursive·p1.00                        N/A       N/A        N/A  sample            1835008.000                us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A       1024      ss       15    236214.821 ±   4940.580   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A      10240      ss       15    226863.263 ±   1452.069   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A     102400      ss       15    197326.373 ±  22683.119   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A    1048576      ss       15    207041.896 ±    945.965   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A   10485760      ss       15    205920.865 ±   1727.844   us/op
c.g.k.j.b.allocation.AllocationBenchmark.createNewObjects                                                             N/A       N/A  104857600      ss       15    201716.156 ±    991.099   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A       1024      ss       15   1268386.360 ±   8947.420   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A      10240      ss       15    945008.614 ±   6091.734   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A     102400      ss       15    822801.255 ±   4594.861   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A    1048576      ss       15    812689.645 ±   6947.779   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A   10485760      ss       15    800426.834 ±   5078.659   us/op
c.g.k.j.b.allocation.AllocationBenchmark.fillHeap                                                                     N/A       N/A  104857600      ss       15    938453.359 ±   4859.027   us/op
c.g.k.j.b.array.ArrayBenchmark.read                                                                                   N/A       N/A        N/A      ss       15       565.652 ±     21.778   us/op
c.g.k.j.b.array.ArrayBenchmark.readAndWrite                                                                           N/A       N/A        N/A      ss       15       377.408 ±     21.456   us/op
c.g.k.j.b.array.ArrayBenchmark.swap                                                                                   N/A       N/A        N/A      ss       15       207.523 ±      4.917   us/op
c.g.k.j.b.array.ArrayBenchmark.write                                                                                  N/A       N/A        N/A      ss       15       473.266 ±     27.371   us/op
c.g.k.j.b.calculator.CalculatorBenchmark.sumBigDecimals                                                               N/A       N/A        N/A      ss       15    731586.549 ±   3398.386   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A       100        N/A      ss       15    769187.305 ±  13565.877   us/op
c.g.k.j.b.countuppercase.CountUppercaseBenchmark.countUppercase                                                       N/A      1000        N/A      ss       15  16271224.992 ± 268200.354   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                   521       N/A        N/A      ss       15        13.566 ±      1.958   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  1153       N/A        N/A      ss       15        17.687 ±     11.362   us/op
c.g.k.j.b.fibanacci.FibonacciBenchmark.runFibonacci                                                                  2021       N/A        N/A      ss       15        22.902 ±      3.586   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A         10      ss       15         6.076 ±      0.516   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A        100      ss       15        19.416 ±     12.093   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner1                                                      N/A       N/A       1000      ss       15       101.350 ±     49.772   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A         10      ss       15         8.570 ±      6.469   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A        100      ss       15        16.196 ±      6.453   us/op
c.g.k.j.b.findlast.FindLastBenchmark.findLastPrefixUsingScanner2                                                      N/A       N/A       1000      ss       15       107.208 ±     32.896   us/op
c.g.k.j.b.geneticalgorithm.GeneticAlgorithmBenchmark.runAlgorithm                                                     N/A       N/A        N/A      ss       15     14756.666 ±    163.129   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A       100        N/A      ss       15      1962.765 ±   2177.205   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A      1000        N/A      ss       15    110273.046 ±    945.039   us/op
c.g.k.j.b.levenshtein.LevenshteinDistanceBenchmark.runAlgorithm                                                       N/A     10000        N/A      ss       15  11071115.840 ±  17667.045   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.eliminateConditionsAlwaysTrue                                                 N/A       N/A        N/A      ss       15      1912.141 ±     17.281   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.extractOperationOutOfLoop                                                     N/A       N/A        N/A      ss       15     47017.767 ±    147.656   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceLoops                                                                   N/A       N/A        N/A      ss       15   1714843.263 ±   2464.727   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceSynchronizedBlocks                                                      N/A       N/A        N/A      ss       15        12.377 ±      3.128   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.reduceYoungObjects                                                            N/A       N/A        N/A      ss       15      8735.400 ±    485.745   us/op
c.g.k.j.b.simples.JitCompilerBenchmarks.redundantCode                                                                 N/A       N/A        N/A      ss       15     33847.354 ±   2061.672   us/op
c.g.k.j.b.split.SplittingListBenchmark.split                                                                          N/A       N/A        N/A      ss       15     24511.080 ±    210.786   us/op
c.g.k.j.b.stream.StreamBenchmark.mapToPair                                                                            N/A       N/A        N/A      ss       15     20882.361 ±    184.113   us/op
c.g.k.j.b.stream.StreamBenchmark.plusOne                                                                              N/A       N/A        N/A      ss       15     13779.446 ±    152.134   us/op
c.g.k.j.b.stream.StreamBenchmark.sort                                                                                 N/A       N/A        N/A      ss       15     33496.507 ±    759.461   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A        10        N/A      ss       15      6631.615 ±    181.122   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A       100        N/A      ss       15     63081.754 ±    828.612   us/op
c.g.k.j.b.stringconcatenation.StringConcatenationBenchmark.concatenateStrings                                         N/A      1000        N/A      ss       15    718427.558 ±   3849.398   us/op
c.g.k.j.b.tree.TreeBenchmark.createNewObjectsWithRecursive                                                            N/A       N/A        N/A      ss       15   1786069.333 ±  11083.043   us/op
