package com.github.kbreczko.jmhbenchmarks.benchmarks.array;

import org.openjdk.jmh.annotations.*;

import java.util.Random;
import java.util.concurrent.TimeUnit;
import java.util.stream.IntStream;


/**
 * Testy mają na celu sprawdzenie wydajności aplikacji podczas odczytywania, zapisywania i zamianę elemntów miejscami w tablicy.
 */
@BenchmarkMode(value = {Mode.AverageTime})
@Fork(value = 1)
@Warmup(iterations = 5)
@Measurement(iterations = 15)
@OutputTimeUnit(TimeUnit.MICROSECONDS)
public class ArrayBenchmark {

    @State(Scope.Benchmark)
    public static class Plan {
        public int[] array;
        public int[] unsortedArray;
        public int element;

        @Setup(Level.Iteration)
        public void setUp() {
            Random rn = new Random();
            array = IntStream.range(0, 1_000_000)
                    .map(value -> rn.nextInt(10) + 1)
                    .toArray();
            element = Integer.MAX_VALUE / 2;

            unsortedArray = new int[]{-123, -272, -514, 893, 524, -931, 620, 191, -857, 589, -931, 692, -155, -424, -426, -453, -243, 434, -14,
                    734, 824, 359, -677, -601, -759, -687, -633, 232, 747, -197, 471, -250, -156, 267, -17, 225, 45, 718, -925, -459, -998, -518,
                    -722, -898, 429, 844, -750, -742, 699, -847, -927, 790, 183, -683, 42, 408, 260, 628, -133, 914, 928, -935, -899, -915, 906,
                    -933, 623, 530, 360, -783, 108, 507, 491, 12, 677, 621, -313, -278, 672, 931, -755, 528, -593, 431, 557, 988, -703, -754, -29,
                    -500, 569, 138, -656, -177, 346, -8, -46, 351, 870, -384, -433, -471, 929, -314, 758, -961, -219, 265, 61, -553, -911, 209,
                    -504, -10, -691, 515, -765, 271, 800, -424, 531, 161, -637, 923, -716, 811, 865, -748, -285, 8, 602, 876, -590, -679, 49,
                    663, 10, -273, -646, -43, 425, -804, -273, -793, 759, -644, 255, 522, -572, -190, 48, -216, 536, -214, 595, -190, 485, -272,
                    -725, -286, -824, -700, -36, -394, -800, -703, 105, 315, 78, 28, 4, -681, -242, 593, 295, 79, -444, -323, 135, 6, 29, -756,
                    49, 294, -75, 191, 798, -218, -396, 607, -50, 199, -787, 827, 250, 400, 885, 81, 728, -397, 173, -237, -981, 871, -882, -369,
                    -660, 175, -199, 666, -971, 727, 545, 542, -984, -67, 878, 559, 339, 613, 356, 385, 418, 545, -822, 861, -390, 264, -815, 11,
                    -123, 489, -529, 21, -374, -204, 341, 284, 714, -501, 514, 684, 939, 567, 27, 25, 960, -539, 214, 688, 993, 134, -147, -113, 28,
                    -948, 267, 105, -944, 858, 846, 81, -775, 229, -272, -312, 776, -43, 797, 931, -648, -389, 311, 695, -186, -914, 944, -919, 294,
                    337, -958, 221, -60, -991, 903, -414, -841, 766, 436, 216, 343, -282, 268, -922, -669, 628, 415, -458, -75, 9, -387, 762, -33,
                    -930, -418, -94, -443, 553, 484, -987, 433, 284, -67, -937, -572, 249, -77, -686, 751, 264, -463, -36, -343, -758, -853, 990,
                    117, 269, 367, -352, 983, -981, 538, 475, 647, -315, 109, 671, 383, 738, 947, -34, -900, 272, 827, -766, 689, -404, -632, -52,
                    -937, 700, -121, -414, -100, 952, 823, 553, -97, -21, 631, -556, -814, 309, -351, -556, 282, 978, -411, -434, 571, -929, -216,
                    907, 679, -856, 94, -889, 42, 228, -35, 304, 127, -562, -205, -727, -605, -376, 78, -817, -900, 211, 444, -846, 484, 649, -837,
                    -407, 445, 986, 172, -931, 241, 218, 700, -520, -13, 388, -651, 520, 41, -150, -633, 196, 249, -775, -263, 660, -697, -624, -609,
                    302, -924, -141, 365, 952, 994, -197, -250, -54, 886, 591, 841, -46, 426, 269, 488, -457, 898, -559, -134, -762, -754, 855, -893,
                    -674, 731, 339, 500, -21, -793, 369, 878, -868, -508, -569, 181, -393, 194, -808, -330, -317, 533, 314, -203, -916, -455, -284,
                    -303, -279, 506, 766, 239, -915, -679, -603, -288, -908, 583, 445, 834, -925, -52, -175, -289, -94, -766, -212, 328, -951, 0,
                    -754, -757, -662, 737, -98, -920, -469, -863, -881, -78, 833, -772, -644, -157, -120, 458, 822, -360, 483, -50, -236, 181, 619,
                    826, -980, 638, 564, -109, 991, -892, -170, 23, -372, -883, -482, 967, -547, -936, -498, -591, -567, -389, -833, -101, 221,
                    -273, -186, -479, 539, 53, 694, 129, -561, 693, -498, -1000, -323, 635, 202, -6, 345, 951, 104, -223, 10, 537, -903, 377, -121,
                    530, -99, 71, 289, -702, -596, -718, -49, -300, 472, -904, -593, 319, 42, 363, -52, 119, 680, -470, -961, -643, 904, -938, -316,
                    -814, 501, 674, -936, 496, -412, 358, -792, -660, 606, 529, 390, 884, 653, 391, -985, 843, -238, 909, 594, -756, -487, 419, 528,
                    454, 880, -505, -754, 332, -982, -584, 192, -21, 827, -205, 514, -206, 128, -149, -391, 744, -663, 563, -966, -889, 345, -1000,
                    455, -724, 745, 495, 582, -383, 324, 853, 518, -685, 344, 524, -954, 411, 845, 898, -56, 33, -132, 310, 988, -637, -22, 573, -780,
                    -693, 762, -230, -422, 693, 989, -859, -854, -461, -836, 209, -166, 55, -631, -850, -866, 716, 482, 503, -486, -347, 515, -155, 761,
                    -320, -472, 941, 725, -462, 506, 10, 455, 485, -251, 159, 737, -476, 419, 975, 400, -904, -156, 129, -588, -236, 645, 10, -519, 308,
                    -516, 584, -807, -383, -157, 105, -819, -172, 956, 451, 948, -913, 282, -756, -329, -139, -505, -506, 899, -529, -483, -68, 924, -194,
                    489, 839, -323, 314, 681, -269, -685, 445, 623, 458, -488, 10, 836, 825, 655, 896, -961, -871, 460, -825, 189, -525, -136, 560, 922, 580, 993,
                    -388, 879, -582, 773, -148, -96, -980, -773, 850, 551, 733, -533, 112, 754, 160, 182, 260, 260, 541, -715, 364, 648, -587, -669, -338, -477,
                    796, -743, -799, -327, 19, -850, -860, 8, 866, -96, 541, 214, -993, 618, -730, 846, 702, -227, -789, 717, -932, 976, -313, 349, 651, 814, -126,
                    -827, -230, -814, 740, -727, 692, -87, 668, -523, 397, 80, -928, 687, -215, 58, -429, 816, -695, 59, -491, 553, -771, 542, 594, 153, -128, 593,
                    363, 209, 878, 945, 1, 958, -146, 630, -8, -498, 870, -514, -336, -299, -79, -557, -426, -405, -662, 693, 802, -1000, 788, -586, 187, -168, 179,
                    701, -423, -246, 595, -354, 652, 617, -866, -398, 728, 846, 959, -880, -902, -856, 346, 702, -534, -983, 248, 756, 615, -679, -519, -842, 964,
                    -992, -924, -937, -651, 800, -284, -81, 986, 888, 760, 151, 442, -16, 310, 236, -380, 842, -395, 898, 382, 754, -147, 771, -150, -635, 39, -251,
                    996, -511, -972, 244, -627, 842, 778, -609, -573, -540, -359, 913, -852, 147, -485, -348, -266, -798, 975, 181, 477, 969, -50, -552, -98, -480, 88,
                    -937, -710, 370, -769, 368, 76, -47, 181, -36, 102, 664, -812, 204, 915, -111, 806, -935, 373, 136, -605, -724, -317, 218, 362, -684, 762, -719, 855,
                    993, -358, 969, -466, -13, 660, -578, -991, 378, -303, -63, 745, -480, 410, 586, -599, -74, -369, -777, -116, 514, 599, -658, 156, 585, -904, 849, 20, 496};
        }
    }

    @Benchmark
    public long read(Plan plan) {
        long sum = 0;
        for (int i = 0; i < plan.array.length; i++) {
            sum += plan.array[i];
        }
        return sum;
    }

    @Benchmark
    public int[] write(Plan plan) {
        for (int i = 0; i < plan.array.length; i++) {
            plan.array[i] = plan.element;
        }
        return plan.array;
    }

    @Benchmark
    public int[] readAndWrite(Plan plan) {
        for (int i = 0; i < plan.array.length; i++) {
            plan.array[i] = plan.element + plan.array[i];
        }
        return plan.array;
    }

    @Benchmark
    public int[] swap(Plan plan) {
        final int[] unsortedArray = plan.unsortedArray;
        final int length = unsortedArray.length;

        for (int i = 0; i < length; i++) {
            for (int j = 1; j < (length - i); j++) {
                if (unsortedArray[j - 1] > unsortedArray[j]) {
                    final int temp = unsortedArray[j - 1];
                    unsortedArray[j - 1] = unsortedArray[j];
                    unsortedArray[j] = temp;
                }
            }
        }
        return unsortedArray;
    }

}